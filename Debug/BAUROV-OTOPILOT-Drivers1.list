
BAUROV-OTOPILOT-Drivers1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c1fc  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001568  0801c400  0801c400  0001d400  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d968  0801d968  0001f944  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801d968  0801d968  0001e968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d970  0801d970  0001f944  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000018  0801d970  0801d970  0001e970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801d988  0801d988  0001e988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000944  20000000  0801d98c  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000eb54  20000948  0801e2d0  0001f948  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000f49c  0801e2d0  0002049c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001f944  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002811c  00000000  00000000  0001f972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005711  00000000  00000000  00047a8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f98  00000000  00000000  0004d1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000187e  00000000  00000000  0004f138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f8c4  00000000  00000000  000509b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000288f2  00000000  00000000  0008027a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118de0  00000000  00000000  000a8b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001c194c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000912c  00000000  00000000  001c19c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  001caaf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000948 	.word	0x20000948
 800021c:	00000000 	.word	0x00000000
 8000220:	0801c3e4 	.word	0x0801c3e4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000094c 	.word	0x2000094c
 800023c:	0801c3e4 	.word	0x0801c3e4

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800032e:	f000 b9d3 	b.w	80006d8 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003c4:	f000 b988 	b.w	80006d8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	468e      	mov	lr, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	4688      	mov	r8, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d962      	bls.n	80004bc <__udivmoddi4+0xdc>
 80003f6:	fab2 f682 	clz	r6, r2
 80003fa:	b14e      	cbz	r6, 8000410 <__udivmoddi4+0x30>
 80003fc:	f1c6 0320 	rsb	r3, r6, #32
 8000400:	fa01 f806 	lsl.w	r8, r1, r6
 8000404:	fa20 f303 	lsr.w	r3, r0, r3
 8000408:	40b7      	lsls	r7, r6
 800040a:	ea43 0808 	orr.w	r8, r3, r8
 800040e:	40b4      	lsls	r4, r6
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	fa1f fc87 	uxth.w	ip, r7
 8000418:	fbb8 f1fe 	udiv	r1, r8, lr
 800041c:	0c23      	lsrs	r3, r4, #16
 800041e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fb01 f20c 	mul.w	r2, r1, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d909      	bls.n	8000442 <__udivmoddi4+0x62>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000434:	f080 80ea 	bcs.w	800060c <__udivmoddi4+0x22c>
 8000438:	429a      	cmp	r2, r3
 800043a:	f240 80e7 	bls.w	800060c <__udivmoddi4+0x22c>
 800043e:	3902      	subs	r1, #2
 8000440:	443b      	add	r3, r7
 8000442:	1a9a      	subs	r2, r3, r2
 8000444:	b2a3      	uxth	r3, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000452:	fb00 fc0c 	mul.w	ip, r0, ip
 8000456:	459c      	cmp	ip, r3
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x8e>
 800045a:	18fb      	adds	r3, r7, r3
 800045c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000460:	f080 80d6 	bcs.w	8000610 <__udivmoddi4+0x230>
 8000464:	459c      	cmp	ip, r3
 8000466:	f240 80d3 	bls.w	8000610 <__udivmoddi4+0x230>
 800046a:	443b      	add	r3, r7
 800046c:	3802      	subs	r0, #2
 800046e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000472:	eba3 030c 	sub.w	r3, r3, ip
 8000476:	2100      	movs	r1, #0
 8000478:	b11d      	cbz	r5, 8000482 <__udivmoddi4+0xa2>
 800047a:	40f3      	lsrs	r3, r6
 800047c:	2200      	movs	r2, #0
 800047e:	e9c5 3200 	strd	r3, r2, [r5]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d905      	bls.n	8000496 <__udivmoddi4+0xb6>
 800048a:	b10d      	cbz	r5, 8000490 <__udivmoddi4+0xb0>
 800048c:	e9c5 0100 	strd	r0, r1, [r5]
 8000490:	2100      	movs	r1, #0
 8000492:	4608      	mov	r0, r1
 8000494:	e7f5      	b.n	8000482 <__udivmoddi4+0xa2>
 8000496:	fab3 f183 	clz	r1, r3
 800049a:	2900      	cmp	r1, #0
 800049c:	d146      	bne.n	800052c <__udivmoddi4+0x14c>
 800049e:	4573      	cmp	r3, lr
 80004a0:	d302      	bcc.n	80004a8 <__udivmoddi4+0xc8>
 80004a2:	4282      	cmp	r2, r0
 80004a4:	f200 8105 	bhi.w	80006b2 <__udivmoddi4+0x2d2>
 80004a8:	1a84      	subs	r4, r0, r2
 80004aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80004ae:	2001      	movs	r0, #1
 80004b0:	4690      	mov	r8, r2
 80004b2:	2d00      	cmp	r5, #0
 80004b4:	d0e5      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004b6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ba:	e7e2      	b.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	2a00      	cmp	r2, #0
 80004be:	f000 8090 	beq.w	80005e2 <__udivmoddi4+0x202>
 80004c2:	fab2 f682 	clz	r6, r2
 80004c6:	2e00      	cmp	r6, #0
 80004c8:	f040 80a4 	bne.w	8000614 <__udivmoddi4+0x234>
 80004cc:	1a8a      	subs	r2, r1, r2
 80004ce:	0c03      	lsrs	r3, r0, #16
 80004d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004d4:	b280      	uxth	r0, r0
 80004d6:	b2bc      	uxth	r4, r7
 80004d8:	2101      	movs	r1, #1
 80004da:	fbb2 fcfe 	udiv	ip, r2, lr
 80004de:	fb0e 221c 	mls	r2, lr, ip, r2
 80004e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004e6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ea:	429a      	cmp	r2, r3
 80004ec:	d907      	bls.n	80004fe <__udivmoddi4+0x11e>
 80004ee:	18fb      	adds	r3, r7, r3
 80004f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x11c>
 80004f6:	429a      	cmp	r2, r3
 80004f8:	f200 80e0 	bhi.w	80006bc <__udivmoddi4+0x2dc>
 80004fc:	46c4      	mov	ip, r8
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	fbb3 f2fe 	udiv	r2, r3, lr
 8000504:	fb0e 3312 	mls	r3, lr, r2, r3
 8000508:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800050c:	fb02 f404 	mul.w	r4, r2, r4
 8000510:	429c      	cmp	r4, r3
 8000512:	d907      	bls.n	8000524 <__udivmoddi4+0x144>
 8000514:	18fb      	adds	r3, r7, r3
 8000516:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800051a:	d202      	bcs.n	8000522 <__udivmoddi4+0x142>
 800051c:	429c      	cmp	r4, r3
 800051e:	f200 80ca 	bhi.w	80006b6 <__udivmoddi4+0x2d6>
 8000522:	4602      	mov	r2, r0
 8000524:	1b1b      	subs	r3, r3, r4
 8000526:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800052a:	e7a5      	b.n	8000478 <__udivmoddi4+0x98>
 800052c:	f1c1 0620 	rsb	r6, r1, #32
 8000530:	408b      	lsls	r3, r1
 8000532:	fa22 f706 	lsr.w	r7, r2, r6
 8000536:	431f      	orrs	r7, r3
 8000538:	fa0e f401 	lsl.w	r4, lr, r1
 800053c:	fa20 f306 	lsr.w	r3, r0, r6
 8000540:	fa2e fe06 	lsr.w	lr, lr, r6
 8000544:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000548:	4323      	orrs	r3, r4
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	fa1f fc87 	uxth.w	ip, r7
 8000552:	fbbe f0f9 	udiv	r0, lr, r9
 8000556:	0c1c      	lsrs	r4, r3, #16
 8000558:	fb09 ee10 	mls	lr, r9, r0, lr
 800055c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000560:	fb00 fe0c 	mul.w	lr, r0, ip
 8000564:	45a6      	cmp	lr, r4
 8000566:	fa02 f201 	lsl.w	r2, r2, r1
 800056a:	d909      	bls.n	8000580 <__udivmoddi4+0x1a0>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000572:	f080 809c 	bcs.w	80006ae <__udivmoddi4+0x2ce>
 8000576:	45a6      	cmp	lr, r4
 8000578:	f240 8099 	bls.w	80006ae <__udivmoddi4+0x2ce>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	eba4 040e 	sub.w	r4, r4, lr
 8000584:	fa1f fe83 	uxth.w	lr, r3
 8000588:	fbb4 f3f9 	udiv	r3, r4, r9
 800058c:	fb09 4413 	mls	r4, r9, r3, r4
 8000590:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000594:	fb03 fc0c 	mul.w	ip, r3, ip
 8000598:	45a4      	cmp	ip, r4
 800059a:	d908      	bls.n	80005ae <__udivmoddi4+0x1ce>
 800059c:	193c      	adds	r4, r7, r4
 800059e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80005a2:	f080 8082 	bcs.w	80006aa <__udivmoddi4+0x2ca>
 80005a6:	45a4      	cmp	ip, r4
 80005a8:	d97f      	bls.n	80006aa <__udivmoddi4+0x2ca>
 80005aa:	3b02      	subs	r3, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005b2:	eba4 040c 	sub.w	r4, r4, ip
 80005b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ba:	4564      	cmp	r4, ip
 80005bc:	4673      	mov	r3, lr
 80005be:	46e1      	mov	r9, ip
 80005c0:	d362      	bcc.n	8000688 <__udivmoddi4+0x2a8>
 80005c2:	d05f      	beq.n	8000684 <__udivmoddi4+0x2a4>
 80005c4:	b15d      	cbz	r5, 80005de <__udivmoddi4+0x1fe>
 80005c6:	ebb8 0203 	subs.w	r2, r8, r3
 80005ca:	eb64 0409 	sbc.w	r4, r4, r9
 80005ce:	fa04 f606 	lsl.w	r6, r4, r6
 80005d2:	fa22 f301 	lsr.w	r3, r2, r1
 80005d6:	431e      	orrs	r6, r3
 80005d8:	40cc      	lsrs	r4, r1
 80005da:	e9c5 6400 	strd	r6, r4, [r5]
 80005de:	2100      	movs	r1, #0
 80005e0:	e74f      	b.n	8000482 <__udivmoddi4+0xa2>
 80005e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005e6:	0c01      	lsrs	r1, r0, #16
 80005e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005ec:	b280      	uxth	r0, r0
 80005ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005f2:	463b      	mov	r3, r7
 80005f4:	4638      	mov	r0, r7
 80005f6:	463c      	mov	r4, r7
 80005f8:	46b8      	mov	r8, r7
 80005fa:	46be      	mov	lr, r7
 80005fc:	2620      	movs	r6, #32
 80005fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000602:	eba2 0208 	sub.w	r2, r2, r8
 8000606:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800060a:	e766      	b.n	80004da <__udivmoddi4+0xfa>
 800060c:	4601      	mov	r1, r0
 800060e:	e718      	b.n	8000442 <__udivmoddi4+0x62>
 8000610:	4610      	mov	r0, r2
 8000612:	e72c      	b.n	800046e <__udivmoddi4+0x8e>
 8000614:	f1c6 0220 	rsb	r2, r6, #32
 8000618:	fa2e f302 	lsr.w	r3, lr, r2
 800061c:	40b7      	lsls	r7, r6
 800061e:	40b1      	lsls	r1, r6
 8000620:	fa20 f202 	lsr.w	r2, r0, r2
 8000624:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000628:	430a      	orrs	r2, r1
 800062a:	fbb3 f8fe 	udiv	r8, r3, lr
 800062e:	b2bc      	uxth	r4, r7
 8000630:	fb0e 3318 	mls	r3, lr, r8, r3
 8000634:	0c11      	lsrs	r1, r2, #16
 8000636:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800063a:	fb08 f904 	mul.w	r9, r8, r4
 800063e:	40b0      	lsls	r0, r6
 8000640:	4589      	cmp	r9, r1
 8000642:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000646:	b280      	uxth	r0, r0
 8000648:	d93e      	bls.n	80006c8 <__udivmoddi4+0x2e8>
 800064a:	1879      	adds	r1, r7, r1
 800064c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000650:	d201      	bcs.n	8000656 <__udivmoddi4+0x276>
 8000652:	4589      	cmp	r9, r1
 8000654:	d81f      	bhi.n	8000696 <__udivmoddi4+0x2b6>
 8000656:	eba1 0109 	sub.w	r1, r1, r9
 800065a:	fbb1 f9fe 	udiv	r9, r1, lr
 800065e:	fb09 f804 	mul.w	r8, r9, r4
 8000662:	fb0e 1119 	mls	r1, lr, r9, r1
 8000666:	b292      	uxth	r2, r2
 8000668:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800066c:	4542      	cmp	r2, r8
 800066e:	d229      	bcs.n	80006c4 <__udivmoddi4+0x2e4>
 8000670:	18ba      	adds	r2, r7, r2
 8000672:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000676:	d2c4      	bcs.n	8000602 <__udivmoddi4+0x222>
 8000678:	4542      	cmp	r2, r8
 800067a:	d2c2      	bcs.n	8000602 <__udivmoddi4+0x222>
 800067c:	f1a9 0102 	sub.w	r1, r9, #2
 8000680:	443a      	add	r2, r7
 8000682:	e7be      	b.n	8000602 <__udivmoddi4+0x222>
 8000684:	45f0      	cmp	r8, lr
 8000686:	d29d      	bcs.n	80005c4 <__udivmoddi4+0x1e4>
 8000688:	ebbe 0302 	subs.w	r3, lr, r2
 800068c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000690:	3801      	subs	r0, #1
 8000692:	46e1      	mov	r9, ip
 8000694:	e796      	b.n	80005c4 <__udivmoddi4+0x1e4>
 8000696:	eba7 0909 	sub.w	r9, r7, r9
 800069a:	4449      	add	r1, r9
 800069c:	f1a8 0c02 	sub.w	ip, r8, #2
 80006a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a4:	fb09 f804 	mul.w	r8, r9, r4
 80006a8:	e7db      	b.n	8000662 <__udivmoddi4+0x282>
 80006aa:	4673      	mov	r3, lr
 80006ac:	e77f      	b.n	80005ae <__udivmoddi4+0x1ce>
 80006ae:	4650      	mov	r0, sl
 80006b0:	e766      	b.n	8000580 <__udivmoddi4+0x1a0>
 80006b2:	4608      	mov	r0, r1
 80006b4:	e6fd      	b.n	80004b2 <__udivmoddi4+0xd2>
 80006b6:	443b      	add	r3, r7
 80006b8:	3a02      	subs	r2, #2
 80006ba:	e733      	b.n	8000524 <__udivmoddi4+0x144>
 80006bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006c0:	443b      	add	r3, r7
 80006c2:	e71c      	b.n	80004fe <__udivmoddi4+0x11e>
 80006c4:	4649      	mov	r1, r9
 80006c6:	e79c      	b.n	8000602 <__udivmoddi4+0x222>
 80006c8:	eba1 0109 	sub.w	r1, r1, r9
 80006cc:	46c4      	mov	ip, r8
 80006ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80006d2:	fb09 f804 	mul.w	r8, r9, r4
 80006d6:	e7c4      	b.n	8000662 <__udivmoddi4+0x282>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <AVG_Filter_s16>:
 * GLOBAL FUNCTIONS
 *********************************************************/
/** Brief description which ends at this dot. Details follow
 *  here.
 */
void AVG_Filter_s16(AVG_Filter_s16_TypeDef_T *handle, int16_t data){
 80006dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80006e0:	b086      	sub	sp, #24
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
 80006e6:	460b      	mov	r3, r1
 80006e8:	807b      	strh	r3, [r7, #2]
	int64_t sum = 0;
 80006ea:	f04f 0200 	mov.w	r2, #0
 80006ee:	f04f 0300 	mov.w	r3, #0
 80006f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	handle->AVG_FilterBuffer[handle->AVG_FilterCounter++] = data;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	899b      	ldrh	r3, [r3, #12]
 80006fa:	1c5a      	adds	r2, r3, #1
 80006fc:	b291      	uxth	r1, r2
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	8191      	strh	r1, [r2, #12]
 8000702:	4619      	mov	r1, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	887a      	ldrh	r2, [r7, #2]
 8000708:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	if(handle->AVG_FilterCounter == AVG_FilterBufferSize){
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	899b      	ldrh	r3, [r3, #12]
 8000710:	2b04      	cmp	r3, #4
 8000712:	d13e      	bne.n	8000792 <AVG_Filter_s16+0xb6>
		for(uint8_t i=0; i<AVG_FilterBufferSize; i++)
 8000714:	2300      	movs	r3, #0
 8000716:	73fb      	strb	r3, [r7, #15]
 8000718:	e012      	b.n	8000740 <AVG_Filter_s16+0x64>
			sum += handle->AVG_FilterBuffer[i];
 800071a:	7bfa      	ldrb	r2, [r7, #15]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000722:	b21b      	sxth	r3, r3
 8000724:	17da      	asrs	r2, r3, #31
 8000726:	461c      	mov	r4, r3
 8000728:	4615      	mov	r5, r2
 800072a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800072e:	eb12 0804 	adds.w	r8, r2, r4
 8000732:	eb43 0905 	adc.w	r9, r3, r5
 8000736:	e9c7 8904 	strd	r8, r9, [r7, #16]
		for(uint8_t i=0; i<AVG_FilterBufferSize; i++)
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	3301      	adds	r3, #1
 800073e:	73fb      	strb	r3, [r7, #15]
 8000740:	7bfb      	ldrb	r3, [r7, #15]
 8000742:	2b03      	cmp	r3, #3
 8000744:	d9e9      	bls.n	800071a <AVG_Filter_s16+0x3e>

		handle->AVG_FilteredData = (int16_t)(sum/AVG_FilterBufferSize);
 8000746:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800074a:	2b00      	cmp	r3, #0
 800074c:	da05      	bge.n	800075a <AVG_Filter_s16+0x7e>
 800074e:	f112 0a03 	adds.w	sl, r2, #3
 8000752:	f143 0b00 	adc.w	fp, r3, #0
 8000756:	4652      	mov	r2, sl
 8000758:	465b      	mov	r3, fp
 800075a:	f04f 0000 	mov.w	r0, #0
 800075e:	f04f 0100 	mov.w	r1, #0
 8000762:	0890      	lsrs	r0, r2, #2
 8000764:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8000768:	1099      	asrs	r1, r3, #2
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	b212      	sxth	r2, r2
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	811a      	strh	r2, [r3, #8]
		handle->AVG_FilteredPreData = handle->AVG_FilteredData;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	815a      	strh	r2, [r3, #10]
		handle->AVG_FilterCounter = 0;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2200      	movs	r2, #0
 8000782:	819a      	strh	r2, [r3, #12]
		memset(handle->AVG_FilterBuffer, 0, sizeof(handle->AVG_FilterBuffer));
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2208      	movs	r2, #8
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f01a ff24 	bl	801b5d8 <memset>
	}else{
		handle->AVG_FilteredData=handle->AVG_FilteredPreData;
	}
}
 8000790:	e004      	b.n	800079c <AVG_Filter_s16+0xc0>
		handle->AVG_FilteredData=handle->AVG_FilteredPreData;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	811a      	strh	r2, [r3, #8]
}
 800079c:	bf00      	nop
 800079e:	3718      	adds	r7, #24
 80007a0:	46bd      	mov	sp, r7
 80007a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080007a6 <MED_Filter_SortArray_s16>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
static void MED_Filter_SortArray_s16(int16_t* arr, uint8_t size) {
 80007a6:	b480      	push	{r7}
 80007a8:	b085      	sub	sp, #20
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
 80007ae:	460b      	mov	r3, r1
 80007b0:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < size - 1; i++) {
 80007b2:	2300      	movs	r3, #0
 80007b4:	73fb      	strb	r3, [r7, #15]
 80007b6:	e032      	b.n	800081e <MED_Filter_SortArray_s16+0x78>
        for (uint8_t j = i + 1; j < size; j++) {
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	3301      	adds	r3, #1
 80007bc:	73bb      	strb	r3, [r7, #14]
 80007be:	e027      	b.n	8000810 <MED_Filter_SortArray_s16+0x6a>
            if (arr[j] < arr[i]) {
 80007c0:	7bbb      	ldrb	r3, [r7, #14]
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	4413      	add	r3, r2
 80007c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	6879      	ldr	r1, [r7, #4]
 80007d2:	440b      	add	r3, r1
 80007d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007d8:	429a      	cmp	r2, r3
 80007da:	da16      	bge.n	800080a <MED_Filter_SortArray_s16+0x64>
                int16_t tmp = arr[i];
 80007dc:	7bfb      	ldrb	r3, [r7, #15]
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	4413      	add	r3, r2
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	81bb      	strh	r3, [r7, #12]
                arr[i] = arr[j];
 80007e8:	7bbb      	ldrb	r3, [r7, #14]
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	441a      	add	r2, r3
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	6879      	ldr	r1, [r7, #4]
 80007f6:	440b      	add	r3, r1
 80007f8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80007fc:	801a      	strh	r2, [r3, #0]
                arr[j] = tmp;
 80007fe:	7bbb      	ldrb	r3, [r7, #14]
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	4413      	add	r3, r2
 8000806:	89ba      	ldrh	r2, [r7, #12]
 8000808:	801a      	strh	r2, [r3, #0]
        for (uint8_t j = i + 1; j < size; j++) {
 800080a:	7bbb      	ldrb	r3, [r7, #14]
 800080c:	3301      	adds	r3, #1
 800080e:	73bb      	strb	r3, [r7, #14]
 8000810:	7bba      	ldrb	r2, [r7, #14]
 8000812:	78fb      	ldrb	r3, [r7, #3]
 8000814:	429a      	cmp	r2, r3
 8000816:	d3d3      	bcc.n	80007c0 <MED_Filter_SortArray_s16+0x1a>
    for (uint8_t i = 0; i < size - 1; i++) {
 8000818:	7bfb      	ldrb	r3, [r7, #15]
 800081a:	3301      	adds	r3, #1
 800081c:	73fb      	strb	r3, [r7, #15]
 800081e:	7bfa      	ldrb	r2, [r7, #15]
 8000820:	78fb      	ldrb	r3, [r7, #3]
 8000822:	3b01      	subs	r3, #1
 8000824:	429a      	cmp	r2, r3
 8000826:	dbc7      	blt.n	80007b8 <MED_Filter_SortArray_s16+0x12>
            }
        }
    }
}
 8000828:	bf00      	nop
 800082a:	bf00      	nop
 800082c:	3714      	adds	r7, #20
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <MED_Filter_s16>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
void MED_Filter_s16(MED_Filter_s16_TypeDef_T *handle, int16_t data){
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
 800083e:	460b      	mov	r3, r1
 8000840:	807b      	strh	r3, [r7, #2]
	handle->MED_FilterBuffer[handle->MED_FilterCounter++] = data;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	89db      	ldrh	r3, [r3, #14]
 8000846:	1c5a      	adds	r2, r3, #1
 8000848:	b291      	uxth	r1, r2
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	81d1      	strh	r1, [r2, #14]
 800084e:	4619      	mov	r1, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	887a      	ldrh	r2, [r7, #2]
 8000854:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	if(handle->MED_FilterCounter == MED_FilterBufferSize){
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	89db      	ldrh	r3, [r3, #14]
 800085c:	2b05      	cmp	r3, #5
 800085e:	d118      	bne.n	8000892 <MED_Filter_s16+0x5c>
		MED_Filter_SortArray_s16(handle->MED_FilterBuffer, MED_FilterBufferSize);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2105      	movs	r1, #5
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff9e 	bl	80007a6 <MED_Filter_SortArray_s16>
		handle->MED_FilteredData = handle->MED_FilterBuffer[(MED_FilterBufferSize-1)/2];
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	815a      	strh	r2, [r3, #10]
		handle->MED_FilteredPreData = handle->MED_FilteredData;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	819a      	strh	r2, [r3, #12]
		handle->MED_FilterCounter = 0;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2200      	movs	r2, #0
 8000882:	81da      	strh	r2, [r3, #14]
		memset(handle->MED_FilterBuffer, 0, sizeof(handle->MED_FilterBuffer));
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	220a      	movs	r2, #10
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f01a fea4 	bl	801b5d8 <memset>
	}else{
		handle->MED_FilteredData=handle->MED_FilteredPreData;
	}
}
 8000890:	e004      	b.n	800089c <MED_Filter_s16+0x66>
		handle->MED_FilteredData=handle->MED_FilteredPreData;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	815a      	strh	r2, [r3, #10]
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <I2C_Init>:
 * GLOBAL FUNCTIONS
 *********************************************************/
/** Brief description which ends at this dot. Details follow
 *  here.
 */
void I2C_Init(void *handle, uint8_t I2CNo){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	460b      	mov	r3, r1
 80008ae:	70fb      	strb	r3, [r7, #3]
	I2C_HandleTypeDef_T *i2c;
	i2c = I2C_GetModule(I2CNo);
 80008b0:	78fb      	ldrb	r3, [r7, #3]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 f862 	bl	800097c <I2C_GetModule>
 80008b8:	60f8      	str	r0, [r7, #12]
    i2c->handle = handle;
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	601a      	str	r2, [r3, #0]
}
 80008c0:	bf00      	nop
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <I2C_ReadWrite_Poll>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
I2C_ReturnTypeDef_T I2C_ReadWrite_Poll(uint8_t I2CNo, uint8_t DevAddress, uint8_t *txBuff, uint8_t txLenght, uint8_t *rxBuff, uint8_t rxLenght){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b088      	sub	sp, #32
 80008cc:	af02      	add	r7, sp, #8
 80008ce:	603a      	str	r2, [r7, #0]
 80008d0:	461a      	mov	r2, r3
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
 80008d6:	460b      	mov	r3, r1
 80008d8:	71bb      	strb	r3, [r7, #6]
 80008da:	4613      	mov	r3, r2
 80008dc:	717b      	strb	r3, [r7, #5]
	I2C_HandleTypeDef_T *i2c;
	HAL_StatusTypeDef res;
	uint8_t txAddr, rxAddr;
	txAddr = DevAddress<<1;
 80008de:	79bb      	ldrb	r3, [r7, #6]
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	75fb      	strb	r3, [r7, #23]
	rxAddr = ((DevAddress<<1) | 0x01);
 80008e4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	b25b      	sxtb	r3, r3
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	b25b      	sxtb	r3, r3
 80008f2:	75bb      	strb	r3, [r7, #22]
	i2c = I2C_GetModule(I2CNo);
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 f840 	bl	800097c <I2C_GetModule>
 80008fc:	6138      	str	r0, [r7, #16]
	if(rxLenght == 0){
 80008fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000902:	2b00      	cmp	r3, #0
 8000904:	d113      	bne.n	800092e <I2C_ReadWrite_Poll+0x66>
		res = HAL_I2C_Master_Transmit(i2c->handle , txAddr, txBuff, txLenght,100);
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	6818      	ldr	r0, [r3, #0]
 800090a:	7dfb      	ldrb	r3, [r7, #23]
 800090c:	b299      	uxth	r1, r3
 800090e:	797b      	ldrb	r3, [r7, #5]
 8000910:	b29b      	uxth	r3, r3
 8000912:	2264      	movs	r2, #100	@ 0x64
 8000914:	9200      	str	r2, [sp, #0]
 8000916:	683a      	ldr	r2, [r7, #0]
 8000918:	f004 fad0 	bl	8004ebc <HAL_I2C_Master_Transmit>
 800091c:	4603      	mov	r3, r0
 800091e:	73fb      	strb	r3, [r7, #15]
		return res == I2C_ERROR;
 8000920:	7bfb      	ldrb	r3, [r7, #15]
 8000922:	2b01      	cmp	r3, #1
 8000924:	bf0c      	ite	eq
 8000926:	2301      	moveq	r3, #1
 8000928:	2300      	movne	r3, #0
 800092a:	b2db      	uxtb	r3, r3
 800092c:	e021      	b.n	8000972 <I2C_ReadWrite_Poll+0xaa>
	}else{
		HAL_I2C_Master_Transmit(i2c->handle , txAddr, txBuff, txLenght,100);
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	6818      	ldr	r0, [r3, #0]
 8000932:	7dfb      	ldrb	r3, [r7, #23]
 8000934:	b299      	uxth	r1, r3
 8000936:	797b      	ldrb	r3, [r7, #5]
 8000938:	b29b      	uxth	r3, r3
 800093a:	2264      	movs	r2, #100	@ 0x64
 800093c:	9200      	str	r2, [sp, #0]
 800093e:	683a      	ldr	r2, [r7, #0]
 8000940:	f004 fabc 	bl	8004ebc <HAL_I2C_Master_Transmit>
		HAL_Delay(1);
 8000944:	2001      	movs	r0, #1
 8000946:	f002 f9b7 	bl	8002cb8 <HAL_Delay>
		res = HAL_I2C_Master_Receive(i2c->handle, rxAddr, rxBuff, rxLenght,100);
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	6818      	ldr	r0, [r3, #0]
 800094e:	7dbb      	ldrb	r3, [r7, #22]
 8000950:	b299      	uxth	r1, r3
 8000952:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000956:	b29b      	uxth	r3, r3
 8000958:	2264      	movs	r2, #100	@ 0x64
 800095a:	9200      	str	r2, [sp, #0]
 800095c:	6a3a      	ldr	r2, [r7, #32]
 800095e:	f004 fbc5 	bl	80050ec <HAL_I2C_Master_Receive>
 8000962:	4603      	mov	r3, r0
 8000964:	73fb      	strb	r3, [r7, #15]
		return res == I2C_ERROR;
 8000966:	7bfb      	ldrb	r3, [r7, #15]
 8000968:	2b01      	cmp	r3, #1
 800096a:	bf0c      	ite	eq
 800096c:	2301      	moveq	r3, #1
 800096e:	2300      	movne	r3, #0
 8000970:	b2db      	uxtb	r3, r3
	}
}
 8000972:	4618      	mov	r0, r3
 8000974:	3718      	adds	r7, #24
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <I2C_GetModule>:
 * PRIVATE FUNCTIONS
 *********************************************************/
/** Brief description which ends at this dot. Details follow
 *  here.
 */
I2C_HandleTypeDef_T* I2C_GetModule(uint8_t I2CNo){
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
	switch(I2CNo){
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	2b03      	cmp	r3, #3
 800098a:	d00a      	beq.n	80009a2 <I2C_GetModule+0x26>
 800098c:	2b03      	cmp	r3, #3
 800098e:	dc0a      	bgt.n	80009a6 <I2C_GetModule+0x2a>
 8000990:	2b01      	cmp	r3, #1
 8000992:	d002      	beq.n	800099a <I2C_GetModule+0x1e>
 8000994:	2b02      	cmp	r3, #2
 8000996:	d002      	beq.n	800099e <I2C_GetModule+0x22>
 8000998:	e005      	b.n	80009a6 <I2C_GetModule+0x2a>
		case I2CNO_1 : return &I2C_1; break;
 800099a:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <I2C_GetModule+0x38>)
 800099c:	e004      	b.n	80009a8 <I2C_GetModule+0x2c>
		case I2CNO_2 : return &I2C_2; break;
 800099e:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <I2C_GetModule+0x3c>)
 80009a0:	e002      	b.n	80009a8 <I2C_GetModule+0x2c>
		case I2CNO_3 : return &I2C_3; break;
 80009a2:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <I2C_GetModule+0x40>)
 80009a4:	e000      	b.n	80009a8 <I2C_GetModule+0x2c>
		default : return NULL; break;
 80009a6:	2300      	movs	r3, #0
	}
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	20000c14 	.word	0x20000c14
 80009b8:	20000c1c 	.word	0x20000c1c
 80009bc:	20000c24 	.word	0x20000c24

080009c0 <PWM_Init>:
#include "stm32f7xx_hal_tim.h"
#include "PWM.h"

PWM_HandleTypeDef_T THRUSTER_Vert_R, THRUSTER_Vert_L, THRUSTER_Horz_R, THRUSTER_Horz_L;

void PWM_Init(PWM_HandleTypeDef_T *handle, void* timerHandle, uint32_t timerChannel, uint16_t PWM_Min, uint16_t PWM_Max, uint16_t PWM_Notr){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
 80009cc:	807b      	strh	r3, [r7, #2]
	handle->handle = timerHandle;
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	68ba      	ldr	r2, [r7, #8]
 80009d2:	601a      	str	r2, [r3, #0]
	handle->TimerChannelNo = timerChannel;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	609a      	str	r2, [r3, #8]
	handle->PWM_Min = PWM_Min;
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	887a      	ldrh	r2, [r7, #2]
 80009de:	82da      	strh	r2, [r3, #22]
	handle->PWM_Max = PWM_Max;
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	8b3a      	ldrh	r2, [r7, #24]
 80009e4:	829a      	strh	r2, [r3, #20]
	handle->PWM_Notr = PWM_Notr;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	8bba      	ldrh	r2, [r7, #28]
 80009ea:	831a      	strh	r2, [r3, #24]
    handle->PWM = handle->PWM_Notr;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	8b1a      	ldrh	r2, [r3, #24]
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	819a      	strh	r2, [r3, #12]
	PWM_SetPulse(handle);
 80009f4:	68f8      	ldr	r0, [r7, #12]
 80009f6:	f000 f804 	bl	8000a02 <PWM_SetPulse>
}
 80009fa:	bf00      	nop
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <PWM_SetPulse>:

void PWM_SetPulse(PWM_HandleTypeDef_T *handle)
{
 8000a02:	b480      	push	{r7}
 8000a04:	b083      	sub	sp, #12
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
    if (handle->PWM < handle->PWM_Min) handle->PWM = handle->PWM_Min;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	899b      	ldrh	r3, [r3, #12]
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	8adb      	ldrh	r3, [r3, #22]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d203      	bcs.n	8000a20 <PWM_SetPulse+0x1e>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	8ada      	ldrh	r2, [r3, #22]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	819a      	strh	r2, [r3, #12]
    if (handle->PWM > handle->PWM_Max) handle->PWM = handle->PWM_Max;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	899b      	ldrh	r3, [r3, #12]
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	8a9b      	ldrh	r3, [r3, #20]
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	d903      	bls.n	8000a36 <PWM_SetPulse+0x34>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	8a9a      	ldrh	r2, [r3, #20]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	819a      	strh	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE((TIM_HandleTypeDef*)handle->handle, handle->TimerChannelNo, handle->PWM);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	689b      	ldr	r3, [r3, #8]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d107      	bne.n	8000a4e <PWM_SetPulse+0x4c>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	899b      	ldrh	r3, [r3, #12]
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000a4c:	e03b      	b.n	8000ac6 <PWM_SetPulse+0xc4>
    __HAL_TIM_SET_COMPARE((TIM_HandleTypeDef*)handle->handle, handle->TimerChannelNo, handle->PWM);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	2b04      	cmp	r3, #4
 8000a54:	d108      	bne.n	8000a68 <PWM_SetPulse+0x66>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	899b      	ldrh	r3, [r3, #12]
 8000a5a:	b299      	uxth	r1, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	460b      	mov	r3, r1
 8000a64:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000a66:	e02e      	b.n	8000ac6 <PWM_SetPulse+0xc4>
    __HAL_TIM_SET_COMPARE((TIM_HandleTypeDef*)handle->handle, handle->TimerChannelNo, handle->PWM);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	2b08      	cmp	r3, #8
 8000a6e:	d108      	bne.n	8000a82 <PWM_SetPulse+0x80>
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	899b      	ldrh	r3, [r3, #12]
 8000a74:	b299      	uxth	r1, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000a80:	e021      	b.n	8000ac6 <PWM_SetPulse+0xc4>
    __HAL_TIM_SET_COMPARE((TIM_HandleTypeDef*)handle->handle, handle->TimerChannelNo, handle->PWM);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	689b      	ldr	r3, [r3, #8]
 8000a86:	2b0c      	cmp	r3, #12
 8000a88:	d108      	bne.n	8000a9c <PWM_SetPulse+0x9a>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	899b      	ldrh	r3, [r3, #12]
 8000a8e:	b299      	uxth	r1, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	460b      	mov	r3, r1
 8000a98:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000a9a:	e014      	b.n	8000ac6 <PWM_SetPulse+0xc4>
    __HAL_TIM_SET_COMPARE((TIM_HandleTypeDef*)handle->handle, handle->TimerChannelNo, handle->PWM);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	689b      	ldr	r3, [r3, #8]
 8000aa0:	2b10      	cmp	r3, #16
 8000aa2:	d108      	bne.n	8000ab6 <PWM_SetPulse+0xb4>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	899b      	ldrh	r3, [r3, #12]
 8000aa8:	b299      	uxth	r1, r3
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000ab4:	e007      	b.n	8000ac6 <PWM_SetPulse+0xc4>
    __HAL_TIM_SET_COMPARE((TIM_HandleTypeDef*)handle->handle, handle->TimerChannelNo, handle->PWM);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	899b      	ldrh	r3, [r3, #12]
 8000aba:	b299      	uxth	r1, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <IMU_Init>:
IMU_TypeDef_T IMU_1;

/** Brief description which ends at this dot. Details follow
 *  here.
 */
void IMU_Init(IMU_TypeDef_T *ImuHandle, uint8_t ImuSensorNo, uint8_t IMU_I2CNO, uint8_t IMU_I2CAdress, void* ResetGPIOPort, uint16_t ResetGPIOPin){
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b086      	sub	sp, #24
 8000ad6:	af02      	add	r7, sp, #8
 8000ad8:	6078      	str	r0, [r7, #4]
 8000ada:	4608      	mov	r0, r1
 8000adc:	4611      	mov	r1, r2
 8000ade:	461a      	mov	r2, r3
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	70fb      	strb	r3, [r7, #3]
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	70bb      	strb	r3, [r7, #2]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	707b      	strb	r3, [r7, #1]
	BNO055_Sensor_T *imuSensor;
	imuSensor = IMU_GetSensorHandle(ImuSensorNo);
 8000aec:	78fb      	ldrb	r3, [r7, #3]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 fc74 	bl	80013dc <IMU_GetSensorHandle>
 8000af4:	60f8      	str	r0, [r7, #12]

	BNO055_Init(imuSensor, IMU_I2CNO, IMU_I2CAdress, ResetGPIOPort, ResetGPIOPin);
 8000af6:	787a      	ldrb	r2, [r7, #1]
 8000af8:	78b9      	ldrb	r1, [r7, #2]
 8000afa:	8bbb      	ldrh	r3, [r7, #28]
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	68f8      	ldr	r0, [r7, #12]
 8000b02:	f000 fde0 	bl	80016c6 <BNO055_Init>

	ImuHandle->CalcConst.ACC_1MpS2_LSB = imuSensor->CalcConst.ACC_1MpS2_LSB;
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8000b0a:	ee07 3a90 	vmov	s15, r3
 8000b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0
	ImuHandle->CalcConst.GYR_1RPS_LSB  = imuSensor->CalcConst.GYR_1RPS_LSB;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000b1e:	ee07 3a90 	vmov	s15, r3
 8000b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	edc3 7a32 	vstr	s15, [r3, #200]	@ 0xc8
	ImuHandle->CalcConst.MAG_1uT_LSB   = imuSensor->CalcConst.MAG_1uT_LSB;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8000b30:	ee07 3a90 	vmov	s15, r3
 8000b34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	edc3 7a31 	vstr	s15, [r3, #196]	@ 0xc4

	HAL_Delay(25);
 8000b3e:	2019      	movs	r0, #25
 8000b40:	f002 f8ba 	bl	8002cb8 <HAL_Delay>
}
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	0000      	movs	r0, r0
	...

08000b50 <IMU_Execute>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
void IMU_Execute(IMU_TypeDef_T *ImuHandle, uint8_t ImuSensorNo){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	70fb      	strb	r3, [r7, #3]
	BNO055_Sensor_T *imuSensor;

	imuSensor = IMU_GetSensorHandle(ImuSensorNo);
 8000b5c:	78fb      	ldrb	r3, [r7, #3]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 fc3c 	bl	80013dc <IMU_GetSensorHandle>
 8000b64:	60f8      	str	r0, [r7, #12]

	BNO055_Get_SysError(imuSensor);
 8000b66:	68f8      	ldr	r0, [r7, #12]
 8000b68:	f001 faa2 	bl	80020b0 <BNO055_Get_SysError>
	BNO055_Get_All_Data(imuSensor);
 8000b6c:	68f8      	ldr	r0, [r7, #12]
 8000b6e:	f001 f8c5 	bl	8001cfc <BNO055_Get_All_Data>

//	BNO055_Get_ACC_Data(imuSensor);
//	BNO055_Get_MAG_Data(imuSensor);
//	BNO055_Get_GYR_Data(imuSensor);

	IMU_PopulateData(ImuHandle, ImuSensorNo);
 8000b72:	78fb      	ldrb	r3, [r7, #3]
 8000b74:	4619      	mov	r1, r3
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f000 fba8 	bl	80012cc <IMU_PopulateData>

	MED_Filter_s16(&MED_IMU_ACC_X, ImuHandle->AllRawData.Accelerometer.X_Axis);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b82:	4619      	mov	r1, r3
 8000b84:	48c1      	ldr	r0, [pc, #772]	@ (8000e8c <IMU_Execute+0x33c>)
 8000b86:	f7ff fe56 	bl	8000836 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_ACC_X, MED_IMU_ACC_X.MED_FilteredData);
 8000b8a:	4bc0      	ldr	r3, [pc, #768]	@ (8000e8c <IMU_Execute+0x33c>)
 8000b8c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000b90:	4619      	mov	r1, r3
 8000b92:	48bf      	ldr	r0, [pc, #764]	@ (8000e90 <IMU_Execute+0x340>)
 8000b94:	f7ff fda2 	bl	80006dc <AVG_Filter_s16>
	MED_Filter_s16(&MED_IMU_ACC_Y, ImuHandle->AllRawData.Accelerometer.Y_Axis);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	48bc      	ldr	r0, [pc, #752]	@ (8000e94 <IMU_Execute+0x344>)
 8000ba2:	f7ff fe48 	bl	8000836 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_ACC_Y, MED_IMU_ACC_Y.MED_FilteredData);
 8000ba6:	4bbb      	ldr	r3, [pc, #748]	@ (8000e94 <IMU_Execute+0x344>)
 8000ba8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000bac:	4619      	mov	r1, r3
 8000bae:	48ba      	ldr	r0, [pc, #744]	@ (8000e98 <IMU_Execute+0x348>)
 8000bb0:	f7ff fd94 	bl	80006dc <AVG_Filter_s16>
	MED_Filter_s16(&MED_IMU_ACC_Z, ImuHandle->AllRawData.Accelerometer.Z_Axis);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	48b7      	ldr	r0, [pc, #732]	@ (8000e9c <IMU_Execute+0x34c>)
 8000bbe:	f7ff fe3a 	bl	8000836 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_ACC_Z, MED_IMU_ACC_Z.MED_FilteredData);
 8000bc2:	4bb6      	ldr	r3, [pc, #728]	@ (8000e9c <IMU_Execute+0x34c>)
 8000bc4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000bc8:	4619      	mov	r1, r3
 8000bca:	48b5      	ldr	r0, [pc, #724]	@ (8000ea0 <IMU_Execute+0x350>)
 8000bcc:	f7ff fd86 	bl	80006dc <AVG_Filter_s16>
	MED_Filter_s16(&MED_IMU_GYR_X, ImuHandle->AllRawData.Gyroscope.X_Axis);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	48b2      	ldr	r0, [pc, #712]	@ (8000ea4 <IMU_Execute+0x354>)
 8000bda:	f7ff fe2c 	bl	8000836 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_GYR_X, MED_IMU_GYR_X.MED_FilteredData);
 8000bde:	4bb1      	ldr	r3, [pc, #708]	@ (8000ea4 <IMU_Execute+0x354>)
 8000be0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000be4:	4619      	mov	r1, r3
 8000be6:	48b0      	ldr	r0, [pc, #704]	@ (8000ea8 <IMU_Execute+0x358>)
 8000be8:	f7ff fd78 	bl	80006dc <AVG_Filter_s16>
	MED_Filter_s16(&MED_IMU_GYR_Y, ImuHandle->AllRawData.Gyroscope.Y_Axis);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	48ad      	ldr	r0, [pc, #692]	@ (8000eac <IMU_Execute+0x35c>)
 8000bf6:	f7ff fe1e 	bl	8000836 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_GYR_Y, MED_IMU_GYR_Y.MED_FilteredData);
 8000bfa:	4bac      	ldr	r3, [pc, #688]	@ (8000eac <IMU_Execute+0x35c>)
 8000bfc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000c00:	4619      	mov	r1, r3
 8000c02:	48ab      	ldr	r0, [pc, #684]	@ (8000eb0 <IMU_Execute+0x360>)
 8000c04:	f7ff fd6a 	bl	80006dc <AVG_Filter_s16>
	MED_Filter_s16(&MED_IMU_GYR_Z, ImuHandle->AllRawData.Gyroscope.Z_Axis);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000c0e:	4619      	mov	r1, r3
 8000c10:	48a8      	ldr	r0, [pc, #672]	@ (8000eb4 <IMU_Execute+0x364>)
 8000c12:	f7ff fe10 	bl	8000836 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_GYR_Z, MED_IMU_GYR_Z.MED_FilteredData);
 8000c16:	4ba7      	ldr	r3, [pc, #668]	@ (8000eb4 <IMU_Execute+0x364>)
 8000c18:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	48a6      	ldr	r0, [pc, #664]	@ (8000eb8 <IMU_Execute+0x368>)
 8000c20:	f7ff fd5c 	bl	80006dc <AVG_Filter_s16>
	MED_Filter_s16(&MED_IMU_MAG_X, ImuHandle->AllRawData.Magnetometer.X_Axis);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	48a3      	ldr	r0, [pc, #652]	@ (8000ebc <IMU_Execute+0x36c>)
 8000c2e:	f7ff fe02 	bl	8000836 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_MAG_X, MED_IMU_MAG_X.MED_FilteredData);
 8000c32:	4ba2      	ldr	r3, [pc, #648]	@ (8000ebc <IMU_Execute+0x36c>)
 8000c34:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	48a1      	ldr	r0, [pc, #644]	@ (8000ec0 <IMU_Execute+0x370>)
 8000c3c:	f7ff fd4e 	bl	80006dc <AVG_Filter_s16>
	MED_Filter_s16(&MED_IMU_MAG_Y, ImuHandle->AllRawData.Magnetometer.Y_Axis);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000c46:	4619      	mov	r1, r3
 8000c48:	489e      	ldr	r0, [pc, #632]	@ (8000ec4 <IMU_Execute+0x374>)
 8000c4a:	f7ff fdf4 	bl	8000836 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_MAG_Y, MED_IMU_MAG_Y.MED_FilteredData);
 8000c4e:	4b9d      	ldr	r3, [pc, #628]	@ (8000ec4 <IMU_Execute+0x374>)
 8000c50:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000c54:	4619      	mov	r1, r3
 8000c56:	489c      	ldr	r0, [pc, #624]	@ (8000ec8 <IMU_Execute+0x378>)
 8000c58:	f7ff fd40 	bl	80006dc <AVG_Filter_s16>
	MED_Filter_s16(&MED_IMU_MAG_Z, ImuHandle->AllRawData.Magnetometer.Z_Axis);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000c62:	4619      	mov	r1, r3
 8000c64:	4899      	ldr	r0, [pc, #612]	@ (8000ecc <IMU_Execute+0x37c>)
 8000c66:	f7ff fde6 	bl	8000836 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_MAG_Z, MED_IMU_MAG_Z.MED_FilteredData);
 8000c6a:	4b98      	ldr	r3, [pc, #608]	@ (8000ecc <IMU_Execute+0x37c>)
 8000c6c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000c70:	4619      	mov	r1, r3
 8000c72:	4897      	ldr	r0, [pc, #604]	@ (8000ed0 <IMU_Execute+0x380>)
 8000c74:	f7ff fd32 	bl	80006dc <AVG_Filter_s16>


	MED_Filter_s16(&MED_IMU_HEADING, ImuHandle->AllRawData.Heading);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	edd3 7a05 	vldr	s15, [r3, #20]
 8000c7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c82:	ee17 3a90 	vmov	r3, s15
 8000c86:	b21b      	sxth	r3, r3
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4892      	ldr	r0, [pc, #584]	@ (8000ed4 <IMU_Execute+0x384>)
 8000c8c:	f7ff fdd3 	bl	8000836 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_HEADING, MED_IMU_HEADING.MED_FilteredData);
 8000c90:	4b90      	ldr	r3, [pc, #576]	@ (8000ed4 <IMU_Execute+0x384>)
 8000c92:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000c96:	4619      	mov	r1, r3
 8000c98:	488f      	ldr	r0, [pc, #572]	@ (8000ed8 <IMU_Execute+0x388>)
 8000c9a:	f7ff fd1f 	bl	80006dc <AVG_Filter_s16>
	MED_Filter_s16(&MED_IMU_ROLL, ImuHandle->AllRawData.Roll);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	edd3 7a06 	vldr	s15, [r3, #24]
 8000ca4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ca8:	ee17 3a90 	vmov	r3, s15
 8000cac:	b21b      	sxth	r3, r3
 8000cae:	4619      	mov	r1, r3
 8000cb0:	488a      	ldr	r0, [pc, #552]	@ (8000edc <IMU_Execute+0x38c>)
 8000cb2:	f7ff fdc0 	bl	8000836 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_ROLL, MED_IMU_ROLL.MED_FilteredData);
 8000cb6:	4b89      	ldr	r3, [pc, #548]	@ (8000edc <IMU_Execute+0x38c>)
 8000cb8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4888      	ldr	r0, [pc, #544]	@ (8000ee0 <IMU_Execute+0x390>)
 8000cc0:	f7ff fd0c 	bl	80006dc <AVG_Filter_s16>
	MED_Filter_s16(&MED_IMU_PITCH, ImuHandle->AllRawData.Pitch);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	edd3 7a07 	vldr	s15, [r3, #28]
 8000cca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cce:	ee17 3a90 	vmov	r3, s15
 8000cd2:	b21b      	sxth	r3, r3
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4883      	ldr	r0, [pc, #524]	@ (8000ee4 <IMU_Execute+0x394>)
 8000cd8:	f7ff fdad 	bl	8000836 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_PITCH, MED_IMU_PITCH.MED_FilteredData);
 8000cdc:	4b81      	ldr	r3, [pc, #516]	@ (8000ee4 <IMU_Execute+0x394>)
 8000cde:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4880      	ldr	r0, [pc, #512]	@ (8000ee8 <IMU_Execute+0x398>)
 8000ce6:	f7ff fcf9 	bl	80006dc <AVG_Filter_s16>
	MED_Filter_s16(&MED_IMU_QUA_X, ImuHandle->AllRawData.Qua.X_Axis);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	487e      	ldr	r0, [pc, #504]	@ (8000eec <IMU_Execute+0x39c>)
 8000cf4:	f7ff fd9f 	bl	8000836 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_QUA_X, MED_IMU_QUA_X.MED_FilteredData);
 8000cf8:	4b7c      	ldr	r3, [pc, #496]	@ (8000eec <IMU_Execute+0x39c>)
 8000cfa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000cfe:	4619      	mov	r1, r3
 8000d00:	487b      	ldr	r0, [pc, #492]	@ (8000ef0 <IMU_Execute+0x3a0>)
 8000d02:	f7ff fceb 	bl	80006dc <AVG_Filter_s16>
	MED_Filter_s16(&MED_IMU_QUA_Y, ImuHandle->AllRawData.Qua.Y_Axis);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4879      	ldr	r0, [pc, #484]	@ (8000ef4 <IMU_Execute+0x3a4>)
 8000d10:	f7ff fd91 	bl	8000836 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_QUA_Y, MED_IMU_QUA_Y.MED_FilteredData);
 8000d14:	4b77      	ldr	r3, [pc, #476]	@ (8000ef4 <IMU_Execute+0x3a4>)
 8000d16:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4876      	ldr	r0, [pc, #472]	@ (8000ef8 <IMU_Execute+0x3a8>)
 8000d1e:	f7ff fcdd 	bl	80006dc <AVG_Filter_s16>
	MED_Filter_s16(&MED_IMU_QUA_Z, ImuHandle->AllRawData.Qua.Z_Axis);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4874      	ldr	r0, [pc, #464]	@ (8000efc <IMU_Execute+0x3ac>)
 8000d2c:	f7ff fd83 	bl	8000836 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_QUA_Z, MED_IMU_QUA_Z.MED_FilteredData);
 8000d30:	4b72      	ldr	r3, [pc, #456]	@ (8000efc <IMU_Execute+0x3ac>)
 8000d32:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000d36:	4619      	mov	r1, r3
 8000d38:	4871      	ldr	r0, [pc, #452]	@ (8000f00 <IMU_Execute+0x3b0>)
 8000d3a:	f7ff fccf 	bl	80006dc <AVG_Filter_s16>
	MED_Filter_s16(&MED_IMU_LINACC_X, ImuHandle->AllRawData.LinAcc.X_Axis);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8000d44:	4619      	mov	r1, r3
 8000d46:	486f      	ldr	r0, [pc, #444]	@ (8000f04 <IMU_Execute+0x3b4>)
 8000d48:	f7ff fd75 	bl	8000836 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_LINACC_X, MED_IMU_LINACC_X.MED_FilteredData);
 8000d4c:	4b6d      	ldr	r3, [pc, #436]	@ (8000f04 <IMU_Execute+0x3b4>)
 8000d4e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000d52:	4619      	mov	r1, r3
 8000d54:	486c      	ldr	r0, [pc, #432]	@ (8000f08 <IMU_Execute+0x3b8>)
 8000d56:	f7ff fcc1 	bl	80006dc <AVG_Filter_s16>
	MED_Filter_s16(&MED_IMU_LINACC_Y, ImuHandle->AllRawData.LinAcc.Y_Axis);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8000d60:	4619      	mov	r1, r3
 8000d62:	486a      	ldr	r0, [pc, #424]	@ (8000f0c <IMU_Execute+0x3bc>)
 8000d64:	f7ff fd67 	bl	8000836 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_LINACC_Y, MED_IMU_LINACC_Y.MED_FilteredData);
 8000d68:	4b68      	ldr	r3, [pc, #416]	@ (8000f0c <IMU_Execute+0x3bc>)
 8000d6a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4867      	ldr	r0, [pc, #412]	@ (8000f10 <IMU_Execute+0x3c0>)
 8000d72:	f7ff fcb3 	bl	80006dc <AVG_Filter_s16>
	MED_Filter_s16(&MED_IMU_LINACC_Z, ImuHandle->AllRawData.LinAcc.Z_Axis);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4865      	ldr	r0, [pc, #404]	@ (8000f14 <IMU_Execute+0x3c4>)
 8000d80:	f7ff fd59 	bl	8000836 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_LINACC_Z, MED_IMU_LINACC_Z.MED_FilteredData);
 8000d84:	4b63      	ldr	r3, [pc, #396]	@ (8000f14 <IMU_Execute+0x3c4>)
 8000d86:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4862      	ldr	r0, [pc, #392]	@ (8000f18 <IMU_Execute+0x3c8>)
 8000d8e:	f7ff fca5 	bl	80006dc <AVG_Filter_s16>
	MED_Filter_s16(&MED_IMU_GRV_X, ImuHandle->AllRawData.Grv.X_Axis);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4860      	ldr	r0, [pc, #384]	@ (8000f1c <IMU_Execute+0x3cc>)
 8000d9c:	f7ff fd4b 	bl	8000836 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_GYR_X, MED_IMU_GRV_X.MED_FilteredData);
 8000da0:	4b5e      	ldr	r3, [pc, #376]	@ (8000f1c <IMU_Execute+0x3cc>)
 8000da2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000da6:	4619      	mov	r1, r3
 8000da8:	483f      	ldr	r0, [pc, #252]	@ (8000ea8 <IMU_Execute+0x358>)
 8000daa:	f7ff fc97 	bl	80006dc <AVG_Filter_s16>
	MED_Filter_s16(&MED_IMU_GRV_Y, ImuHandle->AllRawData.Grv.Y_Axis);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8000db4:	4619      	mov	r1, r3
 8000db6:	485a      	ldr	r0, [pc, #360]	@ (8000f20 <IMU_Execute+0x3d0>)
 8000db8:	f7ff fd3d 	bl	8000836 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_GYR_Y, MED_IMU_GRV_Y.MED_FilteredData);
 8000dbc:	4b58      	ldr	r3, [pc, #352]	@ (8000f20 <IMU_Execute+0x3d0>)
 8000dbe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	483a      	ldr	r0, [pc, #232]	@ (8000eb0 <IMU_Execute+0x360>)
 8000dc6:	f7ff fc89 	bl	80006dc <AVG_Filter_s16>
	MED_Filter_s16(&MED_IMU_GRV_Z, ImuHandle->AllRawData.Grv.Z_Axis);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4854      	ldr	r0, [pc, #336]	@ (8000f24 <IMU_Execute+0x3d4>)
 8000dd4:	f7ff fd2f 	bl	8000836 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_GYR_Z, MED_IMU_GRV_Z.MED_FilteredData);
 8000dd8:	4b52      	ldr	r3, [pc, #328]	@ (8000f24 <IMU_Execute+0x3d4>)
 8000dda:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000dde:	4619      	mov	r1, r3
 8000de0:	4835      	ldr	r0, [pc, #212]	@ (8000eb8 <IMU_Execute+0x368>)
 8000de2:	f7ff fc7b 	bl	80006dc <AVG_Filter_s16>


	ImuHandle->FilteredData.Accelerometer.X_Axis = AVG_IMU_ACC_X.AVG_FilteredData;
 8000de6:	4b2a      	ldr	r3, [pc, #168]	@ (8000e90 <IMU_Execute+0x340>)
 8000de8:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	869a      	strh	r2, [r3, #52]	@ 0x34
	ImuHandle->FilteredData.Accelerometer.Y_Axis = AVG_IMU_ACC_Y.AVG_FilteredData;
 8000df0:	4b29      	ldr	r3, [pc, #164]	@ (8000e98 <IMU_Execute+0x348>)
 8000df2:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	86da      	strh	r2, [r3, #54]	@ 0x36
	ImuHandle->FilteredData.Accelerometer.Z_Axis = AVG_IMU_ACC_Z.AVG_FilteredData;
 8000dfa:	4b29      	ldr	r3, [pc, #164]	@ (8000ea0 <IMU_Execute+0x350>)
 8000dfc:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	871a      	strh	r2, [r3, #56]	@ 0x38
	ImuHandle->FilteredData.Gyroscope.X_Axis     = AVG_IMU_GYR_X.AVG_FilteredData;
 8000e04:	4b28      	ldr	r3, [pc, #160]	@ (8000ea8 <IMU_Execute+0x358>)
 8000e06:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	875a      	strh	r2, [r3, #58]	@ 0x3a
	ImuHandle->FilteredData.Gyroscope.Y_Axis     = AVG_IMU_GYR_Y.AVG_FilteredData;
 8000e0e:	4b28      	ldr	r3, [pc, #160]	@ (8000eb0 <IMU_Execute+0x360>)
 8000e10:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	879a      	strh	r2, [r3, #60]	@ 0x3c
	ImuHandle->FilteredData.Gyroscope.Z_Axis     = AVG_IMU_GYR_Z.AVG_FilteredData;
 8000e18:	4b27      	ldr	r3, [pc, #156]	@ (8000eb8 <IMU_Execute+0x368>)
 8000e1a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	87da      	strh	r2, [r3, #62]	@ 0x3e
	ImuHandle->FilteredData.Magnetometer.X_Axis  = AVG_IMU_MAG_X.AVG_FilteredData;
 8000e22:	4b27      	ldr	r3, [pc, #156]	@ (8000ec0 <IMU_Execute+0x370>)
 8000e24:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	ImuHandle->FilteredData.Magnetometer.Y_Axis  = AVG_IMU_MAG_Y.AVG_FilteredData;
 8000e2e:	4b26      	ldr	r3, [pc, #152]	@ (8000ec8 <IMU_Execute+0x378>)
 8000e30:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
	ImuHandle->FilteredData.Magnetometer.Z_Axis  = AVG_IMU_MAG_Z.AVG_FilteredData;
 8000e3a:	4b25      	ldr	r3, [pc, #148]	@ (8000ed0 <IMU_Execute+0x380>)
 8000e3c:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

	ImuHandle->FilteredData.Heading = AVG_IMU_HEADING.AVG_FilteredData;
 8000e46:	4b24      	ldr	r3, [pc, #144]	@ (8000ed8 <IMU_Execute+0x388>)
 8000e48:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000e4c:	ee07 3a90 	vmov	s15, r3
 8000e50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	ImuHandle->FilteredData.Roll = AVG_IMU_ROLL.AVG_FilteredData;
 8000e5a:	4b21      	ldr	r3, [pc, #132]	@ (8000ee0 <IMU_Execute+0x390>)
 8000e5c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000e60:	ee07 3a90 	vmov	s15, r3
 8000e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
	ImuHandle->FilteredData.Pitch = AVG_IMU_PITCH.AVG_FilteredData;
 8000e6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee8 <IMU_Execute+0x398>)
 8000e70:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000e74:	ee07 3a90 	vmov	s15, r3
 8000e78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	ImuHandle->FilteredData.Qua.W_Axis     = AVG_IMU_QUA_W.AVG_FilteredData;
 8000e82:	4b29      	ldr	r3, [pc, #164]	@ (8000f28 <IMU_Execute+0x3d8>)
 8000e84:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	e04f      	b.n	8000f2c <IMU_Execute+0x3dc>
 8000e8c:	200009f4 	.word	0x200009f4
 8000e90:	20000964 	.word	0x20000964
 8000e94:	20000a04 	.word	0x20000a04
 8000e98:	20000974 	.word	0x20000974
 8000e9c:	20000a14 	.word	0x20000a14
 8000ea0:	20000984 	.word	0x20000984
 8000ea4:	20000a24 	.word	0x20000a24
 8000ea8:	20000994 	.word	0x20000994
 8000eac:	20000a34 	.word	0x20000a34
 8000eb0:	200009a4 	.word	0x200009a4
 8000eb4:	20000a44 	.word	0x20000a44
 8000eb8:	200009b4 	.word	0x200009b4
 8000ebc:	20000a54 	.word	0x20000a54
 8000ec0:	200009c4 	.word	0x200009c4
 8000ec4:	20000a64 	.word	0x20000a64
 8000ec8:	200009d4 	.word	0x200009d4
 8000ecc:	20000a74 	.word	0x20000a74
 8000ed0:	200009e4 	.word	0x200009e4
 8000ed4:	20000b54 	.word	0x20000b54
 8000ed8:	20000a84 	.word	0x20000a84
 8000edc:	20000b74 	.word	0x20000b74
 8000ee0:	20000aa4 	.word	0x20000aa4
 8000ee4:	20000b64 	.word	0x20000b64
 8000ee8:	20000a94 	.word	0x20000a94
 8000eec:	20000b84 	.word	0x20000b84
 8000ef0:	20000ac4 	.word	0x20000ac4
 8000ef4:	20000b94 	.word	0x20000b94
 8000ef8:	20000ad4 	.word	0x20000ad4
 8000efc:	20000ba4 	.word	0x20000ba4
 8000f00:	20000ae4 	.word	0x20000ae4
 8000f04:	20000bb4 	.word	0x20000bb4
 8000f08:	20000af4 	.word	0x20000af4
 8000f0c:	20000bc4 	.word	0x20000bc4
 8000f10:	20000b04 	.word	0x20000b04
 8000f14:	20000bd4 	.word	0x20000bd4
 8000f18:	20000b14 	.word	0x20000b14
 8000f1c:	20000be4 	.word	0x20000be4
 8000f20:	20000bf4 	.word	0x20000bf4
 8000f24:	20000c04 	.word	0x20000c04
 8000f28:	20000ab4 	.word	0x20000ab4
 8000f2c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
	ImuHandle->FilteredData.Qua.X_Axis     = AVG_IMU_QUA_X.AVG_FilteredData;
 8000f30:	4bd7      	ldr	r3, [pc, #860]	@ (8001290 <IMU_Execute+0x740>)
 8000f32:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
	ImuHandle->FilteredData.Qua.Y_Axis     = AVG_IMU_QUA_Y.AVG_FilteredData;
 8000f3c:	4bd5      	ldr	r3, [pc, #852]	@ (8001294 <IMU_Execute+0x744>)
 8000f3e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
	ImuHandle->FilteredData.Qua.Z_Axis     = AVG_IMU_QUA_Z.AVG_FilteredData;
 8000f48:	4bd3      	ldr	r3, [pc, #844]	@ (8001298 <IMU_Execute+0x748>)
 8000f4a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
	ImuHandle->FilteredData.LinAcc.X_Axis  = AVG_IMU_LINACC_X.AVG_FilteredData;
 8000f54:	4bd1      	ldr	r3, [pc, #836]	@ (800129c <IMU_Execute+0x74c>)
 8000f56:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
	ImuHandle->FilteredData.LinAcc.Y_Axis  = AVG_IMU_LINACC_Y.AVG_FilteredData;
 8000f60:	4bcf      	ldr	r3, [pc, #828]	@ (80012a0 <IMU_Execute+0x750>)
 8000f62:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
	ImuHandle->FilteredData.LinAcc.Z_Axis  = AVG_IMU_LINACC_Z.AVG_FilteredData;
 8000f6c:	4bcd      	ldr	r3, [pc, #820]	@ (80012a4 <IMU_Execute+0x754>)
 8000f6e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
	ImuHandle->FilteredData.Grv.X_Axis  = AVG_IMU_GRV_X.AVG_FilteredData;
 8000f78:	4bcb      	ldr	r3, [pc, #812]	@ (80012a8 <IMU_Execute+0x758>)
 8000f7a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	ImuHandle->FilteredData.Grv.Y_Axis  = AVG_IMU_GRV_Y.AVG_FilteredData;
 8000f84:	4bc9      	ldr	r3, [pc, #804]	@ (80012ac <IMU_Execute+0x75c>)
 8000f86:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
	ImuHandle->FilteredData.Grv.Z_Axis  = AVG_IMU_GRV_Z.AVG_FilteredData;
 8000f90:	4bc7      	ldr	r3, [pc, #796]	@ (80012b0 <IMU_Execute+0x760>)
 8000f92:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

	ImuHandle->CalculatedData.Accelerometer.X_Axis = (float)(ImuHandle->FilteredData.Accelerometer.X_Axis / ImuHandle->CalcConst.ACC_1MpS2_LSB);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 8000fa2:	ee07 3a90 	vmov	s15, r3
 8000fa6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 8000fb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
	ImuHandle->CalculatedData.Accelerometer.Y_Axis = (float)(ImuHandle->FilteredData.Accelerometer.Y_Axis / ImuHandle->CalcConst.ACC_1MpS2_LSB);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
 8000fc0:	ee07 3a90 	vmov	s15, r3
 8000fc4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 8000fce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	edc3 7a1b 	vstr	s15, [r3, #108]	@ 0x6c
	ImuHandle->CalculatedData.Accelerometer.Z_Axis = (float)(ImuHandle->FilteredData.Accelerometer.Z_Axis / ImuHandle->CalcConst.ACC_1MpS2_LSB);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
 8000fde:	ee07 3a90 	vmov	s15, r3
 8000fe2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 8000fec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
	ImuHandle->CalculatedData.Gyroscope.X_Axis     = (float)(ImuHandle->FilteredData.Gyroscope.X_Axis / ImuHandle->CalcConst.GYR_1RPS_LSB / 16 * 3.1415);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	@ 0x3a
 8000ffc:	ee07 3a90 	vmov	s15, r3
 8001000:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	edd3 7a32 	vldr	s15, [r3, #200]	@ 0xc8
 800100a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800100e:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001012:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001016:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800101a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8001278 <IMU_Execute+0x728>
 800101e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001022:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74
	ImuHandle->CalculatedData.Gyroscope.Y_Axis     = (float)(ImuHandle->FilteredData.Gyroscope.Y_Axis / ImuHandle->CalcConst.GYR_1RPS_LSB / 16 * 3.1415);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8001032:	ee07 3a90 	vmov	s15, r3
 8001036:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	edd3 7a32 	vldr	s15, [r3, #200]	@ 0xc8
 8001040:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001044:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001048:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800104c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001050:	ed9f 6b89 	vldr	d6, [pc, #548]	@ 8001278 <IMU_Execute+0x728>
 8001054:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001058:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
	ImuHandle->CalculatedData.Gyroscope.Z_Axis     = (float)(ImuHandle->FilteredData.Gyroscope.Z_Axis / ImuHandle->CalcConst.GYR_1RPS_LSB / 16 * 3.1415);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8001068:	ee07 3a90 	vmov	s15, r3
 800106c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	edd3 7a32 	vldr	s15, [r3, #200]	@ 0xc8
 8001076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800107a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800107e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001082:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001086:	ed9f 6b7c 	vldr	d6, [pc, #496]	@ 8001278 <IMU_Execute+0x728>
 800108a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800108e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	edc3 7a1f 	vstr	s15, [r3, #124]	@ 0x7c
	ImuHandle->CalculatedData.Magnetometer.X_Axis  = (float)((ImuHandle->FilteredData.Magnetometer.X_Axis / ImuHandle->CalcConst.MAG_1uT_LSB * 0.000001));
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800109e:	ee07 3a90 	vmov	s15, r3
 80010a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 80010ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010b4:	ed9f 6b72 	vldr	d6, [pc, #456]	@ 8001280 <IMU_Execute+0x730>
 80010b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010bc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80
	ImuHandle->CalculatedData.Magnetometer.Y_Axis  = (float)((ImuHandle->FilteredData.Magnetometer.Y_Axis / ImuHandle->CalcConst.MAG_1uT_LSB * 0.000001));
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	@ 0x42
 80010cc:	ee07 3a90 	vmov	s15, r3
 80010d0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 80010da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010e2:	ed9f 6b67 	vldr	d6, [pc, #412]	@ 8001280 <IMU_Execute+0x730>
 80010e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010ea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84
	ImuHandle->CalculatedData.Magnetometer.Z_Axis  = (float)((ImuHandle->FilteredData.Magnetometer.Z_Axis / ImuHandle->CalcConst.MAG_1uT_LSB * 0.000001));
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 80010fa:	ee07 3a90 	vmov	s15, r3
 80010fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 8001108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800110c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001110:	ed9f 6b5b 	vldr	d6, [pc, #364]	@ 8001280 <IMU_Execute+0x730>
 8001114:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001118:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88
	ImuHandle->CalculatedData.Heading = (float)((ImuHandle->FilteredData.Heading / 16.0));
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8001128:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800112c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
	ImuHandle->CalculatedData.Roll = (float)((ImuHandle->FilteredData.Roll));
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	ImuHandle->CalculatedData.Pitch = (float)((ImuHandle->FilteredData.Pitch));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	ImuHandle->CalculatedData.Qua.W_Axis = (float)((ImuHandle->FilteredData.Qua.W_Axis / 16384.0 ));
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	@ 0x54
 8001150:	ee07 3a90 	vmov	s15, r3
 8001154:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001158:	ed9f 5b4b 	vldr	d5, [pc, #300]	@ 8001288 <IMU_Execute+0x738>
 800115c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001160:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	edc3 7a26 	vstr	s15, [r3, #152]	@ 0x98
	ImuHandle->CalculatedData.Qua.X_Axis = (float)((ImuHandle->FilteredData.Qua.X_Axis / 16384.0 ));
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	@ 0x56
 8001170:	ee07 3a90 	vmov	s15, r3
 8001174:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001178:	ed9f 5b43 	vldr	d5, [pc, #268]	@ 8001288 <IMU_Execute+0x738>
 800117c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001180:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	edc3 7a27 	vstr	s15, [r3, #156]	@ 0x9c
	ImuHandle->CalculatedData.Qua.Y_Axis = (float)((ImuHandle->FilteredData.Qua.Y_Axis / 16384.0 ));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	@ 0x58
 8001190:	ee07 3a90 	vmov	s15, r3
 8001194:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001198:	ed9f 5b3b 	vldr	d5, [pc, #236]	@ 8001288 <IMU_Execute+0x738>
 800119c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011a0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	edc3 7a28 	vstr	s15, [r3, #160]	@ 0xa0
	ImuHandle->CalculatedData.Qua.Z_Axis = (float)((ImuHandle->FilteredData.Qua.Z_Axis / 16384.0 ));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	@ 0x5a
 80011b0:	ee07 3a90 	vmov	s15, r3
 80011b4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80011b8:	ed9f 5b33 	vldr	d5, [pc, #204]	@ 8001288 <IMU_Execute+0x738>
 80011bc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011c0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	edc3 7a29 	vstr	s15, [r3, #164]	@ 0xa4
	ImuHandle->CalculatedData.LinAcc.X_Axis = (float)((ImuHandle->FilteredData.LinAcc.X_Axis / ImuHandle->CalcConst.ACC_1MpS2_LSB));
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	@ 0x5c
 80011d0:	ee07 3a90 	vmov	s15, r3
 80011d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 80011de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	edc3 7a2a 	vstr	s15, [r3, #168]	@ 0xa8
	ImuHandle->CalculatedData.LinAcc.Y_Axis = (float)((ImuHandle->FilteredData.LinAcc.Y_Axis / ImuHandle->CalcConst.ACC_1MpS2_LSB));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	@ 0x5e
 80011ee:	ee07 3a90 	vmov	s15, r3
 80011f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 80011fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	edc3 7a2b 	vstr	s15, [r3, #172]	@ 0xac
	ImuHandle->CalculatedData.LinAcc.Z_Axis = (float)((ImuHandle->FilteredData.LinAcc.Z_Axis / ImuHandle->CalcConst.ACC_1MpS2_LSB));
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f9b3 3060 	ldrsh.w	r3, [r3, #96]	@ 0x60
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 800121a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	edc3 7a2c 	vstr	s15, [r3, #176]	@ 0xb0
	ImuHandle->CalculatedData.Grv.X_Axis = (float)((ImuHandle->FilteredData.Grv.X_Axis / ImuHandle->CalcConst.ACC_1MpS2_LSB));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	@ 0x62
 800122a:	ee07 3a90 	vmov	s15, r3
 800122e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 8001238:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	edc3 7a2d 	vstr	s15, [r3, #180]	@ 0xb4
	ImuHandle->CalculatedData.Grv.Y_Axis = (float)((ImuHandle->FilteredData.Grv.Y_Axis / ImuHandle->CalcConst.ACC_1MpS2_LSB));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	@ 0x64
 8001248:	ee07 3a90 	vmov	s15, r3
 800124c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 8001256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	edc3 7a2e 	vstr	s15, [r3, #184]	@ 0xb8
	ImuHandle->CalculatedData.Grv.Z_Axis = (float)((ImuHandle->FilteredData.Grv.Z_Axis / ImuHandle->CalcConst.ACC_1MpS2_LSB));
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f9b3 3066 	ldrsh.w	r3, [r3, #102]	@ 0x66
 8001266:	ee07 3a90 	vmov	s15, r3
 800126a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	e020      	b.n	80012b4 <IMU_Execute+0x764>
 8001272:	bf00      	nop
 8001274:	f3af 8000 	nop.w
 8001278:	c083126f 	.word	0xc083126f
 800127c:	400921ca 	.word	0x400921ca
 8001280:	a0b5ed8d 	.word	0xa0b5ed8d
 8001284:	3eb0c6f7 	.word	0x3eb0c6f7
 8001288:	00000000 	.word	0x00000000
 800128c:	40d00000 	.word	0x40d00000
 8001290:	20000ac4 	.word	0x20000ac4
 8001294:	20000ad4 	.word	0x20000ad4
 8001298:	20000ae4 	.word	0x20000ae4
 800129c:	20000af4 	.word	0x20000af4
 80012a0:	20000b04 	.word	0x20000b04
 80012a4:	20000b14 	.word	0x20000b14
 80012a8:	20000b24 	.word	0x20000b24
 80012ac:	20000b34 	.word	0x20000b34
 80012b0:	20000b44 	.word	0x20000b44
 80012b4:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 80012b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edc3 7a2f 	vstr	s15, [r3, #188]	@ 0xbc
}
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop

080012cc <IMU_PopulateData>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
void IMU_PopulateData(IMU_TypeDef_T *ImuHandle, uint8_t ImuSensorNo){
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	70fb      	strb	r3, [r7, #3]
	BNO055_Sensor_T *imuSensor;
	imuSensor = IMU_GetSensorHandle(ImuSensorNo);
 80012d8:	78fb      	ldrb	r3, [r7, #3]
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 f87e 	bl	80013dc <IMU_GetSensorHandle>
 80012e0:	60f8      	str	r0, [r7, #12]

	ImuHandle->AllRawData.Accelerometer.X_Axis = (int16_t)imuSensor->ImuData.ACC_X;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	801a      	strh	r2, [r3, #0]
	ImuHandle->AllRawData.Accelerometer.Y_Axis = (int16_t)imuSensor->ImuData.ACC_Y;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	805a      	strh	r2, [r3, #2]
	ImuHandle->AllRawData.Accelerometer.Z_Axis = (int16_t)imuSensor->ImuData.ACC_Z;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	809a      	strh	r2, [r3, #4]
	ImuHandle->AllRawData.Gyroscope.X_Axis     = imuSensor->ImuData.GYR_X;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	80da      	strh	r2, [r3, #6]
	ImuHandle->AllRawData.Gyroscope.Y_Axis     = imuSensor->ImuData.GYR_Y;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	811a      	strh	r2, [r3, #8]
	ImuHandle->AllRawData.Gyroscope.Z_Axis     = imuSensor->ImuData.GYR_Z;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	815a      	strh	r2, [r3, #10]
	ImuHandle->AllRawData.Magnetometer.X_Axis  = imuSensor->ImuData.MAG_X;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	819a      	strh	r2, [r3, #12]
	ImuHandle->AllRawData.Magnetometer.Y_Axis  = imuSensor->ImuData.MAG_Y;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	81da      	strh	r2, [r3, #14]
	ImuHandle->AllRawData.Magnetometer.Z_Axis  = imuSensor->ImuData.MAG_Z;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	821a      	strh	r2, [r3, #16]

	ImuHandle->AllRawData.Heading  = imuSensor->ImuData.Heading;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001342:	ee07 3a90 	vmov	s15, r3
 8001346:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	edc3 7a05 	vstr	s15, [r3, #20]
	ImuHandle->AllRawData.Roll  =    imuSensor->ImuData.Roll;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001356:	ee07 3a90 	vmov	s15, r3
 800135a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	edc3 7a06 	vstr	s15, [r3, #24]
	ImuHandle->AllRawData.Pitch  =   imuSensor->ImuData.Pitch;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 800136a:	ee07 3a90 	vmov	s15, r3
 800136e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	edc3 7a07 	vstr	s15, [r3, #28]
	ImuHandle->AllRawData.Qua.X_Axis  = imuSensor->ImuData.QUA_X;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	@ 0x26
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	845a      	strh	r2, [r3, #34]	@ 0x22
	ImuHandle->AllRawData.Qua.Y_Axis  = imuSensor->ImuData.QUA_Y;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	@ 0x28
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	849a      	strh	r2, [r3, #36]	@ 0x24
	ImuHandle->AllRawData.Qua.Z_Axis  = imuSensor->ImuData.QUA_Z;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	@ 0x2a
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	84da      	strh	r2, [r3, #38]	@ 0x26
	ImuHandle->AllRawData.LinAcc.X_Axis  = imuSensor->ImuData.LINACC_X;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	@ 0x2c
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	851a      	strh	r2, [r3, #40]	@ 0x28
	ImuHandle->AllRawData.LinAcc.Y_Axis  = imuSensor->ImuData.LINACC_Y;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	@ 0x2e
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
	ImuHandle->AllRawData.LinAcc.Z_Axis  = imuSensor->ImuData.LINACC_Z;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	859a      	strh	r2, [r3, #44]	@ 0x2c

	ImuHandle->AllRawData.Grv.X_Axis  = imuSensor->ImuData.GRV_X;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f9b3 2032 	ldrsh.w	r2, [r3, #50]	@ 0x32
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	85da      	strh	r2, [r3, #46]	@ 0x2e
	ImuHandle->AllRawData.Grv.Y_Axis  = imuSensor->ImuData.GRV_Y;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	@ 0x34
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	861a      	strh	r2, [r3, #48]	@ 0x30
	ImuHandle->AllRawData.Grv.Z_Axis  = imuSensor->ImuData.GRV_Z;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f9b3 2036 	ldrsh.w	r2, [r3, #54]	@ 0x36
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	865a      	strh	r2, [r3, #50]	@ 0x32

}
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <IMU_GetSensorHandle>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_Sensor_T* IMU_GetSensorHandle(uint8_t sensorNo){
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
	switch(sensorNo){
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	2b03      	cmp	r3, #3
 80013ea:	d00a      	beq.n	8001402 <IMU_GetSensorHandle+0x26>
 80013ec:	2b03      	cmp	r3, #3
 80013ee:	dc06      	bgt.n	80013fe <IMU_GetSensorHandle+0x22>
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d002      	beq.n	80013fa <IMU_GetSensorHandle+0x1e>
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d006      	beq.n	8001406 <IMU_GetSensorHandle+0x2a>
 80013f8:	e001      	b.n	80013fe <IMU_GetSensorHandle+0x22>
		case 1 : return &BNO055_Sensor_1;break;
 80013fa:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <IMU_GetSensorHandle+0x38>)
 80013fc:	e004      	b.n	8001408 <IMU_GetSensorHandle+0x2c>
		case 2 : break;
		case 3 : break;
		default : return &BNO055_Sensor_1;
 80013fe:	4b05      	ldr	r3, [pc, #20]	@ (8001414 <IMU_GetSensorHandle+0x38>)
 8001400:	e002      	b.n	8001408 <IMU_GetSensorHandle+0x2c>
		case 3 : break;
 8001402:	bf00      	nop
 8001404:	e000      	b.n	8001408 <IMU_GetSensorHandle+0x2c>
		case 2 : break;
 8001406:	bf00      	nop
	}
}
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	20000e60 	.word	0x20000e60

08001418 <PressureSensor_Init>:
PressureSensor_TypeDef_T PressureSensor_1;

/** Brief description which ends at this dot. Details follow
 *  here.
 */
void PressureSensor_Init(PressureSensor_TypeDef_T *handle, uint8_t PressureSensorNo, uint8_t I2C_No, uint8_t DevI2C_Address){
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	4608      	mov	r0, r1
 8001422:	4611      	mov	r1, r2
 8001424:	461a      	mov	r2, r3
 8001426:	4603      	mov	r3, r0
 8001428:	70fb      	strb	r3, [r7, #3]
 800142a:	460b      	mov	r3, r1
 800142c:	70bb      	strb	r3, [r7, #2]
 800142e:	4613      	mov	r3, r2
 8001430:	707b      	strb	r3, [r7, #1]
	BAR30_Init(PressureSensorNo, I2C_No, DevI2C_Address);
 8001432:	787a      	ldrb	r2, [r7, #1]
 8001434:	78b9      	ldrb	r1, [r7, #2]
 8001436:	78fb      	ldrb	r3, [r7, #3]
 8001438:	4618      	mov	r0, r3
 800143a:	f000 f804 	bl	8001446 <BAR30_Init>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <BAR30_Init>:
 * GLOBAL FUNCTIONS
 *********************************************************/
/** Brief description which ends at this dot. Details follow
 *  here.
 */
BAR30_ReturnTypeDef_T BAR30_Init(uint8_t BAR30_No, uint8_t i2cNo, uint8_t devI2CAddress){
 8001446:	b580      	push	{r7, lr}
 8001448:	b086      	sub	sp, #24
 800144a:	af00      	add	r7, sp, #0
 800144c:	4603      	mov	r3, r0
 800144e:	71fb      	strb	r3, [r7, #7]
 8001450:	460b      	mov	r3, r1
 8001452:	71bb      	strb	r3, [r7, #6]
 8001454:	4613      	mov	r3, r2
 8001456:	717b      	strb	r3, [r7, #5]
	BAR30_ReturnTypeDef_T res;
	BAR30_Sensor_T *bar;
	uint8_t i=0;
 8001458:	2300      	movs	r3, #0
 800145a:	75fb      	strb	r3, [r7, #23]

	bar = BAR30_GetHandle(BAR30_No);
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f876 	bl	8001550 <BAR30_GetHandle>
 8001464:	6138      	str	r0, [r7, #16]

	bar->devParam.I2C_No = i2cNo;
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	79ba      	ldrb	r2, [r7, #6]
 800146a:	701a      	strb	r2, [r3, #0]
	bar->devParam.DevAdress = devI2CAddress;
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	797a      	ldrb	r2, [r7, #5]
 8001470:	705a      	strb	r2, [r3, #1]

	res = BAR30_Reset(bar);
 8001472:	6938      	ldr	r0, [r7, #16]
 8001474:	f000 f818 	bl	80014a8 <BAR30_Reset>
 8001478:	4603      	mov	r3, r0
 800147a:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(25);
 800147c:	2019      	movs	r0, #25
 800147e:	f001 fc1b 	bl	8002cb8 <HAL_Delay>

	while (BAR30_Get_PromValues(bar) == BAR30_ERROR){
 8001482:	e004      	b.n	800148e <BAR30_Init+0x48>
		if(i++ > 10)
 8001484:	7dfb      	ldrb	r3, [r7, #23]
 8001486:	1c5a      	adds	r2, r3, #1
 8001488:	75fa      	strb	r2, [r7, #23]
 800148a:	2b0a      	cmp	r3, #10
 800148c:	d806      	bhi.n	800149c <BAR30_Init+0x56>
	while (BAR30_Get_PromValues(bar) == BAR30_ERROR){
 800148e:	6938      	ldr	r0, [r7, #16]
 8001490:	f000 f819 	bl	80014c6 <BAR30_Get_PromValues>
 8001494:	4603      	mov	r3, r0
 8001496:	2b01      	cmp	r3, #1
 8001498:	d0f4      	beq.n	8001484 <BAR30_Init+0x3e>
 800149a:	e000      	b.n	800149e <BAR30_Init+0x58>
			break;
 800149c:	bf00      	nop
	}

	return res;
 800149e:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <BAR30_Reset>:
 * PRIVATE FUNCTIONS
 *********************************************************/
/** Brief description which ends at this dot. Details follow
 *  here.
 */
BAR30_ReturnTypeDef_T BAR30_Reset(BAR30_Sensor_T *handle){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	return BAR30_SendReceive(handle, BAR30_COMMANDS_RESET, 0, 0);
 80014b0:	2300      	movs	r3, #0
 80014b2:	2200      	movs	r2, #0
 80014b4:	211e      	movs	r1, #30
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 f8c9 	bl	800164e <BAR30_SendReceive>
 80014bc:	4603      	mov	r3, r0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <BAR30_Get_PromValues>:
}

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BAR30_ReturnTypeDef_T BAR30_Get_PromValues(BAR30_Sensor_T *handle){
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b084      	sub	sp, #16
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
	uint8_t RxBuff[2], crc = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	72fb      	strb	r3, [r7, #11]

	for(int i=0; i<7;i++){
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	e021      	b.n	800151c <BAR30_Get_PromValues+0x56>
		if(!BAR30_SendReceive(handle, BAR30_COMMANDS_PROM_READ_1 + i*2, RxBuff, 2))
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	3350      	adds	r3, #80	@ 0x50
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	b2d9      	uxtb	r1, r3
 80014e2:	f107 0208 	add.w	r2, r7, #8
 80014e6:	2302      	movs	r3, #2
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 f8b0 	bl	800164e <BAR30_SendReceive>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d10e      	bne.n	8001512 <BAR30_Get_PromValues+0x4c>
			handle->PromParameters.PromData[i]= RxBuff[1] | RxBuff[0]<<8;
 80014f4:	7a7b      	ldrb	r3, [r7, #9]
 80014f6:	b21a      	sxth	r2, r3
 80014f8:	7a3b      	ldrb	r3, [r7, #8]
 80014fa:	b21b      	sxth	r3, r3
 80014fc:	021b      	lsls	r3, r3, #8
 80014fe:	b21b      	sxth	r3, r3
 8001500:	4313      	orrs	r3, r2
 8001502:	b21b      	sxth	r3, r3
 8001504:	b299      	uxth	r1, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	3204      	adds	r2, #4
 800150c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001510:	e001      	b.n	8001516 <BAR30_Get_PromValues+0x50>
		else
			return BAR30_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e017      	b.n	8001546 <BAR30_Get_PromValues+0x80>
	for(int i=0; i<7;i++){
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	3301      	adds	r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b06      	cmp	r3, #6
 8001520:	ddda      	ble.n	80014d8 <BAR30_Get_PromValues+0x12>
	}

	crc = handle->PromParameters.PromData[0]>>12;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	891b      	ldrh	r3, [r3, #8]
 8001526:	0b1b      	lsrs	r3, r3, #12
 8001528:	b29b      	uxth	r3, r3
 800152a:	72fb      	strb	r3, [r7, #11]

	if(BAR30_CalculateCRC_4(handle->PromParameters.PromData) == crc)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3308      	adds	r3, #8
 8001530:	4618      	mov	r0, r3
 8001532:	f000 f82f 	bl	8001594 <BAR30_CalculateCRC_4>
 8001536:	4603      	mov	r3, r0
 8001538:	461a      	mov	r2, r3
 800153a:	7afb      	ldrb	r3, [r7, #11]
 800153c:	4293      	cmp	r3, r2
 800153e:	d101      	bne.n	8001544 <BAR30_Get_PromValues+0x7e>
		return BAR30_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	e000      	b.n	8001546 <BAR30_Get_PromValues+0x80>
	else
		return BAR30_ERROR;
 8001544:	2301      	movs	r3, #1
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <BAR30_GetHandle>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BAR30_Sensor_T* BAR30_GetHandle(uint8_t Bar30_No){
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
	switch(Bar30_No){
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	2b03      	cmp	r3, #3
 800155e:	d00a      	beq.n	8001576 <BAR30_GetHandle+0x26>
 8001560:	2b03      	cmp	r3, #3
 8001562:	dc0a      	bgt.n	800157a <BAR30_GetHandle+0x2a>
 8001564:	2b01      	cmp	r3, #1
 8001566:	d002      	beq.n	800156e <BAR30_GetHandle+0x1e>
 8001568:	2b02      	cmp	r3, #2
 800156a:	d002      	beq.n	8001572 <BAR30_GetHandle+0x22>
 800156c:	e005      	b.n	800157a <BAR30_GetHandle+0x2a>
		case 1  : return &BAR30_1;
 800156e:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <BAR30_GetHandle+0x38>)
 8001570:	e004      	b.n	800157c <BAR30_GetHandle+0x2c>
		case 2  : return &BAR30_2;
 8001572:	4b06      	ldr	r3, [pc, #24]	@ (800158c <BAR30_GetHandle+0x3c>)
 8001574:	e002      	b.n	800157c <BAR30_GetHandle+0x2c>
		case 3  : return &BAR30_3;
 8001576:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <BAR30_GetHandle+0x40>)
 8001578:	e000      	b.n	800157c <BAR30_GetHandle+0x2c>
		default : return &BAR30_1;
 800157a:	4b03      	ldr	r3, [pc, #12]	@ (8001588 <BAR30_GetHandle+0x38>)
	}
}
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	20000d88 	.word	0x20000d88
 800158c:	20000dd0 	.word	0x20000dd0
 8001590:	20000e18 	.word	0x20000e18

08001594 <BAR30_CalculateCRC_4>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
uint8_t BAR30_CalculateCRC_4(uint16_t *n_prom) // n_prom defined as 8x unsigned int (n_prom[8])
{
 8001594:	b480      	push	{r7}
 8001596:	b087      	sub	sp, #28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	int cnt; // simple counter
	unsigned int n_rem=0; // crc remainder
 800159c:	2300      	movs	r3, #0
 800159e:	613b      	str	r3, [r7, #16]
	unsigned char n_bit;
	n_prom[0]=((n_prom[0]) & 0x0FFF); // CRC byte is replaced by 0
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	801a      	strh	r2, [r3, #0]
	n_prom[7]=0; // Subsidiary value, set to 0
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	330e      	adds	r3, #14
 80015b2:	2200      	movs	r2, #0
 80015b4:	801a      	strh	r2, [r3, #0]

	for (cnt = 0; cnt < 16; cnt++){ // choose LSB or MSB
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	e038      	b.n	800162e <BAR30_CalculateCRC_4+0x9a>
		if (cnt%2==1)
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	bfb8      	it	lt
 80015c6:	425b      	neglt	r3, r3
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d10a      	bne.n	80015e2 <BAR30_CalculateCRC_4+0x4e>
			n_rem ^= (unsigned short) ((n_prom[cnt>>1]) & 0x00FF);
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	105b      	asrs	r3, r3, #1
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4053      	eors	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	e00b      	b.n	80015fa <BAR30_CalculateCRC_4+0x66>
		else
			n_rem ^= (unsigned short) (n_prom[cnt>>1]>>8);
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	105b      	asrs	r3, r3, #1
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	4413      	add	r3, r2
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	0a1b      	lsrs	r3, r3, #8
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	461a      	mov	r2, r3
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	4053      	eors	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]

		for (n_bit = 8; n_bit > 0; n_bit--){
 80015fa:	2308      	movs	r3, #8
 80015fc:	73fb      	strb	r3, [r7, #15]
 80015fe:	e010      	b.n	8001622 <BAR30_CalculateCRC_4+0x8e>
			if (n_rem & (0x8000))
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d005      	beq.n	8001616 <BAR30_CalculateCRC_4+0x82>
				n_rem = (n_rem << 1) ^ 0x3000;
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	e002      	b.n	800161c <BAR30_CalculateCRC_4+0x88>
			else
				n_rem = (n_rem << 1);
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	613b      	str	r3, [r7, #16]
		for (n_bit = 8; n_bit > 0; n_bit--){
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	3b01      	subs	r3, #1
 8001620:	73fb      	strb	r3, [r7, #15]
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1eb      	bne.n	8001600 <BAR30_CalculateCRC_4+0x6c>
	for (cnt = 0; cnt < 16; cnt++){ // choose LSB or MSB
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	3301      	adds	r3, #1
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	2b0f      	cmp	r3, #15
 8001632:	ddc3      	ble.n	80015bc <BAR30_CalculateCRC_4+0x28>
		}
	}

	n_rem= ((n_rem >> 12) & 0x000F); // final 4-bit remainder is CRC code
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	0b1b      	lsrs	r3, r3, #12
 8001638:	f003 030f 	and.w	r3, r3, #15
 800163c:	613b      	str	r3, [r7, #16]
	return (n_rem ^ 0x00);
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	b2db      	uxtb	r3, r3
}
 8001642:	4618      	mov	r0, r3
 8001644:	371c      	adds	r7, #28
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <BAR30_SendReceive>:
}

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BAR30_ReturnTypeDef_T BAR30_SendReceive(BAR30_Sensor_T *handle, uint8_t Command, uint8_t *rxBuff, uint8_t rxLenght){
 800164e:	b590      	push	{r4, r7, lr}
 8001650:	b089      	sub	sp, #36	@ 0x24
 8001652:	af02      	add	r7, sp, #8
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	607a      	str	r2, [r7, #4]
 8001658:	461a      	mov	r2, r3
 800165a:	460b      	mov	r3, r1
 800165c:	72fb      	strb	r3, [r7, #11]
 800165e:	4613      	mov	r3, r2
 8001660:	72bb      	strb	r3, [r7, #10]
	uint8_t txBuff[1], txLenght;
	txBuff[0] = Command;
 8001662:	7afb      	ldrb	r3, [r7, #11]
 8001664:	753b      	strb	r3, [r7, #20]
	txLenght = 1;
 8001666:	2301      	movs	r3, #1
 8001668:	75fb      	strb	r3, [r7, #23]
	return BAR30_CommPorter_SendReceive(handle->devParam.I2C_No, handle->devParam.DevAdress, txBuff, txLenght, rxBuff, rxLenght);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	7818      	ldrb	r0, [r3, #0]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	7859      	ldrb	r1, [r3, #1]
 8001672:	7dfc      	ldrb	r4, [r7, #23]
 8001674:	f107 0214 	add.w	r2, r7, #20
 8001678:	7abb      	ldrb	r3, [r7, #10]
 800167a:	9301      	str	r3, [sp, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	4623      	mov	r3, r4
 8001682:	f000 f805 	bl	8001690 <BAR30_CommPorter_SendReceive>
 8001686:	4603      	mov	r3, r0
}
 8001688:	4618      	mov	r0, r3
 800168a:	371c      	adds	r7, #28
 800168c:	46bd      	mov	sp, r7
 800168e:	bd90      	pop	{r4, r7, pc}

08001690 <BAR30_CommPorter_SendReceive>:

#include <stdint.h>
#include "BAR30_CommPorter.h"
#include "I2C.h"

uint8_t BAR30_CommPorter_SendReceive(uint8_t I2CNo, uint8_t DevAddress, uint8_t *txBuff, uint8_t txLenght, uint8_t *rxBuff, uint8_t rxLenght){
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af02      	add	r7, sp, #8
 8001696:	603a      	str	r2, [r7, #0]
 8001698:	461a      	mov	r2, r3
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
 800169e:	460b      	mov	r3, r1
 80016a0:	71bb      	strb	r3, [r7, #6]
 80016a2:	4613      	mov	r3, r2
 80016a4:	717b      	strb	r3, [r7, #5]
	return I2C_ReadWrite_Poll(I2CNo, DevAddress, txBuff, txLenght, rxBuff, rxLenght);
 80016a6:	797a      	ldrb	r2, [r7, #5]
 80016a8:	79b9      	ldrb	r1, [r7, #6]
 80016aa:	79f8      	ldrb	r0, [r7, #7]
 80016ac:	7d3b      	ldrb	r3, [r7, #20]
 80016ae:	9301      	str	r3, [sp, #4]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	4613      	mov	r3, r2
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	f7ff f906 	bl	80008c8 <I2C_ReadWrite_Poll>
 80016bc:	4603      	mov	r3, r0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <BNO055_Init>:
BNO055_Sensor_T BNO055_Sensor_1;

/** Brief description which ends at this dot. Details follow
 *  here.
 */
void BNO055_Init(BNO055_Sensor_T *handle, uint8_t I2C_No, uint8_t I2C_Adress, void* ResetGPIOPort, uint16_t ResetGPIOPin){
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b084      	sub	sp, #16
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	60f8      	str	r0, [r7, #12]
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	72fb      	strb	r3, [r7, #11]
 80016d4:	4613      	mov	r3, r2
 80016d6:	72bb      	strb	r3, [r7, #10]
	handle->I2C_No = I2C_No;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	7afa      	ldrb	r2, [r7, #11]
 80016dc:	701a      	strb	r2, [r3, #0]
	handle->Chip_I2C_Address = I2C_Adress;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	7aba      	ldrb	r2, [r7, #10]
 80016e2:	705a      	strb	r2, [r3, #1]
	handle->ResetPort = ResetGPIOPort;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	605a      	str	r2, [r3, #4]
	handle->ResetPin = ResetGPIOPin;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	8b3a      	ldrh	r2, [r7, #24]
 80016ee:	811a      	strh	r2, [r3, #8]
	handle->CalcConst.ACC_1MpS2_LSB = 100;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2264      	movs	r2, #100	@ 0x64
 80016f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
	handle->CalcConst.GYR_1RPS_LSB = 180;//900;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	22b4      	movs	r2, #180	@ 0xb4
 80016fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	handle->CalcConst.MAG_1uT_LSB = 16;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2210      	movs	r2, #16
 8001702:	87da      	strh	r2, [r3, #62]	@ 0x3e
	handle->CalcConst.ACCRange_G = 4;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2204      	movs	r2, #4
 8001708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	handle->CalcConst.GYRRange_DPS = 500;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001712:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

	BNO055_Reset(handle);
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f000 f843 	bl	80017a2 <BNO055_Reset>

	BNO055_Set_OperationMode(handle, BNO055_DATA_OPR_MODE_NDOF);
 800171c:	210c      	movs	r1, #12
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f000 f85e 	bl	80017e0 <BNO055_Set_OperationMode>
	HAL_Delay(25);
 8001724:	2019      	movs	r0, #25
 8001726:	f001 fac7 	bl	8002cb8 <HAL_Delay>
//    		BNO055_GetCalibrationData(handle);
//    		break;
//    	}
//    }

    BNO055_Set_OperationMode(handle, BNO055_DATA_OPR_MODE_OPR);
 800172a:	2100      	movs	r1, #0
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f000 f857 	bl	80017e0 <BNO055_Set_OperationMode>
    HAL_Delay(25);
 8001732:	2019      	movs	r0, #25
 8001734:	f001 fac0 	bl	8002cb8 <HAL_Delay>

	BNO055_Set_PowerMode(handle, BNO055_DATA_PWR_MODE_NORMAL);
 8001738:	2100      	movs	r1, #0
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f000 f888 	bl	8001850 <BNO055_Set_PowerMode>
//	BNO055_GetCalibrationData(handle);
	BNO055_Set_DataUnit(handle, BNO055_DATA_UNIT_ACC_mG | BNO055_DATA_UNIT_ORI_AND);
 8001740:	2181      	movs	r1, #129	@ 0x81
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f000 fc19 	bl	8001f7a <BNO055_Set_DataUnit>

	BNO055_Get_DataUnit(handle);
 8001748:	68f8      	ldr	r0, [r7, #12]
 800174a:	f000 fc41 	bl	8001fd0 <BNO055_Get_DataUnit>

	BNO055_Set_ACC_Mode(handle, BNO055_DATA_ACC_RANGE_4G | BNO055_DATA_ACC_BW_62p5Hz |  BNO055_DATA_ACC_MODE_NORMAL);
 800174e:	210d      	movs	r1, #13
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f000 f8b5 	bl	80018c0 <BNO055_Set_ACC_Mode>

	BNO055_Get_ACC_Mode(handle);
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f000 f8ea 	bl	8001930 <BNO055_Get_ACC_Mode>

	BNO055_Set_MAG_Mode(handle, BNO055_DATA_MAG_BW_15Hz | BNO055_DATA_MAG_MODE_HIGHACCURACY | BNO055_DATA_MAG_PWRMODE_NORMAL);
 800175c:	211c      	movs	r1, #28
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	f000 f91c 	bl	800199c <BNO055_Set_MAG_Mode>

	BNO055_Set_GYR_Mode_1(handle, BNO055_DATA_GYR_RANGE_500DPS | BNO055_DATA_GYR_BW_64Hz);
 8001764:	2132      	movs	r1, #50	@ 0x32
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f000 f950 	bl	8001a0c <BNO055_Set_GYR_Mode_1>

	BNO055_Set_GYR_Mode_2(handle, BNO055_DATA_GYR_MODE_NORMAL);
 800176c:	2100      	movs	r1, #0
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f000 f984 	bl	8001a7c <BNO055_Set_GYR_Mode_2>


	BNO055_Set_OperationMode(handle, BNO055_DATA_OPR_MODE_NDOF);
 8001774:	210c      	movs	r1, #12
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f000 f832 	bl	80017e0 <BNO055_Set_OperationMode>

	HAL_Delay(100);
 800177c:	2064      	movs	r0, #100	@ 0x64
 800177e:	f001 fa9b 	bl	8002cb8 <HAL_Delay>

	BNO055_Get_ChipID(handle);
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	f000 f9b2 	bl	8001aec <BNO055_Get_ChipID>
	BNO055_Get_ACC_ID(handle);
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f000 f9f1 	bl	8001b70 <BNO055_Get_ACC_ID>
	BNO055_Get_GYR_ID(handle);
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f000 fa30 	bl	8001bf4 <BNO055_Get_GYR_ID>
	BNO055_Get_MAG_ID(handle);
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	f000 fa6f 	bl	8001c78 <BNO055_Get_MAG_ID>
}
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <BNO055_Reset>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
void BNO055_Reset(BNO055_Sensor_T *handle){
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(handle->ResetPort, handle->ResetPin, RESET);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6858      	ldr	r0, [r3, #4]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	891b      	ldrh	r3, [r3, #8]
 80017b2:	2200      	movs	r2, #0
 80017b4:	4619      	mov	r1, r3
 80017b6:	f003 facb 	bl	8004d50 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80017ba:	2064      	movs	r0, #100	@ 0x64
 80017bc:	f001 fa7c 	bl	8002cb8 <HAL_Delay>
	HAL_GPIO_WritePin(handle->ResetPort, handle->ResetPin, SET);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6858      	ldr	r0, [r3, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	891b      	ldrh	r3, [r3, #8]
 80017c8:	2201      	movs	r2, #1
 80017ca:	4619      	mov	r1, r3
 80017cc:	f003 fac0 	bl	8004d50 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80017d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017d4:	f001 fa70 	bl	8002cb8 <HAL_Delay>
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <BNO055_Set_OperationMode>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_OperationMode(BNO055_Sensor_T *handle, uint8_t mode){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af02      	add	r7, sp, #8
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2], res;
	TxBuff[0] = BNO055_REG_ADDRESS_OPR_MODE;
 80017ec:	233d      	movs	r3, #61	@ 0x3d
 80017ee:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = mode;
 80017f0:	78fb      	ldrb	r3, [r7, #3]
 80017f2:	737b      	strb	r3, [r7, #13]

    if(!BNO055_Get_PageID(handle)){
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 fc1a 	bl	800202e <BNO055_Get_PageID>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d121      	bne.n	8001844 <BNO055_Set_OperationMode+0x64>
    	if(!handle->PageID){
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10a      	bne.n	8001820 <BNO055_Set_OperationMode+0x40>
    		return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 800180a:	f107 010c 	add.w	r1, r7, #12
 800180e:	2300      	movs	r3, #0
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	2300      	movs	r3, #0
 8001814:	2202      	movs	r2, #2
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 fc68 	bl	80020ec <BNO055_SendReceive>
 800181c:	4603      	mov	r3, r0
 800181e:	e013      	b.n	8001848 <BNO055_Set_OperationMode+0x68>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0)){
 8001820:	2100      	movs	r1, #0
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 fc21 	bl	800206a <BNO055_Set_PageID>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10c      	bne.n	8001848 <BNO055_Set_OperationMode+0x68>
    			return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 800182e:	f107 010c 	add.w	r1, r7, #12
 8001832:	2300      	movs	r3, #0
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	2300      	movs	r3, #0
 8001838:	2202      	movs	r2, #2
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f000 fc56 	bl	80020ec <BNO055_SendReceive>
 8001840:	4603      	mov	r3, r0
 8001842:	e001      	b.n	8001848 <BNO055_Set_OperationMode+0x68>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e7ff      	b.n	8001848 <BNO055_Set_OperationMode+0x68>
    }
}
 8001848:	4618      	mov	r0, r3
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <BNO055_Set_PowerMode>:
}

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_PowerMode(BNO055_Sensor_T *handle, uint8_t mode){
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af02      	add	r7, sp, #8
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = BNO055_REG_ADDRESS_PWR_MODE;
 800185c:	233e      	movs	r3, #62	@ 0x3e
 800185e:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = mode;
 8001860:	78fb      	ldrb	r3, [r7, #3]
 8001862:	737b      	strb	r3, [r7, #13]

    if(!BNO055_Get_PageID(handle)){
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 fbe2 	bl	800202e <BNO055_Get_PageID>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d121      	bne.n	80018b4 <BNO055_Set_PowerMode+0x64>
    	if(!handle->PageID){
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10a      	bne.n	8001890 <BNO055_Set_PowerMode+0x40>
    		return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 800187a:	f107 010c 	add.w	r1, r7, #12
 800187e:	2300      	movs	r3, #0
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	2300      	movs	r3, #0
 8001884:	2202      	movs	r2, #2
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 fc30 	bl	80020ec <BNO055_SendReceive>
 800188c:	4603      	mov	r3, r0
 800188e:	e013      	b.n	80018b8 <BNO055_Set_PowerMode+0x68>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0)){
 8001890:	2100      	movs	r1, #0
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 fbe9 	bl	800206a <BNO055_Set_PageID>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10c      	bne.n	80018b8 <BNO055_Set_PowerMode+0x68>
    			return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 800189e:	f107 010c 	add.w	r1, r7, #12
 80018a2:	2300      	movs	r3, #0
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	2300      	movs	r3, #0
 80018a8:	2202      	movs	r2, #2
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 fc1e 	bl	80020ec <BNO055_SendReceive>
 80018b0:	4603      	mov	r3, r0
 80018b2:	e001      	b.n	80018b8 <BNO055_Set_PowerMode+0x68>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e7ff      	b.n	80018b8 <BNO055_Set_PowerMode+0x68>
    }
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <BNO055_Set_ACC_Mode>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_ACC_Mode(BNO055_Sensor_T *handle, uint8_t mode){
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af02      	add	r7, sp, #8
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	460b      	mov	r3, r1
 80018ca:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = BNO055_REG_ADDRESS_ACC_CONFIG;
 80018cc:	2308      	movs	r3, #8
 80018ce:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = mode;
 80018d0:	78fb      	ldrb	r3, [r7, #3]
 80018d2:	737b      	strb	r3, [r7, #13]

    if(!BNO055_Get_PageID(handle)){
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 fbaa 	bl	800202e <BNO055_Get_PageID>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d121      	bne.n	8001924 <BNO055_Set_ACC_Mode+0x64>
    	if(handle->PageID){
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00a      	beq.n	8001900 <BNO055_Set_ACC_Mode+0x40>
    		return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 80018ea:	f107 010c 	add.w	r1, r7, #12
 80018ee:	2300      	movs	r3, #0
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	2300      	movs	r3, #0
 80018f4:	2202      	movs	r2, #2
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 fbf8 	bl	80020ec <BNO055_SendReceive>
 80018fc:	4603      	mov	r3, r0
 80018fe:	e013      	b.n	8001928 <BNO055_Set_ACC_Mode+0x68>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_1)){
 8001900:	2101      	movs	r1, #1
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 fbb1 	bl	800206a <BNO055_Set_PageID>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10c      	bne.n	8001928 <BNO055_Set_ACC_Mode+0x68>
    			return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 800190e:	f107 010c 	add.w	r1, r7, #12
 8001912:	2300      	movs	r3, #0
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	2300      	movs	r3, #0
 8001918:	2202      	movs	r2, #2
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 fbe6 	bl	80020ec <BNO055_SendReceive>
 8001920:	4603      	mov	r3, r0
 8001922:	e001      	b.n	8001928 <BNO055_Set_ACC_Mode+0x68>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e7ff      	b.n	8001928 <BNO055_Set_ACC_Mode+0x68>
    }
}
 8001928:	4618      	mov	r0, r3
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <BNO055_Get_ACC_Mode>:


/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_ACC_Mode(BNO055_Sensor_T *handle){
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af02      	add	r7, sp, #8
 8001936:	6078      	str	r0, [r7, #4]
	uint8_t TxBuff[1], RxBuff[1];
	TxBuff[0] = BNO055_REG_ADDRESS_ACC_CONFIG;
 8001938:	2308      	movs	r3, #8
 800193a:	733b      	strb	r3, [r7, #12]

    if(!BNO055_Get_PageID(handle)){
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 fb76 	bl	800202e <BNO055_Get_PageID>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d123      	bne.n	8001990 <BNO055_Get_ACC_Mode+0x60>
    	if(handle->PageID){
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00b      	beq.n	800196a <BNO055_Get_ACC_Mode+0x3a>
    		return BNO055_SendReceive(handle,TxBuff, 1, RxBuff, 1);
 8001952:	f107 0308 	add.w	r3, r7, #8
 8001956:	f107 010c 	add.w	r1, r7, #12
 800195a:	2201      	movs	r2, #1
 800195c:	9200      	str	r2, [sp, #0]
 800195e:	2201      	movs	r2, #1
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 fbc3 	bl	80020ec <BNO055_SendReceive>
 8001966:	4603      	mov	r3, r0
 8001968:	e014      	b.n	8001994 <BNO055_Get_ACC_Mode+0x64>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_1)){
 800196a:	2101      	movs	r1, #1
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 fb7c 	bl	800206a <BNO055_Set_PageID>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d10d      	bne.n	8001994 <BNO055_Get_ACC_Mode+0x64>
    			return BNO055_SendReceive(handle,TxBuff, 1, RxBuff, 1);
 8001978:	f107 0308 	add.w	r3, r7, #8
 800197c:	f107 010c 	add.w	r1, r7, #12
 8001980:	2201      	movs	r2, #1
 8001982:	9200      	str	r2, [sp, #0]
 8001984:	2201      	movs	r2, #1
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 fbb0 	bl	80020ec <BNO055_SendReceive>
 800198c:	4603      	mov	r3, r0
 800198e:	e001      	b.n	8001994 <BNO055_Get_ACC_Mode+0x64>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e7ff      	b.n	8001994 <BNO055_Get_ACC_Mode+0x64>
    }
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <BNO055_Set_MAG_Mode>:


/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_MAG_Mode(BNO055_Sensor_T *handle, uint8_t mode){
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af02      	add	r7, sp, #8
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = BNO055_REG_ADDRESS_MAG_CONFIG;
 80019a8:	2309      	movs	r3, #9
 80019aa:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = mode;
 80019ac:	78fb      	ldrb	r3, [r7, #3]
 80019ae:	737b      	strb	r3, [r7, #13]

    if(!BNO055_Get_PageID(handle)){
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f000 fb3c 	bl	800202e <BNO055_Get_PageID>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d121      	bne.n	8001a00 <BNO055_Set_MAG_Mode+0x64>
    	if(handle->PageID){
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00a      	beq.n	80019dc <BNO055_Set_MAG_Mode+0x40>
    		return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 80019c6:	f107 010c 	add.w	r1, r7, #12
 80019ca:	2300      	movs	r3, #0
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	2300      	movs	r3, #0
 80019d0:	2202      	movs	r2, #2
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 fb8a 	bl	80020ec <BNO055_SendReceive>
 80019d8:	4603      	mov	r3, r0
 80019da:	e013      	b.n	8001a04 <BNO055_Set_MAG_Mode+0x68>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_1)){
 80019dc:	2101      	movs	r1, #1
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 fb43 	bl	800206a <BNO055_Set_PageID>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10c      	bne.n	8001a04 <BNO055_Set_MAG_Mode+0x68>
    			return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 80019ea:	f107 010c 	add.w	r1, r7, #12
 80019ee:	2300      	movs	r3, #0
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	2300      	movs	r3, #0
 80019f4:	2202      	movs	r2, #2
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 fb78 	bl	80020ec <BNO055_SendReceive>
 80019fc:	4603      	mov	r3, r0
 80019fe:	e001      	b.n	8001a04 <BNO055_Set_MAG_Mode+0x68>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e7ff      	b.n	8001a04 <BNO055_Set_MAG_Mode+0x68>
    }
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <BNO055_Set_GYR_Mode_1>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_GYR_Mode_1(BNO055_Sensor_T *handle, uint8_t mode){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af02      	add	r7, sp, #8
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = BNO055_REG_ADDRESS_GYR_CONFIG_1;
 8001a18:	230a      	movs	r3, #10
 8001a1a:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = mode;
 8001a1c:	78fb      	ldrb	r3, [r7, #3]
 8001a1e:	737b      	strb	r3, [r7, #13]

    if(!BNO055_Get_PageID(handle)){
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 fb04 	bl	800202e <BNO055_Get_PageID>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d121      	bne.n	8001a70 <BNO055_Set_GYR_Mode_1+0x64>
    	if(handle->PageID){
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00a      	beq.n	8001a4c <BNO055_Set_GYR_Mode_1+0x40>
    		return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8001a36:	f107 010c 	add.w	r1, r7, #12
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	2300      	movs	r3, #0
 8001a40:	2202      	movs	r2, #2
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 fb52 	bl	80020ec <BNO055_SendReceive>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	e013      	b.n	8001a74 <BNO055_Set_GYR_Mode_1+0x68>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_1)){
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 fb0b 	bl	800206a <BNO055_Set_PageID>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d10c      	bne.n	8001a74 <BNO055_Set_GYR_Mode_1+0x68>
    			return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8001a5a:	f107 010c 	add.w	r1, r7, #12
 8001a5e:	2300      	movs	r3, #0
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	2300      	movs	r3, #0
 8001a64:	2202      	movs	r2, #2
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 fb40 	bl	80020ec <BNO055_SendReceive>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	e001      	b.n	8001a74 <BNO055_Set_GYR_Mode_1+0x68>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e7ff      	b.n	8001a74 <BNO055_Set_GYR_Mode_1+0x68>
    }
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <BNO055_Set_GYR_Mode_2>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_GYR_Mode_2(BNO055_Sensor_T *handle, uint8_t mode){
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af02      	add	r7, sp, #8
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = BNO055_REG_ADDRESS_GYR_CONFIG_2;
 8001a88:	230b      	movs	r3, #11
 8001a8a:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = mode;
 8001a8c:	78fb      	ldrb	r3, [r7, #3]
 8001a8e:	737b      	strb	r3, [r7, #13]

    if(!BNO055_Get_PageID(handle)){
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 facc 	bl	800202e <BNO055_Get_PageID>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d121      	bne.n	8001ae0 <BNO055_Set_GYR_Mode_2+0x64>
    	if(handle->PageID){
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00a      	beq.n	8001abc <BNO055_Set_GYR_Mode_2+0x40>
    		return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8001aa6:	f107 010c 	add.w	r1, r7, #12
 8001aaa:	2300      	movs	r3, #0
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	2300      	movs	r3, #0
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 fb1a 	bl	80020ec <BNO055_SendReceive>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	e013      	b.n	8001ae4 <BNO055_Set_GYR_Mode_2+0x68>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_1)){
 8001abc:	2101      	movs	r1, #1
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 fad3 	bl	800206a <BNO055_Set_PageID>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10c      	bne.n	8001ae4 <BNO055_Set_GYR_Mode_2+0x68>
    			return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8001aca:	f107 010c 	add.w	r1, r7, #12
 8001ace:	2300      	movs	r3, #0
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 fb08 	bl	80020ec <BNO055_SendReceive>
 8001adc:	4603      	mov	r3, r0
 8001ade:	e001      	b.n	8001ae4 <BNO055_Set_GYR_Mode_2+0x68>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e7ff      	b.n	8001ae4 <BNO055_Set_GYR_Mode_2+0x68>
    }
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <BNO055_Get_ChipID>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_ChipID(BNO055_Sensor_T *handle){
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af02      	add	r7, sp, #8
 8001af2:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[1];
	BNO055_ReturnTypeDef_T res= BNO055_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	73fb      	strb	r3, [r7, #15]
	Txbuff[0] = BNO055_REG_ADDRESS_CHIP_ID;
 8001af8:	2300      	movs	r3, #0
 8001afa:	733b      	strb	r3, [r7, #12]

    if(!BNO055_Get_PageID(handle)){
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 fa96 	bl	800202e <BNO055_Get_PageID>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d125      	bne.n	8001b54 <BNO055_Get_ChipID+0x68>
    	if(!handle->PageID){
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10c      	bne.n	8001b2c <BNO055_Get_ChipID+0x40>
    		res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 8001b12:	f107 0308 	add.w	r3, r7, #8
 8001b16:	f107 010c 	add.w	r1, r7, #12
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	9200      	str	r2, [sp, #0]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 fae3 	bl	80020ec <BNO055_SendReceive>
 8001b26:	4603      	mov	r3, r0
 8001b28:	73fb      	strb	r3, [r7, #15]
 8001b2a:	e015      	b.n	8001b58 <BNO055_Get_ChipID+0x6c>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0)){
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 fa9b 	bl	800206a <BNO055_Set_PageID>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10e      	bne.n	8001b58 <BNO055_Get_ChipID+0x6c>
    			res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 8001b3a:	f107 0308 	add.w	r3, r7, #8
 8001b3e:	f107 010c 	add.w	r1, r7, #12
 8001b42:	2201      	movs	r2, #1
 8001b44:	9200      	str	r2, [sp, #0]
 8001b46:	2201      	movs	r2, #1
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 facf 	bl	80020ec <BNO055_SendReceive>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	73fb      	strb	r3, [r7, #15]
 8001b52:	e001      	b.n	8001b58 <BNO055_Get_ChipID+0x6c>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e007      	b.n	8001b68 <BNO055_Get_ChipID+0x7c>
    }

    if(!res)
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d103      	bne.n	8001b66 <BNO055_Get_ChipID+0x7a>
     	handle->IDs.CHIP_ID = RxBuff[0];
 8001b5e:	7a3a      	ldrb	r2, [r7, #8]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

     return res;
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <BNO055_Get_ACC_ID>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_ACC_ID(BNO055_Sensor_T *handle){
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af02      	add	r7, sp, #8
 8001b76:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[1];
	BNO055_ReturnTypeDef_T res= BNO055_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]
	Txbuff[0] = BNO055_REG_ADDRESS_ACC_ID;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	733b      	strb	r3, [r7, #12]

    if(!BNO055_Get_PageID(handle)){
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 fa54 	bl	800202e <BNO055_Get_PageID>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d125      	bne.n	8001bd8 <BNO055_Get_ACC_ID+0x68>
    	if(!handle->PageID){
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10c      	bne.n	8001bb0 <BNO055_Get_ACC_ID+0x40>
    		res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 8001b96:	f107 0308 	add.w	r3, r7, #8
 8001b9a:	f107 010c 	add.w	r1, r7, #12
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	9200      	str	r2, [sp, #0]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 faa1 	bl	80020ec <BNO055_SendReceive>
 8001baa:	4603      	mov	r3, r0
 8001bac:	73fb      	strb	r3, [r7, #15]
 8001bae:	e015      	b.n	8001bdc <BNO055_Get_ACC_ID+0x6c>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0)){
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 fa59 	bl	800206a <BNO055_Set_PageID>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10e      	bne.n	8001bdc <BNO055_Get_ACC_ID+0x6c>
    			res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 8001bbe:	f107 0308 	add.w	r3, r7, #8
 8001bc2:	f107 010c 	add.w	r1, r7, #12
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	9200      	str	r2, [sp, #0]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 fa8d 	bl	80020ec <BNO055_SendReceive>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	73fb      	strb	r3, [r7, #15]
 8001bd6:	e001      	b.n	8001bdc <BNO055_Get_ACC_ID+0x6c>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e007      	b.n	8001bec <BNO055_Get_ACC_ID+0x7c>
    }

    if(!res)
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d103      	bne.n	8001bea <BNO055_Get_ACC_ID+0x7a>
     	handle->IDs.ACC_ID = RxBuff[0];
 8001be2:	7a3a      	ldrb	r2, [r7, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

     return res;
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <BNO055_Get_GYR_ID>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_GYR_ID(BNO055_Sensor_T *handle){
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af02      	add	r7, sp, #8
 8001bfa:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[1];
	BNO055_ReturnTypeDef_T res= BNO055_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	73fb      	strb	r3, [r7, #15]
	Txbuff[0] = BNO055_REG_ADDRESS_GYR_ID;
 8001c00:	2303      	movs	r3, #3
 8001c02:	733b      	strb	r3, [r7, #12]

    if(!BNO055_Get_PageID(handle)){
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 fa12 	bl	800202e <BNO055_Get_PageID>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d125      	bne.n	8001c5c <BNO055_Get_GYR_ID+0x68>
    	if(!handle->PageID){
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10c      	bne.n	8001c34 <BNO055_Get_GYR_ID+0x40>
    		res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 8001c1a:	f107 0308 	add.w	r3, r7, #8
 8001c1e:	f107 010c 	add.w	r1, r7, #12
 8001c22:	2201      	movs	r2, #1
 8001c24:	9200      	str	r2, [sp, #0]
 8001c26:	2201      	movs	r2, #1
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 fa5f 	bl	80020ec <BNO055_SendReceive>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	73fb      	strb	r3, [r7, #15]
 8001c32:	e015      	b.n	8001c60 <BNO055_Get_GYR_ID+0x6c>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0)){
 8001c34:	2100      	movs	r1, #0
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 fa17 	bl	800206a <BNO055_Set_PageID>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10e      	bne.n	8001c60 <BNO055_Get_GYR_ID+0x6c>
    			res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 8001c42:	f107 0308 	add.w	r3, r7, #8
 8001c46:	f107 010c 	add.w	r1, r7, #12
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	9200      	str	r2, [sp, #0]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 fa4b 	bl	80020ec <BNO055_SendReceive>
 8001c56:	4603      	mov	r3, r0
 8001c58:	73fb      	strb	r3, [r7, #15]
 8001c5a:	e001      	b.n	8001c60 <BNO055_Get_GYR_ID+0x6c>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e007      	b.n	8001c70 <BNO055_Get_GYR_ID+0x7c>
    }

    if(!res)
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d103      	bne.n	8001c6e <BNO055_Get_GYR_ID+0x7a>
    	handle->IDs.GYR_ID = RxBuff[0];
 8001c66:	7a3a      	ldrb	r2, [r7, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b

    return res;
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <BNO055_Get_MAG_ID>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_MAG_ID(BNO055_Sensor_T *handle){
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af02      	add	r7, sp, #8
 8001c7e:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[1];
	BNO055_ReturnTypeDef_T res= BNO055_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	73fb      	strb	r3, [r7, #15]
	Txbuff[0] = BNO055_REG_ADDRESS_MAG_ID;
 8001c84:	2302      	movs	r3, #2
 8001c86:	733b      	strb	r3, [r7, #12]

    if(!BNO055_Get_PageID(handle)){
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 f9d0 	bl	800202e <BNO055_Get_PageID>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d125      	bne.n	8001ce0 <BNO055_Get_MAG_ID+0x68>
    	if(!handle->PageID){
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10c      	bne.n	8001cb8 <BNO055_Get_MAG_ID+0x40>
    		res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 8001c9e:	f107 0308 	add.w	r3, r7, #8
 8001ca2:	f107 010c 	add.w	r1, r7, #12
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	9200      	str	r2, [sp, #0]
 8001caa:	2201      	movs	r2, #1
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 fa1d 	bl	80020ec <BNO055_SendReceive>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	73fb      	strb	r3, [r7, #15]
 8001cb6:	e015      	b.n	8001ce4 <BNO055_Get_MAG_ID+0x6c>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0)){
 8001cb8:	2100      	movs	r1, #0
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f9d5 	bl	800206a <BNO055_Set_PageID>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10e      	bne.n	8001ce4 <BNO055_Get_MAG_ID+0x6c>
    			res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 8001cc6:	f107 0308 	add.w	r3, r7, #8
 8001cca:	f107 010c 	add.w	r1, r7, #12
 8001cce:	2201      	movs	r2, #1
 8001cd0:	9200      	str	r2, [sp, #0]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 fa09 	bl	80020ec <BNO055_SendReceive>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	73fb      	strb	r3, [r7, #15]
 8001cde:	e001      	b.n	8001ce4 <BNO055_Get_MAG_ID+0x6c>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e007      	b.n	8001cf4 <BNO055_Get_MAG_ID+0x7c>
    }

    if(!res)
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d103      	bne.n	8001cf2 <BNO055_Get_MAG_ID+0x7a>
        handle->IDs.MAG_ID = RxBuff[0];
 8001cea:	7a3a      	ldrb	r2, [r7, #8]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    return res;
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <BNO055_Get_All_Data>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_All_Data(BNO055_Sensor_T *handle){
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b092      	sub	sp, #72	@ 0x48
 8001d00:	af02      	add	r7, sp, #8
 8001d02:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[46];
	BNO055_ReturnTypeDef_T res = BNO055_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	Txbuff[0] = BNO055_REG_ADDRESS_ACC_X_DATA_LSB;
 8001d0a:	2308      	movs	r3, #8
 8001d0c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c

	BNO055_Get_PageID(handle);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f98c 	bl	800202e <BNO055_Get_PageID>
	if(!handle->PageID)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d10d      	bne.n	8001d3c <BNO055_Get_All_Data+0x40>
		res =BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 44);
 8001d20:	f107 030c 	add.w	r3, r7, #12
 8001d24:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8001d28:	222c      	movs	r2, #44	@ 0x2c
 8001d2a:	9200      	str	r2, [sp, #0]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f9dc 	bl	80020ec <BNO055_SendReceive>
 8001d34:	4603      	mov	r3, r0
 8001d36:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001d3a:	e013      	b.n	8001d64 <BNO055_Get_All_Data+0x68>
	else{
		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0))
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f993 	bl	800206a <BNO055_Set_PageID>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10c      	bne.n	8001d64 <BNO055_Get_All_Data+0x68>
			res =BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 44);
 8001d4a:	f107 030c 	add.w	r3, r7, #12
 8001d4e:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8001d52:	222c      	movs	r2, #44	@ 0x2c
 8001d54:	9200      	str	r2, [sp, #0]
 8001d56:	2201      	movs	r2, #1
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 f9c7 	bl	80020ec <BNO055_SendReceive>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}
	if(!res){
 8001d64:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f040 8100 	bne.w	8001f6e <BNO055_Get_All_Data+0x272>
//			if( ((RxBuff[5]>>6)&(0x01)) ){
//				RxBuff[5] |= 0x80;
//			}
//		}

		handle->ImuData.ACC_X = (int16_t)((int16_t)(RxBuff[1]<<8) | RxBuff[0]);
 8001d6e:	7b7b      	ldrb	r3, [r7, #13]
 8001d70:	b21b      	sxth	r3, r3
 8001d72:	021b      	lsls	r3, r3, #8
 8001d74:	b21a      	sxth	r2, r3
 8001d76:	7b3b      	ldrb	r3, [r7, #12]
 8001d78:	b21b      	sxth	r3, r3
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	b21a      	sxth	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	819a      	strh	r2, [r3, #12]
		handle->ImuData.ACC_Y = (int16_t)((int16_t)(RxBuff[3]<<8) | RxBuff[2]);
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
 8001d84:	b21b      	sxth	r3, r3
 8001d86:	021b      	lsls	r3, r3, #8
 8001d88:	b21a      	sxth	r2, r3
 8001d8a:	7bbb      	ldrb	r3, [r7, #14]
 8001d8c:	b21b      	sxth	r3, r3
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	b21a      	sxth	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	81da      	strh	r2, [r3, #14]
		handle->ImuData.ACC_Z = (int16_t)((int16_t)(RxBuff[5]<<8) | RxBuff[4]);
 8001d96:	7c7b      	ldrb	r3, [r7, #17]
 8001d98:	b21b      	sxth	r3, r3
 8001d9a:	021b      	lsls	r3, r3, #8
 8001d9c:	b21a      	sxth	r2, r3
 8001d9e:	7c3b      	ldrb	r3, [r7, #16]
 8001da0:	b21b      	sxth	r3, r3
 8001da2:	4313      	orrs	r3, r2
 8001da4:	b21a      	sxth	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	821a      	strh	r2, [r3, #16]
		handle->ImuData.MAG_X = (int16_t)((int16_t)(RxBuff[7]<<8) | RxBuff[6]);
 8001daa:	7cfb      	ldrb	r3, [r7, #19]
 8001dac:	b21b      	sxth	r3, r3
 8001dae:	021b      	lsls	r3, r3, #8
 8001db0:	b21a      	sxth	r2, r3
 8001db2:	7cbb      	ldrb	r3, [r7, #18]
 8001db4:	b21b      	sxth	r3, r3
 8001db6:	4313      	orrs	r3, r2
 8001db8:	b21a      	sxth	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	831a      	strh	r2, [r3, #24]
		handle->ImuData.MAG_Y =(int16_t)((int16_t)(RxBuff[9]<<8) | RxBuff[8]);
 8001dbe:	7d7b      	ldrb	r3, [r7, #21]
 8001dc0:	b21b      	sxth	r3, r3
 8001dc2:	021b      	lsls	r3, r3, #8
 8001dc4:	b21a      	sxth	r2, r3
 8001dc6:	7d3b      	ldrb	r3, [r7, #20]
 8001dc8:	b21b      	sxth	r3, r3
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	b21a      	sxth	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	835a      	strh	r2, [r3, #26]
		handle->ImuData.MAG_Z =(int16_t)((int16_t)(RxBuff[11]<<8) | RxBuff[10]);
 8001dd2:	7dfb      	ldrb	r3, [r7, #23]
 8001dd4:	b21b      	sxth	r3, r3
 8001dd6:	021b      	lsls	r3, r3, #8
 8001dd8:	b21a      	sxth	r2, r3
 8001dda:	7dbb      	ldrb	r3, [r7, #22]
 8001ddc:	b21b      	sxth	r3, r3
 8001dde:	4313      	orrs	r3, r2
 8001de0:	b21a      	sxth	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	839a      	strh	r2, [r3, #28]
		handle->ImuData.GYR_X =(int16_t)((int16_t)(RxBuff[13]<<8) | RxBuff[12]);
 8001de6:	7e7b      	ldrb	r3, [r7, #25]
 8001de8:	b21b      	sxth	r3, r3
 8001dea:	021b      	lsls	r3, r3, #8
 8001dec:	b21a      	sxth	r2, r3
 8001dee:	7e3b      	ldrb	r3, [r7, #24]
 8001df0:	b21b      	sxth	r3, r3
 8001df2:	4313      	orrs	r3, r2
 8001df4:	b21a      	sxth	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	825a      	strh	r2, [r3, #18]
		handle->ImuData.GYR_Y =(int16_t)((int16_t)(RxBuff[15]<<8) | RxBuff[14]);
 8001dfa:	7efb      	ldrb	r3, [r7, #27]
 8001dfc:	b21b      	sxth	r3, r3
 8001dfe:	021b      	lsls	r3, r3, #8
 8001e00:	b21a      	sxth	r2, r3
 8001e02:	7ebb      	ldrb	r3, [r7, #26]
 8001e04:	b21b      	sxth	r3, r3
 8001e06:	4313      	orrs	r3, r2
 8001e08:	b21a      	sxth	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	829a      	strh	r2, [r3, #20]
		handle->ImuData.GYR_Z =(int16_t)((int16_t)(RxBuff[17]<<8) | RxBuff[16]);
 8001e0e:	7f7b      	ldrb	r3, [r7, #29]
 8001e10:	b21b      	sxth	r3, r3
 8001e12:	021b      	lsls	r3, r3, #8
 8001e14:	b21a      	sxth	r2, r3
 8001e16:	7f3b      	ldrb	r3, [r7, #28]
 8001e18:	b21b      	sxth	r3, r3
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	b21a      	sxth	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	82da      	strh	r2, [r3, #22]
		handle->ImuData.Heading =(int16_t)((int16_t)(RxBuff[19]<<8) | RxBuff[18]);
 8001e22:	7ffb      	ldrb	r3, [r7, #31]
 8001e24:	b21b      	sxth	r3, r3
 8001e26:	021b      	lsls	r3, r3, #8
 8001e28:	b21a      	sxth	r2, r3
 8001e2a:	7fbb      	ldrb	r3, [r7, #30]
 8001e2c:	b21b      	sxth	r3, r3
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	b21a      	sxth	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	83da      	strh	r2, [r3, #30]
		handle->ImuData.Roll =(int16_t)((int16_t)(RxBuff[21]<<8) | RxBuff[20]);
 8001e36:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001e3a:	b21b      	sxth	r3, r3
 8001e3c:	021b      	lsls	r3, r3, #8
 8001e3e:	b21a      	sxth	r2, r3
 8001e40:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e44:	b21b      	sxth	r3, r3
 8001e46:	4313      	orrs	r3, r2
 8001e48:	b21a      	sxth	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	841a      	strh	r2, [r3, #32]
		handle->ImuData.Pitch =(int16_t)((int16_t)(RxBuff[23]<<8) | RxBuff[22]);
 8001e4e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001e52:	b21b      	sxth	r3, r3
 8001e54:	021b      	lsls	r3, r3, #8
 8001e56:	b21a      	sxth	r2, r3
 8001e58:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001e5c:	b21b      	sxth	r3, r3
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	b21a      	sxth	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	845a      	strh	r2, [r3, #34]	@ 0x22
		handle->ImuData.QUA_W =(int16_t)((int16_t)(RxBuff[25]<<8) | RxBuff[24]);
 8001e66:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001e6a:	b21b      	sxth	r3, r3
 8001e6c:	021b      	lsls	r3, r3, #8
 8001e6e:	b21a      	sxth	r2, r3
 8001e70:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e74:	b21b      	sxth	r3, r3
 8001e76:	4313      	orrs	r3, r2
 8001e78:	b21a      	sxth	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	849a      	strh	r2, [r3, #36]	@ 0x24
		handle->ImuData.QUA_X =(int16_t)((int16_t)(RxBuff[27]<<8) | RxBuff[26]);
 8001e7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e82:	b21b      	sxth	r3, r3
 8001e84:	021b      	lsls	r3, r3, #8
 8001e86:	b21a      	sxth	r2, r3
 8001e88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001e8c:	b21b      	sxth	r3, r3
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	b21a      	sxth	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	84da      	strh	r2, [r3, #38]	@ 0x26
		handle->ImuData.QUA_Y =(int16_t)((int16_t)(RxBuff[29]<<8) | RxBuff[28]);
 8001e96:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001e9a:	b21b      	sxth	r3, r3
 8001e9c:	021b      	lsls	r3, r3, #8
 8001e9e:	b21a      	sxth	r2, r3
 8001ea0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001ea4:	b21b      	sxth	r3, r3
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	b21a      	sxth	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	851a      	strh	r2, [r3, #40]	@ 0x28
		handle->ImuData.QUA_Z =(int16_t)((int16_t)(RxBuff[31]<<8) | RxBuff[30]);
 8001eae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001eb2:	b21b      	sxth	r3, r3
 8001eb4:	021b      	lsls	r3, r3, #8
 8001eb6:	b21a      	sxth	r2, r3
 8001eb8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001ebc:	b21b      	sxth	r3, r3
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	b21a      	sxth	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	855a      	strh	r2, [r3, #42]	@ 0x2a
		handle->ImuData.LINACC_X =(int16_t)((int16_t)(RxBuff[33]<<8) | RxBuff[32]);
 8001ec6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001eca:	b21b      	sxth	r3, r3
 8001ecc:	021b      	lsls	r3, r3, #8
 8001ece:	b21a      	sxth	r2, r3
 8001ed0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001ed4:	b21b      	sxth	r3, r3
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	b21a      	sxth	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	859a      	strh	r2, [r3, #44]	@ 0x2c
		handle->ImuData.LINACC_Y =(int16_t)((int16_t)(RxBuff[35]<<8) | RxBuff[34]);
 8001ede:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ee2:	b21b      	sxth	r3, r3
 8001ee4:	021b      	lsls	r3, r3, #8
 8001ee6:	b21a      	sxth	r2, r3
 8001ee8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001eec:	b21b      	sxth	r3, r3
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	b21a      	sxth	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	85da      	strh	r2, [r3, #46]	@ 0x2e
		handle->ImuData.LINACC_Z =(int16_t)((int16_t)(RxBuff[37]<<8) | RxBuff[36]);
 8001ef6:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8001efa:	b21b      	sxth	r3, r3
 8001efc:	021b      	lsls	r3, r3, #8
 8001efe:	b21a      	sxth	r2, r3
 8001f00:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001f04:	b21b      	sxth	r3, r3
 8001f06:	4313      	orrs	r3, r2
 8001f08:	b21a      	sxth	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	861a      	strh	r2, [r3, #48]	@ 0x30
		handle->ImuData.GRV_X =(int16_t)((int16_t)(RxBuff[39]<<8) | RxBuff[38]);
 8001f0e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f12:	b21b      	sxth	r3, r3
 8001f14:	021b      	lsls	r3, r3, #8
 8001f16:	b21a      	sxth	r2, r3
 8001f18:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001f1c:	b21b      	sxth	r3, r3
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	b21a      	sxth	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	865a      	strh	r2, [r3, #50]	@ 0x32
		handle->ImuData.GRV_Y =(int16_t)((int16_t)(RxBuff[41]<<8) | RxBuff[40]);
 8001f26:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001f2a:	b21b      	sxth	r3, r3
 8001f2c:	021b      	lsls	r3, r3, #8
 8001f2e:	b21a      	sxth	r2, r3
 8001f30:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001f34:	b21b      	sxth	r3, r3
 8001f36:	4313      	orrs	r3, r2
 8001f38:	b21a      	sxth	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	869a      	strh	r2, [r3, #52]	@ 0x34
		handle->ImuData.GRV_Z=(int16_t)((int16_t)(RxBuff[43]<<8) | RxBuff[42]);
 8001f3e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001f42:	b21b      	sxth	r3, r3
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	b21a      	sxth	r2, r3
 8001f48:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001f4c:	b21b      	sxth	r3, r3
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	b21a      	sxth	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	86da      	strh	r2, [r3, #54]	@ 0x36
		handle->ImuData.MAG_X =(int16_t)((int16_t)(RxBuff[45]<<8) | RxBuff[44]);
 8001f56:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001f5a:	b21b      	sxth	r3, r3
 8001f5c:	021b      	lsls	r3, r3, #8
 8001f5e:	b21a      	sxth	r2, r3
 8001f60:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001f64:	b21b      	sxth	r3, r3
 8001f66:	4313      	orrs	r3, r2
 8001f68:	b21a      	sxth	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	831a      	strh	r2, [r3, #24]

	}
	return res;
 8001f6e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3740      	adds	r7, #64	@ 0x40
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <BNO055_Set_DataUnit>:
}

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_DataUnit(BNO055_Sensor_T *handle, uint8_t data){
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b086      	sub	sp, #24
 8001f7e:	af02      	add	r7, sp, #8
 8001f80:	6078      	str	r0, [r7, #4]
 8001f82:	460b      	mov	r3, r1
 8001f84:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = 0x3B;
 8001f86:	233b      	movs	r3, #59	@ 0x3b
 8001f88:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = data;
 8001f8a:	78fb      	ldrb	r3, [r7, #3]
 8001f8c:	737b      	strb	r3, [r7, #13]

	BNO055_Get_PageID(handle);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f84d 	bl	800202e <BNO055_Get_PageID>
	if(handle->PageID){
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <BNO055_Set_DataUnit+0x2c>
		BNO055_Set_PageID(handle, BNO055_PAGE_ID_0);
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f862 	bl	800206a <BNO055_Set_PageID>
	}

	if(!handle->PageID){
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10a      	bne.n	8001fc6 <BNO055_Set_DataUnit+0x4c>
		return BNO055_SendReceive(handle, TxBuff, 2, 0, 0);
 8001fb0:	f107 010c 	add.w	r1, r7, #12
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	2300      	movs	r3, #0
 8001fba:	2202      	movs	r2, #2
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f895 	bl	80020ec <BNO055_SendReceive>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	e000      	b.n	8001fc8 <BNO055_Set_DataUnit+0x4e>
	}
	return BNO055_ERROR;
 8001fc6:	2301      	movs	r3, #1
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <BNO055_Get_DataUnit>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_DataUnit(BNO055_Sensor_T *handle){
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af02      	add	r7, sp, #8
 8001fd6:	6078      	str	r0, [r7, #4]
	uint8_t TxBuff[1], RxBuff[1];
	TxBuff[0] = 0x3B;
 8001fd8:	233b      	movs	r3, #59	@ 0x3b
 8001fda:	733b      	strb	r3, [r7, #12]

	BNO055_Get_PageID(handle);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f826 	bl	800202e <BNO055_Get_PageID>
	if(handle->PageID){
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <BNO055_Get_DataUnit+0x24>
		BNO055_Set_PageID(handle, BNO055_PAGE_ID_0);
 8001fec:	2100      	movs	r1, #0
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f83b 	bl	800206a <BNO055_Set_PageID>
	}
	if(!handle->PageID){
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d112      	bne.n	8002024 <BNO055_Get_DataUnit+0x54>
		if(!BNO055_SendReceive(handle, TxBuff, 1, RxBuff, 1)){
 8001ffe:	f107 0308 	add.w	r3, r7, #8
 8002002:	f107 010c 	add.w	r1, r7, #12
 8002006:	2201      	movs	r2, #1
 8002008:	9200      	str	r2, [sp, #0]
 800200a:	2201      	movs	r2, #1
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f86d 	bl	80020ec <BNO055_SendReceive>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d105      	bne.n	8002024 <BNO055_Get_DataUnit+0x54>
			handle->UnitStat = RxBuff[0];
 8002018:	7a3a      	ldrb	r2, [r7, #8]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
			return BNO055_OK;
 8002020:	2300      	movs	r3, #0
 8002022:	e000      	b.n	8002026 <BNO055_Get_DataUnit+0x56>
		}
	}
	return BNO055_ERROR;
 8002024:	2301      	movs	r3, #1

}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <BNO055_Get_PageID>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_PageID(BNO055_Sensor_T *handle){
 800202e:	b580      	push	{r7, lr}
 8002030:	b086      	sub	sp, #24
 8002032:	af02      	add	r7, sp, #8
 8002034:	6078      	str	r0, [r7, #4]
	uint8_t TxBuff[1], RxBuff[1];
	TxBuff[0] = 0x07;
 8002036:	2307      	movs	r3, #7
 8002038:	733b      	strb	r3, [r7, #12]
	if(BNO055_SendReceive(handle, TxBuff, 1, RxBuff, 1))
 800203a:	f107 0308 	add.w	r3, r7, #8
 800203e:	f107 010c 	add.w	r1, r7, #12
 8002042:	2201      	movs	r2, #1
 8002044:	9200      	str	r2, [sp, #0]
 8002046:	2201      	movs	r2, #1
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f84f 	bl	80020ec <BNO055_SendReceive>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <BNO055_Get_PageID+0x2a>
		return BNO055_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e004      	b.n	8002062 <BNO055_Get_PageID+0x34>
	else
		handle->PageID = RxBuff[0];
 8002058:	7a3a      	ldrb	r2, [r7, #8]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	return BNO055_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <BNO055_Set_PageID>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_PageID(BNO055_Sensor_T *handle, uint8_t PageID){
 800206a:	b580      	push	{r7, lr}
 800206c:	b086      	sub	sp, #24
 800206e:	af02      	add	r7, sp, #8
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	460b      	mov	r3, r1
 8002074:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = 0x07;
 8002076:	2307      	movs	r3, #7
 8002078:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = PageID;
 800207a:	78fb      	ldrb	r3, [r7, #3]
 800207c:	737b      	strb	r3, [r7, #13]
	if(BNO055_SendReceive(handle, TxBuff, 2, 0, 0))
 800207e:	f107 010c 	add.w	r1, r7, #12
 8002082:	2300      	movs	r3, #0
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	2300      	movs	r3, #0
 8002088:	2202      	movs	r2, #2
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f82e 	bl	80020ec <BNO055_SendReceive>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <BNO055_Set_PageID+0x30>
		return BNO055_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e006      	b.n	80020a8 <BNO055_Set_PageID+0x3e>
	else{
		HAL_Delay(5);
 800209a:	2005      	movs	r0, #5
 800209c:	f000 fe0c 	bl	8002cb8 <HAL_Delay>
		BNO055_Get_PageID(handle);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7ff ffc4 	bl	800202e <BNO055_Get_PageID>
		return BNO055_OK;
 80020a6:	2300      	movs	r3, #0
	}
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <BNO055_Get_SysError>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_SysError(BNO055_Sensor_T *handle){
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af02      	add	r7, sp, #8
 80020b6:	6078      	str	r0, [r7, #4]
	uint8_t TxBuff[1], RxBuff[1];
	TxBuff[0] = 0x3A;
 80020b8:	233a      	movs	r3, #58	@ 0x3a
 80020ba:	733b      	strb	r3, [r7, #12]
	if(BNO055_SendReceive(handle, TxBuff, 1, RxBuff, 1))
 80020bc:	f107 0308 	add.w	r3, r7, #8
 80020c0:	f107 010c 	add.w	r1, r7, #12
 80020c4:	2201      	movs	r2, #1
 80020c6:	9200      	str	r2, [sp, #0]
 80020c8:	2201      	movs	r2, #1
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f80e 	bl	80020ec <BNO055_SendReceive>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <BNO055_Get_SysError+0x2a>
		return BNO055_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e004      	b.n	80020e4 <BNO055_Get_SysError+0x34>
	else
		handle->SysError = RxBuff[0];
 80020da:	7a3a      	ldrb	r2, [r7, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
	return BNO055_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <BNO055_SendReceive>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_SendReceive(BNO055_Sensor_T *handle, uint8_t *txBuff, uint8_t txLenght, uint8_t *rxBuff, uint8_t rxLenght){
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af02      	add	r7, sp, #8
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	4613      	mov	r3, r2
 80020fa:	71fb      	strb	r3, [r7, #7]
	return BNO055_CommPorter_SendReceive(handle->I2C_No, handle->Chip_I2C_Address, txBuff, txLenght, rxBuff, rxLenght);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	7818      	ldrb	r0, [r3, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	7859      	ldrb	r1, [r3, #1]
 8002104:	79fa      	ldrb	r2, [r7, #7]
 8002106:	7e3b      	ldrb	r3, [r7, #24]
 8002108:	9301      	str	r3, [sp, #4]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	4613      	mov	r3, r2
 8002110:	68ba      	ldr	r2, [r7, #8]
 8002112:	f000 f805 	bl	8002120 <BNO055_CommPorter_SendReceive>
 8002116:	4603      	mov	r3, r0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <BNO055_CommPorter_SendReceive>:
 */

#include <stdint.h>
#include "I2C.h"

uint8_t BNO055_CommPorter_SendReceive(uint8_t I2CNo, uint8_t DevAddress, uint8_t *txBuff, uint8_t txLenght, uint8_t *rxBuff, uint8_t rxLenght){
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af02      	add	r7, sp, #8
 8002126:	603a      	str	r2, [r7, #0]
 8002128:	461a      	mov	r2, r3
 800212a:	4603      	mov	r3, r0
 800212c:	71fb      	strb	r3, [r7, #7]
 800212e:	460b      	mov	r3, r1
 8002130:	71bb      	strb	r3, [r7, #6]
 8002132:	4613      	mov	r3, r2
 8002134:	717b      	strb	r3, [r7, #5]
	return I2C_ReadWrite_Poll(I2CNo, DevAddress, txBuff, txLenght, rxBuff, rxLenght);
 8002136:	797a      	ldrb	r2, [r7, #5]
 8002138:	79b9      	ldrb	r1, [r7, #6]
 800213a:	79f8      	ldrb	r0, [r7, #7]
 800213c:	7d3b      	ldrb	r3, [r7, #20]
 800213e:	9301      	str	r3, [sp, #4]
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	4613      	mov	r3, r2
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	f7fe fbbe 	bl	80008c8 <I2C_ReadWrite_Poll>
 800214c:	4603      	mov	r3, r0
//	return I2C_ReadWrite_IT(I2CNo, DevAddress, txBuff, txLenght, rxBuff, rxLenght);
//	return I2C_ReadWrite_DMA(I2CNo, DevAddress, txBuff, txLenght, rxBuff, rxLenght);
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08a      	sub	sp, #40	@ 0x28
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002160:	2300      	movs	r3, #0
 8002162:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002164:	f009 f9dc 	bl	800b520 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002168:	4b5d      	ldr	r3, [pc, #372]	@ (80022e0 <pvPortMallocMicroROS+0x188>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8002170:	f000 f990 	bl	8002494 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002174:	4b5b      	ldr	r3, [pc, #364]	@ (80022e4 <pvPortMallocMicroROS+0x18c>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4013      	ands	r3, r2
 800217c:	2b00      	cmp	r3, #0
 800217e:	f040 8094 	bne.w	80022aa <pvPortMallocMicroROS+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d020      	beq.n	80021ca <pvPortMallocMicroROS+0x72>
			{
				xWantedSize += xHeapStructSize;
 8002188:	2208      	movs	r2, #8
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4413      	add	r3, r2
 800218e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	2b00      	cmp	r3, #0
 8002198:	d017      	beq.n	80021ca <pvPortMallocMicroROS+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f023 0307 	bic.w	r3, r3, #7
 80021a0:	3308      	adds	r3, #8
 80021a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00d      	beq.n	80021ca <pvPortMallocMicroROS+0x72>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80021ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021b2:	b672      	cpsid	i
 80021b4:	f383 8811 	msr	BASEPRI, r3
 80021b8:	f3bf 8f6f 	isb	sy
 80021bc:	f3bf 8f4f 	dsb	sy
 80021c0:	b662      	cpsie	i
 80021c2:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	e7fd      	b.n	80021c6 <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d06c      	beq.n	80022aa <pvPortMallocMicroROS+0x152>
 80021d0:	4b45      	ldr	r3, [pc, #276]	@ (80022e8 <pvPortMallocMicroROS+0x190>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d867      	bhi.n	80022aa <pvPortMallocMicroROS+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80021da:	4b44      	ldr	r3, [pc, #272]	@ (80022ec <pvPortMallocMicroROS+0x194>)
 80021dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80021de:	4b43      	ldr	r3, [pc, #268]	@ (80022ec <pvPortMallocMicroROS+0x194>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80021e4:	e004      	b.n	80021f0 <pvPortMallocMicroROS+0x98>
				{
					pxPreviousBlock = pxBlock;
 80021e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80021ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80021f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d903      	bls.n	8002202 <pvPortMallocMicroROS+0xaa>
 80021fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f1      	bne.n	80021e6 <pvPortMallocMicroROS+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002202:	4b37      	ldr	r3, [pc, #220]	@ (80022e0 <pvPortMallocMicroROS+0x188>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002208:	429a      	cmp	r2, r3
 800220a:	d04e      	beq.n	80022aa <pvPortMallocMicroROS+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800220c:	6a3b      	ldr	r3, [r7, #32]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2208      	movs	r2, #8
 8002212:	4413      	add	r3, r2
 8002214:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800221e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	1ad2      	subs	r2, r2, r3
 8002226:	2308      	movs	r3, #8
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	429a      	cmp	r2, r3
 800222c:	d922      	bls.n	8002274 <pvPortMallocMicroROS+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800222e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4413      	add	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00d      	beq.n	800225c <pvPortMallocMicroROS+0x104>
	__asm volatile
 8002240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002244:	b672      	cpsid	i
 8002246:	f383 8811 	msr	BASEPRI, r3
 800224a:	f3bf 8f6f 	isb	sy
 800224e:	f3bf 8f4f 	dsb	sy
 8002252:	b662      	cpsie	i
 8002254:	613b      	str	r3, [r7, #16]
}
 8002256:	bf00      	nop
 8002258:	bf00      	nop
 800225a:	e7fd      	b.n	8002258 <pvPortMallocMicroROS+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800225c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	1ad2      	subs	r2, r2, r3
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800226e:	69b8      	ldr	r0, [r7, #24]
 8002270:	f000 f972 	bl	8002558 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002274:	4b1c      	ldr	r3, [pc, #112]	@ (80022e8 <pvPortMallocMicroROS+0x190>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	4a1a      	ldr	r2, [pc, #104]	@ (80022e8 <pvPortMallocMicroROS+0x190>)
 8002280:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002282:	4b19      	ldr	r3, [pc, #100]	@ (80022e8 <pvPortMallocMicroROS+0x190>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	4b1a      	ldr	r3, [pc, #104]	@ (80022f0 <pvPortMallocMicroROS+0x198>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d203      	bcs.n	8002296 <pvPortMallocMicroROS+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800228e:	4b16      	ldr	r3, [pc, #88]	@ (80022e8 <pvPortMallocMicroROS+0x190>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a17      	ldr	r2, [pc, #92]	@ (80022f0 <pvPortMallocMicroROS+0x198>)
 8002294:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	4b12      	ldr	r3, [pc, #72]	@ (80022e4 <pvPortMallocMicroROS+0x18c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	431a      	orrs	r2, r3
 80022a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80022a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80022aa:	f009 f947 	bl	800b53c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00d      	beq.n	80022d4 <pvPortMallocMicroROS+0x17c>
	__asm volatile
 80022b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022bc:	b672      	cpsid	i
 80022be:	f383 8811 	msr	BASEPRI, r3
 80022c2:	f3bf 8f6f 	isb	sy
 80022c6:	f3bf 8f4f 	dsb	sy
 80022ca:	b662      	cpsie	i
 80022cc:	60fb      	str	r3, [r7, #12]
}
 80022ce:	bf00      	nop
 80022d0:	bf00      	nop
 80022d2:	e7fd      	b.n	80022d0 <pvPortMallocMicroROS+0x178>
	return pvReturn;
 80022d4:	69fb      	ldr	r3, [r7, #28]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3728      	adds	r7, #40	@ 0x28
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20004ae4 	.word	0x20004ae4
 80022e4:	20004af0 	.word	0x20004af0
 80022e8:	20004ae8 	.word	0x20004ae8
 80022ec:	20004adc 	.word	0x20004adc
 80022f0:	20004aec 	.word	0x20004aec

080022f4 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d04e      	beq.n	80023a4 <vPortFreeMicroROS+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002306:	2308      	movs	r3, #8
 8002308:	425b      	negs	r3, r3
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	4413      	add	r3, r2
 800230e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	4b24      	ldr	r3, [pc, #144]	@ (80023ac <vPortFreeMicroROS+0xb8>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4013      	ands	r3, r2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10d      	bne.n	800233e <vPortFreeMicroROS+0x4a>
	__asm volatile
 8002322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002326:	b672      	cpsid	i
 8002328:	f383 8811 	msr	BASEPRI, r3
 800232c:	f3bf 8f6f 	isb	sy
 8002330:	f3bf 8f4f 	dsb	sy
 8002334:	b662      	cpsie	i
 8002336:	60fb      	str	r3, [r7, #12]
}
 8002338:	bf00      	nop
 800233a:	bf00      	nop
 800233c:	e7fd      	b.n	800233a <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00d      	beq.n	8002362 <vPortFreeMicroROS+0x6e>
	__asm volatile
 8002346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800234a:	b672      	cpsid	i
 800234c:	f383 8811 	msr	BASEPRI, r3
 8002350:	f3bf 8f6f 	isb	sy
 8002354:	f3bf 8f4f 	dsb	sy
 8002358:	b662      	cpsie	i
 800235a:	60bb      	str	r3, [r7, #8]
}
 800235c:	bf00      	nop
 800235e:	bf00      	nop
 8002360:	e7fd      	b.n	800235e <vPortFreeMicroROS+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	4b11      	ldr	r3, [pc, #68]	@ (80023ac <vPortFreeMicroROS+0xb8>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4013      	ands	r3, r2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d019      	beq.n	80023a4 <vPortFreeMicroROS+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d115      	bne.n	80023a4 <vPortFreeMicroROS+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	4b0b      	ldr	r3, [pc, #44]	@ (80023ac <vPortFreeMicroROS+0xb8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	43db      	mvns	r3, r3
 8002382:	401a      	ands	r2, r3
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002388:	f009 f8ca 	bl	800b520 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	4b07      	ldr	r3, [pc, #28]	@ (80023b0 <vPortFreeMicroROS+0xbc>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4413      	add	r3, r2
 8002396:	4a06      	ldr	r2, [pc, #24]	@ (80023b0 <vPortFreeMicroROS+0xbc>)
 8002398:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800239a:	6938      	ldr	r0, [r7, #16]
 800239c:	f000 f8dc 	bl	8002558 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80023a0:	f009 f8cc 	bl	800b53c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80023a4:	bf00      	nop
 80023a6:	3718      	adds	r7, #24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	20004af0 	.word	0x20004af0
 80023b0:	20004ae8 	.word	0x20004ae8

080023b4 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80023b4:	b480      	push	{r7}
 80023b6:	b087      	sub	sp, #28
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80023c0:	2308      	movs	r3, #8
 80023c2:	425b      	negs	r3, r3
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	4413      	add	r3, r2
 80023c8:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	4b06      	ldr	r3, [pc, #24]	@ (80023ec <getBlockSize+0x38>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	43db      	mvns	r3, r3
 80023d8:	4013      	ands	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]

	return count;
 80023dc:	68fb      	ldr	r3, [r7, #12]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	371c      	adds	r7, #28
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	20004af0 	.word	0x20004af0

080023f0 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80023fa:	f009 f891 	bl	800b520 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80023fe:	6838      	ldr	r0, [r7, #0]
 8002400:	f7ff feaa 	bl	8002158 <pvPortMallocMicroROS>
 8002404:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d017      	beq.n	800243c <pvPortReallocMicroROS+0x4c>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d014      	beq.n	800243c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff ffce 	bl	80023b4 <getBlockSize>
 8002418:	4603      	mov	r3, r0
 800241a:	2208      	movs	r2, #8
 800241c:	1a9b      	subs	r3, r3, r2
 800241e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	429a      	cmp	r2, r3
 8002426:	d201      	bcs.n	800242c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	68b8      	ldr	r0, [r7, #8]
 8002432:	f019 f99a 	bl	801b76a <memcpy>

		vPortFreeMicroROS(pv);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff ff5c 	bl	80022f4 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 800243c:	f009 f87e 	bl	800b53c <xTaskResumeAll>

	return newmem;
 8002440:	68bb      	ldr	r3, [r7, #8]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b086      	sub	sp, #24
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8002454:	f009 f864 	bl	800b520 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	fb02 f303 	mul.w	r3, r2, r3
 8002460:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8002462:	6978      	ldr	r0, [r7, #20]
 8002464:	f7ff fe78 	bl	8002158 <pvPortMallocMicroROS>
 8002468:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	613b      	str	r3, [r7, #16]

  	while(count--)
 800246e:	e004      	b.n	800247a <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	613a      	str	r2, [r7, #16]
 8002476:	2200      	movs	r2, #0
 8002478:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	1e5a      	subs	r2, r3, #1
 800247e:	617a      	str	r2, [r7, #20]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1f5      	bne.n	8002470 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8002484:	f009 f85a 	bl	800b53c <xTaskResumeAll>
  	return mem;
 8002488:	68fb      	ldr	r3, [r7, #12]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
	...

08002494 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800249a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800249e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80024a0:	4b27      	ldr	r3, [pc, #156]	@ (8002540 <prvHeapInit+0xac>)
 80024a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00c      	beq.n	80024c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	3307      	adds	r3, #7
 80024b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f023 0307 	bic.w	r3, r3, #7
 80024ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80024bc:	68ba      	ldr	r2, [r7, #8]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002540 <prvHeapInit+0xac>)
 80024c4:	4413      	add	r3, r2
 80024c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80024cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002544 <prvHeapInit+0xb0>)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80024d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002544 <prvHeapInit+0xb0>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	4413      	add	r3, r2
 80024de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80024e0:	2208      	movs	r2, #8
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	1a9b      	subs	r3, r3, r2
 80024e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f023 0307 	bic.w	r3, r3, #7
 80024ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4a15      	ldr	r2, [pc, #84]	@ (8002548 <prvHeapInit+0xb4>)
 80024f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80024f6:	4b14      	ldr	r3, [pc, #80]	@ (8002548 <prvHeapInit+0xb4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2200      	movs	r2, #0
 80024fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80024fe:	4b12      	ldr	r3, [pc, #72]	@ (8002548 <prvHeapInit+0xb4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	1ad2      	subs	r2, r2, r3
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002514:	4b0c      	ldr	r3, [pc, #48]	@ (8002548 <prvHeapInit+0xb4>)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	4a0a      	ldr	r2, [pc, #40]	@ (800254c <prvHeapInit+0xb8>)
 8002522:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	4a09      	ldr	r2, [pc, #36]	@ (8002550 <prvHeapInit+0xbc>)
 800252a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800252c:	4b09      	ldr	r3, [pc, #36]	@ (8002554 <prvHeapInit+0xc0>)
 800252e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002532:	601a      	str	r2, [r3, #0]
}
 8002534:	bf00      	nop
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	20000edc 	.word	0x20000edc
 8002544:	20004adc 	.word	0x20004adc
 8002548:	20004ae4 	.word	0x20004ae4
 800254c:	20004aec 	.word	0x20004aec
 8002550:	20004ae8 	.word	0x20004ae8
 8002554:	20004af0 	.word	0x20004af0

08002558 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002560:	4b28      	ldr	r3, [pc, #160]	@ (8002604 <prvInsertBlockIntoFreeList+0xac>)
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	e002      	b.n	800256c <prvInsertBlockIntoFreeList+0x14>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	429a      	cmp	r2, r3
 8002574:	d8f7      	bhi.n	8002566 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	4413      	add	r3, r2
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	429a      	cmp	r2, r3
 8002586:	d108      	bne.n	800259a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	441a      	add	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	441a      	add	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d118      	bne.n	80025e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	4b15      	ldr	r3, [pc, #84]	@ (8002608 <prvInsertBlockIntoFreeList+0xb0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d00d      	beq.n	80025d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	441a      	add	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	e008      	b.n	80025e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80025d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002608 <prvInsertBlockIntoFreeList+0xb0>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	e003      	b.n	80025e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d002      	beq.n	80025f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80025f6:	bf00      	nop
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	20004adc 	.word	0x20004adc
 8002608:	20004ae4 	.word	0x20004ae4

0800260c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002610:	f001 fccd 	bl	8003fae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002614:	f000 f854 	bl	80026c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002618:	f000 fada 	bl	8002bd0 <MX_GPIO_Init>
  MX_DMA_Init();
 800261c:	f000 fab2 	bl	8002b84 <MX_DMA_Init>
  MX_I2C2_Init();
 8002620:	f000 f8c0 	bl	80027a4 <MX_I2C2_Init>
  MX_I2C3_Init();
 8002624:	f000 f902 	bl	800282c <MX_I2C3_Init>
  MX_SPI1_Init();
 8002628:	f000 f944 	bl	80028b4 <MX_SPI1_Init>
  MX_TIM3_Init();
 800262c:	f000 f980 	bl	8002930 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002630:	f000 f9f8 	bl	8002a24 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8002634:	f000 fa76 	bl	8002b24 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002638:	f007 fa68 	bl	8009b0c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Microros_DataMutex */
  Microros_DataMutexHandle = osMutexNew(&Microros_DataMutex_attributes);
 800263c:	4813      	ldr	r0, [pc, #76]	@ (800268c <main+0x80>)
 800263e:	f007 fba3 	bl	8009d88 <osMutexNew>
 8002642:	4603      	mov	r3, r0
 8002644:	4a12      	ldr	r2, [pc, #72]	@ (8002690 <main+0x84>)
 8002646:	6013      	str	r3, [r2, #0]

  /* creation of Microros_cmd_vel_Mutex */
  Microros_cmd_vel_MutexHandle = osMutexNew(&Microros_cmd_vel_Mutex_attributes);
 8002648:	4812      	ldr	r0, [pc, #72]	@ (8002694 <main+0x88>)
 800264a:	f007 fb9d 	bl	8009d88 <osMutexNew>
 800264e:	4603      	mov	r3, r0
 8002650:	4a11      	ldr	r2, [pc, #68]	@ (8002698 <main+0x8c>)
 8002652:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Thread_MicroROS */
  Thread_MicroROSHandle = osThreadNew(TaskMicroROS, NULL, &Thread_MicroROS_attributes);
 8002654:	4a11      	ldr	r2, [pc, #68]	@ (800269c <main+0x90>)
 8002656:	2100      	movs	r1, #0
 8002658:	4811      	ldr	r0, [pc, #68]	@ (80026a0 <main+0x94>)
 800265a:	f007 fac1 	bl	8009be0 <osThreadNew>
 800265e:	4603      	mov	r3, r0
 8002660:	4a10      	ldr	r2, [pc, #64]	@ (80026a4 <main+0x98>)
 8002662:	6013      	str	r3, [r2, #0]

  /* creation of Thread_Sensors */
  Thread_SensorsHandle = osThreadNew(TaskSensors, NULL, &Thread_Sensors_attributes);
 8002664:	4a10      	ldr	r2, [pc, #64]	@ (80026a8 <main+0x9c>)
 8002666:	2100      	movs	r1, #0
 8002668:	4810      	ldr	r0, [pc, #64]	@ (80026ac <main+0xa0>)
 800266a:	f007 fab9 	bl	8009be0 <osThreadNew>
 800266e:	4603      	mov	r3, r0
 8002670:	4a0f      	ldr	r2, [pc, #60]	@ (80026b0 <main+0xa4>)
 8002672:	6013      	str	r3, [r2, #0]

  /* creation of Thread_Thruster */
  Thread_ThrusterHandle = osThreadNew(TaskThruster, NULL, &Thread_Thruster_attributes);
 8002674:	4a0f      	ldr	r2, [pc, #60]	@ (80026b4 <main+0xa8>)
 8002676:	2100      	movs	r1, #0
 8002678:	480f      	ldr	r0, [pc, #60]	@ (80026b8 <main+0xac>)
 800267a:	f007 fab1 	bl	8009be0 <osThreadNew>
 800267e:	4603      	mov	r3, r0
 8002680:	4a0e      	ldr	r2, [pc, #56]	@ (80026bc <main+0xb0>)
 8002682:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002684:	f007 fa76 	bl	8009b74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002688:	bf00      	nop
 800268a:	e7fd      	b.n	8002688 <main+0x7c>
 800268c:	0801c574 	.word	0x0801c574
 8002690:	20005020 	.word	0x20005020
 8002694:	0801c584 	.word	0x0801c584
 8002698:	20005024 	.word	0x20005024
 800269c:	0801c508 	.word	0x0801c508
 80026a0:	08002da9 	.word	0x08002da9
 80026a4:	20005014 	.word	0x20005014
 80026a8:	0801c52c 	.word	0x0801c52c
 80026ac:	08003059 	.word	0x08003059
 80026b0:	20005018 	.word	0x20005018
 80026b4:	0801c550 	.word	0x0801c550
 80026b8:	080031bd 	.word	0x080031bd
 80026bc:	2000501c 	.word	0x2000501c

080026c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b094      	sub	sp, #80	@ 0x50
 80026c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026c6:	f107 031c 	add.w	r3, r7, #28
 80026ca:	2234      	movs	r2, #52	@ 0x34
 80026cc:	2100      	movs	r1, #0
 80026ce:	4618      	mov	r0, r3
 80026d0:	f018 ff82 	bl	801b5d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026d4:	f107 0308 	add.w	r3, r7, #8
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	605a      	str	r2, [r3, #4]
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	60da      	str	r2, [r3, #12]
 80026e2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80026e4:	f003 f936 	bl	8005954 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026e8:	4b2c      	ldr	r3, [pc, #176]	@ (800279c <SystemClock_Config+0xdc>)
 80026ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ec:	4a2b      	ldr	r2, [pc, #172]	@ (800279c <SystemClock_Config+0xdc>)
 80026ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80026f4:	4b29      	ldr	r3, [pc, #164]	@ (800279c <SystemClock_Config+0xdc>)
 80026f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026fc:	607b      	str	r3, [r7, #4]
 80026fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002700:	4b27      	ldr	r3, [pc, #156]	@ (80027a0 <SystemClock_Config+0xe0>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002708:	4a25      	ldr	r2, [pc, #148]	@ (80027a0 <SystemClock_Config+0xe0>)
 800270a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800270e:	6013      	str	r3, [r2, #0]
 8002710:	4b23      	ldr	r3, [pc, #140]	@ (80027a0 <SystemClock_Config+0xe0>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002718:	603b      	str	r3, [r7, #0]
 800271a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800271c:	2301      	movs	r3, #1
 800271e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002720:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002724:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002726:	2302      	movs	r3, #2
 8002728:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800272a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800272e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002730:	2304      	movs	r3, #4
 8002732:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002734:	2360      	movs	r3, #96	@ 0x60
 8002736:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002738:	2302      	movs	r3, #2
 800273a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800273c:	2304      	movs	r3, #4
 800273e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002740:	2302      	movs	r3, #2
 8002742:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002744:	f107 031c 	add.w	r3, r7, #28
 8002748:	4618      	mov	r0, r3
 800274a:	f003 f963 	bl	8005a14 <HAL_RCC_OscConfig>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002754:	f000 fd8e 	bl	8003274 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002758:	f003 f90c 	bl	8005974 <HAL_PWREx_EnableOverDrive>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002762:	f000 fd87 	bl	8003274 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002766:	230f      	movs	r3, #15
 8002768:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800276a:	2302      	movs	r3, #2
 800276c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800276e:	2300      	movs	r3, #0
 8002770:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002772:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002776:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002778:	2300      	movs	r3, #0
 800277a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800277c:	f107 0308 	add.w	r3, r7, #8
 8002780:	2103      	movs	r1, #3
 8002782:	4618      	mov	r0, r3
 8002784:	f003 fbf4 	bl	8005f70 <HAL_RCC_ClockConfig>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800278e:	f000 fd71 	bl	8003274 <Error_Handler>
  }
}
 8002792:	bf00      	nop
 8002794:	3750      	adds	r7, #80	@ 0x50
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40023800 	.word	0x40023800
 80027a0:	40007000 	.word	0x40007000

080027a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80027a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002820 <MX_I2C2_Init+0x7c>)
 80027aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002824 <MX_I2C2_Init+0x80>)
 80027ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2010091A;
 80027ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002820 <MX_I2C2_Init+0x7c>)
 80027b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002828 <MX_I2C2_Init+0x84>)
 80027b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80027b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002820 <MX_I2C2_Init+0x7c>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027ba:	4b19      	ldr	r3, [pc, #100]	@ (8002820 <MX_I2C2_Init+0x7c>)
 80027bc:	2201      	movs	r2, #1
 80027be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027c0:	4b17      	ldr	r3, [pc, #92]	@ (8002820 <MX_I2C2_Init+0x7c>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80027c6:	4b16      	ldr	r3, [pc, #88]	@ (8002820 <MX_I2C2_Init+0x7c>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80027cc:	4b14      	ldr	r3, [pc, #80]	@ (8002820 <MX_I2C2_Init+0x7c>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027d2:	4b13      	ldr	r3, [pc, #76]	@ (8002820 <MX_I2C2_Init+0x7c>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027d8:	4b11      	ldr	r3, [pc, #68]	@ (8002820 <MX_I2C2_Init+0x7c>)
 80027da:	2200      	movs	r2, #0
 80027dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80027de:	4810      	ldr	r0, [pc, #64]	@ (8002820 <MX_I2C2_Init+0x7c>)
 80027e0:	f002 fad0 	bl	8004d84 <HAL_I2C_Init>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80027ea:	f000 fd43 	bl	8003274 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027ee:	2100      	movs	r1, #0
 80027f0:	480b      	ldr	r0, [pc, #44]	@ (8002820 <MX_I2C2_Init+0x7c>)
 80027f2:	f003 f817 	bl	8005824 <HAL_I2CEx_ConfigAnalogFilter>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80027fc:	f000 fd3a 	bl	8003274 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002800:	2100      	movs	r1, #0
 8002802:	4807      	ldr	r0, [pc, #28]	@ (8002820 <MX_I2C2_Init+0x7c>)
 8002804:	f003 f859 	bl	80058ba <HAL_I2CEx_ConfigDigitalFilter>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800280e:	f000 fd31 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */
  I2C_Init(&hi2c2, I2CNO_2);
 8002812:	2102      	movs	r1, #2
 8002814:	4802      	ldr	r0, [pc, #8]	@ (8002820 <MX_I2C2_Init+0x7c>)
 8002816:	f7fe f845 	bl	80008a4 <I2C_Init>
  /* USER CODE END I2C2_Init 2 */

}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20004d28 	.word	0x20004d28
 8002824:	40005800 	.word	0x40005800
 8002828:	2010091a 	.word	0x2010091a

0800282c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002830:	4b1d      	ldr	r3, [pc, #116]	@ (80028a8 <MX_I2C3_Init+0x7c>)
 8002832:	4a1e      	ldr	r2, [pc, #120]	@ (80028ac <MX_I2C3_Init+0x80>)
 8002834:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x2010091A;
 8002836:	4b1c      	ldr	r3, [pc, #112]	@ (80028a8 <MX_I2C3_Init+0x7c>)
 8002838:	4a1d      	ldr	r2, [pc, #116]	@ (80028b0 <MX_I2C3_Init+0x84>)
 800283a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800283c:	4b1a      	ldr	r3, [pc, #104]	@ (80028a8 <MX_I2C3_Init+0x7c>)
 800283e:	2200      	movs	r2, #0
 8002840:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002842:	4b19      	ldr	r3, [pc, #100]	@ (80028a8 <MX_I2C3_Init+0x7c>)
 8002844:	2201      	movs	r2, #1
 8002846:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002848:	4b17      	ldr	r3, [pc, #92]	@ (80028a8 <MX_I2C3_Init+0x7c>)
 800284a:	2200      	movs	r2, #0
 800284c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800284e:	4b16      	ldr	r3, [pc, #88]	@ (80028a8 <MX_I2C3_Init+0x7c>)
 8002850:	2200      	movs	r2, #0
 8002852:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002854:	4b14      	ldr	r3, [pc, #80]	@ (80028a8 <MX_I2C3_Init+0x7c>)
 8002856:	2200      	movs	r2, #0
 8002858:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800285a:	4b13      	ldr	r3, [pc, #76]	@ (80028a8 <MX_I2C3_Init+0x7c>)
 800285c:	2200      	movs	r2, #0
 800285e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002860:	4b11      	ldr	r3, [pc, #68]	@ (80028a8 <MX_I2C3_Init+0x7c>)
 8002862:	2200      	movs	r2, #0
 8002864:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002866:	4810      	ldr	r0, [pc, #64]	@ (80028a8 <MX_I2C3_Init+0x7c>)
 8002868:	f002 fa8c 	bl	8004d84 <HAL_I2C_Init>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002872:	f000 fcff 	bl	8003274 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002876:	2100      	movs	r1, #0
 8002878:	480b      	ldr	r0, [pc, #44]	@ (80028a8 <MX_I2C3_Init+0x7c>)
 800287a:	f002 ffd3 	bl	8005824 <HAL_I2CEx_ConfigAnalogFilter>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002884:	f000 fcf6 	bl	8003274 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002888:	2100      	movs	r1, #0
 800288a:	4807      	ldr	r0, [pc, #28]	@ (80028a8 <MX_I2C3_Init+0x7c>)
 800288c:	f003 f815 	bl	80058ba <HAL_I2CEx_ConfigDigitalFilter>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002896:	f000 fced 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */
  I2C_Init(&hi2c3, I2CNO_3);
 800289a:	2103      	movs	r1, #3
 800289c:	4802      	ldr	r0, [pc, #8]	@ (80028a8 <MX_I2C3_Init+0x7c>)
 800289e:	f7fe f801 	bl	80008a4 <I2C_Init>
  /* USER CODE END I2C3_Init 2 */

}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	20004d7c 	.word	0x20004d7c
 80028ac:	40005c00 	.word	0x40005c00
 80028b0:	2010091a 	.word	0x2010091a

080028b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80028b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002928 <MX_SPI1_Init+0x74>)
 80028ba:	4a1c      	ldr	r2, [pc, #112]	@ (800292c <MX_SPI1_Init+0x78>)
 80028bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80028be:	4b1a      	ldr	r3, [pc, #104]	@ (8002928 <MX_SPI1_Init+0x74>)
 80028c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80028c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80028c6:	4b18      	ldr	r3, [pc, #96]	@ (8002928 <MX_SPI1_Init+0x74>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80028cc:	4b16      	ldr	r3, [pc, #88]	@ (8002928 <MX_SPI1_Init+0x74>)
 80028ce:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80028d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028d4:	4b14      	ldr	r3, [pc, #80]	@ (8002928 <MX_SPI1_Init+0x74>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028da:	4b13      	ldr	r3, [pc, #76]	@ (8002928 <MX_SPI1_Init+0x74>)
 80028dc:	2200      	movs	r2, #0
 80028de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80028e0:	4b11      	ldr	r3, [pc, #68]	@ (8002928 <MX_SPI1_Init+0x74>)
 80028e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80028e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002928 <MX_SPI1_Init+0x74>)
 80028ea:	2208      	movs	r2, #8
 80028ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002928 <MX_SPI1_Init+0x74>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80028f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002928 <MX_SPI1_Init+0x74>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002928 <MX_SPI1_Init+0x74>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002900:	4b09      	ldr	r3, [pc, #36]	@ (8002928 <MX_SPI1_Init+0x74>)
 8002902:	2207      	movs	r2, #7
 8002904:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002906:	4b08      	ldr	r3, [pc, #32]	@ (8002928 <MX_SPI1_Init+0x74>)
 8002908:	2200      	movs	r2, #0
 800290a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800290c:	4b06      	ldr	r3, [pc, #24]	@ (8002928 <MX_SPI1_Init+0x74>)
 800290e:	2208      	movs	r2, #8
 8002910:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002912:	4805      	ldr	r0, [pc, #20]	@ (8002928 <MX_SPI1_Init+0x74>)
 8002914:	f004 f9ac 	bl	8006c70 <HAL_SPI_Init>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800291e:	f000 fca9 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002922:	bf00      	nop
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20004dd0 	.word	0x20004dd0
 800292c:	40013000 	.word	0x40013000

08002930 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b090      	sub	sp, #64	@ 0x40
 8002934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002936:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	605a      	str	r2, [r3, #4]
 8002940:	609a      	str	r2, [r3, #8]
 8002942:	60da      	str	r2, [r3, #12]
 8002944:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002946:	f107 0320 	add.w	r3, r7, #32
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	605a      	str	r2, [r3, #4]
 8002950:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002952:	1d3b      	adds	r3, r7, #4
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	611a      	str	r2, [r3, #16]
 8002960:	615a      	str	r2, [r3, #20]
 8002962:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002964:	4b2d      	ldr	r3, [pc, #180]	@ (8002a1c <MX_TIM3_Init+0xec>)
 8002966:	4a2e      	ldr	r2, [pc, #184]	@ (8002a20 <MX_TIM3_Init+0xf0>)
 8002968:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 800296a:	4b2c      	ldr	r3, [pc, #176]	@ (8002a1c <MX_TIM3_Init+0xec>)
 800296c:	2230      	movs	r2, #48	@ 0x30
 800296e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002970:	4b2a      	ldr	r3, [pc, #168]	@ (8002a1c <MX_TIM3_Init+0xec>)
 8002972:	2200      	movs	r2, #0
 8002974:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8002976:	4b29      	ldr	r3, [pc, #164]	@ (8002a1c <MX_TIM3_Init+0xec>)
 8002978:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800297c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800297e:	4b27      	ldr	r3, [pc, #156]	@ (8002a1c <MX_TIM3_Init+0xec>)
 8002980:	2200      	movs	r2, #0
 8002982:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002984:	4b25      	ldr	r3, [pc, #148]	@ (8002a1c <MX_TIM3_Init+0xec>)
 8002986:	2200      	movs	r2, #0
 8002988:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800298a:	4824      	ldr	r0, [pc, #144]	@ (8002a1c <MX_TIM3_Init+0xec>)
 800298c:	f004 fb3b 	bl	8007006 <HAL_TIM_Base_Init>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8002996:	f000 fc6d 	bl	8003274 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800299a:	4820      	ldr	r0, [pc, #128]	@ (8002a1c <MX_TIM3_Init+0xec>)
 800299c:	f004 fc02 	bl	80071a4 <HAL_TIM_PWM_Init>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80029a6:	f000 fc65 	bl	8003274 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80029aa:	2307      	movs	r3, #7
 80029ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80029ae:	2300      	movs	r3, #0
 80029b0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80029b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029b6:	4619      	mov	r1, r3
 80029b8:	4818      	ldr	r0, [pc, #96]	@ (8002a1c <MX_TIM3_Init+0xec>)
 80029ba:	f004 ff61 	bl	8007880 <HAL_TIM_SlaveConfigSynchro>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80029c4:	f000 fc56 	bl	8003274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029c8:	2300      	movs	r3, #0
 80029ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029cc:	2300      	movs	r3, #0
 80029ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029d0:	f107 0320 	add.w	r3, r7, #32
 80029d4:	4619      	mov	r1, r3
 80029d6:	4811      	ldr	r0, [pc, #68]	@ (8002a1c <MX_TIM3_Init+0xec>)
 80029d8:	f005 fbf8 	bl	80081cc <HAL_TIMEx_MasterConfigSynchronization>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 80029e2:	f000 fc47 	bl	8003274 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029e6:	2360      	movs	r3, #96	@ 0x60
 80029e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80029f6:	1d3b      	adds	r3, r7, #4
 80029f8:	2204      	movs	r2, #4
 80029fa:	4619      	mov	r1, r3
 80029fc:	4807      	ldr	r0, [pc, #28]	@ (8002a1c <MX_TIM3_Init+0xec>)
 80029fe:	f004 fe2b 	bl	8007658 <HAL_TIM_PWM_ConfigChannel>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8002a08:	f000 fc34 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002a0c:	4803      	ldr	r0, [pc, #12]	@ (8002a1c <MX_TIM3_Init+0xec>)
 8002a0e:	f000 ff27 	bl	8003860 <HAL_TIM_MspPostInit>

}
 8002a12:	bf00      	nop
 8002a14:	3740      	adds	r7, #64	@ 0x40
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20004e34 	.word	0x20004e34
 8002a20:	40000400 	.word	0x40000400

08002a24 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08a      	sub	sp, #40	@ 0x28
 8002a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a2a:	f107 031c 	add.w	r3, r7, #28
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	605a      	str	r2, [r3, #4]
 8002a34:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a36:	463b      	mov	r3, r7
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	605a      	str	r2, [r3, #4]
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	60da      	str	r2, [r3, #12]
 8002a42:	611a      	str	r2, [r3, #16]
 8002a44:	615a      	str	r2, [r3, #20]
 8002a46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002a48:	4b34      	ldr	r3, [pc, #208]	@ (8002b1c <MX_TIM4_Init+0xf8>)
 8002a4a:	4a35      	ldr	r2, [pc, #212]	@ (8002b20 <MX_TIM4_Init+0xfc>)
 8002a4c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 95;
 8002a4e:	4b33      	ldr	r3, [pc, #204]	@ (8002b1c <MX_TIM4_Init+0xf8>)
 8002a50:	225f      	movs	r2, #95	@ 0x5f
 8002a52:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a54:	4b31      	ldr	r3, [pc, #196]	@ (8002b1c <MX_TIM4_Init+0xf8>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8002a5a:	4b30      	ldr	r3, [pc, #192]	@ (8002b1c <MX_TIM4_Init+0xf8>)
 8002a5c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002a60:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a62:	4b2e      	ldr	r3, [pc, #184]	@ (8002b1c <MX_TIM4_Init+0xf8>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a68:	4b2c      	ldr	r3, [pc, #176]	@ (8002b1c <MX_TIM4_Init+0xf8>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002a6e:	482b      	ldr	r0, [pc, #172]	@ (8002b1c <MX_TIM4_Init+0xf8>)
 8002a70:	f004 fb98 	bl	80071a4 <HAL_TIM_PWM_Init>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002a7a:	f000 fbfb 	bl	8003274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a82:	2300      	movs	r3, #0
 8002a84:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a86:	f107 031c 	add.w	r3, r7, #28
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4823      	ldr	r0, [pc, #140]	@ (8002b1c <MX_TIM4_Init+0xf8>)
 8002a8e:	f005 fb9d 	bl	80081cc <HAL_TIMEx_MasterConfigSynchronization>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002a98:	f000 fbec 	bl	8003274 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a9c:	2360      	movs	r3, #96	@ 0x60
 8002a9e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002aac:	463b      	mov	r3, r7
 8002aae:	2200      	movs	r2, #0
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	481a      	ldr	r0, [pc, #104]	@ (8002b1c <MX_TIM4_Init+0xf8>)
 8002ab4:	f004 fdd0 	bl	8007658 <HAL_TIM_PWM_ConfigChannel>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002abe:	f000 fbd9 	bl	8003274 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ac2:	463b      	mov	r3, r7
 8002ac4:	2204      	movs	r2, #4
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4814      	ldr	r0, [pc, #80]	@ (8002b1c <MX_TIM4_Init+0xf8>)
 8002aca:	f004 fdc5 	bl	8007658 <HAL_TIM_PWM_ConfigChannel>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002ad4:	f000 fbce 	bl	8003274 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ad8:	463b      	mov	r3, r7
 8002ada:	2208      	movs	r2, #8
 8002adc:	4619      	mov	r1, r3
 8002ade:	480f      	ldr	r0, [pc, #60]	@ (8002b1c <MX_TIM4_Init+0xf8>)
 8002ae0:	f004 fdba 	bl	8007658 <HAL_TIM_PWM_ConfigChannel>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8002aea:	f000 fbc3 	bl	8003274 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002aee:	463b      	mov	r3, r7
 8002af0:	220c      	movs	r2, #12
 8002af2:	4619      	mov	r1, r3
 8002af4:	4809      	ldr	r0, [pc, #36]	@ (8002b1c <MX_TIM4_Init+0xf8>)
 8002af6:	f004 fdaf 	bl	8007658 <HAL_TIM_PWM_ConfigChannel>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8002b00:	f000 fbb8 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002b04:	2100      	movs	r1, #0
 8002b06:	4805      	ldr	r0, [pc, #20]	@ (8002b1c <MX_TIM4_Init+0xf8>)
 8002b08:	f004 fba4 	bl	8007254 <HAL_TIM_PWM_Start>

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002b0c:	4803      	ldr	r0, [pc, #12]	@ (8002b1c <MX_TIM4_Init+0xf8>)
 8002b0e:	f000 fea7 	bl	8003860 <HAL_TIM_MspPostInit>

}
 8002b12:	bf00      	nop
 8002b14:	3728      	adds	r7, #40	@ 0x28
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20004e80 	.word	0x20004e80
 8002b20:	40000800 	.word	0x40000800

08002b24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b28:	4b14      	ldr	r3, [pc, #80]	@ (8002b7c <MX_USART2_UART_Init+0x58>)
 8002b2a:	4a15      	ldr	r2, [pc, #84]	@ (8002b80 <MX_USART2_UART_Init+0x5c>)
 8002b2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b2e:	4b13      	ldr	r3, [pc, #76]	@ (8002b7c <MX_USART2_UART_Init+0x58>)
 8002b30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b36:	4b11      	ldr	r3, [pc, #68]	@ (8002b7c <MX_USART2_UART_Init+0x58>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b7c <MX_USART2_UART_Init+0x58>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b42:	4b0e      	ldr	r3, [pc, #56]	@ (8002b7c <MX_USART2_UART_Init+0x58>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b48:	4b0c      	ldr	r3, [pc, #48]	@ (8002b7c <MX_USART2_UART_Init+0x58>)
 8002b4a:	220c      	movs	r2, #12
 8002b4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b7c <MX_USART2_UART_Init+0x58>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b54:	4b09      	ldr	r3, [pc, #36]	@ (8002b7c <MX_USART2_UART_Init+0x58>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b5a:	4b08      	ldr	r3, [pc, #32]	@ (8002b7c <MX_USART2_UART_Init+0x58>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b60:	4b06      	ldr	r3, [pc, #24]	@ (8002b7c <MX_USART2_UART_Init+0x58>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b66:	4805      	ldr	r0, [pc, #20]	@ (8002b7c <MX_USART2_UART_Init+0x58>)
 8002b68:	f005 fbdc 	bl	8008324 <HAL_UART_Init>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002b72:	f000 fb7f 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	20004ecc 	.word	0x20004ecc
 8002b80:	40004400 	.word	0x40004400

08002b84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b8a:	4b10      	ldr	r3, [pc, #64]	@ (8002bcc <MX_DMA_Init+0x48>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8e:	4a0f      	ldr	r2, [pc, #60]	@ (8002bcc <MX_DMA_Init+0x48>)
 8002b90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b96:	4b0d      	ldr	r3, [pc, #52]	@ (8002bcc <MX_DMA_Init+0x48>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b9e:	607b      	str	r3, [r7, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2105      	movs	r1, #5
 8002ba6:	2010      	movs	r0, #16
 8002ba8:	f001 fae6 	bl	8004178 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002bac:	2010      	movs	r0, #16
 8002bae:	f001 faff 	bl	80041b0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	2105      	movs	r1, #5
 8002bb6:	2011      	movs	r0, #17
 8002bb8:	f001 fade 	bl	8004178 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002bbc:	2011      	movs	r0, #17
 8002bbe:	f001 faf7 	bl	80041b0 <HAL_NVIC_EnableIRQ>

}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40023800 	.word	0x40023800

08002bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08a      	sub	sp, #40	@ 0x28
 8002bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd6:	f107 0314 	add.w	r3, r7, #20
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	605a      	str	r2, [r3, #4]
 8002be0:	609a      	str	r2, [r3, #8]
 8002be2:	60da      	str	r2, [r3, #12]
 8002be4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002be6:	4b31      	ldr	r3, [pc, #196]	@ (8002cac <MX_GPIO_Init+0xdc>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bea:	4a30      	ldr	r2, [pc, #192]	@ (8002cac <MX_GPIO_Init+0xdc>)
 8002bec:	f043 0304 	orr.w	r3, r3, #4
 8002bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bf2:	4b2e      	ldr	r3, [pc, #184]	@ (8002cac <MX_GPIO_Init+0xdc>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	613b      	str	r3, [r7, #16]
 8002bfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bfe:	4b2b      	ldr	r3, [pc, #172]	@ (8002cac <MX_GPIO_Init+0xdc>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c02:	4a2a      	ldr	r2, [pc, #168]	@ (8002cac <MX_GPIO_Init+0xdc>)
 8002c04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c0a:	4b28      	ldr	r3, [pc, #160]	@ (8002cac <MX_GPIO_Init+0xdc>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c16:	4b25      	ldr	r3, [pc, #148]	@ (8002cac <MX_GPIO_Init+0xdc>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1a:	4a24      	ldr	r2, [pc, #144]	@ (8002cac <MX_GPIO_Init+0xdc>)
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c22:	4b22      	ldr	r3, [pc, #136]	@ (8002cac <MX_GPIO_Init+0xdc>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	60bb      	str	r3, [r7, #8]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c2e:	4b1f      	ldr	r3, [pc, #124]	@ (8002cac <MX_GPIO_Init+0xdc>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c32:	4a1e      	ldr	r2, [pc, #120]	@ (8002cac <MX_GPIO_Init+0xdc>)
 8002c34:	f043 0302 	orr.w	r3, r3, #2
 8002c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8002cac <MX_GPIO_Init+0xdc>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	607b      	str	r3, [r7, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c46:	4b19      	ldr	r3, [pc, #100]	@ (8002cac <MX_GPIO_Init+0xdc>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4a:	4a18      	ldr	r2, [pc, #96]	@ (8002cac <MX_GPIO_Init+0xdc>)
 8002c4c:	f043 0308 	orr.w	r3, r3, #8
 8002c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c52:	4b16      	ldr	r3, [pc, #88]	@ (8002cac <MX_GPIO_Init+0xdc>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	603b      	str	r3, [r7, #0]
 8002c5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f244 0181 	movw	r1, #16513	@ 0x4081
 8002c64:	4812      	ldr	r0, [pc, #72]	@ (8002cb0 <MX_GPIO_Init+0xe0>)
 8002c66:	f002 f873 	bl	8004d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002c6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c70:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002c74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002c7a:	f107 0314 	add.w	r3, r7, #20
 8002c7e:	4619      	mov	r1, r3
 8002c80:	480c      	ldr	r0, [pc, #48]	@ (8002cb4 <MX_GPIO_Init+0xe4>)
 8002c82:	f001 feb9 	bl	80049f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002c86:	f244 0381 	movw	r3, #16513	@ 0x4081
 8002c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c90:	2300      	movs	r3, #0
 8002c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c94:	2300      	movs	r3, #0
 8002c96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c98:	f107 0314 	add.w	r3, r7, #20
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4804      	ldr	r0, [pc, #16]	@ (8002cb0 <MX_GPIO_Init+0xe0>)
 8002ca0:	f001 feaa 	bl	80049f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002ca4:	bf00      	nop
 8002ca6:	3728      	adds	r7, #40	@ 0x28
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	40020400 	.word	0x40020400
 8002cb4:	40020800 	.word	0x40020800

08002cb8 <HAL_Delay>:




void HAL_Delay(uint32_t Delay)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  osDelay(Delay);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f007 f833 	bl	8009d2c <osDelay>
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
	...

08002cd0 <cmd_vel_callback>:
        return (uint16_t)(pwm_neutral + thrust * (pwm_neutral - pwm_min));
    }
}

void cmd_vel_callback(const void * msgin)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b08b      	sub	sp, #44	@ 0x2c
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
    const geometry_msgs__msg__Twist * msg = (const geometry_msgs__msg__Twist *)msgin;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	627b      	str	r3, [r7, #36]	@ 0x24

    float linear_x  = msg->linear.x;   // ileri/geri
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cde:	ed93 7b00 	vldr	d7, [r3]
 8002ce2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002ce6:	edc7 7a08 	vstr	s15, [r7, #32]
    float linear_y  = msg->linear.y;   // sağ/sol
 8002cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cec:	ed93 7b02 	vldr	d7, [r3, #8]
 8002cf0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002cf4:	edc7 7a07 	vstr	s15, [r7, #28]
    float angular_z = msg->angular.z;  // yaw dönmesi
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfa:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8002cfe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d02:	edc7 7a06 	vstr	s15, [r7, #24]

    // Basit thrust dağılımı (ROV’un pervane yönlerine göre katsayıyla ayarlanmalı)
    float thrust_SA =  linear_x - linear_y - angular_z;  // Sağ Ön
 8002d06:	ed97 7a08 	vldr	s14, [r7, #32]
 8002d0a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d12:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d1a:	edc7 7a05 	vstr	s15, [r7, #20]
    float thrust_SB =  linear_x + linear_y - angular_z;  // Sağ Arka
 8002d1e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002d22:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d2a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d32:	edc7 7a04 	vstr	s15, [r7, #16]
    float thrust_PA =  linear_x + linear_y + angular_z;  // Sol Ön
 8002d36:	ed97 7a08 	vldr	s14, [r7, #32]
 8002d3a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d42:	ed97 7a06 	vldr	s14, [r7, #24]
 8002d46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d4a:	edc7 7a03 	vstr	s15, [r7, #12]
    float thrust_PB =  linear_x - linear_y + angular_z;  // Sol Arka
 8002d4e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002d52:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d5a:	ed97 7a06 	vldr	s14, [r7, #24]
 8002d5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d62:	edc7 7a02 	vstr	s15, [r7, #8]

    // Thrust → PWM dönüşümü (örnek, motor karakteristiğine göre ayarlanmalı)
    THRUSTER_Vert_R.PWM_Raw = thrust_SA;
 8002d66:	4a0b      	ldr	r2, [pc, #44]	@ (8002d94 <cmd_vel_callback+0xc4>)
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	6113      	str	r3, [r2, #16]
    THRUSTER_Vert_L.PWM_Raw = thrust_SB;
 8002d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8002d98 <cmd_vel_callback+0xc8>)
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	6113      	str	r3, [r2, #16]
    THRUSTER_Horz_R.PWM_Raw = thrust_PA;
 8002d72:	4a0a      	ldr	r2, [pc, #40]	@ (8002d9c <cmd_vel_callback+0xcc>)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6113      	str	r3, [r2, #16]
    THRUSTER_Horz_L.PWM_Raw = thrust_PB;
 8002d78:	4a09      	ldr	r2, [pc, #36]	@ (8002da0 <cmd_vel_callback+0xd0>)
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	6113      	str	r3, [r2, #16]

    THRUSTER_Vert_R.dataNumb++;
 8002d7e:	4b05      	ldr	r3, [pc, #20]	@ (8002d94 <cmd_vel_callback+0xc4>)
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	3301      	adds	r3, #1
 8002d84:	4a03      	ldr	r2, [pc, #12]	@ (8002d94 <cmd_vel_callback+0xc4>)
 8002d86:	61d3      	str	r3, [r2, #28]

}
 8002d88:	bf00      	nop
 8002d8a:	372c      	adds	r7, #44	@ 0x2c
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	20000c2c 	.word	0x20000c2c
 8002d98:	20000c4c 	.word	0x20000c4c
 8002d9c:	20000c6c 	.word	0x20000c6c
 8002da0:	20000c8c 	.word	0x20000c8c
 8002da4:	00000000 	.word	0x00000000

08002da8 <TaskMicroROS>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMicroROS */
void TaskMicroROS(void *argument)
{
 8002da8:	b5b0      	push	{r4, r5, r7, lr}
 8002daa:	b0c0      	sub	sp, #256	@ 0x100
 8002dac:	af02      	add	r7, sp, #8
 8002dae:	61f8      	str	r0, [r7, #28]
	rcl_allocator_t allocator;
	rclc_support_t support;
    rcl_node_t node;
    rclc_executor_t cmd_vel_executor;

	rmw_uros_set_custom_transport(true, (void *) &huart2, cubemx_transport_open, cubemx_transport_close, cubemx_transport_write, cubemx_transport_read);
 8002db0:	4b89      	ldr	r3, [pc, #548]	@ (8002fd8 <TaskMicroROS+0x230>)
 8002db2:	9301      	str	r3, [sp, #4]
 8002db4:	4b89      	ldr	r3, [pc, #548]	@ (8002fdc <TaskMicroROS+0x234>)
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	4b89      	ldr	r3, [pc, #548]	@ (8002fe0 <TaskMicroROS+0x238>)
 8002dba:	4a8a      	ldr	r2, [pc, #552]	@ (8002fe4 <TaskMicroROS+0x23c>)
 8002dbc:	498a      	ldr	r1, [pc, #552]	@ (8002fe8 <TaskMicroROS+0x240>)
 8002dbe:	2001      	movs	r0, #1
 8002dc0:	f00c ff3e 	bl	800fc40 <rmw_uros_set_custom_transport>

	allocator = rcutils_get_zero_initialized_allocator();
 8002dc4:	463b      	mov	r3, r7
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f00c fe72 	bl	800fab0 <rcutils_get_zero_initialized_allocator>
 8002dcc:	f107 04e4 	add.w	r4, r7, #228	@ 0xe4
 8002dd0:	463d      	mov	r5, r7
 8002dd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002dd6:	682b      	ldr	r3, [r5, #0]
 8002dd8:	6023      	str	r3, [r4, #0]

	allocator.allocate = microros_allocate;
 8002dda:	4b84      	ldr	r3, [pc, #528]	@ (8002fec <TaskMicroROS+0x244>)
 8002ddc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
	allocator.deallocate = microros_deallocate;
 8002de0:	4b83      	ldr	r3, [pc, #524]	@ (8002ff0 <TaskMicroROS+0x248>)
 8002de2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
	allocator.reallocate = microros_reallocate;
 8002de6:	4b83      	ldr	r3, [pc, #524]	@ (8002ff4 <TaskMicroROS+0x24c>)
 8002de8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
	allocator.zero_allocate = microros_zero_allocate;
 8002dec:	4b82      	ldr	r3, [pc, #520]	@ (8002ff8 <TaskMicroROS+0x250>)
 8002dee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

	rcutils_set_default_allocator(&allocator);
 8002df2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002df6:	4618      	mov	r0, r3
 8002df8:	f00c fe68 	bl	800facc <rcutils_set_default_allocator>

	rclc_support_init(&support, 0, NULL, &allocator);
 8002dfc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002e00:	f107 00b0 	add.w	r0, r7, #176	@ 0xb0
 8002e04:	2200      	movs	r2, #0
 8002e06:	2100      	movs	r1, #0
 8002e08:	f00c fd4a 	bl	800f8a0 <rclc_support_init>

	rclc_node_init_default(&node, "my_node", "", &support);
 8002e0c:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8002e10:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8002e14:	4a79      	ldr	r2, [pc, #484]	@ (8002ffc <TaskMicroROS+0x254>)
 8002e16:	497a      	ldr	r1, [pc, #488]	@ (8003000 <TaskMicroROS+0x258>)
 8002e18:	f00c fd8c 	bl	800f934 <rclc_node_init_default>

	//microros sub and pub inits

	rclc_subscription_init_best_effort(&cmd_vel_subscriber, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist), "cmd_vel");
 8002e1c:	f00a f92e 	bl	800d07c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8002e20:	4602      	mov	r2, r0
 8002e22:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8002e26:	4b77      	ldr	r3, [pc, #476]	@ (8003004 <TaskMicroROS+0x25c>)
 8002e28:	4877      	ldr	r0, [pc, #476]	@ (8003008 <TaskMicroROS+0x260>)
 8002e2a:	f00c fdff 	bl	800fa2c <rclc_subscription_init_best_effort>

	rclc_publisher_init_best_effort(&imu_publisher, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu), "imu_data");
 8002e2e:	f00d fa6f 	bl	8010310 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 8002e32:	4602      	mov	r2, r0
 8002e34:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8002e38:	4b74      	ldr	r3, [pc, #464]	@ (800300c <TaskMicroROS+0x264>)
 8002e3a:	4875      	ldr	r0, [pc, #468]	@ (8003010 <TaskMicroROS+0x268>)
 8002e3c:	f00c fdbc 	bl	800f9b8 <rclc_publisher_init_best_effort>

	rclc_publisher_init_best_effort(&pressure_publisher, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, FluidPressure), "pressure_data");
 8002e40:	f00d fa4e 	bl	80102e0 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure>
 8002e44:	4602      	mov	r2, r0
 8002e46:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8002e4a:	4b72      	ldr	r3, [pc, #456]	@ (8003014 <TaskMicroROS+0x26c>)
 8002e4c:	4872      	ldr	r0, [pc, #456]	@ (8003018 <TaskMicroROS+0x270>)
 8002e4e:	f00c fdb3 	bl	800f9b8 <rclc_publisher_init_best_effort>

	rclc_publisher_init_best_effort(&magneto_publisher, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, MagneticField), "magneto_data");
 8002e52:	f00d fa75 	bl	8010340 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField>
 8002e56:	4602      	mov	r2, r0
 8002e58:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8002e5c:	4b6f      	ldr	r3, [pc, #444]	@ (800301c <TaskMicroROS+0x274>)
 8002e5e:	4870      	ldr	r0, [pc, #448]	@ (8003020 <TaskMicroROS+0x278>)
 8002e60:	f00c fdaa 	bl	800f9b8 <rclc_publisher_init_best_effort>

	rclc_publisher_init_best_effort(&heading_publisher, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32), "compass_heading");
 8002e64:	f00d fd42 	bl	80108ec <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8002e6e:	4b6d      	ldr	r3, [pc, #436]	@ (8003024 <TaskMicroROS+0x27c>)
 8002e70:	486d      	ldr	r0, [pc, #436]	@ (8003028 <TaskMicroROS+0x280>)
 8002e72:	f00c fda1 	bl	800f9b8 <rclc_publisher_init_best_effort>

	//microros executor inits
	rclc_executor_init(&cmd_vel_executor, &support.context, 1, &allocator);
 8002e76:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002e7a:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 8002e7e:	f107 0020 	add.w	r0, r7, #32
 8002e82:	2201      	movs	r2, #1
 8002e84:	f00c fa2c 	bl	800f2e0 <rclc_executor_init>

	rclc_executor_add_subscription(&cmd_vel_executor, &cmd_vel_subscriber, &cmd_vel_msg, &cmd_vel_callback, ALWAYS);
 8002e88:	f107 0020 	add.w	r0, r7, #32
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	4b66      	ldr	r3, [pc, #408]	@ (800302c <TaskMicroROS+0x284>)
 8002e92:	4a67      	ldr	r2, [pc, #412]	@ (8003030 <TaskMicroROS+0x288>)
 8002e94:	495c      	ldr	r1, [pc, #368]	@ (8003008 <TaskMicroROS+0x260>)
 8002e96:	f00c fa9f 	bl	800f3d8 <rclc_executor_add_subscription>

	memset(&imu_msg, 0, sizeof(imu_msg));
 8002e9a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	4864      	ldr	r0, [pc, #400]	@ (8003034 <TaskMicroROS+0x28c>)
 8002ea2:	f018 fb99 	bl	801b5d8 <memset>
	memset(&pressure_msg, 0, sizeof(pressure_msg));
 8002ea6:	2228      	movs	r2, #40	@ 0x28
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	4863      	ldr	r0, [pc, #396]	@ (8003038 <TaskMicroROS+0x290>)
 8002eac:	f018 fb94 	bl	801b5d8 <memset>
	memset(&magneto_msg, 0, sizeof(magneto_msg));
 8002eb0:	2278      	movs	r2, #120	@ 0x78
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	4861      	ldr	r0, [pc, #388]	@ (800303c <TaskMicroROS+0x294>)
 8002eb6:	f018 fb8f 	bl	801b5d8 <memset>
    memset(&heading_msg, 0, sizeof(heading_msg));
 8002eba:	2204      	movs	r2, #4
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	4860      	ldr	r0, [pc, #384]	@ (8003040 <TaskMicroROS+0x298>)
 8002ec0:	f018 fb8a 	bl	801b5d8 <memset>

	for(;;){

		imu_msg.header.stamp.sec = rmw_uros_epoch_millis() / 1000;
 8002ec4:	f00c fed2 	bl	800fc6c <rmw_uros_epoch_millis>
 8002ec8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	f7fd fa1e 	bl	8000310 <__aeabi_ldivmod>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	4b56      	ldr	r3, [pc, #344]	@ (8003034 <TaskMicroROS+0x28c>)
 8002eda:	601a      	str	r2, [r3, #0]
		imu_msg.header.stamp.nanosec = (rmw_uros_epoch_millis() % 1000) * 1000000;
 8002edc:	f00c fec6 	bl	800fc6c <rmw_uros_epoch_millis>
 8002ee0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	f7fd fa12 	bl	8000310 <__aeabi_ldivmod>
 8002eec:	4b55      	ldr	r3, [pc, #340]	@ (8003044 <TaskMicroROS+0x29c>)
 8002eee:	fb02 f303 	mul.w	r3, r2, r3
 8002ef2:	4a50      	ldr	r2, [pc, #320]	@ (8003034 <TaskMicroROS+0x28c>)
 8002ef4:	6053      	str	r3, [r2, #4]
		imu_msg.header.frame_id.data = frame_id_imu;
 8002ef6:	4b4f      	ldr	r3, [pc, #316]	@ (8003034 <TaskMicroROS+0x28c>)
 8002ef8:	4a53      	ldr	r2, [pc, #332]	@ (8003048 <TaskMicroROS+0x2a0>)
 8002efa:	609a      	str	r2, [r3, #8]
		imu_msg.header.frame_id.size = strlen(frame_id_imu);
 8002efc:	4852      	ldr	r0, [pc, #328]	@ (8003048 <TaskMicroROS+0x2a0>)
 8002efe:	f7fd f9a9 	bl	8000254 <strlen>
 8002f02:	4603      	mov	r3, r0
 8002f04:	4a4b      	ldr	r2, [pc, #300]	@ (8003034 <TaskMicroROS+0x28c>)
 8002f06:	60d3      	str	r3, [r2, #12]
		imu_msg.header.frame_id.capacity = imu_msg.header.frame_id.size + 1;
 8002f08:	4b4a      	ldr	r3, [pc, #296]	@ (8003034 <TaskMicroROS+0x28c>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	4a49      	ldr	r2, [pc, #292]	@ (8003034 <TaskMicroROS+0x28c>)
 8002f10:	6113      	str	r3, [r2, #16]

		pressure_msg.header.stamp.sec = rmw_uros_epoch_millis() / 1000;
 8002f12:	f00c feab 	bl	800fc6c <rmw_uros_epoch_millis>
 8002f16:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	f7fd f9f7 	bl	8000310 <__aeabi_ldivmod>
 8002f22:	4602      	mov	r2, r0
 8002f24:	460b      	mov	r3, r1
 8002f26:	4b44      	ldr	r3, [pc, #272]	@ (8003038 <TaskMicroROS+0x290>)
 8002f28:	601a      	str	r2, [r3, #0]
		pressure_msg.header.stamp.nanosec = (rmw_uros_epoch_millis() % 1000) * 1000000;
 8002f2a:	f00c fe9f 	bl	800fc6c <rmw_uros_epoch_millis>
 8002f2e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	f7fd f9eb 	bl	8000310 <__aeabi_ldivmod>
 8002f3a:	4b42      	ldr	r3, [pc, #264]	@ (8003044 <TaskMicroROS+0x29c>)
 8002f3c:	fb02 f303 	mul.w	r3, r2, r3
 8002f40:	4a3d      	ldr	r2, [pc, #244]	@ (8003038 <TaskMicroROS+0x290>)
 8002f42:	6053      	str	r3, [r2, #4]
		pressure_msg.header.frame_id.data = frame_id_pressure;
 8002f44:	4b3c      	ldr	r3, [pc, #240]	@ (8003038 <TaskMicroROS+0x290>)
 8002f46:	4a41      	ldr	r2, [pc, #260]	@ (800304c <TaskMicroROS+0x2a4>)
 8002f48:	609a      	str	r2, [r3, #8]
		pressure_msg.header.frame_id.size = strlen(frame_id_pressure);
 8002f4a:	4840      	ldr	r0, [pc, #256]	@ (800304c <TaskMicroROS+0x2a4>)
 8002f4c:	f7fd f982 	bl	8000254 <strlen>
 8002f50:	4603      	mov	r3, r0
 8002f52:	4a39      	ldr	r2, [pc, #228]	@ (8003038 <TaskMicroROS+0x290>)
 8002f54:	60d3      	str	r3, [r2, #12]
		pressure_msg.header.frame_id.capacity = pressure_msg.header.frame_id.size + 1;
 8002f56:	4b38      	ldr	r3, [pc, #224]	@ (8003038 <TaskMicroROS+0x290>)
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	4a36      	ldr	r2, [pc, #216]	@ (8003038 <TaskMicroROS+0x290>)
 8002f5e:	6113      	str	r3, [r2, #16]

		magneto_msg.header.stamp.sec = rmw_uros_epoch_millis() / 1000;
 8002f60:	f00c fe84 	bl	800fc6c <rmw_uros_epoch_millis>
 8002f64:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002f68:	f04f 0300 	mov.w	r3, #0
 8002f6c:	f7fd f9d0 	bl	8000310 <__aeabi_ldivmod>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4b31      	ldr	r3, [pc, #196]	@ (800303c <TaskMicroROS+0x294>)
 8002f76:	601a      	str	r2, [r3, #0]
		magneto_msg.header.stamp.nanosec = (rmw_uros_epoch_millis() % 1000) * 1000000;
 8002f78:	f00c fe78 	bl	800fc6c <rmw_uros_epoch_millis>
 8002f7c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	f7fd f9c4 	bl	8000310 <__aeabi_ldivmod>
 8002f88:	4b2e      	ldr	r3, [pc, #184]	@ (8003044 <TaskMicroROS+0x29c>)
 8002f8a:	fb02 f303 	mul.w	r3, r2, r3
 8002f8e:	4a2b      	ldr	r2, [pc, #172]	@ (800303c <TaskMicroROS+0x294>)
 8002f90:	6053      	str	r3, [r2, #4]
		magneto_msg.header.frame_id.data = frame_id_magneto;
 8002f92:	4b2a      	ldr	r3, [pc, #168]	@ (800303c <TaskMicroROS+0x294>)
 8002f94:	4a2e      	ldr	r2, [pc, #184]	@ (8003050 <TaskMicroROS+0x2a8>)
 8002f96:	609a      	str	r2, [r3, #8]
		magneto_msg.header.frame_id.size = strlen(frame_id_magneto);
 8002f98:	482d      	ldr	r0, [pc, #180]	@ (8003050 <TaskMicroROS+0x2a8>)
 8002f9a:	f7fd f95b 	bl	8000254 <strlen>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	4a26      	ldr	r2, [pc, #152]	@ (800303c <TaskMicroROS+0x294>)
 8002fa2:	60d3      	str	r3, [r2, #12]
		magneto_msg.header.frame_id.capacity = magneto_msg.header.frame_id.size + 1;
 8002fa4:	4b25      	ldr	r3, [pc, #148]	@ (800303c <TaskMicroROS+0x294>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	4a24      	ldr	r2, [pc, #144]	@ (800303c <TaskMicroROS+0x294>)
 8002fac:	6113      	str	r3, [r2, #16]
		//publish data with mutex


		//if(osMutexAcquire(Microros_cmd_vel_MutexHandle, 10) == osOK){

		    spin_rs = rclc_executor_spin_some(&cmd_vel_executor, RCL_MS_TO_NS(20));
 8002fae:	f107 0120 	add.w	r1, r7, #32
 8002fb2:	a307      	add	r3, pc, #28	@ (adr r3, 8002fd0 <TaskMicroROS+0x228>)
 8002fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb8:	4608      	mov	r0, r1
 8002fba:	f00c fc37 	bl	800f82c <rclc_executor_spin_some>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	4a24      	ldr	r2, [pc, #144]	@ (8003054 <TaskMicroROS+0x2ac>)
 8002fc2:	6013      	str	r3, [r2, #0]
			rcl_publish(&heading_publisher, &heading_msg, NULL);

			osMutexRelease(Microros_DataMutexHandle);
		}*/

		osDelay(20);
 8002fc4:	2014      	movs	r0, #20
 8002fc6:	f006 feb1 	bl	8009d2c <osDelay>
		imu_msg.header.stamp.sec = rmw_uros_epoch_millis() / 1000;
 8002fca:	bf00      	nop
 8002fcc:	e77a      	b.n	8002ec4 <TaskMicroROS+0x11c>
 8002fce:	bf00      	nop
 8002fd0:	01312d00 	.word	0x01312d00
 8002fd4:	00000000 	.word	0x00000000
 8002fd8:	08003eb5 	.word	0x08003eb5
 8002fdc:	08003e55 	.word	0x08003e55
 8002fe0:	08003e35 	.word	0x08003e35
 8002fe4:	08003e09 	.word	0x08003e09
 8002fe8:	20004ecc 	.word	0x20004ecc
 8002fec:	08003281 	.word	0x08003281
 8002ff0:	080032c5 	.word	0x080032c5
 8002ff4:	080032fd 	.word	0x080032fd
 8002ff8:	08003369 	.word	0x08003369
 8002ffc:	0801c484 	.word	0x0801c484
 8003000:	0801c488 	.word	0x0801c488
 8003004:	0801c490 	.word	0x0801c490
 8003008:	20004b04 	.word	0x20004b04
 800300c:	0801c498 	.word	0x0801c498
 8003010:	20004af4 	.word	0x20004af4
 8003014:	0801c4a4 	.word	0x0801c4a4
 8003018:	20004af8 	.word	0x20004af8
 800301c:	0801c4b4 	.word	0x0801c4b4
 8003020:	20004afc 	.word	0x20004afc
 8003024:	0801c4c4 	.word	0x0801c4c4
 8003028:	20004b00 	.word	0x20004b00
 800302c:	08002cd1 	.word	0x08002cd1
 8003030:	20004cf8 	.word	0x20004cf8
 8003034:	20004b10 	.word	0x20004b10
 8003038:	20004c50 	.word	0x20004c50
 800303c:	20004c78 	.word	0x20004c78
 8003040:	20004cf0 	.word	0x20004cf0
 8003044:	000f4240 	.word	0x000f4240
 8003048:	20000000 	.word	0x20000000
 800304c:	2000000c 	.word	0x2000000c
 8003050:	2000001c 	.word	0x2000001c
 8003054:	20004b08 	.word	0x20004b08

08003058 <TaskSensors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskSensors */
void TaskSensors(void *argument)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af02      	add	r7, sp, #8
 800305e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskSensors */

	IMU_Init(&IMU_1, 1, I2CNO_2, BNO055_I2C_ADRESS, 0, 0);
 8003060:	2300      	movs	r3, #0
 8003062:	9301      	str	r3, [sp, #4]
 8003064:	2300      	movs	r3, #0
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	2328      	movs	r3, #40	@ 0x28
 800306a:	2202      	movs	r2, #2
 800306c:	2101      	movs	r1, #1
 800306e:	484c      	ldr	r0, [pc, #304]	@ (80031a0 <TaskSensors+0x148>)
 8003070:	f7fd fd2f 	bl	8000ad2 <IMU_Init>
	PressureSensor_Init(&PressureSensor_1, 1, I2CNO_3, 0x40);
 8003074:	2340      	movs	r3, #64	@ 0x40
 8003076:	2203      	movs	r2, #3
 8003078:	2101      	movs	r1, #1
 800307a:	484a      	ldr	r0, [pc, #296]	@ (80031a4 <TaskSensors+0x14c>)
 800307c:	f7fe f9cc 	bl	8001418 <PressureSensor_Init>
	osDelay(100);
 8003080:	2064      	movs	r0, #100	@ 0x64
 8003082:	f006 fe53 	bl	8009d2c <osDelay>

  /* Infinite loop */
  for(;;)
  {

	IMU_Execute(&IMU_1, 1);
 8003086:	2101      	movs	r1, #1
 8003088:	4845      	ldr	r0, [pc, #276]	@ (80031a0 <TaskSensors+0x148>)
 800308a:	f7fd fd61 	bl	8000b50 <IMU_Execute>
//	PressureSensor_Execute(&PressureSensor_1, 1);

	if(osMutexAcquire(Microros_DataMutexHandle, 10) == osOK){
 800308e:	4b46      	ldr	r3, [pc, #280]	@ (80031a8 <TaskSensors+0x150>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	210a      	movs	r1, #10
 8003094:	4618      	mov	r0, r3
 8003096:	f006 ff11 	bl	8009ebc <osMutexAcquire>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d17a      	bne.n	8003196 <TaskSensors+0x13e>

	imu_msg.linear_acceleration.x = IMU_1.CalculatedData.LinAcc.X_Axis;
 80030a0:	4b3f      	ldr	r3, [pc, #252]	@ (80031a0 <TaskSensors+0x148>)
 80030a2:	edd3 7a2a 	vldr	s15, [r3, #168]	@ 0xa8
 80030a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80030aa:	4b40      	ldr	r3, [pc, #256]	@ (80031ac <TaskSensors+0x154>)
 80030ac:	ed83 7b38 	vstr	d7, [r3, #224]	@ 0xe0
	imu_msg.linear_acceleration.y = IMU_1.CalculatedData.LinAcc.Y_Axis;
 80030b0:	4b3b      	ldr	r3, [pc, #236]	@ (80031a0 <TaskSensors+0x148>)
 80030b2:	edd3 7a2b 	vldr	s15, [r3, #172]	@ 0xac
 80030b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80030ba:	4b3c      	ldr	r3, [pc, #240]	@ (80031ac <TaskSensors+0x154>)
 80030bc:	ed83 7b3a 	vstr	d7, [r3, #232]	@ 0xe8
	imu_msg.linear_acceleration.z = IMU_1.CalculatedData.LinAcc.Z_Axis;
 80030c0:	4b37      	ldr	r3, [pc, #220]	@ (80031a0 <TaskSensors+0x148>)
 80030c2:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 80030c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80030ca:	4b38      	ldr	r3, [pc, #224]	@ (80031ac <TaskSensors+0x154>)
 80030cc:	ed83 7b3c 	vstr	d7, [r3, #240]	@ 0xf0

	imu_msg.angular_velocity.x = IMU_1.CalculatedData.Gyroscope.X_Axis;
 80030d0:	4b33      	ldr	r3, [pc, #204]	@ (80031a0 <TaskSensors+0x148>)
 80030d2:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 80030d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80030da:	4b34      	ldr	r3, [pc, #208]	@ (80031ac <TaskSensors+0x154>)
 80030dc:	ed83 7b20 	vstr	d7, [r3, #128]	@ 0x80
	imu_msg.angular_velocity.y = IMU_1.CalculatedData.Gyroscope.Y_Axis;
 80030e0:	4b2f      	ldr	r3, [pc, #188]	@ (80031a0 <TaskSensors+0x148>)
 80030e2:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 80030e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80030ea:	4b30      	ldr	r3, [pc, #192]	@ (80031ac <TaskSensors+0x154>)
 80030ec:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
	imu_msg.angular_velocity.z = IMU_1.CalculatedData.Gyroscope.Z_Axis;
 80030f0:	4b2b      	ldr	r3, [pc, #172]	@ (80031a0 <TaskSensors+0x148>)
 80030f2:	edd3 7a1f 	vldr	s15, [r3, #124]	@ 0x7c
 80030f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80030fa:	4b2c      	ldr	r3, [pc, #176]	@ (80031ac <TaskSensors+0x154>)
 80030fc:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90

	imu_msg.orientation.w = IMU_1.CalculatedData.Qua.W_Axis;
 8003100:	4b27      	ldr	r3, [pc, #156]	@ (80031a0 <TaskSensors+0x148>)
 8003102:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
 8003106:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800310a:	4b28      	ldr	r3, [pc, #160]	@ (80031ac <TaskSensors+0x154>)
 800310c:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
	imu_msg.orientation.x = IMU_1.CalculatedData.Qua.X_Axis;
 8003110:	4b23      	ldr	r3, [pc, #140]	@ (80031a0 <TaskSensors+0x148>)
 8003112:	edd3 7a27 	vldr	s15, [r3, #156]	@ 0x9c
 8003116:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800311a:	4b24      	ldr	r3, [pc, #144]	@ (80031ac <TaskSensors+0x154>)
 800311c:	ed83 7b06 	vstr	d7, [r3, #24]
	imu_msg.orientation.y = IMU_1.CalculatedData.Qua.Y_Axis;
 8003120:	4b1f      	ldr	r3, [pc, #124]	@ (80031a0 <TaskSensors+0x148>)
 8003122:	edd3 7a28 	vldr	s15, [r3, #160]	@ 0xa0
 8003126:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800312a:	4b20      	ldr	r3, [pc, #128]	@ (80031ac <TaskSensors+0x154>)
 800312c:	ed83 7b08 	vstr	d7, [r3, #32]
	imu_msg.orientation.z = IMU_1.CalculatedData.Qua.Z_Axis;
 8003130:	4b1b      	ldr	r3, [pc, #108]	@ (80031a0 <TaskSensors+0x148>)
 8003132:	edd3 7a29 	vldr	s15, [r3, #164]	@ 0xa4
 8003136:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800313a:	4b1c      	ldr	r3, [pc, #112]	@ (80031ac <TaskSensors+0x154>)
 800313c:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28

	magneto_msg.magnetic_field.x = IMU_1.CalculatedData.Magnetometer.X_Axis;
 8003140:	4b17      	ldr	r3, [pc, #92]	@ (80031a0 <TaskSensors+0x148>)
 8003142:	edd3 7a20 	vldr	s15, [r3, #128]	@ 0x80
 8003146:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800314a:	4b19      	ldr	r3, [pc, #100]	@ (80031b0 <TaskSensors+0x158>)
 800314c:	ed83 7b06 	vstr	d7, [r3, #24]
	magneto_msg.magnetic_field.y = IMU_1.CalculatedData.Magnetometer.Y_Axis;
 8003150:	4b13      	ldr	r3, [pc, #76]	@ (80031a0 <TaskSensors+0x148>)
 8003152:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8003156:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800315a:	4b15      	ldr	r3, [pc, #84]	@ (80031b0 <TaskSensors+0x158>)
 800315c:	ed83 7b08 	vstr	d7, [r3, #32]
	magneto_msg.magnetic_field.z = IMU_1.CalculatedData.Magnetometer.Z_Axis;
 8003160:	4b0f      	ldr	r3, [pc, #60]	@ (80031a0 <TaskSensors+0x148>)
 8003162:	edd3 7a22 	vldr	s15, [r3, #136]	@ 0x88
 8003166:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800316a:	4b11      	ldr	r3, [pc, #68]	@ (80031b0 <TaskSensors+0x158>)
 800316c:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28

	pressure_msg.fluid_pressure = PressureSensor_1.FilteredPressureDataPascal;
 8003170:	4b0c      	ldr	r3, [pc, #48]	@ (80031a4 <TaskSensors+0x14c>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	ee07 3a90 	vmov	s15, r3
 8003178:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800317c:	4b0d      	ldr	r3, [pc, #52]	@ (80031b4 <TaskSensors+0x15c>)
 800317e:	ed83 7b06 	vstr	d7, [r3, #24]

	heading_msg.data = IMU_1.CalculatedData.Heading;
 8003182:	4b07      	ldr	r3, [pc, #28]	@ (80031a0 <TaskSensors+0x148>)
 8003184:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003188:	4a0b      	ldr	r2, [pc, #44]	@ (80031b8 <TaskSensors+0x160>)
 800318a:	6013      	str	r3, [r2, #0]

	osMutexRelease(Microros_DataMutexHandle);
 800318c:	4b06      	ldr	r3, [pc, #24]	@ (80031a8 <TaskSensors+0x150>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f006 fef1 	bl	8009f78 <osMutexRelease>
	}

	osDelay(10);
 8003196:	200a      	movs	r0, #10
 8003198:	f006 fdc8 	bl	8009d2c <osDelay>
	IMU_Execute(&IMU_1, 1);
 800319c:	e773      	b.n	8003086 <TaskSensors+0x2e>
 800319e:	bf00      	nop
 80031a0:	20000cac 	.word	0x20000cac
 80031a4:	20000d78 	.word	0x20000d78
 80031a8:	20005020 	.word	0x20005020
 80031ac:	20004b10 	.word	0x20004b10
 80031b0:	20004c78 	.word	0x20004c78
 80031b4:	20004c50 	.word	0x20004c50
 80031b8:	20004cf0 	.word	0x20004cf0

080031bc <TaskThruster>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskThruster */
void TaskThruster(void *argument)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af02      	add	r7, sp, #8
 80031c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskThruster */
	PWM_Init(&THRUSTER_Vert_R, &htim4, TIM_CHANNEL_1, 1100, 1900, 1500);
 80031c4:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80031c8:	9301      	str	r3, [sp, #4]
 80031ca:	f240 736c 	movw	r3, #1900	@ 0x76c
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	f240 434c 	movw	r3, #1100	@ 0x44c
 80031d4:	2200      	movs	r2, #0
 80031d6:	4919      	ldr	r1, [pc, #100]	@ (800323c <TaskThruster+0x80>)
 80031d8:	4819      	ldr	r0, [pc, #100]	@ (8003240 <TaskThruster+0x84>)
 80031da:	f7fd fbf1 	bl	80009c0 <PWM_Init>
	PWM_Init(&THRUSTER_Vert_L, &htim4, TIM_CHANNEL_2, 1100, 1900, 1500);
 80031de:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80031e2:	9301      	str	r3, [sp, #4]
 80031e4:	f240 736c 	movw	r3, #1900	@ 0x76c
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	f240 434c 	movw	r3, #1100	@ 0x44c
 80031ee:	2204      	movs	r2, #4
 80031f0:	4912      	ldr	r1, [pc, #72]	@ (800323c <TaskThruster+0x80>)
 80031f2:	4814      	ldr	r0, [pc, #80]	@ (8003244 <TaskThruster+0x88>)
 80031f4:	f7fd fbe4 	bl	80009c0 <PWM_Init>
	PWM_Init(&THRUSTER_Horz_R, &htim4, TIM_CHANNEL_3, 1100, 1900, 1500);
 80031f8:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80031fc:	9301      	str	r3, [sp, #4]
 80031fe:	f240 736c 	movw	r3, #1900	@ 0x76c
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	f240 434c 	movw	r3, #1100	@ 0x44c
 8003208:	2208      	movs	r2, #8
 800320a:	490c      	ldr	r1, [pc, #48]	@ (800323c <TaskThruster+0x80>)
 800320c:	480e      	ldr	r0, [pc, #56]	@ (8003248 <TaskThruster+0x8c>)
 800320e:	f7fd fbd7 	bl	80009c0 <PWM_Init>
	PWM_Init(&THRUSTER_Horz_L, &htim4, TIM_CHANNEL_4, 1100, 1900, 1500);
 8003212:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8003216:	9301      	str	r3, [sp, #4]
 8003218:	f240 736c 	movw	r3, #1900	@ 0x76c
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	f240 434c 	movw	r3, #1100	@ 0x44c
 8003222:	220c      	movs	r2, #12
 8003224:	4905      	ldr	r1, [pc, #20]	@ (800323c <TaskThruster+0x80>)
 8003226:	4809      	ldr	r0, [pc, #36]	@ (800324c <TaskThruster+0x90>)
 8003228:	f7fd fbca 	bl	80009c0 <PWM_Init>
	osDelay(100);
 800322c:	2064      	movs	r0, #100	@ 0x64
 800322e:	f006 fd7d 	bl	8009d2c <osDelay>
		 // PWM_SetPulse(&THRUSTER_Horz_L);

	//	  osMutexRelease(Microros_cmd_vel_MutexHandle);
	//  }

    osDelay(10);
 8003232:	200a      	movs	r0, #10
 8003234:	f006 fd7a 	bl	8009d2c <osDelay>
 8003238:	e7fb      	b.n	8003232 <TaskThruster+0x76>
 800323a:	bf00      	nop
 800323c:	20004e80 	.word	0x20004e80
 8003240:	20000c2c 	.word	0x20000c2c
 8003244:	20000c4c 	.word	0x20000c4c
 8003248:	20000c6c 	.word	0x20000c6c
 800324c:	20000c8c 	.word	0x20000c8c

08003250 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a04      	ldr	r2, [pc, #16]	@ (8003270 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d101      	bne.n	8003266 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8003262:	f000 feb1 	bl	8003fc8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003266:	bf00      	nop
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40010000 	.word	0x40010000

08003274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003278:	b672      	cpsid	i
}
 800327a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800327c:	bf00      	nop
 800327e:	e7fd      	b.n	800327c <Error_Handler+0x8>

08003280 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800328a:	4b0c      	ldr	r3, [pc, #48]	@ (80032bc <microros_allocate+0x3c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	461a      	mov	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4413      	add	r3, r2
 8003294:	461a      	mov	r2, r3
 8003296:	4b09      	ldr	r3, [pc, #36]	@ (80032bc <microros_allocate+0x3c>)
 8003298:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800329a:	4b09      	ldr	r3, [pc, #36]	@ (80032c0 <microros_allocate+0x40>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	461a      	mov	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4413      	add	r3, r2
 80032a4:	461a      	mov	r2, r3
 80032a6:	4b06      	ldr	r3, [pc, #24]	@ (80032c0 <microros_allocate+0x40>)
 80032a8:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7fe ff54 	bl	8002158 <pvPortMallocMicroROS>
 80032b0:	4603      	mov	r3, r0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	20005028 	.word	0x20005028
 80032c0:	2000502c 	.word	0x2000502c

080032c4 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00c      	beq.n	80032ee <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f7ff f86d 	bl	80023b4 <getBlockSize>
 80032da:	4603      	mov	r3, r0
 80032dc:	4a06      	ldr	r2, [pc, #24]	@ (80032f8 <microros_deallocate+0x34>)
 80032de:	6812      	ldr	r2, [r2, #0]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	461a      	mov	r2, r3
 80032e4:	4b04      	ldr	r3, [pc, #16]	@ (80032f8 <microros_deallocate+0x34>)
 80032e6:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f7ff f803 	bl	80022f4 <vPortFreeMicroROS>
  }
}
 80032ee:	bf00      	nop
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	2000502c 	.word	0x2000502c

080032fc <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8003308:	4b15      	ldr	r3, [pc, #84]	@ (8003360 <microros_reallocate+0x64>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	461a      	mov	r2, r3
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	4413      	add	r3, r2
 8003312:	461a      	mov	r2, r3
 8003314:	4b12      	ldr	r3, [pc, #72]	@ (8003360 <microros_reallocate+0x64>)
 8003316:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8003318:	4b12      	ldr	r3, [pc, #72]	@ (8003364 <microros_reallocate+0x68>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	461a      	mov	r2, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	4413      	add	r3, r2
 8003322:	461a      	mov	r2, r3
 8003324:	4b0f      	ldr	r3, [pc, #60]	@ (8003364 <microros_reallocate+0x68>)
 8003326:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d104      	bne.n	8003338 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800332e:	68b8      	ldr	r0, [r7, #8]
 8003330:	f7fe ff12 	bl	8002158 <pvPortMallocMicroROS>
 8003334:	4603      	mov	r3, r0
 8003336:	e00e      	b.n	8003356 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f7ff f83b 	bl	80023b4 <getBlockSize>
 800333e:	4603      	mov	r3, r0
 8003340:	4a08      	ldr	r2, [pc, #32]	@ (8003364 <microros_reallocate+0x68>)
 8003342:	6812      	ldr	r2, [r2, #0]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	461a      	mov	r2, r3
 8003348:	4b06      	ldr	r3, [pc, #24]	@ (8003364 <microros_reallocate+0x68>)
 800334a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 800334c:	68b9      	ldr	r1, [r7, #8]
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f7ff f84e 	bl	80023f0 <pvPortReallocMicroROS>
 8003354:	4603      	mov	r3, r0
  }
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	20005028 	.word	0x20005028
 8003364:	2000502c 	.word	0x2000502c

08003368 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	fb02 f303 	mul.w	r3, r2, r3
 800337c:	4a0c      	ldr	r2, [pc, #48]	@ (80033b0 <microros_zero_allocate+0x48>)
 800337e:	6812      	ldr	r2, [r2, #0]
 8003380:	4413      	add	r3, r2
 8003382:	461a      	mov	r2, r3
 8003384:	4b0a      	ldr	r3, [pc, #40]	@ (80033b0 <microros_zero_allocate+0x48>)
 8003386:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	fb02 f303 	mul.w	r3, r2, r3
 8003390:	4a08      	ldr	r2, [pc, #32]	@ (80033b4 <microros_zero_allocate+0x4c>)
 8003392:	6812      	ldr	r2, [r2, #0]
 8003394:	4413      	add	r3, r2
 8003396:	461a      	mov	r2, r3
 8003398:	4b06      	ldr	r3, [pc, #24]	@ (80033b4 <microros_zero_allocate+0x4c>)
 800339a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 800339c:	68b9      	ldr	r1, [r7, #8]
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f7ff f853 	bl	800244a <pvPortCallocMicroROS>
 80033a4:	4603      	mov	r3, r0
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	20005028 	.word	0x20005028
 80033b4:	2000502c 	.word	0x2000502c

080033b8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80033b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80033bc:	b086      	sub	sp, #24
 80033be:	af00      	add	r7, sp, #0
 80033c0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80033c4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80033c6:	2300      	movs	r3, #0
 80033c8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80033ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033ce:	a320      	add	r3, pc, #128	@ (adr r3, 8003450 <UTILS_NanosecondsToTimespec+0x98>)
 80033d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d4:	f7fc ff9c 	bl	8000310 <__aeabi_ldivmod>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80033e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033e6:	a31a      	add	r3, pc, #104	@ (adr r3, 8003450 <UTILS_NanosecondsToTimespec+0x98>)
 80033e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ec:	f7fc ff90 	bl	8000310 <__aeabi_ldivmod>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	da20      	bge.n	800343e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	4a11      	ldr	r2, [pc, #68]	@ (8003448 <UTILS_NanosecondsToTimespec+0x90>)
 8003402:	fb82 1203 	smull	r1, r2, r2, r3
 8003406:	1712      	asrs	r2, r2, #28
 8003408:	17db      	asrs	r3, r3, #31
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	3301      	adds	r3, #1
 800340e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003416:	6979      	ldr	r1, [r7, #20]
 8003418:	17c8      	asrs	r0, r1, #31
 800341a:	460c      	mov	r4, r1
 800341c:	4605      	mov	r5, r0
 800341e:	ebb2 0804 	subs.w	r8, r2, r4
 8003422:	eb63 0905 	sbc.w	r9, r3, r5
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	4906      	ldr	r1, [pc, #24]	@ (800344c <UTILS_NanosecondsToTimespec+0x94>)
 8003434:	fb01 f303 	mul.w	r3, r1, r3
 8003438:	441a      	add	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	609a      	str	r2, [r3, #8]
    }
}
 800343e:	bf00      	nop
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003448:	44b82fa1 	.word	0x44b82fa1
 800344c:	3b9aca00 	.word	0x3b9aca00
 8003450:	3b9aca00 	.word	0x3b9aca00
 8003454:	00000000 	.word	0x00000000

08003458 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8003458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800345c:	b08e      	sub	sp, #56	@ 0x38
 800345e:	af00      	add	r7, sp, #0
 8003460:	6278      	str	r0, [r7, #36]	@ 0x24
 8003462:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8003464:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003468:	2300      	movs	r3, #0
 800346a:	6013      	str	r3, [r2, #0]
 800346c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	f04f 0300 	mov.w	r3, #0
 8003476:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800347a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800347e:	4618      	mov	r0, r3
 8003480:	f008 fae4 	bl	800ba4c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8003484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003486:	17da      	asrs	r2, r3, #31
 8003488:	61bb      	str	r3, [r7, #24]
 800348a:	61fa      	str	r2, [r7, #28]
 800348c:	f04f 0200 	mov.w	r2, #0
 8003490:	f04f 0300 	mov.w	r3, #0
 8003494:	69b9      	ldr	r1, [r7, #24]
 8003496:	000b      	movs	r3, r1
 8003498:	2200      	movs	r2, #0
 800349a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800349e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034a0:	2200      	movs	r2, #0
 80034a2:	461c      	mov	r4, r3
 80034a4:	4615      	mov	r5, r2
 80034a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80034aa:	1911      	adds	r1, r2, r4
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	416b      	adcs	r3, r5
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80034b6:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80034ba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	f04f 0400 	mov.w	r4, #0
 80034c6:	f04f 0500 	mov.w	r5, #0
 80034ca:	015d      	lsls	r5, r3, #5
 80034cc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80034d0:	0154      	lsls	r4, r2, #5
 80034d2:	4622      	mov	r2, r4
 80034d4:	462b      	mov	r3, r5
 80034d6:	ebb2 0800 	subs.w	r8, r2, r0
 80034da:	eb63 0901 	sbc.w	r9, r3, r1
 80034de:	f04f 0200 	mov.w	r2, #0
 80034e2:	f04f 0300 	mov.w	r3, #0
 80034e6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80034ea:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80034ee:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80034f2:	4690      	mov	r8, r2
 80034f4:	4699      	mov	r9, r3
 80034f6:	eb18 0a00 	adds.w	sl, r8, r0
 80034fa:	eb49 0b01 	adc.w	fp, r9, r1
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800350a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800350e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003512:	ebb2 040a 	subs.w	r4, r2, sl
 8003516:	603c      	str	r4, [r7, #0]
 8003518:	eb63 030b 	sbc.w	r3, r3, fp
 800351c:	607b      	str	r3, [r7, #4]
 800351e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003522:	4623      	mov	r3, r4
 8003524:	181b      	adds	r3, r3, r0
 8003526:	613b      	str	r3, [r7, #16]
 8003528:	462b      	mov	r3, r5
 800352a:	eb41 0303 	adc.w	r3, r1, r3
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	6a3a      	ldr	r2, [r7, #32]
 8003532:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003536:	f7ff ff3f 	bl	80033b8 <UTILS_NanosecondsToTimespec>

    return 0;
 800353a:	2300      	movs	r3, #0
 800353c:	4618      	mov	r0, r3
 800353e:	3738      	adds	r7, #56	@ 0x38
 8003540:	46bd      	mov	sp, r7
 8003542:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003548 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800354e:	4b11      	ldr	r3, [pc, #68]	@ (8003594 <HAL_MspInit+0x4c>)
 8003550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003552:	4a10      	ldr	r2, [pc, #64]	@ (8003594 <HAL_MspInit+0x4c>)
 8003554:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003558:	6413      	str	r3, [r2, #64]	@ 0x40
 800355a:	4b0e      	ldr	r3, [pc, #56]	@ (8003594 <HAL_MspInit+0x4c>)
 800355c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003562:	607b      	str	r3, [r7, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003566:	4b0b      	ldr	r3, [pc, #44]	@ (8003594 <HAL_MspInit+0x4c>)
 8003568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800356a:	4a0a      	ldr	r2, [pc, #40]	@ (8003594 <HAL_MspInit+0x4c>)
 800356c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003570:	6453      	str	r3, [r2, #68]	@ 0x44
 8003572:	4b08      	ldr	r3, [pc, #32]	@ (8003594 <HAL_MspInit+0x4c>)
 8003574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003576:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800357a:	603b      	str	r3, [r7, #0]
 800357c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800357e:	2200      	movs	r2, #0
 8003580:	210f      	movs	r1, #15
 8003582:	f06f 0001 	mvn.w	r0, #1
 8003586:	f000 fdf7 	bl	8004178 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800358a:	bf00      	nop
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40023800 	.word	0x40023800

08003598 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b0b0      	sub	sp, #192	@ 0xc0
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	609a      	str	r2, [r3, #8]
 80035ac:	60da      	str	r2, [r3, #12]
 80035ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035b0:	f107 031c 	add.w	r3, r7, #28
 80035b4:	2290      	movs	r2, #144	@ 0x90
 80035b6:	2100      	movs	r1, #0
 80035b8:	4618      	mov	r0, r3
 80035ba:	f018 f80d 	bl	801b5d8 <memset>
  if(hi2c->Instance==I2C2)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a55      	ldr	r2, [pc, #340]	@ (8003718 <HAL_I2C_MspInit+0x180>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d13e      	bne.n	8003646 <HAL_I2C_MspInit+0xae>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80035c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035cc:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80035ce:	2300      	movs	r3, #0
 80035d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035d4:	f107 031c 	add.w	r3, r7, #28
 80035d8:	4618      	mov	r0, r3
 80035da:	f002 ff21 	bl	8006420 <HAL_RCCEx_PeriphCLKConfig>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80035e4:	f7ff fe46 	bl	8003274 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035e8:	4b4c      	ldr	r3, [pc, #304]	@ (800371c <HAL_I2C_MspInit+0x184>)
 80035ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ec:	4a4b      	ldr	r2, [pc, #300]	@ (800371c <HAL_I2C_MspInit+0x184>)
 80035ee:	f043 0302 	orr.w	r3, r3, #2
 80035f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80035f4:	4b49      	ldr	r3, [pc, #292]	@ (800371c <HAL_I2C_MspInit+0x184>)
 80035f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	61bb      	str	r3, [r7, #24]
 80035fe:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003600:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003604:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003608:	2312      	movs	r3, #18
 800360a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360e:	2300      	movs	r3, #0
 8003610:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003614:	2303      	movs	r3, #3
 8003616:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800361a:	2304      	movs	r3, #4
 800361c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003620:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003624:	4619      	mov	r1, r3
 8003626:	483e      	ldr	r0, [pc, #248]	@ (8003720 <HAL_I2C_MspInit+0x188>)
 8003628:	f001 f9e6 	bl	80049f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800362c:	4b3b      	ldr	r3, [pc, #236]	@ (800371c <HAL_I2C_MspInit+0x184>)
 800362e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003630:	4a3a      	ldr	r2, [pc, #232]	@ (800371c <HAL_I2C_MspInit+0x184>)
 8003632:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003636:	6413      	str	r3, [r2, #64]	@ 0x40
 8003638:	4b38      	ldr	r3, [pc, #224]	@ (800371c <HAL_I2C_MspInit+0x184>)
 800363a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003640:	617b      	str	r3, [r7, #20]
 8003642:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003644:	e064      	b.n	8003710 <HAL_I2C_MspInit+0x178>
  else if(hi2c->Instance==I2C3)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a36      	ldr	r2, [pc, #216]	@ (8003724 <HAL_I2C_MspInit+0x18c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d15f      	bne.n	8003710 <HAL_I2C_MspInit+0x178>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003650:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003654:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003656:	2300      	movs	r3, #0
 8003658:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800365c:	f107 031c 	add.w	r3, r7, #28
 8003660:	4618      	mov	r0, r3
 8003662:	f002 fedd 	bl	8006420 <HAL_RCCEx_PeriphCLKConfig>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 800366c:	f7ff fe02 	bl	8003274 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003670:	4b2a      	ldr	r3, [pc, #168]	@ (800371c <HAL_I2C_MspInit+0x184>)
 8003672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003674:	4a29      	ldr	r2, [pc, #164]	@ (800371c <HAL_I2C_MspInit+0x184>)
 8003676:	f043 0304 	orr.w	r3, r3, #4
 800367a:	6313      	str	r3, [r2, #48]	@ 0x30
 800367c:	4b27      	ldr	r3, [pc, #156]	@ (800371c <HAL_I2C_MspInit+0x184>)
 800367e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	613b      	str	r3, [r7, #16]
 8003686:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003688:	4b24      	ldr	r3, [pc, #144]	@ (800371c <HAL_I2C_MspInit+0x184>)
 800368a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368c:	4a23      	ldr	r2, [pc, #140]	@ (800371c <HAL_I2C_MspInit+0x184>)
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	6313      	str	r3, [r2, #48]	@ 0x30
 8003694:	4b21      	ldr	r3, [pc, #132]	@ (800371c <HAL_I2C_MspInit+0x184>)
 8003696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80036a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80036a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036a8:	2312      	movs	r3, #18
 80036aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036b4:	2303      	movs	r3, #3
 80036b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80036ba:	2304      	movs	r3, #4
 80036bc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036c0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80036c4:	4619      	mov	r1, r3
 80036c6:	4818      	ldr	r0, [pc, #96]	@ (8003728 <HAL_I2C_MspInit+0x190>)
 80036c8:	f001 f996 	bl	80049f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80036cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80036d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036d4:	2312      	movs	r3, #18
 80036d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036da:	2300      	movs	r3, #0
 80036dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036e0:	2303      	movs	r3, #3
 80036e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80036e6:	2304      	movs	r3, #4
 80036e8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ec:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80036f0:	4619      	mov	r1, r3
 80036f2:	480e      	ldr	r0, [pc, #56]	@ (800372c <HAL_I2C_MspInit+0x194>)
 80036f4:	f001 f980 	bl	80049f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80036f8:	4b08      	ldr	r3, [pc, #32]	@ (800371c <HAL_I2C_MspInit+0x184>)
 80036fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fc:	4a07      	ldr	r2, [pc, #28]	@ (800371c <HAL_I2C_MspInit+0x184>)
 80036fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003702:	6413      	str	r3, [r2, #64]	@ 0x40
 8003704:	4b05      	ldr	r3, [pc, #20]	@ (800371c <HAL_I2C_MspInit+0x184>)
 8003706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003708:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800370c:	60bb      	str	r3, [r7, #8]
 800370e:	68bb      	ldr	r3, [r7, #8]
}
 8003710:	bf00      	nop
 8003712:	37c0      	adds	r7, #192	@ 0xc0
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40005800 	.word	0x40005800
 800371c:	40023800 	.word	0x40023800
 8003720:	40020400 	.word	0x40020400
 8003724:	40005c00 	.word	0x40005c00
 8003728:	40020800 	.word	0x40020800
 800372c:	40020000 	.word	0x40020000

08003730 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b08a      	sub	sp, #40	@ 0x28
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003738:	f107 0314 	add.w	r3, r7, #20
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	605a      	str	r2, [r3, #4]
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	60da      	str	r2, [r3, #12]
 8003746:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a1b      	ldr	r2, [pc, #108]	@ (80037bc <HAL_SPI_MspInit+0x8c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d12f      	bne.n	80037b2 <HAL_SPI_MspInit+0x82>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003752:	4b1b      	ldr	r3, [pc, #108]	@ (80037c0 <HAL_SPI_MspInit+0x90>)
 8003754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003756:	4a1a      	ldr	r2, [pc, #104]	@ (80037c0 <HAL_SPI_MspInit+0x90>)
 8003758:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800375c:	6453      	str	r3, [r2, #68]	@ 0x44
 800375e:	4b18      	ldr	r3, [pc, #96]	@ (80037c0 <HAL_SPI_MspInit+0x90>)
 8003760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003762:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800376a:	4b15      	ldr	r3, [pc, #84]	@ (80037c0 <HAL_SPI_MspInit+0x90>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800376e:	4a14      	ldr	r2, [pc, #80]	@ (80037c0 <HAL_SPI_MspInit+0x90>)
 8003770:	f043 0301 	orr.w	r3, r3, #1
 8003774:	6313      	str	r3, [r2, #48]	@ 0x30
 8003776:	4b12      	ldr	r3, [pc, #72]	@ (80037c0 <HAL_SPI_MspInit+0x90>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003782:	23e0      	movs	r3, #224	@ 0xe0
 8003784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003786:	2302      	movs	r3, #2
 8003788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378a:	2300      	movs	r3, #0
 800378c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800378e:	2303      	movs	r3, #3
 8003790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003792:	2305      	movs	r3, #5
 8003794:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003796:	f107 0314 	add.w	r3, r7, #20
 800379a:	4619      	mov	r1, r3
 800379c:	4809      	ldr	r0, [pc, #36]	@ (80037c4 <HAL_SPI_MspInit+0x94>)
 800379e:	f001 f92b 	bl	80049f8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80037a2:	2200      	movs	r2, #0
 80037a4:	2105      	movs	r1, #5
 80037a6:	2023      	movs	r0, #35	@ 0x23
 80037a8:	f000 fce6 	bl	8004178 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80037ac:	2023      	movs	r0, #35	@ 0x23
 80037ae:	f000 fcff 	bl	80041b0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80037b2:	bf00      	nop
 80037b4:	3728      	adds	r7, #40	@ 0x28
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40013000 	.word	0x40013000
 80037c0:	40023800 	.word	0x40023800
 80037c4:	40020000 	.word	0x40020000

080037c8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a0d      	ldr	r2, [pc, #52]	@ (800380c <HAL_TIM_Base_MspInit+0x44>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d113      	bne.n	8003802 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037da:	4b0d      	ldr	r3, [pc, #52]	@ (8003810 <HAL_TIM_Base_MspInit+0x48>)
 80037dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037de:	4a0c      	ldr	r2, [pc, #48]	@ (8003810 <HAL_TIM_Base_MspInit+0x48>)
 80037e0:	f043 0302 	orr.w	r3, r3, #2
 80037e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80037e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003810 <HAL_TIM_Base_MspInit+0x48>)
 80037e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80037f2:	2200      	movs	r2, #0
 80037f4:	2105      	movs	r1, #5
 80037f6:	201d      	movs	r0, #29
 80037f8:	f000 fcbe 	bl	8004178 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80037fc:	201d      	movs	r0, #29
 80037fe:	f000 fcd7 	bl	80041b0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8003802:	bf00      	nop
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40000400 	.word	0x40000400
 8003810:	40023800 	.word	0x40023800

08003814 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a0d      	ldr	r2, [pc, #52]	@ (8003858 <HAL_TIM_PWM_MspInit+0x44>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d113      	bne.n	800384e <HAL_TIM_PWM_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003826:	4b0d      	ldr	r3, [pc, #52]	@ (800385c <HAL_TIM_PWM_MspInit+0x48>)
 8003828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382a:	4a0c      	ldr	r2, [pc, #48]	@ (800385c <HAL_TIM_PWM_MspInit+0x48>)
 800382c:	f043 0304 	orr.w	r3, r3, #4
 8003830:	6413      	str	r3, [r2, #64]	@ 0x40
 8003832:	4b0a      	ldr	r3, [pc, #40]	@ (800385c <HAL_TIM_PWM_MspInit+0x48>)
 8003834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800383e:	2200      	movs	r2, #0
 8003840:	2105      	movs	r1, #5
 8003842:	201e      	movs	r0, #30
 8003844:	f000 fc98 	bl	8004178 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003848:	201e      	movs	r0, #30
 800384a:	f000 fcb1 	bl	80041b0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 800384e:	bf00      	nop
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40000800 	.word	0x40000800
 800385c:	40023800 	.word	0x40023800

08003860 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08a      	sub	sp, #40	@ 0x28
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003868:	f107 0314 	add.w	r3, r7, #20
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	605a      	str	r2, [r3, #4]
 8003872:	609a      	str	r2, [r3, #8]
 8003874:	60da      	str	r2, [r3, #12]
 8003876:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a22      	ldr	r2, [pc, #136]	@ (8003908 <HAL_TIM_MspPostInit+0xa8>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d11c      	bne.n	80038bc <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003882:	4b22      	ldr	r3, [pc, #136]	@ (800390c <HAL_TIM_MspPostInit+0xac>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003886:	4a21      	ldr	r2, [pc, #132]	@ (800390c <HAL_TIM_MspPostInit+0xac>)
 8003888:	f043 0304 	orr.w	r3, r3, #4
 800388c:	6313      	str	r3, [r2, #48]	@ 0x30
 800388e:	4b1f      	ldr	r3, [pc, #124]	@ (800390c <HAL_TIM_MspPostInit+0xac>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	613b      	str	r3, [r7, #16]
 8003898:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800389a:	2380      	movs	r3, #128	@ 0x80
 800389c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800389e:	2302      	movs	r3, #2
 80038a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a2:	2300      	movs	r3, #0
 80038a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038a6:	2302      	movs	r3, #2
 80038a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80038aa:	2302      	movs	r3, #2
 80038ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038ae:	f107 0314 	add.w	r3, r7, #20
 80038b2:	4619      	mov	r1, r3
 80038b4:	4816      	ldr	r0, [pc, #88]	@ (8003910 <HAL_TIM_MspPostInit+0xb0>)
 80038b6:	f001 f89f 	bl	80049f8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80038ba:	e021      	b.n	8003900 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM4)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a14      	ldr	r2, [pc, #80]	@ (8003914 <HAL_TIM_MspPostInit+0xb4>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d11c      	bne.n	8003900 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80038c6:	4b11      	ldr	r3, [pc, #68]	@ (800390c <HAL_TIM_MspPostInit+0xac>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ca:	4a10      	ldr	r2, [pc, #64]	@ (800390c <HAL_TIM_MspPostInit+0xac>)
 80038cc:	f043 0308 	orr.w	r3, r3, #8
 80038d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80038d2:	4b0e      	ldr	r3, [pc, #56]	@ (800390c <HAL_TIM_MspPostInit+0xac>)
 80038d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80038de:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80038e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e4:	2302      	movs	r3, #2
 80038e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e8:	2300      	movs	r3, #0
 80038ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ec:	2300      	movs	r3, #0
 80038ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80038f0:	2302      	movs	r3, #2
 80038f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038f4:	f107 0314 	add.w	r3, r7, #20
 80038f8:	4619      	mov	r1, r3
 80038fa:	4807      	ldr	r0, [pc, #28]	@ (8003918 <HAL_TIM_MspPostInit+0xb8>)
 80038fc:	f001 f87c 	bl	80049f8 <HAL_GPIO_Init>
}
 8003900:	bf00      	nop
 8003902:	3728      	adds	r7, #40	@ 0x28
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40000400 	.word	0x40000400
 800390c:	40023800 	.word	0x40023800
 8003910:	40020800 	.word	0x40020800
 8003914:	40000800 	.word	0x40000800
 8003918:	40020c00 	.word	0x40020c00

0800391c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b0ae      	sub	sp, #184	@ 0xb8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003924:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	605a      	str	r2, [r3, #4]
 800392e:	609a      	str	r2, [r3, #8]
 8003930:	60da      	str	r2, [r3, #12]
 8003932:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003934:	f107 0314 	add.w	r3, r7, #20
 8003938:	2290      	movs	r2, #144	@ 0x90
 800393a:	2100      	movs	r1, #0
 800393c:	4618      	mov	r0, r3
 800393e:	f017 fe4b 	bl	801b5d8 <memset>
  if(huart->Instance==USART2)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a54      	ldr	r2, [pc, #336]	@ (8003a98 <HAL_UART_MspInit+0x17c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	f040 80a1 	bne.w	8003a90 <HAL_UART_MspInit+0x174>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800394e:	2380      	movs	r3, #128	@ 0x80
 8003950:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003952:	2300      	movs	r3, #0
 8003954:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003956:	f107 0314 	add.w	r3, r7, #20
 800395a:	4618      	mov	r0, r3
 800395c:	f002 fd60 	bl	8006420 <HAL_RCCEx_PeriphCLKConfig>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003966:	f7ff fc85 	bl	8003274 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800396a:	4b4c      	ldr	r3, [pc, #304]	@ (8003a9c <HAL_UART_MspInit+0x180>)
 800396c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396e:	4a4b      	ldr	r2, [pc, #300]	@ (8003a9c <HAL_UART_MspInit+0x180>)
 8003970:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003974:	6413      	str	r3, [r2, #64]	@ 0x40
 8003976:	4b49      	ldr	r3, [pc, #292]	@ (8003a9c <HAL_UART_MspInit+0x180>)
 8003978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800397e:	613b      	str	r3, [r7, #16]
 8003980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003982:	4b46      	ldr	r3, [pc, #280]	@ (8003a9c <HAL_UART_MspInit+0x180>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003986:	4a45      	ldr	r2, [pc, #276]	@ (8003a9c <HAL_UART_MspInit+0x180>)
 8003988:	f043 0301 	orr.w	r3, r3, #1
 800398c:	6313      	str	r3, [r2, #48]	@ 0x30
 800398e:	4b43      	ldr	r3, [pc, #268]	@ (8003a9c <HAL_UART_MspInit+0x180>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800399a:	230c      	movs	r3, #12
 800399c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a0:	2302      	movs	r3, #2
 80039a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a6:	2300      	movs	r3, #0
 80039a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ac:	2303      	movs	r3, #3
 80039ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80039b2:	2307      	movs	r3, #7
 80039b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039b8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80039bc:	4619      	mov	r1, r3
 80039be:	4838      	ldr	r0, [pc, #224]	@ (8003aa0 <HAL_UART_MspInit+0x184>)
 80039c0:	f001 f81a 	bl	80049f8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80039c4:	4b37      	ldr	r3, [pc, #220]	@ (8003aa4 <HAL_UART_MspInit+0x188>)
 80039c6:	4a38      	ldr	r2, [pc, #224]	@ (8003aa8 <HAL_UART_MspInit+0x18c>)
 80039c8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80039ca:	4b36      	ldr	r3, [pc, #216]	@ (8003aa4 <HAL_UART_MspInit+0x188>)
 80039cc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80039d0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039d2:	4b34      	ldr	r3, [pc, #208]	@ (8003aa4 <HAL_UART_MspInit+0x188>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039d8:	4b32      	ldr	r3, [pc, #200]	@ (8003aa4 <HAL_UART_MspInit+0x188>)
 80039da:	2200      	movs	r2, #0
 80039dc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80039de:	4b31      	ldr	r3, [pc, #196]	@ (8003aa4 <HAL_UART_MspInit+0x188>)
 80039e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039e4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039e6:	4b2f      	ldr	r3, [pc, #188]	@ (8003aa4 <HAL_UART_MspInit+0x188>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039ec:	4b2d      	ldr	r3, [pc, #180]	@ (8003aa4 <HAL_UART_MspInit+0x188>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80039f2:	4b2c      	ldr	r3, [pc, #176]	@ (8003aa4 <HAL_UART_MspInit+0x188>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80039f8:	4b2a      	ldr	r3, [pc, #168]	@ (8003aa4 <HAL_UART_MspInit+0x188>)
 80039fa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80039fe:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a00:	4b28      	ldr	r3, [pc, #160]	@ (8003aa4 <HAL_UART_MspInit+0x188>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003a06:	4827      	ldr	r0, [pc, #156]	@ (8003aa4 <HAL_UART_MspInit+0x188>)
 8003a08:	f000 fbe0 	bl	80041cc <HAL_DMA_Init>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8003a12:	f7ff fc2f 	bl	8003274 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a22      	ldr	r2, [pc, #136]	@ (8003aa4 <HAL_UART_MspInit+0x188>)
 8003a1a:	675a      	str	r2, [r3, #116]	@ 0x74
 8003a1c:	4a21      	ldr	r2, [pc, #132]	@ (8003aa4 <HAL_UART_MspInit+0x188>)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003a22:	4b22      	ldr	r3, [pc, #136]	@ (8003aac <HAL_UART_MspInit+0x190>)
 8003a24:	4a22      	ldr	r2, [pc, #136]	@ (8003ab0 <HAL_UART_MspInit+0x194>)
 8003a26:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003a28:	4b20      	ldr	r3, [pc, #128]	@ (8003aac <HAL_UART_MspInit+0x190>)
 8003a2a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003a2e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a30:	4b1e      	ldr	r3, [pc, #120]	@ (8003aac <HAL_UART_MspInit+0x190>)
 8003a32:	2240      	movs	r2, #64	@ 0x40
 8003a34:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a36:	4b1d      	ldr	r3, [pc, #116]	@ (8003aac <HAL_UART_MspInit+0x190>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8003aac <HAL_UART_MspInit+0x190>)
 8003a3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a42:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a44:	4b19      	ldr	r3, [pc, #100]	@ (8003aac <HAL_UART_MspInit+0x190>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a4a:	4b18      	ldr	r3, [pc, #96]	@ (8003aac <HAL_UART_MspInit+0x190>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003a50:	4b16      	ldr	r3, [pc, #88]	@ (8003aac <HAL_UART_MspInit+0x190>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003a56:	4b15      	ldr	r3, [pc, #84]	@ (8003aac <HAL_UART_MspInit+0x190>)
 8003a58:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003a5c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a5e:	4b13      	ldr	r3, [pc, #76]	@ (8003aac <HAL_UART_MspInit+0x190>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003a64:	4811      	ldr	r0, [pc, #68]	@ (8003aac <HAL_UART_MspInit+0x190>)
 8003a66:	f000 fbb1 	bl	80041cc <HAL_DMA_Init>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <HAL_UART_MspInit+0x158>
    {
      Error_Handler();
 8003a70:	f7ff fc00 	bl	8003274 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a0d      	ldr	r2, [pc, #52]	@ (8003aac <HAL_UART_MspInit+0x190>)
 8003a78:	671a      	str	r2, [r3, #112]	@ 0x70
 8003a7a:	4a0c      	ldr	r2, [pc, #48]	@ (8003aac <HAL_UART_MspInit+0x190>)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003a80:	2200      	movs	r2, #0
 8003a82:	2105      	movs	r1, #5
 8003a84:	2026      	movs	r0, #38	@ 0x26
 8003a86:	f000 fb77 	bl	8004178 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003a8a:	2026      	movs	r0, #38	@ 0x26
 8003a8c:	f000 fb90 	bl	80041b0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8003a90:	bf00      	nop
 8003a92:	37b8      	adds	r7, #184	@ 0xb8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40004400 	.word	0x40004400
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	40020000 	.word	0x40020000
 8003aa4:	20004f54 	.word	0x20004f54
 8003aa8:	40026088 	.word	0x40026088
 8003aac:	20004fb4 	.word	0x20004fb4
 8003ab0:	400260a0 	.word	0x400260a0

08003ab4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08c      	sub	sp, #48	@ 0x30
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003ac4:	4b2e      	ldr	r3, [pc, #184]	@ (8003b80 <HAL_InitTick+0xcc>)
 8003ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac8:	4a2d      	ldr	r2, [pc, #180]	@ (8003b80 <HAL_InitTick+0xcc>)
 8003aca:	f043 0301 	orr.w	r3, r3, #1
 8003ace:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ad0:	4b2b      	ldr	r3, [pc, #172]	@ (8003b80 <HAL_InitTick+0xcc>)
 8003ad2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	60bb      	str	r3, [r7, #8]
 8003ada:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003adc:	f107 020c 	add.w	r2, r7, #12
 8003ae0:	f107 0310 	add.w	r3, r7, #16
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f002 fc68 	bl	80063bc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003aec:	f002 fc52 	bl	8006394 <HAL_RCC_GetPCLK2Freq>
 8003af0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003af4:	4a23      	ldr	r2, [pc, #140]	@ (8003b84 <HAL_InitTick+0xd0>)
 8003af6:	fba2 2303 	umull	r2, r3, r2, r3
 8003afa:	0c9b      	lsrs	r3, r3, #18
 8003afc:	3b01      	subs	r3, #1
 8003afe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003b00:	4b21      	ldr	r3, [pc, #132]	@ (8003b88 <HAL_InitTick+0xd4>)
 8003b02:	4a22      	ldr	r2, [pc, #136]	@ (8003b8c <HAL_InitTick+0xd8>)
 8003b04:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003b06:	4b20      	ldr	r3, [pc, #128]	@ (8003b88 <HAL_InitTick+0xd4>)
 8003b08:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003b0c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003b0e:	4a1e      	ldr	r2, [pc, #120]	@ (8003b88 <HAL_InitTick+0xd4>)
 8003b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b12:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003b14:	4b1c      	ldr	r3, [pc, #112]	@ (8003b88 <HAL_InitTick+0xd4>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003b88 <HAL_InitTick+0xd4>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b20:	4b19      	ldr	r3, [pc, #100]	@ (8003b88 <HAL_InitTick+0xd4>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003b26:	4818      	ldr	r0, [pc, #96]	@ (8003b88 <HAL_InitTick+0xd4>)
 8003b28:	f003 fa6d 	bl	8007006 <HAL_TIM_Base_Init>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003b32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d11b      	bne.n	8003b72 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003b3a:	4813      	ldr	r0, [pc, #76]	@ (8003b88 <HAL_InitTick+0xd4>)
 8003b3c:	f003 faba 	bl	80070b4 <HAL_TIM_Base_Start_IT>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003b46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d111      	bne.n	8003b72 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003b4e:	2019      	movs	r0, #25
 8003b50:	f000 fb2e 	bl	80041b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b0f      	cmp	r3, #15
 8003b58:	d808      	bhi.n	8003b6c <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	2019      	movs	r0, #25
 8003b60:	f000 fb0a 	bl	8004178 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b64:	4a0a      	ldr	r2, [pc, #40]	@ (8003b90 <HAL_InitTick+0xdc>)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	e002      	b.n	8003b72 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003b72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3730      	adds	r7, #48	@ 0x30
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40023800 	.word	0x40023800
 8003b84:	431bde83 	.word	0x431bde83
 8003b88:	20005030 	.word	0x20005030
 8003b8c:	40010000 	.word	0x40010000
 8003b90:	20000034 	.word	0x20000034

08003b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b98:	bf00      	nop
 8003b9a:	e7fd      	b.n	8003b98 <NMI_Handler+0x4>

08003b9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ba0:	bf00      	nop
 8003ba2:	e7fd      	b.n	8003ba0 <HardFault_Handler+0x4>

08003ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ba8:	bf00      	nop
 8003baa:	e7fd      	b.n	8003ba8 <MemManage_Handler+0x4>

08003bac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bb0:	bf00      	nop
 8003bb2:	e7fd      	b.n	8003bb0 <BusFault_Handler+0x4>

08003bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bb8:	bf00      	nop
 8003bba:	e7fd      	b.n	8003bb8 <UsageFault_Handler+0x4>

08003bbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bc0:	bf00      	nop
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
	...

08003bcc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003bd0:	4802      	ldr	r0, [pc, #8]	@ (8003bdc <DMA1_Stream5_IRQHandler+0x10>)
 8003bd2:	f000 fc9b 	bl	800450c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003bd6:	bf00      	nop
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	20004f54 	.word	0x20004f54

08003be0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003be4:	4802      	ldr	r0, [pc, #8]	@ (8003bf0 <DMA1_Stream6_IRQHandler+0x10>)
 8003be6:	f000 fc91 	bl	800450c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003bea:	bf00      	nop
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	20004fb4 	.word	0x20004fb4

08003bf4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003bf8:	4802      	ldr	r0, [pc, #8]	@ (8003c04 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003bfa:	f003 fc25 	bl	8007448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003bfe:	bf00      	nop
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	20005030 	.word	0x20005030

08003c08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003c0c:	4802      	ldr	r0, [pc, #8]	@ (8003c18 <TIM3_IRQHandler+0x10>)
 8003c0e:	f003 fc1b 	bl	8007448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003c12:	bf00      	nop
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	20004e34 	.word	0x20004e34

08003c1c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003c20:	4802      	ldr	r0, [pc, #8]	@ (8003c2c <TIM4_IRQHandler+0x10>)
 8003c22:	f003 fc11 	bl	8007448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003c26:	bf00      	nop
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	20004e80 	.word	0x20004e80

08003c30 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003c34:	4802      	ldr	r0, [pc, #8]	@ (8003c40 <SPI1_IRQHandler+0x10>)
 8003c36:	f003 f8c7 	bl	8006dc8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003c3a:	bf00      	nop
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	20004dd0 	.word	0x20004dd0

08003c44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003c48:	4802      	ldr	r0, [pc, #8]	@ (8003c54 <USART2_IRQHandler+0x10>)
 8003c4a:	f004 fd0b 	bl	8008664 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003c4e:	bf00      	nop
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20004ecc 	.word	0x20004ecc

08003c58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  return 1;
 8003c5c:	2301      	movs	r3, #1
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <_kill>:

int _kill(int pid, int sig)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c72:	f017 fd45 	bl	801b700 <__errno>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2216      	movs	r2, #22
 8003c7a:	601a      	str	r2, [r3, #0]
  return -1;
 8003c7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3708      	adds	r7, #8
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <_exit>:

void _exit (int status)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c90:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7ff ffe7 	bl	8003c68 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c9a:	bf00      	nop
 8003c9c:	e7fd      	b.n	8003c9a <_exit+0x12>

08003c9e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b086      	sub	sp, #24
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	60f8      	str	r0, [r7, #12]
 8003ca6:	60b9      	str	r1, [r7, #8]
 8003ca8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003caa:	2300      	movs	r3, #0
 8003cac:	617b      	str	r3, [r7, #20]
 8003cae:	e00a      	b.n	8003cc6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003cb0:	f3af 8000 	nop.w
 8003cb4:	4601      	mov	r1, r0
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	1c5a      	adds	r2, r3, #1
 8003cba:	60ba      	str	r2, [r7, #8]
 8003cbc:	b2ca      	uxtb	r2, r1
 8003cbe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	617b      	str	r3, [r7, #20]
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	dbf0      	blt.n	8003cb0 <_read+0x12>
  }

  return len;
 8003cce:	687b      	ldr	r3, [r7, #4]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3718      	adds	r7, #24
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	617b      	str	r3, [r7, #20]
 8003ce8:	e009      	b.n	8003cfe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	1c5a      	adds	r2, r3, #1
 8003cee:	60ba      	str	r2, [r7, #8]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	dbf1      	blt.n	8003cea <_write+0x12>
  }
  return len;
 8003d06:	687b      	ldr	r3, [r7, #4]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <_close>:

int _close(int file)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d38:	605a      	str	r2, [r3, #4]
  return 0;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <_isatty>:

int _isatty(int file)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d50:	2301      	movs	r3, #1
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b085      	sub	sp, #20
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	60f8      	str	r0, [r7, #12]
 8003d66:	60b9      	str	r1, [r7, #8]
 8003d68:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3714      	adds	r7, #20
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d80:	4a14      	ldr	r2, [pc, #80]	@ (8003dd4 <_sbrk+0x5c>)
 8003d82:	4b15      	ldr	r3, [pc, #84]	@ (8003dd8 <_sbrk+0x60>)
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d8c:	4b13      	ldr	r3, [pc, #76]	@ (8003ddc <_sbrk+0x64>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d102      	bne.n	8003d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d94:	4b11      	ldr	r3, [pc, #68]	@ (8003ddc <_sbrk+0x64>)
 8003d96:	4a12      	ldr	r2, [pc, #72]	@ (8003de0 <_sbrk+0x68>)
 8003d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d9a:	4b10      	ldr	r3, [pc, #64]	@ (8003ddc <_sbrk+0x64>)
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4413      	add	r3, r2
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d207      	bcs.n	8003db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003da8:	f017 fcaa 	bl	801b700 <__errno>
 8003dac:	4603      	mov	r3, r0
 8003dae:	220c      	movs	r2, #12
 8003db0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003db2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003db6:	e009      	b.n	8003dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003db8:	4b08      	ldr	r3, [pc, #32]	@ (8003ddc <_sbrk+0x64>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003dbe:	4b07      	ldr	r3, [pc, #28]	@ (8003ddc <_sbrk+0x64>)
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	4a05      	ldr	r2, [pc, #20]	@ (8003ddc <_sbrk+0x64>)
 8003dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003dca:	68fb      	ldr	r3, [r7, #12]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3718      	adds	r7, #24
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	20080000 	.word	0x20080000
 8003dd8:	00000400 	.word	0x00000400
 8003ddc:	20005080 	.word	0x20005080
 8003de0:	2000f4a0 	.word	0x2000f4a0

08003de4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003de8:	4b06      	ldr	r3, [pc, #24]	@ (8003e04 <SystemInit+0x20>)
 8003dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dee:	4a05      	ldr	r2, [pc, #20]	@ (8003e04 <SystemInit+0x20>)
 8003df0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003df4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003df8:	bf00      	nop
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	e000ed00 	.word	0xe000ed00

08003e08 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8003e16:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8003e18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e1c:	4904      	ldr	r1, [pc, #16]	@ (8003e30 <cubemx_transport_open+0x28>)
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f004 fb4a 	bl	80084b8 <HAL_UART_Receive_DMA>
    return true;
 8003e24:	2301      	movs	r3, #1
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	20005084 	.word	0x20005084

08003e34 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8003e42:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f004 fb7b 	bl	8008540 <HAL_UART_DMAStop>
    return true;
 8003e4a:	2301      	movs	r3, #1
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
 8003e60:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8003e68:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e6e:	2b20      	cmp	r3, #32
 8003e70:	d11a      	bne.n	8003ea8 <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	461a      	mov	r2, r3
 8003e78:	68b9      	ldr	r1, [r7, #8]
 8003e7a:	6978      	ldr	r0, [r7, #20]
 8003e7c:	f004 faa0 	bl	80083c0 <HAL_UART_Transmit_DMA>
 8003e80:	4603      	mov	r3, r0
 8003e82:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8003e84:	e002      	b.n	8003e8c <cubemx_transport_write+0x38>
            osDelay(1);
 8003e86:	2001      	movs	r0, #1
 8003e88:	f005 ff50 	bl	8009d2c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8003e8c:	7cfb      	ldrb	r3, [r7, #19]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d103      	bne.n	8003e9a <cubemx_transport_write+0x46>
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e96:	2b20      	cmp	r3, #32
 8003e98:	d1f5      	bne.n	8003e86 <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 8003e9a:	7cfb      	ldrb	r3, [r7, #19]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <cubemx_transport_write+0x50>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	e002      	b.n	8003eaa <cubemx_transport_write+0x56>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	e000      	b.n	8003eaa <cubemx_transport_write+0x56>
    }else{
        return 0;
 8003ea8:	2300      	movs	r3, #0
    }
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3718      	adds	r7, #24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b088      	sub	sp, #32
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
 8003ec0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8003ec8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ece:	b672      	cpsid	i
}
 8003ed0:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8003ede:	4a1c      	ldr	r2, [pc, #112]	@ (8003f50 <cubemx_transport_read+0x9c>)
 8003ee0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003ee2:	b662      	cpsie	i
}
 8003ee4:	bf00      	nop
        __enable_irq();
        ms_used++;
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8003eec:	2001      	movs	r0, #1
 8003eee:	f005 ff1d 	bl	8009d2c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8003ef2:	4b18      	ldr	r3, [pc, #96]	@ (8003f54 <cubemx_transport_read+0xa0>)
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	4b16      	ldr	r3, [pc, #88]	@ (8003f50 <cubemx_transport_read+0x9c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d103      	bne.n	8003f06 <cubemx_transport_read+0x52>
 8003efe:	69fa      	ldr	r2, [r7, #28]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	dbe3      	blt.n	8003ece <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8003f06:	2300      	movs	r3, #0
 8003f08:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8003f0a:	e011      	b.n	8003f30 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8003f0c:	4b11      	ldr	r3, [pc, #68]	@ (8003f54 <cubemx_transport_read+0xa0>)
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	440b      	add	r3, r1
 8003f16:	4910      	ldr	r1, [pc, #64]	@ (8003f58 <cubemx_transport_read+0xa4>)
 8003f18:	5c8a      	ldrb	r2, [r1, r2]
 8003f1a:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8003f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8003f54 <cubemx_transport_read+0xa0>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	3301      	adds	r3, #1
 8003f22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f26:	4a0b      	ldr	r2, [pc, #44]	@ (8003f54 <cubemx_transport_read+0xa0>)
 8003f28:	6013      	str	r3, [r2, #0]
        wrote++;
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8003f30:	4b08      	ldr	r3, [pc, #32]	@ (8003f54 <cubemx_transport_read+0xa0>)
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	4b06      	ldr	r3, [pc, #24]	@ (8003f50 <cubemx_transport_read+0x9c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d003      	beq.n	8003f44 <cubemx_transport_read+0x90>
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d3e3      	bcc.n	8003f0c <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8003f44:	69bb      	ldr	r3, [r7, #24]
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3720      	adds	r7, #32
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	20005888 	.word	0x20005888
 8003f54:	20005884 	.word	0x20005884
 8003f58:	20005084 	.word	0x20005084

08003f5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003f5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003f94 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003f60:	f7ff ff40 	bl	8003de4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f64:	480c      	ldr	r0, [pc, #48]	@ (8003f98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003f66:	490d      	ldr	r1, [pc, #52]	@ (8003f9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003f68:	4a0d      	ldr	r2, [pc, #52]	@ (8003fa0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003f6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f6c:	e002      	b.n	8003f74 <LoopCopyDataInit>

08003f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f72:	3304      	adds	r3, #4

08003f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f78:	d3f9      	bcc.n	8003f6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8003fa4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003f7c:	4c0a      	ldr	r4, [pc, #40]	@ (8003fa8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f80:	e001      	b.n	8003f86 <LoopFillZerobss>

08003f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f84:	3204      	adds	r2, #4

08003f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f88:	d3fb      	bcc.n	8003f82 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003f8a:	f017 fbbf 	bl	801b70c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f8e:	f7fe fb3d 	bl	800260c <main>
  bx  lr    
 8003f92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003f94:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003f98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f9c:	20000944 	.word	0x20000944
  ldr r2, =_sidata
 8003fa0:	0801d98c 	.word	0x0801d98c
  ldr r2, =_sbss
 8003fa4:	20000948 	.word	0x20000948
  ldr r4, =_ebss
 8003fa8:	2000f49c 	.word	0x2000f49c

08003fac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fac:	e7fe      	b.n	8003fac <ADC_IRQHandler>

08003fae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fb2:	2003      	movs	r0, #3
 8003fb4:	f000 f8d5 	bl	8004162 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003fb8:	200f      	movs	r0, #15
 8003fba:	f7ff fd7b 	bl	8003ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003fbe:	f7ff fac3 	bl	8003548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fcc:	4b06      	ldr	r3, [pc, #24]	@ (8003fe8 <HAL_IncTick+0x20>)
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	4b06      	ldr	r3, [pc, #24]	@ (8003fec <HAL_IncTick+0x24>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	4a04      	ldr	r2, [pc, #16]	@ (8003fec <HAL_IncTick+0x24>)
 8003fda:	6013      	str	r3, [r2, #0]
}
 8003fdc:	bf00      	nop
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	20000038 	.word	0x20000038
 8003fec:	2000588c 	.word	0x2000588c

08003ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ff4:	4b03      	ldr	r3, [pc, #12]	@ (8004004 <HAL_GetTick+0x14>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	2000588c 	.word	0x2000588c

08004008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f003 0307 	and.w	r3, r3, #7
 8004016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004018:	4b0b      	ldr	r3, [pc, #44]	@ (8004048 <__NVIC_SetPriorityGrouping+0x40>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004024:	4013      	ands	r3, r2
 8004026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004030:	4b06      	ldr	r3, [pc, #24]	@ (800404c <__NVIC_SetPriorityGrouping+0x44>)
 8004032:	4313      	orrs	r3, r2
 8004034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004036:	4a04      	ldr	r2, [pc, #16]	@ (8004048 <__NVIC_SetPriorityGrouping+0x40>)
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	60d3      	str	r3, [r2, #12]
}
 800403c:	bf00      	nop
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	e000ed00 	.word	0xe000ed00
 800404c:	05fa0000 	.word	0x05fa0000

08004050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004054:	4b04      	ldr	r3, [pc, #16]	@ (8004068 <__NVIC_GetPriorityGrouping+0x18>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	0a1b      	lsrs	r3, r3, #8
 800405a:	f003 0307 	and.w	r3, r3, #7
}
 800405e:	4618      	mov	r0, r3
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	e000ed00 	.word	0xe000ed00

0800406c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	4603      	mov	r3, r0
 8004074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407a:	2b00      	cmp	r3, #0
 800407c:	db0b      	blt.n	8004096 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800407e:	79fb      	ldrb	r3, [r7, #7]
 8004080:	f003 021f 	and.w	r2, r3, #31
 8004084:	4907      	ldr	r1, [pc, #28]	@ (80040a4 <__NVIC_EnableIRQ+0x38>)
 8004086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800408a:	095b      	lsrs	r3, r3, #5
 800408c:	2001      	movs	r0, #1
 800408e:	fa00 f202 	lsl.w	r2, r0, r2
 8004092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	e000e100 	.word	0xe000e100

080040a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	4603      	mov	r3, r0
 80040b0:	6039      	str	r1, [r7, #0]
 80040b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	db0a      	blt.n	80040d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	490c      	ldr	r1, [pc, #48]	@ (80040f4 <__NVIC_SetPriority+0x4c>)
 80040c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c6:	0112      	lsls	r2, r2, #4
 80040c8:	b2d2      	uxtb	r2, r2
 80040ca:	440b      	add	r3, r1
 80040cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040d0:	e00a      	b.n	80040e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	4908      	ldr	r1, [pc, #32]	@ (80040f8 <__NVIC_SetPriority+0x50>)
 80040d8:	79fb      	ldrb	r3, [r7, #7]
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	3b04      	subs	r3, #4
 80040e0:	0112      	lsls	r2, r2, #4
 80040e2:	b2d2      	uxtb	r2, r2
 80040e4:	440b      	add	r3, r1
 80040e6:	761a      	strb	r2, [r3, #24]
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	e000e100 	.word	0xe000e100
 80040f8:	e000ed00 	.word	0xe000ed00

080040fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b089      	sub	sp, #36	@ 0x24
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	f1c3 0307 	rsb	r3, r3, #7
 8004116:	2b04      	cmp	r3, #4
 8004118:	bf28      	it	cs
 800411a:	2304      	movcs	r3, #4
 800411c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	3304      	adds	r3, #4
 8004122:	2b06      	cmp	r3, #6
 8004124:	d902      	bls.n	800412c <NVIC_EncodePriority+0x30>
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	3b03      	subs	r3, #3
 800412a:	e000      	b.n	800412e <NVIC_EncodePriority+0x32>
 800412c:	2300      	movs	r3, #0
 800412e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004130:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	43da      	mvns	r2, r3
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	401a      	ands	r2, r3
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004144:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	fa01 f303 	lsl.w	r3, r1, r3
 800414e:	43d9      	mvns	r1, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004154:	4313      	orrs	r3, r2
         );
}
 8004156:	4618      	mov	r0, r3
 8004158:	3724      	adds	r7, #36	@ 0x24
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b082      	sub	sp, #8
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7ff ff4c 	bl	8004008 <__NVIC_SetPriorityGrouping>
}
 8004170:	bf00      	nop
 8004172:	3708      	adds	r7, #8
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	4603      	mov	r3, r0
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
 8004184:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004186:	2300      	movs	r3, #0
 8004188:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800418a:	f7ff ff61 	bl	8004050 <__NVIC_GetPriorityGrouping>
 800418e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	68b9      	ldr	r1, [r7, #8]
 8004194:	6978      	ldr	r0, [r7, #20]
 8004196:	f7ff ffb1 	bl	80040fc <NVIC_EncodePriority>
 800419a:	4602      	mov	r2, r0
 800419c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041a0:	4611      	mov	r1, r2
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7ff ff80 	bl	80040a8 <__NVIC_SetPriority>
}
 80041a8:	bf00      	nop
 80041aa:	3718      	adds	r7, #24
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	4603      	mov	r3, r0
 80041b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7ff ff54 	bl	800406c <__NVIC_EnableIRQ>
}
 80041c4:	bf00      	nop
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80041d8:	f7ff ff0a 	bl	8003ff0 <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e099      	b.n	800431c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0201 	bic.w	r2, r2, #1
 8004206:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004208:	e00f      	b.n	800422a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800420a:	f7ff fef1 	bl	8003ff0 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b05      	cmp	r3, #5
 8004216:	d908      	bls.n	800422a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2220      	movs	r2, #32
 800421c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2203      	movs	r2, #3
 8004222:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e078      	b.n	800431c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1e8      	bne.n	800420a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	4b38      	ldr	r3, [pc, #224]	@ (8004324 <HAL_DMA_Init+0x158>)
 8004244:	4013      	ands	r3, r2
 8004246:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004256:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004262:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800426e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	4313      	orrs	r3, r2
 800427a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004280:	2b04      	cmp	r3, #4
 8004282:	d107      	bne.n	8004294 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800428c:	4313      	orrs	r3, r2
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	4313      	orrs	r3, r2
 8004292:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f023 0307 	bic.w	r3, r3, #7
 80042aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d117      	bne.n	80042ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00e      	beq.n	80042ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 fb15 	bl	8004900 <DMA_CheckFifoParam>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d008      	beq.n	80042ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2240      	movs	r2, #64	@ 0x40
 80042e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80042ea:	2301      	movs	r3, #1
 80042ec:	e016      	b.n	800431c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 facc 	bl	8004894 <DMA_CalcBaseAndBitshift>
 80042fc:	4603      	mov	r3, r0
 80042fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004304:	223f      	movs	r2, #63	@ 0x3f
 8004306:	409a      	lsls	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3718      	adds	r7, #24
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	e010803f 	.word	0xe010803f

08004328 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
 8004334:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004336:	2300      	movs	r3, #0
 8004338:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800433e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004346:	2b01      	cmp	r3, #1
 8004348:	d101      	bne.n	800434e <HAL_DMA_Start_IT+0x26>
 800434a:	2302      	movs	r3, #2
 800434c:	e048      	b.n	80043e0 <HAL_DMA_Start_IT+0xb8>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b01      	cmp	r3, #1
 8004360:	d137      	bne.n	80043d2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2202      	movs	r2, #2
 8004366:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	68b9      	ldr	r1, [r7, #8]
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f000 fa5e 	bl	8004838 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004380:	223f      	movs	r2, #63	@ 0x3f
 8004382:	409a      	lsls	r2, r3
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0216 	orr.w	r2, r2, #22
 8004396:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	695a      	ldr	r2, [r3, #20]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80043a6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d007      	beq.n	80043c0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0208 	orr.w	r2, r2, #8
 80043be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 0201 	orr.w	r2, r2, #1
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	e005      	b.n	80043de <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80043da:	2302      	movs	r3, #2
 80043dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80043de:	7dfb      	ldrb	r3, [r7, #23]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80043f6:	f7ff fdfb 	bl	8003ff0 <HAL_GetTick>
 80043fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d008      	beq.n	800441a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2280      	movs	r2, #128	@ 0x80
 800440c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e052      	b.n	80044c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 0216 	bic.w	r2, r2, #22
 8004428:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695a      	ldr	r2, [r3, #20]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004438:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443e:	2b00      	cmp	r3, #0
 8004440:	d103      	bne.n	800444a <HAL_DMA_Abort+0x62>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004446:	2b00      	cmp	r3, #0
 8004448:	d007      	beq.n	800445a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0208 	bic.w	r2, r2, #8
 8004458:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 0201 	bic.w	r2, r2, #1
 8004468:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800446a:	e013      	b.n	8004494 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800446c:	f7ff fdc0 	bl	8003ff0 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b05      	cmp	r3, #5
 8004478:	d90c      	bls.n	8004494 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2220      	movs	r2, #32
 800447e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2203      	movs	r2, #3
 8004484:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e015      	b.n	80044c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1e4      	bne.n	800446c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a6:	223f      	movs	r2, #63	@ 0x3f
 80044a8:	409a      	lsls	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d004      	beq.n	80044e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2280      	movs	r2, #128	@ 0x80
 80044e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e00c      	b.n	8004500 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2205      	movs	r2, #5
 80044ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0201 	bic.w	r2, r2, #1
 80044fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004514:	2300      	movs	r3, #0
 8004516:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004518:	4b8e      	ldr	r3, [pc, #568]	@ (8004754 <HAL_DMA_IRQHandler+0x248>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a8e      	ldr	r2, [pc, #568]	@ (8004758 <HAL_DMA_IRQHandler+0x24c>)
 800451e:	fba2 2303 	umull	r2, r3, r2, r3
 8004522:	0a9b      	lsrs	r3, r3, #10
 8004524:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800452a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004536:	2208      	movs	r2, #8
 8004538:	409a      	lsls	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	4013      	ands	r3, r2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d01a      	beq.n	8004578 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b00      	cmp	r3, #0
 800454e:	d013      	beq.n	8004578 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0204 	bic.w	r2, r2, #4
 800455e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004564:	2208      	movs	r2, #8
 8004566:	409a      	lsls	r2, r3
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004570:	f043 0201 	orr.w	r2, r3, #1
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800457c:	2201      	movs	r2, #1
 800457e:	409a      	lsls	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4013      	ands	r3, r2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d012      	beq.n	80045ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00b      	beq.n	80045ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800459a:	2201      	movs	r2, #1
 800459c:	409a      	lsls	r2, r3
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a6:	f043 0202 	orr.w	r2, r3, #2
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045b2:	2204      	movs	r2, #4
 80045b4:	409a      	lsls	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	4013      	ands	r3, r2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d012      	beq.n	80045e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00b      	beq.n	80045e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045d0:	2204      	movs	r2, #4
 80045d2:	409a      	lsls	r2, r3
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045dc:	f043 0204 	orr.w	r2, r3, #4
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e8:	2210      	movs	r2, #16
 80045ea:	409a      	lsls	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4013      	ands	r3, r2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d043      	beq.n	800467c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0308 	and.w	r3, r3, #8
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d03c      	beq.n	800467c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004606:	2210      	movs	r2, #16
 8004608:	409a      	lsls	r2, r3
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d018      	beq.n	800464e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d108      	bne.n	800463c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462e:	2b00      	cmp	r3, #0
 8004630:	d024      	beq.n	800467c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	4798      	blx	r3
 800463a:	e01f      	b.n	800467c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004640:	2b00      	cmp	r3, #0
 8004642:	d01b      	beq.n	800467c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	4798      	blx	r3
 800464c:	e016      	b.n	800467c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004658:	2b00      	cmp	r3, #0
 800465a:	d107      	bne.n	800466c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 0208 	bic.w	r2, r2, #8
 800466a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004680:	2220      	movs	r2, #32
 8004682:	409a      	lsls	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4013      	ands	r3, r2
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 808f 	beq.w	80047ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0310 	and.w	r3, r3, #16
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 8087 	beq.w	80047ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046a2:	2220      	movs	r2, #32
 80046a4:	409a      	lsls	r2, r3
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b05      	cmp	r3, #5
 80046b4:	d136      	bne.n	8004724 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0216 	bic.w	r2, r2, #22
 80046c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	695a      	ldr	r2, [r3, #20]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d103      	bne.n	80046e6 <HAL_DMA_IRQHandler+0x1da>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d007      	beq.n	80046f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0208 	bic.w	r2, r2, #8
 80046f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046fa:	223f      	movs	r2, #63	@ 0x3f
 80046fc:	409a      	lsls	r2, r3
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004716:	2b00      	cmp	r3, #0
 8004718:	d07e      	beq.n	8004818 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	4798      	blx	r3
        }
        return;
 8004722:	e079      	b.n	8004818 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d01d      	beq.n	800476e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10d      	bne.n	800475c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004744:	2b00      	cmp	r3, #0
 8004746:	d031      	beq.n	80047ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	4798      	blx	r3
 8004750:	e02c      	b.n	80047ac <HAL_DMA_IRQHandler+0x2a0>
 8004752:	bf00      	nop
 8004754:	20000030 	.word	0x20000030
 8004758:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004760:	2b00      	cmp	r3, #0
 8004762:	d023      	beq.n	80047ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	4798      	blx	r3
 800476c:	e01e      	b.n	80047ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10f      	bne.n	800479c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0210 	bic.w	r2, r2, #16
 800478a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d003      	beq.n	80047ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d032      	beq.n	800481a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d022      	beq.n	8004806 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2205      	movs	r2, #5
 80047c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0201 	bic.w	r2, r2, #1
 80047d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	3301      	adds	r3, #1
 80047dc:	60bb      	str	r3, [r7, #8]
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d307      	bcc.n	80047f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1f2      	bne.n	80047d8 <HAL_DMA_IRQHandler+0x2cc>
 80047f2:	e000      	b.n	80047f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80047f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800480a:	2b00      	cmp	r3, #0
 800480c:	d005      	beq.n	800481a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	4798      	blx	r3
 8004816:	e000      	b.n	800481a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004818:	bf00      	nop
    }
  }
}
 800481a:	3718      	adds	r7, #24
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800482c:	4618      	mov	r0, r3
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
 8004844:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004854:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	2b40      	cmp	r3, #64	@ 0x40
 8004864:	d108      	bne.n	8004878 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004876:	e007      	b.n	8004888 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	60da      	str	r2, [r3, #12]
}
 8004888:	bf00      	nop
 800488a:	3714      	adds	r7, #20
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	3b10      	subs	r3, #16
 80048a4:	4a13      	ldr	r2, [pc, #76]	@ (80048f4 <DMA_CalcBaseAndBitshift+0x60>)
 80048a6:	fba2 2303 	umull	r2, r3, r2, r3
 80048aa:	091b      	lsrs	r3, r3, #4
 80048ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80048ae:	4a12      	ldr	r2, [pc, #72]	@ (80048f8 <DMA_CalcBaseAndBitshift+0x64>)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4413      	add	r3, r2
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	461a      	mov	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b03      	cmp	r3, #3
 80048c0:	d908      	bls.n	80048d4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	461a      	mov	r2, r3
 80048c8:	4b0c      	ldr	r3, [pc, #48]	@ (80048fc <DMA_CalcBaseAndBitshift+0x68>)
 80048ca:	4013      	ands	r3, r2
 80048cc:	1d1a      	adds	r2, r3, #4
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80048d2:	e006      	b.n	80048e2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	461a      	mov	r2, r3
 80048da:	4b08      	ldr	r3, [pc, #32]	@ (80048fc <DMA_CalcBaseAndBitshift+0x68>)
 80048dc:	4013      	ands	r3, r2
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	aaaaaaab 	.word	0xaaaaaaab
 80048f8:	0801c5ac 	.word	0x0801c5ac
 80048fc:	fffffc00 	.word	0xfffffc00

08004900 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004908:	2300      	movs	r3, #0
 800490a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004910:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d11f      	bne.n	800495a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2b03      	cmp	r3, #3
 800491e:	d856      	bhi.n	80049ce <DMA_CheckFifoParam+0xce>
 8004920:	a201      	add	r2, pc, #4	@ (adr r2, 8004928 <DMA_CheckFifoParam+0x28>)
 8004922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004926:	bf00      	nop
 8004928:	08004939 	.word	0x08004939
 800492c:	0800494b 	.word	0x0800494b
 8004930:	08004939 	.word	0x08004939
 8004934:	080049cf 	.word	0x080049cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800493c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d046      	beq.n	80049d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004948:	e043      	b.n	80049d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800494e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004952:	d140      	bne.n	80049d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004958:	e03d      	b.n	80049d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004962:	d121      	bne.n	80049a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2b03      	cmp	r3, #3
 8004968:	d837      	bhi.n	80049da <DMA_CheckFifoParam+0xda>
 800496a:	a201      	add	r2, pc, #4	@ (adr r2, 8004970 <DMA_CheckFifoParam+0x70>)
 800496c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004970:	08004981 	.word	0x08004981
 8004974:	08004987 	.word	0x08004987
 8004978:	08004981 	.word	0x08004981
 800497c:	08004999 	.word	0x08004999
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	73fb      	strb	r3, [r7, #15]
      break;
 8004984:	e030      	b.n	80049e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d025      	beq.n	80049de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004996:	e022      	b.n	80049de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800499c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80049a0:	d11f      	bne.n	80049e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80049a6:	e01c      	b.n	80049e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d903      	bls.n	80049b6 <DMA_CheckFifoParam+0xb6>
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2b03      	cmp	r3, #3
 80049b2:	d003      	beq.n	80049bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80049b4:	e018      	b.n	80049e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	73fb      	strb	r3, [r7, #15]
      break;
 80049ba:	e015      	b.n	80049e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00e      	beq.n	80049e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	73fb      	strb	r3, [r7, #15]
      break;
 80049cc:	e00b      	b.n	80049e6 <DMA_CheckFifoParam+0xe6>
      break;
 80049ce:	bf00      	nop
 80049d0:	e00a      	b.n	80049e8 <DMA_CheckFifoParam+0xe8>
      break;
 80049d2:	bf00      	nop
 80049d4:	e008      	b.n	80049e8 <DMA_CheckFifoParam+0xe8>
      break;
 80049d6:	bf00      	nop
 80049d8:	e006      	b.n	80049e8 <DMA_CheckFifoParam+0xe8>
      break;
 80049da:	bf00      	nop
 80049dc:	e004      	b.n	80049e8 <DMA_CheckFifoParam+0xe8>
      break;
 80049de:	bf00      	nop
 80049e0:	e002      	b.n	80049e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80049e2:	bf00      	nop
 80049e4:	e000      	b.n	80049e8 <DMA_CheckFifoParam+0xe8>
      break;
 80049e6:	bf00      	nop
    }
  } 
  
  return status; 
 80049e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop

080049f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b089      	sub	sp, #36	@ 0x24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004a02:	2300      	movs	r3, #0
 8004a04:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004a06:	2300      	movs	r3, #0
 8004a08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004a12:	2300      	movs	r3, #0
 8004a14:	61fb      	str	r3, [r7, #28]
 8004a16:	e175      	b.n	8004d04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004a18:	2201      	movs	r2, #1
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	f040 8164 	bne.w	8004cfe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d005      	beq.n	8004a4e <HAL_GPIO_Init+0x56>
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d130      	bne.n	8004ab0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	2203      	movs	r2, #3
 8004a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5e:	43db      	mvns	r3, r3
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	4013      	ands	r3, r2
 8004a64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	68da      	ldr	r2, [r3, #12]
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a84:	2201      	movs	r2, #1
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	4013      	ands	r3, r2
 8004a92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	091b      	lsrs	r3, r3, #4
 8004a9a:	f003 0201 	and.w	r2, r3, #1
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f003 0303 	and.w	r3, r3, #3
 8004ab8:	2b03      	cmp	r3, #3
 8004aba:	d017      	beq.n	8004aec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	2203      	movs	r2, #3
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	43db      	mvns	r3, r3
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	689a      	ldr	r2, [r3, #8]
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f003 0303 	and.w	r3, r3, #3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d123      	bne.n	8004b40 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	08da      	lsrs	r2, r3, #3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	3208      	adds	r2, #8
 8004b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	220f      	movs	r2, #15
 8004b10:	fa02 f303 	lsl.w	r3, r2, r3
 8004b14:	43db      	mvns	r3, r3
 8004b16:	69ba      	ldr	r2, [r7, #24]
 8004b18:	4013      	ands	r3, r2
 8004b1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	691a      	ldr	r2, [r3, #16]
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	08da      	lsrs	r2, r3, #3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	3208      	adds	r2, #8
 8004b3a:	69b9      	ldr	r1, [r7, #24]
 8004b3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	2203      	movs	r2, #3
 8004b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b50:	43db      	mvns	r3, r3
 8004b52:	69ba      	ldr	r2, [r7, #24]
 8004b54:	4013      	ands	r3, r2
 8004b56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f003 0203 	and.w	r2, r3, #3
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	fa02 f303 	lsl.w	r3, r2, r3
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 80be 	beq.w	8004cfe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b82:	4b66      	ldr	r3, [pc, #408]	@ (8004d1c <HAL_GPIO_Init+0x324>)
 8004b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b86:	4a65      	ldr	r2, [pc, #404]	@ (8004d1c <HAL_GPIO_Init+0x324>)
 8004b88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b8e:	4b63      	ldr	r3, [pc, #396]	@ (8004d1c <HAL_GPIO_Init+0x324>)
 8004b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b96:	60fb      	str	r3, [r7, #12]
 8004b98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004b9a:	4a61      	ldr	r2, [pc, #388]	@ (8004d20 <HAL_GPIO_Init+0x328>)
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	089b      	lsrs	r3, r3, #2
 8004ba0:	3302      	adds	r3, #2
 8004ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	f003 0303 	and.w	r3, r3, #3
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	220f      	movs	r2, #15
 8004bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb6:	43db      	mvns	r3, r3
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	4013      	ands	r3, r2
 8004bbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a58      	ldr	r2, [pc, #352]	@ (8004d24 <HAL_GPIO_Init+0x32c>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d037      	beq.n	8004c36 <HAL_GPIO_Init+0x23e>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a57      	ldr	r2, [pc, #348]	@ (8004d28 <HAL_GPIO_Init+0x330>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d031      	beq.n	8004c32 <HAL_GPIO_Init+0x23a>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a56      	ldr	r2, [pc, #344]	@ (8004d2c <HAL_GPIO_Init+0x334>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d02b      	beq.n	8004c2e <HAL_GPIO_Init+0x236>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a55      	ldr	r2, [pc, #340]	@ (8004d30 <HAL_GPIO_Init+0x338>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d025      	beq.n	8004c2a <HAL_GPIO_Init+0x232>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a54      	ldr	r2, [pc, #336]	@ (8004d34 <HAL_GPIO_Init+0x33c>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d01f      	beq.n	8004c26 <HAL_GPIO_Init+0x22e>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a53      	ldr	r2, [pc, #332]	@ (8004d38 <HAL_GPIO_Init+0x340>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d019      	beq.n	8004c22 <HAL_GPIO_Init+0x22a>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a52      	ldr	r2, [pc, #328]	@ (8004d3c <HAL_GPIO_Init+0x344>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d013      	beq.n	8004c1e <HAL_GPIO_Init+0x226>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a51      	ldr	r2, [pc, #324]	@ (8004d40 <HAL_GPIO_Init+0x348>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d00d      	beq.n	8004c1a <HAL_GPIO_Init+0x222>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a50      	ldr	r2, [pc, #320]	@ (8004d44 <HAL_GPIO_Init+0x34c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d007      	beq.n	8004c16 <HAL_GPIO_Init+0x21e>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a4f      	ldr	r2, [pc, #316]	@ (8004d48 <HAL_GPIO_Init+0x350>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d101      	bne.n	8004c12 <HAL_GPIO_Init+0x21a>
 8004c0e:	2309      	movs	r3, #9
 8004c10:	e012      	b.n	8004c38 <HAL_GPIO_Init+0x240>
 8004c12:	230a      	movs	r3, #10
 8004c14:	e010      	b.n	8004c38 <HAL_GPIO_Init+0x240>
 8004c16:	2308      	movs	r3, #8
 8004c18:	e00e      	b.n	8004c38 <HAL_GPIO_Init+0x240>
 8004c1a:	2307      	movs	r3, #7
 8004c1c:	e00c      	b.n	8004c38 <HAL_GPIO_Init+0x240>
 8004c1e:	2306      	movs	r3, #6
 8004c20:	e00a      	b.n	8004c38 <HAL_GPIO_Init+0x240>
 8004c22:	2305      	movs	r3, #5
 8004c24:	e008      	b.n	8004c38 <HAL_GPIO_Init+0x240>
 8004c26:	2304      	movs	r3, #4
 8004c28:	e006      	b.n	8004c38 <HAL_GPIO_Init+0x240>
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e004      	b.n	8004c38 <HAL_GPIO_Init+0x240>
 8004c2e:	2302      	movs	r3, #2
 8004c30:	e002      	b.n	8004c38 <HAL_GPIO_Init+0x240>
 8004c32:	2301      	movs	r3, #1
 8004c34:	e000      	b.n	8004c38 <HAL_GPIO_Init+0x240>
 8004c36:	2300      	movs	r3, #0
 8004c38:	69fa      	ldr	r2, [r7, #28]
 8004c3a:	f002 0203 	and.w	r2, r2, #3
 8004c3e:	0092      	lsls	r2, r2, #2
 8004c40:	4093      	lsls	r3, r2
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004c48:	4935      	ldr	r1, [pc, #212]	@ (8004d20 <HAL_GPIO_Init+0x328>)
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	089b      	lsrs	r3, r3, #2
 8004c4e:	3302      	adds	r3, #2
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c56:	4b3d      	ldr	r3, [pc, #244]	@ (8004d4c <HAL_GPIO_Init+0x354>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	43db      	mvns	r3, r3
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	4013      	ands	r3, r2
 8004c64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c7a:	4a34      	ldr	r2, [pc, #208]	@ (8004d4c <HAL_GPIO_Init+0x354>)
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c80:	4b32      	ldr	r3, [pc, #200]	@ (8004d4c <HAL_GPIO_Init+0x354>)
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	43db      	mvns	r3, r3
 8004c8a:	69ba      	ldr	r2, [r7, #24]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ca4:	4a29      	ldr	r2, [pc, #164]	@ (8004d4c <HAL_GPIO_Init+0x354>)
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004caa:	4b28      	ldr	r3, [pc, #160]	@ (8004d4c <HAL_GPIO_Init+0x354>)
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	43db      	mvns	r3, r3
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004cce:	4a1f      	ldr	r2, [pc, #124]	@ (8004d4c <HAL_GPIO_Init+0x354>)
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8004d4c <HAL_GPIO_Init+0x354>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	43db      	mvns	r3, r3
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004cf8:	4a14      	ldr	r2, [pc, #80]	@ (8004d4c <HAL_GPIO_Init+0x354>)
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	3301      	adds	r3, #1
 8004d02:	61fb      	str	r3, [r7, #28]
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	2b0f      	cmp	r3, #15
 8004d08:	f67f ae86 	bls.w	8004a18 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004d0c:	bf00      	nop
 8004d0e:	bf00      	nop
 8004d10:	3724      	adds	r7, #36	@ 0x24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	40023800 	.word	0x40023800
 8004d20:	40013800 	.word	0x40013800
 8004d24:	40020000 	.word	0x40020000
 8004d28:	40020400 	.word	0x40020400
 8004d2c:	40020800 	.word	0x40020800
 8004d30:	40020c00 	.word	0x40020c00
 8004d34:	40021000 	.word	0x40021000
 8004d38:	40021400 	.word	0x40021400
 8004d3c:	40021800 	.word	0x40021800
 8004d40:	40021c00 	.word	0x40021c00
 8004d44:	40022000 	.word	0x40022000
 8004d48:	40022400 	.word	0x40022400
 8004d4c:	40013c00 	.word	0x40013c00

08004d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	460b      	mov	r3, r1
 8004d5a:	807b      	strh	r3, [r7, #2]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d60:	787b      	ldrb	r3, [r7, #1]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d003      	beq.n	8004d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d66:	887a      	ldrh	r2, [r7, #2]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004d6c:	e003      	b.n	8004d76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004d6e:	887b      	ldrh	r3, [r7, #2]
 8004d70:	041a      	lsls	r2, r3, #16
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	619a      	str	r2, [r3, #24]
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
	...

08004d84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e08b      	b.n	8004eae <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d106      	bne.n	8004db0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7fe fbf4 	bl	8003598 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2224      	movs	r2, #36	@ 0x24
 8004db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f022 0201 	bic.w	r2, r2, #1
 8004dc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004dd4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004de4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d107      	bne.n	8004dfe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689a      	ldr	r2, [r3, #8]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004dfa:	609a      	str	r2, [r3, #8]
 8004dfc:	e006      	b.n	8004e0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689a      	ldr	r2, [r3, #8]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004e0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d108      	bne.n	8004e26 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e22:	605a      	str	r2, [r3, #4]
 8004e24:	e007      	b.n	8004e36 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6859      	ldr	r1, [r3, #4]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	4b1d      	ldr	r3, [pc, #116]	@ (8004eb8 <HAL_I2C_Init+0x134>)
 8004e42:	430b      	orrs	r3, r1
 8004e44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68da      	ldr	r2, [r3, #12]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691a      	ldr	r2, [r3, #16]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	69d9      	ldr	r1, [r3, #28]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a1a      	ldr	r2, [r3, #32]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0201 	orr.w	r2, r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	02008000 	.word	0x02008000

08004ebc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b088      	sub	sp, #32
 8004ec0:	af02      	add	r7, sp, #8
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	607a      	str	r2, [r7, #4]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	460b      	mov	r3, r1
 8004eca:	817b      	strh	r3, [r7, #10]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b20      	cmp	r3, #32
 8004eda:	f040 80fd 	bne.w	80050d8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d101      	bne.n	8004eec <HAL_I2C_Master_Transmit+0x30>
 8004ee8:	2302      	movs	r3, #2
 8004eea:	e0f6      	b.n	80050da <HAL_I2C_Master_Transmit+0x21e>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ef4:	f7ff f87c 	bl	8003ff0 <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	2319      	movs	r3, #25
 8004f00:	2201      	movs	r2, #1
 8004f02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 fa0a 	bl	8005320 <I2C_WaitOnFlagUntilTimeout>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e0e1      	b.n	80050da <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2221      	movs	r2, #33	@ 0x21
 8004f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2210      	movs	r2, #16
 8004f22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	893a      	ldrh	r2, [r7, #8]
 8004f36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	2bff      	cmp	r3, #255	@ 0xff
 8004f46:	d906      	bls.n	8004f56 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	22ff      	movs	r2, #255	@ 0xff
 8004f4c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004f4e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f52:	617b      	str	r3, [r7, #20]
 8004f54:	e007      	b.n	8004f66 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004f60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f64:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d024      	beq.n	8004fb8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f72:	781a      	ldrb	r2, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7e:	1c5a      	adds	r2, r3, #1
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f96:	3b01      	subs	r3, #1
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	8979      	ldrh	r1, [r7, #10]
 8004faa:	4b4e      	ldr	r3, [pc, #312]	@ (80050e4 <HAL_I2C_Master_Transmit+0x228>)
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f000 fc05 	bl	80057c0 <I2C_TransferConfig>
 8004fb6:	e066      	b.n	8005086 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	8979      	ldrh	r1, [r7, #10]
 8004fc0:	4b48      	ldr	r3, [pc, #288]	@ (80050e4 <HAL_I2C_Master_Transmit+0x228>)
 8004fc2:	9300      	str	r3, [sp, #0]
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f000 fbfa 	bl	80057c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004fcc:	e05b      	b.n	8005086 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	6a39      	ldr	r1, [r7, #32]
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 f9fd 	bl	80053d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e07b      	b.n	80050da <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe6:	781a      	ldrb	r2, [r3, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff2:	1c5a      	adds	r2, r3, #1
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	3b01      	subs	r3, #1
 8005000:	b29a      	uxth	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800500a:	3b01      	subs	r3, #1
 800500c:	b29a      	uxth	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005016:	b29b      	uxth	r3, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	d034      	beq.n	8005086 <HAL_I2C_Master_Transmit+0x1ca>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005020:	2b00      	cmp	r3, #0
 8005022:	d130      	bne.n	8005086 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	6a3b      	ldr	r3, [r7, #32]
 800502a:	2200      	movs	r2, #0
 800502c:	2180      	movs	r1, #128	@ 0x80
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f000 f976 	bl	8005320 <I2C_WaitOnFlagUntilTimeout>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e04d      	b.n	80050da <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005042:	b29b      	uxth	r3, r3
 8005044:	2bff      	cmp	r3, #255	@ 0xff
 8005046:	d90e      	bls.n	8005066 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	22ff      	movs	r2, #255	@ 0xff
 800504c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005052:	b2da      	uxtb	r2, r3
 8005054:	8979      	ldrh	r1, [r7, #10]
 8005056:	2300      	movs	r3, #0
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 fbae 	bl	80057c0 <I2C_TransferConfig>
 8005064:	e00f      	b.n	8005086 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800506a:	b29a      	uxth	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005074:	b2da      	uxtb	r2, r3
 8005076:	8979      	ldrh	r1, [r7, #10]
 8005078:	2300      	movs	r3, #0
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 fb9d 	bl	80057c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800508a:	b29b      	uxth	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	d19e      	bne.n	8004fce <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	6a39      	ldr	r1, [r7, #32]
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 f9e3 	bl	8005460 <I2C_WaitOnSTOPFlagUntilTimeout>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e01a      	b.n	80050da <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2220      	movs	r2, #32
 80050aa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6859      	ldr	r1, [r3, #4]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	4b0c      	ldr	r3, [pc, #48]	@ (80050e8 <HAL_I2C_Master_Transmit+0x22c>)
 80050b8:	400b      	ands	r3, r1
 80050ba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2220      	movs	r2, #32
 80050c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80050d4:	2300      	movs	r3, #0
 80050d6:	e000      	b.n	80050da <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80050d8:	2302      	movs	r3, #2
  }
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3718      	adds	r7, #24
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	80002000 	.word	0x80002000
 80050e8:	fe00e800 	.word	0xfe00e800

080050ec <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b088      	sub	sp, #32
 80050f0:	af02      	add	r7, sp, #8
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	607a      	str	r2, [r7, #4]
 80050f6:	461a      	mov	r2, r3
 80050f8:	460b      	mov	r3, r1
 80050fa:	817b      	strh	r3, [r7, #10]
 80050fc:	4613      	mov	r3, r2
 80050fe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b20      	cmp	r3, #32
 800510a:	f040 80db 	bne.w	80052c4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005114:	2b01      	cmp	r3, #1
 8005116:	d101      	bne.n	800511c <HAL_I2C_Master_Receive+0x30>
 8005118:	2302      	movs	r3, #2
 800511a:	e0d4      	b.n	80052c6 <HAL_I2C_Master_Receive+0x1da>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005124:	f7fe ff64 	bl	8003ff0 <HAL_GetTick>
 8005128:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	2319      	movs	r3, #25
 8005130:	2201      	movs	r2, #1
 8005132:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f000 f8f2 	bl	8005320 <I2C_WaitOnFlagUntilTimeout>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d001      	beq.n	8005146 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e0bf      	b.n	80052c6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2222      	movs	r2, #34	@ 0x22
 800514a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2210      	movs	r2, #16
 8005152:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	893a      	ldrh	r2, [r7, #8]
 8005166:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005172:	b29b      	uxth	r3, r3
 8005174:	2bff      	cmp	r3, #255	@ 0xff
 8005176:	d90e      	bls.n	8005196 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2201      	movs	r2, #1
 800517c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005182:	b2da      	uxtb	r2, r3
 8005184:	8979      	ldrh	r1, [r7, #10]
 8005186:	4b52      	ldr	r3, [pc, #328]	@ (80052d0 <HAL_I2C_Master_Receive+0x1e4>)
 8005188:	9300      	str	r3, [sp, #0]
 800518a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 fb16 	bl	80057c0 <I2C_TransferConfig>
 8005194:	e06d      	b.n	8005272 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800519a:	b29a      	uxth	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051a4:	b2da      	uxtb	r2, r3
 80051a6:	8979      	ldrh	r1, [r7, #10]
 80051a8:	4b49      	ldr	r3, [pc, #292]	@ (80052d0 <HAL_I2C_Master_Receive+0x1e4>)
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 fb05 	bl	80057c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80051b6:	e05c      	b.n	8005272 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	6a39      	ldr	r1, [r7, #32]
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 f993 	bl	80054e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d001      	beq.n	80051cc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e07c      	b.n	80052c6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051e8:	3b01      	subs	r3, #1
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	3b01      	subs	r3, #1
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005202:	b29b      	uxth	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	d034      	beq.n	8005272 <HAL_I2C_Master_Receive+0x186>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800520c:	2b00      	cmp	r3, #0
 800520e:	d130      	bne.n	8005272 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	2200      	movs	r2, #0
 8005218:	2180      	movs	r1, #128	@ 0x80
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 f880 	bl	8005320 <I2C_WaitOnFlagUntilTimeout>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e04d      	b.n	80052c6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800522e:	b29b      	uxth	r3, r3
 8005230:	2bff      	cmp	r3, #255	@ 0xff
 8005232:	d90e      	bls.n	8005252 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	22ff      	movs	r2, #255	@ 0xff
 8005238:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800523e:	b2da      	uxtb	r2, r3
 8005240:	8979      	ldrh	r1, [r7, #10]
 8005242:	2300      	movs	r3, #0
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 fab8 	bl	80057c0 <I2C_TransferConfig>
 8005250:	e00f      	b.n	8005272 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005256:	b29a      	uxth	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005260:	b2da      	uxtb	r2, r3
 8005262:	8979      	ldrh	r1, [r7, #10]
 8005264:	2300      	movs	r3, #0
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f000 faa7 	bl	80057c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005276:	b29b      	uxth	r3, r3
 8005278:	2b00      	cmp	r3, #0
 800527a:	d19d      	bne.n	80051b8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	6a39      	ldr	r1, [r7, #32]
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f000 f8ed 	bl	8005460 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e01a      	b.n	80052c6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2220      	movs	r2, #32
 8005296:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6859      	ldr	r1, [r3, #4]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	4b0c      	ldr	r3, [pc, #48]	@ (80052d4 <HAL_I2C_Master_Receive+0x1e8>)
 80052a4:	400b      	ands	r3, r1
 80052a6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2220      	movs	r2, #32
 80052ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80052c0:	2300      	movs	r3, #0
 80052c2:	e000      	b.n	80052c6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80052c4:	2302      	movs	r3, #2
  }
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	80002400 	.word	0x80002400
 80052d4:	fe00e800 	.word	0xfe00e800

080052d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d103      	bne.n	80052f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2200      	movs	r2, #0
 80052f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b01      	cmp	r3, #1
 8005302:	d007      	beq.n	8005314 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	699a      	ldr	r2, [r3, #24]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 0201 	orr.w	r2, r2, #1
 8005312:	619a      	str	r2, [r3, #24]
  }
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	603b      	str	r3, [r7, #0]
 800532c:	4613      	mov	r3, r2
 800532e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005330:	e03b      	b.n	80053aa <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	6839      	ldr	r1, [r7, #0]
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f000 f962 	bl	8005600 <I2C_IsErrorOccurred>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e041      	b.n	80053ca <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800534c:	d02d      	beq.n	80053aa <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800534e:	f7fe fe4f 	bl	8003ff0 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	429a      	cmp	r2, r3
 800535c:	d302      	bcc.n	8005364 <I2C_WaitOnFlagUntilTimeout+0x44>
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d122      	bne.n	80053aa <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	699a      	ldr	r2, [r3, #24]
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	4013      	ands	r3, r2
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	429a      	cmp	r2, r3
 8005372:	bf0c      	ite	eq
 8005374:	2301      	moveq	r3, #1
 8005376:	2300      	movne	r3, #0
 8005378:	b2db      	uxtb	r3, r3
 800537a:	461a      	mov	r2, r3
 800537c:	79fb      	ldrb	r3, [r7, #7]
 800537e:	429a      	cmp	r2, r3
 8005380:	d113      	bne.n	80053aa <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005386:	f043 0220 	orr.w	r2, r3, #32
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2220      	movs	r2, #32
 8005392:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e00f      	b.n	80053ca <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	699a      	ldr	r2, [r3, #24]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	4013      	ands	r3, r2
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	bf0c      	ite	eq
 80053ba:	2301      	moveq	r3, #1
 80053bc:	2300      	movne	r3, #0
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	461a      	mov	r2, r3
 80053c2:	79fb      	ldrb	r3, [r7, #7]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d0b4      	beq.n	8005332 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b084      	sub	sp, #16
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	60f8      	str	r0, [r7, #12]
 80053da:	60b9      	str	r1, [r7, #8]
 80053dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053de:	e033      	b.n	8005448 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	68b9      	ldr	r1, [r7, #8]
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 f90b 	bl	8005600 <I2C_IsErrorOccurred>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e031      	b.n	8005458 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053fa:	d025      	beq.n	8005448 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053fc:	f7fe fdf8 	bl	8003ff0 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	429a      	cmp	r2, r3
 800540a:	d302      	bcc.n	8005412 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d11a      	bne.n	8005448 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b02      	cmp	r3, #2
 800541e:	d013      	beq.n	8005448 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005424:	f043 0220 	orr.w	r2, r3, #32
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2220      	movs	r2, #32
 8005430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e007      	b.n	8005458 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b02      	cmp	r3, #2
 8005454:	d1c4      	bne.n	80053e0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800546c:	e02f      	b.n	80054ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	68b9      	ldr	r1, [r7, #8]
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f000 f8c4 	bl	8005600 <I2C_IsErrorOccurred>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e02d      	b.n	80054de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005482:	f7fe fdb5 	bl	8003ff0 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	429a      	cmp	r2, r3
 8005490:	d302      	bcc.n	8005498 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d11a      	bne.n	80054ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	f003 0320 	and.w	r3, r3, #32
 80054a2:	2b20      	cmp	r3, #32
 80054a4:	d013      	beq.n	80054ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054aa:	f043 0220 	orr.w	r2, r3, #32
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2220      	movs	r2, #32
 80054b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e007      	b.n	80054de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	f003 0320 	and.w	r3, r3, #32
 80054d8:	2b20      	cmp	r3, #32
 80054da:	d1c8      	bne.n	800546e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
	...

080054e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054f4:	2300      	movs	r3, #0
 80054f6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80054f8:	e071      	b.n	80055de <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	68b9      	ldr	r1, [r7, #8]
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 f87e 	bl	8005600 <I2C_IsErrorOccurred>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	f003 0320 	and.w	r3, r3, #32
 8005518:	2b20      	cmp	r3, #32
 800551a:	d13b      	bne.n	8005594 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800551c:	7dfb      	ldrb	r3, [r7, #23]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d138      	bne.n	8005594 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	f003 0304 	and.w	r3, r3, #4
 800552c:	2b04      	cmp	r3, #4
 800552e:	d105      	bne.n	800553c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8005538:	2300      	movs	r3, #0
 800553a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	f003 0310 	and.w	r3, r3, #16
 8005546:	2b10      	cmp	r3, #16
 8005548:	d121      	bne.n	800558e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2210      	movs	r2, #16
 8005550:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2204      	movs	r2, #4
 8005556:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2220      	movs	r2, #32
 800555e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6859      	ldr	r1, [r3, #4]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	4b24      	ldr	r3, [pc, #144]	@ (80055fc <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800556c:	400b      	ands	r3, r1
 800556e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2220      	movs	r2, #32
 8005574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	75fb      	strb	r3, [r7, #23]
 800558c:	e002      	b.n	8005594 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8005594:	f7fe fd2c 	bl	8003ff0 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	68ba      	ldr	r2, [r7, #8]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d302      	bcc.n	80055aa <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d119      	bne.n	80055de <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80055aa:	7dfb      	ldrb	r3, [r7, #23]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d116      	bne.n	80055de <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	f003 0304 	and.w	r3, r3, #4
 80055ba:	2b04      	cmp	r3, #4
 80055bc:	d00f      	beq.n	80055de <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c2:	f043 0220 	orr.w	r2, r3, #32
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2220      	movs	r2, #32
 80055ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	f003 0304 	and.w	r3, r3, #4
 80055e8:	2b04      	cmp	r3, #4
 80055ea:	d002      	beq.n	80055f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80055ec:	7dfb      	ldrb	r3, [r7, #23]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d083      	beq.n	80054fa <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80055f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3718      	adds	r7, #24
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	fe00e800 	.word	0xfe00e800

08005600 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b08a      	sub	sp, #40	@ 0x28
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800560c:	2300      	movs	r3, #0
 800560e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800561a:	2300      	movs	r3, #0
 800561c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	f003 0310 	and.w	r3, r3, #16
 8005628:	2b00      	cmp	r3, #0
 800562a:	d068      	beq.n	80056fe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2210      	movs	r2, #16
 8005632:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005634:	e049      	b.n	80056ca <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800563c:	d045      	beq.n	80056ca <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800563e:	f7fe fcd7 	bl	8003ff0 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	429a      	cmp	r2, r3
 800564c:	d302      	bcc.n	8005654 <I2C_IsErrorOccurred+0x54>
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d13a      	bne.n	80056ca <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800565e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005666:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005672:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005676:	d121      	bne.n	80056bc <I2C_IsErrorOccurred+0xbc>
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800567e:	d01d      	beq.n	80056bc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005680:	7cfb      	ldrb	r3, [r7, #19]
 8005682:	2b20      	cmp	r3, #32
 8005684:	d01a      	beq.n	80056bc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005694:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005696:	f7fe fcab 	bl	8003ff0 <HAL_GetTick>
 800569a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800569c:	e00e      	b.n	80056bc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800569e:	f7fe fca7 	bl	8003ff0 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b19      	cmp	r3, #25
 80056aa:	d907      	bls.n	80056bc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80056ac:	6a3b      	ldr	r3, [r7, #32]
 80056ae:	f043 0320 	orr.w	r3, r3, #32
 80056b2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80056ba:	e006      	b.n	80056ca <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	f003 0320 	and.w	r3, r3, #32
 80056c6:	2b20      	cmp	r3, #32
 80056c8:	d1e9      	bne.n	800569e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	f003 0320 	and.w	r3, r3, #32
 80056d4:	2b20      	cmp	r3, #32
 80056d6:	d003      	beq.n	80056e0 <I2C_IsErrorOccurred+0xe0>
 80056d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d0aa      	beq.n	8005636 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80056e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d103      	bne.n	80056f0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2220      	movs	r2, #32
 80056ee:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	f043 0304 	orr.w	r3, r3, #4
 80056f6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00b      	beq.n	8005728 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005710:	6a3b      	ldr	r3, [r7, #32]
 8005712:	f043 0301 	orr.w	r3, r3, #1
 8005716:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005720:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00b      	beq.n	800574a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005732:	6a3b      	ldr	r3, [r7, #32]
 8005734:	f043 0308 	orr.w	r3, r3, #8
 8005738:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005742:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00b      	beq.n	800576c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	f043 0302 	orr.w	r3, r3, #2
 800575a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005764:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800576c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005770:	2b00      	cmp	r3, #0
 8005772:	d01c      	beq.n	80057ae <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f7ff fdaf 	bl	80052d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6859      	ldr	r1, [r3, #4]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	4b0d      	ldr	r3, [pc, #52]	@ (80057bc <I2C_IsErrorOccurred+0x1bc>)
 8005786:	400b      	ands	r3, r1
 8005788:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	431a      	orrs	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2220      	movs	r2, #32
 800579a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80057ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3728      	adds	r7, #40	@ 0x28
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	fe00e800 	.word	0xfe00e800

080057c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	607b      	str	r3, [r7, #4]
 80057ca:	460b      	mov	r3, r1
 80057cc:	817b      	strh	r3, [r7, #10]
 80057ce:	4613      	mov	r3, r2
 80057d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057d2:	897b      	ldrh	r3, [r7, #10]
 80057d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80057d8:	7a7b      	ldrb	r3, [r7, #9]
 80057da:	041b      	lsls	r3, r3, #16
 80057dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057e0:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057e6:	6a3b      	ldr	r3, [r7, #32]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80057ee:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	0d5b      	lsrs	r3, r3, #21
 80057fa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80057fe:	4b08      	ldr	r3, [pc, #32]	@ (8005820 <I2C_TransferConfig+0x60>)
 8005800:	430b      	orrs	r3, r1
 8005802:	43db      	mvns	r3, r3
 8005804:	ea02 0103 	and.w	r1, r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	430a      	orrs	r2, r1
 8005810:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005812:	bf00      	nop
 8005814:	371c      	adds	r7, #28
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	03ff63ff 	.word	0x03ff63ff

08005824 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b20      	cmp	r3, #32
 8005838:	d138      	bne.n	80058ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005840:	2b01      	cmp	r3, #1
 8005842:	d101      	bne.n	8005848 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005844:	2302      	movs	r3, #2
 8005846:	e032      	b.n	80058ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2224      	movs	r2, #36	@ 0x24
 8005854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f022 0201 	bic.w	r2, r2, #1
 8005866:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005876:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6819      	ldr	r1, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	683a      	ldr	r2, [r7, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f042 0201 	orr.w	r2, r2, #1
 8005896:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2220      	movs	r2, #32
 800589c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80058a8:	2300      	movs	r3, #0
 80058aa:	e000      	b.n	80058ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80058ac:	2302      	movs	r3, #2
  }
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b085      	sub	sp, #20
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
 80058c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b20      	cmp	r3, #32
 80058ce:	d139      	bne.n	8005944 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d101      	bne.n	80058de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80058da:	2302      	movs	r3, #2
 80058dc:	e033      	b.n	8005946 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2224      	movs	r2, #36	@ 0x24
 80058ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 0201 	bic.w	r2, r2, #1
 80058fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800590c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	021b      	lsls	r3, r3, #8
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	4313      	orrs	r3, r2
 8005916:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f042 0201 	orr.w	r2, r2, #1
 800592e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2220      	movs	r2, #32
 8005934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005940:	2300      	movs	r3, #0
 8005942:	e000      	b.n	8005946 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005944:	2302      	movs	r3, #2
  }
}
 8005946:	4618      	mov	r0, r3
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
	...

08005954 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005954:	b480      	push	{r7}
 8005956:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005958:	4b05      	ldr	r3, [pc, #20]	@ (8005970 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a04      	ldr	r2, [pc, #16]	@ (8005970 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800595e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005962:	6013      	str	r3, [r2, #0]
}
 8005964:	bf00      	nop
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	40007000 	.word	0x40007000

08005974 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800597a:	2300      	movs	r3, #0
 800597c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800597e:	4b23      	ldr	r3, [pc, #140]	@ (8005a0c <HAL_PWREx_EnableOverDrive+0x98>)
 8005980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005982:	4a22      	ldr	r2, [pc, #136]	@ (8005a0c <HAL_PWREx_EnableOverDrive+0x98>)
 8005984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005988:	6413      	str	r3, [r2, #64]	@ 0x40
 800598a:	4b20      	ldr	r3, [pc, #128]	@ (8005a0c <HAL_PWREx_EnableOverDrive+0x98>)
 800598c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800598e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005992:	603b      	str	r3, [r7, #0]
 8005994:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005996:	4b1e      	ldr	r3, [pc, #120]	@ (8005a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a1d      	ldr	r2, [pc, #116]	@ (8005a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 800599c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059a0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80059a2:	f7fe fb25 	bl	8003ff0 <HAL_GetTick>
 80059a6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80059a8:	e009      	b.n	80059be <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80059aa:	f7fe fb21 	bl	8003ff0 <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80059b8:	d901      	bls.n	80059be <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e022      	b.n	8005a04 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80059be:	4b14      	ldr	r3, [pc, #80]	@ (8005a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059ca:	d1ee      	bne.n	80059aa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80059cc:	4b10      	ldr	r3, [pc, #64]	@ (8005a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a0f      	ldr	r2, [pc, #60]	@ (8005a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 80059d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80059d8:	f7fe fb0a 	bl	8003ff0 <HAL_GetTick>
 80059dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80059de:	e009      	b.n	80059f4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80059e0:	f7fe fb06 	bl	8003ff0 <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80059ee:	d901      	bls.n	80059f4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e007      	b.n	8005a04 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80059f4:	4b06      	ldr	r3, [pc, #24]	@ (8005a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a00:	d1ee      	bne.n	80059e0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3708      	adds	r7, #8
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	40023800 	.word	0x40023800
 8005a10:	40007000 	.word	0x40007000

08005a14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b086      	sub	sp, #24
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e29b      	b.n	8005f62 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f000 8087 	beq.w	8005b46 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a38:	4b96      	ldr	r3, [pc, #600]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f003 030c 	and.w	r3, r3, #12
 8005a40:	2b04      	cmp	r3, #4
 8005a42:	d00c      	beq.n	8005a5e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a44:	4b93      	ldr	r3, [pc, #588]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f003 030c 	and.w	r3, r3, #12
 8005a4c:	2b08      	cmp	r3, #8
 8005a4e:	d112      	bne.n	8005a76 <HAL_RCC_OscConfig+0x62>
 8005a50:	4b90      	ldr	r3, [pc, #576]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a5c:	d10b      	bne.n	8005a76 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a5e:	4b8d      	ldr	r3, [pc, #564]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d06c      	beq.n	8005b44 <HAL_RCC_OscConfig+0x130>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d168      	bne.n	8005b44 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e275      	b.n	8005f62 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a7e:	d106      	bne.n	8005a8e <HAL_RCC_OscConfig+0x7a>
 8005a80:	4b84      	ldr	r3, [pc, #528]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a83      	ldr	r2, [pc, #524]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005a86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a8a:	6013      	str	r3, [r2, #0]
 8005a8c:	e02e      	b.n	8005aec <HAL_RCC_OscConfig+0xd8>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10c      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x9c>
 8005a96:	4b7f      	ldr	r3, [pc, #508]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a7e      	ldr	r2, [pc, #504]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005a9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005aa0:	6013      	str	r3, [r2, #0]
 8005aa2:	4b7c      	ldr	r3, [pc, #496]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a7b      	ldr	r2, [pc, #492]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005aa8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005aac:	6013      	str	r3, [r2, #0]
 8005aae:	e01d      	b.n	8005aec <HAL_RCC_OscConfig+0xd8>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ab8:	d10c      	bne.n	8005ad4 <HAL_RCC_OscConfig+0xc0>
 8005aba:	4b76      	ldr	r3, [pc, #472]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a75      	ldr	r2, [pc, #468]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005ac0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ac4:	6013      	str	r3, [r2, #0]
 8005ac6:	4b73      	ldr	r3, [pc, #460]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a72      	ldr	r2, [pc, #456]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005acc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ad0:	6013      	str	r3, [r2, #0]
 8005ad2:	e00b      	b.n	8005aec <HAL_RCC_OscConfig+0xd8>
 8005ad4:	4b6f      	ldr	r3, [pc, #444]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a6e      	ldr	r2, [pc, #440]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005ada:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ade:	6013      	str	r3, [r2, #0]
 8005ae0:	4b6c      	ldr	r3, [pc, #432]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a6b      	ldr	r2, [pc, #428]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005ae6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005aea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d013      	beq.n	8005b1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af4:	f7fe fa7c 	bl	8003ff0 <HAL_GetTick>
 8005af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005afa:	e008      	b.n	8005b0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005afc:	f7fe fa78 	bl	8003ff0 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	2b64      	cmp	r3, #100	@ 0x64
 8005b08:	d901      	bls.n	8005b0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e229      	b.n	8005f62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b0e:	4b61      	ldr	r3, [pc, #388]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0f0      	beq.n	8005afc <HAL_RCC_OscConfig+0xe8>
 8005b1a:	e014      	b.n	8005b46 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b1c:	f7fe fa68 	bl	8003ff0 <HAL_GetTick>
 8005b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b22:	e008      	b.n	8005b36 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b24:	f7fe fa64 	bl	8003ff0 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	2b64      	cmp	r3, #100	@ 0x64
 8005b30:	d901      	bls.n	8005b36 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e215      	b.n	8005f62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b36:	4b57      	ldr	r3, [pc, #348]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1f0      	bne.n	8005b24 <HAL_RCC_OscConfig+0x110>
 8005b42:	e000      	b.n	8005b46 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d069      	beq.n	8005c26 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b52:	4b50      	ldr	r3, [pc, #320]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f003 030c 	and.w	r3, r3, #12
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00b      	beq.n	8005b76 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b5e:	4b4d      	ldr	r3, [pc, #308]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f003 030c 	and.w	r3, r3, #12
 8005b66:	2b08      	cmp	r3, #8
 8005b68:	d11c      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x190>
 8005b6a:	4b4a      	ldr	r3, [pc, #296]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d116      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b76:	4b47      	ldr	r3, [pc, #284]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d005      	beq.n	8005b8e <HAL_RCC_OscConfig+0x17a>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d001      	beq.n	8005b8e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e1e9      	b.n	8005f62 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b8e:	4b41      	ldr	r3, [pc, #260]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	00db      	lsls	r3, r3, #3
 8005b9c:	493d      	ldr	r1, [pc, #244]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ba2:	e040      	b.n	8005c26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d023      	beq.n	8005bf4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bac:	4b39      	ldr	r3, [pc, #228]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a38      	ldr	r2, [pc, #224]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005bb2:	f043 0301 	orr.w	r3, r3, #1
 8005bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb8:	f7fe fa1a 	bl	8003ff0 <HAL_GetTick>
 8005bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bbe:	e008      	b.n	8005bd2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bc0:	f7fe fa16 	bl	8003ff0 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d901      	bls.n	8005bd2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e1c7      	b.n	8005f62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bd2:	4b30      	ldr	r3, [pc, #192]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0302 	and.w	r3, r3, #2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d0f0      	beq.n	8005bc0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bde:	4b2d      	ldr	r3, [pc, #180]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	00db      	lsls	r3, r3, #3
 8005bec:	4929      	ldr	r1, [pc, #164]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	600b      	str	r3, [r1, #0]
 8005bf2:	e018      	b.n	8005c26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bf4:	4b27      	ldr	r3, [pc, #156]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a26      	ldr	r2, [pc, #152]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005bfa:	f023 0301 	bic.w	r3, r3, #1
 8005bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c00:	f7fe f9f6 	bl	8003ff0 <HAL_GetTick>
 8005c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c06:	e008      	b.n	8005c1a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c08:	f7fe f9f2 	bl	8003ff0 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e1a3      	b.n	8005f62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c1a:	4b1e      	ldr	r3, [pc, #120]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1f0      	bne.n	8005c08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0308 	and.w	r3, r3, #8
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d038      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d019      	beq.n	8005c6e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c3a:	4b16      	ldr	r3, [pc, #88]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005c3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c3e:	4a15      	ldr	r2, [pc, #84]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005c40:	f043 0301 	orr.w	r3, r3, #1
 8005c44:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c46:	f7fe f9d3 	bl	8003ff0 <HAL_GetTick>
 8005c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c4c:	e008      	b.n	8005c60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c4e:	f7fe f9cf 	bl	8003ff0 <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d901      	bls.n	8005c60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e180      	b.n	8005f62 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c60:	4b0c      	ldr	r3, [pc, #48]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005c62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d0f0      	beq.n	8005c4e <HAL_RCC_OscConfig+0x23a>
 8005c6c:	e01a      	b.n	8005ca4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c6e:	4b09      	ldr	r3, [pc, #36]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005c70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c72:	4a08      	ldr	r2, [pc, #32]	@ (8005c94 <HAL_RCC_OscConfig+0x280>)
 8005c74:	f023 0301 	bic.w	r3, r3, #1
 8005c78:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c7a:	f7fe f9b9 	bl	8003ff0 <HAL_GetTick>
 8005c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c80:	e00a      	b.n	8005c98 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c82:	f7fe f9b5 	bl	8003ff0 <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d903      	bls.n	8005c98 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e166      	b.n	8005f62 <HAL_RCC_OscConfig+0x54e>
 8005c94:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c98:	4b92      	ldr	r3, [pc, #584]	@ (8005ee4 <HAL_RCC_OscConfig+0x4d0>)
 8005c9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1ee      	bne.n	8005c82 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0304 	and.w	r3, r3, #4
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 80a4 	beq.w	8005dfa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cb2:	4b8c      	ldr	r3, [pc, #560]	@ (8005ee4 <HAL_RCC_OscConfig+0x4d0>)
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10d      	bne.n	8005cda <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cbe:	4b89      	ldr	r3, [pc, #548]	@ (8005ee4 <HAL_RCC_OscConfig+0x4d0>)
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc2:	4a88      	ldr	r2, [pc, #544]	@ (8005ee4 <HAL_RCC_OscConfig+0x4d0>)
 8005cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005cca:	4b86      	ldr	r3, [pc, #536]	@ (8005ee4 <HAL_RCC_OscConfig+0x4d0>)
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cd2:	60bb      	str	r3, [r7, #8]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cda:	4b83      	ldr	r3, [pc, #524]	@ (8005ee8 <HAL_RCC_OscConfig+0x4d4>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d118      	bne.n	8005d18 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005ce6:	4b80      	ldr	r3, [pc, #512]	@ (8005ee8 <HAL_RCC_OscConfig+0x4d4>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a7f      	ldr	r2, [pc, #508]	@ (8005ee8 <HAL_RCC_OscConfig+0x4d4>)
 8005cec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cf2:	f7fe f97d 	bl	8003ff0 <HAL_GetTick>
 8005cf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cf8:	e008      	b.n	8005d0c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cfa:	f7fe f979 	bl	8003ff0 <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	2b64      	cmp	r3, #100	@ 0x64
 8005d06:	d901      	bls.n	8005d0c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e12a      	b.n	8005f62 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d0c:	4b76      	ldr	r3, [pc, #472]	@ (8005ee8 <HAL_RCC_OscConfig+0x4d4>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d0f0      	beq.n	8005cfa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d106      	bne.n	8005d2e <HAL_RCC_OscConfig+0x31a>
 8005d20:	4b70      	ldr	r3, [pc, #448]	@ (8005ee4 <HAL_RCC_OscConfig+0x4d0>)
 8005d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d24:	4a6f      	ldr	r2, [pc, #444]	@ (8005ee4 <HAL_RCC_OscConfig+0x4d0>)
 8005d26:	f043 0301 	orr.w	r3, r3, #1
 8005d2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d2c:	e02d      	b.n	8005d8a <HAL_RCC_OscConfig+0x376>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10c      	bne.n	8005d50 <HAL_RCC_OscConfig+0x33c>
 8005d36:	4b6b      	ldr	r3, [pc, #428]	@ (8005ee4 <HAL_RCC_OscConfig+0x4d0>)
 8005d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d3a:	4a6a      	ldr	r2, [pc, #424]	@ (8005ee4 <HAL_RCC_OscConfig+0x4d0>)
 8005d3c:	f023 0301 	bic.w	r3, r3, #1
 8005d40:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d42:	4b68      	ldr	r3, [pc, #416]	@ (8005ee4 <HAL_RCC_OscConfig+0x4d0>)
 8005d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d46:	4a67      	ldr	r2, [pc, #412]	@ (8005ee4 <HAL_RCC_OscConfig+0x4d0>)
 8005d48:	f023 0304 	bic.w	r3, r3, #4
 8005d4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d4e:	e01c      	b.n	8005d8a <HAL_RCC_OscConfig+0x376>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	2b05      	cmp	r3, #5
 8005d56:	d10c      	bne.n	8005d72 <HAL_RCC_OscConfig+0x35e>
 8005d58:	4b62      	ldr	r3, [pc, #392]	@ (8005ee4 <HAL_RCC_OscConfig+0x4d0>)
 8005d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d5c:	4a61      	ldr	r2, [pc, #388]	@ (8005ee4 <HAL_RCC_OscConfig+0x4d0>)
 8005d5e:	f043 0304 	orr.w	r3, r3, #4
 8005d62:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d64:	4b5f      	ldr	r3, [pc, #380]	@ (8005ee4 <HAL_RCC_OscConfig+0x4d0>)
 8005d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d68:	4a5e      	ldr	r2, [pc, #376]	@ (8005ee4 <HAL_RCC_OscConfig+0x4d0>)
 8005d6a:	f043 0301 	orr.w	r3, r3, #1
 8005d6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d70:	e00b      	b.n	8005d8a <HAL_RCC_OscConfig+0x376>
 8005d72:	4b5c      	ldr	r3, [pc, #368]	@ (8005ee4 <HAL_RCC_OscConfig+0x4d0>)
 8005d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d76:	4a5b      	ldr	r2, [pc, #364]	@ (8005ee4 <HAL_RCC_OscConfig+0x4d0>)
 8005d78:	f023 0301 	bic.w	r3, r3, #1
 8005d7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d7e:	4b59      	ldr	r3, [pc, #356]	@ (8005ee4 <HAL_RCC_OscConfig+0x4d0>)
 8005d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d82:	4a58      	ldr	r2, [pc, #352]	@ (8005ee4 <HAL_RCC_OscConfig+0x4d0>)
 8005d84:	f023 0304 	bic.w	r3, r3, #4
 8005d88:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d015      	beq.n	8005dbe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d92:	f7fe f92d 	bl	8003ff0 <HAL_GetTick>
 8005d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d98:	e00a      	b.n	8005db0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d9a:	f7fe f929 	bl	8003ff0 <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d901      	bls.n	8005db0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e0d8      	b.n	8005f62 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005db0:	4b4c      	ldr	r3, [pc, #304]	@ (8005ee4 <HAL_RCC_OscConfig+0x4d0>)
 8005db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d0ee      	beq.n	8005d9a <HAL_RCC_OscConfig+0x386>
 8005dbc:	e014      	b.n	8005de8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dbe:	f7fe f917 	bl	8003ff0 <HAL_GetTick>
 8005dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dc4:	e00a      	b.n	8005ddc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dc6:	f7fe f913 	bl	8003ff0 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d901      	bls.n	8005ddc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e0c2      	b.n	8005f62 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ddc:	4b41      	ldr	r3, [pc, #260]	@ (8005ee4 <HAL_RCC_OscConfig+0x4d0>)
 8005dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005de0:	f003 0302 	and.w	r3, r3, #2
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1ee      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005de8:	7dfb      	ldrb	r3, [r7, #23]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d105      	bne.n	8005dfa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dee:	4b3d      	ldr	r3, [pc, #244]	@ (8005ee4 <HAL_RCC_OscConfig+0x4d0>)
 8005df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df2:	4a3c      	ldr	r2, [pc, #240]	@ (8005ee4 <HAL_RCC_OscConfig+0x4d0>)
 8005df4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005df8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f000 80ae 	beq.w	8005f60 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e04:	4b37      	ldr	r3, [pc, #220]	@ (8005ee4 <HAL_RCC_OscConfig+0x4d0>)
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f003 030c 	and.w	r3, r3, #12
 8005e0c:	2b08      	cmp	r3, #8
 8005e0e:	d06d      	beq.n	8005eec <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d14b      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e18:	4b32      	ldr	r3, [pc, #200]	@ (8005ee4 <HAL_RCC_OscConfig+0x4d0>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a31      	ldr	r2, [pc, #196]	@ (8005ee4 <HAL_RCC_OscConfig+0x4d0>)
 8005e1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e24:	f7fe f8e4 	bl	8003ff0 <HAL_GetTick>
 8005e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e2a:	e008      	b.n	8005e3e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e2c:	f7fe f8e0 	bl	8003ff0 <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d901      	bls.n	8005e3e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e091      	b.n	8005f62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e3e:	4b29      	ldr	r3, [pc, #164]	@ (8005ee4 <HAL_RCC_OscConfig+0x4d0>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1f0      	bne.n	8005e2c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	69da      	ldr	r2, [r3, #28]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	431a      	orrs	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e58:	019b      	lsls	r3, r3, #6
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e60:	085b      	lsrs	r3, r3, #1
 8005e62:	3b01      	subs	r3, #1
 8005e64:	041b      	lsls	r3, r3, #16
 8005e66:	431a      	orrs	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e6c:	061b      	lsls	r3, r3, #24
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e74:	071b      	lsls	r3, r3, #28
 8005e76:	491b      	ldr	r1, [pc, #108]	@ (8005ee4 <HAL_RCC_OscConfig+0x4d0>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e7c:	4b19      	ldr	r3, [pc, #100]	@ (8005ee4 <HAL_RCC_OscConfig+0x4d0>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a18      	ldr	r2, [pc, #96]	@ (8005ee4 <HAL_RCC_OscConfig+0x4d0>)
 8005e82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e88:	f7fe f8b2 	bl	8003ff0 <HAL_GetTick>
 8005e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e8e:	e008      	b.n	8005ea2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e90:	f7fe f8ae 	bl	8003ff0 <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e05f      	b.n	8005f62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ea2:	4b10      	ldr	r3, [pc, #64]	@ (8005ee4 <HAL_RCC_OscConfig+0x4d0>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d0f0      	beq.n	8005e90 <HAL_RCC_OscConfig+0x47c>
 8005eae:	e057      	b.n	8005f60 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8005ee4 <HAL_RCC_OscConfig+0x4d0>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a0b      	ldr	r2, [pc, #44]	@ (8005ee4 <HAL_RCC_OscConfig+0x4d0>)
 8005eb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ebc:	f7fe f898 	bl	8003ff0 <HAL_GetTick>
 8005ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ec2:	e008      	b.n	8005ed6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ec4:	f7fe f894 	bl	8003ff0 <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d901      	bls.n	8005ed6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e045      	b.n	8005f62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ed6:	4b03      	ldr	r3, [pc, #12]	@ (8005ee4 <HAL_RCC_OscConfig+0x4d0>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1f0      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x4b0>
 8005ee2:	e03d      	b.n	8005f60 <HAL_RCC_OscConfig+0x54c>
 8005ee4:	40023800 	.word	0x40023800
 8005ee8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005eec:	4b1f      	ldr	r3, [pc, #124]	@ (8005f6c <HAL_RCC_OscConfig+0x558>)
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d030      	beq.n	8005f5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d129      	bne.n	8005f5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d122      	bne.n	8005f5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005f22:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d119      	bne.n	8005f5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f32:	085b      	lsrs	r3, r3, #1
 8005f34:	3b01      	subs	r3, #1
 8005f36:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d10f      	bne.n	8005f5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f46:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d107      	bne.n	8005f5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f56:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d001      	beq.n	8005f60 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e000      	b.n	8005f62 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3718      	adds	r7, #24
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	40023800 	.word	0x40023800

08005f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d101      	bne.n	8005f88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e0d0      	b.n	800612a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f88:	4b6a      	ldr	r3, [pc, #424]	@ (8006134 <HAL_RCC_ClockConfig+0x1c4>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 030f 	and.w	r3, r3, #15
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d910      	bls.n	8005fb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f96:	4b67      	ldr	r3, [pc, #412]	@ (8006134 <HAL_RCC_ClockConfig+0x1c4>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f023 020f 	bic.w	r2, r3, #15
 8005f9e:	4965      	ldr	r1, [pc, #404]	@ (8006134 <HAL_RCC_ClockConfig+0x1c4>)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fa6:	4b63      	ldr	r3, [pc, #396]	@ (8006134 <HAL_RCC_ClockConfig+0x1c4>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 030f 	and.w	r3, r3, #15
 8005fae:	683a      	ldr	r2, [r7, #0]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d001      	beq.n	8005fb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e0b8      	b.n	800612a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0302 	and.w	r3, r3, #2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d020      	beq.n	8006006 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0304 	and.w	r3, r3, #4
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d005      	beq.n	8005fdc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fd0:	4b59      	ldr	r3, [pc, #356]	@ (8006138 <HAL_RCC_ClockConfig+0x1c8>)
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	4a58      	ldr	r2, [pc, #352]	@ (8006138 <HAL_RCC_ClockConfig+0x1c8>)
 8005fd6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005fda:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0308 	and.w	r3, r3, #8
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d005      	beq.n	8005ff4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fe8:	4b53      	ldr	r3, [pc, #332]	@ (8006138 <HAL_RCC_ClockConfig+0x1c8>)
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	4a52      	ldr	r2, [pc, #328]	@ (8006138 <HAL_RCC_ClockConfig+0x1c8>)
 8005fee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005ff2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ff4:	4b50      	ldr	r3, [pc, #320]	@ (8006138 <HAL_RCC_ClockConfig+0x1c8>)
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	494d      	ldr	r1, [pc, #308]	@ (8006138 <HAL_RCC_ClockConfig+0x1c8>)
 8006002:	4313      	orrs	r3, r2
 8006004:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	2b00      	cmp	r3, #0
 8006010:	d040      	beq.n	8006094 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d107      	bne.n	800602a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800601a:	4b47      	ldr	r3, [pc, #284]	@ (8006138 <HAL_RCC_ClockConfig+0x1c8>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d115      	bne.n	8006052 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e07f      	b.n	800612a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	2b02      	cmp	r3, #2
 8006030:	d107      	bne.n	8006042 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006032:	4b41      	ldr	r3, [pc, #260]	@ (8006138 <HAL_RCC_ClockConfig+0x1c8>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d109      	bne.n	8006052 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e073      	b.n	800612a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006042:	4b3d      	ldr	r3, [pc, #244]	@ (8006138 <HAL_RCC_ClockConfig+0x1c8>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0302 	and.w	r3, r3, #2
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e06b      	b.n	800612a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006052:	4b39      	ldr	r3, [pc, #228]	@ (8006138 <HAL_RCC_ClockConfig+0x1c8>)
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f023 0203 	bic.w	r2, r3, #3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	4936      	ldr	r1, [pc, #216]	@ (8006138 <HAL_RCC_ClockConfig+0x1c8>)
 8006060:	4313      	orrs	r3, r2
 8006062:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006064:	f7fd ffc4 	bl	8003ff0 <HAL_GetTick>
 8006068:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800606a:	e00a      	b.n	8006082 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800606c:	f7fd ffc0 	bl	8003ff0 <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	f241 3288 	movw	r2, #5000	@ 0x1388
 800607a:	4293      	cmp	r3, r2
 800607c:	d901      	bls.n	8006082 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e053      	b.n	800612a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006082:	4b2d      	ldr	r3, [pc, #180]	@ (8006138 <HAL_RCC_ClockConfig+0x1c8>)
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f003 020c 	and.w	r2, r3, #12
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	429a      	cmp	r2, r3
 8006092:	d1eb      	bne.n	800606c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006094:	4b27      	ldr	r3, [pc, #156]	@ (8006134 <HAL_RCC_ClockConfig+0x1c4>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 030f 	and.w	r3, r3, #15
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d210      	bcs.n	80060c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060a2:	4b24      	ldr	r3, [pc, #144]	@ (8006134 <HAL_RCC_ClockConfig+0x1c4>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f023 020f 	bic.w	r2, r3, #15
 80060aa:	4922      	ldr	r1, [pc, #136]	@ (8006134 <HAL_RCC_ClockConfig+0x1c4>)
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060b2:	4b20      	ldr	r3, [pc, #128]	@ (8006134 <HAL_RCC_ClockConfig+0x1c4>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 030f 	and.w	r3, r3, #15
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d001      	beq.n	80060c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e032      	b.n	800612a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0304 	and.w	r3, r3, #4
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d008      	beq.n	80060e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060d0:	4b19      	ldr	r3, [pc, #100]	@ (8006138 <HAL_RCC_ClockConfig+0x1c8>)
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	4916      	ldr	r1, [pc, #88]	@ (8006138 <HAL_RCC_ClockConfig+0x1c8>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0308 	and.w	r3, r3, #8
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d009      	beq.n	8006102 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80060ee:	4b12      	ldr	r3, [pc, #72]	@ (8006138 <HAL_RCC_ClockConfig+0x1c8>)
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	00db      	lsls	r3, r3, #3
 80060fc:	490e      	ldr	r1, [pc, #56]	@ (8006138 <HAL_RCC_ClockConfig+0x1c8>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006102:	f000 f821 	bl	8006148 <HAL_RCC_GetSysClockFreq>
 8006106:	4602      	mov	r2, r0
 8006108:	4b0b      	ldr	r3, [pc, #44]	@ (8006138 <HAL_RCC_ClockConfig+0x1c8>)
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	091b      	lsrs	r3, r3, #4
 800610e:	f003 030f 	and.w	r3, r3, #15
 8006112:	490a      	ldr	r1, [pc, #40]	@ (800613c <HAL_RCC_ClockConfig+0x1cc>)
 8006114:	5ccb      	ldrb	r3, [r1, r3]
 8006116:	fa22 f303 	lsr.w	r3, r2, r3
 800611a:	4a09      	ldr	r2, [pc, #36]	@ (8006140 <HAL_RCC_ClockConfig+0x1d0>)
 800611c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800611e:	4b09      	ldr	r3, [pc, #36]	@ (8006144 <HAL_RCC_ClockConfig+0x1d4>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4618      	mov	r0, r3
 8006124:	f7fd fcc6 	bl	8003ab4 <HAL_InitTick>

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	40023c00 	.word	0x40023c00
 8006138:	40023800 	.word	0x40023800
 800613c:	0801c594 	.word	0x0801c594
 8006140:	20000030 	.word	0x20000030
 8006144:	20000034 	.word	0x20000034

08006148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800614c:	b094      	sub	sp, #80	@ 0x50
 800614e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006150:	2300      	movs	r3, #0
 8006152:	647b      	str	r3, [r7, #68]	@ 0x44
 8006154:	2300      	movs	r3, #0
 8006156:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006158:	2300      	movs	r3, #0
 800615a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800615c:	2300      	movs	r3, #0
 800615e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006160:	4b79      	ldr	r3, [pc, #484]	@ (8006348 <HAL_RCC_GetSysClockFreq+0x200>)
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f003 030c 	and.w	r3, r3, #12
 8006168:	2b08      	cmp	r3, #8
 800616a:	d00d      	beq.n	8006188 <HAL_RCC_GetSysClockFreq+0x40>
 800616c:	2b08      	cmp	r3, #8
 800616e:	f200 80e1 	bhi.w	8006334 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006172:	2b00      	cmp	r3, #0
 8006174:	d002      	beq.n	800617c <HAL_RCC_GetSysClockFreq+0x34>
 8006176:	2b04      	cmp	r3, #4
 8006178:	d003      	beq.n	8006182 <HAL_RCC_GetSysClockFreq+0x3a>
 800617a:	e0db      	b.n	8006334 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800617c:	4b73      	ldr	r3, [pc, #460]	@ (800634c <HAL_RCC_GetSysClockFreq+0x204>)
 800617e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006180:	e0db      	b.n	800633a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006182:	4b73      	ldr	r3, [pc, #460]	@ (8006350 <HAL_RCC_GetSysClockFreq+0x208>)
 8006184:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006186:	e0d8      	b.n	800633a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006188:	4b6f      	ldr	r3, [pc, #444]	@ (8006348 <HAL_RCC_GetSysClockFreq+0x200>)
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006190:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006192:	4b6d      	ldr	r3, [pc, #436]	@ (8006348 <HAL_RCC_GetSysClockFreq+0x200>)
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d063      	beq.n	8006266 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800619e:	4b6a      	ldr	r3, [pc, #424]	@ (8006348 <HAL_RCC_GetSysClockFreq+0x200>)
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	099b      	lsrs	r3, r3, #6
 80061a4:	2200      	movs	r2, #0
 80061a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80061a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80061aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80061b2:	2300      	movs	r3, #0
 80061b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80061b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80061ba:	4622      	mov	r2, r4
 80061bc:	462b      	mov	r3, r5
 80061be:	f04f 0000 	mov.w	r0, #0
 80061c2:	f04f 0100 	mov.w	r1, #0
 80061c6:	0159      	lsls	r1, r3, #5
 80061c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061cc:	0150      	lsls	r0, r2, #5
 80061ce:	4602      	mov	r2, r0
 80061d0:	460b      	mov	r3, r1
 80061d2:	4621      	mov	r1, r4
 80061d4:	1a51      	subs	r1, r2, r1
 80061d6:	6139      	str	r1, [r7, #16]
 80061d8:	4629      	mov	r1, r5
 80061da:	eb63 0301 	sbc.w	r3, r3, r1
 80061de:	617b      	str	r3, [r7, #20]
 80061e0:	f04f 0200 	mov.w	r2, #0
 80061e4:	f04f 0300 	mov.w	r3, #0
 80061e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061ec:	4659      	mov	r1, fp
 80061ee:	018b      	lsls	r3, r1, #6
 80061f0:	4651      	mov	r1, sl
 80061f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80061f6:	4651      	mov	r1, sl
 80061f8:	018a      	lsls	r2, r1, #6
 80061fa:	4651      	mov	r1, sl
 80061fc:	ebb2 0801 	subs.w	r8, r2, r1
 8006200:	4659      	mov	r1, fp
 8006202:	eb63 0901 	sbc.w	r9, r3, r1
 8006206:	f04f 0200 	mov.w	r2, #0
 800620a:	f04f 0300 	mov.w	r3, #0
 800620e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006212:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006216:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800621a:	4690      	mov	r8, r2
 800621c:	4699      	mov	r9, r3
 800621e:	4623      	mov	r3, r4
 8006220:	eb18 0303 	adds.w	r3, r8, r3
 8006224:	60bb      	str	r3, [r7, #8]
 8006226:	462b      	mov	r3, r5
 8006228:	eb49 0303 	adc.w	r3, r9, r3
 800622c:	60fb      	str	r3, [r7, #12]
 800622e:	f04f 0200 	mov.w	r2, #0
 8006232:	f04f 0300 	mov.w	r3, #0
 8006236:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800623a:	4629      	mov	r1, r5
 800623c:	024b      	lsls	r3, r1, #9
 800623e:	4621      	mov	r1, r4
 8006240:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006244:	4621      	mov	r1, r4
 8006246:	024a      	lsls	r2, r1, #9
 8006248:	4610      	mov	r0, r2
 800624a:	4619      	mov	r1, r3
 800624c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800624e:	2200      	movs	r2, #0
 8006250:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006252:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006254:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006258:	f7fa f8aa 	bl	80003b0 <__aeabi_uldivmod>
 800625c:	4602      	mov	r2, r0
 800625e:	460b      	mov	r3, r1
 8006260:	4613      	mov	r3, r2
 8006262:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006264:	e058      	b.n	8006318 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006266:	4b38      	ldr	r3, [pc, #224]	@ (8006348 <HAL_RCC_GetSysClockFreq+0x200>)
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	099b      	lsrs	r3, r3, #6
 800626c:	2200      	movs	r2, #0
 800626e:	4618      	mov	r0, r3
 8006270:	4611      	mov	r1, r2
 8006272:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006276:	623b      	str	r3, [r7, #32]
 8006278:	2300      	movs	r3, #0
 800627a:	627b      	str	r3, [r7, #36]	@ 0x24
 800627c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006280:	4642      	mov	r2, r8
 8006282:	464b      	mov	r3, r9
 8006284:	f04f 0000 	mov.w	r0, #0
 8006288:	f04f 0100 	mov.w	r1, #0
 800628c:	0159      	lsls	r1, r3, #5
 800628e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006292:	0150      	lsls	r0, r2, #5
 8006294:	4602      	mov	r2, r0
 8006296:	460b      	mov	r3, r1
 8006298:	4641      	mov	r1, r8
 800629a:	ebb2 0a01 	subs.w	sl, r2, r1
 800629e:	4649      	mov	r1, r9
 80062a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80062a4:	f04f 0200 	mov.w	r2, #0
 80062a8:	f04f 0300 	mov.w	r3, #0
 80062ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80062b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80062b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80062b8:	ebb2 040a 	subs.w	r4, r2, sl
 80062bc:	eb63 050b 	sbc.w	r5, r3, fp
 80062c0:	f04f 0200 	mov.w	r2, #0
 80062c4:	f04f 0300 	mov.w	r3, #0
 80062c8:	00eb      	lsls	r3, r5, #3
 80062ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062ce:	00e2      	lsls	r2, r4, #3
 80062d0:	4614      	mov	r4, r2
 80062d2:	461d      	mov	r5, r3
 80062d4:	4643      	mov	r3, r8
 80062d6:	18e3      	adds	r3, r4, r3
 80062d8:	603b      	str	r3, [r7, #0]
 80062da:	464b      	mov	r3, r9
 80062dc:	eb45 0303 	adc.w	r3, r5, r3
 80062e0:	607b      	str	r3, [r7, #4]
 80062e2:	f04f 0200 	mov.w	r2, #0
 80062e6:	f04f 0300 	mov.w	r3, #0
 80062ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80062ee:	4629      	mov	r1, r5
 80062f0:	028b      	lsls	r3, r1, #10
 80062f2:	4621      	mov	r1, r4
 80062f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80062f8:	4621      	mov	r1, r4
 80062fa:	028a      	lsls	r2, r1, #10
 80062fc:	4610      	mov	r0, r2
 80062fe:	4619      	mov	r1, r3
 8006300:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006302:	2200      	movs	r2, #0
 8006304:	61bb      	str	r3, [r7, #24]
 8006306:	61fa      	str	r2, [r7, #28]
 8006308:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800630c:	f7fa f850 	bl	80003b0 <__aeabi_uldivmod>
 8006310:	4602      	mov	r2, r0
 8006312:	460b      	mov	r3, r1
 8006314:	4613      	mov	r3, r2
 8006316:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006318:	4b0b      	ldr	r3, [pc, #44]	@ (8006348 <HAL_RCC_GetSysClockFreq+0x200>)
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	0c1b      	lsrs	r3, r3, #16
 800631e:	f003 0303 	and.w	r3, r3, #3
 8006322:	3301      	adds	r3, #1
 8006324:	005b      	lsls	r3, r3, #1
 8006326:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006328:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800632a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800632c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006330:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006332:	e002      	b.n	800633a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006334:	4b05      	ldr	r3, [pc, #20]	@ (800634c <HAL_RCC_GetSysClockFreq+0x204>)
 8006336:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006338:	bf00      	nop
    }
  }
  return sysclockfreq;
 800633a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800633c:	4618      	mov	r0, r3
 800633e:	3750      	adds	r7, #80	@ 0x50
 8006340:	46bd      	mov	sp, r7
 8006342:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006346:	bf00      	nop
 8006348:	40023800 	.word	0x40023800
 800634c:	00f42400 	.word	0x00f42400
 8006350:	007a1200 	.word	0x007a1200

08006354 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006354:	b480      	push	{r7}
 8006356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006358:	4b03      	ldr	r3, [pc, #12]	@ (8006368 <HAL_RCC_GetHCLKFreq+0x14>)
 800635a:	681b      	ldr	r3, [r3, #0]
}
 800635c:	4618      	mov	r0, r3
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	20000030 	.word	0x20000030

0800636c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006370:	f7ff fff0 	bl	8006354 <HAL_RCC_GetHCLKFreq>
 8006374:	4602      	mov	r2, r0
 8006376:	4b05      	ldr	r3, [pc, #20]	@ (800638c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	0a9b      	lsrs	r3, r3, #10
 800637c:	f003 0307 	and.w	r3, r3, #7
 8006380:	4903      	ldr	r1, [pc, #12]	@ (8006390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006382:	5ccb      	ldrb	r3, [r1, r3]
 8006384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006388:	4618      	mov	r0, r3
 800638a:	bd80      	pop	{r7, pc}
 800638c:	40023800 	.word	0x40023800
 8006390:	0801c5a4 	.word	0x0801c5a4

08006394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006398:	f7ff ffdc 	bl	8006354 <HAL_RCC_GetHCLKFreq>
 800639c:	4602      	mov	r2, r0
 800639e:	4b05      	ldr	r3, [pc, #20]	@ (80063b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	0b5b      	lsrs	r3, r3, #13
 80063a4:	f003 0307 	and.w	r3, r3, #7
 80063a8:	4903      	ldr	r1, [pc, #12]	@ (80063b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063aa:	5ccb      	ldrb	r3, [r1, r3]
 80063ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	40023800 	.word	0x40023800
 80063b8:	0801c5a4 	.word	0x0801c5a4

080063bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	220f      	movs	r2, #15
 80063ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80063cc:	4b12      	ldr	r3, [pc, #72]	@ (8006418 <HAL_RCC_GetClockConfig+0x5c>)
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f003 0203 	and.w	r2, r3, #3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80063d8:	4b0f      	ldr	r3, [pc, #60]	@ (8006418 <HAL_RCC_GetClockConfig+0x5c>)
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80063e4:	4b0c      	ldr	r3, [pc, #48]	@ (8006418 <HAL_RCC_GetClockConfig+0x5c>)
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80063f0:	4b09      	ldr	r3, [pc, #36]	@ (8006418 <HAL_RCC_GetClockConfig+0x5c>)
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	08db      	lsrs	r3, r3, #3
 80063f6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80063fe:	4b07      	ldr	r3, [pc, #28]	@ (800641c <HAL_RCC_GetClockConfig+0x60>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 020f 	and.w	r2, r3, #15
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	601a      	str	r2, [r3, #0]
}
 800640a:	bf00      	nop
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	40023800 	.word	0x40023800
 800641c:	40023c00 	.word	0x40023c00

08006420 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b088      	sub	sp, #32
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006428:	2300      	movs	r3, #0
 800642a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800642c:	2300      	movs	r3, #0
 800642e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006430:	2300      	movs	r3, #0
 8006432:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006434:	2300      	movs	r3, #0
 8006436:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006438:	2300      	movs	r3, #0
 800643a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b00      	cmp	r3, #0
 8006446:	d012      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006448:	4b69      	ldr	r3, [pc, #420]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	4a68      	ldr	r2, [pc, #416]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800644e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006452:	6093      	str	r3, [r2, #8]
 8006454:	4b66      	ldr	r3, [pc, #408]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006456:	689a      	ldr	r2, [r3, #8]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800645c:	4964      	ldr	r1, [pc, #400]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800645e:	4313      	orrs	r3, r2
 8006460:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800646a:	2301      	movs	r3, #1
 800646c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d017      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800647a:	4b5d      	ldr	r3, [pc, #372]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800647c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006480:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006488:	4959      	ldr	r1, [pc, #356]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800648a:	4313      	orrs	r3, r2
 800648c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006494:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006498:	d101      	bne.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800649a:	2301      	movs	r3, #1
 800649c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d101      	bne.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80064a6:	2301      	movs	r3, #1
 80064a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d017      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80064b6:	4b4e      	ldr	r3, [pc, #312]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80064bc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c4:	494a      	ldr	r1, [pc, #296]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064d4:	d101      	bne.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80064d6:	2301      	movs	r3, #1
 80064d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80064e2:	2301      	movs	r3, #1
 80064e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80064f2:	2301      	movs	r3, #1
 80064f4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0320 	and.w	r3, r3, #32
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f000 808b 	beq.w	800661a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006504:	4b3a      	ldr	r3, [pc, #232]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006508:	4a39      	ldr	r2, [pc, #228]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800650a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800650e:	6413      	str	r3, [r2, #64]	@ 0x40
 8006510:	4b37      	ldr	r3, [pc, #220]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006514:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006518:	60bb      	str	r3, [r7, #8]
 800651a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800651c:	4b35      	ldr	r3, [pc, #212]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a34      	ldr	r2, [pc, #208]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006522:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006526:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006528:	f7fd fd62 	bl	8003ff0 <HAL_GetTick>
 800652c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800652e:	e008      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006530:	f7fd fd5e 	bl	8003ff0 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	2b64      	cmp	r3, #100	@ 0x64
 800653c:	d901      	bls.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e38f      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006542:	4b2c      	ldr	r3, [pc, #176]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800654a:	2b00      	cmp	r3, #0
 800654c:	d0f0      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800654e:	4b28      	ldr	r3, [pc, #160]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006552:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006556:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d035      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006562:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	429a      	cmp	r2, r3
 800656a:	d02e      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800656c:	4b20      	ldr	r3, [pc, #128]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800656e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006570:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006574:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006576:	4b1e      	ldr	r3, [pc, #120]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800657a:	4a1d      	ldr	r2, [pc, #116]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800657c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006580:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006582:	4b1b      	ldr	r3, [pc, #108]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006586:	4a1a      	ldr	r2, [pc, #104]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006588:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800658c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800658e:	4a18      	ldr	r2, [pc, #96]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006594:	4b16      	ldr	r3, [pc, #88]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006598:	f003 0301 	and.w	r3, r3, #1
 800659c:	2b01      	cmp	r3, #1
 800659e:	d114      	bne.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065a0:	f7fd fd26 	bl	8003ff0 <HAL_GetTick>
 80065a4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065a6:	e00a      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065a8:	f7fd fd22 	bl	8003ff0 <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d901      	bls.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e351      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065be:	4b0c      	ldr	r3, [pc, #48]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065c2:	f003 0302 	and.w	r3, r3, #2
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d0ee      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065d6:	d111      	bne.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80065d8:	4b05      	ldr	r3, [pc, #20]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80065e4:	4b04      	ldr	r3, [pc, #16]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80065e6:	400b      	ands	r3, r1
 80065e8:	4901      	ldr	r1, [pc, #4]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	608b      	str	r3, [r1, #8]
 80065ee:	e00b      	b.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80065f0:	40023800 	.word	0x40023800
 80065f4:	40007000 	.word	0x40007000
 80065f8:	0ffffcff 	.word	0x0ffffcff
 80065fc:	4bac      	ldr	r3, [pc, #688]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	4aab      	ldr	r2, [pc, #684]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006602:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006606:	6093      	str	r3, [r2, #8]
 8006608:	4ba9      	ldr	r3, [pc, #676]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800660a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006614:	49a6      	ldr	r1, [pc, #664]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006616:	4313      	orrs	r3, r2
 8006618:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 0310 	and.w	r3, r3, #16
 8006622:	2b00      	cmp	r3, #0
 8006624:	d010      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006626:	4ba2      	ldr	r3, [pc, #648]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006628:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800662c:	4aa0      	ldr	r2, [pc, #640]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800662e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006632:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006636:	4b9e      	ldr	r3, [pc, #632]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006638:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006640:	499b      	ldr	r1, [pc, #620]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006642:	4313      	orrs	r3, r2
 8006644:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00a      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006654:	4b96      	ldr	r3, [pc, #600]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800665a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006662:	4993      	ldr	r1, [pc, #588]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006664:	4313      	orrs	r3, r2
 8006666:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00a      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006676:	4b8e      	ldr	r3, [pc, #568]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800667c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006684:	498a      	ldr	r1, [pc, #552]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006686:	4313      	orrs	r3, r2
 8006688:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00a      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006698:	4b85      	ldr	r3, [pc, #532]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800669a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800669e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066a6:	4982      	ldr	r1, [pc, #520]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00a      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80066ba:	4b7d      	ldr	r3, [pc, #500]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80066bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066c0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066c8:	4979      	ldr	r1, [pc, #484]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00a      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80066dc:	4b74      	ldr	r3, [pc, #464]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80066de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066e2:	f023 0203 	bic.w	r2, r3, #3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ea:	4971      	ldr	r1, [pc, #452]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80066ec:	4313      	orrs	r3, r2
 80066ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00a      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80066fe:	4b6c      	ldr	r3, [pc, #432]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006704:	f023 020c 	bic.w	r2, r3, #12
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800670c:	4968      	ldr	r1, [pc, #416]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800670e:	4313      	orrs	r3, r2
 8006710:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00a      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006720:	4b63      	ldr	r3, [pc, #396]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006726:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800672e:	4960      	ldr	r1, [pc, #384]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006730:	4313      	orrs	r3, r2
 8006732:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00a      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006742:	4b5b      	ldr	r3, [pc, #364]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006748:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006750:	4957      	ldr	r1, [pc, #348]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006752:	4313      	orrs	r3, r2
 8006754:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00a      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006764:	4b52      	ldr	r3, [pc, #328]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800676a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006772:	494f      	ldr	r1, [pc, #316]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006774:	4313      	orrs	r3, r2
 8006776:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00a      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006786:	4b4a      	ldr	r3, [pc, #296]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800678c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006794:	4946      	ldr	r1, [pc, #280]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006796:	4313      	orrs	r3, r2
 8006798:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00a      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80067a8:	4b41      	ldr	r3, [pc, #260]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80067aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067ae:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067b6:	493e      	ldr	r1, [pc, #248]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00a      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80067ca:	4b39      	ldr	r3, [pc, #228]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80067cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067d0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067d8:	4935      	ldr	r1, [pc, #212]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00a      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80067ec:	4b30      	ldr	r3, [pc, #192]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80067ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067f2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067fa:	492d      	ldr	r1, [pc, #180]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800680a:	2b00      	cmp	r3, #0
 800680c:	d011      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800680e:	4b28      	ldr	r3, [pc, #160]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006814:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800681c:	4924      	ldr	r1, [pc, #144]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800681e:	4313      	orrs	r3, r2
 8006820:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006828:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800682c:	d101      	bne.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800682e:	2301      	movs	r3, #1
 8006830:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0308 	and.w	r3, r3, #8
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800683e:	2301      	movs	r3, #1
 8006840:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00a      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800684e:	4b18      	ldr	r3, [pc, #96]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006854:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800685c:	4914      	ldr	r1, [pc, #80]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800685e:	4313      	orrs	r3, r2
 8006860:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00b      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006870:	4b0f      	ldr	r3, [pc, #60]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006876:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006880:	490b      	ldr	r1, [pc, #44]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006882:	4313      	orrs	r3, r2
 8006884:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00f      	beq.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006894:	4b06      	ldr	r3, [pc, #24]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800689a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068a4:	4902      	ldr	r1, [pc, #8]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80068a6:	4313      	orrs	r3, r2
 80068a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80068ac:	e002      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80068ae:	bf00      	nop
 80068b0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00b      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80068c0:	4b8a      	ldr	r3, [pc, #552]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80068c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068c6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068d0:	4986      	ldr	r1, [pc, #536]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80068d2:	4313      	orrs	r3, r2
 80068d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00b      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80068e4:	4b81      	ldr	r3, [pc, #516]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80068e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068ea:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068f4:	497d      	ldr	r1, [pc, #500]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d006      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 80d6 	beq.w	8006abc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006910:	4b76      	ldr	r3, [pc, #472]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a75      	ldr	r2, [pc, #468]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006916:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800691a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800691c:	f7fd fb68 	bl	8003ff0 <HAL_GetTick>
 8006920:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006922:	e008      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006924:	f7fd fb64 	bl	8003ff0 <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	2b64      	cmp	r3, #100	@ 0x64
 8006930:	d901      	bls.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e195      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006936:	4b6d      	ldr	r3, [pc, #436]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1f0      	bne.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0301 	and.w	r3, r3, #1
 800694a:	2b00      	cmp	r3, #0
 800694c:	d021      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006952:	2b00      	cmp	r3, #0
 8006954:	d11d      	bne.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006956:	4b65      	ldr	r3, [pc, #404]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006958:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800695c:	0c1b      	lsrs	r3, r3, #16
 800695e:	f003 0303 	and.w	r3, r3, #3
 8006962:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006964:	4b61      	ldr	r3, [pc, #388]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006966:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800696a:	0e1b      	lsrs	r3, r3, #24
 800696c:	f003 030f 	and.w	r3, r3, #15
 8006970:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	019a      	lsls	r2, r3, #6
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	041b      	lsls	r3, r3, #16
 800697c:	431a      	orrs	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	061b      	lsls	r3, r3, #24
 8006982:	431a      	orrs	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	071b      	lsls	r3, r3, #28
 800698a:	4958      	ldr	r1, [pc, #352]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800698c:	4313      	orrs	r3, r2
 800698e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d004      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069a6:	d00a      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d02e      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069bc:	d129      	bne.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80069be:	4b4b      	ldr	r3, [pc, #300]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80069c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069c4:	0c1b      	lsrs	r3, r3, #16
 80069c6:	f003 0303 	and.w	r3, r3, #3
 80069ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80069cc:	4b47      	ldr	r3, [pc, #284]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80069ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069d2:	0f1b      	lsrs	r3, r3, #28
 80069d4:	f003 0307 	and.w	r3, r3, #7
 80069d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	019a      	lsls	r2, r3, #6
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	041b      	lsls	r3, r3, #16
 80069e4:	431a      	orrs	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	061b      	lsls	r3, r3, #24
 80069ec:	431a      	orrs	r2, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	071b      	lsls	r3, r3, #28
 80069f2:	493e      	ldr	r1, [pc, #248]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80069f4:	4313      	orrs	r3, r2
 80069f6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80069fa:	4b3c      	ldr	r3, [pc, #240]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80069fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a00:	f023 021f 	bic.w	r2, r3, #31
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	4938      	ldr	r1, [pc, #224]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d01d      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006a1e:	4b33      	ldr	r3, [pc, #204]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a24:	0e1b      	lsrs	r3, r3, #24
 8006a26:	f003 030f 	and.w	r3, r3, #15
 8006a2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a2c:	4b2f      	ldr	r3, [pc, #188]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a32:	0f1b      	lsrs	r3, r3, #28
 8006a34:	f003 0307 	and.w	r3, r3, #7
 8006a38:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	019a      	lsls	r2, r3, #6
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	041b      	lsls	r3, r3, #16
 8006a46:	431a      	orrs	r2, r3
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	061b      	lsls	r3, r3, #24
 8006a4c:	431a      	orrs	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	071b      	lsls	r3, r3, #28
 8006a52:	4926      	ldr	r1, [pc, #152]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a54:	4313      	orrs	r3, r2
 8006a56:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d011      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	019a      	lsls	r2, r3, #6
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	041b      	lsls	r3, r3, #16
 8006a72:	431a      	orrs	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	061b      	lsls	r3, r3, #24
 8006a7a:	431a      	orrs	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	071b      	lsls	r3, r3, #28
 8006a82:	491a      	ldr	r1, [pc, #104]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a84:	4313      	orrs	r3, r2
 8006a86:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006a8a:	4b18      	ldr	r3, [pc, #96]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a17      	ldr	r2, [pc, #92]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a90:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006a94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a96:	f7fd faab 	bl	8003ff0 <HAL_GetTick>
 8006a9a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a9c:	e008      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a9e:	f7fd faa7 	bl	8003ff0 <HAL_GetTick>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	2b64      	cmp	r3, #100	@ 0x64
 8006aaa:	d901      	bls.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006aac:	2303      	movs	r3, #3
 8006aae:	e0d8      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d0f0      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	f040 80ce 	bne.w	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006ac4:	4b09      	ldr	r3, [pc, #36]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a08      	ldr	r2, [pc, #32]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006aca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ace:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ad0:	f7fd fa8e 	bl	8003ff0 <HAL_GetTick>
 8006ad4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ad6:	e00b      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006ad8:	f7fd fa8a 	bl	8003ff0 <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	2b64      	cmp	r3, #100	@ 0x64
 8006ae4:	d904      	bls.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e0bb      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006aea:	bf00      	nop
 8006aec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006af0:	4b5e      	ldr	r3, [pc, #376]	@ (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006af8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006afc:	d0ec      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d003      	beq.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d009      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d02e      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d12a      	bne.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006b26:	4b51      	ldr	r3, [pc, #324]	@ (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b2c:	0c1b      	lsrs	r3, r3, #16
 8006b2e:	f003 0303 	and.w	r3, r3, #3
 8006b32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006b34:	4b4d      	ldr	r3, [pc, #308]	@ (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b3a:	0f1b      	lsrs	r3, r3, #28
 8006b3c:	f003 0307 	and.w	r3, r3, #7
 8006b40:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	019a      	lsls	r2, r3, #6
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	041b      	lsls	r3, r3, #16
 8006b4c:	431a      	orrs	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	061b      	lsls	r3, r3, #24
 8006b54:	431a      	orrs	r2, r3
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	071b      	lsls	r3, r3, #28
 8006b5a:	4944      	ldr	r1, [pc, #272]	@ (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006b62:	4b42      	ldr	r3, [pc, #264]	@ (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b68:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b70:	3b01      	subs	r3, #1
 8006b72:	021b      	lsls	r3, r3, #8
 8006b74:	493d      	ldr	r1, [pc, #244]	@ (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b76:	4313      	orrs	r3, r2
 8006b78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d022      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b90:	d11d      	bne.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b92:	4b36      	ldr	r3, [pc, #216]	@ (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b98:	0e1b      	lsrs	r3, r3, #24
 8006b9a:	f003 030f 	and.w	r3, r3, #15
 8006b9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006ba0:	4b32      	ldr	r3, [pc, #200]	@ (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ba6:	0f1b      	lsrs	r3, r3, #28
 8006ba8:	f003 0307 	and.w	r3, r3, #7
 8006bac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	019a      	lsls	r2, r3, #6
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a1b      	ldr	r3, [r3, #32]
 8006bb8:	041b      	lsls	r3, r3, #16
 8006bba:	431a      	orrs	r2, r3
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	061b      	lsls	r3, r3, #24
 8006bc0:	431a      	orrs	r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	071b      	lsls	r3, r3, #28
 8006bc6:	4929      	ldr	r1, [pc, #164]	@ (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0308 	and.w	r3, r3, #8
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d028      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006bda:	4b24      	ldr	r3, [pc, #144]	@ (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006be0:	0e1b      	lsrs	r3, r3, #24
 8006be2:	f003 030f 	and.w	r3, r3, #15
 8006be6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006be8:	4b20      	ldr	r3, [pc, #128]	@ (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bee:	0c1b      	lsrs	r3, r3, #16
 8006bf0:	f003 0303 	and.w	r3, r3, #3
 8006bf4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	019a      	lsls	r2, r3, #6
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	041b      	lsls	r3, r3, #16
 8006c00:	431a      	orrs	r2, r3
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	061b      	lsls	r3, r3, #24
 8006c06:	431a      	orrs	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	69db      	ldr	r3, [r3, #28]
 8006c0c:	071b      	lsls	r3, r3, #28
 8006c0e:	4917      	ldr	r1, [pc, #92]	@ (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006c16:	4b15      	ldr	r3, [pc, #84]	@ (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c1c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c24:	4911      	ldr	r1, [pc, #68]	@ (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a0e      	ldr	r2, [pc, #56]	@ (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006c32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c38:	f7fd f9da 	bl	8003ff0 <HAL_GetTick>
 8006c3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006c3e:	e008      	b.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006c40:	f7fd f9d6 	bl	8003ff0 <HAL_GetTick>
 8006c44:	4602      	mov	r2, r0
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	2b64      	cmp	r3, #100	@ 0x64
 8006c4c:	d901      	bls.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e007      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006c52:	4b06      	ldr	r3, [pc, #24]	@ (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c5e:	d1ef      	bne.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3720      	adds	r7, #32
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	40023800 	.word	0x40023800

08006c70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d101      	bne.n	8006c82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e09d      	b.n	8006dbe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d108      	bne.n	8006c9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c92:	d009      	beq.n	8006ca8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	61da      	str	r2, [r3, #28]
 8006c9a:	e005      	b.n	8006ca8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d106      	bne.n	8006cc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f7fc fd34 	bl	8003730 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2202      	movs	r2, #2
 8006ccc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cde:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006ce8:	d902      	bls.n	8006cf0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006cea:	2300      	movs	r3, #0
 8006cec:	60fb      	str	r3, [r7, #12]
 8006cee:	e002      	b.n	8006cf6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006cf0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006cf4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006cfe:	d007      	beq.n	8006d10 <HAL_SPI_Init+0xa0>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d08:	d002      	beq.n	8006d10 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006d20:	431a      	orrs	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	f003 0302 	and.w	r3, r3, #2
 8006d2a:	431a      	orrs	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	695b      	ldr	r3, [r3, #20]
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	431a      	orrs	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	699b      	ldr	r3, [r3, #24]
 8006d3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d3e:	431a      	orrs	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	69db      	ldr	r3, [r3, #28]
 8006d44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d48:	431a      	orrs	r2, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d52:	ea42 0103 	orr.w	r1, r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d5a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	430a      	orrs	r2, r1
 8006d64:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	0c1b      	lsrs	r3, r3, #16
 8006d6c:	f003 0204 	and.w	r2, r3, #4
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d74:	f003 0310 	and.w	r3, r3, #16
 8006d78:	431a      	orrs	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d7e:	f003 0308 	and.w	r3, r3, #8
 8006d82:	431a      	orrs	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006d8c:	ea42 0103 	orr.w	r1, r2, r3
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	430a      	orrs	r2, r1
 8006d9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	69da      	ldr	r2, [r3, #28]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006dac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
	...

08006dc8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b088      	sub	sp, #32
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	099b      	lsrs	r3, r3, #6
 8006de4:	f003 0301 	and.w	r3, r3, #1
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10f      	bne.n	8006e0c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00a      	beq.n	8006e0c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	099b      	lsrs	r3, r3, #6
 8006dfa:	f003 0301 	and.w	r3, r3, #1
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d004      	beq.n	8006e0c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	4798      	blx	r3
    return;
 8006e0a:	e0d7      	b.n	8006fbc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	085b      	lsrs	r3, r3, #1
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00a      	beq.n	8006e2e <HAL_SPI_IRQHandler+0x66>
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	09db      	lsrs	r3, r3, #7
 8006e1c:	f003 0301 	and.w	r3, r3, #1
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d004      	beq.n	8006e2e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	4798      	blx	r3
    return;
 8006e2c:	e0c6      	b.n	8006fbc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	095b      	lsrs	r3, r3, #5
 8006e32:	f003 0301 	and.w	r3, r3, #1
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10c      	bne.n	8006e54 <HAL_SPI_IRQHandler+0x8c>
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	099b      	lsrs	r3, r3, #6
 8006e3e:	f003 0301 	and.w	r3, r3, #1
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d106      	bne.n	8006e54 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	0a1b      	lsrs	r3, r3, #8
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f000 80b4 	beq.w	8006fbc <HAL_SPI_IRQHandler+0x1f4>
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	095b      	lsrs	r3, r3, #5
 8006e58:	f003 0301 	and.w	r3, r3, #1
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f000 80ad 	beq.w	8006fbc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	099b      	lsrs	r3, r3, #6
 8006e66:	f003 0301 	and.w	r3, r3, #1
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d023      	beq.n	8006eb6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	d011      	beq.n	8006e9e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e7e:	f043 0204 	orr.w	r2, r3, #4
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e86:	2300      	movs	r3, #0
 8006e88:	617b      	str	r3, [r7, #20]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	617b      	str	r3, [r7, #20]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	617b      	str	r3, [r7, #20]
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	e00b      	b.n	8006eb6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	613b      	str	r3, [r7, #16]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	613b      	str	r3, [r7, #16]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	613b      	str	r3, [r7, #16]
 8006eb2:	693b      	ldr	r3, [r7, #16]
        return;
 8006eb4:	e082      	b.n	8006fbc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	095b      	lsrs	r3, r3, #5
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d014      	beq.n	8006eec <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ec6:	f043 0201 	orr.w	r2, r3, #1
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006ece:	2300      	movs	r3, #0
 8006ed0:	60fb      	str	r3, [r7, #12]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	60fb      	str	r3, [r7, #12]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ee8:	601a      	str	r2, [r3, #0]
 8006eea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	0a1b      	lsrs	r3, r3, #8
 8006ef0:	f003 0301 	and.w	r3, r3, #1
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00c      	beq.n	8006f12 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006efc:	f043 0208 	orr.w	r2, r3, #8
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006f04:	2300      	movs	r3, #0
 8006f06:	60bb      	str	r3, [r7, #8]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	60bb      	str	r3, [r7, #8]
 8006f10:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d04f      	beq.n	8006fba <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	685a      	ldr	r2, [r3, #4]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006f28:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	f003 0302 	and.w	r3, r3, #2
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d104      	bne.n	8006f46 <HAL_SPI_IRQHandler+0x17e>
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d034      	beq.n	8006fb0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	685a      	ldr	r2, [r3, #4]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f022 0203 	bic.w	r2, r2, #3
 8006f54:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d011      	beq.n	8006f82 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f62:	4a18      	ldr	r2, [pc, #96]	@ (8006fc4 <HAL_SPI_IRQHandler+0x1fc>)
 8006f64:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fd faac 	bl	80044c8 <HAL_DMA_Abort_IT>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d005      	beq.n	8006f82 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f7a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d016      	beq.n	8006fb8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f8e:	4a0d      	ldr	r2, [pc, #52]	@ (8006fc4 <HAL_SPI_IRQHandler+0x1fc>)
 8006f90:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7fd fa96 	bl	80044c8 <HAL_DMA_Abort_IT>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00a      	beq.n	8006fb8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fa6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8006fae:	e003      	b.n	8006fb8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 f809 	bl	8006fc8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006fb6:	e000      	b.n	8006fba <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006fb8:	bf00      	nop
    return;
 8006fba:	bf00      	nop
  }
}
 8006fbc:	3720      	adds	r7, #32
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	08006fdd 	.word	0x08006fdd

08006fc8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f7ff ffe5 	bl	8006fc8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006ffe:	bf00      	nop
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b082      	sub	sp, #8
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d101      	bne.n	8007018 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e049      	b.n	80070ac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800701e:	b2db      	uxtb	r3, r3
 8007020:	2b00      	cmp	r3, #0
 8007022:	d106      	bne.n	8007032 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f7fc fbcb 	bl	80037c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2202      	movs	r2, #2
 8007036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	3304      	adds	r3, #4
 8007042:	4619      	mov	r1, r3
 8007044:	4610      	mov	r0, r2
 8007046:	f000 fc85 	bl	8007954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2201      	movs	r2, #1
 800705e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2201      	movs	r2, #1
 800707e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2201      	movs	r2, #1
 800708e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2201      	movs	r2, #1
 8007096:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2201      	movs	r2, #1
 80070a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b085      	sub	sp, #20
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d001      	beq.n	80070cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e054      	b.n	8007176 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2202      	movs	r2, #2
 80070d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68da      	ldr	r2, [r3, #12]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f042 0201 	orr.w	r2, r2, #1
 80070e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a26      	ldr	r2, [pc, #152]	@ (8007184 <HAL_TIM_Base_Start_IT+0xd0>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d022      	beq.n	8007134 <HAL_TIM_Base_Start_IT+0x80>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070f6:	d01d      	beq.n	8007134 <HAL_TIM_Base_Start_IT+0x80>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a22      	ldr	r2, [pc, #136]	@ (8007188 <HAL_TIM_Base_Start_IT+0xd4>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d018      	beq.n	8007134 <HAL_TIM_Base_Start_IT+0x80>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a21      	ldr	r2, [pc, #132]	@ (800718c <HAL_TIM_Base_Start_IT+0xd8>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d013      	beq.n	8007134 <HAL_TIM_Base_Start_IT+0x80>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a1f      	ldr	r2, [pc, #124]	@ (8007190 <HAL_TIM_Base_Start_IT+0xdc>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d00e      	beq.n	8007134 <HAL_TIM_Base_Start_IT+0x80>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a1e      	ldr	r2, [pc, #120]	@ (8007194 <HAL_TIM_Base_Start_IT+0xe0>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d009      	beq.n	8007134 <HAL_TIM_Base_Start_IT+0x80>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a1c      	ldr	r2, [pc, #112]	@ (8007198 <HAL_TIM_Base_Start_IT+0xe4>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d004      	beq.n	8007134 <HAL_TIM_Base_Start_IT+0x80>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a1b      	ldr	r2, [pc, #108]	@ (800719c <HAL_TIM_Base_Start_IT+0xe8>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d115      	bne.n	8007160 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	689a      	ldr	r2, [r3, #8]
 800713a:	4b19      	ldr	r3, [pc, #100]	@ (80071a0 <HAL_TIM_Base_Start_IT+0xec>)
 800713c:	4013      	ands	r3, r2
 800713e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2b06      	cmp	r3, #6
 8007144:	d015      	beq.n	8007172 <HAL_TIM_Base_Start_IT+0xbe>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800714c:	d011      	beq.n	8007172 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f042 0201 	orr.w	r2, r2, #1
 800715c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800715e:	e008      	b.n	8007172 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f042 0201 	orr.w	r2, r2, #1
 800716e:	601a      	str	r2, [r3, #0]
 8007170:	e000      	b.n	8007174 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007172:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3714      	adds	r7, #20
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	40010000 	.word	0x40010000
 8007188:	40000400 	.word	0x40000400
 800718c:	40000800 	.word	0x40000800
 8007190:	40000c00 	.word	0x40000c00
 8007194:	40010400 	.word	0x40010400
 8007198:	40014000 	.word	0x40014000
 800719c:	40001800 	.word	0x40001800
 80071a0:	00010007 	.word	0x00010007

080071a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d101      	bne.n	80071b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e049      	b.n	800724a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d106      	bne.n	80071d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7fc fb22 	bl	8003814 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2202      	movs	r2, #2
 80071d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	3304      	adds	r3, #4
 80071e0:	4619      	mov	r1, r3
 80071e2:	4610      	mov	r0, r2
 80071e4:	f000 fbb6 	bl	8007954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
	...

08007254 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d109      	bne.n	8007278 <HAL_TIM_PWM_Start+0x24>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b01      	cmp	r3, #1
 800726e:	bf14      	ite	ne
 8007270:	2301      	movne	r3, #1
 8007272:	2300      	moveq	r3, #0
 8007274:	b2db      	uxtb	r3, r3
 8007276:	e03c      	b.n	80072f2 <HAL_TIM_PWM_Start+0x9e>
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	2b04      	cmp	r3, #4
 800727c:	d109      	bne.n	8007292 <HAL_TIM_PWM_Start+0x3e>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b01      	cmp	r3, #1
 8007288:	bf14      	ite	ne
 800728a:	2301      	movne	r3, #1
 800728c:	2300      	moveq	r3, #0
 800728e:	b2db      	uxtb	r3, r3
 8007290:	e02f      	b.n	80072f2 <HAL_TIM_PWM_Start+0x9e>
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	2b08      	cmp	r3, #8
 8007296:	d109      	bne.n	80072ac <HAL_TIM_PWM_Start+0x58>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	bf14      	ite	ne
 80072a4:	2301      	movne	r3, #1
 80072a6:	2300      	moveq	r3, #0
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	e022      	b.n	80072f2 <HAL_TIM_PWM_Start+0x9e>
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	2b0c      	cmp	r3, #12
 80072b0:	d109      	bne.n	80072c6 <HAL_TIM_PWM_Start+0x72>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	bf14      	ite	ne
 80072be:	2301      	movne	r3, #1
 80072c0:	2300      	moveq	r3, #0
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	e015      	b.n	80072f2 <HAL_TIM_PWM_Start+0x9e>
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	2b10      	cmp	r3, #16
 80072ca:	d109      	bne.n	80072e0 <HAL_TIM_PWM_Start+0x8c>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	bf14      	ite	ne
 80072d8:	2301      	movne	r3, #1
 80072da:	2300      	moveq	r3, #0
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	e008      	b.n	80072f2 <HAL_TIM_PWM_Start+0x9e>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	bf14      	ite	ne
 80072ec:	2301      	movne	r3, #1
 80072ee:	2300      	moveq	r3, #0
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e092      	b.n	8007420 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d104      	bne.n	800730a <HAL_TIM_PWM_Start+0xb6>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2202      	movs	r2, #2
 8007304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007308:	e023      	b.n	8007352 <HAL_TIM_PWM_Start+0xfe>
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	2b04      	cmp	r3, #4
 800730e:	d104      	bne.n	800731a <HAL_TIM_PWM_Start+0xc6>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2202      	movs	r2, #2
 8007314:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007318:	e01b      	b.n	8007352 <HAL_TIM_PWM_Start+0xfe>
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	2b08      	cmp	r3, #8
 800731e:	d104      	bne.n	800732a <HAL_TIM_PWM_Start+0xd6>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2202      	movs	r2, #2
 8007324:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007328:	e013      	b.n	8007352 <HAL_TIM_PWM_Start+0xfe>
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	2b0c      	cmp	r3, #12
 800732e:	d104      	bne.n	800733a <HAL_TIM_PWM_Start+0xe6>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2202      	movs	r2, #2
 8007334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007338:	e00b      	b.n	8007352 <HAL_TIM_PWM_Start+0xfe>
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	2b10      	cmp	r3, #16
 800733e:	d104      	bne.n	800734a <HAL_TIM_PWM_Start+0xf6>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2202      	movs	r2, #2
 8007344:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007348:	e003      	b.n	8007352 <HAL_TIM_PWM_Start+0xfe>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2202      	movs	r2, #2
 800734e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2201      	movs	r2, #1
 8007358:	6839      	ldr	r1, [r7, #0]
 800735a:	4618      	mov	r0, r3
 800735c:	f000 ff11 	bl	8008182 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a30      	ldr	r2, [pc, #192]	@ (8007428 <HAL_TIM_PWM_Start+0x1d4>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d004      	beq.n	8007374 <HAL_TIM_PWM_Start+0x120>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a2f      	ldr	r2, [pc, #188]	@ (800742c <HAL_TIM_PWM_Start+0x1d8>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d101      	bne.n	8007378 <HAL_TIM_PWM_Start+0x124>
 8007374:	2301      	movs	r3, #1
 8007376:	e000      	b.n	800737a <HAL_TIM_PWM_Start+0x126>
 8007378:	2300      	movs	r3, #0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d007      	beq.n	800738e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800738c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a25      	ldr	r2, [pc, #148]	@ (8007428 <HAL_TIM_PWM_Start+0x1d4>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d022      	beq.n	80073de <HAL_TIM_PWM_Start+0x18a>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073a0:	d01d      	beq.n	80073de <HAL_TIM_PWM_Start+0x18a>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a22      	ldr	r2, [pc, #136]	@ (8007430 <HAL_TIM_PWM_Start+0x1dc>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d018      	beq.n	80073de <HAL_TIM_PWM_Start+0x18a>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a20      	ldr	r2, [pc, #128]	@ (8007434 <HAL_TIM_PWM_Start+0x1e0>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d013      	beq.n	80073de <HAL_TIM_PWM_Start+0x18a>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a1f      	ldr	r2, [pc, #124]	@ (8007438 <HAL_TIM_PWM_Start+0x1e4>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d00e      	beq.n	80073de <HAL_TIM_PWM_Start+0x18a>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a19      	ldr	r2, [pc, #100]	@ (800742c <HAL_TIM_PWM_Start+0x1d8>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d009      	beq.n	80073de <HAL_TIM_PWM_Start+0x18a>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a1b      	ldr	r2, [pc, #108]	@ (800743c <HAL_TIM_PWM_Start+0x1e8>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d004      	beq.n	80073de <HAL_TIM_PWM_Start+0x18a>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a19      	ldr	r2, [pc, #100]	@ (8007440 <HAL_TIM_PWM_Start+0x1ec>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d115      	bne.n	800740a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	689a      	ldr	r2, [r3, #8]
 80073e4:	4b17      	ldr	r3, [pc, #92]	@ (8007444 <HAL_TIM_PWM_Start+0x1f0>)
 80073e6:	4013      	ands	r3, r2
 80073e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2b06      	cmp	r3, #6
 80073ee:	d015      	beq.n	800741c <HAL_TIM_PWM_Start+0x1c8>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073f6:	d011      	beq.n	800741c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f042 0201 	orr.w	r2, r2, #1
 8007406:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007408:	e008      	b.n	800741c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f042 0201 	orr.w	r2, r2, #1
 8007418:	601a      	str	r2, [r3, #0]
 800741a:	e000      	b.n	800741e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800741c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	40010000 	.word	0x40010000
 800742c:	40010400 	.word	0x40010400
 8007430:	40000400 	.word	0x40000400
 8007434:	40000800 	.word	0x40000800
 8007438:	40000c00 	.word	0x40000c00
 800743c:	40014000 	.word	0x40014000
 8007440:	40001800 	.word	0x40001800
 8007444:	00010007 	.word	0x00010007

08007448 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	f003 0302 	and.w	r3, r3, #2
 8007466:	2b00      	cmp	r3, #0
 8007468:	d020      	beq.n	80074ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f003 0302 	and.w	r3, r3, #2
 8007470:	2b00      	cmp	r3, #0
 8007472:	d01b      	beq.n	80074ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f06f 0202 	mvn.w	r2, #2
 800747c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2201      	movs	r2, #1
 8007482:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	699b      	ldr	r3, [r3, #24]
 800748a:	f003 0303 	and.w	r3, r3, #3
 800748e:	2b00      	cmp	r3, #0
 8007490:	d003      	beq.n	800749a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fa40 	bl	8007918 <HAL_TIM_IC_CaptureCallback>
 8007498:	e005      	b.n	80074a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 fa32 	bl	8007904 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fa43 	bl	800792c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	f003 0304 	and.w	r3, r3, #4
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d020      	beq.n	80074f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f003 0304 	and.w	r3, r3, #4
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d01b      	beq.n	80074f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f06f 0204 	mvn.w	r2, #4
 80074c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2202      	movs	r2, #2
 80074ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	699b      	ldr	r3, [r3, #24]
 80074d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d003      	beq.n	80074e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 fa1a 	bl	8007918 <HAL_TIM_IC_CaptureCallback>
 80074e4:	e005      	b.n	80074f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fa0c 	bl	8007904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 fa1d 	bl	800792c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	f003 0308 	and.w	r3, r3, #8
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d020      	beq.n	8007544 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f003 0308 	and.w	r3, r3, #8
 8007508:	2b00      	cmp	r3, #0
 800750a:	d01b      	beq.n	8007544 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f06f 0208 	mvn.w	r2, #8
 8007514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2204      	movs	r2, #4
 800751a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	69db      	ldr	r3, [r3, #28]
 8007522:	f003 0303 	and.w	r3, r3, #3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d003      	beq.n	8007532 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f9f4 	bl	8007918 <HAL_TIM_IC_CaptureCallback>
 8007530:	e005      	b.n	800753e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f9e6 	bl	8007904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f9f7 	bl	800792c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	f003 0310 	and.w	r3, r3, #16
 800754a:	2b00      	cmp	r3, #0
 800754c:	d020      	beq.n	8007590 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f003 0310 	and.w	r3, r3, #16
 8007554:	2b00      	cmp	r3, #0
 8007556:	d01b      	beq.n	8007590 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f06f 0210 	mvn.w	r2, #16
 8007560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2208      	movs	r2, #8
 8007566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	69db      	ldr	r3, [r3, #28]
 800756e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007572:	2b00      	cmp	r3, #0
 8007574:	d003      	beq.n	800757e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 f9ce 	bl	8007918 <HAL_TIM_IC_CaptureCallback>
 800757c:	e005      	b.n	800758a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f9c0 	bl	8007904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 f9d1 	bl	800792c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00c      	beq.n	80075b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f003 0301 	and.w	r3, r3, #1
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d007      	beq.n	80075b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f06f 0201 	mvn.w	r2, #1
 80075ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f7fb fe4e 	bl	8003250 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d104      	bne.n	80075c8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00c      	beq.n	80075e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d007      	beq.n	80075e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80075da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 fe8d 	bl	80082fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00c      	beq.n	8007606 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d007      	beq.n	8007606 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80075fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 fe85 	bl	8008310 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00c      	beq.n	800762a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007616:	2b00      	cmp	r3, #0
 8007618:	d007      	beq.n	800762a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 f98b 	bl	8007940 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	f003 0320 	and.w	r3, r3, #32
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00c      	beq.n	800764e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f003 0320 	and.w	r3, r3, #32
 800763a:	2b00      	cmp	r3, #0
 800763c:	d007      	beq.n	800764e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f06f 0220 	mvn.w	r2, #32
 8007646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 fe4d 	bl	80082e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800764e:	bf00      	nop
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
	...

08007658 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b086      	sub	sp, #24
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007664:	2300      	movs	r3, #0
 8007666:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800766e:	2b01      	cmp	r3, #1
 8007670:	d101      	bne.n	8007676 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007672:	2302      	movs	r3, #2
 8007674:	e0ff      	b.n	8007876 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2201      	movs	r2, #1
 800767a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2b14      	cmp	r3, #20
 8007682:	f200 80f0 	bhi.w	8007866 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007686:	a201      	add	r2, pc, #4	@ (adr r2, 800768c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800768c:	080076e1 	.word	0x080076e1
 8007690:	08007867 	.word	0x08007867
 8007694:	08007867 	.word	0x08007867
 8007698:	08007867 	.word	0x08007867
 800769c:	08007721 	.word	0x08007721
 80076a0:	08007867 	.word	0x08007867
 80076a4:	08007867 	.word	0x08007867
 80076a8:	08007867 	.word	0x08007867
 80076ac:	08007763 	.word	0x08007763
 80076b0:	08007867 	.word	0x08007867
 80076b4:	08007867 	.word	0x08007867
 80076b8:	08007867 	.word	0x08007867
 80076bc:	080077a3 	.word	0x080077a3
 80076c0:	08007867 	.word	0x08007867
 80076c4:	08007867 	.word	0x08007867
 80076c8:	08007867 	.word	0x08007867
 80076cc:	080077e5 	.word	0x080077e5
 80076d0:	08007867 	.word	0x08007867
 80076d4:	08007867 	.word	0x08007867
 80076d8:	08007867 	.word	0x08007867
 80076dc:	08007825 	.word	0x08007825
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68b9      	ldr	r1, [r7, #8]
 80076e6:	4618      	mov	r0, r3
 80076e8:	f000 f9da 	bl	8007aa0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	699a      	ldr	r2, [r3, #24]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f042 0208 	orr.w	r2, r2, #8
 80076fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	699a      	ldr	r2, [r3, #24]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f022 0204 	bic.w	r2, r2, #4
 800770a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	6999      	ldr	r1, [r3, #24]
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	691a      	ldr	r2, [r3, #16]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	430a      	orrs	r2, r1
 800771c:	619a      	str	r2, [r3, #24]
      break;
 800771e:	e0a5      	b.n	800786c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	68b9      	ldr	r1, [r7, #8]
 8007726:	4618      	mov	r0, r3
 8007728:	f000 fa2c 	bl	8007b84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	699a      	ldr	r2, [r3, #24]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800773a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	699a      	ldr	r2, [r3, #24]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800774a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	6999      	ldr	r1, [r3, #24]
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	021a      	lsls	r2, r3, #8
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	430a      	orrs	r2, r1
 800775e:	619a      	str	r2, [r3, #24]
      break;
 8007760:	e084      	b.n	800786c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68b9      	ldr	r1, [r7, #8]
 8007768:	4618      	mov	r0, r3
 800776a:	f000 fa83 	bl	8007c74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	69da      	ldr	r2, [r3, #28]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f042 0208 	orr.w	r2, r2, #8
 800777c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	69da      	ldr	r2, [r3, #28]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f022 0204 	bic.w	r2, r2, #4
 800778c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	69d9      	ldr	r1, [r3, #28]
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	691a      	ldr	r2, [r3, #16]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	430a      	orrs	r2, r1
 800779e:	61da      	str	r2, [r3, #28]
      break;
 80077a0:	e064      	b.n	800786c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68b9      	ldr	r1, [r7, #8]
 80077a8:	4618      	mov	r0, r3
 80077aa:	f000 fad9 	bl	8007d60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	69da      	ldr	r2, [r3, #28]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80077bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	69da      	ldr	r2, [r3, #28]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80077cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	69d9      	ldr	r1, [r3, #28]
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	021a      	lsls	r2, r3, #8
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	430a      	orrs	r2, r1
 80077e0:	61da      	str	r2, [r3, #28]
      break;
 80077e2:	e043      	b.n	800786c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68b9      	ldr	r1, [r7, #8]
 80077ea:	4618      	mov	r0, r3
 80077ec:	f000 fb10 	bl	8007e10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f042 0208 	orr.w	r2, r2, #8
 80077fe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f022 0204 	bic.w	r2, r2, #4
 800780e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	691a      	ldr	r2, [r3, #16]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	430a      	orrs	r2, r1
 8007820:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007822:	e023      	b.n	800786c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68b9      	ldr	r1, [r7, #8]
 800782a:	4618      	mov	r0, r3
 800782c:	f000 fb42 	bl	8007eb4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800783e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800784e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	021a      	lsls	r2, r3, #8
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	430a      	orrs	r2, r1
 8007862:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007864:	e002      	b.n	800786c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	75fb      	strb	r3, [r7, #23]
      break;
 800786a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007874:	7dfb      	ldrb	r3, [r7, #23]
}
 8007876:	4618      	mov	r0, r3
 8007878:	3718      	adds	r7, #24
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop

08007880 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007890:	2b01      	cmp	r3, #1
 8007892:	d101      	bne.n	8007898 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007894:	2302      	movs	r3, #2
 8007896:	e031      	b.n	80078fc <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2202      	movs	r2, #2
 80078a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80078a8:	6839      	ldr	r1, [r7, #0]
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fb56 	bl	8007f5c <TIM_SlaveTimer_SetConfig>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d009      	beq.n	80078ca <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2201      	movs	r2, #1
 80078ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e018      	b.n	80078fc <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68da      	ldr	r2, [r3, #12]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078d8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68da      	ldr	r2, [r3, #12]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80078e8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2201      	movs	r2, #1
 80078ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3708      	adds	r7, #8
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007934:	bf00      	nop
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007948:	bf00      	nop
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a43      	ldr	r2, [pc, #268]	@ (8007a74 <TIM_Base_SetConfig+0x120>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d013      	beq.n	8007994 <TIM_Base_SetConfig+0x40>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007972:	d00f      	beq.n	8007994 <TIM_Base_SetConfig+0x40>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a40      	ldr	r2, [pc, #256]	@ (8007a78 <TIM_Base_SetConfig+0x124>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d00b      	beq.n	8007994 <TIM_Base_SetConfig+0x40>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a3f      	ldr	r2, [pc, #252]	@ (8007a7c <TIM_Base_SetConfig+0x128>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d007      	beq.n	8007994 <TIM_Base_SetConfig+0x40>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4a3e      	ldr	r2, [pc, #248]	@ (8007a80 <TIM_Base_SetConfig+0x12c>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d003      	beq.n	8007994 <TIM_Base_SetConfig+0x40>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a3d      	ldr	r2, [pc, #244]	@ (8007a84 <TIM_Base_SetConfig+0x130>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d108      	bne.n	80079a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800799a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	68fa      	ldr	r2, [r7, #12]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a32      	ldr	r2, [pc, #200]	@ (8007a74 <TIM_Base_SetConfig+0x120>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d02b      	beq.n	8007a06 <TIM_Base_SetConfig+0xb2>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079b4:	d027      	beq.n	8007a06 <TIM_Base_SetConfig+0xb2>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a2f      	ldr	r2, [pc, #188]	@ (8007a78 <TIM_Base_SetConfig+0x124>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d023      	beq.n	8007a06 <TIM_Base_SetConfig+0xb2>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a2e      	ldr	r2, [pc, #184]	@ (8007a7c <TIM_Base_SetConfig+0x128>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d01f      	beq.n	8007a06 <TIM_Base_SetConfig+0xb2>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a2d      	ldr	r2, [pc, #180]	@ (8007a80 <TIM_Base_SetConfig+0x12c>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d01b      	beq.n	8007a06 <TIM_Base_SetConfig+0xb2>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a2c      	ldr	r2, [pc, #176]	@ (8007a84 <TIM_Base_SetConfig+0x130>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d017      	beq.n	8007a06 <TIM_Base_SetConfig+0xb2>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a2b      	ldr	r2, [pc, #172]	@ (8007a88 <TIM_Base_SetConfig+0x134>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d013      	beq.n	8007a06 <TIM_Base_SetConfig+0xb2>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a2a      	ldr	r2, [pc, #168]	@ (8007a8c <TIM_Base_SetConfig+0x138>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d00f      	beq.n	8007a06 <TIM_Base_SetConfig+0xb2>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a29      	ldr	r2, [pc, #164]	@ (8007a90 <TIM_Base_SetConfig+0x13c>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d00b      	beq.n	8007a06 <TIM_Base_SetConfig+0xb2>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a28      	ldr	r2, [pc, #160]	@ (8007a94 <TIM_Base_SetConfig+0x140>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d007      	beq.n	8007a06 <TIM_Base_SetConfig+0xb2>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a27      	ldr	r2, [pc, #156]	@ (8007a98 <TIM_Base_SetConfig+0x144>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d003      	beq.n	8007a06 <TIM_Base_SetConfig+0xb2>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a26      	ldr	r2, [pc, #152]	@ (8007a9c <TIM_Base_SetConfig+0x148>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d108      	bne.n	8007a18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	695b      	ldr	r3, [r3, #20]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	689a      	ldr	r2, [r3, #8]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a0e      	ldr	r2, [pc, #56]	@ (8007a74 <TIM_Base_SetConfig+0x120>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d003      	beq.n	8007a46 <TIM_Base_SetConfig+0xf2>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a10      	ldr	r2, [pc, #64]	@ (8007a84 <TIM_Base_SetConfig+0x130>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d103      	bne.n	8007a4e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	691a      	ldr	r2, [r3, #16]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f043 0204 	orr.w	r2, r3, #4
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	601a      	str	r2, [r3, #0]
}
 8007a66:	bf00      	nop
 8007a68:	3714      	adds	r7, #20
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop
 8007a74:	40010000 	.word	0x40010000
 8007a78:	40000400 	.word	0x40000400
 8007a7c:	40000800 	.word	0x40000800
 8007a80:	40000c00 	.word	0x40000c00
 8007a84:	40010400 	.word	0x40010400
 8007a88:	40014000 	.word	0x40014000
 8007a8c:	40014400 	.word	0x40014400
 8007a90:	40014800 	.word	0x40014800
 8007a94:	40001800 	.word	0x40001800
 8007a98:	40001c00 	.word	0x40001c00
 8007a9c:	40002000 	.word	0x40002000

08007aa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b087      	sub	sp, #28
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a1b      	ldr	r3, [r3, #32]
 8007aae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6a1b      	ldr	r3, [r3, #32]
 8007ab4:	f023 0201 	bic.w	r2, r3, #1
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	699b      	ldr	r3, [r3, #24]
 8007ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	4b2b      	ldr	r3, [pc, #172]	@ (8007b78 <TIM_OC1_SetConfig+0xd8>)
 8007acc:	4013      	ands	r3, r2
 8007ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f023 0303 	bic.w	r3, r3, #3
 8007ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	f023 0302 	bic.w	r3, r3, #2
 8007ae8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	697a      	ldr	r2, [r7, #20]
 8007af0:	4313      	orrs	r3, r2
 8007af2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a21      	ldr	r2, [pc, #132]	@ (8007b7c <TIM_OC1_SetConfig+0xdc>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d003      	beq.n	8007b04 <TIM_OC1_SetConfig+0x64>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a20      	ldr	r2, [pc, #128]	@ (8007b80 <TIM_OC1_SetConfig+0xe0>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d10c      	bne.n	8007b1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	f023 0308 	bic.w	r3, r3, #8
 8007b0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	697a      	ldr	r2, [r7, #20]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	f023 0304 	bic.w	r3, r3, #4
 8007b1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a16      	ldr	r2, [pc, #88]	@ (8007b7c <TIM_OC1_SetConfig+0xdc>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d003      	beq.n	8007b2e <TIM_OC1_SetConfig+0x8e>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a15      	ldr	r2, [pc, #84]	@ (8007b80 <TIM_OC1_SetConfig+0xe0>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d111      	bne.n	8007b52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	695b      	ldr	r3, [r3, #20]
 8007b42:	693a      	ldr	r2, [r7, #16]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	693a      	ldr	r2, [r7, #16]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	693a      	ldr	r2, [r7, #16]
 8007b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	685a      	ldr	r2, [r3, #4]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	697a      	ldr	r2, [r7, #20]
 8007b6a:	621a      	str	r2, [r3, #32]
}
 8007b6c:	bf00      	nop
 8007b6e:	371c      	adds	r7, #28
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr
 8007b78:	fffeff8f 	.word	0xfffeff8f
 8007b7c:	40010000 	.word	0x40010000
 8007b80:	40010400 	.word	0x40010400

08007b84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b087      	sub	sp, #28
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a1b      	ldr	r3, [r3, #32]
 8007b92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6a1b      	ldr	r3, [r3, #32]
 8007b98:	f023 0210 	bic.w	r2, r3, #16
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	699b      	ldr	r3, [r3, #24]
 8007baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	4b2e      	ldr	r3, [pc, #184]	@ (8007c68 <TIM_OC2_SetConfig+0xe4>)
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	021b      	lsls	r3, r3, #8
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	f023 0320 	bic.w	r3, r3, #32
 8007bce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	011b      	lsls	r3, r3, #4
 8007bd6:	697a      	ldr	r2, [r7, #20]
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a23      	ldr	r2, [pc, #140]	@ (8007c6c <TIM_OC2_SetConfig+0xe8>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d003      	beq.n	8007bec <TIM_OC2_SetConfig+0x68>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a22      	ldr	r2, [pc, #136]	@ (8007c70 <TIM_OC2_SetConfig+0xec>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d10d      	bne.n	8007c08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007bf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	011b      	lsls	r3, r3, #4
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a18      	ldr	r2, [pc, #96]	@ (8007c6c <TIM_OC2_SetConfig+0xe8>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d003      	beq.n	8007c18 <TIM_OC2_SetConfig+0x94>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4a17      	ldr	r2, [pc, #92]	@ (8007c70 <TIM_OC2_SetConfig+0xec>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d113      	bne.n	8007c40 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	695b      	ldr	r3, [r3, #20]
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	693a      	ldr	r2, [r7, #16]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	699b      	ldr	r3, [r3, #24]
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	693a      	ldr	r2, [r7, #16]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	693a      	ldr	r2, [r7, #16]
 8007c44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	685a      	ldr	r2, [r3, #4]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	697a      	ldr	r2, [r7, #20]
 8007c58:	621a      	str	r2, [r3, #32]
}
 8007c5a:	bf00      	nop
 8007c5c:	371c      	adds	r7, #28
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	feff8fff 	.word	0xfeff8fff
 8007c6c:	40010000 	.word	0x40010000
 8007c70:	40010400 	.word	0x40010400

08007c74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b087      	sub	sp, #28
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6a1b      	ldr	r3, [r3, #32]
 8007c88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	69db      	ldr	r3, [r3, #28]
 8007c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	4b2d      	ldr	r3, [pc, #180]	@ (8007d54 <TIM_OC3_SetConfig+0xe0>)
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f023 0303 	bic.w	r3, r3, #3
 8007caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007cbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	021b      	lsls	r3, r3, #8
 8007cc4:	697a      	ldr	r2, [r7, #20]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a22      	ldr	r2, [pc, #136]	@ (8007d58 <TIM_OC3_SetConfig+0xe4>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d003      	beq.n	8007cda <TIM_OC3_SetConfig+0x66>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a21      	ldr	r2, [pc, #132]	@ (8007d5c <TIM_OC3_SetConfig+0xe8>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d10d      	bne.n	8007cf6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007ce0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	021b      	lsls	r3, r3, #8
 8007ce8:	697a      	ldr	r2, [r7, #20]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007cf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a17      	ldr	r2, [pc, #92]	@ (8007d58 <TIM_OC3_SetConfig+0xe4>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d003      	beq.n	8007d06 <TIM_OC3_SetConfig+0x92>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a16      	ldr	r2, [pc, #88]	@ (8007d5c <TIM_OC3_SetConfig+0xe8>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d113      	bne.n	8007d2e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007d14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	695b      	ldr	r3, [r3, #20]
 8007d1a:	011b      	lsls	r3, r3, #4
 8007d1c:	693a      	ldr	r2, [r7, #16]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	699b      	ldr	r3, [r3, #24]
 8007d26:	011b      	lsls	r3, r3, #4
 8007d28:	693a      	ldr	r2, [r7, #16]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	693a      	ldr	r2, [r7, #16]
 8007d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	685a      	ldr	r2, [r3, #4]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	697a      	ldr	r2, [r7, #20]
 8007d46:	621a      	str	r2, [r3, #32]
}
 8007d48:	bf00      	nop
 8007d4a:	371c      	adds	r7, #28
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr
 8007d54:	fffeff8f 	.word	0xfffeff8f
 8007d58:	40010000 	.word	0x40010000
 8007d5c:	40010400 	.word	0x40010400

08007d60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b087      	sub	sp, #28
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a1b      	ldr	r3, [r3, #32]
 8007d6e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6a1b      	ldr	r3, [r3, #32]
 8007d74:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	69db      	ldr	r3, [r3, #28]
 8007d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	4b1e      	ldr	r3, [pc, #120]	@ (8007e04 <TIM_OC4_SetConfig+0xa4>)
 8007d8c:	4013      	ands	r3, r2
 8007d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	021b      	lsls	r3, r3, #8
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007daa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	031b      	lsls	r3, r3, #12
 8007db2:	693a      	ldr	r2, [r7, #16]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a13      	ldr	r2, [pc, #76]	@ (8007e08 <TIM_OC4_SetConfig+0xa8>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d003      	beq.n	8007dc8 <TIM_OC4_SetConfig+0x68>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a12      	ldr	r2, [pc, #72]	@ (8007e0c <TIM_OC4_SetConfig+0xac>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d109      	bne.n	8007ddc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007dce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	695b      	ldr	r3, [r3, #20]
 8007dd4:	019b      	lsls	r3, r3, #6
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	697a      	ldr	r2, [r7, #20]
 8007de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	685a      	ldr	r2, [r3, #4]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	693a      	ldr	r2, [r7, #16]
 8007df4:	621a      	str	r2, [r3, #32]
}
 8007df6:	bf00      	nop
 8007df8:	371c      	adds	r7, #28
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	feff8fff 	.word	0xfeff8fff
 8007e08:	40010000 	.word	0x40010000
 8007e0c:	40010400 	.word	0x40010400

08007e10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b087      	sub	sp, #28
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6a1b      	ldr	r3, [r3, #32]
 8007e24:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8007ea8 <TIM_OC5_SetConfig+0x98>)
 8007e3c:	4013      	ands	r3, r2
 8007e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007e50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	041b      	lsls	r3, r3, #16
 8007e58:	693a      	ldr	r2, [r7, #16]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a12      	ldr	r2, [pc, #72]	@ (8007eac <TIM_OC5_SetConfig+0x9c>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d003      	beq.n	8007e6e <TIM_OC5_SetConfig+0x5e>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a11      	ldr	r2, [pc, #68]	@ (8007eb0 <TIM_OC5_SetConfig+0xa0>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d109      	bne.n	8007e82 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	695b      	ldr	r3, [r3, #20]
 8007e7a:	021b      	lsls	r3, r3, #8
 8007e7c:	697a      	ldr	r2, [r7, #20]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	697a      	ldr	r2, [r7, #20]
 8007e86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	685a      	ldr	r2, [r3, #4]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	693a      	ldr	r2, [r7, #16]
 8007e9a:	621a      	str	r2, [r3, #32]
}
 8007e9c:	bf00      	nop
 8007e9e:	371c      	adds	r7, #28
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr
 8007ea8:	fffeff8f 	.word	0xfffeff8f
 8007eac:	40010000 	.word	0x40010000
 8007eb0:	40010400 	.word	0x40010400

08007eb4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b087      	sub	sp, #28
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
 8007ec2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a1b      	ldr	r3, [r3, #32]
 8007ec8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	4b1c      	ldr	r3, [pc, #112]	@ (8007f50 <TIM_OC6_SetConfig+0x9c>)
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	021b      	lsls	r3, r3, #8
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007ef6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	051b      	lsls	r3, r3, #20
 8007efe:	693a      	ldr	r2, [r7, #16]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a13      	ldr	r2, [pc, #76]	@ (8007f54 <TIM_OC6_SetConfig+0xa0>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d003      	beq.n	8007f14 <TIM_OC6_SetConfig+0x60>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a12      	ldr	r2, [pc, #72]	@ (8007f58 <TIM_OC6_SetConfig+0xa4>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d109      	bne.n	8007f28 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	695b      	ldr	r3, [r3, #20]
 8007f20:	029b      	lsls	r3, r3, #10
 8007f22:	697a      	ldr	r2, [r7, #20]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	697a      	ldr	r2, [r7, #20]
 8007f2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	685a      	ldr	r2, [r3, #4]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	693a      	ldr	r2, [r7, #16]
 8007f40:	621a      	str	r2, [r3, #32]
}
 8007f42:	bf00      	nop
 8007f44:	371c      	adds	r7, #28
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
 8007f4e:	bf00      	nop
 8007f50:	feff8fff 	.word	0xfeff8fff
 8007f54:	40010000 	.word	0x40010000
 8007f58:	40010400 	.word	0x40010400

08007f5c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b086      	sub	sp, #24
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f66:	2300      	movs	r3, #0
 8007f68:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f78:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	693a      	ldr	r2, [r7, #16]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007f84:	693a      	ldr	r2, [r7, #16]
 8007f86:	4b3e      	ldr	r3, [pc, #248]	@ (8008080 <TIM_SlaveTimer_SetConfig+0x124>)
 8007f88:	4013      	ands	r3, r2
 8007f8a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	693a      	ldr	r2, [r7, #16]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	693a      	ldr	r2, [r7, #16]
 8007f9c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	2b70      	cmp	r3, #112	@ 0x70
 8007fa4:	d01a      	beq.n	8007fdc <TIM_SlaveTimer_SetConfig+0x80>
 8007fa6:	2b70      	cmp	r3, #112	@ 0x70
 8007fa8:	d860      	bhi.n	800806c <TIM_SlaveTimer_SetConfig+0x110>
 8007faa:	2b60      	cmp	r3, #96	@ 0x60
 8007fac:	d054      	beq.n	8008058 <TIM_SlaveTimer_SetConfig+0xfc>
 8007fae:	2b60      	cmp	r3, #96	@ 0x60
 8007fb0:	d85c      	bhi.n	800806c <TIM_SlaveTimer_SetConfig+0x110>
 8007fb2:	2b50      	cmp	r3, #80	@ 0x50
 8007fb4:	d046      	beq.n	8008044 <TIM_SlaveTimer_SetConfig+0xe8>
 8007fb6:	2b50      	cmp	r3, #80	@ 0x50
 8007fb8:	d858      	bhi.n	800806c <TIM_SlaveTimer_SetConfig+0x110>
 8007fba:	2b40      	cmp	r3, #64	@ 0x40
 8007fbc:	d019      	beq.n	8007ff2 <TIM_SlaveTimer_SetConfig+0x96>
 8007fbe:	2b40      	cmp	r3, #64	@ 0x40
 8007fc0:	d854      	bhi.n	800806c <TIM_SlaveTimer_SetConfig+0x110>
 8007fc2:	2b30      	cmp	r3, #48	@ 0x30
 8007fc4:	d055      	beq.n	8008072 <TIM_SlaveTimer_SetConfig+0x116>
 8007fc6:	2b30      	cmp	r3, #48	@ 0x30
 8007fc8:	d850      	bhi.n	800806c <TIM_SlaveTimer_SetConfig+0x110>
 8007fca:	2b20      	cmp	r3, #32
 8007fcc:	d051      	beq.n	8008072 <TIM_SlaveTimer_SetConfig+0x116>
 8007fce:	2b20      	cmp	r3, #32
 8007fd0:	d84c      	bhi.n	800806c <TIM_SlaveTimer_SetConfig+0x110>
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d04d      	beq.n	8008072 <TIM_SlaveTimer_SetConfig+0x116>
 8007fd6:	2b10      	cmp	r3, #16
 8007fd8:	d04b      	beq.n	8008072 <TIM_SlaveTimer_SetConfig+0x116>
 8007fda:	e047      	b.n	800806c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8007fec:	f000 f8a9 	bl	8008142 <TIM_ETR_SetConfig>
      break;
 8007ff0:	e040      	b.n	8008074 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2b05      	cmp	r3, #5
 8007ff8:	d101      	bne.n	8007ffe <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e03b      	b.n	8008076 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	6a1b      	ldr	r3, [r3, #32]
 8008004:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	6a1a      	ldr	r2, [r3, #32]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f022 0201 	bic.w	r2, r2, #1
 8008014:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	699b      	ldr	r3, [r3, #24]
 800801c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008024:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	011b      	lsls	r3, r3, #4
 800802c:	68ba      	ldr	r2, [r7, #8]
 800802e:	4313      	orrs	r3, r2
 8008030:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	68ba      	ldr	r2, [r7, #8]
 8008038:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	621a      	str	r2, [r3, #32]
      break;
 8008042:	e017      	b.n	8008074 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008050:	461a      	mov	r2, r3
 8008052:	f000 f817 	bl	8008084 <TIM_TI1_ConfigInputStage>
      break;
 8008056:	e00d      	b.n	8008074 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008064:	461a      	mov	r2, r3
 8008066:	f000 f83c 	bl	80080e2 <TIM_TI2_ConfigInputStage>
      break;
 800806a:	e003      	b.n	8008074 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	75fb      	strb	r3, [r7, #23]
      break;
 8008070:	e000      	b.n	8008074 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8008072:	bf00      	nop
  }

  return status;
 8008074:	7dfb      	ldrb	r3, [r7, #23]
}
 8008076:	4618      	mov	r0, r3
 8008078:	3718      	adds	r7, #24
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	fffefff8 	.word	0xfffefff8

08008084 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008084:	b480      	push	{r7}
 8008086:	b087      	sub	sp, #28
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6a1b      	ldr	r3, [r3, #32]
 8008094:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	f023 0201 	bic.w	r2, r3, #1
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80080ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	011b      	lsls	r3, r3, #4
 80080b4:	693a      	ldr	r2, [r7, #16]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	f023 030a 	bic.w	r3, r3, #10
 80080c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080c2:	697a      	ldr	r2, [r7, #20]
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	693a      	ldr	r2, [r7, #16]
 80080ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	697a      	ldr	r2, [r7, #20]
 80080d4:	621a      	str	r2, [r3, #32]
}
 80080d6:	bf00      	nop
 80080d8:	371c      	adds	r7, #28
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr

080080e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080e2:	b480      	push	{r7}
 80080e4:	b087      	sub	sp, #28
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	60f8      	str	r0, [r7, #12]
 80080ea:	60b9      	str	r1, [r7, #8]
 80080ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6a1b      	ldr	r3, [r3, #32]
 80080f8:	f023 0210 	bic.w	r2, r3, #16
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800810c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	031b      	lsls	r3, r3, #12
 8008112:	693a      	ldr	r2, [r7, #16]
 8008114:	4313      	orrs	r3, r2
 8008116:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800811e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	011b      	lsls	r3, r3, #4
 8008124:	697a      	ldr	r2, [r7, #20]
 8008126:	4313      	orrs	r3, r2
 8008128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	693a      	ldr	r2, [r7, #16]
 800812e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	621a      	str	r2, [r3, #32]
}
 8008136:	bf00      	nop
 8008138:	371c      	adds	r7, #28
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr

08008142 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008142:	b480      	push	{r7}
 8008144:	b087      	sub	sp, #28
 8008146:	af00      	add	r7, sp, #0
 8008148:	60f8      	str	r0, [r7, #12]
 800814a:	60b9      	str	r1, [r7, #8]
 800814c:	607a      	str	r2, [r7, #4]
 800814e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800815c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	021a      	lsls	r2, r3, #8
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	431a      	orrs	r2, r3
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	4313      	orrs	r3, r2
 800816a:	697a      	ldr	r2, [r7, #20]
 800816c:	4313      	orrs	r3, r2
 800816e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	697a      	ldr	r2, [r7, #20]
 8008174:	609a      	str	r2, [r3, #8]
}
 8008176:	bf00      	nop
 8008178:	371c      	adds	r7, #28
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr

08008182 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008182:	b480      	push	{r7}
 8008184:	b087      	sub	sp, #28
 8008186:	af00      	add	r7, sp, #0
 8008188:	60f8      	str	r0, [r7, #12]
 800818a:	60b9      	str	r1, [r7, #8]
 800818c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	f003 031f 	and.w	r3, r3, #31
 8008194:	2201      	movs	r2, #1
 8008196:	fa02 f303 	lsl.w	r3, r2, r3
 800819a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6a1a      	ldr	r2, [r3, #32]
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	43db      	mvns	r3, r3
 80081a4:	401a      	ands	r2, r3
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6a1a      	ldr	r2, [r3, #32]
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	f003 031f 	and.w	r3, r3, #31
 80081b4:	6879      	ldr	r1, [r7, #4]
 80081b6:	fa01 f303 	lsl.w	r3, r1, r3
 80081ba:	431a      	orrs	r2, r3
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	621a      	str	r2, [r3, #32]
}
 80081c0:	bf00      	nop
 80081c2:	371c      	adds	r7, #28
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b085      	sub	sp, #20
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d101      	bne.n	80081e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081e0:	2302      	movs	r3, #2
 80081e2:	e06d      	b.n	80082c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2202      	movs	r2, #2
 80081f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a30      	ldr	r2, [pc, #192]	@ (80082cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d004      	beq.n	8008218 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a2f      	ldr	r2, [pc, #188]	@ (80082d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d108      	bne.n	800822a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800821e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	68fa      	ldr	r2, [r7, #12]
 8008226:	4313      	orrs	r3, r2
 8008228:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008230:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68fa      	ldr	r2, [r7, #12]
 8008238:	4313      	orrs	r3, r2
 800823a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a20      	ldr	r2, [pc, #128]	@ (80082cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d022      	beq.n	8008294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008256:	d01d      	beq.n	8008294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a1d      	ldr	r2, [pc, #116]	@ (80082d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d018      	beq.n	8008294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a1c      	ldr	r2, [pc, #112]	@ (80082d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d013      	beq.n	8008294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a1a      	ldr	r2, [pc, #104]	@ (80082dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d00e      	beq.n	8008294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a15      	ldr	r2, [pc, #84]	@ (80082d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d009      	beq.n	8008294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a16      	ldr	r2, [pc, #88]	@ (80082e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d004      	beq.n	8008294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a15      	ldr	r2, [pc, #84]	@ (80082e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d10c      	bne.n	80082ae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800829a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	68ba      	ldr	r2, [r7, #8]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3714      	adds	r7, #20
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr
 80082cc:	40010000 	.word	0x40010000
 80082d0:	40010400 	.word	0x40010400
 80082d4:	40000400 	.word	0x40000400
 80082d8:	40000800 	.word	0x40000800
 80082dc:	40000c00 	.word	0x40000c00
 80082e0:	40014000 	.word	0x40014000
 80082e4:	40001800 	.word	0x40001800

080082e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008318:	bf00      	nop
 800831a:	370c      	adds	r7, #12
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d101      	bne.n	8008336 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e040      	b.n	80083b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800833a:	2b00      	cmp	r3, #0
 800833c:	d106      	bne.n	800834c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f7fb fae8 	bl	800391c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2224      	movs	r2, #36	@ 0x24
 8008350:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f022 0201 	bic.w	r2, r2, #1
 8008360:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008366:	2b00      	cmp	r3, #0
 8008368:	d002      	beq.n	8008370 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 ff28 	bl	80091c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 fcc1 	bl	8008cf8 <UART_SetConfig>
 8008376:	4603      	mov	r3, r0
 8008378:	2b01      	cmp	r3, #1
 800837a:	d101      	bne.n	8008380 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	e01b      	b.n	80083b8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	685a      	ldr	r2, [r3, #4]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800838e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	689a      	ldr	r2, [r3, #8]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800839e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f042 0201 	orr.w	r2, r2, #1
 80083ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 ffa7 	bl	8009304 <UART_CheckIdleState>
 80083b6:	4603      	mov	r3, r0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b08a      	sub	sp, #40	@ 0x28
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	4613      	mov	r3, r2
 80083cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80083d2:	2b20      	cmp	r3, #32
 80083d4:	d165      	bne.n	80084a2 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d002      	beq.n	80083e2 <HAL_UART_Transmit_DMA+0x22>
 80083dc:	88fb      	ldrh	r3, [r7, #6]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d101      	bne.n	80083e6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	e05e      	b.n	80084a4 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	68ba      	ldr	r2, [r7, #8]
 80083ea:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	88fa      	ldrh	r2, [r7, #6]
 80083f0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	88fa      	ldrh	r2, [r7, #6]
 80083f8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2200      	movs	r2, #0
 8008400:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2221      	movs	r2, #33	@ 0x21
 8008408:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800840e:	2b00      	cmp	r3, #0
 8008410:	d027      	beq.n	8008462 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008416:	4a25      	ldr	r2, [pc, #148]	@ (80084ac <HAL_UART_Transmit_DMA+0xec>)
 8008418:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800841e:	4a24      	ldr	r2, [pc, #144]	@ (80084b0 <HAL_UART_Transmit_DMA+0xf0>)
 8008420:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008426:	4a23      	ldr	r2, [pc, #140]	@ (80084b4 <HAL_UART_Transmit_DMA+0xf4>)
 8008428:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800842e:	2200      	movs	r2, #0
 8008430:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800843a:	4619      	mov	r1, r3
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	3328      	adds	r3, #40	@ 0x28
 8008442:	461a      	mov	r2, r3
 8008444:	88fb      	ldrh	r3, [r7, #6]
 8008446:	f7fb ff6f 	bl	8004328 <HAL_DMA_Start_IT>
 800844a:	4603      	mov	r3, r0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d008      	beq.n	8008462 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2210      	movs	r2, #16
 8008454:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2220      	movs	r2, #32
 800845c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	e020      	b.n	80084a4 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	2240      	movs	r2, #64	@ 0x40
 8008468:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	3308      	adds	r3, #8
 8008470:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	e853 3f00 	ldrex	r3, [r3]
 8008478:	613b      	str	r3, [r7, #16]
   return(result);
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008480:	627b      	str	r3, [r7, #36]	@ 0x24
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	3308      	adds	r3, #8
 8008488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800848a:	623a      	str	r2, [r7, #32]
 800848c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848e:	69f9      	ldr	r1, [r7, #28]
 8008490:	6a3a      	ldr	r2, [r7, #32]
 8008492:	e841 2300 	strex	r3, r2, [r1]
 8008496:	61bb      	str	r3, [r7, #24]
   return(result);
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1e5      	bne.n	800846a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800849e:	2300      	movs	r3, #0
 80084a0:	e000      	b.n	80084a4 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80084a2:	2302      	movs	r3, #2
  }
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3728      	adds	r7, #40	@ 0x28
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	08009785 	.word	0x08009785
 80084b0:	0800981b 	.word	0x0800981b
 80084b4:	08009a07 	.word	0x08009a07

080084b8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b08a      	sub	sp, #40	@ 0x28
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	4613      	mov	r3, r2
 80084c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084cc:	2b20      	cmp	r3, #32
 80084ce:	d132      	bne.n	8008536 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d002      	beq.n	80084dc <HAL_UART_Receive_DMA+0x24>
 80084d6:	88fb      	ldrh	r3, [r7, #6]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d101      	bne.n	80084e0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	e02b      	b.n	8008538 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2200      	movs	r2, #0
 80084e4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d018      	beq.n	8008526 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	e853 3f00 	ldrex	r3, [r3]
 8008500:	613b      	str	r3, [r7, #16]
   return(result);
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008508:	627b      	str	r3, [r7, #36]	@ 0x24
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	461a      	mov	r2, r3
 8008510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008512:	623b      	str	r3, [r7, #32]
 8008514:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008516:	69f9      	ldr	r1, [r7, #28]
 8008518:	6a3a      	ldr	r2, [r7, #32]
 800851a:	e841 2300 	strex	r3, r2, [r1]
 800851e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1e6      	bne.n	80084f4 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008526:	88fb      	ldrh	r3, [r7, #6]
 8008528:	461a      	mov	r2, r3
 800852a:	68b9      	ldr	r1, [r7, #8]
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f000 ffff 	bl	8009530 <UART_Start_Receive_DMA>
 8008532:	4603      	mov	r3, r0
 8008534:	e000      	b.n	8008538 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8008536:	2302      	movs	r3, #2
  }
}
 8008538:	4618      	mov	r0, r3
 800853a:	3728      	adds	r7, #40	@ 0x28
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b090      	sub	sp, #64	@ 0x40
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800854c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008554:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008560:	2b80      	cmp	r3, #128	@ 0x80
 8008562:	d139      	bne.n	80085d8 <HAL_UART_DMAStop+0x98>
 8008564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008566:	2b21      	cmp	r3, #33	@ 0x21
 8008568:	d136      	bne.n	80085d8 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	3308      	adds	r3, #8
 8008570:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008572:	6a3b      	ldr	r3, [r7, #32]
 8008574:	e853 3f00 	ldrex	r3, [r3]
 8008578:	61fb      	str	r3, [r7, #28]
   return(result);
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008580:	637b      	str	r3, [r7, #52]	@ 0x34
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	3308      	adds	r3, #8
 8008588:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800858a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800858c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008590:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008592:	e841 2300 	strex	r3, r2, [r1]
 8008596:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1e5      	bne.n	800856a <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d015      	beq.n	80085d2 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7fb ff1c 	bl	80043e8 <HAL_DMA_Abort>
 80085b0:	4603      	mov	r3, r0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00d      	beq.n	80085d2 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7fc f930 	bl	8004820 <HAL_DMA_GetError>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b20      	cmp	r3, #32
 80085c4:	d105      	bne.n	80085d2 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2210      	movs	r2, #16
 80085ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80085ce:	2303      	movs	r3, #3
 80085d0:	e044      	b.n	800865c <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f001 f84c 	bl	8009670 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085e2:	2b40      	cmp	r3, #64	@ 0x40
 80085e4:	d139      	bne.n	800865a <HAL_UART_DMAStop+0x11a>
 80085e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085e8:	2b22      	cmp	r3, #34	@ 0x22
 80085ea:	d136      	bne.n	800865a <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	3308      	adds	r3, #8
 80085f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	e853 3f00 	ldrex	r3, [r3]
 80085fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008602:	633b      	str	r3, [r7, #48]	@ 0x30
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	3308      	adds	r3, #8
 800860a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800860c:	61ba      	str	r2, [r7, #24]
 800860e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008610:	6979      	ldr	r1, [r7, #20]
 8008612:	69ba      	ldr	r2, [r7, #24]
 8008614:	e841 2300 	strex	r3, r2, [r1]
 8008618:	613b      	str	r3, [r7, #16]
   return(result);
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d1e5      	bne.n	80085ec <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008624:	2b00      	cmp	r3, #0
 8008626:	d015      	beq.n	8008654 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800862c:	4618      	mov	r0, r3
 800862e:	f7fb fedb 	bl	80043e8 <HAL_DMA_Abort>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d00d      	beq.n	8008654 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800863c:	4618      	mov	r0, r3
 800863e:	f7fc f8ef 	bl	8004820 <HAL_DMA_GetError>
 8008642:	4603      	mov	r3, r0
 8008644:	2b20      	cmp	r3, #32
 8008646:	d105      	bne.n	8008654 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2210      	movs	r2, #16
 800864c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008650:	2303      	movs	r3, #3
 8008652:	e003      	b.n	800865c <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f001 f831 	bl	80096bc <UART_EndRxTransfer>
  }

  return HAL_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3740      	adds	r7, #64	@ 0x40
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b0ba      	sub	sp, #232	@ 0xe8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	69db      	ldr	r3, [r3, #28]
 8008672:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800868a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800868e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008692:	4013      	ands	r3, r2
 8008694:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008698:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800869c:	2b00      	cmp	r3, #0
 800869e:	d115      	bne.n	80086cc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80086a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086a4:	f003 0320 	and.w	r3, r3, #32
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00f      	beq.n	80086cc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80086ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086b0:	f003 0320 	and.w	r3, r3, #32
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d009      	beq.n	80086cc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80086bc:	2b00      	cmp	r3, #0
 80086be:	f000 82c6 	beq.w	8008c4e <HAL_UART_IRQHandler+0x5ea>
      {
        huart->RxISR(huart);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	4798      	blx	r3
      }
      return;
 80086ca:	e2c0      	b.n	8008c4e <HAL_UART_IRQHandler+0x5ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80086cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f000 8117 	beq.w	8008904 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80086d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086da:	f003 0301 	and.w	r3, r3, #1
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d106      	bne.n	80086f0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80086e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80086e6:	4b85      	ldr	r3, [pc, #532]	@ (80088fc <HAL_UART_IRQHandler+0x298>)
 80086e8:	4013      	ands	r3, r2
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f000 810a 	beq.w	8008904 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80086f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086f4:	f003 0301 	and.w	r3, r3, #1
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d011      	beq.n	8008720 <HAL_UART_IRQHandler+0xbc>
 80086fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00b      	beq.n	8008720 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2201      	movs	r2, #1
 800870e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008716:	f043 0201 	orr.w	r2, r3, #1
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008724:	f003 0302 	and.w	r3, r3, #2
 8008728:	2b00      	cmp	r3, #0
 800872a:	d011      	beq.n	8008750 <HAL_UART_IRQHandler+0xec>
 800872c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008730:	f003 0301 	and.w	r3, r3, #1
 8008734:	2b00      	cmp	r3, #0
 8008736:	d00b      	beq.n	8008750 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2202      	movs	r2, #2
 800873e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008746:	f043 0204 	orr.w	r2, r3, #4
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008754:	f003 0304 	and.w	r3, r3, #4
 8008758:	2b00      	cmp	r3, #0
 800875a:	d011      	beq.n	8008780 <HAL_UART_IRQHandler+0x11c>
 800875c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008760:	f003 0301 	and.w	r3, r3, #1
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00b      	beq.n	8008780 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2204      	movs	r2, #4
 800876e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008776:	f043 0202 	orr.w	r2, r3, #2
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008784:	f003 0308 	and.w	r3, r3, #8
 8008788:	2b00      	cmp	r3, #0
 800878a:	d017      	beq.n	80087bc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800878c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008790:	f003 0320 	and.w	r3, r3, #32
 8008794:	2b00      	cmp	r3, #0
 8008796:	d105      	bne.n	80087a4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008798:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800879c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00b      	beq.n	80087bc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2208      	movs	r2, #8
 80087aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087b2:	f043 0208 	orr.w	r2, r3, #8
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80087bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d012      	beq.n	80087ee <HAL_UART_IRQHandler+0x18a>
 80087c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00c      	beq.n	80087ee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80087dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087e4:	f043 0220 	orr.w	r2, r3, #32
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f000 822c 	beq.w	8008c52 <HAL_UART_IRQHandler+0x5ee>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80087fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087fe:	f003 0320 	and.w	r3, r3, #32
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00d      	beq.n	8008822 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800880a:	f003 0320 	and.w	r3, r3, #32
 800880e:	2b00      	cmp	r3, #0
 8008810:	d007      	beq.n	8008822 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008816:	2b00      	cmp	r3, #0
 8008818:	d003      	beq.n	8008822 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008828:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008836:	2b40      	cmp	r3, #64	@ 0x40
 8008838:	d005      	beq.n	8008846 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800883a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800883e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008842:	2b00      	cmp	r3, #0
 8008844:	d04f      	beq.n	80088e6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 ff38 	bl	80096bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008856:	2b40      	cmp	r3, #64	@ 0x40
 8008858:	d141      	bne.n	80088de <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	3308      	adds	r3, #8
 8008860:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008864:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008868:	e853 3f00 	ldrex	r3, [r3]
 800886c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008870:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008874:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008878:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	3308      	adds	r3, #8
 8008882:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008886:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800888a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008892:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008896:	e841 2300 	strex	r3, r2, [r1]
 800889a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800889e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d1d9      	bne.n	800885a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d013      	beq.n	80088d6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088b2:	4a13      	ldr	r2, [pc, #76]	@ (8008900 <HAL_UART_IRQHandler+0x29c>)
 80088b4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7fb fe04 	bl	80044c8 <HAL_DMA_Abort_IT>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d017      	beq.n	80088f6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80088d0:	4610      	mov	r0, r2
 80088d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088d4:	e00f      	b.n	80088f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 f9ee 	bl	8008cb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088dc:	e00b      	b.n	80088f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 f9ea 	bl	8008cb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088e4:	e007      	b.n	80088f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f9e6 	bl	8008cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80088f4:	e1ad      	b.n	8008c52 <HAL_UART_IRQHandler+0x5ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088f6:	bf00      	nop
    return;
 80088f8:	e1ab      	b.n	8008c52 <HAL_UART_IRQHandler+0x5ee>
 80088fa:	bf00      	nop
 80088fc:	04000120 	.word	0x04000120
 8008900:	08009a85 	.word	0x08009a85

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008908:	2b01      	cmp	r3, #1
 800890a:	f040 8166 	bne.w	8008bda <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800890e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008912:	f003 0310 	and.w	r3, r3, #16
 8008916:	2b00      	cmp	r3, #0
 8008918:	f000 815f 	beq.w	8008bda <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800891c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008920:	f003 0310 	and.w	r3, r3, #16
 8008924:	2b00      	cmp	r3, #0
 8008926:	f000 8158 	beq.w	8008bda <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2210      	movs	r2, #16
 8008930:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800893c:	2b40      	cmp	r3, #64	@ 0x40
 800893e:	f040 80d0 	bne.w	8008ae2 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800894e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008952:	2b00      	cmp	r3, #0
 8008954:	f000 80ab 	beq.w	8008aae <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800895e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008962:	429a      	cmp	r2, r3
 8008964:	f080 80a3 	bcs.w	8008aae <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800896e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008976:	69db      	ldr	r3, [r3, #28]
 8008978:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800897c:	f000 8086 	beq.w	8008a8c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008988:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800898c:	e853 3f00 	ldrex	r3, [r3]
 8008990:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008994:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008998:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800899c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	461a      	mov	r2, r3
 80089a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80089aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80089ae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80089b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80089ba:	e841 2300 	strex	r3, r2, [r1]
 80089be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80089c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d1da      	bne.n	8008980 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	3308      	adds	r3, #8
 80089d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80089d4:	e853 3f00 	ldrex	r3, [r3]
 80089d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80089da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80089dc:	f023 0301 	bic.w	r3, r3, #1
 80089e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	3308      	adds	r3, #8
 80089ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80089ee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80089f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80089f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80089fa:	e841 2300 	strex	r3, r2, [r1]
 80089fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008a00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d1e1      	bne.n	80089ca <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	3308      	adds	r3, #8
 8008a0c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a10:	e853 3f00 	ldrex	r3, [r3]
 8008a14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008a16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008a18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	3308      	adds	r3, #8
 8008a26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008a2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008a2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a2e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008a30:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008a32:	e841 2300 	strex	r3, r2, [r1]
 8008a36:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008a38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d1e3      	bne.n	8008a06 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2220      	movs	r2, #32
 8008a42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a54:	e853 3f00 	ldrex	r3, [r3]
 8008a58:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008a5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a5c:	f023 0310 	bic.w	r3, r3, #16
 8008a60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	461a      	mov	r2, r3
 8008a6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a70:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a72:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008a74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008a76:	e841 2300 	strex	r3, r2, [r1]
 8008a7a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008a7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1e4      	bne.n	8008a4c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7fb fcae 	bl	80043e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2202      	movs	r2, #2
 8008a90:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	1ad3      	subs	r3, r2, r3
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 f910 	bl	8008ccc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008aac:	e0d3      	b.n	8008c56 <HAL_UART_IRQHandler+0x5f2>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008ab4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	f040 80cc 	bne.w	8008c56 <HAL_UART_IRQHandler+0x5f2>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ac2:	69db      	ldr	r3, [r3, #28]
 8008ac4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ac8:	f040 80c5 	bne.w	8008c56 <HAL_UART_IRQHandler+0x5f2>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2202      	movs	r2, #2
 8008ad0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008ad8:	4619      	mov	r1, r3
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 f8f6 	bl	8008ccc <HAL_UARTEx_RxEventCallback>
      return;
 8008ae0:	e0b9      	b.n	8008c56 <HAL_UART_IRQHandler+0x5f2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	1ad3      	subs	r3, r2, r3
 8008af2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f000 80ab 	beq.w	8008c5a <HAL_UART_IRQHandler+0x5f6>
          && (nb_rx_data > 0U))
 8008b04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	f000 80a6 	beq.w	8008c5a <HAL_UART_IRQHandler+0x5f6>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b16:	e853 3f00 	ldrex	r3, [r3]
 8008b1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008b30:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b32:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b38:	e841 2300 	strex	r3, r2, [r1]
 8008b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d1e4      	bne.n	8008b0e <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	3308      	adds	r3, #8
 8008b4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b4e:	e853 3f00 	ldrex	r3, [r3]
 8008b52:	623b      	str	r3, [r7, #32]
   return(result);
 8008b54:	6a3b      	ldr	r3, [r7, #32]
 8008b56:	f023 0301 	bic.w	r3, r3, #1
 8008b5a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	3308      	adds	r3, #8
 8008b64:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008b68:	633a      	str	r2, [r7, #48]	@ 0x30
 8008b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b70:	e841 2300 	strex	r3, r2, [r1]
 8008b74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d1e3      	bne.n	8008b44 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2220      	movs	r2, #32
 8008b80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	e853 3f00 	ldrex	r3, [r3]
 8008b9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f023 0310 	bic.w	r3, r3, #16
 8008ba4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	461a      	mov	r2, r3
 8008bae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008bb2:	61fb      	str	r3, [r7, #28]
 8008bb4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb6:	69b9      	ldr	r1, [r7, #24]
 8008bb8:	69fa      	ldr	r2, [r7, #28]
 8008bba:	e841 2300 	strex	r3, r2, [r1]
 8008bbe:	617b      	str	r3, [r7, #20]
   return(result);
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d1e4      	bne.n	8008b90 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2202      	movs	r2, #2
 8008bca:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008bcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f87a 	bl	8008ccc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008bd8:	e03f      	b.n	8008c5a <HAL_UART_IRQHandler+0x5f6>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d00e      	beq.n	8008c04 <HAL_UART_IRQHandler+0x5a0>
 8008be6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d008      	beq.n	8008c04 <HAL_UART_IRQHandler+0x5a0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008bfa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 f871 	bl	8008ce4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c02:	e02d      	b.n	8008c60 <HAL_UART_IRQHandler+0x5fc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00e      	beq.n	8008c2e <HAL_UART_IRQHandler+0x5ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d008      	beq.n	8008c2e <HAL_UART_IRQHandler+0x5ca>
  {
    if (huart->TxISR != NULL)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d01c      	beq.n	8008c5e <HAL_UART_IRQHandler+0x5fa>
    {
      huart->TxISR(huart);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	4798      	blx	r3
    }
    return;
 8008c2c:	e017      	b.n	8008c5e <HAL_UART_IRQHandler+0x5fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d012      	beq.n	8008c60 <HAL_UART_IRQHandler+0x5fc>
 8008c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d00c      	beq.n	8008c60 <HAL_UART_IRQHandler+0x5fc>
  {
    UART_EndTransmit_IT(huart);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 ff2e 	bl	8009aa8 <UART_EndTransmit_IT>
    return;
 8008c4c:	e008      	b.n	8008c60 <HAL_UART_IRQHandler+0x5fc>
      return;
 8008c4e:	bf00      	nop
 8008c50:	e006      	b.n	8008c60 <HAL_UART_IRQHandler+0x5fc>
    return;
 8008c52:	bf00      	nop
 8008c54:	e004      	b.n	8008c60 <HAL_UART_IRQHandler+0x5fc>
      return;
 8008c56:	bf00      	nop
 8008c58:	e002      	b.n	8008c60 <HAL_UART_IRQHandler+0x5fc>
      return;
 8008c5a:	bf00      	nop
 8008c5c:	e000      	b.n	8008c60 <HAL_UART_IRQHandler+0x5fc>
    return;
 8008c5e:	bf00      	nop
  }

}
 8008c60:	37e8      	adds	r7, #232	@ 0xe8
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop

08008c68 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008c70:	bf00      	nop
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008c84:	bf00      	nop
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008c98:	bf00      	nop
 8008c9a:	370c      	adds	r7, #12
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008cac:	bf00      	nop
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008cd8:	bf00      	nop
 8008cda:	370c      	adds	r7, #12
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008cec:	bf00      	nop
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr

08008cf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b088      	sub	sp, #32
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d00:	2300      	movs	r3, #0
 8008d02:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	689a      	ldr	r2, [r3, #8]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	691b      	ldr	r3, [r3, #16]
 8008d0c:	431a      	orrs	r2, r3
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	695b      	ldr	r3, [r3, #20]
 8008d12:	431a      	orrs	r2, r3
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	69db      	ldr	r3, [r3, #28]
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	4ba6      	ldr	r3, [pc, #664]	@ (8008fbc <UART_SetConfig+0x2c4>)
 8008d24:	4013      	ands	r3, r2
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	6812      	ldr	r2, [r2, #0]
 8008d2a:	6979      	ldr	r1, [r7, #20]
 8008d2c:	430b      	orrs	r3, r1
 8008d2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	68da      	ldr	r2, [r3, #12]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	430a      	orrs	r2, r1
 8008d44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	699b      	ldr	r3, [r3, #24]
 8008d4a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6a1b      	ldr	r3, [r3, #32]
 8008d50:	697a      	ldr	r2, [r7, #20]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	697a      	ldr	r2, [r7, #20]
 8008d66:	430a      	orrs	r2, r1
 8008d68:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a94      	ldr	r2, [pc, #592]	@ (8008fc0 <UART_SetConfig+0x2c8>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d120      	bne.n	8008db6 <UART_SetConfig+0xbe>
 8008d74:	4b93      	ldr	r3, [pc, #588]	@ (8008fc4 <UART_SetConfig+0x2cc>)
 8008d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d7a:	f003 0303 	and.w	r3, r3, #3
 8008d7e:	2b03      	cmp	r3, #3
 8008d80:	d816      	bhi.n	8008db0 <UART_SetConfig+0xb8>
 8008d82:	a201      	add	r2, pc, #4	@ (adr r2, 8008d88 <UART_SetConfig+0x90>)
 8008d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d88:	08008d99 	.word	0x08008d99
 8008d8c:	08008da5 	.word	0x08008da5
 8008d90:	08008d9f 	.word	0x08008d9f
 8008d94:	08008dab 	.word	0x08008dab
 8008d98:	2301      	movs	r3, #1
 8008d9a:	77fb      	strb	r3, [r7, #31]
 8008d9c:	e150      	b.n	8009040 <UART_SetConfig+0x348>
 8008d9e:	2302      	movs	r3, #2
 8008da0:	77fb      	strb	r3, [r7, #31]
 8008da2:	e14d      	b.n	8009040 <UART_SetConfig+0x348>
 8008da4:	2304      	movs	r3, #4
 8008da6:	77fb      	strb	r3, [r7, #31]
 8008da8:	e14a      	b.n	8009040 <UART_SetConfig+0x348>
 8008daa:	2308      	movs	r3, #8
 8008dac:	77fb      	strb	r3, [r7, #31]
 8008dae:	e147      	b.n	8009040 <UART_SetConfig+0x348>
 8008db0:	2310      	movs	r3, #16
 8008db2:	77fb      	strb	r3, [r7, #31]
 8008db4:	e144      	b.n	8009040 <UART_SetConfig+0x348>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a83      	ldr	r2, [pc, #524]	@ (8008fc8 <UART_SetConfig+0x2d0>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d132      	bne.n	8008e26 <UART_SetConfig+0x12e>
 8008dc0:	4b80      	ldr	r3, [pc, #512]	@ (8008fc4 <UART_SetConfig+0x2cc>)
 8008dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dc6:	f003 030c 	and.w	r3, r3, #12
 8008dca:	2b0c      	cmp	r3, #12
 8008dcc:	d828      	bhi.n	8008e20 <UART_SetConfig+0x128>
 8008dce:	a201      	add	r2, pc, #4	@ (adr r2, 8008dd4 <UART_SetConfig+0xdc>)
 8008dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd4:	08008e09 	.word	0x08008e09
 8008dd8:	08008e21 	.word	0x08008e21
 8008ddc:	08008e21 	.word	0x08008e21
 8008de0:	08008e21 	.word	0x08008e21
 8008de4:	08008e15 	.word	0x08008e15
 8008de8:	08008e21 	.word	0x08008e21
 8008dec:	08008e21 	.word	0x08008e21
 8008df0:	08008e21 	.word	0x08008e21
 8008df4:	08008e0f 	.word	0x08008e0f
 8008df8:	08008e21 	.word	0x08008e21
 8008dfc:	08008e21 	.word	0x08008e21
 8008e00:	08008e21 	.word	0x08008e21
 8008e04:	08008e1b 	.word	0x08008e1b
 8008e08:	2300      	movs	r3, #0
 8008e0a:	77fb      	strb	r3, [r7, #31]
 8008e0c:	e118      	b.n	8009040 <UART_SetConfig+0x348>
 8008e0e:	2302      	movs	r3, #2
 8008e10:	77fb      	strb	r3, [r7, #31]
 8008e12:	e115      	b.n	8009040 <UART_SetConfig+0x348>
 8008e14:	2304      	movs	r3, #4
 8008e16:	77fb      	strb	r3, [r7, #31]
 8008e18:	e112      	b.n	8009040 <UART_SetConfig+0x348>
 8008e1a:	2308      	movs	r3, #8
 8008e1c:	77fb      	strb	r3, [r7, #31]
 8008e1e:	e10f      	b.n	8009040 <UART_SetConfig+0x348>
 8008e20:	2310      	movs	r3, #16
 8008e22:	77fb      	strb	r3, [r7, #31]
 8008e24:	e10c      	b.n	8009040 <UART_SetConfig+0x348>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a68      	ldr	r2, [pc, #416]	@ (8008fcc <UART_SetConfig+0x2d4>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d120      	bne.n	8008e72 <UART_SetConfig+0x17a>
 8008e30:	4b64      	ldr	r3, [pc, #400]	@ (8008fc4 <UART_SetConfig+0x2cc>)
 8008e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e36:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008e3a:	2b30      	cmp	r3, #48	@ 0x30
 8008e3c:	d013      	beq.n	8008e66 <UART_SetConfig+0x16e>
 8008e3e:	2b30      	cmp	r3, #48	@ 0x30
 8008e40:	d814      	bhi.n	8008e6c <UART_SetConfig+0x174>
 8008e42:	2b20      	cmp	r3, #32
 8008e44:	d009      	beq.n	8008e5a <UART_SetConfig+0x162>
 8008e46:	2b20      	cmp	r3, #32
 8008e48:	d810      	bhi.n	8008e6c <UART_SetConfig+0x174>
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d002      	beq.n	8008e54 <UART_SetConfig+0x15c>
 8008e4e:	2b10      	cmp	r3, #16
 8008e50:	d006      	beq.n	8008e60 <UART_SetConfig+0x168>
 8008e52:	e00b      	b.n	8008e6c <UART_SetConfig+0x174>
 8008e54:	2300      	movs	r3, #0
 8008e56:	77fb      	strb	r3, [r7, #31]
 8008e58:	e0f2      	b.n	8009040 <UART_SetConfig+0x348>
 8008e5a:	2302      	movs	r3, #2
 8008e5c:	77fb      	strb	r3, [r7, #31]
 8008e5e:	e0ef      	b.n	8009040 <UART_SetConfig+0x348>
 8008e60:	2304      	movs	r3, #4
 8008e62:	77fb      	strb	r3, [r7, #31]
 8008e64:	e0ec      	b.n	8009040 <UART_SetConfig+0x348>
 8008e66:	2308      	movs	r3, #8
 8008e68:	77fb      	strb	r3, [r7, #31]
 8008e6a:	e0e9      	b.n	8009040 <UART_SetConfig+0x348>
 8008e6c:	2310      	movs	r3, #16
 8008e6e:	77fb      	strb	r3, [r7, #31]
 8008e70:	e0e6      	b.n	8009040 <UART_SetConfig+0x348>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a56      	ldr	r2, [pc, #344]	@ (8008fd0 <UART_SetConfig+0x2d8>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d120      	bne.n	8008ebe <UART_SetConfig+0x1c6>
 8008e7c:	4b51      	ldr	r3, [pc, #324]	@ (8008fc4 <UART_SetConfig+0x2cc>)
 8008e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e82:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008e86:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e88:	d013      	beq.n	8008eb2 <UART_SetConfig+0x1ba>
 8008e8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e8c:	d814      	bhi.n	8008eb8 <UART_SetConfig+0x1c0>
 8008e8e:	2b80      	cmp	r3, #128	@ 0x80
 8008e90:	d009      	beq.n	8008ea6 <UART_SetConfig+0x1ae>
 8008e92:	2b80      	cmp	r3, #128	@ 0x80
 8008e94:	d810      	bhi.n	8008eb8 <UART_SetConfig+0x1c0>
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d002      	beq.n	8008ea0 <UART_SetConfig+0x1a8>
 8008e9a:	2b40      	cmp	r3, #64	@ 0x40
 8008e9c:	d006      	beq.n	8008eac <UART_SetConfig+0x1b4>
 8008e9e:	e00b      	b.n	8008eb8 <UART_SetConfig+0x1c0>
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	77fb      	strb	r3, [r7, #31]
 8008ea4:	e0cc      	b.n	8009040 <UART_SetConfig+0x348>
 8008ea6:	2302      	movs	r3, #2
 8008ea8:	77fb      	strb	r3, [r7, #31]
 8008eaa:	e0c9      	b.n	8009040 <UART_SetConfig+0x348>
 8008eac:	2304      	movs	r3, #4
 8008eae:	77fb      	strb	r3, [r7, #31]
 8008eb0:	e0c6      	b.n	8009040 <UART_SetConfig+0x348>
 8008eb2:	2308      	movs	r3, #8
 8008eb4:	77fb      	strb	r3, [r7, #31]
 8008eb6:	e0c3      	b.n	8009040 <UART_SetConfig+0x348>
 8008eb8:	2310      	movs	r3, #16
 8008eba:	77fb      	strb	r3, [r7, #31]
 8008ebc:	e0c0      	b.n	8009040 <UART_SetConfig+0x348>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a44      	ldr	r2, [pc, #272]	@ (8008fd4 <UART_SetConfig+0x2dc>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d125      	bne.n	8008f14 <UART_SetConfig+0x21c>
 8008ec8:	4b3e      	ldr	r3, [pc, #248]	@ (8008fc4 <UART_SetConfig+0x2cc>)
 8008eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ece:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ed2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ed6:	d017      	beq.n	8008f08 <UART_SetConfig+0x210>
 8008ed8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008edc:	d817      	bhi.n	8008f0e <UART_SetConfig+0x216>
 8008ede:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ee2:	d00b      	beq.n	8008efc <UART_SetConfig+0x204>
 8008ee4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ee8:	d811      	bhi.n	8008f0e <UART_SetConfig+0x216>
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d003      	beq.n	8008ef6 <UART_SetConfig+0x1fe>
 8008eee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ef2:	d006      	beq.n	8008f02 <UART_SetConfig+0x20a>
 8008ef4:	e00b      	b.n	8008f0e <UART_SetConfig+0x216>
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	77fb      	strb	r3, [r7, #31]
 8008efa:	e0a1      	b.n	8009040 <UART_SetConfig+0x348>
 8008efc:	2302      	movs	r3, #2
 8008efe:	77fb      	strb	r3, [r7, #31]
 8008f00:	e09e      	b.n	8009040 <UART_SetConfig+0x348>
 8008f02:	2304      	movs	r3, #4
 8008f04:	77fb      	strb	r3, [r7, #31]
 8008f06:	e09b      	b.n	8009040 <UART_SetConfig+0x348>
 8008f08:	2308      	movs	r3, #8
 8008f0a:	77fb      	strb	r3, [r7, #31]
 8008f0c:	e098      	b.n	8009040 <UART_SetConfig+0x348>
 8008f0e:	2310      	movs	r3, #16
 8008f10:	77fb      	strb	r3, [r7, #31]
 8008f12:	e095      	b.n	8009040 <UART_SetConfig+0x348>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a2f      	ldr	r2, [pc, #188]	@ (8008fd8 <UART_SetConfig+0x2e0>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d125      	bne.n	8008f6a <UART_SetConfig+0x272>
 8008f1e:	4b29      	ldr	r3, [pc, #164]	@ (8008fc4 <UART_SetConfig+0x2cc>)
 8008f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008f28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f2c:	d017      	beq.n	8008f5e <UART_SetConfig+0x266>
 8008f2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f32:	d817      	bhi.n	8008f64 <UART_SetConfig+0x26c>
 8008f34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f38:	d00b      	beq.n	8008f52 <UART_SetConfig+0x25a>
 8008f3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f3e:	d811      	bhi.n	8008f64 <UART_SetConfig+0x26c>
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d003      	beq.n	8008f4c <UART_SetConfig+0x254>
 8008f44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f48:	d006      	beq.n	8008f58 <UART_SetConfig+0x260>
 8008f4a:	e00b      	b.n	8008f64 <UART_SetConfig+0x26c>
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	77fb      	strb	r3, [r7, #31]
 8008f50:	e076      	b.n	8009040 <UART_SetConfig+0x348>
 8008f52:	2302      	movs	r3, #2
 8008f54:	77fb      	strb	r3, [r7, #31]
 8008f56:	e073      	b.n	8009040 <UART_SetConfig+0x348>
 8008f58:	2304      	movs	r3, #4
 8008f5a:	77fb      	strb	r3, [r7, #31]
 8008f5c:	e070      	b.n	8009040 <UART_SetConfig+0x348>
 8008f5e:	2308      	movs	r3, #8
 8008f60:	77fb      	strb	r3, [r7, #31]
 8008f62:	e06d      	b.n	8009040 <UART_SetConfig+0x348>
 8008f64:	2310      	movs	r3, #16
 8008f66:	77fb      	strb	r3, [r7, #31]
 8008f68:	e06a      	b.n	8009040 <UART_SetConfig+0x348>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a1b      	ldr	r2, [pc, #108]	@ (8008fdc <UART_SetConfig+0x2e4>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d138      	bne.n	8008fe6 <UART_SetConfig+0x2ee>
 8008f74:	4b13      	ldr	r3, [pc, #76]	@ (8008fc4 <UART_SetConfig+0x2cc>)
 8008f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f7a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008f7e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008f82:	d017      	beq.n	8008fb4 <UART_SetConfig+0x2bc>
 8008f84:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008f88:	d82a      	bhi.n	8008fe0 <UART_SetConfig+0x2e8>
 8008f8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f8e:	d00b      	beq.n	8008fa8 <UART_SetConfig+0x2b0>
 8008f90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f94:	d824      	bhi.n	8008fe0 <UART_SetConfig+0x2e8>
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d003      	beq.n	8008fa2 <UART_SetConfig+0x2aa>
 8008f9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f9e:	d006      	beq.n	8008fae <UART_SetConfig+0x2b6>
 8008fa0:	e01e      	b.n	8008fe0 <UART_SetConfig+0x2e8>
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	77fb      	strb	r3, [r7, #31]
 8008fa6:	e04b      	b.n	8009040 <UART_SetConfig+0x348>
 8008fa8:	2302      	movs	r3, #2
 8008faa:	77fb      	strb	r3, [r7, #31]
 8008fac:	e048      	b.n	8009040 <UART_SetConfig+0x348>
 8008fae:	2304      	movs	r3, #4
 8008fb0:	77fb      	strb	r3, [r7, #31]
 8008fb2:	e045      	b.n	8009040 <UART_SetConfig+0x348>
 8008fb4:	2308      	movs	r3, #8
 8008fb6:	77fb      	strb	r3, [r7, #31]
 8008fb8:	e042      	b.n	8009040 <UART_SetConfig+0x348>
 8008fba:	bf00      	nop
 8008fbc:	efff69f3 	.word	0xefff69f3
 8008fc0:	40011000 	.word	0x40011000
 8008fc4:	40023800 	.word	0x40023800
 8008fc8:	40004400 	.word	0x40004400
 8008fcc:	40004800 	.word	0x40004800
 8008fd0:	40004c00 	.word	0x40004c00
 8008fd4:	40005000 	.word	0x40005000
 8008fd8:	40011400 	.word	0x40011400
 8008fdc:	40007800 	.word	0x40007800
 8008fe0:	2310      	movs	r3, #16
 8008fe2:	77fb      	strb	r3, [r7, #31]
 8008fe4:	e02c      	b.n	8009040 <UART_SetConfig+0x348>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a72      	ldr	r2, [pc, #456]	@ (80091b4 <UART_SetConfig+0x4bc>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d125      	bne.n	800903c <UART_SetConfig+0x344>
 8008ff0:	4b71      	ldr	r3, [pc, #452]	@ (80091b8 <UART_SetConfig+0x4c0>)
 8008ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ff6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008ffa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008ffe:	d017      	beq.n	8009030 <UART_SetConfig+0x338>
 8009000:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009004:	d817      	bhi.n	8009036 <UART_SetConfig+0x33e>
 8009006:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800900a:	d00b      	beq.n	8009024 <UART_SetConfig+0x32c>
 800900c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009010:	d811      	bhi.n	8009036 <UART_SetConfig+0x33e>
 8009012:	2b00      	cmp	r3, #0
 8009014:	d003      	beq.n	800901e <UART_SetConfig+0x326>
 8009016:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800901a:	d006      	beq.n	800902a <UART_SetConfig+0x332>
 800901c:	e00b      	b.n	8009036 <UART_SetConfig+0x33e>
 800901e:	2300      	movs	r3, #0
 8009020:	77fb      	strb	r3, [r7, #31]
 8009022:	e00d      	b.n	8009040 <UART_SetConfig+0x348>
 8009024:	2302      	movs	r3, #2
 8009026:	77fb      	strb	r3, [r7, #31]
 8009028:	e00a      	b.n	8009040 <UART_SetConfig+0x348>
 800902a:	2304      	movs	r3, #4
 800902c:	77fb      	strb	r3, [r7, #31]
 800902e:	e007      	b.n	8009040 <UART_SetConfig+0x348>
 8009030:	2308      	movs	r3, #8
 8009032:	77fb      	strb	r3, [r7, #31]
 8009034:	e004      	b.n	8009040 <UART_SetConfig+0x348>
 8009036:	2310      	movs	r3, #16
 8009038:	77fb      	strb	r3, [r7, #31]
 800903a:	e001      	b.n	8009040 <UART_SetConfig+0x348>
 800903c:	2310      	movs	r3, #16
 800903e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	69db      	ldr	r3, [r3, #28]
 8009044:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009048:	d15b      	bne.n	8009102 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800904a:	7ffb      	ldrb	r3, [r7, #31]
 800904c:	2b08      	cmp	r3, #8
 800904e:	d828      	bhi.n	80090a2 <UART_SetConfig+0x3aa>
 8009050:	a201      	add	r2, pc, #4	@ (adr r2, 8009058 <UART_SetConfig+0x360>)
 8009052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009056:	bf00      	nop
 8009058:	0800907d 	.word	0x0800907d
 800905c:	08009085 	.word	0x08009085
 8009060:	0800908d 	.word	0x0800908d
 8009064:	080090a3 	.word	0x080090a3
 8009068:	08009093 	.word	0x08009093
 800906c:	080090a3 	.word	0x080090a3
 8009070:	080090a3 	.word	0x080090a3
 8009074:	080090a3 	.word	0x080090a3
 8009078:	0800909b 	.word	0x0800909b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800907c:	f7fd f976 	bl	800636c <HAL_RCC_GetPCLK1Freq>
 8009080:	61b8      	str	r0, [r7, #24]
        break;
 8009082:	e013      	b.n	80090ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009084:	f7fd f986 	bl	8006394 <HAL_RCC_GetPCLK2Freq>
 8009088:	61b8      	str	r0, [r7, #24]
        break;
 800908a:	e00f      	b.n	80090ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800908c:	4b4b      	ldr	r3, [pc, #300]	@ (80091bc <UART_SetConfig+0x4c4>)
 800908e:	61bb      	str	r3, [r7, #24]
        break;
 8009090:	e00c      	b.n	80090ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009092:	f7fd f859 	bl	8006148 <HAL_RCC_GetSysClockFreq>
 8009096:	61b8      	str	r0, [r7, #24]
        break;
 8009098:	e008      	b.n	80090ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800909a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800909e:	61bb      	str	r3, [r7, #24]
        break;
 80090a0:	e004      	b.n	80090ac <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80090a2:	2300      	movs	r3, #0
 80090a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	77bb      	strb	r3, [r7, #30]
        break;
 80090aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80090ac:	69bb      	ldr	r3, [r7, #24]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d074      	beq.n	800919c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	005a      	lsls	r2, r3, #1
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	085b      	lsrs	r3, r3, #1
 80090bc:	441a      	add	r2, r3
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80090c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	2b0f      	cmp	r3, #15
 80090cc:	d916      	bls.n	80090fc <UART_SetConfig+0x404>
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090d4:	d212      	bcs.n	80090fc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	b29b      	uxth	r3, r3
 80090da:	f023 030f 	bic.w	r3, r3, #15
 80090de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	085b      	lsrs	r3, r3, #1
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	f003 0307 	and.w	r3, r3, #7
 80090ea:	b29a      	uxth	r2, r3
 80090ec:	89fb      	ldrh	r3, [r7, #14]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	89fa      	ldrh	r2, [r7, #14]
 80090f8:	60da      	str	r2, [r3, #12]
 80090fa:	e04f      	b.n	800919c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	77bb      	strb	r3, [r7, #30]
 8009100:	e04c      	b.n	800919c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009102:	7ffb      	ldrb	r3, [r7, #31]
 8009104:	2b08      	cmp	r3, #8
 8009106:	d828      	bhi.n	800915a <UART_SetConfig+0x462>
 8009108:	a201      	add	r2, pc, #4	@ (adr r2, 8009110 <UART_SetConfig+0x418>)
 800910a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800910e:	bf00      	nop
 8009110:	08009135 	.word	0x08009135
 8009114:	0800913d 	.word	0x0800913d
 8009118:	08009145 	.word	0x08009145
 800911c:	0800915b 	.word	0x0800915b
 8009120:	0800914b 	.word	0x0800914b
 8009124:	0800915b 	.word	0x0800915b
 8009128:	0800915b 	.word	0x0800915b
 800912c:	0800915b 	.word	0x0800915b
 8009130:	08009153 	.word	0x08009153
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009134:	f7fd f91a 	bl	800636c <HAL_RCC_GetPCLK1Freq>
 8009138:	61b8      	str	r0, [r7, #24]
        break;
 800913a:	e013      	b.n	8009164 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800913c:	f7fd f92a 	bl	8006394 <HAL_RCC_GetPCLK2Freq>
 8009140:	61b8      	str	r0, [r7, #24]
        break;
 8009142:	e00f      	b.n	8009164 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009144:	4b1d      	ldr	r3, [pc, #116]	@ (80091bc <UART_SetConfig+0x4c4>)
 8009146:	61bb      	str	r3, [r7, #24]
        break;
 8009148:	e00c      	b.n	8009164 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800914a:	f7fc fffd 	bl	8006148 <HAL_RCC_GetSysClockFreq>
 800914e:	61b8      	str	r0, [r7, #24]
        break;
 8009150:	e008      	b.n	8009164 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009152:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009156:	61bb      	str	r3, [r7, #24]
        break;
 8009158:	e004      	b.n	8009164 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800915a:	2300      	movs	r3, #0
 800915c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800915e:	2301      	movs	r3, #1
 8009160:	77bb      	strb	r3, [r7, #30]
        break;
 8009162:	bf00      	nop
    }

    if (pclk != 0U)
 8009164:	69bb      	ldr	r3, [r7, #24]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d018      	beq.n	800919c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	085a      	lsrs	r2, r3, #1
 8009170:	69bb      	ldr	r3, [r7, #24]
 8009172:	441a      	add	r2, r3
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	fbb2 f3f3 	udiv	r3, r2, r3
 800917c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	2b0f      	cmp	r3, #15
 8009182:	d909      	bls.n	8009198 <UART_SetConfig+0x4a0>
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800918a:	d205      	bcs.n	8009198 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	b29a      	uxth	r2, r3
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	60da      	str	r2, [r3, #12]
 8009196:	e001      	b.n	800919c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009198:	2301      	movs	r3, #1
 800919a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80091a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3720      	adds	r7, #32
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	40007c00 	.word	0x40007c00
 80091b8:	40023800 	.word	0x40023800
 80091bc:	00f42400 	.word	0x00f42400

080091c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091cc:	f003 0308 	and.w	r3, r3, #8
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00a      	beq.n	80091ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	430a      	orrs	r2, r1
 80091e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ee:	f003 0301 	and.w	r3, r3, #1
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00a      	beq.n	800920c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	430a      	orrs	r2, r1
 800920a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009210:	f003 0302 	and.w	r3, r3, #2
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00a      	beq.n	800922e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	430a      	orrs	r2, r1
 800922c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009232:	f003 0304 	and.w	r3, r3, #4
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00a      	beq.n	8009250 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	430a      	orrs	r2, r1
 800924e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009254:	f003 0310 	and.w	r3, r3, #16
 8009258:	2b00      	cmp	r3, #0
 800925a:	d00a      	beq.n	8009272 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	430a      	orrs	r2, r1
 8009270:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009276:	f003 0320 	and.w	r3, r3, #32
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00a      	beq.n	8009294 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	430a      	orrs	r2, r1
 8009292:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800929c:	2b00      	cmp	r3, #0
 800929e:	d01a      	beq.n	80092d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	430a      	orrs	r2, r1
 80092b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092be:	d10a      	bne.n	80092d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	430a      	orrs	r2, r1
 80092d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d00a      	beq.n	80092f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	430a      	orrs	r2, r1
 80092f6:	605a      	str	r2, [r3, #4]
  }
}
 80092f8:	bf00      	nop
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b098      	sub	sp, #96	@ 0x60
 8009308:	af02      	add	r7, sp, #8
 800930a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009314:	f7fa fe6c 	bl	8003ff0 <HAL_GetTick>
 8009318:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f003 0308 	and.w	r3, r3, #8
 8009324:	2b08      	cmp	r3, #8
 8009326:	d12e      	bne.n	8009386 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009328:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800932c:	9300      	str	r3, [sp, #0]
 800932e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009330:	2200      	movs	r2, #0
 8009332:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 f88c 	bl	8009454 <UART_WaitOnFlagUntilTimeout>
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d021      	beq.n	8009386 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800934a:	e853 3f00 	ldrex	r3, [r3]
 800934e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009352:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009356:	653b      	str	r3, [r7, #80]	@ 0x50
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	461a      	mov	r2, r3
 800935e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009360:	647b      	str	r3, [r7, #68]	@ 0x44
 8009362:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009364:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009366:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009368:	e841 2300 	strex	r3, r2, [r1]
 800936c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800936e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009370:	2b00      	cmp	r3, #0
 8009372:	d1e6      	bne.n	8009342 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2220      	movs	r2, #32
 8009378:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2200      	movs	r2, #0
 800937e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009382:	2303      	movs	r3, #3
 8009384:	e062      	b.n	800944c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f003 0304 	and.w	r3, r3, #4
 8009390:	2b04      	cmp	r3, #4
 8009392:	d149      	bne.n	8009428 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009394:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009398:	9300      	str	r3, [sp, #0]
 800939a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800939c:	2200      	movs	r2, #0
 800939e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 f856 	bl	8009454 <UART_WaitOnFlagUntilTimeout>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d03c      	beq.n	8009428 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b6:	e853 3f00 	ldrex	r3, [r3]
 80093ba:	623b      	str	r3, [r7, #32]
   return(result);
 80093bc:	6a3b      	ldr	r3, [r7, #32]
 80093be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	461a      	mov	r2, r3
 80093ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80093ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093d4:	e841 2300 	strex	r3, r2, [r1]
 80093d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80093da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d1e6      	bne.n	80093ae <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	3308      	adds	r3, #8
 80093e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	e853 3f00 	ldrex	r3, [r3]
 80093ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f023 0301 	bic.w	r3, r3, #1
 80093f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	3308      	adds	r3, #8
 80093fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009400:	61fa      	str	r2, [r7, #28]
 8009402:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009404:	69b9      	ldr	r1, [r7, #24]
 8009406:	69fa      	ldr	r2, [r7, #28]
 8009408:	e841 2300 	strex	r3, r2, [r1]
 800940c:	617b      	str	r3, [r7, #20]
   return(result);
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1e5      	bne.n	80093e0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2220      	movs	r2, #32
 8009418:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009424:	2303      	movs	r3, #3
 8009426:	e011      	b.n	800944c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2220      	movs	r2, #32
 800942c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2220      	movs	r2, #32
 8009432:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2200      	movs	r2, #0
 800943a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2200      	movs	r2, #0
 8009446:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800944a:	2300      	movs	r3, #0
}
 800944c:	4618      	mov	r0, r3
 800944e:	3758      	adds	r7, #88	@ 0x58
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	603b      	str	r3, [r7, #0]
 8009460:	4613      	mov	r3, r2
 8009462:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009464:	e04f      	b.n	8009506 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800946c:	d04b      	beq.n	8009506 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800946e:	f7fa fdbf 	bl	8003ff0 <HAL_GetTick>
 8009472:	4602      	mov	r2, r0
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	1ad3      	subs	r3, r2, r3
 8009478:	69ba      	ldr	r2, [r7, #24]
 800947a:	429a      	cmp	r2, r3
 800947c:	d302      	bcc.n	8009484 <UART_WaitOnFlagUntilTimeout+0x30>
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d101      	bne.n	8009488 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009484:	2303      	movs	r3, #3
 8009486:	e04e      	b.n	8009526 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f003 0304 	and.w	r3, r3, #4
 8009492:	2b00      	cmp	r3, #0
 8009494:	d037      	beq.n	8009506 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	2b80      	cmp	r3, #128	@ 0x80
 800949a:	d034      	beq.n	8009506 <UART_WaitOnFlagUntilTimeout+0xb2>
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	2b40      	cmp	r3, #64	@ 0x40
 80094a0:	d031      	beq.n	8009506 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	69db      	ldr	r3, [r3, #28]
 80094a8:	f003 0308 	and.w	r3, r3, #8
 80094ac:	2b08      	cmp	r3, #8
 80094ae:	d110      	bne.n	80094d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2208      	movs	r2, #8
 80094b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	f000 f8ff 	bl	80096bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2208      	movs	r2, #8
 80094c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2200      	movs	r2, #0
 80094ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
 80094d0:	e029      	b.n	8009526 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	69db      	ldr	r3, [r3, #28]
 80094d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80094dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094e0:	d111      	bne.n	8009506 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80094ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094ec:	68f8      	ldr	r0, [r7, #12]
 80094ee:	f000 f8e5 	bl	80096bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2220      	movs	r2, #32
 80094f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2200      	movs	r2, #0
 80094fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009502:	2303      	movs	r3, #3
 8009504:	e00f      	b.n	8009526 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	69da      	ldr	r2, [r3, #28]
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	4013      	ands	r3, r2
 8009510:	68ba      	ldr	r2, [r7, #8]
 8009512:	429a      	cmp	r2, r3
 8009514:	bf0c      	ite	eq
 8009516:	2301      	moveq	r3, #1
 8009518:	2300      	movne	r3, #0
 800951a:	b2db      	uxtb	r3, r3
 800951c:	461a      	mov	r2, r3
 800951e:	79fb      	ldrb	r3, [r7, #7]
 8009520:	429a      	cmp	r2, r3
 8009522:	d0a0      	beq.n	8009466 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3710      	adds	r7, #16
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
	...

08009530 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b096      	sub	sp, #88	@ 0x58
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	4613      	mov	r3, r2
 800953c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	68ba      	ldr	r2, [r7, #8]
 8009542:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	88fa      	ldrh	r2, [r7, #6]
 8009548:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2200      	movs	r2, #0
 8009550:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2222      	movs	r2, #34	@ 0x22
 8009558:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009560:	2b00      	cmp	r3, #0
 8009562:	d028      	beq.n	80095b6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009568:	4a3e      	ldr	r2, [pc, #248]	@ (8009664 <UART_Start_Receive_DMA+0x134>)
 800956a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009570:	4a3d      	ldr	r2, [pc, #244]	@ (8009668 <UART_Start_Receive_DMA+0x138>)
 8009572:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009578:	4a3c      	ldr	r2, [pc, #240]	@ (800966c <UART_Start_Receive_DMA+0x13c>)
 800957a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009580:	2200      	movs	r2, #0
 8009582:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	3324      	adds	r3, #36	@ 0x24
 800958e:	4619      	mov	r1, r3
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009594:	461a      	mov	r2, r3
 8009596:	88fb      	ldrh	r3, [r7, #6]
 8009598:	f7fa fec6 	bl	8004328 <HAL_DMA_Start_IT>
 800959c:	4603      	mov	r3, r0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d009      	beq.n	80095b6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2210      	movs	r2, #16
 80095a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2220      	movs	r2, #32
 80095ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80095b2:	2301      	movs	r3, #1
 80095b4:	e051      	b.n	800965a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	691b      	ldr	r3, [r3, #16]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d018      	beq.n	80095f0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095c6:	e853 3f00 	ldrex	r3, [r3]
 80095ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80095cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80095d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	461a      	mov	r2, r3
 80095da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095de:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80095e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80095e4:	e841 2300 	strex	r3, r2, [r1]
 80095e8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80095ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d1e6      	bne.n	80095be <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	3308      	adds	r3, #8
 80095f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095fa:	e853 3f00 	ldrex	r3, [r3]
 80095fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009602:	f043 0301 	orr.w	r3, r3, #1
 8009606:	653b      	str	r3, [r7, #80]	@ 0x50
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	3308      	adds	r3, #8
 800960e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009610:	637a      	str	r2, [r7, #52]	@ 0x34
 8009612:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009614:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009616:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009618:	e841 2300 	strex	r3, r2, [r1]
 800961c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800961e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009620:	2b00      	cmp	r3, #0
 8009622:	d1e5      	bne.n	80095f0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	3308      	adds	r3, #8
 800962a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	e853 3f00 	ldrex	r3, [r3]
 8009632:	613b      	str	r3, [r7, #16]
   return(result);
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800963a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	3308      	adds	r3, #8
 8009642:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009644:	623a      	str	r2, [r7, #32]
 8009646:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009648:	69f9      	ldr	r1, [r7, #28]
 800964a:	6a3a      	ldr	r2, [r7, #32]
 800964c:	e841 2300 	strex	r3, r2, [r1]
 8009650:	61bb      	str	r3, [r7, #24]
   return(result);
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d1e5      	bne.n	8009624 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8009658:	2300      	movs	r3, #0
}
 800965a:	4618      	mov	r0, r3
 800965c:	3758      	adds	r7, #88	@ 0x58
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop
 8009664:	08009837 	.word	0x08009837
 8009668:	08009995 	.word	0x08009995
 800966c:	08009a07 	.word	0x08009a07

08009670 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009670:	b480      	push	{r7}
 8009672:	b089      	sub	sp, #36	@ 0x24
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	e853 3f00 	ldrex	r3, [r3]
 8009684:	60bb      	str	r3, [r7, #8]
   return(result);
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800968c:	61fb      	str	r3, [r7, #28]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	461a      	mov	r2, r3
 8009694:	69fb      	ldr	r3, [r7, #28]
 8009696:	61bb      	str	r3, [r7, #24]
 8009698:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969a:	6979      	ldr	r1, [r7, #20]
 800969c:	69ba      	ldr	r2, [r7, #24]
 800969e:	e841 2300 	strex	r3, r2, [r1]
 80096a2:	613b      	str	r3, [r7, #16]
   return(result);
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d1e6      	bne.n	8009678 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2220      	movs	r2, #32
 80096ae:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80096b0:	bf00      	nop
 80096b2:	3724      	adds	r7, #36	@ 0x24
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80096bc:	b480      	push	{r7}
 80096be:	b095      	sub	sp, #84	@ 0x54
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096cc:	e853 3f00 	ldrex	r3, [r3]
 80096d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80096d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	461a      	mov	r2, r3
 80096e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80096e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80096e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80096ea:	e841 2300 	strex	r3, r2, [r1]
 80096ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80096f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d1e6      	bne.n	80096c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	3308      	adds	r3, #8
 80096fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096fe:	6a3b      	ldr	r3, [r7, #32]
 8009700:	e853 3f00 	ldrex	r3, [r3]
 8009704:	61fb      	str	r3, [r7, #28]
   return(result);
 8009706:	69fb      	ldr	r3, [r7, #28]
 8009708:	f023 0301 	bic.w	r3, r3, #1
 800970c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	3308      	adds	r3, #8
 8009714:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009716:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009718:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800971c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800971e:	e841 2300 	strex	r3, r2, [r1]
 8009722:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009726:	2b00      	cmp	r3, #0
 8009728:	d1e5      	bne.n	80096f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800972e:	2b01      	cmp	r3, #1
 8009730:	d118      	bne.n	8009764 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	e853 3f00 	ldrex	r3, [r3]
 800973e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	f023 0310 	bic.w	r3, r3, #16
 8009746:	647b      	str	r3, [r7, #68]	@ 0x44
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	461a      	mov	r2, r3
 800974e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009750:	61bb      	str	r3, [r7, #24]
 8009752:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009754:	6979      	ldr	r1, [r7, #20]
 8009756:	69ba      	ldr	r2, [r7, #24]
 8009758:	e841 2300 	strex	r3, r2, [r1]
 800975c:	613b      	str	r3, [r7, #16]
   return(result);
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d1e6      	bne.n	8009732 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2220      	movs	r2, #32
 8009768:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009778:	bf00      	nop
 800977a:	3754      	adds	r7, #84	@ 0x54
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b090      	sub	sp, #64	@ 0x40
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009790:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	69db      	ldr	r3, [r3, #28]
 8009796:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800979a:	d037      	beq.n	800980c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800979c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800979e:	2200      	movs	r2, #0
 80097a0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80097a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	3308      	adds	r3, #8
 80097aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ae:	e853 3f00 	ldrex	r3, [r3]
 80097b2:	623b      	str	r3, [r7, #32]
   return(result);
 80097b4:	6a3b      	ldr	r3, [r7, #32]
 80097b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80097ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80097bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	3308      	adds	r3, #8
 80097c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80097c4:	633a      	str	r2, [r7, #48]	@ 0x30
 80097c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80097ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097cc:	e841 2300 	strex	r3, r2, [r1]
 80097d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80097d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d1e5      	bne.n	80097a4 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	e853 3f00 	ldrex	r3, [r3]
 80097e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80097ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	461a      	mov	r2, r3
 80097f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097f6:	61fb      	str	r3, [r7, #28]
 80097f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097fa:	69b9      	ldr	r1, [r7, #24]
 80097fc:	69fa      	ldr	r2, [r7, #28]
 80097fe:	e841 2300 	strex	r3, r2, [r1]
 8009802:	617b      	str	r3, [r7, #20]
   return(result);
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d1e6      	bne.n	80097d8 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800980a:	e002      	b.n	8009812 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800980c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800980e:	f7ff fa2b 	bl	8008c68 <HAL_UART_TxCpltCallback>
}
 8009812:	bf00      	nop
 8009814:	3740      	adds	r7, #64	@ 0x40
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b084      	sub	sp, #16
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009826:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009828:	68f8      	ldr	r0, [r7, #12]
 800982a:	f7ff fa27 	bl	8008c7c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800982e:	bf00      	nop
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009836:	b580      	push	{r7, lr}
 8009838:	b09c      	sub	sp, #112	@ 0x70
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009842:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	69db      	ldr	r3, [r3, #28]
 8009848:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800984c:	d071      	beq.n	8009932 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800984e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009850:	2200      	movs	r2, #0
 8009852:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009856:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800985c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800985e:	e853 3f00 	ldrex	r3, [r3]
 8009862:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009864:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009866:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800986a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800986c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	461a      	mov	r2, r3
 8009872:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009874:	657b      	str	r3, [r7, #84]	@ 0x54
 8009876:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009878:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800987a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800987c:	e841 2300 	strex	r3, r2, [r1]
 8009880:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009882:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009884:	2b00      	cmp	r3, #0
 8009886:	d1e6      	bne.n	8009856 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009888:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	3308      	adds	r3, #8
 800988e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009892:	e853 3f00 	ldrex	r3, [r3]
 8009896:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800989a:	f023 0301 	bic.w	r3, r3, #1
 800989e:	667b      	str	r3, [r7, #100]	@ 0x64
 80098a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	3308      	adds	r3, #8
 80098a6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80098a8:	643a      	str	r2, [r7, #64]	@ 0x40
 80098aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80098ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80098b0:	e841 2300 	strex	r3, r2, [r1]
 80098b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80098b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d1e5      	bne.n	8009888 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	3308      	adds	r3, #8
 80098c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c4:	6a3b      	ldr	r3, [r7, #32]
 80098c6:	e853 3f00 	ldrex	r3, [r3]
 80098ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80098cc:	69fb      	ldr	r3, [r7, #28]
 80098ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80098d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	3308      	adds	r3, #8
 80098da:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80098dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80098de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098e4:	e841 2300 	strex	r3, r2, [r1]
 80098e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80098ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d1e5      	bne.n	80098bc <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80098f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098f2:	2220      	movs	r2, #32
 80098f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d118      	bne.n	8009932 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009900:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	e853 3f00 	ldrex	r3, [r3]
 800990c:	60bb      	str	r3, [r7, #8]
   return(result);
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	f023 0310 	bic.w	r3, r3, #16
 8009914:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009916:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	461a      	mov	r2, r3
 800991c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800991e:	61bb      	str	r3, [r7, #24]
 8009920:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009922:	6979      	ldr	r1, [r7, #20]
 8009924:	69ba      	ldr	r2, [r7, #24]
 8009926:	e841 2300 	strex	r3, r2, [r1]
 800992a:	613b      	str	r3, [r7, #16]
   return(result);
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d1e6      	bne.n	8009900 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009932:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009934:	2200      	movs	r2, #0
 8009936:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009938:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800993a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800993c:	2b01      	cmp	r3, #1
 800993e:	d122      	bne.n	8009986 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 8009940:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009942:	2200      	movs	r2, #0
 8009944:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 8009952:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009954:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009958:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800995c:	429a      	cmp	r2, r3
 800995e:	d204      	bcs.n	800996a <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8009960:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009962:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8009966:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800996a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800996c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009970:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009972:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009976:	b29b      	uxth	r3, r3
 8009978:	1ad3      	subs	r3, r2, r3
 800997a:	b29b      	uxth	r3, r3
 800997c:	4619      	mov	r1, r3
 800997e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009980:	f7ff f9a4 	bl	8008ccc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009984:	e002      	b.n	800998c <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 8009986:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009988:	f7ff f982 	bl	8008c90 <HAL_UART_RxCpltCallback>
}
 800998c:	bf00      	nop
 800998e:	3770      	adds	r7, #112	@ 0x70
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099a0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2201      	movs	r2, #1
 80099a6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d123      	bne.n	80099f8 <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80099b6:	085b      	lsrs	r3, r3, #1
 80099b8:	b29a      	uxth	r2, r3
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80099ce:	897a      	ldrh	r2, [r7, #10]
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d803      	bhi.n	80099dc <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	897a      	ldrh	r2, [r7, #10]
 80099d8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	1ad3      	subs	r3, r2, r3
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	4619      	mov	r1, r3
 80099f0:	68f8      	ldr	r0, [r7, #12]
 80099f2:	f7ff f96b 	bl	8008ccc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80099f6:	e002      	b.n	80099fe <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 80099f8:	68f8      	ldr	r0, [r7, #12]
 80099fa:	f7ff f953 	bl	8008ca4 <HAL_UART_RxHalfCpltCallback>
}
 80099fe:	bf00      	nop
 8009a00:	3710      	adds	r7, #16
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b086      	sub	sp, #24
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a12:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009a18:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a20:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a2c:	2b80      	cmp	r3, #128	@ 0x80
 8009a2e:	d109      	bne.n	8009a44 <UART_DMAError+0x3e>
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	2b21      	cmp	r3, #33	@ 0x21
 8009a34:	d106      	bne.n	8009a44 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8009a3e:	6978      	ldr	r0, [r7, #20]
 8009a40:	f7ff fe16 	bl	8009670 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a4e:	2b40      	cmp	r3, #64	@ 0x40
 8009a50:	d109      	bne.n	8009a66 <UART_DMAError+0x60>
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2b22      	cmp	r3, #34	@ 0x22
 8009a56:	d106      	bne.n	8009a66 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8009a60:	6978      	ldr	r0, [r7, #20]
 8009a62:	f7ff fe2b 	bl	80096bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a6c:	f043 0210 	orr.w	r2, r3, #16
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a76:	6978      	ldr	r0, [r7, #20]
 8009a78:	f7ff f91e 	bl	8008cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a7c:	bf00      	nop
 8009a7e:	3718      	adds	r7, #24
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2200      	movs	r2, #0
 8009a96:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	f7ff f90c 	bl	8008cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009aa0:	bf00      	nop
 8009aa2:	3710      	adds	r7, #16
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b088      	sub	sp, #32
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	e853 3f00 	ldrex	r3, [r3]
 8009abc:	60bb      	str	r3, [r7, #8]
   return(result);
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ac4:	61fb      	str	r3, [r7, #28]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	461a      	mov	r2, r3
 8009acc:	69fb      	ldr	r3, [r7, #28]
 8009ace:	61bb      	str	r3, [r7, #24]
 8009ad0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad2:	6979      	ldr	r1, [r7, #20]
 8009ad4:	69ba      	ldr	r2, [r7, #24]
 8009ad6:	e841 2300 	strex	r3, r2, [r1]
 8009ada:	613b      	str	r3, [r7, #16]
   return(result);
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d1e6      	bne.n	8009ab0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2220      	movs	r2, #32
 8009ae6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2200      	movs	r2, #0
 8009aec:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f7ff f8ba 	bl	8008c68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009af4:	bf00      	nop
 8009af6:	3720      	adds	r7, #32
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009afc:	b480      	push	{r7}
 8009afe:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009b00:	bf00      	nop
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr
	...

08009b0c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009b0c:	b480      	push	{r7}
 8009b0e:	b085      	sub	sp, #20
 8009b10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b12:	f3ef 8305 	mrs	r3, IPSR
 8009b16:	60bb      	str	r3, [r7, #8]
  return(result);
 8009b18:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d10f      	bne.n	8009b3e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b1e:	f3ef 8310 	mrs	r3, PRIMASK
 8009b22:	607b      	str	r3, [r7, #4]
  return(result);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d105      	bne.n	8009b36 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009b2a:	f3ef 8311 	mrs	r3, BASEPRI
 8009b2e:	603b      	str	r3, [r7, #0]
  return(result);
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d007      	beq.n	8009b46 <osKernelInitialize+0x3a>
 8009b36:	4b0e      	ldr	r3, [pc, #56]	@ (8009b70 <osKernelInitialize+0x64>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	2b02      	cmp	r3, #2
 8009b3c:	d103      	bne.n	8009b46 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009b3e:	f06f 0305 	mvn.w	r3, #5
 8009b42:	60fb      	str	r3, [r7, #12]
 8009b44:	e00c      	b.n	8009b60 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009b46:	4b0a      	ldr	r3, [pc, #40]	@ (8009b70 <osKernelInitialize+0x64>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d105      	bne.n	8009b5a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009b4e:	4b08      	ldr	r3, [pc, #32]	@ (8009b70 <osKernelInitialize+0x64>)
 8009b50:	2201      	movs	r2, #1
 8009b52:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009b54:	2300      	movs	r3, #0
 8009b56:	60fb      	str	r3, [r7, #12]
 8009b58:	e002      	b.n	8009b60 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009b5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009b5e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009b60:	68fb      	ldr	r3, [r7, #12]
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3714      	adds	r7, #20
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr
 8009b6e:	bf00      	nop
 8009b70:	20005890 	.word	0x20005890

08009b74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b084      	sub	sp, #16
 8009b78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b7a:	f3ef 8305 	mrs	r3, IPSR
 8009b7e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009b80:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d10f      	bne.n	8009ba6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b86:	f3ef 8310 	mrs	r3, PRIMASK
 8009b8a:	607b      	str	r3, [r7, #4]
  return(result);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d105      	bne.n	8009b9e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009b92:	f3ef 8311 	mrs	r3, BASEPRI
 8009b96:	603b      	str	r3, [r7, #0]
  return(result);
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d007      	beq.n	8009bae <osKernelStart+0x3a>
 8009b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8009bdc <osKernelStart+0x68>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	2b02      	cmp	r3, #2
 8009ba4:	d103      	bne.n	8009bae <osKernelStart+0x3a>
    stat = osErrorISR;
 8009ba6:	f06f 0305 	mvn.w	r3, #5
 8009baa:	60fb      	str	r3, [r7, #12]
 8009bac:	e010      	b.n	8009bd0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009bae:	4b0b      	ldr	r3, [pc, #44]	@ (8009bdc <osKernelStart+0x68>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d109      	bne.n	8009bca <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009bb6:	f7ff ffa1 	bl	8009afc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009bba:	4b08      	ldr	r3, [pc, #32]	@ (8009bdc <osKernelStart+0x68>)
 8009bbc:	2202      	movs	r2, #2
 8009bbe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009bc0:	f001 fc42 	bl	800b448 <vTaskStartScheduler>
      stat = osOK;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	60fb      	str	r3, [r7, #12]
 8009bc8:	e002      	b.n	8009bd0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8009bca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009bce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3710      	adds	r7, #16
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	20005890 	.word	0x20005890

08009be0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b090      	sub	sp, #64	@ 0x40
 8009be4:	af04      	add	r7, sp, #16
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	60b9      	str	r1, [r7, #8]
 8009bea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009bec:	2300      	movs	r3, #0
 8009bee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bf0:	f3ef 8305 	mrs	r3, IPSR
 8009bf4:	61fb      	str	r3, [r7, #28]
  return(result);
 8009bf6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	f040 8090 	bne.w	8009d1e <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bfe:	f3ef 8310 	mrs	r3, PRIMASK
 8009c02:	61bb      	str	r3, [r7, #24]
  return(result);
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d105      	bne.n	8009c16 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009c0a:	f3ef 8311 	mrs	r3, BASEPRI
 8009c0e:	617b      	str	r3, [r7, #20]
  return(result);
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d003      	beq.n	8009c1e <osThreadNew+0x3e>
 8009c16:	4b44      	ldr	r3, [pc, #272]	@ (8009d28 <osThreadNew+0x148>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	2b02      	cmp	r3, #2
 8009c1c:	d07f      	beq.n	8009d1e <osThreadNew+0x13e>
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d07c      	beq.n	8009d1e <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 8009c24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009c28:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8009c2a:	2318      	movs	r3, #24
 8009c2c:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8009c32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009c36:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d045      	beq.n	8009cca <osThreadNew+0xea>
      if (attr->name != NULL) {
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d002      	beq.n	8009c4c <osThreadNew+0x6c>
        name = attr->name;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	699b      	ldr	r3, [r3, #24]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d002      	beq.n	8009c5a <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	699b      	ldr	r3, [r3, #24]
 8009c58:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d008      	beq.n	8009c72 <osThreadNew+0x92>
 8009c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c62:	2b38      	cmp	r3, #56	@ 0x38
 8009c64:	d805      	bhi.n	8009c72 <osThreadNew+0x92>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	f003 0301 	and.w	r3, r3, #1
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d001      	beq.n	8009c76 <osThreadNew+0x96>
        return (NULL);
 8009c72:	2300      	movs	r3, #0
 8009c74:	e054      	b.n	8009d20 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	695b      	ldr	r3, [r3, #20]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d003      	beq.n	8009c86 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	695b      	ldr	r3, [r3, #20]
 8009c82:	089b      	lsrs	r3, r3, #2
 8009c84:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d00e      	beq.n	8009cac <osThreadNew+0xcc>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	68db      	ldr	r3, [r3, #12]
 8009c92:	2b5b      	cmp	r3, #91	@ 0x5b
 8009c94:	d90a      	bls.n	8009cac <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d006      	beq.n	8009cac <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	695b      	ldr	r3, [r3, #20]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d002      	beq.n	8009cac <osThreadNew+0xcc>
        mem = 1;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	623b      	str	r3, [r7, #32]
 8009caa:	e010      	b.n	8009cce <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d10c      	bne.n	8009cce <osThreadNew+0xee>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d108      	bne.n	8009cce <osThreadNew+0xee>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	691b      	ldr	r3, [r3, #16]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d104      	bne.n	8009cce <osThreadNew+0xee>
          mem = 0;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	623b      	str	r3, [r7, #32]
 8009cc8:	e001      	b.n	8009cce <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009cce:	6a3b      	ldr	r3, [r7, #32]
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d110      	bne.n	8009cf6 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009cdc:	9202      	str	r2, [sp, #8]
 8009cde:	9301      	str	r3, [sp, #4]
 8009ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce2:	9300      	str	r3, [sp, #0]
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ce8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	f001 f9c6 	bl	800b07c <xTaskCreateStatic>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	613b      	str	r3, [r7, #16]
 8009cf4:	e013      	b.n	8009d1e <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 8009cf6:	6a3b      	ldr	r3, [r7, #32]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d110      	bne.n	8009d1e <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cfe:	b29a      	uxth	r2, r3
 8009d00:	f107 0310 	add.w	r3, r7, #16
 8009d04:	9301      	str	r3, [sp, #4]
 8009d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d08:	9300      	str	r3, [sp, #0]
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d0e:	68f8      	ldr	r0, [r7, #12]
 8009d10:	f001 fa1a 	bl	800b148 <xTaskCreate>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d001      	beq.n	8009d1e <osThreadNew+0x13e>
          hTask = NULL;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009d1e:	693b      	ldr	r3, [r7, #16]
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3730      	adds	r7, #48	@ 0x30
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}
 8009d28:	20005890 	.word	0x20005890

08009d2c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b086      	sub	sp, #24
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d34:	f3ef 8305 	mrs	r3, IPSR
 8009d38:	613b      	str	r3, [r7, #16]
  return(result);
 8009d3a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d10f      	bne.n	8009d60 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d40:	f3ef 8310 	mrs	r3, PRIMASK
 8009d44:	60fb      	str	r3, [r7, #12]
  return(result);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d105      	bne.n	8009d58 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009d4c:	f3ef 8311 	mrs	r3, BASEPRI
 8009d50:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d007      	beq.n	8009d68 <osDelay+0x3c>
 8009d58:	4b0a      	ldr	r3, [pc, #40]	@ (8009d84 <osDelay+0x58>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	2b02      	cmp	r3, #2
 8009d5e:	d103      	bne.n	8009d68 <osDelay+0x3c>
    stat = osErrorISR;
 8009d60:	f06f 0305 	mvn.w	r3, #5
 8009d64:	617b      	str	r3, [r7, #20]
 8009d66:	e007      	b.n	8009d78 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d002      	beq.n	8009d78 <osDelay+0x4c>
      vTaskDelay(ticks);
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f001 fb30 	bl	800b3d8 <vTaskDelay>
    }
  }

  return (stat);
 8009d78:	697b      	ldr	r3, [r7, #20]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3718      	adds	r7, #24
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	20005890 	.word	0x20005890

08009d88 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b08a      	sub	sp, #40	@ 0x28
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009d90:	2300      	movs	r3, #0
 8009d92:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d94:	f3ef 8305 	mrs	r3, IPSR
 8009d98:	613b      	str	r3, [r7, #16]
  return(result);
 8009d9a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f040 8085 	bne.w	8009eac <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009da2:	f3ef 8310 	mrs	r3, PRIMASK
 8009da6:	60fb      	str	r3, [r7, #12]
  return(result);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d105      	bne.n	8009dba <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009dae:	f3ef 8311 	mrs	r3, BASEPRI
 8009db2:	60bb      	str	r3, [r7, #8]
  return(result);
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d003      	beq.n	8009dc2 <osMutexNew+0x3a>
 8009dba:	4b3f      	ldr	r3, [pc, #252]	@ (8009eb8 <osMutexNew+0x130>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	2b02      	cmp	r3, #2
 8009dc0:	d074      	beq.n	8009eac <osMutexNew+0x124>
    if (attr != NULL) {
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d003      	beq.n	8009dd0 <osMutexNew+0x48>
      type = attr->attr_bits;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	623b      	str	r3, [r7, #32]
 8009dce:	e001      	b.n	8009dd4 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009dd4:	6a3b      	ldr	r3, [r7, #32]
 8009dd6:	f003 0301 	and.w	r3, r3, #1
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d002      	beq.n	8009de4 <osMutexNew+0x5c>
      rmtx = 1U;
 8009dde:	2301      	movs	r3, #1
 8009de0:	61fb      	str	r3, [r7, #28]
 8009de2:	e001      	b.n	8009de8 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8009de4:	2300      	movs	r3, #0
 8009de6:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009de8:	6a3b      	ldr	r3, [r7, #32]
 8009dea:	f003 0308 	and.w	r3, r3, #8
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d15c      	bne.n	8009eac <osMutexNew+0x124>
      mem = -1;
 8009df2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009df6:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d015      	beq.n	8009e2a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	689b      	ldr	r3, [r3, #8]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d006      	beq.n	8009e14 <osMutexNew+0x8c>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	2b4f      	cmp	r3, #79	@ 0x4f
 8009e0c:	d902      	bls.n	8009e14 <osMutexNew+0x8c>
          mem = 1;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	61bb      	str	r3, [r7, #24]
 8009e12:	e00c      	b.n	8009e2e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d108      	bne.n	8009e2e <osMutexNew+0xa6>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	68db      	ldr	r3, [r3, #12]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d104      	bne.n	8009e2e <osMutexNew+0xa6>
            mem = 0;
 8009e24:	2300      	movs	r3, #0
 8009e26:	61bb      	str	r3, [r7, #24]
 8009e28:	e001      	b.n	8009e2e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8009e2e:	69bb      	ldr	r3, [r7, #24]
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d112      	bne.n	8009e5a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8009e34:	69fb      	ldr	r3, [r7, #28]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d007      	beq.n	8009e4a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	4619      	mov	r1, r3
 8009e40:	2004      	movs	r0, #4
 8009e42:	f000 fb5c 	bl	800a4fe <xQueueCreateMutexStatic>
 8009e46:	6278      	str	r0, [r7, #36]	@ 0x24
 8009e48:	e016      	b.n	8009e78 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	689b      	ldr	r3, [r3, #8]
 8009e4e:	4619      	mov	r1, r3
 8009e50:	2001      	movs	r0, #1
 8009e52:	f000 fb54 	bl	800a4fe <xQueueCreateMutexStatic>
 8009e56:	6278      	str	r0, [r7, #36]	@ 0x24
 8009e58:	e00e      	b.n	8009e78 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8009e5a:	69bb      	ldr	r3, [r7, #24]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d10b      	bne.n	8009e78 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8009e60:	69fb      	ldr	r3, [r7, #28]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d004      	beq.n	8009e70 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8009e66:	2004      	movs	r0, #4
 8009e68:	f000 fb31 	bl	800a4ce <xQueueCreateMutex>
 8009e6c:	6278      	str	r0, [r7, #36]	@ 0x24
 8009e6e:	e003      	b.n	8009e78 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8009e70:	2001      	movs	r0, #1
 8009e72:	f000 fb2c 	bl	800a4ce <xQueueCreateMutex>
 8009e76:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d00c      	beq.n	8009e98 <osMutexNew+0x110>
        if (attr != NULL) {
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d003      	beq.n	8009e8c <osMutexNew+0x104>
          name = attr->name;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	617b      	str	r3, [r7, #20]
 8009e8a:	e001      	b.n	8009e90 <osMutexNew+0x108>
        } else {
          name = NULL;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8009e90:	6979      	ldr	r1, [r7, #20]
 8009e92:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009e94:	f001 f894 	bl	800afc0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d006      	beq.n	8009eac <osMutexNew+0x124>
 8009e9e:	69fb      	ldr	r3, [r7, #28]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d003      	beq.n	8009eac <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ea6:	f043 0301 	orr.w	r3, r3, #1
 8009eaa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3728      	adds	r7, #40	@ 0x28
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	20005890 	.word	0x20005890

08009ebc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b088      	sub	sp, #32
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f023 0301 	bic.w	r3, r3, #1
 8009ecc:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f003 0301 	and.w	r3, r3, #1
 8009ed4:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009eda:	f3ef 8305 	mrs	r3, IPSR
 8009ede:	613b      	str	r3, [r7, #16]
  return(result);
 8009ee0:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d10f      	bne.n	8009f06 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ee6:	f3ef 8310 	mrs	r3, PRIMASK
 8009eea:	60fb      	str	r3, [r7, #12]
  return(result);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d105      	bne.n	8009efe <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009ef2:	f3ef 8311 	mrs	r3, BASEPRI
 8009ef6:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d007      	beq.n	8009f0e <osMutexAcquire+0x52>
 8009efe:	4b1d      	ldr	r3, [pc, #116]	@ (8009f74 <osMutexAcquire+0xb8>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2b02      	cmp	r3, #2
 8009f04:	d103      	bne.n	8009f0e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8009f06:	f06f 0305 	mvn.w	r3, #5
 8009f0a:	61fb      	str	r3, [r7, #28]
 8009f0c:	e02c      	b.n	8009f68 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8009f0e:	69bb      	ldr	r3, [r7, #24]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d103      	bne.n	8009f1c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8009f14:	f06f 0303 	mvn.w	r3, #3
 8009f18:	61fb      	str	r3, [r7, #28]
 8009f1a:	e025      	b.n	8009f68 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d011      	beq.n	8009f46 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8009f22:	6839      	ldr	r1, [r7, #0]
 8009f24:	69b8      	ldr	r0, [r7, #24]
 8009f26:	f000 fb3c 	bl	800a5a2 <xQueueTakeMutexRecursive>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d01b      	beq.n	8009f68 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d003      	beq.n	8009f3e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8009f36:	f06f 0301 	mvn.w	r3, #1
 8009f3a:	61fb      	str	r3, [r7, #28]
 8009f3c:	e014      	b.n	8009f68 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8009f3e:	f06f 0302 	mvn.w	r3, #2
 8009f42:	61fb      	str	r3, [r7, #28]
 8009f44:	e010      	b.n	8009f68 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8009f46:	6839      	ldr	r1, [r7, #0]
 8009f48:	69b8      	ldr	r0, [r7, #24]
 8009f4a:	f000 fdf9 	bl	800ab40 <xQueueSemaphoreTake>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d009      	beq.n	8009f68 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d003      	beq.n	8009f62 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8009f5a:	f06f 0301 	mvn.w	r3, #1
 8009f5e:	61fb      	str	r3, [r7, #28]
 8009f60:	e002      	b.n	8009f68 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8009f62:	f06f 0302 	mvn.w	r3, #2
 8009f66:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009f68:	69fb      	ldr	r3, [r7, #28]
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3720      	adds	r7, #32
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	20005890 	.word	0x20005890

08009f78 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b088      	sub	sp, #32
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f023 0301 	bic.w	r3, r3, #1
 8009f86:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f003 0301 	and.w	r3, r3, #1
 8009f8e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8009f90:	2300      	movs	r3, #0
 8009f92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f94:	f3ef 8305 	mrs	r3, IPSR
 8009f98:	613b      	str	r3, [r7, #16]
  return(result);
 8009f9a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d10f      	bne.n	8009fc0 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fa0:	f3ef 8310 	mrs	r3, PRIMASK
 8009fa4:	60fb      	str	r3, [r7, #12]
  return(result);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d105      	bne.n	8009fb8 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009fac:	f3ef 8311 	mrs	r3, BASEPRI
 8009fb0:	60bb      	str	r3, [r7, #8]
  return(result);
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d007      	beq.n	8009fc8 <osMutexRelease+0x50>
 8009fb8:	4b16      	ldr	r3, [pc, #88]	@ (800a014 <osMutexRelease+0x9c>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	2b02      	cmp	r3, #2
 8009fbe:	d103      	bne.n	8009fc8 <osMutexRelease+0x50>
    stat = osErrorISR;
 8009fc0:	f06f 0305 	mvn.w	r3, #5
 8009fc4:	61fb      	str	r3, [r7, #28]
 8009fc6:	e01f      	b.n	800a008 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8009fc8:	69bb      	ldr	r3, [r7, #24]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d103      	bne.n	8009fd6 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8009fce:	f06f 0303 	mvn.w	r3, #3
 8009fd2:	61fb      	str	r3, [r7, #28]
 8009fd4:	e018      	b.n	800a008 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d009      	beq.n	8009ff0 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8009fdc:	69b8      	ldr	r0, [r7, #24]
 8009fde:	f000 faa9 	bl	800a534 <xQueueGiveMutexRecursive>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d00f      	beq.n	800a008 <osMutexRelease+0x90>
        stat = osErrorResource;
 8009fe8:	f06f 0302 	mvn.w	r3, #2
 8009fec:	61fb      	str	r3, [r7, #28]
 8009fee:	e00b      	b.n	800a008 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	2100      	movs	r1, #0
 8009ff6:	69b8      	ldr	r0, [r7, #24]
 8009ff8:	f000 fb0c 	bl	800a614 <xQueueGenericSend>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d002      	beq.n	800a008 <osMutexRelease+0x90>
        stat = osErrorResource;
 800a002:	f06f 0302 	mvn.w	r3, #2
 800a006:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800a008:	69fb      	ldr	r3, [r7, #28]
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3720      	adds	r7, #32
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop
 800a014:	20005890 	.word	0x20005890

0800a018 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a018:	b480      	push	{r7}
 800a01a:	b085      	sub	sp, #20
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	4a07      	ldr	r2, [pc, #28]	@ (800a044 <vApplicationGetIdleTaskMemory+0x2c>)
 800a028:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	4a06      	ldr	r2, [pc, #24]	@ (800a048 <vApplicationGetIdleTaskMemory+0x30>)
 800a02e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a036:	601a      	str	r2, [r3, #0]
}
 800a038:	bf00      	nop
 800a03a:	3714      	adds	r7, #20
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr
 800a044:	20005894 	.word	0x20005894
 800a048:	200058f0 	.word	0x200058f0

0800a04c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a04c:	b480      	push	{r7}
 800a04e:	b085      	sub	sp, #20
 800a050:	af00      	add	r7, sp, #0
 800a052:	60f8      	str	r0, [r7, #12]
 800a054:	60b9      	str	r1, [r7, #8]
 800a056:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	4a07      	ldr	r2, [pc, #28]	@ (800a078 <vApplicationGetTimerTaskMemory+0x2c>)
 800a05c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	4a06      	ldr	r2, [pc, #24]	@ (800a07c <vApplicationGetTimerTaskMemory+0x30>)
 800a062:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a06a:	601a      	str	r2, [r3, #0]
}
 800a06c:	bf00      	nop
 800a06e:	3714      	adds	r7, #20
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr
 800a078:	20005cf0 	.word	0x20005cf0
 800a07c:	20005d4c 	.word	0x20005d4c

0800a080 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f103 0208 	add.w	r2, r3, #8
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a098:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f103 0208 	add.w	r2, r3, #8
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f103 0208 	add.w	r2, r3, #8
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a0b4:	bf00      	nop
 800a0b6:	370c      	adds	r7, #12
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr

0800a0c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a0ce:	bf00      	nop
 800a0d0:	370c      	adds	r7, #12
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr

0800a0da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a0da:	b480      	push	{r7}
 800a0dc:	b085      	sub	sp, #20
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
 800a0e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	68fa      	ldr	r2, [r7, #12]
 800a0ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	689a      	ldr	r2, [r3, #8]
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	683a      	ldr	r2, [r7, #0]
 800a0fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	683a      	ldr	r2, [r7, #0]
 800a104:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	1c5a      	adds	r2, r3, #1
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	601a      	str	r2, [r3, #0]
}
 800a116:	bf00      	nop
 800a118:	3714      	adds	r7, #20
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr

0800a122 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a122:	b480      	push	{r7}
 800a124:	b085      	sub	sp, #20
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
 800a12a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a138:	d103      	bne.n	800a142 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	691b      	ldr	r3, [r3, #16]
 800a13e:	60fb      	str	r3, [r7, #12]
 800a140:	e00c      	b.n	800a15c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	3308      	adds	r3, #8
 800a146:	60fb      	str	r3, [r7, #12]
 800a148:	e002      	b.n	800a150 <vListInsert+0x2e>
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	60fb      	str	r3, [r7, #12]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	68ba      	ldr	r2, [r7, #8]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d2f6      	bcs.n	800a14a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	685a      	ldr	r2, [r3, #4]
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	683a      	ldr	r2, [r7, #0]
 800a16a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	68fa      	ldr	r2, [r7, #12]
 800a170:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	683a      	ldr	r2, [r7, #0]
 800a176:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	1c5a      	adds	r2, r3, #1
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	601a      	str	r2, [r3, #0]
}
 800a188:	bf00      	nop
 800a18a:	3714      	adds	r7, #20
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr

0800a194 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a194:	b480      	push	{r7}
 800a196:	b085      	sub	sp, #20
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	691b      	ldr	r3, [r3, #16]
 800a1a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	687a      	ldr	r2, [r7, #4]
 800a1a8:	6892      	ldr	r2, [r2, #8]
 800a1aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	689b      	ldr	r3, [r3, #8]
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	6852      	ldr	r2, [r2, #4]
 800a1b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d103      	bne.n	800a1c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	689a      	ldr	r2, [r3, #8]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	1e5a      	subs	r2, r3, #1
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3714      	adds	r7, #20
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d10d      	bne.n	800a218 <xQueueGenericReset+0x30>
	__asm volatile
 800a1fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a200:	b672      	cpsid	i
 800a202:	f383 8811 	msr	BASEPRI, r3
 800a206:	f3bf 8f6f 	isb	sy
 800a20a:	f3bf 8f4f 	dsb	sy
 800a20e:	b662      	cpsie	i
 800a210:	60bb      	str	r3, [r7, #8]
}
 800a212:	bf00      	nop
 800a214:	bf00      	nop
 800a216:	e7fd      	b.n	800a214 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800a218:	f002 fc18 	bl	800ca4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a224:	68f9      	ldr	r1, [r7, #12]
 800a226:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a228:	fb01 f303 	mul.w	r3, r1, r3
 800a22c:	441a      	add	r2, r3
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2200      	movs	r2, #0
 800a236:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a248:	3b01      	subs	r3, #1
 800a24a:	68f9      	ldr	r1, [r7, #12]
 800a24c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a24e:	fb01 f303 	mul.w	r3, r1, r3
 800a252:	441a      	add	r2, r3
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	22ff      	movs	r2, #255	@ 0xff
 800a25c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	22ff      	movs	r2, #255	@ 0xff
 800a264:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d114      	bne.n	800a298 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	691b      	ldr	r3, [r3, #16]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d01a      	beq.n	800a2ac <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	3310      	adds	r3, #16
 800a27a:	4618      	mov	r0, r3
 800a27c:	f001 fb80 	bl	800b980 <xTaskRemoveFromEventList>
 800a280:	4603      	mov	r3, r0
 800a282:	2b00      	cmp	r3, #0
 800a284:	d012      	beq.n	800a2ac <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a286:	4b0d      	ldr	r3, [pc, #52]	@ (800a2bc <xQueueGenericReset+0xd4>)
 800a288:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a28c:	601a      	str	r2, [r3, #0]
 800a28e:	f3bf 8f4f 	dsb	sy
 800a292:	f3bf 8f6f 	isb	sy
 800a296:	e009      	b.n	800a2ac <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	3310      	adds	r3, #16
 800a29c:	4618      	mov	r0, r3
 800a29e:	f7ff feef 	bl	800a080 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	3324      	adds	r3, #36	@ 0x24
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7ff feea 	bl	800a080 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a2ac:	f002 fc04 	bl	800cab8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a2b0:	2301      	movs	r3, #1
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3710      	adds	r7, #16
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	e000ed04 	.word	0xe000ed04

0800a2c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b08e      	sub	sp, #56	@ 0x38
 800a2c4:	af02      	add	r7, sp, #8
 800a2c6:	60f8      	str	r0, [r7, #12]
 800a2c8:	60b9      	str	r1, [r7, #8]
 800a2ca:	607a      	str	r2, [r7, #4]
 800a2cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d10d      	bne.n	800a2f0 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800a2d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2d8:	b672      	cpsid	i
 800a2da:	f383 8811 	msr	BASEPRI, r3
 800a2de:	f3bf 8f6f 	isb	sy
 800a2e2:	f3bf 8f4f 	dsb	sy
 800a2e6:	b662      	cpsie	i
 800a2e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a2ea:	bf00      	nop
 800a2ec:	bf00      	nop
 800a2ee:	e7fd      	b.n	800a2ec <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d10d      	bne.n	800a312 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800a2f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2fa:	b672      	cpsid	i
 800a2fc:	f383 8811 	msr	BASEPRI, r3
 800a300:	f3bf 8f6f 	isb	sy
 800a304:	f3bf 8f4f 	dsb	sy
 800a308:	b662      	cpsie	i
 800a30a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a30c:	bf00      	nop
 800a30e:	bf00      	nop
 800a310:	e7fd      	b.n	800a30e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d002      	beq.n	800a31e <xQueueGenericCreateStatic+0x5e>
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d001      	beq.n	800a322 <xQueueGenericCreateStatic+0x62>
 800a31e:	2301      	movs	r3, #1
 800a320:	e000      	b.n	800a324 <xQueueGenericCreateStatic+0x64>
 800a322:	2300      	movs	r3, #0
 800a324:	2b00      	cmp	r3, #0
 800a326:	d10d      	bne.n	800a344 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800a328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a32c:	b672      	cpsid	i
 800a32e:	f383 8811 	msr	BASEPRI, r3
 800a332:	f3bf 8f6f 	isb	sy
 800a336:	f3bf 8f4f 	dsb	sy
 800a33a:	b662      	cpsie	i
 800a33c:	623b      	str	r3, [r7, #32]
}
 800a33e:	bf00      	nop
 800a340:	bf00      	nop
 800a342:	e7fd      	b.n	800a340 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d102      	bne.n	800a350 <xQueueGenericCreateStatic+0x90>
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d101      	bne.n	800a354 <xQueueGenericCreateStatic+0x94>
 800a350:	2301      	movs	r3, #1
 800a352:	e000      	b.n	800a356 <xQueueGenericCreateStatic+0x96>
 800a354:	2300      	movs	r3, #0
 800a356:	2b00      	cmp	r3, #0
 800a358:	d10d      	bne.n	800a376 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800a35a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a35e:	b672      	cpsid	i
 800a360:	f383 8811 	msr	BASEPRI, r3
 800a364:	f3bf 8f6f 	isb	sy
 800a368:	f3bf 8f4f 	dsb	sy
 800a36c:	b662      	cpsie	i
 800a36e:	61fb      	str	r3, [r7, #28]
}
 800a370:	bf00      	nop
 800a372:	bf00      	nop
 800a374:	e7fd      	b.n	800a372 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a376:	2350      	movs	r3, #80	@ 0x50
 800a378:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	2b50      	cmp	r3, #80	@ 0x50
 800a37e:	d00d      	beq.n	800a39c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800a380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a384:	b672      	cpsid	i
 800a386:	f383 8811 	msr	BASEPRI, r3
 800a38a:	f3bf 8f6f 	isb	sy
 800a38e:	f3bf 8f4f 	dsb	sy
 800a392:	b662      	cpsie	i
 800a394:	61bb      	str	r3, [r7, #24]
}
 800a396:	bf00      	nop
 800a398:	bf00      	nop
 800a39a:	e7fd      	b.n	800a398 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a39c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a3a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d00d      	beq.n	800a3c4 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a3a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a3b0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a3b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3b6:	9300      	str	r3, [sp, #0]
 800a3b8:	4613      	mov	r3, r2
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	68b9      	ldr	r1, [r7, #8]
 800a3be:	68f8      	ldr	r0, [r7, #12]
 800a3c0:	f000 f848 	bl	800a454 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a3c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3730      	adds	r7, #48	@ 0x30
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}

0800a3ce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a3ce:	b580      	push	{r7, lr}
 800a3d0:	b08a      	sub	sp, #40	@ 0x28
 800a3d2:	af02      	add	r7, sp, #8
 800a3d4:	60f8      	str	r0, [r7, #12]
 800a3d6:	60b9      	str	r1, [r7, #8]
 800a3d8:	4613      	mov	r3, r2
 800a3da:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d10d      	bne.n	800a3fe <xQueueGenericCreate+0x30>
	__asm volatile
 800a3e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3e6:	b672      	cpsid	i
 800a3e8:	f383 8811 	msr	BASEPRI, r3
 800a3ec:	f3bf 8f6f 	isb	sy
 800a3f0:	f3bf 8f4f 	dsb	sy
 800a3f4:	b662      	cpsie	i
 800a3f6:	613b      	str	r3, [r7, #16]
}
 800a3f8:	bf00      	nop
 800a3fa:	bf00      	nop
 800a3fc:	e7fd      	b.n	800a3fa <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d102      	bne.n	800a40a <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a404:	2300      	movs	r3, #0
 800a406:	61fb      	str	r3, [r7, #28]
 800a408:	e004      	b.n	800a414 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	68ba      	ldr	r2, [r7, #8]
 800a40e:	fb02 f303 	mul.w	r3, r2, r3
 800a412:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a414:	69fb      	ldr	r3, [r7, #28]
 800a416:	3350      	adds	r3, #80	@ 0x50
 800a418:	4618      	mov	r0, r3
 800a41a:	f002 fc45 	bl	800cca8 <pvPortMalloc>
 800a41e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a420:	69bb      	ldr	r3, [r7, #24]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d011      	beq.n	800a44a <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a426:	69bb      	ldr	r3, [r7, #24]
 800a428:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	3350      	adds	r3, #80	@ 0x50
 800a42e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a430:	69bb      	ldr	r3, [r7, #24]
 800a432:	2200      	movs	r2, #0
 800a434:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a438:	79fa      	ldrb	r2, [r7, #7]
 800a43a:	69bb      	ldr	r3, [r7, #24]
 800a43c:	9300      	str	r3, [sp, #0]
 800a43e:	4613      	mov	r3, r2
 800a440:	697a      	ldr	r2, [r7, #20]
 800a442:	68b9      	ldr	r1, [r7, #8]
 800a444:	68f8      	ldr	r0, [r7, #12]
 800a446:	f000 f805 	bl	800a454 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a44a:	69bb      	ldr	r3, [r7, #24]
	}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3720      	adds	r7, #32
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b084      	sub	sp, #16
 800a458:	af00      	add	r7, sp, #0
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	60b9      	str	r1, [r7, #8]
 800a45e:	607a      	str	r2, [r7, #4]
 800a460:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d103      	bne.n	800a470 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a468:	69bb      	ldr	r3, [r7, #24]
 800a46a:	69ba      	ldr	r2, [r7, #24]
 800a46c:	601a      	str	r2, [r3, #0]
 800a46e:	e002      	b.n	800a476 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a476:	69bb      	ldr	r3, [r7, #24]
 800a478:	68fa      	ldr	r2, [r7, #12]
 800a47a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a47c:	69bb      	ldr	r3, [r7, #24]
 800a47e:	68ba      	ldr	r2, [r7, #8]
 800a480:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a482:	2101      	movs	r1, #1
 800a484:	69b8      	ldr	r0, [r7, #24]
 800a486:	f7ff feaf 	bl	800a1e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a48a:	69bb      	ldr	r3, [r7, #24]
 800a48c:	78fa      	ldrb	r2, [r7, #3]
 800a48e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a492:	bf00      	nop
 800a494:	3710      	adds	r7, #16
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b082      	sub	sp, #8
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d00e      	beq.n	800a4c6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	2200      	movs	r2, #0
 800a4be:	2100      	movs	r1, #0
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 f8a7 	bl	800a614 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a4c6:	bf00      	nop
 800a4c8:	3708      	adds	r7, #8
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}

0800a4ce <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b086      	sub	sp, #24
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	617b      	str	r3, [r7, #20]
 800a4dc:	2300      	movs	r3, #0
 800a4de:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a4e0:	79fb      	ldrb	r3, [r7, #7]
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	6939      	ldr	r1, [r7, #16]
 800a4e6:	6978      	ldr	r0, [r7, #20]
 800a4e8:	f7ff ff71 	bl	800a3ce <xQueueGenericCreate>
 800a4ec:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a4ee:	68f8      	ldr	r0, [r7, #12]
 800a4f0:	f7ff ffd3 	bl	800a49a <prvInitialiseMutex>

		return xNewQueue;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
	}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3718      	adds	r7, #24
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b088      	sub	sp, #32
 800a502:	af02      	add	r7, sp, #8
 800a504:	4603      	mov	r3, r0
 800a506:	6039      	str	r1, [r7, #0]
 800a508:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a50a:	2301      	movs	r3, #1
 800a50c:	617b      	str	r3, [r7, #20]
 800a50e:	2300      	movs	r3, #0
 800a510:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a512:	79fb      	ldrb	r3, [r7, #7]
 800a514:	9300      	str	r3, [sp, #0]
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	2200      	movs	r2, #0
 800a51a:	6939      	ldr	r1, [r7, #16]
 800a51c:	6978      	ldr	r0, [r7, #20]
 800a51e:	f7ff fecf 	bl	800a2c0 <xQueueGenericCreateStatic>
 800a522:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a524:	68f8      	ldr	r0, [r7, #12]
 800a526:	f7ff ffb8 	bl	800a49a <prvInitialiseMutex>

		return xNewQueue;
 800a52a:	68fb      	ldr	r3, [r7, #12]
	}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3718      	adds	r7, #24
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a534:	b590      	push	{r4, r7, lr}
 800a536:	b087      	sub	sp, #28
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d10d      	bne.n	800a562 <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 800a546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a54a:	b672      	cpsid	i
 800a54c:	f383 8811 	msr	BASEPRI, r3
 800a550:	f3bf 8f6f 	isb	sy
 800a554:	f3bf 8f4f 	dsb	sy
 800a558:	b662      	cpsie	i
 800a55a:	60fb      	str	r3, [r7, #12]
}
 800a55c:	bf00      	nop
 800a55e:	bf00      	nop
 800a560:	e7fd      	b.n	800a55e <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	689c      	ldr	r4, [r3, #8]
 800a566:	f001 fbfd 	bl	800bd64 <xTaskGetCurrentTaskHandle>
 800a56a:	4603      	mov	r3, r0
 800a56c:	429c      	cmp	r4, r3
 800a56e:	d111      	bne.n	800a594 <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	68db      	ldr	r3, [r3, #12]
 800a574:	1e5a      	subs	r2, r3, #1
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	68db      	ldr	r3, [r3, #12]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d105      	bne.n	800a58e <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a582:	2300      	movs	r3, #0
 800a584:	2200      	movs	r2, #0
 800a586:	2100      	movs	r1, #0
 800a588:	6938      	ldr	r0, [r7, #16]
 800a58a:	f000 f843 	bl	800a614 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a58e:	2301      	movs	r3, #1
 800a590:	617b      	str	r3, [r7, #20]
 800a592:	e001      	b.n	800a598 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a594:	2300      	movs	r3, #0
 800a596:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a598:	697b      	ldr	r3, [r7, #20]
	}
 800a59a:	4618      	mov	r0, r3
 800a59c:	371c      	adds	r7, #28
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd90      	pop	{r4, r7, pc}

0800a5a2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a5a2:	b590      	push	{r4, r7, lr}
 800a5a4:	b087      	sub	sp, #28
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
 800a5aa:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d10d      	bne.n	800a5d2 <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 800a5b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ba:	b672      	cpsid	i
 800a5bc:	f383 8811 	msr	BASEPRI, r3
 800a5c0:	f3bf 8f6f 	isb	sy
 800a5c4:	f3bf 8f4f 	dsb	sy
 800a5c8:	b662      	cpsie	i
 800a5ca:	60fb      	str	r3, [r7, #12]
}
 800a5cc:	bf00      	nop
 800a5ce:	bf00      	nop
 800a5d0:	e7fd      	b.n	800a5ce <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	689c      	ldr	r4, [r3, #8]
 800a5d6:	f001 fbc5 	bl	800bd64 <xTaskGetCurrentTaskHandle>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	429c      	cmp	r4, r3
 800a5de:	d107      	bne.n	800a5f0 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	68db      	ldr	r3, [r3, #12]
 800a5e4:	1c5a      	adds	r2, r3, #1
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	617b      	str	r3, [r7, #20]
 800a5ee:	e00c      	b.n	800a60a <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a5f0:	6839      	ldr	r1, [r7, #0]
 800a5f2:	6938      	ldr	r0, [r7, #16]
 800a5f4:	f000 faa4 	bl	800ab40 <xQueueSemaphoreTake>
 800a5f8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d004      	beq.n	800a60a <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	68db      	ldr	r3, [r3, #12]
 800a604:	1c5a      	adds	r2, r3, #1
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a60a:	697b      	ldr	r3, [r7, #20]
	}
 800a60c:	4618      	mov	r0, r3
 800a60e:	371c      	adds	r7, #28
 800a610:	46bd      	mov	sp, r7
 800a612:	bd90      	pop	{r4, r7, pc}

0800a614 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b08e      	sub	sp, #56	@ 0x38
 800a618:	af00      	add	r7, sp, #0
 800a61a:	60f8      	str	r0, [r7, #12]
 800a61c:	60b9      	str	r1, [r7, #8]
 800a61e:	607a      	str	r2, [r7, #4]
 800a620:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a622:	2300      	movs	r3, #0
 800a624:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a62a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d10d      	bne.n	800a64c <xQueueGenericSend+0x38>
	__asm volatile
 800a630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a634:	b672      	cpsid	i
 800a636:	f383 8811 	msr	BASEPRI, r3
 800a63a:	f3bf 8f6f 	isb	sy
 800a63e:	f3bf 8f4f 	dsb	sy
 800a642:	b662      	cpsie	i
 800a644:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a646:	bf00      	nop
 800a648:	bf00      	nop
 800a64a:	e7fd      	b.n	800a648 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d103      	bne.n	800a65a <xQueueGenericSend+0x46>
 800a652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a656:	2b00      	cmp	r3, #0
 800a658:	d101      	bne.n	800a65e <xQueueGenericSend+0x4a>
 800a65a:	2301      	movs	r3, #1
 800a65c:	e000      	b.n	800a660 <xQueueGenericSend+0x4c>
 800a65e:	2300      	movs	r3, #0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d10d      	bne.n	800a680 <xQueueGenericSend+0x6c>
	__asm volatile
 800a664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a668:	b672      	cpsid	i
 800a66a:	f383 8811 	msr	BASEPRI, r3
 800a66e:	f3bf 8f6f 	isb	sy
 800a672:	f3bf 8f4f 	dsb	sy
 800a676:	b662      	cpsie	i
 800a678:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a67a:	bf00      	nop
 800a67c:	bf00      	nop
 800a67e:	e7fd      	b.n	800a67c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	2b02      	cmp	r3, #2
 800a684:	d103      	bne.n	800a68e <xQueueGenericSend+0x7a>
 800a686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a68a:	2b01      	cmp	r3, #1
 800a68c:	d101      	bne.n	800a692 <xQueueGenericSend+0x7e>
 800a68e:	2301      	movs	r3, #1
 800a690:	e000      	b.n	800a694 <xQueueGenericSend+0x80>
 800a692:	2300      	movs	r3, #0
 800a694:	2b00      	cmp	r3, #0
 800a696:	d10d      	bne.n	800a6b4 <xQueueGenericSend+0xa0>
	__asm volatile
 800a698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a69c:	b672      	cpsid	i
 800a69e:	f383 8811 	msr	BASEPRI, r3
 800a6a2:	f3bf 8f6f 	isb	sy
 800a6a6:	f3bf 8f4f 	dsb	sy
 800a6aa:	b662      	cpsie	i
 800a6ac:	623b      	str	r3, [r7, #32]
}
 800a6ae:	bf00      	nop
 800a6b0:	bf00      	nop
 800a6b2:	e7fd      	b.n	800a6b0 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a6b4:	f001 fb66 	bl	800bd84 <xTaskGetSchedulerState>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d102      	bne.n	800a6c4 <xQueueGenericSend+0xb0>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d101      	bne.n	800a6c8 <xQueueGenericSend+0xb4>
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	e000      	b.n	800a6ca <xQueueGenericSend+0xb6>
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d10d      	bne.n	800a6ea <xQueueGenericSend+0xd6>
	__asm volatile
 800a6ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6d2:	b672      	cpsid	i
 800a6d4:	f383 8811 	msr	BASEPRI, r3
 800a6d8:	f3bf 8f6f 	isb	sy
 800a6dc:	f3bf 8f4f 	dsb	sy
 800a6e0:	b662      	cpsie	i
 800a6e2:	61fb      	str	r3, [r7, #28]
}
 800a6e4:	bf00      	nop
 800a6e6:	bf00      	nop
 800a6e8:	e7fd      	b.n	800a6e6 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a6ea:	f002 f9af 	bl	800ca4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a6ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d302      	bcc.n	800a700 <xQueueGenericSend+0xec>
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	2b02      	cmp	r3, #2
 800a6fe:	d129      	bne.n	800a754 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a700:	683a      	ldr	r2, [r7, #0]
 800a702:	68b9      	ldr	r1, [r7, #8]
 800a704:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a706:	f000 fb4b 	bl	800ada0 <prvCopyDataToQueue>
 800a70a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a70c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a70e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a710:	2b00      	cmp	r3, #0
 800a712:	d010      	beq.n	800a736 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a716:	3324      	adds	r3, #36	@ 0x24
 800a718:	4618      	mov	r0, r3
 800a71a:	f001 f931 	bl	800b980 <xTaskRemoveFromEventList>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d013      	beq.n	800a74c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a724:	4b3f      	ldr	r3, [pc, #252]	@ (800a824 <xQueueGenericSend+0x210>)
 800a726:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a72a:	601a      	str	r2, [r3, #0]
 800a72c:	f3bf 8f4f 	dsb	sy
 800a730:	f3bf 8f6f 	isb	sy
 800a734:	e00a      	b.n	800a74c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d007      	beq.n	800a74c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a73c:	4b39      	ldr	r3, [pc, #228]	@ (800a824 <xQueueGenericSend+0x210>)
 800a73e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a742:	601a      	str	r2, [r3, #0]
 800a744:	f3bf 8f4f 	dsb	sy
 800a748:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a74c:	f002 f9b4 	bl	800cab8 <vPortExitCritical>
				return pdPASS;
 800a750:	2301      	movs	r3, #1
 800a752:	e063      	b.n	800a81c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d103      	bne.n	800a762 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a75a:	f002 f9ad 	bl	800cab8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a75e:	2300      	movs	r3, #0
 800a760:	e05c      	b.n	800a81c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a764:	2b00      	cmp	r3, #0
 800a766:	d106      	bne.n	800a776 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a768:	f107 0314 	add.w	r3, r7, #20
 800a76c:	4618      	mov	r0, r3
 800a76e:	f001 f997 	bl	800baa0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a772:	2301      	movs	r3, #1
 800a774:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a776:	f002 f99f 	bl	800cab8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a77a:	f000 fed1 	bl	800b520 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a77e:	f002 f965 	bl	800ca4c <vPortEnterCritical>
 800a782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a784:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a788:	b25b      	sxtb	r3, r3
 800a78a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a78e:	d103      	bne.n	800a798 <xQueueGenericSend+0x184>
 800a790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a792:	2200      	movs	r2, #0
 800a794:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a79a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a79e:	b25b      	sxtb	r3, r3
 800a7a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a7a4:	d103      	bne.n	800a7ae <xQueueGenericSend+0x19a>
 800a7a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a7ae:	f002 f983 	bl	800cab8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a7b2:	1d3a      	adds	r2, r7, #4
 800a7b4:	f107 0314 	add.w	r3, r7, #20
 800a7b8:	4611      	mov	r1, r2
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f001 f986 	bl	800bacc <xTaskCheckForTimeOut>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d124      	bne.n	800a810 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a7c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a7c8:	f000 fbe2 	bl	800af90 <prvIsQueueFull>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d018      	beq.n	800a804 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a7d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7d4:	3310      	adds	r3, #16
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	4611      	mov	r1, r2
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f001 f87a 	bl	800b8d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a7e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a7e2:	f000 fb6d 	bl	800aec0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a7e6:	f000 fea9 	bl	800b53c <xTaskResumeAll>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	f47f af7c 	bne.w	800a6ea <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800a7f2:	4b0c      	ldr	r3, [pc, #48]	@ (800a824 <xQueueGenericSend+0x210>)
 800a7f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7f8:	601a      	str	r2, [r3, #0]
 800a7fa:	f3bf 8f4f 	dsb	sy
 800a7fe:	f3bf 8f6f 	isb	sy
 800a802:	e772      	b.n	800a6ea <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a804:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a806:	f000 fb5b 	bl	800aec0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a80a:	f000 fe97 	bl	800b53c <xTaskResumeAll>
 800a80e:	e76c      	b.n	800a6ea <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a810:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a812:	f000 fb55 	bl	800aec0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a816:	f000 fe91 	bl	800b53c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a81a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3738      	adds	r7, #56	@ 0x38
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}
 800a824:	e000ed04 	.word	0xe000ed04

0800a828 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b08e      	sub	sp, #56	@ 0x38
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	60b9      	str	r1, [r7, #8]
 800a832:	607a      	str	r2, [r7, #4]
 800a834:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a83a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d10d      	bne.n	800a85c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800a840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a844:	b672      	cpsid	i
 800a846:	f383 8811 	msr	BASEPRI, r3
 800a84a:	f3bf 8f6f 	isb	sy
 800a84e:	f3bf 8f4f 	dsb	sy
 800a852:	b662      	cpsie	i
 800a854:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a856:	bf00      	nop
 800a858:	bf00      	nop
 800a85a:	e7fd      	b.n	800a858 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d103      	bne.n	800a86a <xQueueGenericSendFromISR+0x42>
 800a862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a866:	2b00      	cmp	r3, #0
 800a868:	d101      	bne.n	800a86e <xQueueGenericSendFromISR+0x46>
 800a86a:	2301      	movs	r3, #1
 800a86c:	e000      	b.n	800a870 <xQueueGenericSendFromISR+0x48>
 800a86e:	2300      	movs	r3, #0
 800a870:	2b00      	cmp	r3, #0
 800a872:	d10d      	bne.n	800a890 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800a874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a878:	b672      	cpsid	i
 800a87a:	f383 8811 	msr	BASEPRI, r3
 800a87e:	f3bf 8f6f 	isb	sy
 800a882:	f3bf 8f4f 	dsb	sy
 800a886:	b662      	cpsie	i
 800a888:	623b      	str	r3, [r7, #32]
}
 800a88a:	bf00      	nop
 800a88c:	bf00      	nop
 800a88e:	e7fd      	b.n	800a88c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	2b02      	cmp	r3, #2
 800a894:	d103      	bne.n	800a89e <xQueueGenericSendFromISR+0x76>
 800a896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a89a:	2b01      	cmp	r3, #1
 800a89c:	d101      	bne.n	800a8a2 <xQueueGenericSendFromISR+0x7a>
 800a89e:	2301      	movs	r3, #1
 800a8a0:	e000      	b.n	800a8a4 <xQueueGenericSendFromISR+0x7c>
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d10d      	bne.n	800a8c4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800a8a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8ac:	b672      	cpsid	i
 800a8ae:	f383 8811 	msr	BASEPRI, r3
 800a8b2:	f3bf 8f6f 	isb	sy
 800a8b6:	f3bf 8f4f 	dsb	sy
 800a8ba:	b662      	cpsie	i
 800a8bc:	61fb      	str	r3, [r7, #28]
}
 800a8be:	bf00      	nop
 800a8c0:	bf00      	nop
 800a8c2:	e7fd      	b.n	800a8c0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a8c4:	f002 f9aa 	bl	800cc1c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a8c8:	f3ef 8211 	mrs	r2, BASEPRI
 800a8cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8d0:	b672      	cpsid	i
 800a8d2:	f383 8811 	msr	BASEPRI, r3
 800a8d6:	f3bf 8f6f 	isb	sy
 800a8da:	f3bf 8f4f 	dsb	sy
 800a8de:	b662      	cpsie	i
 800a8e0:	61ba      	str	r2, [r7, #24]
 800a8e2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a8e4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a8e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a8e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d302      	bcc.n	800a8fa <xQueueGenericSendFromISR+0xd2>
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	2b02      	cmp	r3, #2
 800a8f8:	d12c      	bne.n	800a954 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a8fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a900:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a904:	683a      	ldr	r2, [r7, #0]
 800a906:	68b9      	ldr	r1, [r7, #8]
 800a908:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a90a:	f000 fa49 	bl	800ada0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a90e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800a912:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a916:	d112      	bne.n	800a93e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a91a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d016      	beq.n	800a94e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a922:	3324      	adds	r3, #36	@ 0x24
 800a924:	4618      	mov	r0, r3
 800a926:	f001 f82b 	bl	800b980 <xTaskRemoveFromEventList>
 800a92a:	4603      	mov	r3, r0
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d00e      	beq.n	800a94e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d00b      	beq.n	800a94e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2201      	movs	r2, #1
 800a93a:	601a      	str	r2, [r3, #0]
 800a93c:	e007      	b.n	800a94e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a93e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a942:	3301      	adds	r3, #1
 800a944:	b2db      	uxtb	r3, r3
 800a946:	b25a      	sxtb	r2, r3
 800a948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a94a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a94e:	2301      	movs	r3, #1
 800a950:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800a952:	e001      	b.n	800a958 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a954:	2300      	movs	r3, #0
 800a956:	637b      	str	r3, [r7, #52]	@ 0x34
 800a958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a95a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a962:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a966:	4618      	mov	r0, r3
 800a968:	3738      	adds	r7, #56	@ 0x38
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
	...

0800a970 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b08c      	sub	sp, #48	@ 0x30
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a97c:	2300      	movs	r3, #0
 800a97e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a986:	2b00      	cmp	r3, #0
 800a988:	d10d      	bne.n	800a9a6 <xQueueReceive+0x36>
	__asm volatile
 800a98a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a98e:	b672      	cpsid	i
 800a990:	f383 8811 	msr	BASEPRI, r3
 800a994:	f3bf 8f6f 	isb	sy
 800a998:	f3bf 8f4f 	dsb	sy
 800a99c:	b662      	cpsie	i
 800a99e:	623b      	str	r3, [r7, #32]
}
 800a9a0:	bf00      	nop
 800a9a2:	bf00      	nop
 800a9a4:	e7fd      	b.n	800a9a2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d103      	bne.n	800a9b4 <xQueueReceive+0x44>
 800a9ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d101      	bne.n	800a9b8 <xQueueReceive+0x48>
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	e000      	b.n	800a9ba <xQueueReceive+0x4a>
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d10d      	bne.n	800a9da <xQueueReceive+0x6a>
	__asm volatile
 800a9be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9c2:	b672      	cpsid	i
 800a9c4:	f383 8811 	msr	BASEPRI, r3
 800a9c8:	f3bf 8f6f 	isb	sy
 800a9cc:	f3bf 8f4f 	dsb	sy
 800a9d0:	b662      	cpsie	i
 800a9d2:	61fb      	str	r3, [r7, #28]
}
 800a9d4:	bf00      	nop
 800a9d6:	bf00      	nop
 800a9d8:	e7fd      	b.n	800a9d6 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a9da:	f001 f9d3 	bl	800bd84 <xTaskGetSchedulerState>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d102      	bne.n	800a9ea <xQueueReceive+0x7a>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d101      	bne.n	800a9ee <xQueueReceive+0x7e>
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	e000      	b.n	800a9f0 <xQueueReceive+0x80>
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d10d      	bne.n	800aa10 <xQueueReceive+0xa0>
	__asm volatile
 800a9f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9f8:	b672      	cpsid	i
 800a9fa:	f383 8811 	msr	BASEPRI, r3
 800a9fe:	f3bf 8f6f 	isb	sy
 800aa02:	f3bf 8f4f 	dsb	sy
 800aa06:	b662      	cpsie	i
 800aa08:	61bb      	str	r3, [r7, #24]
}
 800aa0a:	bf00      	nop
 800aa0c:	bf00      	nop
 800aa0e:	e7fd      	b.n	800aa0c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa10:	f002 f81c 	bl	800ca4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa18:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d01f      	beq.n	800aa60 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aa20:	68b9      	ldr	r1, [r7, #8]
 800aa22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa24:	f000 fa26 	bl	800ae74 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aa28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa2a:	1e5a      	subs	r2, r3, #1
 800aa2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa2e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa32:	691b      	ldr	r3, [r3, #16]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d00f      	beq.n	800aa58 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa3a:	3310      	adds	r3, #16
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f000 ff9f 	bl	800b980 <xTaskRemoveFromEventList>
 800aa42:	4603      	mov	r3, r0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d007      	beq.n	800aa58 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aa48:	4b3c      	ldr	r3, [pc, #240]	@ (800ab3c <xQueueReceive+0x1cc>)
 800aa4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa4e:	601a      	str	r2, [r3, #0]
 800aa50:	f3bf 8f4f 	dsb	sy
 800aa54:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aa58:	f002 f82e 	bl	800cab8 <vPortExitCritical>
				return pdPASS;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e069      	b.n	800ab34 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d103      	bne.n	800aa6e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aa66:	f002 f827 	bl	800cab8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	e062      	b.n	800ab34 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d106      	bne.n	800aa82 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa74:	f107 0310 	add.w	r3, r7, #16
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f001 f811 	bl	800baa0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa82:	f002 f819 	bl	800cab8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa86:	f000 fd4b 	bl	800b520 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa8a:	f001 ffdf 	bl	800ca4c <vPortEnterCritical>
 800aa8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aa94:	b25b      	sxtb	r3, r3
 800aa96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa9a:	d103      	bne.n	800aaa4 <xQueueReceive+0x134>
 800aa9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aaa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaa6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aaaa:	b25b      	sxtb	r3, r3
 800aaac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aab0:	d103      	bne.n	800aaba <xQueueReceive+0x14a>
 800aab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aab4:	2200      	movs	r2, #0
 800aab6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aaba:	f001 fffd 	bl	800cab8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aabe:	1d3a      	adds	r2, r7, #4
 800aac0:	f107 0310 	add.w	r3, r7, #16
 800aac4:	4611      	mov	r1, r2
 800aac6:	4618      	mov	r0, r3
 800aac8:	f001 f800 	bl	800bacc <xTaskCheckForTimeOut>
 800aacc:	4603      	mov	r3, r0
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d123      	bne.n	800ab1a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aad2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aad4:	f000 fa46 	bl	800af64 <prvIsQueueEmpty>
 800aad8:	4603      	mov	r3, r0
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d017      	beq.n	800ab0e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aae0:	3324      	adds	r3, #36	@ 0x24
 800aae2:	687a      	ldr	r2, [r7, #4]
 800aae4:	4611      	mov	r1, r2
 800aae6:	4618      	mov	r0, r3
 800aae8:	f000 fef4 	bl	800b8d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aaec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aaee:	f000 f9e7 	bl	800aec0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aaf2:	f000 fd23 	bl	800b53c <xTaskResumeAll>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d189      	bne.n	800aa10 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800aafc:	4b0f      	ldr	r3, [pc, #60]	@ (800ab3c <xQueueReceive+0x1cc>)
 800aafe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab02:	601a      	str	r2, [r3, #0]
 800ab04:	f3bf 8f4f 	dsb	sy
 800ab08:	f3bf 8f6f 	isb	sy
 800ab0c:	e780      	b.n	800aa10 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ab0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab10:	f000 f9d6 	bl	800aec0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab14:	f000 fd12 	bl	800b53c <xTaskResumeAll>
 800ab18:	e77a      	b.n	800aa10 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ab1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab1c:	f000 f9d0 	bl	800aec0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab20:	f000 fd0c 	bl	800b53c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab26:	f000 fa1d 	bl	800af64 <prvIsQueueEmpty>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	f43f af6f 	beq.w	800aa10 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ab32:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3730      	adds	r7, #48	@ 0x30
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	e000ed04 	.word	0xe000ed04

0800ab40 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b08e      	sub	sp, #56	@ 0x38
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ab52:	2300      	movs	r3, #0
 800ab54:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ab56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d10d      	bne.n	800ab78 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800ab5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab60:	b672      	cpsid	i
 800ab62:	f383 8811 	msr	BASEPRI, r3
 800ab66:	f3bf 8f6f 	isb	sy
 800ab6a:	f3bf 8f4f 	dsb	sy
 800ab6e:	b662      	cpsie	i
 800ab70:	623b      	str	r3, [r7, #32]
}
 800ab72:	bf00      	nop
 800ab74:	bf00      	nop
 800ab76:	e7fd      	b.n	800ab74 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ab78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d00d      	beq.n	800ab9c <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800ab80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab84:	b672      	cpsid	i
 800ab86:	f383 8811 	msr	BASEPRI, r3
 800ab8a:	f3bf 8f6f 	isb	sy
 800ab8e:	f3bf 8f4f 	dsb	sy
 800ab92:	b662      	cpsie	i
 800ab94:	61fb      	str	r3, [r7, #28]
}
 800ab96:	bf00      	nop
 800ab98:	bf00      	nop
 800ab9a:	e7fd      	b.n	800ab98 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab9c:	f001 f8f2 	bl	800bd84 <xTaskGetSchedulerState>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d102      	bne.n	800abac <xQueueSemaphoreTake+0x6c>
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d101      	bne.n	800abb0 <xQueueSemaphoreTake+0x70>
 800abac:	2301      	movs	r3, #1
 800abae:	e000      	b.n	800abb2 <xQueueSemaphoreTake+0x72>
 800abb0:	2300      	movs	r3, #0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d10d      	bne.n	800abd2 <xQueueSemaphoreTake+0x92>
	__asm volatile
 800abb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abba:	b672      	cpsid	i
 800abbc:	f383 8811 	msr	BASEPRI, r3
 800abc0:	f3bf 8f6f 	isb	sy
 800abc4:	f3bf 8f4f 	dsb	sy
 800abc8:	b662      	cpsie	i
 800abca:	61bb      	str	r3, [r7, #24]
}
 800abcc:	bf00      	nop
 800abce:	bf00      	nop
 800abd0:	e7fd      	b.n	800abce <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800abd2:	f001 ff3b 	bl	800ca4c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800abd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abda:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800abdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d024      	beq.n	800ac2c <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800abe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abe4:	1e5a      	subs	r2, r3, #1
 800abe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abe8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800abea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d104      	bne.n	800abfc <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800abf2:	f001 fa49 	bl	800c088 <pvTaskIncrementMutexHeldCount>
 800abf6:	4602      	mov	r2, r0
 800abf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abfa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abfe:	691b      	ldr	r3, [r3, #16]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d00f      	beq.n	800ac24 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac06:	3310      	adds	r3, #16
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f000 feb9 	bl	800b980 <xTaskRemoveFromEventList>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d007      	beq.n	800ac24 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ac14:	4b55      	ldr	r3, [pc, #340]	@ (800ad6c <xQueueSemaphoreTake+0x22c>)
 800ac16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac1a:	601a      	str	r2, [r3, #0]
 800ac1c:	f3bf 8f4f 	dsb	sy
 800ac20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ac24:	f001 ff48 	bl	800cab8 <vPortExitCritical>
				return pdPASS;
 800ac28:	2301      	movs	r3, #1
 800ac2a:	e09a      	b.n	800ad62 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d114      	bne.n	800ac5c <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ac32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d00d      	beq.n	800ac54 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800ac38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac3c:	b672      	cpsid	i
 800ac3e:	f383 8811 	msr	BASEPRI, r3
 800ac42:	f3bf 8f6f 	isb	sy
 800ac46:	f3bf 8f4f 	dsb	sy
 800ac4a:	b662      	cpsie	i
 800ac4c:	617b      	str	r3, [r7, #20]
}
 800ac4e:	bf00      	nop
 800ac50:	bf00      	nop
 800ac52:	e7fd      	b.n	800ac50 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ac54:	f001 ff30 	bl	800cab8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	e082      	b.n	800ad62 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d106      	bne.n	800ac70 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac62:	f107 030c 	add.w	r3, r7, #12
 800ac66:	4618      	mov	r0, r3
 800ac68:	f000 ff1a 	bl	800baa0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac70:	f001 ff22 	bl	800cab8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac74:	f000 fc54 	bl	800b520 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac78:	f001 fee8 	bl	800ca4c <vPortEnterCritical>
 800ac7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac7e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ac82:	b25b      	sxtb	r3, r3
 800ac84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ac88:	d103      	bne.n	800ac92 <xQueueSemaphoreTake+0x152>
 800ac8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ac92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ac98:	b25b      	sxtb	r3, r3
 800ac9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ac9e:	d103      	bne.n	800aca8 <xQueueSemaphoreTake+0x168>
 800aca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aca2:	2200      	movs	r2, #0
 800aca4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aca8:	f001 ff06 	bl	800cab8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800acac:	463a      	mov	r2, r7
 800acae:	f107 030c 	add.w	r3, r7, #12
 800acb2:	4611      	mov	r1, r2
 800acb4:	4618      	mov	r0, r3
 800acb6:	f000 ff09 	bl	800bacc <xTaskCheckForTimeOut>
 800acba:	4603      	mov	r3, r0
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d132      	bne.n	800ad26 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800acc0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800acc2:	f000 f94f 	bl	800af64 <prvIsQueueEmpty>
 800acc6:	4603      	mov	r3, r0
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d026      	beq.n	800ad1a <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800accc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d109      	bne.n	800ace8 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800acd4:	f001 feba 	bl	800ca4c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800acd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acda:	689b      	ldr	r3, [r3, #8]
 800acdc:	4618      	mov	r0, r3
 800acde:	f001 f86f 	bl	800bdc0 <xTaskPriorityInherit>
 800ace2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800ace4:	f001 fee8 	bl	800cab8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ace8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acea:	3324      	adds	r3, #36	@ 0x24
 800acec:	683a      	ldr	r2, [r7, #0]
 800acee:	4611      	mov	r1, r2
 800acf0:	4618      	mov	r0, r3
 800acf2:	f000 fdef 	bl	800b8d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800acf6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800acf8:	f000 f8e2 	bl	800aec0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800acfc:	f000 fc1e 	bl	800b53c <xTaskResumeAll>
 800ad00:	4603      	mov	r3, r0
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	f47f af65 	bne.w	800abd2 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800ad08:	4b18      	ldr	r3, [pc, #96]	@ (800ad6c <xQueueSemaphoreTake+0x22c>)
 800ad0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad0e:	601a      	str	r2, [r3, #0]
 800ad10:	f3bf 8f4f 	dsb	sy
 800ad14:	f3bf 8f6f 	isb	sy
 800ad18:	e75b      	b.n	800abd2 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ad1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ad1c:	f000 f8d0 	bl	800aec0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad20:	f000 fc0c 	bl	800b53c <xTaskResumeAll>
 800ad24:	e755      	b.n	800abd2 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ad26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ad28:	f000 f8ca 	bl	800aec0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad2c:	f000 fc06 	bl	800b53c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ad32:	f000 f917 	bl	800af64 <prvIsQueueEmpty>
 800ad36:	4603      	mov	r3, r0
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	f43f af4a 	beq.w	800abd2 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ad3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d00d      	beq.n	800ad60 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800ad44:	f001 fe82 	bl	800ca4c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ad48:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ad4a:	f000 f811 	bl	800ad70 <prvGetDisinheritPriorityAfterTimeout>
 800ad4e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ad50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad52:	689b      	ldr	r3, [r3, #8]
 800ad54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ad56:	4618      	mov	r0, r3
 800ad58:	f001 f90e 	bl	800bf78 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ad5c:	f001 feac 	bl	800cab8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ad60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3738      	adds	r7, #56	@ 0x38
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	e000ed04 	.word	0xe000ed04

0800ad70 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ad70:	b480      	push	{r7}
 800ad72:	b085      	sub	sp, #20
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d006      	beq.n	800ad8e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800ad8a:	60fb      	str	r3, [r7, #12]
 800ad8c:	e001      	b.n	800ad92 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ad92:	68fb      	ldr	r3, [r7, #12]
	}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3714      	adds	r7, #20
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr

0800ada0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b086      	sub	sp, #24
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	60f8      	str	r0, [r7, #12]
 800ada8:	60b9      	str	r1, [r7, #8]
 800adaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800adac:	2300      	movs	r3, #0
 800adae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adb4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d10d      	bne.n	800adda <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d14d      	bne.n	800ae62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	689b      	ldr	r3, [r3, #8]
 800adca:	4618      	mov	r0, r3
 800adcc:	f001 f860 	bl	800be90 <xTaskPriorityDisinherit>
 800add0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2200      	movs	r2, #0
 800add6:	609a      	str	r2, [r3, #8]
 800add8:	e043      	b.n	800ae62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d119      	bne.n	800ae14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	6858      	ldr	r0, [r3, #4]
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ade8:	461a      	mov	r2, r3
 800adea:	68b9      	ldr	r1, [r7, #8]
 800adec:	f010 fcbd 	bl	801b76a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	685a      	ldr	r2, [r3, #4]
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adf8:	441a      	add	r2, r3
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	685a      	ldr	r2, [r3, #4]
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	689b      	ldr	r3, [r3, #8]
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d32b      	bcc.n	800ae62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681a      	ldr	r2, [r3, #0]
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	605a      	str	r2, [r3, #4]
 800ae12:	e026      	b.n	800ae62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	68d8      	ldr	r0, [r3, #12]
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	68b9      	ldr	r1, [r7, #8]
 800ae20:	f010 fca3 	bl	801b76a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	68da      	ldr	r2, [r3, #12]
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae2c:	425b      	negs	r3, r3
 800ae2e:	441a      	add	r2, r3
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	68da      	ldr	r2, [r3, #12]
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d207      	bcs.n	800ae50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	689a      	ldr	r2, [r3, #8]
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae48:	425b      	negs	r3, r3
 800ae4a:	441a      	add	r2, r3
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2b02      	cmp	r3, #2
 800ae54:	d105      	bne.n	800ae62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d002      	beq.n	800ae62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	3b01      	subs	r3, #1
 800ae60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	1c5a      	adds	r2, r3, #1
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ae6a:	697b      	ldr	r3, [r7, #20]
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3718      	adds	r7, #24
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d018      	beq.n	800aeb8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	68da      	ldr	r2, [r3, #12]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae8e:	441a      	add	r2, r3
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	68da      	ldr	r2, [r3, #12]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	689b      	ldr	r3, [r3, #8]
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d303      	bcc.n	800aea8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681a      	ldr	r2, [r3, #0]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	68d9      	ldr	r1, [r3, #12]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	6838      	ldr	r0, [r7, #0]
 800aeb4:	f010 fc59 	bl	801b76a <memcpy>
	}
}
 800aeb8:	bf00      	nop
 800aeba:	3708      	adds	r7, #8
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aec8:	f001 fdc0 	bl	800ca4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aed2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aed4:	e011      	b.n	800aefa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d012      	beq.n	800af04 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	3324      	adds	r3, #36	@ 0x24
 800aee2:	4618      	mov	r0, r3
 800aee4:	f000 fd4c 	bl	800b980 <xTaskRemoveFromEventList>
 800aee8:	4603      	mov	r3, r0
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d001      	beq.n	800aef2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aeee:	f000 fe55 	bl	800bb9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aef2:	7bfb      	ldrb	r3, [r7, #15]
 800aef4:	3b01      	subs	r3, #1
 800aef6:	b2db      	uxtb	r3, r3
 800aef8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aefa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	dce9      	bgt.n	800aed6 <prvUnlockQueue+0x16>
 800af02:	e000      	b.n	800af06 <prvUnlockQueue+0x46>
					break;
 800af04:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	22ff      	movs	r2, #255	@ 0xff
 800af0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800af0e:	f001 fdd3 	bl	800cab8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800af12:	f001 fd9b 	bl	800ca4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800af1c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af1e:	e011      	b.n	800af44 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	691b      	ldr	r3, [r3, #16]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d012      	beq.n	800af4e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	3310      	adds	r3, #16
 800af2c:	4618      	mov	r0, r3
 800af2e:	f000 fd27 	bl	800b980 <xTaskRemoveFromEventList>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d001      	beq.n	800af3c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800af38:	f000 fe30 	bl	800bb9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800af3c:	7bbb      	ldrb	r3, [r7, #14]
 800af3e:	3b01      	subs	r3, #1
 800af40:	b2db      	uxtb	r3, r3
 800af42:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	dce9      	bgt.n	800af20 <prvUnlockQueue+0x60>
 800af4c:	e000      	b.n	800af50 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800af4e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	22ff      	movs	r2, #255	@ 0xff
 800af54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800af58:	f001 fdae 	bl	800cab8 <vPortExitCritical>
}
 800af5c:	bf00      	nop
 800af5e:	3710      	adds	r7, #16
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af6c:	f001 fd6e 	bl	800ca4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af74:	2b00      	cmp	r3, #0
 800af76:	d102      	bne.n	800af7e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800af78:	2301      	movs	r3, #1
 800af7a:	60fb      	str	r3, [r7, #12]
 800af7c:	e001      	b.n	800af82 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800af7e:	2300      	movs	r3, #0
 800af80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af82:	f001 fd99 	bl	800cab8 <vPortExitCritical>

	return xReturn;
 800af86:	68fb      	ldr	r3, [r7, #12]
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3710      	adds	r7, #16
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af98:	f001 fd58 	bl	800ca4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d102      	bne.n	800afae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800afa8:	2301      	movs	r3, #1
 800afaa:	60fb      	str	r3, [r7, #12]
 800afac:	e001      	b.n	800afb2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800afae:	2300      	movs	r3, #0
 800afb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800afb2:	f001 fd81 	bl	800cab8 <vPortExitCritical>

	return xReturn;
 800afb6:	68fb      	ldr	r3, [r7, #12]
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3710      	adds	r7, #16
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800afc0:	b480      	push	{r7}
 800afc2:	b085      	sub	sp, #20
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800afca:	2300      	movs	r3, #0
 800afcc:	60fb      	str	r3, [r7, #12]
 800afce:	e014      	b.n	800affa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800afd0:	4a0f      	ldr	r2, [pc, #60]	@ (800b010 <vQueueAddToRegistry+0x50>)
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d10b      	bne.n	800aff4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800afdc:	490c      	ldr	r1, [pc, #48]	@ (800b010 <vQueueAddToRegistry+0x50>)
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	683a      	ldr	r2, [r7, #0]
 800afe2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800afe6:	4a0a      	ldr	r2, [pc, #40]	@ (800b010 <vQueueAddToRegistry+0x50>)
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	00db      	lsls	r3, r3, #3
 800afec:	4413      	add	r3, r2
 800afee:	687a      	ldr	r2, [r7, #4]
 800aff0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aff2:	e006      	b.n	800b002 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	3301      	adds	r3, #1
 800aff8:	60fb      	str	r3, [r7, #12]
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2b07      	cmp	r3, #7
 800affe:	d9e7      	bls.n	800afd0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b000:	bf00      	nop
 800b002:	bf00      	nop
 800b004:	3714      	adds	r7, #20
 800b006:	46bd      	mov	sp, r7
 800b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00c:	4770      	bx	lr
 800b00e:	bf00      	nop
 800b010:	2000654c 	.word	0x2000654c

0800b014 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b014:	b580      	push	{r7, lr}
 800b016:	b086      	sub	sp, #24
 800b018:	af00      	add	r7, sp, #0
 800b01a:	60f8      	str	r0, [r7, #12]
 800b01c:	60b9      	str	r1, [r7, #8]
 800b01e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b024:	f001 fd12 	bl	800ca4c <vPortEnterCritical>
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b02e:	b25b      	sxtb	r3, r3
 800b030:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b034:	d103      	bne.n	800b03e <vQueueWaitForMessageRestricted+0x2a>
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	2200      	movs	r2, #0
 800b03a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b044:	b25b      	sxtb	r3, r3
 800b046:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b04a:	d103      	bne.n	800b054 <vQueueWaitForMessageRestricted+0x40>
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	2200      	movs	r2, #0
 800b050:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b054:	f001 fd30 	bl	800cab8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d106      	bne.n	800b06e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	3324      	adds	r3, #36	@ 0x24
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	68b9      	ldr	r1, [r7, #8]
 800b068:	4618      	mov	r0, r3
 800b06a:	f000 fc5b 	bl	800b924 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b06e:	6978      	ldr	r0, [r7, #20]
 800b070:	f7ff ff26 	bl	800aec0 <prvUnlockQueue>
	}
 800b074:	bf00      	nop
 800b076:	3718      	adds	r7, #24
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b08e      	sub	sp, #56	@ 0x38
 800b080:	af04      	add	r7, sp, #16
 800b082:	60f8      	str	r0, [r7, #12]
 800b084:	60b9      	str	r1, [r7, #8]
 800b086:	607a      	str	r2, [r7, #4]
 800b088:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b08a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d10d      	bne.n	800b0ac <xTaskCreateStatic+0x30>
	__asm volatile
 800b090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b094:	b672      	cpsid	i
 800b096:	f383 8811 	msr	BASEPRI, r3
 800b09a:	f3bf 8f6f 	isb	sy
 800b09e:	f3bf 8f4f 	dsb	sy
 800b0a2:	b662      	cpsie	i
 800b0a4:	623b      	str	r3, [r7, #32]
}
 800b0a6:	bf00      	nop
 800b0a8:	bf00      	nop
 800b0aa:	e7fd      	b.n	800b0a8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800b0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d10d      	bne.n	800b0ce <xTaskCreateStatic+0x52>
	__asm volatile
 800b0b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0b6:	b672      	cpsid	i
 800b0b8:	f383 8811 	msr	BASEPRI, r3
 800b0bc:	f3bf 8f6f 	isb	sy
 800b0c0:	f3bf 8f4f 	dsb	sy
 800b0c4:	b662      	cpsie	i
 800b0c6:	61fb      	str	r3, [r7, #28]
}
 800b0c8:	bf00      	nop
 800b0ca:	bf00      	nop
 800b0cc:	e7fd      	b.n	800b0ca <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b0ce:	235c      	movs	r3, #92	@ 0x5c
 800b0d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	2b5c      	cmp	r3, #92	@ 0x5c
 800b0d6:	d00d      	beq.n	800b0f4 <xTaskCreateStatic+0x78>
	__asm volatile
 800b0d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0dc:	b672      	cpsid	i
 800b0de:	f383 8811 	msr	BASEPRI, r3
 800b0e2:	f3bf 8f6f 	isb	sy
 800b0e6:	f3bf 8f4f 	dsb	sy
 800b0ea:	b662      	cpsie	i
 800b0ec:	61bb      	str	r3, [r7, #24]
}
 800b0ee:	bf00      	nop
 800b0f0:	bf00      	nop
 800b0f2:	e7fd      	b.n	800b0f0 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b0f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b0f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d01e      	beq.n	800b13a <xTaskCreateStatic+0xbe>
 800b0fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d01b      	beq.n	800b13a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b104:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b108:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b10a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b10c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b10e:	2202      	movs	r2, #2
 800b110:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b114:	2300      	movs	r3, #0
 800b116:	9303      	str	r3, [sp, #12]
 800b118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b11a:	9302      	str	r3, [sp, #8]
 800b11c:	f107 0314 	add.w	r3, r7, #20
 800b120:	9301      	str	r3, [sp, #4]
 800b122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b124:	9300      	str	r3, [sp, #0]
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	68b9      	ldr	r1, [r7, #8]
 800b12c:	68f8      	ldr	r0, [r7, #12]
 800b12e:	f000 f850 	bl	800b1d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b132:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b134:	f000 f8e0 	bl	800b2f8 <prvAddNewTaskToReadyList>
 800b138:	e001      	b.n	800b13e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800b13a:	2300      	movs	r3, #0
 800b13c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b13e:	697b      	ldr	r3, [r7, #20]
	}
 800b140:	4618      	mov	r0, r3
 800b142:	3728      	adds	r7, #40	@ 0x28
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}

0800b148 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b08c      	sub	sp, #48	@ 0x30
 800b14c:	af04      	add	r7, sp, #16
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	60b9      	str	r1, [r7, #8]
 800b152:	603b      	str	r3, [r7, #0]
 800b154:	4613      	mov	r3, r2
 800b156:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b158:	88fb      	ldrh	r3, [r7, #6]
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	4618      	mov	r0, r3
 800b15e:	f001 fda3 	bl	800cca8 <pvPortMalloc>
 800b162:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d00e      	beq.n	800b188 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b16a:	205c      	movs	r0, #92	@ 0x5c
 800b16c:	f001 fd9c 	bl	800cca8 <pvPortMalloc>
 800b170:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b172:	69fb      	ldr	r3, [r7, #28]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d003      	beq.n	800b180 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b178:	69fb      	ldr	r3, [r7, #28]
 800b17a:	697a      	ldr	r2, [r7, #20]
 800b17c:	631a      	str	r2, [r3, #48]	@ 0x30
 800b17e:	e005      	b.n	800b18c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b180:	6978      	ldr	r0, [r7, #20]
 800b182:	f001 fe5f 	bl	800ce44 <vPortFree>
 800b186:	e001      	b.n	800b18c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b188:	2300      	movs	r3, #0
 800b18a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b18c:	69fb      	ldr	r3, [r7, #28]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d017      	beq.n	800b1c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b192:	69fb      	ldr	r3, [r7, #28]
 800b194:	2200      	movs	r2, #0
 800b196:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b19a:	88fa      	ldrh	r2, [r7, #6]
 800b19c:	2300      	movs	r3, #0
 800b19e:	9303      	str	r3, [sp, #12]
 800b1a0:	69fb      	ldr	r3, [r7, #28]
 800b1a2:	9302      	str	r3, [sp, #8]
 800b1a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1a6:	9301      	str	r3, [sp, #4]
 800b1a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1aa:	9300      	str	r3, [sp, #0]
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	68b9      	ldr	r1, [r7, #8]
 800b1b0:	68f8      	ldr	r0, [r7, #12]
 800b1b2:	f000 f80e 	bl	800b1d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b1b6:	69f8      	ldr	r0, [r7, #28]
 800b1b8:	f000 f89e 	bl	800b2f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	61bb      	str	r3, [r7, #24]
 800b1c0:	e002      	b.n	800b1c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b1c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b1c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b1c8:	69bb      	ldr	r3, [r7, #24]
	}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3720      	adds	r7, #32
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b088      	sub	sp, #32
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	60f8      	str	r0, [r7, #12]
 800b1da:	60b9      	str	r1, [r7, #8]
 800b1dc:	607a      	str	r2, [r7, #4]
 800b1de:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b1e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1e2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	21a5      	movs	r1, #165	@ 0xa5
 800b1ec:	f010 f9f4 	bl	801b5d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b1f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b1f4:	6879      	ldr	r1, [r7, #4]
 800b1f6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b1fa:	440b      	add	r3, r1
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	4413      	add	r3, r2
 800b200:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b202:	69bb      	ldr	r3, [r7, #24]
 800b204:	f023 0307 	bic.w	r3, r3, #7
 800b208:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b20a:	69bb      	ldr	r3, [r7, #24]
 800b20c:	f003 0307 	and.w	r3, r3, #7
 800b210:	2b00      	cmp	r3, #0
 800b212:	d00d      	beq.n	800b230 <prvInitialiseNewTask+0x5e>
	__asm volatile
 800b214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b218:	b672      	cpsid	i
 800b21a:	f383 8811 	msr	BASEPRI, r3
 800b21e:	f3bf 8f6f 	isb	sy
 800b222:	f3bf 8f4f 	dsb	sy
 800b226:	b662      	cpsie	i
 800b228:	617b      	str	r3, [r7, #20]
}
 800b22a:	bf00      	nop
 800b22c:	bf00      	nop
 800b22e:	e7fd      	b.n	800b22c <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d01f      	beq.n	800b276 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b236:	2300      	movs	r3, #0
 800b238:	61fb      	str	r3, [r7, #28]
 800b23a:	e012      	b.n	800b262 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b23c:	68ba      	ldr	r2, [r7, #8]
 800b23e:	69fb      	ldr	r3, [r7, #28]
 800b240:	4413      	add	r3, r2
 800b242:	7819      	ldrb	r1, [r3, #0]
 800b244:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b246:	69fb      	ldr	r3, [r7, #28]
 800b248:	4413      	add	r3, r2
 800b24a:	3334      	adds	r3, #52	@ 0x34
 800b24c:	460a      	mov	r2, r1
 800b24e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b250:	68ba      	ldr	r2, [r7, #8]
 800b252:	69fb      	ldr	r3, [r7, #28]
 800b254:	4413      	add	r3, r2
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d006      	beq.n	800b26a <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b25c:	69fb      	ldr	r3, [r7, #28]
 800b25e:	3301      	adds	r3, #1
 800b260:	61fb      	str	r3, [r7, #28]
 800b262:	69fb      	ldr	r3, [r7, #28]
 800b264:	2b0f      	cmp	r3, #15
 800b266:	d9e9      	bls.n	800b23c <prvInitialiseNewTask+0x6a>
 800b268:	e000      	b.n	800b26c <prvInitialiseNewTask+0x9a>
			{
				break;
 800b26a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b26e:	2200      	movs	r2, #0
 800b270:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b274:	e003      	b.n	800b27e <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b278:	2200      	movs	r2, #0
 800b27a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b27e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b280:	2b37      	cmp	r3, #55	@ 0x37
 800b282:	d901      	bls.n	800b288 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b284:	2337      	movs	r3, #55	@ 0x37
 800b286:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b28a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b28c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b290:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b292:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b296:	2200      	movs	r2, #0
 800b298:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b29c:	3304      	adds	r3, #4
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f7fe ff0e 	bl	800a0c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b2a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2a6:	3318      	adds	r3, #24
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f7fe ff09 	bl	800a0c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b2ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2b6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b2be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2c2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b2c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b2d2:	683a      	ldr	r2, [r7, #0]
 800b2d4:	68f9      	ldr	r1, [r7, #12]
 800b2d6:	69b8      	ldr	r0, [r7, #24]
 800b2d8:	f001 faa6 	bl	800c828 <pxPortInitialiseStack>
 800b2dc:	4602      	mov	r2, r0
 800b2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b2e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d002      	beq.n	800b2ee <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b2e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2ee:	bf00      	nop
 800b2f0:	3720      	adds	r7, #32
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
	...

0800b2f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b082      	sub	sp, #8
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b300:	f001 fba4 	bl	800ca4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b304:	4b2d      	ldr	r3, [pc, #180]	@ (800b3bc <prvAddNewTaskToReadyList+0xc4>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	3301      	adds	r3, #1
 800b30a:	4a2c      	ldr	r2, [pc, #176]	@ (800b3bc <prvAddNewTaskToReadyList+0xc4>)
 800b30c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b30e:	4b2c      	ldr	r3, [pc, #176]	@ (800b3c0 <prvAddNewTaskToReadyList+0xc8>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d109      	bne.n	800b32a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b316:	4a2a      	ldr	r2, [pc, #168]	@ (800b3c0 <prvAddNewTaskToReadyList+0xc8>)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b31c:	4b27      	ldr	r3, [pc, #156]	@ (800b3bc <prvAddNewTaskToReadyList+0xc4>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	2b01      	cmp	r3, #1
 800b322:	d110      	bne.n	800b346 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b324:	f000 fc5e 	bl	800bbe4 <prvInitialiseTaskLists>
 800b328:	e00d      	b.n	800b346 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b32a:	4b26      	ldr	r3, [pc, #152]	@ (800b3c4 <prvAddNewTaskToReadyList+0xcc>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d109      	bne.n	800b346 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b332:	4b23      	ldr	r3, [pc, #140]	@ (800b3c0 <prvAddNewTaskToReadyList+0xc8>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d802      	bhi.n	800b346 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b340:	4a1f      	ldr	r2, [pc, #124]	@ (800b3c0 <prvAddNewTaskToReadyList+0xc8>)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b346:	4b20      	ldr	r3, [pc, #128]	@ (800b3c8 <prvAddNewTaskToReadyList+0xd0>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	3301      	adds	r3, #1
 800b34c:	4a1e      	ldr	r2, [pc, #120]	@ (800b3c8 <prvAddNewTaskToReadyList+0xd0>)
 800b34e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b350:	4b1d      	ldr	r3, [pc, #116]	@ (800b3c8 <prvAddNewTaskToReadyList+0xd0>)
 800b352:	681a      	ldr	r2, [r3, #0]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b35c:	4b1b      	ldr	r3, [pc, #108]	@ (800b3cc <prvAddNewTaskToReadyList+0xd4>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	429a      	cmp	r2, r3
 800b362:	d903      	bls.n	800b36c <prvAddNewTaskToReadyList+0x74>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b368:	4a18      	ldr	r2, [pc, #96]	@ (800b3cc <prvAddNewTaskToReadyList+0xd4>)
 800b36a:	6013      	str	r3, [r2, #0]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b370:	4613      	mov	r3, r2
 800b372:	009b      	lsls	r3, r3, #2
 800b374:	4413      	add	r3, r2
 800b376:	009b      	lsls	r3, r3, #2
 800b378:	4a15      	ldr	r2, [pc, #84]	@ (800b3d0 <prvAddNewTaskToReadyList+0xd8>)
 800b37a:	441a      	add	r2, r3
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	3304      	adds	r3, #4
 800b380:	4619      	mov	r1, r3
 800b382:	4610      	mov	r0, r2
 800b384:	f7fe fea9 	bl	800a0da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b388:	f001 fb96 	bl	800cab8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b38c:	4b0d      	ldr	r3, [pc, #52]	@ (800b3c4 <prvAddNewTaskToReadyList+0xcc>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d00e      	beq.n	800b3b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b394:	4b0a      	ldr	r3, [pc, #40]	@ (800b3c0 <prvAddNewTaskToReadyList+0xc8>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	d207      	bcs.n	800b3b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b3a2:	4b0c      	ldr	r3, [pc, #48]	@ (800b3d4 <prvAddNewTaskToReadyList+0xdc>)
 800b3a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3a8:	601a      	str	r2, [r3, #0]
 800b3aa:	f3bf 8f4f 	dsb	sy
 800b3ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3b2:	bf00      	nop
 800b3b4:	3708      	adds	r7, #8
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}
 800b3ba:	bf00      	nop
 800b3bc:	20006a60 	.word	0x20006a60
 800b3c0:	2000658c 	.word	0x2000658c
 800b3c4:	20006a6c 	.word	0x20006a6c
 800b3c8:	20006a7c 	.word	0x20006a7c
 800b3cc:	20006a68 	.word	0x20006a68
 800b3d0:	20006590 	.word	0x20006590
 800b3d4:	e000ed04 	.word	0xe000ed04

0800b3d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b084      	sub	sp, #16
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d01a      	beq.n	800b420 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b3ea:	4b15      	ldr	r3, [pc, #84]	@ (800b440 <vTaskDelay+0x68>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d00d      	beq.n	800b40e <vTaskDelay+0x36>
	__asm volatile
 800b3f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3f6:	b672      	cpsid	i
 800b3f8:	f383 8811 	msr	BASEPRI, r3
 800b3fc:	f3bf 8f6f 	isb	sy
 800b400:	f3bf 8f4f 	dsb	sy
 800b404:	b662      	cpsie	i
 800b406:	60bb      	str	r3, [r7, #8]
}
 800b408:	bf00      	nop
 800b40a:	bf00      	nop
 800b40c:	e7fd      	b.n	800b40a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800b40e:	f000 f887 	bl	800b520 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b412:	2100      	movs	r1, #0
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f000 fe4b 	bl	800c0b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b41a:	f000 f88f 	bl	800b53c <xTaskResumeAll>
 800b41e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d107      	bne.n	800b436 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800b426:	4b07      	ldr	r3, [pc, #28]	@ (800b444 <vTaskDelay+0x6c>)
 800b428:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b42c:	601a      	str	r2, [r3, #0]
 800b42e:	f3bf 8f4f 	dsb	sy
 800b432:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b436:	bf00      	nop
 800b438:	3710      	adds	r7, #16
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
 800b43e:	bf00      	nop
 800b440:	20006a88 	.word	0x20006a88
 800b444:	e000ed04 	.word	0xe000ed04

0800b448 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b08a      	sub	sp, #40	@ 0x28
 800b44c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b44e:	2300      	movs	r3, #0
 800b450:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b452:	2300      	movs	r3, #0
 800b454:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b456:	463a      	mov	r2, r7
 800b458:	1d39      	adds	r1, r7, #4
 800b45a:	f107 0308 	add.w	r3, r7, #8
 800b45e:	4618      	mov	r0, r3
 800b460:	f7fe fdda 	bl	800a018 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b464:	6839      	ldr	r1, [r7, #0]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	68ba      	ldr	r2, [r7, #8]
 800b46a:	9202      	str	r2, [sp, #8]
 800b46c:	9301      	str	r3, [sp, #4]
 800b46e:	2300      	movs	r3, #0
 800b470:	9300      	str	r3, [sp, #0]
 800b472:	2300      	movs	r3, #0
 800b474:	460a      	mov	r2, r1
 800b476:	4924      	ldr	r1, [pc, #144]	@ (800b508 <vTaskStartScheduler+0xc0>)
 800b478:	4824      	ldr	r0, [pc, #144]	@ (800b50c <vTaskStartScheduler+0xc4>)
 800b47a:	f7ff fdff 	bl	800b07c <xTaskCreateStatic>
 800b47e:	4603      	mov	r3, r0
 800b480:	4a23      	ldr	r2, [pc, #140]	@ (800b510 <vTaskStartScheduler+0xc8>)
 800b482:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b484:	4b22      	ldr	r3, [pc, #136]	@ (800b510 <vTaskStartScheduler+0xc8>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d002      	beq.n	800b492 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b48c:	2301      	movs	r3, #1
 800b48e:	617b      	str	r3, [r7, #20]
 800b490:	e001      	b.n	800b496 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b492:	2300      	movs	r3, #0
 800b494:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	2b01      	cmp	r3, #1
 800b49a:	d102      	bne.n	800b4a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b49c:	f000 fe5c 	bl	800c158 <xTimerCreateTimerTask>
 800b4a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d118      	bne.n	800b4da <vTaskStartScheduler+0x92>
	__asm volatile
 800b4a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4ac:	b672      	cpsid	i
 800b4ae:	f383 8811 	msr	BASEPRI, r3
 800b4b2:	f3bf 8f6f 	isb	sy
 800b4b6:	f3bf 8f4f 	dsb	sy
 800b4ba:	b662      	cpsie	i
 800b4bc:	613b      	str	r3, [r7, #16]
}
 800b4be:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b4c0:	4b14      	ldr	r3, [pc, #80]	@ (800b514 <vTaskStartScheduler+0xcc>)
 800b4c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b4c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b4c8:	4b13      	ldr	r3, [pc, #76]	@ (800b518 <vTaskStartScheduler+0xd0>)
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b4ce:	4b13      	ldr	r3, [pc, #76]	@ (800b51c <vTaskStartScheduler+0xd4>)
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b4d4:	f001 fa3c 	bl	800c950 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b4d8:	e011      	b.n	800b4fe <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b4e0:	d10d      	bne.n	800b4fe <vTaskStartScheduler+0xb6>
	__asm volatile
 800b4e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4e6:	b672      	cpsid	i
 800b4e8:	f383 8811 	msr	BASEPRI, r3
 800b4ec:	f3bf 8f6f 	isb	sy
 800b4f0:	f3bf 8f4f 	dsb	sy
 800b4f4:	b662      	cpsie	i
 800b4f6:	60fb      	str	r3, [r7, #12]
}
 800b4f8:	bf00      	nop
 800b4fa:	bf00      	nop
 800b4fc:	e7fd      	b.n	800b4fa <vTaskStartScheduler+0xb2>
}
 800b4fe:	bf00      	nop
 800b500:	3718      	adds	r7, #24
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
 800b506:	bf00      	nop
 800b508:	0801c4d4 	.word	0x0801c4d4
 800b50c:	0800bbb5 	.word	0x0800bbb5
 800b510:	20006a84 	.word	0x20006a84
 800b514:	20006a80 	.word	0x20006a80
 800b518:	20006a6c 	.word	0x20006a6c
 800b51c:	20006a64 	.word	0x20006a64

0800b520 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b520:	b480      	push	{r7}
 800b522:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b524:	4b04      	ldr	r3, [pc, #16]	@ (800b538 <vTaskSuspendAll+0x18>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	3301      	adds	r3, #1
 800b52a:	4a03      	ldr	r2, [pc, #12]	@ (800b538 <vTaskSuspendAll+0x18>)
 800b52c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b52e:	bf00      	nop
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr
 800b538:	20006a88 	.word	0x20006a88

0800b53c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b084      	sub	sp, #16
 800b540:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b542:	2300      	movs	r3, #0
 800b544:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b546:	2300      	movs	r3, #0
 800b548:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b54a:	4b43      	ldr	r3, [pc, #268]	@ (800b658 <xTaskResumeAll+0x11c>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d10d      	bne.n	800b56e <xTaskResumeAll+0x32>
	__asm volatile
 800b552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b556:	b672      	cpsid	i
 800b558:	f383 8811 	msr	BASEPRI, r3
 800b55c:	f3bf 8f6f 	isb	sy
 800b560:	f3bf 8f4f 	dsb	sy
 800b564:	b662      	cpsie	i
 800b566:	603b      	str	r3, [r7, #0]
}
 800b568:	bf00      	nop
 800b56a:	bf00      	nop
 800b56c:	e7fd      	b.n	800b56a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b56e:	f001 fa6d 	bl	800ca4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b572:	4b39      	ldr	r3, [pc, #228]	@ (800b658 <xTaskResumeAll+0x11c>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	3b01      	subs	r3, #1
 800b578:	4a37      	ldr	r2, [pc, #220]	@ (800b658 <xTaskResumeAll+0x11c>)
 800b57a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b57c:	4b36      	ldr	r3, [pc, #216]	@ (800b658 <xTaskResumeAll+0x11c>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d162      	bne.n	800b64a <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b584:	4b35      	ldr	r3, [pc, #212]	@ (800b65c <xTaskResumeAll+0x120>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d05e      	beq.n	800b64a <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b58c:	e02f      	b.n	800b5ee <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b58e:	4b34      	ldr	r3, [pc, #208]	@ (800b660 <xTaskResumeAll+0x124>)
 800b590:	68db      	ldr	r3, [r3, #12]
 800b592:	68db      	ldr	r3, [r3, #12]
 800b594:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	3318      	adds	r3, #24
 800b59a:	4618      	mov	r0, r3
 800b59c:	f7fe fdfa 	bl	800a194 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	3304      	adds	r3, #4
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f7fe fdf5 	bl	800a194 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5ae:	4b2d      	ldr	r3, [pc, #180]	@ (800b664 <xTaskResumeAll+0x128>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d903      	bls.n	800b5be <xTaskResumeAll+0x82>
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5ba:	4a2a      	ldr	r2, [pc, #168]	@ (800b664 <xTaskResumeAll+0x128>)
 800b5bc:	6013      	str	r3, [r2, #0]
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5c2:	4613      	mov	r3, r2
 800b5c4:	009b      	lsls	r3, r3, #2
 800b5c6:	4413      	add	r3, r2
 800b5c8:	009b      	lsls	r3, r3, #2
 800b5ca:	4a27      	ldr	r2, [pc, #156]	@ (800b668 <xTaskResumeAll+0x12c>)
 800b5cc:	441a      	add	r2, r3
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	3304      	adds	r3, #4
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	4610      	mov	r0, r2
 800b5d6:	f7fe fd80 	bl	800a0da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5de:	4b23      	ldr	r3, [pc, #140]	@ (800b66c <xTaskResumeAll+0x130>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d302      	bcc.n	800b5ee <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800b5e8:	4b21      	ldr	r3, [pc, #132]	@ (800b670 <xTaskResumeAll+0x134>)
 800b5ea:	2201      	movs	r2, #1
 800b5ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b5ee:	4b1c      	ldr	r3, [pc, #112]	@ (800b660 <xTaskResumeAll+0x124>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d1cb      	bne.n	800b58e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d001      	beq.n	800b600 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b5fc:	f000 fb92 	bl	800bd24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b600:	4b1c      	ldr	r3, [pc, #112]	@ (800b674 <xTaskResumeAll+0x138>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d010      	beq.n	800b62e <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b60c:	f000 f846 	bl	800b69c <xTaskIncrementTick>
 800b610:	4603      	mov	r3, r0
 800b612:	2b00      	cmp	r3, #0
 800b614:	d002      	beq.n	800b61c <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800b616:	4b16      	ldr	r3, [pc, #88]	@ (800b670 <xTaskResumeAll+0x134>)
 800b618:	2201      	movs	r2, #1
 800b61a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	3b01      	subs	r3, #1
 800b620:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d1f1      	bne.n	800b60c <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800b628:	4b12      	ldr	r3, [pc, #72]	@ (800b674 <xTaskResumeAll+0x138>)
 800b62a:	2200      	movs	r2, #0
 800b62c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b62e:	4b10      	ldr	r3, [pc, #64]	@ (800b670 <xTaskResumeAll+0x134>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d009      	beq.n	800b64a <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b636:	2301      	movs	r3, #1
 800b638:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b63a:	4b0f      	ldr	r3, [pc, #60]	@ (800b678 <xTaskResumeAll+0x13c>)
 800b63c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b640:	601a      	str	r2, [r3, #0]
 800b642:	f3bf 8f4f 	dsb	sy
 800b646:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b64a:	f001 fa35 	bl	800cab8 <vPortExitCritical>

	return xAlreadyYielded;
 800b64e:	68bb      	ldr	r3, [r7, #8]
}
 800b650:	4618      	mov	r0, r3
 800b652:	3710      	adds	r7, #16
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}
 800b658:	20006a88 	.word	0x20006a88
 800b65c:	20006a60 	.word	0x20006a60
 800b660:	20006a20 	.word	0x20006a20
 800b664:	20006a68 	.word	0x20006a68
 800b668:	20006590 	.word	0x20006590
 800b66c:	2000658c 	.word	0x2000658c
 800b670:	20006a74 	.word	0x20006a74
 800b674:	20006a70 	.word	0x20006a70
 800b678:	e000ed04 	.word	0xe000ed04

0800b67c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b67c:	b480      	push	{r7}
 800b67e:	b083      	sub	sp, #12
 800b680:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b682:	4b05      	ldr	r3, [pc, #20]	@ (800b698 <xTaskGetTickCount+0x1c>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b688:	687b      	ldr	r3, [r7, #4]
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	370c      	adds	r7, #12
 800b68e:	46bd      	mov	sp, r7
 800b690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b694:	4770      	bx	lr
 800b696:	bf00      	nop
 800b698:	20006a64 	.word	0x20006a64

0800b69c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b086      	sub	sp, #24
 800b6a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6a6:	4b50      	ldr	r3, [pc, #320]	@ (800b7e8 <xTaskIncrementTick+0x14c>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	f040 808c 	bne.w	800b7c8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b6b0:	4b4e      	ldr	r3, [pc, #312]	@ (800b7ec <xTaskIncrementTick+0x150>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	3301      	adds	r3, #1
 800b6b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b6b8:	4a4c      	ldr	r2, [pc, #304]	@ (800b7ec <xTaskIncrementTick+0x150>)
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d123      	bne.n	800b70c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800b6c4:	4b4a      	ldr	r3, [pc, #296]	@ (800b7f0 <xTaskIncrementTick+0x154>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d00d      	beq.n	800b6ea <xTaskIncrementTick+0x4e>
	__asm volatile
 800b6ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6d2:	b672      	cpsid	i
 800b6d4:	f383 8811 	msr	BASEPRI, r3
 800b6d8:	f3bf 8f6f 	isb	sy
 800b6dc:	f3bf 8f4f 	dsb	sy
 800b6e0:	b662      	cpsie	i
 800b6e2:	603b      	str	r3, [r7, #0]
}
 800b6e4:	bf00      	nop
 800b6e6:	bf00      	nop
 800b6e8:	e7fd      	b.n	800b6e6 <xTaskIncrementTick+0x4a>
 800b6ea:	4b41      	ldr	r3, [pc, #260]	@ (800b7f0 <xTaskIncrementTick+0x154>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	60fb      	str	r3, [r7, #12]
 800b6f0:	4b40      	ldr	r3, [pc, #256]	@ (800b7f4 <xTaskIncrementTick+0x158>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	4a3e      	ldr	r2, [pc, #248]	@ (800b7f0 <xTaskIncrementTick+0x154>)
 800b6f6:	6013      	str	r3, [r2, #0]
 800b6f8:	4a3e      	ldr	r2, [pc, #248]	@ (800b7f4 <xTaskIncrementTick+0x158>)
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	6013      	str	r3, [r2, #0]
 800b6fe:	4b3e      	ldr	r3, [pc, #248]	@ (800b7f8 <xTaskIncrementTick+0x15c>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	3301      	adds	r3, #1
 800b704:	4a3c      	ldr	r2, [pc, #240]	@ (800b7f8 <xTaskIncrementTick+0x15c>)
 800b706:	6013      	str	r3, [r2, #0]
 800b708:	f000 fb0c 	bl	800bd24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b70c:	4b3b      	ldr	r3, [pc, #236]	@ (800b7fc <xTaskIncrementTick+0x160>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	693a      	ldr	r2, [r7, #16]
 800b712:	429a      	cmp	r2, r3
 800b714:	d349      	bcc.n	800b7aa <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b716:	4b36      	ldr	r3, [pc, #216]	@ (800b7f0 <xTaskIncrementTick+0x154>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d104      	bne.n	800b72a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b720:	4b36      	ldr	r3, [pc, #216]	@ (800b7fc <xTaskIncrementTick+0x160>)
 800b722:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b726:	601a      	str	r2, [r3, #0]
					break;
 800b728:	e03f      	b.n	800b7aa <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b72a:	4b31      	ldr	r3, [pc, #196]	@ (800b7f0 <xTaskIncrementTick+0x154>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	68db      	ldr	r3, [r3, #12]
 800b730:	68db      	ldr	r3, [r3, #12]
 800b732:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	685b      	ldr	r3, [r3, #4]
 800b738:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b73a:	693a      	ldr	r2, [r7, #16]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	429a      	cmp	r2, r3
 800b740:	d203      	bcs.n	800b74a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b742:	4a2e      	ldr	r2, [pc, #184]	@ (800b7fc <xTaskIncrementTick+0x160>)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b748:	e02f      	b.n	800b7aa <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	3304      	adds	r3, #4
 800b74e:	4618      	mov	r0, r3
 800b750:	f7fe fd20 	bl	800a194 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d004      	beq.n	800b766 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	3318      	adds	r3, #24
 800b760:	4618      	mov	r0, r3
 800b762:	f7fe fd17 	bl	800a194 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b76a:	4b25      	ldr	r3, [pc, #148]	@ (800b800 <xTaskIncrementTick+0x164>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	429a      	cmp	r2, r3
 800b770:	d903      	bls.n	800b77a <xTaskIncrementTick+0xde>
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b776:	4a22      	ldr	r2, [pc, #136]	@ (800b800 <xTaskIncrementTick+0x164>)
 800b778:	6013      	str	r3, [r2, #0]
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b77e:	4613      	mov	r3, r2
 800b780:	009b      	lsls	r3, r3, #2
 800b782:	4413      	add	r3, r2
 800b784:	009b      	lsls	r3, r3, #2
 800b786:	4a1f      	ldr	r2, [pc, #124]	@ (800b804 <xTaskIncrementTick+0x168>)
 800b788:	441a      	add	r2, r3
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	3304      	adds	r3, #4
 800b78e:	4619      	mov	r1, r3
 800b790:	4610      	mov	r0, r2
 800b792:	f7fe fca2 	bl	800a0da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b79a:	4b1b      	ldr	r3, [pc, #108]	@ (800b808 <xTaskIncrementTick+0x16c>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d3b8      	bcc.n	800b716 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7a8:	e7b5      	b.n	800b716 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b7aa:	4b17      	ldr	r3, [pc, #92]	@ (800b808 <xTaskIncrementTick+0x16c>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7b0:	4914      	ldr	r1, [pc, #80]	@ (800b804 <xTaskIncrementTick+0x168>)
 800b7b2:	4613      	mov	r3, r2
 800b7b4:	009b      	lsls	r3, r3, #2
 800b7b6:	4413      	add	r3, r2
 800b7b8:	009b      	lsls	r3, r3, #2
 800b7ba:	440b      	add	r3, r1
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	d907      	bls.n	800b7d2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	617b      	str	r3, [r7, #20]
 800b7c6:	e004      	b.n	800b7d2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b7c8:	4b10      	ldr	r3, [pc, #64]	@ (800b80c <xTaskIncrementTick+0x170>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	3301      	adds	r3, #1
 800b7ce:	4a0f      	ldr	r2, [pc, #60]	@ (800b80c <xTaskIncrementTick+0x170>)
 800b7d0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b7d2:	4b0f      	ldr	r3, [pc, #60]	@ (800b810 <xTaskIncrementTick+0x174>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d001      	beq.n	800b7de <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800b7da:	2301      	movs	r3, #1
 800b7dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b7de:	697b      	ldr	r3, [r7, #20]
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3718      	adds	r7, #24
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}
 800b7e8:	20006a88 	.word	0x20006a88
 800b7ec:	20006a64 	.word	0x20006a64
 800b7f0:	20006a18 	.word	0x20006a18
 800b7f4:	20006a1c 	.word	0x20006a1c
 800b7f8:	20006a78 	.word	0x20006a78
 800b7fc:	20006a80 	.word	0x20006a80
 800b800:	20006a68 	.word	0x20006a68
 800b804:	20006590 	.word	0x20006590
 800b808:	2000658c 	.word	0x2000658c
 800b80c:	20006a70 	.word	0x20006a70
 800b810:	20006a74 	.word	0x20006a74

0800b814 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b814:	b480      	push	{r7}
 800b816:	b085      	sub	sp, #20
 800b818:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b81a:	4b29      	ldr	r3, [pc, #164]	@ (800b8c0 <vTaskSwitchContext+0xac>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d003      	beq.n	800b82a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b822:	4b28      	ldr	r3, [pc, #160]	@ (800b8c4 <vTaskSwitchContext+0xb0>)
 800b824:	2201      	movs	r2, #1
 800b826:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b828:	e044      	b.n	800b8b4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800b82a:	4b26      	ldr	r3, [pc, #152]	@ (800b8c4 <vTaskSwitchContext+0xb0>)
 800b82c:	2200      	movs	r2, #0
 800b82e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b830:	4b25      	ldr	r3, [pc, #148]	@ (800b8c8 <vTaskSwitchContext+0xb4>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	60fb      	str	r3, [r7, #12]
 800b836:	e013      	b.n	800b860 <vTaskSwitchContext+0x4c>
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d10d      	bne.n	800b85a <vTaskSwitchContext+0x46>
	__asm volatile
 800b83e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b842:	b672      	cpsid	i
 800b844:	f383 8811 	msr	BASEPRI, r3
 800b848:	f3bf 8f6f 	isb	sy
 800b84c:	f3bf 8f4f 	dsb	sy
 800b850:	b662      	cpsie	i
 800b852:	607b      	str	r3, [r7, #4]
}
 800b854:	bf00      	nop
 800b856:	bf00      	nop
 800b858:	e7fd      	b.n	800b856 <vTaskSwitchContext+0x42>
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	3b01      	subs	r3, #1
 800b85e:	60fb      	str	r3, [r7, #12]
 800b860:	491a      	ldr	r1, [pc, #104]	@ (800b8cc <vTaskSwitchContext+0xb8>)
 800b862:	68fa      	ldr	r2, [r7, #12]
 800b864:	4613      	mov	r3, r2
 800b866:	009b      	lsls	r3, r3, #2
 800b868:	4413      	add	r3, r2
 800b86a:	009b      	lsls	r3, r3, #2
 800b86c:	440b      	add	r3, r1
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d0e1      	beq.n	800b838 <vTaskSwitchContext+0x24>
 800b874:	68fa      	ldr	r2, [r7, #12]
 800b876:	4613      	mov	r3, r2
 800b878:	009b      	lsls	r3, r3, #2
 800b87a:	4413      	add	r3, r2
 800b87c:	009b      	lsls	r3, r3, #2
 800b87e:	4a13      	ldr	r2, [pc, #76]	@ (800b8cc <vTaskSwitchContext+0xb8>)
 800b880:	4413      	add	r3, r2
 800b882:	60bb      	str	r3, [r7, #8]
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	685a      	ldr	r2, [r3, #4]
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	605a      	str	r2, [r3, #4]
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	685a      	ldr	r2, [r3, #4]
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	3308      	adds	r3, #8
 800b896:	429a      	cmp	r2, r3
 800b898:	d104      	bne.n	800b8a4 <vTaskSwitchContext+0x90>
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	685b      	ldr	r3, [r3, #4]
 800b89e:	685a      	ldr	r2, [r3, #4]
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	605a      	str	r2, [r3, #4]
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	685b      	ldr	r3, [r3, #4]
 800b8a8:	68db      	ldr	r3, [r3, #12]
 800b8aa:	4a09      	ldr	r2, [pc, #36]	@ (800b8d0 <vTaskSwitchContext+0xbc>)
 800b8ac:	6013      	str	r3, [r2, #0]
 800b8ae:	4a06      	ldr	r2, [pc, #24]	@ (800b8c8 <vTaskSwitchContext+0xb4>)
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	6013      	str	r3, [r2, #0]
}
 800b8b4:	bf00      	nop
 800b8b6:	3714      	adds	r7, #20
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr
 800b8c0:	20006a88 	.word	0x20006a88
 800b8c4:	20006a74 	.word	0x20006a74
 800b8c8:	20006a68 	.word	0x20006a68
 800b8cc:	20006590 	.word	0x20006590
 800b8d0:	2000658c 	.word	0x2000658c

0800b8d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d10d      	bne.n	800b900 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800b8e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8e8:	b672      	cpsid	i
 800b8ea:	f383 8811 	msr	BASEPRI, r3
 800b8ee:	f3bf 8f6f 	isb	sy
 800b8f2:	f3bf 8f4f 	dsb	sy
 800b8f6:	b662      	cpsie	i
 800b8f8:	60fb      	str	r3, [r7, #12]
}
 800b8fa:	bf00      	nop
 800b8fc:	bf00      	nop
 800b8fe:	e7fd      	b.n	800b8fc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b900:	4b07      	ldr	r3, [pc, #28]	@ (800b920 <vTaskPlaceOnEventList+0x4c>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	3318      	adds	r3, #24
 800b906:	4619      	mov	r1, r3
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f7fe fc0a 	bl	800a122 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b90e:	2101      	movs	r1, #1
 800b910:	6838      	ldr	r0, [r7, #0]
 800b912:	f000 fbcd 	bl	800c0b0 <prvAddCurrentTaskToDelayedList>
}
 800b916:	bf00      	nop
 800b918:	3710      	adds	r7, #16
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}
 800b91e:	bf00      	nop
 800b920:	2000658c 	.word	0x2000658c

0800b924 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b924:	b580      	push	{r7, lr}
 800b926:	b086      	sub	sp, #24
 800b928:	af00      	add	r7, sp, #0
 800b92a:	60f8      	str	r0, [r7, #12]
 800b92c:	60b9      	str	r1, [r7, #8]
 800b92e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d10d      	bne.n	800b952 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800b936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b93a:	b672      	cpsid	i
 800b93c:	f383 8811 	msr	BASEPRI, r3
 800b940:	f3bf 8f6f 	isb	sy
 800b944:	f3bf 8f4f 	dsb	sy
 800b948:	b662      	cpsie	i
 800b94a:	617b      	str	r3, [r7, #20]
}
 800b94c:	bf00      	nop
 800b94e:	bf00      	nop
 800b950:	e7fd      	b.n	800b94e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b952:	4b0a      	ldr	r3, [pc, #40]	@ (800b97c <vTaskPlaceOnEventListRestricted+0x58>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	3318      	adds	r3, #24
 800b958:	4619      	mov	r1, r3
 800b95a:	68f8      	ldr	r0, [r7, #12]
 800b95c:	f7fe fbbd 	bl	800a0da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d002      	beq.n	800b96c <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800b966:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b96a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b96c:	6879      	ldr	r1, [r7, #4]
 800b96e:	68b8      	ldr	r0, [r7, #8]
 800b970:	f000 fb9e 	bl	800c0b0 <prvAddCurrentTaskToDelayedList>
	}
 800b974:	bf00      	nop
 800b976:	3718      	adds	r7, #24
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}
 800b97c:	2000658c 	.word	0x2000658c

0800b980 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b086      	sub	sp, #24
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	68db      	ldr	r3, [r3, #12]
 800b98c:	68db      	ldr	r3, [r3, #12]
 800b98e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d10d      	bne.n	800b9b2 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800b996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b99a:	b672      	cpsid	i
 800b99c:	f383 8811 	msr	BASEPRI, r3
 800b9a0:	f3bf 8f6f 	isb	sy
 800b9a4:	f3bf 8f4f 	dsb	sy
 800b9a8:	b662      	cpsie	i
 800b9aa:	60fb      	str	r3, [r7, #12]
}
 800b9ac:	bf00      	nop
 800b9ae:	bf00      	nop
 800b9b0:	e7fd      	b.n	800b9ae <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	3318      	adds	r3, #24
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7fe fbec 	bl	800a194 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9bc:	4b1d      	ldr	r3, [pc, #116]	@ (800ba34 <xTaskRemoveFromEventList+0xb4>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d11d      	bne.n	800ba00 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	3304      	adds	r3, #4
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7fe fbe3 	bl	800a194 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9d2:	4b19      	ldr	r3, [pc, #100]	@ (800ba38 <xTaskRemoveFromEventList+0xb8>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d903      	bls.n	800b9e2 <xTaskRemoveFromEventList+0x62>
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9de:	4a16      	ldr	r2, [pc, #88]	@ (800ba38 <xTaskRemoveFromEventList+0xb8>)
 800b9e0:	6013      	str	r3, [r2, #0]
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9e6:	4613      	mov	r3, r2
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	4413      	add	r3, r2
 800b9ec:	009b      	lsls	r3, r3, #2
 800b9ee:	4a13      	ldr	r2, [pc, #76]	@ (800ba3c <xTaskRemoveFromEventList+0xbc>)
 800b9f0:	441a      	add	r2, r3
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	3304      	adds	r3, #4
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	4610      	mov	r0, r2
 800b9fa:	f7fe fb6e 	bl	800a0da <vListInsertEnd>
 800b9fe:	e005      	b.n	800ba0c <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	3318      	adds	r3, #24
 800ba04:	4619      	mov	r1, r3
 800ba06:	480e      	ldr	r0, [pc, #56]	@ (800ba40 <xTaskRemoveFromEventList+0xc0>)
 800ba08:	f7fe fb67 	bl	800a0da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba10:	4b0c      	ldr	r3, [pc, #48]	@ (800ba44 <xTaskRemoveFromEventList+0xc4>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d905      	bls.n	800ba26 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ba1e:	4b0a      	ldr	r3, [pc, #40]	@ (800ba48 <xTaskRemoveFromEventList+0xc8>)
 800ba20:	2201      	movs	r2, #1
 800ba22:	601a      	str	r2, [r3, #0]
 800ba24:	e001      	b.n	800ba2a <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800ba26:	2300      	movs	r3, #0
 800ba28:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ba2a:	697b      	ldr	r3, [r7, #20]
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3718      	adds	r7, #24
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}
 800ba34:	20006a88 	.word	0x20006a88
 800ba38:	20006a68 	.word	0x20006a68
 800ba3c:	20006590 	.word	0x20006590
 800ba40:	20006a20 	.word	0x20006a20
 800ba44:	2000658c 	.word	0x2000658c
 800ba48:	20006a74 	.word	0x20006a74

0800ba4c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d10d      	bne.n	800ba76 <vTaskSetTimeOutState+0x2a>
	__asm volatile
 800ba5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba5e:	b672      	cpsid	i
 800ba60:	f383 8811 	msr	BASEPRI, r3
 800ba64:	f3bf 8f6f 	isb	sy
 800ba68:	f3bf 8f4f 	dsb	sy
 800ba6c:	b662      	cpsie	i
 800ba6e:	60fb      	str	r3, [r7, #12]
}
 800ba70:	bf00      	nop
 800ba72:	bf00      	nop
 800ba74:	e7fd      	b.n	800ba72 <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 800ba76:	f000 ffe9 	bl	800ca4c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ba7a:	4b07      	ldr	r3, [pc, #28]	@ (800ba98 <vTaskSetTimeOutState+0x4c>)
 800ba7c:	681a      	ldr	r2, [r3, #0]
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800ba82:	4b06      	ldr	r3, [pc, #24]	@ (800ba9c <vTaskSetTimeOutState+0x50>)
 800ba84:	681a      	ldr	r2, [r3, #0]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800ba8a:	f001 f815 	bl	800cab8 <vPortExitCritical>
}
 800ba8e:	bf00      	nop
 800ba90:	3710      	adds	r7, #16
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}
 800ba96:	bf00      	nop
 800ba98:	20006a78 	.word	0x20006a78
 800ba9c:	20006a64 	.word	0x20006a64

0800baa0 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800baa0:	b480      	push	{r7}
 800baa2:	b083      	sub	sp, #12
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800baa8:	4b06      	ldr	r3, [pc, #24]	@ (800bac4 <vTaskInternalSetTimeOutState+0x24>)
 800baaa:	681a      	ldr	r2, [r3, #0]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bab0:	4b05      	ldr	r3, [pc, #20]	@ (800bac8 <vTaskInternalSetTimeOutState+0x28>)
 800bab2:	681a      	ldr	r2, [r3, #0]
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	605a      	str	r2, [r3, #4]
}
 800bab8:	bf00      	nop
 800baba:	370c      	adds	r7, #12
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr
 800bac4:	20006a78 	.word	0x20006a78
 800bac8:	20006a64 	.word	0x20006a64

0800bacc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b088      	sub	sp, #32
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d10d      	bne.n	800baf8 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800badc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bae0:	b672      	cpsid	i
 800bae2:	f383 8811 	msr	BASEPRI, r3
 800bae6:	f3bf 8f6f 	isb	sy
 800baea:	f3bf 8f4f 	dsb	sy
 800baee:	b662      	cpsie	i
 800baf0:	613b      	str	r3, [r7, #16]
}
 800baf2:	bf00      	nop
 800baf4:	bf00      	nop
 800baf6:	e7fd      	b.n	800baf4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d10d      	bne.n	800bb1a <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800bafe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb02:	b672      	cpsid	i
 800bb04:	f383 8811 	msr	BASEPRI, r3
 800bb08:	f3bf 8f6f 	isb	sy
 800bb0c:	f3bf 8f4f 	dsb	sy
 800bb10:	b662      	cpsie	i
 800bb12:	60fb      	str	r3, [r7, #12]
}
 800bb14:	bf00      	nop
 800bb16:	bf00      	nop
 800bb18:	e7fd      	b.n	800bb16 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800bb1a:	f000 ff97 	bl	800ca4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bb1e:	4b1d      	ldr	r3, [pc, #116]	@ (800bb94 <xTaskCheckForTimeOut+0xc8>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	685b      	ldr	r3, [r3, #4]
 800bb28:	69ba      	ldr	r2, [r7, #24]
 800bb2a:	1ad3      	subs	r3, r2, r3
 800bb2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bb36:	d102      	bne.n	800bb3e <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	61fb      	str	r3, [r7, #28]
 800bb3c:	e023      	b.n	800bb86 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681a      	ldr	r2, [r3, #0]
 800bb42:	4b15      	ldr	r3, [pc, #84]	@ (800bb98 <xTaskCheckForTimeOut+0xcc>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d007      	beq.n	800bb5a <xTaskCheckForTimeOut+0x8e>
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	685b      	ldr	r3, [r3, #4]
 800bb4e:	69ba      	ldr	r2, [r7, #24]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d302      	bcc.n	800bb5a <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bb54:	2301      	movs	r3, #1
 800bb56:	61fb      	str	r3, [r7, #28]
 800bb58:	e015      	b.n	800bb86 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	697a      	ldr	r2, [r7, #20]
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d20b      	bcs.n	800bb7c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	681a      	ldr	r2, [r3, #0]
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	1ad2      	subs	r2, r2, r3
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f7ff ff95 	bl	800baa0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bb76:	2300      	movs	r3, #0
 800bb78:	61fb      	str	r3, [r7, #28]
 800bb7a:	e004      	b.n	800bb86 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bb82:	2301      	movs	r3, #1
 800bb84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bb86:	f000 ff97 	bl	800cab8 <vPortExitCritical>

	return xReturn;
 800bb8a:	69fb      	ldr	r3, [r7, #28]
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3720      	adds	r7, #32
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}
 800bb94:	20006a64 	.word	0x20006a64
 800bb98:	20006a78 	.word	0x20006a78

0800bb9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bba0:	4b03      	ldr	r3, [pc, #12]	@ (800bbb0 <vTaskMissedYield+0x14>)
 800bba2:	2201      	movs	r2, #1
 800bba4:	601a      	str	r2, [r3, #0]
}
 800bba6:	bf00      	nop
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr
 800bbb0:	20006a74 	.word	0x20006a74

0800bbb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b082      	sub	sp, #8
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bbbc:	f000 f852 	bl	800bc64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bbc0:	4b06      	ldr	r3, [pc, #24]	@ (800bbdc <prvIdleTask+0x28>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	2b01      	cmp	r3, #1
 800bbc6:	d9f9      	bls.n	800bbbc <prvIdleTask+0x8>
			{
				taskYIELD();
 800bbc8:	4b05      	ldr	r3, [pc, #20]	@ (800bbe0 <prvIdleTask+0x2c>)
 800bbca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbce:	601a      	str	r2, [r3, #0]
 800bbd0:	f3bf 8f4f 	dsb	sy
 800bbd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bbd8:	e7f0      	b.n	800bbbc <prvIdleTask+0x8>
 800bbda:	bf00      	nop
 800bbdc:	20006590 	.word	0x20006590
 800bbe0:	e000ed04 	.word	0xe000ed04

0800bbe4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b082      	sub	sp, #8
 800bbe8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bbea:	2300      	movs	r3, #0
 800bbec:	607b      	str	r3, [r7, #4]
 800bbee:	e00c      	b.n	800bc0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bbf0:	687a      	ldr	r2, [r7, #4]
 800bbf2:	4613      	mov	r3, r2
 800bbf4:	009b      	lsls	r3, r3, #2
 800bbf6:	4413      	add	r3, r2
 800bbf8:	009b      	lsls	r3, r3, #2
 800bbfa:	4a12      	ldr	r2, [pc, #72]	@ (800bc44 <prvInitialiseTaskLists+0x60>)
 800bbfc:	4413      	add	r3, r2
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f7fe fa3e 	bl	800a080 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	3301      	adds	r3, #1
 800bc08:	607b      	str	r3, [r7, #4]
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2b37      	cmp	r3, #55	@ 0x37
 800bc0e:	d9ef      	bls.n	800bbf0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bc10:	480d      	ldr	r0, [pc, #52]	@ (800bc48 <prvInitialiseTaskLists+0x64>)
 800bc12:	f7fe fa35 	bl	800a080 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bc16:	480d      	ldr	r0, [pc, #52]	@ (800bc4c <prvInitialiseTaskLists+0x68>)
 800bc18:	f7fe fa32 	bl	800a080 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bc1c:	480c      	ldr	r0, [pc, #48]	@ (800bc50 <prvInitialiseTaskLists+0x6c>)
 800bc1e:	f7fe fa2f 	bl	800a080 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bc22:	480c      	ldr	r0, [pc, #48]	@ (800bc54 <prvInitialiseTaskLists+0x70>)
 800bc24:	f7fe fa2c 	bl	800a080 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bc28:	480b      	ldr	r0, [pc, #44]	@ (800bc58 <prvInitialiseTaskLists+0x74>)
 800bc2a:	f7fe fa29 	bl	800a080 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bc2e:	4b0b      	ldr	r3, [pc, #44]	@ (800bc5c <prvInitialiseTaskLists+0x78>)
 800bc30:	4a05      	ldr	r2, [pc, #20]	@ (800bc48 <prvInitialiseTaskLists+0x64>)
 800bc32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bc34:	4b0a      	ldr	r3, [pc, #40]	@ (800bc60 <prvInitialiseTaskLists+0x7c>)
 800bc36:	4a05      	ldr	r2, [pc, #20]	@ (800bc4c <prvInitialiseTaskLists+0x68>)
 800bc38:	601a      	str	r2, [r3, #0]
}
 800bc3a:	bf00      	nop
 800bc3c:	3708      	adds	r7, #8
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	20006590 	.word	0x20006590
 800bc48:	200069f0 	.word	0x200069f0
 800bc4c:	20006a04 	.word	0x20006a04
 800bc50:	20006a20 	.word	0x20006a20
 800bc54:	20006a34 	.word	0x20006a34
 800bc58:	20006a4c 	.word	0x20006a4c
 800bc5c:	20006a18 	.word	0x20006a18
 800bc60:	20006a1c 	.word	0x20006a1c

0800bc64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b082      	sub	sp, #8
 800bc68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc6a:	e019      	b.n	800bca0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bc6c:	f000 feee 	bl	800ca4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc70:	4b10      	ldr	r3, [pc, #64]	@ (800bcb4 <prvCheckTasksWaitingTermination+0x50>)
 800bc72:	68db      	ldr	r3, [r3, #12]
 800bc74:	68db      	ldr	r3, [r3, #12]
 800bc76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	3304      	adds	r3, #4
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f7fe fa89 	bl	800a194 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bc82:	4b0d      	ldr	r3, [pc, #52]	@ (800bcb8 <prvCheckTasksWaitingTermination+0x54>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	3b01      	subs	r3, #1
 800bc88:	4a0b      	ldr	r2, [pc, #44]	@ (800bcb8 <prvCheckTasksWaitingTermination+0x54>)
 800bc8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bc8c:	4b0b      	ldr	r3, [pc, #44]	@ (800bcbc <prvCheckTasksWaitingTermination+0x58>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	3b01      	subs	r3, #1
 800bc92:	4a0a      	ldr	r2, [pc, #40]	@ (800bcbc <prvCheckTasksWaitingTermination+0x58>)
 800bc94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bc96:	f000 ff0f 	bl	800cab8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f000 f810 	bl	800bcc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bca0:	4b06      	ldr	r3, [pc, #24]	@ (800bcbc <prvCheckTasksWaitingTermination+0x58>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d1e1      	bne.n	800bc6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bca8:	bf00      	nop
 800bcaa:	bf00      	nop
 800bcac:	3708      	adds	r7, #8
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}
 800bcb2:	bf00      	nop
 800bcb4:	20006a34 	.word	0x20006a34
 800bcb8:	20006a60 	.word	0x20006a60
 800bcbc:	20006a48 	.word	0x20006a48

0800bcc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d108      	bne.n	800bce4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f001 f8b4 	bl	800ce44 <vPortFree>
				vPortFree( pxTCB );
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f001 f8b1 	bl	800ce44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bce2:	e01b      	b.n	800bd1c <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bcea:	2b01      	cmp	r3, #1
 800bcec:	d103      	bne.n	800bcf6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f001 f8a8 	bl	800ce44 <vPortFree>
	}
 800bcf4:	e012      	b.n	800bd1c <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bcfc:	2b02      	cmp	r3, #2
 800bcfe:	d00d      	beq.n	800bd1c <prvDeleteTCB+0x5c>
	__asm volatile
 800bd00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd04:	b672      	cpsid	i
 800bd06:	f383 8811 	msr	BASEPRI, r3
 800bd0a:	f3bf 8f6f 	isb	sy
 800bd0e:	f3bf 8f4f 	dsb	sy
 800bd12:	b662      	cpsie	i
 800bd14:	60fb      	str	r3, [r7, #12]
}
 800bd16:	bf00      	nop
 800bd18:	bf00      	nop
 800bd1a:	e7fd      	b.n	800bd18 <prvDeleteTCB+0x58>
	}
 800bd1c:	bf00      	nop
 800bd1e:	3710      	adds	r7, #16
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bd24:	b480      	push	{r7}
 800bd26:	b083      	sub	sp, #12
 800bd28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd2a:	4b0c      	ldr	r3, [pc, #48]	@ (800bd5c <prvResetNextTaskUnblockTime+0x38>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d104      	bne.n	800bd3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bd34:	4b0a      	ldr	r3, [pc, #40]	@ (800bd60 <prvResetNextTaskUnblockTime+0x3c>)
 800bd36:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bd3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bd3c:	e008      	b.n	800bd50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd3e:	4b07      	ldr	r3, [pc, #28]	@ (800bd5c <prvResetNextTaskUnblockTime+0x38>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	68db      	ldr	r3, [r3, #12]
 800bd44:	68db      	ldr	r3, [r3, #12]
 800bd46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	4a04      	ldr	r2, [pc, #16]	@ (800bd60 <prvResetNextTaskUnblockTime+0x3c>)
 800bd4e:	6013      	str	r3, [r2, #0]
}
 800bd50:	bf00      	nop
 800bd52:	370c      	adds	r7, #12
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr
 800bd5c:	20006a18 	.word	0x20006a18
 800bd60:	20006a80 	.word	0x20006a80

0800bd64 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800bd64:	b480      	push	{r7}
 800bd66:	b083      	sub	sp, #12
 800bd68:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800bd6a:	4b05      	ldr	r3, [pc, #20]	@ (800bd80 <xTaskGetCurrentTaskHandle+0x1c>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800bd70:	687b      	ldr	r3, [r7, #4]
	}
 800bd72:	4618      	mov	r0, r3
 800bd74:	370c      	adds	r7, #12
 800bd76:	46bd      	mov	sp, r7
 800bd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7c:	4770      	bx	lr
 800bd7e:	bf00      	nop
 800bd80:	2000658c 	.word	0x2000658c

0800bd84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bd84:	b480      	push	{r7}
 800bd86:	b083      	sub	sp, #12
 800bd88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bd8a:	4b0b      	ldr	r3, [pc, #44]	@ (800bdb8 <xTaskGetSchedulerState+0x34>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d102      	bne.n	800bd98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bd92:	2301      	movs	r3, #1
 800bd94:	607b      	str	r3, [r7, #4]
 800bd96:	e008      	b.n	800bdaa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd98:	4b08      	ldr	r3, [pc, #32]	@ (800bdbc <xTaskGetSchedulerState+0x38>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d102      	bne.n	800bda6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bda0:	2302      	movs	r3, #2
 800bda2:	607b      	str	r3, [r7, #4]
 800bda4:	e001      	b.n	800bdaa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bda6:	2300      	movs	r3, #0
 800bda8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bdaa:	687b      	ldr	r3, [r7, #4]
	}
 800bdac:	4618      	mov	r0, r3
 800bdae:	370c      	adds	r7, #12
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb6:	4770      	bx	lr
 800bdb8:	20006a6c 	.word	0x20006a6c
 800bdbc:	20006a88 	.word	0x20006a88

0800bdc0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d051      	beq.n	800be7a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdda:	4b2a      	ldr	r3, [pc, #168]	@ (800be84 <xTaskPriorityInherit+0xc4>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d241      	bcs.n	800be68 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	699b      	ldr	r3, [r3, #24]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	db06      	blt.n	800bdfa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdec:	4b25      	ldr	r3, [pc, #148]	@ (800be84 <xTaskPriorityInherit+0xc4>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdf2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	6959      	ldr	r1, [r3, #20]
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be02:	4613      	mov	r3, r2
 800be04:	009b      	lsls	r3, r3, #2
 800be06:	4413      	add	r3, r2
 800be08:	009b      	lsls	r3, r3, #2
 800be0a:	4a1f      	ldr	r2, [pc, #124]	@ (800be88 <xTaskPriorityInherit+0xc8>)
 800be0c:	4413      	add	r3, r2
 800be0e:	4299      	cmp	r1, r3
 800be10:	d122      	bne.n	800be58 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	3304      	adds	r3, #4
 800be16:	4618      	mov	r0, r3
 800be18:	f7fe f9bc 	bl	800a194 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800be1c:	4b19      	ldr	r3, [pc, #100]	@ (800be84 <xTaskPriorityInherit+0xc4>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be2a:	4b18      	ldr	r3, [pc, #96]	@ (800be8c <xTaskPriorityInherit+0xcc>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	429a      	cmp	r2, r3
 800be30:	d903      	bls.n	800be3a <xTaskPriorityInherit+0x7a>
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be36:	4a15      	ldr	r2, [pc, #84]	@ (800be8c <xTaskPriorityInherit+0xcc>)
 800be38:	6013      	str	r3, [r2, #0]
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be3e:	4613      	mov	r3, r2
 800be40:	009b      	lsls	r3, r3, #2
 800be42:	4413      	add	r3, r2
 800be44:	009b      	lsls	r3, r3, #2
 800be46:	4a10      	ldr	r2, [pc, #64]	@ (800be88 <xTaskPriorityInherit+0xc8>)
 800be48:	441a      	add	r2, r3
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	3304      	adds	r3, #4
 800be4e:	4619      	mov	r1, r3
 800be50:	4610      	mov	r0, r2
 800be52:	f7fe f942 	bl	800a0da <vListInsertEnd>
 800be56:	e004      	b.n	800be62 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800be58:	4b0a      	ldr	r3, [pc, #40]	@ (800be84 <xTaskPriorityInherit+0xc4>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800be62:	2301      	movs	r3, #1
 800be64:	60fb      	str	r3, [r7, #12]
 800be66:	e008      	b.n	800be7a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800be6c:	4b05      	ldr	r3, [pc, #20]	@ (800be84 <xTaskPriorityInherit+0xc4>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be72:	429a      	cmp	r2, r3
 800be74:	d201      	bcs.n	800be7a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800be76:	2301      	movs	r3, #1
 800be78:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800be7a:	68fb      	ldr	r3, [r7, #12]
	}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3710      	adds	r7, #16
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}
 800be84:	2000658c 	.word	0x2000658c
 800be88:	20006590 	.word	0x20006590
 800be8c:	20006a68 	.word	0x20006a68

0800be90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800be90:	b580      	push	{r7, lr}
 800be92:	b086      	sub	sp, #24
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800be9c:	2300      	movs	r3, #0
 800be9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d05c      	beq.n	800bf60 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bea6:	4b31      	ldr	r3, [pc, #196]	@ (800bf6c <xTaskPriorityDisinherit+0xdc>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	693a      	ldr	r2, [r7, #16]
 800beac:	429a      	cmp	r2, r3
 800beae:	d00d      	beq.n	800becc <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800beb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beb4:	b672      	cpsid	i
 800beb6:	f383 8811 	msr	BASEPRI, r3
 800beba:	f3bf 8f6f 	isb	sy
 800bebe:	f3bf 8f4f 	dsb	sy
 800bec2:	b662      	cpsie	i
 800bec4:	60fb      	str	r3, [r7, #12]
}
 800bec6:	bf00      	nop
 800bec8:	bf00      	nop
 800beca:	e7fd      	b.n	800bec8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d10d      	bne.n	800bef0 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800bed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bed8:	b672      	cpsid	i
 800beda:	f383 8811 	msr	BASEPRI, r3
 800bede:	f3bf 8f6f 	isb	sy
 800bee2:	f3bf 8f4f 	dsb	sy
 800bee6:	b662      	cpsie	i
 800bee8:	60bb      	str	r3, [r7, #8]
}
 800beea:	bf00      	nop
 800beec:	bf00      	nop
 800beee:	e7fd      	b.n	800beec <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bef4:	1e5a      	subs	r2, r3, #1
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d02c      	beq.n	800bf60 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d128      	bne.n	800bf60 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	3304      	adds	r3, #4
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7fe f93e 	bl	800a194 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf24:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf30:	4b0f      	ldr	r3, [pc, #60]	@ (800bf70 <xTaskPriorityDisinherit+0xe0>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d903      	bls.n	800bf40 <xTaskPriorityDisinherit+0xb0>
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf3c:	4a0c      	ldr	r2, [pc, #48]	@ (800bf70 <xTaskPriorityDisinherit+0xe0>)
 800bf3e:	6013      	str	r3, [r2, #0]
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf44:	4613      	mov	r3, r2
 800bf46:	009b      	lsls	r3, r3, #2
 800bf48:	4413      	add	r3, r2
 800bf4a:	009b      	lsls	r3, r3, #2
 800bf4c:	4a09      	ldr	r2, [pc, #36]	@ (800bf74 <xTaskPriorityDisinherit+0xe4>)
 800bf4e:	441a      	add	r2, r3
 800bf50:	693b      	ldr	r3, [r7, #16]
 800bf52:	3304      	adds	r3, #4
 800bf54:	4619      	mov	r1, r3
 800bf56:	4610      	mov	r0, r2
 800bf58:	f7fe f8bf 	bl	800a0da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bf60:	697b      	ldr	r3, [r7, #20]
	}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3718      	adds	r7, #24
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}
 800bf6a:	bf00      	nop
 800bf6c:	2000658c 	.word	0x2000658c
 800bf70:	20006a68 	.word	0x20006a68
 800bf74:	20006590 	.word	0x20006590

0800bf78 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b088      	sub	sp, #32
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bf86:	2301      	movs	r3, #1
 800bf88:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d070      	beq.n	800c072 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d10d      	bne.n	800bfb4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800bf98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf9c:	b672      	cpsid	i
 800bf9e:	f383 8811 	msr	BASEPRI, r3
 800bfa2:	f3bf 8f6f 	isb	sy
 800bfa6:	f3bf 8f4f 	dsb	sy
 800bfaa:	b662      	cpsie	i
 800bfac:	60fb      	str	r3, [r7, #12]
}
 800bfae:	bf00      	nop
 800bfb0:	bf00      	nop
 800bfb2:	e7fd      	b.n	800bfb0 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bfb4:	69bb      	ldr	r3, [r7, #24]
 800bfb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bfb8:	683a      	ldr	r2, [r7, #0]
 800bfba:	429a      	cmp	r2, r3
 800bfbc:	d902      	bls.n	800bfc4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	61fb      	str	r3, [r7, #28]
 800bfc2:	e002      	b.n	800bfca <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bfc4:	69bb      	ldr	r3, [r7, #24]
 800bfc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bfc8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bfca:	69bb      	ldr	r3, [r7, #24]
 800bfcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfce:	69fa      	ldr	r2, [r7, #28]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d04e      	beq.n	800c072 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bfd4:	69bb      	ldr	r3, [r7, #24]
 800bfd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bfd8:	697a      	ldr	r2, [r7, #20]
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d149      	bne.n	800c072 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bfde:	4b27      	ldr	r3, [pc, #156]	@ (800c07c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	69ba      	ldr	r2, [r7, #24]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d10d      	bne.n	800c004 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 800bfe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfec:	b672      	cpsid	i
 800bfee:	f383 8811 	msr	BASEPRI, r3
 800bff2:	f3bf 8f6f 	isb	sy
 800bff6:	f3bf 8f4f 	dsb	sy
 800bffa:	b662      	cpsie	i
 800bffc:	60bb      	str	r3, [r7, #8]
}
 800bffe:	bf00      	nop
 800c000:	bf00      	nop
 800c002:	e7fd      	b.n	800c000 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c004:	69bb      	ldr	r3, [r7, #24]
 800c006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c008:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c00a:	69bb      	ldr	r3, [r7, #24]
 800c00c:	69fa      	ldr	r2, [r7, #28]
 800c00e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c010:	69bb      	ldr	r3, [r7, #24]
 800c012:	699b      	ldr	r3, [r3, #24]
 800c014:	2b00      	cmp	r3, #0
 800c016:	db04      	blt.n	800c022 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c018:	69fb      	ldr	r3, [r7, #28]
 800c01a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c01e:	69bb      	ldr	r3, [r7, #24]
 800c020:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c022:	69bb      	ldr	r3, [r7, #24]
 800c024:	6959      	ldr	r1, [r3, #20]
 800c026:	693a      	ldr	r2, [r7, #16]
 800c028:	4613      	mov	r3, r2
 800c02a:	009b      	lsls	r3, r3, #2
 800c02c:	4413      	add	r3, r2
 800c02e:	009b      	lsls	r3, r3, #2
 800c030:	4a13      	ldr	r2, [pc, #76]	@ (800c080 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800c032:	4413      	add	r3, r2
 800c034:	4299      	cmp	r1, r3
 800c036:	d11c      	bne.n	800c072 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c038:	69bb      	ldr	r3, [r7, #24]
 800c03a:	3304      	adds	r3, #4
 800c03c:	4618      	mov	r0, r3
 800c03e:	f7fe f8a9 	bl	800a194 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c042:	69bb      	ldr	r3, [r7, #24]
 800c044:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c046:	4b0f      	ldr	r3, [pc, #60]	@ (800c084 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d903      	bls.n	800c056 <vTaskPriorityDisinheritAfterTimeout+0xde>
 800c04e:	69bb      	ldr	r3, [r7, #24]
 800c050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c052:	4a0c      	ldr	r2, [pc, #48]	@ (800c084 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800c054:	6013      	str	r3, [r2, #0]
 800c056:	69bb      	ldr	r3, [r7, #24]
 800c058:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c05a:	4613      	mov	r3, r2
 800c05c:	009b      	lsls	r3, r3, #2
 800c05e:	4413      	add	r3, r2
 800c060:	009b      	lsls	r3, r3, #2
 800c062:	4a07      	ldr	r2, [pc, #28]	@ (800c080 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800c064:	441a      	add	r2, r3
 800c066:	69bb      	ldr	r3, [r7, #24]
 800c068:	3304      	adds	r3, #4
 800c06a:	4619      	mov	r1, r3
 800c06c:	4610      	mov	r0, r2
 800c06e:	f7fe f834 	bl	800a0da <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c072:	bf00      	nop
 800c074:	3720      	adds	r7, #32
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}
 800c07a:	bf00      	nop
 800c07c:	2000658c 	.word	0x2000658c
 800c080:	20006590 	.word	0x20006590
 800c084:	20006a68 	.word	0x20006a68

0800c088 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c088:	b480      	push	{r7}
 800c08a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c08c:	4b07      	ldr	r3, [pc, #28]	@ (800c0ac <pvTaskIncrementMutexHeldCount+0x24>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d004      	beq.n	800c09e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c094:	4b05      	ldr	r3, [pc, #20]	@ (800c0ac <pvTaskIncrementMutexHeldCount+0x24>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c09a:	3201      	adds	r2, #1
 800c09c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800c09e:	4b03      	ldr	r3, [pc, #12]	@ (800c0ac <pvTaskIncrementMutexHeldCount+0x24>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
	}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr
 800c0ac:	2000658c 	.word	0x2000658c

0800c0b0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b084      	sub	sp, #16
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c0ba:	4b21      	ldr	r3, [pc, #132]	@ (800c140 <prvAddCurrentTaskToDelayedList+0x90>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c0c0:	4b20      	ldr	r3, [pc, #128]	@ (800c144 <prvAddCurrentTaskToDelayedList+0x94>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	3304      	adds	r3, #4
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f7fe f864 	bl	800a194 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c0d2:	d10a      	bne.n	800c0ea <prvAddCurrentTaskToDelayedList+0x3a>
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d007      	beq.n	800c0ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c0da:	4b1a      	ldr	r3, [pc, #104]	@ (800c144 <prvAddCurrentTaskToDelayedList+0x94>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	3304      	adds	r3, #4
 800c0e0:	4619      	mov	r1, r3
 800c0e2:	4819      	ldr	r0, [pc, #100]	@ (800c148 <prvAddCurrentTaskToDelayedList+0x98>)
 800c0e4:	f7fd fff9 	bl	800a0da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c0e8:	e026      	b.n	800c138 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c0ea:	68fa      	ldr	r2, [r7, #12]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	4413      	add	r3, r2
 800c0f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c0f2:	4b14      	ldr	r3, [pc, #80]	@ (800c144 <prvAddCurrentTaskToDelayedList+0x94>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	68ba      	ldr	r2, [r7, #8]
 800c0f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c0fa:	68ba      	ldr	r2, [r7, #8]
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d209      	bcs.n	800c116 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c102:	4b12      	ldr	r3, [pc, #72]	@ (800c14c <prvAddCurrentTaskToDelayedList+0x9c>)
 800c104:	681a      	ldr	r2, [r3, #0]
 800c106:	4b0f      	ldr	r3, [pc, #60]	@ (800c144 <prvAddCurrentTaskToDelayedList+0x94>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	3304      	adds	r3, #4
 800c10c:	4619      	mov	r1, r3
 800c10e:	4610      	mov	r0, r2
 800c110:	f7fe f807 	bl	800a122 <vListInsert>
}
 800c114:	e010      	b.n	800c138 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c116:	4b0e      	ldr	r3, [pc, #56]	@ (800c150 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c118:	681a      	ldr	r2, [r3, #0]
 800c11a:	4b0a      	ldr	r3, [pc, #40]	@ (800c144 <prvAddCurrentTaskToDelayedList+0x94>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	3304      	adds	r3, #4
 800c120:	4619      	mov	r1, r3
 800c122:	4610      	mov	r0, r2
 800c124:	f7fd fffd 	bl	800a122 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c128:	4b0a      	ldr	r3, [pc, #40]	@ (800c154 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	68ba      	ldr	r2, [r7, #8]
 800c12e:	429a      	cmp	r2, r3
 800c130:	d202      	bcs.n	800c138 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c132:	4a08      	ldr	r2, [pc, #32]	@ (800c154 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	6013      	str	r3, [r2, #0]
}
 800c138:	bf00      	nop
 800c13a:	3710      	adds	r7, #16
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}
 800c140:	20006a64 	.word	0x20006a64
 800c144:	2000658c 	.word	0x2000658c
 800c148:	20006a4c 	.word	0x20006a4c
 800c14c:	20006a1c 	.word	0x20006a1c
 800c150:	20006a18 	.word	0x20006a18
 800c154:	20006a80 	.word	0x20006a80

0800c158 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b08a      	sub	sp, #40	@ 0x28
 800c15c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c15e:	2300      	movs	r3, #0
 800c160:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c162:	f000 fb21 	bl	800c7a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c166:	4b1e      	ldr	r3, [pc, #120]	@ (800c1e0 <xTimerCreateTimerTask+0x88>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d021      	beq.n	800c1b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c16e:	2300      	movs	r3, #0
 800c170:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c172:	2300      	movs	r3, #0
 800c174:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c176:	1d3a      	adds	r2, r7, #4
 800c178:	f107 0108 	add.w	r1, r7, #8
 800c17c:	f107 030c 	add.w	r3, r7, #12
 800c180:	4618      	mov	r0, r3
 800c182:	f7fd ff63 	bl	800a04c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c186:	6879      	ldr	r1, [r7, #4]
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	68fa      	ldr	r2, [r7, #12]
 800c18c:	9202      	str	r2, [sp, #8]
 800c18e:	9301      	str	r3, [sp, #4]
 800c190:	2302      	movs	r3, #2
 800c192:	9300      	str	r3, [sp, #0]
 800c194:	2300      	movs	r3, #0
 800c196:	460a      	mov	r2, r1
 800c198:	4912      	ldr	r1, [pc, #72]	@ (800c1e4 <xTimerCreateTimerTask+0x8c>)
 800c19a:	4813      	ldr	r0, [pc, #76]	@ (800c1e8 <xTimerCreateTimerTask+0x90>)
 800c19c:	f7fe ff6e 	bl	800b07c <xTaskCreateStatic>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	4a12      	ldr	r2, [pc, #72]	@ (800c1ec <xTimerCreateTimerTask+0x94>)
 800c1a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c1a6:	4b11      	ldr	r3, [pc, #68]	@ (800c1ec <xTimerCreateTimerTask+0x94>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d001      	beq.n	800c1b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d10d      	bne.n	800c1d4 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800c1b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1bc:	b672      	cpsid	i
 800c1be:	f383 8811 	msr	BASEPRI, r3
 800c1c2:	f3bf 8f6f 	isb	sy
 800c1c6:	f3bf 8f4f 	dsb	sy
 800c1ca:	b662      	cpsie	i
 800c1cc:	613b      	str	r3, [r7, #16]
}
 800c1ce:	bf00      	nop
 800c1d0:	bf00      	nop
 800c1d2:	e7fd      	b.n	800c1d0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800c1d4:	697b      	ldr	r3, [r7, #20]
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	3718      	adds	r7, #24
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}
 800c1de:	bf00      	nop
 800c1e0:	20006abc 	.word	0x20006abc
 800c1e4:	0801c4dc 	.word	0x0801c4dc
 800c1e8:	0800c331 	.word	0x0800c331
 800c1ec:	20006ac0 	.word	0x20006ac0

0800c1f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b08a      	sub	sp, #40	@ 0x28
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	60f8      	str	r0, [r7, #12]
 800c1f8:	60b9      	str	r1, [r7, #8]
 800c1fa:	607a      	str	r2, [r7, #4]
 800c1fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c1fe:	2300      	movs	r3, #0
 800c200:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d10d      	bne.n	800c224 <xTimerGenericCommand+0x34>
	__asm volatile
 800c208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c20c:	b672      	cpsid	i
 800c20e:	f383 8811 	msr	BASEPRI, r3
 800c212:	f3bf 8f6f 	isb	sy
 800c216:	f3bf 8f4f 	dsb	sy
 800c21a:	b662      	cpsie	i
 800c21c:	623b      	str	r3, [r7, #32]
}
 800c21e:	bf00      	nop
 800c220:	bf00      	nop
 800c222:	e7fd      	b.n	800c220 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c224:	4b19      	ldr	r3, [pc, #100]	@ (800c28c <xTimerGenericCommand+0x9c>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d02a      	beq.n	800c282 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	2b05      	cmp	r3, #5
 800c23c:	dc18      	bgt.n	800c270 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c23e:	f7ff fda1 	bl	800bd84 <xTaskGetSchedulerState>
 800c242:	4603      	mov	r3, r0
 800c244:	2b02      	cmp	r3, #2
 800c246:	d109      	bne.n	800c25c <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c248:	4b10      	ldr	r3, [pc, #64]	@ (800c28c <xTimerGenericCommand+0x9c>)
 800c24a:	6818      	ldr	r0, [r3, #0]
 800c24c:	f107 0110 	add.w	r1, r7, #16
 800c250:	2300      	movs	r3, #0
 800c252:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c254:	f7fe f9de 	bl	800a614 <xQueueGenericSend>
 800c258:	6278      	str	r0, [r7, #36]	@ 0x24
 800c25a:	e012      	b.n	800c282 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c25c:	4b0b      	ldr	r3, [pc, #44]	@ (800c28c <xTimerGenericCommand+0x9c>)
 800c25e:	6818      	ldr	r0, [r3, #0]
 800c260:	f107 0110 	add.w	r1, r7, #16
 800c264:	2300      	movs	r3, #0
 800c266:	2200      	movs	r2, #0
 800c268:	f7fe f9d4 	bl	800a614 <xQueueGenericSend>
 800c26c:	6278      	str	r0, [r7, #36]	@ 0x24
 800c26e:	e008      	b.n	800c282 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c270:	4b06      	ldr	r3, [pc, #24]	@ (800c28c <xTimerGenericCommand+0x9c>)
 800c272:	6818      	ldr	r0, [r3, #0]
 800c274:	f107 0110 	add.w	r1, r7, #16
 800c278:	2300      	movs	r3, #0
 800c27a:	683a      	ldr	r2, [r7, #0]
 800c27c:	f7fe fad4 	bl	800a828 <xQueueGenericSendFromISR>
 800c280:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c284:	4618      	mov	r0, r3
 800c286:	3728      	adds	r7, #40	@ 0x28
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	20006abc 	.word	0x20006abc

0800c290 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b088      	sub	sp, #32
 800c294:	af02      	add	r7, sp, #8
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c29a:	4b24      	ldr	r3, [pc, #144]	@ (800c32c <prvProcessExpiredTimer+0x9c>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	68db      	ldr	r3, [r3, #12]
 800c2a0:	68db      	ldr	r3, [r3, #12]
 800c2a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	3304      	adds	r3, #4
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f7fd ff73 	bl	800a194 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c2ae:	697b      	ldr	r3, [r7, #20]
 800c2b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c2b4:	f003 0304 	and.w	r3, r3, #4
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d025      	beq.n	800c308 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	699a      	ldr	r2, [r3, #24]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	18d1      	adds	r1, r2, r3
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	683a      	ldr	r2, [r7, #0]
 800c2c8:	6978      	ldr	r0, [r7, #20]
 800c2ca:	f000 f8d7 	bl	800c47c <prvInsertTimerInActiveList>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d022      	beq.n	800c31a <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	9300      	str	r3, [sp, #0]
 800c2d8:	2300      	movs	r3, #0
 800c2da:	687a      	ldr	r2, [r7, #4]
 800c2dc:	2100      	movs	r1, #0
 800c2de:	6978      	ldr	r0, [r7, #20]
 800c2e0:	f7ff ff86 	bl	800c1f0 <xTimerGenericCommand>
 800c2e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d116      	bne.n	800c31a <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800c2ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2f0:	b672      	cpsid	i
 800c2f2:	f383 8811 	msr	BASEPRI, r3
 800c2f6:	f3bf 8f6f 	isb	sy
 800c2fa:	f3bf 8f4f 	dsb	sy
 800c2fe:	b662      	cpsie	i
 800c300:	60fb      	str	r3, [r7, #12]
}
 800c302:	bf00      	nop
 800c304:	bf00      	nop
 800c306:	e7fd      	b.n	800c304 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c30e:	f023 0301 	bic.w	r3, r3, #1
 800c312:	b2da      	uxtb	r2, r3
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	6a1b      	ldr	r3, [r3, #32]
 800c31e:	6978      	ldr	r0, [r7, #20]
 800c320:	4798      	blx	r3
}
 800c322:	bf00      	nop
 800c324:	3718      	adds	r7, #24
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	20006ab4 	.word	0x20006ab4

0800c330 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b084      	sub	sp, #16
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c338:	f107 0308 	add.w	r3, r7, #8
 800c33c:	4618      	mov	r0, r3
 800c33e:	f000 f859 	bl	800c3f4 <prvGetNextExpireTime>
 800c342:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	4619      	mov	r1, r3
 800c348:	68f8      	ldr	r0, [r7, #12]
 800c34a:	f000 f805 	bl	800c358 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c34e:	f000 f8d7 	bl	800c500 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c352:	bf00      	nop
 800c354:	e7f0      	b.n	800c338 <prvTimerTask+0x8>
	...

0800c358 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b084      	sub	sp, #16
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c362:	f7ff f8dd 	bl	800b520 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c366:	f107 0308 	add.w	r3, r7, #8
 800c36a:	4618      	mov	r0, r3
 800c36c:	f000 f866 	bl	800c43c <prvSampleTimeNow>
 800c370:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d130      	bne.n	800c3da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d10a      	bne.n	800c394 <prvProcessTimerOrBlockTask+0x3c>
 800c37e:	687a      	ldr	r2, [r7, #4]
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	429a      	cmp	r2, r3
 800c384:	d806      	bhi.n	800c394 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c386:	f7ff f8d9 	bl	800b53c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c38a:	68f9      	ldr	r1, [r7, #12]
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f7ff ff7f 	bl	800c290 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c392:	e024      	b.n	800c3de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d008      	beq.n	800c3ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c39a:	4b13      	ldr	r3, [pc, #76]	@ (800c3e8 <prvProcessTimerOrBlockTask+0x90>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d101      	bne.n	800c3a8 <prvProcessTimerOrBlockTask+0x50>
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	e000      	b.n	800c3aa <prvProcessTimerOrBlockTask+0x52>
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c3ac:	4b0f      	ldr	r3, [pc, #60]	@ (800c3ec <prvProcessTimerOrBlockTask+0x94>)
 800c3ae:	6818      	ldr	r0, [r3, #0]
 800c3b0:	687a      	ldr	r2, [r7, #4]
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	1ad3      	subs	r3, r2, r3
 800c3b6:	683a      	ldr	r2, [r7, #0]
 800c3b8:	4619      	mov	r1, r3
 800c3ba:	f7fe fe2b 	bl	800b014 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c3be:	f7ff f8bd 	bl	800b53c <xTaskResumeAll>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d10a      	bne.n	800c3de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c3c8:	4b09      	ldr	r3, [pc, #36]	@ (800c3f0 <prvProcessTimerOrBlockTask+0x98>)
 800c3ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3ce:	601a      	str	r2, [r3, #0]
 800c3d0:	f3bf 8f4f 	dsb	sy
 800c3d4:	f3bf 8f6f 	isb	sy
}
 800c3d8:	e001      	b.n	800c3de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c3da:	f7ff f8af 	bl	800b53c <xTaskResumeAll>
}
 800c3de:	bf00      	nop
 800c3e0:	3710      	adds	r7, #16
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}
 800c3e6:	bf00      	nop
 800c3e8:	20006ab8 	.word	0x20006ab8
 800c3ec:	20006abc 	.word	0x20006abc
 800c3f0:	e000ed04 	.word	0xe000ed04

0800c3f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b085      	sub	sp, #20
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c3fc:	4b0e      	ldr	r3, [pc, #56]	@ (800c438 <prvGetNextExpireTime+0x44>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d101      	bne.n	800c40a <prvGetNextExpireTime+0x16>
 800c406:	2201      	movs	r2, #1
 800c408:	e000      	b.n	800c40c <prvGetNextExpireTime+0x18>
 800c40a:	2200      	movs	r2, #0
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d105      	bne.n	800c424 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c418:	4b07      	ldr	r3, [pc, #28]	@ (800c438 <prvGetNextExpireTime+0x44>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	68db      	ldr	r3, [r3, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	60fb      	str	r3, [r7, #12]
 800c422:	e001      	b.n	800c428 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c424:	2300      	movs	r3, #0
 800c426:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c428:	68fb      	ldr	r3, [r7, #12]
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3714      	adds	r7, #20
 800c42e:	46bd      	mov	sp, r7
 800c430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c434:	4770      	bx	lr
 800c436:	bf00      	nop
 800c438:	20006ab4 	.word	0x20006ab4

0800c43c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b084      	sub	sp, #16
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c444:	f7ff f91a 	bl	800b67c <xTaskGetTickCount>
 800c448:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c44a:	4b0b      	ldr	r3, [pc, #44]	@ (800c478 <prvSampleTimeNow+0x3c>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	68fa      	ldr	r2, [r7, #12]
 800c450:	429a      	cmp	r2, r3
 800c452:	d205      	bcs.n	800c460 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c454:	f000 f940 	bl	800c6d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2201      	movs	r2, #1
 800c45c:	601a      	str	r2, [r3, #0]
 800c45e:	e002      	b.n	800c466 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2200      	movs	r2, #0
 800c464:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c466:	4a04      	ldr	r2, [pc, #16]	@ (800c478 <prvSampleTimeNow+0x3c>)
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c46c:	68fb      	ldr	r3, [r7, #12]
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3710      	adds	r7, #16
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}
 800c476:	bf00      	nop
 800c478:	20006ac4 	.word	0x20006ac4

0800c47c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b086      	sub	sp, #24
 800c480:	af00      	add	r7, sp, #0
 800c482:	60f8      	str	r0, [r7, #12]
 800c484:	60b9      	str	r1, [r7, #8]
 800c486:	607a      	str	r2, [r7, #4]
 800c488:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c48a:	2300      	movs	r3, #0
 800c48c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	68ba      	ldr	r2, [r7, #8]
 800c492:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	68fa      	ldr	r2, [r7, #12]
 800c498:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c49a:	68ba      	ldr	r2, [r7, #8]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	429a      	cmp	r2, r3
 800c4a0:	d812      	bhi.n	800c4c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4a2:	687a      	ldr	r2, [r7, #4]
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	1ad2      	subs	r2, r2, r3
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	699b      	ldr	r3, [r3, #24]
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	d302      	bcc.n	800c4b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	617b      	str	r3, [r7, #20]
 800c4b4:	e01b      	b.n	800c4ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c4b6:	4b10      	ldr	r3, [pc, #64]	@ (800c4f8 <prvInsertTimerInActiveList+0x7c>)
 800c4b8:	681a      	ldr	r2, [r3, #0]
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	3304      	adds	r3, #4
 800c4be:	4619      	mov	r1, r3
 800c4c0:	4610      	mov	r0, r2
 800c4c2:	f7fd fe2e 	bl	800a122 <vListInsert>
 800c4c6:	e012      	b.n	800c4ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c4c8:	687a      	ldr	r2, [r7, #4]
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d206      	bcs.n	800c4de <prvInsertTimerInActiveList+0x62>
 800c4d0:	68ba      	ldr	r2, [r7, #8]
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	d302      	bcc.n	800c4de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c4d8:	2301      	movs	r3, #1
 800c4da:	617b      	str	r3, [r7, #20]
 800c4dc:	e007      	b.n	800c4ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c4de:	4b07      	ldr	r3, [pc, #28]	@ (800c4fc <prvInsertTimerInActiveList+0x80>)
 800c4e0:	681a      	ldr	r2, [r3, #0]
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	3304      	adds	r3, #4
 800c4e6:	4619      	mov	r1, r3
 800c4e8:	4610      	mov	r0, r2
 800c4ea:	f7fd fe1a 	bl	800a122 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c4ee:	697b      	ldr	r3, [r7, #20]
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3718      	adds	r7, #24
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}
 800c4f8:	20006ab8 	.word	0x20006ab8
 800c4fc:	20006ab4 	.word	0x20006ab4

0800c500 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b08e      	sub	sp, #56	@ 0x38
 800c504:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c506:	e0d4      	b.n	800c6b2 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	da1b      	bge.n	800c546 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c50e:	1d3b      	adds	r3, r7, #4
 800c510:	3304      	adds	r3, #4
 800c512:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c516:	2b00      	cmp	r3, #0
 800c518:	d10d      	bne.n	800c536 <prvProcessReceivedCommands+0x36>
	__asm volatile
 800c51a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c51e:	b672      	cpsid	i
 800c520:	f383 8811 	msr	BASEPRI, r3
 800c524:	f3bf 8f6f 	isb	sy
 800c528:	f3bf 8f4f 	dsb	sy
 800c52c:	b662      	cpsie	i
 800c52e:	61fb      	str	r3, [r7, #28]
}
 800c530:	bf00      	nop
 800c532:	bf00      	nop
 800c534:	e7fd      	b.n	800c532 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c53c:	6850      	ldr	r0, [r2, #4]
 800c53e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c540:	6892      	ldr	r2, [r2, #8]
 800c542:	4611      	mov	r1, r2
 800c544:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	f2c0 80b2 	blt.w	800c6b2 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c554:	695b      	ldr	r3, [r3, #20]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d004      	beq.n	800c564 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c55a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c55c:	3304      	adds	r3, #4
 800c55e:	4618      	mov	r0, r3
 800c560:	f7fd fe18 	bl	800a194 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c564:	463b      	mov	r3, r7
 800c566:	4618      	mov	r0, r3
 800c568:	f7ff ff68 	bl	800c43c <prvSampleTimeNow>
 800c56c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2b09      	cmp	r3, #9
 800c572:	f200 809b 	bhi.w	800c6ac <prvProcessReceivedCommands+0x1ac>
 800c576:	a201      	add	r2, pc, #4	@ (adr r2, 800c57c <prvProcessReceivedCommands+0x7c>)
 800c578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c57c:	0800c5a5 	.word	0x0800c5a5
 800c580:	0800c5a5 	.word	0x0800c5a5
 800c584:	0800c5a5 	.word	0x0800c5a5
 800c588:	0800c61f 	.word	0x0800c61f
 800c58c:	0800c633 	.word	0x0800c633
 800c590:	0800c683 	.word	0x0800c683
 800c594:	0800c5a5 	.word	0x0800c5a5
 800c598:	0800c5a5 	.word	0x0800c5a5
 800c59c:	0800c61f 	.word	0x0800c61f
 800c5a0:	0800c633 	.word	0x0800c633
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c5a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c5aa:	f043 0301 	orr.w	r3, r3, #1
 800c5ae:	b2da      	uxtb	r2, r3
 800c5b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c5b6:	68ba      	ldr	r2, [r7, #8]
 800c5b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5ba:	699b      	ldr	r3, [r3, #24]
 800c5bc:	18d1      	adds	r1, r2, r3
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c5c4:	f7ff ff5a 	bl	800c47c <prvInsertTimerInActiveList>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d070      	beq.n	800c6b0 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c5ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5d0:	6a1b      	ldr	r3, [r3, #32]
 800c5d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c5d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c5d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c5dc:	f003 0304 	and.w	r3, r3, #4
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d065      	beq.n	800c6b0 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c5e4:	68ba      	ldr	r2, [r7, #8]
 800c5e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5e8:	699b      	ldr	r3, [r3, #24]
 800c5ea:	441a      	add	r2, r3
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	9300      	str	r3, [sp, #0]
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	2100      	movs	r1, #0
 800c5f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c5f6:	f7ff fdfb 	bl	800c1f0 <xTimerGenericCommand>
 800c5fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c5fc:	6a3b      	ldr	r3, [r7, #32]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d156      	bne.n	800c6b0 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800c602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c606:	b672      	cpsid	i
 800c608:	f383 8811 	msr	BASEPRI, r3
 800c60c:	f3bf 8f6f 	isb	sy
 800c610:	f3bf 8f4f 	dsb	sy
 800c614:	b662      	cpsie	i
 800c616:	61bb      	str	r3, [r7, #24]
}
 800c618:	bf00      	nop
 800c61a:	bf00      	nop
 800c61c:	e7fd      	b.n	800c61a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c61e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c620:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c624:	f023 0301 	bic.w	r3, r3, #1
 800c628:	b2da      	uxtb	r2, r3
 800c62a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c62c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c630:	e03f      	b.n	800c6b2 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c634:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c638:	f043 0301 	orr.w	r3, r3, #1
 800c63c:	b2da      	uxtb	r2, r3
 800c63e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c640:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c644:	68ba      	ldr	r2, [r7, #8]
 800c646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c648:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c64a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c64c:	699b      	ldr	r3, [r3, #24]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d10d      	bne.n	800c66e <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800c652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c656:	b672      	cpsid	i
 800c658:	f383 8811 	msr	BASEPRI, r3
 800c65c:	f3bf 8f6f 	isb	sy
 800c660:	f3bf 8f4f 	dsb	sy
 800c664:	b662      	cpsie	i
 800c666:	617b      	str	r3, [r7, #20]
}
 800c668:	bf00      	nop
 800c66a:	bf00      	nop
 800c66c:	e7fd      	b.n	800c66a <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c66e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c670:	699a      	ldr	r2, [r3, #24]
 800c672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c674:	18d1      	adds	r1, r2, r3
 800c676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c678:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c67a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c67c:	f7ff fefe 	bl	800c47c <prvInsertTimerInActiveList>
					break;
 800c680:	e017      	b.n	800c6b2 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c684:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c688:	f003 0302 	and.w	r3, r3, #2
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d103      	bne.n	800c698 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800c690:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c692:	f000 fbd7 	bl	800ce44 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c696:	e00c      	b.n	800c6b2 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c69a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c69e:	f023 0301 	bic.w	r3, r3, #1
 800c6a2:	b2da      	uxtb	r2, r3
 800c6a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c6aa:	e002      	b.n	800c6b2 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800c6ac:	bf00      	nop
 800c6ae:	e000      	b.n	800c6b2 <prvProcessReceivedCommands+0x1b2>
					break;
 800c6b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c6b2:	4b08      	ldr	r3, [pc, #32]	@ (800c6d4 <prvProcessReceivedCommands+0x1d4>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	1d39      	adds	r1, r7, #4
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f7fe f958 	bl	800a970 <xQueueReceive>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	f47f af20 	bne.w	800c508 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c6c8:	bf00      	nop
 800c6ca:	bf00      	nop
 800c6cc:	3730      	adds	r7, #48	@ 0x30
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	20006abc 	.word	0x20006abc

0800c6d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b088      	sub	sp, #32
 800c6dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c6de:	e04b      	b.n	800c778 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c6e0:	4b2f      	ldr	r3, [pc, #188]	@ (800c7a0 <prvSwitchTimerLists+0xc8>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	68db      	ldr	r3, [r3, #12]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6ea:	4b2d      	ldr	r3, [pc, #180]	@ (800c7a0 <prvSwitchTimerLists+0xc8>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	68db      	ldr	r3, [r3, #12]
 800c6f0:	68db      	ldr	r3, [r3, #12]
 800c6f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	3304      	adds	r3, #4
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f7fd fd4b 	bl	800a194 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	6a1b      	ldr	r3, [r3, #32]
 800c702:	68f8      	ldr	r0, [r7, #12]
 800c704:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c70c:	f003 0304 	and.w	r3, r3, #4
 800c710:	2b00      	cmp	r3, #0
 800c712:	d031      	beq.n	800c778 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	699b      	ldr	r3, [r3, #24]
 800c718:	693a      	ldr	r2, [r7, #16]
 800c71a:	4413      	add	r3, r2
 800c71c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c71e:	68ba      	ldr	r2, [r7, #8]
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	429a      	cmp	r2, r3
 800c724:	d90e      	bls.n	800c744 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	68ba      	ldr	r2, [r7, #8]
 800c72a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	68fa      	ldr	r2, [r7, #12]
 800c730:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c732:	4b1b      	ldr	r3, [pc, #108]	@ (800c7a0 <prvSwitchTimerLists+0xc8>)
 800c734:	681a      	ldr	r2, [r3, #0]
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	3304      	adds	r3, #4
 800c73a:	4619      	mov	r1, r3
 800c73c:	4610      	mov	r0, r2
 800c73e:	f7fd fcf0 	bl	800a122 <vListInsert>
 800c742:	e019      	b.n	800c778 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c744:	2300      	movs	r3, #0
 800c746:	9300      	str	r3, [sp, #0]
 800c748:	2300      	movs	r3, #0
 800c74a:	693a      	ldr	r2, [r7, #16]
 800c74c:	2100      	movs	r1, #0
 800c74e:	68f8      	ldr	r0, [r7, #12]
 800c750:	f7ff fd4e 	bl	800c1f0 <xTimerGenericCommand>
 800c754:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d10d      	bne.n	800c778 <prvSwitchTimerLists+0xa0>
	__asm volatile
 800c75c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c760:	b672      	cpsid	i
 800c762:	f383 8811 	msr	BASEPRI, r3
 800c766:	f3bf 8f6f 	isb	sy
 800c76a:	f3bf 8f4f 	dsb	sy
 800c76e:	b662      	cpsie	i
 800c770:	603b      	str	r3, [r7, #0]
}
 800c772:	bf00      	nop
 800c774:	bf00      	nop
 800c776:	e7fd      	b.n	800c774 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c778:	4b09      	ldr	r3, [pc, #36]	@ (800c7a0 <prvSwitchTimerLists+0xc8>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d1ae      	bne.n	800c6e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c782:	4b07      	ldr	r3, [pc, #28]	@ (800c7a0 <prvSwitchTimerLists+0xc8>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c788:	4b06      	ldr	r3, [pc, #24]	@ (800c7a4 <prvSwitchTimerLists+0xcc>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	4a04      	ldr	r2, [pc, #16]	@ (800c7a0 <prvSwitchTimerLists+0xc8>)
 800c78e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c790:	4a04      	ldr	r2, [pc, #16]	@ (800c7a4 <prvSwitchTimerLists+0xcc>)
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	6013      	str	r3, [r2, #0]
}
 800c796:	bf00      	nop
 800c798:	3718      	adds	r7, #24
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}
 800c79e:	bf00      	nop
 800c7a0:	20006ab4 	.word	0x20006ab4
 800c7a4:	20006ab8 	.word	0x20006ab8

0800c7a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b082      	sub	sp, #8
 800c7ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c7ae:	f000 f94d 	bl	800ca4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c7b2:	4b15      	ldr	r3, [pc, #84]	@ (800c808 <prvCheckForValidListAndQueue+0x60>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d120      	bne.n	800c7fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c7ba:	4814      	ldr	r0, [pc, #80]	@ (800c80c <prvCheckForValidListAndQueue+0x64>)
 800c7bc:	f7fd fc60 	bl	800a080 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c7c0:	4813      	ldr	r0, [pc, #76]	@ (800c810 <prvCheckForValidListAndQueue+0x68>)
 800c7c2:	f7fd fc5d 	bl	800a080 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c7c6:	4b13      	ldr	r3, [pc, #76]	@ (800c814 <prvCheckForValidListAndQueue+0x6c>)
 800c7c8:	4a10      	ldr	r2, [pc, #64]	@ (800c80c <prvCheckForValidListAndQueue+0x64>)
 800c7ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c7cc:	4b12      	ldr	r3, [pc, #72]	@ (800c818 <prvCheckForValidListAndQueue+0x70>)
 800c7ce:	4a10      	ldr	r2, [pc, #64]	@ (800c810 <prvCheckForValidListAndQueue+0x68>)
 800c7d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	9300      	str	r3, [sp, #0]
 800c7d6:	4b11      	ldr	r3, [pc, #68]	@ (800c81c <prvCheckForValidListAndQueue+0x74>)
 800c7d8:	4a11      	ldr	r2, [pc, #68]	@ (800c820 <prvCheckForValidListAndQueue+0x78>)
 800c7da:	2110      	movs	r1, #16
 800c7dc:	200a      	movs	r0, #10
 800c7de:	f7fd fd6f 	bl	800a2c0 <xQueueGenericCreateStatic>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	4a08      	ldr	r2, [pc, #32]	@ (800c808 <prvCheckForValidListAndQueue+0x60>)
 800c7e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c7e8:	4b07      	ldr	r3, [pc, #28]	@ (800c808 <prvCheckForValidListAndQueue+0x60>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d005      	beq.n	800c7fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c7f0:	4b05      	ldr	r3, [pc, #20]	@ (800c808 <prvCheckForValidListAndQueue+0x60>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	490b      	ldr	r1, [pc, #44]	@ (800c824 <prvCheckForValidListAndQueue+0x7c>)
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f7fe fbe2 	bl	800afc0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c7fc:	f000 f95c 	bl	800cab8 <vPortExitCritical>
}
 800c800:	bf00      	nop
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}
 800c806:	bf00      	nop
 800c808:	20006abc 	.word	0x20006abc
 800c80c:	20006a8c 	.word	0x20006a8c
 800c810:	20006aa0 	.word	0x20006aa0
 800c814:	20006ab4 	.word	0x20006ab4
 800c818:	20006ab8 	.word	0x20006ab8
 800c81c:	20006b68 	.word	0x20006b68
 800c820:	20006ac8 	.word	0x20006ac8
 800c824:	0801c4e4 	.word	0x0801c4e4

0800c828 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c828:	b480      	push	{r7}
 800c82a:	b085      	sub	sp, #20
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	60f8      	str	r0, [r7, #12]
 800c830:	60b9      	str	r1, [r7, #8]
 800c832:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	3b04      	subs	r3, #4
 800c838:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c840:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	3b04      	subs	r3, #4
 800c846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	f023 0201 	bic.w	r2, r3, #1
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	3b04      	subs	r3, #4
 800c856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c858:	4a0c      	ldr	r2, [pc, #48]	@ (800c88c <pxPortInitialiseStack+0x64>)
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	3b14      	subs	r3, #20
 800c862:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c864:	687a      	ldr	r2, [r7, #4]
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	3b04      	subs	r3, #4
 800c86e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	f06f 0202 	mvn.w	r2, #2
 800c876:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	3b20      	subs	r3, #32
 800c87c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c87e:	68fb      	ldr	r3, [r7, #12]
}
 800c880:	4618      	mov	r0, r3
 800c882:	3714      	adds	r7, #20
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr
 800c88c:	0800c891 	.word	0x0800c891

0800c890 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c890:	b480      	push	{r7}
 800c892:	b085      	sub	sp, #20
 800c894:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c896:	2300      	movs	r3, #0
 800c898:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c89a:	4b15      	ldr	r3, [pc, #84]	@ (800c8f0 <prvTaskExitError+0x60>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c8a2:	d00d      	beq.n	800c8c0 <prvTaskExitError+0x30>
	__asm volatile
 800c8a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8a8:	b672      	cpsid	i
 800c8aa:	f383 8811 	msr	BASEPRI, r3
 800c8ae:	f3bf 8f6f 	isb	sy
 800c8b2:	f3bf 8f4f 	dsb	sy
 800c8b6:	b662      	cpsie	i
 800c8b8:	60fb      	str	r3, [r7, #12]
}
 800c8ba:	bf00      	nop
 800c8bc:	bf00      	nop
 800c8be:	e7fd      	b.n	800c8bc <prvTaskExitError+0x2c>
	__asm volatile
 800c8c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8c4:	b672      	cpsid	i
 800c8c6:	f383 8811 	msr	BASEPRI, r3
 800c8ca:	f3bf 8f6f 	isb	sy
 800c8ce:	f3bf 8f4f 	dsb	sy
 800c8d2:	b662      	cpsie	i
 800c8d4:	60bb      	str	r3, [r7, #8]
}
 800c8d6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c8d8:	bf00      	nop
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d0fc      	beq.n	800c8da <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c8e0:	bf00      	nop
 800c8e2:	bf00      	nop
 800c8e4:	3714      	adds	r7, #20
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ec:	4770      	bx	lr
 800c8ee:	bf00      	nop
 800c8f0:	2000003c 	.word	0x2000003c
	...

0800c900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c900:	4b07      	ldr	r3, [pc, #28]	@ (800c920 <pxCurrentTCBConst2>)
 800c902:	6819      	ldr	r1, [r3, #0]
 800c904:	6808      	ldr	r0, [r1, #0]
 800c906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c90a:	f380 8809 	msr	PSP, r0
 800c90e:	f3bf 8f6f 	isb	sy
 800c912:	f04f 0000 	mov.w	r0, #0
 800c916:	f380 8811 	msr	BASEPRI, r0
 800c91a:	4770      	bx	lr
 800c91c:	f3af 8000 	nop.w

0800c920 <pxCurrentTCBConst2>:
 800c920:	2000658c 	.word	0x2000658c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c924:	bf00      	nop
 800c926:	bf00      	nop

0800c928 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c928:	4808      	ldr	r0, [pc, #32]	@ (800c94c <prvPortStartFirstTask+0x24>)
 800c92a:	6800      	ldr	r0, [r0, #0]
 800c92c:	6800      	ldr	r0, [r0, #0]
 800c92e:	f380 8808 	msr	MSP, r0
 800c932:	f04f 0000 	mov.w	r0, #0
 800c936:	f380 8814 	msr	CONTROL, r0
 800c93a:	b662      	cpsie	i
 800c93c:	b661      	cpsie	f
 800c93e:	f3bf 8f4f 	dsb	sy
 800c942:	f3bf 8f6f 	isb	sy
 800c946:	df00      	svc	0
 800c948:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c94a:	bf00      	nop
 800c94c:	e000ed08 	.word	0xe000ed08

0800c950 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b084      	sub	sp, #16
 800c954:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c956:	4b37      	ldr	r3, [pc, #220]	@ (800ca34 <xPortStartScheduler+0xe4>)
 800c958:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	781b      	ldrb	r3, [r3, #0]
 800c95e:	b2db      	uxtb	r3, r3
 800c960:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	22ff      	movs	r2, #255	@ 0xff
 800c966:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	781b      	ldrb	r3, [r3, #0]
 800c96c:	b2db      	uxtb	r3, r3
 800c96e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c970:	78fb      	ldrb	r3, [r7, #3]
 800c972:	b2db      	uxtb	r3, r3
 800c974:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c978:	b2da      	uxtb	r2, r3
 800c97a:	4b2f      	ldr	r3, [pc, #188]	@ (800ca38 <xPortStartScheduler+0xe8>)
 800c97c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c97e:	4b2f      	ldr	r3, [pc, #188]	@ (800ca3c <xPortStartScheduler+0xec>)
 800c980:	2207      	movs	r2, #7
 800c982:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c984:	e009      	b.n	800c99a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c986:	4b2d      	ldr	r3, [pc, #180]	@ (800ca3c <xPortStartScheduler+0xec>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	3b01      	subs	r3, #1
 800c98c:	4a2b      	ldr	r2, [pc, #172]	@ (800ca3c <xPortStartScheduler+0xec>)
 800c98e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c990:	78fb      	ldrb	r3, [r7, #3]
 800c992:	b2db      	uxtb	r3, r3
 800c994:	005b      	lsls	r3, r3, #1
 800c996:	b2db      	uxtb	r3, r3
 800c998:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c99a:	78fb      	ldrb	r3, [r7, #3]
 800c99c:	b2db      	uxtb	r3, r3
 800c99e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9a2:	2b80      	cmp	r3, #128	@ 0x80
 800c9a4:	d0ef      	beq.n	800c986 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c9a6:	4b25      	ldr	r3, [pc, #148]	@ (800ca3c <xPortStartScheduler+0xec>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f1c3 0307 	rsb	r3, r3, #7
 800c9ae:	2b04      	cmp	r3, #4
 800c9b0:	d00d      	beq.n	800c9ce <xPortStartScheduler+0x7e>
	__asm volatile
 800c9b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9b6:	b672      	cpsid	i
 800c9b8:	f383 8811 	msr	BASEPRI, r3
 800c9bc:	f3bf 8f6f 	isb	sy
 800c9c0:	f3bf 8f4f 	dsb	sy
 800c9c4:	b662      	cpsie	i
 800c9c6:	60bb      	str	r3, [r7, #8]
}
 800c9c8:	bf00      	nop
 800c9ca:	bf00      	nop
 800c9cc:	e7fd      	b.n	800c9ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c9ce:	4b1b      	ldr	r3, [pc, #108]	@ (800ca3c <xPortStartScheduler+0xec>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	021b      	lsls	r3, r3, #8
 800c9d4:	4a19      	ldr	r2, [pc, #100]	@ (800ca3c <xPortStartScheduler+0xec>)
 800c9d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c9d8:	4b18      	ldr	r3, [pc, #96]	@ (800ca3c <xPortStartScheduler+0xec>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c9e0:	4a16      	ldr	r2, [pc, #88]	@ (800ca3c <xPortStartScheduler+0xec>)
 800c9e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	b2da      	uxtb	r2, r3
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c9ec:	4b14      	ldr	r3, [pc, #80]	@ (800ca40 <xPortStartScheduler+0xf0>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4a13      	ldr	r2, [pc, #76]	@ (800ca40 <xPortStartScheduler+0xf0>)
 800c9f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c9f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c9f8:	4b11      	ldr	r3, [pc, #68]	@ (800ca40 <xPortStartScheduler+0xf0>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	4a10      	ldr	r2, [pc, #64]	@ (800ca40 <xPortStartScheduler+0xf0>)
 800c9fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ca02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ca04:	f000 f8dc 	bl	800cbc0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ca08:	4b0e      	ldr	r3, [pc, #56]	@ (800ca44 <xPortStartScheduler+0xf4>)
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ca0e:	f000 f8fb 	bl	800cc08 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ca12:	4b0d      	ldr	r3, [pc, #52]	@ (800ca48 <xPortStartScheduler+0xf8>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	4a0c      	ldr	r2, [pc, #48]	@ (800ca48 <xPortStartScheduler+0xf8>)
 800ca18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ca1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ca1e:	f7ff ff83 	bl	800c928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ca22:	f7fe fef7 	bl	800b814 <vTaskSwitchContext>
	prvTaskExitError();
 800ca26:	f7ff ff33 	bl	800c890 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ca2a:	2300      	movs	r3, #0
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3710      	adds	r7, #16
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}
 800ca34:	e000e400 	.word	0xe000e400
 800ca38:	20006bb8 	.word	0x20006bb8
 800ca3c:	20006bbc 	.word	0x20006bbc
 800ca40:	e000ed20 	.word	0xe000ed20
 800ca44:	2000003c 	.word	0x2000003c
 800ca48:	e000ef34 	.word	0xe000ef34

0800ca4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b083      	sub	sp, #12
 800ca50:	af00      	add	r7, sp, #0
	__asm volatile
 800ca52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca56:	b672      	cpsid	i
 800ca58:	f383 8811 	msr	BASEPRI, r3
 800ca5c:	f3bf 8f6f 	isb	sy
 800ca60:	f3bf 8f4f 	dsb	sy
 800ca64:	b662      	cpsie	i
 800ca66:	607b      	str	r3, [r7, #4]
}
 800ca68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ca6a:	4b11      	ldr	r3, [pc, #68]	@ (800cab0 <vPortEnterCritical+0x64>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	3301      	adds	r3, #1
 800ca70:	4a0f      	ldr	r2, [pc, #60]	@ (800cab0 <vPortEnterCritical+0x64>)
 800ca72:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ca74:	4b0e      	ldr	r3, [pc, #56]	@ (800cab0 <vPortEnterCritical+0x64>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	2b01      	cmp	r3, #1
 800ca7a:	d112      	bne.n	800caa2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ca7c:	4b0d      	ldr	r3, [pc, #52]	@ (800cab4 <vPortEnterCritical+0x68>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	b2db      	uxtb	r3, r3
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d00d      	beq.n	800caa2 <vPortEnterCritical+0x56>
	__asm volatile
 800ca86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca8a:	b672      	cpsid	i
 800ca8c:	f383 8811 	msr	BASEPRI, r3
 800ca90:	f3bf 8f6f 	isb	sy
 800ca94:	f3bf 8f4f 	dsb	sy
 800ca98:	b662      	cpsie	i
 800ca9a:	603b      	str	r3, [r7, #0]
}
 800ca9c:	bf00      	nop
 800ca9e:	bf00      	nop
 800caa0:	e7fd      	b.n	800ca9e <vPortEnterCritical+0x52>
	}
}
 800caa2:	bf00      	nop
 800caa4:	370c      	adds	r7, #12
 800caa6:	46bd      	mov	sp, r7
 800caa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caac:	4770      	bx	lr
 800caae:	bf00      	nop
 800cab0:	2000003c 	.word	0x2000003c
 800cab4:	e000ed04 	.word	0xe000ed04

0800cab8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cab8:	b480      	push	{r7}
 800caba:	b083      	sub	sp, #12
 800cabc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cabe:	4b13      	ldr	r3, [pc, #76]	@ (800cb0c <vPortExitCritical+0x54>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d10d      	bne.n	800cae2 <vPortExitCritical+0x2a>
	__asm volatile
 800cac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caca:	b672      	cpsid	i
 800cacc:	f383 8811 	msr	BASEPRI, r3
 800cad0:	f3bf 8f6f 	isb	sy
 800cad4:	f3bf 8f4f 	dsb	sy
 800cad8:	b662      	cpsie	i
 800cada:	607b      	str	r3, [r7, #4]
}
 800cadc:	bf00      	nop
 800cade:	bf00      	nop
 800cae0:	e7fd      	b.n	800cade <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800cae2:	4b0a      	ldr	r3, [pc, #40]	@ (800cb0c <vPortExitCritical+0x54>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	3b01      	subs	r3, #1
 800cae8:	4a08      	ldr	r2, [pc, #32]	@ (800cb0c <vPortExitCritical+0x54>)
 800caea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800caec:	4b07      	ldr	r3, [pc, #28]	@ (800cb0c <vPortExitCritical+0x54>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d105      	bne.n	800cb00 <vPortExitCritical+0x48>
 800caf4:	2300      	movs	r3, #0
 800caf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	f383 8811 	msr	BASEPRI, r3
}
 800cafe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cb00:	bf00      	nop
 800cb02:	370c      	adds	r7, #12
 800cb04:	46bd      	mov	sp, r7
 800cb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0a:	4770      	bx	lr
 800cb0c:	2000003c 	.word	0x2000003c

0800cb10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cb10:	f3ef 8009 	mrs	r0, PSP
 800cb14:	f3bf 8f6f 	isb	sy
 800cb18:	4b15      	ldr	r3, [pc, #84]	@ (800cb70 <pxCurrentTCBConst>)
 800cb1a:	681a      	ldr	r2, [r3, #0]
 800cb1c:	f01e 0f10 	tst.w	lr, #16
 800cb20:	bf08      	it	eq
 800cb22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cb26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb2a:	6010      	str	r0, [r2, #0]
 800cb2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cb30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cb34:	b672      	cpsid	i
 800cb36:	f380 8811 	msr	BASEPRI, r0
 800cb3a:	f3bf 8f4f 	dsb	sy
 800cb3e:	f3bf 8f6f 	isb	sy
 800cb42:	b662      	cpsie	i
 800cb44:	f7fe fe66 	bl	800b814 <vTaskSwitchContext>
 800cb48:	f04f 0000 	mov.w	r0, #0
 800cb4c:	f380 8811 	msr	BASEPRI, r0
 800cb50:	bc09      	pop	{r0, r3}
 800cb52:	6819      	ldr	r1, [r3, #0]
 800cb54:	6808      	ldr	r0, [r1, #0]
 800cb56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb5a:	f01e 0f10 	tst.w	lr, #16
 800cb5e:	bf08      	it	eq
 800cb60:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cb64:	f380 8809 	msr	PSP, r0
 800cb68:	f3bf 8f6f 	isb	sy
 800cb6c:	4770      	bx	lr
 800cb6e:	bf00      	nop

0800cb70 <pxCurrentTCBConst>:
 800cb70:	2000658c 	.word	0x2000658c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cb74:	bf00      	nop
 800cb76:	bf00      	nop

0800cb78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	af00      	add	r7, sp, #0
	__asm volatile
 800cb7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb82:	b672      	cpsid	i
 800cb84:	f383 8811 	msr	BASEPRI, r3
 800cb88:	f3bf 8f6f 	isb	sy
 800cb8c:	f3bf 8f4f 	dsb	sy
 800cb90:	b662      	cpsie	i
 800cb92:	607b      	str	r3, [r7, #4]
}
 800cb94:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cb96:	f7fe fd81 	bl	800b69c <xTaskIncrementTick>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d003      	beq.n	800cba8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cba0:	4b06      	ldr	r3, [pc, #24]	@ (800cbbc <SysTick_Handler+0x44>)
 800cba2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cba6:	601a      	str	r2, [r3, #0]
 800cba8:	2300      	movs	r3, #0
 800cbaa:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	f383 8811 	msr	BASEPRI, r3
}
 800cbb2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cbb4:	bf00      	nop
 800cbb6:	3708      	adds	r7, #8
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}
 800cbbc:	e000ed04 	.word	0xe000ed04

0800cbc0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cbc4:	4b0b      	ldr	r3, [pc, #44]	@ (800cbf4 <vPortSetupTimerInterrupt+0x34>)
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cbca:	4b0b      	ldr	r3, [pc, #44]	@ (800cbf8 <vPortSetupTimerInterrupt+0x38>)
 800cbcc:	2200      	movs	r2, #0
 800cbce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cbd0:	4b0a      	ldr	r3, [pc, #40]	@ (800cbfc <vPortSetupTimerInterrupt+0x3c>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	4a0a      	ldr	r2, [pc, #40]	@ (800cc00 <vPortSetupTimerInterrupt+0x40>)
 800cbd6:	fba2 2303 	umull	r2, r3, r2, r3
 800cbda:	099b      	lsrs	r3, r3, #6
 800cbdc:	4a09      	ldr	r2, [pc, #36]	@ (800cc04 <vPortSetupTimerInterrupt+0x44>)
 800cbde:	3b01      	subs	r3, #1
 800cbe0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cbe2:	4b04      	ldr	r3, [pc, #16]	@ (800cbf4 <vPortSetupTimerInterrupt+0x34>)
 800cbe4:	2207      	movs	r2, #7
 800cbe6:	601a      	str	r2, [r3, #0]
}
 800cbe8:	bf00      	nop
 800cbea:	46bd      	mov	sp, r7
 800cbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf0:	4770      	bx	lr
 800cbf2:	bf00      	nop
 800cbf4:	e000e010 	.word	0xe000e010
 800cbf8:	e000e018 	.word	0xe000e018
 800cbfc:	20000030 	.word	0x20000030
 800cc00:	10624dd3 	.word	0x10624dd3
 800cc04:	e000e014 	.word	0xe000e014

0800cc08 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cc08:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cc18 <vPortEnableVFP+0x10>
 800cc0c:	6801      	ldr	r1, [r0, #0]
 800cc0e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cc12:	6001      	str	r1, [r0, #0]
 800cc14:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cc16:	bf00      	nop
 800cc18:	e000ed88 	.word	0xe000ed88

0800cc1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b085      	sub	sp, #20
 800cc20:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cc22:	f3ef 8305 	mrs	r3, IPSR
 800cc26:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	2b0f      	cmp	r3, #15
 800cc2c:	d917      	bls.n	800cc5e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cc2e:	4a1a      	ldr	r2, [pc, #104]	@ (800cc98 <vPortValidateInterruptPriority+0x7c>)
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	4413      	add	r3, r2
 800cc34:	781b      	ldrb	r3, [r3, #0]
 800cc36:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cc38:	4b18      	ldr	r3, [pc, #96]	@ (800cc9c <vPortValidateInterruptPriority+0x80>)
 800cc3a:	781b      	ldrb	r3, [r3, #0]
 800cc3c:	7afa      	ldrb	r2, [r7, #11]
 800cc3e:	429a      	cmp	r2, r3
 800cc40:	d20d      	bcs.n	800cc5e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800cc42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc46:	b672      	cpsid	i
 800cc48:	f383 8811 	msr	BASEPRI, r3
 800cc4c:	f3bf 8f6f 	isb	sy
 800cc50:	f3bf 8f4f 	dsb	sy
 800cc54:	b662      	cpsie	i
 800cc56:	607b      	str	r3, [r7, #4]
}
 800cc58:	bf00      	nop
 800cc5a:	bf00      	nop
 800cc5c:	e7fd      	b.n	800cc5a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cc5e:	4b10      	ldr	r3, [pc, #64]	@ (800cca0 <vPortValidateInterruptPriority+0x84>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cc66:	4b0f      	ldr	r3, [pc, #60]	@ (800cca4 <vPortValidateInterruptPriority+0x88>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	429a      	cmp	r2, r3
 800cc6c:	d90d      	bls.n	800cc8a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800cc6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc72:	b672      	cpsid	i
 800cc74:	f383 8811 	msr	BASEPRI, r3
 800cc78:	f3bf 8f6f 	isb	sy
 800cc7c:	f3bf 8f4f 	dsb	sy
 800cc80:	b662      	cpsie	i
 800cc82:	603b      	str	r3, [r7, #0]
}
 800cc84:	bf00      	nop
 800cc86:	bf00      	nop
 800cc88:	e7fd      	b.n	800cc86 <vPortValidateInterruptPriority+0x6a>
	}
 800cc8a:	bf00      	nop
 800cc8c:	3714      	adds	r7, #20
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc94:	4770      	bx	lr
 800cc96:	bf00      	nop
 800cc98:	e000e3f0 	.word	0xe000e3f0
 800cc9c:	20006bb8 	.word	0x20006bb8
 800cca0:	e000ed0c 	.word	0xe000ed0c
 800cca4:	20006bbc 	.word	0x20006bbc

0800cca8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b08a      	sub	sp, #40	@ 0x28
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ccb4:	f7fe fc34 	bl	800b520 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ccb8:	4b5d      	ldr	r3, [pc, #372]	@ (800ce30 <pvPortMalloc+0x188>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d101      	bne.n	800ccc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ccc0:	f000 f920 	bl	800cf04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ccc4:	4b5b      	ldr	r3, [pc, #364]	@ (800ce34 <pvPortMalloc+0x18c>)
 800ccc6:	681a      	ldr	r2, [r3, #0]
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	4013      	ands	r3, r2
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	f040 8094 	bne.w	800cdfa <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d020      	beq.n	800cd1a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800ccd8:	2208      	movs	r2, #8
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	4413      	add	r3, r2
 800ccde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f003 0307 	and.w	r3, r3, #7
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d017      	beq.n	800cd1a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f023 0307 	bic.w	r3, r3, #7
 800ccf0:	3308      	adds	r3, #8
 800ccf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f003 0307 	and.w	r3, r3, #7
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d00d      	beq.n	800cd1a <pvPortMalloc+0x72>
	__asm volatile
 800ccfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd02:	b672      	cpsid	i
 800cd04:	f383 8811 	msr	BASEPRI, r3
 800cd08:	f3bf 8f6f 	isb	sy
 800cd0c:	f3bf 8f4f 	dsb	sy
 800cd10:	b662      	cpsie	i
 800cd12:	617b      	str	r3, [r7, #20]
}
 800cd14:	bf00      	nop
 800cd16:	bf00      	nop
 800cd18:	e7fd      	b.n	800cd16 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d06c      	beq.n	800cdfa <pvPortMalloc+0x152>
 800cd20:	4b45      	ldr	r3, [pc, #276]	@ (800ce38 <pvPortMalloc+0x190>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	687a      	ldr	r2, [r7, #4]
 800cd26:	429a      	cmp	r2, r3
 800cd28:	d867      	bhi.n	800cdfa <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cd2a:	4b44      	ldr	r3, [pc, #272]	@ (800ce3c <pvPortMalloc+0x194>)
 800cd2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cd2e:	4b43      	ldr	r3, [pc, #268]	@ (800ce3c <pvPortMalloc+0x194>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd34:	e004      	b.n	800cd40 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800cd36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cd3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd42:	685b      	ldr	r3, [r3, #4]
 800cd44:	687a      	ldr	r2, [r7, #4]
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d903      	bls.n	800cd52 <pvPortMalloc+0xaa>
 800cd4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d1f1      	bne.n	800cd36 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cd52:	4b37      	ldr	r3, [pc, #220]	@ (800ce30 <pvPortMalloc+0x188>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd58:	429a      	cmp	r2, r3
 800cd5a:	d04e      	beq.n	800cdfa <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cd5c:	6a3b      	ldr	r3, [r7, #32]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	2208      	movs	r2, #8
 800cd62:	4413      	add	r3, r2
 800cd64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cd66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd68:	681a      	ldr	r2, [r3, #0]
 800cd6a:	6a3b      	ldr	r3, [r7, #32]
 800cd6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cd6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd70:	685a      	ldr	r2, [r3, #4]
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	1ad2      	subs	r2, r2, r3
 800cd76:	2308      	movs	r3, #8
 800cd78:	005b      	lsls	r3, r3, #1
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d922      	bls.n	800cdc4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cd7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	4413      	add	r3, r2
 800cd84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd86:	69bb      	ldr	r3, [r7, #24]
 800cd88:	f003 0307 	and.w	r3, r3, #7
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d00d      	beq.n	800cdac <pvPortMalloc+0x104>
	__asm volatile
 800cd90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd94:	b672      	cpsid	i
 800cd96:	f383 8811 	msr	BASEPRI, r3
 800cd9a:	f3bf 8f6f 	isb	sy
 800cd9e:	f3bf 8f4f 	dsb	sy
 800cda2:	b662      	cpsie	i
 800cda4:	613b      	str	r3, [r7, #16]
}
 800cda6:	bf00      	nop
 800cda8:	bf00      	nop
 800cdaa:	e7fd      	b.n	800cda8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cdac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdae:	685a      	ldr	r2, [r3, #4]
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	1ad2      	subs	r2, r2, r3
 800cdb4:	69bb      	ldr	r3, [r7, #24]
 800cdb6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cdb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdba:	687a      	ldr	r2, [r7, #4]
 800cdbc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cdbe:	69b8      	ldr	r0, [r7, #24]
 800cdc0:	f000 f902 	bl	800cfc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cdc4:	4b1c      	ldr	r3, [pc, #112]	@ (800ce38 <pvPortMalloc+0x190>)
 800cdc6:	681a      	ldr	r2, [r3, #0]
 800cdc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdca:	685b      	ldr	r3, [r3, #4]
 800cdcc:	1ad3      	subs	r3, r2, r3
 800cdce:	4a1a      	ldr	r2, [pc, #104]	@ (800ce38 <pvPortMalloc+0x190>)
 800cdd0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cdd2:	4b19      	ldr	r3, [pc, #100]	@ (800ce38 <pvPortMalloc+0x190>)
 800cdd4:	681a      	ldr	r2, [r3, #0]
 800cdd6:	4b1a      	ldr	r3, [pc, #104]	@ (800ce40 <pvPortMalloc+0x198>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d203      	bcs.n	800cde6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cdde:	4b16      	ldr	r3, [pc, #88]	@ (800ce38 <pvPortMalloc+0x190>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	4a17      	ldr	r2, [pc, #92]	@ (800ce40 <pvPortMalloc+0x198>)
 800cde4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cde6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cde8:	685a      	ldr	r2, [r3, #4]
 800cdea:	4b12      	ldr	r3, [pc, #72]	@ (800ce34 <pvPortMalloc+0x18c>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	431a      	orrs	r2, r3
 800cdf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdf2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cdf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cdfa:	f7fe fb9f 	bl	800b53c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cdfe:	69fb      	ldr	r3, [r7, #28]
 800ce00:	f003 0307 	and.w	r3, r3, #7
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d00d      	beq.n	800ce24 <pvPortMalloc+0x17c>
	__asm volatile
 800ce08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce0c:	b672      	cpsid	i
 800ce0e:	f383 8811 	msr	BASEPRI, r3
 800ce12:	f3bf 8f6f 	isb	sy
 800ce16:	f3bf 8f4f 	dsb	sy
 800ce1a:	b662      	cpsie	i
 800ce1c:	60fb      	str	r3, [r7, #12]
}
 800ce1e:	bf00      	nop
 800ce20:	bf00      	nop
 800ce22:	e7fd      	b.n	800ce20 <pvPortMalloc+0x178>
	return pvReturn;
 800ce24:	69fb      	ldr	r3, [r7, #28]
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3728      	adds	r7, #40	@ 0x28
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}
 800ce2e:	bf00      	nop
 800ce30:	2000a7c8 	.word	0x2000a7c8
 800ce34:	2000a7d4 	.word	0x2000a7d4
 800ce38:	2000a7cc 	.word	0x2000a7cc
 800ce3c:	2000a7c0 	.word	0x2000a7c0
 800ce40:	2000a7d0 	.word	0x2000a7d0

0800ce44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b086      	sub	sp, #24
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d04e      	beq.n	800cef4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ce56:	2308      	movs	r3, #8
 800ce58:	425b      	negs	r3, r3
 800ce5a:	697a      	ldr	r2, [r7, #20]
 800ce5c:	4413      	add	r3, r2
 800ce5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	685a      	ldr	r2, [r3, #4]
 800ce68:	4b24      	ldr	r3, [pc, #144]	@ (800cefc <vPortFree+0xb8>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	4013      	ands	r3, r2
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d10d      	bne.n	800ce8e <vPortFree+0x4a>
	__asm volatile
 800ce72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce76:	b672      	cpsid	i
 800ce78:	f383 8811 	msr	BASEPRI, r3
 800ce7c:	f3bf 8f6f 	isb	sy
 800ce80:	f3bf 8f4f 	dsb	sy
 800ce84:	b662      	cpsie	i
 800ce86:	60fb      	str	r3, [r7, #12]
}
 800ce88:	bf00      	nop
 800ce8a:	bf00      	nop
 800ce8c:	e7fd      	b.n	800ce8a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ce8e:	693b      	ldr	r3, [r7, #16]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d00d      	beq.n	800ceb2 <vPortFree+0x6e>
	__asm volatile
 800ce96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce9a:	b672      	cpsid	i
 800ce9c:	f383 8811 	msr	BASEPRI, r3
 800cea0:	f3bf 8f6f 	isb	sy
 800cea4:	f3bf 8f4f 	dsb	sy
 800cea8:	b662      	cpsie	i
 800ceaa:	60bb      	str	r3, [r7, #8]
}
 800ceac:	bf00      	nop
 800ceae:	bf00      	nop
 800ceb0:	e7fd      	b.n	800ceae <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ceb2:	693b      	ldr	r3, [r7, #16]
 800ceb4:	685a      	ldr	r2, [r3, #4]
 800ceb6:	4b11      	ldr	r3, [pc, #68]	@ (800cefc <vPortFree+0xb8>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	4013      	ands	r3, r2
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d019      	beq.n	800cef4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cec0:	693b      	ldr	r3, [r7, #16]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d115      	bne.n	800cef4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	685a      	ldr	r2, [r3, #4]
 800cecc:	4b0b      	ldr	r3, [pc, #44]	@ (800cefc <vPortFree+0xb8>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	43db      	mvns	r3, r3
 800ced2:	401a      	ands	r2, r3
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ced8:	f7fe fb22 	bl	800b520 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	685a      	ldr	r2, [r3, #4]
 800cee0:	4b07      	ldr	r3, [pc, #28]	@ (800cf00 <vPortFree+0xbc>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	4413      	add	r3, r2
 800cee6:	4a06      	ldr	r2, [pc, #24]	@ (800cf00 <vPortFree+0xbc>)
 800cee8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ceea:	6938      	ldr	r0, [r7, #16]
 800ceec:	f000 f86c 	bl	800cfc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cef0:	f7fe fb24 	bl	800b53c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cef4:	bf00      	nop
 800cef6:	3718      	adds	r7, #24
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}
 800cefc:	2000a7d4 	.word	0x2000a7d4
 800cf00:	2000a7cc 	.word	0x2000a7cc

0800cf04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cf04:	b480      	push	{r7}
 800cf06:	b085      	sub	sp, #20
 800cf08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cf0a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800cf0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cf10:	4b27      	ldr	r3, [pc, #156]	@ (800cfb0 <prvHeapInit+0xac>)
 800cf12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	f003 0307 	and.w	r3, r3, #7
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d00c      	beq.n	800cf38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	3307      	adds	r3, #7
 800cf22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	f023 0307 	bic.w	r3, r3, #7
 800cf2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cf2c:	68ba      	ldr	r2, [r7, #8]
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	1ad3      	subs	r3, r2, r3
 800cf32:	4a1f      	ldr	r2, [pc, #124]	@ (800cfb0 <prvHeapInit+0xac>)
 800cf34:	4413      	add	r3, r2
 800cf36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cf3c:	4a1d      	ldr	r2, [pc, #116]	@ (800cfb4 <prvHeapInit+0xb0>)
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cf42:	4b1c      	ldr	r3, [pc, #112]	@ (800cfb4 <prvHeapInit+0xb0>)
 800cf44:	2200      	movs	r2, #0
 800cf46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	68ba      	ldr	r2, [r7, #8]
 800cf4c:	4413      	add	r3, r2
 800cf4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cf50:	2208      	movs	r2, #8
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	1a9b      	subs	r3, r3, r2
 800cf56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	f023 0307 	bic.w	r3, r3, #7
 800cf5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	4a15      	ldr	r2, [pc, #84]	@ (800cfb8 <prvHeapInit+0xb4>)
 800cf64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cf66:	4b14      	ldr	r3, [pc, #80]	@ (800cfb8 <prvHeapInit+0xb4>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cf6e:	4b12      	ldr	r3, [pc, #72]	@ (800cfb8 <prvHeapInit+0xb4>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	2200      	movs	r2, #0
 800cf74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	68fa      	ldr	r2, [r7, #12]
 800cf7e:	1ad2      	subs	r2, r2, r3
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cf84:	4b0c      	ldr	r3, [pc, #48]	@ (800cfb8 <prvHeapInit+0xb4>)
 800cf86:	681a      	ldr	r2, [r3, #0]
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	685b      	ldr	r3, [r3, #4]
 800cf90:	4a0a      	ldr	r2, [pc, #40]	@ (800cfbc <prvHeapInit+0xb8>)
 800cf92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	685b      	ldr	r3, [r3, #4]
 800cf98:	4a09      	ldr	r2, [pc, #36]	@ (800cfc0 <prvHeapInit+0xbc>)
 800cf9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cf9c:	4b09      	ldr	r3, [pc, #36]	@ (800cfc4 <prvHeapInit+0xc0>)
 800cf9e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cfa2:	601a      	str	r2, [r3, #0]
}
 800cfa4:	bf00      	nop
 800cfa6:	3714      	adds	r7, #20
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfae:	4770      	bx	lr
 800cfb0:	20006bc0 	.word	0x20006bc0
 800cfb4:	2000a7c0 	.word	0x2000a7c0
 800cfb8:	2000a7c8 	.word	0x2000a7c8
 800cfbc:	2000a7d0 	.word	0x2000a7d0
 800cfc0:	2000a7cc 	.word	0x2000a7cc
 800cfc4:	2000a7d4 	.word	0x2000a7d4

0800cfc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b085      	sub	sp, #20
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cfd0:	4b28      	ldr	r3, [pc, #160]	@ (800d074 <prvInsertBlockIntoFreeList+0xac>)
 800cfd2:	60fb      	str	r3, [r7, #12]
 800cfd4:	e002      	b.n	800cfdc <prvInsertBlockIntoFreeList+0x14>
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	60fb      	str	r3, [r7, #12]
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	687a      	ldr	r2, [r7, #4]
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	d8f7      	bhi.n	800cfd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	685b      	ldr	r3, [r3, #4]
 800cfee:	68ba      	ldr	r2, [r7, #8]
 800cff0:	4413      	add	r3, r2
 800cff2:	687a      	ldr	r2, [r7, #4]
 800cff4:	429a      	cmp	r2, r3
 800cff6:	d108      	bne.n	800d00a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	685a      	ldr	r2, [r3, #4]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	685b      	ldr	r3, [r3, #4]
 800d000:	441a      	add	r2, r3
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	685b      	ldr	r3, [r3, #4]
 800d012:	68ba      	ldr	r2, [r7, #8]
 800d014:	441a      	add	r2, r3
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	429a      	cmp	r2, r3
 800d01c:	d118      	bne.n	800d050 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	681a      	ldr	r2, [r3, #0]
 800d022:	4b15      	ldr	r3, [pc, #84]	@ (800d078 <prvInsertBlockIntoFreeList+0xb0>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	429a      	cmp	r2, r3
 800d028:	d00d      	beq.n	800d046 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	685a      	ldr	r2, [r3, #4]
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	685b      	ldr	r3, [r3, #4]
 800d034:	441a      	add	r2, r3
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	681a      	ldr	r2, [r3, #0]
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	601a      	str	r2, [r3, #0]
 800d044:	e008      	b.n	800d058 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d046:	4b0c      	ldr	r3, [pc, #48]	@ (800d078 <prvInsertBlockIntoFreeList+0xb0>)
 800d048:	681a      	ldr	r2, [r3, #0]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	601a      	str	r2, [r3, #0]
 800d04e:	e003      	b.n	800d058 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	681a      	ldr	r2, [r3, #0]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d058:	68fa      	ldr	r2, [r7, #12]
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d002      	beq.n	800d066 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	687a      	ldr	r2, [r7, #4]
 800d064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d066:	bf00      	nop
 800d068:	3714      	adds	r7, #20
 800d06a:	46bd      	mov	sp, r7
 800d06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d070:	4770      	bx	lr
 800d072:	bf00      	nop
 800d074:	2000a7c0 	.word	0x2000a7c0
 800d078:	2000a7c8 	.word	0x2000a7c8

0800d07c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800d07c:	4b04      	ldr	r3, [pc, #16]	@ (800d090 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800d07e:	681a      	ldr	r2, [r3, #0]
 800d080:	b10a      	cbz	r2, 800d086 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800d082:	4803      	ldr	r0, [pc, #12]	@ (800d090 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800d084:	4770      	bx	lr
 800d086:	4a03      	ldr	r2, [pc, #12]	@ (800d094 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800d088:	4801      	ldr	r0, [pc, #4]	@ (800d090 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800d08a:	6812      	ldr	r2, [r2, #0]
 800d08c:	601a      	str	r2, [r3, #0]
 800d08e:	4770      	bx	lr
 800d090:	20000048 	.word	0x20000048
 800d094:	200001fc 	.word	0x200001fc

0800d098 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800d098:	4a02      	ldr	r2, [pc, #8]	@ (800d0a4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800d09a:	4b03      	ldr	r3, [pc, #12]	@ (800d0a8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800d09c:	6812      	ldr	r2, [r2, #0]
 800d09e:	601a      	str	r2, [r3, #0]
 800d0a0:	4770      	bx	lr
 800d0a2:	bf00      	nop
 800d0a4:	200001fc 	.word	0x200001fc
 800d0a8:	20000048 	.word	0x20000048

0800d0ac <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800d0ac:	f003 bda0 	b.w	8010bf0 <geometry_msgs__msg__Twist__init>

0800d0b0 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800d0b0:	f003 bdc2 	b.w	8010c38 <geometry_msgs__msg__Twist__fini>

0800d0b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800d0b4:	b510      	push	{r4, lr}
 800d0b6:	4c08      	ldr	r4, [pc, #32]	@ (800d0d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800d0b8:	f000 f818 	bl	800d0ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d0bc:	60e0      	str	r0, [r4, #12]
 800d0be:	f000 f815 	bl	800d0ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d0c2:	4b06      	ldr	r3, [pc, #24]	@ (800d0dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800d0c4:	64a0      	str	r0, [r4, #72]	@ 0x48
 800d0c6:	681a      	ldr	r2, [r3, #0]
 800d0c8:	b10a      	cbz	r2, 800d0ce <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800d0ca:	4804      	ldr	r0, [pc, #16]	@ (800d0dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800d0cc:	bd10      	pop	{r4, pc}
 800d0ce:	4a04      	ldr	r2, [pc, #16]	@ (800d0e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800d0d0:	4802      	ldr	r0, [pc, #8]	@ (800d0dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800d0d2:	6812      	ldr	r2, [r2, #0]
 800d0d4:	601a      	str	r2, [r3, #0]
 800d0d6:	bd10      	pop	{r4, pc}
 800d0d8:	20000054 	.word	0x20000054
 800d0dc:	200000cc 	.word	0x200000cc
 800d0e0:	20000200 	.word	0x20000200

0800d0e4 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800d0e4:	f003 bdb4 	b.w	8010c50 <geometry_msgs__msg__Vector3__init>

0800d0e8 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800d0e8:	f003 bdb6 	b.w	8010c58 <geometry_msgs__msg__Vector3__fini>

0800d0ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800d0ec:	4b04      	ldr	r3, [pc, #16]	@ (800d100 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800d0ee:	681a      	ldr	r2, [r3, #0]
 800d0f0:	b10a      	cbz	r2, 800d0f6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800d0f2:	4803      	ldr	r0, [pc, #12]	@ (800d100 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800d0f4:	4770      	bx	lr
 800d0f6:	4a03      	ldr	r2, [pc, #12]	@ (800d104 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800d0f8:	4801      	ldr	r0, [pc, #4]	@ (800d100 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800d0fa:	6812      	ldr	r2, [r2, #0]
 800d0fc:	601a      	str	r2, [r3, #0]
 800d0fe:	4770      	bx	lr
 800d100:	2000018c 	.word	0x2000018c
 800d104:	20000200 	.word	0x20000200

0800d108 <get_serialized_size_geometry_msgs__msg__Twist>:
 800d108:	b538      	push	{r3, r4, r5, lr}
 800d10a:	4604      	mov	r4, r0
 800d10c:	b150      	cbz	r0, 800d124 <get_serialized_size_geometry_msgs__msg__Twist+0x1c>
 800d10e:	460d      	mov	r5, r1
 800d110:	f000 f866 	bl	800d1e0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800d114:	4603      	mov	r3, r0
 800d116:	f104 0018 	add.w	r0, r4, #24
 800d11a:	461c      	mov	r4, r3
 800d11c:	18e9      	adds	r1, r5, r3
 800d11e:	f000 f85f 	bl	800d1e0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800d122:	4420      	add	r0, r4
 800d124:	bd38      	pop	{r3, r4, r5, pc}
 800d126:	bf00      	nop

0800d128 <_Twist__cdr_deserialize>:
 800d128:	b570      	push	{r4, r5, r6, lr}
 800d12a:	460c      	mov	r4, r1
 800d12c:	b199      	cbz	r1, 800d156 <_Twist__cdr_deserialize+0x2e>
 800d12e:	4605      	mov	r5, r0
 800d130:	f000 f8de 	bl	800d2f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d134:	4603      	mov	r3, r0
 800d136:	4621      	mov	r1, r4
 800d138:	4628      	mov	r0, r5
 800d13a:	685b      	ldr	r3, [r3, #4]
 800d13c:	68db      	ldr	r3, [r3, #12]
 800d13e:	4798      	blx	r3
 800d140:	f000 f8d6 	bl	800d2f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d144:	4603      	mov	r3, r0
 800d146:	f104 0118 	add.w	r1, r4, #24
 800d14a:	4628      	mov	r0, r5
 800d14c:	685b      	ldr	r3, [r3, #4]
 800d14e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d152:	68db      	ldr	r3, [r3, #12]
 800d154:	4718      	bx	r3
 800d156:	4608      	mov	r0, r1
 800d158:	bd70      	pop	{r4, r5, r6, pc}
 800d15a:	bf00      	nop

0800d15c <_Twist__cdr_serialize>:
 800d15c:	b510      	push	{r4, lr}
 800d15e:	b082      	sub	sp, #8
 800d160:	9101      	str	r1, [sp, #4]
 800d162:	b1a0      	cbz	r0, 800d18e <_Twist__cdr_serialize+0x32>
 800d164:	4604      	mov	r4, r0
 800d166:	f000 f8c3 	bl	800d2f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d16a:	4603      	mov	r3, r0
 800d16c:	9901      	ldr	r1, [sp, #4]
 800d16e:	4620      	mov	r0, r4
 800d170:	685b      	ldr	r3, [r3, #4]
 800d172:	689b      	ldr	r3, [r3, #8]
 800d174:	4798      	blx	r3
 800d176:	f000 f8bb 	bl	800d2f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d17a:	4603      	mov	r3, r0
 800d17c:	9901      	ldr	r1, [sp, #4]
 800d17e:	f104 0018 	add.w	r0, r4, #24
 800d182:	685b      	ldr	r3, [r3, #4]
 800d184:	689b      	ldr	r3, [r3, #8]
 800d186:	b002      	add	sp, #8
 800d188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d18c:	4718      	bx	r3
 800d18e:	b002      	add	sp, #8
 800d190:	bd10      	pop	{r4, pc}
 800d192:	bf00      	nop

0800d194 <_Twist__get_serialized_size>:
 800d194:	b510      	push	{r4, lr}
 800d196:	4604      	mov	r4, r0
 800d198:	b148      	cbz	r0, 800d1ae <_Twist__get_serialized_size+0x1a>
 800d19a:	2100      	movs	r1, #0
 800d19c:	f000 f820 	bl	800d1e0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800d1a0:	4601      	mov	r1, r0
 800d1a2:	f104 0018 	add.w	r0, r4, #24
 800d1a6:	460c      	mov	r4, r1
 800d1a8:	f000 f81a 	bl	800d1e0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800d1ac:	4420      	add	r0, r4
 800d1ae:	bd10      	pop	{r4, pc}

0800d1b0 <_Twist__max_serialized_size>:
 800d1b0:	b510      	push	{r4, lr}
 800d1b2:	b082      	sub	sp, #8
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	2100      	movs	r1, #0
 800d1b8:	f10d 0007 	add.w	r0, sp, #7
 800d1bc:	f88d 3007 	strb.w	r3, [sp, #7]
 800d1c0:	f000 f87c 	bl	800d2bc <max_serialized_size_geometry_msgs__msg__Vector3>
 800d1c4:	4604      	mov	r4, r0
 800d1c6:	f10d 0007 	add.w	r0, sp, #7
 800d1ca:	4621      	mov	r1, r4
 800d1cc:	f000 f876 	bl	800d2bc <max_serialized_size_geometry_msgs__msg__Vector3>
 800d1d0:	4420      	add	r0, r4
 800d1d2:	b002      	add	sp, #8
 800d1d4:	bd10      	pop	{r4, pc}
 800d1d6:	bf00      	nop

0800d1d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800d1d8:	4800      	ldr	r0, [pc, #0]	@ (800d1dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800d1da:	4770      	bx	lr
 800d1dc:	20000198 	.word	0x20000198

0800d1e0 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800d1e0:	b1b8      	cbz	r0, 800d212 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800d1e2:	b538      	push	{r3, r4, r5, lr}
 800d1e4:	460d      	mov	r5, r1
 800d1e6:	2108      	movs	r1, #8
 800d1e8:	4628      	mov	r0, r5
 800d1ea:	f001 fcc1 	bl	800eb70 <ucdr_alignment>
 800d1ee:	f105 0308 	add.w	r3, r5, #8
 800d1f2:	2108      	movs	r1, #8
 800d1f4:	f1c5 0508 	rsb	r5, r5, #8
 800d1f8:	181c      	adds	r4, r3, r0
 800d1fa:	4620      	mov	r0, r4
 800d1fc:	f001 fcb8 	bl	800eb70 <ucdr_alignment>
 800d200:	2108      	movs	r1, #8
 800d202:	4408      	add	r0, r1
 800d204:	4404      	add	r4, r0
 800d206:	4620      	mov	r0, r4
 800d208:	f001 fcb2 	bl	800eb70 <ucdr_alignment>
 800d20c:	4428      	add	r0, r5
 800d20e:	4420      	add	r0, r4
 800d210:	bd38      	pop	{r3, r4, r5, pc}
 800d212:	4770      	bx	lr

0800d214 <_Vector3__cdr_deserialize>:
 800d214:	b538      	push	{r3, r4, r5, lr}
 800d216:	460c      	mov	r4, r1
 800d218:	b171      	cbz	r1, 800d238 <_Vector3__cdr_deserialize+0x24>
 800d21a:	4605      	mov	r5, r0
 800d21c:	f001 fabc 	bl	800e798 <ucdr_deserialize_double>
 800d220:	f104 0108 	add.w	r1, r4, #8
 800d224:	4628      	mov	r0, r5
 800d226:	f001 fab7 	bl	800e798 <ucdr_deserialize_double>
 800d22a:	f104 0110 	add.w	r1, r4, #16
 800d22e:	4628      	mov	r0, r5
 800d230:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d234:	f001 bab0 	b.w	800e798 <ucdr_deserialize_double>
 800d238:	4608      	mov	r0, r1
 800d23a:	bd38      	pop	{r3, r4, r5, pc}

0800d23c <_Vector3__cdr_serialize>:
 800d23c:	b198      	cbz	r0, 800d266 <_Vector3__cdr_serialize+0x2a>
 800d23e:	b538      	push	{r3, r4, r5, lr}
 800d240:	460d      	mov	r5, r1
 800d242:	4604      	mov	r4, r0
 800d244:	ed90 0b00 	vldr	d0, [r0]
 800d248:	4608      	mov	r0, r1
 800d24a:	f001 f903 	bl	800e454 <ucdr_serialize_double>
 800d24e:	4628      	mov	r0, r5
 800d250:	ed94 0b02 	vldr	d0, [r4, #8]
 800d254:	f001 f8fe 	bl	800e454 <ucdr_serialize_double>
 800d258:	4628      	mov	r0, r5
 800d25a:	ed94 0b04 	vldr	d0, [r4, #16]
 800d25e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d262:	f001 b8f7 	b.w	800e454 <ucdr_serialize_double>
 800d266:	4770      	bx	lr

0800d268 <_Vector3__get_serialized_size>:
 800d268:	b190      	cbz	r0, 800d290 <_Vector3__get_serialized_size+0x28>
 800d26a:	2108      	movs	r1, #8
 800d26c:	2000      	movs	r0, #0
 800d26e:	b510      	push	{r4, lr}
 800d270:	f001 fc7e 	bl	800eb70 <ucdr_alignment>
 800d274:	2108      	movs	r1, #8
 800d276:	1844      	adds	r4, r0, r1
 800d278:	4620      	mov	r0, r4
 800d27a:	f001 fc79 	bl	800eb70 <ucdr_alignment>
 800d27e:	2108      	movs	r1, #8
 800d280:	4408      	add	r0, r1
 800d282:	4404      	add	r4, r0
 800d284:	4620      	mov	r0, r4
 800d286:	f001 fc73 	bl	800eb70 <ucdr_alignment>
 800d28a:	3008      	adds	r0, #8
 800d28c:	4420      	add	r0, r4
 800d28e:	bd10      	pop	{r4, pc}
 800d290:	4770      	bx	lr
 800d292:	bf00      	nop

0800d294 <_Vector3__max_serialized_size>:
 800d294:	b538      	push	{r3, r4, r5, lr}
 800d296:	2108      	movs	r1, #8
 800d298:	2000      	movs	r0, #0
 800d29a:	f001 fc69 	bl	800eb70 <ucdr_alignment>
 800d29e:	2108      	movs	r1, #8
 800d2a0:	1845      	adds	r5, r0, r1
 800d2a2:	4628      	mov	r0, r5
 800d2a4:	f001 fc64 	bl	800eb70 <ucdr_alignment>
 800d2a8:	2108      	movs	r1, #8
 800d2aa:	1844      	adds	r4, r0, r1
 800d2ac:	442c      	add	r4, r5
 800d2ae:	4620      	mov	r0, r4
 800d2b0:	f001 fc5e 	bl	800eb70 <ucdr_alignment>
 800d2b4:	3008      	adds	r0, #8
 800d2b6:	4420      	add	r0, r4
 800d2b8:	bd38      	pop	{r3, r4, r5, pc}
 800d2ba:	bf00      	nop

0800d2bc <max_serialized_size_geometry_msgs__msg__Vector3>:
 800d2bc:	b570      	push	{r4, r5, r6, lr}
 800d2be:	460c      	mov	r4, r1
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	2108      	movs	r1, #8
 800d2c4:	f104 0508 	add.w	r5, r4, #8
 800d2c8:	7003      	strb	r3, [r0, #0]
 800d2ca:	4620      	mov	r0, r4
 800d2cc:	f1c4 0408 	rsb	r4, r4, #8
 800d2d0:	f001 fc4e 	bl	800eb70 <ucdr_alignment>
 800d2d4:	1946      	adds	r6, r0, r5
 800d2d6:	2108      	movs	r1, #8
 800d2d8:	4630      	mov	r0, r6
 800d2da:	f001 fc49 	bl	800eb70 <ucdr_alignment>
 800d2de:	2108      	movs	r1, #8
 800d2e0:	1845      	adds	r5, r0, r1
 800d2e2:	4435      	add	r5, r6
 800d2e4:	4628      	mov	r0, r5
 800d2e6:	f001 fc43 	bl	800eb70 <ucdr_alignment>
 800d2ea:	4420      	add	r0, r4
 800d2ec:	4428      	add	r0, r5
 800d2ee:	bd70      	pop	{r4, r5, r6, pc}

0800d2f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800d2f0:	4800      	ldr	r0, [pc, #0]	@ (800d2f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800d2f2:	4770      	bx	lr
 800d2f4:	200001c0 	.word	0x200001c0

0800d2f8 <ucdr_serialize_bool>:
 800d2f8:	b538      	push	{r3, r4, r5, lr}
 800d2fa:	460d      	mov	r5, r1
 800d2fc:	2101      	movs	r1, #1
 800d2fe:	4604      	mov	r4, r0
 800d300:	f001 fbea 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800d304:	b148      	cbz	r0, 800d31a <ucdr_serialize_bool+0x22>
 800d306:	68a3      	ldr	r3, [r4, #8]
 800d308:	2101      	movs	r1, #1
 800d30a:	701d      	strb	r5, [r3, #0]
 800d30c:	68a2      	ldr	r2, [r4, #8]
 800d30e:	6923      	ldr	r3, [r4, #16]
 800d310:	440a      	add	r2, r1
 800d312:	7561      	strb	r1, [r4, #21]
 800d314:	440b      	add	r3, r1
 800d316:	60a2      	str	r2, [r4, #8]
 800d318:	6123      	str	r3, [r4, #16]
 800d31a:	7da0      	ldrb	r0, [r4, #22]
 800d31c:	f080 0001 	eor.w	r0, r0, #1
 800d320:	bd38      	pop	{r3, r4, r5, pc}
 800d322:	bf00      	nop

0800d324 <ucdr_deserialize_bool>:
 800d324:	b538      	push	{r3, r4, r5, lr}
 800d326:	460d      	mov	r5, r1
 800d328:	2101      	movs	r1, #1
 800d32a:	4604      	mov	r4, r0
 800d32c:	f001 fbd4 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800d330:	b160      	cbz	r0, 800d34c <ucdr_deserialize_bool+0x28>
 800d332:	68a2      	ldr	r2, [r4, #8]
 800d334:	2101      	movs	r1, #1
 800d336:	6923      	ldr	r3, [r4, #16]
 800d338:	f812 0b01 	ldrb.w	r0, [r2], #1
 800d33c:	440b      	add	r3, r1
 800d33e:	3800      	subs	r0, #0
 800d340:	bf18      	it	ne
 800d342:	2001      	movne	r0, #1
 800d344:	7028      	strb	r0, [r5, #0]
 800d346:	60a2      	str	r2, [r4, #8]
 800d348:	6123      	str	r3, [r4, #16]
 800d34a:	7561      	strb	r1, [r4, #21]
 800d34c:	7da0      	ldrb	r0, [r4, #22]
 800d34e:	f080 0001 	eor.w	r0, r0, #1
 800d352:	bd38      	pop	{r3, r4, r5, pc}

0800d354 <ucdr_serialize_uint8_t>:
 800d354:	b538      	push	{r3, r4, r5, lr}
 800d356:	460d      	mov	r5, r1
 800d358:	2101      	movs	r1, #1
 800d35a:	4604      	mov	r4, r0
 800d35c:	f001 fbbc 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800d360:	b148      	cbz	r0, 800d376 <ucdr_serialize_uint8_t+0x22>
 800d362:	68a3      	ldr	r3, [r4, #8]
 800d364:	2101      	movs	r1, #1
 800d366:	701d      	strb	r5, [r3, #0]
 800d368:	68a2      	ldr	r2, [r4, #8]
 800d36a:	6923      	ldr	r3, [r4, #16]
 800d36c:	440a      	add	r2, r1
 800d36e:	7561      	strb	r1, [r4, #21]
 800d370:	440b      	add	r3, r1
 800d372:	60a2      	str	r2, [r4, #8]
 800d374:	6123      	str	r3, [r4, #16]
 800d376:	7da0      	ldrb	r0, [r4, #22]
 800d378:	f080 0001 	eor.w	r0, r0, #1
 800d37c:	bd38      	pop	{r3, r4, r5, pc}
 800d37e:	bf00      	nop

0800d380 <ucdr_deserialize_uint8_t>:
 800d380:	b538      	push	{r3, r4, r5, lr}
 800d382:	460d      	mov	r5, r1
 800d384:	2101      	movs	r1, #1
 800d386:	4604      	mov	r4, r0
 800d388:	f001 fba6 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800d38c:	b150      	cbz	r0, 800d3a4 <ucdr_deserialize_uint8_t+0x24>
 800d38e:	68a3      	ldr	r3, [r4, #8]
 800d390:	2101      	movs	r1, #1
 800d392:	781b      	ldrb	r3, [r3, #0]
 800d394:	702b      	strb	r3, [r5, #0]
 800d396:	68a2      	ldr	r2, [r4, #8]
 800d398:	6923      	ldr	r3, [r4, #16]
 800d39a:	440a      	add	r2, r1
 800d39c:	7561      	strb	r1, [r4, #21]
 800d39e:	440b      	add	r3, r1
 800d3a0:	60a2      	str	r2, [r4, #8]
 800d3a2:	6123      	str	r3, [r4, #16]
 800d3a4:	7da0      	ldrb	r0, [r4, #22]
 800d3a6:	f080 0001 	eor.w	r0, r0, #1
 800d3aa:	bd38      	pop	{r3, r4, r5, pc}

0800d3ac <ucdr_serialize_uint16_t>:
 800d3ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3b0:	460b      	mov	r3, r1
 800d3b2:	b082      	sub	sp, #8
 800d3b4:	4604      	mov	r4, r0
 800d3b6:	2102      	movs	r1, #2
 800d3b8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d3bc:	f001 fbe0 	bl	800eb80 <ucdr_buffer_alignment>
 800d3c0:	4601      	mov	r1, r0
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	7d67      	ldrb	r7, [r4, #21]
 800d3c6:	f001 fc23 	bl	800ec10 <ucdr_advance_buffer>
 800d3ca:	2102      	movs	r1, #2
 800d3cc:	4620      	mov	r0, r4
 800d3ce:	f001 fb77 	bl	800eac0 <ucdr_check_buffer_available_for>
 800d3d2:	bb78      	cbnz	r0, 800d434 <ucdr_serialize_uint16_t+0x88>
 800d3d4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d3d8:	42ab      	cmp	r3, r5
 800d3da:	d926      	bls.n	800d42a <ucdr_serialize_uint16_t+0x7e>
 800d3dc:	1b5e      	subs	r6, r3, r5
 800d3de:	60a3      	str	r3, [r4, #8]
 800d3e0:	6923      	ldr	r3, [r4, #16]
 800d3e2:	4620      	mov	r0, r4
 800d3e4:	f1c6 0802 	rsb	r8, r6, #2
 800d3e8:	4433      	add	r3, r6
 800d3ea:	4641      	mov	r1, r8
 800d3ec:	6123      	str	r3, [r4, #16]
 800d3ee:	f001 fb73 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800d3f2:	2800      	cmp	r0, #0
 800d3f4:	d03b      	beq.n	800d46e <ucdr_serialize_uint16_t+0xc2>
 800d3f6:	7d23      	ldrb	r3, [r4, #20]
 800d3f8:	2b01      	cmp	r3, #1
 800d3fa:	d04a      	beq.n	800d492 <ucdr_serialize_uint16_t+0xe6>
 800d3fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d400:	702b      	strb	r3, [r5, #0]
 800d402:	2e00      	cmp	r6, #0
 800d404:	d040      	beq.n	800d488 <ucdr_serialize_uint16_t+0xdc>
 800d406:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d40a:	706b      	strb	r3, [r5, #1]
 800d40c:	6923      	ldr	r3, [r4, #16]
 800d40e:	2102      	movs	r1, #2
 800d410:	68a2      	ldr	r2, [r4, #8]
 800d412:	3302      	adds	r3, #2
 800d414:	7da0      	ldrb	r0, [r4, #22]
 800d416:	4442      	add	r2, r8
 800d418:	7561      	strb	r1, [r4, #21]
 800d41a:	1b9e      	subs	r6, r3, r6
 800d41c:	f080 0001 	eor.w	r0, r0, #1
 800d420:	60a2      	str	r2, [r4, #8]
 800d422:	6126      	str	r6, [r4, #16]
 800d424:	b002      	add	sp, #8
 800d426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d42a:	2102      	movs	r1, #2
 800d42c:	4620      	mov	r0, r4
 800d42e:	f001 fb53 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800d432:	b190      	cbz	r0, 800d45a <ucdr_serialize_uint16_t+0xae>
 800d434:	7d23      	ldrb	r3, [r4, #20]
 800d436:	2b01      	cmp	r3, #1
 800d438:	68a3      	ldr	r3, [r4, #8]
 800d43a:	d014      	beq.n	800d466 <ucdr_serialize_uint16_t+0xba>
 800d43c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800d440:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d444:	7019      	strb	r1, [r3, #0]
 800d446:	68a3      	ldr	r3, [r4, #8]
 800d448:	705a      	strb	r2, [r3, #1]
 800d44a:	2102      	movs	r1, #2
 800d44c:	68a2      	ldr	r2, [r4, #8]
 800d44e:	6923      	ldr	r3, [r4, #16]
 800d450:	440a      	add	r2, r1
 800d452:	7561      	strb	r1, [r4, #21]
 800d454:	440b      	add	r3, r1
 800d456:	60a2      	str	r2, [r4, #8]
 800d458:	6123      	str	r3, [r4, #16]
 800d45a:	7da0      	ldrb	r0, [r4, #22]
 800d45c:	f080 0001 	eor.w	r0, r0, #1
 800d460:	b002      	add	sp, #8
 800d462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d466:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d46a:	801a      	strh	r2, [r3, #0]
 800d46c:	e7ed      	b.n	800d44a <ucdr_serialize_uint16_t+0x9e>
 800d46e:	68a2      	ldr	r2, [r4, #8]
 800d470:	6923      	ldr	r3, [r4, #16]
 800d472:	7da0      	ldrb	r0, [r4, #22]
 800d474:	1b92      	subs	r2, r2, r6
 800d476:	1b9b      	subs	r3, r3, r6
 800d478:	7567      	strb	r7, [r4, #21]
 800d47a:	f080 0001 	eor.w	r0, r0, #1
 800d47e:	60a2      	str	r2, [r4, #8]
 800d480:	6123      	str	r3, [r4, #16]
 800d482:	b002      	add	sp, #8
 800d484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d488:	68a3      	ldr	r3, [r4, #8]
 800d48a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d48e:	701a      	strb	r2, [r3, #0]
 800d490:	e7bc      	b.n	800d40c <ucdr_serialize_uint16_t+0x60>
 800d492:	4628      	mov	r0, r5
 800d494:	f10d 0506 	add.w	r5, sp, #6
 800d498:	4632      	mov	r2, r6
 800d49a:	4629      	mov	r1, r5
 800d49c:	f00e f965 	bl	801b76a <memcpy>
 800d4a0:	4642      	mov	r2, r8
 800d4a2:	19a9      	adds	r1, r5, r6
 800d4a4:	68a0      	ldr	r0, [r4, #8]
 800d4a6:	f00e f960 	bl	801b76a <memcpy>
 800d4aa:	e7af      	b.n	800d40c <ucdr_serialize_uint16_t+0x60>

0800d4ac <ucdr_serialize_endian_uint16_t>:
 800d4ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d4b0:	4604      	mov	r4, r0
 800d4b2:	b083      	sub	sp, #12
 800d4b4:	460d      	mov	r5, r1
 800d4b6:	2102      	movs	r1, #2
 800d4b8:	f8ad 2006 	strh.w	r2, [sp, #6]
 800d4bc:	f001 fb60 	bl	800eb80 <ucdr_buffer_alignment>
 800d4c0:	4601      	mov	r1, r0
 800d4c2:	4620      	mov	r0, r4
 800d4c4:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d4c8:	f001 fba2 	bl	800ec10 <ucdr_advance_buffer>
 800d4cc:	2102      	movs	r1, #2
 800d4ce:	4620      	mov	r0, r4
 800d4d0:	f001 faf6 	bl	800eac0 <ucdr_check_buffer_available_for>
 800d4d4:	bb70      	cbnz	r0, 800d534 <ucdr_serialize_endian_uint16_t+0x88>
 800d4d6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d4da:	42be      	cmp	r6, r7
 800d4dc:	d925      	bls.n	800d52a <ucdr_serialize_endian_uint16_t+0x7e>
 800d4de:	6923      	ldr	r3, [r4, #16]
 800d4e0:	4620      	mov	r0, r4
 800d4e2:	60a6      	str	r6, [r4, #8]
 800d4e4:	1bf6      	subs	r6, r6, r7
 800d4e6:	4433      	add	r3, r6
 800d4e8:	f1c6 0902 	rsb	r9, r6, #2
 800d4ec:	6123      	str	r3, [r4, #16]
 800d4ee:	4649      	mov	r1, r9
 800d4f0:	f001 faf2 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800d4f4:	2800      	cmp	r0, #0
 800d4f6:	d039      	beq.n	800d56c <ucdr_serialize_endian_uint16_t+0xc0>
 800d4f8:	2d01      	cmp	r5, #1
 800d4fa:	d04a      	beq.n	800d592 <ucdr_serialize_endian_uint16_t+0xe6>
 800d4fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d500:	703b      	strb	r3, [r7, #0]
 800d502:	2e00      	cmp	r6, #0
 800d504:	d040      	beq.n	800d588 <ucdr_serialize_endian_uint16_t+0xdc>
 800d506:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d50a:	707b      	strb	r3, [r7, #1]
 800d50c:	6923      	ldr	r3, [r4, #16]
 800d50e:	2102      	movs	r1, #2
 800d510:	68a2      	ldr	r2, [r4, #8]
 800d512:	7da0      	ldrb	r0, [r4, #22]
 800d514:	3302      	adds	r3, #2
 800d516:	444a      	add	r2, r9
 800d518:	7561      	strb	r1, [r4, #21]
 800d51a:	1b9b      	subs	r3, r3, r6
 800d51c:	f080 0001 	eor.w	r0, r0, #1
 800d520:	60a2      	str	r2, [r4, #8]
 800d522:	6123      	str	r3, [r4, #16]
 800d524:	b003      	add	sp, #12
 800d526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d52a:	2102      	movs	r1, #2
 800d52c:	4620      	mov	r0, r4
 800d52e:	f001 fad3 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800d532:	b188      	cbz	r0, 800d558 <ucdr_serialize_endian_uint16_t+0xac>
 800d534:	2d01      	cmp	r5, #1
 800d536:	68a3      	ldr	r3, [r4, #8]
 800d538:	d014      	beq.n	800d564 <ucdr_serialize_endian_uint16_t+0xb8>
 800d53a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800d53e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d542:	7019      	strb	r1, [r3, #0]
 800d544:	68a3      	ldr	r3, [r4, #8]
 800d546:	705a      	strb	r2, [r3, #1]
 800d548:	2102      	movs	r1, #2
 800d54a:	68a2      	ldr	r2, [r4, #8]
 800d54c:	6923      	ldr	r3, [r4, #16]
 800d54e:	440a      	add	r2, r1
 800d550:	7561      	strb	r1, [r4, #21]
 800d552:	440b      	add	r3, r1
 800d554:	60a2      	str	r2, [r4, #8]
 800d556:	6123      	str	r3, [r4, #16]
 800d558:	7da0      	ldrb	r0, [r4, #22]
 800d55a:	f080 0001 	eor.w	r0, r0, #1
 800d55e:	b003      	add	sp, #12
 800d560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d564:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d568:	801a      	strh	r2, [r3, #0]
 800d56a:	e7ed      	b.n	800d548 <ucdr_serialize_endian_uint16_t+0x9c>
 800d56c:	68a2      	ldr	r2, [r4, #8]
 800d56e:	6923      	ldr	r3, [r4, #16]
 800d570:	7da0      	ldrb	r0, [r4, #22]
 800d572:	1b92      	subs	r2, r2, r6
 800d574:	1b9b      	subs	r3, r3, r6
 800d576:	f884 8015 	strb.w	r8, [r4, #21]
 800d57a:	f080 0001 	eor.w	r0, r0, #1
 800d57e:	60a2      	str	r2, [r4, #8]
 800d580:	6123      	str	r3, [r4, #16]
 800d582:	b003      	add	sp, #12
 800d584:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d588:	68a3      	ldr	r3, [r4, #8]
 800d58a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d58e:	701a      	strb	r2, [r3, #0]
 800d590:	e7bc      	b.n	800d50c <ucdr_serialize_endian_uint16_t+0x60>
 800d592:	f10d 0506 	add.w	r5, sp, #6
 800d596:	4632      	mov	r2, r6
 800d598:	4638      	mov	r0, r7
 800d59a:	4629      	mov	r1, r5
 800d59c:	f00e f8e5 	bl	801b76a <memcpy>
 800d5a0:	464a      	mov	r2, r9
 800d5a2:	19a9      	adds	r1, r5, r6
 800d5a4:	68a0      	ldr	r0, [r4, #8]
 800d5a6:	f00e f8e0 	bl	801b76a <memcpy>
 800d5aa:	e7af      	b.n	800d50c <ucdr_serialize_endian_uint16_t+0x60>

0800d5ac <ucdr_deserialize_uint16_t>:
 800d5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5b0:	4604      	mov	r4, r0
 800d5b2:	460d      	mov	r5, r1
 800d5b4:	2102      	movs	r1, #2
 800d5b6:	f001 fae3 	bl	800eb80 <ucdr_buffer_alignment>
 800d5ba:	4601      	mov	r1, r0
 800d5bc:	4620      	mov	r0, r4
 800d5be:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d5c2:	f001 fb25 	bl	800ec10 <ucdr_advance_buffer>
 800d5c6:	2102      	movs	r1, #2
 800d5c8:	4620      	mov	r0, r4
 800d5ca:	f001 fa79 	bl	800eac0 <ucdr_check_buffer_available_for>
 800d5ce:	bb60      	cbnz	r0, 800d62a <ucdr_deserialize_uint16_t+0x7e>
 800d5d0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d5d4:	42be      	cmp	r6, r7
 800d5d6:	d923      	bls.n	800d620 <ucdr_deserialize_uint16_t+0x74>
 800d5d8:	6923      	ldr	r3, [r4, #16]
 800d5da:	4620      	mov	r0, r4
 800d5dc:	60a6      	str	r6, [r4, #8]
 800d5de:	1bf6      	subs	r6, r6, r7
 800d5e0:	4433      	add	r3, r6
 800d5e2:	f1c6 0902 	rsb	r9, r6, #2
 800d5e6:	6123      	str	r3, [r4, #16]
 800d5e8:	4649      	mov	r1, r9
 800d5ea:	f001 fa75 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800d5ee:	2800      	cmp	r0, #0
 800d5f0:	d034      	beq.n	800d65c <ucdr_deserialize_uint16_t+0xb0>
 800d5f2:	7d23      	ldrb	r3, [r4, #20]
 800d5f4:	2b01      	cmp	r3, #1
 800d5f6:	d042      	beq.n	800d67e <ucdr_deserialize_uint16_t+0xd2>
 800d5f8:	787b      	ldrb	r3, [r7, #1]
 800d5fa:	702b      	strb	r3, [r5, #0]
 800d5fc:	2e00      	cmp	r6, #0
 800d5fe:	d03a      	beq.n	800d676 <ucdr_deserialize_uint16_t+0xca>
 800d600:	783b      	ldrb	r3, [r7, #0]
 800d602:	706b      	strb	r3, [r5, #1]
 800d604:	6923      	ldr	r3, [r4, #16]
 800d606:	2102      	movs	r1, #2
 800d608:	68a2      	ldr	r2, [r4, #8]
 800d60a:	3302      	adds	r3, #2
 800d60c:	7da0      	ldrb	r0, [r4, #22]
 800d60e:	444a      	add	r2, r9
 800d610:	7561      	strb	r1, [r4, #21]
 800d612:	1b9b      	subs	r3, r3, r6
 800d614:	f080 0001 	eor.w	r0, r0, #1
 800d618:	60a2      	str	r2, [r4, #8]
 800d61a:	6123      	str	r3, [r4, #16]
 800d61c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d620:	2102      	movs	r1, #2
 800d622:	4620      	mov	r0, r4
 800d624:	f001 fa58 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800d628:	b180      	cbz	r0, 800d64c <ucdr_deserialize_uint16_t+0xa0>
 800d62a:	7d23      	ldrb	r3, [r4, #20]
 800d62c:	2b01      	cmp	r3, #1
 800d62e:	68a3      	ldr	r3, [r4, #8]
 800d630:	d011      	beq.n	800d656 <ucdr_deserialize_uint16_t+0xaa>
 800d632:	785b      	ldrb	r3, [r3, #1]
 800d634:	702b      	strb	r3, [r5, #0]
 800d636:	68a3      	ldr	r3, [r4, #8]
 800d638:	781b      	ldrb	r3, [r3, #0]
 800d63a:	706b      	strb	r3, [r5, #1]
 800d63c:	2102      	movs	r1, #2
 800d63e:	68a2      	ldr	r2, [r4, #8]
 800d640:	6923      	ldr	r3, [r4, #16]
 800d642:	440a      	add	r2, r1
 800d644:	7561      	strb	r1, [r4, #21]
 800d646:	440b      	add	r3, r1
 800d648:	60a2      	str	r2, [r4, #8]
 800d64a:	6123      	str	r3, [r4, #16]
 800d64c:	7da0      	ldrb	r0, [r4, #22]
 800d64e:	f080 0001 	eor.w	r0, r0, #1
 800d652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d656:	881b      	ldrh	r3, [r3, #0]
 800d658:	802b      	strh	r3, [r5, #0]
 800d65a:	e7ef      	b.n	800d63c <ucdr_deserialize_uint16_t+0x90>
 800d65c:	68a2      	ldr	r2, [r4, #8]
 800d65e:	6923      	ldr	r3, [r4, #16]
 800d660:	1b92      	subs	r2, r2, r6
 800d662:	7da0      	ldrb	r0, [r4, #22]
 800d664:	1b9b      	subs	r3, r3, r6
 800d666:	f884 8015 	strb.w	r8, [r4, #21]
 800d66a:	f080 0001 	eor.w	r0, r0, #1
 800d66e:	60a2      	str	r2, [r4, #8]
 800d670:	6123      	str	r3, [r4, #16]
 800d672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d676:	68a3      	ldr	r3, [r4, #8]
 800d678:	781b      	ldrb	r3, [r3, #0]
 800d67a:	706b      	strb	r3, [r5, #1]
 800d67c:	e7c2      	b.n	800d604 <ucdr_deserialize_uint16_t+0x58>
 800d67e:	4639      	mov	r1, r7
 800d680:	4632      	mov	r2, r6
 800d682:	4628      	mov	r0, r5
 800d684:	f00e f871 	bl	801b76a <memcpy>
 800d688:	464a      	mov	r2, r9
 800d68a:	19a8      	adds	r0, r5, r6
 800d68c:	68a1      	ldr	r1, [r4, #8]
 800d68e:	f00e f86c 	bl	801b76a <memcpy>
 800d692:	e7b7      	b.n	800d604 <ucdr_deserialize_uint16_t+0x58>

0800d694 <ucdr_deserialize_endian_uint16_t>:
 800d694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d698:	4604      	mov	r4, r0
 800d69a:	460e      	mov	r6, r1
 800d69c:	2102      	movs	r1, #2
 800d69e:	4615      	mov	r5, r2
 800d6a0:	f001 fa6e 	bl	800eb80 <ucdr_buffer_alignment>
 800d6a4:	4601      	mov	r1, r0
 800d6a6:	4620      	mov	r0, r4
 800d6a8:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d6ac:	f001 fab0 	bl	800ec10 <ucdr_advance_buffer>
 800d6b0:	2102      	movs	r1, #2
 800d6b2:	4620      	mov	r0, r4
 800d6b4:	f001 fa04 	bl	800eac0 <ucdr_check_buffer_available_for>
 800d6b8:	bb70      	cbnz	r0, 800d718 <ucdr_deserialize_endian_uint16_t+0x84>
 800d6ba:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 800d6be:	454f      	cmp	r7, r9
 800d6c0:	d925      	bls.n	800d70e <ucdr_deserialize_endian_uint16_t+0x7a>
 800d6c2:	6923      	ldr	r3, [r4, #16]
 800d6c4:	4620      	mov	r0, r4
 800d6c6:	60a7      	str	r7, [r4, #8]
 800d6c8:	eba7 0709 	sub.w	r7, r7, r9
 800d6cc:	443b      	add	r3, r7
 800d6ce:	f1c7 0a02 	rsb	sl, r7, #2
 800d6d2:	6123      	str	r3, [r4, #16]
 800d6d4:	4651      	mov	r1, sl
 800d6d6:	f001 f9ff 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800d6da:	2800      	cmp	r0, #0
 800d6dc:	d034      	beq.n	800d748 <ucdr_deserialize_endian_uint16_t+0xb4>
 800d6de:	2e01      	cmp	r6, #1
 800d6e0:	d043      	beq.n	800d76a <ucdr_deserialize_endian_uint16_t+0xd6>
 800d6e2:	f899 3001 	ldrb.w	r3, [r9, #1]
 800d6e6:	702b      	strb	r3, [r5, #0]
 800d6e8:	2f00      	cmp	r7, #0
 800d6ea:	d03a      	beq.n	800d762 <ucdr_deserialize_endian_uint16_t+0xce>
 800d6ec:	f899 3000 	ldrb.w	r3, [r9]
 800d6f0:	706b      	strb	r3, [r5, #1]
 800d6f2:	6923      	ldr	r3, [r4, #16]
 800d6f4:	2102      	movs	r1, #2
 800d6f6:	68a2      	ldr	r2, [r4, #8]
 800d6f8:	3302      	adds	r3, #2
 800d6fa:	7da0      	ldrb	r0, [r4, #22]
 800d6fc:	4452      	add	r2, sl
 800d6fe:	7561      	strb	r1, [r4, #21]
 800d700:	1bdb      	subs	r3, r3, r7
 800d702:	f080 0001 	eor.w	r0, r0, #1
 800d706:	60a2      	str	r2, [r4, #8]
 800d708:	6123      	str	r3, [r4, #16]
 800d70a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d70e:	2102      	movs	r1, #2
 800d710:	4620      	mov	r0, r4
 800d712:	f001 f9e1 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800d716:	b178      	cbz	r0, 800d738 <ucdr_deserialize_endian_uint16_t+0xa4>
 800d718:	2e01      	cmp	r6, #1
 800d71a:	68a3      	ldr	r3, [r4, #8]
 800d71c:	d011      	beq.n	800d742 <ucdr_deserialize_endian_uint16_t+0xae>
 800d71e:	785b      	ldrb	r3, [r3, #1]
 800d720:	702b      	strb	r3, [r5, #0]
 800d722:	68a3      	ldr	r3, [r4, #8]
 800d724:	781b      	ldrb	r3, [r3, #0]
 800d726:	706b      	strb	r3, [r5, #1]
 800d728:	2102      	movs	r1, #2
 800d72a:	68a2      	ldr	r2, [r4, #8]
 800d72c:	6923      	ldr	r3, [r4, #16]
 800d72e:	440a      	add	r2, r1
 800d730:	7561      	strb	r1, [r4, #21]
 800d732:	440b      	add	r3, r1
 800d734:	60a2      	str	r2, [r4, #8]
 800d736:	6123      	str	r3, [r4, #16]
 800d738:	7da0      	ldrb	r0, [r4, #22]
 800d73a:	f080 0001 	eor.w	r0, r0, #1
 800d73e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d742:	881b      	ldrh	r3, [r3, #0]
 800d744:	802b      	strh	r3, [r5, #0]
 800d746:	e7ef      	b.n	800d728 <ucdr_deserialize_endian_uint16_t+0x94>
 800d748:	68a2      	ldr	r2, [r4, #8]
 800d74a:	6923      	ldr	r3, [r4, #16]
 800d74c:	1bd2      	subs	r2, r2, r7
 800d74e:	7da0      	ldrb	r0, [r4, #22]
 800d750:	1bdb      	subs	r3, r3, r7
 800d752:	f884 8015 	strb.w	r8, [r4, #21]
 800d756:	f080 0001 	eor.w	r0, r0, #1
 800d75a:	60a2      	str	r2, [r4, #8]
 800d75c:	6123      	str	r3, [r4, #16]
 800d75e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d762:	68a3      	ldr	r3, [r4, #8]
 800d764:	781b      	ldrb	r3, [r3, #0]
 800d766:	706b      	strb	r3, [r5, #1]
 800d768:	e7c3      	b.n	800d6f2 <ucdr_deserialize_endian_uint16_t+0x5e>
 800d76a:	4649      	mov	r1, r9
 800d76c:	463a      	mov	r2, r7
 800d76e:	4628      	mov	r0, r5
 800d770:	f00d fffb 	bl	801b76a <memcpy>
 800d774:	4652      	mov	r2, sl
 800d776:	19e8      	adds	r0, r5, r7
 800d778:	68a1      	ldr	r1, [r4, #8]
 800d77a:	f00d fff6 	bl	801b76a <memcpy>
 800d77e:	e7b8      	b.n	800d6f2 <ucdr_deserialize_endian_uint16_t+0x5e>

0800d780 <ucdr_serialize_uint32_t>:
 800d780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d784:	b082      	sub	sp, #8
 800d786:	4604      	mov	r4, r0
 800d788:	9101      	str	r1, [sp, #4]
 800d78a:	2104      	movs	r1, #4
 800d78c:	f001 f9f8 	bl	800eb80 <ucdr_buffer_alignment>
 800d790:	4601      	mov	r1, r0
 800d792:	4620      	mov	r0, r4
 800d794:	7d67      	ldrb	r7, [r4, #21]
 800d796:	f001 fa3b 	bl	800ec10 <ucdr_advance_buffer>
 800d79a:	2104      	movs	r1, #4
 800d79c:	4620      	mov	r0, r4
 800d79e:	f001 f98f 	bl	800eac0 <ucdr_check_buffer_available_for>
 800d7a2:	2800      	cmp	r0, #0
 800d7a4:	d139      	bne.n	800d81a <ucdr_serialize_uint32_t+0x9a>
 800d7a6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d7aa:	42ab      	cmp	r3, r5
 800d7ac:	d930      	bls.n	800d810 <ucdr_serialize_uint32_t+0x90>
 800d7ae:	1b5e      	subs	r6, r3, r5
 800d7b0:	60a3      	str	r3, [r4, #8]
 800d7b2:	6923      	ldr	r3, [r4, #16]
 800d7b4:	4620      	mov	r0, r4
 800d7b6:	f1c6 0804 	rsb	r8, r6, #4
 800d7ba:	4433      	add	r3, r6
 800d7bc:	4641      	mov	r1, r8
 800d7be:	6123      	str	r3, [r4, #16]
 800d7c0:	f001 f98a 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800d7c4:	2800      	cmp	r0, #0
 800d7c6:	d04c      	beq.n	800d862 <ucdr_serialize_uint32_t+0xe2>
 800d7c8:	7d23      	ldrb	r3, [r4, #20]
 800d7ca:	2b01      	cmp	r3, #1
 800d7cc:	d063      	beq.n	800d896 <ucdr_serialize_uint32_t+0x116>
 800d7ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d7d2:	702b      	strb	r3, [r5, #0]
 800d7d4:	2e00      	cmp	r6, #0
 800d7d6:	d051      	beq.n	800d87c <ucdr_serialize_uint32_t+0xfc>
 800d7d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d7dc:	2e01      	cmp	r6, #1
 800d7de:	706b      	strb	r3, [r5, #1]
 800d7e0:	d050      	beq.n	800d884 <ucdr_serialize_uint32_t+0x104>
 800d7e2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d7e6:	2e02      	cmp	r6, #2
 800d7e8:	70ab      	strb	r3, [r5, #2]
 800d7ea:	d04f      	beq.n	800d88c <ucdr_serialize_uint32_t+0x10c>
 800d7ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d7f0:	70eb      	strb	r3, [r5, #3]
 800d7f2:	6923      	ldr	r3, [r4, #16]
 800d7f4:	2104      	movs	r1, #4
 800d7f6:	68a2      	ldr	r2, [r4, #8]
 800d7f8:	3304      	adds	r3, #4
 800d7fa:	7da0      	ldrb	r0, [r4, #22]
 800d7fc:	4442      	add	r2, r8
 800d7fe:	7561      	strb	r1, [r4, #21]
 800d800:	1b9e      	subs	r6, r3, r6
 800d802:	f080 0001 	eor.w	r0, r0, #1
 800d806:	60a2      	str	r2, [r4, #8]
 800d808:	6126      	str	r6, [r4, #16]
 800d80a:	b002      	add	sp, #8
 800d80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d810:	2104      	movs	r1, #4
 800d812:	4620      	mov	r0, r4
 800d814:	f001 f960 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800d818:	b1d0      	cbz	r0, 800d850 <ucdr_serialize_uint32_t+0xd0>
 800d81a:	7d23      	ldrb	r3, [r4, #20]
 800d81c:	2b01      	cmp	r3, #1
 800d81e:	68a3      	ldr	r3, [r4, #8]
 800d820:	d01c      	beq.n	800d85c <ucdr_serialize_uint32_t+0xdc>
 800d822:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800d826:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d82a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800d82e:	7018      	strb	r0, [r3, #0]
 800d830:	68a3      	ldr	r3, [r4, #8]
 800d832:	705a      	strb	r2, [r3, #1]
 800d834:	68a3      	ldr	r3, [r4, #8]
 800d836:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d83a:	7099      	strb	r1, [r3, #2]
 800d83c:	68a3      	ldr	r3, [r4, #8]
 800d83e:	70da      	strb	r2, [r3, #3]
 800d840:	2104      	movs	r1, #4
 800d842:	68a2      	ldr	r2, [r4, #8]
 800d844:	6923      	ldr	r3, [r4, #16]
 800d846:	440a      	add	r2, r1
 800d848:	7561      	strb	r1, [r4, #21]
 800d84a:	440b      	add	r3, r1
 800d84c:	60a2      	str	r2, [r4, #8]
 800d84e:	6123      	str	r3, [r4, #16]
 800d850:	7da0      	ldrb	r0, [r4, #22]
 800d852:	f080 0001 	eor.w	r0, r0, #1
 800d856:	b002      	add	sp, #8
 800d858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d85c:	9a01      	ldr	r2, [sp, #4]
 800d85e:	601a      	str	r2, [r3, #0]
 800d860:	e7ee      	b.n	800d840 <ucdr_serialize_uint32_t+0xc0>
 800d862:	68a2      	ldr	r2, [r4, #8]
 800d864:	6923      	ldr	r3, [r4, #16]
 800d866:	7da0      	ldrb	r0, [r4, #22]
 800d868:	1b92      	subs	r2, r2, r6
 800d86a:	1b9b      	subs	r3, r3, r6
 800d86c:	7567      	strb	r7, [r4, #21]
 800d86e:	f080 0001 	eor.w	r0, r0, #1
 800d872:	60a2      	str	r2, [r4, #8]
 800d874:	6123      	str	r3, [r4, #16]
 800d876:	b002      	add	sp, #8
 800d878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d87c:	68a3      	ldr	r3, [r4, #8]
 800d87e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d882:	701a      	strb	r2, [r3, #0]
 800d884:	68a3      	ldr	r3, [r4, #8]
 800d886:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d88a:	701a      	strb	r2, [r3, #0]
 800d88c:	68a3      	ldr	r3, [r4, #8]
 800d88e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d892:	701a      	strb	r2, [r3, #0]
 800d894:	e7ad      	b.n	800d7f2 <ucdr_serialize_uint32_t+0x72>
 800d896:	4628      	mov	r0, r5
 800d898:	ad01      	add	r5, sp, #4
 800d89a:	4632      	mov	r2, r6
 800d89c:	4629      	mov	r1, r5
 800d89e:	f00d ff64 	bl	801b76a <memcpy>
 800d8a2:	4642      	mov	r2, r8
 800d8a4:	19a9      	adds	r1, r5, r6
 800d8a6:	68a0      	ldr	r0, [r4, #8]
 800d8a8:	f00d ff5f 	bl	801b76a <memcpy>
 800d8ac:	e7a1      	b.n	800d7f2 <ucdr_serialize_uint32_t+0x72>
 800d8ae:	bf00      	nop

0800d8b0 <ucdr_serialize_endian_uint32_t>:
 800d8b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d8b4:	4604      	mov	r4, r0
 800d8b6:	b083      	sub	sp, #12
 800d8b8:	460d      	mov	r5, r1
 800d8ba:	2104      	movs	r1, #4
 800d8bc:	9201      	str	r2, [sp, #4]
 800d8be:	f001 f95f 	bl	800eb80 <ucdr_buffer_alignment>
 800d8c2:	4601      	mov	r1, r0
 800d8c4:	4620      	mov	r0, r4
 800d8c6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d8ca:	f001 f9a1 	bl	800ec10 <ucdr_advance_buffer>
 800d8ce:	2104      	movs	r1, #4
 800d8d0:	4620      	mov	r0, r4
 800d8d2:	f001 f8f5 	bl	800eac0 <ucdr_check_buffer_available_for>
 800d8d6:	2800      	cmp	r0, #0
 800d8d8:	d138      	bne.n	800d94c <ucdr_serialize_endian_uint32_t+0x9c>
 800d8da:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d8de:	42b7      	cmp	r7, r6
 800d8e0:	d92f      	bls.n	800d942 <ucdr_serialize_endian_uint32_t+0x92>
 800d8e2:	6923      	ldr	r3, [r4, #16]
 800d8e4:	4620      	mov	r0, r4
 800d8e6:	60a7      	str	r7, [r4, #8]
 800d8e8:	1bbf      	subs	r7, r7, r6
 800d8ea:	443b      	add	r3, r7
 800d8ec:	f1c7 0904 	rsb	r9, r7, #4
 800d8f0:	6123      	str	r3, [r4, #16]
 800d8f2:	4649      	mov	r1, r9
 800d8f4:	f001 f8f0 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800d8f8:	2800      	cmp	r0, #0
 800d8fa:	d04a      	beq.n	800d992 <ucdr_serialize_endian_uint32_t+0xe2>
 800d8fc:	2d01      	cmp	r5, #1
 800d8fe:	d063      	beq.n	800d9c8 <ucdr_serialize_endian_uint32_t+0x118>
 800d900:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d904:	7033      	strb	r3, [r6, #0]
 800d906:	2f00      	cmp	r7, #0
 800d908:	d051      	beq.n	800d9ae <ucdr_serialize_endian_uint32_t+0xfe>
 800d90a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d90e:	2f01      	cmp	r7, #1
 800d910:	7073      	strb	r3, [r6, #1]
 800d912:	d050      	beq.n	800d9b6 <ucdr_serialize_endian_uint32_t+0x106>
 800d914:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d918:	2f02      	cmp	r7, #2
 800d91a:	70b3      	strb	r3, [r6, #2]
 800d91c:	d04f      	beq.n	800d9be <ucdr_serialize_endian_uint32_t+0x10e>
 800d91e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d922:	70f3      	strb	r3, [r6, #3]
 800d924:	6923      	ldr	r3, [r4, #16]
 800d926:	2104      	movs	r1, #4
 800d928:	68a2      	ldr	r2, [r4, #8]
 800d92a:	7da0      	ldrb	r0, [r4, #22]
 800d92c:	3304      	adds	r3, #4
 800d92e:	444a      	add	r2, r9
 800d930:	7561      	strb	r1, [r4, #21]
 800d932:	1bdb      	subs	r3, r3, r7
 800d934:	f080 0001 	eor.w	r0, r0, #1
 800d938:	60a2      	str	r2, [r4, #8]
 800d93a:	6123      	str	r3, [r4, #16]
 800d93c:	b003      	add	sp, #12
 800d93e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d942:	2104      	movs	r1, #4
 800d944:	4620      	mov	r0, r4
 800d946:	f001 f8c7 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800d94a:	b1c8      	cbz	r0, 800d980 <ucdr_serialize_endian_uint32_t+0xd0>
 800d94c:	2d01      	cmp	r5, #1
 800d94e:	68a3      	ldr	r3, [r4, #8]
 800d950:	d01c      	beq.n	800d98c <ucdr_serialize_endian_uint32_t+0xdc>
 800d952:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800d956:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d95a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800d95e:	7018      	strb	r0, [r3, #0]
 800d960:	68a3      	ldr	r3, [r4, #8]
 800d962:	705a      	strb	r2, [r3, #1]
 800d964:	68a3      	ldr	r3, [r4, #8]
 800d966:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d96a:	7099      	strb	r1, [r3, #2]
 800d96c:	68a3      	ldr	r3, [r4, #8]
 800d96e:	70da      	strb	r2, [r3, #3]
 800d970:	2104      	movs	r1, #4
 800d972:	68a2      	ldr	r2, [r4, #8]
 800d974:	6923      	ldr	r3, [r4, #16]
 800d976:	440a      	add	r2, r1
 800d978:	7561      	strb	r1, [r4, #21]
 800d97a:	440b      	add	r3, r1
 800d97c:	60a2      	str	r2, [r4, #8]
 800d97e:	6123      	str	r3, [r4, #16]
 800d980:	7da0      	ldrb	r0, [r4, #22]
 800d982:	f080 0001 	eor.w	r0, r0, #1
 800d986:	b003      	add	sp, #12
 800d988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d98c:	9a01      	ldr	r2, [sp, #4]
 800d98e:	601a      	str	r2, [r3, #0]
 800d990:	e7ee      	b.n	800d970 <ucdr_serialize_endian_uint32_t+0xc0>
 800d992:	68a2      	ldr	r2, [r4, #8]
 800d994:	6923      	ldr	r3, [r4, #16]
 800d996:	7da0      	ldrb	r0, [r4, #22]
 800d998:	1bd2      	subs	r2, r2, r7
 800d99a:	1bdb      	subs	r3, r3, r7
 800d99c:	f884 8015 	strb.w	r8, [r4, #21]
 800d9a0:	f080 0001 	eor.w	r0, r0, #1
 800d9a4:	60a2      	str	r2, [r4, #8]
 800d9a6:	6123      	str	r3, [r4, #16]
 800d9a8:	b003      	add	sp, #12
 800d9aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9ae:	68a3      	ldr	r3, [r4, #8]
 800d9b0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d9b4:	701a      	strb	r2, [r3, #0]
 800d9b6:	68a3      	ldr	r3, [r4, #8]
 800d9b8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d9bc:	701a      	strb	r2, [r3, #0]
 800d9be:	68a3      	ldr	r3, [r4, #8]
 800d9c0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d9c4:	701a      	strb	r2, [r3, #0]
 800d9c6:	e7ad      	b.n	800d924 <ucdr_serialize_endian_uint32_t+0x74>
 800d9c8:	ad01      	add	r5, sp, #4
 800d9ca:	463a      	mov	r2, r7
 800d9cc:	4630      	mov	r0, r6
 800d9ce:	4629      	mov	r1, r5
 800d9d0:	f00d fecb 	bl	801b76a <memcpy>
 800d9d4:	464a      	mov	r2, r9
 800d9d6:	19e9      	adds	r1, r5, r7
 800d9d8:	68a0      	ldr	r0, [r4, #8]
 800d9da:	f00d fec6 	bl	801b76a <memcpy>
 800d9de:	e7a1      	b.n	800d924 <ucdr_serialize_endian_uint32_t+0x74>

0800d9e0 <ucdr_deserialize_uint32_t>:
 800d9e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9e4:	4604      	mov	r4, r0
 800d9e6:	460d      	mov	r5, r1
 800d9e8:	2104      	movs	r1, #4
 800d9ea:	f001 f8c9 	bl	800eb80 <ucdr_buffer_alignment>
 800d9ee:	4601      	mov	r1, r0
 800d9f0:	4620      	mov	r0, r4
 800d9f2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d9f6:	f001 f90b 	bl	800ec10 <ucdr_advance_buffer>
 800d9fa:	2104      	movs	r1, #4
 800d9fc:	4620      	mov	r0, r4
 800d9fe:	f001 f85f 	bl	800eac0 <ucdr_check_buffer_available_for>
 800da02:	2800      	cmp	r0, #0
 800da04:	d138      	bne.n	800da78 <ucdr_deserialize_uint32_t+0x98>
 800da06:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800da0a:	42b7      	cmp	r7, r6
 800da0c:	d92f      	bls.n	800da6e <ucdr_deserialize_uint32_t+0x8e>
 800da0e:	6923      	ldr	r3, [r4, #16]
 800da10:	4620      	mov	r0, r4
 800da12:	60a7      	str	r7, [r4, #8]
 800da14:	1bbf      	subs	r7, r7, r6
 800da16:	443b      	add	r3, r7
 800da18:	f1c7 0904 	rsb	r9, r7, #4
 800da1c:	6123      	str	r3, [r4, #16]
 800da1e:	4649      	mov	r1, r9
 800da20:	f001 f85a 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800da24:	2800      	cmp	r0, #0
 800da26:	d046      	beq.n	800dab6 <ucdr_deserialize_uint32_t+0xd6>
 800da28:	7d23      	ldrb	r3, [r4, #20]
 800da2a:	2b01      	cmp	r3, #1
 800da2c:	d05c      	beq.n	800dae8 <ucdr_deserialize_uint32_t+0x108>
 800da2e:	78f3      	ldrb	r3, [r6, #3]
 800da30:	702b      	strb	r3, [r5, #0]
 800da32:	2f00      	cmp	r7, #0
 800da34:	d04c      	beq.n	800dad0 <ucdr_deserialize_uint32_t+0xf0>
 800da36:	78b3      	ldrb	r3, [r6, #2]
 800da38:	2f01      	cmp	r7, #1
 800da3a:	706b      	strb	r3, [r5, #1]
 800da3c:	f105 0302 	add.w	r3, r5, #2
 800da40:	d04a      	beq.n	800dad8 <ucdr_deserialize_uint32_t+0xf8>
 800da42:	7873      	ldrb	r3, [r6, #1]
 800da44:	2f02      	cmp	r7, #2
 800da46:	70ab      	strb	r3, [r5, #2]
 800da48:	f105 0303 	add.w	r3, r5, #3
 800da4c:	d048      	beq.n	800dae0 <ucdr_deserialize_uint32_t+0x100>
 800da4e:	7833      	ldrb	r3, [r6, #0]
 800da50:	70eb      	strb	r3, [r5, #3]
 800da52:	6923      	ldr	r3, [r4, #16]
 800da54:	2104      	movs	r1, #4
 800da56:	68a2      	ldr	r2, [r4, #8]
 800da58:	3304      	adds	r3, #4
 800da5a:	7da0      	ldrb	r0, [r4, #22]
 800da5c:	444a      	add	r2, r9
 800da5e:	7561      	strb	r1, [r4, #21]
 800da60:	1bdb      	subs	r3, r3, r7
 800da62:	f080 0001 	eor.w	r0, r0, #1
 800da66:	60a2      	str	r2, [r4, #8]
 800da68:	6123      	str	r3, [r4, #16]
 800da6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da6e:	2104      	movs	r1, #4
 800da70:	4620      	mov	r0, r4
 800da72:	f001 f831 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800da76:	b1b0      	cbz	r0, 800daa6 <ucdr_deserialize_uint32_t+0xc6>
 800da78:	7d23      	ldrb	r3, [r4, #20]
 800da7a:	2b01      	cmp	r3, #1
 800da7c:	68a3      	ldr	r3, [r4, #8]
 800da7e:	d017      	beq.n	800dab0 <ucdr_deserialize_uint32_t+0xd0>
 800da80:	78db      	ldrb	r3, [r3, #3]
 800da82:	702b      	strb	r3, [r5, #0]
 800da84:	68a3      	ldr	r3, [r4, #8]
 800da86:	789b      	ldrb	r3, [r3, #2]
 800da88:	706b      	strb	r3, [r5, #1]
 800da8a:	68a3      	ldr	r3, [r4, #8]
 800da8c:	785b      	ldrb	r3, [r3, #1]
 800da8e:	70ab      	strb	r3, [r5, #2]
 800da90:	68a3      	ldr	r3, [r4, #8]
 800da92:	781b      	ldrb	r3, [r3, #0]
 800da94:	70eb      	strb	r3, [r5, #3]
 800da96:	2104      	movs	r1, #4
 800da98:	68a2      	ldr	r2, [r4, #8]
 800da9a:	6923      	ldr	r3, [r4, #16]
 800da9c:	440a      	add	r2, r1
 800da9e:	7561      	strb	r1, [r4, #21]
 800daa0:	440b      	add	r3, r1
 800daa2:	60a2      	str	r2, [r4, #8]
 800daa4:	6123      	str	r3, [r4, #16]
 800daa6:	7da0      	ldrb	r0, [r4, #22]
 800daa8:	f080 0001 	eor.w	r0, r0, #1
 800daac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	602b      	str	r3, [r5, #0]
 800dab4:	e7ef      	b.n	800da96 <ucdr_deserialize_uint32_t+0xb6>
 800dab6:	68a2      	ldr	r2, [r4, #8]
 800dab8:	6923      	ldr	r3, [r4, #16]
 800daba:	1bd2      	subs	r2, r2, r7
 800dabc:	7da0      	ldrb	r0, [r4, #22]
 800dabe:	1bdb      	subs	r3, r3, r7
 800dac0:	f884 8015 	strb.w	r8, [r4, #21]
 800dac4:	f080 0001 	eor.w	r0, r0, #1
 800dac8:	60a2      	str	r2, [r4, #8]
 800daca:	6123      	str	r3, [r4, #16]
 800dacc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dad0:	68a3      	ldr	r3, [r4, #8]
 800dad2:	789b      	ldrb	r3, [r3, #2]
 800dad4:	706b      	strb	r3, [r5, #1]
 800dad6:	1cab      	adds	r3, r5, #2
 800dad8:	68a2      	ldr	r2, [r4, #8]
 800dada:	7852      	ldrb	r2, [r2, #1]
 800dadc:	f803 2b01 	strb.w	r2, [r3], #1
 800dae0:	68a2      	ldr	r2, [r4, #8]
 800dae2:	7812      	ldrb	r2, [r2, #0]
 800dae4:	701a      	strb	r2, [r3, #0]
 800dae6:	e7b4      	b.n	800da52 <ucdr_deserialize_uint32_t+0x72>
 800dae8:	4631      	mov	r1, r6
 800daea:	463a      	mov	r2, r7
 800daec:	4628      	mov	r0, r5
 800daee:	f00d fe3c 	bl	801b76a <memcpy>
 800daf2:	464a      	mov	r2, r9
 800daf4:	19e8      	adds	r0, r5, r7
 800daf6:	68a1      	ldr	r1, [r4, #8]
 800daf8:	f00d fe37 	bl	801b76a <memcpy>
 800dafc:	e7a9      	b.n	800da52 <ucdr_deserialize_uint32_t+0x72>
 800dafe:	bf00      	nop

0800db00 <ucdr_deserialize_endian_uint32_t>:
 800db00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db04:	4604      	mov	r4, r0
 800db06:	460e      	mov	r6, r1
 800db08:	2104      	movs	r1, #4
 800db0a:	4615      	mov	r5, r2
 800db0c:	f001 f838 	bl	800eb80 <ucdr_buffer_alignment>
 800db10:	4601      	mov	r1, r0
 800db12:	4620      	mov	r0, r4
 800db14:	f894 8015 	ldrb.w	r8, [r4, #21]
 800db18:	f001 f87a 	bl	800ec10 <ucdr_advance_buffer>
 800db1c:	2104      	movs	r1, #4
 800db1e:	4620      	mov	r0, r4
 800db20:	f000 ffce 	bl	800eac0 <ucdr_check_buffer_available_for>
 800db24:	2800      	cmp	r0, #0
 800db26:	d13c      	bne.n	800dba2 <ucdr_deserialize_endian_uint32_t+0xa2>
 800db28:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800db2c:	42bb      	cmp	r3, r7
 800db2e:	d933      	bls.n	800db98 <ucdr_deserialize_endian_uint32_t+0x98>
 800db30:	eba3 0907 	sub.w	r9, r3, r7
 800db34:	60a3      	str	r3, [r4, #8]
 800db36:	6923      	ldr	r3, [r4, #16]
 800db38:	4620      	mov	r0, r4
 800db3a:	f1c9 0a04 	rsb	sl, r9, #4
 800db3e:	444b      	add	r3, r9
 800db40:	4651      	mov	r1, sl
 800db42:	6123      	str	r3, [r4, #16]
 800db44:	f000 ffc8 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800db48:	2800      	cmp	r0, #0
 800db4a:	d048      	beq.n	800dbde <ucdr_deserialize_endian_uint32_t+0xde>
 800db4c:	2e01      	cmp	r6, #1
 800db4e:	d061      	beq.n	800dc14 <ucdr_deserialize_endian_uint32_t+0x114>
 800db50:	78fb      	ldrb	r3, [r7, #3]
 800db52:	702b      	strb	r3, [r5, #0]
 800db54:	f1b9 0f00 	cmp.w	r9, #0
 800db58:	d050      	beq.n	800dbfc <ucdr_deserialize_endian_uint32_t+0xfc>
 800db5a:	78bb      	ldrb	r3, [r7, #2]
 800db5c:	f1b9 0f01 	cmp.w	r9, #1
 800db60:	706b      	strb	r3, [r5, #1]
 800db62:	f105 0302 	add.w	r3, r5, #2
 800db66:	d04d      	beq.n	800dc04 <ucdr_deserialize_endian_uint32_t+0x104>
 800db68:	787b      	ldrb	r3, [r7, #1]
 800db6a:	f1b9 0f02 	cmp.w	r9, #2
 800db6e:	70ab      	strb	r3, [r5, #2]
 800db70:	f105 0303 	add.w	r3, r5, #3
 800db74:	d04a      	beq.n	800dc0c <ucdr_deserialize_endian_uint32_t+0x10c>
 800db76:	783b      	ldrb	r3, [r7, #0]
 800db78:	70eb      	strb	r3, [r5, #3]
 800db7a:	6923      	ldr	r3, [r4, #16]
 800db7c:	2104      	movs	r1, #4
 800db7e:	68a2      	ldr	r2, [r4, #8]
 800db80:	3304      	adds	r3, #4
 800db82:	7da0      	ldrb	r0, [r4, #22]
 800db84:	4452      	add	r2, sl
 800db86:	7561      	strb	r1, [r4, #21]
 800db88:	eba3 0309 	sub.w	r3, r3, r9
 800db8c:	f080 0001 	eor.w	r0, r0, #1
 800db90:	60a2      	str	r2, [r4, #8]
 800db92:	6123      	str	r3, [r4, #16]
 800db94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db98:	2104      	movs	r1, #4
 800db9a:	4620      	mov	r0, r4
 800db9c:	f000 ff9c 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800dba0:	b1a8      	cbz	r0, 800dbce <ucdr_deserialize_endian_uint32_t+0xce>
 800dba2:	2e01      	cmp	r6, #1
 800dba4:	68a3      	ldr	r3, [r4, #8]
 800dba6:	d017      	beq.n	800dbd8 <ucdr_deserialize_endian_uint32_t+0xd8>
 800dba8:	78db      	ldrb	r3, [r3, #3]
 800dbaa:	702b      	strb	r3, [r5, #0]
 800dbac:	68a3      	ldr	r3, [r4, #8]
 800dbae:	789b      	ldrb	r3, [r3, #2]
 800dbb0:	706b      	strb	r3, [r5, #1]
 800dbb2:	68a3      	ldr	r3, [r4, #8]
 800dbb4:	785b      	ldrb	r3, [r3, #1]
 800dbb6:	70ab      	strb	r3, [r5, #2]
 800dbb8:	68a3      	ldr	r3, [r4, #8]
 800dbba:	781b      	ldrb	r3, [r3, #0]
 800dbbc:	70eb      	strb	r3, [r5, #3]
 800dbbe:	2104      	movs	r1, #4
 800dbc0:	68a2      	ldr	r2, [r4, #8]
 800dbc2:	6923      	ldr	r3, [r4, #16]
 800dbc4:	440a      	add	r2, r1
 800dbc6:	7561      	strb	r1, [r4, #21]
 800dbc8:	440b      	add	r3, r1
 800dbca:	60a2      	str	r2, [r4, #8]
 800dbcc:	6123      	str	r3, [r4, #16]
 800dbce:	7da0      	ldrb	r0, [r4, #22]
 800dbd0:	f080 0001 	eor.w	r0, r0, #1
 800dbd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	602b      	str	r3, [r5, #0]
 800dbdc:	e7ef      	b.n	800dbbe <ucdr_deserialize_endian_uint32_t+0xbe>
 800dbde:	68a2      	ldr	r2, [r4, #8]
 800dbe0:	6923      	ldr	r3, [r4, #16]
 800dbe2:	eba2 0209 	sub.w	r2, r2, r9
 800dbe6:	7da0      	ldrb	r0, [r4, #22]
 800dbe8:	eba3 0309 	sub.w	r3, r3, r9
 800dbec:	f884 8015 	strb.w	r8, [r4, #21]
 800dbf0:	f080 0001 	eor.w	r0, r0, #1
 800dbf4:	60a2      	str	r2, [r4, #8]
 800dbf6:	6123      	str	r3, [r4, #16]
 800dbf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbfc:	68a3      	ldr	r3, [r4, #8]
 800dbfe:	789b      	ldrb	r3, [r3, #2]
 800dc00:	706b      	strb	r3, [r5, #1]
 800dc02:	1cab      	adds	r3, r5, #2
 800dc04:	68a2      	ldr	r2, [r4, #8]
 800dc06:	7852      	ldrb	r2, [r2, #1]
 800dc08:	f803 2b01 	strb.w	r2, [r3], #1
 800dc0c:	68a2      	ldr	r2, [r4, #8]
 800dc0e:	7812      	ldrb	r2, [r2, #0]
 800dc10:	701a      	strb	r2, [r3, #0]
 800dc12:	e7b2      	b.n	800db7a <ucdr_deserialize_endian_uint32_t+0x7a>
 800dc14:	4639      	mov	r1, r7
 800dc16:	464a      	mov	r2, r9
 800dc18:	4628      	mov	r0, r5
 800dc1a:	f00d fda6 	bl	801b76a <memcpy>
 800dc1e:	4652      	mov	r2, sl
 800dc20:	eb05 0009 	add.w	r0, r5, r9
 800dc24:	68a1      	ldr	r1, [r4, #8]
 800dc26:	f00d fda0 	bl	801b76a <memcpy>
 800dc2a:	e7a6      	b.n	800db7a <ucdr_deserialize_endian_uint32_t+0x7a>

0800dc2c <ucdr_serialize_uint64_t>:
 800dc2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc30:	4604      	mov	r4, r0
 800dc32:	b082      	sub	sp, #8
 800dc34:	2108      	movs	r1, #8
 800dc36:	e9cd 2300 	strd	r2, r3, [sp]
 800dc3a:	f000 ffa1 	bl	800eb80 <ucdr_buffer_alignment>
 800dc3e:	4601      	mov	r1, r0
 800dc40:	4620      	mov	r0, r4
 800dc42:	7d67      	ldrb	r7, [r4, #21]
 800dc44:	f000 ffe4 	bl	800ec10 <ucdr_advance_buffer>
 800dc48:	2108      	movs	r1, #8
 800dc4a:	4620      	mov	r0, r4
 800dc4c:	f000 ff38 	bl	800eac0 <ucdr_check_buffer_available_for>
 800dc50:	2800      	cmp	r0, #0
 800dc52:	d14e      	bne.n	800dcf2 <ucdr_serialize_uint64_t+0xc6>
 800dc54:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800dc58:	42ab      	cmp	r3, r5
 800dc5a:	d945      	bls.n	800dce8 <ucdr_serialize_uint64_t+0xbc>
 800dc5c:	1b5e      	subs	r6, r3, r5
 800dc5e:	60a3      	str	r3, [r4, #8]
 800dc60:	6923      	ldr	r3, [r4, #16]
 800dc62:	4620      	mov	r0, r4
 800dc64:	f1c6 0808 	rsb	r8, r6, #8
 800dc68:	4433      	add	r3, r6
 800dc6a:	4641      	mov	r1, r8
 800dc6c:	6123      	str	r3, [r4, #16]
 800dc6e:	f000 ff33 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800dc72:	2800      	cmp	r0, #0
 800dc74:	d074      	beq.n	800dd60 <ucdr_serialize_uint64_t+0x134>
 800dc76:	7d23      	ldrb	r3, [r4, #20]
 800dc78:	2b01      	cmp	r3, #1
 800dc7a:	f000 809b 	beq.w	800ddb4 <ucdr_serialize_uint64_t+0x188>
 800dc7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dc82:	702b      	strb	r3, [r5, #0]
 800dc84:	2e00      	cmp	r6, #0
 800dc86:	d078      	beq.n	800dd7a <ucdr_serialize_uint64_t+0x14e>
 800dc88:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dc8c:	2e01      	cmp	r6, #1
 800dc8e:	706b      	strb	r3, [r5, #1]
 800dc90:	d077      	beq.n	800dd82 <ucdr_serialize_uint64_t+0x156>
 800dc92:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800dc96:	2e02      	cmp	r6, #2
 800dc98:	70ab      	strb	r3, [r5, #2]
 800dc9a:	d076      	beq.n	800dd8a <ucdr_serialize_uint64_t+0x15e>
 800dc9c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dca0:	2e03      	cmp	r6, #3
 800dca2:	70eb      	strb	r3, [r5, #3]
 800dca4:	d075      	beq.n	800dd92 <ucdr_serialize_uint64_t+0x166>
 800dca6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800dcaa:	2e04      	cmp	r6, #4
 800dcac:	712b      	strb	r3, [r5, #4]
 800dcae:	d074      	beq.n	800dd9a <ucdr_serialize_uint64_t+0x16e>
 800dcb0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800dcb4:	2e05      	cmp	r6, #5
 800dcb6:	716b      	strb	r3, [r5, #5]
 800dcb8:	d073      	beq.n	800dda2 <ucdr_serialize_uint64_t+0x176>
 800dcba:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800dcbe:	2e06      	cmp	r6, #6
 800dcc0:	71ab      	strb	r3, [r5, #6]
 800dcc2:	d072      	beq.n	800ddaa <ucdr_serialize_uint64_t+0x17e>
 800dcc4:	f89d 3000 	ldrb.w	r3, [sp]
 800dcc8:	71eb      	strb	r3, [r5, #7]
 800dcca:	6923      	ldr	r3, [r4, #16]
 800dccc:	2108      	movs	r1, #8
 800dcce:	68a2      	ldr	r2, [r4, #8]
 800dcd0:	3308      	adds	r3, #8
 800dcd2:	7da0      	ldrb	r0, [r4, #22]
 800dcd4:	4442      	add	r2, r8
 800dcd6:	7561      	strb	r1, [r4, #21]
 800dcd8:	1b9e      	subs	r6, r3, r6
 800dcda:	f080 0001 	eor.w	r0, r0, #1
 800dcde:	60a2      	str	r2, [r4, #8]
 800dce0:	6126      	str	r6, [r4, #16]
 800dce2:	b002      	add	sp, #8
 800dce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dce8:	2108      	movs	r1, #8
 800dcea:	4620      	mov	r0, r4
 800dcec:	f000 fef4 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800dcf0:	b350      	cbz	r0, 800dd48 <ucdr_serialize_uint64_t+0x11c>
 800dcf2:	7d23      	ldrb	r3, [r4, #20]
 800dcf4:	2b01      	cmp	r3, #1
 800dcf6:	d02d      	beq.n	800dd54 <ucdr_serialize_uint64_t+0x128>
 800dcf8:	68a3      	ldr	r3, [r4, #8]
 800dcfa:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800dcfe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dd02:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800dd06:	7018      	strb	r0, [r3, #0]
 800dd08:	68a3      	ldr	r3, [r4, #8]
 800dd0a:	705a      	strb	r2, [r3, #1]
 800dd0c:	68a3      	ldr	r3, [r4, #8]
 800dd0e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dd12:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800dd16:	7099      	strb	r1, [r3, #2]
 800dd18:	68a3      	ldr	r3, [r4, #8]
 800dd1a:	70da      	strb	r2, [r3, #3]
 800dd1c:	68a3      	ldr	r3, [r4, #8]
 800dd1e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800dd22:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800dd26:	7118      	strb	r0, [r3, #4]
 800dd28:	68a3      	ldr	r3, [r4, #8]
 800dd2a:	715a      	strb	r2, [r3, #5]
 800dd2c:	68a3      	ldr	r3, [r4, #8]
 800dd2e:	f89d 2000 	ldrb.w	r2, [sp]
 800dd32:	7199      	strb	r1, [r3, #6]
 800dd34:	68a3      	ldr	r3, [r4, #8]
 800dd36:	71da      	strb	r2, [r3, #7]
 800dd38:	2108      	movs	r1, #8
 800dd3a:	68a2      	ldr	r2, [r4, #8]
 800dd3c:	6923      	ldr	r3, [r4, #16]
 800dd3e:	440a      	add	r2, r1
 800dd40:	7561      	strb	r1, [r4, #21]
 800dd42:	440b      	add	r3, r1
 800dd44:	60a2      	str	r2, [r4, #8]
 800dd46:	6123      	str	r3, [r4, #16]
 800dd48:	7da0      	ldrb	r0, [r4, #22]
 800dd4a:	f080 0001 	eor.w	r0, r0, #1
 800dd4e:	b002      	add	sp, #8
 800dd50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd54:	466b      	mov	r3, sp
 800dd56:	68a2      	ldr	r2, [r4, #8]
 800dd58:	cb03      	ldmia	r3!, {r0, r1}
 800dd5a:	6010      	str	r0, [r2, #0]
 800dd5c:	6051      	str	r1, [r2, #4]
 800dd5e:	e7eb      	b.n	800dd38 <ucdr_serialize_uint64_t+0x10c>
 800dd60:	68a2      	ldr	r2, [r4, #8]
 800dd62:	6923      	ldr	r3, [r4, #16]
 800dd64:	7da0      	ldrb	r0, [r4, #22]
 800dd66:	1b92      	subs	r2, r2, r6
 800dd68:	1b9b      	subs	r3, r3, r6
 800dd6a:	7567      	strb	r7, [r4, #21]
 800dd6c:	f080 0001 	eor.w	r0, r0, #1
 800dd70:	60a2      	str	r2, [r4, #8]
 800dd72:	6123      	str	r3, [r4, #16]
 800dd74:	b002      	add	sp, #8
 800dd76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd7a:	68a3      	ldr	r3, [r4, #8]
 800dd7c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dd80:	701a      	strb	r2, [r3, #0]
 800dd82:	68a3      	ldr	r3, [r4, #8]
 800dd84:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dd88:	701a      	strb	r2, [r3, #0]
 800dd8a:	68a3      	ldr	r3, [r4, #8]
 800dd8c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dd90:	701a      	strb	r2, [r3, #0]
 800dd92:	68a3      	ldr	r3, [r4, #8]
 800dd94:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800dd98:	701a      	strb	r2, [r3, #0]
 800dd9a:	68a3      	ldr	r3, [r4, #8]
 800dd9c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800dda0:	701a      	strb	r2, [r3, #0]
 800dda2:	68a3      	ldr	r3, [r4, #8]
 800dda4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800dda8:	701a      	strb	r2, [r3, #0]
 800ddaa:	68a3      	ldr	r3, [r4, #8]
 800ddac:	f89d 2000 	ldrb.w	r2, [sp]
 800ddb0:	701a      	strb	r2, [r3, #0]
 800ddb2:	e78a      	b.n	800dcca <ucdr_serialize_uint64_t+0x9e>
 800ddb4:	4628      	mov	r0, r5
 800ddb6:	466d      	mov	r5, sp
 800ddb8:	4632      	mov	r2, r6
 800ddba:	4629      	mov	r1, r5
 800ddbc:	f00d fcd5 	bl	801b76a <memcpy>
 800ddc0:	4642      	mov	r2, r8
 800ddc2:	19a9      	adds	r1, r5, r6
 800ddc4:	68a0      	ldr	r0, [r4, #8]
 800ddc6:	f00d fcd0 	bl	801b76a <memcpy>
 800ddca:	e77e      	b.n	800dcca <ucdr_serialize_uint64_t+0x9e>

0800ddcc <ucdr_serialize_int16_t>:
 800ddcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddd0:	460b      	mov	r3, r1
 800ddd2:	b082      	sub	sp, #8
 800ddd4:	4604      	mov	r4, r0
 800ddd6:	2102      	movs	r1, #2
 800ddd8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800dddc:	f000 fed0 	bl	800eb80 <ucdr_buffer_alignment>
 800dde0:	4601      	mov	r1, r0
 800dde2:	4620      	mov	r0, r4
 800dde4:	7d67      	ldrb	r7, [r4, #21]
 800dde6:	f000 ff13 	bl	800ec10 <ucdr_advance_buffer>
 800ddea:	2102      	movs	r1, #2
 800ddec:	4620      	mov	r0, r4
 800ddee:	f000 fe67 	bl	800eac0 <ucdr_check_buffer_available_for>
 800ddf2:	bb78      	cbnz	r0, 800de54 <ucdr_serialize_int16_t+0x88>
 800ddf4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ddf8:	42ab      	cmp	r3, r5
 800ddfa:	d926      	bls.n	800de4a <ucdr_serialize_int16_t+0x7e>
 800ddfc:	1b5e      	subs	r6, r3, r5
 800ddfe:	60a3      	str	r3, [r4, #8]
 800de00:	6923      	ldr	r3, [r4, #16]
 800de02:	4620      	mov	r0, r4
 800de04:	f1c6 0802 	rsb	r8, r6, #2
 800de08:	4433      	add	r3, r6
 800de0a:	4641      	mov	r1, r8
 800de0c:	6123      	str	r3, [r4, #16]
 800de0e:	f000 fe63 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800de12:	2800      	cmp	r0, #0
 800de14:	d03b      	beq.n	800de8e <ucdr_serialize_int16_t+0xc2>
 800de16:	7d23      	ldrb	r3, [r4, #20]
 800de18:	2b01      	cmp	r3, #1
 800de1a:	d04a      	beq.n	800deb2 <ucdr_serialize_int16_t+0xe6>
 800de1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800de20:	702b      	strb	r3, [r5, #0]
 800de22:	2e00      	cmp	r6, #0
 800de24:	d040      	beq.n	800dea8 <ucdr_serialize_int16_t+0xdc>
 800de26:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800de2a:	706b      	strb	r3, [r5, #1]
 800de2c:	6923      	ldr	r3, [r4, #16]
 800de2e:	2102      	movs	r1, #2
 800de30:	68a2      	ldr	r2, [r4, #8]
 800de32:	3302      	adds	r3, #2
 800de34:	7da0      	ldrb	r0, [r4, #22]
 800de36:	4442      	add	r2, r8
 800de38:	7561      	strb	r1, [r4, #21]
 800de3a:	1b9e      	subs	r6, r3, r6
 800de3c:	f080 0001 	eor.w	r0, r0, #1
 800de40:	60a2      	str	r2, [r4, #8]
 800de42:	6126      	str	r6, [r4, #16]
 800de44:	b002      	add	sp, #8
 800de46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de4a:	2102      	movs	r1, #2
 800de4c:	4620      	mov	r0, r4
 800de4e:	f000 fe43 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800de52:	b190      	cbz	r0, 800de7a <ucdr_serialize_int16_t+0xae>
 800de54:	7d23      	ldrb	r3, [r4, #20]
 800de56:	2b01      	cmp	r3, #1
 800de58:	68a3      	ldr	r3, [r4, #8]
 800de5a:	d014      	beq.n	800de86 <ucdr_serialize_int16_t+0xba>
 800de5c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800de60:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800de64:	7019      	strb	r1, [r3, #0]
 800de66:	68a3      	ldr	r3, [r4, #8]
 800de68:	705a      	strb	r2, [r3, #1]
 800de6a:	2102      	movs	r1, #2
 800de6c:	68a2      	ldr	r2, [r4, #8]
 800de6e:	6923      	ldr	r3, [r4, #16]
 800de70:	440a      	add	r2, r1
 800de72:	7561      	strb	r1, [r4, #21]
 800de74:	440b      	add	r3, r1
 800de76:	60a2      	str	r2, [r4, #8]
 800de78:	6123      	str	r3, [r4, #16]
 800de7a:	7da0      	ldrb	r0, [r4, #22]
 800de7c:	f080 0001 	eor.w	r0, r0, #1
 800de80:	b002      	add	sp, #8
 800de82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de86:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800de8a:	801a      	strh	r2, [r3, #0]
 800de8c:	e7ed      	b.n	800de6a <ucdr_serialize_int16_t+0x9e>
 800de8e:	68a2      	ldr	r2, [r4, #8]
 800de90:	6923      	ldr	r3, [r4, #16]
 800de92:	7da0      	ldrb	r0, [r4, #22]
 800de94:	1b92      	subs	r2, r2, r6
 800de96:	1b9b      	subs	r3, r3, r6
 800de98:	7567      	strb	r7, [r4, #21]
 800de9a:	f080 0001 	eor.w	r0, r0, #1
 800de9e:	60a2      	str	r2, [r4, #8]
 800dea0:	6123      	str	r3, [r4, #16]
 800dea2:	b002      	add	sp, #8
 800dea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dea8:	68a3      	ldr	r3, [r4, #8]
 800deaa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800deae:	701a      	strb	r2, [r3, #0]
 800deb0:	e7bc      	b.n	800de2c <ucdr_serialize_int16_t+0x60>
 800deb2:	4628      	mov	r0, r5
 800deb4:	f10d 0506 	add.w	r5, sp, #6
 800deb8:	4632      	mov	r2, r6
 800deba:	4629      	mov	r1, r5
 800debc:	f00d fc55 	bl	801b76a <memcpy>
 800dec0:	4642      	mov	r2, r8
 800dec2:	19a9      	adds	r1, r5, r6
 800dec4:	68a0      	ldr	r0, [r4, #8]
 800dec6:	f00d fc50 	bl	801b76a <memcpy>
 800deca:	e7af      	b.n	800de2c <ucdr_serialize_int16_t+0x60>

0800decc <ucdr_deserialize_int16_t>:
 800decc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ded0:	4604      	mov	r4, r0
 800ded2:	460d      	mov	r5, r1
 800ded4:	2102      	movs	r1, #2
 800ded6:	f000 fe53 	bl	800eb80 <ucdr_buffer_alignment>
 800deda:	4601      	mov	r1, r0
 800dedc:	4620      	mov	r0, r4
 800dede:	f894 8015 	ldrb.w	r8, [r4, #21]
 800dee2:	f000 fe95 	bl	800ec10 <ucdr_advance_buffer>
 800dee6:	2102      	movs	r1, #2
 800dee8:	4620      	mov	r0, r4
 800deea:	f000 fde9 	bl	800eac0 <ucdr_check_buffer_available_for>
 800deee:	bb60      	cbnz	r0, 800df4a <ucdr_deserialize_int16_t+0x7e>
 800def0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800def4:	42be      	cmp	r6, r7
 800def6:	d923      	bls.n	800df40 <ucdr_deserialize_int16_t+0x74>
 800def8:	6923      	ldr	r3, [r4, #16]
 800defa:	4620      	mov	r0, r4
 800defc:	60a6      	str	r6, [r4, #8]
 800defe:	1bf6      	subs	r6, r6, r7
 800df00:	4433      	add	r3, r6
 800df02:	f1c6 0902 	rsb	r9, r6, #2
 800df06:	6123      	str	r3, [r4, #16]
 800df08:	4649      	mov	r1, r9
 800df0a:	f000 fde5 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800df0e:	2800      	cmp	r0, #0
 800df10:	d034      	beq.n	800df7c <ucdr_deserialize_int16_t+0xb0>
 800df12:	7d23      	ldrb	r3, [r4, #20]
 800df14:	2b01      	cmp	r3, #1
 800df16:	d042      	beq.n	800df9e <ucdr_deserialize_int16_t+0xd2>
 800df18:	787b      	ldrb	r3, [r7, #1]
 800df1a:	702b      	strb	r3, [r5, #0]
 800df1c:	2e00      	cmp	r6, #0
 800df1e:	d03a      	beq.n	800df96 <ucdr_deserialize_int16_t+0xca>
 800df20:	783b      	ldrb	r3, [r7, #0]
 800df22:	706b      	strb	r3, [r5, #1]
 800df24:	6923      	ldr	r3, [r4, #16]
 800df26:	2102      	movs	r1, #2
 800df28:	68a2      	ldr	r2, [r4, #8]
 800df2a:	3302      	adds	r3, #2
 800df2c:	7da0      	ldrb	r0, [r4, #22]
 800df2e:	444a      	add	r2, r9
 800df30:	7561      	strb	r1, [r4, #21]
 800df32:	1b9b      	subs	r3, r3, r6
 800df34:	f080 0001 	eor.w	r0, r0, #1
 800df38:	60a2      	str	r2, [r4, #8]
 800df3a:	6123      	str	r3, [r4, #16]
 800df3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df40:	2102      	movs	r1, #2
 800df42:	4620      	mov	r0, r4
 800df44:	f000 fdc8 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800df48:	b180      	cbz	r0, 800df6c <ucdr_deserialize_int16_t+0xa0>
 800df4a:	7d23      	ldrb	r3, [r4, #20]
 800df4c:	2b01      	cmp	r3, #1
 800df4e:	68a3      	ldr	r3, [r4, #8]
 800df50:	d011      	beq.n	800df76 <ucdr_deserialize_int16_t+0xaa>
 800df52:	785b      	ldrb	r3, [r3, #1]
 800df54:	702b      	strb	r3, [r5, #0]
 800df56:	68a3      	ldr	r3, [r4, #8]
 800df58:	781b      	ldrb	r3, [r3, #0]
 800df5a:	706b      	strb	r3, [r5, #1]
 800df5c:	2102      	movs	r1, #2
 800df5e:	68a2      	ldr	r2, [r4, #8]
 800df60:	6923      	ldr	r3, [r4, #16]
 800df62:	440a      	add	r2, r1
 800df64:	7561      	strb	r1, [r4, #21]
 800df66:	440b      	add	r3, r1
 800df68:	60a2      	str	r2, [r4, #8]
 800df6a:	6123      	str	r3, [r4, #16]
 800df6c:	7da0      	ldrb	r0, [r4, #22]
 800df6e:	f080 0001 	eor.w	r0, r0, #1
 800df72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df76:	881b      	ldrh	r3, [r3, #0]
 800df78:	802b      	strh	r3, [r5, #0]
 800df7a:	e7ef      	b.n	800df5c <ucdr_deserialize_int16_t+0x90>
 800df7c:	68a2      	ldr	r2, [r4, #8]
 800df7e:	6923      	ldr	r3, [r4, #16]
 800df80:	1b92      	subs	r2, r2, r6
 800df82:	7da0      	ldrb	r0, [r4, #22]
 800df84:	1b9b      	subs	r3, r3, r6
 800df86:	f884 8015 	strb.w	r8, [r4, #21]
 800df8a:	f080 0001 	eor.w	r0, r0, #1
 800df8e:	60a2      	str	r2, [r4, #8]
 800df90:	6123      	str	r3, [r4, #16]
 800df92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df96:	68a3      	ldr	r3, [r4, #8]
 800df98:	781b      	ldrb	r3, [r3, #0]
 800df9a:	706b      	strb	r3, [r5, #1]
 800df9c:	e7c2      	b.n	800df24 <ucdr_deserialize_int16_t+0x58>
 800df9e:	4639      	mov	r1, r7
 800dfa0:	4632      	mov	r2, r6
 800dfa2:	4628      	mov	r0, r5
 800dfa4:	f00d fbe1 	bl	801b76a <memcpy>
 800dfa8:	464a      	mov	r2, r9
 800dfaa:	19a8      	adds	r0, r5, r6
 800dfac:	68a1      	ldr	r1, [r4, #8]
 800dfae:	f00d fbdc 	bl	801b76a <memcpy>
 800dfb2:	e7b7      	b.n	800df24 <ucdr_deserialize_int16_t+0x58>

0800dfb4 <ucdr_serialize_int32_t>:
 800dfb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfb8:	b082      	sub	sp, #8
 800dfba:	4604      	mov	r4, r0
 800dfbc:	9101      	str	r1, [sp, #4]
 800dfbe:	2104      	movs	r1, #4
 800dfc0:	f000 fdde 	bl	800eb80 <ucdr_buffer_alignment>
 800dfc4:	4601      	mov	r1, r0
 800dfc6:	4620      	mov	r0, r4
 800dfc8:	7d67      	ldrb	r7, [r4, #21]
 800dfca:	f000 fe21 	bl	800ec10 <ucdr_advance_buffer>
 800dfce:	2104      	movs	r1, #4
 800dfd0:	4620      	mov	r0, r4
 800dfd2:	f000 fd75 	bl	800eac0 <ucdr_check_buffer_available_for>
 800dfd6:	2800      	cmp	r0, #0
 800dfd8:	d139      	bne.n	800e04e <ucdr_serialize_int32_t+0x9a>
 800dfda:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800dfde:	42ab      	cmp	r3, r5
 800dfe0:	d930      	bls.n	800e044 <ucdr_serialize_int32_t+0x90>
 800dfe2:	1b5e      	subs	r6, r3, r5
 800dfe4:	60a3      	str	r3, [r4, #8]
 800dfe6:	6923      	ldr	r3, [r4, #16]
 800dfe8:	4620      	mov	r0, r4
 800dfea:	f1c6 0804 	rsb	r8, r6, #4
 800dfee:	4433      	add	r3, r6
 800dff0:	4641      	mov	r1, r8
 800dff2:	6123      	str	r3, [r4, #16]
 800dff4:	f000 fd70 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800dff8:	2800      	cmp	r0, #0
 800dffa:	d04c      	beq.n	800e096 <ucdr_serialize_int32_t+0xe2>
 800dffc:	7d23      	ldrb	r3, [r4, #20]
 800dffe:	2b01      	cmp	r3, #1
 800e000:	d063      	beq.n	800e0ca <ucdr_serialize_int32_t+0x116>
 800e002:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e006:	702b      	strb	r3, [r5, #0]
 800e008:	2e00      	cmp	r6, #0
 800e00a:	d051      	beq.n	800e0b0 <ucdr_serialize_int32_t+0xfc>
 800e00c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e010:	2e01      	cmp	r6, #1
 800e012:	706b      	strb	r3, [r5, #1]
 800e014:	d050      	beq.n	800e0b8 <ucdr_serialize_int32_t+0x104>
 800e016:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e01a:	2e02      	cmp	r6, #2
 800e01c:	70ab      	strb	r3, [r5, #2]
 800e01e:	d04f      	beq.n	800e0c0 <ucdr_serialize_int32_t+0x10c>
 800e020:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e024:	70eb      	strb	r3, [r5, #3]
 800e026:	6923      	ldr	r3, [r4, #16]
 800e028:	2104      	movs	r1, #4
 800e02a:	68a2      	ldr	r2, [r4, #8]
 800e02c:	3304      	adds	r3, #4
 800e02e:	7da0      	ldrb	r0, [r4, #22]
 800e030:	4442      	add	r2, r8
 800e032:	7561      	strb	r1, [r4, #21]
 800e034:	1b9e      	subs	r6, r3, r6
 800e036:	f080 0001 	eor.w	r0, r0, #1
 800e03a:	60a2      	str	r2, [r4, #8]
 800e03c:	6126      	str	r6, [r4, #16]
 800e03e:	b002      	add	sp, #8
 800e040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e044:	2104      	movs	r1, #4
 800e046:	4620      	mov	r0, r4
 800e048:	f000 fd46 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800e04c:	b1d0      	cbz	r0, 800e084 <ucdr_serialize_int32_t+0xd0>
 800e04e:	7d23      	ldrb	r3, [r4, #20]
 800e050:	2b01      	cmp	r3, #1
 800e052:	68a3      	ldr	r3, [r4, #8]
 800e054:	d01c      	beq.n	800e090 <ucdr_serialize_int32_t+0xdc>
 800e056:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800e05a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e05e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800e062:	7018      	strb	r0, [r3, #0]
 800e064:	68a3      	ldr	r3, [r4, #8]
 800e066:	705a      	strb	r2, [r3, #1]
 800e068:	68a3      	ldr	r3, [r4, #8]
 800e06a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e06e:	7099      	strb	r1, [r3, #2]
 800e070:	68a3      	ldr	r3, [r4, #8]
 800e072:	70da      	strb	r2, [r3, #3]
 800e074:	2104      	movs	r1, #4
 800e076:	68a2      	ldr	r2, [r4, #8]
 800e078:	6923      	ldr	r3, [r4, #16]
 800e07a:	440a      	add	r2, r1
 800e07c:	7561      	strb	r1, [r4, #21]
 800e07e:	440b      	add	r3, r1
 800e080:	60a2      	str	r2, [r4, #8]
 800e082:	6123      	str	r3, [r4, #16]
 800e084:	7da0      	ldrb	r0, [r4, #22]
 800e086:	f080 0001 	eor.w	r0, r0, #1
 800e08a:	b002      	add	sp, #8
 800e08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e090:	9a01      	ldr	r2, [sp, #4]
 800e092:	601a      	str	r2, [r3, #0]
 800e094:	e7ee      	b.n	800e074 <ucdr_serialize_int32_t+0xc0>
 800e096:	68a2      	ldr	r2, [r4, #8]
 800e098:	6923      	ldr	r3, [r4, #16]
 800e09a:	7da0      	ldrb	r0, [r4, #22]
 800e09c:	1b92      	subs	r2, r2, r6
 800e09e:	1b9b      	subs	r3, r3, r6
 800e0a0:	7567      	strb	r7, [r4, #21]
 800e0a2:	f080 0001 	eor.w	r0, r0, #1
 800e0a6:	60a2      	str	r2, [r4, #8]
 800e0a8:	6123      	str	r3, [r4, #16]
 800e0aa:	b002      	add	sp, #8
 800e0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0b0:	68a3      	ldr	r3, [r4, #8]
 800e0b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e0b6:	701a      	strb	r2, [r3, #0]
 800e0b8:	68a3      	ldr	r3, [r4, #8]
 800e0ba:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e0be:	701a      	strb	r2, [r3, #0]
 800e0c0:	68a3      	ldr	r3, [r4, #8]
 800e0c2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e0c6:	701a      	strb	r2, [r3, #0]
 800e0c8:	e7ad      	b.n	800e026 <ucdr_serialize_int32_t+0x72>
 800e0ca:	4628      	mov	r0, r5
 800e0cc:	ad01      	add	r5, sp, #4
 800e0ce:	4632      	mov	r2, r6
 800e0d0:	4629      	mov	r1, r5
 800e0d2:	f00d fb4a 	bl	801b76a <memcpy>
 800e0d6:	4642      	mov	r2, r8
 800e0d8:	19a9      	adds	r1, r5, r6
 800e0da:	68a0      	ldr	r0, [r4, #8]
 800e0dc:	f00d fb45 	bl	801b76a <memcpy>
 800e0e0:	e7a1      	b.n	800e026 <ucdr_serialize_int32_t+0x72>
 800e0e2:	bf00      	nop

0800e0e4 <ucdr_deserialize_int32_t>:
 800e0e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0e8:	4604      	mov	r4, r0
 800e0ea:	460d      	mov	r5, r1
 800e0ec:	2104      	movs	r1, #4
 800e0ee:	f000 fd47 	bl	800eb80 <ucdr_buffer_alignment>
 800e0f2:	4601      	mov	r1, r0
 800e0f4:	4620      	mov	r0, r4
 800e0f6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e0fa:	f000 fd89 	bl	800ec10 <ucdr_advance_buffer>
 800e0fe:	2104      	movs	r1, #4
 800e100:	4620      	mov	r0, r4
 800e102:	f000 fcdd 	bl	800eac0 <ucdr_check_buffer_available_for>
 800e106:	2800      	cmp	r0, #0
 800e108:	d138      	bne.n	800e17c <ucdr_deserialize_int32_t+0x98>
 800e10a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e10e:	42b7      	cmp	r7, r6
 800e110:	d92f      	bls.n	800e172 <ucdr_deserialize_int32_t+0x8e>
 800e112:	6923      	ldr	r3, [r4, #16]
 800e114:	4620      	mov	r0, r4
 800e116:	60a7      	str	r7, [r4, #8]
 800e118:	1bbf      	subs	r7, r7, r6
 800e11a:	443b      	add	r3, r7
 800e11c:	f1c7 0904 	rsb	r9, r7, #4
 800e120:	6123      	str	r3, [r4, #16]
 800e122:	4649      	mov	r1, r9
 800e124:	f000 fcd8 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800e128:	2800      	cmp	r0, #0
 800e12a:	d046      	beq.n	800e1ba <ucdr_deserialize_int32_t+0xd6>
 800e12c:	7d23      	ldrb	r3, [r4, #20]
 800e12e:	2b01      	cmp	r3, #1
 800e130:	d05c      	beq.n	800e1ec <ucdr_deserialize_int32_t+0x108>
 800e132:	78f3      	ldrb	r3, [r6, #3]
 800e134:	702b      	strb	r3, [r5, #0]
 800e136:	2f00      	cmp	r7, #0
 800e138:	d04c      	beq.n	800e1d4 <ucdr_deserialize_int32_t+0xf0>
 800e13a:	78b3      	ldrb	r3, [r6, #2]
 800e13c:	2f01      	cmp	r7, #1
 800e13e:	706b      	strb	r3, [r5, #1]
 800e140:	f105 0302 	add.w	r3, r5, #2
 800e144:	d04a      	beq.n	800e1dc <ucdr_deserialize_int32_t+0xf8>
 800e146:	7873      	ldrb	r3, [r6, #1]
 800e148:	2f02      	cmp	r7, #2
 800e14a:	70ab      	strb	r3, [r5, #2]
 800e14c:	f105 0303 	add.w	r3, r5, #3
 800e150:	d048      	beq.n	800e1e4 <ucdr_deserialize_int32_t+0x100>
 800e152:	7833      	ldrb	r3, [r6, #0]
 800e154:	70eb      	strb	r3, [r5, #3]
 800e156:	6923      	ldr	r3, [r4, #16]
 800e158:	2104      	movs	r1, #4
 800e15a:	68a2      	ldr	r2, [r4, #8]
 800e15c:	3304      	adds	r3, #4
 800e15e:	7da0      	ldrb	r0, [r4, #22]
 800e160:	444a      	add	r2, r9
 800e162:	7561      	strb	r1, [r4, #21]
 800e164:	1bdb      	subs	r3, r3, r7
 800e166:	f080 0001 	eor.w	r0, r0, #1
 800e16a:	60a2      	str	r2, [r4, #8]
 800e16c:	6123      	str	r3, [r4, #16]
 800e16e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e172:	2104      	movs	r1, #4
 800e174:	4620      	mov	r0, r4
 800e176:	f000 fcaf 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800e17a:	b1b0      	cbz	r0, 800e1aa <ucdr_deserialize_int32_t+0xc6>
 800e17c:	7d23      	ldrb	r3, [r4, #20]
 800e17e:	2b01      	cmp	r3, #1
 800e180:	68a3      	ldr	r3, [r4, #8]
 800e182:	d017      	beq.n	800e1b4 <ucdr_deserialize_int32_t+0xd0>
 800e184:	78db      	ldrb	r3, [r3, #3]
 800e186:	702b      	strb	r3, [r5, #0]
 800e188:	68a3      	ldr	r3, [r4, #8]
 800e18a:	789b      	ldrb	r3, [r3, #2]
 800e18c:	706b      	strb	r3, [r5, #1]
 800e18e:	68a3      	ldr	r3, [r4, #8]
 800e190:	785b      	ldrb	r3, [r3, #1]
 800e192:	70ab      	strb	r3, [r5, #2]
 800e194:	68a3      	ldr	r3, [r4, #8]
 800e196:	781b      	ldrb	r3, [r3, #0]
 800e198:	70eb      	strb	r3, [r5, #3]
 800e19a:	2104      	movs	r1, #4
 800e19c:	68a2      	ldr	r2, [r4, #8]
 800e19e:	6923      	ldr	r3, [r4, #16]
 800e1a0:	440a      	add	r2, r1
 800e1a2:	7561      	strb	r1, [r4, #21]
 800e1a4:	440b      	add	r3, r1
 800e1a6:	60a2      	str	r2, [r4, #8]
 800e1a8:	6123      	str	r3, [r4, #16]
 800e1aa:	7da0      	ldrb	r0, [r4, #22]
 800e1ac:	f080 0001 	eor.w	r0, r0, #1
 800e1b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	602b      	str	r3, [r5, #0]
 800e1b8:	e7ef      	b.n	800e19a <ucdr_deserialize_int32_t+0xb6>
 800e1ba:	68a2      	ldr	r2, [r4, #8]
 800e1bc:	6923      	ldr	r3, [r4, #16]
 800e1be:	1bd2      	subs	r2, r2, r7
 800e1c0:	7da0      	ldrb	r0, [r4, #22]
 800e1c2:	1bdb      	subs	r3, r3, r7
 800e1c4:	f884 8015 	strb.w	r8, [r4, #21]
 800e1c8:	f080 0001 	eor.w	r0, r0, #1
 800e1cc:	60a2      	str	r2, [r4, #8]
 800e1ce:	6123      	str	r3, [r4, #16]
 800e1d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1d4:	68a3      	ldr	r3, [r4, #8]
 800e1d6:	789b      	ldrb	r3, [r3, #2]
 800e1d8:	706b      	strb	r3, [r5, #1]
 800e1da:	1cab      	adds	r3, r5, #2
 800e1dc:	68a2      	ldr	r2, [r4, #8]
 800e1de:	7852      	ldrb	r2, [r2, #1]
 800e1e0:	f803 2b01 	strb.w	r2, [r3], #1
 800e1e4:	68a2      	ldr	r2, [r4, #8]
 800e1e6:	7812      	ldrb	r2, [r2, #0]
 800e1e8:	701a      	strb	r2, [r3, #0]
 800e1ea:	e7b4      	b.n	800e156 <ucdr_deserialize_int32_t+0x72>
 800e1ec:	4631      	mov	r1, r6
 800e1ee:	463a      	mov	r2, r7
 800e1f0:	4628      	mov	r0, r5
 800e1f2:	f00d faba 	bl	801b76a <memcpy>
 800e1f6:	464a      	mov	r2, r9
 800e1f8:	19e8      	adds	r0, r5, r7
 800e1fa:	68a1      	ldr	r1, [r4, #8]
 800e1fc:	f00d fab5 	bl	801b76a <memcpy>
 800e200:	e7a9      	b.n	800e156 <ucdr_deserialize_int32_t+0x72>
 800e202:	bf00      	nop

0800e204 <ucdr_serialize_float>:
 800e204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e208:	4604      	mov	r4, r0
 800e20a:	b082      	sub	sp, #8
 800e20c:	2104      	movs	r1, #4
 800e20e:	ed8d 0a01 	vstr	s0, [sp, #4]
 800e212:	f000 fcb5 	bl	800eb80 <ucdr_buffer_alignment>
 800e216:	4601      	mov	r1, r0
 800e218:	4620      	mov	r0, r4
 800e21a:	7d67      	ldrb	r7, [r4, #21]
 800e21c:	f000 fcf8 	bl	800ec10 <ucdr_advance_buffer>
 800e220:	2104      	movs	r1, #4
 800e222:	4620      	mov	r0, r4
 800e224:	f000 fc4c 	bl	800eac0 <ucdr_check_buffer_available_for>
 800e228:	2800      	cmp	r0, #0
 800e22a:	d139      	bne.n	800e2a0 <ucdr_serialize_float+0x9c>
 800e22c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e230:	42ab      	cmp	r3, r5
 800e232:	d930      	bls.n	800e296 <ucdr_serialize_float+0x92>
 800e234:	1b5e      	subs	r6, r3, r5
 800e236:	60a3      	str	r3, [r4, #8]
 800e238:	6923      	ldr	r3, [r4, #16]
 800e23a:	4620      	mov	r0, r4
 800e23c:	f1c6 0804 	rsb	r8, r6, #4
 800e240:	4433      	add	r3, r6
 800e242:	4641      	mov	r1, r8
 800e244:	6123      	str	r3, [r4, #16]
 800e246:	f000 fc47 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800e24a:	2800      	cmp	r0, #0
 800e24c:	d04c      	beq.n	800e2e8 <ucdr_serialize_float+0xe4>
 800e24e:	7d23      	ldrb	r3, [r4, #20]
 800e250:	2b01      	cmp	r3, #1
 800e252:	d063      	beq.n	800e31c <ucdr_serialize_float+0x118>
 800e254:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e258:	702b      	strb	r3, [r5, #0]
 800e25a:	2e00      	cmp	r6, #0
 800e25c:	d051      	beq.n	800e302 <ucdr_serialize_float+0xfe>
 800e25e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e262:	2e01      	cmp	r6, #1
 800e264:	706b      	strb	r3, [r5, #1]
 800e266:	d050      	beq.n	800e30a <ucdr_serialize_float+0x106>
 800e268:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e26c:	2e02      	cmp	r6, #2
 800e26e:	70ab      	strb	r3, [r5, #2]
 800e270:	d04f      	beq.n	800e312 <ucdr_serialize_float+0x10e>
 800e272:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e276:	70eb      	strb	r3, [r5, #3]
 800e278:	6923      	ldr	r3, [r4, #16]
 800e27a:	2104      	movs	r1, #4
 800e27c:	68a2      	ldr	r2, [r4, #8]
 800e27e:	3304      	adds	r3, #4
 800e280:	7da0      	ldrb	r0, [r4, #22]
 800e282:	4442      	add	r2, r8
 800e284:	7561      	strb	r1, [r4, #21]
 800e286:	1b9e      	subs	r6, r3, r6
 800e288:	f080 0001 	eor.w	r0, r0, #1
 800e28c:	60a2      	str	r2, [r4, #8]
 800e28e:	6126      	str	r6, [r4, #16]
 800e290:	b002      	add	sp, #8
 800e292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e296:	2104      	movs	r1, #4
 800e298:	4620      	mov	r0, r4
 800e29a:	f000 fc1d 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800e29e:	b1d0      	cbz	r0, 800e2d6 <ucdr_serialize_float+0xd2>
 800e2a0:	7d23      	ldrb	r3, [r4, #20]
 800e2a2:	2b01      	cmp	r3, #1
 800e2a4:	68a3      	ldr	r3, [r4, #8]
 800e2a6:	d01c      	beq.n	800e2e2 <ucdr_serialize_float+0xde>
 800e2a8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800e2ac:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e2b0:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800e2b4:	7018      	strb	r0, [r3, #0]
 800e2b6:	68a3      	ldr	r3, [r4, #8]
 800e2b8:	705a      	strb	r2, [r3, #1]
 800e2ba:	68a3      	ldr	r3, [r4, #8]
 800e2bc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e2c0:	7099      	strb	r1, [r3, #2]
 800e2c2:	68a3      	ldr	r3, [r4, #8]
 800e2c4:	70da      	strb	r2, [r3, #3]
 800e2c6:	2104      	movs	r1, #4
 800e2c8:	68a2      	ldr	r2, [r4, #8]
 800e2ca:	6923      	ldr	r3, [r4, #16]
 800e2cc:	440a      	add	r2, r1
 800e2ce:	7561      	strb	r1, [r4, #21]
 800e2d0:	440b      	add	r3, r1
 800e2d2:	60a2      	str	r2, [r4, #8]
 800e2d4:	6123      	str	r3, [r4, #16]
 800e2d6:	7da0      	ldrb	r0, [r4, #22]
 800e2d8:	f080 0001 	eor.w	r0, r0, #1
 800e2dc:	b002      	add	sp, #8
 800e2de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2e2:	9a01      	ldr	r2, [sp, #4]
 800e2e4:	601a      	str	r2, [r3, #0]
 800e2e6:	e7ee      	b.n	800e2c6 <ucdr_serialize_float+0xc2>
 800e2e8:	68a2      	ldr	r2, [r4, #8]
 800e2ea:	6923      	ldr	r3, [r4, #16]
 800e2ec:	7da0      	ldrb	r0, [r4, #22]
 800e2ee:	1b92      	subs	r2, r2, r6
 800e2f0:	1b9b      	subs	r3, r3, r6
 800e2f2:	7567      	strb	r7, [r4, #21]
 800e2f4:	f080 0001 	eor.w	r0, r0, #1
 800e2f8:	60a2      	str	r2, [r4, #8]
 800e2fa:	6123      	str	r3, [r4, #16]
 800e2fc:	b002      	add	sp, #8
 800e2fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e302:	68a3      	ldr	r3, [r4, #8]
 800e304:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e308:	701a      	strb	r2, [r3, #0]
 800e30a:	68a3      	ldr	r3, [r4, #8]
 800e30c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e310:	701a      	strb	r2, [r3, #0]
 800e312:	68a3      	ldr	r3, [r4, #8]
 800e314:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e318:	701a      	strb	r2, [r3, #0]
 800e31a:	e7ad      	b.n	800e278 <ucdr_serialize_float+0x74>
 800e31c:	4628      	mov	r0, r5
 800e31e:	ad01      	add	r5, sp, #4
 800e320:	4632      	mov	r2, r6
 800e322:	4629      	mov	r1, r5
 800e324:	f00d fa21 	bl	801b76a <memcpy>
 800e328:	4642      	mov	r2, r8
 800e32a:	19a9      	adds	r1, r5, r6
 800e32c:	68a0      	ldr	r0, [r4, #8]
 800e32e:	f00d fa1c 	bl	801b76a <memcpy>
 800e332:	e7a1      	b.n	800e278 <ucdr_serialize_float+0x74>

0800e334 <ucdr_deserialize_float>:
 800e334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e338:	4604      	mov	r4, r0
 800e33a:	460d      	mov	r5, r1
 800e33c:	2104      	movs	r1, #4
 800e33e:	f000 fc1f 	bl	800eb80 <ucdr_buffer_alignment>
 800e342:	4601      	mov	r1, r0
 800e344:	4620      	mov	r0, r4
 800e346:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e34a:	f000 fc61 	bl	800ec10 <ucdr_advance_buffer>
 800e34e:	2104      	movs	r1, #4
 800e350:	4620      	mov	r0, r4
 800e352:	f000 fbb5 	bl	800eac0 <ucdr_check_buffer_available_for>
 800e356:	2800      	cmp	r0, #0
 800e358:	d138      	bne.n	800e3cc <ucdr_deserialize_float+0x98>
 800e35a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e35e:	42b7      	cmp	r7, r6
 800e360:	d92f      	bls.n	800e3c2 <ucdr_deserialize_float+0x8e>
 800e362:	6923      	ldr	r3, [r4, #16]
 800e364:	4620      	mov	r0, r4
 800e366:	60a7      	str	r7, [r4, #8]
 800e368:	1bbf      	subs	r7, r7, r6
 800e36a:	443b      	add	r3, r7
 800e36c:	f1c7 0904 	rsb	r9, r7, #4
 800e370:	6123      	str	r3, [r4, #16]
 800e372:	4649      	mov	r1, r9
 800e374:	f000 fbb0 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800e378:	2800      	cmp	r0, #0
 800e37a:	d046      	beq.n	800e40a <ucdr_deserialize_float+0xd6>
 800e37c:	7d23      	ldrb	r3, [r4, #20]
 800e37e:	2b01      	cmp	r3, #1
 800e380:	d05c      	beq.n	800e43c <ucdr_deserialize_float+0x108>
 800e382:	78f3      	ldrb	r3, [r6, #3]
 800e384:	702b      	strb	r3, [r5, #0]
 800e386:	2f00      	cmp	r7, #0
 800e388:	d04c      	beq.n	800e424 <ucdr_deserialize_float+0xf0>
 800e38a:	78b3      	ldrb	r3, [r6, #2]
 800e38c:	2f01      	cmp	r7, #1
 800e38e:	706b      	strb	r3, [r5, #1]
 800e390:	f105 0302 	add.w	r3, r5, #2
 800e394:	d04a      	beq.n	800e42c <ucdr_deserialize_float+0xf8>
 800e396:	7873      	ldrb	r3, [r6, #1]
 800e398:	2f02      	cmp	r7, #2
 800e39a:	70ab      	strb	r3, [r5, #2]
 800e39c:	f105 0303 	add.w	r3, r5, #3
 800e3a0:	d048      	beq.n	800e434 <ucdr_deserialize_float+0x100>
 800e3a2:	7833      	ldrb	r3, [r6, #0]
 800e3a4:	70eb      	strb	r3, [r5, #3]
 800e3a6:	6923      	ldr	r3, [r4, #16]
 800e3a8:	2104      	movs	r1, #4
 800e3aa:	68a2      	ldr	r2, [r4, #8]
 800e3ac:	3304      	adds	r3, #4
 800e3ae:	7da0      	ldrb	r0, [r4, #22]
 800e3b0:	444a      	add	r2, r9
 800e3b2:	7561      	strb	r1, [r4, #21]
 800e3b4:	1bdb      	subs	r3, r3, r7
 800e3b6:	f080 0001 	eor.w	r0, r0, #1
 800e3ba:	60a2      	str	r2, [r4, #8]
 800e3bc:	6123      	str	r3, [r4, #16]
 800e3be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3c2:	2104      	movs	r1, #4
 800e3c4:	4620      	mov	r0, r4
 800e3c6:	f000 fb87 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800e3ca:	b1b0      	cbz	r0, 800e3fa <ucdr_deserialize_float+0xc6>
 800e3cc:	7d23      	ldrb	r3, [r4, #20]
 800e3ce:	2b01      	cmp	r3, #1
 800e3d0:	68a3      	ldr	r3, [r4, #8]
 800e3d2:	d017      	beq.n	800e404 <ucdr_deserialize_float+0xd0>
 800e3d4:	78db      	ldrb	r3, [r3, #3]
 800e3d6:	702b      	strb	r3, [r5, #0]
 800e3d8:	68a3      	ldr	r3, [r4, #8]
 800e3da:	789b      	ldrb	r3, [r3, #2]
 800e3dc:	706b      	strb	r3, [r5, #1]
 800e3de:	68a3      	ldr	r3, [r4, #8]
 800e3e0:	785b      	ldrb	r3, [r3, #1]
 800e3e2:	70ab      	strb	r3, [r5, #2]
 800e3e4:	68a3      	ldr	r3, [r4, #8]
 800e3e6:	781b      	ldrb	r3, [r3, #0]
 800e3e8:	70eb      	strb	r3, [r5, #3]
 800e3ea:	2104      	movs	r1, #4
 800e3ec:	68a2      	ldr	r2, [r4, #8]
 800e3ee:	6923      	ldr	r3, [r4, #16]
 800e3f0:	440a      	add	r2, r1
 800e3f2:	7561      	strb	r1, [r4, #21]
 800e3f4:	440b      	add	r3, r1
 800e3f6:	60a2      	str	r2, [r4, #8]
 800e3f8:	6123      	str	r3, [r4, #16]
 800e3fa:	7da0      	ldrb	r0, [r4, #22]
 800e3fc:	f080 0001 	eor.w	r0, r0, #1
 800e400:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	602b      	str	r3, [r5, #0]
 800e408:	e7ef      	b.n	800e3ea <ucdr_deserialize_float+0xb6>
 800e40a:	68a2      	ldr	r2, [r4, #8]
 800e40c:	6923      	ldr	r3, [r4, #16]
 800e40e:	1bd2      	subs	r2, r2, r7
 800e410:	7da0      	ldrb	r0, [r4, #22]
 800e412:	1bdb      	subs	r3, r3, r7
 800e414:	f884 8015 	strb.w	r8, [r4, #21]
 800e418:	f080 0001 	eor.w	r0, r0, #1
 800e41c:	60a2      	str	r2, [r4, #8]
 800e41e:	6123      	str	r3, [r4, #16]
 800e420:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e424:	68a3      	ldr	r3, [r4, #8]
 800e426:	789b      	ldrb	r3, [r3, #2]
 800e428:	706b      	strb	r3, [r5, #1]
 800e42a:	1cab      	adds	r3, r5, #2
 800e42c:	68a2      	ldr	r2, [r4, #8]
 800e42e:	7852      	ldrb	r2, [r2, #1]
 800e430:	f803 2b01 	strb.w	r2, [r3], #1
 800e434:	68a2      	ldr	r2, [r4, #8]
 800e436:	7812      	ldrb	r2, [r2, #0]
 800e438:	701a      	strb	r2, [r3, #0]
 800e43a:	e7b4      	b.n	800e3a6 <ucdr_deserialize_float+0x72>
 800e43c:	4631      	mov	r1, r6
 800e43e:	463a      	mov	r2, r7
 800e440:	4628      	mov	r0, r5
 800e442:	f00d f992 	bl	801b76a <memcpy>
 800e446:	464a      	mov	r2, r9
 800e448:	19e8      	adds	r0, r5, r7
 800e44a:	68a1      	ldr	r1, [r4, #8]
 800e44c:	f00d f98d 	bl	801b76a <memcpy>
 800e450:	e7a9      	b.n	800e3a6 <ucdr_deserialize_float+0x72>
 800e452:	bf00      	nop

0800e454 <ucdr_serialize_double>:
 800e454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e458:	4604      	mov	r4, r0
 800e45a:	b082      	sub	sp, #8
 800e45c:	2108      	movs	r1, #8
 800e45e:	ed8d 0b00 	vstr	d0, [sp]
 800e462:	f000 fb8d 	bl	800eb80 <ucdr_buffer_alignment>
 800e466:	4601      	mov	r1, r0
 800e468:	4620      	mov	r0, r4
 800e46a:	7d67      	ldrb	r7, [r4, #21]
 800e46c:	f000 fbd0 	bl	800ec10 <ucdr_advance_buffer>
 800e470:	2108      	movs	r1, #8
 800e472:	4620      	mov	r0, r4
 800e474:	f000 fb24 	bl	800eac0 <ucdr_check_buffer_available_for>
 800e478:	2800      	cmp	r0, #0
 800e47a:	d14e      	bne.n	800e51a <ucdr_serialize_double+0xc6>
 800e47c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e480:	42ab      	cmp	r3, r5
 800e482:	d945      	bls.n	800e510 <ucdr_serialize_double+0xbc>
 800e484:	1b5e      	subs	r6, r3, r5
 800e486:	60a3      	str	r3, [r4, #8]
 800e488:	6923      	ldr	r3, [r4, #16]
 800e48a:	4620      	mov	r0, r4
 800e48c:	f1c6 0808 	rsb	r8, r6, #8
 800e490:	4433      	add	r3, r6
 800e492:	4641      	mov	r1, r8
 800e494:	6123      	str	r3, [r4, #16]
 800e496:	f000 fb1f 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800e49a:	2800      	cmp	r0, #0
 800e49c:	d074      	beq.n	800e588 <ucdr_serialize_double+0x134>
 800e49e:	7d23      	ldrb	r3, [r4, #20]
 800e4a0:	2b01      	cmp	r3, #1
 800e4a2:	f000 809b 	beq.w	800e5dc <ucdr_serialize_double+0x188>
 800e4a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e4aa:	702b      	strb	r3, [r5, #0]
 800e4ac:	2e00      	cmp	r6, #0
 800e4ae:	d078      	beq.n	800e5a2 <ucdr_serialize_double+0x14e>
 800e4b0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e4b4:	2e01      	cmp	r6, #1
 800e4b6:	706b      	strb	r3, [r5, #1]
 800e4b8:	d077      	beq.n	800e5aa <ucdr_serialize_double+0x156>
 800e4ba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e4be:	2e02      	cmp	r6, #2
 800e4c0:	70ab      	strb	r3, [r5, #2]
 800e4c2:	d076      	beq.n	800e5b2 <ucdr_serialize_double+0x15e>
 800e4c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e4c8:	2e03      	cmp	r6, #3
 800e4ca:	70eb      	strb	r3, [r5, #3]
 800e4cc:	d075      	beq.n	800e5ba <ucdr_serialize_double+0x166>
 800e4ce:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e4d2:	2e04      	cmp	r6, #4
 800e4d4:	712b      	strb	r3, [r5, #4]
 800e4d6:	d074      	beq.n	800e5c2 <ucdr_serialize_double+0x16e>
 800e4d8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800e4dc:	2e05      	cmp	r6, #5
 800e4de:	716b      	strb	r3, [r5, #5]
 800e4e0:	d073      	beq.n	800e5ca <ucdr_serialize_double+0x176>
 800e4e2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800e4e6:	2e06      	cmp	r6, #6
 800e4e8:	71ab      	strb	r3, [r5, #6]
 800e4ea:	d072      	beq.n	800e5d2 <ucdr_serialize_double+0x17e>
 800e4ec:	f89d 3000 	ldrb.w	r3, [sp]
 800e4f0:	71eb      	strb	r3, [r5, #7]
 800e4f2:	6923      	ldr	r3, [r4, #16]
 800e4f4:	2108      	movs	r1, #8
 800e4f6:	68a2      	ldr	r2, [r4, #8]
 800e4f8:	3308      	adds	r3, #8
 800e4fa:	7da0      	ldrb	r0, [r4, #22]
 800e4fc:	4442      	add	r2, r8
 800e4fe:	7561      	strb	r1, [r4, #21]
 800e500:	1b9e      	subs	r6, r3, r6
 800e502:	f080 0001 	eor.w	r0, r0, #1
 800e506:	60a2      	str	r2, [r4, #8]
 800e508:	6126      	str	r6, [r4, #16]
 800e50a:	b002      	add	sp, #8
 800e50c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e510:	2108      	movs	r1, #8
 800e512:	4620      	mov	r0, r4
 800e514:	f000 fae0 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800e518:	b350      	cbz	r0, 800e570 <ucdr_serialize_double+0x11c>
 800e51a:	7d23      	ldrb	r3, [r4, #20]
 800e51c:	2b01      	cmp	r3, #1
 800e51e:	d02d      	beq.n	800e57c <ucdr_serialize_double+0x128>
 800e520:	68a3      	ldr	r3, [r4, #8]
 800e522:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800e526:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e52a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800e52e:	7018      	strb	r0, [r3, #0]
 800e530:	68a3      	ldr	r3, [r4, #8]
 800e532:	705a      	strb	r2, [r3, #1]
 800e534:	68a3      	ldr	r3, [r4, #8]
 800e536:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e53a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800e53e:	7099      	strb	r1, [r3, #2]
 800e540:	68a3      	ldr	r3, [r4, #8]
 800e542:	70da      	strb	r2, [r3, #3]
 800e544:	68a3      	ldr	r3, [r4, #8]
 800e546:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e54a:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800e54e:	7118      	strb	r0, [r3, #4]
 800e550:	68a3      	ldr	r3, [r4, #8]
 800e552:	715a      	strb	r2, [r3, #5]
 800e554:	68a3      	ldr	r3, [r4, #8]
 800e556:	f89d 2000 	ldrb.w	r2, [sp]
 800e55a:	7199      	strb	r1, [r3, #6]
 800e55c:	68a3      	ldr	r3, [r4, #8]
 800e55e:	71da      	strb	r2, [r3, #7]
 800e560:	2108      	movs	r1, #8
 800e562:	68a2      	ldr	r2, [r4, #8]
 800e564:	6923      	ldr	r3, [r4, #16]
 800e566:	440a      	add	r2, r1
 800e568:	7561      	strb	r1, [r4, #21]
 800e56a:	440b      	add	r3, r1
 800e56c:	60a2      	str	r2, [r4, #8]
 800e56e:	6123      	str	r3, [r4, #16]
 800e570:	7da0      	ldrb	r0, [r4, #22]
 800e572:	f080 0001 	eor.w	r0, r0, #1
 800e576:	b002      	add	sp, #8
 800e578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e57c:	466b      	mov	r3, sp
 800e57e:	68a2      	ldr	r2, [r4, #8]
 800e580:	cb03      	ldmia	r3!, {r0, r1}
 800e582:	6010      	str	r0, [r2, #0]
 800e584:	6051      	str	r1, [r2, #4]
 800e586:	e7eb      	b.n	800e560 <ucdr_serialize_double+0x10c>
 800e588:	68a2      	ldr	r2, [r4, #8]
 800e58a:	6923      	ldr	r3, [r4, #16]
 800e58c:	7da0      	ldrb	r0, [r4, #22]
 800e58e:	1b92      	subs	r2, r2, r6
 800e590:	1b9b      	subs	r3, r3, r6
 800e592:	7567      	strb	r7, [r4, #21]
 800e594:	f080 0001 	eor.w	r0, r0, #1
 800e598:	60a2      	str	r2, [r4, #8]
 800e59a:	6123      	str	r3, [r4, #16]
 800e59c:	b002      	add	sp, #8
 800e59e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5a2:	68a3      	ldr	r3, [r4, #8]
 800e5a4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e5a8:	701a      	strb	r2, [r3, #0]
 800e5aa:	68a3      	ldr	r3, [r4, #8]
 800e5ac:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e5b0:	701a      	strb	r2, [r3, #0]
 800e5b2:	68a3      	ldr	r3, [r4, #8]
 800e5b4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e5b8:	701a      	strb	r2, [r3, #0]
 800e5ba:	68a3      	ldr	r3, [r4, #8]
 800e5bc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e5c0:	701a      	strb	r2, [r3, #0]
 800e5c2:	68a3      	ldr	r3, [r4, #8]
 800e5c4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e5c8:	701a      	strb	r2, [r3, #0]
 800e5ca:	68a3      	ldr	r3, [r4, #8]
 800e5cc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e5d0:	701a      	strb	r2, [r3, #0]
 800e5d2:	68a3      	ldr	r3, [r4, #8]
 800e5d4:	f89d 2000 	ldrb.w	r2, [sp]
 800e5d8:	701a      	strb	r2, [r3, #0]
 800e5da:	e78a      	b.n	800e4f2 <ucdr_serialize_double+0x9e>
 800e5dc:	4628      	mov	r0, r5
 800e5de:	466d      	mov	r5, sp
 800e5e0:	4632      	mov	r2, r6
 800e5e2:	4629      	mov	r1, r5
 800e5e4:	f00d f8c1 	bl	801b76a <memcpy>
 800e5e8:	4642      	mov	r2, r8
 800e5ea:	19a9      	adds	r1, r5, r6
 800e5ec:	68a0      	ldr	r0, [r4, #8]
 800e5ee:	f00d f8bc 	bl	801b76a <memcpy>
 800e5f2:	e77e      	b.n	800e4f2 <ucdr_serialize_double+0x9e>

0800e5f4 <ucdr_serialize_endian_double>:
 800e5f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e5f8:	4604      	mov	r4, r0
 800e5fa:	b083      	sub	sp, #12
 800e5fc:	460e      	mov	r6, r1
 800e5fe:	2108      	movs	r1, #8
 800e600:	ed8d 0b00 	vstr	d0, [sp]
 800e604:	f000 fabc 	bl	800eb80 <ucdr_buffer_alignment>
 800e608:	4601      	mov	r1, r0
 800e60a:	4620      	mov	r0, r4
 800e60c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e610:	f000 fafe 	bl	800ec10 <ucdr_advance_buffer>
 800e614:	2108      	movs	r1, #8
 800e616:	4620      	mov	r0, r4
 800e618:	f000 fa52 	bl	800eac0 <ucdr_check_buffer_available_for>
 800e61c:	2800      	cmp	r0, #0
 800e61e:	d14d      	bne.n	800e6bc <ucdr_serialize_endian_double+0xc8>
 800e620:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800e624:	42bd      	cmp	r5, r7
 800e626:	d944      	bls.n	800e6b2 <ucdr_serialize_endian_double+0xbe>
 800e628:	6923      	ldr	r3, [r4, #16]
 800e62a:	4620      	mov	r0, r4
 800e62c:	60a5      	str	r5, [r4, #8]
 800e62e:	1bed      	subs	r5, r5, r7
 800e630:	442b      	add	r3, r5
 800e632:	f1c5 0908 	rsb	r9, r5, #8
 800e636:	6123      	str	r3, [r4, #16]
 800e638:	4649      	mov	r1, r9
 800e63a:	f000 fa4d 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800e63e:	2800      	cmp	r0, #0
 800e640:	d072      	beq.n	800e728 <ucdr_serialize_endian_double+0x134>
 800e642:	2e01      	cmp	r6, #1
 800e644:	f000 809b 	beq.w	800e77e <ucdr_serialize_endian_double+0x18a>
 800e648:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e64c:	703b      	strb	r3, [r7, #0]
 800e64e:	2d00      	cmp	r5, #0
 800e650:	d078      	beq.n	800e744 <ucdr_serialize_endian_double+0x150>
 800e652:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e656:	2d01      	cmp	r5, #1
 800e658:	707b      	strb	r3, [r7, #1]
 800e65a:	d077      	beq.n	800e74c <ucdr_serialize_endian_double+0x158>
 800e65c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e660:	2d02      	cmp	r5, #2
 800e662:	70bb      	strb	r3, [r7, #2]
 800e664:	d076      	beq.n	800e754 <ucdr_serialize_endian_double+0x160>
 800e666:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e66a:	2d03      	cmp	r5, #3
 800e66c:	70fb      	strb	r3, [r7, #3]
 800e66e:	d075      	beq.n	800e75c <ucdr_serialize_endian_double+0x168>
 800e670:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e674:	2d04      	cmp	r5, #4
 800e676:	713b      	strb	r3, [r7, #4]
 800e678:	d074      	beq.n	800e764 <ucdr_serialize_endian_double+0x170>
 800e67a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800e67e:	2d05      	cmp	r5, #5
 800e680:	717b      	strb	r3, [r7, #5]
 800e682:	d073      	beq.n	800e76c <ucdr_serialize_endian_double+0x178>
 800e684:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800e688:	2d06      	cmp	r5, #6
 800e68a:	71bb      	strb	r3, [r7, #6]
 800e68c:	d072      	beq.n	800e774 <ucdr_serialize_endian_double+0x180>
 800e68e:	f89d 3000 	ldrb.w	r3, [sp]
 800e692:	71fb      	strb	r3, [r7, #7]
 800e694:	6923      	ldr	r3, [r4, #16]
 800e696:	2108      	movs	r1, #8
 800e698:	68a2      	ldr	r2, [r4, #8]
 800e69a:	3308      	adds	r3, #8
 800e69c:	7da0      	ldrb	r0, [r4, #22]
 800e69e:	444a      	add	r2, r9
 800e6a0:	7561      	strb	r1, [r4, #21]
 800e6a2:	1b5d      	subs	r5, r3, r5
 800e6a4:	f080 0001 	eor.w	r0, r0, #1
 800e6a8:	60a2      	str	r2, [r4, #8]
 800e6aa:	6125      	str	r5, [r4, #16]
 800e6ac:	b003      	add	sp, #12
 800e6ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6b2:	2108      	movs	r1, #8
 800e6b4:	4620      	mov	r0, r4
 800e6b6:	f000 fa0f 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800e6ba:	b348      	cbz	r0, 800e710 <ucdr_serialize_endian_double+0x11c>
 800e6bc:	2e01      	cmp	r6, #1
 800e6be:	d02d      	beq.n	800e71c <ucdr_serialize_endian_double+0x128>
 800e6c0:	68a3      	ldr	r3, [r4, #8]
 800e6c2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800e6c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e6ca:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800e6ce:	7018      	strb	r0, [r3, #0]
 800e6d0:	68a3      	ldr	r3, [r4, #8]
 800e6d2:	705a      	strb	r2, [r3, #1]
 800e6d4:	68a3      	ldr	r3, [r4, #8]
 800e6d6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e6da:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800e6de:	7099      	strb	r1, [r3, #2]
 800e6e0:	68a3      	ldr	r3, [r4, #8]
 800e6e2:	70da      	strb	r2, [r3, #3]
 800e6e4:	68a3      	ldr	r3, [r4, #8]
 800e6e6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e6ea:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800e6ee:	7118      	strb	r0, [r3, #4]
 800e6f0:	68a3      	ldr	r3, [r4, #8]
 800e6f2:	715a      	strb	r2, [r3, #5]
 800e6f4:	68a3      	ldr	r3, [r4, #8]
 800e6f6:	f89d 2000 	ldrb.w	r2, [sp]
 800e6fa:	7199      	strb	r1, [r3, #6]
 800e6fc:	68a3      	ldr	r3, [r4, #8]
 800e6fe:	71da      	strb	r2, [r3, #7]
 800e700:	2108      	movs	r1, #8
 800e702:	68a2      	ldr	r2, [r4, #8]
 800e704:	6923      	ldr	r3, [r4, #16]
 800e706:	440a      	add	r2, r1
 800e708:	7561      	strb	r1, [r4, #21]
 800e70a:	440b      	add	r3, r1
 800e70c:	60a2      	str	r2, [r4, #8]
 800e70e:	6123      	str	r3, [r4, #16]
 800e710:	7da0      	ldrb	r0, [r4, #22]
 800e712:	f080 0001 	eor.w	r0, r0, #1
 800e716:	b003      	add	sp, #12
 800e718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e71c:	466b      	mov	r3, sp
 800e71e:	68a2      	ldr	r2, [r4, #8]
 800e720:	cb03      	ldmia	r3!, {r0, r1}
 800e722:	6010      	str	r0, [r2, #0]
 800e724:	6051      	str	r1, [r2, #4]
 800e726:	e7eb      	b.n	800e700 <ucdr_serialize_endian_double+0x10c>
 800e728:	68a2      	ldr	r2, [r4, #8]
 800e72a:	6923      	ldr	r3, [r4, #16]
 800e72c:	7da0      	ldrb	r0, [r4, #22]
 800e72e:	1b52      	subs	r2, r2, r5
 800e730:	1b5b      	subs	r3, r3, r5
 800e732:	f884 8015 	strb.w	r8, [r4, #21]
 800e736:	f080 0001 	eor.w	r0, r0, #1
 800e73a:	60a2      	str	r2, [r4, #8]
 800e73c:	6123      	str	r3, [r4, #16]
 800e73e:	b003      	add	sp, #12
 800e740:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e744:	68a3      	ldr	r3, [r4, #8]
 800e746:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e74a:	701a      	strb	r2, [r3, #0]
 800e74c:	68a3      	ldr	r3, [r4, #8]
 800e74e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e752:	701a      	strb	r2, [r3, #0]
 800e754:	68a3      	ldr	r3, [r4, #8]
 800e756:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e75a:	701a      	strb	r2, [r3, #0]
 800e75c:	68a3      	ldr	r3, [r4, #8]
 800e75e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e762:	701a      	strb	r2, [r3, #0]
 800e764:	68a3      	ldr	r3, [r4, #8]
 800e766:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e76a:	701a      	strb	r2, [r3, #0]
 800e76c:	68a3      	ldr	r3, [r4, #8]
 800e76e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e772:	701a      	strb	r2, [r3, #0]
 800e774:	68a3      	ldr	r3, [r4, #8]
 800e776:	f89d 2000 	ldrb.w	r2, [sp]
 800e77a:	701a      	strb	r2, [r3, #0]
 800e77c:	e78a      	b.n	800e694 <ucdr_serialize_endian_double+0xa0>
 800e77e:	466e      	mov	r6, sp
 800e780:	462a      	mov	r2, r5
 800e782:	4638      	mov	r0, r7
 800e784:	4631      	mov	r1, r6
 800e786:	f00c fff0 	bl	801b76a <memcpy>
 800e78a:	464a      	mov	r2, r9
 800e78c:	1971      	adds	r1, r6, r5
 800e78e:	68a0      	ldr	r0, [r4, #8]
 800e790:	f00c ffeb 	bl	801b76a <memcpy>
 800e794:	e77e      	b.n	800e694 <ucdr_serialize_endian_double+0xa0>
 800e796:	bf00      	nop

0800e798 <ucdr_deserialize_double>:
 800e798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e79c:	4604      	mov	r4, r0
 800e79e:	460d      	mov	r5, r1
 800e7a0:	2108      	movs	r1, #8
 800e7a2:	f000 f9ed 	bl	800eb80 <ucdr_buffer_alignment>
 800e7a6:	4601      	mov	r1, r0
 800e7a8:	4620      	mov	r0, r4
 800e7aa:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e7ae:	f000 fa2f 	bl	800ec10 <ucdr_advance_buffer>
 800e7b2:	2108      	movs	r1, #8
 800e7b4:	4620      	mov	r0, r4
 800e7b6:	f000 f983 	bl	800eac0 <ucdr_check_buffer_available_for>
 800e7ba:	2800      	cmp	r0, #0
 800e7bc:	d151      	bne.n	800e862 <ucdr_deserialize_double+0xca>
 800e7be:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800e7c2:	42be      	cmp	r6, r7
 800e7c4:	d948      	bls.n	800e858 <ucdr_deserialize_double+0xc0>
 800e7c6:	6923      	ldr	r3, [r4, #16]
 800e7c8:	4620      	mov	r0, r4
 800e7ca:	60a6      	str	r6, [r4, #8]
 800e7cc:	1bf6      	subs	r6, r6, r7
 800e7ce:	4433      	add	r3, r6
 800e7d0:	f1c6 0908 	rsb	r9, r6, #8
 800e7d4:	6123      	str	r3, [r4, #16]
 800e7d6:	4649      	mov	r1, r9
 800e7d8:	f000 f97e 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800e7dc:	2800      	cmp	r0, #0
 800e7de:	d06d      	beq.n	800e8bc <ucdr_deserialize_double+0x124>
 800e7e0:	7d23      	ldrb	r3, [r4, #20]
 800e7e2:	2b01      	cmp	r3, #1
 800e7e4:	f000 8093 	beq.w	800e90e <ucdr_deserialize_double+0x176>
 800e7e8:	79fb      	ldrb	r3, [r7, #7]
 800e7ea:	702b      	strb	r3, [r5, #0]
 800e7ec:	2e00      	cmp	r6, #0
 800e7ee:	d072      	beq.n	800e8d6 <ucdr_deserialize_double+0x13e>
 800e7f0:	79bb      	ldrb	r3, [r7, #6]
 800e7f2:	2e01      	cmp	r6, #1
 800e7f4:	706b      	strb	r3, [r5, #1]
 800e7f6:	f105 0302 	add.w	r3, r5, #2
 800e7fa:	d070      	beq.n	800e8de <ucdr_deserialize_double+0x146>
 800e7fc:	797b      	ldrb	r3, [r7, #5]
 800e7fe:	2e02      	cmp	r6, #2
 800e800:	70ab      	strb	r3, [r5, #2]
 800e802:	f105 0303 	add.w	r3, r5, #3
 800e806:	d06e      	beq.n	800e8e6 <ucdr_deserialize_double+0x14e>
 800e808:	793b      	ldrb	r3, [r7, #4]
 800e80a:	2e03      	cmp	r6, #3
 800e80c:	70eb      	strb	r3, [r5, #3]
 800e80e:	f105 0304 	add.w	r3, r5, #4
 800e812:	d06c      	beq.n	800e8ee <ucdr_deserialize_double+0x156>
 800e814:	78fb      	ldrb	r3, [r7, #3]
 800e816:	2e04      	cmp	r6, #4
 800e818:	712b      	strb	r3, [r5, #4]
 800e81a:	f105 0305 	add.w	r3, r5, #5
 800e81e:	d06a      	beq.n	800e8f6 <ucdr_deserialize_double+0x15e>
 800e820:	78bb      	ldrb	r3, [r7, #2]
 800e822:	2e05      	cmp	r6, #5
 800e824:	716b      	strb	r3, [r5, #5]
 800e826:	f105 0306 	add.w	r3, r5, #6
 800e82a:	d068      	beq.n	800e8fe <ucdr_deserialize_double+0x166>
 800e82c:	787b      	ldrb	r3, [r7, #1]
 800e82e:	2e06      	cmp	r6, #6
 800e830:	71ab      	strb	r3, [r5, #6]
 800e832:	f105 0307 	add.w	r3, r5, #7
 800e836:	d066      	beq.n	800e906 <ucdr_deserialize_double+0x16e>
 800e838:	783b      	ldrb	r3, [r7, #0]
 800e83a:	71eb      	strb	r3, [r5, #7]
 800e83c:	6923      	ldr	r3, [r4, #16]
 800e83e:	2108      	movs	r1, #8
 800e840:	68a2      	ldr	r2, [r4, #8]
 800e842:	3308      	adds	r3, #8
 800e844:	7da0      	ldrb	r0, [r4, #22]
 800e846:	444a      	add	r2, r9
 800e848:	7561      	strb	r1, [r4, #21]
 800e84a:	1b9e      	subs	r6, r3, r6
 800e84c:	f080 0001 	eor.w	r0, r0, #1
 800e850:	60a2      	str	r2, [r4, #8]
 800e852:	6126      	str	r6, [r4, #16]
 800e854:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e858:	2108      	movs	r1, #8
 800e85a:	4620      	mov	r0, r4
 800e85c:	f000 f93c 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800e860:	b310      	cbz	r0, 800e8a8 <ucdr_deserialize_double+0x110>
 800e862:	7d23      	ldrb	r3, [r4, #20]
 800e864:	2b01      	cmp	r3, #1
 800e866:	68a3      	ldr	r3, [r4, #8]
 800e868:	d023      	beq.n	800e8b2 <ucdr_deserialize_double+0x11a>
 800e86a:	79db      	ldrb	r3, [r3, #7]
 800e86c:	702b      	strb	r3, [r5, #0]
 800e86e:	68a3      	ldr	r3, [r4, #8]
 800e870:	799b      	ldrb	r3, [r3, #6]
 800e872:	706b      	strb	r3, [r5, #1]
 800e874:	68a3      	ldr	r3, [r4, #8]
 800e876:	795b      	ldrb	r3, [r3, #5]
 800e878:	70ab      	strb	r3, [r5, #2]
 800e87a:	68a3      	ldr	r3, [r4, #8]
 800e87c:	791b      	ldrb	r3, [r3, #4]
 800e87e:	70eb      	strb	r3, [r5, #3]
 800e880:	68a3      	ldr	r3, [r4, #8]
 800e882:	78db      	ldrb	r3, [r3, #3]
 800e884:	712b      	strb	r3, [r5, #4]
 800e886:	68a3      	ldr	r3, [r4, #8]
 800e888:	789b      	ldrb	r3, [r3, #2]
 800e88a:	716b      	strb	r3, [r5, #5]
 800e88c:	68a3      	ldr	r3, [r4, #8]
 800e88e:	785b      	ldrb	r3, [r3, #1]
 800e890:	71ab      	strb	r3, [r5, #6]
 800e892:	68a3      	ldr	r3, [r4, #8]
 800e894:	781b      	ldrb	r3, [r3, #0]
 800e896:	71eb      	strb	r3, [r5, #7]
 800e898:	2108      	movs	r1, #8
 800e89a:	68a2      	ldr	r2, [r4, #8]
 800e89c:	6923      	ldr	r3, [r4, #16]
 800e89e:	440a      	add	r2, r1
 800e8a0:	7561      	strb	r1, [r4, #21]
 800e8a2:	440b      	add	r3, r1
 800e8a4:	60a2      	str	r2, [r4, #8]
 800e8a6:	6123      	str	r3, [r4, #16]
 800e8a8:	7da0      	ldrb	r0, [r4, #22]
 800e8aa:	f080 0001 	eor.w	r0, r0, #1
 800e8ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8b2:	681a      	ldr	r2, [r3, #0]
 800e8b4:	685b      	ldr	r3, [r3, #4]
 800e8b6:	602a      	str	r2, [r5, #0]
 800e8b8:	606b      	str	r3, [r5, #4]
 800e8ba:	e7ed      	b.n	800e898 <ucdr_deserialize_double+0x100>
 800e8bc:	68a2      	ldr	r2, [r4, #8]
 800e8be:	6923      	ldr	r3, [r4, #16]
 800e8c0:	1b92      	subs	r2, r2, r6
 800e8c2:	7da0      	ldrb	r0, [r4, #22]
 800e8c4:	1b9b      	subs	r3, r3, r6
 800e8c6:	f884 8015 	strb.w	r8, [r4, #21]
 800e8ca:	f080 0001 	eor.w	r0, r0, #1
 800e8ce:	60a2      	str	r2, [r4, #8]
 800e8d0:	6123      	str	r3, [r4, #16]
 800e8d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8d6:	68a3      	ldr	r3, [r4, #8]
 800e8d8:	799b      	ldrb	r3, [r3, #6]
 800e8da:	706b      	strb	r3, [r5, #1]
 800e8dc:	1cab      	adds	r3, r5, #2
 800e8de:	68a2      	ldr	r2, [r4, #8]
 800e8e0:	7952      	ldrb	r2, [r2, #5]
 800e8e2:	f803 2b01 	strb.w	r2, [r3], #1
 800e8e6:	68a2      	ldr	r2, [r4, #8]
 800e8e8:	7912      	ldrb	r2, [r2, #4]
 800e8ea:	f803 2b01 	strb.w	r2, [r3], #1
 800e8ee:	68a2      	ldr	r2, [r4, #8]
 800e8f0:	78d2      	ldrb	r2, [r2, #3]
 800e8f2:	f803 2b01 	strb.w	r2, [r3], #1
 800e8f6:	68a2      	ldr	r2, [r4, #8]
 800e8f8:	7892      	ldrb	r2, [r2, #2]
 800e8fa:	f803 2b01 	strb.w	r2, [r3], #1
 800e8fe:	68a2      	ldr	r2, [r4, #8]
 800e900:	7852      	ldrb	r2, [r2, #1]
 800e902:	f803 2b01 	strb.w	r2, [r3], #1
 800e906:	68a2      	ldr	r2, [r4, #8]
 800e908:	7812      	ldrb	r2, [r2, #0]
 800e90a:	701a      	strb	r2, [r3, #0]
 800e90c:	e796      	b.n	800e83c <ucdr_deserialize_double+0xa4>
 800e90e:	4639      	mov	r1, r7
 800e910:	4632      	mov	r2, r6
 800e912:	4628      	mov	r0, r5
 800e914:	f00c ff29 	bl	801b76a <memcpy>
 800e918:	464a      	mov	r2, r9
 800e91a:	19a8      	adds	r0, r5, r6
 800e91c:	68a1      	ldr	r1, [r4, #8]
 800e91e:	f00c ff24 	bl	801b76a <memcpy>
 800e922:	e78b      	b.n	800e83c <ucdr_deserialize_double+0xa4>

0800e924 <ucdr_deserialize_endian_double>:
 800e924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e928:	4604      	mov	r4, r0
 800e92a:	460f      	mov	r7, r1
 800e92c:	2108      	movs	r1, #8
 800e92e:	4615      	mov	r5, r2
 800e930:	f000 f926 	bl	800eb80 <ucdr_buffer_alignment>
 800e934:	4601      	mov	r1, r0
 800e936:	4620      	mov	r0, r4
 800e938:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e93c:	f000 f968 	bl	800ec10 <ucdr_advance_buffer>
 800e940:	2108      	movs	r1, #8
 800e942:	4620      	mov	r0, r4
 800e944:	f000 f8bc 	bl	800eac0 <ucdr_check_buffer_available_for>
 800e948:	2800      	cmp	r0, #0
 800e94a:	d159      	bne.n	800ea00 <ucdr_deserialize_endian_double+0xdc>
 800e94c:	e9d4 6901 	ldrd	r6, r9, [r4, #4]
 800e950:	454e      	cmp	r6, r9
 800e952:	d950      	bls.n	800e9f6 <ucdr_deserialize_endian_double+0xd2>
 800e954:	6923      	ldr	r3, [r4, #16]
 800e956:	4620      	mov	r0, r4
 800e958:	60a6      	str	r6, [r4, #8]
 800e95a:	eba6 0609 	sub.w	r6, r6, r9
 800e95e:	4433      	add	r3, r6
 800e960:	f1c6 0a08 	rsb	sl, r6, #8
 800e964:	6123      	str	r3, [r4, #16]
 800e966:	4651      	mov	r1, sl
 800e968:	f000 f8b6 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800e96c:	2800      	cmp	r0, #0
 800e96e:	d073      	beq.n	800ea58 <ucdr_deserialize_endian_double+0x134>
 800e970:	2f01      	cmp	r7, #1
 800e972:	f000 809a 	beq.w	800eaaa <ucdr_deserialize_endian_double+0x186>
 800e976:	f899 3007 	ldrb.w	r3, [r9, #7]
 800e97a:	702b      	strb	r3, [r5, #0]
 800e97c:	2e00      	cmp	r6, #0
 800e97e:	d078      	beq.n	800ea72 <ucdr_deserialize_endian_double+0x14e>
 800e980:	f899 3006 	ldrb.w	r3, [r9, #6]
 800e984:	2e01      	cmp	r6, #1
 800e986:	706b      	strb	r3, [r5, #1]
 800e988:	f105 0302 	add.w	r3, r5, #2
 800e98c:	d075      	beq.n	800ea7a <ucdr_deserialize_endian_double+0x156>
 800e98e:	f899 3005 	ldrb.w	r3, [r9, #5]
 800e992:	2e02      	cmp	r6, #2
 800e994:	70ab      	strb	r3, [r5, #2]
 800e996:	f105 0303 	add.w	r3, r5, #3
 800e99a:	d072      	beq.n	800ea82 <ucdr_deserialize_endian_double+0x15e>
 800e99c:	f899 3004 	ldrb.w	r3, [r9, #4]
 800e9a0:	2e03      	cmp	r6, #3
 800e9a2:	70eb      	strb	r3, [r5, #3]
 800e9a4:	f105 0304 	add.w	r3, r5, #4
 800e9a8:	d06f      	beq.n	800ea8a <ucdr_deserialize_endian_double+0x166>
 800e9aa:	f899 3003 	ldrb.w	r3, [r9, #3]
 800e9ae:	2e04      	cmp	r6, #4
 800e9b0:	712b      	strb	r3, [r5, #4]
 800e9b2:	f105 0305 	add.w	r3, r5, #5
 800e9b6:	d06c      	beq.n	800ea92 <ucdr_deserialize_endian_double+0x16e>
 800e9b8:	f899 3002 	ldrb.w	r3, [r9, #2]
 800e9bc:	2e05      	cmp	r6, #5
 800e9be:	716b      	strb	r3, [r5, #5]
 800e9c0:	f105 0306 	add.w	r3, r5, #6
 800e9c4:	d069      	beq.n	800ea9a <ucdr_deserialize_endian_double+0x176>
 800e9c6:	f899 3001 	ldrb.w	r3, [r9, #1]
 800e9ca:	2e06      	cmp	r6, #6
 800e9cc:	71ab      	strb	r3, [r5, #6]
 800e9ce:	f105 0307 	add.w	r3, r5, #7
 800e9d2:	d066      	beq.n	800eaa2 <ucdr_deserialize_endian_double+0x17e>
 800e9d4:	f899 3000 	ldrb.w	r3, [r9]
 800e9d8:	71eb      	strb	r3, [r5, #7]
 800e9da:	6923      	ldr	r3, [r4, #16]
 800e9dc:	2108      	movs	r1, #8
 800e9de:	68a2      	ldr	r2, [r4, #8]
 800e9e0:	3308      	adds	r3, #8
 800e9e2:	7da0      	ldrb	r0, [r4, #22]
 800e9e4:	4452      	add	r2, sl
 800e9e6:	7561      	strb	r1, [r4, #21]
 800e9e8:	1b9e      	subs	r6, r3, r6
 800e9ea:	f080 0001 	eor.w	r0, r0, #1
 800e9ee:	60a2      	str	r2, [r4, #8]
 800e9f0:	6126      	str	r6, [r4, #16]
 800e9f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9f6:	2108      	movs	r1, #8
 800e9f8:	4620      	mov	r0, r4
 800e9fa:	f000 f86d 	bl	800ead8 <ucdr_check_final_buffer_behavior>
 800e9fe:	b308      	cbz	r0, 800ea44 <ucdr_deserialize_endian_double+0x120>
 800ea00:	2f01      	cmp	r7, #1
 800ea02:	68a3      	ldr	r3, [r4, #8]
 800ea04:	d023      	beq.n	800ea4e <ucdr_deserialize_endian_double+0x12a>
 800ea06:	79db      	ldrb	r3, [r3, #7]
 800ea08:	702b      	strb	r3, [r5, #0]
 800ea0a:	68a3      	ldr	r3, [r4, #8]
 800ea0c:	799b      	ldrb	r3, [r3, #6]
 800ea0e:	706b      	strb	r3, [r5, #1]
 800ea10:	68a3      	ldr	r3, [r4, #8]
 800ea12:	795b      	ldrb	r3, [r3, #5]
 800ea14:	70ab      	strb	r3, [r5, #2]
 800ea16:	68a3      	ldr	r3, [r4, #8]
 800ea18:	791b      	ldrb	r3, [r3, #4]
 800ea1a:	70eb      	strb	r3, [r5, #3]
 800ea1c:	68a3      	ldr	r3, [r4, #8]
 800ea1e:	78db      	ldrb	r3, [r3, #3]
 800ea20:	712b      	strb	r3, [r5, #4]
 800ea22:	68a3      	ldr	r3, [r4, #8]
 800ea24:	789b      	ldrb	r3, [r3, #2]
 800ea26:	716b      	strb	r3, [r5, #5]
 800ea28:	68a3      	ldr	r3, [r4, #8]
 800ea2a:	785b      	ldrb	r3, [r3, #1]
 800ea2c:	71ab      	strb	r3, [r5, #6]
 800ea2e:	68a3      	ldr	r3, [r4, #8]
 800ea30:	781b      	ldrb	r3, [r3, #0]
 800ea32:	71eb      	strb	r3, [r5, #7]
 800ea34:	2108      	movs	r1, #8
 800ea36:	68a2      	ldr	r2, [r4, #8]
 800ea38:	6923      	ldr	r3, [r4, #16]
 800ea3a:	440a      	add	r2, r1
 800ea3c:	7561      	strb	r1, [r4, #21]
 800ea3e:	440b      	add	r3, r1
 800ea40:	60a2      	str	r2, [r4, #8]
 800ea42:	6123      	str	r3, [r4, #16]
 800ea44:	7da0      	ldrb	r0, [r4, #22]
 800ea46:	f080 0001 	eor.w	r0, r0, #1
 800ea4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea4e:	681a      	ldr	r2, [r3, #0]
 800ea50:	685b      	ldr	r3, [r3, #4]
 800ea52:	602a      	str	r2, [r5, #0]
 800ea54:	606b      	str	r3, [r5, #4]
 800ea56:	e7ed      	b.n	800ea34 <ucdr_deserialize_endian_double+0x110>
 800ea58:	68a2      	ldr	r2, [r4, #8]
 800ea5a:	6923      	ldr	r3, [r4, #16]
 800ea5c:	1b92      	subs	r2, r2, r6
 800ea5e:	7da0      	ldrb	r0, [r4, #22]
 800ea60:	1b9b      	subs	r3, r3, r6
 800ea62:	f884 8015 	strb.w	r8, [r4, #21]
 800ea66:	f080 0001 	eor.w	r0, r0, #1
 800ea6a:	60a2      	str	r2, [r4, #8]
 800ea6c:	6123      	str	r3, [r4, #16]
 800ea6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea72:	68a3      	ldr	r3, [r4, #8]
 800ea74:	799b      	ldrb	r3, [r3, #6]
 800ea76:	706b      	strb	r3, [r5, #1]
 800ea78:	1cab      	adds	r3, r5, #2
 800ea7a:	68a2      	ldr	r2, [r4, #8]
 800ea7c:	7952      	ldrb	r2, [r2, #5]
 800ea7e:	f803 2b01 	strb.w	r2, [r3], #1
 800ea82:	68a2      	ldr	r2, [r4, #8]
 800ea84:	7912      	ldrb	r2, [r2, #4]
 800ea86:	f803 2b01 	strb.w	r2, [r3], #1
 800ea8a:	68a2      	ldr	r2, [r4, #8]
 800ea8c:	78d2      	ldrb	r2, [r2, #3]
 800ea8e:	f803 2b01 	strb.w	r2, [r3], #1
 800ea92:	68a2      	ldr	r2, [r4, #8]
 800ea94:	7892      	ldrb	r2, [r2, #2]
 800ea96:	f803 2b01 	strb.w	r2, [r3], #1
 800ea9a:	68a2      	ldr	r2, [r4, #8]
 800ea9c:	7852      	ldrb	r2, [r2, #1]
 800ea9e:	f803 2b01 	strb.w	r2, [r3], #1
 800eaa2:	68a2      	ldr	r2, [r4, #8]
 800eaa4:	7812      	ldrb	r2, [r2, #0]
 800eaa6:	701a      	strb	r2, [r3, #0]
 800eaa8:	e797      	b.n	800e9da <ucdr_deserialize_endian_double+0xb6>
 800eaaa:	4649      	mov	r1, r9
 800eaac:	4632      	mov	r2, r6
 800eaae:	4628      	mov	r0, r5
 800eab0:	f00c fe5b 	bl	801b76a <memcpy>
 800eab4:	4652      	mov	r2, sl
 800eab6:	19a8      	adds	r0, r5, r6
 800eab8:	68a1      	ldr	r1, [r4, #8]
 800eaba:	f00c fe56 	bl	801b76a <memcpy>
 800eabe:	e78c      	b.n	800e9da <ucdr_deserialize_endian_double+0xb6>

0800eac0 <ucdr_check_buffer_available_for>:
 800eac0:	7d83      	ldrb	r3, [r0, #22]
 800eac2:	b93b      	cbnz	r3, 800ead4 <ucdr_check_buffer_available_for+0x14>
 800eac4:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800eac8:	4419      	add	r1, r3
 800eaca:	4288      	cmp	r0, r1
 800eacc:	bf34      	ite	cc
 800eace:	2000      	movcc	r0, #0
 800ead0:	2001      	movcs	r0, #1
 800ead2:	4770      	bx	lr
 800ead4:	2000      	movs	r0, #0
 800ead6:	4770      	bx	lr

0800ead8 <ucdr_check_final_buffer_behavior>:
 800ead8:	7d83      	ldrb	r3, [r0, #22]
 800eada:	b943      	cbnz	r3, 800eaee <ucdr_check_final_buffer_behavior+0x16>
 800eadc:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800eae0:	b510      	push	{r4, lr}
 800eae2:	4291      	cmp	r1, r2
 800eae4:	4604      	mov	r4, r0
 800eae6:	d205      	bcs.n	800eaf4 <ucdr_check_final_buffer_behavior+0x1c>
 800eae8:	2301      	movs	r3, #1
 800eaea:	4618      	mov	r0, r3
 800eaec:	bd10      	pop	{r4, pc}
 800eaee:	2300      	movs	r3, #0
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	4770      	bx	lr
 800eaf4:	6982      	ldr	r2, [r0, #24]
 800eaf6:	b13a      	cbz	r2, 800eb08 <ucdr_check_final_buffer_behavior+0x30>
 800eaf8:	69c1      	ldr	r1, [r0, #28]
 800eafa:	4790      	blx	r2
 800eafc:	f080 0301 	eor.w	r3, r0, #1
 800eb00:	75a0      	strb	r0, [r4, #22]
 800eb02:	b2db      	uxtb	r3, r3
 800eb04:	4618      	mov	r0, r3
 800eb06:	bd10      	pop	{r4, pc}
 800eb08:	2001      	movs	r0, #1
 800eb0a:	75a0      	strb	r0, [r4, #22]
 800eb0c:	e7fa      	b.n	800eb04 <ucdr_check_final_buffer_behavior+0x2c>
 800eb0e:	bf00      	nop

0800eb10 <ucdr_set_on_full_buffer_callback>:
 800eb10:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800eb14:	4770      	bx	lr
 800eb16:	bf00      	nop

0800eb18 <ucdr_init_buffer_origin_offset_endian>:
 800eb18:	b410      	push	{r4}
 800eb1a:	9c01      	ldr	r4, [sp, #4]
 800eb1c:	440a      	add	r2, r1
 800eb1e:	6001      	str	r1, [r0, #0]
 800eb20:	6042      	str	r2, [r0, #4]
 800eb22:	190a      	adds	r2, r1, r4
 800eb24:	441c      	add	r4, r3
 800eb26:	6082      	str	r2, [r0, #8]
 800eb28:	2200      	movs	r2, #0
 800eb2a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800eb2e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800eb32:	7542      	strb	r2, [r0, #21]
 800eb34:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb38:	7582      	strb	r2, [r0, #22]
 800eb3a:	7503      	strb	r3, [r0, #20]
 800eb3c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800eb40:	4770      	bx	lr
 800eb42:	bf00      	nop

0800eb44 <ucdr_init_buffer_origin_offset>:
 800eb44:	b510      	push	{r4, lr}
 800eb46:	b082      	sub	sp, #8
 800eb48:	9c04      	ldr	r4, [sp, #16]
 800eb4a:	9400      	str	r4, [sp, #0]
 800eb4c:	2401      	movs	r4, #1
 800eb4e:	9401      	str	r4, [sp, #4]
 800eb50:	f7ff ffe2 	bl	800eb18 <ucdr_init_buffer_origin_offset_endian>
 800eb54:	b002      	add	sp, #8
 800eb56:	bd10      	pop	{r4, pc}

0800eb58 <ucdr_init_buffer_origin>:
 800eb58:	b510      	push	{r4, lr}
 800eb5a:	2400      	movs	r4, #0
 800eb5c:	b082      	sub	sp, #8
 800eb5e:	9400      	str	r4, [sp, #0]
 800eb60:	f7ff fff0 	bl	800eb44 <ucdr_init_buffer_origin_offset>
 800eb64:	b002      	add	sp, #8
 800eb66:	bd10      	pop	{r4, pc}

0800eb68 <ucdr_init_buffer>:
 800eb68:	2300      	movs	r3, #0
 800eb6a:	f7ff bff5 	b.w	800eb58 <ucdr_init_buffer_origin>
 800eb6e:	bf00      	nop

0800eb70 <ucdr_alignment>:
 800eb70:	fbb0 f2f1 	udiv	r2, r0, r1
 800eb74:	fb02 0011 	mls	r0, r2, r1, r0
 800eb78:	1e4b      	subs	r3, r1, #1
 800eb7a:	1a08      	subs	r0, r1, r0
 800eb7c:	4018      	ands	r0, r3
 800eb7e:	4770      	bx	lr

0800eb80 <ucdr_buffer_alignment>:
 800eb80:	7d43      	ldrb	r3, [r0, #21]
 800eb82:	428b      	cmp	r3, r1
 800eb84:	d209      	bcs.n	800eb9a <ucdr_buffer_alignment+0x1a>
 800eb86:	6903      	ldr	r3, [r0, #16]
 800eb88:	1e4a      	subs	r2, r1, #1
 800eb8a:	fbb3 f0f1 	udiv	r0, r3, r1
 800eb8e:	fb01 3010 	mls	r0, r1, r0, r3
 800eb92:	1a09      	subs	r1, r1, r0
 800eb94:	ea01 0002 	and.w	r0, r1, r2
 800eb98:	4770      	bx	lr
 800eb9a:	2000      	movs	r0, #0
 800eb9c:	4770      	bx	lr
 800eb9e:	bf00      	nop

0800eba0 <ucdr_align_to>:
 800eba0:	b538      	push	{r3, r4, r5, lr}
 800eba2:	4604      	mov	r4, r0
 800eba4:	460d      	mov	r5, r1
 800eba6:	f7ff ffeb 	bl	800eb80 <ucdr_buffer_alignment>
 800ebaa:	68a3      	ldr	r3, [r4, #8]
 800ebac:	7565      	strb	r5, [r4, #21]
 800ebae:	181a      	adds	r2, r3, r0
 800ebb0:	6923      	ldr	r3, [r4, #16]
 800ebb2:	4418      	add	r0, r3
 800ebb4:	6863      	ldr	r3, [r4, #4]
 800ebb6:	4293      	cmp	r3, r2
 800ebb8:	6120      	str	r0, [r4, #16]
 800ebba:	bf28      	it	cs
 800ebbc:	4613      	movcs	r3, r2
 800ebbe:	60a3      	str	r3, [r4, #8]
 800ebc0:	bd38      	pop	{r3, r4, r5, pc}
 800ebc2:	bf00      	nop

0800ebc4 <ucdr_buffer_length>:
 800ebc4:	6882      	ldr	r2, [r0, #8]
 800ebc6:	6800      	ldr	r0, [r0, #0]
 800ebc8:	1a10      	subs	r0, r2, r0
 800ebca:	4770      	bx	lr

0800ebcc <ucdr_buffer_remaining>:
 800ebcc:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800ebd0:	1a10      	subs	r0, r2, r0
 800ebd2:	4770      	bx	lr

0800ebd4 <ucdr_check_final_buffer_behavior_array>:
 800ebd4:	b538      	push	{r3, r4, r5, lr}
 800ebd6:	7d83      	ldrb	r3, [r0, #22]
 800ebd8:	b9a3      	cbnz	r3, 800ec04 <ucdr_check_final_buffer_behavior_array+0x30>
 800ebda:	4604      	mov	r4, r0
 800ebdc:	460d      	mov	r5, r1
 800ebde:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800ebe2:	429a      	cmp	r2, r3
 800ebe4:	d300      	bcc.n	800ebe8 <ucdr_check_final_buffer_behavior_array+0x14>
 800ebe6:	b931      	cbnz	r1, 800ebf6 <ucdr_check_final_buffer_behavior_array+0x22>
 800ebe8:	4620      	mov	r0, r4
 800ebea:	f7ff ffef 	bl	800ebcc <ucdr_buffer_remaining>
 800ebee:	42a8      	cmp	r0, r5
 800ebf0:	bf28      	it	cs
 800ebf2:	4628      	movcs	r0, r5
 800ebf4:	bd38      	pop	{r3, r4, r5, pc}
 800ebf6:	6983      	ldr	r3, [r0, #24]
 800ebf8:	b133      	cbz	r3, 800ec08 <ucdr_check_final_buffer_behavior_array+0x34>
 800ebfa:	69c1      	ldr	r1, [r0, #28]
 800ebfc:	4798      	blx	r3
 800ebfe:	75a0      	strb	r0, [r4, #22]
 800ec00:	2800      	cmp	r0, #0
 800ec02:	d0f1      	beq.n	800ebe8 <ucdr_check_final_buffer_behavior_array+0x14>
 800ec04:	2000      	movs	r0, #0
 800ec06:	bd38      	pop	{r3, r4, r5, pc}
 800ec08:	2301      	movs	r3, #1
 800ec0a:	7583      	strb	r3, [r0, #22]
 800ec0c:	e7fa      	b.n	800ec04 <ucdr_check_final_buffer_behavior_array+0x30>
 800ec0e:	bf00      	nop

0800ec10 <ucdr_advance_buffer>:
 800ec10:	b538      	push	{r3, r4, r5, lr}
 800ec12:	4604      	mov	r4, r0
 800ec14:	460d      	mov	r5, r1
 800ec16:	f7ff ff53 	bl	800eac0 <ucdr_check_buffer_available_for>
 800ec1a:	b178      	cbz	r0, 800ec3c <ucdr_advance_buffer+0x2c>
 800ec1c:	6923      	ldr	r3, [r4, #16]
 800ec1e:	68a2      	ldr	r2, [r4, #8]
 800ec20:	442b      	add	r3, r5
 800ec22:	442a      	add	r2, r5
 800ec24:	6123      	str	r3, [r4, #16]
 800ec26:	2301      	movs	r3, #1
 800ec28:	60a2      	str	r2, [r4, #8]
 800ec2a:	7563      	strb	r3, [r4, #21]
 800ec2c:	bd38      	pop	{r3, r4, r5, pc}
 800ec2e:	68a2      	ldr	r2, [r4, #8]
 800ec30:	1a2d      	subs	r5, r5, r0
 800ec32:	6923      	ldr	r3, [r4, #16]
 800ec34:	4402      	add	r2, r0
 800ec36:	4418      	add	r0, r3
 800ec38:	60a2      	str	r2, [r4, #8]
 800ec3a:	6120      	str	r0, [r4, #16]
 800ec3c:	4629      	mov	r1, r5
 800ec3e:	2201      	movs	r2, #1
 800ec40:	4620      	mov	r0, r4
 800ec42:	f7ff ffc7 	bl	800ebd4 <ucdr_check_final_buffer_behavior_array>
 800ec46:	2800      	cmp	r0, #0
 800ec48:	d1f1      	bne.n	800ec2e <ucdr_advance_buffer+0x1e>
 800ec4a:	2301      	movs	r3, #1
 800ec4c:	7563      	strb	r3, [r4, #21]
 800ec4e:	bd38      	pop	{r3, r4, r5, pc}

0800ec50 <_rclc_check_for_new_data>:
 800ec50:	2800      	cmp	r0, #0
 800ec52:	d046      	beq.n	800ece2 <_rclc_check_for_new_data+0x92>
 800ec54:	4603      	mov	r3, r0
 800ec56:	b530      	push	{r4, r5, lr}
 800ec58:	7802      	ldrb	r2, [r0, #0]
 800ec5a:	b085      	sub	sp, #20
 800ec5c:	2a0a      	cmp	r2, #10
 800ec5e:	d842      	bhi.n	800ece6 <_rclc_check_for_new_data+0x96>
 800ec60:	e8df f002 	tbb	[pc, r2]
 800ec64:	14181212 	.word	0x14181212
 800ec68:	06060614 	.word	0x06060614
 800ec6c:	2e1a      	.short	0x2e1a
 800ec6e:	16          	.byte	0x16
 800ec6f:	00          	.byte	0x00
 800ec70:	6a0a      	ldr	r2, [r1, #32]
 800ec72:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ec74:	2000      	movs	r0, #0
 800ec76:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ec7a:	1a12      	subs	r2, r2, r0
 800ec7c:	bf18      	it	ne
 800ec7e:	2201      	movne	r2, #1
 800ec80:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800ec84:	b005      	add	sp, #20
 800ec86:	bd30      	pop	{r4, r5, pc}
 800ec88:	680a      	ldr	r2, [r1, #0]
 800ec8a:	e7f2      	b.n	800ec72 <_rclc_check_for_new_data+0x22>
 800ec8c:	698a      	ldr	r2, [r1, #24]
 800ec8e:	e7f0      	b.n	800ec72 <_rclc_check_for_new_data+0x22>
 800ec90:	688a      	ldr	r2, [r1, #8]
 800ec92:	e7ee      	b.n	800ec72 <_rclc_check_for_new_data+0x22>
 800ec94:	690a      	ldr	r2, [r1, #16]
 800ec96:	e7ec      	b.n	800ec72 <_rclc_check_for_new_data+0x22>
 800ec98:	685c      	ldr	r4, [r3, #4]
 800ec9a:	4608      	mov	r0, r1
 800ec9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800eca0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eca4:	f104 0542 	add.w	r5, r4, #66	@ 0x42
 800eca8:	f104 0110 	add.w	r1, r4, #16
 800ecac:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ecb0:	9500      	str	r5, [sp, #0]
 800ecb2:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800ecb6:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800ecba:	f006 ff0d 	bl	8015ad8 <rcl_action_client_wait_set_get_entities_ready>
 800ecbe:	e7e1      	b.n	800ec84 <_rclc_check_for_new_data+0x34>
 800ecc0:	685c      	ldr	r4, [r3, #4]
 800ecc2:	4608      	mov	r0, r1
 800ecc4:	f104 0222 	add.w	r2, r4, #34	@ 0x22
 800ecc8:	f104 0123 	add.w	r1, r4, #35	@ 0x23
 800eccc:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800ecd0:	e9cd 2100 	strd	r2, r1, [sp]
 800ecd4:	f104 0220 	add.w	r2, r4, #32
 800ecd8:	f104 0110 	add.w	r1, r4, #16
 800ecdc:	f007 f916 	bl	8015f0c <rcl_action_server_wait_set_get_entities_ready>
 800ece0:	e7d0      	b.n	800ec84 <_rclc_check_for_new_data+0x34>
 800ece2:	200b      	movs	r0, #11
 800ece4:	4770      	bx	lr
 800ece6:	2001      	movs	r0, #1
 800ece8:	e7cc      	b.n	800ec84 <_rclc_check_for_new_data+0x34>
 800ecea:	bf00      	nop

0800ecec <_rclc_take_new_data>:
 800ecec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecee:	b09b      	sub	sp, #108	@ 0x6c
 800ecf0:	2800      	cmp	r0, #0
 800ecf2:	f000 8088 	beq.w	800ee06 <_rclc_take_new_data+0x11a>
 800ecf6:	7803      	ldrb	r3, [r0, #0]
 800ecf8:	4604      	mov	r4, r0
 800ecfa:	2b0a      	cmp	r3, #10
 800ecfc:	f200 8167 	bhi.w	800efce <_rclc_take_new_data+0x2e2>
 800ed00:	e8df f003 	tbb	[pc, r3]
 800ed04:	44152d2d 	.word	0x44152d2d
 800ed08:	19191944 	.word	0x19191944
 800ed0c:	065a      	.short	0x065a
 800ed0e:	15          	.byte	0x15
 800ed0f:	00          	.byte	0x00
 800ed10:	6840      	ldr	r0, [r0, #4]
 800ed12:	f890 3020 	ldrb.w	r3, [r0, #32]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	f040 80b2 	bne.w	800ee80 <_rclc_take_new_data+0x194>
 800ed1c:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	f040 80e4 	bne.w	800eeee <_rclc_take_new_data+0x202>
 800ed26:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d16f      	bne.n	800ee0e <_rclc_take_new_data+0x122>
 800ed2e:	2500      	movs	r5, #0
 800ed30:	4628      	mov	r0, r5
 800ed32:	b01b      	add	sp, #108	@ 0x6c
 800ed34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed36:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800ed38:	6a0b      	ldr	r3, [r1, #32]
 800ed3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d0f5      	beq.n	800ed2e <_rclc_take_new_data+0x42>
 800ed42:	6882      	ldr	r2, [r0, #8]
 800ed44:	f100 0110 	add.w	r1, r0, #16
 800ed48:	6840      	ldr	r0, [r0, #4]
 800ed4a:	f005 fbf3 	bl	8014534 <rcl_take_request>
 800ed4e:	4605      	mov	r5, r0
 800ed50:	2800      	cmp	r0, #0
 800ed52:	d0ec      	beq.n	800ed2e <_rclc_take_new_data+0x42>
 800ed54:	f240 2359 	movw	r3, #601	@ 0x259
 800ed58:	4298      	cmp	r0, r3
 800ed5a:	d013      	beq.n	800ed84 <_rclc_take_new_data+0x98>
 800ed5c:	e029      	b.n	800edb2 <_rclc_take_new_data+0xc6>
 800ed5e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800ed60:	680b      	ldr	r3, [r1, #0]
 800ed62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d0e1      	beq.n	800ed2e <_rclc_take_new_data+0x42>
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	aa0a      	add	r2, sp, #40	@ 0x28
 800ed6e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800ed72:	f005 fd23 	bl	80147bc <rcl_take>
 800ed76:	4605      	mov	r5, r0
 800ed78:	2800      	cmp	r0, #0
 800ed7a:	d0d9      	beq.n	800ed30 <_rclc_take_new_data+0x44>
 800ed7c:	f240 1391 	movw	r3, #401	@ 0x191
 800ed80:	4298      	cmp	r0, r3
 800ed82:	d116      	bne.n	800edb2 <_rclc_take_new_data+0xc6>
 800ed84:	2300      	movs	r3, #0
 800ed86:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800ed8a:	e7d1      	b.n	800ed30 <_rclc_take_new_data+0x44>
 800ed8c:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800ed8e:	698b      	ldr	r3, [r1, #24]
 800ed90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d0ca      	beq.n	800ed2e <_rclc_take_new_data+0x42>
 800ed98:	6882      	ldr	r2, [r0, #8]
 800ed9a:	f100 0110 	add.w	r1, r0, #16
 800ed9e:	6840      	ldr	r0, [r0, #4]
 800eda0:	f004 fd7e 	bl	80138a0 <rcl_take_response>
 800eda4:	4605      	mov	r5, r0
 800eda6:	2800      	cmp	r0, #0
 800eda8:	d0c1      	beq.n	800ed2e <_rclc_take_new_data+0x42>
 800edaa:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800edae:	4298      	cmp	r0, r3
 800edb0:	d0be      	beq.n	800ed30 <_rclc_take_new_data+0x44>
 800edb2:	f000 fedd 	bl	800fb70 <rcutils_reset_error>
 800edb6:	e7bb      	b.n	800ed30 <_rclc_take_new_data+0x44>
 800edb8:	6840      	ldr	r0, [r0, #4]
 800edba:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d17d      	bne.n	800eebe <_rclc_take_new_data+0x1d2>
 800edc2:	69c3      	ldr	r3, [r0, #28]
 800edc4:	b11b      	cbz	r3, 800edce <_rclc_take_new_data+0xe2>
 800edc6:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d144      	bne.n	800ee58 <_rclc_take_new_data+0x16c>
 800edce:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	f040 80ac 	bne.w	800ef30 <_rclc_take_new_data+0x244>
 800edd8:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d0a6      	beq.n	800ed2e <_rclc_take_new_data+0x42>
 800ede0:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800ede2:	a90a      	add	r1, sp, #40	@ 0x28
 800ede4:	3010      	adds	r0, #16
 800ede6:	f006 fd4f 	bl	8015888 <rcl_action_take_result_response>
 800edea:	4605      	mov	r5, r0
 800edec:	2800      	cmp	r0, #0
 800edee:	d1e0      	bne.n	800edb2 <_rclc_take_new_data+0xc6>
 800edf0:	6860      	ldr	r0, [r4, #4]
 800edf2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800edf6:	f007 f9b9 	bl	801616c <rclc_action_find_handle_by_result_request_sequence_number>
 800edfa:	2800      	cmp	r0, #0
 800edfc:	d098      	beq.n	800ed30 <_rclc_take_new_data+0x44>
 800edfe:	2301      	movs	r3, #1
 800ee00:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800ee04:	e794      	b.n	800ed30 <_rclc_take_new_data+0x44>
 800ee06:	250b      	movs	r5, #11
 800ee08:	4628      	mov	r0, r5
 800ee0a:	b01b      	add	sp, #108	@ 0x6c
 800ee0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee0e:	ae04      	add	r6, sp, #16
 800ee10:	3010      	adds	r0, #16
 800ee12:	aa0a      	add	r2, sp, #40	@ 0x28
 800ee14:	4631      	mov	r1, r6
 800ee16:	f006 ffad 	bl	8015d74 <rcl_action_take_cancel_request>
 800ee1a:	4605      	mov	r5, r0
 800ee1c:	2800      	cmp	r0, #0
 800ee1e:	d1c8      	bne.n	800edb2 <_rclc_take_new_data+0xc6>
 800ee20:	a90a      	add	r1, sp, #40	@ 0x28
 800ee22:	6860      	ldr	r0, [r4, #4]
 800ee24:	f007 f962 	bl	80160ec <rclc_action_find_goal_handle_by_uuid>
 800ee28:	4607      	mov	r7, r0
 800ee2a:	2800      	cmp	r0, #0
 800ee2c:	f000 80bb 	beq.w	800efa6 <_rclc_take_new_data+0x2ba>
 800ee30:	2101      	movs	r1, #1
 800ee32:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800ee36:	f007 f8e3 	bl	8016000 <rcl_action_transition_goal_state>
 800ee3a:	2803      	cmp	r0, #3
 800ee3c:	4684      	mov	ip, r0
 800ee3e:	f040 80a7 	bne.w	800ef90 <_rclc_take_new_data+0x2a4>
 800ee42:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800ee46:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ee48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ee4a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ee4e:	e884 0003 	stmia.w	r4, {r0, r1}
 800ee52:	f887 c008 	strb.w	ip, [r7, #8]
 800ee56:	e76b      	b.n	800ed30 <_rclc_take_new_data+0x44>
 800ee58:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ee5a:	3010      	adds	r0, #16
 800ee5c:	f006 fd94 	bl	8015988 <rcl_action_take_feedback>
 800ee60:	4605      	mov	r5, r0
 800ee62:	2800      	cmp	r0, #0
 800ee64:	d1a5      	bne.n	800edb2 <_rclc_take_new_data+0xc6>
 800ee66:	6860      	ldr	r0, [r4, #4]
 800ee68:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ee6a:	f007 f93f 	bl	80160ec <rclc_action_find_goal_handle_by_uuid>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	2800      	cmp	r0, #0
 800ee72:	f000 80a3 	beq.w	800efbc <_rclc_take_new_data+0x2d0>
 800ee76:	2201      	movs	r2, #1
 800ee78:	6860      	ldr	r0, [r4, #4]
 800ee7a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800ee7e:	e7a6      	b.n	800edce <_rclc_take_new_data+0xe2>
 800ee80:	f007 f90e 	bl	80160a0 <rclc_action_take_goal_handle>
 800ee84:	4606      	mov	r6, r0
 800ee86:	6860      	ldr	r0, [r4, #4]
 800ee88:	2e00      	cmp	r6, #0
 800ee8a:	f43f af47 	beq.w	800ed1c <_rclc_take_new_data+0x30>
 800ee8e:	6070      	str	r0, [r6, #4]
 800ee90:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800ee94:	69f2      	ldr	r2, [r6, #28]
 800ee96:	3010      	adds	r0, #16
 800ee98:	f006 feb4 	bl	8015c04 <rcl_action_take_goal_request>
 800ee9c:	4605      	mov	r5, r0
 800ee9e:	2800      	cmp	r0, #0
 800eea0:	f040 808e 	bne.w	800efc0 <_rclc_take_new_data+0x2d4>
 800eea4:	69f7      	ldr	r7, [r6, #28]
 800eea6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800eea8:	7235      	strb	r5, [r6, #8]
 800eeaa:	f8c6 0009 	str.w	r0, [r6, #9]
 800eeae:	f8c6 100d 	str.w	r1, [r6, #13]
 800eeb2:	6860      	ldr	r0, [r4, #4]
 800eeb4:	f8c6 2011 	str.w	r2, [r6, #17]
 800eeb8:	f8c6 3015 	str.w	r3, [r6, #21]
 800eebc:	e72e      	b.n	800ed1c <_rclc_take_new_data+0x30>
 800eebe:	aa04      	add	r2, sp, #16
 800eec0:	a90a      	add	r1, sp, #40	@ 0x28
 800eec2:	3010      	adds	r0, #16
 800eec4:	f006 fc68 	bl	8015798 <rcl_action_take_goal_response>
 800eec8:	4605      	mov	r5, r0
 800eeca:	2800      	cmp	r0, #0
 800eecc:	f47f af71 	bne.w	800edb2 <_rclc_take_new_data+0xc6>
 800eed0:	6860      	ldr	r0, [r4, #4]
 800eed2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800eed6:	f007 f937 	bl	8016148 <rclc_action_find_handle_by_goal_request_sequence_number>
 800eeda:	b130      	cbz	r0, 800eeea <_rclc_take_new_data+0x1fe>
 800eedc:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800eee0:	2201      	movs	r2, #1
 800eee2:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800eee6:	f880 2020 	strb.w	r2, [r0, #32]
 800eeea:	6860      	ldr	r0, [r4, #4]
 800eeec:	e769      	b.n	800edc2 <_rclc_take_new_data+0xd6>
 800eeee:	3010      	adds	r0, #16
 800eef0:	aa04      	add	r2, sp, #16
 800eef2:	a90a      	add	r1, sp, #40	@ 0x28
 800eef4:	f006 fefe 	bl	8015cf4 <rcl_action_take_result_request>
 800eef8:	4605      	mov	r5, r0
 800eefa:	2800      	cmp	r0, #0
 800eefc:	f47f af59 	bne.w	800edb2 <_rclc_take_new_data+0xc6>
 800ef00:	a904      	add	r1, sp, #16
 800ef02:	6860      	ldr	r0, [r4, #4]
 800ef04:	f007 f8f2 	bl	80160ec <rclc_action_find_goal_handle_by_uuid>
 800ef08:	4607      	mov	r7, r0
 800ef0a:	b160      	cbz	r0, 800ef26 <_rclc_take_new_data+0x23a>
 800ef0c:	ad0a      	add	r5, sp, #40	@ 0x28
 800ef0e:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800ef12:	f04f 0c02 	mov.w	ip, #2
 800ef16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef18:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ef1a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ef1e:	e886 0003 	stmia.w	r6, {r0, r1}
 800ef22:	f887 c008 	strb.w	ip, [r7, #8]
 800ef26:	6860      	ldr	r0, [r4, #4]
 800ef28:	2300      	movs	r3, #0
 800ef2a:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800ef2e:	e6fa      	b.n	800ed26 <_rclc_take_new_data+0x3a>
 800ef30:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800ef34:	a90a      	add	r1, sp, #40	@ 0x28
 800ef36:	3010      	adds	r0, #16
 800ef38:	f006 fce6 	bl	8015908 <rcl_action_take_cancel_response>
 800ef3c:	4605      	mov	r5, r0
 800ef3e:	2800      	cmp	r0, #0
 800ef40:	f47f af37 	bne.w	800edb2 <_rclc_take_new_data+0xc6>
 800ef44:	6860      	ldr	r0, [r4, #4]
 800ef46:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ef4a:	f007 f921 	bl	8016190 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800ef4e:	4606      	mov	r6, r0
 800ef50:	6860      	ldr	r0, [r4, #4]
 800ef52:	2e00      	cmp	r6, #0
 800ef54:	f43f af40 	beq.w	800edd8 <_rclc_take_new_data+0xec>
 800ef58:	2701      	movs	r7, #1
 800ef5a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ef5c:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	f43f af3a 	beq.w	800edd8 <_rclc_take_new_data+0xec>
 800ef64:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800ef66:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800ef6a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800ef6e:	f007 f8bd 	bl	80160ec <rclc_action_find_goal_handle_by_uuid>
 800ef72:	b138      	cbz	r0, 800ef84 <_rclc_take_new_data+0x298>
 800ef74:	6860      	ldr	r0, [r4, #4]
 800ef76:	3501      	adds	r5, #1
 800ef78:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800ef7c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ef7e:	42ab      	cmp	r3, r5
 800ef80:	d8f0      	bhi.n	800ef64 <_rclc_take_new_data+0x278>
 800ef82:	e729      	b.n	800edd8 <_rclc_take_new_data+0xec>
 800ef84:	6860      	ldr	r0, [r4, #4]
 800ef86:	3501      	adds	r5, #1
 800ef88:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ef8a:	42ab      	cmp	r3, r5
 800ef8c:	d8ea      	bhi.n	800ef64 <_rclc_take_new_data+0x278>
 800ef8e:	e723      	b.n	800edd8 <_rclc_take_new_data+0xec>
 800ef90:	ab06      	add	r3, sp, #24
 800ef92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ef94:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ef98:	2103      	movs	r1, #3
 800ef9a:	6860      	ldr	r0, [r4, #4]
 800ef9c:	e896 000c 	ldmia.w	r6, {r2, r3}
 800efa0:	f007 f96a 	bl	8016278 <rclc_action_server_goal_cancel_reject>
 800efa4:	e6c4      	b.n	800ed30 <_rclc_take_new_data+0x44>
 800efa6:	ab06      	add	r3, sp, #24
 800efa8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800efaa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800efae:	2102      	movs	r1, #2
 800efb0:	6860      	ldr	r0, [r4, #4]
 800efb2:	e896 000c 	ldmia.w	r6, {r2, r3}
 800efb6:	f007 f95f 	bl	8016278 <rclc_action_server_goal_cancel_reject>
 800efba:	e6b9      	b.n	800ed30 <_rclc_take_new_data+0x44>
 800efbc:	6860      	ldr	r0, [r4, #4]
 800efbe:	e706      	b.n	800edce <_rclc_take_new_data+0xe2>
 800efc0:	4631      	mov	r1, r6
 800efc2:	6860      	ldr	r0, [r4, #4]
 800efc4:	f007 f87c 	bl	80160c0 <rclc_action_remove_used_goal_handle>
 800efc8:	f000 fdd2 	bl	800fb70 <rcutils_reset_error>
 800efcc:	e6b0      	b.n	800ed30 <_rclc_take_new_data+0x44>
 800efce:	2501      	movs	r5, #1
 800efd0:	e6ae      	b.n	800ed30 <_rclc_take_new_data+0x44>
 800efd2:	bf00      	nop

0800efd4 <_rclc_execute.part.0>:
 800efd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efd6:	7803      	ldrb	r3, [r0, #0]
 800efd8:	b085      	sub	sp, #20
 800efda:	4604      	mov	r4, r0
 800efdc:	2b0a      	cmp	r3, #10
 800efde:	f200 8139 	bhi.w	800f254 <_rclc_execute.part.0+0x280>
 800efe2:	e8df f003 	tbb	[pc, r3]
 800efe6:	4268      	.short	0x4268
 800efe8:	06a75b4d 	.word	0x06a75b4d
 800efec:	721d0606 	.word	0x721d0606
 800eff0:	62          	.byte	0x62
 800eff1:	00          	.byte	0x00
 800eff2:	2b06      	cmp	r3, #6
 800eff4:	f000 8126 	beq.w	800f244 <_rclc_execute.part.0+0x270>
 800eff8:	2b07      	cmp	r3, #7
 800effa:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800effc:	f040 811c 	bne.w	800f238 <_rclc_execute.part.0+0x264>
 800f000:	f104 0510 	add.w	r5, r4, #16
 800f004:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800f008:	6880      	ldr	r0, [r0, #8]
 800f00a:	4798      	blx	r3
 800f00c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800f00e:	4629      	mov	r1, r5
 800f010:	6860      	ldr	r0, [r4, #4]
 800f012:	f005 facf 	bl	80145b4 <rcl_send_response>
 800f016:	4604      	mov	r4, r0
 800f018:	b378      	cbz	r0, 800f07a <_rclc_execute.part.0+0xa6>
 800f01a:	f000 fda9 	bl	800fb70 <rcutils_reset_error>
 800f01e:	e02c      	b.n	800f07a <_rclc_execute.part.0+0xa6>
 800f020:	6840      	ldr	r0, [r0, #4]
 800f022:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800f026:	2b00      	cmp	r3, #0
 800f028:	f000 808e 	beq.w	800f148 <_rclc_execute.part.0+0x174>
 800f02c:	2600      	movs	r6, #0
 800f02e:	2701      	movs	r7, #1
 800f030:	e004      	b.n	800f03c <_rclc_execute.part.0+0x68>
 800f032:	f007 f80f 	bl	8016054 <rclc_action_send_result_request>
 800f036:	b998      	cbnz	r0, 800f060 <_rclc_execute.part.0+0x8c>
 800f038:	722f      	strb	r7, [r5, #8]
 800f03a:	6860      	ldr	r0, [r4, #4]
 800f03c:	f007 f8ba 	bl	80161b4 <rclc_action_find_first_handle_with_goal_response>
 800f040:	4605      	mov	r5, r0
 800f042:	2800      	cmp	r0, #0
 800f044:	d07f      	beq.n	800f146 <_rclc_execute.part.0+0x172>
 800f046:	6863      	ldr	r3, [r4, #4]
 800f048:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f04a:	699b      	ldr	r3, [r3, #24]
 800f04c:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800f050:	f885 6020 	strb.w	r6, [r5, #32]
 800f054:	4798      	blx	r3
 800f056:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800f05a:	4628      	mov	r0, r5
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d1e8      	bne.n	800f032 <_rclc_execute.part.0+0x5e>
 800f060:	6860      	ldr	r0, [r4, #4]
 800f062:	4629      	mov	r1, r5
 800f064:	f007 f82c 	bl	80160c0 <rclc_action_remove_used_goal_handle>
 800f068:	e7e7      	b.n	800f03a <_rclc_execute.part.0+0x66>
 800f06a:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800f06e:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 800f072:	b100      	cbz	r0, 800f076 <_rclc_execute.part.0+0xa2>
 800f074:	68a0      	ldr	r0, [r4, #8]
 800f076:	2400      	movs	r4, #0
 800f078:	4798      	blx	r3
 800f07a:	4620      	mov	r0, r4
 800f07c:	b005      	add	sp, #20
 800f07e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f080:	6840      	ldr	r0, [r0, #4]
 800f082:	f005 fcaf 	bl	80149e4 <rcl_timer_call>
 800f086:	f240 3321 	movw	r3, #801	@ 0x321
 800f08a:	4604      	mov	r4, r0
 800f08c:	4298      	cmp	r0, r3
 800f08e:	d001      	beq.n	800f094 <_rclc_execute.part.0+0xc0>
 800f090:	2800      	cmp	r0, #0
 800f092:	d1c2      	bne.n	800f01a <_rclc_execute.part.0+0x46>
 800f094:	2400      	movs	r4, #0
 800f096:	4620      	mov	r0, r4
 800f098:	b005      	add	sp, #20
 800f09a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f09c:	2400      	movs	r4, #0
 800f09e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f0a0:	6880      	ldr	r0, [r0, #8]
 800f0a2:	4798      	blx	r3
 800f0a4:	4620      	mov	r0, r4
 800f0a6:	b005      	add	sp, #20
 800f0a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0aa:	2400      	movs	r4, #0
 800f0ac:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f0ae:	4798      	blx	r3
 800f0b0:	4620      	mov	r0, r4
 800f0b2:	b005      	add	sp, #20
 800f0b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0b6:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800f0ba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f0bc:	b100      	cbz	r0, 800f0c0 <_rclc_execute.part.0+0xec>
 800f0be:	68a0      	ldr	r0, [r4, #8]
 800f0c0:	2400      	movs	r4, #0
 800f0c2:	4798      	blx	r3
 800f0c4:	4620      	mov	r0, r4
 800f0c6:	b005      	add	sp, #20
 800f0c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0ca:	6840      	ldr	r0, [r0, #4]
 800f0cc:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800f0d0:	bb3b      	cbnz	r3, 800f122 <_rclc_execute.part.0+0x14e>
 800f0d2:	f890 3020 	ldrb.w	r3, [r0, #32]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d07d      	beq.n	800f1d6 <_rclc_execute.part.0+0x202>
 800f0da:	f640 0634 	movw	r6, #2100	@ 0x834
 800f0de:	2701      	movs	r7, #1
 800f0e0:	e007      	b.n	800f0f2 <_rclc_execute.part.0+0x11e>
 800f0e2:	4628      	mov	r0, r5
 800f0e4:	f007 f87e 	bl	80161e4 <rclc_action_server_response_goal_request>
 800f0e8:	4629      	mov	r1, r5
 800f0ea:	6860      	ldr	r0, [r4, #4]
 800f0ec:	f006 ffe8 	bl	80160c0 <rclc_action_remove_used_goal_handle>
 800f0f0:	6860      	ldr	r0, [r4, #4]
 800f0f2:	2100      	movs	r1, #0
 800f0f4:	f007 f810 	bl	8016118 <rclc_action_find_first_handle_by_status>
 800f0f8:	4605      	mov	r5, r0
 800f0fa:	2800      	cmp	r0, #0
 800f0fc:	d068      	beq.n	800f1d0 <_rclc_execute.part.0+0x1fc>
 800f0fe:	6863      	ldr	r3, [r4, #4]
 800f100:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f102:	699b      	ldr	r3, [r3, #24]
 800f104:	4798      	blx	r3
 800f106:	42b0      	cmp	r0, r6
 800f108:	f04f 0100 	mov.w	r1, #0
 800f10c:	d1e9      	bne.n	800f0e2 <_rclc_execute.part.0+0x10e>
 800f10e:	2101      	movs	r1, #1
 800f110:	4628      	mov	r0, r5
 800f112:	f007 f867 	bl	80161e4 <rclc_action_server_response_goal_request>
 800f116:	722f      	strb	r7, [r5, #8]
 800f118:	e7ea      	b.n	800f0f0 <_rclc_execute.part.0+0x11c>
 800f11a:	6848      	ldr	r0, [r1, #4]
 800f11c:	f006 ffd0 	bl	80160c0 <rclc_action_remove_used_goal_handle>
 800f120:	6860      	ldr	r0, [r4, #4]
 800f122:	f007 f805 	bl	8016130 <rclc_action_find_first_terminated_handle>
 800f126:	4601      	mov	r1, r0
 800f128:	2800      	cmp	r0, #0
 800f12a:	d1f6      	bne.n	800f11a <_rclc_execute.part.0+0x146>
 800f12c:	6860      	ldr	r0, [r4, #4]
 800f12e:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800f132:	e7ce      	b.n	800f0d2 <_rclc_execute.part.0+0xfe>
 800f134:	2400      	movs	r4, #0
 800f136:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f138:	f100 0110 	add.w	r1, r0, #16
 800f13c:	6880      	ldr	r0, [r0, #8]
 800f13e:	4798      	blx	r3
 800f140:	4620      	mov	r0, r4
 800f142:	b005      	add	sp, #20
 800f144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f146:	6860      	ldr	r0, [r4, #4]
 800f148:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800f14c:	b18b      	cbz	r3, 800f172 <_rclc_execute.part.0+0x19e>
 800f14e:	68c5      	ldr	r5, [r0, #12]
 800f150:	b32d      	cbz	r5, 800f19e <_rclc_execute.part.0+0x1ca>
 800f152:	2600      	movs	r6, #0
 800f154:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800f158:	b143      	cbz	r3, 800f16c <_rclc_execute.part.0+0x198>
 800f15a:	69c3      	ldr	r3, [r0, #28]
 800f15c:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800f160:	b123      	cbz	r3, 800f16c <_rclc_execute.part.0+0x198>
 800f162:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800f164:	4628      	mov	r0, r5
 800f166:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f168:	4798      	blx	r3
 800f16a:	6860      	ldr	r0, [r4, #4]
 800f16c:	682d      	ldr	r5, [r5, #0]
 800f16e:	2d00      	cmp	r5, #0
 800f170:	d1f0      	bne.n	800f154 <_rclc_execute.part.0+0x180>
 800f172:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800f176:	b193      	cbz	r3, 800f19e <_rclc_execute.part.0+0x1ca>
 800f178:	68c5      	ldr	r5, [r0, #12]
 800f17a:	b185      	cbz	r5, 800f19e <_rclc_execute.part.0+0x1ca>
 800f17c:	2600      	movs	r6, #0
 800f17e:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800f182:	b14b      	cbz	r3, 800f198 <_rclc_execute.part.0+0x1c4>
 800f184:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800f186:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800f18a:	b12b      	cbz	r3, 800f198 <_rclc_execute.part.0+0x1c4>
 800f18c:	4628      	mov	r0, r5
 800f18e:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800f192:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f194:	4798      	blx	r3
 800f196:	6860      	ldr	r0, [r4, #4]
 800f198:	682d      	ldr	r5, [r5, #0]
 800f19a:	2d00      	cmp	r5, #0
 800f19c:	d1ef      	bne.n	800f17e <_rclc_execute.part.0+0x1aa>
 800f19e:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	f43f af76 	beq.w	800f094 <_rclc_execute.part.0+0xc0>
 800f1a8:	2700      	movs	r7, #0
 800f1aa:	e00b      	b.n	800f1c4 <_rclc_execute.part.0+0x1f0>
 800f1ac:	6863      	ldr	r3, [r4, #4]
 800f1ae:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f1b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800f1b2:	6a1e      	ldr	r6, [r3, #32]
 800f1b4:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800f1b8:	47b0      	blx	r6
 800f1ba:	6860      	ldr	r0, [r4, #4]
 800f1bc:	4629      	mov	r1, r5
 800f1be:	f006 ff7f 	bl	80160c0 <rclc_action_remove_used_goal_handle>
 800f1c2:	6860      	ldr	r0, [r4, #4]
 800f1c4:	f007 f802 	bl	80161cc <rclc_action_find_first_handle_with_result_response>
 800f1c8:	4605      	mov	r5, r0
 800f1ca:	2800      	cmp	r0, #0
 800f1cc:	d1ee      	bne.n	800f1ac <_rclc_execute.part.0+0x1d8>
 800f1ce:	e761      	b.n	800f094 <_rclc_execute.part.0+0xc0>
 800f1d0:	6860      	ldr	r0, [r4, #4]
 800f1d2:	f880 5020 	strb.w	r5, [r0, #32]
 800f1d6:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	f43f af5a 	beq.w	800f094 <_rclc_execute.part.0+0xc0>
 800f1e0:	68c5      	ldr	r5, [r0, #12]
 800f1e2:	b1b5      	cbz	r5, 800f212 <_rclc_execute.part.0+0x23e>
 800f1e4:	2602      	movs	r6, #2
 800f1e6:	e001      	b.n	800f1ec <_rclc_execute.part.0+0x218>
 800f1e8:	682d      	ldr	r5, [r5, #0]
 800f1ea:	b195      	cbz	r5, 800f212 <_rclc_execute.part.0+0x23e>
 800f1ec:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800f1f0:	2b03      	cmp	r3, #3
 800f1f2:	d1f9      	bne.n	800f1e8 <_rclc_execute.part.0+0x214>
 800f1f4:	69c3      	ldr	r3, [r0, #28]
 800f1f6:	4628      	mov	r0, r5
 800f1f8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f1fa:	4798      	blx	r3
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800f202:	4628      	mov	r0, r5
 800f204:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800f208:	b143      	cbz	r3, 800f21c <_rclc_execute.part.0+0x248>
 800f20a:	f007 f809 	bl	8016220 <rclc_action_server_goal_cancel_accept>
 800f20e:	6860      	ldr	r0, [r4, #4]
 800f210:	e7ea      	b.n	800f1e8 <_rclc_execute.part.0+0x214>
 800f212:	2300      	movs	r3, #0
 800f214:	461c      	mov	r4, r3
 800f216:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800f21a:	e72e      	b.n	800f07a <_rclc_execute.part.0+0xa6>
 800f21c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800f21e:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800f222:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f226:	2101      	movs	r1, #1
 800f228:	6860      	ldr	r0, [r4, #4]
 800f22a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f22e:	f007 f823 	bl	8016278 <rclc_action_server_goal_cancel_reject>
 800f232:	722e      	strb	r6, [r5, #8]
 800f234:	6860      	ldr	r0, [r4, #4]
 800f236:	e7d7      	b.n	800f1e8 <_rclc_execute.part.0+0x214>
 800f238:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800f23a:	f104 0510 	add.w	r5, r4, #16
 800f23e:	6880      	ldr	r0, [r0, #8]
 800f240:	4798      	blx	r3
 800f242:	e6e3      	b.n	800f00c <_rclc_execute.part.0+0x38>
 800f244:	f100 0510 	add.w	r5, r0, #16
 800f248:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f24a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800f24c:	4629      	mov	r1, r5
 800f24e:	6880      	ldr	r0, [r0, #8]
 800f250:	4798      	blx	r3
 800f252:	e6db      	b.n	800f00c <_rclc_execute.part.0+0x38>
 800f254:	2401      	movs	r4, #1
 800f256:	e710      	b.n	800f07a <_rclc_execute.part.0+0xa6>

0800f258 <rclc_executor_trigger_any>:
 800f258:	2800      	cmp	r0, #0
 800f25a:	d03d      	beq.n	800f2d8 <rclc_executor_trigger_any+0x80>
 800f25c:	2900      	cmp	r1, #0
 800f25e:	d03c      	beq.n	800f2da <rclc_executor_trigger_any+0x82>
 800f260:	4603      	mov	r3, r0
 800f262:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800f266:	2200      	movs	r2, #0
 800f268:	2800      	cmp	r0, #0
 800f26a:	d035      	beq.n	800f2d8 <rclc_executor_trigger_any+0x80>
 800f26c:	b430      	push	{r4, r5}
 800f26e:	f893 c000 	ldrb.w	ip, [r3]
 800f272:	f1bc 0f08 	cmp.w	ip, #8
 800f276:	d11d      	bne.n	800f2b4 <rclc_executor_trigger_any+0x5c>
 800f278:	685c      	ldr	r4, [r3, #4]
 800f27a:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800f27c:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800f280:	d105      	bne.n	800f28e <rclc_executor_trigger_any+0x36>
 800f282:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800f286:	b910      	cbnz	r0, 800f28e <rclc_executor_trigger_any+0x36>
 800f288:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800f28c:	b128      	cbz	r0, 800f29a <rclc_executor_trigger_any+0x42>
 800f28e:	bc30      	pop	{r4, r5}
 800f290:	4770      	bx	lr
 800f292:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800f296:	2800      	cmp	r0, #0
 800f298:	d1f9      	bne.n	800f28e <rclc_executor_trigger_any+0x36>
 800f29a:	3201      	adds	r2, #1
 800f29c:	3340      	adds	r3, #64	@ 0x40
 800f29e:	4291      	cmp	r1, r2
 800f2a0:	d017      	beq.n	800f2d2 <rclc_executor_trigger_any+0x7a>
 800f2a2:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800f2a6:	2800      	cmp	r0, #0
 800f2a8:	d0f1      	beq.n	800f28e <rclc_executor_trigger_any+0x36>
 800f2aa:	f893 c000 	ldrb.w	ip, [r3]
 800f2ae:	f1bc 0f08 	cmp.w	ip, #8
 800f2b2:	d0e1      	beq.n	800f278 <rclc_executor_trigger_any+0x20>
 800f2b4:	f1bc 0f09 	cmp.w	ip, #9
 800f2b8:	d1eb      	bne.n	800f292 <rclc_executor_trigger_any+0x3a>
 800f2ba:	685c      	ldr	r4, [r3, #4]
 800f2bc:	6a25      	ldr	r5, [r4, #32]
 800f2be:	2d00      	cmp	r5, #0
 800f2c0:	d1e5      	bne.n	800f28e <rclc_executor_trigger_any+0x36>
 800f2c2:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800f2c6:	2800      	cmp	r0, #0
 800f2c8:	d1e1      	bne.n	800f28e <rclc_executor_trigger_any+0x36>
 800f2ca:	3201      	adds	r2, #1
 800f2cc:	3340      	adds	r3, #64	@ 0x40
 800f2ce:	4291      	cmp	r1, r2
 800f2d0:	d1e7      	bne.n	800f2a2 <rclc_executor_trigger_any+0x4a>
 800f2d2:	2000      	movs	r0, #0
 800f2d4:	bc30      	pop	{r4, r5}
 800f2d6:	4770      	bx	lr
 800f2d8:	4770      	bx	lr
 800f2da:	4608      	mov	r0, r1
 800f2dc:	4770      	bx	lr
 800f2de:	bf00      	nop

0800f2e0 <rclc_executor_init>:
 800f2e0:	2900      	cmp	r1, #0
 800f2e2:	d06a      	beq.n	800f3ba <rclc_executor_init+0xda>
 800f2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2e8:	4605      	mov	r5, r0
 800f2ea:	b0b0      	sub	sp, #192	@ 0xc0
 800f2ec:	2800      	cmp	r0, #0
 800f2ee:	d05c      	beq.n	800f3aa <rclc_executor_init+0xca>
 800f2f0:	4616      	mov	r6, r2
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	4688      	mov	r8, r1
 800f2f6:	461f      	mov	r7, r3
 800f2f8:	f000 fc14 	bl	800fb24 <rcutils_allocator_is_valid>
 800f2fc:	2e00      	cmp	r6, #0
 800f2fe:	d054      	beq.n	800f3aa <rclc_executor_init+0xca>
 800f300:	f080 0401 	eor.w	r4, r0, #1
 800f304:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 800f308:	d14f      	bne.n	800f3aa <rclc_executor_init+0xca>
 800f30a:	2288      	movs	r2, #136	@ 0x88
 800f30c:	4930      	ldr	r1, [pc, #192]	@ (800f3d0 <rclc_executor_init+0xf0>)
 800f30e:	a80e      	add	r0, sp, #56	@ 0x38
 800f310:	f00c fa2b 	bl	801b76a <memcpy>
 800f314:	a90e      	add	r1, sp, #56	@ 0x38
 800f316:	2288      	movs	r2, #136	@ 0x88
 800f318:	4628      	mov	r0, r5
 800f31a:	f00c fa26 	bl	801b76a <memcpy>
 800f31e:	4668      	mov	r0, sp
 800f320:	f8c5 8000 	str.w	r8, [r5]
 800f324:	60ae      	str	r6, [r5, #8]
 800f326:	f005 fc65 	bl	8014bf4 <rcl_get_zero_initialized_wait_set>
 800f32a:	46ec      	mov	ip, sp
 800f32c:	f105 0e14 	add.w	lr, r5, #20
 800f330:	f8d7 8000 	ldr.w	r8, [r7]
 800f334:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f338:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f33c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f340:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f344:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f348:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 800f3c8 <rclc_executor_init+0xe8>
 800f34c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f350:	f8dc 3000 	ldr.w	r3, [ip]
 800f354:	01b0      	lsls	r0, r6, #6
 800f356:	6939      	ldr	r1, [r7, #16]
 800f358:	f8ce 3000 	str.w	r3, [lr]
 800f35c:	612f      	str	r7, [r5, #16]
 800f35e:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800f362:	47c0      	blx	r8
 800f364:	6068      	str	r0, [r5, #4]
 800f366:	b908      	cbnz	r0, 800f36c <rclc_executor_init+0x8c>
 800f368:	e029      	b.n	800f3be <rclc_executor_init+0xde>
 800f36a:	6868      	ldr	r0, [r5, #4]
 800f36c:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800f370:	3401      	adds	r4, #1
 800f372:	4631      	mov	r1, r6
 800f374:	f000 fa7c 	bl	800f870 <rclc_executor_handle_init>
 800f378:	42a6      	cmp	r6, r4
 800f37a:	d8f6      	bhi.n	800f36a <rclc_executor_init+0x8a>
 800f37c:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800f380:	f000 fa6a 	bl	800f858 <rclc_executor_handle_counters_zero_init>
 800f384:	4a13      	ldr	r2, [pc, #76]	@ (800f3d4 <rclc_executor_init+0xf4>)
 800f386:	2300      	movs	r3, #0
 800f388:	6868      	ldr	r0, [r5, #4]
 800f38a:	e9c5 231e 	strd	r2, r3, [r5, #120]	@ 0x78
 800f38e:	b168      	cbz	r0, 800f3ac <rclc_executor_init+0xcc>
 800f390:	68ab      	ldr	r3, [r5, #8]
 800f392:	b173      	cbz	r3, 800f3b2 <rclc_executor_init+0xd2>
 800f394:	692a      	ldr	r2, [r5, #16]
 800f396:	fab2 f382 	clz	r3, r2
 800f39a:	095b      	lsrs	r3, r3, #5
 800f39c:	b14a      	cbz	r2, 800f3b2 <rclc_executor_init+0xd2>
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
 800f3a4:	b030      	add	sp, #192	@ 0xc0
 800f3a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3aa:	200b      	movs	r0, #11
 800f3ac:	b030      	add	sp, #192	@ 0xc0
 800f3ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3b2:	2000      	movs	r0, #0
 800f3b4:	b030      	add	sp, #192	@ 0xc0
 800f3b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3ba:	200b      	movs	r0, #11
 800f3bc:	4770      	bx	lr
 800f3be:	200a      	movs	r0, #10
 800f3c0:	e7f4      	b.n	800f3ac <rclc_executor_init+0xcc>
 800f3c2:	bf00      	nop
 800f3c4:	f3af 8000 	nop.w
 800f3c8:	3b9aca00 	.word	0x3b9aca00
 800f3cc:	00000000 	.word	0x00000000
 800f3d0:	0801d110 	.word	0x0801d110
 800f3d4:	0800f259 	.word	0x0800f259

0800f3d8 <rclc_executor_add_subscription>:
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	bf18      	it	ne
 800f3dc:	2a00      	cmpne	r2, #0
 800f3de:	b570      	push	{r4, r5, r6, lr}
 800f3e0:	4604      	mov	r4, r0
 800f3e2:	bf0c      	ite	eq
 800f3e4:	2001      	moveq	r0, #1
 800f3e6:	2000      	movne	r0, #0
 800f3e8:	f89d c010 	ldrb.w	ip, [sp, #16]
 800f3ec:	2900      	cmp	r1, #0
 800f3ee:	bf08      	it	eq
 800f3f0:	f040 0001 	orreq.w	r0, r0, #1
 800f3f4:	bb28      	cbnz	r0, 800f442 <rclc_executor_add_subscription+0x6a>
 800f3f6:	fab4 f584 	clz	r5, r4
 800f3fa:	096d      	lsrs	r5, r5, #5
 800f3fc:	b30c      	cbz	r4, 800f442 <rclc_executor_add_subscription+0x6a>
 800f3fe:	e9d4 0602 	ldrd	r0, r6, [r4, #8]
 800f402:	4286      	cmp	r6, r0
 800f404:	d301      	bcc.n	800f40a <rclc_executor_add_subscription+0x32>
 800f406:	2001      	movs	r0, #1
 800f408:	bd70      	pop	{r4, r5, r6, pc}
 800f40a:	6860      	ldr	r0, [r4, #4]
 800f40c:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 800f410:	f800 500e 	strb.w	r5, [r0, lr]
 800f414:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800f418:	3601      	adds	r6, #1
 800f41a:	6303      	str	r3, [r0, #48]	@ 0x30
 800f41c:	2301      	movs	r3, #1
 800f41e:	62c5      	str	r5, [r0, #44]	@ 0x2c
 800f420:	f104 0514 	add.w	r5, r4, #20
 800f424:	f880 c001 	strb.w	ip, [r0, #1]
 800f428:	8703      	strh	r3, [r0, #56]	@ 0x38
 800f42a:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800f42e:	4628      	mov	r0, r5
 800f430:	60e6      	str	r6, [r4, #12]
 800f432:	f005 fbf3 	bl	8014c1c <rcl_wait_set_is_valid>
 800f436:	b930      	cbnz	r0, 800f446 <rclc_executor_add_subscription+0x6e>
 800f438:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800f43a:	2000      	movs	r0, #0
 800f43c:	3301      	adds	r3, #1
 800f43e:	64a3      	str	r3, [r4, #72]	@ 0x48
 800f440:	bd70      	pop	{r4, r5, r6, pc}
 800f442:	200b      	movs	r0, #11
 800f444:	bd70      	pop	{r4, r5, r6, pc}
 800f446:	4628      	mov	r0, r5
 800f448:	f005 fbee 	bl	8014c28 <rcl_wait_set_fini>
 800f44c:	2800      	cmp	r0, #0
 800f44e:	d0f3      	beq.n	800f438 <rclc_executor_add_subscription+0x60>
 800f450:	bd70      	pop	{r4, r5, r6, pc}
 800f452:	bf00      	nop

0800f454 <rclc_executor_prepare>:
 800f454:	2800      	cmp	r0, #0
 800f456:	d044      	beq.n	800f4e2 <rclc_executor_prepare+0x8e>
 800f458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f45a:	f100 0514 	add.w	r5, r0, #20
 800f45e:	b09b      	sub	sp, #108	@ 0x6c
 800f460:	4604      	mov	r4, r0
 800f462:	4628      	mov	r0, r5
 800f464:	f005 fbda 	bl	8014c1c <rcl_wait_set_is_valid>
 800f468:	b110      	cbz	r0, 800f470 <rclc_executor_prepare+0x1c>
 800f46a:	2000      	movs	r0, #0
 800f46c:	b01b      	add	sp, #108	@ 0x6c
 800f46e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f470:	4628      	mov	r0, r5
 800f472:	f005 fbd9 	bl	8014c28 <rcl_wait_set_fini>
 800f476:	2800      	cmp	r0, #0
 800f478:	d130      	bne.n	800f4dc <rclc_executor_prepare+0x88>
 800f47a:	a80c      	add	r0, sp, #48	@ 0x30
 800f47c:	ae04      	add	r6, sp, #16
 800f47e:	f005 fbb9 	bl	8014bf4 <rcl_get_zero_initialized_wait_set>
 800f482:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800f486:	46ae      	mov	lr, r5
 800f488:	6927      	ldr	r7, [r4, #16]
 800f48a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f48e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f492:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f496:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f49a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f49e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f4a2:	f8dc 3000 	ldr.w	r3, [ip]
 800f4a6:	f8ce 3000 	str.w	r3, [lr]
 800f4aa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f4ac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	4628      	mov	r0, r5
 800f4b2:	6822      	ldr	r2, [r4, #0]
 800f4b4:	6033      	str	r3, [r6, #0]
 800f4b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f4b8:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800f4ba:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800f4be:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800f4c2:	e9cd 2100 	strd	r2, r1, [sp]
 800f4c6:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800f4c8:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f4ca:	f005 fead 	bl	8015228 <rcl_wait_set_init>
 800f4ce:	2800      	cmp	r0, #0
 800f4d0:	d0cc      	beq.n	800f46c <rclc_executor_prepare+0x18>
 800f4d2:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f4d4:	f000 fb4c 	bl	800fb70 <rcutils_reset_error>
 800f4d8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800f4da:	e7c7      	b.n	800f46c <rclc_executor_prepare+0x18>
 800f4dc:	f000 fb48 	bl	800fb70 <rcutils_reset_error>
 800f4e0:	e7cb      	b.n	800f47a <rclc_executor_prepare+0x26>
 800f4e2:	200b      	movs	r0, #11
 800f4e4:	4770      	bx	lr
 800f4e6:	bf00      	nop

0800f4e8 <rclc_executor_spin_some.part.0>:
 800f4e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4ec:	4605      	mov	r5, r0
 800f4ee:	4691      	mov	r9, r2
 800f4f0:	4698      	mov	r8, r3
 800f4f2:	f7ff ffaf 	bl	800f454 <rclc_executor_prepare>
 800f4f6:	f105 0614 	add.w	r6, r5, #20
 800f4fa:	4630      	mov	r0, r6
 800f4fc:	f005 fc60 	bl	8014dc0 <rcl_wait_set_clear>
 800f500:	4607      	mov	r7, r0
 800f502:	2800      	cmp	r0, #0
 800f504:	f040 80a8 	bne.w	800f658 <rclc_executor_spin_some.part.0+0x170>
 800f508:	68ab      	ldr	r3, [r5, #8]
 800f50a:	b30b      	cbz	r3, 800f550 <rclc_executor_spin_some.part.0+0x68>
 800f50c:	4604      	mov	r4, r0
 800f50e:	6869      	ldr	r1, [r5, #4]
 800f510:	01a2      	lsls	r2, r4, #6
 800f512:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800f516:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800f51a:	b1cb      	cbz	r3, 800f550 <rclc_executor_spin_some.part.0+0x68>
 800f51c:	5c8b      	ldrb	r3, [r1, r2]
 800f51e:	2b0a      	cmp	r3, #10
 800f520:	f200 80de 	bhi.w	800f6e0 <rclc_executor_spin_some.part.0+0x1f8>
 800f524:	e8df f003 	tbb	[pc, r3]
 800f528:	8da99d9d 	.word	0x8da99d9d
 800f52c:	0606068d 	.word	0x0606068d
 800f530:	c1ce      	.short	0xc1ce
 800f532:	b5          	.byte	0xb5
 800f533:	00          	.byte	0x00
 800f534:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f538:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f53c:	4630      	mov	r0, r6
 800f53e:	f005 ff8f 	bl	8015460 <rcl_wait_set_add_service>
 800f542:	2800      	cmp	r0, #0
 800f544:	f040 8087 	bne.w	800f656 <rclc_executor_spin_some.part.0+0x16e>
 800f548:	3401      	adds	r4, #1
 800f54a:	68ab      	ldr	r3, [r5, #8]
 800f54c:	429c      	cmp	r4, r3
 800f54e:	d3de      	bcc.n	800f50e <rclc_executor_spin_some.part.0+0x26>
 800f550:	4643      	mov	r3, r8
 800f552:	464a      	mov	r2, r9
 800f554:	4630      	mov	r0, r6
 800f556:	f005 ffaf 	bl	80154b8 <rcl_wait>
 800f55a:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800f55e:	2b00      	cmp	r3, #0
 800f560:	f000 80c6 	beq.w	800f6f0 <rclc_executor_spin_some.part.0+0x208>
 800f564:	2b01      	cmp	r3, #1
 800f566:	f040 80bb 	bne.w	800f6e0 <rclc_executor_spin_some.part.0+0x1f8>
 800f56a:	68ab      	ldr	r3, [r5, #8]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	f000 8159 	beq.w	800f824 <rclc_executor_spin_some.part.0+0x33c>
 800f572:	2400      	movs	r4, #0
 800f574:	f240 1991 	movw	r9, #401	@ 0x191
 800f578:	46a0      	mov	r8, r4
 800f57a:	e00a      	b.n	800f592 <rclc_executor_spin_some.part.0+0xaa>
 800f57c:	f7ff fb68 	bl	800ec50 <_rclc_check_for_new_data>
 800f580:	4604      	mov	r4, r0
 800f582:	b110      	cbz	r0, 800f58a <rclc_executor_spin_some.part.0+0xa2>
 800f584:	4548      	cmp	r0, r9
 800f586:	f040 80b1 	bne.w	800f6ec <rclc_executor_spin_some.part.0+0x204>
 800f58a:	68ab      	ldr	r3, [r5, #8]
 800f58c:	4598      	cmp	r8, r3
 800f58e:	f080 8126 	bcs.w	800f7de <rclc_executor_spin_some.part.0+0x2f6>
 800f592:	686a      	ldr	r2, [r5, #4]
 800f594:	4631      	mov	r1, r6
 800f596:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800f59a:	f108 0801 	add.w	r8, r8, #1
 800f59e:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800f5a2:	f1bc 0f00 	cmp.w	ip, #0
 800f5a6:	d1e9      	bne.n	800f57c <rclc_executor_spin_some.part.0+0x94>
 800f5a8:	4619      	mov	r1, r3
 800f5aa:	4610      	mov	r0, r2
 800f5ac:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800f5b0:	4798      	blx	r3
 800f5b2:	2800      	cmp	r0, #0
 800f5b4:	f000 809a 	beq.w	800f6ec <rclc_executor_spin_some.part.0+0x204>
 800f5b8:	68ab      	ldr	r3, [r5, #8]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	f000 8096 	beq.w	800f6ec <rclc_executor_spin_some.part.0+0x204>
 800f5c0:	f04f 0800 	mov.w	r8, #0
 800f5c4:	f240 1991 	movw	r9, #401	@ 0x191
 800f5c8:	e009      	b.n	800f5de <rclc_executor_spin_some.part.0+0xf6>
 800f5ca:	f7ff fb8f 	bl	800ecec <_rclc_take_new_data>
 800f5ce:	4604      	mov	r4, r0
 800f5d0:	b110      	cbz	r0, 800f5d8 <rclc_executor_spin_some.part.0+0xf0>
 800f5d2:	4548      	cmp	r0, r9
 800f5d4:	f040 808a 	bne.w	800f6ec <rclc_executor_spin_some.part.0+0x204>
 800f5d8:	68ab      	ldr	r3, [r5, #8]
 800f5da:	4598      	cmp	r8, r3
 800f5dc:	d209      	bcs.n	800f5f2 <rclc_executor_spin_some.part.0+0x10a>
 800f5de:	6868      	ldr	r0, [r5, #4]
 800f5e0:	4631      	mov	r1, r6
 800f5e2:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800f5e6:	f108 0801 	add.w	r8, r8, #1
 800f5ea:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800f5ee:	2a00      	cmp	r2, #0
 800f5f0:	d1eb      	bne.n	800f5ca <rclc_executor_spin_some.part.0+0xe2>
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d07a      	beq.n	800f6ec <rclc_executor_spin_some.part.0+0x204>
 800f5f6:	2600      	movs	r6, #0
 800f5f8:	e00e      	b.n	800f618 <rclc_executor_spin_some.part.0+0x130>
 800f5fa:	f812 200c 	ldrb.w	r2, [r2, ip]
 800f5fe:	2a08      	cmp	r2, #8
 800f600:	f000 80fc 	beq.w	800f7fc <rclc_executor_spin_some.part.0+0x314>
 800f604:	2a09      	cmp	r2, #9
 800f606:	f000 80ee 	beq.w	800f7e6 <rclc_executor_spin_some.part.0+0x2fe>
 800f60a:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800f60e:	b98a      	cbnz	r2, 800f634 <rclc_executor_spin_some.part.0+0x14c>
 800f610:	3601      	adds	r6, #1
 800f612:	429e      	cmp	r6, r3
 800f614:	d267      	bcs.n	800f6e6 <rclc_executor_spin_some.part.0+0x1fe>
 800f616:	2400      	movs	r4, #0
 800f618:	686a      	ldr	r2, [r5, #4]
 800f61a:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800f61e:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800f622:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800f626:	2900      	cmp	r1, #0
 800f628:	d060      	beq.n	800f6ec <rclc_executor_spin_some.part.0+0x204>
 800f62a:	7841      	ldrb	r1, [r0, #1]
 800f62c:	2900      	cmp	r1, #0
 800f62e:	d0e4      	beq.n	800f5fa <rclc_executor_spin_some.part.0+0x112>
 800f630:	2901      	cmp	r1, #1
 800f632:	d1ed      	bne.n	800f610 <rclc_executor_spin_some.part.0+0x128>
 800f634:	f7ff fcce 	bl	800efd4 <_rclc_execute.part.0>
 800f638:	2800      	cmp	r0, #0
 800f63a:	f040 80b5 	bne.w	800f7a8 <rclc_executor_spin_some.part.0+0x2c0>
 800f63e:	68ab      	ldr	r3, [r5, #8]
 800f640:	e7e6      	b.n	800f610 <rclc_executor_spin_some.part.0+0x128>
 800f642:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f646:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f64a:	4630      	mov	r0, r6
 800f64c:	f005 fedc 	bl	8015408 <rcl_wait_set_add_client>
 800f650:	2800      	cmp	r0, #0
 800f652:	f43f af79 	beq.w	800f548 <rclc_executor_spin_some.part.0+0x60>
 800f656:	4607      	mov	r7, r0
 800f658:	f000 fa8a 	bl	800fb70 <rcutils_reset_error>
 800f65c:	4638      	mov	r0, r7
 800f65e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f662:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f666:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f66a:	4630      	mov	r0, r6
 800f66c:	f005 fb7c 	bl	8014d68 <rcl_wait_set_add_subscription>
 800f670:	2800      	cmp	r0, #0
 800f672:	f43f af69 	beq.w	800f548 <rclc_executor_spin_some.part.0+0x60>
 800f676:	4607      	mov	r7, r0
 800f678:	e7ee      	b.n	800f658 <rclc_executor_spin_some.part.0+0x170>
 800f67a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f67e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f682:	4630      	mov	r0, r6
 800f684:	f005 fe90 	bl	80153a8 <rcl_wait_set_add_timer>
 800f688:	2800      	cmp	r0, #0
 800f68a:	f43f af5d 	beq.w	800f548 <rclc_executor_spin_some.part.0+0x60>
 800f68e:	4607      	mov	r7, r0
 800f690:	e7e2      	b.n	800f658 <rclc_executor_spin_some.part.0+0x170>
 800f692:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f696:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f69a:	4630      	mov	r0, r6
 800f69c:	f005 fe58 	bl	8015350 <rcl_wait_set_add_guard_condition>
 800f6a0:	2800      	cmp	r0, #0
 800f6a2:	f43f af51 	beq.w	800f548 <rclc_executor_spin_some.part.0+0x60>
 800f6a6:	4607      	mov	r7, r0
 800f6a8:	e7d6      	b.n	800f658 <rclc_executor_spin_some.part.0+0x170>
 800f6aa:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f6ae:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f6b2:	4630      	mov	r0, r6
 800f6b4:	3110      	adds	r1, #16
 800f6b6:	f006 fbd5 	bl	8015e64 <rcl_action_wait_set_add_action_server>
 800f6ba:	2800      	cmp	r0, #0
 800f6bc:	f43f af44 	beq.w	800f548 <rclc_executor_spin_some.part.0+0x60>
 800f6c0:	4607      	mov	r7, r0
 800f6c2:	e7c9      	b.n	800f658 <rclc_executor_spin_some.part.0+0x170>
 800f6c4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f6ce:	4630      	mov	r0, r6
 800f6d0:	3110      	adds	r1, #16
 800f6d2:	f006 f99d 	bl	8015a10 <rcl_action_wait_set_add_action_client>
 800f6d6:	2800      	cmp	r0, #0
 800f6d8:	f43f af36 	beq.w	800f548 <rclc_executor_spin_some.part.0+0x60>
 800f6dc:	4607      	mov	r7, r0
 800f6de:	e7bb      	b.n	800f658 <rclc_executor_spin_some.part.0+0x170>
 800f6e0:	2701      	movs	r7, #1
 800f6e2:	f000 fa45 	bl	800fb70 <rcutils_reset_error>
 800f6e6:	4638      	mov	r0, r7
 800f6e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6ec:	4627      	mov	r7, r4
 800f6ee:	e7fa      	b.n	800f6e6 <rclc_executor_spin_some.part.0+0x1fe>
 800f6f0:	68ab      	ldr	r3, [r5, #8]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	f000 8093 	beq.w	800f81e <rclc_executor_spin_some.part.0+0x336>
 800f6f8:	2400      	movs	r4, #0
 800f6fa:	f240 1991 	movw	r9, #401	@ 0x191
 800f6fe:	46a0      	mov	r8, r4
 800f700:	e008      	b.n	800f714 <rclc_executor_spin_some.part.0+0x22c>
 800f702:	f7ff faa5 	bl	800ec50 <_rclc_check_for_new_data>
 800f706:	4604      	mov	r4, r0
 800f708:	b108      	cbz	r0, 800f70e <rclc_executor_spin_some.part.0+0x226>
 800f70a:	4548      	cmp	r0, r9
 800f70c:	d1ee      	bne.n	800f6ec <rclc_executor_spin_some.part.0+0x204>
 800f70e:	68ab      	ldr	r3, [r5, #8]
 800f710:	4598      	cmp	r8, r3
 800f712:	d266      	bcs.n	800f7e2 <rclc_executor_spin_some.part.0+0x2fa>
 800f714:	686a      	ldr	r2, [r5, #4]
 800f716:	4631      	mov	r1, r6
 800f718:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800f71c:	f108 0801 	add.w	r8, r8, #1
 800f720:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800f724:	f1bc 0f00 	cmp.w	ip, #0
 800f728:	d1eb      	bne.n	800f702 <rclc_executor_spin_some.part.0+0x21a>
 800f72a:	4619      	mov	r1, r3
 800f72c:	4610      	mov	r0, r2
 800f72e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800f732:	4798      	blx	r3
 800f734:	2800      	cmp	r0, #0
 800f736:	d0d9      	beq.n	800f6ec <rclc_executor_spin_some.part.0+0x204>
 800f738:	68ab      	ldr	r3, [r5, #8]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d0d6      	beq.n	800f6ec <rclc_executor_spin_some.part.0+0x204>
 800f73e:	f04f 0a00 	mov.w	sl, #0
 800f742:	f240 1891 	movw	r8, #401	@ 0x191
 800f746:	f240 2959 	movw	r9, #601	@ 0x259
 800f74a:	e00e      	b.n	800f76a <rclc_executor_spin_some.part.0+0x282>
 800f74c:	f813 300b 	ldrb.w	r3, [r3, fp]
 800f750:	2b08      	cmp	r3, #8
 800f752:	d034      	beq.n	800f7be <rclc_executor_spin_some.part.0+0x2d6>
 800f754:	2b09      	cmp	r3, #9
 800f756:	d029      	beq.n	800f7ac <rclc_executor_spin_some.part.0+0x2c4>
 800f758:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800f75c:	bb03      	cbnz	r3, 800f7a0 <rclc_executor_spin_some.part.0+0x2b8>
 800f75e:	f10a 0a01 	add.w	sl, sl, #1
 800f762:	68ab      	ldr	r3, [r5, #8]
 800f764:	459a      	cmp	sl, r3
 800f766:	d2be      	bcs.n	800f6e6 <rclc_executor_spin_some.part.0+0x1fe>
 800f768:	2400      	movs	r4, #0
 800f76a:	6868      	ldr	r0, [r5, #4]
 800f76c:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800f770:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800f774:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d0b7      	beq.n	800f6ec <rclc_executor_spin_some.part.0+0x204>
 800f77c:	4631      	mov	r1, r6
 800f77e:	f7ff fab5 	bl	800ecec <_rclc_take_new_data>
 800f782:	2800      	cmp	r0, #0
 800f784:	bf18      	it	ne
 800f786:	4540      	cmpne	r0, r8
 800f788:	d001      	beq.n	800f78e <rclc_executor_spin_some.part.0+0x2a6>
 800f78a:	4548      	cmp	r0, r9
 800f78c:	d10c      	bne.n	800f7a8 <rclc_executor_spin_some.part.0+0x2c0>
 800f78e:	686b      	ldr	r3, [r5, #4]
 800f790:	eb13 000b 	adds.w	r0, r3, fp
 800f794:	d021      	beq.n	800f7da <rclc_executor_spin_some.part.0+0x2f2>
 800f796:	7842      	ldrb	r2, [r0, #1]
 800f798:	2a00      	cmp	r2, #0
 800f79a:	d0d7      	beq.n	800f74c <rclc_executor_spin_some.part.0+0x264>
 800f79c:	2a01      	cmp	r2, #1
 800f79e:	d1de      	bne.n	800f75e <rclc_executor_spin_some.part.0+0x276>
 800f7a0:	f7ff fc18 	bl	800efd4 <_rclc_execute.part.0>
 800f7a4:	2800      	cmp	r0, #0
 800f7a6:	d0da      	beq.n	800f75e <rclc_executor_spin_some.part.0+0x276>
 800f7a8:	4607      	mov	r7, r0
 800f7aa:	e79c      	b.n	800f6e6 <rclc_executor_spin_some.part.0+0x1fe>
 800f7ac:	6843      	ldr	r3, [r0, #4]
 800f7ae:	6a1a      	ldr	r2, [r3, #32]
 800f7b0:	2a00      	cmp	r2, #0
 800f7b2:	d1f5      	bne.n	800f7a0 <rclc_executor_spin_some.part.0+0x2b8>
 800f7b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d0d0      	beq.n	800f75e <rclc_executor_spin_some.part.0+0x276>
 800f7bc:	e7f0      	b.n	800f7a0 <rclc_executor_spin_some.part.0+0x2b8>
 800f7be:	6843      	ldr	r3, [r0, #4]
 800f7c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f7c2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800f7c6:	d1eb      	bne.n	800f7a0 <rclc_executor_spin_some.part.0+0x2b8>
 800f7c8:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800f7cc:	2a00      	cmp	r2, #0
 800f7ce:	d1e7      	bne.n	800f7a0 <rclc_executor_spin_some.part.0+0x2b8>
 800f7d0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d0c2      	beq.n	800f75e <rclc_executor_spin_some.part.0+0x276>
 800f7d8:	e7e2      	b.n	800f7a0 <rclc_executor_spin_some.part.0+0x2b8>
 800f7da:	270b      	movs	r7, #11
 800f7dc:	e783      	b.n	800f6e6 <rclc_executor_spin_some.part.0+0x1fe>
 800f7de:	686a      	ldr	r2, [r5, #4]
 800f7e0:	e6e2      	b.n	800f5a8 <rclc_executor_spin_some.part.0+0xc0>
 800f7e2:	686a      	ldr	r2, [r5, #4]
 800f7e4:	e7a1      	b.n	800f72a <rclc_executor_spin_some.part.0+0x242>
 800f7e6:	6842      	ldr	r2, [r0, #4]
 800f7e8:	6a11      	ldr	r1, [r2, #32]
 800f7ea:	2900      	cmp	r1, #0
 800f7ec:	f47f af22 	bne.w	800f634 <rclc_executor_spin_some.part.0+0x14c>
 800f7f0:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800f7f4:	2a00      	cmp	r2, #0
 800f7f6:	f43f af0b 	beq.w	800f610 <rclc_executor_spin_some.part.0+0x128>
 800f7fa:	e71b      	b.n	800f634 <rclc_executor_spin_some.part.0+0x14c>
 800f7fc:	6842      	ldr	r2, [r0, #4]
 800f7fe:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800f800:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800f804:	f47f af16 	bne.w	800f634 <rclc_executor_spin_some.part.0+0x14c>
 800f808:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800f80c:	2900      	cmp	r1, #0
 800f80e:	f47f af11 	bne.w	800f634 <rclc_executor_spin_some.part.0+0x14c>
 800f812:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800f816:	2a00      	cmp	r2, #0
 800f818:	f43f aefa 	beq.w	800f610 <rclc_executor_spin_some.part.0+0x128>
 800f81c:	e70a      	b.n	800f634 <rclc_executor_spin_some.part.0+0x14c>
 800f81e:	686a      	ldr	r2, [r5, #4]
 800f820:	461c      	mov	r4, r3
 800f822:	e782      	b.n	800f72a <rclc_executor_spin_some.part.0+0x242>
 800f824:	686a      	ldr	r2, [r5, #4]
 800f826:	461c      	mov	r4, r3
 800f828:	e6be      	b.n	800f5a8 <rclc_executor_spin_some.part.0+0xc0>
 800f82a:	bf00      	nop

0800f82c <rclc_executor_spin_some>:
 800f82c:	b190      	cbz	r0, 800f854 <rclc_executor_spin_some+0x28>
 800f82e:	b570      	push	{r4, r5, r6, lr}
 800f830:	4604      	mov	r4, r0
 800f832:	6800      	ldr	r0, [r0, #0]
 800f834:	4616      	mov	r6, r2
 800f836:	461d      	mov	r5, r3
 800f838:	f004 f88e 	bl	8013958 <rcl_context_is_valid>
 800f83c:	b130      	cbz	r0, 800f84c <rclc_executor_spin_some+0x20>
 800f83e:	4632      	mov	r2, r6
 800f840:	462b      	mov	r3, r5
 800f842:	4620      	mov	r0, r4
 800f844:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f848:	f7ff be4e 	b.w	800f4e8 <rclc_executor_spin_some.part.0>
 800f84c:	f000 f990 	bl	800fb70 <rcutils_reset_error>
 800f850:	2001      	movs	r0, #1
 800f852:	bd70      	pop	{r4, r5, r6, pc}
 800f854:	200b      	movs	r0, #11
 800f856:	4770      	bx	lr

0800f858 <rclc_executor_handle_counters_zero_init>:
 800f858:	b130      	cbz	r0, 800f868 <rclc_executor_handle_counters_zero_init+0x10>
 800f85a:	2220      	movs	r2, #32
 800f85c:	2100      	movs	r1, #0
 800f85e:	b508      	push	{r3, lr}
 800f860:	f00b feba 	bl	801b5d8 <memset>
 800f864:	2000      	movs	r0, #0
 800f866:	bd08      	pop	{r3, pc}
 800f868:	200b      	movs	r0, #11
 800f86a:	4770      	bx	lr
 800f86c:	0000      	movs	r0, r0
	...

0800f870 <rclc_executor_handle_init>:
 800f870:	4603      	mov	r3, r0
 800f872:	b178      	cbz	r0, 800f894 <rclc_executor_handle_init+0x24>
 800f874:	2200      	movs	r2, #0
 800f876:	f04f 0c0b 	mov.w	ip, #11
 800f87a:	6341      	str	r1, [r0, #52]	@ 0x34
 800f87c:	4610      	mov	r0, r2
 800f87e:	f8a3 c000 	strh.w	ip, [r3]
 800f882:	631a      	str	r2, [r3, #48]	@ 0x30
 800f884:	871a      	strh	r2, [r3, #56]	@ 0x38
 800f886:	ed9f 7b04 	vldr	d7, [pc, #16]	@ 800f898 <rclc_executor_handle_init+0x28>
 800f88a:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800f88e:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
 800f892:	4770      	bx	lr
 800f894:	200b      	movs	r0, #11
 800f896:	4770      	bx	lr
	...

0800f8a0 <rclc_support_init>:
 800f8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8a4:	b086      	sub	sp, #24
 800f8a6:	b3bb      	cbz	r3, 800f918 <rclc_support_init+0x78>
 800f8a8:	4606      	mov	r6, r0
 800f8aa:	b3a8      	cbz	r0, 800f918 <rclc_support_init+0x78>
 800f8ac:	461c      	mov	r4, r3
 800f8ae:	460f      	mov	r7, r1
 800f8b0:	4690      	mov	r8, r2
 800f8b2:	f004 f9a7 	bl	8013c04 <rcl_get_zero_initialized_init_options>
 800f8b6:	f104 050c 	add.w	r5, r4, #12
 800f8ba:	9005      	str	r0, [sp, #20]
 800f8bc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f8c0:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f8c4:	a805      	add	r0, sp, #20
 800f8c6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800f8ca:	f004 f99d 	bl	8013c08 <rcl_init_options_init>
 800f8ce:	4605      	mov	r5, r0
 800f8d0:	b9e0      	cbnz	r0, 800f90c <rclc_support_init+0x6c>
 800f8d2:	ad02      	add	r5, sp, #8
 800f8d4:	4628      	mov	r0, r5
 800f8d6:	f004 f835 	bl	8013944 <rcl_get_zero_initialized_context>
 800f8da:	4633      	mov	r3, r6
 800f8dc:	aa05      	add	r2, sp, #20
 800f8de:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f8e2:	e886 0003 	stmia.w	r6, {r0, r1}
 800f8e6:	4641      	mov	r1, r8
 800f8e8:	4638      	mov	r0, r7
 800f8ea:	f004 f89b 	bl	8013a24 <rcl_init>
 800f8ee:	4605      	mov	r5, r0
 800f8f0:	b9b8      	cbnz	r0, 800f922 <rclc_support_init+0x82>
 800f8f2:	4622      	mov	r2, r4
 800f8f4:	f106 010c 	add.w	r1, r6, #12
 800f8f8:	2003      	movs	r0, #3
 800f8fa:	60b4      	str	r4, [r6, #8]
 800f8fc:	f004 ffde 	bl	80148bc <rcl_clock_init>
 800f900:	4605      	mov	r5, r0
 800f902:	b970      	cbnz	r0, 800f922 <rclc_support_init+0x82>
 800f904:	a805      	add	r0, sp, #20
 800f906:	f004 f9e5 	bl	8013cd4 <rcl_init_options_fini>
 800f90a:	b108      	cbz	r0, 800f910 <rclc_support_init+0x70>
 800f90c:	f000 f930 	bl	800fb70 <rcutils_reset_error>
 800f910:	4628      	mov	r0, r5
 800f912:	b006      	add	sp, #24
 800f914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f918:	250b      	movs	r5, #11
 800f91a:	4628      	mov	r0, r5
 800f91c:	b006      	add	sp, #24
 800f91e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f922:	f000 f925 	bl	800fb70 <rcutils_reset_error>
 800f926:	a805      	add	r0, sp, #20
 800f928:	f004 f9d4 	bl	8013cd4 <rcl_init_options_fini>
 800f92c:	2800      	cmp	r0, #0
 800f92e:	d0ef      	beq.n	800f910 <rclc_support_init+0x70>
 800f930:	e7ec      	b.n	800f90c <rclc_support_init+0x6c>
 800f932:	bf00      	nop

0800f934 <rclc_node_init_default>:
 800f934:	2b00      	cmp	r3, #0
 800f936:	bf18      	it	ne
 800f938:	2a00      	cmpne	r2, #0
 800f93a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f93e:	4616      	mov	r6, r2
 800f940:	bf0c      	ite	eq
 800f942:	2201      	moveq	r2, #1
 800f944:	2200      	movne	r2, #0
 800f946:	b0a1      	sub	sp, #132	@ 0x84
 800f948:	2900      	cmp	r1, #0
 800f94a:	bf08      	it	eq
 800f94c:	f042 0201 	orreq.w	r2, r2, #1
 800f950:	bb22      	cbnz	r2, 800f99c <rclc_node_init_default+0x68>
 800f952:	4604      	mov	r4, r0
 800f954:	b310      	cbz	r0, 800f99c <rclc_node_init_default+0x68>
 800f956:	f10d 0810 	add.w	r8, sp, #16
 800f95a:	461f      	mov	r7, r3
 800f95c:	460d      	mov	r5, r1
 800f95e:	f10d 0918 	add.w	r9, sp, #24
 800f962:	4640      	mov	r0, r8
 800f964:	f004 fa70 	bl	8013e48 <rcl_get_zero_initialized_node>
 800f968:	e898 0003 	ldmia.w	r8, {r0, r1}
 800f96c:	e884 0003 	stmia.w	r4, {r0, r1}
 800f970:	4648      	mov	r0, r9
 800f972:	f004 fbe3 	bl	801413c <rcl_node_get_default_options>
 800f976:	4640      	mov	r0, r8
 800f978:	f004 fa66 	bl	8013e48 <rcl_get_zero_initialized_node>
 800f97c:	f8cd 9000 	str.w	r9, [sp]
 800f980:	463b      	mov	r3, r7
 800f982:	4632      	mov	r2, r6
 800f984:	e898 0003 	ldmia.w	r8, {r0, r1}
 800f988:	e884 0003 	stmia.w	r4, {r0, r1}
 800f98c:	4629      	mov	r1, r5
 800f98e:	4620      	mov	r0, r4
 800f990:	f004 fa64 	bl	8013e5c <rcl_node_init>
 800f994:	b930      	cbnz	r0, 800f9a4 <rclc_node_init_default+0x70>
 800f996:	b021      	add	sp, #132	@ 0x84
 800f998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f99c:	200b      	movs	r0, #11
 800f99e:	b021      	add	sp, #132	@ 0x84
 800f9a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9a4:	9003      	str	r0, [sp, #12]
 800f9a6:	f000 f8e3 	bl	800fb70 <rcutils_reset_error>
 800f9aa:	f000 f8e1 	bl	800fb70 <rcutils_reset_error>
 800f9ae:	9803      	ldr	r0, [sp, #12]
 800f9b0:	b021      	add	sp, #132	@ 0x84
 800f9b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9b6:	bf00      	nop

0800f9b8 <rclc_publisher_init_best_effort>:
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	bf18      	it	ne
 800f9bc:	2a00      	cmpne	r2, #0
 800f9be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9c2:	4616      	mov	r6, r2
 800f9c4:	bf0c      	ite	eq
 800f9c6:	2201      	moveq	r2, #1
 800f9c8:	2200      	movne	r2, #0
 800f9ca:	b0a0      	sub	sp, #128	@ 0x80
 800f9cc:	2900      	cmp	r1, #0
 800f9ce:	bf08      	it	eq
 800f9d0:	f042 0201 	orreq.w	r2, r2, #1
 800f9d4:	bb1a      	cbnz	r2, 800fa1e <rclc_publisher_init_best_effort+0x66>
 800f9d6:	4604      	mov	r4, r0
 800f9d8:	b308      	cbz	r0, 800fa1e <rclc_publisher_init_best_effort+0x66>
 800f9da:	f10d 0810 	add.w	r8, sp, #16
 800f9de:	461f      	mov	r7, r3
 800f9e0:	460d      	mov	r5, r1
 800f9e2:	f004 fcb1 	bl	8014348 <rcl_get_zero_initialized_publisher>
 800f9e6:	6020      	str	r0, [r4, #0]
 800f9e8:	4640      	mov	r0, r8
 800f9ea:	f004 fd4d 	bl	8014488 <rcl_publisher_get_default_options>
 800f9ee:	2250      	movs	r2, #80	@ 0x50
 800f9f0:	490d      	ldr	r1, [pc, #52]	@ (800fa28 <rclc_publisher_init_best_effort+0x70>)
 800f9f2:	4640      	mov	r0, r8
 800f9f4:	f00b feb9 	bl	801b76a <memcpy>
 800f9f8:	463b      	mov	r3, r7
 800f9fa:	4632      	mov	r2, r6
 800f9fc:	4629      	mov	r1, r5
 800f9fe:	4620      	mov	r0, r4
 800fa00:	f8cd 8000 	str.w	r8, [sp]
 800fa04:	f004 fca6 	bl	8014354 <rcl_publisher_init>
 800fa08:	b910      	cbnz	r0, 800fa10 <rclc_publisher_init_best_effort+0x58>
 800fa0a:	b020      	add	sp, #128	@ 0x80
 800fa0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa10:	9003      	str	r0, [sp, #12]
 800fa12:	f000 f8ad 	bl	800fb70 <rcutils_reset_error>
 800fa16:	9803      	ldr	r0, [sp, #12]
 800fa18:	b020      	add	sp, #128	@ 0x80
 800fa1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa1e:	200b      	movs	r0, #11
 800fa20:	b020      	add	sp, #128	@ 0x80
 800fa22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa26:	bf00      	nop
 800fa28:	0801d198 	.word	0x0801d198

0800fa2c <rclc_subscription_init_best_effort>:
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	bf18      	it	ne
 800fa30:	2a00      	cmpne	r2, #0
 800fa32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa36:	4616      	mov	r6, r2
 800fa38:	bf0c      	ite	eq
 800fa3a:	2201      	moveq	r2, #1
 800fa3c:	2200      	movne	r2, #0
 800fa3e:	b0a0      	sub	sp, #128	@ 0x80
 800fa40:	2900      	cmp	r1, #0
 800fa42:	bf08      	it	eq
 800fa44:	f042 0201 	orreq.w	r2, r2, #1
 800fa48:	bb1a      	cbnz	r2, 800fa92 <rclc_subscription_init_best_effort+0x66>
 800fa4a:	4604      	mov	r4, r0
 800fa4c:	b308      	cbz	r0, 800fa92 <rclc_subscription_init_best_effort+0x66>
 800fa4e:	f10d 0810 	add.w	r8, sp, #16
 800fa52:	461f      	mov	r7, r3
 800fa54:	460d      	mov	r5, r1
 800fa56:	f004 fdcf 	bl	80145f8 <rcl_get_zero_initialized_subscription>
 800fa5a:	6020      	str	r0, [r4, #0]
 800fa5c:	4640      	mov	r0, r8
 800fa5e:	f004 fe7f 	bl	8014760 <rcl_subscription_get_default_options>
 800fa62:	2250      	movs	r2, #80	@ 0x50
 800fa64:	490d      	ldr	r1, [pc, #52]	@ (800fa9c <rclc_subscription_init_best_effort+0x70>)
 800fa66:	4640      	mov	r0, r8
 800fa68:	f00b fe7f 	bl	801b76a <memcpy>
 800fa6c:	463b      	mov	r3, r7
 800fa6e:	4632      	mov	r2, r6
 800fa70:	4629      	mov	r1, r5
 800fa72:	4620      	mov	r0, r4
 800fa74:	f8cd 8000 	str.w	r8, [sp]
 800fa78:	f004 fdc4 	bl	8014604 <rcl_subscription_init>
 800fa7c:	b910      	cbnz	r0, 800fa84 <rclc_subscription_init_best_effort+0x58>
 800fa7e:	b020      	add	sp, #128	@ 0x80
 800fa80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa84:	9003      	str	r0, [sp, #12]
 800fa86:	f000 f873 	bl	800fb70 <rcutils_reset_error>
 800fa8a:	9803      	ldr	r0, [sp, #12]
 800fa8c:	b020      	add	sp, #128	@ 0x80
 800fa8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa92:	200b      	movs	r0, #11
 800fa94:	b020      	add	sp, #128	@ 0x80
 800fa96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa9a:	bf00      	nop
 800fa9c:	0801d1e8 	.word	0x0801d1e8

0800faa0 <__default_zero_allocate>:
 800faa0:	f00b b8bc 	b.w	801ac1c <calloc>

0800faa4 <__default_reallocate>:
 800faa4:	f00b ba5a 	b.w	801af5c <realloc>

0800faa8 <__default_deallocate>:
 800faa8:	f00b b936 	b.w	801ad18 <free>

0800faac <__default_allocate>:
 800faac:	f00b b92c 	b.w	801ad08 <malloc>

0800fab0 <rcutils_get_zero_initialized_allocator>:
 800fab0:	b510      	push	{r4, lr}
 800fab2:	4c05      	ldr	r4, [pc, #20]	@ (800fac8 <rcutils_get_zero_initialized_allocator+0x18>)
 800fab4:	4686      	mov	lr, r0
 800fab6:	4684      	mov	ip, r0
 800fab8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800faba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fabe:	6823      	ldr	r3, [r4, #0]
 800fac0:	4670      	mov	r0, lr
 800fac2:	f8cc 3000 	str.w	r3, [ip]
 800fac6:	bd10      	pop	{r4, pc}
 800fac8:	0801d238 	.word	0x0801d238

0800facc <rcutils_set_default_allocator>:
 800facc:	b1a8      	cbz	r0, 800fafa <rcutils_set_default_allocator+0x2e>
 800face:	6802      	ldr	r2, [r0, #0]
 800fad0:	b1a2      	cbz	r2, 800fafc <rcutils_set_default_allocator+0x30>
 800fad2:	6841      	ldr	r1, [r0, #4]
 800fad4:	b1a1      	cbz	r1, 800fb00 <rcutils_set_default_allocator+0x34>
 800fad6:	b410      	push	{r4}
 800fad8:	68c4      	ldr	r4, [r0, #12]
 800fada:	b164      	cbz	r4, 800faf6 <rcutils_set_default_allocator+0x2a>
 800fadc:	6880      	ldr	r0, [r0, #8]
 800fade:	b138      	cbz	r0, 800faf0 <rcutils_set_default_allocator+0x24>
 800fae0:	4b08      	ldr	r3, [pc, #32]	@ (800fb04 <rcutils_set_default_allocator+0x38>)
 800fae2:	601a      	str	r2, [r3, #0]
 800fae4:	2200      	movs	r2, #0
 800fae6:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800faea:	2001      	movs	r0, #1
 800faec:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800faf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800faf4:	4770      	bx	lr
 800faf6:	4620      	mov	r0, r4
 800faf8:	e7fa      	b.n	800faf0 <rcutils_set_default_allocator+0x24>
 800fafa:	4770      	bx	lr
 800fafc:	4610      	mov	r0, r2
 800fafe:	4770      	bx	lr
 800fb00:	4608      	mov	r0, r1
 800fb02:	4770      	bx	lr
 800fb04:	200001e8 	.word	0x200001e8

0800fb08 <rcutils_get_default_allocator>:
 800fb08:	b510      	push	{r4, lr}
 800fb0a:	4c05      	ldr	r4, [pc, #20]	@ (800fb20 <rcutils_get_default_allocator+0x18>)
 800fb0c:	4686      	mov	lr, r0
 800fb0e:	4684      	mov	ip, r0
 800fb10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fb12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fb16:	6823      	ldr	r3, [r4, #0]
 800fb18:	4670      	mov	r0, lr
 800fb1a:	f8cc 3000 	str.w	r3, [ip]
 800fb1e:	bd10      	pop	{r4, pc}
 800fb20:	200001e8 	.word	0x200001e8

0800fb24 <rcutils_allocator_is_valid>:
 800fb24:	b158      	cbz	r0, 800fb3e <rcutils_allocator_is_valid+0x1a>
 800fb26:	6803      	ldr	r3, [r0, #0]
 800fb28:	b143      	cbz	r3, 800fb3c <rcutils_allocator_is_valid+0x18>
 800fb2a:	6843      	ldr	r3, [r0, #4]
 800fb2c:	b133      	cbz	r3, 800fb3c <rcutils_allocator_is_valid+0x18>
 800fb2e:	68c3      	ldr	r3, [r0, #12]
 800fb30:	b123      	cbz	r3, 800fb3c <rcutils_allocator_is_valid+0x18>
 800fb32:	6880      	ldr	r0, [r0, #8]
 800fb34:	3800      	subs	r0, #0
 800fb36:	bf18      	it	ne
 800fb38:	2001      	movne	r0, #1
 800fb3a:	4770      	bx	lr
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	4770      	bx	lr

0800fb40 <rcutils_get_error_string>:
 800fb40:	4b06      	ldr	r3, [pc, #24]	@ (800fb5c <rcutils_get_error_string+0x1c>)
 800fb42:	781b      	ldrb	r3, [r3, #0]
 800fb44:	b13b      	cbz	r3, 800fb56 <rcutils_get_error_string+0x16>
 800fb46:	4b06      	ldr	r3, [pc, #24]	@ (800fb60 <rcutils_get_error_string+0x20>)
 800fb48:	781a      	ldrb	r2, [r3, #0]
 800fb4a:	b90a      	cbnz	r2, 800fb50 <rcutils_get_error_string+0x10>
 800fb4c:	2201      	movs	r2, #1
 800fb4e:	701a      	strb	r2, [r3, #0]
 800fb50:	4b04      	ldr	r3, [pc, #16]	@ (800fb64 <rcutils_get_error_string+0x24>)
 800fb52:	7818      	ldrb	r0, [r3, #0]
 800fb54:	4770      	bx	lr
 800fb56:	4b04      	ldr	r3, [pc, #16]	@ (800fb68 <rcutils_get_error_string+0x28>)
 800fb58:	7818      	ldrb	r0, [r3, #0]
 800fb5a:	4770      	bx	lr
 800fb5c:	2000a7d8 	.word	0x2000a7d8
 800fb60:	2000a7f1 	.word	0x2000a7f1
 800fb64:	2000a7f0 	.word	0x2000a7f0
 800fb68:	0801ca98 	.word	0x0801ca98
 800fb6c:	00000000 	.word	0x00000000

0800fb70 <rcutils_reset_error>:
 800fb70:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800fb90 <rcutils_reset_error+0x20>
 800fb74:	2300      	movs	r3, #0
 800fb76:	4a08      	ldr	r2, [pc, #32]	@ (800fb98 <rcutils_reset_error+0x28>)
 800fb78:	4808      	ldr	r0, [pc, #32]	@ (800fb9c <rcutils_reset_error+0x2c>)
 800fb7a:	8013      	strh	r3, [r2, #0]
 800fb7c:	4908      	ldr	r1, [pc, #32]	@ (800fba0 <rcutils_reset_error+0x30>)
 800fb7e:	7003      	strb	r3, [r0, #0]
 800fb80:	700b      	strb	r3, [r1, #0]
 800fb82:	ed82 7b02 	vstr	d7, [r2, #8]
 800fb86:	4a07      	ldr	r2, [pc, #28]	@ (800fba4 <rcutils_reset_error+0x34>)
 800fb88:	7013      	strb	r3, [r2, #0]
 800fb8a:	4770      	bx	lr
 800fb8c:	f3af 8000 	nop.w
	...
 800fb98:	2000a7e0 	.word	0x2000a7e0
 800fb9c:	2000a7f1 	.word	0x2000a7f1
 800fba0:	2000a7f0 	.word	0x2000a7f0
 800fba4:	2000a7d8 	.word	0x2000a7d8

0800fba8 <rcutils_system_time_now>:
 800fba8:	b300      	cbz	r0, 800fbec <rcutils_system_time_now+0x44>
 800fbaa:	b570      	push	{r4, r5, r6, lr}
 800fbac:	b084      	sub	sp, #16
 800fbae:	4604      	mov	r4, r0
 800fbb0:	2001      	movs	r0, #1
 800fbb2:	4669      	mov	r1, sp
 800fbb4:	f7f3 fc50 	bl	8003458 <clock_gettime>
 800fbb8:	e9dd 3100 	ldrd	r3, r1, [sp]
 800fbbc:	2900      	cmp	r1, #0
 800fbbe:	db12      	blt.n	800fbe6 <rcutils_system_time_now+0x3e>
 800fbc0:	ea53 0201 	orrs.w	r2, r3, r1
 800fbc4:	9d02      	ldr	r5, [sp, #8]
 800fbc6:	d101      	bne.n	800fbcc <rcutils_system_time_now+0x24>
 800fbc8:	2d00      	cmp	r5, #0
 800fbca:	db0c      	blt.n	800fbe6 <rcutils_system_time_now+0x3e>
 800fbcc:	4e08      	ldr	r6, [pc, #32]	@ (800fbf0 <rcutils_system_time_now+0x48>)
 800fbce:	2000      	movs	r0, #0
 800fbd0:	fba3 3206 	umull	r3, r2, r3, r6
 800fbd4:	195b      	adds	r3, r3, r5
 800fbd6:	fb06 2201 	mla	r2, r6, r1, r2
 800fbda:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800fbde:	e9c4 3200 	strd	r3, r2, [r4]
 800fbe2:	b004      	add	sp, #16
 800fbe4:	bd70      	pop	{r4, r5, r6, pc}
 800fbe6:	2002      	movs	r0, #2
 800fbe8:	b004      	add	sp, #16
 800fbea:	bd70      	pop	{r4, r5, r6, pc}
 800fbec:	200b      	movs	r0, #11
 800fbee:	4770      	bx	lr
 800fbf0:	3b9aca00 	.word	0x3b9aca00

0800fbf4 <rcutils_steady_time_now>:
 800fbf4:	b300      	cbz	r0, 800fc38 <rcutils_steady_time_now+0x44>
 800fbf6:	b570      	push	{r4, r5, r6, lr}
 800fbf8:	b084      	sub	sp, #16
 800fbfa:	4604      	mov	r4, r0
 800fbfc:	2000      	movs	r0, #0
 800fbfe:	4669      	mov	r1, sp
 800fc00:	f7f3 fc2a 	bl	8003458 <clock_gettime>
 800fc04:	e9dd 3100 	ldrd	r3, r1, [sp]
 800fc08:	2900      	cmp	r1, #0
 800fc0a:	db12      	blt.n	800fc32 <rcutils_steady_time_now+0x3e>
 800fc0c:	ea53 0201 	orrs.w	r2, r3, r1
 800fc10:	9d02      	ldr	r5, [sp, #8]
 800fc12:	d101      	bne.n	800fc18 <rcutils_steady_time_now+0x24>
 800fc14:	2d00      	cmp	r5, #0
 800fc16:	db0c      	blt.n	800fc32 <rcutils_steady_time_now+0x3e>
 800fc18:	4e08      	ldr	r6, [pc, #32]	@ (800fc3c <rcutils_steady_time_now+0x48>)
 800fc1a:	2000      	movs	r0, #0
 800fc1c:	fba3 3206 	umull	r3, r2, r3, r6
 800fc20:	195b      	adds	r3, r3, r5
 800fc22:	fb06 2201 	mla	r2, r6, r1, r2
 800fc26:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800fc2a:	e9c4 3200 	strd	r3, r2, [r4]
 800fc2e:	b004      	add	sp, #16
 800fc30:	bd70      	pop	{r4, r5, r6, pc}
 800fc32:	2002      	movs	r0, #2
 800fc34:	b004      	add	sp, #16
 800fc36:	bd70      	pop	{r4, r5, r6, pc}
 800fc38:	200b      	movs	r0, #11
 800fc3a:	4770      	bx	lr
 800fc3c:	3b9aca00 	.word	0x3b9aca00

0800fc40 <rmw_uros_set_custom_transport>:
 800fc40:	b470      	push	{r4, r5, r6}
 800fc42:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800fc46:	b162      	cbz	r2, 800fc62 <rmw_uros_set_custom_transport+0x22>
 800fc48:	b15b      	cbz	r3, 800fc62 <rmw_uros_set_custom_transport+0x22>
 800fc4a:	b155      	cbz	r5, 800fc62 <rmw_uros_set_custom_transport+0x22>
 800fc4c:	b14e      	cbz	r6, 800fc62 <rmw_uros_set_custom_transport+0x22>
 800fc4e:	4c06      	ldr	r4, [pc, #24]	@ (800fc68 <rmw_uros_set_custom_transport+0x28>)
 800fc50:	7020      	strb	r0, [r4, #0]
 800fc52:	2000      	movs	r0, #0
 800fc54:	6166      	str	r6, [r4, #20]
 800fc56:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800fc5a:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800fc5e:	bc70      	pop	{r4, r5, r6}
 800fc60:	4770      	bx	lr
 800fc62:	200b      	movs	r0, #11
 800fc64:	bc70      	pop	{r4, r5, r6}
 800fc66:	4770      	bx	lr
 800fc68:	2000a7f4 	.word	0x2000a7f4

0800fc6c <rmw_uros_epoch_millis>:
 800fc6c:	4b05      	ldr	r3, [pc, #20]	@ (800fc84 <rmw_uros_epoch_millis+0x18>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	b123      	cbz	r3, 800fc7c <rmw_uros_epoch_millis+0x10>
 800fc72:	6898      	ldr	r0, [r3, #8]
 800fc74:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fc78:	f001 bbfa 	b.w	8011470 <uxr_epoch_millis>
 800fc7c:	2000      	movs	r0, #0
 800fc7e:	2100      	movs	r1, #0
 800fc80:	4770      	bx	lr
 800fc82:	bf00      	nop
 800fc84:	2000f10c 	.word	0x2000f10c

0800fc88 <rmw_uros_epoch_nanos>:
 800fc88:	4b05      	ldr	r3, [pc, #20]	@ (800fca0 <rmw_uros_epoch_nanos+0x18>)
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	b123      	cbz	r3, 800fc98 <rmw_uros_epoch_nanos+0x10>
 800fc8e:	6898      	ldr	r0, [r3, #8]
 800fc90:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fc94:	f001 bbfe 	b.w	8011494 <uxr_epoch_nanos>
 800fc98:	2000      	movs	r0, #0
 800fc9a:	2100      	movs	r1, #0
 800fc9c:	4770      	bx	lr
 800fc9e:	bf00      	nop
 800fca0:	2000f10c 	.word	0x2000f10c

0800fca4 <rmw_uxrce_init_service_memory>:
 800fca4:	b1e2      	cbz	r2, 800fce0 <rmw_uxrce_init_service_memory+0x3c>
 800fca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcaa:	7b05      	ldrb	r5, [r0, #12]
 800fcac:	4606      	mov	r6, r0
 800fcae:	b9ad      	cbnz	r5, 800fcdc <rmw_uxrce_init_service_memory+0x38>
 800fcb0:	23c8      	movs	r3, #200	@ 0xc8
 800fcb2:	4617      	mov	r7, r2
 800fcb4:	460c      	mov	r4, r1
 800fcb6:	46a8      	mov	r8, r5
 800fcb8:	6083      	str	r3, [r0, #8]
 800fcba:	f240 1301 	movw	r3, #257	@ 0x101
 800fcbe:	e9c0 5500 	strd	r5, r5, [r0]
 800fcc2:	8183      	strh	r3, [r0, #12]
 800fcc4:	3501      	adds	r5, #1
 800fcc6:	4621      	mov	r1, r4
 800fcc8:	4630      	mov	r0, r6
 800fcca:	f007 f893 	bl	8016df4 <put_memory>
 800fcce:	42af      	cmp	r7, r5
 800fcd0:	60a4      	str	r4, [r4, #8]
 800fcd2:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800fcd6:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800fcda:	d1f3      	bne.n	800fcc4 <rmw_uxrce_init_service_memory+0x20>
 800fcdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fce0:	4770      	bx	lr
 800fce2:	bf00      	nop

0800fce4 <rmw_uxrce_init_client_memory>:
 800fce4:	b1e2      	cbz	r2, 800fd20 <rmw_uxrce_init_client_memory+0x3c>
 800fce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcea:	7b05      	ldrb	r5, [r0, #12]
 800fcec:	4606      	mov	r6, r0
 800fcee:	b9ad      	cbnz	r5, 800fd1c <rmw_uxrce_init_client_memory+0x38>
 800fcf0:	23c8      	movs	r3, #200	@ 0xc8
 800fcf2:	4617      	mov	r7, r2
 800fcf4:	460c      	mov	r4, r1
 800fcf6:	46a8      	mov	r8, r5
 800fcf8:	6083      	str	r3, [r0, #8]
 800fcfa:	f240 1301 	movw	r3, #257	@ 0x101
 800fcfe:	e9c0 5500 	strd	r5, r5, [r0]
 800fd02:	8183      	strh	r3, [r0, #12]
 800fd04:	3501      	adds	r5, #1
 800fd06:	4621      	mov	r1, r4
 800fd08:	4630      	mov	r0, r6
 800fd0a:	f007 f873 	bl	8016df4 <put_memory>
 800fd0e:	42af      	cmp	r7, r5
 800fd10:	60a4      	str	r4, [r4, #8]
 800fd12:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800fd16:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800fd1a:	d1f3      	bne.n	800fd04 <rmw_uxrce_init_client_memory+0x20>
 800fd1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd20:	4770      	bx	lr
 800fd22:	bf00      	nop

0800fd24 <rmw_uxrce_init_publisher_memory>:
 800fd24:	b1e2      	cbz	r2, 800fd60 <rmw_uxrce_init_publisher_memory+0x3c>
 800fd26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd2a:	7b05      	ldrb	r5, [r0, #12]
 800fd2c:	4606      	mov	r6, r0
 800fd2e:	b9ad      	cbnz	r5, 800fd5c <rmw_uxrce_init_publisher_memory+0x38>
 800fd30:	23d8      	movs	r3, #216	@ 0xd8
 800fd32:	4617      	mov	r7, r2
 800fd34:	460c      	mov	r4, r1
 800fd36:	46a8      	mov	r8, r5
 800fd38:	6083      	str	r3, [r0, #8]
 800fd3a:	f240 1301 	movw	r3, #257	@ 0x101
 800fd3e:	e9c0 5500 	strd	r5, r5, [r0]
 800fd42:	8183      	strh	r3, [r0, #12]
 800fd44:	3501      	adds	r5, #1
 800fd46:	4621      	mov	r1, r4
 800fd48:	4630      	mov	r0, r6
 800fd4a:	f007 f853 	bl	8016df4 <put_memory>
 800fd4e:	42af      	cmp	r7, r5
 800fd50:	60a4      	str	r4, [r4, #8]
 800fd52:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800fd56:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800fd5a:	d1f3      	bne.n	800fd44 <rmw_uxrce_init_publisher_memory+0x20>
 800fd5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd60:	4770      	bx	lr
 800fd62:	bf00      	nop

0800fd64 <rmw_uxrce_init_subscription_memory>:
 800fd64:	b1e2      	cbz	r2, 800fda0 <rmw_uxrce_init_subscription_memory+0x3c>
 800fd66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd6a:	7b05      	ldrb	r5, [r0, #12]
 800fd6c:	4606      	mov	r6, r0
 800fd6e:	b9ad      	cbnz	r5, 800fd9c <rmw_uxrce_init_subscription_memory+0x38>
 800fd70:	23d8      	movs	r3, #216	@ 0xd8
 800fd72:	4617      	mov	r7, r2
 800fd74:	460c      	mov	r4, r1
 800fd76:	46a8      	mov	r8, r5
 800fd78:	6083      	str	r3, [r0, #8]
 800fd7a:	f240 1301 	movw	r3, #257	@ 0x101
 800fd7e:	e9c0 5500 	strd	r5, r5, [r0]
 800fd82:	8183      	strh	r3, [r0, #12]
 800fd84:	3501      	adds	r5, #1
 800fd86:	4621      	mov	r1, r4
 800fd88:	4630      	mov	r0, r6
 800fd8a:	f007 f833 	bl	8016df4 <put_memory>
 800fd8e:	42af      	cmp	r7, r5
 800fd90:	60a4      	str	r4, [r4, #8]
 800fd92:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800fd96:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800fd9a:	d1f3      	bne.n	800fd84 <rmw_uxrce_init_subscription_memory+0x20>
 800fd9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fda0:	4770      	bx	lr
 800fda2:	bf00      	nop

0800fda4 <rmw_uxrce_init_node_memory>:
 800fda4:	b1e2      	cbz	r2, 800fde0 <rmw_uxrce_init_node_memory+0x3c>
 800fda6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdaa:	7b05      	ldrb	r5, [r0, #12]
 800fdac:	4606      	mov	r6, r0
 800fdae:	b9ad      	cbnz	r5, 800fddc <rmw_uxrce_init_node_memory+0x38>
 800fdb0:	23a4      	movs	r3, #164	@ 0xa4
 800fdb2:	4617      	mov	r7, r2
 800fdb4:	460c      	mov	r4, r1
 800fdb6:	46a8      	mov	r8, r5
 800fdb8:	6083      	str	r3, [r0, #8]
 800fdba:	f240 1301 	movw	r3, #257	@ 0x101
 800fdbe:	e9c0 5500 	strd	r5, r5, [r0]
 800fdc2:	8183      	strh	r3, [r0, #12]
 800fdc4:	3501      	adds	r5, #1
 800fdc6:	4621      	mov	r1, r4
 800fdc8:	4630      	mov	r0, r6
 800fdca:	f007 f813 	bl	8016df4 <put_memory>
 800fdce:	42af      	cmp	r7, r5
 800fdd0:	60a4      	str	r4, [r4, #8]
 800fdd2:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800fdd6:	f804 8c98 	strb.w	r8, [r4, #-152]
 800fdda:	d1f3      	bne.n	800fdc4 <rmw_uxrce_init_node_memory+0x20>
 800fddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fde0:	4770      	bx	lr
 800fde2:	bf00      	nop

0800fde4 <rmw_uxrce_init_session_memory>:
 800fde4:	b1ea      	cbz	r2, 800fe22 <rmw_uxrce_init_session_memory+0x3e>
 800fde6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fdea:	7b05      	ldrb	r5, [r0, #12]
 800fdec:	4606      	mov	r6, r0
 800fdee:	b9b5      	cbnz	r5, 800fe1e <rmw_uxrce_init_session_memory+0x3a>
 800fdf0:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800fdf4:	f240 1301 	movw	r3, #257	@ 0x101
 800fdf8:	4617      	mov	r7, r2
 800fdfa:	460c      	mov	r4, r1
 800fdfc:	46a9      	mov	r9, r5
 800fdfe:	f8c0 8008 	str.w	r8, [r0, #8]
 800fe02:	8183      	strh	r3, [r0, #12]
 800fe04:	e9c0 5500 	strd	r5, r5, [r0]
 800fe08:	3501      	adds	r5, #1
 800fe0a:	4621      	mov	r1, r4
 800fe0c:	4630      	mov	r0, r6
 800fe0e:	f006 fff1 	bl	8016df4 <put_memory>
 800fe12:	42af      	cmp	r7, r5
 800fe14:	60a4      	str	r4, [r4, #8]
 800fe16:	f884 900c 	strb.w	r9, [r4, #12]
 800fe1a:	4444      	add	r4, r8
 800fe1c:	d1f4      	bne.n	800fe08 <rmw_uxrce_init_session_memory+0x24>
 800fe1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe22:	4770      	bx	lr

0800fe24 <rmw_uxrce_init_topic_memory>:
 800fe24:	b1e2      	cbz	r2, 800fe60 <rmw_uxrce_init_topic_memory+0x3c>
 800fe26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe2a:	7b05      	ldrb	r5, [r0, #12]
 800fe2c:	4606      	mov	r6, r0
 800fe2e:	b9ad      	cbnz	r5, 800fe5c <rmw_uxrce_init_topic_memory+0x38>
 800fe30:	231c      	movs	r3, #28
 800fe32:	4617      	mov	r7, r2
 800fe34:	460c      	mov	r4, r1
 800fe36:	46a8      	mov	r8, r5
 800fe38:	6083      	str	r3, [r0, #8]
 800fe3a:	f240 1301 	movw	r3, #257	@ 0x101
 800fe3e:	e9c0 5500 	strd	r5, r5, [r0]
 800fe42:	8183      	strh	r3, [r0, #12]
 800fe44:	3501      	adds	r5, #1
 800fe46:	4621      	mov	r1, r4
 800fe48:	4630      	mov	r0, r6
 800fe4a:	f006 ffd3 	bl	8016df4 <put_memory>
 800fe4e:	42af      	cmp	r7, r5
 800fe50:	60a4      	str	r4, [r4, #8]
 800fe52:	f104 041c 	add.w	r4, r4, #28
 800fe56:	f804 8c10 	strb.w	r8, [r4, #-16]
 800fe5a:	d1f3      	bne.n	800fe44 <rmw_uxrce_init_topic_memory+0x20>
 800fe5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe60:	4770      	bx	lr
 800fe62:	bf00      	nop

0800fe64 <rmw_uxrce_init_static_input_buffer_memory>:
 800fe64:	b1ea      	cbz	r2, 800fea2 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800fe66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe6a:	7b05      	ldrb	r5, [r0, #12]
 800fe6c:	4606      	mov	r6, r0
 800fe6e:	b9b5      	cbnz	r5, 800fe9e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800fe70:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800fe74:	4617      	mov	r7, r2
 800fe76:	460c      	mov	r4, r1
 800fe78:	46a8      	mov	r8, r5
 800fe7a:	6083      	str	r3, [r0, #8]
 800fe7c:	f240 1301 	movw	r3, #257	@ 0x101
 800fe80:	e9c0 5500 	strd	r5, r5, [r0]
 800fe84:	8183      	strh	r3, [r0, #12]
 800fe86:	3501      	adds	r5, #1
 800fe88:	4621      	mov	r1, r4
 800fe8a:	4630      	mov	r0, r6
 800fe8c:	f006 ffb2 	bl	8016df4 <put_memory>
 800fe90:	42af      	cmp	r7, r5
 800fe92:	60a4      	str	r4, [r4, #8]
 800fe94:	f884 800c 	strb.w	r8, [r4, #12]
 800fe98:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800fe9c:	d1f3      	bne.n	800fe86 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800fe9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fea2:	4770      	bx	lr

0800fea4 <rmw_uxrce_init_init_options_impl_memory>:
 800fea4:	b1e2      	cbz	r2, 800fee0 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800fea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800feaa:	7b05      	ldrb	r5, [r0, #12]
 800feac:	4606      	mov	r6, r0
 800feae:	b9ad      	cbnz	r5, 800fedc <rmw_uxrce_init_init_options_impl_memory+0x38>
 800feb0:	232c      	movs	r3, #44	@ 0x2c
 800feb2:	4617      	mov	r7, r2
 800feb4:	460c      	mov	r4, r1
 800feb6:	46a8      	mov	r8, r5
 800feb8:	6083      	str	r3, [r0, #8]
 800feba:	f240 1301 	movw	r3, #257	@ 0x101
 800febe:	e9c0 5500 	strd	r5, r5, [r0]
 800fec2:	8183      	strh	r3, [r0, #12]
 800fec4:	3501      	adds	r5, #1
 800fec6:	4621      	mov	r1, r4
 800fec8:	4630      	mov	r0, r6
 800feca:	f006 ff93 	bl	8016df4 <put_memory>
 800fece:	42af      	cmp	r7, r5
 800fed0:	60a4      	str	r4, [r4, #8]
 800fed2:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800fed6:	f804 8c20 	strb.w	r8, [r4, #-32]
 800feda:	d1f3      	bne.n	800fec4 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800fedc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fee0:	4770      	bx	lr
 800fee2:	bf00      	nop

0800fee4 <rmw_uxrce_init_wait_set_memory>:
 800fee4:	b1e2      	cbz	r2, 800ff20 <rmw_uxrce_init_wait_set_memory+0x3c>
 800fee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800feea:	7b05      	ldrb	r5, [r0, #12]
 800feec:	4606      	mov	r6, r0
 800feee:	b9ad      	cbnz	r5, 800ff1c <rmw_uxrce_init_wait_set_memory+0x38>
 800fef0:	231c      	movs	r3, #28
 800fef2:	4617      	mov	r7, r2
 800fef4:	460c      	mov	r4, r1
 800fef6:	46a8      	mov	r8, r5
 800fef8:	6083      	str	r3, [r0, #8]
 800fefa:	f240 1301 	movw	r3, #257	@ 0x101
 800fefe:	e9c0 5500 	strd	r5, r5, [r0]
 800ff02:	8183      	strh	r3, [r0, #12]
 800ff04:	3501      	adds	r5, #1
 800ff06:	4621      	mov	r1, r4
 800ff08:	4630      	mov	r0, r6
 800ff0a:	f006 ff73 	bl	8016df4 <put_memory>
 800ff0e:	42af      	cmp	r7, r5
 800ff10:	60a4      	str	r4, [r4, #8]
 800ff12:	f104 041c 	add.w	r4, r4, #28
 800ff16:	f804 8c10 	strb.w	r8, [r4, #-16]
 800ff1a:	d1f3      	bne.n	800ff04 <rmw_uxrce_init_wait_set_memory+0x20>
 800ff1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff20:	4770      	bx	lr
 800ff22:	bf00      	nop

0800ff24 <rmw_uxrce_init_guard_condition_memory>:
 800ff24:	b1e2      	cbz	r2, 800ff60 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800ff26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff2a:	7b05      	ldrb	r5, [r0, #12]
 800ff2c:	4606      	mov	r6, r0
 800ff2e:	b9ad      	cbnz	r5, 800ff5c <rmw_uxrce_init_guard_condition_memory+0x38>
 800ff30:	2320      	movs	r3, #32
 800ff32:	4617      	mov	r7, r2
 800ff34:	460c      	mov	r4, r1
 800ff36:	46a8      	mov	r8, r5
 800ff38:	6083      	str	r3, [r0, #8]
 800ff3a:	f240 1301 	movw	r3, #257	@ 0x101
 800ff3e:	e9c0 5500 	strd	r5, r5, [r0]
 800ff42:	8183      	strh	r3, [r0, #12]
 800ff44:	3501      	adds	r5, #1
 800ff46:	4621      	mov	r1, r4
 800ff48:	4630      	mov	r0, r6
 800ff4a:	f006 ff53 	bl	8016df4 <put_memory>
 800ff4e:	42af      	cmp	r7, r5
 800ff50:	60a4      	str	r4, [r4, #8]
 800ff52:	f104 0420 	add.w	r4, r4, #32
 800ff56:	f804 8c14 	strb.w	r8, [r4, #-20]
 800ff5a:	d1f3      	bne.n	800ff44 <rmw_uxrce_init_guard_condition_memory+0x20>
 800ff5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff60:	4770      	bx	lr
 800ff62:	bf00      	nop

0800ff64 <rmw_uxrce_fini_session_memory>:
 800ff64:	4601      	mov	r1, r0
 800ff66:	4801      	ldr	r0, [pc, #4]	@ (800ff6c <rmw_uxrce_fini_session_memory+0x8>)
 800ff68:	f006 bf44 	b.w	8016df4 <put_memory>
 800ff6c:	2000f10c 	.word	0x2000f10c

0800ff70 <rmw_uxrce_fini_node_memory>:
 800ff70:	b538      	push	{r3, r4, r5, lr}
 800ff72:	4604      	mov	r4, r0
 800ff74:	6800      	ldr	r0, [r0, #0]
 800ff76:	b128      	cbz	r0, 800ff84 <rmw_uxrce_fini_node_memory+0x14>
 800ff78:	4b07      	ldr	r3, [pc, #28]	@ (800ff98 <rmw_uxrce_fini_node_memory+0x28>)
 800ff7a:	6819      	ldr	r1, [r3, #0]
 800ff7c:	f7f0 f960 	bl	8000240 <strcmp>
 800ff80:	b940      	cbnz	r0, 800ff94 <rmw_uxrce_fini_node_memory+0x24>
 800ff82:	6020      	str	r0, [r4, #0]
 800ff84:	6861      	ldr	r1, [r4, #4]
 800ff86:	b129      	cbz	r1, 800ff94 <rmw_uxrce_fini_node_memory+0x24>
 800ff88:	2500      	movs	r5, #0
 800ff8a:	4804      	ldr	r0, [pc, #16]	@ (800ff9c <rmw_uxrce_fini_node_memory+0x2c>)
 800ff8c:	610d      	str	r5, [r1, #16]
 800ff8e:	f006 ff31 	bl	8016df4 <put_memory>
 800ff92:	6065      	str	r5, [r4, #4]
 800ff94:	bd38      	pop	{r3, r4, r5, pc}
 800ff96:	bf00      	nop
 800ff98:	0801d578 	.word	0x0801d578
 800ff9c:	2000f0dc 	.word	0x2000f0dc

0800ffa0 <rmw_uxrce_fini_publisher_memory>:
 800ffa0:	b510      	push	{r4, lr}
 800ffa2:	4604      	mov	r4, r0
 800ffa4:	6800      	ldr	r0, [r0, #0]
 800ffa6:	b128      	cbz	r0, 800ffb4 <rmw_uxrce_fini_publisher_memory+0x14>
 800ffa8:	4b06      	ldr	r3, [pc, #24]	@ (800ffc4 <rmw_uxrce_fini_publisher_memory+0x24>)
 800ffaa:	6819      	ldr	r1, [r3, #0]
 800ffac:	f7f0 f948 	bl	8000240 <strcmp>
 800ffb0:	b938      	cbnz	r0, 800ffc2 <rmw_uxrce_fini_publisher_memory+0x22>
 800ffb2:	6020      	str	r0, [r4, #0]
 800ffb4:	6861      	ldr	r1, [r4, #4]
 800ffb6:	b121      	cbz	r1, 800ffc2 <rmw_uxrce_fini_publisher_memory+0x22>
 800ffb8:	4803      	ldr	r0, [pc, #12]	@ (800ffc8 <rmw_uxrce_fini_publisher_memory+0x28>)
 800ffba:	f006 ff1b 	bl	8016df4 <put_memory>
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	6063      	str	r3, [r4, #4]
 800ffc2:	bd10      	pop	{r4, pc}
 800ffc4:	0801d578 	.word	0x0801d578
 800ffc8:	2000f0ec 	.word	0x2000f0ec

0800ffcc <rmw_uxrce_fini_subscription_memory>:
 800ffcc:	b510      	push	{r4, lr}
 800ffce:	4604      	mov	r4, r0
 800ffd0:	6800      	ldr	r0, [r0, #0]
 800ffd2:	b128      	cbz	r0, 800ffe0 <rmw_uxrce_fini_subscription_memory+0x14>
 800ffd4:	4b06      	ldr	r3, [pc, #24]	@ (800fff0 <rmw_uxrce_fini_subscription_memory+0x24>)
 800ffd6:	6819      	ldr	r1, [r3, #0]
 800ffd8:	f7f0 f932 	bl	8000240 <strcmp>
 800ffdc:	b938      	cbnz	r0, 800ffee <rmw_uxrce_fini_subscription_memory+0x22>
 800ffde:	6020      	str	r0, [r4, #0]
 800ffe0:	6861      	ldr	r1, [r4, #4]
 800ffe2:	b121      	cbz	r1, 800ffee <rmw_uxrce_fini_subscription_memory+0x22>
 800ffe4:	4803      	ldr	r0, [pc, #12]	@ (800fff4 <rmw_uxrce_fini_subscription_memory+0x28>)
 800ffe6:	f006 ff05 	bl	8016df4 <put_memory>
 800ffea:	2300      	movs	r3, #0
 800ffec:	6063      	str	r3, [r4, #4]
 800ffee:	bd10      	pop	{r4, pc}
 800fff0:	0801d578 	.word	0x0801d578
 800fff4:	2000f12c 	.word	0x2000f12c

0800fff8 <rmw_uxrce_fini_service_memory>:
 800fff8:	b510      	push	{r4, lr}
 800fffa:	4604      	mov	r4, r0
 800fffc:	6800      	ldr	r0, [r0, #0]
 800fffe:	b128      	cbz	r0, 801000c <rmw_uxrce_fini_service_memory+0x14>
 8010000:	4b06      	ldr	r3, [pc, #24]	@ (801001c <rmw_uxrce_fini_service_memory+0x24>)
 8010002:	6819      	ldr	r1, [r3, #0]
 8010004:	f7f0 f91c 	bl	8000240 <strcmp>
 8010008:	b938      	cbnz	r0, 801001a <rmw_uxrce_fini_service_memory+0x22>
 801000a:	6020      	str	r0, [r4, #0]
 801000c:	6861      	ldr	r1, [r4, #4]
 801000e:	b121      	cbz	r1, 801001a <rmw_uxrce_fini_service_memory+0x22>
 8010010:	4803      	ldr	r0, [pc, #12]	@ (8010020 <rmw_uxrce_fini_service_memory+0x28>)
 8010012:	f006 feef 	bl	8016df4 <put_memory>
 8010016:	2300      	movs	r3, #0
 8010018:	6063      	str	r3, [r4, #4]
 801001a:	bd10      	pop	{r4, pc}
 801001c:	0801d578 	.word	0x0801d578
 8010020:	2000f0fc 	.word	0x2000f0fc

08010024 <rmw_uxrce_fini_client_memory>:
 8010024:	b510      	push	{r4, lr}
 8010026:	4604      	mov	r4, r0
 8010028:	6800      	ldr	r0, [r0, #0]
 801002a:	b128      	cbz	r0, 8010038 <rmw_uxrce_fini_client_memory+0x14>
 801002c:	4b06      	ldr	r3, [pc, #24]	@ (8010048 <rmw_uxrce_fini_client_memory+0x24>)
 801002e:	6819      	ldr	r1, [r3, #0]
 8010030:	f7f0 f906 	bl	8000240 <strcmp>
 8010034:	b938      	cbnz	r0, 8010046 <rmw_uxrce_fini_client_memory+0x22>
 8010036:	6020      	str	r0, [r4, #0]
 8010038:	6861      	ldr	r1, [r4, #4]
 801003a:	b121      	cbz	r1, 8010046 <rmw_uxrce_fini_client_memory+0x22>
 801003c:	4803      	ldr	r0, [pc, #12]	@ (801004c <rmw_uxrce_fini_client_memory+0x28>)
 801003e:	f006 fed9 	bl	8016df4 <put_memory>
 8010042:	2300      	movs	r3, #0
 8010044:	6063      	str	r3, [r4, #4]
 8010046:	bd10      	pop	{r4, pc}
 8010048:	0801d578 	.word	0x0801d578
 801004c:	2000a810 	.word	0x2000a810

08010050 <rmw_uxrce_fini_topic_memory>:
 8010050:	b510      	push	{r4, lr}
 8010052:	4604      	mov	r4, r0
 8010054:	4803      	ldr	r0, [pc, #12]	@ (8010064 <rmw_uxrce_fini_topic_memory+0x14>)
 8010056:	4621      	mov	r1, r4
 8010058:	f006 fecc 	bl	8016df4 <put_memory>
 801005c:	2300      	movs	r3, #0
 801005e:	61a3      	str	r3, [r4, #24]
 8010060:	bd10      	pop	{r4, pc}
 8010062:	bf00      	nop
 8010064:	2000f13c 	.word	0x2000f13c

08010068 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8010068:	b082      	sub	sp, #8
 801006a:	492b      	ldr	r1, [pc, #172]	@ (8010118 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 801006c:	b530      	push	{r4, r5, lr}
 801006e:	680d      	ldr	r5, [r1, #0]
 8010070:	ac03      	add	r4, sp, #12
 8010072:	e884 000c 	stmia.w	r4, {r2, r3}
 8010076:	461c      	mov	r4, r3
 8010078:	2d00      	cmp	r5, #0
 801007a:	d04b      	beq.n	8010114 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 801007c:	462b      	mov	r3, r5
 801007e:	2100      	movs	r1, #0
 8010080:	689a      	ldr	r2, [r3, #8]
 8010082:	685b      	ldr	r3, [r3, #4]
 8010084:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 8010088:	4290      	cmp	r0, r2
 801008a:	bf08      	it	eq
 801008c:	3101      	addeq	r1, #1
 801008e:	2b00      	cmp	r3, #0
 8010090:	d1f6      	bne.n	8010080 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8010092:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8010096:	2b02      	cmp	r3, #2
 8010098:	d029      	beq.n	80100ee <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 801009a:	d820      	bhi.n	80100de <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 801009c:	428c      	cmp	r4, r1
 801009e:	d828      	bhi.n	80100f2 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 80100a0:	fab4 f284 	clz	r2, r4
 80100a4:	0952      	lsrs	r2, r2, #5
 80100a6:	b324      	cbz	r4, 80100f2 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 80100a8:	b1dd      	cbz	r5, 80100e2 <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 80100aa:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80100ae:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 80100b2:	e001      	b.n	80100b8 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 80100b4:	686d      	ldr	r5, [r5, #4]
 80100b6:	b1ad      	cbz	r5, 80100e4 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 80100b8:	68ab      	ldr	r3, [r5, #8]
 80100ba:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 80100be:	4288      	cmp	r0, r1
 80100c0:	d1f8      	bne.n	80100b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 80100c2:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 80100c6:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 80100ca:	4561      	cmp	r1, ip
 80100cc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80100d0:	eb73 0e04 	sbcs.w	lr, r3, r4
 80100d4:	daee      	bge.n	80100b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 80100d6:	468c      	mov	ip, r1
 80100d8:	461c      	mov	r4, r3
 80100da:	462a      	mov	r2, r5
 80100dc:	e7ea      	b.n	80100b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 80100de:	2b03      	cmp	r3, #3
 80100e0:	d0dc      	beq.n	801009c <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 80100e2:	2200      	movs	r2, #0
 80100e4:	4610      	mov	r0, r2
 80100e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80100ea:	b002      	add	sp, #8
 80100ec:	4770      	bx	lr
 80100ee:	428c      	cmp	r4, r1
 80100f0:	d905      	bls.n	80100fe <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 80100f2:	4809      	ldr	r0, [pc, #36]	@ (8010118 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 80100f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80100f8:	b002      	add	sp, #8
 80100fa:	f006 be6b 	b.w	8016dd4 <get_memory>
 80100fe:	fab4 f284 	clz	r2, r4
 8010102:	0952      	lsrs	r2, r2, #5
 8010104:	2c00      	cmp	r4, #0
 8010106:	d1ed      	bne.n	80100e4 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8010108:	4803      	ldr	r0, [pc, #12]	@ (8010118 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 801010a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801010e:	b002      	add	sp, #8
 8010110:	f006 be60 	b.w	8016dd4 <get_memory>
 8010114:	4629      	mov	r1, r5
 8010116:	e7bc      	b.n	8010092 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8010118:	2000f11c 	.word	0x2000f11c

0801011c <rmw_uxrce_find_static_input_buffer_by_owner>:
 801011c:	4b12      	ldr	r3, [pc, #72]	@ (8010168 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	b530      	push	{r4, r5, lr}
 8010122:	b1f3      	cbz	r3, 8010162 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 8010124:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8010128:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 801012c:	2400      	movs	r4, #0
 801012e:	e001      	b.n	8010134 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8010130:	685b      	ldr	r3, [r3, #4]
 8010132:	b1a3      	cbz	r3, 801015e <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8010134:	689a      	ldr	r2, [r3, #8]
 8010136:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 801013a:	4288      	cmp	r0, r1
 801013c:	d1f8      	bne.n	8010130 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 801013e:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 8010142:	f502 6202 	add.w	r2, r2, #2080	@ 0x820
 8010146:	4571      	cmp	r1, lr
 8010148:	f852 2c04 	ldr.w	r2, [r2, #-4]
 801014c:	eb72 050c 	sbcs.w	r5, r2, ip
 8010150:	daee      	bge.n	8010130 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8010152:	461c      	mov	r4, r3
 8010154:	685b      	ldr	r3, [r3, #4]
 8010156:	468e      	mov	lr, r1
 8010158:	4694      	mov	ip, r2
 801015a:	2b00      	cmp	r3, #0
 801015c:	d1ea      	bne.n	8010134 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 801015e:	4620      	mov	r0, r4
 8010160:	bd30      	pop	{r4, r5, pc}
 8010162:	461c      	mov	r4, r3
 8010164:	4620      	mov	r0, r4
 8010166:	bd30      	pop	{r4, r5, pc}
 8010168:	2000f11c 	.word	0x2000f11c
 801016c:	00000000 	.word	0x00000000

08010170 <rmw_uxrce_clean_expired_static_input_buffer>:
 8010170:	4b3d      	ldr	r3, [pc, #244]	@ (8010268 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8010172:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010176:	681f      	ldr	r7, [r3, #0]
 8010178:	ed2d 8b06 	vpush	{d8-d10}
 801017c:	b08d      	sub	sp, #52	@ 0x34
 801017e:	f7ff fd83 	bl	800fc88 <rmw_uros_epoch_nanos>
 8010182:	2f00      	cmp	r7, #0
 8010184:	d05d      	beq.n	8010242 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8010186:	46b8      	mov	r8, r7
 8010188:	4681      	mov	r9, r0
 801018a:	468a      	mov	sl, r1
 801018c:	ac04      	add	r4, sp, #16
 801018e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8010192:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8010196:	2b04      	cmp	r3, #4
 8010198:	ed9f 8b2d 	vldr	d8, [pc, #180]	@ 8010250 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 801019c:	ed9f ab2e 	vldr	d10, [pc, #184]	@ 8010258 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 80101a0:	ed9f 9b2f 	vldr	d9, [pc, #188]	@ 8010260 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 80101a4:	d03f      	beq.n	8010226 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 80101a6:	2b05      	cmp	r3, #5
 80101a8:	d044      	beq.n	8010234 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 80101aa:	2b03      	cmp	r3, #3
 80101ac:	d03b      	beq.n	8010226 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 80101ae:	ed8d 8b04 	vstr	d8, [sp, #16]
 80101b2:	ed8d ab06 	vstr	d10, [sp, #24]
 80101b6:	ab08      	add	r3, sp, #32
 80101b8:	ed8d 8b08 	vstr	d8, [sp, #32]
 80101bc:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 80101c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80101c2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80101c6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80101ca:	f006 fc25 	bl	8016a18 <rmw_time_equal>
 80101ce:	b118      	cbz	r0, 80101d8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 80101d0:	ed8d 9b04 	vstr	d9, [sp, #16]
 80101d4:	ed8d 8b06 	vstr	d8, [sp, #24]
 80101d8:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 80101dc:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 80101e0:	f855 7c04 	ldr.w	r7, [r5, #-4]
 80101e4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 80101e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80101ec:	f006 fc6a 	bl	8016ac4 <rmw_time_total_nsec>
 80101f0:	1830      	adds	r0, r6, r0
 80101f2:	eb47 0101 	adc.w	r1, r7, r1
 80101f6:	4548      	cmp	r0, r9
 80101f8:	eb71 030a 	sbcs.w	r3, r1, sl
 80101fc:	db05      	blt.n	801020a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 80101fe:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8010202:	4591      	cmp	r9, r2
 8010204:	eb7a 0303 	sbcs.w	r3, sl, r3
 8010208:	da03      	bge.n	8010212 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 801020a:	4641      	mov	r1, r8
 801020c:	4816      	ldr	r0, [pc, #88]	@ (8010268 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 801020e:	f006 fdf1 	bl	8016df4 <put_memory>
 8010212:	f1bb 0f00 	cmp.w	fp, #0
 8010216:	d014      	beq.n	8010242 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8010218:	46d8      	mov	r8, fp
 801021a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801021e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8010222:	2b04      	cmp	r3, #4
 8010224:	d1bf      	bne.n	80101a6 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 8010226:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 801022a:	3340      	adds	r3, #64	@ 0x40
 801022c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801022e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010232:	e7c0      	b.n	80101b6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8010234:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8010238:	3348      	adds	r3, #72	@ 0x48
 801023a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801023c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010240:	e7b9      	b.n	80101b6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8010242:	b00d      	add	sp, #52	@ 0x34
 8010244:	ecbd 8b06 	vpop	{d8-d10}
 8010248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801024c:	f3af 8000 	nop.w
	...
 8010258:	00000001 	.word	0x00000001
 801025c:	00000000 	.word	0x00000000
 8010260:	0000001e 	.word	0x0000001e
 8010264:	00000000 	.word	0x00000000
 8010268:	2000f11c 	.word	0x2000f11c

0801026c <get_message_typesupport_handle>:
 801026c:	6883      	ldr	r3, [r0, #8]
 801026e:	4718      	bx	r3

08010270 <get_message_typesupport_handle_function>:
 8010270:	b510      	push	{r4, lr}
 8010272:	4604      	mov	r4, r0
 8010274:	6800      	ldr	r0, [r0, #0]
 8010276:	f7ef ffe3 	bl	8000240 <strcmp>
 801027a:	2800      	cmp	r0, #0
 801027c:	bf0c      	ite	eq
 801027e:	4620      	moveq	r0, r4
 8010280:	2000      	movne	r0, #0
 8010282:	bd10      	pop	{r4, pc}

08010284 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8010284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010288:	6805      	ldr	r5, [r0, #0]
 801028a:	4604      	mov	r4, r0
 801028c:	460e      	mov	r6, r1
 801028e:	4628      	mov	r0, r5
 8010290:	f7ef ffd6 	bl	8000240 <strcmp>
 8010294:	b1c8      	cbz	r0, 80102ca <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8010296:	4b11      	ldr	r3, [pc, #68]	@ (80102dc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	429d      	cmp	r5, r3
 801029c:	d112      	bne.n	80102c4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801029e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80102a2:	f8d8 4000 	ldr.w	r4, [r8]
 80102a6:	b16c      	cbz	r4, 80102c4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80102a8:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80102ac:	2700      	movs	r7, #0
 80102ae:	3d04      	subs	r5, #4
 80102b0:	4631      	mov	r1, r6
 80102b2:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80102b6:	f7ef ffc3 	bl	8000240 <strcmp>
 80102ba:	00bb      	lsls	r3, r7, #2
 80102bc:	b140      	cbz	r0, 80102d0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 80102be:	3701      	adds	r7, #1
 80102c0:	42bc      	cmp	r4, r7
 80102c2:	d1f5      	bne.n	80102b0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 80102c4:	2000      	movs	r0, #0
 80102c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102ca:	4620      	mov	r0, r4
 80102cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102d0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80102d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102d8:	58d3      	ldr	r3, [r2, r3]
 80102da:	4718      	bx	r3
 80102dc:	200001fc 	.word	0x200001fc

080102e0 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure>:
 80102e0:	4b04      	ldr	r3, [pc, #16]	@ (80102f4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure+0x14>)
 80102e2:	681a      	ldr	r2, [r3, #0]
 80102e4:	b10a      	cbz	r2, 80102ea <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure+0xa>
 80102e6:	4803      	ldr	r0, [pc, #12]	@ (80102f4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure+0x14>)
 80102e8:	4770      	bx	lr
 80102ea:	4a03      	ldr	r2, [pc, #12]	@ (80102f8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure+0x18>)
 80102ec:	4801      	ldr	r0, [pc, #4]	@ (80102f4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure+0x14>)
 80102ee:	6812      	ldr	r2, [r2, #0]
 80102f0:	601a      	str	r2, [r3, #0]
 80102f2:	4770      	bx	lr
 80102f4:	2000020c 	.word	0x2000020c
 80102f8:	200001fc 	.word	0x200001fc

080102fc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure>:
 80102fc:	4a02      	ldr	r2, [pc, #8]	@ (8010308 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure+0xc>)
 80102fe:	4b03      	ldr	r3, [pc, #12]	@ (801030c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure+0x10>)
 8010300:	6812      	ldr	r2, [r2, #0]
 8010302:	601a      	str	r2, [r3, #0]
 8010304:	4770      	bx	lr
 8010306:	bf00      	nop
 8010308:	200001fc 	.word	0x200001fc
 801030c:	2000020c 	.word	0x2000020c

08010310 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8010310:	4b04      	ldr	r3, [pc, #16]	@ (8010324 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 8010312:	681a      	ldr	r2, [r3, #0]
 8010314:	b10a      	cbz	r2, 801031a <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 8010316:	4803      	ldr	r0, [pc, #12]	@ (8010324 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 8010318:	4770      	bx	lr
 801031a:	4a03      	ldr	r2, [pc, #12]	@ (8010328 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 801031c:	4801      	ldr	r0, [pc, #4]	@ (8010324 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 801031e:	6812      	ldr	r2, [r2, #0]
 8010320:	601a      	str	r2, [r3, #0]
 8010322:	4770      	bx	lr
 8010324:	20000220 	.word	0x20000220
 8010328:	200001fc 	.word	0x200001fc

0801032c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 801032c:	4a02      	ldr	r2, [pc, #8]	@ (8010338 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 801032e:	4b03      	ldr	r3, [pc, #12]	@ (801033c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 8010330:	6812      	ldr	r2, [r2, #0]
 8010332:	601a      	str	r2, [r3, #0]
 8010334:	4770      	bx	lr
 8010336:	bf00      	nop
 8010338:	200001fc 	.word	0x200001fc
 801033c:	20000220 	.word	0x20000220

08010340 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField>:
 8010340:	4b04      	ldr	r3, [pc, #16]	@ (8010354 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x14>)
 8010342:	681a      	ldr	r2, [r3, #0]
 8010344:	b10a      	cbz	r2, 801034a <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0xa>
 8010346:	4803      	ldr	r0, [pc, #12]	@ (8010354 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x14>)
 8010348:	4770      	bx	lr
 801034a:	4a03      	ldr	r2, [pc, #12]	@ (8010358 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x18>)
 801034c:	4801      	ldr	r0, [pc, #4]	@ (8010354 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x14>)
 801034e:	6812      	ldr	r2, [r2, #0]
 8010350:	601a      	str	r2, [r3, #0]
 8010352:	4770      	bx	lr
 8010354:	20000234 	.word	0x20000234
 8010358:	200001fc 	.word	0x200001fc

0801035c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField>:
 801035c:	4a02      	ldr	r2, [pc, #8]	@ (8010368 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0xc>)
 801035e:	4b03      	ldr	r3, [pc, #12]	@ (801036c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x10>)
 8010360:	6812      	ldr	r2, [r2, #0]
 8010362:	601a      	str	r2, [r3, #0]
 8010364:	4770      	bx	lr
 8010366:	bf00      	nop
 8010368:	200001fc 	.word	0x200001fc
 801036c:	20000234 	.word	0x20000234

08010370 <sensor_msgs__msg__FluidPressure__rosidl_typesupport_introspection_c__FluidPressure_init_function>:
 8010370:	f007 bffe 	b.w	8018370 <sensor_msgs__msg__FluidPressure__init>

08010374 <sensor_msgs__msg__FluidPressure__rosidl_typesupport_introspection_c__FluidPressure_fini_function>:
 8010374:	f008 b80e 	b.w	8018394 <sensor_msgs__msg__FluidPressure__fini>

08010378 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure>:
 8010378:	b508      	push	{r3, lr}
 801037a:	f000 fae5 	bl	8010948 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 801037e:	4b06      	ldr	r3, [pc, #24]	@ (8010398 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure+0x20>)
 8010380:	4906      	ldr	r1, [pc, #24]	@ (801039c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure+0x24>)
 8010382:	681a      	ldr	r2, [r3, #0]
 8010384:	60c8      	str	r0, [r1, #12]
 8010386:	b10a      	cbz	r2, 801038c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure+0x14>
 8010388:	4803      	ldr	r0, [pc, #12]	@ (8010398 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure+0x20>)
 801038a:	bd08      	pop	{r3, pc}
 801038c:	4a04      	ldr	r2, [pc, #16]	@ (80103a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure+0x28>)
 801038e:	4802      	ldr	r0, [pc, #8]	@ (8010398 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure+0x20>)
 8010390:	6812      	ldr	r2, [r2, #0]
 8010392:	601a      	str	r2, [r3, #0]
 8010394:	bd08      	pop	{r3, pc}
 8010396:	bf00      	nop
 8010398:	200002f4 	.word	0x200002f4
 801039c:	20000240 	.word	0x20000240
 80103a0:	20000200 	.word	0x20000200

080103a4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 80103a4:	2009      	movs	r0, #9
 80103a6:	4770      	bx	lr

080103a8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 80103a8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80103ac:	4770      	bx	lr
 80103ae:	bf00      	nop

080103b0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 80103b0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80103b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80103b8:	e9c2 0100 	strd	r0, r1, [r2]
 80103bc:	4770      	bx	lr
 80103be:	bf00      	nop

080103c0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 80103c0:	e9d2 2300 	ldrd	r2, r3, [r2]
 80103c4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80103c8:	e9c1 2300 	strd	r2, r3, [r1]
 80103cc:	4770      	bx	lr
 80103ce:	bf00      	nop

080103d0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 80103d0:	f007 bfe4 	b.w	801839c <sensor_msgs__msg__Imu__init>

080103d4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 80103d4:	f008 b838 	b.w	8018448 <sensor_msgs__msg__Imu__fini>

080103d8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 80103d8:	2009      	movs	r0, #9
 80103da:	4770      	bx	lr

080103dc <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 80103dc:	2009      	movs	r0, #9
 80103de:	4770      	bx	lr

080103e0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 80103e0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80103e4:	4770      	bx	lr
 80103e6:	bf00      	nop

080103e8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 80103e8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80103ec:	4770      	bx	lr
 80103ee:	bf00      	nop

080103f0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 80103f0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80103f4:	4770      	bx	lr
 80103f6:	bf00      	nop

080103f8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 80103f8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80103fc:	4770      	bx	lr
 80103fe:	bf00      	nop

08010400 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 8010400:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010404:	4770      	bx	lr
 8010406:	bf00      	nop

08010408 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 8010408:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801040c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010410:	e9c2 0100 	strd	r0, r1, [r2]
 8010414:	4770      	bx	lr
 8010416:	bf00      	nop

08010418 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 8010418:	e9d2 2300 	ldrd	r2, r3, [r2]
 801041c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8010420:	e9c1 2300 	strd	r2, r3, [r1]
 8010424:	4770      	bx	lr
 8010426:	bf00      	nop

08010428 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 8010428:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801042c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010430:	e9c2 0100 	strd	r0, r1, [r2]
 8010434:	4770      	bx	lr
 8010436:	bf00      	nop

08010438 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 8010438:	e9d2 2300 	ldrd	r2, r3, [r2]
 801043c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8010440:	e9c1 2300 	strd	r2, r3, [r1]
 8010444:	4770      	bx	lr
 8010446:	bf00      	nop

08010448 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8010448:	b510      	push	{r4, lr}
 801044a:	4c0c      	ldr	r4, [pc, #48]	@ (801047c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 801044c:	f000 fa7c 	bl	8010948 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010450:	60e0      	str	r0, [r4, #12]
 8010452:	f000 fc07 	bl	8010c64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8010456:	64a0      	str	r0, [r4, #72]	@ 0x48
 8010458:	f7fc fe48 	bl	800d0ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 801045c:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 8010460:	f7fc fe44 	bl	800d0ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8010464:	4b06      	ldr	r3, [pc, #24]	@ (8010480 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 8010466:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 801046a:	681a      	ldr	r2, [r3, #0]
 801046c:	b10a      	cbz	r2, 8010472 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 801046e:	4804      	ldr	r0, [pc, #16]	@ (8010480 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 8010470:	bd10      	pop	{r4, pc}
 8010472:	4a04      	ldr	r2, [pc, #16]	@ (8010484 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 8010474:	4802      	ldr	r0, [pc, #8]	@ (8010480 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 8010476:	6812      	ldr	r2, [r2, #0]
 8010478:	601a      	str	r2, [r3, #0]
 801047a:	bd10      	pop	{r4, pc}
 801047c:	20000300 	.word	0x20000300
 8010480:	200004a4 	.word	0x200004a4
 8010484:	20000200 	.word	0x20000200

08010488 <sensor_msgs__msg__MagneticField__rosidl_typesupport_introspection_c__size_function__MagneticField__magnetic_field_covariance>:
 8010488:	2009      	movs	r0, #9
 801048a:	4770      	bx	lr

0801048c <sensor_msgs__msg__MagneticField__rosidl_typesupport_introspection_c__get_const_function__MagneticField__magnetic_field_covariance>:
 801048c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010490:	4770      	bx	lr
 8010492:	bf00      	nop

08010494 <sensor_msgs__msg__MagneticField__rosidl_typesupport_introspection_c__fetch_function__MagneticField__magnetic_field_covariance>:
 8010494:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8010498:	e9d1 0100 	ldrd	r0, r1, [r1]
 801049c:	e9c2 0100 	strd	r0, r1, [r2]
 80104a0:	4770      	bx	lr
 80104a2:	bf00      	nop

080104a4 <sensor_msgs__msg__MagneticField__rosidl_typesupport_introspection_c__assign_function__MagneticField__magnetic_field_covariance>:
 80104a4:	e9d2 2300 	ldrd	r2, r3, [r2]
 80104a8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80104ac:	e9c1 2300 	strd	r2, r3, [r1]
 80104b0:	4770      	bx	lr
 80104b2:	bf00      	nop

080104b4 <sensor_msgs__msg__MagneticField__rosidl_typesupport_introspection_c__MagneticField_init_function>:
 80104b4:	f007 bfdc 	b.w	8018470 <sensor_msgs__msg__MagneticField__init>

080104b8 <sensor_msgs__msg__MagneticField__rosidl_typesupport_introspection_c__MagneticField_fini_function>:
 80104b8:	f007 bffe 	b.w	80184b8 <sensor_msgs__msg__MagneticField__fini>

080104bc <sensor_msgs__msg__MagneticField__rosidl_typesupport_introspection_c__get_function__MagneticField__magnetic_field_covariance>:
 80104bc:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80104c0:	4770      	bx	lr
 80104c2:	bf00      	nop

080104c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField>:
 80104c4:	b510      	push	{r4, lr}
 80104c6:	4c08      	ldr	r4, [pc, #32]	@ (80104e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x24>)
 80104c8:	f000 fa3e 	bl	8010948 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 80104cc:	60e0      	str	r0, [r4, #12]
 80104ce:	f7fc fe0d 	bl	800d0ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80104d2:	4b06      	ldr	r3, [pc, #24]	@ (80104ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x28>)
 80104d4:	64a0      	str	r0, [r4, #72]	@ 0x48
 80104d6:	681a      	ldr	r2, [r3, #0]
 80104d8:	b10a      	cbz	r2, 80104de <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x1a>
 80104da:	4804      	ldr	r0, [pc, #16]	@ (80104ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x28>)
 80104dc:	bd10      	pop	{r4, pc}
 80104de:	4a04      	ldr	r2, [pc, #16]	@ (80104f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x2c>)
 80104e0:	4802      	ldr	r0, [pc, #8]	@ (80104ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x28>)
 80104e2:	6812      	ldr	r2, [r2, #0]
 80104e4:	601a      	str	r2, [r3, #0]
 80104e6:	bd10      	pop	{r4, pc}
 80104e8:	200004b0 	.word	0x200004b0
 80104ec:	20000564 	.word	0x20000564
 80104f0:	20000200 	.word	0x20000200

080104f4 <get_serialized_size_sensor_msgs__msg__FluidPressure>:
 80104f4:	b538      	push	{r3, r4, r5, lr}
 80104f6:	b188      	cbz	r0, 801051c <get_serialized_size_sensor_msgs__msg__FluidPressure+0x28>
 80104f8:	460d      	mov	r5, r1
 80104fa:	f000 fa77 	bl	80109ec <get_serialized_size_std_msgs__msg__Header>
 80104fe:	2108      	movs	r1, #8
 8010500:	182c      	adds	r4, r5, r0
 8010502:	f1c5 0508 	rsb	r5, r5, #8
 8010506:	4620      	mov	r0, r4
 8010508:	f7fe fb32 	bl	800eb70 <ucdr_alignment>
 801050c:	2108      	movs	r1, #8
 801050e:	4408      	add	r0, r1
 8010510:	4404      	add	r4, r0
 8010512:	4620      	mov	r0, r4
 8010514:	f7fe fb2c 	bl	800eb70 <ucdr_alignment>
 8010518:	4428      	add	r0, r5
 801051a:	4420      	add	r0, r4
 801051c:	bd38      	pop	{r3, r4, r5, pc}
 801051e:	bf00      	nop

08010520 <_FluidPressure__cdr_deserialize>:
 8010520:	b538      	push	{r3, r4, r5, lr}
 8010522:	460c      	mov	r4, r1
 8010524:	b1a1      	cbz	r1, 8010550 <_FluidPressure__cdr_deserialize+0x30>
 8010526:	4605      	mov	r5, r0
 8010528:	f000 fae4 	bl	8010af4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 801052c:	4603      	mov	r3, r0
 801052e:	4621      	mov	r1, r4
 8010530:	4628      	mov	r0, r5
 8010532:	685b      	ldr	r3, [r3, #4]
 8010534:	68db      	ldr	r3, [r3, #12]
 8010536:	4798      	blx	r3
 8010538:	f104 0118 	add.w	r1, r4, #24
 801053c:	4628      	mov	r0, r5
 801053e:	f7fe f92b 	bl	800e798 <ucdr_deserialize_double>
 8010542:	f104 0120 	add.w	r1, r4, #32
 8010546:	4628      	mov	r0, r5
 8010548:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801054c:	f7fe b924 	b.w	800e798 <ucdr_deserialize_double>
 8010550:	4608      	mov	r0, r1
 8010552:	bd38      	pop	{r3, r4, r5, pc}

08010554 <_FluidPressure__cdr_serialize>:
 8010554:	b1b0      	cbz	r0, 8010584 <_FluidPressure__cdr_serialize+0x30>
 8010556:	b538      	push	{r3, r4, r5, lr}
 8010558:	4604      	mov	r4, r0
 801055a:	460d      	mov	r5, r1
 801055c:	f000 faca 	bl	8010af4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010560:	4603      	mov	r3, r0
 8010562:	4629      	mov	r1, r5
 8010564:	4620      	mov	r0, r4
 8010566:	685b      	ldr	r3, [r3, #4]
 8010568:	689b      	ldr	r3, [r3, #8]
 801056a:	4798      	blx	r3
 801056c:	4628      	mov	r0, r5
 801056e:	ed94 0b06 	vldr	d0, [r4, #24]
 8010572:	f7fd ff6f 	bl	800e454 <ucdr_serialize_double>
 8010576:	4628      	mov	r0, r5
 8010578:	ed94 0b08 	vldr	d0, [r4, #32]
 801057c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010580:	f7fd bf68 	b.w	800e454 <ucdr_serialize_double>
 8010584:	4770      	bx	lr
 8010586:	bf00      	nop

08010588 <_FluidPressure__get_serialized_size>:
 8010588:	b180      	cbz	r0, 80105ac <_FluidPressure__get_serialized_size+0x24>
 801058a:	2100      	movs	r1, #0
 801058c:	b510      	push	{r4, lr}
 801058e:	f000 fa2d 	bl	80109ec <get_serialized_size_std_msgs__msg__Header>
 8010592:	4604      	mov	r4, r0
 8010594:	2108      	movs	r1, #8
 8010596:	f7fe faeb 	bl	800eb70 <ucdr_alignment>
 801059a:	2108      	movs	r1, #8
 801059c:	4420      	add	r0, r4
 801059e:	1844      	adds	r4, r0, r1
 80105a0:	4620      	mov	r0, r4
 80105a2:	f7fe fae5 	bl	800eb70 <ucdr_alignment>
 80105a6:	3008      	adds	r0, #8
 80105a8:	4420      	add	r0, r4
 80105aa:	bd10      	pop	{r4, pc}
 80105ac:	4770      	bx	lr
 80105ae:	bf00      	nop

080105b0 <_FluidPressure__max_serialized_size>:
 80105b0:	b510      	push	{r4, lr}
 80105b2:	b082      	sub	sp, #8
 80105b4:	2301      	movs	r3, #1
 80105b6:	2100      	movs	r1, #0
 80105b8:	f10d 0007 	add.w	r0, sp, #7
 80105bc:	f88d 3007 	strb.w	r3, [sp, #7]
 80105c0:	f000 fa8e 	bl	8010ae0 <max_serialized_size_std_msgs__msg__Header>
 80105c4:	4604      	mov	r4, r0
 80105c6:	2108      	movs	r1, #8
 80105c8:	f7fe fad2 	bl	800eb70 <ucdr_alignment>
 80105cc:	2108      	movs	r1, #8
 80105ce:	4420      	add	r0, r4
 80105d0:	1844      	adds	r4, r0, r1
 80105d2:	4620      	mov	r0, r4
 80105d4:	f7fe facc 	bl	800eb70 <ucdr_alignment>
 80105d8:	3008      	adds	r0, #8
 80105da:	4420      	add	r0, r4
 80105dc:	b002      	add	sp, #8
 80105de:	bd10      	pop	{r4, pc}

080105e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure>:
 80105e0:	4800      	ldr	r0, [pc, #0]	@ (80105e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure+0x4>)
 80105e2:	4770      	bx	lr
 80105e4:	20000570 	.word	0x20000570

080105e8 <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 80105e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105ec:	4680      	mov	r8, r0
 80105ee:	460f      	mov	r7, r1
 80105f0:	f000 f9fc 	bl	80109ec <get_serialized_size_std_msgs__msg__Header>
 80105f4:	4604      	mov	r4, r0
 80105f6:	f108 0018 	add.w	r0, r8, #24
 80105fa:	443c      	add	r4, r7
 80105fc:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 8010600:	4621      	mov	r1, r4
 8010602:	f000 fb3d 	bl	8010c80 <get_serialized_size_geometry_msgs__msg__Quaternion>
 8010606:	4404      	add	r4, r0
 8010608:	2108      	movs	r1, #8
 801060a:	4620      	mov	r0, r4
 801060c:	f7fe fab0 	bl	800eb70 <ucdr_alignment>
 8010610:	4606      	mov	r6, r0
 8010612:	f108 0080 	add.w	r0, r8, #128	@ 0x80
 8010616:	3648      	adds	r6, #72	@ 0x48
 8010618:	4426      	add	r6, r4
 801061a:	4631      	mov	r1, r6
 801061c:	f7fc fde0 	bl	800d1e0 <get_serialized_size_geometry_msgs__msg__Vector3>
 8010620:	1835      	adds	r5, r6, r0
 8010622:	2108      	movs	r1, #8
 8010624:	4628      	mov	r0, r5
 8010626:	f7fe faa3 	bl	800eb70 <ucdr_alignment>
 801062a:	4604      	mov	r4, r0
 801062c:	f108 00e0 	add.w	r0, r8, #224	@ 0xe0
 8010630:	3448      	adds	r4, #72	@ 0x48
 8010632:	4425      	add	r5, r4
 8010634:	4629      	mov	r1, r5
 8010636:	f7fc fdd3 	bl	800d1e0 <get_serialized_size_geometry_msgs__msg__Vector3>
 801063a:	4405      	add	r5, r0
 801063c:	2108      	movs	r1, #8
 801063e:	4628      	mov	r0, r5
 8010640:	f7fe fa96 	bl	800eb70 <ucdr_alignment>
 8010644:	4438      	add	r0, r7
 8010646:	4428      	add	r0, r5
 8010648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801064c <get_serialized_size_sensor_msgs__msg__Imu>:
 801064c:	b108      	cbz	r0, 8010652 <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 801064e:	f7ff bfcb 	b.w	80105e8 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 8010652:	4770      	bx	lr

08010654 <_Imu__get_serialized_size>:
 8010654:	b110      	cbz	r0, 801065c <_Imu__get_serialized_size+0x8>
 8010656:	2100      	movs	r1, #0
 8010658:	f7ff bfc6 	b.w	80105e8 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 801065c:	4770      	bx	lr
 801065e:	bf00      	nop

08010660 <_Imu__cdr_deserialize>:
 8010660:	b538      	push	{r3, r4, r5, lr}
 8010662:	460c      	mov	r4, r1
 8010664:	2900      	cmp	r1, #0
 8010666:	d037      	beq.n	80106d8 <_Imu__cdr_deserialize+0x78>
 8010668:	4605      	mov	r5, r0
 801066a:	f000 fa43 	bl	8010af4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 801066e:	4603      	mov	r3, r0
 8010670:	4621      	mov	r1, r4
 8010672:	4628      	mov	r0, r5
 8010674:	685b      	ldr	r3, [r3, #4]
 8010676:	68db      	ldr	r3, [r3, #12]
 8010678:	4798      	blx	r3
 801067a:	f000 fbad 	bl	8010dd8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 801067e:	4603      	mov	r3, r0
 8010680:	f104 0118 	add.w	r1, r4, #24
 8010684:	4628      	mov	r0, r5
 8010686:	685b      	ldr	r3, [r3, #4]
 8010688:	68db      	ldr	r3, [r3, #12]
 801068a:	4798      	blx	r3
 801068c:	2209      	movs	r2, #9
 801068e:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 8010692:	4628      	mov	r0, r5
 8010694:	f000 fd2a 	bl	80110ec <ucdr_deserialize_array_double>
 8010698:	f7fc fe2a 	bl	800d2f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 801069c:	4603      	mov	r3, r0
 801069e:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 80106a2:	4628      	mov	r0, r5
 80106a4:	685b      	ldr	r3, [r3, #4]
 80106a6:	68db      	ldr	r3, [r3, #12]
 80106a8:	4798      	blx	r3
 80106aa:	2209      	movs	r2, #9
 80106ac:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 80106b0:	4628      	mov	r0, r5
 80106b2:	f000 fd1b 	bl	80110ec <ucdr_deserialize_array_double>
 80106b6:	f7fc fe1b 	bl	800d2f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80106ba:	4603      	mov	r3, r0
 80106bc:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 80106c0:	4628      	mov	r0, r5
 80106c2:	685b      	ldr	r3, [r3, #4]
 80106c4:	68db      	ldr	r3, [r3, #12]
 80106c6:	4798      	blx	r3
 80106c8:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 80106cc:	4628      	mov	r0, r5
 80106ce:	2209      	movs	r2, #9
 80106d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80106d4:	f000 bd0a 	b.w	80110ec <ucdr_deserialize_array_double>
 80106d8:	4608      	mov	r0, r1
 80106da:	bd38      	pop	{r3, r4, r5, pc}

080106dc <_Imu__cdr_serialize>:
 80106dc:	2800      	cmp	r0, #0
 80106de:	d039      	beq.n	8010754 <_Imu__cdr_serialize+0x78>
 80106e0:	b538      	push	{r3, r4, r5, lr}
 80106e2:	4604      	mov	r4, r0
 80106e4:	460d      	mov	r5, r1
 80106e6:	f000 fa05 	bl	8010af4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80106ea:	4603      	mov	r3, r0
 80106ec:	4629      	mov	r1, r5
 80106ee:	4620      	mov	r0, r4
 80106f0:	685b      	ldr	r3, [r3, #4]
 80106f2:	689b      	ldr	r3, [r3, #8]
 80106f4:	4798      	blx	r3
 80106f6:	f000 fb6f 	bl	8010dd8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 80106fa:	4603      	mov	r3, r0
 80106fc:	4629      	mov	r1, r5
 80106fe:	f104 0018 	add.w	r0, r4, #24
 8010702:	685b      	ldr	r3, [r3, #4]
 8010704:	689b      	ldr	r3, [r3, #8]
 8010706:	4798      	blx	r3
 8010708:	2209      	movs	r2, #9
 801070a:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 801070e:	4628      	mov	r0, r5
 8010710:	f000 fc98 	bl	8011044 <ucdr_serialize_array_double>
 8010714:	f7fc fdec 	bl	800d2f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8010718:	4603      	mov	r3, r0
 801071a:	4629      	mov	r1, r5
 801071c:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 8010720:	685b      	ldr	r3, [r3, #4]
 8010722:	689b      	ldr	r3, [r3, #8]
 8010724:	4798      	blx	r3
 8010726:	2209      	movs	r2, #9
 8010728:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 801072c:	4628      	mov	r0, r5
 801072e:	f000 fc89 	bl	8011044 <ucdr_serialize_array_double>
 8010732:	f7fc fddd 	bl	800d2f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8010736:	4603      	mov	r3, r0
 8010738:	4629      	mov	r1, r5
 801073a:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 801073e:	685b      	ldr	r3, [r3, #4]
 8010740:	689b      	ldr	r3, [r3, #8]
 8010742:	4798      	blx	r3
 8010744:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 8010748:	4628      	mov	r0, r5
 801074a:	2209      	movs	r2, #9
 801074c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010750:	f000 bc78 	b.w	8011044 <ucdr_serialize_array_double>
 8010754:	4770      	bx	lr
 8010756:	bf00      	nop

08010758 <max_serialized_size_sensor_msgs__msg__Imu>:
 8010758:	2301      	movs	r3, #1
 801075a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801075e:	7003      	strb	r3, [r0, #0]
 8010760:	4680      	mov	r8, r0
 8010762:	460f      	mov	r7, r1
 8010764:	f000 f9bc 	bl	8010ae0 <max_serialized_size_std_msgs__msg__Header>
 8010768:	4604      	mov	r4, r0
 801076a:	4640      	mov	r0, r8
 801076c:	443c      	add	r4, r7
 801076e:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 8010772:	4621      	mov	r1, r4
 8010774:	f000 fb10 	bl	8010d98 <max_serialized_size_geometry_msgs__msg__Quaternion>
 8010778:	4404      	add	r4, r0
 801077a:	2108      	movs	r1, #8
 801077c:	4620      	mov	r0, r4
 801077e:	f7fe f9f7 	bl	800eb70 <ucdr_alignment>
 8010782:	4606      	mov	r6, r0
 8010784:	4640      	mov	r0, r8
 8010786:	3648      	adds	r6, #72	@ 0x48
 8010788:	4426      	add	r6, r4
 801078a:	4631      	mov	r1, r6
 801078c:	f7fc fd96 	bl	800d2bc <max_serialized_size_geometry_msgs__msg__Vector3>
 8010790:	1835      	adds	r5, r6, r0
 8010792:	2108      	movs	r1, #8
 8010794:	4628      	mov	r0, r5
 8010796:	f7fe f9eb 	bl	800eb70 <ucdr_alignment>
 801079a:	4604      	mov	r4, r0
 801079c:	4640      	mov	r0, r8
 801079e:	3448      	adds	r4, #72	@ 0x48
 80107a0:	4425      	add	r5, r4
 80107a2:	4629      	mov	r1, r5
 80107a4:	f7fc fd8a 	bl	800d2bc <max_serialized_size_geometry_msgs__msg__Vector3>
 80107a8:	4405      	add	r5, r0
 80107aa:	2108      	movs	r1, #8
 80107ac:	4628      	mov	r0, r5
 80107ae:	f7fe f9df 	bl	800eb70 <ucdr_alignment>
 80107b2:	4438      	add	r0, r7
 80107b4:	4428      	add	r0, r5
 80107b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107ba:	bf00      	nop

080107bc <_Imu__max_serialized_size>:
 80107bc:	b500      	push	{lr}
 80107be:	b083      	sub	sp, #12
 80107c0:	2100      	movs	r1, #0
 80107c2:	f10d 0007 	add.w	r0, sp, #7
 80107c6:	f7ff ffc7 	bl	8010758 <max_serialized_size_sensor_msgs__msg__Imu>
 80107ca:	b003      	add	sp, #12
 80107cc:	f85d fb04 	ldr.w	pc, [sp], #4

080107d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 80107d0:	4800      	ldr	r0, [pc, #0]	@ (80107d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 80107d2:	4770      	bx	lr
 80107d4:	20000598 	.word	0x20000598

080107d8 <get_serialized_size_sensor_msgs__msg__MagneticField>:
 80107d8:	b570      	push	{r4, r5, r6, lr}
 80107da:	4605      	mov	r5, r0
 80107dc:	b190      	cbz	r0, 8010804 <get_serialized_size_sensor_msgs__msg__MagneticField+0x2c>
 80107de:	460c      	mov	r4, r1
 80107e0:	f000 f904 	bl	80109ec <get_serialized_size_std_msgs__msg__Header>
 80107e4:	4606      	mov	r6, r0
 80107e6:	f105 0018 	add.w	r0, r5, #24
 80107ea:	4426      	add	r6, r4
 80107ec:	f1c4 0448 	rsb	r4, r4, #72	@ 0x48
 80107f0:	4631      	mov	r1, r6
 80107f2:	f7fc fcf5 	bl	800d1e0 <get_serialized_size_geometry_msgs__msg__Vector3>
 80107f6:	4406      	add	r6, r0
 80107f8:	2108      	movs	r1, #8
 80107fa:	4630      	mov	r0, r6
 80107fc:	f7fe f9b8 	bl	800eb70 <ucdr_alignment>
 8010800:	4404      	add	r4, r0
 8010802:	19a0      	adds	r0, r4, r6
 8010804:	bd70      	pop	{r4, r5, r6, pc}
 8010806:	bf00      	nop

08010808 <_MagneticField__cdr_deserialize>:
 8010808:	b538      	push	{r3, r4, r5, lr}
 801080a:	460c      	mov	r4, r1
 801080c:	b1c9      	cbz	r1, 8010842 <_MagneticField__cdr_deserialize+0x3a>
 801080e:	4605      	mov	r5, r0
 8010810:	f000 f970 	bl	8010af4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010814:	4603      	mov	r3, r0
 8010816:	4621      	mov	r1, r4
 8010818:	4628      	mov	r0, r5
 801081a:	685b      	ldr	r3, [r3, #4]
 801081c:	68db      	ldr	r3, [r3, #12]
 801081e:	4798      	blx	r3
 8010820:	f7fc fd66 	bl	800d2f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8010824:	4603      	mov	r3, r0
 8010826:	f104 0118 	add.w	r1, r4, #24
 801082a:	4628      	mov	r0, r5
 801082c:	685b      	ldr	r3, [r3, #4]
 801082e:	68db      	ldr	r3, [r3, #12]
 8010830:	4798      	blx	r3
 8010832:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8010836:	4628      	mov	r0, r5
 8010838:	2209      	movs	r2, #9
 801083a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801083e:	f000 bc55 	b.w	80110ec <ucdr_deserialize_array_double>
 8010842:	4608      	mov	r0, r1
 8010844:	bd38      	pop	{r3, r4, r5, pc}
 8010846:	bf00      	nop

08010848 <_MagneticField__cdr_serialize>:
 8010848:	b1d8      	cbz	r0, 8010882 <_MagneticField__cdr_serialize+0x3a>
 801084a:	b538      	push	{r3, r4, r5, lr}
 801084c:	4604      	mov	r4, r0
 801084e:	460d      	mov	r5, r1
 8010850:	f000 f950 	bl	8010af4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010854:	4603      	mov	r3, r0
 8010856:	4629      	mov	r1, r5
 8010858:	4620      	mov	r0, r4
 801085a:	685b      	ldr	r3, [r3, #4]
 801085c:	689b      	ldr	r3, [r3, #8]
 801085e:	4798      	blx	r3
 8010860:	f7fc fd46 	bl	800d2f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8010864:	4603      	mov	r3, r0
 8010866:	4629      	mov	r1, r5
 8010868:	f104 0018 	add.w	r0, r4, #24
 801086c:	685b      	ldr	r3, [r3, #4]
 801086e:	689b      	ldr	r3, [r3, #8]
 8010870:	4798      	blx	r3
 8010872:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8010876:	4628      	mov	r0, r5
 8010878:	2209      	movs	r2, #9
 801087a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801087e:	f000 bbe1 	b.w	8011044 <ucdr_serialize_array_double>
 8010882:	4770      	bx	lr

08010884 <_MagneticField__get_serialized_size>:
 8010884:	b538      	push	{r3, r4, r5, lr}
 8010886:	4604      	mov	r4, r0
 8010888:	b180      	cbz	r0, 80108ac <_MagneticField__get_serialized_size+0x28>
 801088a:	2100      	movs	r1, #0
 801088c:	f000 f8ae 	bl	80109ec <get_serialized_size_std_msgs__msg__Header>
 8010890:	4605      	mov	r5, r0
 8010892:	f104 0018 	add.w	r0, r4, #24
 8010896:	4629      	mov	r1, r5
 8010898:	f7fc fca2 	bl	800d1e0 <get_serialized_size_geometry_msgs__msg__Vector3>
 801089c:	4405      	add	r5, r0
 801089e:	2108      	movs	r1, #8
 80108a0:	4628      	mov	r0, r5
 80108a2:	f7fe f965 	bl	800eb70 <ucdr_alignment>
 80108a6:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 80108aa:	1960      	adds	r0, r4, r5
 80108ac:	bd38      	pop	{r3, r4, r5, pc}
 80108ae:	bf00      	nop

080108b0 <_MagneticField__max_serialized_size>:
 80108b0:	b510      	push	{r4, lr}
 80108b2:	b082      	sub	sp, #8
 80108b4:	2301      	movs	r3, #1
 80108b6:	2100      	movs	r1, #0
 80108b8:	f10d 0007 	add.w	r0, sp, #7
 80108bc:	f88d 3007 	strb.w	r3, [sp, #7]
 80108c0:	f000 f90e 	bl	8010ae0 <max_serialized_size_std_msgs__msg__Header>
 80108c4:	4604      	mov	r4, r0
 80108c6:	f10d 0007 	add.w	r0, sp, #7
 80108ca:	4621      	mov	r1, r4
 80108cc:	f7fc fcf6 	bl	800d2bc <max_serialized_size_geometry_msgs__msg__Vector3>
 80108d0:	4404      	add	r4, r0
 80108d2:	2108      	movs	r1, #8
 80108d4:	4620      	mov	r0, r4
 80108d6:	f7fe f94b 	bl	800eb70 <ucdr_alignment>
 80108da:	3048      	adds	r0, #72	@ 0x48
 80108dc:	4420      	add	r0, r4
 80108de:	b002      	add	sp, #8
 80108e0:	bd10      	pop	{r4, pc}
 80108e2:	bf00      	nop

080108e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField>:
 80108e4:	4800      	ldr	r0, [pc, #0]	@ (80108e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x4>)
 80108e6:	4770      	bx	lr
 80108e8:	200005c0 	.word	0x200005c0

080108ec <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 80108ec:	4b04      	ldr	r3, [pc, #16]	@ (8010900 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 80108ee:	681a      	ldr	r2, [r3, #0]
 80108f0:	b10a      	cbz	r2, 80108f6 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0xa>
 80108f2:	4803      	ldr	r0, [pc, #12]	@ (8010900 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 80108f4:	4770      	bx	lr
 80108f6:	4a03      	ldr	r2, [pc, #12]	@ (8010904 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x18>)
 80108f8:	4801      	ldr	r0, [pc, #4]	@ (8010900 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 80108fa:	6812      	ldr	r2, [r2, #0]
 80108fc:	601a      	str	r2, [r3, #0]
 80108fe:	4770      	bx	lr
 8010900:	200005f0 	.word	0x200005f0
 8010904:	200001fc 	.word	0x200001fc

08010908 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 8010908:	4a02      	ldr	r2, [pc, #8]	@ (8010914 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0xc>)
 801090a:	4b03      	ldr	r3, [pc, #12]	@ (8010918 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x10>)
 801090c:	6812      	ldr	r2, [r2, #0]
 801090e:	601a      	str	r2, [r3, #0]
 8010910:	4770      	bx	lr
 8010912:	bf00      	nop
 8010914:	200001fc 	.word	0x200001fc
 8010918:	200005f0 	.word	0x200005f0

0801091c <std_msgs__msg__Float32__rosidl_typesupport_introspection_c__Float32_init_function>:
 801091c:	f007 bdd8 	b.w	80184d0 <std_msgs__msg__Float32__init>

08010920 <std_msgs__msg__Float32__rosidl_typesupport_introspection_c__Float32_fini_function>:
 8010920:	f007 bdda 	b.w	80184d8 <std_msgs__msg__Float32__fini>

08010924 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 8010924:	4b04      	ldr	r3, [pc, #16]	@ (8010938 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 8010926:	681a      	ldr	r2, [r3, #0]
 8010928:	b10a      	cbz	r2, 801092e <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0xa>
 801092a:	4803      	ldr	r0, [pc, #12]	@ (8010938 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 801092c:	4770      	bx	lr
 801092e:	4a03      	ldr	r2, [pc, #12]	@ (801093c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x18>)
 8010930:	4801      	ldr	r0, [pc, #4]	@ (8010938 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 8010932:	6812      	ldr	r2, [r2, #0]
 8010934:	601a      	str	r2, [r3, #0]
 8010936:	4770      	bx	lr
 8010938:	20000638 	.word	0x20000638
 801093c:	20000200 	.word	0x20000200

08010940 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 8010940:	f007 bdcc 	b.w	80184dc <std_msgs__msg__Header__init>

08010944 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 8010944:	f007 bdee 	b.w	8018524 <std_msgs__msg__Header__fini>

08010948 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8010948:	b508      	push	{r3, lr}
 801094a:	f000 f8db 	bl	8010b04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801094e:	4b06      	ldr	r3, [pc, #24]	@ (8010968 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8010950:	4906      	ldr	r1, [pc, #24]	@ (801096c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 8010952:	681a      	ldr	r2, [r3, #0]
 8010954:	60c8      	str	r0, [r1, #12]
 8010956:	b10a      	cbz	r2, 801095c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 8010958:	4803      	ldr	r0, [pc, #12]	@ (8010968 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 801095a:	bd08      	pop	{r3, pc}
 801095c:	4a04      	ldr	r2, [pc, #16]	@ (8010970 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 801095e:	4802      	ldr	r0, [pc, #8]	@ (8010968 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8010960:	6812      	ldr	r2, [r2, #0]
 8010962:	601a      	str	r2, [r3, #0]
 8010964:	bd08      	pop	{r3, pc}
 8010966:	bf00      	nop
 8010968:	200006bc 	.word	0x200006bc
 801096c:	20000644 	.word	0x20000644
 8010970:	20000200 	.word	0x20000200

08010974 <_Float32__max_serialized_size>:
 8010974:	2104      	movs	r1, #4
 8010976:	2000      	movs	r0, #0
 8010978:	b508      	push	{r3, lr}
 801097a:	f7fe f8f9 	bl	800eb70 <ucdr_alignment>
 801097e:	3004      	adds	r0, #4
 8010980:	bd08      	pop	{r3, pc}
 8010982:	bf00      	nop

08010984 <_Float32__cdr_deserialize>:
 8010984:	b109      	cbz	r1, 801098a <_Float32__cdr_deserialize+0x6>
 8010986:	f7fd bcd5 	b.w	800e334 <ucdr_deserialize_float>
 801098a:	4608      	mov	r0, r1
 801098c:	4770      	bx	lr
 801098e:	bf00      	nop

08010990 <get_serialized_size_std_msgs__msg__Float32>:
 8010990:	b138      	cbz	r0, 80109a2 <get_serialized_size_std_msgs__msg__Float32+0x12>
 8010992:	b508      	push	{r3, lr}
 8010994:	460b      	mov	r3, r1
 8010996:	2104      	movs	r1, #4
 8010998:	4618      	mov	r0, r3
 801099a:	f7fe f8e9 	bl	800eb70 <ucdr_alignment>
 801099e:	3004      	adds	r0, #4
 80109a0:	bd08      	pop	{r3, pc}
 80109a2:	4770      	bx	lr

080109a4 <_Float32__cdr_serialize>:
 80109a4:	b120      	cbz	r0, 80109b0 <_Float32__cdr_serialize+0xc>
 80109a6:	ed90 0a00 	vldr	s0, [r0]
 80109aa:	4608      	mov	r0, r1
 80109ac:	f7fd bc2a 	b.w	800e204 <ucdr_serialize_float>
 80109b0:	4770      	bx	lr
 80109b2:	bf00      	nop

080109b4 <_Float32__get_serialized_size>:
 80109b4:	b130      	cbz	r0, 80109c4 <_Float32__get_serialized_size+0x10>
 80109b6:	2104      	movs	r1, #4
 80109b8:	2000      	movs	r0, #0
 80109ba:	b508      	push	{r3, lr}
 80109bc:	f7fe f8d8 	bl	800eb70 <ucdr_alignment>
 80109c0:	3004      	adds	r0, #4
 80109c2:	bd08      	pop	{r3, pc}
 80109c4:	4770      	bx	lr
 80109c6:	bf00      	nop

080109c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 80109c8:	4800      	ldr	r0, [pc, #0]	@ (80109cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32+0x4>)
 80109ca:	4770      	bx	lr
 80109cc:	200006c8 	.word	0x200006c8

080109d0 <_Header__max_serialized_size>:
 80109d0:	b500      	push	{lr}
 80109d2:	b083      	sub	sp, #12
 80109d4:	2301      	movs	r3, #1
 80109d6:	2100      	movs	r1, #0
 80109d8:	f10d 0007 	add.w	r0, sp, #7
 80109dc:	f88d 3007 	strb.w	r3, [sp, #7]
 80109e0:	f000 f8ee 	bl	8010bc0 <max_serialized_size_builtin_interfaces__msg__Time>
 80109e4:	b003      	add	sp, #12
 80109e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80109ea:	bf00      	nop

080109ec <get_serialized_size_std_msgs__msg__Header>:
 80109ec:	b570      	push	{r4, r5, r6, lr}
 80109ee:	4605      	mov	r5, r0
 80109f0:	b168      	cbz	r0, 8010a0e <get_serialized_size_std_msgs__msg__Header+0x22>
 80109f2:	460c      	mov	r4, r1
 80109f4:	f000 f894 	bl	8010b20 <get_serialized_size_builtin_interfaces__msg__Time>
 80109f8:	2104      	movs	r1, #4
 80109fa:	1826      	adds	r6, r4, r0
 80109fc:	f1c4 0405 	rsb	r4, r4, #5
 8010a00:	4630      	mov	r0, r6
 8010a02:	f7fe f8b5 	bl	800eb70 <ucdr_alignment>
 8010a06:	68e9      	ldr	r1, [r5, #12]
 8010a08:	440c      	add	r4, r1
 8010a0a:	4404      	add	r4, r0
 8010a0c:	19a0      	adds	r0, r4, r6
 8010a0e:	bd70      	pop	{r4, r5, r6, pc}

08010a10 <_Header__cdr_deserialize>:
 8010a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a12:	460c      	mov	r4, r1
 8010a14:	b083      	sub	sp, #12
 8010a16:	b1e9      	cbz	r1, 8010a54 <_Header__cdr_deserialize+0x44>
 8010a18:	4606      	mov	r6, r0
 8010a1a:	f000 f8e5 	bl	8010be8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010a1e:	4603      	mov	r3, r0
 8010a20:	4621      	mov	r1, r4
 8010a22:	4630      	mov	r0, r6
 8010a24:	685b      	ldr	r3, [r3, #4]
 8010a26:	68db      	ldr	r3, [r3, #12]
 8010a28:	4798      	blx	r3
 8010a2a:	6927      	ldr	r7, [r4, #16]
 8010a2c:	ab01      	add	r3, sp, #4
 8010a2e:	68a1      	ldr	r1, [r4, #8]
 8010a30:	463a      	mov	r2, r7
 8010a32:	4630      	mov	r0, r6
 8010a34:	f000 fbc0 	bl	80111b8 <ucdr_deserialize_sequence_char>
 8010a38:	9b01      	ldr	r3, [sp, #4]
 8010a3a:	4605      	mov	r5, r0
 8010a3c:	b920      	cbnz	r0, 8010a48 <_Header__cdr_deserialize+0x38>
 8010a3e:	429f      	cmp	r7, r3
 8010a40:	d30c      	bcc.n	8010a5c <_Header__cdr_deserialize+0x4c>
 8010a42:	4628      	mov	r0, r5
 8010a44:	b003      	add	sp, #12
 8010a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a48:	b103      	cbz	r3, 8010a4c <_Header__cdr_deserialize+0x3c>
 8010a4a:	3b01      	subs	r3, #1
 8010a4c:	4628      	mov	r0, r5
 8010a4e:	60e3      	str	r3, [r4, #12]
 8010a50:	b003      	add	sp, #12
 8010a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a54:	460d      	mov	r5, r1
 8010a56:	4628      	mov	r0, r5
 8010a58:	b003      	add	sp, #12
 8010a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a5c:	2101      	movs	r1, #1
 8010a5e:	4630      	mov	r0, r6
 8010a60:	75b5      	strb	r5, [r6, #22]
 8010a62:	7571      	strb	r1, [r6, #21]
 8010a64:	60e5      	str	r5, [r4, #12]
 8010a66:	f7fe f89b 	bl	800eba0 <ucdr_align_to>
 8010a6a:	4630      	mov	r0, r6
 8010a6c:	9901      	ldr	r1, [sp, #4]
 8010a6e:	f7fe f8cf 	bl	800ec10 <ucdr_advance_buffer>
 8010a72:	4628      	mov	r0, r5
 8010a74:	b003      	add	sp, #12
 8010a76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010a78 <_Header__cdr_serialize>:
 8010a78:	b308      	cbz	r0, 8010abe <_Header__cdr_serialize+0x46>
 8010a7a:	b570      	push	{r4, r5, r6, lr}
 8010a7c:	4604      	mov	r4, r0
 8010a7e:	460d      	mov	r5, r1
 8010a80:	f000 f8b2 	bl	8010be8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010a84:	4603      	mov	r3, r0
 8010a86:	4629      	mov	r1, r5
 8010a88:	4620      	mov	r0, r4
 8010a8a:	685b      	ldr	r3, [r3, #4]
 8010a8c:	689b      	ldr	r3, [r3, #8]
 8010a8e:	4798      	blx	r3
 8010a90:	68a6      	ldr	r6, [r4, #8]
 8010a92:	b15e      	cbz	r6, 8010aac <_Header__cdr_serialize+0x34>
 8010a94:	4630      	mov	r0, r6
 8010a96:	f7ef fbdd 	bl	8000254 <strlen>
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	1c42      	adds	r2, r0, #1
 8010a9e:	4631      	mov	r1, r6
 8010aa0:	4628      	mov	r0, r5
 8010aa2:	60e3      	str	r3, [r4, #12]
 8010aa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010aa8:	f000 bb74 	b.w	8011194 <ucdr_serialize_sequence_char>
 8010aac:	4633      	mov	r3, r6
 8010aae:	4632      	mov	r2, r6
 8010ab0:	4631      	mov	r1, r6
 8010ab2:	4628      	mov	r0, r5
 8010ab4:	60e3      	str	r3, [r4, #12]
 8010ab6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010aba:	f000 bb6b 	b.w	8011194 <ucdr_serialize_sequence_char>
 8010abe:	4770      	bx	lr

08010ac0 <_Header__get_serialized_size>:
 8010ac0:	b538      	push	{r3, r4, r5, lr}
 8010ac2:	4604      	mov	r4, r0
 8010ac4:	b150      	cbz	r0, 8010adc <_Header__get_serialized_size+0x1c>
 8010ac6:	2100      	movs	r1, #0
 8010ac8:	f000 f82a 	bl	8010b20 <get_serialized_size_builtin_interfaces__msg__Time>
 8010acc:	2104      	movs	r1, #4
 8010ace:	4605      	mov	r5, r0
 8010ad0:	f7fe f84e 	bl	800eb70 <ucdr_alignment>
 8010ad4:	68e2      	ldr	r2, [r4, #12]
 8010ad6:	3205      	adds	r2, #5
 8010ad8:	1953      	adds	r3, r2, r5
 8010ada:	4418      	add	r0, r3
 8010adc:	bd38      	pop	{r3, r4, r5, pc}
 8010ade:	bf00      	nop

08010ae0 <max_serialized_size_std_msgs__msg__Header>:
 8010ae0:	2301      	movs	r3, #1
 8010ae2:	b510      	push	{r4, lr}
 8010ae4:	7003      	strb	r3, [r0, #0]
 8010ae6:	4604      	mov	r4, r0
 8010ae8:	f000 f86a 	bl	8010bc0 <max_serialized_size_builtin_interfaces__msg__Time>
 8010aec:	2300      	movs	r3, #0
 8010aee:	7023      	strb	r3, [r4, #0]
 8010af0:	bd10      	pop	{r4, pc}
 8010af2:	bf00      	nop

08010af4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8010af4:	4800      	ldr	r0, [pc, #0]	@ (8010af8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 8010af6:	4770      	bx	lr
 8010af8:	200006f0 	.word	0x200006f0

08010afc <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 8010afc:	f007 bd1e 	b.w	801853c <builtin_interfaces__msg__Time__init>

08010b00 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 8010b00:	f007 bd20 	b.w	8018544 <builtin_interfaces__msg__Time__fini>

08010b04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8010b04:	4b04      	ldr	r3, [pc, #16]	@ (8010b18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8010b06:	681a      	ldr	r2, [r3, #0]
 8010b08:	b10a      	cbz	r2, 8010b0e <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 8010b0a:	4803      	ldr	r0, [pc, #12]	@ (8010b18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8010b0c:	4770      	bx	lr
 8010b0e:	4a03      	ldr	r2, [pc, #12]	@ (8010b1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 8010b10:	4801      	ldr	r0, [pc, #4]	@ (8010b18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8010b12:	6812      	ldr	r2, [r2, #0]
 8010b14:	601a      	str	r2, [r3, #0]
 8010b16:	4770      	bx	lr
 8010b18:	20000790 	.word	0x20000790
 8010b1c:	20000200 	.word	0x20000200

08010b20 <get_serialized_size_builtin_interfaces__msg__Time>:
 8010b20:	b180      	cbz	r0, 8010b44 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 8010b22:	b538      	push	{r3, r4, r5, lr}
 8010b24:	460d      	mov	r5, r1
 8010b26:	2104      	movs	r1, #4
 8010b28:	4628      	mov	r0, r5
 8010b2a:	f7fe f821 	bl	800eb70 <ucdr_alignment>
 8010b2e:	1d2b      	adds	r3, r5, #4
 8010b30:	f1c5 0504 	rsb	r5, r5, #4
 8010b34:	2104      	movs	r1, #4
 8010b36:	181c      	adds	r4, r3, r0
 8010b38:	4620      	mov	r0, r4
 8010b3a:	f7fe f819 	bl	800eb70 <ucdr_alignment>
 8010b3e:	4428      	add	r0, r5
 8010b40:	4420      	add	r0, r4
 8010b42:	bd38      	pop	{r3, r4, r5, pc}
 8010b44:	4770      	bx	lr
 8010b46:	bf00      	nop

08010b48 <_Time__cdr_deserialize>:
 8010b48:	b538      	push	{r3, r4, r5, lr}
 8010b4a:	460c      	mov	r4, r1
 8010b4c:	b141      	cbz	r1, 8010b60 <_Time__cdr_deserialize+0x18>
 8010b4e:	4605      	mov	r5, r0
 8010b50:	f7fd fac8 	bl	800e0e4 <ucdr_deserialize_int32_t>
 8010b54:	1d21      	adds	r1, r4, #4
 8010b56:	4628      	mov	r0, r5
 8010b58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b5c:	f7fc bf40 	b.w	800d9e0 <ucdr_deserialize_uint32_t>
 8010b60:	4608      	mov	r0, r1
 8010b62:	bd38      	pop	{r3, r4, r5, pc}

08010b64 <_Time__cdr_serialize>:
 8010b64:	b160      	cbz	r0, 8010b80 <_Time__cdr_serialize+0x1c>
 8010b66:	b538      	push	{r3, r4, r5, lr}
 8010b68:	460d      	mov	r5, r1
 8010b6a:	4604      	mov	r4, r0
 8010b6c:	6801      	ldr	r1, [r0, #0]
 8010b6e:	4628      	mov	r0, r5
 8010b70:	f7fd fa20 	bl	800dfb4 <ucdr_serialize_int32_t>
 8010b74:	6861      	ldr	r1, [r4, #4]
 8010b76:	4628      	mov	r0, r5
 8010b78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b7c:	f7fc be00 	b.w	800d780 <ucdr_serialize_uint32_t>
 8010b80:	4770      	bx	lr
 8010b82:	bf00      	nop

08010b84 <_Time__get_serialized_size>:
 8010b84:	b160      	cbz	r0, 8010ba0 <_Time__get_serialized_size+0x1c>
 8010b86:	2104      	movs	r1, #4
 8010b88:	2000      	movs	r0, #0
 8010b8a:	b510      	push	{r4, lr}
 8010b8c:	f7fd fff0 	bl	800eb70 <ucdr_alignment>
 8010b90:	2104      	movs	r1, #4
 8010b92:	1844      	adds	r4, r0, r1
 8010b94:	4620      	mov	r0, r4
 8010b96:	f7fd ffeb 	bl	800eb70 <ucdr_alignment>
 8010b9a:	3004      	adds	r0, #4
 8010b9c:	4420      	add	r0, r4
 8010b9e:	bd10      	pop	{r4, pc}
 8010ba0:	4770      	bx	lr
 8010ba2:	bf00      	nop

08010ba4 <_Time__max_serialized_size>:
 8010ba4:	b510      	push	{r4, lr}
 8010ba6:	2104      	movs	r1, #4
 8010ba8:	2000      	movs	r0, #0
 8010baa:	f7fd ffe1 	bl	800eb70 <ucdr_alignment>
 8010bae:	2104      	movs	r1, #4
 8010bb0:	1844      	adds	r4, r0, r1
 8010bb2:	4620      	mov	r0, r4
 8010bb4:	f7fd ffdc 	bl	800eb70 <ucdr_alignment>
 8010bb8:	3004      	adds	r0, #4
 8010bba:	4420      	add	r0, r4
 8010bbc:	bd10      	pop	{r4, pc}
 8010bbe:	bf00      	nop

08010bc0 <max_serialized_size_builtin_interfaces__msg__Time>:
 8010bc0:	b538      	push	{r3, r4, r5, lr}
 8010bc2:	460c      	mov	r4, r1
 8010bc4:	2301      	movs	r3, #1
 8010bc6:	2104      	movs	r1, #4
 8010bc8:	1d25      	adds	r5, r4, #4
 8010bca:	7003      	strb	r3, [r0, #0]
 8010bcc:	4620      	mov	r0, r4
 8010bce:	f1c4 0404 	rsb	r4, r4, #4
 8010bd2:	f7fd ffcd 	bl	800eb70 <ucdr_alignment>
 8010bd6:	4405      	add	r5, r0
 8010bd8:	2104      	movs	r1, #4
 8010bda:	4628      	mov	r0, r5
 8010bdc:	f7fd ffc8 	bl	800eb70 <ucdr_alignment>
 8010be0:	4420      	add	r0, r4
 8010be2:	4428      	add	r0, r5
 8010be4:	bd38      	pop	{r3, r4, r5, pc}
 8010be6:	bf00      	nop

08010be8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8010be8:	4800      	ldr	r0, [pc, #0]	@ (8010bec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 8010bea:	4770      	bx	lr
 8010bec:	2000079c 	.word	0x2000079c

08010bf0 <geometry_msgs__msg__Twist__init>:
 8010bf0:	b570      	push	{r4, r5, r6, lr}
 8010bf2:	4605      	mov	r5, r0
 8010bf4:	b1a8      	cbz	r0, 8010c22 <geometry_msgs__msg__Twist__init+0x32>
 8010bf6:	f000 f82b 	bl	8010c50 <geometry_msgs__msg__Vector3__init>
 8010bfa:	4604      	mov	r4, r0
 8010bfc:	b140      	cbz	r0, 8010c10 <geometry_msgs__msg__Twist__init+0x20>
 8010bfe:	f105 0618 	add.w	r6, r5, #24
 8010c02:	4630      	mov	r0, r6
 8010c04:	f000 f824 	bl	8010c50 <geometry_msgs__msg__Vector3__init>
 8010c08:	4604      	mov	r4, r0
 8010c0a:	b168      	cbz	r0, 8010c28 <geometry_msgs__msg__Twist__init+0x38>
 8010c0c:	4620      	mov	r0, r4
 8010c0e:	bd70      	pop	{r4, r5, r6, pc}
 8010c10:	4628      	mov	r0, r5
 8010c12:	f000 f821 	bl	8010c58 <geometry_msgs__msg__Vector3__fini>
 8010c16:	f105 0018 	add.w	r0, r5, #24
 8010c1a:	f000 f81d 	bl	8010c58 <geometry_msgs__msg__Vector3__fini>
 8010c1e:	4620      	mov	r0, r4
 8010c20:	bd70      	pop	{r4, r5, r6, pc}
 8010c22:	4604      	mov	r4, r0
 8010c24:	4620      	mov	r0, r4
 8010c26:	bd70      	pop	{r4, r5, r6, pc}
 8010c28:	4628      	mov	r0, r5
 8010c2a:	f000 f815 	bl	8010c58 <geometry_msgs__msg__Vector3__fini>
 8010c2e:	4630      	mov	r0, r6
 8010c30:	f000 f812 	bl	8010c58 <geometry_msgs__msg__Vector3__fini>
 8010c34:	e7ea      	b.n	8010c0c <geometry_msgs__msg__Twist__init+0x1c>
 8010c36:	bf00      	nop

08010c38 <geometry_msgs__msg__Twist__fini>:
 8010c38:	b148      	cbz	r0, 8010c4e <geometry_msgs__msg__Twist__fini+0x16>
 8010c3a:	b510      	push	{r4, lr}
 8010c3c:	4604      	mov	r4, r0
 8010c3e:	f000 f80b 	bl	8010c58 <geometry_msgs__msg__Vector3__fini>
 8010c42:	f104 0018 	add.w	r0, r4, #24
 8010c46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c4a:	f000 b805 	b.w	8010c58 <geometry_msgs__msg__Vector3__fini>
 8010c4e:	4770      	bx	lr

08010c50 <geometry_msgs__msg__Vector3__init>:
 8010c50:	3800      	subs	r0, #0
 8010c52:	bf18      	it	ne
 8010c54:	2001      	movne	r0, #1
 8010c56:	4770      	bx	lr

08010c58 <geometry_msgs__msg__Vector3__fini>:
 8010c58:	4770      	bx	lr
 8010c5a:	bf00      	nop

08010c5c <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 8010c5c:	f007 bc74 	b.w	8018548 <geometry_msgs__msg__Quaternion__init>

08010c60 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 8010c60:	f007 bc82 	b.w	8018568 <geometry_msgs__msg__Quaternion__fini>

08010c64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8010c64:	4b04      	ldr	r3, [pc, #16]	@ (8010c78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8010c66:	681a      	ldr	r2, [r3, #0]
 8010c68:	b10a      	cbz	r2, 8010c6e <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 8010c6a:	4803      	ldr	r0, [pc, #12]	@ (8010c78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8010c6c:	4770      	bx	lr
 8010c6e:	4a03      	ldr	r2, [pc, #12]	@ (8010c7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 8010c70:	4801      	ldr	r0, [pc, #4]	@ (8010c78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8010c72:	6812      	ldr	r2, [r2, #0]
 8010c74:	601a      	str	r2, [r3, #0]
 8010c76:	4770      	bx	lr
 8010c78:	200008b4 	.word	0x200008b4
 8010c7c:	20000200 	.word	0x20000200

08010c80 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 8010c80:	b1e8      	cbz	r0, 8010cbe <get_serialized_size_geometry_msgs__msg__Quaternion+0x3e>
 8010c82:	b570      	push	{r4, r5, r6, lr}
 8010c84:	460d      	mov	r5, r1
 8010c86:	2108      	movs	r1, #8
 8010c88:	4628      	mov	r0, r5
 8010c8a:	f7fd ff71 	bl	800eb70 <ucdr_alignment>
 8010c8e:	f105 0308 	add.w	r3, r5, #8
 8010c92:	2108      	movs	r1, #8
 8010c94:	f1c5 0508 	rsb	r5, r5, #8
 8010c98:	181e      	adds	r6, r3, r0
 8010c9a:	4630      	mov	r0, r6
 8010c9c:	f7fd ff68 	bl	800eb70 <ucdr_alignment>
 8010ca0:	2108      	movs	r1, #8
 8010ca2:	1844      	adds	r4, r0, r1
 8010ca4:	4434      	add	r4, r6
 8010ca6:	4620      	mov	r0, r4
 8010ca8:	f7fd ff62 	bl	800eb70 <ucdr_alignment>
 8010cac:	2108      	movs	r1, #8
 8010cae:	4408      	add	r0, r1
 8010cb0:	4404      	add	r4, r0
 8010cb2:	4620      	mov	r0, r4
 8010cb4:	f7fd ff5c 	bl	800eb70 <ucdr_alignment>
 8010cb8:	4428      	add	r0, r5
 8010cba:	4420      	add	r0, r4
 8010cbc:	bd70      	pop	{r4, r5, r6, pc}
 8010cbe:	4770      	bx	lr

08010cc0 <_Quaternion__cdr_deserialize>:
 8010cc0:	b538      	push	{r3, r4, r5, lr}
 8010cc2:	460c      	mov	r4, r1
 8010cc4:	b199      	cbz	r1, 8010cee <_Quaternion__cdr_deserialize+0x2e>
 8010cc6:	4605      	mov	r5, r0
 8010cc8:	f7fd fd66 	bl	800e798 <ucdr_deserialize_double>
 8010ccc:	f104 0108 	add.w	r1, r4, #8
 8010cd0:	4628      	mov	r0, r5
 8010cd2:	f7fd fd61 	bl	800e798 <ucdr_deserialize_double>
 8010cd6:	f104 0110 	add.w	r1, r4, #16
 8010cda:	4628      	mov	r0, r5
 8010cdc:	f7fd fd5c 	bl	800e798 <ucdr_deserialize_double>
 8010ce0:	f104 0118 	add.w	r1, r4, #24
 8010ce4:	4628      	mov	r0, r5
 8010ce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010cea:	f7fd bd55 	b.w	800e798 <ucdr_deserialize_double>
 8010cee:	4608      	mov	r0, r1
 8010cf0:	bd38      	pop	{r3, r4, r5, pc}
 8010cf2:	bf00      	nop

08010cf4 <_Quaternion__cdr_serialize>:
 8010cf4:	b1c0      	cbz	r0, 8010d28 <_Quaternion__cdr_serialize+0x34>
 8010cf6:	b538      	push	{r3, r4, r5, lr}
 8010cf8:	460d      	mov	r5, r1
 8010cfa:	4604      	mov	r4, r0
 8010cfc:	ed90 0b00 	vldr	d0, [r0]
 8010d00:	4608      	mov	r0, r1
 8010d02:	f7fd fba7 	bl	800e454 <ucdr_serialize_double>
 8010d06:	4628      	mov	r0, r5
 8010d08:	ed94 0b02 	vldr	d0, [r4, #8]
 8010d0c:	f7fd fba2 	bl	800e454 <ucdr_serialize_double>
 8010d10:	4628      	mov	r0, r5
 8010d12:	ed94 0b04 	vldr	d0, [r4, #16]
 8010d16:	f7fd fb9d 	bl	800e454 <ucdr_serialize_double>
 8010d1a:	4628      	mov	r0, r5
 8010d1c:	ed94 0b06 	vldr	d0, [r4, #24]
 8010d20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d24:	f7fd bb96 	b.w	800e454 <ucdr_serialize_double>
 8010d28:	4770      	bx	lr
 8010d2a:	bf00      	nop

08010d2c <_Quaternion__get_serialized_size>:
 8010d2c:	b1c0      	cbz	r0, 8010d60 <_Quaternion__get_serialized_size+0x34>
 8010d2e:	2108      	movs	r1, #8
 8010d30:	2000      	movs	r0, #0
 8010d32:	b538      	push	{r3, r4, r5, lr}
 8010d34:	f7fd ff1c 	bl	800eb70 <ucdr_alignment>
 8010d38:	2108      	movs	r1, #8
 8010d3a:	1845      	adds	r5, r0, r1
 8010d3c:	4628      	mov	r0, r5
 8010d3e:	f7fd ff17 	bl	800eb70 <ucdr_alignment>
 8010d42:	2108      	movs	r1, #8
 8010d44:	1844      	adds	r4, r0, r1
 8010d46:	442c      	add	r4, r5
 8010d48:	4620      	mov	r0, r4
 8010d4a:	f7fd ff11 	bl	800eb70 <ucdr_alignment>
 8010d4e:	2108      	movs	r1, #8
 8010d50:	4408      	add	r0, r1
 8010d52:	4404      	add	r4, r0
 8010d54:	4620      	mov	r0, r4
 8010d56:	f7fd ff0b 	bl	800eb70 <ucdr_alignment>
 8010d5a:	3008      	adds	r0, #8
 8010d5c:	4420      	add	r0, r4
 8010d5e:	bd38      	pop	{r3, r4, r5, pc}
 8010d60:	4770      	bx	lr
 8010d62:	bf00      	nop

08010d64 <_Quaternion__max_serialized_size>:
 8010d64:	b538      	push	{r3, r4, r5, lr}
 8010d66:	2108      	movs	r1, #8
 8010d68:	2000      	movs	r0, #0
 8010d6a:	f7fd ff01 	bl	800eb70 <ucdr_alignment>
 8010d6e:	2108      	movs	r1, #8
 8010d70:	1845      	adds	r5, r0, r1
 8010d72:	4628      	mov	r0, r5
 8010d74:	f7fd fefc 	bl	800eb70 <ucdr_alignment>
 8010d78:	2108      	movs	r1, #8
 8010d7a:	1844      	adds	r4, r0, r1
 8010d7c:	442c      	add	r4, r5
 8010d7e:	4620      	mov	r0, r4
 8010d80:	f7fd fef6 	bl	800eb70 <ucdr_alignment>
 8010d84:	2108      	movs	r1, #8
 8010d86:	4408      	add	r0, r1
 8010d88:	4404      	add	r4, r0
 8010d8a:	4620      	mov	r0, r4
 8010d8c:	f7fd fef0 	bl	800eb70 <ucdr_alignment>
 8010d90:	3008      	adds	r0, #8
 8010d92:	4420      	add	r0, r4
 8010d94:	bd38      	pop	{r3, r4, r5, pc}
 8010d96:	bf00      	nop

08010d98 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 8010d98:	b570      	push	{r4, r5, r6, lr}
 8010d9a:	460c      	mov	r4, r1
 8010d9c:	2301      	movs	r3, #1
 8010d9e:	2108      	movs	r1, #8
 8010da0:	f104 0508 	add.w	r5, r4, #8
 8010da4:	7003      	strb	r3, [r0, #0]
 8010da6:	4620      	mov	r0, r4
 8010da8:	f1c4 0408 	rsb	r4, r4, #8
 8010dac:	f7fd fee0 	bl	800eb70 <ucdr_alignment>
 8010db0:	1946      	adds	r6, r0, r5
 8010db2:	2108      	movs	r1, #8
 8010db4:	4630      	mov	r0, r6
 8010db6:	f7fd fedb 	bl	800eb70 <ucdr_alignment>
 8010dba:	2108      	movs	r1, #8
 8010dbc:	1845      	adds	r5, r0, r1
 8010dbe:	4435      	add	r5, r6
 8010dc0:	4628      	mov	r0, r5
 8010dc2:	f7fd fed5 	bl	800eb70 <ucdr_alignment>
 8010dc6:	2108      	movs	r1, #8
 8010dc8:	4408      	add	r0, r1
 8010dca:	4405      	add	r5, r0
 8010dcc:	4628      	mov	r0, r5
 8010dce:	f7fd fecf 	bl	800eb70 <ucdr_alignment>
 8010dd2:	4420      	add	r0, r4
 8010dd4:	4428      	add	r0, r5
 8010dd6:	bd70      	pop	{r4, r5, r6, pc}

08010dd8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8010dd8:	4800      	ldr	r0, [pc, #0]	@ (8010ddc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 8010dda:	4770      	bx	lr
 8010ddc:	200008c0 	.word	0x200008c0

08010de0 <ucdr_serialize_endian_array_char>:
 8010de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010de4:	4619      	mov	r1, r3
 8010de6:	461f      	mov	r7, r3
 8010de8:	4605      	mov	r5, r0
 8010dea:	4690      	mov	r8, r2
 8010dec:	f7fd fe68 	bl	800eac0 <ucdr_check_buffer_available_for>
 8010df0:	b9e0      	cbnz	r0, 8010e2c <ucdr_serialize_endian_array_char+0x4c>
 8010df2:	463e      	mov	r6, r7
 8010df4:	e00b      	b.n	8010e0e <ucdr_serialize_endian_array_char+0x2e>
 8010df6:	4441      	add	r1, r8
 8010df8:	68a8      	ldr	r0, [r5, #8]
 8010dfa:	4622      	mov	r2, r4
 8010dfc:	1b36      	subs	r6, r6, r4
 8010dfe:	f00a fcb4 	bl	801b76a <memcpy>
 8010e02:	68ab      	ldr	r3, [r5, #8]
 8010e04:	6928      	ldr	r0, [r5, #16]
 8010e06:	4423      	add	r3, r4
 8010e08:	4420      	add	r0, r4
 8010e0a:	60ab      	str	r3, [r5, #8]
 8010e0c:	6128      	str	r0, [r5, #16]
 8010e0e:	4631      	mov	r1, r6
 8010e10:	2201      	movs	r2, #1
 8010e12:	4628      	mov	r0, r5
 8010e14:	f7fd fede 	bl	800ebd4 <ucdr_check_final_buffer_behavior_array>
 8010e18:	1bb9      	subs	r1, r7, r6
 8010e1a:	4604      	mov	r4, r0
 8010e1c:	2800      	cmp	r0, #0
 8010e1e:	d1ea      	bne.n	8010df6 <ucdr_serialize_endian_array_char+0x16>
 8010e20:	2301      	movs	r3, #1
 8010e22:	7da8      	ldrb	r0, [r5, #22]
 8010e24:	756b      	strb	r3, [r5, #21]
 8010e26:	4058      	eors	r0, r3
 8010e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e2c:	463a      	mov	r2, r7
 8010e2e:	4641      	mov	r1, r8
 8010e30:	68a8      	ldr	r0, [r5, #8]
 8010e32:	f00a fc9a 	bl	801b76a <memcpy>
 8010e36:	68aa      	ldr	r2, [r5, #8]
 8010e38:	692b      	ldr	r3, [r5, #16]
 8010e3a:	443a      	add	r2, r7
 8010e3c:	443b      	add	r3, r7
 8010e3e:	60aa      	str	r2, [r5, #8]
 8010e40:	612b      	str	r3, [r5, #16]
 8010e42:	e7ed      	b.n	8010e20 <ucdr_serialize_endian_array_char+0x40>

08010e44 <ucdr_deserialize_endian_array_char>:
 8010e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e48:	4619      	mov	r1, r3
 8010e4a:	461f      	mov	r7, r3
 8010e4c:	4605      	mov	r5, r0
 8010e4e:	4690      	mov	r8, r2
 8010e50:	f7fd fe36 	bl	800eac0 <ucdr_check_buffer_available_for>
 8010e54:	b9e8      	cbnz	r0, 8010e92 <ucdr_deserialize_endian_array_char+0x4e>
 8010e56:	463e      	mov	r6, r7
 8010e58:	e00c      	b.n	8010e74 <ucdr_deserialize_endian_array_char+0x30>
 8010e5a:	eb08 0003 	add.w	r0, r8, r3
 8010e5e:	68a9      	ldr	r1, [r5, #8]
 8010e60:	4622      	mov	r2, r4
 8010e62:	1b36      	subs	r6, r6, r4
 8010e64:	f00a fc81 	bl	801b76a <memcpy>
 8010e68:	68ab      	ldr	r3, [r5, #8]
 8010e6a:	6928      	ldr	r0, [r5, #16]
 8010e6c:	4423      	add	r3, r4
 8010e6e:	4420      	add	r0, r4
 8010e70:	60ab      	str	r3, [r5, #8]
 8010e72:	6128      	str	r0, [r5, #16]
 8010e74:	4631      	mov	r1, r6
 8010e76:	2201      	movs	r2, #1
 8010e78:	4628      	mov	r0, r5
 8010e7a:	f7fd feab 	bl	800ebd4 <ucdr_check_final_buffer_behavior_array>
 8010e7e:	1bbb      	subs	r3, r7, r6
 8010e80:	4604      	mov	r4, r0
 8010e82:	2800      	cmp	r0, #0
 8010e84:	d1e9      	bne.n	8010e5a <ucdr_deserialize_endian_array_char+0x16>
 8010e86:	2301      	movs	r3, #1
 8010e88:	7da8      	ldrb	r0, [r5, #22]
 8010e8a:	756b      	strb	r3, [r5, #21]
 8010e8c:	4058      	eors	r0, r3
 8010e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e92:	463a      	mov	r2, r7
 8010e94:	68a9      	ldr	r1, [r5, #8]
 8010e96:	4640      	mov	r0, r8
 8010e98:	f00a fc67 	bl	801b76a <memcpy>
 8010e9c:	68aa      	ldr	r2, [r5, #8]
 8010e9e:	692b      	ldr	r3, [r5, #16]
 8010ea0:	443a      	add	r2, r7
 8010ea2:	443b      	add	r3, r7
 8010ea4:	60aa      	str	r2, [r5, #8]
 8010ea6:	612b      	str	r3, [r5, #16]
 8010ea8:	e7ed      	b.n	8010e86 <ucdr_deserialize_endian_array_char+0x42>
 8010eaa:	bf00      	nop

08010eac <ucdr_serialize_array_uint8_t>:
 8010eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010eb0:	4688      	mov	r8, r1
 8010eb2:	4611      	mov	r1, r2
 8010eb4:	4617      	mov	r7, r2
 8010eb6:	4605      	mov	r5, r0
 8010eb8:	f7fd fe02 	bl	800eac0 <ucdr_check_buffer_available_for>
 8010ebc:	b9e0      	cbnz	r0, 8010ef8 <ucdr_serialize_array_uint8_t+0x4c>
 8010ebe:	463e      	mov	r6, r7
 8010ec0:	e00b      	b.n	8010eda <ucdr_serialize_array_uint8_t+0x2e>
 8010ec2:	4441      	add	r1, r8
 8010ec4:	68a8      	ldr	r0, [r5, #8]
 8010ec6:	4622      	mov	r2, r4
 8010ec8:	1b36      	subs	r6, r6, r4
 8010eca:	f00a fc4e 	bl	801b76a <memcpy>
 8010ece:	68ab      	ldr	r3, [r5, #8]
 8010ed0:	6928      	ldr	r0, [r5, #16]
 8010ed2:	4423      	add	r3, r4
 8010ed4:	4420      	add	r0, r4
 8010ed6:	60ab      	str	r3, [r5, #8]
 8010ed8:	6128      	str	r0, [r5, #16]
 8010eda:	4631      	mov	r1, r6
 8010edc:	2201      	movs	r2, #1
 8010ede:	4628      	mov	r0, r5
 8010ee0:	f7fd fe78 	bl	800ebd4 <ucdr_check_final_buffer_behavior_array>
 8010ee4:	1bb9      	subs	r1, r7, r6
 8010ee6:	4604      	mov	r4, r0
 8010ee8:	2800      	cmp	r0, #0
 8010eea:	d1ea      	bne.n	8010ec2 <ucdr_serialize_array_uint8_t+0x16>
 8010eec:	2301      	movs	r3, #1
 8010eee:	7da8      	ldrb	r0, [r5, #22]
 8010ef0:	756b      	strb	r3, [r5, #21]
 8010ef2:	4058      	eors	r0, r3
 8010ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ef8:	463a      	mov	r2, r7
 8010efa:	4641      	mov	r1, r8
 8010efc:	68a8      	ldr	r0, [r5, #8]
 8010efe:	f00a fc34 	bl	801b76a <memcpy>
 8010f02:	68aa      	ldr	r2, [r5, #8]
 8010f04:	692b      	ldr	r3, [r5, #16]
 8010f06:	443a      	add	r2, r7
 8010f08:	443b      	add	r3, r7
 8010f0a:	60aa      	str	r2, [r5, #8]
 8010f0c:	612b      	str	r3, [r5, #16]
 8010f0e:	e7ed      	b.n	8010eec <ucdr_serialize_array_uint8_t+0x40>

08010f10 <ucdr_serialize_endian_array_uint8_t>:
 8010f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f14:	4619      	mov	r1, r3
 8010f16:	461f      	mov	r7, r3
 8010f18:	4605      	mov	r5, r0
 8010f1a:	4690      	mov	r8, r2
 8010f1c:	f7fd fdd0 	bl	800eac0 <ucdr_check_buffer_available_for>
 8010f20:	b9e0      	cbnz	r0, 8010f5c <ucdr_serialize_endian_array_uint8_t+0x4c>
 8010f22:	463e      	mov	r6, r7
 8010f24:	e00b      	b.n	8010f3e <ucdr_serialize_endian_array_uint8_t+0x2e>
 8010f26:	4441      	add	r1, r8
 8010f28:	68a8      	ldr	r0, [r5, #8]
 8010f2a:	4622      	mov	r2, r4
 8010f2c:	1b36      	subs	r6, r6, r4
 8010f2e:	f00a fc1c 	bl	801b76a <memcpy>
 8010f32:	68ab      	ldr	r3, [r5, #8]
 8010f34:	6928      	ldr	r0, [r5, #16]
 8010f36:	4423      	add	r3, r4
 8010f38:	4420      	add	r0, r4
 8010f3a:	60ab      	str	r3, [r5, #8]
 8010f3c:	6128      	str	r0, [r5, #16]
 8010f3e:	4631      	mov	r1, r6
 8010f40:	2201      	movs	r2, #1
 8010f42:	4628      	mov	r0, r5
 8010f44:	f7fd fe46 	bl	800ebd4 <ucdr_check_final_buffer_behavior_array>
 8010f48:	1bb9      	subs	r1, r7, r6
 8010f4a:	4604      	mov	r4, r0
 8010f4c:	2800      	cmp	r0, #0
 8010f4e:	d1ea      	bne.n	8010f26 <ucdr_serialize_endian_array_uint8_t+0x16>
 8010f50:	2301      	movs	r3, #1
 8010f52:	7da8      	ldrb	r0, [r5, #22]
 8010f54:	756b      	strb	r3, [r5, #21]
 8010f56:	4058      	eors	r0, r3
 8010f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f5c:	463a      	mov	r2, r7
 8010f5e:	4641      	mov	r1, r8
 8010f60:	68a8      	ldr	r0, [r5, #8]
 8010f62:	f00a fc02 	bl	801b76a <memcpy>
 8010f66:	68aa      	ldr	r2, [r5, #8]
 8010f68:	692b      	ldr	r3, [r5, #16]
 8010f6a:	443a      	add	r2, r7
 8010f6c:	443b      	add	r3, r7
 8010f6e:	60aa      	str	r2, [r5, #8]
 8010f70:	612b      	str	r3, [r5, #16]
 8010f72:	e7ed      	b.n	8010f50 <ucdr_serialize_endian_array_uint8_t+0x40>

08010f74 <ucdr_deserialize_array_uint8_t>:
 8010f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f78:	4688      	mov	r8, r1
 8010f7a:	4611      	mov	r1, r2
 8010f7c:	4617      	mov	r7, r2
 8010f7e:	4605      	mov	r5, r0
 8010f80:	f7fd fd9e 	bl	800eac0 <ucdr_check_buffer_available_for>
 8010f84:	b9e8      	cbnz	r0, 8010fc2 <ucdr_deserialize_array_uint8_t+0x4e>
 8010f86:	463e      	mov	r6, r7
 8010f88:	e00c      	b.n	8010fa4 <ucdr_deserialize_array_uint8_t+0x30>
 8010f8a:	eb08 0003 	add.w	r0, r8, r3
 8010f8e:	68a9      	ldr	r1, [r5, #8]
 8010f90:	4622      	mov	r2, r4
 8010f92:	1b36      	subs	r6, r6, r4
 8010f94:	f00a fbe9 	bl	801b76a <memcpy>
 8010f98:	68ab      	ldr	r3, [r5, #8]
 8010f9a:	6928      	ldr	r0, [r5, #16]
 8010f9c:	4423      	add	r3, r4
 8010f9e:	4420      	add	r0, r4
 8010fa0:	60ab      	str	r3, [r5, #8]
 8010fa2:	6128      	str	r0, [r5, #16]
 8010fa4:	4631      	mov	r1, r6
 8010fa6:	2201      	movs	r2, #1
 8010fa8:	4628      	mov	r0, r5
 8010faa:	f7fd fe13 	bl	800ebd4 <ucdr_check_final_buffer_behavior_array>
 8010fae:	1bbb      	subs	r3, r7, r6
 8010fb0:	4604      	mov	r4, r0
 8010fb2:	2800      	cmp	r0, #0
 8010fb4:	d1e9      	bne.n	8010f8a <ucdr_deserialize_array_uint8_t+0x16>
 8010fb6:	2301      	movs	r3, #1
 8010fb8:	7da8      	ldrb	r0, [r5, #22]
 8010fba:	756b      	strb	r3, [r5, #21]
 8010fbc:	4058      	eors	r0, r3
 8010fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fc2:	463a      	mov	r2, r7
 8010fc4:	68a9      	ldr	r1, [r5, #8]
 8010fc6:	4640      	mov	r0, r8
 8010fc8:	f00a fbcf 	bl	801b76a <memcpy>
 8010fcc:	68aa      	ldr	r2, [r5, #8]
 8010fce:	692b      	ldr	r3, [r5, #16]
 8010fd0:	443a      	add	r2, r7
 8010fd2:	443b      	add	r3, r7
 8010fd4:	60aa      	str	r2, [r5, #8]
 8010fd6:	612b      	str	r3, [r5, #16]
 8010fd8:	e7ed      	b.n	8010fb6 <ucdr_deserialize_array_uint8_t+0x42>
 8010fda:	bf00      	nop

08010fdc <ucdr_deserialize_endian_array_uint8_t>:
 8010fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fe0:	4619      	mov	r1, r3
 8010fe2:	461f      	mov	r7, r3
 8010fe4:	4605      	mov	r5, r0
 8010fe6:	4690      	mov	r8, r2
 8010fe8:	f7fd fd6a 	bl	800eac0 <ucdr_check_buffer_available_for>
 8010fec:	b9e8      	cbnz	r0, 801102a <ucdr_deserialize_endian_array_uint8_t+0x4e>
 8010fee:	463e      	mov	r6, r7
 8010ff0:	e00c      	b.n	801100c <ucdr_deserialize_endian_array_uint8_t+0x30>
 8010ff2:	eb08 0003 	add.w	r0, r8, r3
 8010ff6:	68a9      	ldr	r1, [r5, #8]
 8010ff8:	4622      	mov	r2, r4
 8010ffa:	1b36      	subs	r6, r6, r4
 8010ffc:	f00a fbb5 	bl	801b76a <memcpy>
 8011000:	68ab      	ldr	r3, [r5, #8]
 8011002:	6928      	ldr	r0, [r5, #16]
 8011004:	4423      	add	r3, r4
 8011006:	4420      	add	r0, r4
 8011008:	60ab      	str	r3, [r5, #8]
 801100a:	6128      	str	r0, [r5, #16]
 801100c:	4631      	mov	r1, r6
 801100e:	2201      	movs	r2, #1
 8011010:	4628      	mov	r0, r5
 8011012:	f7fd fddf 	bl	800ebd4 <ucdr_check_final_buffer_behavior_array>
 8011016:	1bbb      	subs	r3, r7, r6
 8011018:	4604      	mov	r4, r0
 801101a:	2800      	cmp	r0, #0
 801101c:	d1e9      	bne.n	8010ff2 <ucdr_deserialize_endian_array_uint8_t+0x16>
 801101e:	2301      	movs	r3, #1
 8011020:	7da8      	ldrb	r0, [r5, #22]
 8011022:	756b      	strb	r3, [r5, #21]
 8011024:	4058      	eors	r0, r3
 8011026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801102a:	463a      	mov	r2, r7
 801102c:	68a9      	ldr	r1, [r5, #8]
 801102e:	4640      	mov	r0, r8
 8011030:	f00a fb9b 	bl	801b76a <memcpy>
 8011034:	68aa      	ldr	r2, [r5, #8]
 8011036:	692b      	ldr	r3, [r5, #16]
 8011038:	443a      	add	r2, r7
 801103a:	443b      	add	r3, r7
 801103c:	60aa      	str	r2, [r5, #8]
 801103e:	612b      	str	r3, [r5, #16]
 8011040:	e7ed      	b.n	801101e <ucdr_deserialize_endian_array_uint8_t+0x42>
 8011042:	bf00      	nop

08011044 <ucdr_serialize_array_double>:
 8011044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011048:	4604      	mov	r4, r0
 801104a:	460e      	mov	r6, r1
 801104c:	2108      	movs	r1, #8
 801104e:	4617      	mov	r7, r2
 8011050:	f7fd fd96 	bl	800eb80 <ucdr_buffer_alignment>
 8011054:	4601      	mov	r1, r0
 8011056:	4620      	mov	r0, r4
 8011058:	7d65      	ldrb	r5, [r4, #21]
 801105a:	f7fd fdd9 	bl	800ec10 <ucdr_advance_buffer>
 801105e:	7d21      	ldrb	r1, [r4, #20]
 8011060:	7565      	strb	r5, [r4, #21]
 8011062:	2901      	cmp	r1, #1
 8011064:	d010      	beq.n	8011088 <ucdr_serialize_array_double+0x44>
 8011066:	b157      	cbz	r7, 801107e <ucdr_serialize_array_double+0x3a>
 8011068:	2500      	movs	r5, #0
 801106a:	e000      	b.n	801106e <ucdr_serialize_array_double+0x2a>
 801106c:	7d21      	ldrb	r1, [r4, #20]
 801106e:	3501      	adds	r5, #1
 8011070:	4620      	mov	r0, r4
 8011072:	ecb6 0b02 	vldmia	r6!, {d0}
 8011076:	f7fd fabd 	bl	800e5f4 <ucdr_serialize_endian_double>
 801107a:	42af      	cmp	r7, r5
 801107c:	d1f6      	bne.n	801106c <ucdr_serialize_array_double+0x28>
 801107e:	7da0      	ldrb	r0, [r4, #22]
 8011080:	f080 0001 	eor.w	r0, r0, #1
 8011084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011088:	00ff      	lsls	r7, r7, #3
 801108a:	4620      	mov	r0, r4
 801108c:	4639      	mov	r1, r7
 801108e:	f7fd fd17 	bl	800eac0 <ucdr_check_buffer_available_for>
 8011092:	b9f8      	cbnz	r0, 80110d4 <ucdr_serialize_array_double+0x90>
 8011094:	46b8      	mov	r8, r7
 8011096:	e00c      	b.n	80110b2 <ucdr_serialize_array_double+0x6e>
 8011098:	462a      	mov	r2, r5
 801109a:	4431      	add	r1, r6
 801109c:	68a0      	ldr	r0, [r4, #8]
 801109e:	eba8 0805 	sub.w	r8, r8, r5
 80110a2:	f00a fb62 	bl	801b76a <memcpy>
 80110a6:	68a2      	ldr	r2, [r4, #8]
 80110a8:	6923      	ldr	r3, [r4, #16]
 80110aa:	442a      	add	r2, r5
 80110ac:	442b      	add	r3, r5
 80110ae:	60a2      	str	r2, [r4, #8]
 80110b0:	6123      	str	r3, [r4, #16]
 80110b2:	4641      	mov	r1, r8
 80110b4:	2208      	movs	r2, #8
 80110b6:	4620      	mov	r0, r4
 80110b8:	f7fd fd8c 	bl	800ebd4 <ucdr_check_final_buffer_behavior_array>
 80110bc:	eba7 0108 	sub.w	r1, r7, r8
 80110c0:	4605      	mov	r5, r0
 80110c2:	2800      	cmp	r0, #0
 80110c4:	d1e8      	bne.n	8011098 <ucdr_serialize_array_double+0x54>
 80110c6:	2308      	movs	r3, #8
 80110c8:	7da0      	ldrb	r0, [r4, #22]
 80110ca:	7563      	strb	r3, [r4, #21]
 80110cc:	f080 0001 	eor.w	r0, r0, #1
 80110d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110d4:	463a      	mov	r2, r7
 80110d6:	4631      	mov	r1, r6
 80110d8:	68a0      	ldr	r0, [r4, #8]
 80110da:	f00a fb46 	bl	801b76a <memcpy>
 80110de:	68a2      	ldr	r2, [r4, #8]
 80110e0:	6923      	ldr	r3, [r4, #16]
 80110e2:	443a      	add	r2, r7
 80110e4:	441f      	add	r7, r3
 80110e6:	60a2      	str	r2, [r4, #8]
 80110e8:	6127      	str	r7, [r4, #16]
 80110ea:	e7ec      	b.n	80110c6 <ucdr_serialize_array_double+0x82>

080110ec <ucdr_deserialize_array_double>:
 80110ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110f0:	4604      	mov	r4, r0
 80110f2:	460e      	mov	r6, r1
 80110f4:	2108      	movs	r1, #8
 80110f6:	4617      	mov	r7, r2
 80110f8:	f7fd fd42 	bl	800eb80 <ucdr_buffer_alignment>
 80110fc:	4601      	mov	r1, r0
 80110fe:	4620      	mov	r0, r4
 8011100:	7d65      	ldrb	r5, [r4, #21]
 8011102:	f7fd fd85 	bl	800ec10 <ucdr_advance_buffer>
 8011106:	7d21      	ldrb	r1, [r4, #20]
 8011108:	7565      	strb	r5, [r4, #21]
 801110a:	2901      	cmp	r1, #1
 801110c:	d010      	beq.n	8011130 <ucdr_deserialize_array_double+0x44>
 801110e:	b157      	cbz	r7, 8011126 <ucdr_deserialize_array_double+0x3a>
 8011110:	2500      	movs	r5, #0
 8011112:	e000      	b.n	8011116 <ucdr_deserialize_array_double+0x2a>
 8011114:	7d21      	ldrb	r1, [r4, #20]
 8011116:	3501      	adds	r5, #1
 8011118:	4632      	mov	r2, r6
 801111a:	4620      	mov	r0, r4
 801111c:	3608      	adds	r6, #8
 801111e:	f7fd fc01 	bl	800e924 <ucdr_deserialize_endian_double>
 8011122:	42af      	cmp	r7, r5
 8011124:	d1f6      	bne.n	8011114 <ucdr_deserialize_array_double+0x28>
 8011126:	7da0      	ldrb	r0, [r4, #22]
 8011128:	f080 0001 	eor.w	r0, r0, #1
 801112c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011130:	00ff      	lsls	r7, r7, #3
 8011132:	4620      	mov	r0, r4
 8011134:	4639      	mov	r1, r7
 8011136:	f7fd fcc3 	bl	800eac0 <ucdr_check_buffer_available_for>
 801113a:	b9f8      	cbnz	r0, 801117c <ucdr_deserialize_array_double+0x90>
 801113c:	46b8      	mov	r8, r7
 801113e:	e00c      	b.n	801115a <ucdr_deserialize_array_double+0x6e>
 8011140:	18f0      	adds	r0, r6, r3
 8011142:	462a      	mov	r2, r5
 8011144:	68a1      	ldr	r1, [r4, #8]
 8011146:	eba8 0805 	sub.w	r8, r8, r5
 801114a:	f00a fb0e 	bl	801b76a <memcpy>
 801114e:	68a2      	ldr	r2, [r4, #8]
 8011150:	6923      	ldr	r3, [r4, #16]
 8011152:	442a      	add	r2, r5
 8011154:	442b      	add	r3, r5
 8011156:	60a2      	str	r2, [r4, #8]
 8011158:	6123      	str	r3, [r4, #16]
 801115a:	4641      	mov	r1, r8
 801115c:	2208      	movs	r2, #8
 801115e:	4620      	mov	r0, r4
 8011160:	f7fd fd38 	bl	800ebd4 <ucdr_check_final_buffer_behavior_array>
 8011164:	eba7 0308 	sub.w	r3, r7, r8
 8011168:	4605      	mov	r5, r0
 801116a:	2800      	cmp	r0, #0
 801116c:	d1e8      	bne.n	8011140 <ucdr_deserialize_array_double+0x54>
 801116e:	2308      	movs	r3, #8
 8011170:	7da0      	ldrb	r0, [r4, #22]
 8011172:	7563      	strb	r3, [r4, #21]
 8011174:	f080 0001 	eor.w	r0, r0, #1
 8011178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801117c:	463a      	mov	r2, r7
 801117e:	68a1      	ldr	r1, [r4, #8]
 8011180:	4630      	mov	r0, r6
 8011182:	f00a faf2 	bl	801b76a <memcpy>
 8011186:	68a2      	ldr	r2, [r4, #8]
 8011188:	6923      	ldr	r3, [r4, #16]
 801118a:	443a      	add	r2, r7
 801118c:	441f      	add	r7, r3
 801118e:	60a2      	str	r2, [r4, #8]
 8011190:	6127      	str	r7, [r4, #16]
 8011192:	e7ec      	b.n	801116e <ucdr_deserialize_array_double+0x82>

08011194 <ucdr_serialize_sequence_char>:
 8011194:	b570      	push	{r4, r5, r6, lr}
 8011196:	4615      	mov	r5, r2
 8011198:	460e      	mov	r6, r1
 801119a:	7d01      	ldrb	r1, [r0, #20]
 801119c:	4604      	mov	r4, r0
 801119e:	f7fc fb87 	bl	800d8b0 <ucdr_serialize_endian_uint32_t>
 80111a2:	b90d      	cbnz	r5, 80111a8 <ucdr_serialize_sequence_char+0x14>
 80111a4:	2001      	movs	r0, #1
 80111a6:	bd70      	pop	{r4, r5, r6, pc}
 80111a8:	462b      	mov	r3, r5
 80111aa:	4632      	mov	r2, r6
 80111ac:	7d21      	ldrb	r1, [r4, #20]
 80111ae:	4620      	mov	r0, r4
 80111b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80111b4:	f7ff be14 	b.w	8010de0 <ucdr_serialize_endian_array_char>

080111b8 <ucdr_deserialize_sequence_char>:
 80111b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111bc:	461d      	mov	r5, r3
 80111be:	4616      	mov	r6, r2
 80111c0:	460f      	mov	r7, r1
 80111c2:	461a      	mov	r2, r3
 80111c4:	7d01      	ldrb	r1, [r0, #20]
 80111c6:	4604      	mov	r4, r0
 80111c8:	f7fc fc9a 	bl	800db00 <ucdr_deserialize_endian_uint32_t>
 80111cc:	682b      	ldr	r3, [r5, #0]
 80111ce:	429e      	cmp	r6, r3
 80111d0:	d201      	bcs.n	80111d6 <ucdr_deserialize_sequence_char+0x1e>
 80111d2:	2201      	movs	r2, #1
 80111d4:	75a2      	strb	r2, [r4, #22]
 80111d6:	b913      	cbnz	r3, 80111de <ucdr_deserialize_sequence_char+0x26>
 80111d8:	2001      	movs	r0, #1
 80111da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111de:	463a      	mov	r2, r7
 80111e0:	7d21      	ldrb	r1, [r4, #20]
 80111e2:	4620      	mov	r0, r4
 80111e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80111e8:	f7ff be2c 	b.w	8010e44 <ucdr_deserialize_endian_array_char>

080111ec <ucdr_serialize_sequence_uint8_t>:
 80111ec:	b570      	push	{r4, r5, r6, lr}
 80111ee:	4615      	mov	r5, r2
 80111f0:	460e      	mov	r6, r1
 80111f2:	7d01      	ldrb	r1, [r0, #20]
 80111f4:	4604      	mov	r4, r0
 80111f6:	f7fc fb5b 	bl	800d8b0 <ucdr_serialize_endian_uint32_t>
 80111fa:	b90d      	cbnz	r5, 8011200 <ucdr_serialize_sequence_uint8_t+0x14>
 80111fc:	2001      	movs	r0, #1
 80111fe:	bd70      	pop	{r4, r5, r6, pc}
 8011200:	462b      	mov	r3, r5
 8011202:	4632      	mov	r2, r6
 8011204:	7d21      	ldrb	r1, [r4, #20]
 8011206:	4620      	mov	r0, r4
 8011208:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801120c:	f7ff be80 	b.w	8010f10 <ucdr_serialize_endian_array_uint8_t>

08011210 <ucdr_deserialize_sequence_uint8_t>:
 8011210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011214:	461d      	mov	r5, r3
 8011216:	4616      	mov	r6, r2
 8011218:	460f      	mov	r7, r1
 801121a:	461a      	mov	r2, r3
 801121c:	7d01      	ldrb	r1, [r0, #20]
 801121e:	4604      	mov	r4, r0
 8011220:	f7fc fc6e 	bl	800db00 <ucdr_deserialize_endian_uint32_t>
 8011224:	682b      	ldr	r3, [r5, #0]
 8011226:	429e      	cmp	r6, r3
 8011228:	d201      	bcs.n	801122e <ucdr_deserialize_sequence_uint8_t+0x1e>
 801122a:	2201      	movs	r2, #1
 801122c:	75a2      	strb	r2, [r4, #22]
 801122e:	b913      	cbnz	r3, 8011236 <ucdr_deserialize_sequence_uint8_t+0x26>
 8011230:	2001      	movs	r0, #1
 8011232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011236:	463a      	mov	r2, r7
 8011238:	7d21      	ldrb	r1, [r4, #20]
 801123a:	4620      	mov	r0, r4
 801123c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011240:	f7ff becc 	b.w	8010fdc <ucdr_deserialize_endian_array_uint8_t>

08011244 <on_get_fragmentation_info>:
 8011244:	b500      	push	{lr}
 8011246:	b08b      	sub	sp, #44	@ 0x2c
 8011248:	4601      	mov	r1, r0
 801124a:	2204      	movs	r2, #4
 801124c:	a802      	add	r0, sp, #8
 801124e:	f7fd fc8b 	bl	800eb68 <ucdr_init_buffer>
 8011252:	f10d 0305 	add.w	r3, sp, #5
 8011256:	f10d 0206 	add.w	r2, sp, #6
 801125a:	a901      	add	r1, sp, #4
 801125c:	a802      	add	r0, sp, #8
 801125e:	f001 f9f3 	bl	8012648 <uxr_read_submessage_header>
 8011262:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011266:	2b0d      	cmp	r3, #13
 8011268:	d003      	beq.n	8011272 <on_get_fragmentation_info+0x2e>
 801126a:	2000      	movs	r0, #0
 801126c:	b00b      	add	sp, #44	@ 0x2c
 801126e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011272:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011276:	f013 0f02 	tst.w	r3, #2
 801127a:	bf14      	ite	ne
 801127c:	2002      	movne	r0, #2
 801127e:	2001      	moveq	r0, #1
 8011280:	b00b      	add	sp, #44	@ 0x2c
 8011282:	f85d fb04 	ldr.w	pc, [sp], #4
 8011286:	bf00      	nop

08011288 <read_submessage_get_info>:
 8011288:	b570      	push	{r4, r5, r6, lr}
 801128a:	2500      	movs	r5, #0
 801128c:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8011290:	460e      	mov	r6, r1
 8011292:	4604      	mov	r4, r0
 8011294:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8011298:	4629      	mov	r1, r5
 801129a:	a810      	add	r0, sp, #64	@ 0x40
 801129c:	9503      	str	r5, [sp, #12]
 801129e:	9504      	str	r5, [sp, #16]
 80112a0:	f00a f99a 	bl	801b5d8 <memset>
 80112a4:	a903      	add	r1, sp, #12
 80112a6:	4630      	mov	r0, r6
 80112a8:	f002 f904 	bl	80134b4 <uxr_deserialize_GET_INFO_Payload>
 80112ac:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80112b0:	4620      	mov	r0, r4
 80112b2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80112b6:	f001 f835 	bl	8012324 <uxr_session_header_offset>
 80112ba:	462b      	mov	r3, r5
 80112bc:	220c      	movs	r2, #12
 80112be:	a905      	add	r1, sp, #20
 80112c0:	9000      	str	r0, [sp, #0]
 80112c2:	a808      	add	r0, sp, #32
 80112c4:	f7fd fc3e 	bl	800eb44 <ucdr_init_buffer_origin_offset>
 80112c8:	a910      	add	r1, sp, #64	@ 0x40
 80112ca:	a808      	add	r0, sp, #32
 80112cc:	f002 f966 	bl	801359c <uxr_serialize_INFO_Payload>
 80112d0:	9b08      	ldr	r3, [sp, #32]
 80112d2:	462a      	mov	r2, r5
 80112d4:	4629      	mov	r1, r5
 80112d6:	4620      	mov	r0, r4
 80112d8:	f000 ffd0 	bl	801227c <uxr_stamp_session_header>
 80112dc:	a808      	add	r0, sp, #32
 80112de:	f7fd fc71 	bl	800ebc4 <ucdr_buffer_length>
 80112e2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80112e4:	4602      	mov	r2, r0
 80112e6:	a905      	add	r1, sp, #20
 80112e8:	e9d3 0400 	ldrd	r0, r4, [r3]
 80112ec:	47a0      	blx	r4
 80112ee:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 80112f2:	bd70      	pop	{r4, r5, r6, pc}

080112f4 <write_submessage_acknack.isra.0>:
 80112f4:	b570      	push	{r4, r5, r6, lr}
 80112f6:	b092      	sub	sp, #72	@ 0x48
 80112f8:	4605      	mov	r5, r0
 80112fa:	460e      	mov	r6, r1
 80112fc:	4614      	mov	r4, r2
 80112fe:	f001 f811 	bl	8012324 <uxr_session_header_offset>
 8011302:	a905      	add	r1, sp, #20
 8011304:	9000      	str	r0, [sp, #0]
 8011306:	2300      	movs	r3, #0
 8011308:	a80a      	add	r0, sp, #40	@ 0x28
 801130a:	2211      	movs	r2, #17
 801130c:	f7fd fc1a 	bl	800eb44 <ucdr_init_buffer_origin_offset>
 8011310:	2218      	movs	r2, #24
 8011312:	2300      	movs	r3, #0
 8011314:	210a      	movs	r1, #10
 8011316:	fb02 5404 	mla	r4, r2, r4, r5
 801131a:	a80a      	add	r0, sp, #40	@ 0x28
 801131c:	2205      	movs	r2, #5
 801131e:	3450      	adds	r4, #80	@ 0x50
 8011320:	f001 f978 	bl	8012614 <uxr_buffer_submessage_header>
 8011324:	a903      	add	r1, sp, #12
 8011326:	4620      	mov	r0, r4
 8011328:	f007 fd92 	bl	8018e50 <uxr_compute_acknack>
 801132c:	ba40      	rev16	r0, r0
 801132e:	a903      	add	r1, sp, #12
 8011330:	f88d 6010 	strb.w	r6, [sp, #16]
 8011334:	f8ad 000e 	strh.w	r0, [sp, #14]
 8011338:	a80a      	add	r0, sp, #40	@ 0x28
 801133a:	f002 f9a1 	bl	8013680 <uxr_serialize_ACKNACK_Payload>
 801133e:	2200      	movs	r2, #0
 8011340:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011342:	4628      	mov	r0, r5
 8011344:	4611      	mov	r1, r2
 8011346:	f000 ff99 	bl	801227c <uxr_stamp_session_header>
 801134a:	a80a      	add	r0, sp, #40	@ 0x28
 801134c:	f7fd fc3a 	bl	800ebc4 <ucdr_buffer_length>
 8011350:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8011352:	4602      	mov	r2, r0
 8011354:	a905      	add	r1, sp, #20
 8011356:	e9d3 0400 	ldrd	r0, r4, [r3]
 801135a:	47a0      	blx	r4
 801135c:	b012      	add	sp, #72	@ 0x48
 801135e:	bd70      	pop	{r4, r5, r6, pc}

08011360 <uxr_init_session>:
 8011360:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8011398 <uxr_init_session+0x38>
 8011364:	2300      	movs	r3, #0
 8011366:	b510      	push	{r4, lr}
 8011368:	4604      	mov	r4, r0
 801136a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 801136e:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8011372:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8011376:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 801137a:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 801137e:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8011382:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8011386:	2181      	movs	r1, #129	@ 0x81
 8011388:	f000 fedc 	bl	8012144 <uxr_init_session_info>
 801138c:	f104 0008 	add.w	r0, r4, #8
 8011390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011394:	f001 b85a 	b.w	801244c <uxr_init_stream_storage>
	...

080113a0 <uxr_set_status_callback>:
 80113a0:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 80113a4:	4770      	bx	lr
 80113a6:	bf00      	nop

080113a8 <uxr_set_topic_callback>:
 80113a8:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 80113ac:	4770      	bx	lr
 80113ae:	bf00      	nop

080113b0 <uxr_set_request_callback>:
 80113b0:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 80113b4:	4770      	bx	lr
 80113b6:	bf00      	nop

080113b8 <uxr_set_reply_callback>:
 80113b8:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 80113bc:	4770      	bx	lr
 80113be:	bf00      	nop

080113c0 <uxr_create_output_best_effort_stream>:
 80113c0:	b510      	push	{r4, lr}
 80113c2:	4604      	mov	r4, r0
 80113c4:	b084      	sub	sp, #16
 80113c6:	e9cd 2100 	strd	r2, r1, [sp]
 80113ca:	f000 ffab 	bl	8012324 <uxr_session_header_offset>
 80113ce:	4603      	mov	r3, r0
 80113d0:	f104 0008 	add.w	r0, r4, #8
 80113d4:	e9dd 2100 	ldrd	r2, r1, [sp]
 80113d8:	b004      	add	sp, #16
 80113da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113de:	f001 b87b 	b.w	80124d8 <uxr_add_output_best_effort_buffer>
 80113e2:	bf00      	nop

080113e4 <uxr_create_output_reliable_stream>:
 80113e4:	b530      	push	{r4, r5, lr}
 80113e6:	b089      	sub	sp, #36	@ 0x24
 80113e8:	4604      	mov	r4, r0
 80113ea:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80113ee:	9303      	str	r3, [sp, #12]
 80113f0:	f000 ff98 	bl	8012324 <uxr_session_header_offset>
 80113f4:	4605      	mov	r5, r0
 80113f6:	9905      	ldr	r1, [sp, #20]
 80113f8:	f104 0008 	add.w	r0, r4, #8
 80113fc:	9500      	str	r5, [sp, #0]
 80113fe:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8011402:	f001 f87d 	bl	8012500 <uxr_add_output_reliable_buffer>
 8011406:	2200      	movs	r2, #0
 8011408:	fa5f fc80 	uxtb.w	ip, r0
 801140c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8011410:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8011414:	0e03      	lsrs	r3, r0, #24
 8011416:	f36c 0207 	bfi	r2, ip, #0, #8
 801141a:	f364 220f 	bfi	r2, r4, #8, #8
 801141e:	f361 4217 	bfi	r2, r1, #16, #8
 8011422:	f363 621f 	bfi	r2, r3, #24, #8
 8011426:	4610      	mov	r0, r2
 8011428:	b009      	add	sp, #36	@ 0x24
 801142a:	bd30      	pop	{r4, r5, pc}

0801142c <uxr_create_input_best_effort_stream>:
 801142c:	b082      	sub	sp, #8
 801142e:	3008      	adds	r0, #8
 8011430:	b002      	add	sp, #8
 8011432:	f001 b87f 	b.w	8012534 <uxr_add_input_best_effort_buffer>
 8011436:	bf00      	nop

08011438 <uxr_create_input_reliable_stream>:
 8011438:	b510      	push	{r4, lr}
 801143a:	4c0c      	ldr	r4, [pc, #48]	@ (801146c <uxr_create_input_reliable_stream+0x34>)
 801143c:	b084      	sub	sp, #16
 801143e:	3008      	adds	r0, #8
 8011440:	9400      	str	r4, [sp, #0]
 8011442:	f001 f88d 	bl	8012560 <uxr_add_input_reliable_buffer>
 8011446:	2200      	movs	r2, #0
 8011448:	fa5f fe80 	uxtb.w	lr, r0
 801144c:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8011450:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8011454:	0e03      	lsrs	r3, r0, #24
 8011456:	f36e 0207 	bfi	r2, lr, #0, #8
 801145a:	f36c 220f 	bfi	r2, ip, #8, #8
 801145e:	f361 4217 	bfi	r2, r1, #16, #8
 8011462:	f363 621f 	bfi	r2, r3, #24, #8
 8011466:	4610      	mov	r0, r2
 8011468:	b004      	add	sp, #16
 801146a:	bd10      	pop	{r4, pc}
 801146c:	08011245 	.word	0x08011245

08011470 <uxr_epoch_millis>:
 8011470:	b510      	push	{r4, lr}
 8011472:	4604      	mov	r4, r0
 8011474:	f001 f930 	bl	80126d8 <uxr_nanos>
 8011478:	4a05      	ldr	r2, [pc, #20]	@ (8011490 <uxr_epoch_millis+0x20>)
 801147a:	e9d4 3426 	ldrd	r3, r4, [r4, #152]	@ 0x98
 801147e:	1ac0      	subs	r0, r0, r3
 8011480:	f04f 0300 	mov.w	r3, #0
 8011484:	eb61 0104 	sbc.w	r1, r1, r4
 8011488:	f7ee ff42 	bl	8000310 <__aeabi_ldivmod>
 801148c:	bd10      	pop	{r4, pc}
 801148e:	bf00      	nop
 8011490:	000f4240 	.word	0x000f4240

08011494 <uxr_epoch_nanos>:
 8011494:	b510      	push	{r4, lr}
 8011496:	4604      	mov	r4, r0
 8011498:	f001 f91e 	bl	80126d8 <uxr_nanos>
 801149c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 80114a0:	1ac0      	subs	r0, r0, r3
 80114a2:	eb61 0102 	sbc.w	r1, r1, r2
 80114a6:	bd10      	pop	{r4, pc}

080114a8 <uxr_flash_output_streams>:
 80114a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114ac:	7e03      	ldrb	r3, [r0, #24]
 80114ae:	b084      	sub	sp, #16
 80114b0:	4604      	mov	r4, r0
 80114b2:	b1fb      	cbz	r3, 80114f4 <uxr_flash_output_streams+0x4c>
 80114b4:	f04f 0900 	mov.w	r9, #0
 80114b8:	f10d 0802 	add.w	r8, sp, #2
 80114bc:	af03      	add	r7, sp, #12
 80114be:	ae02      	add	r6, sp, #8
 80114c0:	4648      	mov	r0, r9
 80114c2:	2201      	movs	r2, #1
 80114c4:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 80114c8:	4611      	mov	r1, r2
 80114ca:	3508      	adds	r5, #8
 80114cc:	f000 ff64 	bl	8012398 <uxr_stream_id>
 80114d0:	4684      	mov	ip, r0
 80114d2:	4643      	mov	r3, r8
 80114d4:	463a      	mov	r2, r7
 80114d6:	4631      	mov	r1, r6
 80114d8:	4628      	mov	r0, r5
 80114da:	f8cd c004 	str.w	ip, [sp, #4]
 80114de:	f007 fd71 	bl	8018fc4 <uxr_prepare_best_effort_buffer_to_send>
 80114e2:	2800      	cmp	r0, #0
 80114e4:	d13d      	bne.n	8011562 <uxr_flash_output_streams+0xba>
 80114e6:	f109 0901 	add.w	r9, r9, #1
 80114ea:	7e23      	ldrb	r3, [r4, #24]
 80114ec:	fa5f f089 	uxtb.w	r0, r9
 80114f0:	4283      	cmp	r3, r0
 80114f2:	d8e6      	bhi.n	80114c2 <uxr_flash_output_streams+0x1a>
 80114f4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80114f8:	b383      	cbz	r3, 801155c <uxr_flash_output_streams+0xb4>
 80114fa:	f04f 0900 	mov.w	r9, #0
 80114fe:	f10d 0802 	add.w	r8, sp, #2
 8011502:	af03      	add	r7, sp, #12
 8011504:	ae02      	add	r6, sp, #8
 8011506:	4648      	mov	r0, r9
 8011508:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 801150c:	2201      	movs	r2, #1
 801150e:	2102      	movs	r1, #2
 8011510:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8011514:	f000 ff40 	bl	8012398 <uxr_stream_id>
 8011518:	9001      	str	r0, [sp, #4]
 801151a:	3520      	adds	r5, #32
 801151c:	e00c      	b.n	8011538 <uxr_flash_output_streams+0x90>
 801151e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011522:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011526:	9b02      	ldr	r3, [sp, #8]
 8011528:	f000 fea8 	bl	801227c <uxr_stamp_session_header>
 801152c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801152e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8011532:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8011536:	47d0      	blx	sl
 8011538:	4643      	mov	r3, r8
 801153a:	463a      	mov	r2, r7
 801153c:	4631      	mov	r1, r6
 801153e:	4628      	mov	r0, r5
 8011540:	f007 ff62 	bl	8019408 <uxr_prepare_next_reliable_buffer_to_send>
 8011544:	4603      	mov	r3, r0
 8011546:	4620      	mov	r0, r4
 8011548:	2b00      	cmp	r3, #0
 801154a:	d1e8      	bne.n	801151e <uxr_flash_output_streams+0x76>
 801154c:	f109 0901 	add.w	r9, r9, #1
 8011550:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8011554:	fa5f f089 	uxtb.w	r0, r9
 8011558:	4283      	cmp	r3, r0
 801155a:	d8d5      	bhi.n	8011508 <uxr_flash_output_streams+0x60>
 801155c:	b004      	add	sp, #16
 801155e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011562:	9b02      	ldr	r3, [sp, #8]
 8011564:	4620      	mov	r0, r4
 8011566:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801156a:	f109 0901 	add.w	r9, r9, #1
 801156e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011572:	f000 fe83 	bl	801227c <uxr_stamp_session_header>
 8011576:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011578:	9a03      	ldr	r2, [sp, #12]
 801157a:	685d      	ldr	r5, [r3, #4]
 801157c:	6818      	ldr	r0, [r3, #0]
 801157e:	9902      	ldr	r1, [sp, #8]
 8011580:	47a8      	blx	r5
 8011582:	7e23      	ldrb	r3, [r4, #24]
 8011584:	fa5f f089 	uxtb.w	r0, r9
 8011588:	4283      	cmp	r3, r0
 801158a:	d89a      	bhi.n	80114c2 <uxr_flash_output_streams+0x1a>
 801158c:	e7b2      	b.n	80114f4 <uxr_flash_output_streams+0x4c>
 801158e:	bf00      	nop

08011590 <read_submessage_info>:
 8011590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011594:	460d      	mov	r5, r1
 8011596:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801159a:	4606      	mov	r6, r0
 801159c:	4669      	mov	r1, sp
 801159e:	4628      	mov	r0, r5
 80115a0:	f001 fe9a 	bl	80132d8 <uxr_deserialize_BaseObjectReply>
 80115a4:	4604      	mov	r4, r0
 80115a6:	a902      	add	r1, sp, #8
 80115a8:	4628      	mov	r0, r5
 80115aa:	f89d 7005 	ldrb.w	r7, [sp, #5]
 80115ae:	f7fb feb9 	bl	800d324 <ucdr_deserialize_bool>
 80115b2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80115b6:	4004      	ands	r4, r0
 80115b8:	b2e4      	uxtb	r4, r4
 80115ba:	b95b      	cbnz	r3, 80115d4 <read_submessage_info+0x44>
 80115bc:	a987      	add	r1, sp, #540	@ 0x21c
 80115be:	4628      	mov	r0, r5
 80115c0:	f7fb feb0 	bl	800d324 <ucdr_deserialize_bool>
 80115c4:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 80115c8:	4680      	mov	r8, r0
 80115ca:	b94b      	cbnz	r3, 80115e0 <read_submessage_info+0x50>
 80115cc:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80115d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115d4:	a903      	add	r1, sp, #12
 80115d6:	4628      	mov	r0, r5
 80115d8:	f001 fd2a 	bl	8013030 <uxr_deserialize_ObjectVariant>
 80115dc:	4004      	ands	r4, r0
 80115de:	e7ed      	b.n	80115bc <read_submessage_info+0x2c>
 80115e0:	a988      	add	r1, sp, #544	@ 0x220
 80115e2:	4628      	mov	r0, r5
 80115e4:	f7fb fecc 	bl	800d380 <ucdr_deserialize_uint8_t>
 80115e8:	ea14 0f08 	tst.w	r4, r8
 80115ec:	d0ee      	beq.n	80115cc <read_submessage_info+0x3c>
 80115ee:	2800      	cmp	r0, #0
 80115f0:	d0ec      	beq.n	80115cc <read_submessage_info+0x3c>
 80115f2:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 80115f6:	2b0d      	cmp	r3, #13
 80115f8:	d1e8      	bne.n	80115cc <read_submessage_info+0x3c>
 80115fa:	a98a      	add	r1, sp, #552	@ 0x228
 80115fc:	4628      	mov	r0, r5
 80115fe:	f7fc fc65 	bl	800decc <ucdr_deserialize_int16_t>
 8011602:	b138      	cbz	r0, 8011614 <read_submessage_info+0x84>
 8011604:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8011608:	2b00      	cmp	r3, #0
 801160a:	dd06      	ble.n	801161a <read_submessage_info+0x8a>
 801160c:	2f00      	cmp	r7, #0
 801160e:	bf14      	ite	ne
 8011610:	2001      	movne	r0, #1
 8011612:	2002      	moveq	r0, #2
 8011614:	f886 00b5 	strb.w	r0, [r6, #181]	@ 0xb5
 8011618:	e7d8      	b.n	80115cc <read_submessage_info+0x3c>
 801161a:	2000      	movs	r0, #0
 801161c:	e7fa      	b.n	8011614 <read_submessage_info+0x84>
 801161e:	bf00      	nop

08011620 <read_submessage_list>:
 8011620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011624:	4604      	mov	r4, r0
 8011626:	b097      	sub	sp, #92	@ 0x5c
 8011628:	460d      	mov	r5, r1
 801162a:	4ec1      	ldr	r6, [pc, #772]	@ (8011930 <read_submessage_list+0x310>)
 801162c:	9209      	str	r2, [sp, #36]	@ 0x24
 801162e:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8011632:	aa0c      	add	r2, sp, #48	@ 0x30
 8011634:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8011638:	4628      	mov	r0, r5
 801163a:	f001 f805 	bl	8012648 <uxr_read_submessage_header>
 801163e:	2800      	cmp	r0, #0
 8011640:	f000 8142 	beq.w	80118c8 <read_submessage_list+0x2a8>
 8011644:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8011648:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 801164c:	3b02      	subs	r3, #2
 801164e:	2b0d      	cmp	r3, #13
 8011650:	d8ed      	bhi.n	801162e <read_submessage_list+0xe>
 8011652:	a101      	add	r1, pc, #4	@ (adr r1, 8011658 <read_submessage_list+0x38>)
 8011654:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011658:	080118bf 	.word	0x080118bf
 801165c:	0801162f 	.word	0x0801162f
 8011660:	080118af 	.word	0x080118af
 8011664:	0801184d 	.word	0x0801184d
 8011668:	08011843 	.word	0x08011843
 801166c:	0801162f 	.word	0x0801162f
 8011670:	0801162f 	.word	0x0801162f
 8011674:	08011799 	.word	0x08011799
 8011678:	0801172b 	.word	0x0801172b
 801167c:	080116eb 	.word	0x080116eb
 8011680:	0801162f 	.word	0x0801162f
 8011684:	0801162f 	.word	0x0801162f
 8011688:	0801162f 	.word	0x0801162f
 801168c:	08011691 	.word	0x08011691
 8011690:	a910      	add	r1, sp, #64	@ 0x40
 8011692:	4628      	mov	r0, r5
 8011694:	f002 f848 	bl	8013728 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8011698:	f8d4 8090 	ldr.w	r8, [r4, #144]	@ 0x90
 801169c:	f1b8 0f00 	cmp.w	r8, #0
 80116a0:	f000 811a 	beq.w	80118d8 <read_submessage_list+0x2b8>
 80116a4:	f001 f818 	bl	80126d8 <uxr_nanos>
 80116a8:	4602      	mov	r2, r0
 80116aa:	460b      	mov	r3, r1
 80116ac:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 80116b0:	2100      	movs	r1, #0
 80116b2:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 80116b4:	9006      	str	r0, [sp, #24]
 80116b6:	468c      	mov	ip, r1
 80116b8:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80116ba:	fbc7 0c06 	smlal	r0, ip, r7, r6
 80116be:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80116c0:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 80116c4:	468c      	mov	ip, r1
 80116c6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80116c8:	fbc7 0c06 	smlal	r0, ip, r7, r6
 80116cc:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 80116d0:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	@ 0x48
 80116d4:	fbc7 0106 	smlal	r0, r1, r7, r6
 80116d8:	e9cd 0100 	strd	r0, r1, [sp]
 80116dc:	4620      	mov	r0, r4
 80116de:	47c0      	blx	r8
 80116e0:	f04f 0301 	mov.w	r3, #1
 80116e4:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 80116e8:	e7a1      	b.n	801162e <read_submessage_list+0xe>
 80116ea:	a910      	add	r1, sp, #64	@ 0x40
 80116ec:	4628      	mov	r0, r5
 80116ee:	f002 f807 	bl	8013700 <uxr_deserialize_HEARTBEAT_Payload>
 80116f2:	2100      	movs	r1, #0
 80116f4:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80116f8:	f000 fe7c 	bl	80123f4 <uxr_stream_id_from_raw>
 80116fc:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8011700:	900f      	str	r0, [sp, #60]	@ 0x3c
 8011702:	f104 0008 	add.w	r0, r4, #8
 8011706:	4641      	mov	r1, r8
 8011708:	f000 ff62 	bl	80125d0 <uxr_get_input_reliable_stream>
 801170c:	2800      	cmp	r0, #0
 801170e:	d08e      	beq.n	801162e <read_submessage_list+0xe>
 8011710:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8011714:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8011718:	f007 fb8e 	bl	8018e38 <uxr_process_heartbeat>
 801171c:	4642      	mov	r2, r8
 801171e:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8011722:	4620      	mov	r0, r4
 8011724:	f7ff fde6 	bl	80112f4 <write_submessage_acknack.isra.0>
 8011728:	e781      	b.n	801162e <read_submessage_list+0xe>
 801172a:	a910      	add	r1, sp, #64	@ 0x40
 801172c:	4628      	mov	r0, r5
 801172e:	f001 ffbf 	bl	80136b0 <uxr_deserialize_ACKNACK_Payload>
 8011732:	2100      	movs	r1, #0
 8011734:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8011738:	f000 fe5c 	bl	80123f4 <uxr_stream_id_from_raw>
 801173c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8011740:	900d      	str	r0, [sp, #52]	@ 0x34
 8011742:	f104 0008 	add.w	r0, r4, #8
 8011746:	f000 ff2d 	bl	80125a4 <uxr_get_output_reliable_stream>
 801174a:	4680      	mov	r8, r0
 801174c:	2800      	cmp	r0, #0
 801174e:	f43f af6e 	beq.w	801162e <read_submessage_list+0xe>
 8011752:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8011756:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801175a:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 801175e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8011762:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8011766:	b289      	uxth	r1, r1
 8011768:	f007 fef6 	bl	8019558 <uxr_process_acknack>
 801176c:	4640      	mov	r0, r8
 801176e:	f007 feb7 	bl	80194e0 <uxr_begin_output_nack_buffer_it>
 8011772:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8011776:	e005      	b.n	8011784 <read_submessage_list+0x164>
 8011778:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801177a:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	@ 0x38
 801177e:	e9d3 0900 	ldrd	r0, r9, [r3]
 8011782:	47c8      	blx	r9
 8011784:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8011788:	aa0f      	add	r2, sp, #60	@ 0x3c
 801178a:	4651      	mov	r1, sl
 801178c:	4640      	mov	r0, r8
 801178e:	f007 fea9 	bl	80194e4 <uxr_next_reliable_nack_buffer_to_send>
 8011792:	2800      	cmp	r0, #0
 8011794:	d1f0      	bne.n	8011778 <read_submessage_list+0x158>
 8011796:	e74a      	b.n	801162e <read_submessage_list+0xe>
 8011798:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 801179c:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 80117a0:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 80117a4:	4628      	mov	r0, r5
 80117a6:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 80117aa:	4651      	mov	r1, sl
 80117ac:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 80117b0:	f1a8 0804 	sub.w	r8, r8, #4
 80117b4:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 80117b8:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 80117bc:	fa1f f888 	uxth.w	r8, r8
 80117c0:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80117c4:	f009 090e 	and.w	r9, r9, #14
 80117c8:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 80117cc:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 80117d0:	f001 fcd0 	bl	8013174 <uxr_deserialize_BaseObjectRequest>
 80117d4:	4650      	mov	r0, sl
 80117d6:	a90f      	add	r1, sp, #60	@ 0x3c
 80117d8:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 80117dc:	f000 fdca 	bl	8012374 <uxr_parse_base_object_request>
 80117e0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80117e2:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 80117e6:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 80117ea:	9110      	str	r1, [sp, #64]	@ 0x40
 80117ec:	f1bb 0f00 	cmp.w	fp, #0
 80117f0:	d006      	beq.n	8011800 <read_submessage_list+0x1e0>
 80117f2:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80117f6:	4652      	mov	r2, sl
 80117f8:	4620      	mov	r0, r4
 80117fa:	9300      	str	r3, [sp, #0]
 80117fc:	2300      	movs	r3, #0
 80117fe:	47d8      	blx	fp
 8011800:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8011802:	b182      	cbz	r2, 8011826 <read_submessage_list+0x206>
 8011804:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8011806:	f04f 0c00 	mov.w	ip, #0
 801180a:	3902      	subs	r1, #2
 801180c:	e003      	b.n	8011816 <read_submessage_list+0x1f6>
 801180e:	f10c 0c01 	add.w	ip, ip, #1
 8011812:	4594      	cmp	ip, r2
 8011814:	d007      	beq.n	8011826 <read_submessage_list+0x206>
 8011816:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 801181a:	4553      	cmp	r3, sl
 801181c:	d1f7      	bne.n	801180e <read_submessage_list+0x1ee>
 801181e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8011820:	2200      	movs	r2, #0
 8011822:	f803 200c 	strb.w	r2, [r3, ip]
 8011826:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801182a:	464b      	mov	r3, r9
 801182c:	4642      	mov	r2, r8
 801182e:	4620      	mov	r0, r4
 8011830:	9102      	str	r1, [sp, #8]
 8011832:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011834:	9101      	str	r1, [sp, #4]
 8011836:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8011838:	9100      	str	r1, [sp, #0]
 801183a:	4629      	mov	r1, r5
 801183c:	f007 ff2c 	bl	8019698 <read_submessage_format>
 8011840:	e6f5      	b.n	801162e <read_submessage_list+0xe>
 8011842:	4629      	mov	r1, r5
 8011844:	4620      	mov	r0, r4
 8011846:	f7ff fea3 	bl	8011590 <read_submessage_info>
 801184a:	e6f0      	b.n	801162e <read_submessage_list+0xe>
 801184c:	2a00      	cmp	r2, #0
 801184e:	d03e      	beq.n	80118ce <read_submessage_list+0x2ae>
 8011850:	a910      	add	r1, sp, #64	@ 0x40
 8011852:	4628      	mov	r0, r5
 8011854:	f001 fe84 	bl	8013560 <uxr_deserialize_STATUS_Payload>
 8011858:	a90e      	add	r1, sp, #56	@ 0x38
 801185a:	aa0d      	add	r2, sp, #52	@ 0x34
 801185c:	a810      	add	r0, sp, #64	@ 0x40
 801185e:	f000 fd89 	bl	8012374 <uxr_parse_base_object_request>
 8011862:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011864:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8011868:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 801186c:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 8011870:	910f      	str	r1, [sp, #60]	@ 0x3c
 8011872:	f1ba 0f00 	cmp.w	sl, #0
 8011876:	d006      	beq.n	8011886 <read_submessage_list+0x266>
 8011878:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801187c:	4642      	mov	r2, r8
 801187e:	4620      	mov	r0, r4
 8011880:	9300      	str	r3, [sp, #0]
 8011882:	464b      	mov	r3, r9
 8011884:	47d0      	blx	sl
 8011886:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8011888:	2a00      	cmp	r2, #0
 801188a:	f43f aed0 	beq.w	801162e <read_submessage_list+0xe>
 801188e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8011890:	2100      	movs	r1, #0
 8011892:	3802      	subs	r0, #2
 8011894:	e003      	b.n	801189e <read_submessage_list+0x27e>
 8011896:	3101      	adds	r1, #1
 8011898:	4291      	cmp	r1, r2
 801189a:	f43f aec8 	beq.w	801162e <read_submessage_list+0xe>
 801189e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80118a2:	4543      	cmp	r3, r8
 80118a4:	d1f7      	bne.n	8011896 <read_submessage_list+0x276>
 80118a6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80118a8:	f803 9001 	strb.w	r9, [r3, r1]
 80118ac:	e6bf      	b.n	801162e <read_submessage_list+0xe>
 80118ae:	2a00      	cmp	r2, #0
 80118b0:	f47f aebd 	bne.w	801162e <read_submessage_list+0xe>
 80118b4:	4629      	mov	r1, r5
 80118b6:	4620      	mov	r0, r4
 80118b8:	f000 fca0 	bl	80121fc <uxr_read_create_session_status>
 80118bc:	e6b7      	b.n	801162e <read_submessage_list+0xe>
 80118be:	4629      	mov	r1, r5
 80118c0:	4620      	mov	r0, r4
 80118c2:	f7ff fce1 	bl	8011288 <read_submessage_get_info>
 80118c6:	e6b2      	b.n	801162e <read_submessage_list+0xe>
 80118c8:	b017      	add	sp, #92	@ 0x5c
 80118ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118ce:	4629      	mov	r1, r5
 80118d0:	4620      	mov	r0, r4
 80118d2:	f000 fca1 	bl	8012218 <uxr_read_delete_session_status>
 80118d6:	e6aa      	b.n	801162e <read_submessage_list+0xe>
 80118d8:	f000 fefe 	bl	80126d8 <uxr_nanos>
 80118dc:	4642      	mov	r2, r8
 80118de:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 80118e0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80118e2:	fbc7 3206 	smlal	r3, r2, r7, r6
 80118e6:	1818      	adds	r0, r3, r0
 80118e8:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80118ea:	eb42 0101 	adc.w	r1, r2, r1
 80118ee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80118f0:	4642      	mov	r2, r8
 80118f2:	fbc7 3206 	smlal	r3, r2, r7, r6
 80118f6:	469c      	mov	ip, r3
 80118f8:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	@ 0x40
 80118fc:	fbc3 7806 	smlal	r7, r8, r3, r6
 8011900:	4643      	mov	r3, r8
 8011902:	eb1c 0c07 	adds.w	ip, ip, r7
 8011906:	eb42 0203 	adc.w	r2, r2, r3
 801190a:	ebb0 030c 	subs.w	r3, r0, ip
 801190e:	eb61 0202 	sbc.w	r2, r1, r2
 8011912:	2a00      	cmp	r2, #0
 8011914:	db08      	blt.n	8011928 <read_submessage_list+0x308>
 8011916:	085b      	lsrs	r3, r3, #1
 8011918:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 801191c:	1052      	asrs	r2, r2, #1
 801191e:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8011922:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 8011926:	e6db      	b.n	80116e0 <read_submessage_list+0xc0>
 8011928:	3301      	adds	r3, #1
 801192a:	f142 0200 	adc.w	r2, r2, #0
 801192e:	e7f2      	b.n	8011916 <read_submessage_list+0x2f6>
 8011930:	3b9aca00 	.word	0x3b9aca00

08011934 <listen_message_reliably>:
 8011934:	1e0b      	subs	r3, r1, #0
 8011936:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801193a:	bfb8      	it	lt
 801193c:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8011940:	b09d      	sub	sp, #116	@ 0x74
 8011942:	4680      	mov	r8, r0
 8011944:	9305      	str	r3, [sp, #20]
 8011946:	f000 feab 	bl	80126a0 <uxr_millis>
 801194a:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 801194e:	4681      	mov	r9, r0
 8011950:	2a00      	cmp	r2, #0
 8011952:	f000 809a 	beq.w	8011a8a <listen_message_reliably+0x156>
 8011956:	2600      	movs	r6, #0
 8011958:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801195c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8011960:	460f      	mov	r7, r1
 8011962:	4630      	mov	r0, r6
 8011964:	9303      	str	r3, [sp, #12]
 8011966:	e00e      	b.n	8011986 <listen_message_reliably+0x52>
 8011968:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801196a:	3601      	adds	r6, #1
 801196c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801196e:	455a      	cmp	r2, fp
 8011970:	9903      	ldr	r1, [sp, #12]
 8011972:	b2f0      	uxtb	r0, r6
 8011974:	eb73 0101 	sbcs.w	r1, r3, r1
 8011978:	da01      	bge.n	801197e <listen_message_reliably+0x4a>
 801197a:	4693      	mov	fp, r2
 801197c:	9303      	str	r3, [sp, #12]
 801197e:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8011982:	4283      	cmp	r3, r0
 8011984:	d95f      	bls.n	8011a46 <listen_message_reliably+0x112>
 8011986:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 801198a:	2102      	movs	r1, #2
 801198c:	2201      	movs	r2, #1
 801198e:	00e4      	lsls	r4, r4, #3
 8011990:	f000 fd02 	bl	8012398 <uxr_stream_id>
 8011994:	4601      	mov	r1, r0
 8011996:	f104 0520 	add.w	r5, r4, #32
 801199a:	463b      	mov	r3, r7
 801199c:	464a      	mov	r2, r9
 801199e:	9109      	str	r1, [sp, #36]	@ 0x24
 80119a0:	4445      	add	r5, r8
 80119a2:	4628      	mov	r0, r5
 80119a4:	f007 fd70 	bl	8019488 <uxr_update_output_stream_heartbeat_timestamp>
 80119a8:	eb08 0304 	add.w	r3, r8, r4
 80119ac:	2800      	cmp	r0, #0
 80119ae:	d0db      	beq.n	8011968 <listen_message_reliably+0x34>
 80119b0:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 80119b4:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 80119b8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80119bc:	4640      	mov	r0, r8
 80119be:	3501      	adds	r5, #1
 80119c0:	4444      	add	r4, r8
 80119c2:	9304      	str	r3, [sp, #16]
 80119c4:	f000 fcae 	bl	8012324 <uxr_session_header_offset>
 80119c8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80119cc:	2300      	movs	r3, #0
 80119ce:	2211      	movs	r2, #17
 80119d0:	a90c      	add	r1, sp, #48	@ 0x30
 80119d2:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 80119d6:	9000      	str	r0, [sp, #0]
 80119d8:	4650      	mov	r0, sl
 80119da:	3601      	adds	r6, #1
 80119dc:	f7fd f8b2 	bl	800eb44 <ucdr_init_buffer_origin_offset>
 80119e0:	2300      	movs	r3, #0
 80119e2:	2205      	movs	r2, #5
 80119e4:	210b      	movs	r1, #11
 80119e6:	4650      	mov	r0, sl
 80119e8:	f000 fe14 	bl	8012614 <uxr_buffer_submessage_header>
 80119ec:	2101      	movs	r1, #1
 80119ee:	8968      	ldrh	r0, [r5, #10]
 80119f0:	f007 ff1c 	bl	801982c <uxr_seq_num_add>
 80119f4:	892b      	ldrh	r3, [r5, #8]
 80119f6:	4602      	mov	r2, r0
 80119f8:	a90a      	add	r1, sp, #40	@ 0x28
 80119fa:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80119fe:	4650      	mov	r0, sl
 8011a00:	9b04      	ldr	r3, [sp, #16]
 8011a02:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8011a06:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8011a0a:	f001 fe65 	bl	80136d8 <uxr_serialize_HEARTBEAT_Payload>
 8011a0e:	2200      	movs	r2, #0
 8011a10:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011a12:	4640      	mov	r0, r8
 8011a14:	4611      	mov	r1, r2
 8011a16:	f000 fc31 	bl	801227c <uxr_stamp_session_header>
 8011a1a:	4650      	mov	r0, sl
 8011a1c:	f7fd f8d2 	bl	800ebc4 <ucdr_buffer_length>
 8011a20:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8011a24:	4602      	mov	r2, r0
 8011a26:	a90c      	add	r1, sp, #48	@ 0x30
 8011a28:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011a2c:	47a8      	blx	r5
 8011a2e:	9903      	ldr	r1, [sp, #12]
 8011a30:	b2f0      	uxtb	r0, r6
 8011a32:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8011a36:	455a      	cmp	r2, fp
 8011a38:	eb73 0101 	sbcs.w	r1, r3, r1
 8011a3c:	db9d      	blt.n	801197a <listen_message_reliably+0x46>
 8011a3e:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8011a42:	4283      	cmp	r3, r0
 8011a44:	d89f      	bhi.n	8011986 <listen_message_reliably+0x52>
 8011a46:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011a4a:	9a03      	ldr	r2, [sp, #12]
 8011a4c:	429a      	cmp	r2, r3
 8011a4e:	bf08      	it	eq
 8011a50:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8011a54:	d019      	beq.n	8011a8a <listen_message_reliably+0x156>
 8011a56:	ebab 0309 	sub.w	r3, fp, r9
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	9d05      	ldr	r5, [sp, #20]
 8011a5e:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 8011a62:	aa08      	add	r2, sp, #32
 8011a64:	bf08      	it	eq
 8011a66:	2301      	moveq	r3, #1
 8011a68:	a907      	add	r1, sp, #28
 8011a6a:	6884      	ldr	r4, [r0, #8]
 8011a6c:	429d      	cmp	r5, r3
 8011a6e:	6800      	ldr	r0, [r0, #0]
 8011a70:	bfa8      	it	ge
 8011a72:	461d      	movge	r5, r3
 8011a74:	462b      	mov	r3, r5
 8011a76:	47a0      	blx	r4
 8011a78:	b948      	cbnz	r0, 8011a8e <listen_message_reliably+0x15a>
 8011a7a:	9b05      	ldr	r3, [sp, #20]
 8011a7c:	1b5b      	subs	r3, r3, r5
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	9305      	str	r3, [sp, #20]
 8011a82:	f73f af60 	bgt.w	8011946 <listen_message_reliably+0x12>
 8011a86:	4604      	mov	r4, r0
 8011a88:	e012      	b.n	8011ab0 <listen_message_reliably+0x17c>
 8011a8a:	9b05      	ldr	r3, [sp, #20]
 8011a8c:	e7e5      	b.n	8011a5a <listen_message_reliably+0x126>
 8011a8e:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011a92:	4604      	mov	r4, r0
 8011a94:	2500      	movs	r5, #0
 8011a96:	a80c      	add	r0, sp, #48	@ 0x30
 8011a98:	f7fd f866 	bl	800eb68 <ucdr_init_buffer>
 8011a9c:	f10d 031a 	add.w	r3, sp, #26
 8011aa0:	aa06      	add	r2, sp, #24
 8011aa2:	a90c      	add	r1, sp, #48	@ 0x30
 8011aa4:	4640      	mov	r0, r8
 8011aa6:	f88d 5018 	strb.w	r5, [sp, #24]
 8011aaa:	f000 fbfb 	bl	80122a4 <uxr_read_session_header>
 8011aae:	b918      	cbnz	r0, 8011ab8 <listen_message_reliably+0x184>
 8011ab0:	4620      	mov	r0, r4
 8011ab2:	b01d      	add	sp, #116	@ 0x74
 8011ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ab8:	4629      	mov	r1, r5
 8011aba:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011abe:	f000 fc99 	bl	80123f4 <uxr_stream_id_from_raw>
 8011ac2:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8011ac6:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8011aca:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8011ace:	2e01      	cmp	r6, #1
 8011ad0:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8011ad4:	d04b      	beq.n	8011b6e <listen_message_reliably+0x23a>
 8011ad6:	2e02      	cmp	r6, #2
 8011ad8:	d00f      	beq.n	8011afa <listen_message_reliably+0x1c6>
 8011ada:	2e00      	cmp	r6, #0
 8011adc:	d1e8      	bne.n	8011ab0 <listen_message_reliably+0x17c>
 8011ade:	4631      	mov	r1, r6
 8011ae0:	4630      	mov	r0, r6
 8011ae2:	f000 fc87 	bl	80123f4 <uxr_stream_id_from_raw>
 8011ae6:	4602      	mov	r2, r0
 8011ae8:	a90c      	add	r1, sp, #48	@ 0x30
 8011aea:	4640      	mov	r0, r8
 8011aec:	920a      	str	r2, [sp, #40]	@ 0x28
 8011aee:	f7ff fd97 	bl	8011620 <read_submessage_list>
 8011af2:	4620      	mov	r0, r4
 8011af4:	b01d      	add	sp, #116	@ 0x74
 8011af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011afa:	4629      	mov	r1, r5
 8011afc:	f108 0008 	add.w	r0, r8, #8
 8011b00:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8011b04:	f000 fd64 	bl	80125d0 <uxr_get_input_reliable_stream>
 8011b08:	4607      	mov	r7, r0
 8011b0a:	b338      	cbz	r0, 8011b5c <listen_message_reliably+0x228>
 8011b0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011b0e:	a80c      	add	r0, sp, #48	@ 0x30
 8011b10:	9203      	str	r2, [sp, #12]
 8011b12:	f7fd f85b 	bl	800ebcc <ucdr_buffer_remaining>
 8011b16:	4603      	mov	r3, r0
 8011b18:	f10d 0019 	add.w	r0, sp, #25
 8011b1c:	9a03      	ldr	r2, [sp, #12]
 8011b1e:	4651      	mov	r1, sl
 8011b20:	9000      	str	r0, [sp, #0]
 8011b22:	4638      	mov	r0, r7
 8011b24:	f007 f88c 	bl	8018c40 <uxr_receive_reliable_message>
 8011b28:	b1c0      	cbz	r0, 8011b5c <listen_message_reliably+0x228>
 8011b2a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011b2e:	b393      	cbz	r3, 8011b96 <listen_message_reliably+0x262>
 8011b30:	ae14      	add	r6, sp, #80	@ 0x50
 8011b32:	f04f 0a02 	mov.w	sl, #2
 8011b36:	e00a      	b.n	8011b4e <listen_message_reliably+0x21a>
 8011b38:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8011b3c:	4631      	mov	r1, r6
 8011b3e:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 8011b42:	4640      	mov	r0, r8
 8011b44:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8011b48:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011b4a:	f7ff fd69 	bl	8011620 <read_submessage_list>
 8011b4e:	2204      	movs	r2, #4
 8011b50:	4631      	mov	r1, r6
 8011b52:	4638      	mov	r0, r7
 8011b54:	f007 f8f6 	bl	8018d44 <uxr_next_input_reliable_buffer_available>
 8011b58:	2800      	cmp	r0, #0
 8011b5a:	d1ed      	bne.n	8011b38 <listen_message_reliably+0x204>
 8011b5c:	4640      	mov	r0, r8
 8011b5e:	462a      	mov	r2, r5
 8011b60:	4649      	mov	r1, r9
 8011b62:	f7ff fbc7 	bl	80112f4 <write_submessage_acknack.isra.0>
 8011b66:	4620      	mov	r0, r4
 8011b68:	b01d      	add	sp, #116	@ 0x74
 8011b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b6e:	4629      	mov	r1, r5
 8011b70:	f108 0008 	add.w	r0, r8, #8
 8011b74:	f000 fd22 	bl	80125bc <uxr_get_input_best_effort_stream>
 8011b78:	2800      	cmp	r0, #0
 8011b7a:	d099      	beq.n	8011ab0 <listen_message_reliably+0x17c>
 8011b7c:	4651      	mov	r1, sl
 8011b7e:	f006 ffd5 	bl	8018b2c <uxr_receive_best_effort_message>
 8011b82:	2800      	cmp	r0, #0
 8011b84:	d094      	beq.n	8011ab0 <listen_message_reliably+0x17c>
 8011b86:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8011b8a:	a90c      	add	r1, sp, #48	@ 0x30
 8011b8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011b8e:	4640      	mov	r0, r8
 8011b90:	f7ff fd46 	bl	8011620 <read_submessage_list>
 8011b94:	e78c      	b.n	8011ab0 <listen_message_reliably+0x17c>
 8011b96:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8011b9a:	a90c      	add	r1, sp, #48	@ 0x30
 8011b9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011b9e:	4640      	mov	r0, r8
 8011ba0:	f7ff fd3e 	bl	8011620 <read_submessage_list>
 8011ba4:	e7c4      	b.n	8011b30 <listen_message_reliably+0x1fc>
 8011ba6:	bf00      	nop

08011ba8 <uxr_run_session_timeout>:
 8011ba8:	b570      	push	{r4, r5, r6, lr}
 8011baa:	4604      	mov	r4, r0
 8011bac:	460d      	mov	r5, r1
 8011bae:	f000 fd77 	bl	80126a0 <uxr_millis>
 8011bb2:	4606      	mov	r6, r0
 8011bb4:	4620      	mov	r0, r4
 8011bb6:	f7ff fc77 	bl	80114a8 <uxr_flash_output_streams>
 8011bba:	4629      	mov	r1, r5
 8011bbc:	4620      	mov	r0, r4
 8011bbe:	f7ff feb9 	bl	8011934 <listen_message_reliably>
 8011bc2:	f000 fd6d 	bl	80126a0 <uxr_millis>
 8011bc6:	1b83      	subs	r3, r0, r6
 8011bc8:	1ae9      	subs	r1, r5, r3
 8011bca:	2900      	cmp	r1, #0
 8011bcc:	dcf6      	bgt.n	8011bbc <uxr_run_session_timeout+0x14>
 8011bce:	f104 0008 	add.w	r0, r4, #8
 8011bd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011bd6:	f000 bd07 	b.w	80125e8 <uxr_output_streams_confirmed>
 8011bda:	bf00      	nop

08011bdc <uxr_run_session_until_data>:
 8011bdc:	b570      	push	{r4, r5, r6, lr}
 8011bde:	4604      	mov	r4, r0
 8011be0:	460d      	mov	r5, r1
 8011be2:	f000 fd5d 	bl	80126a0 <uxr_millis>
 8011be6:	4606      	mov	r6, r0
 8011be8:	4620      	mov	r0, r4
 8011bea:	f7ff fc5d 	bl	80114a8 <uxr_flash_output_streams>
 8011bee:	2300      	movs	r3, #0
 8011bf0:	4629      	mov	r1, r5
 8011bf2:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8011bf6:	e005      	b.n	8011c04 <uxr_run_session_until_data+0x28>
 8011bf8:	f000 fd52 	bl	80126a0 <uxr_millis>
 8011bfc:	1b83      	subs	r3, r0, r6
 8011bfe:	1ae9      	subs	r1, r5, r3
 8011c00:	2900      	cmp	r1, #0
 8011c02:	dd07      	ble.n	8011c14 <uxr_run_session_until_data+0x38>
 8011c04:	4620      	mov	r0, r4
 8011c06:	f7ff fe95 	bl	8011934 <listen_message_reliably>
 8011c0a:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8011c0e:	2800      	cmp	r0, #0
 8011c10:	d0f2      	beq.n	8011bf8 <uxr_run_session_until_data+0x1c>
 8011c12:	bd70      	pop	{r4, r5, r6, pc}
 8011c14:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8011c18:	bd70      	pop	{r4, r5, r6, pc}
 8011c1a:	bf00      	nop

08011c1c <uxr_run_session_until_confirm_delivery>:
 8011c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c20:	4606      	mov	r6, r0
 8011c22:	460d      	mov	r5, r1
 8011c24:	f000 fd3c 	bl	80126a0 <uxr_millis>
 8011c28:	4607      	mov	r7, r0
 8011c2a:	4630      	mov	r0, r6
 8011c2c:	f106 0808 	add.w	r8, r6, #8
 8011c30:	f7ff fc3a 	bl	80114a8 <uxr_flash_output_streams>
 8011c34:	2d00      	cmp	r5, #0
 8011c36:	db10      	blt.n	8011c5a <uxr_run_session_until_confirm_delivery+0x3e>
 8011c38:	462c      	mov	r4, r5
 8011c3a:	e006      	b.n	8011c4a <uxr_run_session_until_confirm_delivery+0x2e>
 8011c3c:	f7ff fe7a 	bl	8011934 <listen_message_reliably>
 8011c40:	f000 fd2e 	bl	80126a0 <uxr_millis>
 8011c44:	1bc3      	subs	r3, r0, r7
 8011c46:	1aec      	subs	r4, r5, r3
 8011c48:	d407      	bmi.n	8011c5a <uxr_run_session_until_confirm_delivery+0x3e>
 8011c4a:	4640      	mov	r0, r8
 8011c4c:	f000 fccc 	bl	80125e8 <uxr_output_streams_confirmed>
 8011c50:	4603      	mov	r3, r0
 8011c52:	4621      	mov	r1, r4
 8011c54:	4630      	mov	r0, r6
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d0f0      	beq.n	8011c3c <uxr_run_session_until_confirm_delivery+0x20>
 8011c5a:	4640      	mov	r0, r8
 8011c5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c60:	f000 bcc2 	b.w	80125e8 <uxr_output_streams_confirmed>

08011c64 <uxr_run_session_until_all_status>:
 8011c64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c68:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 8011c6c:	4606      	mov	r6, r0
 8011c6e:	4688      	mov	r8, r1
 8011c70:	4692      	mov	sl, r2
 8011c72:	461f      	mov	r7, r3
 8011c74:	f7ff fc18 	bl	80114a8 <uxr_flash_output_streams>
 8011c78:	f1bb 0f00 	cmp.w	fp, #0
 8011c7c:	d004      	beq.n	8011c88 <uxr_run_session_until_all_status+0x24>
 8011c7e:	465a      	mov	r2, fp
 8011c80:	21ff      	movs	r1, #255	@ 0xff
 8011c82:	4638      	mov	r0, r7
 8011c84:	f009 fca8 	bl	801b5d8 <memset>
 8011c88:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8011c8c:	1e7d      	subs	r5, r7, #1
 8011c8e:	e9c6 a71d 	strd	sl, r7, [r6, #116]	@ 0x74
 8011c92:	f000 fd05 	bl	80126a0 <uxr_millis>
 8011c96:	4641      	mov	r1, r8
 8011c98:	4681      	mov	r9, r0
 8011c9a:	4630      	mov	r0, r6
 8011c9c:	f7ff fe4a 	bl	8011934 <listen_message_reliably>
 8011ca0:	f000 fcfe 	bl	80126a0 <uxr_millis>
 8011ca4:	eba0 0009 	sub.w	r0, r0, r9
 8011ca8:	eba8 0100 	sub.w	r1, r8, r0
 8011cac:	f1bb 0f00 	cmp.w	fp, #0
 8011cb0:	d029      	beq.n	8011d06 <uxr_run_session_until_all_status+0xa2>
 8011cb2:	46ae      	mov	lr, r5
 8011cb4:	f04f 0c00 	mov.w	ip, #0
 8011cb8:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8011cbc:	2cff      	cmp	r4, #255	@ 0xff
 8011cbe:	d015      	beq.n	8011cec <uxr_run_session_until_all_status+0x88>
 8011cc0:	f10c 0c01 	add.w	ip, ip, #1
 8011cc4:	45e3      	cmp	fp, ip
 8011cc6:	d8f7      	bhi.n	8011cb8 <uxr_run_session_until_all_status+0x54>
 8011cc8:	2300      	movs	r3, #0
 8011cca:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8011ccc:	e000      	b.n	8011cd0 <uxr_run_session_until_all_status+0x6c>
 8011cce:	b158      	cbz	r0, 8011ce8 <uxr_run_session_until_all_status+0x84>
 8011cd0:	462b      	mov	r3, r5
 8011cd2:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8011cd6:	3302      	adds	r3, #2
 8011cd8:	2801      	cmp	r0, #1
 8011cda:	eba3 0307 	sub.w	r3, r3, r7
 8011cde:	bf8c      	ite	hi
 8011ce0:	2000      	movhi	r0, #0
 8011ce2:	2001      	movls	r0, #1
 8011ce4:	459b      	cmp	fp, r3
 8011ce6:	d8f2      	bhi.n	8011cce <uxr_run_session_until_all_status+0x6a>
 8011ce8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cec:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8011cf0:	f10c 0c01 	add.w	ip, ip, #1
 8011cf4:	45dc      	cmp	ip, fp
 8011cf6:	d201      	bcs.n	8011cfc <uxr_run_session_until_all_status+0x98>
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d0dd      	beq.n	8011cb8 <uxr_run_session_until_all_status+0x54>
 8011cfc:	2900      	cmp	r1, #0
 8011cfe:	dde3      	ble.n	8011cc8 <uxr_run_session_until_all_status+0x64>
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d1ca      	bne.n	8011c9a <uxr_run_session_until_all_status+0x36>
 8011d04:	e7e0      	b.n	8011cc8 <uxr_run_session_until_all_status+0x64>
 8011d06:	2001      	movs	r0, #1
 8011d08:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8011d0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011d10 <wait_session_status>:
 8011d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d14:	4604      	mov	r4, r0
 8011d16:	b09d      	sub	sp, #116	@ 0x74
 8011d18:	20ff      	movs	r0, #255	@ 0xff
 8011d1a:	9303      	str	r3, [sp, #12]
 8011d1c:	7160      	strb	r0, [r4, #5]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	f000 80b6 	beq.w	8011e90 <wait_session_status+0x180>
 8011d24:	4689      	mov	r9, r1
 8011d26:	4692      	mov	sl, r2
 8011d28:	f04f 0b00 	mov.w	fp, #0
 8011d2c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011d2e:	4652      	mov	r2, sl
 8011d30:	4649      	mov	r1, r9
 8011d32:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011d36:	47a8      	blx	r5
 8011d38:	f000 fcb2 	bl	80126a0 <uxr_millis>
 8011d3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011d40:	4605      	mov	r5, r0
 8011d42:	e009      	b.n	8011d58 <wait_session_status+0x48>
 8011d44:	f000 fcac 	bl	80126a0 <uxr_millis>
 8011d48:	1b40      	subs	r0, r0, r5
 8011d4a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	dd40      	ble.n	8011dd4 <wait_session_status+0xc4>
 8011d52:	7960      	ldrb	r0, [r4, #5]
 8011d54:	28ff      	cmp	r0, #255	@ 0xff
 8011d56:	d145      	bne.n	8011de4 <wait_session_status+0xd4>
 8011d58:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8011d5a:	a908      	add	r1, sp, #32
 8011d5c:	6896      	ldr	r6, [r2, #8]
 8011d5e:	6810      	ldr	r0, [r2, #0]
 8011d60:	aa09      	add	r2, sp, #36	@ 0x24
 8011d62:	47b0      	blx	r6
 8011d64:	2800      	cmp	r0, #0
 8011d66:	d0ed      	beq.n	8011d44 <wait_session_status+0x34>
 8011d68:	a80c      	add	r0, sp, #48	@ 0x30
 8011d6a:	2600      	movs	r6, #0
 8011d6c:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8011d70:	f7fc fefa 	bl	800eb68 <ucdr_init_buffer>
 8011d74:	f10d 031e 	add.w	r3, sp, #30
 8011d78:	aa07      	add	r2, sp, #28
 8011d7a:	a90c      	add	r1, sp, #48	@ 0x30
 8011d7c:	4620      	mov	r0, r4
 8011d7e:	f88d 601c 	strb.w	r6, [sp, #28]
 8011d82:	f000 fa8f 	bl	80122a4 <uxr_read_session_header>
 8011d86:	2800      	cmp	r0, #0
 8011d88:	d0dc      	beq.n	8011d44 <wait_session_status+0x34>
 8011d8a:	4631      	mov	r1, r6
 8011d8c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8011d90:	f000 fb30 	bl	80123f4 <uxr_stream_id_from_raw>
 8011d94:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8011d98:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8011d9c:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011da0:	2f01      	cmp	r7, #1
 8011da2:	9302      	str	r3, [sp, #8]
 8011da4:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8011da8:	d05c      	beq.n	8011e64 <wait_session_status+0x154>
 8011daa:	2f02      	cmp	r7, #2
 8011dac:	d020      	beq.n	8011df0 <wait_session_status+0xe0>
 8011dae:	2f00      	cmp	r7, #0
 8011db0:	d1c8      	bne.n	8011d44 <wait_session_status+0x34>
 8011db2:	4639      	mov	r1, r7
 8011db4:	4638      	mov	r0, r7
 8011db6:	f000 fb1d 	bl	80123f4 <uxr_stream_id_from_raw>
 8011dba:	a90c      	add	r1, sp, #48	@ 0x30
 8011dbc:	4602      	mov	r2, r0
 8011dbe:	900b      	str	r0, [sp, #44]	@ 0x2c
 8011dc0:	4620      	mov	r0, r4
 8011dc2:	f7ff fc2d 	bl	8011620 <read_submessage_list>
 8011dc6:	f000 fc6b 	bl	80126a0 <uxr_millis>
 8011dca:	1b40      	subs	r0, r0, r5
 8011dcc:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	dcbe      	bgt.n	8011d52 <wait_session_status+0x42>
 8011dd4:	f10b 0b01 	add.w	fp, fp, #1
 8011dd8:	9b03      	ldr	r3, [sp, #12]
 8011dda:	7960      	ldrb	r0, [r4, #5]
 8011ddc:	455b      	cmp	r3, fp
 8011dde:	d001      	beq.n	8011de4 <wait_session_status+0xd4>
 8011de0:	28ff      	cmp	r0, #255	@ 0xff
 8011de2:	d0a3      	beq.n	8011d2c <wait_session_status+0x1c>
 8011de4:	38ff      	subs	r0, #255	@ 0xff
 8011de6:	bf18      	it	ne
 8011de8:	2001      	movne	r0, #1
 8011dea:	b01d      	add	sp, #116	@ 0x74
 8011dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011df0:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8011df4:	4631      	mov	r1, r6
 8011df6:	f104 0008 	add.w	r0, r4, #8
 8011dfa:	9304      	str	r3, [sp, #16]
 8011dfc:	f000 fbe8 	bl	80125d0 <uxr_get_input_reliable_stream>
 8011e00:	4680      	mov	r8, r0
 8011e02:	b348      	cbz	r0, 8011e58 <wait_session_status+0x148>
 8011e04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011e06:	a80c      	add	r0, sp, #48	@ 0x30
 8011e08:	9205      	str	r2, [sp, #20]
 8011e0a:	f7fc fedf 	bl	800ebcc <ucdr_buffer_remaining>
 8011e0e:	4603      	mov	r3, r0
 8011e10:	f10d 001d 	add.w	r0, sp, #29
 8011e14:	9a05      	ldr	r2, [sp, #20]
 8011e16:	9000      	str	r0, [sp, #0]
 8011e18:	4640      	mov	r0, r8
 8011e1a:	9902      	ldr	r1, [sp, #8]
 8011e1c:	f006 ff10 	bl	8018c40 <uxr_receive_reliable_message>
 8011e20:	b1d0      	cbz	r0, 8011e58 <wait_session_status+0x148>
 8011e22:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d03a      	beq.n	8011ea0 <wait_session_status+0x190>
 8011e2a:	9f04      	ldr	r7, [sp, #16]
 8011e2c:	e00a      	b.n	8011e44 <wait_session_status+0x134>
 8011e2e:	f04f 0302 	mov.w	r3, #2
 8011e32:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8011e36:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8011e3a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8011e3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011e40:	f7ff fbee 	bl	8011620 <read_submessage_list>
 8011e44:	a914      	add	r1, sp, #80	@ 0x50
 8011e46:	2204      	movs	r2, #4
 8011e48:	4640      	mov	r0, r8
 8011e4a:	f006 ff7b 	bl	8018d44 <uxr_next_input_reliable_buffer_available>
 8011e4e:	4603      	mov	r3, r0
 8011e50:	a914      	add	r1, sp, #80	@ 0x50
 8011e52:	4620      	mov	r0, r4
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d1ea      	bne.n	8011e2e <wait_session_status+0x11e>
 8011e58:	4632      	mov	r2, r6
 8011e5a:	9904      	ldr	r1, [sp, #16]
 8011e5c:	4620      	mov	r0, r4
 8011e5e:	f7ff fa49 	bl	80112f4 <write_submessage_acknack.isra.0>
 8011e62:	e76f      	b.n	8011d44 <wait_session_status+0x34>
 8011e64:	4631      	mov	r1, r6
 8011e66:	f104 0008 	add.w	r0, r4, #8
 8011e6a:	f000 fba7 	bl	80125bc <uxr_get_input_best_effort_stream>
 8011e6e:	2800      	cmp	r0, #0
 8011e70:	f43f af68 	beq.w	8011d44 <wait_session_status+0x34>
 8011e74:	9902      	ldr	r1, [sp, #8]
 8011e76:	f006 fe59 	bl	8018b2c <uxr_receive_best_effort_message>
 8011e7a:	2800      	cmp	r0, #0
 8011e7c:	f43f af62 	beq.w	8011d44 <wait_session_status+0x34>
 8011e80:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8011e84:	a90c      	add	r1, sp, #48	@ 0x30
 8011e86:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011e88:	4620      	mov	r0, r4
 8011e8a:	f7ff fbc9 	bl	8011620 <read_submessage_list>
 8011e8e:	e759      	b.n	8011d44 <wait_session_status+0x34>
 8011e90:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011e92:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011e96:	47a0      	blx	r4
 8011e98:	2001      	movs	r0, #1
 8011e9a:	b01d      	add	sp, #116	@ 0x74
 8011e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ea0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8011ea4:	a90c      	add	r1, sp, #48	@ 0x30
 8011ea6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011ea8:	4620      	mov	r0, r4
 8011eaa:	f7ff fbb9 	bl	8011620 <read_submessage_list>
 8011eae:	e7bc      	b.n	8011e2a <wait_session_status+0x11a>

08011eb0 <uxr_delete_session_retries>:
 8011eb0:	b530      	push	{r4, r5, lr}
 8011eb2:	b08f      	sub	sp, #60	@ 0x3c
 8011eb4:	4604      	mov	r4, r0
 8011eb6:	460d      	mov	r5, r1
 8011eb8:	f000 fa34 	bl	8012324 <uxr_session_header_offset>
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	2210      	movs	r2, #16
 8011ec0:	a902      	add	r1, sp, #8
 8011ec2:	9000      	str	r0, [sp, #0]
 8011ec4:	a806      	add	r0, sp, #24
 8011ec6:	f7fc fe3d 	bl	800eb44 <ucdr_init_buffer_origin_offset>
 8011eca:	a906      	add	r1, sp, #24
 8011ecc:	4620      	mov	r0, r4
 8011ece:	f000 f979 	bl	80121c4 <uxr_buffer_delete_session>
 8011ed2:	2200      	movs	r2, #0
 8011ed4:	9b06      	ldr	r3, [sp, #24]
 8011ed6:	4620      	mov	r0, r4
 8011ed8:	4611      	mov	r1, r2
 8011eda:	f000 f9cf 	bl	801227c <uxr_stamp_session_header>
 8011ede:	a806      	add	r0, sp, #24
 8011ee0:	f7fc fe70 	bl	800ebc4 <ucdr_buffer_length>
 8011ee4:	462b      	mov	r3, r5
 8011ee6:	4602      	mov	r2, r0
 8011ee8:	a902      	add	r1, sp, #8
 8011eea:	4620      	mov	r0, r4
 8011eec:	f7ff ff10 	bl	8011d10 <wait_session_status>
 8011ef0:	b118      	cbz	r0, 8011efa <uxr_delete_session_retries+0x4a>
 8011ef2:	7960      	ldrb	r0, [r4, #5]
 8011ef4:	fab0 f080 	clz	r0, r0
 8011ef8:	0940      	lsrs	r0, r0, #5
 8011efa:	b00f      	add	sp, #60	@ 0x3c
 8011efc:	bd30      	pop	{r4, r5, pc}
 8011efe:	bf00      	nop

08011f00 <uxr_create_session>:
 8011f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f04:	f100 0b08 	add.w	fp, r0, #8
 8011f08:	4604      	mov	r4, r0
 8011f0a:	b0ab      	sub	sp, #172	@ 0xac
 8011f0c:	4658      	mov	r0, fp
 8011f0e:	465e      	mov	r6, fp
 8011f10:	f000 faa6 	bl	8012460 <uxr_reset_stream_storage>
 8011f14:	4620      	mov	r0, r4
 8011f16:	f000 fa05 	bl	8012324 <uxr_session_header_offset>
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	221c      	movs	r2, #28
 8011f1e:	a90b      	add	r1, sp, #44	@ 0x2c
 8011f20:	9000      	str	r0, [sp, #0]
 8011f22:	a812      	add	r0, sp, #72	@ 0x48
 8011f24:	f7fc fe0e 	bl	800eb44 <ucdr_init_buffer_origin_offset>
 8011f28:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011f2a:	a912      	add	r1, sp, #72	@ 0x48
 8011f2c:	4620      	mov	r0, r4
 8011f2e:	8a1a      	ldrh	r2, [r3, #16]
 8011f30:	3a04      	subs	r2, #4
 8011f32:	b292      	uxth	r2, r2
 8011f34:	f000 f91c 	bl	8012170 <uxr_buffer_create_session>
 8011f38:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011f3a:	4620      	mov	r0, r4
 8011f3c:	f000 f98a 	bl	8012254 <uxr_stamp_create_session_header>
 8011f40:	a812      	add	r0, sp, #72	@ 0x48
 8011f42:	f7fc fe3f 	bl	800ebc4 <ucdr_buffer_length>
 8011f46:	23ff      	movs	r3, #255	@ 0xff
 8011f48:	4681      	mov	r9, r0
 8011f4a:	7163      	strb	r3, [r4, #5]
 8011f4c:	230a      	movs	r3, #10
 8011f4e:	9303      	str	r3, [sp, #12]
 8011f50:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011f52:	464a      	mov	r2, r9
 8011f54:	a90b      	add	r1, sp, #44	@ 0x2c
 8011f56:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011f5a:	47a8      	blx	r5
 8011f5c:	f000 fba0 	bl	80126a0 <uxr_millis>
 8011f60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011f64:	4605      	mov	r5, r0
 8011f66:	e009      	b.n	8011f7c <uxr_create_session+0x7c>
 8011f68:	f000 fb9a 	bl	80126a0 <uxr_millis>
 8011f6c:	1b40      	subs	r0, r0, r5
 8011f6e:	7962      	ldrb	r2, [r4, #5]
 8011f70:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	dd38      	ble.n	8011fea <uxr_create_session+0xea>
 8011f78:	2aff      	cmp	r2, #255	@ 0xff
 8011f7a:	d13c      	bne.n	8011ff6 <uxr_create_session+0xf6>
 8011f7c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8011f7e:	a907      	add	r1, sp, #28
 8011f80:	6897      	ldr	r7, [r2, #8]
 8011f82:	6810      	ldr	r0, [r2, #0]
 8011f84:	aa08      	add	r2, sp, #32
 8011f86:	47b8      	blx	r7
 8011f88:	2800      	cmp	r0, #0
 8011f8a:	d0ed      	beq.n	8011f68 <uxr_create_session+0x68>
 8011f8c:	a81a      	add	r0, sp, #104	@ 0x68
 8011f8e:	2700      	movs	r7, #0
 8011f90:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011f94:	f7fc fde8 	bl	800eb68 <ucdr_init_buffer>
 8011f98:	f10d 031a 	add.w	r3, sp, #26
 8011f9c:	aa06      	add	r2, sp, #24
 8011f9e:	a91a      	add	r1, sp, #104	@ 0x68
 8011fa0:	4620      	mov	r0, r4
 8011fa2:	f88d 7018 	strb.w	r7, [sp, #24]
 8011fa6:	f000 f97d 	bl	80122a4 <uxr_read_session_header>
 8011faa:	2800      	cmp	r0, #0
 8011fac:	d0dc      	beq.n	8011f68 <uxr_create_session+0x68>
 8011fae:	4639      	mov	r1, r7
 8011fb0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011fb4:	f000 fa1e 	bl	80123f4 <uxr_stream_id_from_raw>
 8011fb8:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8011fbc:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8011fc0:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8011fc4:	2f01      	cmp	r7, #1
 8011fc6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8011fca:	d053      	beq.n	8012074 <uxr_create_session+0x174>
 8011fcc:	2f02      	cmp	r7, #2
 8011fce:	d018      	beq.n	8012002 <uxr_create_session+0x102>
 8011fd0:	2f00      	cmp	r7, #0
 8011fd2:	d1c9      	bne.n	8011f68 <uxr_create_session+0x68>
 8011fd4:	4639      	mov	r1, r7
 8011fd6:	4638      	mov	r0, r7
 8011fd8:	f000 fa0c 	bl	80123f4 <uxr_stream_id_from_raw>
 8011fdc:	a91a      	add	r1, sp, #104	@ 0x68
 8011fde:	4602      	mov	r2, r0
 8011fe0:	900a      	str	r0, [sp, #40]	@ 0x28
 8011fe2:	4620      	mov	r0, r4
 8011fe4:	f7ff fb1c 	bl	8011620 <read_submessage_list>
 8011fe8:	e7be      	b.n	8011f68 <uxr_create_session+0x68>
 8011fea:	9b03      	ldr	r3, [sp, #12]
 8011fec:	3b01      	subs	r3, #1
 8011fee:	9303      	str	r3, [sp, #12]
 8011ff0:	d001      	beq.n	8011ff6 <uxr_create_session+0xf6>
 8011ff2:	2aff      	cmp	r2, #255	@ 0xff
 8011ff4:	d0ac      	beq.n	8011f50 <uxr_create_session+0x50>
 8011ff6:	2a00      	cmp	r2, #0
 8011ff8:	d051      	beq.n	801209e <uxr_create_session+0x19e>
 8011ffa:	2000      	movs	r0, #0
 8011ffc:	b02b      	add	sp, #172	@ 0xac
 8011ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012002:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8012006:	4641      	mov	r1, r8
 8012008:	4630      	mov	r0, r6
 801200a:	9304      	str	r3, [sp, #16]
 801200c:	f000 fae0 	bl	80125d0 <uxr_get_input_reliable_stream>
 8012010:	4682      	mov	sl, r0
 8012012:	b348      	cbz	r0, 8012068 <uxr_create_session+0x168>
 8012014:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8012016:	a81a      	add	r0, sp, #104	@ 0x68
 8012018:	9205      	str	r2, [sp, #20]
 801201a:	f7fc fdd7 	bl	800ebcc <ucdr_buffer_remaining>
 801201e:	4603      	mov	r3, r0
 8012020:	f10d 0019 	add.w	r0, sp, #25
 8012024:	9a05      	ldr	r2, [sp, #20]
 8012026:	4659      	mov	r1, fp
 8012028:	9000      	str	r0, [sp, #0]
 801202a:	4650      	mov	r0, sl
 801202c:	f006 fe08 	bl	8018c40 <uxr_receive_reliable_message>
 8012030:	b1d0      	cbz	r0, 8012068 <uxr_create_session+0x168>
 8012032:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8012036:	2b00      	cmp	r3, #0
 8012038:	d038      	beq.n	80120ac <uxr_create_session+0x1ac>
 801203a:	9f04      	ldr	r7, [sp, #16]
 801203c:	e00a      	b.n	8012054 <uxr_create_session+0x154>
 801203e:	f04f 0302 	mov.w	r3, #2
 8012042:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 8012046:	f88d 8029 	strb.w	r8, [sp, #41]	@ 0x29
 801204a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801204e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012050:	f7ff fae6 	bl	8011620 <read_submessage_list>
 8012054:	a922      	add	r1, sp, #136	@ 0x88
 8012056:	2204      	movs	r2, #4
 8012058:	4650      	mov	r0, sl
 801205a:	f006 fe73 	bl	8018d44 <uxr_next_input_reliable_buffer_available>
 801205e:	4603      	mov	r3, r0
 8012060:	a922      	add	r1, sp, #136	@ 0x88
 8012062:	4620      	mov	r0, r4
 8012064:	2b00      	cmp	r3, #0
 8012066:	d1ea      	bne.n	801203e <uxr_create_session+0x13e>
 8012068:	4642      	mov	r2, r8
 801206a:	9904      	ldr	r1, [sp, #16]
 801206c:	4620      	mov	r0, r4
 801206e:	f7ff f941 	bl	80112f4 <write_submessage_acknack.isra.0>
 8012072:	e779      	b.n	8011f68 <uxr_create_session+0x68>
 8012074:	4641      	mov	r1, r8
 8012076:	4630      	mov	r0, r6
 8012078:	f000 faa0 	bl	80125bc <uxr_get_input_best_effort_stream>
 801207c:	2800      	cmp	r0, #0
 801207e:	f43f af73 	beq.w	8011f68 <uxr_create_session+0x68>
 8012082:	4659      	mov	r1, fp
 8012084:	f006 fd52 	bl	8018b2c <uxr_receive_best_effort_message>
 8012088:	2800      	cmp	r0, #0
 801208a:	f43f af6d 	beq.w	8011f68 <uxr_create_session+0x68>
 801208e:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 8012092:	a91a      	add	r1, sp, #104	@ 0x68
 8012094:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012096:	4620      	mov	r0, r4
 8012098:	f7ff fac2 	bl	8011620 <read_submessage_list>
 801209c:	e764      	b.n	8011f68 <uxr_create_session+0x68>
 801209e:	4630      	mov	r0, r6
 80120a0:	f000 f9de 	bl	8012460 <uxr_reset_stream_storage>
 80120a4:	2001      	movs	r0, #1
 80120a6:	b02b      	add	sp, #172	@ 0xac
 80120a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120ac:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 80120b0:	a91a      	add	r1, sp, #104	@ 0x68
 80120b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80120b4:	4620      	mov	r0, r4
 80120b6:	f7ff fab3 	bl	8011620 <read_submessage_list>
 80120ba:	e7be      	b.n	801203a <uxr_create_session+0x13a>

080120bc <uxr_prepare_stream_to_write_submessage>:
 80120bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120c0:	b082      	sub	sp, #8
 80120c2:	4604      	mov	r4, r0
 80120c4:	4610      	mov	r0, r2
 80120c6:	4615      	mov	r5, r2
 80120c8:	461e      	mov	r6, r3
 80120ca:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 80120ce:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 80120d2:	f105 0904 	add.w	r9, r5, #4
 80120d6:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80120da:	9101      	str	r1, [sp, #4]
 80120dc:	f000 fada 	bl	8012694 <uxr_submessage_padding>
 80120e0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80120e4:	4481      	add	r9, r0
 80120e6:	2b01      	cmp	r3, #1
 80120e8:	d01d      	beq.n	8012126 <uxr_prepare_stream_to_write_submessage+0x6a>
 80120ea:	2b02      	cmp	r3, #2
 80120ec:	d116      	bne.n	801211c <uxr_prepare_stream_to_write_submessage+0x60>
 80120ee:	f104 0008 	add.w	r0, r4, #8
 80120f2:	4651      	mov	r1, sl
 80120f4:	f000 fa56 	bl	80125a4 <uxr_get_output_reliable_stream>
 80120f8:	4604      	mov	r4, r0
 80120fa:	b158      	cbz	r0, 8012114 <uxr_prepare_stream_to_write_submessage+0x58>
 80120fc:	4649      	mov	r1, r9
 80120fe:	4632      	mov	r2, r6
 8012100:	f007 f814 	bl	801912c <uxr_prepare_reliable_buffer_to_write>
 8012104:	4604      	mov	r4, r0
 8012106:	b12c      	cbz	r4, 8012114 <uxr_prepare_stream_to_write_submessage+0x58>
 8012108:	4643      	mov	r3, r8
 801210a:	b2aa      	uxth	r2, r5
 801210c:	4639      	mov	r1, r7
 801210e:	4630      	mov	r0, r6
 8012110:	f000 fa80 	bl	8012614 <uxr_buffer_submessage_header>
 8012114:	4620      	mov	r0, r4
 8012116:	b002      	add	sp, #8
 8012118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801211c:	2400      	movs	r4, #0
 801211e:	4620      	mov	r0, r4
 8012120:	b002      	add	sp, #8
 8012122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012126:	f104 0008 	add.w	r0, r4, #8
 801212a:	4651      	mov	r1, sl
 801212c:	f000 fa32 	bl	8012594 <uxr_get_output_best_effort_stream>
 8012130:	4604      	mov	r4, r0
 8012132:	2800      	cmp	r0, #0
 8012134:	d0ee      	beq.n	8012114 <uxr_prepare_stream_to_write_submessage+0x58>
 8012136:	4649      	mov	r1, r9
 8012138:	4632      	mov	r2, r6
 801213a:	f006 ff23 	bl	8018f84 <uxr_prepare_best_effort_buffer_to_write>
 801213e:	4604      	mov	r4, r0
 8012140:	e7e1      	b.n	8012106 <uxr_prepare_stream_to_write_submessage+0x4a>
 8012142:	bf00      	nop

08012144 <uxr_init_session_info>:
 8012144:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8012148:	23ff      	movs	r3, #255	@ 0xff
 801214a:	7102      	strb	r2, [r0, #4]
 801214c:	f880 c001 	strb.w	ip, [r0, #1]
 8012150:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8012154:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8012158:	7001      	strb	r1, [r0, #0]
 801215a:	f880 c002 	strb.w	ip, [r0, #2]
 801215e:	7143      	strb	r3, [r0, #5]
 8012160:	70c2      	strb	r2, [r0, #3]
 8012162:	b500      	push	{lr}
 8012164:	f04f 0e09 	mov.w	lr, #9
 8012168:	f8a0 e006 	strh.w	lr, [r0, #6]
 801216c:	f85d fb04 	ldr.w	pc, [sp], #4

08012170 <uxr_buffer_create_session>:
 8012170:	b530      	push	{r4, r5, lr}
 8012172:	2300      	movs	r3, #0
 8012174:	b089      	sub	sp, #36	@ 0x24
 8012176:	4d12      	ldr	r5, [pc, #72]	@ (80121c0 <uxr_buffer_create_session+0x50>)
 8012178:	460c      	mov	r4, r1
 801217a:	9307      	str	r3, [sp, #28]
 801217c:	4619      	mov	r1, r3
 801217e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8012182:	2201      	movs	r2, #1
 8012184:	9301      	str	r3, [sp, #4]
 8012186:	80c2      	strh	r2, [r0, #6]
 8012188:	f88d 2004 	strb.w	r2, [sp, #4]
 801218c:	682a      	ldr	r2, [r5, #0]
 801218e:	9303      	str	r3, [sp, #12]
 8012190:	9200      	str	r2, [sp, #0]
 8012192:	88aa      	ldrh	r2, [r5, #4]
 8012194:	9306      	str	r3, [sp, #24]
 8012196:	f8ad 2006 	strh.w	r2, [sp, #6]
 801219a:	f8d0 2001 	ldr.w	r2, [r0, #1]
 801219e:	9202      	str	r2, [sp, #8]
 80121a0:	7802      	ldrb	r2, [r0, #0]
 80121a2:	4620      	mov	r0, r4
 80121a4:	f88d 200c 	strb.w	r2, [sp, #12]
 80121a8:	2210      	movs	r2, #16
 80121aa:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80121ae:	f000 fa31 	bl	8012614 <uxr_buffer_submessage_header>
 80121b2:	4669      	mov	r1, sp
 80121b4:	4620      	mov	r0, r4
 80121b6:	f001 f8eb 	bl	8013390 <uxr_serialize_CREATE_CLIENT_Payload>
 80121ba:	b009      	add	sp, #36	@ 0x24
 80121bc:	bd30      	pop	{r4, r5, pc}
 80121be:	bf00      	nop
 80121c0:	0801c4ec 	.word	0x0801c4ec

080121c4 <uxr_buffer_delete_session>:
 80121c4:	4a0c      	ldr	r2, [pc, #48]	@ (80121f8 <uxr_buffer_delete_session+0x34>)
 80121c6:	2302      	movs	r3, #2
 80121c8:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 80121cc:	b510      	push	{r4, lr}
 80121ce:	460c      	mov	r4, r1
 80121d0:	b082      	sub	sp, #8
 80121d2:	8911      	ldrh	r1, [r2, #8]
 80121d4:	2204      	movs	r2, #4
 80121d6:	80c3      	strh	r3, [r0, #6]
 80121d8:	2300      	movs	r3, #0
 80121da:	f8ad 1006 	strh.w	r1, [sp, #6]
 80121de:	4620      	mov	r0, r4
 80121e0:	2103      	movs	r1, #3
 80121e2:	f8ad c004 	strh.w	ip, [sp, #4]
 80121e6:	f000 fa15 	bl	8012614 <uxr_buffer_submessage_header>
 80121ea:	a901      	add	r1, sp, #4
 80121ec:	4620      	mov	r0, r4
 80121ee:	f001 f977 	bl	80134e0 <uxr_serialize_DELETE_Payload>
 80121f2:	b002      	add	sp, #8
 80121f4:	bd10      	pop	{r4, pc}
 80121f6:	bf00      	nop
 80121f8:	0801c4ec 	.word	0x0801c4ec

080121fc <uxr_read_create_session_status>:
 80121fc:	b510      	push	{r4, lr}
 80121fe:	460b      	mov	r3, r1
 8012200:	b088      	sub	sp, #32
 8012202:	4604      	mov	r4, r0
 8012204:	a901      	add	r1, sp, #4
 8012206:	4618      	mov	r0, r3
 8012208:	f001 f97a 	bl	8013500 <uxr_deserialize_STATUS_AGENT_Payload>
 801220c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012210:	7163      	strb	r3, [r4, #5]
 8012212:	b008      	add	sp, #32
 8012214:	bd10      	pop	{r4, pc}
 8012216:	bf00      	nop

08012218 <uxr_read_delete_session_status>:
 8012218:	b510      	push	{r4, lr}
 801221a:	b084      	sub	sp, #16
 801221c:	4604      	mov	r4, r0
 801221e:	4608      	mov	r0, r1
 8012220:	a902      	add	r1, sp, #8
 8012222:	f001 f99d 	bl	8013560 <uxr_deserialize_STATUS_Payload>
 8012226:	88e3      	ldrh	r3, [r4, #6]
 8012228:	2b02      	cmp	r3, #2
 801222a:	d001      	beq.n	8012230 <uxr_read_delete_session_status+0x18>
 801222c:	b004      	add	sp, #16
 801222e:	bd10      	pop	{r4, pc}
 8012230:	f10d 000a 	add.w	r0, sp, #10
 8012234:	f006 fe74 	bl	8018f20 <uxr_object_id_from_raw>
 8012238:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801223c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8012240:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012244:	b29b      	uxth	r3, r3
 8012246:	2b02      	cmp	r3, #2
 8012248:	d1f0      	bne.n	801222c <uxr_read_delete_session_status+0x14>
 801224a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801224e:	7163      	strb	r3, [r4, #5]
 8012250:	e7ec      	b.n	801222c <uxr_read_delete_session_status+0x14>
 8012252:	bf00      	nop

08012254 <uxr_stamp_create_session_header>:
 8012254:	b510      	push	{r4, lr}
 8012256:	2208      	movs	r2, #8
 8012258:	b08a      	sub	sp, #40	@ 0x28
 801225a:	4604      	mov	r4, r0
 801225c:	eb0d 0002 	add.w	r0, sp, r2
 8012260:	f7fc fc82 	bl	800eb68 <ucdr_init_buffer>
 8012264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012268:	2300      	movs	r3, #0
 801226a:	a802      	add	r0, sp, #8
 801226c:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8012270:	9400      	str	r4, [sp, #0]
 8012272:	461a      	mov	r2, r3
 8012274:	f000 fa46 	bl	8012704 <uxr_serialize_message_header>
 8012278:	b00a      	add	sp, #40	@ 0x28
 801227a:	bd10      	pop	{r4, pc}

0801227c <uxr_stamp_session_header>:
 801227c:	b530      	push	{r4, r5, lr}
 801227e:	b08d      	sub	sp, #52	@ 0x34
 8012280:	4604      	mov	r4, r0
 8012282:	460d      	mov	r5, r1
 8012284:	4619      	mov	r1, r3
 8012286:	a804      	add	r0, sp, #16
 8012288:	9203      	str	r2, [sp, #12]
 801228a:	2208      	movs	r2, #8
 801228c:	f7fc fc6c 	bl	800eb68 <ucdr_init_buffer>
 8012290:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012294:	9b03      	ldr	r3, [sp, #12]
 8012296:	462a      	mov	r2, r5
 8012298:	a804      	add	r0, sp, #16
 801229a:	9400      	str	r4, [sp, #0]
 801229c:	f000 fa32 	bl	8012704 <uxr_serialize_message_header>
 80122a0:	b00d      	add	sp, #52	@ 0x34
 80122a2:	bd30      	pop	{r4, r5, pc}

080122a4 <uxr_read_session_header>:
 80122a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122a8:	4607      	mov	r7, r0
 80122aa:	b084      	sub	sp, #16
 80122ac:	4608      	mov	r0, r1
 80122ae:	460c      	mov	r4, r1
 80122b0:	4615      	mov	r5, r2
 80122b2:	461e      	mov	r6, r3
 80122b4:	f7fc fc8a 	bl	800ebcc <ucdr_buffer_remaining>
 80122b8:	2808      	cmp	r0, #8
 80122ba:	d803      	bhi.n	80122c4 <uxr_read_session_header+0x20>
 80122bc:	2000      	movs	r0, #0
 80122be:	b004      	add	sp, #16
 80122c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122c4:	f10d 080c 	add.w	r8, sp, #12
 80122c8:	4633      	mov	r3, r6
 80122ca:	462a      	mov	r2, r5
 80122cc:	4620      	mov	r0, r4
 80122ce:	f10d 010b 	add.w	r1, sp, #11
 80122d2:	f8cd 8000 	str.w	r8, [sp]
 80122d6:	f000 fa33 	bl	8012740 <uxr_deserialize_message_header>
 80122da:	783a      	ldrb	r2, [r7, #0]
 80122dc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80122e0:	4293      	cmp	r3, r2
 80122e2:	d1eb      	bne.n	80122bc <uxr_read_session_header+0x18>
 80122e4:	061b      	lsls	r3, r3, #24
 80122e6:	d41b      	bmi.n	8012320 <uxr_read_session_header+0x7c>
 80122e8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80122ec:	787b      	ldrb	r3, [r7, #1]
 80122ee:	429a      	cmp	r2, r3
 80122f0:	d003      	beq.n	80122fa <uxr_read_session_header+0x56>
 80122f2:	2001      	movs	r0, #1
 80122f4:	f080 0001 	eor.w	r0, r0, #1
 80122f8:	e7e1      	b.n	80122be <uxr_read_session_header+0x1a>
 80122fa:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80122fe:	1cb8      	adds	r0, r7, #2
 8012300:	78bb      	ldrb	r3, [r7, #2]
 8012302:	429a      	cmp	r2, r3
 8012304:	d1f5      	bne.n	80122f2 <uxr_read_session_header+0x4e>
 8012306:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801230a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801230e:	429a      	cmp	r2, r3
 8012310:	d1ef      	bne.n	80122f2 <uxr_read_session_header+0x4e>
 8012312:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8012316:	7843      	ldrb	r3, [r0, #1]
 8012318:	429a      	cmp	r2, r3
 801231a:	d1ea      	bne.n	80122f2 <uxr_read_session_header+0x4e>
 801231c:	2000      	movs	r0, #0
 801231e:	e7e9      	b.n	80122f4 <uxr_read_session_header+0x50>
 8012320:	2001      	movs	r0, #1
 8012322:	e7cc      	b.n	80122be <uxr_read_session_header+0x1a>

08012324 <uxr_session_header_offset>:
 8012324:	f990 3000 	ldrsb.w	r3, [r0]
 8012328:	2b00      	cmp	r3, #0
 801232a:	bfac      	ite	ge
 801232c:	2008      	movge	r0, #8
 801232e:	2004      	movlt	r0, #4
 8012330:	4770      	bx	lr
 8012332:	bf00      	nop

08012334 <uxr_init_base_object_request>:
 8012334:	b510      	push	{r4, lr}
 8012336:	b082      	sub	sp, #8
 8012338:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 801233c:	9101      	str	r1, [sp, #4]
 801233e:	88c3      	ldrh	r3, [r0, #6]
 8012340:	f1a3 010a 	sub.w	r1, r3, #10
 8012344:	b289      	uxth	r1, r1
 8012346:	42a1      	cmp	r1, r4
 8012348:	d80f      	bhi.n	801236a <uxr_init_base_object_request+0x36>
 801234a:	3301      	adds	r3, #1
 801234c:	b29c      	uxth	r4, r3
 801234e:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8012352:	b2db      	uxtb	r3, r3
 8012354:	80c4      	strh	r4, [r0, #6]
 8012356:	1c91      	adds	r1, r2, #2
 8012358:	9801      	ldr	r0, [sp, #4]
 801235a:	f882 c000 	strb.w	ip, [r2]
 801235e:	7053      	strb	r3, [r2, #1]
 8012360:	f006 fdf2 	bl	8018f48 <uxr_object_id_to_raw>
 8012364:	4620      	mov	r0, r4
 8012366:	b002      	add	sp, #8
 8012368:	bd10      	pop	{r4, pc}
 801236a:	230a      	movs	r3, #10
 801236c:	f04f 0c00 	mov.w	ip, #0
 8012370:	461c      	mov	r4, r3
 8012372:	e7ef      	b.n	8012354 <uxr_init_base_object_request+0x20>

08012374 <uxr_parse_base_object_request>:
 8012374:	b570      	push	{r4, r5, r6, lr}
 8012376:	4604      	mov	r4, r0
 8012378:	3002      	adds	r0, #2
 801237a:	460d      	mov	r5, r1
 801237c:	4616      	mov	r6, r2
 801237e:	f006 fdcf 	bl	8018f20 <uxr_object_id_from_raw>
 8012382:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8012386:	8028      	strh	r0, [r5, #0]
 8012388:	806b      	strh	r3, [r5, #2]
 801238a:	7822      	ldrb	r2, [r4, #0]
 801238c:	7863      	ldrb	r3, [r4, #1]
 801238e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012392:	8033      	strh	r3, [r6, #0]
 8012394:	bd70      	pop	{r4, r5, r6, pc}
 8012396:	bf00      	nop

08012398 <uxr_stream_id>:
 8012398:	2901      	cmp	r1, #1
 801239a:	4684      	mov	ip, r0
 801239c:	b500      	push	{lr}
 801239e:	b083      	sub	sp, #12
 80123a0:	d01f      	beq.n	80123e2 <uxr_stream_id+0x4a>
 80123a2:	2902      	cmp	r1, #2
 80123a4:	f04f 0e00 	mov.w	lr, #0
 80123a8:	d020      	beq.n	80123ec <uxr_stream_id+0x54>
 80123aa:	2300      	movs	r3, #0
 80123ac:	2000      	movs	r0, #0
 80123ae:	f36e 0307 	bfi	r3, lr, #0, #8
 80123b2:	f36c 230f 	bfi	r3, ip, #8, #8
 80123b6:	f361 4317 	bfi	r3, r1, #16, #8
 80123ba:	f362 631f 	bfi	r3, r2, #24, #8
 80123be:	fa5f fc83 	uxtb.w	ip, r3
 80123c2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80123c6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80123ca:	0e1b      	lsrs	r3, r3, #24
 80123cc:	f36c 0007 	bfi	r0, ip, #0, #8
 80123d0:	f361 200f 	bfi	r0, r1, #8, #8
 80123d4:	f362 4017 	bfi	r0, r2, #16, #8
 80123d8:	f363 601f 	bfi	r0, r3, #24, #8
 80123dc:	b003      	add	sp, #12
 80123de:	f85d fb04 	ldr.w	pc, [sp], #4
 80123e2:	f100 0e01 	add.w	lr, r0, #1
 80123e6:	fa5f fe8e 	uxtb.w	lr, lr
 80123ea:	e7de      	b.n	80123aa <uxr_stream_id+0x12>
 80123ec:	f080 0e80 	eor.w	lr, r0, #128	@ 0x80
 80123f0:	e7db      	b.n	80123aa <uxr_stream_id+0x12>
 80123f2:	bf00      	nop

080123f4 <uxr_stream_id_from_raw>:
 80123f4:	b082      	sub	sp, #8
 80123f6:	b130      	cbz	r0, 8012406 <uxr_stream_id_from_raw+0x12>
 80123f8:	0603      	lsls	r3, r0, #24
 80123fa:	d421      	bmi.n	8012440 <uxr_stream_id_from_raw+0x4c>
 80123fc:	1e42      	subs	r2, r0, #1
 80123fe:	f04f 0c01 	mov.w	ip, #1
 8012402:	b2d2      	uxtb	r2, r2
 8012404:	e001      	b.n	801240a <uxr_stream_id_from_raw+0x16>
 8012406:	4684      	mov	ip, r0
 8012408:	4602      	mov	r2, r0
 801240a:	2300      	movs	r3, #0
 801240c:	f360 0307 	bfi	r3, r0, #0, #8
 8012410:	2000      	movs	r0, #0
 8012412:	f362 230f 	bfi	r3, r2, #8, #8
 8012416:	f36c 4317 	bfi	r3, ip, #16, #8
 801241a:	f361 631f 	bfi	r3, r1, #24, #8
 801241e:	fa5f fc83 	uxtb.w	ip, r3
 8012422:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8012426:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801242a:	0e1b      	lsrs	r3, r3, #24
 801242c:	f36c 0007 	bfi	r0, ip, #0, #8
 8012430:	f361 200f 	bfi	r0, r1, #8, #8
 8012434:	f362 4017 	bfi	r0, r2, #16, #8
 8012438:	f363 601f 	bfi	r0, r3, #24, #8
 801243c:	b002      	add	sp, #8
 801243e:	4770      	bx	lr
 8012440:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8012444:	f04f 0c02 	mov.w	ip, #2
 8012448:	e7df      	b.n	801240a <uxr_stream_id_from_raw+0x16>
 801244a:	bf00      	nop

0801244c <uxr_init_stream_storage>:
 801244c:	2300      	movs	r3, #0
 801244e:	7403      	strb	r3, [r0, #16]
 8012450:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8012454:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8012458:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 801245c:	4770      	bx	lr
 801245e:	bf00      	nop

08012460 <uxr_reset_stream_storage>:
 8012460:	b570      	push	{r4, r5, r6, lr}
 8012462:	7c03      	ldrb	r3, [r0, #16]
 8012464:	4604      	mov	r4, r0
 8012466:	b14b      	cbz	r3, 801247c <uxr_reset_stream_storage+0x1c>
 8012468:	4606      	mov	r6, r0
 801246a:	2500      	movs	r5, #0
 801246c:	4630      	mov	r0, r6
 801246e:	3501      	adds	r5, #1
 8012470:	f006 fd82 	bl	8018f78 <uxr_reset_output_best_effort_stream>
 8012474:	7c23      	ldrb	r3, [r4, #16]
 8012476:	3610      	adds	r6, #16
 8012478:	42ab      	cmp	r3, r5
 801247a:	d8f7      	bhi.n	801246c <uxr_reset_stream_storage+0xc>
 801247c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012480:	b15b      	cbz	r3, 801249a <uxr_reset_stream_storage+0x3a>
 8012482:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012486:	2500      	movs	r5, #0
 8012488:	4630      	mov	r0, r6
 801248a:	3501      	adds	r5, #1
 801248c:	f006 fb4a 	bl	8018b24 <uxr_reset_input_best_effort_stream>
 8012490:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012494:	3602      	adds	r6, #2
 8012496:	42ab      	cmp	r3, r5
 8012498:	d8f6      	bhi.n	8012488 <uxr_reset_stream_storage+0x28>
 801249a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801249e:	b15b      	cbz	r3, 80124b8 <uxr_reset_stream_storage+0x58>
 80124a0:	f104 0618 	add.w	r6, r4, #24
 80124a4:	2500      	movs	r5, #0
 80124a6:	4630      	mov	r0, r6
 80124a8:	3501      	adds	r5, #1
 80124aa:	f006 fe11 	bl	80190d0 <uxr_reset_output_reliable_stream>
 80124ae:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80124b2:	3628      	adds	r6, #40	@ 0x28
 80124b4:	42ab      	cmp	r3, r5
 80124b6:	d8f6      	bhi.n	80124a6 <uxr_reset_stream_storage+0x46>
 80124b8:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80124bc:	b15b      	cbz	r3, 80124d6 <uxr_reset_stream_storage+0x76>
 80124be:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80124c2:	2500      	movs	r5, #0
 80124c4:	4630      	mov	r0, r6
 80124c6:	3501      	adds	r5, #1
 80124c8:	f006 fb98 	bl	8018bfc <uxr_reset_input_reliable_stream>
 80124cc:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80124d0:	3618      	adds	r6, #24
 80124d2:	42ab      	cmp	r3, r5
 80124d4:	d8f6      	bhi.n	80124c4 <uxr_reset_stream_storage+0x64>
 80124d6:	bd70      	pop	{r4, r5, r6, pc}

080124d8 <uxr_add_output_best_effort_buffer>:
 80124d8:	b510      	push	{r4, lr}
 80124da:	7c04      	ldrb	r4, [r0, #16]
 80124dc:	b082      	sub	sp, #8
 80124de:	f104 0c01 	add.w	ip, r4, #1
 80124e2:	f880 c010 	strb.w	ip, [r0, #16]
 80124e6:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80124ea:	f006 fd3b 	bl	8018f64 <uxr_init_output_best_effort_stream>
 80124ee:	2201      	movs	r2, #1
 80124f0:	4620      	mov	r0, r4
 80124f2:	4611      	mov	r1, r2
 80124f4:	b002      	add	sp, #8
 80124f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80124fa:	f7ff bf4d 	b.w	8012398 <uxr_stream_id>
 80124fe:	bf00      	nop

08012500 <uxr_add_output_reliable_buffer>:
 8012500:	b510      	push	{r4, lr}
 8012502:	b084      	sub	sp, #16
 8012504:	4684      	mov	ip, r0
 8012506:	2028      	movs	r0, #40	@ 0x28
 8012508:	f89d 4018 	ldrb.w	r4, [sp, #24]
 801250c:	9400      	str	r4, [sp, #0]
 801250e:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8012512:	fb00 c004 	mla	r0, r0, r4, ip
 8012516:	f104 0e01 	add.w	lr, r4, #1
 801251a:	3018      	adds	r0, #24
 801251c:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8012520:	f006 fda0 	bl	8019064 <uxr_init_output_reliable_stream>
 8012524:	2201      	movs	r2, #1
 8012526:	2102      	movs	r1, #2
 8012528:	4620      	mov	r0, r4
 801252a:	b004      	add	sp, #16
 801252c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012530:	f7ff bf32 	b.w	8012398 <uxr_stream_id>

08012534 <uxr_add_input_best_effort_buffer>:
 8012534:	b510      	push	{r4, lr}
 8012536:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 801253a:	b082      	sub	sp, #8
 801253c:	1c62      	adds	r2, r4, #1
 801253e:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8012542:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8012546:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801254a:	f006 fae7 	bl	8018b1c <uxr_init_input_best_effort_stream>
 801254e:	2200      	movs	r2, #0
 8012550:	2101      	movs	r1, #1
 8012552:	4620      	mov	r0, r4
 8012554:	b002      	add	sp, #8
 8012556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801255a:	f7ff bf1d 	b.w	8012398 <uxr_stream_id>
 801255e:	bf00      	nop

08012560 <uxr_add_input_reliable_buffer>:
 8012560:	b510      	push	{r4, lr}
 8012562:	b084      	sub	sp, #16
 8012564:	4684      	mov	ip, r0
 8012566:	2018      	movs	r0, #24
 8012568:	9c06      	ldr	r4, [sp, #24]
 801256a:	9400      	str	r4, [sp, #0]
 801256c:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8012570:	fb00 c004 	mla	r0, r0, r4, ip
 8012574:	f104 0e01 	add.w	lr, r4, #1
 8012578:	3048      	adds	r0, #72	@ 0x48
 801257a:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 801257e:	f006 fb17 	bl	8018bb0 <uxr_init_input_reliable_stream>
 8012582:	2200      	movs	r2, #0
 8012584:	2102      	movs	r1, #2
 8012586:	4620      	mov	r0, r4
 8012588:	b004      	add	sp, #16
 801258a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801258e:	f7ff bf03 	b.w	8012398 <uxr_stream_id>
 8012592:	bf00      	nop

08012594 <uxr_get_output_best_effort_stream>:
 8012594:	7c03      	ldrb	r3, [r0, #16]
 8012596:	428b      	cmp	r3, r1
 8012598:	bf8c      	ite	hi
 801259a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801259e:	2000      	movls	r0, #0
 80125a0:	4770      	bx	lr
 80125a2:	bf00      	nop

080125a4 <uxr_get_output_reliable_stream>:
 80125a4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80125a8:	428b      	cmp	r3, r1
 80125aa:	d904      	bls.n	80125b6 <uxr_get_output_reliable_stream+0x12>
 80125ac:	2328      	movs	r3, #40	@ 0x28
 80125ae:	fb03 0001 	mla	r0, r3, r1, r0
 80125b2:	3018      	adds	r0, #24
 80125b4:	4770      	bx	lr
 80125b6:	2000      	movs	r0, #0
 80125b8:	4770      	bx	lr
 80125ba:	bf00      	nop

080125bc <uxr_get_input_best_effort_stream>:
 80125bc:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80125c0:	428b      	cmp	r3, r1
 80125c2:	d903      	bls.n	80125cc <uxr_get_input_best_effort_stream+0x10>
 80125c4:	3121      	adds	r1, #33	@ 0x21
 80125c6:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80125ca:	4770      	bx	lr
 80125cc:	2000      	movs	r0, #0
 80125ce:	4770      	bx	lr

080125d0 <uxr_get_input_reliable_stream>:
 80125d0:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 80125d4:	428b      	cmp	r3, r1
 80125d6:	d904      	bls.n	80125e2 <uxr_get_input_reliable_stream+0x12>
 80125d8:	2318      	movs	r3, #24
 80125da:	fb03 0001 	mla	r0, r3, r1, r0
 80125de:	3048      	adds	r0, #72	@ 0x48
 80125e0:	4770      	bx	lr
 80125e2:	2000      	movs	r0, #0
 80125e4:	4770      	bx	lr
 80125e6:	bf00      	nop

080125e8 <uxr_output_streams_confirmed>:
 80125e8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80125ec:	b183      	cbz	r3, 8012610 <uxr_output_streams_confirmed+0x28>
 80125ee:	b570      	push	{r4, r5, r6, lr}
 80125f0:	4606      	mov	r6, r0
 80125f2:	f100 0518 	add.w	r5, r0, #24
 80125f6:	2400      	movs	r4, #0
 80125f8:	e000      	b.n	80125fc <uxr_output_streams_confirmed+0x14>
 80125fa:	b140      	cbz	r0, 801260e <uxr_output_streams_confirmed+0x26>
 80125fc:	4628      	mov	r0, r5
 80125fe:	3401      	adds	r4, #1
 8012600:	f006 ffda 	bl	80195b8 <uxr_is_output_up_to_date>
 8012604:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8012608:	3528      	adds	r5, #40	@ 0x28
 801260a:	42a3      	cmp	r3, r4
 801260c:	d8f5      	bhi.n	80125fa <uxr_output_streams_confirmed+0x12>
 801260e:	bd70      	pop	{r4, r5, r6, pc}
 8012610:	2001      	movs	r0, #1
 8012612:	4770      	bx	lr

08012614 <uxr_buffer_submessage_header>:
 8012614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012616:	460e      	mov	r6, r1
 8012618:	2104      	movs	r1, #4
 801261a:	4604      	mov	r4, r0
 801261c:	4615      	mov	r5, r2
 801261e:	461f      	mov	r7, r3
 8012620:	f7fc fabe 	bl	800eba0 <ucdr_align_to>
 8012624:	2301      	movs	r3, #1
 8012626:	4631      	mov	r1, r6
 8012628:	4620      	mov	r0, r4
 801262a:	ea47 0203 	orr.w	r2, r7, r3
 801262e:	7523      	strb	r3, [r4, #20]
 8012630:	462b      	mov	r3, r5
 8012632:	f000 f8a5 	bl	8012780 <uxr_serialize_submessage_header>
 8012636:	4620      	mov	r0, r4
 8012638:	f7fc fac8 	bl	800ebcc <ucdr_buffer_remaining>
 801263c:	42a8      	cmp	r0, r5
 801263e:	bf34      	ite	cc
 8012640:	2000      	movcc	r0, #0
 8012642:	2001      	movcs	r0, #1
 8012644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012646:	bf00      	nop

08012648 <uxr_read_submessage_header>:
 8012648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801264c:	4604      	mov	r4, r0
 801264e:	460d      	mov	r5, r1
 8012650:	2104      	movs	r1, #4
 8012652:	4616      	mov	r6, r2
 8012654:	4698      	mov	r8, r3
 8012656:	f7fc faa3 	bl	800eba0 <ucdr_align_to>
 801265a:	4620      	mov	r0, r4
 801265c:	f7fc fab6 	bl	800ebcc <ucdr_buffer_remaining>
 8012660:	2803      	cmp	r0, #3
 8012662:	bf8c      	ite	hi
 8012664:	2701      	movhi	r7, #1
 8012666:	2700      	movls	r7, #0
 8012668:	d802      	bhi.n	8012670 <uxr_read_submessage_header+0x28>
 801266a:	4638      	mov	r0, r7
 801266c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012670:	4633      	mov	r3, r6
 8012672:	4642      	mov	r2, r8
 8012674:	4620      	mov	r0, r4
 8012676:	4629      	mov	r1, r5
 8012678:	f000 f896 	bl	80127a8 <uxr_deserialize_submessage_header>
 801267c:	f898 3000 	ldrb.w	r3, [r8]
 8012680:	4638      	mov	r0, r7
 8012682:	f003 0201 	and.w	r2, r3, #1
 8012686:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 801268a:	f888 3000 	strb.w	r3, [r8]
 801268e:	7522      	strb	r2, [r4, #20]
 8012690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012694 <uxr_submessage_padding>:
 8012694:	f010 0003 	ands.w	r0, r0, #3
 8012698:	bf18      	it	ne
 801269a:	f1c0 0004 	rsbne	r0, r0, #4
 801269e:	4770      	bx	lr

080126a0 <uxr_millis>:
 80126a0:	b510      	push	{r4, lr}
 80126a2:	b084      	sub	sp, #16
 80126a4:	2001      	movs	r0, #1
 80126a6:	4669      	mov	r1, sp
 80126a8:	f7f0 fed6 	bl	8003458 <clock_gettime>
 80126ac:	4908      	ldr	r1, [pc, #32]	@ (80126d0 <uxr_millis+0x30>)
 80126ae:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80126b2:	fba0 0301 	umull	r0, r3, r0, r1
 80126b6:	1900      	adds	r0, r0, r4
 80126b8:	fb01 3102 	mla	r1, r1, r2, r3
 80126bc:	4a05      	ldr	r2, [pc, #20]	@ (80126d4 <uxr_millis+0x34>)
 80126be:	f04f 0300 	mov.w	r3, #0
 80126c2:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80126c6:	f7ed fe23 	bl	8000310 <__aeabi_ldivmod>
 80126ca:	b004      	add	sp, #16
 80126cc:	bd10      	pop	{r4, pc}
 80126ce:	bf00      	nop
 80126d0:	3b9aca00 	.word	0x3b9aca00
 80126d4:	000f4240 	.word	0x000f4240

080126d8 <uxr_nanos>:
 80126d8:	b510      	push	{r4, lr}
 80126da:	b084      	sub	sp, #16
 80126dc:	2001      	movs	r0, #1
 80126de:	4669      	mov	r1, sp
 80126e0:	f7f0 feba 	bl	8003458 <clock_gettime>
 80126e4:	4a06      	ldr	r2, [pc, #24]	@ (8012700 <uxr_nanos+0x28>)
 80126e6:	9800      	ldr	r0, [sp, #0]
 80126e8:	9902      	ldr	r1, [sp, #8]
 80126ea:	fba0 0302 	umull	r0, r3, r0, r2
 80126ee:	9c01      	ldr	r4, [sp, #4]
 80126f0:	1840      	adds	r0, r0, r1
 80126f2:	fb02 3304 	mla	r3, r2, r4, r3
 80126f6:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80126fa:	b004      	add	sp, #16
 80126fc:	bd10      	pop	{r4, pc}
 80126fe:	bf00      	nop
 8012700:	3b9aca00 	.word	0x3b9aca00

08012704 <uxr_serialize_message_header>:
 8012704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012706:	4616      	mov	r6, r2
 8012708:	b083      	sub	sp, #12
 801270a:	4604      	mov	r4, r0
 801270c:	460d      	mov	r5, r1
 801270e:	9301      	str	r3, [sp, #4]
 8012710:	9f08      	ldr	r7, [sp, #32]
 8012712:	f7fa fe1f 	bl	800d354 <ucdr_serialize_uint8_t>
 8012716:	4631      	mov	r1, r6
 8012718:	4620      	mov	r0, r4
 801271a:	f7fa fe1b 	bl	800d354 <ucdr_serialize_uint8_t>
 801271e:	9a01      	ldr	r2, [sp, #4]
 8012720:	2101      	movs	r1, #1
 8012722:	4620      	mov	r0, r4
 8012724:	f7fa fec2 	bl	800d4ac <ucdr_serialize_endian_uint16_t>
 8012728:	062b      	lsls	r3, r5, #24
 801272a:	d501      	bpl.n	8012730 <uxr_serialize_message_header+0x2c>
 801272c:	b003      	add	sp, #12
 801272e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012730:	2204      	movs	r2, #4
 8012732:	4639      	mov	r1, r7
 8012734:	4620      	mov	r0, r4
 8012736:	b003      	add	sp, #12
 8012738:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801273c:	f7fe bbb6 	b.w	8010eac <ucdr_serialize_array_uint8_t>

08012740 <uxr_deserialize_message_header>:
 8012740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012742:	4616      	mov	r6, r2
 8012744:	b083      	sub	sp, #12
 8012746:	4604      	mov	r4, r0
 8012748:	460d      	mov	r5, r1
 801274a:	9301      	str	r3, [sp, #4]
 801274c:	9f08      	ldr	r7, [sp, #32]
 801274e:	f7fa fe17 	bl	800d380 <ucdr_deserialize_uint8_t>
 8012752:	4631      	mov	r1, r6
 8012754:	4620      	mov	r0, r4
 8012756:	f7fa fe13 	bl	800d380 <ucdr_deserialize_uint8_t>
 801275a:	9a01      	ldr	r2, [sp, #4]
 801275c:	2101      	movs	r1, #1
 801275e:	4620      	mov	r0, r4
 8012760:	f7fa ff98 	bl	800d694 <ucdr_deserialize_endian_uint16_t>
 8012764:	f995 3000 	ldrsb.w	r3, [r5]
 8012768:	2b00      	cmp	r3, #0
 801276a:	da01      	bge.n	8012770 <uxr_deserialize_message_header+0x30>
 801276c:	b003      	add	sp, #12
 801276e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012770:	2204      	movs	r2, #4
 8012772:	4639      	mov	r1, r7
 8012774:	4620      	mov	r0, r4
 8012776:	b003      	add	sp, #12
 8012778:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801277c:	f7fe bbfa 	b.w	8010f74 <ucdr_deserialize_array_uint8_t>

08012780 <uxr_serialize_submessage_header>:
 8012780:	b530      	push	{r4, r5, lr}
 8012782:	4615      	mov	r5, r2
 8012784:	b083      	sub	sp, #12
 8012786:	4604      	mov	r4, r0
 8012788:	9301      	str	r3, [sp, #4]
 801278a:	f7fa fde3 	bl	800d354 <ucdr_serialize_uint8_t>
 801278e:	4629      	mov	r1, r5
 8012790:	4620      	mov	r0, r4
 8012792:	f7fa fddf 	bl	800d354 <ucdr_serialize_uint8_t>
 8012796:	9a01      	ldr	r2, [sp, #4]
 8012798:	2101      	movs	r1, #1
 801279a:	4620      	mov	r0, r4
 801279c:	b003      	add	sp, #12
 801279e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80127a2:	f7fa be83 	b.w	800d4ac <ucdr_serialize_endian_uint16_t>
 80127a6:	bf00      	nop

080127a8 <uxr_deserialize_submessage_header>:
 80127a8:	b530      	push	{r4, r5, lr}
 80127aa:	4615      	mov	r5, r2
 80127ac:	b083      	sub	sp, #12
 80127ae:	4604      	mov	r4, r0
 80127b0:	9301      	str	r3, [sp, #4]
 80127b2:	f7fa fde5 	bl	800d380 <ucdr_deserialize_uint8_t>
 80127b6:	4629      	mov	r1, r5
 80127b8:	4620      	mov	r0, r4
 80127ba:	f7fa fde1 	bl	800d380 <ucdr_deserialize_uint8_t>
 80127be:	9a01      	ldr	r2, [sp, #4]
 80127c0:	2101      	movs	r1, #1
 80127c2:	4620      	mov	r0, r4
 80127c4:	b003      	add	sp, #12
 80127c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80127ca:	f7fa bf63 	b.w	800d694 <ucdr_deserialize_endian_uint16_t>
 80127ce:	bf00      	nop

080127d0 <uxr_serialize_CLIENT_Representation>:
 80127d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80127d4:	2204      	movs	r2, #4
 80127d6:	460e      	mov	r6, r1
 80127d8:	4605      	mov	r5, r0
 80127da:	f7fe fb67 	bl	8010eac <ucdr_serialize_array_uint8_t>
 80127de:	4607      	mov	r7, r0
 80127e0:	2202      	movs	r2, #2
 80127e2:	1d31      	adds	r1, r6, #4
 80127e4:	4628      	mov	r0, r5
 80127e6:	f7fe fb61 	bl	8010eac <ucdr_serialize_array_uint8_t>
 80127ea:	4038      	ands	r0, r7
 80127ec:	2202      	movs	r2, #2
 80127ee:	1db1      	adds	r1, r6, #6
 80127f0:	b2c7      	uxtb	r7, r0
 80127f2:	4628      	mov	r0, r5
 80127f4:	f7fe fb5a 	bl	8010eac <ucdr_serialize_array_uint8_t>
 80127f8:	2204      	movs	r2, #4
 80127fa:	4007      	ands	r7, r0
 80127fc:	f106 0108 	add.w	r1, r6, #8
 8012800:	4628      	mov	r0, r5
 8012802:	f7fe fb53 	bl	8010eac <ucdr_serialize_array_uint8_t>
 8012806:	4007      	ands	r7, r0
 8012808:	7b31      	ldrb	r1, [r6, #12]
 801280a:	4628      	mov	r0, r5
 801280c:	f7fa fda2 	bl	800d354 <ucdr_serialize_uint8_t>
 8012810:	7b71      	ldrb	r1, [r6, #13]
 8012812:	4007      	ands	r7, r0
 8012814:	4628      	mov	r0, r5
 8012816:	f7fa fd6f 	bl	800d2f8 <ucdr_serialize_bool>
 801281a:	7b73      	ldrb	r3, [r6, #13]
 801281c:	ea07 0800 	and.w	r8, r7, r0
 8012820:	b93b      	cbnz	r3, 8012832 <uxr_serialize_CLIENT_Representation+0x62>
 8012822:	8bb1      	ldrh	r1, [r6, #28]
 8012824:	4628      	mov	r0, r5
 8012826:	f7fa fdc1 	bl	800d3ac <ucdr_serialize_uint16_t>
 801282a:	ea08 0000 	and.w	r0, r8, r0
 801282e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012832:	6931      	ldr	r1, [r6, #16]
 8012834:	4628      	mov	r0, r5
 8012836:	f7fa ffa3 	bl	800d780 <ucdr_serialize_uint32_t>
 801283a:	6933      	ldr	r3, [r6, #16]
 801283c:	b1e3      	cbz	r3, 8012878 <uxr_serialize_CLIENT_Representation+0xa8>
 801283e:	b1c0      	cbz	r0, 8012872 <uxr_serialize_CLIENT_Representation+0xa2>
 8012840:	4637      	mov	r7, r6
 8012842:	f04f 0900 	mov.w	r9, #0
 8012846:	e000      	b.n	801284a <uxr_serialize_CLIENT_Representation+0x7a>
 8012848:	b19c      	cbz	r4, 8012872 <uxr_serialize_CLIENT_Representation+0xa2>
 801284a:	6979      	ldr	r1, [r7, #20]
 801284c:	4628      	mov	r0, r5
 801284e:	f005 fe8d 	bl	801856c <ucdr_serialize_string>
 8012852:	69b9      	ldr	r1, [r7, #24]
 8012854:	4604      	mov	r4, r0
 8012856:	4628      	mov	r0, r5
 8012858:	f005 fe88 	bl	801856c <ucdr_serialize_string>
 801285c:	f109 0901 	add.w	r9, r9, #1
 8012860:	6933      	ldr	r3, [r6, #16]
 8012862:	4004      	ands	r4, r0
 8012864:	3708      	adds	r7, #8
 8012866:	4599      	cmp	r9, r3
 8012868:	b2e4      	uxtb	r4, r4
 801286a:	d3ed      	bcc.n	8012848 <uxr_serialize_CLIENT_Representation+0x78>
 801286c:	ea08 0804 	and.w	r8, r8, r4
 8012870:	e7d7      	b.n	8012822 <uxr_serialize_CLIENT_Representation+0x52>
 8012872:	f04f 0800 	mov.w	r8, #0
 8012876:	e7d4      	b.n	8012822 <uxr_serialize_CLIENT_Representation+0x52>
 8012878:	ea08 0800 	and.w	r8, r8, r0
 801287c:	e7d1      	b.n	8012822 <uxr_serialize_CLIENT_Representation+0x52>
 801287e:	bf00      	nop

08012880 <uxr_deserialize_CLIENT_Representation>:
 8012880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012884:	2204      	movs	r2, #4
 8012886:	460c      	mov	r4, r1
 8012888:	4605      	mov	r5, r0
 801288a:	f7fe fb73 	bl	8010f74 <ucdr_deserialize_array_uint8_t>
 801288e:	4607      	mov	r7, r0
 8012890:	2202      	movs	r2, #2
 8012892:	1d21      	adds	r1, r4, #4
 8012894:	4628      	mov	r0, r5
 8012896:	f7fe fb6d 	bl	8010f74 <ucdr_deserialize_array_uint8_t>
 801289a:	4038      	ands	r0, r7
 801289c:	2202      	movs	r2, #2
 801289e:	1da1      	adds	r1, r4, #6
 80128a0:	b2c6      	uxtb	r6, r0
 80128a2:	4628      	mov	r0, r5
 80128a4:	f7fe fb66 	bl	8010f74 <ucdr_deserialize_array_uint8_t>
 80128a8:	2204      	movs	r2, #4
 80128aa:	4006      	ands	r6, r0
 80128ac:	f104 0108 	add.w	r1, r4, #8
 80128b0:	4628      	mov	r0, r5
 80128b2:	f7fe fb5f 	bl	8010f74 <ucdr_deserialize_array_uint8_t>
 80128b6:	4006      	ands	r6, r0
 80128b8:	f104 010c 	add.w	r1, r4, #12
 80128bc:	4628      	mov	r0, r5
 80128be:	f7fa fd5f 	bl	800d380 <ucdr_deserialize_uint8_t>
 80128c2:	f104 010d 	add.w	r1, r4, #13
 80128c6:	ea06 0700 	and.w	r7, r6, r0
 80128ca:	4628      	mov	r0, r5
 80128cc:	f7fa fd2a 	bl	800d324 <ucdr_deserialize_bool>
 80128d0:	7b63      	ldrb	r3, [r4, #13]
 80128d2:	4007      	ands	r7, r0
 80128d4:	b93b      	cbnz	r3, 80128e6 <uxr_deserialize_CLIENT_Representation+0x66>
 80128d6:	f104 011c 	add.w	r1, r4, #28
 80128da:	4628      	mov	r0, r5
 80128dc:	f7fa fe66 	bl	800d5ac <ucdr_deserialize_uint16_t>
 80128e0:	4038      	ands	r0, r7
 80128e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128e6:	f104 0110 	add.w	r1, r4, #16
 80128ea:	4628      	mov	r0, r5
 80128ec:	f7fb f878 	bl	800d9e0 <ucdr_deserialize_uint32_t>
 80128f0:	6923      	ldr	r3, [r4, #16]
 80128f2:	2b01      	cmp	r3, #1
 80128f4:	d903      	bls.n	80128fe <uxr_deserialize_CLIENT_Representation+0x7e>
 80128f6:	2301      	movs	r3, #1
 80128f8:	2700      	movs	r7, #0
 80128fa:	75ab      	strb	r3, [r5, #22]
 80128fc:	e7eb      	b.n	80128d6 <uxr_deserialize_CLIENT_Representation+0x56>
 80128fe:	b30b      	cbz	r3, 8012944 <uxr_deserialize_CLIENT_Representation+0xc4>
 8012900:	b1f0      	cbz	r0, 8012940 <uxr_deserialize_CLIENT_Representation+0xc0>
 8012902:	46a0      	mov	r8, r4
 8012904:	f04f 0900 	mov.w	r9, #0
 8012908:	e000      	b.n	801290c <uxr_deserialize_CLIENT_Representation+0x8c>
 801290a:	b1ce      	cbz	r6, 8012940 <uxr_deserialize_CLIENT_Representation+0xc0>
 801290c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8012910:	f108 0808 	add.w	r8, r8, #8
 8012914:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012918:	4628      	mov	r0, r5
 801291a:	f005 fe37 	bl	801858c <ucdr_deserialize_string>
 801291e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012922:	4606      	mov	r6, r0
 8012924:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012928:	4628      	mov	r0, r5
 801292a:	f109 0901 	add.w	r9, r9, #1
 801292e:	f005 fe2d 	bl	801858c <ucdr_deserialize_string>
 8012932:	6923      	ldr	r3, [r4, #16]
 8012934:	4006      	ands	r6, r0
 8012936:	4599      	cmp	r9, r3
 8012938:	b2f6      	uxtb	r6, r6
 801293a:	d3e6      	bcc.n	801290a <uxr_deserialize_CLIENT_Representation+0x8a>
 801293c:	4037      	ands	r7, r6
 801293e:	e7ca      	b.n	80128d6 <uxr_deserialize_CLIENT_Representation+0x56>
 8012940:	2700      	movs	r7, #0
 8012942:	e7c8      	b.n	80128d6 <uxr_deserialize_CLIENT_Representation+0x56>
 8012944:	4007      	ands	r7, r0
 8012946:	e7c6      	b.n	80128d6 <uxr_deserialize_CLIENT_Representation+0x56>

08012948 <uxr_serialize_AGENT_Representation>:
 8012948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801294c:	2204      	movs	r2, #4
 801294e:	460f      	mov	r7, r1
 8012950:	4605      	mov	r5, r0
 8012952:	f7fe faab 	bl	8010eac <ucdr_serialize_array_uint8_t>
 8012956:	4604      	mov	r4, r0
 8012958:	2202      	movs	r2, #2
 801295a:	1d39      	adds	r1, r7, #4
 801295c:	4628      	mov	r0, r5
 801295e:	f7fe faa5 	bl	8010eac <ucdr_serialize_array_uint8_t>
 8012962:	4020      	ands	r0, r4
 8012964:	2202      	movs	r2, #2
 8012966:	1db9      	adds	r1, r7, #6
 8012968:	b2c4      	uxtb	r4, r0
 801296a:	4628      	mov	r0, r5
 801296c:	f7fe fa9e 	bl	8010eac <ucdr_serialize_array_uint8_t>
 8012970:	7a39      	ldrb	r1, [r7, #8]
 8012972:	4004      	ands	r4, r0
 8012974:	4628      	mov	r0, r5
 8012976:	f7fa fcbf 	bl	800d2f8 <ucdr_serialize_bool>
 801297a:	7a3b      	ldrb	r3, [r7, #8]
 801297c:	ea00 0804 	and.w	r8, r0, r4
 8012980:	b913      	cbnz	r3, 8012988 <uxr_serialize_AGENT_Representation+0x40>
 8012982:	4640      	mov	r0, r8
 8012984:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012988:	68f9      	ldr	r1, [r7, #12]
 801298a:	4628      	mov	r0, r5
 801298c:	f7fa fef8 	bl	800d780 <ucdr_serialize_uint32_t>
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	b303      	cbz	r3, 80129d6 <uxr_serialize_AGENT_Representation+0x8e>
 8012994:	b1d0      	cbz	r0, 80129cc <uxr_serialize_AGENT_Representation+0x84>
 8012996:	463e      	mov	r6, r7
 8012998:	f04f 0900 	mov.w	r9, #0
 801299c:	e000      	b.n	80129a0 <uxr_serialize_AGENT_Representation+0x58>
 801299e:	b1ac      	cbz	r4, 80129cc <uxr_serialize_AGENT_Representation+0x84>
 80129a0:	6931      	ldr	r1, [r6, #16]
 80129a2:	4628      	mov	r0, r5
 80129a4:	f005 fde2 	bl	801856c <ucdr_serialize_string>
 80129a8:	6971      	ldr	r1, [r6, #20]
 80129aa:	4604      	mov	r4, r0
 80129ac:	4628      	mov	r0, r5
 80129ae:	f005 fddd 	bl	801856c <ucdr_serialize_string>
 80129b2:	f109 0901 	add.w	r9, r9, #1
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	4004      	ands	r4, r0
 80129ba:	3608      	adds	r6, #8
 80129bc:	4599      	cmp	r9, r3
 80129be:	b2e4      	uxtb	r4, r4
 80129c0:	d3ed      	bcc.n	801299e <uxr_serialize_AGENT_Representation+0x56>
 80129c2:	ea08 0804 	and.w	r8, r8, r4
 80129c6:	4640      	mov	r0, r8
 80129c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80129cc:	f04f 0800 	mov.w	r8, #0
 80129d0:	4640      	mov	r0, r8
 80129d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80129d6:	ea08 0800 	and.w	r8, r8, r0
 80129da:	e7d2      	b.n	8012982 <uxr_serialize_AGENT_Representation+0x3a>

080129dc <uxr_serialize_DATAWRITER_Representation>:
 80129dc:	b570      	push	{r4, r5, r6, lr}
 80129de:	460d      	mov	r5, r1
 80129e0:	7809      	ldrb	r1, [r1, #0]
 80129e2:	4606      	mov	r6, r0
 80129e4:	f7fa fcb6 	bl	800d354 <ucdr_serialize_uint8_t>
 80129e8:	4604      	mov	r4, r0
 80129ea:	b130      	cbz	r0, 80129fa <uxr_serialize_DATAWRITER_Representation+0x1e>
 80129ec:	782b      	ldrb	r3, [r5, #0]
 80129ee:	2b02      	cmp	r3, #2
 80129f0:	d00c      	beq.n	8012a0c <uxr_serialize_DATAWRITER_Representation+0x30>
 80129f2:	2b03      	cmp	r3, #3
 80129f4:	d010      	beq.n	8012a18 <uxr_serialize_DATAWRITER_Representation+0x3c>
 80129f6:	2b01      	cmp	r3, #1
 80129f8:	d008      	beq.n	8012a0c <uxr_serialize_DATAWRITER_Representation+0x30>
 80129fa:	2202      	movs	r2, #2
 80129fc:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8012a00:	4630      	mov	r0, r6
 8012a02:	f7fe fa53 	bl	8010eac <ucdr_serialize_array_uint8_t>
 8012a06:	4020      	ands	r0, r4
 8012a08:	b2c0      	uxtb	r0, r0
 8012a0a:	bd70      	pop	{r4, r5, r6, pc}
 8012a0c:	6869      	ldr	r1, [r5, #4]
 8012a0e:	4630      	mov	r0, r6
 8012a10:	f005 fdac 	bl	801856c <ucdr_serialize_string>
 8012a14:	4604      	mov	r4, r0
 8012a16:	e7f0      	b.n	80129fa <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012a18:	4629      	mov	r1, r5
 8012a1a:	4630      	mov	r0, r6
 8012a1c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8012a20:	3104      	adds	r1, #4
 8012a22:	f7fe fbe3 	bl	80111ec <ucdr_serialize_sequence_uint8_t>
 8012a26:	4604      	mov	r4, r0
 8012a28:	e7e7      	b.n	80129fa <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012a2a:	bf00      	nop

08012a2c <uxr_serialize_ObjectVariant.part.0>:
 8012a2c:	b570      	push	{r4, r5, r6, lr}
 8012a2e:	780b      	ldrb	r3, [r1, #0]
 8012a30:	460c      	mov	r4, r1
 8012a32:	4605      	mov	r5, r0
 8012a34:	3b01      	subs	r3, #1
 8012a36:	2b0d      	cmp	r3, #13
 8012a38:	d854      	bhi.n	8012ae4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8012a3a:	e8df f003 	tbb	[pc, r3]
 8012a3e:	0730      	.short	0x0730
 8012a40:	07071b1b 	.word	0x07071b1b
 8012a44:	0c530707 	.word	0x0c530707
 8012a48:	494e0c0c 	.word	0x494e0c0c
 8012a4c:	3104      	adds	r1, #4
 8012a4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012a52:	f7ff bfc3 	b.w	80129dc <uxr_serialize_DATAWRITER_Representation>
 8012a56:	7909      	ldrb	r1, [r1, #4]
 8012a58:	f7fa fc7c 	bl	800d354 <ucdr_serialize_uint8_t>
 8012a5c:	b1e8      	cbz	r0, 8012a9a <uxr_serialize_ObjectVariant.part.0+0x6e>
 8012a5e:	7923      	ldrb	r3, [r4, #4]
 8012a60:	2b01      	cmp	r3, #1
 8012a62:	d001      	beq.n	8012a68 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8012a64:	2b02      	cmp	r3, #2
 8012a66:	d13d      	bne.n	8012ae4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8012a68:	68a1      	ldr	r1, [r4, #8]
 8012a6a:	4628      	mov	r0, r5
 8012a6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012a70:	f005 bd7c 	b.w	801856c <ucdr_serialize_string>
 8012a74:	7909      	ldrb	r1, [r1, #4]
 8012a76:	f7fa fc6d 	bl	800d354 <ucdr_serialize_uint8_t>
 8012a7a:	4606      	mov	r6, r0
 8012a7c:	b120      	cbz	r0, 8012a88 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012a7e:	7923      	ldrb	r3, [r4, #4]
 8012a80:	2b02      	cmp	r3, #2
 8012a82:	d039      	beq.n	8012af8 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8012a84:	2b03      	cmp	r3, #3
 8012a86:	d02f      	beq.n	8012ae8 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8012a88:	2202      	movs	r2, #2
 8012a8a:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8012a8e:	4628      	mov	r0, r5
 8012a90:	f7fe fa0c 	bl	8010eac <ucdr_serialize_array_uint8_t>
 8012a94:	4030      	ands	r0, r6
 8012a96:	b2c0      	uxtb	r0, r0
 8012a98:	bd70      	pop	{r4, r5, r6, pc}
 8012a9a:	2000      	movs	r0, #0
 8012a9c:	bd70      	pop	{r4, r5, r6, pc}
 8012a9e:	7909      	ldrb	r1, [r1, #4]
 8012aa0:	f7fa fc58 	bl	800d354 <ucdr_serialize_uint8_t>
 8012aa4:	4606      	mov	r6, r0
 8012aa6:	b158      	cbz	r0, 8012ac0 <uxr_serialize_ObjectVariant.part.0+0x94>
 8012aa8:	7923      	ldrb	r3, [r4, #4]
 8012aaa:	2b02      	cmp	r3, #2
 8012aac:	d003      	beq.n	8012ab6 <uxr_serialize_ObjectVariant.part.0+0x8a>
 8012aae:	2b03      	cmp	r3, #3
 8012ab0:	d028      	beq.n	8012b04 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8012ab2:	2b01      	cmp	r3, #1
 8012ab4:	d104      	bne.n	8012ac0 <uxr_serialize_ObjectVariant.part.0+0x94>
 8012ab6:	68a1      	ldr	r1, [r4, #8]
 8012ab8:	4628      	mov	r0, r5
 8012aba:	f005 fd57 	bl	801856c <ucdr_serialize_string>
 8012abe:	4606      	mov	r6, r0
 8012ac0:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8012ac4:	4628      	mov	r0, r5
 8012ac6:	f7fb f981 	bl	800ddcc <ucdr_serialize_int16_t>
 8012aca:	4030      	ands	r0, r6
 8012acc:	b2c0      	uxtb	r0, r0
 8012ace:	bd70      	pop	{r4, r5, r6, pc}
 8012ad0:	3104      	adds	r1, #4
 8012ad2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012ad6:	f7ff be7b 	b.w	80127d0 <uxr_serialize_CLIENT_Representation>
 8012ada:	3104      	adds	r1, #4
 8012adc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012ae0:	f7ff bf32 	b.w	8012948 <uxr_serialize_AGENT_Representation>
 8012ae4:	2001      	movs	r0, #1
 8012ae6:	bd70      	pop	{r4, r5, r6, pc}
 8012ae8:	68a2      	ldr	r2, [r4, #8]
 8012aea:	f104 010c 	add.w	r1, r4, #12
 8012aee:	4628      	mov	r0, r5
 8012af0:	f7fe fb7c 	bl	80111ec <ucdr_serialize_sequence_uint8_t>
 8012af4:	4606      	mov	r6, r0
 8012af6:	e7c7      	b.n	8012a88 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012af8:	68a1      	ldr	r1, [r4, #8]
 8012afa:	4628      	mov	r0, r5
 8012afc:	f005 fd36 	bl	801856c <ucdr_serialize_string>
 8012b00:	4606      	mov	r6, r0
 8012b02:	e7c1      	b.n	8012a88 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012b04:	68a2      	ldr	r2, [r4, #8]
 8012b06:	f104 010c 	add.w	r1, r4, #12
 8012b0a:	4628      	mov	r0, r5
 8012b0c:	f7fe fb6e 	bl	80111ec <ucdr_serialize_sequence_uint8_t>
 8012b10:	4606      	mov	r6, r0
 8012b12:	e7d5      	b.n	8012ac0 <uxr_serialize_ObjectVariant.part.0+0x94>

08012b14 <uxr_deserialize_DATAWRITER_Representation>:
 8012b14:	b570      	push	{r4, r5, r6, lr}
 8012b16:	4606      	mov	r6, r0
 8012b18:	460d      	mov	r5, r1
 8012b1a:	f7fa fc31 	bl	800d380 <ucdr_deserialize_uint8_t>
 8012b1e:	4604      	mov	r4, r0
 8012b20:	b130      	cbz	r0, 8012b30 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012b22:	782b      	ldrb	r3, [r5, #0]
 8012b24:	2b02      	cmp	r3, #2
 8012b26:	d00c      	beq.n	8012b42 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8012b28:	2b03      	cmp	r3, #3
 8012b2a:	d012      	beq.n	8012b52 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8012b2c:	2b01      	cmp	r3, #1
 8012b2e:	d008      	beq.n	8012b42 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8012b30:	2202      	movs	r2, #2
 8012b32:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8012b36:	4630      	mov	r0, r6
 8012b38:	f7fe fa1c 	bl	8010f74 <ucdr_deserialize_array_uint8_t>
 8012b3c:	4020      	ands	r0, r4
 8012b3e:	b2c0      	uxtb	r0, r0
 8012b40:	bd70      	pop	{r4, r5, r6, pc}
 8012b42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012b46:	6869      	ldr	r1, [r5, #4]
 8012b48:	4630      	mov	r0, r6
 8012b4a:	f005 fd1f 	bl	801858c <ucdr_deserialize_string>
 8012b4e:	4604      	mov	r4, r0
 8012b50:	e7ee      	b.n	8012b30 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012b52:	1d2b      	adds	r3, r5, #4
 8012b54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012b58:	f105 0108 	add.w	r1, r5, #8
 8012b5c:	4630      	mov	r0, r6
 8012b5e:	f7fe fb57 	bl	8011210 <ucdr_deserialize_sequence_uint8_t>
 8012b62:	4604      	mov	r4, r0
 8012b64:	e7e4      	b.n	8012b30 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012b66:	bf00      	nop

08012b68 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8012b68:	b570      	push	{r4, r5, r6, lr}
 8012b6a:	460d      	mov	r5, r1
 8012b6c:	7809      	ldrb	r1, [r1, #0]
 8012b6e:	4606      	mov	r6, r0
 8012b70:	f7fa fbc2 	bl	800d2f8 <ucdr_serialize_bool>
 8012b74:	782b      	ldrb	r3, [r5, #0]
 8012b76:	4604      	mov	r4, r0
 8012b78:	b94b      	cbnz	r3, 8012b8e <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8012b7a:	7a29      	ldrb	r1, [r5, #8]
 8012b7c:	4630      	mov	r0, r6
 8012b7e:	f7fa fbbb 	bl	800d2f8 <ucdr_serialize_bool>
 8012b82:	7a2b      	ldrb	r3, [r5, #8]
 8012b84:	4004      	ands	r4, r0
 8012b86:	b2e4      	uxtb	r4, r4
 8012b88:	b943      	cbnz	r3, 8012b9c <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8012b8a:	4620      	mov	r0, r4
 8012b8c:	bd70      	pop	{r4, r5, r6, pc}
 8012b8e:	6869      	ldr	r1, [r5, #4]
 8012b90:	4630      	mov	r0, r6
 8012b92:	f005 fceb 	bl	801856c <ucdr_serialize_string>
 8012b96:	4004      	ands	r4, r0
 8012b98:	b2e4      	uxtb	r4, r4
 8012b9a:	e7ee      	b.n	8012b7a <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8012b9c:	68e9      	ldr	r1, [r5, #12]
 8012b9e:	4630      	mov	r0, r6
 8012ba0:	f005 fce4 	bl	801856c <ucdr_serialize_string>
 8012ba4:	4004      	ands	r4, r0
 8012ba6:	4620      	mov	r0, r4
 8012ba8:	bd70      	pop	{r4, r5, r6, pc}
 8012baa:	bf00      	nop

08012bac <uxr_serialize_OBJK_Topic_Binary>:
 8012bac:	b570      	push	{r4, r5, r6, lr}
 8012bae:	460d      	mov	r5, r1
 8012bb0:	4606      	mov	r6, r0
 8012bb2:	6809      	ldr	r1, [r1, #0]
 8012bb4:	f005 fcda 	bl	801856c <ucdr_serialize_string>
 8012bb8:	4604      	mov	r4, r0
 8012bba:	7929      	ldrb	r1, [r5, #4]
 8012bbc:	4630      	mov	r0, r6
 8012bbe:	f7fa fb9b 	bl	800d2f8 <ucdr_serialize_bool>
 8012bc2:	792b      	ldrb	r3, [r5, #4]
 8012bc4:	4004      	ands	r4, r0
 8012bc6:	b2e4      	uxtb	r4, r4
 8012bc8:	b943      	cbnz	r3, 8012bdc <uxr_serialize_OBJK_Topic_Binary+0x30>
 8012bca:	7b29      	ldrb	r1, [r5, #12]
 8012bcc:	4630      	mov	r0, r6
 8012bce:	f7fa fb93 	bl	800d2f8 <ucdr_serialize_bool>
 8012bd2:	7b2b      	ldrb	r3, [r5, #12]
 8012bd4:	4004      	ands	r4, r0
 8012bd6:	b93b      	cbnz	r3, 8012be8 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8012bd8:	4620      	mov	r0, r4
 8012bda:	bd70      	pop	{r4, r5, r6, pc}
 8012bdc:	68a9      	ldr	r1, [r5, #8]
 8012bde:	4630      	mov	r0, r6
 8012be0:	f005 fcc4 	bl	801856c <ucdr_serialize_string>
 8012be4:	4004      	ands	r4, r0
 8012be6:	e7f0      	b.n	8012bca <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8012be8:	6929      	ldr	r1, [r5, #16]
 8012bea:	4630      	mov	r0, r6
 8012bec:	f005 fcbe 	bl	801856c <ucdr_serialize_string>
 8012bf0:	4004      	ands	r4, r0
 8012bf2:	b2e4      	uxtb	r4, r4
 8012bf4:	4620      	mov	r0, r4
 8012bf6:	bd70      	pop	{r4, r5, r6, pc}

08012bf8 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8012bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bfc:	460c      	mov	r4, r1
 8012bfe:	7809      	ldrb	r1, [r1, #0]
 8012c00:	4606      	mov	r6, r0
 8012c02:	f7fa fb79 	bl	800d2f8 <ucdr_serialize_bool>
 8012c06:	7823      	ldrb	r3, [r4, #0]
 8012c08:	4605      	mov	r5, r0
 8012c0a:	b96b      	cbnz	r3, 8012c28 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8012c0c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8012c10:	4630      	mov	r0, r6
 8012c12:	f7fa fb71 	bl	800d2f8 <ucdr_serialize_bool>
 8012c16:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8012c1a:	4005      	ands	r5, r0
 8012c1c:	b2ed      	uxtb	r5, r5
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d169      	bne.n	8012cf6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8012c22:	4628      	mov	r0, r5
 8012c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c28:	6861      	ldr	r1, [r4, #4]
 8012c2a:	4630      	mov	r0, r6
 8012c2c:	f7fa fda8 	bl	800d780 <ucdr_serialize_uint32_t>
 8012c30:	6863      	ldr	r3, [r4, #4]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d06b      	beq.n	8012d0e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8012c36:	2800      	cmp	r0, #0
 8012c38:	d067      	beq.n	8012d0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012c3a:	68a1      	ldr	r1, [r4, #8]
 8012c3c:	4630      	mov	r0, r6
 8012c3e:	f005 fc95 	bl	801856c <ucdr_serialize_string>
 8012c42:	6863      	ldr	r3, [r4, #4]
 8012c44:	2b01      	cmp	r3, #1
 8012c46:	d953      	bls.n	8012cf0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012c48:	2800      	cmp	r0, #0
 8012c4a:	d05e      	beq.n	8012d0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012c4c:	68e1      	ldr	r1, [r4, #12]
 8012c4e:	4630      	mov	r0, r6
 8012c50:	f005 fc8c 	bl	801856c <ucdr_serialize_string>
 8012c54:	6863      	ldr	r3, [r4, #4]
 8012c56:	2b02      	cmp	r3, #2
 8012c58:	d94a      	bls.n	8012cf0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012c5a:	2800      	cmp	r0, #0
 8012c5c:	d055      	beq.n	8012d0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012c5e:	6921      	ldr	r1, [r4, #16]
 8012c60:	4630      	mov	r0, r6
 8012c62:	f005 fc83 	bl	801856c <ucdr_serialize_string>
 8012c66:	6863      	ldr	r3, [r4, #4]
 8012c68:	2b03      	cmp	r3, #3
 8012c6a:	d941      	bls.n	8012cf0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012c6c:	2800      	cmp	r0, #0
 8012c6e:	d04c      	beq.n	8012d0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012c70:	6961      	ldr	r1, [r4, #20]
 8012c72:	4630      	mov	r0, r6
 8012c74:	f005 fc7a 	bl	801856c <ucdr_serialize_string>
 8012c78:	6863      	ldr	r3, [r4, #4]
 8012c7a:	2b04      	cmp	r3, #4
 8012c7c:	d938      	bls.n	8012cf0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012c7e:	2800      	cmp	r0, #0
 8012c80:	d043      	beq.n	8012d0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012c82:	69a1      	ldr	r1, [r4, #24]
 8012c84:	4630      	mov	r0, r6
 8012c86:	f005 fc71 	bl	801856c <ucdr_serialize_string>
 8012c8a:	6863      	ldr	r3, [r4, #4]
 8012c8c:	2b05      	cmp	r3, #5
 8012c8e:	d92f      	bls.n	8012cf0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012c90:	2800      	cmp	r0, #0
 8012c92:	d03a      	beq.n	8012d0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012c94:	69e1      	ldr	r1, [r4, #28]
 8012c96:	4630      	mov	r0, r6
 8012c98:	f005 fc68 	bl	801856c <ucdr_serialize_string>
 8012c9c:	6863      	ldr	r3, [r4, #4]
 8012c9e:	2b06      	cmp	r3, #6
 8012ca0:	d926      	bls.n	8012cf0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012ca2:	b390      	cbz	r0, 8012d0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012ca4:	6a21      	ldr	r1, [r4, #32]
 8012ca6:	4630      	mov	r0, r6
 8012ca8:	f005 fc60 	bl	801856c <ucdr_serialize_string>
 8012cac:	6863      	ldr	r3, [r4, #4]
 8012cae:	2b07      	cmp	r3, #7
 8012cb0:	d91e      	bls.n	8012cf0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012cb2:	b350      	cbz	r0, 8012d0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012cb4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8012cb6:	4630      	mov	r0, r6
 8012cb8:	f005 fc58 	bl	801856c <ucdr_serialize_string>
 8012cbc:	6863      	ldr	r3, [r4, #4]
 8012cbe:	2b08      	cmp	r3, #8
 8012cc0:	d916      	bls.n	8012cf0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012cc2:	b310      	cbz	r0, 8012d0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012cc4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8012cc6:	4630      	mov	r0, r6
 8012cc8:	f005 fc50 	bl	801856c <ucdr_serialize_string>
 8012ccc:	6863      	ldr	r3, [r4, #4]
 8012cce:	2b09      	cmp	r3, #9
 8012cd0:	d90e      	bls.n	8012cf0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012cd2:	b1d0      	cbz	r0, 8012d0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012cd4:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8012cd8:	2709      	movs	r7, #9
 8012cda:	e000      	b.n	8012cde <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8012cdc:	b1a8      	cbz	r0, 8012d0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012cde:	f858 1b04 	ldr.w	r1, [r8], #4
 8012ce2:	4630      	mov	r0, r6
 8012ce4:	f005 fc42 	bl	801856c <ucdr_serialize_string>
 8012ce8:	3701      	adds	r7, #1
 8012cea:	6862      	ldr	r2, [r4, #4]
 8012cec:	4297      	cmp	r7, r2
 8012cee:	d3f5      	bcc.n	8012cdc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8012cf0:	4005      	ands	r5, r0
 8012cf2:	b2ed      	uxtb	r5, r5
 8012cf4:	e78a      	b.n	8012c0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012cf6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012cf8:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8012cfc:	4630      	mov	r0, r6
 8012cfe:	f7fe fa75 	bl	80111ec <ucdr_serialize_sequence_uint8_t>
 8012d02:	4005      	ands	r5, r0
 8012d04:	4628      	mov	r0, r5
 8012d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d0a:	2500      	movs	r5, #0
 8012d0c:	e77e      	b.n	8012c0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012d0e:	4028      	ands	r0, r5
 8012d10:	b2c5      	uxtb	r5, r0
 8012d12:	e77b      	b.n	8012c0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08012d14 <uxr_serialize_OBJK_Publisher_Binary>:
 8012d14:	b570      	push	{r4, r5, r6, lr}
 8012d16:	460d      	mov	r5, r1
 8012d18:	7809      	ldrb	r1, [r1, #0]
 8012d1a:	4606      	mov	r6, r0
 8012d1c:	f7fa faec 	bl	800d2f8 <ucdr_serialize_bool>
 8012d20:	782b      	ldrb	r3, [r5, #0]
 8012d22:	4604      	mov	r4, r0
 8012d24:	b94b      	cbnz	r3, 8012d3a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8012d26:	7a29      	ldrb	r1, [r5, #8]
 8012d28:	4630      	mov	r0, r6
 8012d2a:	f7fa fae5 	bl	800d2f8 <ucdr_serialize_bool>
 8012d2e:	7a2b      	ldrb	r3, [r5, #8]
 8012d30:	4004      	ands	r4, r0
 8012d32:	b2e4      	uxtb	r4, r4
 8012d34:	b943      	cbnz	r3, 8012d48 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8012d36:	4620      	mov	r0, r4
 8012d38:	bd70      	pop	{r4, r5, r6, pc}
 8012d3a:	6869      	ldr	r1, [r5, #4]
 8012d3c:	4630      	mov	r0, r6
 8012d3e:	f005 fc15 	bl	801856c <ucdr_serialize_string>
 8012d42:	4004      	ands	r4, r0
 8012d44:	b2e4      	uxtb	r4, r4
 8012d46:	e7ee      	b.n	8012d26 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8012d48:	f105 010c 	add.w	r1, r5, #12
 8012d4c:	4630      	mov	r0, r6
 8012d4e:	f7ff ff53 	bl	8012bf8 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8012d52:	4004      	ands	r4, r0
 8012d54:	4620      	mov	r0, r4
 8012d56:	bd70      	pop	{r4, r5, r6, pc}

08012d58 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8012d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d5c:	460c      	mov	r4, r1
 8012d5e:	7809      	ldrb	r1, [r1, #0]
 8012d60:	4606      	mov	r6, r0
 8012d62:	f7fa fac9 	bl	800d2f8 <ucdr_serialize_bool>
 8012d66:	7823      	ldrb	r3, [r4, #0]
 8012d68:	4605      	mov	r5, r0
 8012d6a:	b96b      	cbnz	r3, 8012d88 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8012d6c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8012d70:	4630      	mov	r0, r6
 8012d72:	f7fa fac1 	bl	800d2f8 <ucdr_serialize_bool>
 8012d76:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8012d7a:	4005      	ands	r5, r0
 8012d7c:	b2ed      	uxtb	r5, r5
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d169      	bne.n	8012e56 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8012d82:	4628      	mov	r0, r5
 8012d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d88:	6861      	ldr	r1, [r4, #4]
 8012d8a:	4630      	mov	r0, r6
 8012d8c:	f7fa fcf8 	bl	800d780 <ucdr_serialize_uint32_t>
 8012d90:	6863      	ldr	r3, [r4, #4]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d06b      	beq.n	8012e6e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8012d96:	2800      	cmp	r0, #0
 8012d98:	d067      	beq.n	8012e6a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012d9a:	68a1      	ldr	r1, [r4, #8]
 8012d9c:	4630      	mov	r0, r6
 8012d9e:	f005 fbe5 	bl	801856c <ucdr_serialize_string>
 8012da2:	6863      	ldr	r3, [r4, #4]
 8012da4:	2b01      	cmp	r3, #1
 8012da6:	d953      	bls.n	8012e50 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012da8:	2800      	cmp	r0, #0
 8012daa:	d05e      	beq.n	8012e6a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012dac:	68e1      	ldr	r1, [r4, #12]
 8012dae:	4630      	mov	r0, r6
 8012db0:	f005 fbdc 	bl	801856c <ucdr_serialize_string>
 8012db4:	6863      	ldr	r3, [r4, #4]
 8012db6:	2b02      	cmp	r3, #2
 8012db8:	d94a      	bls.n	8012e50 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012dba:	2800      	cmp	r0, #0
 8012dbc:	d055      	beq.n	8012e6a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012dbe:	6921      	ldr	r1, [r4, #16]
 8012dc0:	4630      	mov	r0, r6
 8012dc2:	f005 fbd3 	bl	801856c <ucdr_serialize_string>
 8012dc6:	6863      	ldr	r3, [r4, #4]
 8012dc8:	2b03      	cmp	r3, #3
 8012dca:	d941      	bls.n	8012e50 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012dcc:	2800      	cmp	r0, #0
 8012dce:	d04c      	beq.n	8012e6a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012dd0:	6961      	ldr	r1, [r4, #20]
 8012dd2:	4630      	mov	r0, r6
 8012dd4:	f005 fbca 	bl	801856c <ucdr_serialize_string>
 8012dd8:	6863      	ldr	r3, [r4, #4]
 8012dda:	2b04      	cmp	r3, #4
 8012ddc:	d938      	bls.n	8012e50 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012dde:	2800      	cmp	r0, #0
 8012de0:	d043      	beq.n	8012e6a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012de2:	69a1      	ldr	r1, [r4, #24]
 8012de4:	4630      	mov	r0, r6
 8012de6:	f005 fbc1 	bl	801856c <ucdr_serialize_string>
 8012dea:	6863      	ldr	r3, [r4, #4]
 8012dec:	2b05      	cmp	r3, #5
 8012dee:	d92f      	bls.n	8012e50 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012df0:	2800      	cmp	r0, #0
 8012df2:	d03a      	beq.n	8012e6a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012df4:	69e1      	ldr	r1, [r4, #28]
 8012df6:	4630      	mov	r0, r6
 8012df8:	f005 fbb8 	bl	801856c <ucdr_serialize_string>
 8012dfc:	6863      	ldr	r3, [r4, #4]
 8012dfe:	2b06      	cmp	r3, #6
 8012e00:	d926      	bls.n	8012e50 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012e02:	b390      	cbz	r0, 8012e6a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012e04:	6a21      	ldr	r1, [r4, #32]
 8012e06:	4630      	mov	r0, r6
 8012e08:	f005 fbb0 	bl	801856c <ucdr_serialize_string>
 8012e0c:	6863      	ldr	r3, [r4, #4]
 8012e0e:	2b07      	cmp	r3, #7
 8012e10:	d91e      	bls.n	8012e50 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012e12:	b350      	cbz	r0, 8012e6a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012e14:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8012e16:	4630      	mov	r0, r6
 8012e18:	f005 fba8 	bl	801856c <ucdr_serialize_string>
 8012e1c:	6863      	ldr	r3, [r4, #4]
 8012e1e:	2b08      	cmp	r3, #8
 8012e20:	d916      	bls.n	8012e50 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012e22:	b310      	cbz	r0, 8012e6a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012e24:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8012e26:	4630      	mov	r0, r6
 8012e28:	f005 fba0 	bl	801856c <ucdr_serialize_string>
 8012e2c:	6863      	ldr	r3, [r4, #4]
 8012e2e:	2b09      	cmp	r3, #9
 8012e30:	d90e      	bls.n	8012e50 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012e32:	b1d0      	cbz	r0, 8012e6a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012e34:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8012e38:	2709      	movs	r7, #9
 8012e3a:	e000      	b.n	8012e3e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8012e3c:	b1a8      	cbz	r0, 8012e6a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012e3e:	f858 1b04 	ldr.w	r1, [r8], #4
 8012e42:	4630      	mov	r0, r6
 8012e44:	f005 fb92 	bl	801856c <ucdr_serialize_string>
 8012e48:	3701      	adds	r7, #1
 8012e4a:	6862      	ldr	r2, [r4, #4]
 8012e4c:	4297      	cmp	r7, r2
 8012e4e:	d3f5      	bcc.n	8012e3c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8012e50:	4005      	ands	r5, r0
 8012e52:	b2ed      	uxtb	r5, r5
 8012e54:	e78a      	b.n	8012d6c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012e56:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012e58:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8012e5c:	4630      	mov	r0, r6
 8012e5e:	f7fe f9c5 	bl	80111ec <ucdr_serialize_sequence_uint8_t>
 8012e62:	4005      	ands	r5, r0
 8012e64:	4628      	mov	r0, r5
 8012e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e6a:	2500      	movs	r5, #0
 8012e6c:	e77e      	b.n	8012d6c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012e6e:	4028      	ands	r0, r5
 8012e70:	b2c5      	uxtb	r5, r0
 8012e72:	e77b      	b.n	8012d6c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08012e74 <uxr_serialize_OBJK_Subscriber_Binary>:
 8012e74:	b570      	push	{r4, r5, r6, lr}
 8012e76:	460d      	mov	r5, r1
 8012e78:	7809      	ldrb	r1, [r1, #0]
 8012e7a:	4606      	mov	r6, r0
 8012e7c:	f7fa fa3c 	bl	800d2f8 <ucdr_serialize_bool>
 8012e80:	782b      	ldrb	r3, [r5, #0]
 8012e82:	4604      	mov	r4, r0
 8012e84:	b94b      	cbnz	r3, 8012e9a <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8012e86:	7a29      	ldrb	r1, [r5, #8]
 8012e88:	4630      	mov	r0, r6
 8012e8a:	f7fa fa35 	bl	800d2f8 <ucdr_serialize_bool>
 8012e8e:	7a2b      	ldrb	r3, [r5, #8]
 8012e90:	4004      	ands	r4, r0
 8012e92:	b2e4      	uxtb	r4, r4
 8012e94:	b943      	cbnz	r3, 8012ea8 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8012e96:	4620      	mov	r0, r4
 8012e98:	bd70      	pop	{r4, r5, r6, pc}
 8012e9a:	6869      	ldr	r1, [r5, #4]
 8012e9c:	4630      	mov	r0, r6
 8012e9e:	f005 fb65 	bl	801856c <ucdr_serialize_string>
 8012ea2:	4004      	ands	r4, r0
 8012ea4:	b2e4      	uxtb	r4, r4
 8012ea6:	e7ee      	b.n	8012e86 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8012ea8:	f105 010c 	add.w	r1, r5, #12
 8012eac:	4630      	mov	r0, r6
 8012eae:	f7ff ff53 	bl	8012d58 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8012eb2:	4004      	ands	r4, r0
 8012eb4:	4620      	mov	r0, r4
 8012eb6:	bd70      	pop	{r4, r5, r6, pc}

08012eb8 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8012eb8:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8012ebc:	4688      	mov	r8, r1
 8012ebe:	4681      	mov	r9, r0
 8012ec0:	8809      	ldrh	r1, [r1, #0]
 8012ec2:	f7fa fa73 	bl	800d3ac <ucdr_serialize_uint16_t>
 8012ec6:	4606      	mov	r6, r0
 8012ec8:	f898 1002 	ldrb.w	r1, [r8, #2]
 8012ecc:	4648      	mov	r0, r9
 8012ece:	f7fa fa13 	bl	800d2f8 <ucdr_serialize_bool>
 8012ed2:	f898 3002 	ldrb.w	r3, [r8, #2]
 8012ed6:	4006      	ands	r6, r0
 8012ed8:	b2f5      	uxtb	r5, r6
 8012eda:	b9eb      	cbnz	r3, 8012f18 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8012edc:	f898 1006 	ldrb.w	r1, [r8, #6]
 8012ee0:	4648      	mov	r0, r9
 8012ee2:	f7fa fa09 	bl	800d2f8 <ucdr_serialize_bool>
 8012ee6:	f898 3006 	ldrb.w	r3, [r8, #6]
 8012eea:	4005      	ands	r5, r0
 8012eec:	bb7b      	cbnz	r3, 8012f4e <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8012eee:	f898 100c 	ldrb.w	r1, [r8, #12]
 8012ef2:	4648      	mov	r0, r9
 8012ef4:	f7fa fa00 	bl	800d2f8 <ucdr_serialize_bool>
 8012ef8:	f898 300c 	ldrb.w	r3, [r8, #12]
 8012efc:	4005      	ands	r5, r0
 8012efe:	b9f3      	cbnz	r3, 8012f3e <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8012f00:	f898 1014 	ldrb.w	r1, [r8, #20]
 8012f04:	4648      	mov	r0, r9
 8012f06:	f7fa f9f7 	bl	800d2f8 <ucdr_serialize_bool>
 8012f0a:	f898 3014 	ldrb.w	r3, [r8, #20]
 8012f0e:	4005      	ands	r5, r0
 8012f10:	b94b      	cbnz	r3, 8012f26 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8012f12:	4628      	mov	r0, r5
 8012f14:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012f18:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8012f1c:	4648      	mov	r0, r9
 8012f1e:	f7fa fa45 	bl	800d3ac <ucdr_serialize_uint16_t>
 8012f22:	4005      	ands	r5, r0
 8012f24:	e7da      	b.n	8012edc <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8012f26:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8012f2a:	f108 011c 	add.w	r1, r8, #28
 8012f2e:	4648      	mov	r0, r9
 8012f30:	f7fe f95c 	bl	80111ec <ucdr_serialize_sequence_uint8_t>
 8012f34:	4028      	ands	r0, r5
 8012f36:	b2c5      	uxtb	r5, r0
 8012f38:	4628      	mov	r0, r5
 8012f3a:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012f3e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012f42:	4648      	mov	r0, r9
 8012f44:	f7fa fc1c 	bl	800d780 <ucdr_serialize_uint32_t>
 8012f48:	4028      	ands	r0, r5
 8012f4a:	b2c5      	uxtb	r5, r0
 8012f4c:	e7d8      	b.n	8012f00 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8012f4e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8012f52:	4648      	mov	r0, r9
 8012f54:	f7fa fc14 	bl	800d780 <ucdr_serialize_uint32_t>
 8012f58:	4028      	ands	r0, r5
 8012f5a:	b2c5      	uxtb	r5, r0
 8012f5c:	e7c7      	b.n	8012eee <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8012f5e:	bf00      	nop

08012f60 <uxr_serialize_OBJK_DataReader_Binary>:
 8012f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f62:	2202      	movs	r2, #2
 8012f64:	460c      	mov	r4, r1
 8012f66:	4606      	mov	r6, r0
 8012f68:	f7fd ffa0 	bl	8010eac <ucdr_serialize_array_uint8_t>
 8012f6c:	4605      	mov	r5, r0
 8012f6e:	78a1      	ldrb	r1, [r4, #2]
 8012f70:	4630      	mov	r0, r6
 8012f72:	f7fa f9c1 	bl	800d2f8 <ucdr_serialize_bool>
 8012f76:	78a3      	ldrb	r3, [r4, #2]
 8012f78:	4005      	ands	r5, r0
 8012f7a:	b2ed      	uxtb	r5, r5
 8012f7c:	b90b      	cbnz	r3, 8012f82 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8012f7e:	4628      	mov	r0, r5
 8012f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f82:	f104 0108 	add.w	r1, r4, #8
 8012f86:	4630      	mov	r0, r6
 8012f88:	f7ff ff96 	bl	8012eb8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012f8c:	4607      	mov	r7, r0
 8012f8e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012f92:	4630      	mov	r0, r6
 8012f94:	f7fa f9b0 	bl	800d2f8 <ucdr_serialize_bool>
 8012f98:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012f9c:	4038      	ands	r0, r7
 8012f9e:	b2c7      	uxtb	r7, r0
 8012fa0:	b95b      	cbnz	r3, 8012fba <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8012fa2:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8012fa6:	4630      	mov	r0, r6
 8012fa8:	f7fa f9a6 	bl	800d2f8 <ucdr_serialize_bool>
 8012fac:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8012fb0:	4007      	ands	r7, r0
 8012fb2:	b94b      	cbnz	r3, 8012fc8 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8012fb4:	403d      	ands	r5, r7
 8012fb6:	4628      	mov	r0, r5
 8012fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fba:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8012fbe:	4630      	mov	r0, r6
 8012fc0:	f7fa fe34 	bl	800dc2c <ucdr_serialize_uint64_t>
 8012fc4:	4007      	ands	r7, r0
 8012fc6:	e7ec      	b.n	8012fa2 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8012fc8:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8012fca:	4630      	mov	r0, r6
 8012fcc:	f005 face 	bl	801856c <ucdr_serialize_string>
 8012fd0:	4007      	ands	r7, r0
 8012fd2:	b2ff      	uxtb	r7, r7
 8012fd4:	e7ee      	b.n	8012fb4 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8012fd6:	bf00      	nop

08012fd8 <uxr_serialize_OBJK_DataWriter_Binary>:
 8012fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fda:	2202      	movs	r2, #2
 8012fdc:	460d      	mov	r5, r1
 8012fde:	4606      	mov	r6, r0
 8012fe0:	f7fd ff64 	bl	8010eac <ucdr_serialize_array_uint8_t>
 8012fe4:	4604      	mov	r4, r0
 8012fe6:	78a9      	ldrb	r1, [r5, #2]
 8012fe8:	4630      	mov	r0, r6
 8012fea:	f7fa f985 	bl	800d2f8 <ucdr_serialize_bool>
 8012fee:	78ab      	ldrb	r3, [r5, #2]
 8012ff0:	4004      	ands	r4, r0
 8012ff2:	b2e4      	uxtb	r4, r4
 8012ff4:	b90b      	cbnz	r3, 8012ffa <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8012ff6:	4620      	mov	r0, r4
 8012ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ffa:	f105 0108 	add.w	r1, r5, #8
 8012ffe:	4630      	mov	r0, r6
 8013000:	f7ff ff5a 	bl	8012eb8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8013004:	4607      	mov	r7, r0
 8013006:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 801300a:	4630      	mov	r0, r6
 801300c:	f7fa f974 	bl	800d2f8 <ucdr_serialize_bool>
 8013010:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8013014:	4038      	ands	r0, r7
 8013016:	b2c7      	uxtb	r7, r0
 8013018:	b913      	cbnz	r3, 8013020 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801301a:	403c      	ands	r4, r7
 801301c:	4620      	mov	r0, r4
 801301e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013020:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8013024:	4630      	mov	r0, r6
 8013026:	f7fa fe01 	bl	800dc2c <ucdr_serialize_uint64_t>
 801302a:	4007      	ands	r7, r0
 801302c:	e7f5      	b.n	801301a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801302e:	bf00      	nop

08013030 <uxr_deserialize_ObjectVariant>:
 8013030:	b570      	push	{r4, r5, r6, lr}
 8013032:	4605      	mov	r5, r0
 8013034:	460e      	mov	r6, r1
 8013036:	f7fa f9a3 	bl	800d380 <ucdr_deserialize_uint8_t>
 801303a:	b168      	cbz	r0, 8013058 <uxr_deserialize_ObjectVariant+0x28>
 801303c:	7833      	ldrb	r3, [r6, #0]
 801303e:	4604      	mov	r4, r0
 8013040:	3b01      	subs	r3, #1
 8013042:	2b0d      	cmp	r3, #13
 8013044:	d809      	bhi.n	801305a <uxr_deserialize_ObjectVariant+0x2a>
 8013046:	e8df f003 	tbb	[pc, r3]
 801304a:	0a41      	.short	0x0a41
 801304c:	0a0a2323 	.word	0x0a0a2323
 8013050:	10080a0a 	.word	0x10080a0a
 8013054:	565c1010 	.word	0x565c1010
 8013058:	2400      	movs	r4, #0
 801305a:	4620      	mov	r0, r4
 801305c:	bd70      	pop	{r4, r5, r6, pc}
 801305e:	1d31      	adds	r1, r6, #4
 8013060:	4628      	mov	r0, r5
 8013062:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013066:	f7ff bd55 	b.w	8012b14 <uxr_deserialize_DATAWRITER_Representation>
 801306a:	1d31      	adds	r1, r6, #4
 801306c:	4628      	mov	r0, r5
 801306e:	f7fa f987 	bl	800d380 <ucdr_deserialize_uint8_t>
 8013072:	2800      	cmp	r0, #0
 8013074:	d0f0      	beq.n	8013058 <uxr_deserialize_ObjectVariant+0x28>
 8013076:	7933      	ldrb	r3, [r6, #4]
 8013078:	2b01      	cmp	r3, #1
 801307a:	d001      	beq.n	8013080 <uxr_deserialize_ObjectVariant+0x50>
 801307c:	2b02      	cmp	r3, #2
 801307e:	d1ec      	bne.n	801305a <uxr_deserialize_ObjectVariant+0x2a>
 8013080:	68b1      	ldr	r1, [r6, #8]
 8013082:	4628      	mov	r0, r5
 8013084:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013088:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801308c:	f005 ba7e 	b.w	801858c <ucdr_deserialize_string>
 8013090:	1d31      	adds	r1, r6, #4
 8013092:	4628      	mov	r0, r5
 8013094:	f7fa f974 	bl	800d380 <ucdr_deserialize_uint8_t>
 8013098:	4604      	mov	r4, r0
 801309a:	b170      	cbz	r0, 80130ba <uxr_deserialize_ObjectVariant+0x8a>
 801309c:	7933      	ldrb	r3, [r6, #4]
 801309e:	2b02      	cmp	r3, #2
 80130a0:	d04c      	beq.n	801313c <uxr_deserialize_ObjectVariant+0x10c>
 80130a2:	2b03      	cmp	r3, #3
 80130a4:	d109      	bne.n	80130ba <uxr_deserialize_ObjectVariant+0x8a>
 80130a6:	f106 0308 	add.w	r3, r6, #8
 80130aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80130ae:	f106 010c 	add.w	r1, r6, #12
 80130b2:	4628      	mov	r0, r5
 80130b4:	f7fe f8ac 	bl	8011210 <ucdr_deserialize_sequence_uint8_t>
 80130b8:	4604      	mov	r4, r0
 80130ba:	2202      	movs	r2, #2
 80130bc:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80130c0:	4628      	mov	r0, r5
 80130c2:	f7fd ff57 	bl	8010f74 <ucdr_deserialize_array_uint8_t>
 80130c6:	4020      	ands	r0, r4
 80130c8:	b2c4      	uxtb	r4, r0
 80130ca:	e7c6      	b.n	801305a <uxr_deserialize_ObjectVariant+0x2a>
 80130cc:	1d31      	adds	r1, r6, #4
 80130ce:	4628      	mov	r0, r5
 80130d0:	f7fa f956 	bl	800d380 <ucdr_deserialize_uint8_t>
 80130d4:	4604      	mov	r4, r0
 80130d6:	b130      	cbz	r0, 80130e6 <uxr_deserialize_ObjectVariant+0xb6>
 80130d8:	7933      	ldrb	r3, [r6, #4]
 80130da:	2b02      	cmp	r3, #2
 80130dc:	d036      	beq.n	801314c <uxr_deserialize_ObjectVariant+0x11c>
 80130de:	2b03      	cmp	r3, #3
 80130e0:	d03c      	beq.n	801315c <uxr_deserialize_ObjectVariant+0x12c>
 80130e2:	2b01      	cmp	r3, #1
 80130e4:	d032      	beq.n	801314c <uxr_deserialize_ObjectVariant+0x11c>
 80130e6:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80130ea:	4628      	mov	r0, r5
 80130ec:	f7fa feee 	bl	800decc <ucdr_deserialize_int16_t>
 80130f0:	4020      	ands	r0, r4
 80130f2:	b2c4      	uxtb	r4, r0
 80130f4:	e7b1      	b.n	801305a <uxr_deserialize_ObjectVariant+0x2a>
 80130f6:	1d31      	adds	r1, r6, #4
 80130f8:	4628      	mov	r0, r5
 80130fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80130fe:	f7ff bbbf 	b.w	8012880 <uxr_deserialize_CLIENT_Representation>
 8013102:	2204      	movs	r2, #4
 8013104:	4628      	mov	r0, r5
 8013106:	18b1      	adds	r1, r6, r2
 8013108:	f7fd ff34 	bl	8010f74 <ucdr_deserialize_array_uint8_t>
 801310c:	4604      	mov	r4, r0
 801310e:	2202      	movs	r2, #2
 8013110:	f106 0108 	add.w	r1, r6, #8
 8013114:	4628      	mov	r0, r5
 8013116:	f7fd ff2d 	bl	8010f74 <ucdr_deserialize_array_uint8_t>
 801311a:	4004      	ands	r4, r0
 801311c:	2202      	movs	r2, #2
 801311e:	f106 010a 	add.w	r1, r6, #10
 8013122:	4628      	mov	r0, r5
 8013124:	b2e4      	uxtb	r4, r4
 8013126:	f7fd ff25 	bl	8010f74 <ucdr_deserialize_array_uint8_t>
 801312a:	4603      	mov	r3, r0
 801312c:	f106 010c 	add.w	r1, r6, #12
 8013130:	4628      	mov	r0, r5
 8013132:	401c      	ands	r4, r3
 8013134:	f7fa f8f6 	bl	800d324 <ucdr_deserialize_bool>
 8013138:	4004      	ands	r4, r0
 801313a:	e78e      	b.n	801305a <uxr_deserialize_ObjectVariant+0x2a>
 801313c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013140:	68b1      	ldr	r1, [r6, #8]
 8013142:	4628      	mov	r0, r5
 8013144:	f005 fa22 	bl	801858c <ucdr_deserialize_string>
 8013148:	4604      	mov	r4, r0
 801314a:	e7b6      	b.n	80130ba <uxr_deserialize_ObjectVariant+0x8a>
 801314c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013150:	68b1      	ldr	r1, [r6, #8]
 8013152:	4628      	mov	r0, r5
 8013154:	f005 fa1a 	bl	801858c <ucdr_deserialize_string>
 8013158:	4604      	mov	r4, r0
 801315a:	e7c4      	b.n	80130e6 <uxr_deserialize_ObjectVariant+0xb6>
 801315c:	f106 0308 	add.w	r3, r6, #8
 8013160:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013164:	f106 010c 	add.w	r1, r6, #12
 8013168:	4628      	mov	r0, r5
 801316a:	f7fe f851 	bl	8011210 <ucdr_deserialize_sequence_uint8_t>
 801316e:	4604      	mov	r4, r0
 8013170:	e7b9      	b.n	80130e6 <uxr_deserialize_ObjectVariant+0xb6>
 8013172:	bf00      	nop

08013174 <uxr_deserialize_BaseObjectRequest>:
 8013174:	b570      	push	{r4, r5, r6, lr}
 8013176:	2202      	movs	r2, #2
 8013178:	4605      	mov	r5, r0
 801317a:	460e      	mov	r6, r1
 801317c:	f7fd fefa 	bl	8010f74 <ucdr_deserialize_array_uint8_t>
 8013180:	2202      	movs	r2, #2
 8013182:	4604      	mov	r4, r0
 8013184:	4628      	mov	r0, r5
 8013186:	18b1      	adds	r1, r6, r2
 8013188:	f7fd fef4 	bl	8010f74 <ucdr_deserialize_array_uint8_t>
 801318c:	4020      	ands	r0, r4
 801318e:	b2c0      	uxtb	r0, r0
 8013190:	bd70      	pop	{r4, r5, r6, pc}
 8013192:	bf00      	nop

08013194 <uxr_serialize_ActivityInfoVariant>:
 8013194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013198:	460e      	mov	r6, r1
 801319a:	7809      	ldrb	r1, [r1, #0]
 801319c:	4680      	mov	r8, r0
 801319e:	f7fa f8d9 	bl	800d354 <ucdr_serialize_uint8_t>
 80131a2:	4607      	mov	r7, r0
 80131a4:	b138      	cbz	r0, 80131b6 <uxr_serialize_ActivityInfoVariant+0x22>
 80131a6:	7833      	ldrb	r3, [r6, #0]
 80131a8:	2b06      	cmp	r3, #6
 80131aa:	f000 8081 	beq.w	80132b0 <uxr_serialize_ActivityInfoVariant+0x11c>
 80131ae:	2b0d      	cmp	r3, #13
 80131b0:	d014      	beq.n	80131dc <uxr_serialize_ActivityInfoVariant+0x48>
 80131b2:	2b05      	cmp	r3, #5
 80131b4:	d002      	beq.n	80131bc <uxr_serialize_ActivityInfoVariant+0x28>
 80131b6:	4638      	mov	r0, r7
 80131b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131bc:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80131c0:	4640      	mov	r0, r8
 80131c2:	f7fa fe03 	bl	800ddcc <ucdr_serialize_int16_t>
 80131c6:	4607      	mov	r7, r0
 80131c8:	4640      	mov	r0, r8
 80131ca:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 80131ce:	f7fa fd2d 	bl	800dc2c <ucdr_serialize_uint64_t>
 80131d2:	4038      	ands	r0, r7
 80131d4:	b2c7      	uxtb	r7, r0
 80131d6:	4638      	mov	r0, r7
 80131d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131dc:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80131e0:	4640      	mov	r0, r8
 80131e2:	f7fa fdf3 	bl	800ddcc <ucdr_serialize_int16_t>
 80131e6:	68f1      	ldr	r1, [r6, #12]
 80131e8:	4607      	mov	r7, r0
 80131ea:	4640      	mov	r0, r8
 80131ec:	f7fa fac8 	bl	800d780 <ucdr_serialize_uint32_t>
 80131f0:	68f3      	ldr	r3, [r6, #12]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d0ed      	beq.n	80131d2 <uxr_serialize_ActivityInfoVariant+0x3e>
 80131f6:	b318      	cbz	r0, 8013240 <uxr_serialize_ActivityInfoVariant+0xac>
 80131f8:	f106 090c 	add.w	r9, r6, #12
 80131fc:	2400      	movs	r4, #0
 80131fe:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8013202:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8013206:	7c29      	ldrb	r1, [r5, #16]
 8013208:	4640      	mov	r0, r8
 801320a:	f7fa f8a3 	bl	800d354 <ucdr_serialize_uint8_t>
 801320e:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 8013212:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8013216:	2800      	cmp	r0, #0
 8013218:	d051      	beq.n	80132be <uxr_serialize_ActivityInfoVariant+0x12a>
 801321a:	7c2b      	ldrb	r3, [r5, #16]
 801321c:	00c9      	lsls	r1, r1, #3
 801321e:	2b03      	cmp	r3, #3
 8013220:	d854      	bhi.n	80132cc <uxr_serialize_ActivityInfoVariant+0x138>
 8013222:	e8df f003 	tbb	[pc, r3]
 8013226:	2133      	.short	0x2133
 8013228:	020f      	.short	0x020f
 801322a:	4449      	add	r1, r9
 801322c:	4640      	mov	r0, r8
 801322e:	6889      	ldr	r1, [r1, #8]
 8013230:	f005 f99c 	bl	801856c <ucdr_serialize_string>
 8013234:	3401      	adds	r4, #1
 8013236:	68f2      	ldr	r2, [r6, #12]
 8013238:	4294      	cmp	r4, r2
 801323a:	d244      	bcs.n	80132c6 <uxr_serialize_ActivityInfoVariant+0x132>
 801323c:	2800      	cmp	r0, #0
 801323e:	d1de      	bne.n	80131fe <uxr_serialize_ActivityInfoVariant+0x6a>
 8013240:	2700      	movs	r7, #0
 8013242:	e7b8      	b.n	80131b6 <uxr_serialize_ActivityInfoVariant+0x22>
 8013244:	3108      	adds	r1, #8
 8013246:	44a2      	add	sl, r4
 8013248:	2210      	movs	r2, #16
 801324a:	4640      	mov	r0, r8
 801324c:	4449      	add	r1, r9
 801324e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8013252:	f7fd fe2b 	bl	8010eac <ucdr_serialize_array_uint8_t>
 8013256:	4605      	mov	r5, r0
 8013258:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 801325c:	4640      	mov	r0, r8
 801325e:	f7fa fa8f 	bl	800d780 <ucdr_serialize_uint32_t>
 8013262:	4028      	ands	r0, r5
 8013264:	b2c0      	uxtb	r0, r0
 8013266:	e7e5      	b.n	8013234 <uxr_serialize_ActivityInfoVariant+0xa0>
 8013268:	3108      	adds	r1, #8
 801326a:	44a2      	add	sl, r4
 801326c:	2204      	movs	r2, #4
 801326e:	4640      	mov	r0, r8
 8013270:	4449      	add	r1, r9
 8013272:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8013276:	f7fd fe19 	bl	8010eac <ucdr_serialize_array_uint8_t>
 801327a:	4605      	mov	r5, r0
 801327c:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 8013280:	4640      	mov	r0, r8
 8013282:	f7fa f893 	bl	800d3ac <ucdr_serialize_uint16_t>
 8013286:	4028      	ands	r0, r5
 8013288:	b2c0      	uxtb	r0, r0
 801328a:	e7d3      	b.n	8013234 <uxr_serialize_ActivityInfoVariant+0xa0>
 801328c:	3108      	adds	r1, #8
 801328e:	44a2      	add	sl, r4
 8013290:	2202      	movs	r2, #2
 8013292:	4640      	mov	r0, r8
 8013294:	4449      	add	r1, r9
 8013296:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801329a:	f7fd fe07 	bl	8010eac <ucdr_serialize_array_uint8_t>
 801329e:	4605      	mov	r5, r0
 80132a0:	f89a 1016 	ldrb.w	r1, [sl, #22]
 80132a4:	4640      	mov	r0, r8
 80132a6:	f7fa f855 	bl	800d354 <ucdr_serialize_uint8_t>
 80132aa:	4028      	ands	r0, r5
 80132ac:	b2c0      	uxtb	r0, r0
 80132ae:	e7c1      	b.n	8013234 <uxr_serialize_ActivityInfoVariant+0xa0>
 80132b0:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80132b4:	4640      	mov	r0, r8
 80132b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132ba:	f7fa bd87 	b.w	800ddcc <ucdr_serialize_int16_t>
 80132be:	3401      	adds	r4, #1
 80132c0:	68f2      	ldr	r2, [r6, #12]
 80132c2:	42a2      	cmp	r2, r4
 80132c4:	d8bc      	bhi.n	8013240 <uxr_serialize_ActivityInfoVariant+0xac>
 80132c6:	4007      	ands	r7, r0
 80132c8:	b2ff      	uxtb	r7, r7
 80132ca:	e774      	b.n	80131b6 <uxr_serialize_ActivityInfoVariant+0x22>
 80132cc:	3401      	adds	r4, #1
 80132ce:	68f3      	ldr	r3, [r6, #12]
 80132d0:	3518      	adds	r5, #24
 80132d2:	429c      	cmp	r4, r3
 80132d4:	d397      	bcc.n	8013206 <uxr_serialize_ActivityInfoVariant+0x72>
 80132d6:	e76e      	b.n	80131b6 <uxr_serialize_ActivityInfoVariant+0x22>

080132d8 <uxr_deserialize_BaseObjectReply>:
 80132d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132dc:	2202      	movs	r2, #2
 80132de:	4606      	mov	r6, r0
 80132e0:	460f      	mov	r7, r1
 80132e2:	f7fd fe47 	bl	8010f74 <ucdr_deserialize_array_uint8_t>
 80132e6:	2202      	movs	r2, #2
 80132e8:	4605      	mov	r5, r0
 80132ea:	4630      	mov	r0, r6
 80132ec:	18b9      	adds	r1, r7, r2
 80132ee:	f7fd fe41 	bl	8010f74 <ucdr_deserialize_array_uint8_t>
 80132f2:	4680      	mov	r8, r0
 80132f4:	1d39      	adds	r1, r7, #4
 80132f6:	4630      	mov	r0, r6
 80132f8:	f7fa f842 	bl	800d380 <ucdr_deserialize_uint8_t>
 80132fc:	ea05 0508 	and.w	r5, r5, r8
 8013300:	4604      	mov	r4, r0
 8013302:	1d79      	adds	r1, r7, #5
 8013304:	4630      	mov	r0, r6
 8013306:	402c      	ands	r4, r5
 8013308:	f7fa f83a 	bl	800d380 <ucdr_deserialize_uint8_t>
 801330c:	4020      	ands	r0, r4
 801330e:	b2c0      	uxtb	r0, r0
 8013310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013314 <uxr_serialize_ReadSpecification>:
 8013314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013316:	460e      	mov	r6, r1
 8013318:	4607      	mov	r7, r0
 801331a:	7809      	ldrb	r1, [r1, #0]
 801331c:	f7fa f81a 	bl	800d354 <ucdr_serialize_uint8_t>
 8013320:	4604      	mov	r4, r0
 8013322:	7871      	ldrb	r1, [r6, #1]
 8013324:	4638      	mov	r0, r7
 8013326:	f7fa f815 	bl	800d354 <ucdr_serialize_uint8_t>
 801332a:	4004      	ands	r4, r0
 801332c:	78b1      	ldrb	r1, [r6, #2]
 801332e:	4638      	mov	r0, r7
 8013330:	f7f9 ffe2 	bl	800d2f8 <ucdr_serialize_bool>
 8013334:	78b3      	ldrb	r3, [r6, #2]
 8013336:	b2e4      	uxtb	r4, r4
 8013338:	4004      	ands	r4, r0
 801333a:	b943      	cbnz	r3, 801334e <uxr_serialize_ReadSpecification+0x3a>
 801333c:	7a31      	ldrb	r1, [r6, #8]
 801333e:	4638      	mov	r0, r7
 8013340:	f7f9 ffda 	bl	800d2f8 <ucdr_serialize_bool>
 8013344:	7a33      	ldrb	r3, [r6, #8]
 8013346:	4004      	ands	r4, r0
 8013348:	b93b      	cbnz	r3, 801335a <uxr_serialize_ReadSpecification+0x46>
 801334a:	4620      	mov	r0, r4
 801334c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801334e:	6871      	ldr	r1, [r6, #4]
 8013350:	4638      	mov	r0, r7
 8013352:	f005 f90b 	bl	801856c <ucdr_serialize_string>
 8013356:	4004      	ands	r4, r0
 8013358:	e7f0      	b.n	801333c <uxr_serialize_ReadSpecification+0x28>
 801335a:	8971      	ldrh	r1, [r6, #10]
 801335c:	4638      	mov	r0, r7
 801335e:	f7fa f825 	bl	800d3ac <ucdr_serialize_uint16_t>
 8013362:	4605      	mov	r5, r0
 8013364:	89b1      	ldrh	r1, [r6, #12]
 8013366:	4638      	mov	r0, r7
 8013368:	f7fa f820 	bl	800d3ac <ucdr_serialize_uint16_t>
 801336c:	4005      	ands	r5, r0
 801336e:	89f1      	ldrh	r1, [r6, #14]
 8013370:	4638      	mov	r0, r7
 8013372:	b2ed      	uxtb	r5, r5
 8013374:	f7fa f81a 	bl	800d3ac <ucdr_serialize_uint16_t>
 8013378:	8a31      	ldrh	r1, [r6, #16]
 801337a:	4025      	ands	r5, r4
 801337c:	4604      	mov	r4, r0
 801337e:	4638      	mov	r0, r7
 8013380:	4025      	ands	r5, r4
 8013382:	f7fa f813 	bl	800d3ac <ucdr_serialize_uint16_t>
 8013386:	ea00 0405 	and.w	r4, r0, r5
 801338a:	4620      	mov	r0, r4
 801338c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801338e:	bf00      	nop

08013390 <uxr_serialize_CREATE_CLIENT_Payload>:
 8013390:	f7ff ba1e 	b.w	80127d0 <uxr_serialize_CLIENT_Representation>

08013394 <uxr_serialize_CREATE_Payload>:
 8013394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013396:	2202      	movs	r2, #2
 8013398:	4607      	mov	r7, r0
 801339a:	460e      	mov	r6, r1
 801339c:	f7fd fd86 	bl	8010eac <ucdr_serialize_array_uint8_t>
 80133a0:	2202      	movs	r2, #2
 80133a2:	4605      	mov	r5, r0
 80133a4:	4638      	mov	r0, r7
 80133a6:	18b1      	adds	r1, r6, r2
 80133a8:	f7fd fd80 	bl	8010eac <ucdr_serialize_array_uint8_t>
 80133ac:	7931      	ldrb	r1, [r6, #4]
 80133ae:	4604      	mov	r4, r0
 80133b0:	4638      	mov	r0, r7
 80133b2:	f7f9 ffcf 	bl	800d354 <ucdr_serialize_uint8_t>
 80133b6:	b170      	cbz	r0, 80133d6 <uxr_serialize_CREATE_Payload+0x42>
 80133b8:	7933      	ldrb	r3, [r6, #4]
 80133ba:	402c      	ands	r4, r5
 80133bc:	3b01      	subs	r3, #1
 80133be:	b2e4      	uxtb	r4, r4
 80133c0:	2b0d      	cmp	r3, #13
 80133c2:	d809      	bhi.n	80133d8 <uxr_serialize_CREATE_Payload+0x44>
 80133c4:	e8df f003 	tbb	[pc, r3]
 80133c8:	23230a4c 	.word	0x23230a4c
 80133cc:	0a0a0a0a 	.word	0x0a0a0a0a
 80133d0:	12121208 	.word	0x12121208
 80133d4:	3e45      	.short	0x3e45
 80133d6:	2400      	movs	r4, #0
 80133d8:	4620      	mov	r0, r4
 80133da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133dc:	f106 0108 	add.w	r1, r6, #8
 80133e0:	4638      	mov	r0, r7
 80133e2:	f7ff fafb 	bl	80129dc <uxr_serialize_DATAWRITER_Representation>
 80133e6:	4004      	ands	r4, r0
 80133e8:	4620      	mov	r0, r4
 80133ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133ec:	7a31      	ldrb	r1, [r6, #8]
 80133ee:	4638      	mov	r0, r7
 80133f0:	f7f9 ffb0 	bl	800d354 <ucdr_serialize_uint8_t>
 80133f4:	2800      	cmp	r0, #0
 80133f6:	d0ee      	beq.n	80133d6 <uxr_serialize_CREATE_Payload+0x42>
 80133f8:	7a33      	ldrb	r3, [r6, #8]
 80133fa:	2b01      	cmp	r3, #1
 80133fc:	d001      	beq.n	8013402 <uxr_serialize_CREATE_Payload+0x6e>
 80133fe:	2b02      	cmp	r3, #2
 8013400:	d1ea      	bne.n	80133d8 <uxr_serialize_CREATE_Payload+0x44>
 8013402:	68f1      	ldr	r1, [r6, #12]
 8013404:	4638      	mov	r0, r7
 8013406:	f005 f8b1 	bl	801856c <ucdr_serialize_string>
 801340a:	4004      	ands	r4, r0
 801340c:	e7e4      	b.n	80133d8 <uxr_serialize_CREATE_Payload+0x44>
 801340e:	7a31      	ldrb	r1, [r6, #8]
 8013410:	4638      	mov	r0, r7
 8013412:	f7f9 ff9f 	bl	800d354 <ucdr_serialize_uint8_t>
 8013416:	4605      	mov	r5, r0
 8013418:	b158      	cbz	r0, 8013432 <uxr_serialize_CREATE_Payload+0x9e>
 801341a:	7a33      	ldrb	r3, [r6, #8]
 801341c:	2b02      	cmp	r3, #2
 801341e:	d034      	beq.n	801348a <uxr_serialize_CREATE_Payload+0xf6>
 8013420:	2b03      	cmp	r3, #3
 8013422:	d106      	bne.n	8013432 <uxr_serialize_CREATE_Payload+0x9e>
 8013424:	68f2      	ldr	r2, [r6, #12]
 8013426:	f106 0110 	add.w	r1, r6, #16
 801342a:	4638      	mov	r0, r7
 801342c:	f7fd fede 	bl	80111ec <ucdr_serialize_sequence_uint8_t>
 8013430:	4605      	mov	r5, r0
 8013432:	2202      	movs	r2, #2
 8013434:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8013438:	4638      	mov	r0, r7
 801343a:	f7fd fd37 	bl	8010eac <ucdr_serialize_array_uint8_t>
 801343e:	4028      	ands	r0, r5
 8013440:	4004      	ands	r4, r0
 8013442:	e7c9      	b.n	80133d8 <uxr_serialize_CREATE_Payload+0x44>
 8013444:	f106 0108 	add.w	r1, r6, #8
 8013448:	4638      	mov	r0, r7
 801344a:	f7ff f9c1 	bl	80127d0 <uxr_serialize_CLIENT_Representation>
 801344e:	4004      	ands	r4, r0
 8013450:	e7c2      	b.n	80133d8 <uxr_serialize_CREATE_Payload+0x44>
 8013452:	f106 0108 	add.w	r1, r6, #8
 8013456:	4638      	mov	r0, r7
 8013458:	f7ff fa76 	bl	8012948 <uxr_serialize_AGENT_Representation>
 801345c:	4004      	ands	r4, r0
 801345e:	e7bb      	b.n	80133d8 <uxr_serialize_CREATE_Payload+0x44>
 8013460:	7a31      	ldrb	r1, [r6, #8]
 8013462:	4638      	mov	r0, r7
 8013464:	f7f9 ff76 	bl	800d354 <ucdr_serialize_uint8_t>
 8013468:	4605      	mov	r5, r0
 801346a:	b130      	cbz	r0, 801347a <uxr_serialize_CREATE_Payload+0xe6>
 801346c:	7a33      	ldrb	r3, [r6, #8]
 801346e:	2b02      	cmp	r3, #2
 8013470:	d011      	beq.n	8013496 <uxr_serialize_CREATE_Payload+0x102>
 8013472:	2b03      	cmp	r3, #3
 8013474:	d015      	beq.n	80134a2 <uxr_serialize_CREATE_Payload+0x10e>
 8013476:	2b01      	cmp	r3, #1
 8013478:	d00d      	beq.n	8013496 <uxr_serialize_CREATE_Payload+0x102>
 801347a:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 801347e:	4638      	mov	r0, r7
 8013480:	f7fa fca4 	bl	800ddcc <ucdr_serialize_int16_t>
 8013484:	4028      	ands	r0, r5
 8013486:	4004      	ands	r4, r0
 8013488:	e7a6      	b.n	80133d8 <uxr_serialize_CREATE_Payload+0x44>
 801348a:	68f1      	ldr	r1, [r6, #12]
 801348c:	4638      	mov	r0, r7
 801348e:	f005 f86d 	bl	801856c <ucdr_serialize_string>
 8013492:	4605      	mov	r5, r0
 8013494:	e7cd      	b.n	8013432 <uxr_serialize_CREATE_Payload+0x9e>
 8013496:	68f1      	ldr	r1, [r6, #12]
 8013498:	4638      	mov	r0, r7
 801349a:	f005 f867 	bl	801856c <ucdr_serialize_string>
 801349e:	4605      	mov	r5, r0
 80134a0:	e7eb      	b.n	801347a <uxr_serialize_CREATE_Payload+0xe6>
 80134a2:	68f2      	ldr	r2, [r6, #12]
 80134a4:	f106 0110 	add.w	r1, r6, #16
 80134a8:	4638      	mov	r0, r7
 80134aa:	f7fd fe9f 	bl	80111ec <ucdr_serialize_sequence_uint8_t>
 80134ae:	4605      	mov	r5, r0
 80134b0:	e7e3      	b.n	801347a <uxr_serialize_CREATE_Payload+0xe6>
 80134b2:	bf00      	nop

080134b4 <uxr_deserialize_GET_INFO_Payload>:
 80134b4:	b570      	push	{r4, r5, r6, lr}
 80134b6:	2202      	movs	r2, #2
 80134b8:	4605      	mov	r5, r0
 80134ba:	460e      	mov	r6, r1
 80134bc:	f7fd fd5a 	bl	8010f74 <ucdr_deserialize_array_uint8_t>
 80134c0:	2202      	movs	r2, #2
 80134c2:	4604      	mov	r4, r0
 80134c4:	4628      	mov	r0, r5
 80134c6:	18b1      	adds	r1, r6, r2
 80134c8:	f7fd fd54 	bl	8010f74 <ucdr_deserialize_array_uint8_t>
 80134cc:	4603      	mov	r3, r0
 80134ce:	1d31      	adds	r1, r6, #4
 80134d0:	4628      	mov	r0, r5
 80134d2:	401c      	ands	r4, r3
 80134d4:	f7fa fa84 	bl	800d9e0 <ucdr_deserialize_uint32_t>
 80134d8:	b2e4      	uxtb	r4, r4
 80134da:	4020      	ands	r0, r4
 80134dc:	bd70      	pop	{r4, r5, r6, pc}
 80134de:	bf00      	nop

080134e0 <uxr_serialize_DELETE_Payload>:
 80134e0:	b570      	push	{r4, r5, r6, lr}
 80134e2:	2202      	movs	r2, #2
 80134e4:	4605      	mov	r5, r0
 80134e6:	460e      	mov	r6, r1
 80134e8:	f7fd fce0 	bl	8010eac <ucdr_serialize_array_uint8_t>
 80134ec:	2202      	movs	r2, #2
 80134ee:	4604      	mov	r4, r0
 80134f0:	4628      	mov	r0, r5
 80134f2:	18b1      	adds	r1, r6, r2
 80134f4:	f7fd fcda 	bl	8010eac <ucdr_serialize_array_uint8_t>
 80134f8:	4020      	ands	r0, r4
 80134fa:	b2c0      	uxtb	r0, r0
 80134fc:	bd70      	pop	{r4, r5, r6, pc}
 80134fe:	bf00      	nop

08013500 <uxr_deserialize_STATUS_AGENT_Payload>:
 8013500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013504:	460e      	mov	r6, r1
 8013506:	4605      	mov	r5, r0
 8013508:	f7f9 ff3a 	bl	800d380 <ucdr_deserialize_uint8_t>
 801350c:	4604      	mov	r4, r0
 801350e:	1c71      	adds	r1, r6, #1
 8013510:	4628      	mov	r0, r5
 8013512:	f7f9 ff35 	bl	800d380 <ucdr_deserialize_uint8_t>
 8013516:	2204      	movs	r2, #4
 8013518:	4681      	mov	r9, r0
 801351a:	4628      	mov	r0, r5
 801351c:	18b1      	adds	r1, r6, r2
 801351e:	f7fd fd29 	bl	8010f74 <ucdr_deserialize_array_uint8_t>
 8013522:	f106 0108 	add.w	r1, r6, #8
 8013526:	4680      	mov	r8, r0
 8013528:	2202      	movs	r2, #2
 801352a:	4628      	mov	r0, r5
 801352c:	f7fd fd22 	bl	8010f74 <ucdr_deserialize_array_uint8_t>
 8013530:	ea04 0309 	and.w	r3, r4, r9
 8013534:	4607      	mov	r7, r0
 8013536:	2202      	movs	r2, #2
 8013538:	b2db      	uxtb	r3, r3
 801353a:	f106 010a 	add.w	r1, r6, #10
 801353e:	4628      	mov	r0, r5
 8013540:	ea03 0408 	and.w	r4, r3, r8
 8013544:	f7fd fd16 	bl	8010f74 <ucdr_deserialize_array_uint8_t>
 8013548:	4603      	mov	r3, r0
 801354a:	4628      	mov	r0, r5
 801354c:	403c      	ands	r4, r7
 801354e:	f106 010c 	add.w	r1, r6, #12
 8013552:	461d      	mov	r5, r3
 8013554:	f7f9 fee6 	bl	800d324 <ucdr_deserialize_bool>
 8013558:	4025      	ands	r5, r4
 801355a:	4028      	ands	r0, r5
 801355c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013560 <uxr_deserialize_STATUS_Payload>:
 8013560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013564:	2202      	movs	r2, #2
 8013566:	4606      	mov	r6, r0
 8013568:	460f      	mov	r7, r1
 801356a:	f7fd fd03 	bl	8010f74 <ucdr_deserialize_array_uint8_t>
 801356e:	2202      	movs	r2, #2
 8013570:	4605      	mov	r5, r0
 8013572:	4630      	mov	r0, r6
 8013574:	18b9      	adds	r1, r7, r2
 8013576:	f7fd fcfd 	bl	8010f74 <ucdr_deserialize_array_uint8_t>
 801357a:	4680      	mov	r8, r0
 801357c:	1d39      	adds	r1, r7, #4
 801357e:	4630      	mov	r0, r6
 8013580:	f7f9 fefe 	bl	800d380 <ucdr_deserialize_uint8_t>
 8013584:	ea05 0508 	and.w	r5, r5, r8
 8013588:	4604      	mov	r4, r0
 801358a:	1d79      	adds	r1, r7, #5
 801358c:	4630      	mov	r0, r6
 801358e:	402c      	ands	r4, r5
 8013590:	f7f9 fef6 	bl	800d380 <ucdr_deserialize_uint8_t>
 8013594:	4020      	ands	r0, r4
 8013596:	b2c0      	uxtb	r0, r0
 8013598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801359c <uxr_serialize_INFO_Payload>:
 801359c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135a0:	2202      	movs	r2, #2
 80135a2:	460c      	mov	r4, r1
 80135a4:	4605      	mov	r5, r0
 80135a6:	f7fd fc81 	bl	8010eac <ucdr_serialize_array_uint8_t>
 80135aa:	2202      	movs	r2, #2
 80135ac:	4680      	mov	r8, r0
 80135ae:	4628      	mov	r0, r5
 80135b0:	18a1      	adds	r1, r4, r2
 80135b2:	f7fd fc7b 	bl	8010eac <ucdr_serialize_array_uint8_t>
 80135b6:	4607      	mov	r7, r0
 80135b8:	7921      	ldrb	r1, [r4, #4]
 80135ba:	4628      	mov	r0, r5
 80135bc:	f7f9 feca 	bl	800d354 <ucdr_serialize_uint8_t>
 80135c0:	ea08 0807 	and.w	r8, r8, r7
 80135c4:	4606      	mov	r6, r0
 80135c6:	7961      	ldrb	r1, [r4, #5]
 80135c8:	4628      	mov	r0, r5
 80135ca:	ea06 0608 	and.w	r6, r6, r8
 80135ce:	f7f9 fec1 	bl	800d354 <ucdr_serialize_uint8_t>
 80135d2:	7a21      	ldrb	r1, [r4, #8]
 80135d4:	4030      	ands	r0, r6
 80135d6:	b2c7      	uxtb	r7, r0
 80135d8:	4628      	mov	r0, r5
 80135da:	f7f9 fe8d 	bl	800d2f8 <ucdr_serialize_bool>
 80135de:	7a23      	ldrb	r3, [r4, #8]
 80135e0:	4606      	mov	r6, r0
 80135e2:	b96b      	cbnz	r3, 8013600 <uxr_serialize_INFO_Payload+0x64>
 80135e4:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 80135e8:	4628      	mov	r0, r5
 80135ea:	f7f9 fe85 	bl	800d2f8 <ucdr_serialize_bool>
 80135ee:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 80135f2:	4030      	ands	r0, r6
 80135f4:	b2c6      	uxtb	r6, r0
 80135f6:	b983      	cbnz	r3, 801361a <uxr_serialize_INFO_Payload+0x7e>
 80135f8:	ea06 0007 	and.w	r0, r6, r7
 80135fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013600:	7b21      	ldrb	r1, [r4, #12]
 8013602:	4628      	mov	r0, r5
 8013604:	f7f9 fea6 	bl	800d354 <ucdr_serialize_uint8_t>
 8013608:	b188      	cbz	r0, 801362e <uxr_serialize_INFO_Payload+0x92>
 801360a:	f104 010c 	add.w	r1, r4, #12
 801360e:	4628      	mov	r0, r5
 8013610:	f7ff fa0c 	bl	8012a2c <uxr_serialize_ObjectVariant.part.0>
 8013614:	4030      	ands	r0, r6
 8013616:	b2c6      	uxtb	r6, r0
 8013618:	e7e4      	b.n	80135e4 <uxr_serialize_INFO_Payload+0x48>
 801361a:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 801361e:	4628      	mov	r0, r5
 8013620:	f7ff fdb8 	bl	8013194 <uxr_serialize_ActivityInfoVariant>
 8013624:	4006      	ands	r6, r0
 8013626:	ea06 0007 	and.w	r0, r6, r7
 801362a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801362e:	4606      	mov	r6, r0
 8013630:	e7d8      	b.n	80135e4 <uxr_serialize_INFO_Payload+0x48>
 8013632:	bf00      	nop

08013634 <uxr_serialize_READ_DATA_Payload>:
 8013634:	b570      	push	{r4, r5, r6, lr}
 8013636:	2202      	movs	r2, #2
 8013638:	4605      	mov	r5, r0
 801363a:	460e      	mov	r6, r1
 801363c:	f7fd fc36 	bl	8010eac <ucdr_serialize_array_uint8_t>
 8013640:	2202      	movs	r2, #2
 8013642:	4604      	mov	r4, r0
 8013644:	4628      	mov	r0, r5
 8013646:	18b1      	adds	r1, r6, r2
 8013648:	f7fd fc30 	bl	8010eac <ucdr_serialize_array_uint8_t>
 801364c:	4603      	mov	r3, r0
 801364e:	1d31      	adds	r1, r6, #4
 8013650:	4628      	mov	r0, r5
 8013652:	401c      	ands	r4, r3
 8013654:	f7ff fe5e 	bl	8013314 <uxr_serialize_ReadSpecification>
 8013658:	b2e4      	uxtb	r4, r4
 801365a:	4020      	ands	r0, r4
 801365c:	bd70      	pop	{r4, r5, r6, pc}
 801365e:	bf00      	nop

08013660 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8013660:	b570      	push	{r4, r5, r6, lr}
 8013662:	2202      	movs	r2, #2
 8013664:	4605      	mov	r5, r0
 8013666:	460e      	mov	r6, r1
 8013668:	f7fd fc20 	bl	8010eac <ucdr_serialize_array_uint8_t>
 801366c:	2202      	movs	r2, #2
 801366e:	4604      	mov	r4, r0
 8013670:	4628      	mov	r0, r5
 8013672:	18b1      	adds	r1, r6, r2
 8013674:	f7fd fc1a 	bl	8010eac <ucdr_serialize_array_uint8_t>
 8013678:	4020      	ands	r0, r4
 801367a:	b2c0      	uxtb	r0, r0
 801367c:	bd70      	pop	{r4, r5, r6, pc}
 801367e:	bf00      	nop

08013680 <uxr_serialize_ACKNACK_Payload>:
 8013680:	b570      	push	{r4, r5, r6, lr}
 8013682:	460c      	mov	r4, r1
 8013684:	4605      	mov	r5, r0
 8013686:	460e      	mov	r6, r1
 8013688:	f834 1b02 	ldrh.w	r1, [r4], #2
 801368c:	f7f9 fe8e 	bl	800d3ac <ucdr_serialize_uint16_t>
 8013690:	2202      	movs	r2, #2
 8013692:	4621      	mov	r1, r4
 8013694:	4604      	mov	r4, r0
 8013696:	4628      	mov	r0, r5
 8013698:	f7fd fc08 	bl	8010eac <ucdr_serialize_array_uint8_t>
 801369c:	4603      	mov	r3, r0
 801369e:	7931      	ldrb	r1, [r6, #4]
 80136a0:	4628      	mov	r0, r5
 80136a2:	401c      	ands	r4, r3
 80136a4:	f7f9 fe56 	bl	800d354 <ucdr_serialize_uint8_t>
 80136a8:	b2e4      	uxtb	r4, r4
 80136aa:	4020      	ands	r0, r4
 80136ac:	bd70      	pop	{r4, r5, r6, pc}
 80136ae:	bf00      	nop

080136b0 <uxr_deserialize_ACKNACK_Payload>:
 80136b0:	b570      	push	{r4, r5, r6, lr}
 80136b2:	460e      	mov	r6, r1
 80136b4:	4605      	mov	r5, r0
 80136b6:	f7f9 ff79 	bl	800d5ac <ucdr_deserialize_uint16_t>
 80136ba:	2202      	movs	r2, #2
 80136bc:	4604      	mov	r4, r0
 80136be:	4628      	mov	r0, r5
 80136c0:	18b1      	adds	r1, r6, r2
 80136c2:	f7fd fc57 	bl	8010f74 <ucdr_deserialize_array_uint8_t>
 80136c6:	4603      	mov	r3, r0
 80136c8:	1d31      	adds	r1, r6, #4
 80136ca:	4628      	mov	r0, r5
 80136cc:	401c      	ands	r4, r3
 80136ce:	f7f9 fe57 	bl	800d380 <ucdr_deserialize_uint8_t>
 80136d2:	b2e4      	uxtb	r4, r4
 80136d4:	4020      	ands	r0, r4
 80136d6:	bd70      	pop	{r4, r5, r6, pc}

080136d8 <uxr_serialize_HEARTBEAT_Payload>:
 80136d8:	b570      	push	{r4, r5, r6, lr}
 80136da:	460d      	mov	r5, r1
 80136dc:	4606      	mov	r6, r0
 80136de:	8809      	ldrh	r1, [r1, #0]
 80136e0:	f7f9 fe64 	bl	800d3ac <ucdr_serialize_uint16_t>
 80136e4:	8869      	ldrh	r1, [r5, #2]
 80136e6:	4604      	mov	r4, r0
 80136e8:	4630      	mov	r0, r6
 80136ea:	f7f9 fe5f 	bl	800d3ac <ucdr_serialize_uint16_t>
 80136ee:	4603      	mov	r3, r0
 80136f0:	7929      	ldrb	r1, [r5, #4]
 80136f2:	4630      	mov	r0, r6
 80136f4:	401c      	ands	r4, r3
 80136f6:	f7f9 fe2d 	bl	800d354 <ucdr_serialize_uint8_t>
 80136fa:	b2e4      	uxtb	r4, r4
 80136fc:	4020      	ands	r0, r4
 80136fe:	bd70      	pop	{r4, r5, r6, pc}

08013700 <uxr_deserialize_HEARTBEAT_Payload>:
 8013700:	b570      	push	{r4, r5, r6, lr}
 8013702:	460e      	mov	r6, r1
 8013704:	4605      	mov	r5, r0
 8013706:	f7f9 ff51 	bl	800d5ac <ucdr_deserialize_uint16_t>
 801370a:	4604      	mov	r4, r0
 801370c:	1cb1      	adds	r1, r6, #2
 801370e:	4628      	mov	r0, r5
 8013710:	f7f9 ff4c 	bl	800d5ac <ucdr_deserialize_uint16_t>
 8013714:	4603      	mov	r3, r0
 8013716:	1d31      	adds	r1, r6, #4
 8013718:	4628      	mov	r0, r5
 801371a:	401c      	ands	r4, r3
 801371c:	f7f9 fe30 	bl	800d380 <ucdr_deserialize_uint8_t>
 8013720:	b2e4      	uxtb	r4, r4
 8013722:	4020      	ands	r0, r4
 8013724:	bd70      	pop	{r4, r5, r6, pc}
 8013726:	bf00      	nop

08013728 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8013728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801372c:	460e      	mov	r6, r1
 801372e:	4605      	mov	r5, r0
 8013730:	f7fa fcd8 	bl	800e0e4 <ucdr_deserialize_int32_t>
 8013734:	4607      	mov	r7, r0
 8013736:	1d31      	adds	r1, r6, #4
 8013738:	4628      	mov	r0, r5
 801373a:	f7fa f951 	bl	800d9e0 <ucdr_deserialize_uint32_t>
 801373e:	4680      	mov	r8, r0
 8013740:	f106 0108 	add.w	r1, r6, #8
 8013744:	4628      	mov	r0, r5
 8013746:	f7fa fccd 	bl	800e0e4 <ucdr_deserialize_int32_t>
 801374a:	ea07 0708 	and.w	r7, r7, r8
 801374e:	4604      	mov	r4, r0
 8013750:	f106 010c 	add.w	r1, r6, #12
 8013754:	4628      	mov	r0, r5
 8013756:	403c      	ands	r4, r7
 8013758:	f7fa f942 	bl	800d9e0 <ucdr_deserialize_uint32_t>
 801375c:	f106 0110 	add.w	r1, r6, #16
 8013760:	4004      	ands	r4, r0
 8013762:	4628      	mov	r0, r5
 8013764:	f7fa fcbe 	bl	800e0e4 <ucdr_deserialize_int32_t>
 8013768:	4603      	mov	r3, r0
 801376a:	b2e4      	uxtb	r4, r4
 801376c:	4628      	mov	r0, r5
 801376e:	461d      	mov	r5, r3
 8013770:	f106 0114 	add.w	r1, r6, #20
 8013774:	f7fa f934 	bl	800d9e0 <ucdr_deserialize_uint32_t>
 8013778:	402c      	ands	r4, r5
 801377a:	4020      	ands	r0, r4
 801377c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013780 <uxr_serialize_SampleIdentity>:
 8013780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013784:	4604      	mov	r4, r0
 8013786:	460d      	mov	r5, r1
 8013788:	220c      	movs	r2, #12
 801378a:	f7fd fb8f 	bl	8010eac <ucdr_serialize_array_uint8_t>
 801378e:	2203      	movs	r2, #3
 8013790:	f105 010c 	add.w	r1, r5, #12
 8013794:	4607      	mov	r7, r0
 8013796:	4620      	mov	r0, r4
 8013798:	f7fd fb88 	bl	8010eac <ucdr_serialize_array_uint8_t>
 801379c:	7be9      	ldrb	r1, [r5, #15]
 801379e:	4680      	mov	r8, r0
 80137a0:	4620      	mov	r0, r4
 80137a2:	f7f9 fdd7 	bl	800d354 <ucdr_serialize_uint8_t>
 80137a6:	6929      	ldr	r1, [r5, #16]
 80137a8:	4606      	mov	r6, r0
 80137aa:	4620      	mov	r0, r4
 80137ac:	f7fa fc02 	bl	800dfb4 <ucdr_serialize_int32_t>
 80137b0:	ea07 0708 	and.w	r7, r7, r8
 80137b4:	4603      	mov	r3, r0
 80137b6:	4620      	mov	r0, r4
 80137b8:	403e      	ands	r6, r7
 80137ba:	6969      	ldr	r1, [r5, #20]
 80137bc:	461c      	mov	r4, r3
 80137be:	f7f9 ffdf 	bl	800d780 <ucdr_serialize_uint32_t>
 80137c2:	4034      	ands	r4, r6
 80137c4:	4020      	ands	r0, r4
 80137c6:	b2c0      	uxtb	r0, r0
 80137c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080137cc <uxr_deserialize_SampleIdentity>:
 80137cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137d0:	4604      	mov	r4, r0
 80137d2:	460d      	mov	r5, r1
 80137d4:	220c      	movs	r2, #12
 80137d6:	f7fd fbcd 	bl	8010f74 <ucdr_deserialize_array_uint8_t>
 80137da:	2203      	movs	r2, #3
 80137dc:	f105 010c 	add.w	r1, r5, #12
 80137e0:	4607      	mov	r7, r0
 80137e2:	4620      	mov	r0, r4
 80137e4:	f7fd fbc6 	bl	8010f74 <ucdr_deserialize_array_uint8_t>
 80137e8:	f105 010f 	add.w	r1, r5, #15
 80137ec:	4680      	mov	r8, r0
 80137ee:	4620      	mov	r0, r4
 80137f0:	f7f9 fdc6 	bl	800d380 <ucdr_deserialize_uint8_t>
 80137f4:	f105 0110 	add.w	r1, r5, #16
 80137f8:	4606      	mov	r6, r0
 80137fa:	4620      	mov	r0, r4
 80137fc:	f7fa fc72 	bl	800e0e4 <ucdr_deserialize_int32_t>
 8013800:	ea07 0708 	and.w	r7, r7, r8
 8013804:	4603      	mov	r3, r0
 8013806:	4620      	mov	r0, r4
 8013808:	403e      	ands	r6, r7
 801380a:	f105 0114 	add.w	r1, r5, #20
 801380e:	461c      	mov	r4, r3
 8013810:	f7fa f8e6 	bl	800d9e0 <ucdr_deserialize_uint32_t>
 8013814:	4034      	ands	r4, r6
 8013816:	4020      	ands	r0, r4
 8013818:	b2c0      	uxtb	r0, r0
 801381a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801381e:	bf00      	nop

08013820 <rcl_client_get_rmw_handle>:
 8013820:	b118      	cbz	r0, 801382a <rcl_client_get_rmw_handle+0xa>
 8013822:	6800      	ldr	r0, [r0, #0]
 8013824:	b108      	cbz	r0, 801382a <rcl_client_get_rmw_handle+0xa>
 8013826:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801382a:	4770      	bx	lr

0801382c <rcl_send_request>:
 801382c:	b570      	push	{r4, r5, r6, lr}
 801382e:	b082      	sub	sp, #8
 8013830:	b1f8      	cbz	r0, 8013872 <rcl_send_request+0x46>
 8013832:	4604      	mov	r4, r0
 8013834:	6800      	ldr	r0, [r0, #0]
 8013836:	b1e0      	cbz	r0, 8013872 <rcl_send_request+0x46>
 8013838:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 801383c:	b1cb      	cbz	r3, 8013872 <rcl_send_request+0x46>
 801383e:	460e      	mov	r6, r1
 8013840:	b1e1      	cbz	r1, 801387c <rcl_send_request+0x50>
 8013842:	4615      	mov	r5, r2
 8013844:	b1d2      	cbz	r2, 801387c <rcl_send_request+0x50>
 8013846:	2105      	movs	r1, #5
 8013848:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801384c:	f002 fd34 	bl	80162b8 <__atomic_load_8>
 8013850:	4602      	mov	r2, r0
 8013852:	460b      	mov	r3, r1
 8013854:	4631      	mov	r1, r6
 8013856:	e9c5 2300 	strd	r2, r3, [r5]
 801385a:	6823      	ldr	r3, [r4, #0]
 801385c:	462a      	mov	r2, r5
 801385e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013862:	f004 f80f 	bl	8017884 <rmw_send_request>
 8013866:	4606      	mov	r6, r0
 8013868:	b160      	cbz	r0, 8013884 <rcl_send_request+0x58>
 801386a:	2601      	movs	r6, #1
 801386c:	4630      	mov	r0, r6
 801386e:	b002      	add	sp, #8
 8013870:	bd70      	pop	{r4, r5, r6, pc}
 8013872:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8013876:	4630      	mov	r0, r6
 8013878:	b002      	add	sp, #8
 801387a:	bd70      	pop	{r4, r5, r6, pc}
 801387c:	260b      	movs	r6, #11
 801387e:	4630      	mov	r0, r6
 8013880:	b002      	add	sp, #8
 8013882:	bd70      	pop	{r4, r5, r6, pc}
 8013884:	6820      	ldr	r0, [r4, #0]
 8013886:	2105      	movs	r1, #5
 8013888:	e9d5 2300 	ldrd	r2, r3, [r5]
 801388c:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8013890:	9100      	str	r1, [sp, #0]
 8013892:	f002 fd7d 	bl	8016390 <__atomic_exchange_8>
 8013896:	4630      	mov	r0, r6
 8013898:	b002      	add	sp, #8
 801389a:	bd70      	pop	{r4, r5, r6, pc}
 801389c:	0000      	movs	r0, r0
	...

080138a0 <rcl_take_response>:
 80138a0:	b570      	push	{r4, r5, r6, lr}
 80138a2:	468e      	mov	lr, r1
 80138a4:	b08c      	sub	sp, #48	@ 0x30
 80138a6:	460c      	mov	r4, r1
 80138a8:	4616      	mov	r6, r2
 80138aa:	f10d 0c18 	add.w	ip, sp, #24
 80138ae:	4605      	mov	r5, r0
 80138b0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80138b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80138b8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80138bc:	e88c 0003 	stmia.w	ip, {r0, r1}
 80138c0:	b35d      	cbz	r5, 801391a <rcl_take_response+0x7a>
 80138c2:	682b      	ldr	r3, [r5, #0]
 80138c4:	b34b      	cbz	r3, 801391a <rcl_take_response+0x7a>
 80138c6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80138ca:	b330      	cbz	r0, 801391a <rcl_take_response+0x7a>
 80138cc:	b346      	cbz	r6, 8013920 <rcl_take_response+0x80>
 80138ce:	2300      	movs	r3, #0
 80138d0:	4632      	mov	r2, r6
 80138d2:	a902      	add	r1, sp, #8
 80138d4:	f88d 3007 	strb.w	r3, [sp, #7]
 80138d8:	f10d 0307 	add.w	r3, sp, #7
 80138dc:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8013928 <rcl_take_response+0x88>
 80138e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80138e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80138e8:	f004 f8d4 	bl	8017a94 <rmw_take_response>
 80138ec:	4605      	mov	r5, r0
 80138ee:	b9c8      	cbnz	r0, 8013924 <rcl_take_response+0x84>
 80138f0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80138f4:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80138f8:	2a00      	cmp	r2, #0
 80138fa:	bf08      	it	eq
 80138fc:	461d      	moveq	r5, r3
 80138fe:	f10d 0e18 	add.w	lr, sp, #24
 8013902:	46a4      	mov	ip, r4
 8013904:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013908:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801390c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013910:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013914:	4628      	mov	r0, r5
 8013916:	b00c      	add	sp, #48	@ 0x30
 8013918:	bd70      	pop	{r4, r5, r6, pc}
 801391a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 801391e:	e7ee      	b.n	80138fe <rcl_take_response+0x5e>
 8013920:	250b      	movs	r5, #11
 8013922:	e7ec      	b.n	80138fe <rcl_take_response+0x5e>
 8013924:	2501      	movs	r5, #1
 8013926:	e7ea      	b.n	80138fe <rcl_take_response+0x5e>
	...

08013930 <rcl_client_is_valid>:
 8013930:	b130      	cbz	r0, 8013940 <rcl_client_is_valid+0x10>
 8013932:	6800      	ldr	r0, [r0, #0]
 8013934:	b120      	cbz	r0, 8013940 <rcl_client_is_valid+0x10>
 8013936:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801393a:	3800      	subs	r0, #0
 801393c:	bf18      	it	ne
 801393e:	2001      	movne	r0, #1
 8013940:	4770      	bx	lr
 8013942:	bf00      	nop

08013944 <rcl_get_zero_initialized_context>:
 8013944:	4a03      	ldr	r2, [pc, #12]	@ (8013954 <rcl_get_zero_initialized_context+0x10>)
 8013946:	4603      	mov	r3, r0
 8013948:	e892 0003 	ldmia.w	r2, {r0, r1}
 801394c:	e883 0003 	stmia.w	r3, {r0, r1}
 8013950:	4618      	mov	r0, r3
 8013952:	4770      	bx	lr
 8013954:	0801d3a0 	.word	0x0801d3a0

08013958 <rcl_context_is_valid>:
 8013958:	b118      	cbz	r0, 8013962 <rcl_context_is_valid+0xa>
 801395a:	6840      	ldr	r0, [r0, #4]
 801395c:	3800      	subs	r0, #0
 801395e:	bf18      	it	ne
 8013960:	2001      	movne	r0, #1
 8013962:	4770      	bx	lr

08013964 <__cleanup_context>:
 8013964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013968:	4606      	mov	r6, r0
 801396a:	2300      	movs	r3, #0
 801396c:	6800      	ldr	r0, [r0, #0]
 801396e:	6073      	str	r3, [r6, #4]
 8013970:	2800      	cmp	r0, #0
 8013972:	d049      	beq.n	8013a08 <__cleanup_context+0xa4>
 8013974:	6947      	ldr	r7, [r0, #20]
 8013976:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801397a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801397e:	b137      	cbz	r7, 801398e <__cleanup_context+0x2a>
 8013980:	3014      	adds	r0, #20
 8013982:	f000 f9a7 	bl	8013cd4 <rcl_init_options_fini>
 8013986:	4607      	mov	r7, r0
 8013988:	2800      	cmp	r0, #0
 801398a:	d144      	bne.n	8013a16 <__cleanup_context+0xb2>
 801398c:	6830      	ldr	r0, [r6, #0]
 801398e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013990:	b143      	cbz	r3, 80139a4 <__cleanup_context+0x40>
 8013992:	3028      	adds	r0, #40	@ 0x28
 8013994:	f003 fce2 	bl	801735c <rmw_context_fini>
 8013998:	b118      	cbz	r0, 80139a2 <__cleanup_context+0x3e>
 801399a:	2f00      	cmp	r7, #0
 801399c:	d03e      	beq.n	8013a1c <__cleanup_context+0xb8>
 801399e:	f7fc f8e7 	bl	800fb70 <rcutils_reset_error>
 80139a2:	6830      	ldr	r0, [r6, #0]
 80139a4:	6a03      	ldr	r3, [r0, #32]
 80139a6:	b1db      	cbz	r3, 80139e0 <__cleanup_context+0x7c>
 80139a8:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80139ac:	2a01      	cmp	r2, #1
 80139ae:	f17c 0100 	sbcs.w	r1, ip, #0
 80139b2:	db11      	blt.n	80139d8 <__cleanup_context+0x74>
 80139b4:	2400      	movs	r4, #0
 80139b6:	4625      	mov	r5, r4
 80139b8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80139bc:	4649      	mov	r1, r9
 80139be:	b1b8      	cbz	r0, 80139f0 <__cleanup_context+0x8c>
 80139c0:	47c0      	blx	r8
 80139c2:	6833      	ldr	r3, [r6, #0]
 80139c4:	3401      	adds	r4, #1
 80139c6:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80139ca:	f145 0500 	adc.w	r5, r5, #0
 80139ce:	6a1b      	ldr	r3, [r3, #32]
 80139d0:	4294      	cmp	r4, r2
 80139d2:	eb75 010c 	sbcs.w	r1, r5, ip
 80139d6:	dbef      	blt.n	80139b8 <__cleanup_context+0x54>
 80139d8:	4618      	mov	r0, r3
 80139da:	4649      	mov	r1, r9
 80139dc:	47c0      	blx	r8
 80139de:	6830      	ldr	r0, [r6, #0]
 80139e0:	4649      	mov	r1, r9
 80139e2:	47c0      	blx	r8
 80139e4:	2300      	movs	r3, #0
 80139e6:	4638      	mov	r0, r7
 80139e8:	e9c6 3300 	strd	r3, r3, [r6]
 80139ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139f0:	3401      	adds	r4, #1
 80139f2:	f145 0500 	adc.w	r5, r5, #0
 80139f6:	4294      	cmp	r4, r2
 80139f8:	eb75 010c 	sbcs.w	r1, r5, ip
 80139fc:	dbdc      	blt.n	80139b8 <__cleanup_context+0x54>
 80139fe:	4618      	mov	r0, r3
 8013a00:	4649      	mov	r1, r9
 8013a02:	47c0      	blx	r8
 8013a04:	6830      	ldr	r0, [r6, #0]
 8013a06:	e7eb      	b.n	80139e0 <__cleanup_context+0x7c>
 8013a08:	4607      	mov	r7, r0
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	4638      	mov	r0, r7
 8013a0e:	e9c6 3300 	strd	r3, r3, [r6]
 8013a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a16:	f7fc f8ab 	bl	800fb70 <rcutils_reset_error>
 8013a1a:	e7b7      	b.n	801398c <__cleanup_context+0x28>
 8013a1c:	f006 fbd2 	bl	801a1c4 <rcl_convert_rmw_ret_to_rcl_ret>
 8013a20:	4607      	mov	r7, r0
 8013a22:	e7bc      	b.n	801399e <__cleanup_context+0x3a>

08013a24 <rcl_init>:
 8013a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a28:	1e05      	subs	r5, r0, #0
 8013a2a:	b09c      	sub	sp, #112	@ 0x70
 8013a2c:	460e      	mov	r6, r1
 8013a2e:	4690      	mov	r8, r2
 8013a30:	461f      	mov	r7, r3
 8013a32:	f340 809c 	ble.w	8013b6e <rcl_init+0x14a>
 8013a36:	2900      	cmp	r1, #0
 8013a38:	f000 809c 	beq.w	8013b74 <rcl_init+0x150>
 8013a3c:	f1a1 0e04 	sub.w	lr, r1, #4
 8013a40:	f04f 0c00 	mov.w	ip, #0
 8013a44:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8013a48:	f10c 0c01 	add.w	ip, ip, #1
 8013a4c:	2c00      	cmp	r4, #0
 8013a4e:	f000 8091 	beq.w	8013b74 <rcl_init+0x150>
 8013a52:	4565      	cmp	r5, ip
 8013a54:	d1f6      	bne.n	8013a44 <rcl_init+0x20>
 8013a56:	f1b8 0f00 	cmp.w	r8, #0
 8013a5a:	f000 808b 	beq.w	8013b74 <rcl_init+0x150>
 8013a5e:	f8d8 4000 	ldr.w	r4, [r8]
 8013a62:	2c00      	cmp	r4, #0
 8013a64:	f000 8086 	beq.w	8013b74 <rcl_init+0x150>
 8013a68:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 8013a6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013a6e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013a72:	6823      	ldr	r3, [r4, #0]
 8013a74:	a817      	add	r0, sp, #92	@ 0x5c
 8013a76:	f8cc 3000 	str.w	r3, [ip]
 8013a7a:	f7fc f853 	bl	800fb24 <rcutils_allocator_is_valid>
 8013a7e:	f080 0001 	eor.w	r0, r0, #1
 8013a82:	b2c0      	uxtb	r0, r0
 8013a84:	2800      	cmp	r0, #0
 8013a86:	d175      	bne.n	8013b74 <rcl_init+0x150>
 8013a88:	2f00      	cmp	r7, #0
 8013a8a:	d073      	beq.n	8013b74 <rcl_init+0x150>
 8013a8c:	683b      	ldr	r3, [r7, #0]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d175      	bne.n	8013b7e <rcl_init+0x15a>
 8013a92:	2178      	movs	r1, #120	@ 0x78
 8013a94:	2001      	movs	r0, #1
 8013a96:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 8013a9a:	4798      	blx	r3
 8013a9c:	4604      	mov	r4, r0
 8013a9e:	6038      	str	r0, [r7, #0]
 8013aa0:	2800      	cmp	r0, #0
 8013aa2:	f000 80a0 	beq.w	8013be6 <rcl_init+0x1c2>
 8013aa6:	a802      	add	r0, sp, #8
 8013aa8:	f002 ff6a 	bl	8016980 <rmw_get_zero_initialized_context>
 8013aac:	a902      	add	r1, sp, #8
 8013aae:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8013ab2:	2250      	movs	r2, #80	@ 0x50
 8013ab4:	f007 fe59 	bl	801b76a <memcpy>
 8013ab8:	ac17      	add	r4, sp, #92	@ 0x5c
 8013aba:	f8d7 e000 	ldr.w	lr, [r7]
 8013abe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013ac0:	46f4      	mov	ip, lr
 8013ac2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013ac6:	6823      	ldr	r3, [r4, #0]
 8013ac8:	f10e 0114 	add.w	r1, lr, #20
 8013acc:	4640      	mov	r0, r8
 8013ace:	f8cc 3000 	str.w	r3, [ip]
 8013ad2:	f000 f929 	bl	8013d28 <rcl_init_options_copy>
 8013ad6:	4604      	mov	r4, r0
 8013ad8:	2800      	cmp	r0, #0
 8013ada:	d144      	bne.n	8013b66 <rcl_init+0x142>
 8013adc:	f8d7 9000 	ldr.w	r9, [r7]
 8013ae0:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8013ae4:	f8c9 0020 	str.w	r0, [r9, #32]
 8013ae8:	f8c9 5018 	str.w	r5, [r9, #24]
 8013aec:	f8c9 801c 	str.w	r8, [r9, #28]
 8013af0:	2d00      	cmp	r5, #0
 8013af2:	d04b      	beq.n	8013b8c <rcl_init+0x168>
 8013af4:	2e00      	cmp	r6, #0
 8013af6:	d049      	beq.n	8013b8c <rcl_init+0x168>
 8013af8:	2104      	movs	r1, #4
 8013afa:	4628      	mov	r0, r5
 8013afc:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 8013b00:	4798      	blx	r3
 8013b02:	f8c9 0020 	str.w	r0, [r9, #32]
 8013b06:	f8d7 9000 	ldr.w	r9, [r7]
 8013b0a:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8013b0e:	46ca      	mov	sl, r9
 8013b10:	b343      	cbz	r3, 8013b64 <rcl_init+0x140>
 8013b12:	2d01      	cmp	r5, #1
 8013b14:	f178 0300 	sbcs.w	r3, r8, #0
 8013b18:	db38      	blt.n	8013b8c <rcl_init+0x168>
 8013b1a:	2400      	movs	r4, #0
 8013b1c:	3e04      	subs	r6, #4
 8013b1e:	46a1      	mov	r9, r4
 8013b20:	e00b      	b.n	8013b3a <rcl_init+0x116>
 8013b22:	6831      	ldr	r1, [r6, #0]
 8013b24:	f007 fe21 	bl	801b76a <memcpy>
 8013b28:	3401      	adds	r4, #1
 8013b2a:	f149 0900 	adc.w	r9, r9, #0
 8013b2e:	45c8      	cmp	r8, r9
 8013b30:	bf08      	it	eq
 8013b32:	42a5      	cmpeq	r5, r4
 8013b34:	d028      	beq.n	8013b88 <rcl_init+0x164>
 8013b36:	f8d7 a000 	ldr.w	sl, [r7]
 8013b3a:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8013b3e:	f7ec fb89 	bl	8000254 <strlen>
 8013b42:	1c42      	adds	r2, r0, #1
 8013b44:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013b46:	4610      	mov	r0, r2
 8013b48:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8013b4a:	f8da a020 	ldr.w	sl, [sl, #32]
 8013b4e:	9201      	str	r2, [sp, #4]
 8013b50:	4798      	blx	r3
 8013b52:	683b      	ldr	r3, [r7, #0]
 8013b54:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8013b58:	6a1b      	ldr	r3, [r3, #32]
 8013b5a:	9a01      	ldr	r2, [sp, #4]
 8013b5c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013b60:	2800      	cmp	r0, #0
 8013b62:	d1de      	bne.n	8013b22 <rcl_init+0xfe>
 8013b64:	240a      	movs	r4, #10
 8013b66:	4638      	mov	r0, r7
 8013b68:	f7ff fefc 	bl	8013964 <__cleanup_context>
 8013b6c:	e003      	b.n	8013b76 <rcl_init+0x152>
 8013b6e:	2900      	cmp	r1, #0
 8013b70:	f43f af71 	beq.w	8013a56 <rcl_init+0x32>
 8013b74:	240b      	movs	r4, #11
 8013b76:	4620      	mov	r0, r4
 8013b78:	b01c      	add	sp, #112	@ 0x70
 8013b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b7e:	2464      	movs	r4, #100	@ 0x64
 8013b80:	4620      	mov	r0, r4
 8013b82:	b01c      	add	sp, #112	@ 0x70
 8013b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b88:	f8d7 9000 	ldr.w	r9, [r7]
 8013b8c:	491c      	ldr	r1, [pc, #112]	@ (8013c00 <rcl_init+0x1dc>)
 8013b8e:	680b      	ldr	r3, [r1, #0]
 8013b90:	3301      	adds	r3, #1
 8013b92:	d023      	beq.n	8013bdc <rcl_init+0x1b8>
 8013b94:	461a      	mov	r2, r3
 8013b96:	2400      	movs	r4, #0
 8013b98:	600b      	str	r3, [r1, #0]
 8013b9a:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8013b9e:	607b      	str	r3, [r7, #4]
 8013ba0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8013ba2:	6182      	str	r2, [r0, #24]
 8013ba4:	3301      	adds	r3, #1
 8013ba6:	61c4      	str	r4, [r0, #28]
 8013ba8:	d01f      	beq.n	8013bea <rcl_init+0x1c6>
 8013baa:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8013bae:	b94b      	cbnz	r3, 8013bc4 <rcl_init+0x1a0>
 8013bb0:	3030      	adds	r0, #48	@ 0x30
 8013bb2:	f000 f927 	bl	8013e04 <rcl_get_localhost_only>
 8013bb6:	4604      	mov	r4, r0
 8013bb8:	2800      	cmp	r0, #0
 8013bba:	d1d4      	bne.n	8013b66 <rcl_init+0x142>
 8013bbc:	f8d7 9000 	ldr.w	r9, [r7]
 8013bc0:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8013bc4:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 8013bc8:	3018      	adds	r0, #24
 8013bca:	f003 fa91 	bl	80170f0 <rmw_init>
 8013bce:	4604      	mov	r4, r0
 8013bd0:	2800      	cmp	r0, #0
 8013bd2:	d0d0      	beq.n	8013b76 <rcl_init+0x152>
 8013bd4:	f006 faf6 	bl	801a1c4 <rcl_convert_rmw_ret_to_rcl_ret>
 8013bd8:	4604      	mov	r4, r0
 8013bda:	e7c4      	b.n	8013b66 <rcl_init+0x142>
 8013bdc:	2201      	movs	r2, #1
 8013bde:	461c      	mov	r4, r3
 8013be0:	600a      	str	r2, [r1, #0]
 8013be2:	4613      	mov	r3, r2
 8013be4:	e7d9      	b.n	8013b9a <rcl_init+0x176>
 8013be6:	240a      	movs	r4, #10
 8013be8:	e7c5      	b.n	8013b76 <rcl_init+0x152>
 8013bea:	3024      	adds	r0, #36	@ 0x24
 8013bec:	f006 fafe 	bl	801a1ec <rcl_get_default_domain_id>
 8013bf0:	4604      	mov	r4, r0
 8013bf2:	2800      	cmp	r0, #0
 8013bf4:	d1b7      	bne.n	8013b66 <rcl_init+0x142>
 8013bf6:	f8d7 9000 	ldr.w	r9, [r7]
 8013bfa:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8013bfe:	e7d4      	b.n	8013baa <rcl_init+0x186>
 8013c00:	2000f15c 	.word	0x2000f15c

08013c04 <rcl_get_zero_initialized_init_options>:
 8013c04:	2000      	movs	r0, #0
 8013c06:	4770      	bx	lr

08013c08 <rcl_init_options_init>:
 8013c08:	b084      	sub	sp, #16
 8013c0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c0c:	b097      	sub	sp, #92	@ 0x5c
 8013c0e:	ae1d      	add	r6, sp, #116	@ 0x74
 8013c10:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8013c14:	2800      	cmp	r0, #0
 8013c16:	d058      	beq.n	8013cca <rcl_init_options_init+0xc2>
 8013c18:	6803      	ldr	r3, [r0, #0]
 8013c1a:	4605      	mov	r5, r0
 8013c1c:	b133      	cbz	r3, 8013c2c <rcl_init_options_init+0x24>
 8013c1e:	2464      	movs	r4, #100	@ 0x64
 8013c20:	4620      	mov	r0, r4
 8013c22:	b017      	add	sp, #92	@ 0x5c
 8013c24:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013c28:	b004      	add	sp, #16
 8013c2a:	4770      	bx	lr
 8013c2c:	4630      	mov	r0, r6
 8013c2e:	f7fb ff79 	bl	800fb24 <rcutils_allocator_is_valid>
 8013c32:	2800      	cmp	r0, #0
 8013c34:	d049      	beq.n	8013cca <rcl_init_options_init+0xc2>
 8013c36:	46b4      	mov	ip, r6
 8013c38:	ac11      	add	r4, sp, #68	@ 0x44
 8013c3a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013c40:	f8dc 3000 	ldr.w	r3, [ip]
 8013c44:	2050      	movs	r0, #80	@ 0x50
 8013c46:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8013c48:	6023      	str	r3, [r4, #0]
 8013c4a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013c4c:	4798      	blx	r3
 8013c4e:	4604      	mov	r4, r0
 8013c50:	6028      	str	r0, [r5, #0]
 8013c52:	2800      	cmp	r0, #0
 8013c54:	d03b      	beq.n	8013cce <rcl_init_options_init+0xc6>
 8013c56:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8013c5a:	4686      	mov	lr, r0
 8013c5c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013c60:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013c64:	f8dc 3000 	ldr.w	r3, [ip]
 8013c68:	a802      	add	r0, sp, #8
 8013c6a:	f8ce 3000 	str.w	r3, [lr]
 8013c6e:	f002 fe9b 	bl	80169a8 <rmw_get_zero_initialized_init_options>
 8013c72:	f10d 0e08 	add.w	lr, sp, #8
 8013c76:	f104 0c18 	add.w	ip, r4, #24
 8013c7a:	682f      	ldr	r7, [r5, #0]
 8013c7c:	ac20      	add	r4, sp, #128	@ 0x80
 8013c7e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013c82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013c86:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013c8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013c8e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013c92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013c96:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013c9a:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013c9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013ca2:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013ca6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8013caa:	f107 0018 	add.w	r0, r7, #24
 8013cae:	f003 f8ff 	bl	8016eb0 <rmw_init_options_init>
 8013cb2:	4604      	mov	r4, r0
 8013cb4:	2800      	cmp	r0, #0
 8013cb6:	d0b3      	beq.n	8013c20 <rcl_init_options_init+0x18>
 8013cb8:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8013cba:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8013cbc:	6828      	ldr	r0, [r5, #0]
 8013cbe:	4798      	blx	r3
 8013cc0:	4620      	mov	r0, r4
 8013cc2:	f006 fa7f 	bl	801a1c4 <rcl_convert_rmw_ret_to_rcl_ret>
 8013cc6:	4604      	mov	r4, r0
 8013cc8:	e7aa      	b.n	8013c20 <rcl_init_options_init+0x18>
 8013cca:	240b      	movs	r4, #11
 8013ccc:	e7a8      	b.n	8013c20 <rcl_init_options_init+0x18>
 8013cce:	240a      	movs	r4, #10
 8013cd0:	e7a6      	b.n	8013c20 <rcl_init_options_init+0x18>
 8013cd2:	bf00      	nop

08013cd4 <rcl_init_options_fini>:
 8013cd4:	b530      	push	{r4, r5, lr}
 8013cd6:	b087      	sub	sp, #28
 8013cd8:	b1f0      	cbz	r0, 8013d18 <rcl_init_options_fini+0x44>
 8013cda:	6803      	ldr	r3, [r0, #0]
 8013cdc:	4604      	mov	r4, r0
 8013cde:	b1db      	cbz	r3, 8013d18 <rcl_init_options_fini+0x44>
 8013ce0:	469c      	mov	ip, r3
 8013ce2:	f10d 0e04 	add.w	lr, sp, #4
 8013ce6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013cea:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013cee:	f8dc 3000 	ldr.w	r3, [ip]
 8013cf2:	a801      	add	r0, sp, #4
 8013cf4:	f8ce 3000 	str.w	r3, [lr]
 8013cf8:	f7fb ff14 	bl	800fb24 <rcutils_allocator_is_valid>
 8013cfc:	b160      	cbz	r0, 8013d18 <rcl_init_options_fini+0x44>
 8013cfe:	6820      	ldr	r0, [r4, #0]
 8013d00:	3018      	adds	r0, #24
 8013d02:	f003 f9ad 	bl	8017060 <rmw_init_options_fini>
 8013d06:	4605      	mov	r5, r0
 8013d08:	b950      	cbnz	r0, 8013d20 <rcl_init_options_fini+0x4c>
 8013d0a:	6820      	ldr	r0, [r4, #0]
 8013d0c:	9b02      	ldr	r3, [sp, #8]
 8013d0e:	9905      	ldr	r1, [sp, #20]
 8013d10:	4798      	blx	r3
 8013d12:	4628      	mov	r0, r5
 8013d14:	b007      	add	sp, #28
 8013d16:	bd30      	pop	{r4, r5, pc}
 8013d18:	250b      	movs	r5, #11
 8013d1a:	4628      	mov	r0, r5
 8013d1c:	b007      	add	sp, #28
 8013d1e:	bd30      	pop	{r4, r5, pc}
 8013d20:	f006 fa50 	bl	801a1c4 <rcl_convert_rmw_ret_to_rcl_ret>
 8013d24:	4605      	mov	r5, r0
 8013d26:	e7f8      	b.n	8013d1a <rcl_init_options_fini+0x46>

08013d28 <rcl_init_options_copy>:
 8013d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d2c:	b094      	sub	sp, #80	@ 0x50
 8013d2e:	2800      	cmp	r0, #0
 8013d30:	d05b      	beq.n	8013dea <rcl_init_options_copy+0xc2>
 8013d32:	4604      	mov	r4, r0
 8013d34:	6800      	ldr	r0, [r0, #0]
 8013d36:	2800      	cmp	r0, #0
 8013d38:	d057      	beq.n	8013dea <rcl_init_options_copy+0xc2>
 8013d3a:	460e      	mov	r6, r1
 8013d3c:	f7fb fef2 	bl	800fb24 <rcutils_allocator_is_valid>
 8013d40:	2e00      	cmp	r6, #0
 8013d42:	d052      	beq.n	8013dea <rcl_init_options_copy+0xc2>
 8013d44:	f080 0001 	eor.w	r0, r0, #1
 8013d48:	b2c0      	uxtb	r0, r0
 8013d4a:	2800      	cmp	r0, #0
 8013d4c:	d14d      	bne.n	8013dea <rcl_init_options_copy+0xc2>
 8013d4e:	6833      	ldr	r3, [r6, #0]
 8013d50:	b123      	cbz	r3, 8013d5c <rcl_init_options_copy+0x34>
 8013d52:	2464      	movs	r4, #100	@ 0x64
 8013d54:	4620      	mov	r0, r4
 8013d56:	b014      	add	sp, #80	@ 0x50
 8013d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d5c:	6827      	ldr	r7, [r4, #0]
 8013d5e:	ad0f      	add	r5, sp, #60	@ 0x3c
 8013d60:	46bc      	mov	ip, r7
 8013d62:	f8d7 8000 	ldr.w	r8, [r7]
 8013d66:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013d6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013d6c:	f8dc 3000 	ldr.w	r3, [ip]
 8013d70:	2050      	movs	r0, #80	@ 0x50
 8013d72:	4619      	mov	r1, r3
 8013d74:	602b      	str	r3, [r5, #0]
 8013d76:	47c0      	blx	r8
 8013d78:	4605      	mov	r5, r0
 8013d7a:	6030      	str	r0, [r6, #0]
 8013d7c:	b3d0      	cbz	r0, 8013df4 <rcl_init_options_copy+0xcc>
 8013d7e:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8013d82:	4686      	mov	lr, r0
 8013d84:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013d88:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013d8c:	f8dc 3000 	ldr.w	r3, [ip]
 8013d90:	4668      	mov	r0, sp
 8013d92:	f8ce 3000 	str.w	r3, [lr]
 8013d96:	f002 fe07 	bl	80169a8 <rmw_get_zero_initialized_init_options>
 8013d9a:	46ee      	mov	lr, sp
 8013d9c:	f105 0c18 	add.w	ip, r5, #24
 8013da0:	6824      	ldr	r4, [r4, #0]
 8013da2:	6835      	ldr	r5, [r6, #0]
 8013da4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013da8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013dac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013db0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013db4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013db8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013dbc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013dc0:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013dc4:	f104 0018 	add.w	r0, r4, #24
 8013dc8:	f105 0118 	add.w	r1, r5, #24
 8013dcc:	f003 f8d2 	bl	8016f74 <rmw_init_options_copy>
 8013dd0:	4604      	mov	r4, r0
 8013dd2:	2800      	cmp	r0, #0
 8013dd4:	d0be      	beq.n	8013d54 <rcl_init_options_copy+0x2c>
 8013dd6:	f7fb feb3 	bl	800fb40 <rcutils_get_error_string>
 8013dda:	f7fb fec9 	bl	800fb70 <rcutils_reset_error>
 8013dde:	4630      	mov	r0, r6
 8013de0:	f7ff ff78 	bl	8013cd4 <rcl_init_options_fini>
 8013de4:	b140      	cbz	r0, 8013df8 <rcl_init_options_copy+0xd0>
 8013de6:	4604      	mov	r4, r0
 8013de8:	e7b4      	b.n	8013d54 <rcl_init_options_copy+0x2c>
 8013dea:	240b      	movs	r4, #11
 8013dec:	4620      	mov	r0, r4
 8013dee:	b014      	add	sp, #80	@ 0x50
 8013df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013df4:	240a      	movs	r4, #10
 8013df6:	e7ad      	b.n	8013d54 <rcl_init_options_copy+0x2c>
 8013df8:	4620      	mov	r0, r4
 8013dfa:	b014      	add	sp, #80	@ 0x50
 8013dfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e00:	f006 b9e0 	b.w	801a1c4 <rcl_convert_rmw_ret_to_rcl_ret>

08013e04 <rcl_get_localhost_only>:
 8013e04:	b510      	push	{r4, lr}
 8013e06:	2300      	movs	r3, #0
 8013e08:	b082      	sub	sp, #8
 8013e0a:	9301      	str	r3, [sp, #4]
 8013e0c:	b1b8      	cbz	r0, 8013e3e <rcl_get_localhost_only+0x3a>
 8013e0e:	4604      	mov	r4, r0
 8013e10:	a901      	add	r1, sp, #4
 8013e12:	480c      	ldr	r0, [pc, #48]	@ (8013e44 <rcl_get_localhost_only+0x40>)
 8013e14:	f002 faf4 	bl	8016400 <rcutils_get_env>
 8013e18:	b110      	cbz	r0, 8013e20 <rcl_get_localhost_only+0x1c>
 8013e1a:	2001      	movs	r0, #1
 8013e1c:	b002      	add	sp, #8
 8013e1e:	bd10      	pop	{r4, pc}
 8013e20:	9b01      	ldr	r3, [sp, #4]
 8013e22:	b113      	cbz	r3, 8013e2a <rcl_get_localhost_only+0x26>
 8013e24:	781a      	ldrb	r2, [r3, #0]
 8013e26:	2a31      	cmp	r2, #49	@ 0x31
 8013e28:	d004      	beq.n	8013e34 <rcl_get_localhost_only+0x30>
 8013e2a:	2302      	movs	r3, #2
 8013e2c:	2000      	movs	r0, #0
 8013e2e:	7023      	strb	r3, [r4, #0]
 8013e30:	b002      	add	sp, #8
 8013e32:	bd10      	pop	{r4, pc}
 8013e34:	785b      	ldrb	r3, [r3, #1]
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d1f7      	bne.n	8013e2a <rcl_get_localhost_only+0x26>
 8013e3a:	2301      	movs	r3, #1
 8013e3c:	e7f6      	b.n	8013e2c <rcl_get_localhost_only+0x28>
 8013e3e:	200b      	movs	r0, #11
 8013e40:	b002      	add	sp, #8
 8013e42:	bd10      	pop	{r4, pc}
 8013e44:	0801cc08 	.word	0x0801cc08

08013e48 <rcl_get_zero_initialized_node>:
 8013e48:	4a03      	ldr	r2, [pc, #12]	@ (8013e58 <rcl_get_zero_initialized_node+0x10>)
 8013e4a:	4603      	mov	r3, r0
 8013e4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013e50:	e883 0003 	stmia.w	r3, {r0, r1}
 8013e54:	4618      	mov	r0, r3
 8013e56:	4770      	bx	lr
 8013e58:	0801d3a8 	.word	0x0801d3a8

08013e5c <rcl_node_init>:
 8013e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e60:	b0a9      	sub	sp, #164	@ 0xa4
 8013e62:	4604      	mov	r4, r0
 8013e64:	460e      	mov	r6, r1
 8013e66:	4615      	mov	r5, r2
 8013e68:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8013e6c:	a823      	add	r0, sp, #140	@ 0x8c
 8013e6e:	461f      	mov	r7, r3
 8013e70:	f006 fbe2 	bl	801a638 <rcl_guard_condition_get_default_options>
 8013e74:	f1b8 0f00 	cmp.w	r8, #0
 8013e78:	f000 80f3 	beq.w	8014062 <rcl_node_init+0x206>
 8013e7c:	4640      	mov	r0, r8
 8013e7e:	f7fb fe51 	bl	800fb24 <rcutils_allocator_is_valid>
 8013e82:	2d00      	cmp	r5, #0
 8013e84:	bf18      	it	ne
 8013e86:	2c00      	cmpne	r4, #0
 8013e88:	f080 0001 	eor.w	r0, r0, #1
 8013e8c:	bf0c      	ite	eq
 8013e8e:	f04f 0c01 	moveq.w	ip, #1
 8013e92:	f04f 0c00 	movne.w	ip, #0
 8013e96:	2e00      	cmp	r6, #0
 8013e98:	bf08      	it	eq
 8013e9a:	f04c 0c01 	orreq.w	ip, ip, #1
 8013e9e:	ea4c 0c00 	orr.w	ip, ip, r0
 8013ea2:	f01c 09ff 	ands.w	r9, ip, #255	@ 0xff
 8013ea6:	f040 80dc 	bne.w	8014062 <rcl_node_init+0x206>
 8013eaa:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8013eae:	f1ba 0f00 	cmp.w	sl, #0
 8013eb2:	f040 80fc 	bne.w	80140ae <rcl_node_init+0x252>
 8013eb6:	2f00      	cmp	r7, #0
 8013eb8:	f000 80d3 	beq.w	8014062 <rcl_node_init+0x206>
 8013ebc:	4638      	mov	r0, r7
 8013ebe:	f7ff fd4b 	bl	8013958 <rcl_context_is_valid>
 8013ec2:	4683      	mov	fp, r0
 8013ec4:	2800      	cmp	r0, #0
 8013ec6:	f000 80d2 	beq.w	801406e <rcl_node_init+0x212>
 8013eca:	4652      	mov	r2, sl
 8013ecc:	4630      	mov	r0, r6
 8013ece:	a922      	add	r1, sp, #136	@ 0x88
 8013ed0:	f8cd a088 	str.w	sl, [sp, #136]	@ 0x88
 8013ed4:	f002 ff1e 	bl	8016d14 <rmw_validate_node_name>
 8013ed8:	4682      	mov	sl, r0
 8013eda:	2800      	cmp	r0, #0
 8013edc:	f040 80c3 	bne.w	8014066 <rcl_node_init+0x20a>
 8013ee0:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8013ee2:	2800      	cmp	r0, #0
 8013ee4:	f040 80f1 	bne.w	80140ca <rcl_node_init+0x26e>
 8013ee8:	4628      	mov	r0, r5
 8013eea:	f7ec f9b3 	bl	8000254 <strlen>
 8013eee:	2800      	cmp	r0, #0
 8013ef0:	f040 80c0 	bne.w	8014074 <rcl_node_init+0x218>
 8013ef4:	4d79      	ldr	r5, [pc, #484]	@ (80140dc <rcl_node_init+0x280>)
 8013ef6:	a922      	add	r1, sp, #136	@ 0x88
 8013ef8:	2200      	movs	r2, #0
 8013efa:	4628      	mov	r0, r5
 8013efc:	f002 feec 	bl	8016cd8 <rmw_validate_namespace>
 8013f00:	4682      	mov	sl, r0
 8013f02:	2800      	cmp	r0, #0
 8013f04:	f040 80af 	bne.w	8014066 <rcl_node_init+0x20a>
 8013f08:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8013f0a:	2800      	cmp	r0, #0
 8013f0c:	f040 80d5 	bne.w	80140ba <rcl_node_init+0x25e>
 8013f10:	f8d8 3000 	ldr.w	r3, [r8]
 8013f14:	2078      	movs	r0, #120	@ 0x78
 8013f16:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013f1a:	4798      	blx	r3
 8013f1c:	4682      	mov	sl, r0
 8013f1e:	6060      	str	r0, [r4, #4]
 8013f20:	2800      	cmp	r0, #0
 8013f22:	f000 80cf 	beq.w	80140c4 <rcl_node_init+0x268>
 8013f26:	2200      	movs	r2, #0
 8013f28:	2300      	movs	r3, #0
 8013f2a:	a808      	add	r0, sp, #32
 8013f2c:	e9ca 231a 	strd	r2, r3, [sl, #104]	@ 0x68
 8013f30:	e9ca 231c 	strd	r2, r3, [sl, #112]	@ 0x70
 8013f34:	f000 f902 	bl	801413c <rcl_node_get_default_options>
 8013f38:	a908      	add	r1, sp, #32
 8013f3a:	4650      	mov	r0, sl
 8013f3c:	2268      	movs	r2, #104	@ 0x68
 8013f3e:	f007 fc14 	bl	801b76a <memcpy>
 8013f42:	6861      	ldr	r1, [r4, #4]
 8013f44:	4640      	mov	r0, r8
 8013f46:	6027      	str	r7, [r4, #0]
 8013f48:	f000 f906 	bl	8014158 <rcl_node_options_copy>
 8013f4c:	2800      	cmp	r0, #0
 8013f4e:	d158      	bne.n	8014002 <rcl_node_init+0x1a6>
 8013f50:	4628      	mov	r0, r5
 8013f52:	f7ec f97f 	bl	8000254 <strlen>
 8013f56:	4428      	add	r0, r5
 8013f58:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8013f5c:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8013f60:	2b2f      	cmp	r3, #47	@ 0x2f
 8013f62:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013f66:	9300      	str	r3, [sp, #0]
 8013f68:	bf0c      	ite	eq
 8013f6a:	4b5d      	ldreq	r3, [pc, #372]	@ (80140e0 <rcl_node_init+0x284>)
 8013f6c:	4b5d      	ldrne	r3, [pc, #372]	@ (80140e4 <rcl_node_init+0x288>)
 8013f6e:	9302      	str	r3, [sp, #8]
 8013f70:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013f74:	9301      	str	r3, [sp, #4]
 8013f76:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8013f7a:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8013f7e:	f002 fa57 	bl	8016430 <rcutils_format_string_limit>
 8013f82:	6823      	ldr	r3, [r4, #0]
 8013f84:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 8013f88:	4631      	mov	r1, r6
 8013f8a:	6818      	ldr	r0, [r3, #0]
 8013f8c:	462a      	mov	r2, r5
 8013f8e:	6866      	ldr	r6, [r4, #4]
 8013f90:	3028      	adds	r0, #40	@ 0x28
 8013f92:	f003 fa95 	bl	80174c0 <rmw_create_node>
 8013f96:	6863      	ldr	r3, [r4, #4]
 8013f98:	66b0      	str	r0, [r6, #104]	@ 0x68
 8013f9a:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8013f9c:	2800      	cmp	r0, #0
 8013f9e:	d032      	beq.n	8014006 <rcl_node_init+0x1aa>
 8013fa0:	f003 fb1e 	bl	80175e0 <rmw_node_get_graph_guard_condition>
 8013fa4:	4682      	mov	sl, r0
 8013fa6:	b360      	cbz	r0, 8014002 <rcl_node_init+0x1a6>
 8013fa8:	f8d8 3000 	ldr.w	r3, [r8]
 8013fac:	2008      	movs	r0, #8
 8013fae:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013fb2:	6866      	ldr	r6, [r4, #4]
 8013fb4:	4798      	blx	r3
 8013fb6:	6863      	ldr	r3, [r4, #4]
 8013fb8:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8013fba:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8013fbe:	f1bb 0f00 	cmp.w	fp, #0
 8013fc2:	d020      	beq.n	8014006 <rcl_node_init+0x1aa>
 8013fc4:	a806      	add	r0, sp, #24
 8013fc6:	ae23      	add	r6, sp, #140	@ 0x8c
 8013fc8:	f006 faaa 	bl	801a520 <rcl_get_zero_initialized_guard_condition>
 8013fcc:	a806      	add	r0, sp, #24
 8013fce:	6863      	ldr	r3, [r4, #4]
 8013fd0:	46c4      	mov	ip, r8
 8013fd2:	c803      	ldmia	r0, {r0, r1}
 8013fd4:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8013fd8:	e88b 0003 	stmia.w	fp, {r0, r1}
 8013fdc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013fe0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013fe2:	f8dc 3000 	ldr.w	r3, [ip]
 8013fe6:	6033      	str	r3, [r6, #0]
 8013fe8:	ab28      	add	r3, sp, #160	@ 0xa0
 8013fea:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8013fee:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013ff2:	4651      	mov	r1, sl
 8013ff4:	463a      	mov	r2, r7
 8013ff6:	4670      	mov	r0, lr
 8013ff8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013ffa:	f006 fa9b 	bl	801a534 <rcl_guard_condition_init_from_rmw>
 8013ffe:	4682      	mov	sl, r0
 8014000:	b328      	cbz	r0, 801404e <rcl_node_init+0x1f2>
 8014002:	6863      	ldr	r3, [r4, #4]
 8014004:	b1f3      	cbz	r3, 8014044 <rcl_node_init+0x1e8>
 8014006:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8014008:	b128      	cbz	r0, 8014016 <rcl_node_init+0x1ba>
 801400a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801400e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014012:	4798      	blx	r3
 8014014:	6863      	ldr	r3, [r4, #4]
 8014016:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8014018:	b110      	cbz	r0, 8014020 <rcl_node_init+0x1c4>
 801401a:	f003 fa63 	bl	80174e4 <rmw_destroy_node>
 801401e:	6863      	ldr	r3, [r4, #4]
 8014020:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8014022:	b148      	cbz	r0, 8014038 <rcl_node_init+0x1dc>
 8014024:	f006 fae2 	bl	801a5ec <rcl_guard_condition_fini>
 8014028:	6863      	ldr	r3, [r4, #4]
 801402a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801402e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8014030:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014034:	4798      	blx	r3
 8014036:	6863      	ldr	r3, [r4, #4]
 8014038:	4618      	mov	r0, r3
 801403a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801403e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014042:	4798      	blx	r3
 8014044:	2300      	movs	r3, #0
 8014046:	f04f 0a01 	mov.w	sl, #1
 801404a:	e9c4 3300 	strd	r3, r3, [r4]
 801404e:	f1b9 0f00 	cmp.w	r9, #0
 8014052:	d008      	beq.n	8014066 <rcl_node_init+0x20a>
 8014054:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014058:	4628      	mov	r0, r5
 801405a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801405e:	4798      	blx	r3
 8014060:	e001      	b.n	8014066 <rcl_node_init+0x20a>
 8014062:	f04f 0a0b 	mov.w	sl, #11
 8014066:	4650      	mov	r0, sl
 8014068:	b029      	add	sp, #164	@ 0xa4
 801406a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801406e:	f04f 0a65 	mov.w	sl, #101	@ 0x65
 8014072:	e7f8      	b.n	8014066 <rcl_node_init+0x20a>
 8014074:	782b      	ldrb	r3, [r5, #0]
 8014076:	2b2f      	cmp	r3, #47	@ 0x2f
 8014078:	f43f af3d 	beq.w	8013ef6 <rcl_node_init+0x9a>
 801407c:	9503      	str	r5, [sp, #12]
 801407e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014082:	9300      	str	r3, [sp, #0]
 8014084:	4b18      	ldr	r3, [pc, #96]	@ (80140e8 <rcl_node_init+0x28c>)
 8014086:	9302      	str	r3, [sp, #8]
 8014088:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801408c:	9301      	str	r3, [sp, #4]
 801408e:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8014092:	f002 f9cd 	bl	8016430 <rcutils_format_string_limit>
 8014096:	4605      	mov	r5, r0
 8014098:	b1e0      	cbz	r0, 80140d4 <rcl_node_init+0x278>
 801409a:	2200      	movs	r2, #0
 801409c:	a922      	add	r1, sp, #136	@ 0x88
 801409e:	9222      	str	r2, [sp, #136]	@ 0x88
 80140a0:	f002 fe1a 	bl	8016cd8 <rmw_validate_namespace>
 80140a4:	4682      	mov	sl, r0
 80140a6:	2800      	cmp	r0, #0
 80140a8:	d1d4      	bne.n	8014054 <rcl_node_init+0x1f8>
 80140aa:	46d9      	mov	r9, fp
 80140ac:	e72c      	b.n	8013f08 <rcl_node_init+0xac>
 80140ae:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 80140b2:	4650      	mov	r0, sl
 80140b4:	b029      	add	sp, #164	@ 0xa4
 80140b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140ba:	f04f 0aca 	mov.w	sl, #202	@ 0xca
 80140be:	f002 fe1d 	bl	8016cfc <rmw_namespace_validation_result_string>
 80140c2:	e7c4      	b.n	801404e <rcl_node_init+0x1f2>
 80140c4:	f04f 0a0a 	mov.w	sl, #10
 80140c8:	e7c1      	b.n	801404e <rcl_node_init+0x1f2>
 80140ca:	f04f 0ac9 	mov.w	sl, #201	@ 0xc9
 80140ce:	f002 fe75 	bl	8016dbc <rmw_node_name_validation_result_string>
 80140d2:	e7c8      	b.n	8014066 <rcl_node_init+0x20a>
 80140d4:	f04f 0a0a 	mov.w	sl, #10
 80140d8:	e7c5      	b.n	8014066 <rcl_node_init+0x20a>
 80140da:	bf00      	nop
 80140dc:	0801cc20 	.word	0x0801cc20
 80140e0:	0801cc28 	.word	0x0801cc28
 80140e4:	0801cc30 	.word	0x0801cc30
 80140e8:	0801cc24 	.word	0x0801cc24

080140ec <rcl_node_is_valid>:
 80140ec:	b130      	cbz	r0, 80140fc <rcl_node_is_valid+0x10>
 80140ee:	6843      	ldr	r3, [r0, #4]
 80140f0:	b123      	cbz	r3, 80140fc <rcl_node_is_valid+0x10>
 80140f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80140f4:	b113      	cbz	r3, 80140fc <rcl_node_is_valid+0x10>
 80140f6:	6800      	ldr	r0, [r0, #0]
 80140f8:	f7ff bc2e 	b.w	8013958 <rcl_context_is_valid>
 80140fc:	2000      	movs	r0, #0
 80140fe:	4770      	bx	lr

08014100 <rcl_node_get_name>:
 8014100:	b120      	cbz	r0, 801410c <rcl_node_get_name+0xc>
 8014102:	6840      	ldr	r0, [r0, #4]
 8014104:	b110      	cbz	r0, 801410c <rcl_node_get_name+0xc>
 8014106:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014108:	b100      	cbz	r0, 801410c <rcl_node_get_name+0xc>
 801410a:	6880      	ldr	r0, [r0, #8]
 801410c:	4770      	bx	lr
 801410e:	bf00      	nop

08014110 <rcl_node_get_namespace>:
 8014110:	b120      	cbz	r0, 801411c <rcl_node_get_namespace+0xc>
 8014112:	6840      	ldr	r0, [r0, #4]
 8014114:	b110      	cbz	r0, 801411c <rcl_node_get_namespace+0xc>
 8014116:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014118:	b100      	cbz	r0, 801411c <rcl_node_get_namespace+0xc>
 801411a:	68c0      	ldr	r0, [r0, #12]
 801411c:	4770      	bx	lr
 801411e:	bf00      	nop

08014120 <rcl_node_get_options>:
 8014120:	b128      	cbz	r0, 801412e <rcl_node_get_options+0xe>
 8014122:	6840      	ldr	r0, [r0, #4]
 8014124:	b118      	cbz	r0, 801412e <rcl_node_get_options+0xe>
 8014126:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8014128:	2b00      	cmp	r3, #0
 801412a:	bf08      	it	eq
 801412c:	2000      	moveq	r0, #0
 801412e:	4770      	bx	lr

08014130 <rcl_node_get_rmw_handle>:
 8014130:	b110      	cbz	r0, 8014138 <rcl_node_get_rmw_handle+0x8>
 8014132:	6840      	ldr	r0, [r0, #4]
 8014134:	b100      	cbz	r0, 8014138 <rcl_node_get_rmw_handle+0x8>
 8014136:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014138:	4770      	bx	lr
 801413a:	bf00      	nop

0801413c <rcl_node_get_default_options>:
 801413c:	b510      	push	{r4, lr}
 801413e:	4604      	mov	r4, r0
 8014140:	2268      	movs	r2, #104	@ 0x68
 8014142:	2100      	movs	r1, #0
 8014144:	f007 fa48 	bl	801b5d8 <memset>
 8014148:	4620      	mov	r0, r4
 801414a:	f7fb fcdd 	bl	800fb08 <rcutils_get_default_allocator>
 801414e:	2301      	movs	r3, #1
 8014150:	4620      	mov	r0, r4
 8014152:	7523      	strb	r3, [r4, #20]
 8014154:	bd10      	pop	{r4, pc}
 8014156:	bf00      	nop

08014158 <rcl_node_options_copy>:
 8014158:	2800      	cmp	r0, #0
 801415a:	bf18      	it	ne
 801415c:	4288      	cmpne	r0, r1
 801415e:	d01b      	beq.n	8014198 <rcl_node_options_copy+0x40>
 8014160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014162:	fab1 f681 	clz	r6, r1
 8014166:	460c      	mov	r4, r1
 8014168:	0976      	lsrs	r6, r6, #5
 801416a:	b199      	cbz	r1, 8014194 <rcl_node_options_copy+0x3c>
 801416c:	4605      	mov	r5, r0
 801416e:	8a87      	ldrh	r7, [r0, #20]
 8014170:	4684      	mov	ip, r0
 8014172:	468e      	mov	lr, r1
 8014174:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014176:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801417a:	682b      	ldr	r3, [r5, #0]
 801417c:	2250      	movs	r2, #80	@ 0x50
 801417e:	f10c 0118 	add.w	r1, ip, #24
 8014182:	f104 0018 	add.w	r0, r4, #24
 8014186:	f8ce 3000 	str.w	r3, [lr]
 801418a:	82a7      	strh	r7, [r4, #20]
 801418c:	f007 faed 	bl	801b76a <memcpy>
 8014190:	4630      	mov	r0, r6
 8014192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014194:	200b      	movs	r0, #11
 8014196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014198:	200b      	movs	r0, #11
 801419a:	4770      	bx	lr

0801419c <rcl_node_resolve_name>:
 801419c:	b082      	sub	sp, #8
 801419e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141a2:	b091      	sub	sp, #68	@ 0x44
 80141a4:	ac1a      	add	r4, sp, #104	@ 0x68
 80141a6:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 80141aa:	e884 000c 	stmia.w	r4, {r2, r3}
 80141ae:	2800      	cmp	r0, #0
 80141b0:	d03d      	beq.n	801422e <rcl_node_resolve_name+0x92>
 80141b2:	460c      	mov	r4, r1
 80141b4:	4605      	mov	r5, r0
 80141b6:	f7ff ffb3 	bl	8014120 <rcl_node_get_options>
 80141ba:	2800      	cmp	r0, #0
 80141bc:	d03a      	beq.n	8014234 <rcl_node_resolve_name+0x98>
 80141be:	4628      	mov	r0, r5
 80141c0:	f7ff ff9e 	bl	8014100 <rcl_node_get_name>
 80141c4:	4606      	mov	r6, r0
 80141c6:	4628      	mov	r0, r5
 80141c8:	ad0b      	add	r5, sp, #44	@ 0x2c
 80141ca:	f7ff ffa1 	bl	8014110 <rcl_node_get_namespace>
 80141ce:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 80141d2:	4607      	mov	r7, r0
 80141d4:	46ac      	mov	ip, r5
 80141d6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80141da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80141de:	f8de 3000 	ldr.w	r3, [lr]
 80141e2:	f8cc 3000 	str.w	r3, [ip]
 80141e6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80141e8:	b30b      	cbz	r3, 801422e <rcl_node_resolve_name+0x92>
 80141ea:	4689      	mov	r9, r1
 80141ec:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 80141f0:	f002 fa96 	bl	8016720 <rcutils_get_zero_initialized_string_map>
 80141f4:	ab10      	add	r3, sp, #64	@ 0x40
 80141f6:	9008      	str	r0, [sp, #32]
 80141f8:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80141fc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014200:	2100      	movs	r1, #0
 8014202:	a808      	add	r0, sp, #32
 8014204:	e895 000c 	ldmia.w	r5, {r2, r3}
 8014208:	f002 fb00 	bl	801680c <rcutils_string_map_init>
 801420c:	4683      	mov	fp, r0
 801420e:	b1a0      	cbz	r0, 801423a <rcl_node_resolve_name+0x9e>
 8014210:	f7fb fc96 	bl	800fb40 <rcutils_get_error_string>
 8014214:	f7fb fcac 	bl	800fb70 <rcutils_reset_error>
 8014218:	f1bb 0f0a 	cmp.w	fp, #10
 801421c:	bf18      	it	ne
 801421e:	f04f 0b01 	movne.w	fp, #1
 8014222:	4658      	mov	r0, fp
 8014224:	b011      	add	sp, #68	@ 0x44
 8014226:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801422a:	b002      	add	sp, #8
 801422c:	4770      	bx	lr
 801422e:	f04f 0b0b 	mov.w	fp, #11
 8014232:	e7f6      	b.n	8014222 <rcl_node_resolve_name+0x86>
 8014234:	f04f 0b01 	mov.w	fp, #1
 8014238:	e7f3      	b.n	8014222 <rcl_node_resolve_name+0x86>
 801423a:	9009      	str	r0, [sp, #36]	@ 0x24
 801423c:	9007      	str	r0, [sp, #28]
 801423e:	a808      	add	r0, sp, #32
 8014240:	f006 f968 	bl	801a514 <rcl_get_default_topic_name_substitutions>
 8014244:	4683      	mov	fp, r0
 8014246:	b180      	cbz	r0, 801426a <rcl_node_resolve_name+0xce>
 8014248:	280a      	cmp	r0, #10
 801424a:	a808      	add	r0, sp, #32
 801424c:	bf18      	it	ne
 801424e:	f04f 0b01 	movne.w	fp, #1
 8014252:	f002 fb1b 	bl	801688c <rcutils_string_map_fini>
 8014256:	4604      	mov	r4, r0
 8014258:	2800      	cmp	r0, #0
 801425a:	d15b      	bne.n	8014314 <rcl_node_resolve_name+0x178>
 801425c:	4651      	mov	r1, sl
 801425e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014260:	47c8      	blx	r9
 8014262:	4651      	mov	r1, sl
 8014264:	4620      	mov	r0, r4
 8014266:	47c8      	blx	r9
 8014268:	e7db      	b.n	8014222 <rcl_node_resolve_name+0x86>
 801426a:	ab09      	add	r3, sp, #36	@ 0x24
 801426c:	46ec      	mov	ip, sp
 801426e:	9305      	str	r3, [sp, #20]
 8014270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014272:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014276:	682b      	ldr	r3, [r5, #0]
 8014278:	463a      	mov	r2, r7
 801427a:	4631      	mov	r1, r6
 801427c:	4620      	mov	r0, r4
 801427e:	f8cc 3000 	str.w	r3, [ip]
 8014282:	ab08      	add	r3, sp, #32
 8014284:	f005 ffe6 	bl	801a254 <rcl_expand_topic_name>
 8014288:	4683      	mov	fp, r0
 801428a:	b9d8      	cbnz	r0, 80142c4 <rcl_node_resolve_name+0x128>
 801428c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801428e:	4602      	mov	r2, r0
 8014290:	9009      	str	r0, [sp, #36]	@ 0x24
 8014292:	a90a      	add	r1, sp, #40	@ 0x28
 8014294:	4620      	mov	r0, r4
 8014296:	f002 fc4f 	bl	8016b38 <rmw_validate_full_topic_name>
 801429a:	bb50      	cbnz	r0, 80142f2 <rcl_node_resolve_name+0x156>
 801429c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801429e:	2d00      	cmp	r5, #0
 80142a0:	d140      	bne.n	8014324 <rcl_node_resolve_name+0x188>
 80142a2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80142a4:	a808      	add	r0, sp, #32
 80142a6:	601c      	str	r4, [r3, #0]
 80142a8:	f002 faf0 	bl	801688c <rcutils_string_map_fini>
 80142ac:	4683      	mov	fp, r0
 80142ae:	2800      	cmp	r0, #0
 80142b0:	d043      	beq.n	801433a <rcl_node_resolve_name+0x19e>
 80142b2:	f7fb fc45 	bl	800fb40 <rcutils_get_error_string>
 80142b6:	46a8      	mov	r8, r5
 80142b8:	f04f 0b01 	mov.w	fp, #1
 80142bc:	462c      	mov	r4, r5
 80142be:	f7fb fc57 	bl	800fb70 <rcutils_reset_error>
 80142c2:	e00a      	b.n	80142da <rcl_node_resolve_name+0x13e>
 80142c4:	2867      	cmp	r0, #103	@ 0x67
 80142c6:	bf14      	ite	ne
 80142c8:	f04f 0800 	movne.w	r8, #0
 80142cc:	f008 0801 	andeq.w	r8, r8, #1
 80142d0:	9c07      	ldr	r4, [sp, #28]
 80142d2:	a808      	add	r0, sp, #32
 80142d4:	f002 fada 	bl	801688c <rcutils_string_map_fini>
 80142d8:	bb50      	cbnz	r0, 8014330 <rcl_node_resolve_name+0x194>
 80142da:	4651      	mov	r1, sl
 80142dc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80142de:	47c8      	blx	r9
 80142e0:	4651      	mov	r1, sl
 80142e2:	4620      	mov	r0, r4
 80142e4:	47c8      	blx	r9
 80142e6:	f1b8 0f00 	cmp.w	r8, #0
 80142ea:	bf18      	it	ne
 80142ec:	f04f 0b68 	movne.w	fp, #104	@ 0x68
 80142f0:	e797      	b.n	8014222 <rcl_node_resolve_name+0x86>
 80142f2:	f7fb fc25 	bl	800fb40 <rcutils_get_error_string>
 80142f6:	f7fb fc3b 	bl	800fb70 <rcutils_reset_error>
 80142fa:	a808      	add	r0, sp, #32
 80142fc:	f002 fac6 	bl	801688c <rcutils_string_map_fini>
 8014300:	b998      	cbnz	r0, 801432a <rcl_node_resolve_name+0x18e>
 8014302:	4651      	mov	r1, sl
 8014304:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014306:	47c8      	blx	r9
 8014308:	4651      	mov	r1, sl
 801430a:	4620      	mov	r0, r4
 801430c:	f04f 0b01 	mov.w	fp, #1
 8014310:	47c8      	blx	r9
 8014312:	e786      	b.n	8014222 <rcl_node_resolve_name+0x86>
 8014314:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8014318:	f7fb fc12 	bl	800fb40 <rcutils_get_error_string>
 801431c:	f7fb fc28 	bl	800fb70 <rcutils_reset_error>
 8014320:	4644      	mov	r4, r8
 8014322:	e7da      	b.n	80142da <rcl_node_resolve_name+0x13e>
 8014324:	f04f 0b67 	mov.w	fp, #103	@ 0x67
 8014328:	e7d3      	b.n	80142d2 <rcl_node_resolve_name+0x136>
 801432a:	46d8      	mov	r8, fp
 801432c:	f04f 0b01 	mov.w	fp, #1
 8014330:	f7fb fc06 	bl	800fb40 <rcutils_get_error_string>
 8014334:	f7fb fc1c 	bl	800fb70 <rcutils_reset_error>
 8014338:	e7cf      	b.n	80142da <rcl_node_resolve_name+0x13e>
 801433a:	4651      	mov	r1, sl
 801433c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801433e:	47c8      	blx	r9
 8014340:	4651      	mov	r1, sl
 8014342:	4658      	mov	r0, fp
 8014344:	47c8      	blx	r9
 8014346:	e76c      	b.n	8014222 <rcl_node_resolve_name+0x86>

08014348 <rcl_get_zero_initialized_publisher>:
 8014348:	4b01      	ldr	r3, [pc, #4]	@ (8014350 <rcl_get_zero_initialized_publisher+0x8>)
 801434a:	6818      	ldr	r0, [r3, #0]
 801434c:	4770      	bx	lr
 801434e:	bf00      	nop
 8014350:	0801d3b0 	.word	0x0801d3b0

08014354 <rcl_publisher_init>:
 8014354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014358:	b088      	sub	sp, #32
 801435a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801435c:	2e00      	cmp	r6, #0
 801435e:	d06b      	beq.n	8014438 <rcl_publisher_init+0xe4>
 8014360:	f106 0a50 	add.w	sl, r6, #80	@ 0x50
 8014364:	4605      	mov	r5, r0
 8014366:	460f      	mov	r7, r1
 8014368:	4690      	mov	r8, r2
 801436a:	4650      	mov	r0, sl
 801436c:	4699      	mov	r9, r3
 801436e:	f7fb fbd9 	bl	800fb24 <rcutils_allocator_is_valid>
 8014372:	f080 0401 	eor.w	r4, r0, #1
 8014376:	b2e4      	uxtb	r4, r4
 8014378:	2c00      	cmp	r4, #0
 801437a:	d15d      	bne.n	8014438 <rcl_publisher_init+0xe4>
 801437c:	2d00      	cmp	r5, #0
 801437e:	d05b      	beq.n	8014438 <rcl_publisher_init+0xe4>
 8014380:	682b      	ldr	r3, [r5, #0]
 8014382:	b123      	cbz	r3, 801438e <rcl_publisher_init+0x3a>
 8014384:	2464      	movs	r4, #100	@ 0x64
 8014386:	4620      	mov	r0, r4
 8014388:	b008      	add	sp, #32
 801438a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801438e:	4638      	mov	r0, r7
 8014390:	f7ff feac 	bl	80140ec <rcl_node_is_valid>
 8014394:	2800      	cmp	r0, #0
 8014396:	d054      	beq.n	8014442 <rcl_publisher_init+0xee>
 8014398:	f1b8 0f00 	cmp.w	r8, #0
 801439c:	d04c      	beq.n	8014438 <rcl_publisher_init+0xe4>
 801439e:	fab9 f389 	clz	r3, r9
 80143a2:	095b      	lsrs	r3, r3, #5
 80143a4:	f1b9 0f00 	cmp.w	r9, #0
 80143a8:	d046      	beq.n	8014438 <rcl_publisher_init+0xe4>
 80143aa:	aa07      	add	r2, sp, #28
 80143ac:	9307      	str	r3, [sp, #28]
 80143ae:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80143b2:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 80143b6:	9205      	str	r2, [sp, #20]
 80143b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80143bc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80143c0:	4649      	mov	r1, r9
 80143c2:	4638      	mov	r0, r7
 80143c4:	e89a 000c 	ldmia.w	sl, {r2, r3}
 80143c8:	f7ff fee8 	bl	801419c <rcl_node_resolve_name>
 80143cc:	2800      	cmp	r0, #0
 80143ce:	d14f      	bne.n	8014470 <rcl_publisher_init+0x11c>
 80143d0:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 80143d2:	20c8      	movs	r0, #200	@ 0xc8
 80143d4:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80143d6:	4798      	blx	r3
 80143d8:	6028      	str	r0, [r5, #0]
 80143da:	2800      	cmp	r0, #0
 80143dc:	d050      	beq.n	8014480 <rcl_publisher_init+0x12c>
 80143de:	4638      	mov	r0, r7
 80143e0:	f7ff fea6 	bl	8014130 <rcl_node_get_rmw_handle>
 80143e4:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 80143e8:	4641      	mov	r1, r8
 80143ea:	9a07      	ldr	r2, [sp, #28]
 80143ec:	9300      	str	r3, [sp, #0]
 80143ee:	4633      	mov	r3, r6
 80143f0:	682c      	ldr	r4, [r5, #0]
 80143f2:	f003 f8fb 	bl	80175ec <rmw_create_publisher>
 80143f6:	682b      	ldr	r3, [r5, #0]
 80143f8:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 80143fc:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8014400:	b370      	cbz	r0, 8014460 <rcl_publisher_init+0x10c>
 8014402:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 8014406:	f003 f9d5 	bl	80177b4 <rmw_publisher_get_actual_qos>
 801440a:	682b      	ldr	r3, [r5, #0]
 801440c:	4604      	mov	r4, r0
 801440e:	b9d0      	cbnz	r0, 8014446 <rcl_publisher_init+0xf2>
 8014410:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 8014414:	4631      	mov	r1, r6
 8014416:	4618      	mov	r0, r3
 8014418:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 801441c:	2270      	movs	r2, #112	@ 0x70
 801441e:	f007 f9a4 	bl	801b76a <memcpy>
 8014422:	683a      	ldr	r2, [r7, #0]
 8014424:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 8014428:	9807      	ldr	r0, [sp, #28]
 801442a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 801442c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801442e:	4798      	blx	r3
 8014430:	4620      	mov	r0, r4
 8014432:	b008      	add	sp, #32
 8014434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014438:	240b      	movs	r4, #11
 801443a:	4620      	mov	r0, r4
 801443c:	b008      	add	sp, #32
 801443e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014442:	24c8      	movs	r4, #200	@ 0xc8
 8014444:	e79f      	b.n	8014386 <rcl_publisher_init+0x32>
 8014446:	b1cb      	cbz	r3, 801447c <rcl_publisher_init+0x128>
 8014448:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 801444c:	b142      	cbz	r2, 8014460 <rcl_publisher_init+0x10c>
 801444e:	4638      	mov	r0, r7
 8014450:	f7ff fe6e 	bl	8014130 <rcl_node_get_rmw_handle>
 8014454:	682b      	ldr	r3, [r5, #0]
 8014456:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 801445a:	f003 f9bf 	bl	80177dc <rmw_destroy_publisher>
 801445e:	682b      	ldr	r3, [r5, #0]
 8014460:	4618      	mov	r0, r3
 8014462:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 8014464:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8014466:	2401      	movs	r4, #1
 8014468:	4790      	blx	r2
 801446a:	2300      	movs	r3, #0
 801446c:	602b      	str	r3, [r5, #0]
 801446e:	e7db      	b.n	8014428 <rcl_publisher_init+0xd4>
 8014470:	2867      	cmp	r0, #103	@ 0x67
 8014472:	d007      	beq.n	8014484 <rcl_publisher_init+0x130>
 8014474:	2869      	cmp	r0, #105	@ 0x69
 8014476:	d005      	beq.n	8014484 <rcl_publisher_init+0x130>
 8014478:	280a      	cmp	r0, #10
 801447a:	d001      	beq.n	8014480 <rcl_publisher_init+0x12c>
 801447c:	2401      	movs	r4, #1
 801447e:	e7d3      	b.n	8014428 <rcl_publisher_init+0xd4>
 8014480:	240a      	movs	r4, #10
 8014482:	e7d1      	b.n	8014428 <rcl_publisher_init+0xd4>
 8014484:	2467      	movs	r4, #103	@ 0x67
 8014486:	e7cf      	b.n	8014428 <rcl_publisher_init+0xd4>

08014488 <rcl_publisher_get_default_options>:
 8014488:	b570      	push	{r4, r5, r6, lr}
 801448a:	4d14      	ldr	r5, [pc, #80]	@ (80144dc <rcl_publisher_get_default_options+0x54>)
 801448c:	b088      	sub	sp, #32
 801448e:	4604      	mov	r4, r0
 8014490:	2250      	movs	r2, #80	@ 0x50
 8014492:	4913      	ldr	r1, [pc, #76]	@ (80144e0 <rcl_publisher_get_default_options+0x58>)
 8014494:	4628      	mov	r0, r5
 8014496:	f007 f968 	bl	801b76a <memcpy>
 801449a:	a802      	add	r0, sp, #8
 801449c:	f7fb fb34 	bl	800fb08 <rcutils_get_default_allocator>
 80144a0:	f10d 0c08 	add.w	ip, sp, #8
 80144a4:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 80144a8:	466e      	mov	r6, sp
 80144aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80144ae:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80144b2:	f8dc 3000 	ldr.w	r3, [ip]
 80144b6:	4630      	mov	r0, r6
 80144b8:	f8ce 3000 	str.w	r3, [lr]
 80144bc:	f002 fa84 	bl	80169c8 <rmw_get_default_publisher_options>
 80144c0:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80144c4:	2270      	movs	r2, #112	@ 0x70
 80144c6:	e896 0003 	ldmia.w	r6, {r0, r1}
 80144ca:	e883 0003 	stmia.w	r3, {r0, r1}
 80144ce:	4629      	mov	r1, r5
 80144d0:	4620      	mov	r0, r4
 80144d2:	f007 f94a 	bl	801b76a <memcpy>
 80144d6:	4620      	mov	r0, r4
 80144d8:	b008      	add	sp, #32
 80144da:	bd70      	pop	{r4, r5, r6, pc}
 80144dc:	2000f160 	.word	0x2000f160
 80144e0:	0801d3b8 	.word	0x0801d3b8

080144e4 <rcl_publisher_is_valid>:
 80144e4:	b1a0      	cbz	r0, 8014510 <rcl_publisher_is_valid+0x2c>
 80144e6:	6803      	ldr	r3, [r0, #0]
 80144e8:	b510      	push	{r4, lr}
 80144ea:	4604      	mov	r4, r0
 80144ec:	b173      	cbz	r3, 801450c <rcl_publisher_is_valid+0x28>
 80144ee:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80144f2:	b15a      	cbz	r2, 801450c <rcl_publisher_is_valid+0x28>
 80144f4:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 80144f8:	f7ff fa2e 	bl	8013958 <rcl_context_is_valid>
 80144fc:	b130      	cbz	r0, 801450c <rcl_publisher_is_valid+0x28>
 80144fe:	6823      	ldr	r3, [r4, #0]
 8014500:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8014504:	3800      	subs	r0, #0
 8014506:	bf18      	it	ne
 8014508:	2001      	movne	r0, #1
 801450a:	bd10      	pop	{r4, pc}
 801450c:	2000      	movs	r0, #0
 801450e:	bd10      	pop	{r4, pc}
 8014510:	2000      	movs	r0, #0
 8014512:	4770      	bx	lr

08014514 <rcl_publisher_is_valid_except_context>:
 8014514:	b130      	cbz	r0, 8014524 <rcl_publisher_is_valid_except_context+0x10>
 8014516:	6800      	ldr	r0, [r0, #0]
 8014518:	b120      	cbz	r0, 8014524 <rcl_publisher_is_valid_except_context+0x10>
 801451a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 801451e:	3800      	subs	r0, #0
 8014520:	bf18      	it	ne
 8014522:	2001      	movne	r0, #1
 8014524:	4770      	bx	lr
 8014526:	bf00      	nop

08014528 <rcl_service_get_rmw_handle>:
 8014528:	b118      	cbz	r0, 8014532 <rcl_service_get_rmw_handle+0xa>
 801452a:	6800      	ldr	r0, [r0, #0]
 801452c:	b108      	cbz	r0, 8014532 <rcl_service_get_rmw_handle+0xa>
 801452e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8014532:	4770      	bx	lr

08014534 <rcl_take_request>:
 8014534:	b570      	push	{r4, r5, r6, lr}
 8014536:	468e      	mov	lr, r1
 8014538:	b08c      	sub	sp, #48	@ 0x30
 801453a:	460c      	mov	r4, r1
 801453c:	4616      	mov	r6, r2
 801453e:	f10d 0c18 	add.w	ip, sp, #24
 8014542:	4605      	mov	r5, r0
 8014544:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014548:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801454c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014550:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014554:	b30d      	cbz	r5, 801459a <rcl_take_request+0x66>
 8014556:	682b      	ldr	r3, [r5, #0]
 8014558:	b1fb      	cbz	r3, 801459a <rcl_take_request+0x66>
 801455a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801455e:	b1e0      	cbz	r0, 801459a <rcl_take_request+0x66>
 8014560:	b336      	cbz	r6, 80145b0 <rcl_take_request+0x7c>
 8014562:	2300      	movs	r3, #0
 8014564:	4632      	mov	r2, r6
 8014566:	a902      	add	r1, sp, #8
 8014568:	f88d 3007 	strb.w	r3, [sp, #7]
 801456c:	f10d 0307 	add.w	r3, sp, #7
 8014570:	f003 f9d6 	bl	8017920 <rmw_take_request>
 8014574:	4605      	mov	r5, r0
 8014576:	b198      	cbz	r0, 80145a0 <rcl_take_request+0x6c>
 8014578:	280a      	cmp	r0, #10
 801457a:	bf18      	it	ne
 801457c:	2501      	movne	r5, #1
 801457e:	f10d 0e18 	add.w	lr, sp, #24
 8014582:	46a4      	mov	ip, r4
 8014584:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014588:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801458c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014590:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014594:	4628      	mov	r0, r5
 8014596:	b00c      	add	sp, #48	@ 0x30
 8014598:	bd70      	pop	{r4, r5, r6, pc}
 801459a:	f44f 7516 	mov.w	r5, #600	@ 0x258
 801459e:	e7ee      	b.n	801457e <rcl_take_request+0x4a>
 80145a0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80145a4:	f240 2359 	movw	r3, #601	@ 0x259
 80145a8:	2a00      	cmp	r2, #0
 80145aa:	bf08      	it	eq
 80145ac:	461d      	moveq	r5, r3
 80145ae:	e7e6      	b.n	801457e <rcl_take_request+0x4a>
 80145b0:	250b      	movs	r5, #11
 80145b2:	e7e4      	b.n	801457e <rcl_take_request+0x4a>

080145b4 <rcl_send_response>:
 80145b4:	b170      	cbz	r0, 80145d4 <rcl_send_response+0x20>
 80145b6:	6800      	ldr	r0, [r0, #0]
 80145b8:	b160      	cbz	r0, 80145d4 <rcl_send_response+0x20>
 80145ba:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80145be:	b148      	cbz	r0, 80145d4 <rcl_send_response+0x20>
 80145c0:	b169      	cbz	r1, 80145de <rcl_send_response+0x2a>
 80145c2:	b510      	push	{r4, lr}
 80145c4:	b14a      	cbz	r2, 80145da <rcl_send_response+0x26>
 80145c6:	f003 fa09 	bl	80179dc <rmw_send_response>
 80145ca:	b110      	cbz	r0, 80145d2 <rcl_send_response+0x1e>
 80145cc:	2802      	cmp	r0, #2
 80145ce:	bf18      	it	ne
 80145d0:	2001      	movne	r0, #1
 80145d2:	bd10      	pop	{r4, pc}
 80145d4:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80145d8:	4770      	bx	lr
 80145da:	200b      	movs	r0, #11
 80145dc:	bd10      	pop	{r4, pc}
 80145de:	200b      	movs	r0, #11
 80145e0:	4770      	bx	lr
 80145e2:	bf00      	nop

080145e4 <rcl_service_is_valid>:
 80145e4:	b130      	cbz	r0, 80145f4 <rcl_service_is_valid+0x10>
 80145e6:	6800      	ldr	r0, [r0, #0]
 80145e8:	b120      	cbz	r0, 80145f4 <rcl_service_is_valid+0x10>
 80145ea:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80145ee:	3800      	subs	r0, #0
 80145f0:	bf18      	it	ne
 80145f2:	2001      	movne	r0, #1
 80145f4:	4770      	bx	lr
 80145f6:	bf00      	nop

080145f8 <rcl_get_zero_initialized_subscription>:
 80145f8:	4b01      	ldr	r3, [pc, #4]	@ (8014600 <rcl_get_zero_initialized_subscription+0x8>)
 80145fa:	6818      	ldr	r0, [r3, #0]
 80145fc:	4770      	bx	lr
 80145fe:	bf00      	nop
 8014600:	0801d408 	.word	0x0801d408

08014604 <rcl_subscription_init>:
 8014604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014608:	b088      	sub	sp, #32
 801460a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801460c:	b1ff      	cbz	r7, 801464e <rcl_subscription_init+0x4a>
 801460e:	f107 0a50 	add.w	sl, r7, #80	@ 0x50
 8014612:	4605      	mov	r5, r0
 8014614:	460e      	mov	r6, r1
 8014616:	4691      	mov	r9, r2
 8014618:	4650      	mov	r0, sl
 801461a:	4698      	mov	r8, r3
 801461c:	f7fb fa82 	bl	800fb24 <rcutils_allocator_is_valid>
 8014620:	f080 0401 	eor.w	r4, r0, #1
 8014624:	b2e4      	uxtb	r4, r4
 8014626:	b994      	cbnz	r4, 801464e <rcl_subscription_init+0x4a>
 8014628:	b18d      	cbz	r5, 801464e <rcl_subscription_init+0x4a>
 801462a:	4630      	mov	r0, r6
 801462c:	f7ff fd5e 	bl	80140ec <rcl_node_is_valid>
 8014630:	2800      	cmp	r0, #0
 8014632:	d055      	beq.n	80146e0 <rcl_subscription_init+0xdc>
 8014634:	f1b9 0f00 	cmp.w	r9, #0
 8014638:	d009      	beq.n	801464e <rcl_subscription_init+0x4a>
 801463a:	f1b8 0f00 	cmp.w	r8, #0
 801463e:	d006      	beq.n	801464e <rcl_subscription_init+0x4a>
 8014640:	682b      	ldr	r3, [r5, #0]
 8014642:	b14b      	cbz	r3, 8014658 <rcl_subscription_init+0x54>
 8014644:	2464      	movs	r4, #100	@ 0x64
 8014646:	4620      	mov	r0, r4
 8014648:	b008      	add	sp, #32
 801464a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801464e:	240b      	movs	r4, #11
 8014650:	4620      	mov	r0, r4
 8014652:	b008      	add	sp, #32
 8014654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014658:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801465c:	aa07      	add	r2, sp, #28
 801465e:	9307      	str	r3, [sp, #28]
 8014660:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8014664:	9205      	str	r2, [sp, #20]
 8014666:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801466a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801466e:	4641      	mov	r1, r8
 8014670:	4630      	mov	r0, r6
 8014672:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8014676:	f7ff fd91 	bl	801419c <rcl_node_resolve_name>
 801467a:	2800      	cmp	r0, #0
 801467c:	d15f      	bne.n	801473e <rcl_subscription_init+0x13a>
 801467e:	21c8      	movs	r1, #200	@ 0xc8
 8014680:	2001      	movs	r0, #1
 8014682:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	@ 0x5c
 8014686:	4798      	blx	r3
 8014688:	6028      	str	r0, [r5, #0]
 801468a:	2800      	cmp	r0, #0
 801468c:	d05f      	beq.n	801474e <rcl_subscription_init+0x14a>
 801468e:	4630      	mov	r0, r6
 8014690:	f7ff fd4e 	bl	8014130 <rcl_node_get_rmw_handle>
 8014694:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8014698:	4649      	mov	r1, r9
 801469a:	9a07      	ldr	r2, [sp, #28]
 801469c:	9300      	str	r3, [sp, #0]
 801469e:	463b      	mov	r3, r7
 80146a0:	682c      	ldr	r4, [r5, #0]
 80146a2:	f003 fa83 	bl	8017bac <rmw_create_subscription>
 80146a6:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 80146aa:	682c      	ldr	r4, [r5, #0]
 80146ac:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 80146b0:	b348      	cbz	r0, 8014706 <rcl_subscription_init+0x102>
 80146b2:	f104 0170 	add.w	r1, r4, #112	@ 0x70
 80146b6:	f003 fb6f 	bl	8017d98 <rmw_subscription_get_actual_qos>
 80146ba:	4604      	mov	r4, r0
 80146bc:	b9a8      	cbnz	r0, 80146ea <rcl_subscription_init+0xe6>
 80146be:	6828      	ldr	r0, [r5, #0]
 80146c0:	2270      	movs	r2, #112	@ 0x70
 80146c2:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80146c6:	4639      	mov	r1, r7
 80146c8:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 80146cc:	f007 f84d 	bl	801b76a <memcpy>
 80146d0:	9807      	ldr	r0, [sp, #28]
 80146d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80146d4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80146d6:	4798      	blx	r3
 80146d8:	4620      	mov	r0, r4
 80146da:	b008      	add	sp, #32
 80146dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146e0:	24c8      	movs	r4, #200	@ 0xc8
 80146e2:	4620      	mov	r0, r4
 80146e4:	b008      	add	sp, #32
 80146e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146ea:	682c      	ldr	r4, [r5, #0]
 80146ec:	b36c      	cbz	r4, 801474a <rcl_subscription_init+0x146>
 80146ee:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 80146f2:	b14b      	cbz	r3, 8014708 <rcl_subscription_init+0x104>
 80146f4:	4630      	mov	r0, r6
 80146f6:	f7ff fd1b 	bl	8014130 <rcl_node_get_rmw_handle>
 80146fa:	682b      	ldr	r3, [r5, #0]
 80146fc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8014700:	f003 fb5e 	bl	8017dc0 <rmw_destroy_subscription>
 8014704:	682c      	ldr	r4, [r5, #0]
 8014706:	b194      	cbz	r4, 801472e <rcl_subscription_init+0x12a>
 8014708:	f104 0650 	add.w	r6, r4, #80	@ 0x50
 801470c:	4630      	mov	r0, r6
 801470e:	f7fb fa09 	bl	800fb24 <rcutils_allocator_is_valid>
 8014712:	b158      	cbz	r0, 801472c <rcl_subscription_init+0x128>
 8014714:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8014716:	b148      	cbz	r0, 801472c <rcl_subscription_init+0x128>
 8014718:	4631      	mov	r1, r6
 801471a:	f002 f95d 	bl	80169d8 <rmw_subscription_content_filter_options_fini>
 801471e:	4606      	mov	r6, r0
 8014720:	b9c8      	cbnz	r0, 8014756 <rcl_subscription_init+0x152>
 8014722:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8014724:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8014726:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8014728:	4798      	blx	r3
 801472a:	66e6      	str	r6, [r4, #108]	@ 0x6c
 801472c:	682c      	ldr	r4, [r5, #0]
 801472e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014730:	4620      	mov	r0, r4
 8014732:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8014734:	2401      	movs	r4, #1
 8014736:	4798      	blx	r3
 8014738:	2300      	movs	r3, #0
 801473a:	602b      	str	r3, [r5, #0]
 801473c:	e7c8      	b.n	80146d0 <rcl_subscription_init+0xcc>
 801473e:	2867      	cmp	r0, #103	@ 0x67
 8014740:	d007      	beq.n	8014752 <rcl_subscription_init+0x14e>
 8014742:	2869      	cmp	r0, #105	@ 0x69
 8014744:	d005      	beq.n	8014752 <rcl_subscription_init+0x14e>
 8014746:	280a      	cmp	r0, #10
 8014748:	d001      	beq.n	801474e <rcl_subscription_init+0x14a>
 801474a:	2401      	movs	r4, #1
 801474c:	e7c0      	b.n	80146d0 <rcl_subscription_init+0xcc>
 801474e:	240a      	movs	r4, #10
 8014750:	e7be      	b.n	80146d0 <rcl_subscription_init+0xcc>
 8014752:	2467      	movs	r4, #103	@ 0x67
 8014754:	e7bc      	b.n	80146d0 <rcl_subscription_init+0xcc>
 8014756:	f005 fd35 	bl	801a1c4 <rcl_convert_rmw_ret_to_rcl_ret>
 801475a:	682c      	ldr	r4, [r5, #0]
 801475c:	e7e7      	b.n	801472e <rcl_subscription_init+0x12a>
 801475e:	bf00      	nop

08014760 <rcl_subscription_get_default_options>:
 8014760:	b570      	push	{r4, r5, r6, lr}
 8014762:	4d14      	ldr	r5, [pc, #80]	@ (80147b4 <rcl_subscription_get_default_options+0x54>)
 8014764:	b08a      	sub	sp, #40	@ 0x28
 8014766:	4604      	mov	r4, r0
 8014768:	2250      	movs	r2, #80	@ 0x50
 801476a:	4913      	ldr	r1, [pc, #76]	@ (80147b8 <rcl_subscription_get_default_options+0x58>)
 801476c:	4628      	mov	r0, r5
 801476e:	f006 fffc 	bl	801b76a <memcpy>
 8014772:	a804      	add	r0, sp, #16
 8014774:	f7fb f9c8 	bl	800fb08 <rcutils_get_default_allocator>
 8014778:	f10d 0c10 	add.w	ip, sp, #16
 801477c:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8014780:	466e      	mov	r6, sp
 8014782:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014786:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801478a:	f8dc 3000 	ldr.w	r3, [ip]
 801478e:	4630      	mov	r0, r6
 8014790:	f8ce 3000 	str.w	r3, [lr]
 8014794:	f002 f93a 	bl	8016a0c <rmw_get_default_subscription_options>
 8014798:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 801479c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80147a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80147a4:	2270      	movs	r2, #112	@ 0x70
 80147a6:	4629      	mov	r1, r5
 80147a8:	4620      	mov	r0, r4
 80147aa:	f006 ffde 	bl	801b76a <memcpy>
 80147ae:	4620      	mov	r0, r4
 80147b0:	b00a      	add	sp, #40	@ 0x28
 80147b2:	bd70      	pop	{r4, r5, r6, pc}
 80147b4:	2000f1d0 	.word	0x2000f1d0
 80147b8:	0801d410 	.word	0x0801d410

080147bc <rcl_take>:
 80147bc:	2800      	cmp	r0, #0
 80147be:	d049      	beq.n	8014854 <rcl_take+0x98>
 80147c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147c4:	4615      	mov	r5, r2
 80147c6:	6802      	ldr	r2, [r0, #0]
 80147c8:	b0a4      	sub	sp, #144	@ 0x90
 80147ca:	4604      	mov	r4, r0
 80147cc:	2a00      	cmp	r2, #0
 80147ce:	d039      	beq.n	8014844 <rcl_take+0x88>
 80147d0:	461f      	mov	r7, r3
 80147d2:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 80147d6:	b3ab      	cbz	r3, 8014844 <rcl_take+0x88>
 80147d8:	460e      	mov	r6, r1
 80147da:	2900      	cmp	r1, #0
 80147dc:	d038      	beq.n	8014850 <rcl_take+0x94>
 80147de:	2d00      	cmp	r5, #0
 80147e0:	d03c      	beq.n	801485c <rcl_take+0xa0>
 80147e2:	a802      	add	r0, sp, #8
 80147e4:	f04f 0800 	mov.w	r8, #0
 80147e8:	f002 f99e 	bl	8016b28 <rmw_get_zero_initialized_message_info>
 80147ec:	f10d 0c08 	add.w	ip, sp, #8
 80147f0:	46ae      	mov	lr, r5
 80147f2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80147f6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80147fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80147fe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014802:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014806:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801480a:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801480e:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8014812:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8014816:	462b      	mov	r3, r5
 8014818:	6820      	ldr	r0, [r4, #0]
 801481a:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 801481e:	4631      	mov	r1, r6
 8014820:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8014824:	9700      	str	r7, [sp, #0]
 8014826:	f003 fb2d 	bl	8017e84 <rmw_take_with_info>
 801482a:	4603      	mov	r3, r0
 801482c:	b9c0      	cbnz	r0, 8014860 <rcl_take+0xa4>
 801482e:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8014832:	f240 1291 	movw	r2, #401	@ 0x191
 8014836:	2900      	cmp	r1, #0
 8014838:	bf08      	it	eq
 801483a:	4613      	moveq	r3, r2
 801483c:	4618      	mov	r0, r3
 801483e:	b024      	add	sp, #144	@ 0x90
 8014840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014844:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8014848:	4618      	mov	r0, r3
 801484a:	b024      	add	sp, #144	@ 0x90
 801484c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014850:	230b      	movs	r3, #11
 8014852:	e7f3      	b.n	801483c <rcl_take+0x80>
 8014854:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8014858:	4618      	mov	r0, r3
 801485a:	4770      	bx	lr
 801485c:	ad14      	add	r5, sp, #80	@ 0x50
 801485e:	e7c0      	b.n	80147e2 <rcl_take+0x26>
 8014860:	f005 fcb0 	bl	801a1c4 <rcl_convert_rmw_ret_to_rcl_ret>
 8014864:	4603      	mov	r3, r0
 8014866:	e7e9      	b.n	801483c <rcl_take+0x80>

08014868 <rcl_subscription_get_rmw_handle>:
 8014868:	b118      	cbz	r0, 8014872 <rcl_subscription_get_rmw_handle+0xa>
 801486a:	6800      	ldr	r0, [r0, #0]
 801486c:	b108      	cbz	r0, 8014872 <rcl_subscription_get_rmw_handle+0xa>
 801486e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8014872:	4770      	bx	lr

08014874 <rcl_subscription_is_valid>:
 8014874:	b130      	cbz	r0, 8014884 <rcl_subscription_is_valid+0x10>
 8014876:	6800      	ldr	r0, [r0, #0]
 8014878:	b120      	cbz	r0, 8014884 <rcl_subscription_is_valid+0x10>
 801487a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801487e:	3800      	subs	r0, #0
 8014880:	bf18      	it	ne
 8014882:	2001      	movne	r0, #1
 8014884:	4770      	bx	lr
 8014886:	bf00      	nop

08014888 <rcl_get_system_time>:
 8014888:	4608      	mov	r0, r1
 801488a:	f7fb b98d 	b.w	800fba8 <rcutils_system_time_now>
 801488e:	bf00      	nop

08014890 <rcl_get_steady_time>:
 8014890:	4608      	mov	r0, r1
 8014892:	f7fb b9af 	b.w	800fbf4 <rcutils_steady_time_now>
 8014896:	bf00      	nop

08014898 <rcl_get_ros_time>:
 8014898:	7a03      	ldrb	r3, [r0, #8]
 801489a:	b510      	push	{r4, lr}
 801489c:	460c      	mov	r4, r1
 801489e:	b143      	cbz	r3, 80148b2 <rcl_get_ros_time+0x1a>
 80148a0:	2105      	movs	r1, #5
 80148a2:	f001 fd09 	bl	80162b8 <__atomic_load_8>
 80148a6:	4602      	mov	r2, r0
 80148a8:	460b      	mov	r3, r1
 80148aa:	2000      	movs	r0, #0
 80148ac:	e9c4 2300 	strd	r2, r3, [r4]
 80148b0:	bd10      	pop	{r4, pc}
 80148b2:	4608      	mov	r0, r1
 80148b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80148b8:	f7fb b976 	b.w	800fba8 <rcutils_system_time_now>

080148bc <rcl_clock_init>:
 80148bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148be:	4605      	mov	r5, r0
 80148c0:	4610      	mov	r0, r2
 80148c2:	4614      	mov	r4, r2
 80148c4:	460e      	mov	r6, r1
 80148c6:	f7fb f92d 	bl	800fb24 <rcutils_allocator_is_valid>
 80148ca:	b128      	cbz	r0, 80148d8 <rcl_clock_init+0x1c>
 80148cc:	2d03      	cmp	r5, #3
 80148ce:	d803      	bhi.n	80148d8 <rcl_clock_init+0x1c>
 80148d0:	e8df f005 	tbb	[pc, r5]
 80148d4:	0659301f 	.word	0x0659301f
 80148d8:	f04f 0c0b 	mov.w	ip, #11
 80148dc:	4660      	mov	r0, ip
 80148de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148e0:	2c00      	cmp	r4, #0
 80148e2:	d0f9      	beq.n	80148d8 <rcl_clock_init+0x1c>
 80148e4:	fab6 f386 	clz	r3, r6
 80148e8:	095b      	lsrs	r3, r3, #5
 80148ea:	2e00      	cmp	r6, #0
 80148ec:	d0f4      	beq.n	80148d8 <rcl_clock_init+0x1c>
 80148ee:	6133      	str	r3, [r6, #16]
 80148f0:	469c      	mov	ip, r3
 80148f2:	f106 0514 	add.w	r5, r6, #20
 80148f6:	4f32      	ldr	r7, [pc, #200]	@ (80149c0 <rcl_clock_init+0x104>)
 80148f8:	f04f 0e03 	mov.w	lr, #3
 80148fc:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014900:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014902:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014904:	6823      	ldr	r3, [r4, #0]
 8014906:	4660      	mov	r0, ip
 8014908:	602b      	str	r3, [r5, #0]
 801490a:	60f7      	str	r7, [r6, #12]
 801490c:	f886 e000 	strb.w	lr, [r6]
 8014910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014912:	2e00      	cmp	r6, #0
 8014914:	d0e0      	beq.n	80148d8 <rcl_clock_init+0x1c>
 8014916:	2300      	movs	r3, #0
 8014918:	f106 0514 	add.w	r5, r6, #20
 801491c:	7033      	strb	r3, [r6, #0]
 801491e:	469c      	mov	ip, r3
 8014920:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014924:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8014928:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801492a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801492c:	6823      	ldr	r3, [r4, #0]
 801492e:	4660      	mov	r0, ip
 8014930:	602b      	str	r3, [r5, #0]
 8014932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014934:	2c00      	cmp	r4, #0
 8014936:	d0cf      	beq.n	80148d8 <rcl_clock_init+0x1c>
 8014938:	fab6 f586 	clz	r5, r6
 801493c:	096d      	lsrs	r5, r5, #5
 801493e:	2e00      	cmp	r6, #0
 8014940:	d0ca      	beq.n	80148d8 <rcl_clock_init+0x1c>
 8014942:	46a6      	mov	lr, r4
 8014944:	7035      	strb	r5, [r6, #0]
 8014946:	f106 0c14 	add.w	ip, r6, #20
 801494a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801494e:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8014952:	e9c6 5503 	strd	r5, r5, [r6, #12]
 8014956:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801495a:	f8de 3000 	ldr.w	r3, [lr]
 801495e:	2010      	movs	r0, #16
 8014960:	f8cc 3000 	str.w	r3, [ip]
 8014964:	6823      	ldr	r3, [r4, #0]
 8014966:	6921      	ldr	r1, [r4, #16]
 8014968:	4798      	blx	r3
 801496a:	6130      	str	r0, [r6, #16]
 801496c:	b320      	cbz	r0, 80149b8 <rcl_clock_init+0xfc>
 801496e:	2200      	movs	r2, #0
 8014970:	2300      	movs	r3, #0
 8014972:	46ac      	mov	ip, r5
 8014974:	7205      	strb	r5, [r0, #8]
 8014976:	e9c0 2300 	strd	r2, r3, [r0]
 801497a:	4a12      	ldr	r2, [pc, #72]	@ (80149c4 <rcl_clock_init+0x108>)
 801497c:	2301      	movs	r3, #1
 801497e:	4660      	mov	r0, ip
 8014980:	60f2      	str	r2, [r6, #12]
 8014982:	7033      	strb	r3, [r6, #0]
 8014984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014986:	2c00      	cmp	r4, #0
 8014988:	d0a6      	beq.n	80148d8 <rcl_clock_init+0x1c>
 801498a:	fab6 f386 	clz	r3, r6
 801498e:	095b      	lsrs	r3, r3, #5
 8014990:	2e00      	cmp	r6, #0
 8014992:	d0a1      	beq.n	80148d8 <rcl_clock_init+0x1c>
 8014994:	6133      	str	r3, [r6, #16]
 8014996:	469c      	mov	ip, r3
 8014998:	f106 0514 	add.w	r5, r6, #20
 801499c:	f8df e028 	ldr.w	lr, [pc, #40]	@ 80149c8 <rcl_clock_init+0x10c>
 80149a0:	2702      	movs	r7, #2
 80149a2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80149a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80149a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80149aa:	6823      	ldr	r3, [r4, #0]
 80149ac:	4660      	mov	r0, ip
 80149ae:	602b      	str	r3, [r5, #0]
 80149b0:	f8c6 e00c 	str.w	lr, [r6, #12]
 80149b4:	7037      	strb	r7, [r6, #0]
 80149b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149b8:	f04f 0c0a 	mov.w	ip, #10
 80149bc:	e78e      	b.n	80148dc <rcl_clock_init+0x20>
 80149be:	bf00      	nop
 80149c0:	08014891 	.word	0x08014891
 80149c4:	08014899 	.word	0x08014899
 80149c8:	08014889 	.word	0x08014889

080149cc <rcl_clock_get_now>:
 80149cc:	b140      	cbz	r0, 80149e0 <rcl_clock_get_now+0x14>
 80149ce:	b139      	cbz	r1, 80149e0 <rcl_clock_get_now+0x14>
 80149d0:	7803      	ldrb	r3, [r0, #0]
 80149d2:	b11b      	cbz	r3, 80149dc <rcl_clock_get_now+0x10>
 80149d4:	68c3      	ldr	r3, [r0, #12]
 80149d6:	b10b      	cbz	r3, 80149dc <rcl_clock_get_now+0x10>
 80149d8:	6900      	ldr	r0, [r0, #16]
 80149da:	4718      	bx	r3
 80149dc:	2001      	movs	r0, #1
 80149de:	4770      	bx	lr
 80149e0:	200b      	movs	r0, #11
 80149e2:	4770      	bx	lr

080149e4 <rcl_timer_call>:
 80149e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149e8:	b087      	sub	sp, #28
 80149ea:	2800      	cmp	r0, #0
 80149ec:	d06c      	beq.n	8014ac8 <rcl_timer_call+0xe4>
 80149ee:	6803      	ldr	r3, [r0, #0]
 80149f0:	4604      	mov	r4, r0
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d062      	beq.n	8014abc <rcl_timer_call+0xd8>
 80149f6:	f3bf 8f5b 	dmb	ish
 80149fa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80149fe:	f3bf 8f5b 	dmb	ish
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d14f      	bne.n	8014aa6 <rcl_timer_call+0xc2>
 8014a06:	6803      	ldr	r3, [r0, #0]
 8014a08:	a904      	add	r1, sp, #16
 8014a0a:	6818      	ldr	r0, [r3, #0]
 8014a0c:	f7ff ffde 	bl	80149cc <rcl_clock_get_now>
 8014a10:	4605      	mov	r5, r0
 8014a12:	2800      	cmp	r0, #0
 8014a14:	d149      	bne.n	8014aaa <rcl_timer_call+0xc6>
 8014a16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	db49      	blt.n	8014ab2 <rcl_timer_call+0xce>
 8014a1e:	2605      	movs	r6, #5
 8014a20:	6820      	ldr	r0, [r4, #0]
 8014a22:	9600      	str	r6, [sp, #0]
 8014a24:	3020      	adds	r0, #32
 8014a26:	f001 fcb3 	bl	8016390 <__atomic_exchange_8>
 8014a2a:	6823      	ldr	r3, [r4, #0]
 8014a2c:	4680      	mov	r8, r0
 8014a2e:	f3bf 8f5b 	dmb	ish
 8014a32:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8014a36:	f3bf 8f5b 	dmb	ish
 8014a3a:	6820      	ldr	r0, [r4, #0]
 8014a3c:	4689      	mov	r9, r1
 8014a3e:	4631      	mov	r1, r6
 8014a40:	3028      	adds	r0, #40	@ 0x28
 8014a42:	f001 fc39 	bl	80162b8 <__atomic_load_8>
 8014a46:	460f      	mov	r7, r1
 8014a48:	4631      	mov	r1, r6
 8014a4a:	4606      	mov	r6, r0
 8014a4c:	6820      	ldr	r0, [r4, #0]
 8014a4e:	3018      	adds	r0, #24
 8014a50:	f001 fc32 	bl	80162b8 <__atomic_load_8>
 8014a54:	4602      	mov	r2, r0
 8014a56:	9804      	ldr	r0, [sp, #16]
 8014a58:	460b      	mov	r3, r1
 8014a5a:	18b6      	adds	r6, r6, r2
 8014a5c:	f8dd c014 	ldr.w	ip, [sp, #20]
 8014a60:	4692      	mov	sl, r2
 8014a62:	eb47 0701 	adc.w	r7, r7, r1
 8014a66:	4286      	cmp	r6, r0
 8014a68:	eb77 010c 	sbcs.w	r1, r7, ip
 8014a6c:	da04      	bge.n	8014a78 <rcl_timer_call+0x94>
 8014a6e:	ea53 0102 	orrs.w	r1, r3, r2
 8014a72:	d12e      	bne.n	8014ad2 <rcl_timer_call+0xee>
 8014a74:	4606      	mov	r6, r0
 8014a76:	4667      	mov	r7, ip
 8014a78:	6820      	ldr	r0, [r4, #0]
 8014a7a:	2105      	movs	r1, #5
 8014a7c:	4632      	mov	r2, r6
 8014a7e:	463b      	mov	r3, r7
 8014a80:	3028      	adds	r0, #40	@ 0x28
 8014a82:	9100      	str	r1, [sp, #0]
 8014a84:	f001 fc4e 	bl	8016324 <__atomic_store_8>
 8014a88:	f1bb 0f00 	cmp.w	fp, #0
 8014a8c:	d00d      	beq.n	8014aaa <rcl_timer_call+0xc6>
 8014a8e:	9a04      	ldr	r2, [sp, #16]
 8014a90:	4620      	mov	r0, r4
 8014a92:	9b05      	ldr	r3, [sp, #20]
 8014a94:	ebb2 0208 	subs.w	r2, r2, r8
 8014a98:	eb63 0309 	sbc.w	r3, r3, r9
 8014a9c:	47d8      	blx	fp
 8014a9e:	4628      	mov	r0, r5
 8014aa0:	b007      	add	sp, #28
 8014aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014aa6:	f240 3521 	movw	r5, #801	@ 0x321
 8014aaa:	4628      	mov	r0, r5
 8014aac:	b007      	add	sp, #28
 8014aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ab2:	2501      	movs	r5, #1
 8014ab4:	4628      	mov	r0, r5
 8014ab6:	b007      	add	sp, #28
 8014ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014abc:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8014ac0:	4628      	mov	r0, r5
 8014ac2:	b007      	add	sp, #28
 8014ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ac8:	250b      	movs	r5, #11
 8014aca:	4628      	mov	r0, r5
 8014acc:	b007      	add	sp, #28
 8014ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ad2:	1b80      	subs	r0, r0, r6
 8014ad4:	eb6c 0107 	sbc.w	r1, ip, r7
 8014ad8:	3801      	subs	r0, #1
 8014ada:	f161 0100 	sbc.w	r1, r1, #0
 8014ade:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8014ae2:	f7eb fc15 	bl	8000310 <__aeabi_ldivmod>
 8014ae6:	9b02      	ldr	r3, [sp, #8]
 8014ae8:	3001      	adds	r0, #1
 8014aea:	f141 0100 	adc.w	r1, r1, #0
 8014aee:	fb00 f303 	mul.w	r3, r0, r3
 8014af2:	fb01 330a 	mla	r3, r1, sl, r3
 8014af6:	fba0 0a0a 	umull	r0, sl, r0, sl
 8014afa:	1986      	adds	r6, r0, r6
 8014afc:	4453      	add	r3, sl
 8014afe:	eb43 0707 	adc.w	r7, r3, r7
 8014b02:	e7b9      	b.n	8014a78 <rcl_timer_call+0x94>

08014b04 <rcl_timer_is_ready>:
 8014b04:	b570      	push	{r4, r5, r6, lr}
 8014b06:	b082      	sub	sp, #8
 8014b08:	b380      	cbz	r0, 8014b6c <rcl_timer_is_ready+0x68>
 8014b0a:	6803      	ldr	r3, [r0, #0]
 8014b0c:	4604      	mov	r4, r0
 8014b0e:	b38b      	cbz	r3, 8014b74 <rcl_timer_is_ready+0x70>
 8014b10:	460d      	mov	r5, r1
 8014b12:	b359      	cbz	r1, 8014b6c <rcl_timer_is_ready+0x68>
 8014b14:	f3bf 8f5b 	dmb	ish
 8014b18:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014b1c:	f3bf 8f5b 	dmb	ish
 8014b20:	b953      	cbnz	r3, 8014b38 <rcl_timer_is_ready+0x34>
 8014b22:	6803      	ldr	r3, [r0, #0]
 8014b24:	4669      	mov	r1, sp
 8014b26:	6818      	ldr	r0, [r3, #0]
 8014b28:	f7ff ff50 	bl	80149cc <rcl_clock_get_now>
 8014b2c:	4606      	mov	r6, r0
 8014b2e:	b148      	cbz	r0, 8014b44 <rcl_timer_is_ready+0x40>
 8014b30:	f240 3321 	movw	r3, #801	@ 0x321
 8014b34:	4298      	cmp	r0, r3
 8014b36:	d102      	bne.n	8014b3e <rcl_timer_is_ready+0x3a>
 8014b38:	2300      	movs	r3, #0
 8014b3a:	461e      	mov	r6, r3
 8014b3c:	702b      	strb	r3, [r5, #0]
 8014b3e:	4630      	mov	r0, r6
 8014b40:	b002      	add	sp, #8
 8014b42:	bd70      	pop	{r4, r5, r6, pc}
 8014b44:	6820      	ldr	r0, [r4, #0]
 8014b46:	2105      	movs	r1, #5
 8014b48:	3028      	adds	r0, #40	@ 0x28
 8014b4a:	f001 fbb5 	bl	80162b8 <__atomic_load_8>
 8014b4e:	9b00      	ldr	r3, [sp, #0]
 8014b50:	1ac0      	subs	r0, r0, r3
 8014b52:	9b01      	ldr	r3, [sp, #4]
 8014b54:	eb61 0103 	sbc.w	r1, r1, r3
 8014b58:	2801      	cmp	r0, #1
 8014b5a:	4630      	mov	r0, r6
 8014b5c:	f171 0300 	sbcs.w	r3, r1, #0
 8014b60:	bfb4      	ite	lt
 8014b62:	2301      	movlt	r3, #1
 8014b64:	2300      	movge	r3, #0
 8014b66:	702b      	strb	r3, [r5, #0]
 8014b68:	b002      	add	sp, #8
 8014b6a:	bd70      	pop	{r4, r5, r6, pc}
 8014b6c:	260b      	movs	r6, #11
 8014b6e:	4630      	mov	r0, r6
 8014b70:	b002      	add	sp, #8
 8014b72:	bd70      	pop	{r4, r5, r6, pc}
 8014b74:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8014b78:	e7e1      	b.n	8014b3e <rcl_timer_is_ready+0x3a>
 8014b7a:	bf00      	nop

08014b7c <rcl_timer_get_time_until_next_call>:
 8014b7c:	b570      	push	{r4, r5, r6, lr}
 8014b7e:	b082      	sub	sp, #8
 8014b80:	b330      	cbz	r0, 8014bd0 <rcl_timer_get_time_until_next_call+0x54>
 8014b82:	6803      	ldr	r3, [r0, #0]
 8014b84:	4604      	mov	r4, r0
 8014b86:	b33b      	cbz	r3, 8014bd8 <rcl_timer_get_time_until_next_call+0x5c>
 8014b88:	460d      	mov	r5, r1
 8014b8a:	b309      	cbz	r1, 8014bd0 <rcl_timer_get_time_until_next_call+0x54>
 8014b8c:	f3bf 8f5b 	dmb	ish
 8014b90:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014b94:	f3bf 8f5b 	dmb	ish
 8014b98:	b9ab      	cbnz	r3, 8014bc6 <rcl_timer_get_time_until_next_call+0x4a>
 8014b9a:	6803      	ldr	r3, [r0, #0]
 8014b9c:	4669      	mov	r1, sp
 8014b9e:	6818      	ldr	r0, [r3, #0]
 8014ba0:	f7ff ff14 	bl	80149cc <rcl_clock_get_now>
 8014ba4:	4606      	mov	r6, r0
 8014ba6:	b958      	cbnz	r0, 8014bc0 <rcl_timer_get_time_until_next_call+0x44>
 8014ba8:	6820      	ldr	r0, [r4, #0]
 8014baa:	2105      	movs	r1, #5
 8014bac:	3028      	adds	r0, #40	@ 0x28
 8014bae:	f001 fb83 	bl	80162b8 <__atomic_load_8>
 8014bb2:	9b00      	ldr	r3, [sp, #0]
 8014bb4:	1ac0      	subs	r0, r0, r3
 8014bb6:	9b01      	ldr	r3, [sp, #4]
 8014bb8:	eb61 0103 	sbc.w	r1, r1, r3
 8014bbc:	6028      	str	r0, [r5, #0]
 8014bbe:	6069      	str	r1, [r5, #4]
 8014bc0:	4630      	mov	r0, r6
 8014bc2:	b002      	add	sp, #8
 8014bc4:	bd70      	pop	{r4, r5, r6, pc}
 8014bc6:	f240 3621 	movw	r6, #801	@ 0x321
 8014bca:	4630      	mov	r0, r6
 8014bcc:	b002      	add	sp, #8
 8014bce:	bd70      	pop	{r4, r5, r6, pc}
 8014bd0:	260b      	movs	r6, #11
 8014bd2:	4630      	mov	r0, r6
 8014bd4:	b002      	add	sp, #8
 8014bd6:	bd70      	pop	{r4, r5, r6, pc}
 8014bd8:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8014bdc:	e7f0      	b.n	8014bc0 <rcl_timer_get_time_until_next_call+0x44>
 8014bde:	bf00      	nop

08014be0 <rcl_timer_get_guard_condition>:
 8014be0:	b130      	cbz	r0, 8014bf0 <rcl_timer_get_guard_condition+0x10>
 8014be2:	6800      	ldr	r0, [r0, #0]
 8014be4:	b120      	cbz	r0, 8014bf0 <rcl_timer_get_guard_condition+0x10>
 8014be6:	68c3      	ldr	r3, [r0, #12]
 8014be8:	b10b      	cbz	r3, 8014bee <rcl_timer_get_guard_condition+0xe>
 8014bea:	3008      	adds	r0, #8
 8014bec:	4770      	bx	lr
 8014bee:	4618      	mov	r0, r3
 8014bf0:	4770      	bx	lr
 8014bf2:	bf00      	nop

08014bf4 <rcl_get_zero_initialized_wait_set>:
 8014bf4:	b510      	push	{r4, lr}
 8014bf6:	4c08      	ldr	r4, [pc, #32]	@ (8014c18 <rcl_get_zero_initialized_wait_set+0x24>)
 8014bf8:	4686      	mov	lr, r0
 8014bfa:	4684      	mov	ip, r0
 8014bfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014bfe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014c02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014c04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014c08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014c0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014c0e:	6823      	ldr	r3, [r4, #0]
 8014c10:	4670      	mov	r0, lr
 8014c12:	f8cc 3000 	str.w	r3, [ip]
 8014c16:	bd10      	pop	{r4, pc}
 8014c18:	0801d460 	.word	0x0801d460

08014c1c <rcl_wait_set_is_valid>:
 8014c1c:	b118      	cbz	r0, 8014c26 <rcl_wait_set_is_valid+0xa>
 8014c1e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8014c20:	3800      	subs	r0, #0
 8014c22:	bf18      	it	ne
 8014c24:	2001      	movne	r0, #1
 8014c26:	4770      	bx	lr

08014c28 <rcl_wait_set_fini>:
 8014c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c2c:	b082      	sub	sp, #8
 8014c2e:	2800      	cmp	r0, #0
 8014c30:	f000 8095 	beq.w	8014d5e <rcl_wait_set_fini+0x136>
 8014c34:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8014c36:	4604      	mov	r4, r0
 8014c38:	2e00      	cmp	r6, #0
 8014c3a:	f000 808c 	beq.w	8014d56 <rcl_wait_set_fini+0x12e>
 8014c3e:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8014c40:	f003 fafa 	bl	8018238 <rmw_destroy_wait_set>
 8014c44:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014c46:	1e06      	subs	r6, r0, #0
 8014c48:	bf18      	it	ne
 8014c4a:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8014c4e:	2d00      	cmp	r5, #0
 8014c50:	f000 8081 	beq.w	8014d56 <rcl_wait_set_fini+0x12e>
 8014c54:	2700      	movs	r7, #0
 8014c56:	6820      	ldr	r0, [r4, #0]
 8014c58:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8014c5c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014c5e:	6067      	str	r7, [r4, #4]
 8014c60:	602f      	str	r7, [r5, #0]
 8014c62:	b120      	cbz	r0, 8014c6e <rcl_wait_set_fini+0x46>
 8014c64:	9101      	str	r1, [sp, #4]
 8014c66:	47c0      	blx	r8
 8014c68:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014c6a:	9901      	ldr	r1, [sp, #4]
 8014c6c:	6027      	str	r7, [r4, #0]
 8014c6e:	68a8      	ldr	r0, [r5, #8]
 8014c70:	b120      	cbz	r0, 8014c7c <rcl_wait_set_fini+0x54>
 8014c72:	47c0      	blx	r8
 8014c74:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014c76:	2300      	movs	r3, #0
 8014c78:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8014c7c:	f04f 0800 	mov.w	r8, #0
 8014c80:	68a0      	ldr	r0, [r4, #8]
 8014c82:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014c84:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014c86:	f8c4 800c 	str.w	r8, [r4, #12]
 8014c8a:	f8c5 800c 	str.w	r8, [r5, #12]
 8014c8e:	b128      	cbz	r0, 8014c9c <rcl_wait_set_fini+0x74>
 8014c90:	47b8      	blx	r7
 8014c92:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014c94:	f8c4 8008 	str.w	r8, [r4, #8]
 8014c98:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014c9a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014c9c:	f04f 0800 	mov.w	r8, #0
 8014ca0:	6968      	ldr	r0, [r5, #20]
 8014ca2:	f8c5 8010 	str.w	r8, [r5, #16]
 8014ca6:	b128      	cbz	r0, 8014cb4 <rcl_wait_set_fini+0x8c>
 8014ca8:	47b8      	blx	r7
 8014caa:	f8c5 8014 	str.w	r8, [r5, #20]
 8014cae:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014cb0:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014cb2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014cb4:	f04f 0800 	mov.w	r8, #0
 8014cb8:	6920      	ldr	r0, [r4, #16]
 8014cba:	f8c4 8014 	str.w	r8, [r4, #20]
 8014cbe:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8014cc2:	b128      	cbz	r0, 8014cd0 <rcl_wait_set_fini+0xa8>
 8014cc4:	47b8      	blx	r7
 8014cc6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014cc8:	f8c4 8010 	str.w	r8, [r4, #16]
 8014ccc:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014cce:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014cd0:	f04f 0800 	mov.w	r8, #0
 8014cd4:	69a0      	ldr	r0, [r4, #24]
 8014cd6:	f8c4 801c 	str.w	r8, [r4, #28]
 8014cda:	f8c5 8018 	str.w	r8, [r5, #24]
 8014cde:	b128      	cbz	r0, 8014cec <rcl_wait_set_fini+0xc4>
 8014ce0:	9101      	str	r1, [sp, #4]
 8014ce2:	47b8      	blx	r7
 8014ce4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014ce6:	9901      	ldr	r1, [sp, #4]
 8014ce8:	f8c4 8018 	str.w	r8, [r4, #24]
 8014cec:	6a28      	ldr	r0, [r5, #32]
 8014cee:	b120      	cbz	r0, 8014cfa <rcl_wait_set_fini+0xd2>
 8014cf0:	47b8      	blx	r7
 8014cf2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014cf4:	2300      	movs	r3, #0
 8014cf6:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8014cfa:	2700      	movs	r7, #0
 8014cfc:	6a20      	ldr	r0, [r4, #32]
 8014cfe:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8014d02:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014d04:	6267      	str	r7, [r4, #36]	@ 0x24
 8014d06:	626f      	str	r7, [r5, #36]	@ 0x24
 8014d08:	b120      	cbz	r0, 8014d14 <rcl_wait_set_fini+0xec>
 8014d0a:	9101      	str	r1, [sp, #4]
 8014d0c:	47c0      	blx	r8
 8014d0e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014d10:	9901      	ldr	r1, [sp, #4]
 8014d12:	6227      	str	r7, [r4, #32]
 8014d14:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8014d16:	b120      	cbz	r0, 8014d22 <rcl_wait_set_fini+0xfa>
 8014d18:	47c0      	blx	r8
 8014d1a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014d1c:	2300      	movs	r3, #0
 8014d1e:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8014d22:	2700      	movs	r7, #0
 8014d24:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014d26:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8014d2a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014d2c:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8014d2e:	632f      	str	r7, [r5, #48]	@ 0x30
 8014d30:	b120      	cbz	r0, 8014d3c <rcl_wait_set_fini+0x114>
 8014d32:	9101      	str	r1, [sp, #4]
 8014d34:	47c0      	blx	r8
 8014d36:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014d38:	9901      	ldr	r1, [sp, #4]
 8014d3a:	62a7      	str	r7, [r4, #40]	@ 0x28
 8014d3c:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8014d3e:	b120      	cbz	r0, 8014d4a <rcl_wait_set_fini+0x122>
 8014d40:	47c0      	blx	r8
 8014d42:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014d44:	2300      	movs	r3, #0
 8014d46:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8014d4a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8014d4c:	4628      	mov	r0, r5
 8014d4e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014d50:	4798      	blx	r3
 8014d52:	2300      	movs	r3, #0
 8014d54:	6323      	str	r3, [r4, #48]	@ 0x30
 8014d56:	4630      	mov	r0, r6
 8014d58:	b002      	add	sp, #8
 8014d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d5e:	260b      	movs	r6, #11
 8014d60:	4630      	mov	r0, r6
 8014d62:	b002      	add	sp, #8
 8014d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014d68 <rcl_wait_set_add_subscription>:
 8014d68:	b318      	cbz	r0, 8014db2 <rcl_wait_set_add_subscription+0x4a>
 8014d6a:	b538      	push	{r3, r4, r5, lr}
 8014d6c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014d6e:	4604      	mov	r4, r0
 8014d70:	b30b      	cbz	r3, 8014db6 <rcl_wait_set_add_subscription+0x4e>
 8014d72:	b319      	cbz	r1, 8014dbc <rcl_wait_set_add_subscription+0x54>
 8014d74:	681d      	ldr	r5, [r3, #0]
 8014d76:	6840      	ldr	r0, [r0, #4]
 8014d78:	4285      	cmp	r5, r0
 8014d7a:	d217      	bcs.n	8014dac <rcl_wait_set_add_subscription+0x44>
 8014d7c:	1c68      	adds	r0, r5, #1
 8014d7e:	6018      	str	r0, [r3, #0]
 8014d80:	6823      	ldr	r3, [r4, #0]
 8014d82:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8014d86:	b102      	cbz	r2, 8014d8a <rcl_wait_set_add_subscription+0x22>
 8014d88:	6015      	str	r5, [r2, #0]
 8014d8a:	4608      	mov	r0, r1
 8014d8c:	f7ff fd6c 	bl	8014868 <rcl_subscription_get_rmw_handle>
 8014d90:	b150      	cbz	r0, 8014da8 <rcl_wait_set_add_subscription+0x40>
 8014d92:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014d94:	6842      	ldr	r2, [r0, #4]
 8014d96:	2000      	movs	r0, #0
 8014d98:	689b      	ldr	r3, [r3, #8]
 8014d9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014d9e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014da0:	6853      	ldr	r3, [r2, #4]
 8014da2:	3301      	adds	r3, #1
 8014da4:	6053      	str	r3, [r2, #4]
 8014da6:	bd38      	pop	{r3, r4, r5, pc}
 8014da8:	2001      	movs	r0, #1
 8014daa:	bd38      	pop	{r3, r4, r5, pc}
 8014dac:	f240 3086 	movw	r0, #902	@ 0x386
 8014db0:	bd38      	pop	{r3, r4, r5, pc}
 8014db2:	200b      	movs	r0, #11
 8014db4:	4770      	bx	lr
 8014db6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014dba:	bd38      	pop	{r3, r4, r5, pc}
 8014dbc:	200b      	movs	r0, #11
 8014dbe:	bd38      	pop	{r3, r4, r5, pc}

08014dc0 <rcl_wait_set_clear>:
 8014dc0:	2800      	cmp	r0, #0
 8014dc2:	d074      	beq.n	8014eae <rcl_wait_set_clear+0xee>
 8014dc4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014dc6:	b510      	push	{r4, lr}
 8014dc8:	4604      	mov	r4, r0
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d071      	beq.n	8014eb2 <rcl_wait_set_clear+0xf2>
 8014dce:	6800      	ldr	r0, [r0, #0]
 8014dd0:	b138      	cbz	r0, 8014de2 <rcl_wait_set_clear+0x22>
 8014dd2:	6862      	ldr	r2, [r4, #4]
 8014dd4:	2100      	movs	r1, #0
 8014dd6:	0092      	lsls	r2, r2, #2
 8014dd8:	f006 fbfe 	bl	801b5d8 <memset>
 8014ddc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014dde:	2200      	movs	r2, #0
 8014de0:	601a      	str	r2, [r3, #0]
 8014de2:	68a0      	ldr	r0, [r4, #8]
 8014de4:	b138      	cbz	r0, 8014df6 <rcl_wait_set_clear+0x36>
 8014de6:	68e2      	ldr	r2, [r4, #12]
 8014de8:	2100      	movs	r1, #0
 8014dea:	0092      	lsls	r2, r2, #2
 8014dec:	f006 fbf4 	bl	801b5d8 <memset>
 8014df0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014df2:	2200      	movs	r2, #0
 8014df4:	60da      	str	r2, [r3, #12]
 8014df6:	69a0      	ldr	r0, [r4, #24]
 8014df8:	b138      	cbz	r0, 8014e0a <rcl_wait_set_clear+0x4a>
 8014dfa:	69e2      	ldr	r2, [r4, #28]
 8014dfc:	2100      	movs	r1, #0
 8014dfe:	0092      	lsls	r2, r2, #2
 8014e00:	f006 fbea 	bl	801b5d8 <memset>
 8014e04:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014e06:	2200      	movs	r2, #0
 8014e08:	619a      	str	r2, [r3, #24]
 8014e0a:	6a20      	ldr	r0, [r4, #32]
 8014e0c:	b138      	cbz	r0, 8014e1e <rcl_wait_set_clear+0x5e>
 8014e0e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8014e10:	2100      	movs	r1, #0
 8014e12:	0092      	lsls	r2, r2, #2
 8014e14:	f006 fbe0 	bl	801b5d8 <memset>
 8014e18:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014e1a:	2200      	movs	r2, #0
 8014e1c:	625a      	str	r2, [r3, #36]	@ 0x24
 8014e1e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014e20:	b138      	cbz	r0, 8014e32 <rcl_wait_set_clear+0x72>
 8014e22:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014e24:	2100      	movs	r1, #0
 8014e26:	0092      	lsls	r2, r2, #2
 8014e28:	f006 fbd6 	bl	801b5d8 <memset>
 8014e2c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014e2e:	2200      	movs	r2, #0
 8014e30:	631a      	str	r2, [r3, #48]	@ 0x30
 8014e32:	6920      	ldr	r0, [r4, #16]
 8014e34:	b138      	cbz	r0, 8014e46 <rcl_wait_set_clear+0x86>
 8014e36:	6962      	ldr	r2, [r4, #20]
 8014e38:	2100      	movs	r1, #0
 8014e3a:	0092      	lsls	r2, r2, #2
 8014e3c:	f006 fbcc 	bl	801b5d8 <memset>
 8014e40:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014e42:	2200      	movs	r2, #0
 8014e44:	641a      	str	r2, [r3, #64]	@ 0x40
 8014e46:	6898      	ldr	r0, [r3, #8]
 8014e48:	b138      	cbz	r0, 8014e5a <rcl_wait_set_clear+0x9a>
 8014e4a:	685a      	ldr	r2, [r3, #4]
 8014e4c:	2100      	movs	r1, #0
 8014e4e:	0092      	lsls	r2, r2, #2
 8014e50:	f006 fbc2 	bl	801b5d8 <memset>
 8014e54:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014e56:	2200      	movs	r2, #0
 8014e58:	605a      	str	r2, [r3, #4]
 8014e5a:	6958      	ldr	r0, [r3, #20]
 8014e5c:	b138      	cbz	r0, 8014e6e <rcl_wait_set_clear+0xae>
 8014e5e:	691a      	ldr	r2, [r3, #16]
 8014e60:	2100      	movs	r1, #0
 8014e62:	0092      	lsls	r2, r2, #2
 8014e64:	f006 fbb8 	bl	801b5d8 <memset>
 8014e68:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014e6a:	2200      	movs	r2, #0
 8014e6c:	611a      	str	r2, [r3, #16]
 8014e6e:	6a18      	ldr	r0, [r3, #32]
 8014e70:	b138      	cbz	r0, 8014e82 <rcl_wait_set_clear+0xc2>
 8014e72:	69da      	ldr	r2, [r3, #28]
 8014e74:	2100      	movs	r1, #0
 8014e76:	0092      	lsls	r2, r2, #2
 8014e78:	f006 fbae 	bl	801b5d8 <memset>
 8014e7c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014e7e:	2200      	movs	r2, #0
 8014e80:	61da      	str	r2, [r3, #28]
 8014e82:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8014e84:	b138      	cbz	r0, 8014e96 <rcl_wait_set_clear+0xd6>
 8014e86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014e88:	2100      	movs	r1, #0
 8014e8a:	0092      	lsls	r2, r2, #2
 8014e8c:	f006 fba4 	bl	801b5d8 <memset>
 8014e90:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014e92:	2200      	movs	r2, #0
 8014e94:	629a      	str	r2, [r3, #40]	@ 0x28
 8014e96:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8014e98:	b140      	cbz	r0, 8014eac <rcl_wait_set_clear+0xec>
 8014e9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014e9c:	2100      	movs	r1, #0
 8014e9e:	0092      	lsls	r2, r2, #2
 8014ea0:	f006 fb9a 	bl	801b5d8 <memset>
 8014ea4:	2300      	movs	r3, #0
 8014ea6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014ea8:	4618      	mov	r0, r3
 8014eaa:	6353      	str	r3, [r2, #52]	@ 0x34
 8014eac:	bd10      	pop	{r4, pc}
 8014eae:	200b      	movs	r0, #11
 8014eb0:	4770      	bx	lr
 8014eb2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014eb6:	bd10      	pop	{r4, pc}

08014eb8 <rcl_wait_set_resize>:
 8014eb8:	2800      	cmp	r0, #0
 8014eba:	f000 8180 	beq.w	80151be <rcl_wait_set_resize+0x306>
 8014ebe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ec2:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8014ec4:	b083      	sub	sp, #12
 8014ec6:	4605      	mov	r5, r0
 8014ec8:	2c00      	cmp	r4, #0
 8014eca:	f000 817a 	beq.w	80151c2 <rcl_wait_set_resize+0x30a>
 8014ece:	f04f 0900 	mov.w	r9, #0
 8014ed2:	461f      	mov	r7, r3
 8014ed4:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8014ed8:	4688      	mov	r8, r1
 8014eda:	4616      	mov	r6, r2
 8014edc:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8014ee0:	f8c0 9004 	str.w	r9, [r0, #4]
 8014ee4:	f8c4 9000 	str.w	r9, [r4]
 8014ee8:	2900      	cmp	r1, #0
 8014eea:	f000 80bf 	beq.w	801506c <rcl_wait_set_resize+0x1b4>
 8014eee:	008c      	lsls	r4, r1, #2
 8014ef0:	4652      	mov	r2, sl
 8014ef2:	6800      	ldr	r0, [r0, #0]
 8014ef4:	4621      	mov	r1, r4
 8014ef6:	9301      	str	r3, [sp, #4]
 8014ef8:	4798      	blx	r3
 8014efa:	9b01      	ldr	r3, [sp, #4]
 8014efc:	6028      	str	r0, [r5, #0]
 8014efe:	2800      	cmp	r0, #0
 8014f00:	f000 80f6 	beq.w	80150f0 <rcl_wait_set_resize+0x238>
 8014f04:	4622      	mov	r2, r4
 8014f06:	4649      	mov	r1, r9
 8014f08:	9301      	str	r3, [sp, #4]
 8014f0a:	f006 fb65 	bl	801b5d8 <memset>
 8014f0e:	f8c5 8004 	str.w	r8, [r5, #4]
 8014f12:	4652      	mov	r2, sl
 8014f14:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8014f18:	4621      	mov	r1, r4
 8014f1a:	9b01      	ldr	r3, [sp, #4]
 8014f1c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8014f20:	f8c8 9004 	str.w	r9, [r8, #4]
 8014f24:	4798      	blx	r3
 8014f26:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014f28:	f8c8 0008 	str.w	r0, [r8, #8]
 8014f2c:	689b      	ldr	r3, [r3, #8]
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	f000 814a 	beq.w	80151c8 <rcl_wait_set_resize+0x310>
 8014f34:	4622      	mov	r2, r4
 8014f36:	4649      	mov	r1, r9
 8014f38:	4618      	mov	r0, r3
 8014f3a:	f006 fb4d 	bl	801b5d8 <memset>
 8014f3e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014f40:	f04f 0800 	mov.w	r8, #0
 8014f44:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014f48:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8014f4c:	f8c5 800c 	str.w	r8, [r5, #12]
 8014f50:	f8c4 800c 	str.w	r8, [r4, #12]
 8014f54:	2e00      	cmp	r6, #0
 8014f56:	f040 809b 	bne.w	8015090 <rcl_wait_set_resize+0x1d8>
 8014f5a:	68a8      	ldr	r0, [r5, #8]
 8014f5c:	b128      	cbz	r0, 8014f6a <rcl_wait_set_resize+0xb2>
 8014f5e:	4649      	mov	r1, r9
 8014f60:	4790      	blx	r2
 8014f62:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014f64:	60ae      	str	r6, [r5, #8]
 8014f66:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014f6a:	f04f 0800 	mov.w	r8, #0
 8014f6e:	19f6      	adds	r6, r6, r7
 8014f70:	f8c4 8010 	str.w	r8, [r4, #16]
 8014f74:	f040 80a2 	bne.w	80150bc <rcl_wait_set_resize+0x204>
 8014f78:	6960      	ldr	r0, [r4, #20]
 8014f7a:	b130      	cbz	r0, 8014f8a <rcl_wait_set_resize+0xd2>
 8014f7c:	4649      	mov	r1, r9
 8014f7e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8014f80:	4798      	blx	r3
 8014f82:	6166      	str	r6, [r4, #20]
 8014f84:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014f86:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014f8a:	2600      	movs	r6, #0
 8014f8c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8014f90:	616e      	str	r6, [r5, #20]
 8014f92:	6426      	str	r6, [r4, #64]	@ 0x40
 8014f94:	2f00      	cmp	r7, #0
 8014f96:	f040 80af 	bne.w	80150f8 <rcl_wait_set_resize+0x240>
 8014f9a:	6928      	ldr	r0, [r5, #16]
 8014f9c:	b138      	cbz	r0, 8014fae <rcl_wait_set_resize+0xf6>
 8014f9e:	4649      	mov	r1, r9
 8014fa0:	47d0      	blx	sl
 8014fa2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014fa4:	612f      	str	r7, [r5, #16]
 8014fa6:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014faa:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8014fae:	2600      	movs	r6, #0
 8014fb0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014fb2:	61ee      	str	r6, [r5, #28]
 8014fb4:	61a6      	str	r6, [r4, #24]
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	f040 8093 	bne.w	80150e2 <rcl_wait_set_resize+0x22a>
 8014fbc:	69a8      	ldr	r0, [r5, #24]
 8014fbe:	b120      	cbz	r0, 8014fca <rcl_wait_set_resize+0x112>
 8014fc0:	4649      	mov	r1, r9
 8014fc2:	47d0      	blx	sl
 8014fc4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014fc6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014fc8:	61ab      	str	r3, [r5, #24]
 8014fca:	6a20      	ldr	r0, [r4, #32]
 8014fcc:	b128      	cbz	r0, 8014fda <rcl_wait_set_resize+0x122>
 8014fce:	4649      	mov	r1, r9
 8014fd0:	47d0      	blx	sl
 8014fd2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014fd4:	2300      	movs	r3, #0
 8014fd6:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8014fda:	2600      	movs	r6, #0
 8014fdc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014fde:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8014fe0:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8014fe4:	626e      	str	r6, [r5, #36]	@ 0x24
 8014fe6:	6266      	str	r6, [r4, #36]	@ 0x24
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	f000 8098 	beq.w	801511e <rcl_wait_set_resize+0x266>
 8014fee:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8014ff2:	463a      	mov	r2, r7
 8014ff4:	6a28      	ldr	r0, [r5, #32]
 8014ff6:	4651      	mov	r1, sl
 8014ff8:	47c8      	blx	r9
 8014ffa:	6228      	str	r0, [r5, #32]
 8014ffc:	2800      	cmp	r0, #0
 8014ffe:	d077      	beq.n	80150f0 <rcl_wait_set_resize+0x238>
 8015000:	4652      	mov	r2, sl
 8015002:	4631      	mov	r1, r6
 8015004:	f006 fae8 	bl	801b5d8 <memset>
 8015008:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801500a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801500c:	463a      	mov	r2, r7
 801500e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8015010:	4651      	mov	r1, sl
 8015012:	626b      	str	r3, [r5, #36]	@ 0x24
 8015014:	62a6      	str	r6, [r4, #40]	@ 0x28
 8015016:	47c8      	blx	r9
 8015018:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801501a:	62e0      	str	r0, [r4, #44]	@ 0x2c
 801501c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801501e:	2c00      	cmp	r4, #0
 8015020:	f000 80f2 	beq.w	8015208 <rcl_wait_set_resize+0x350>
 8015024:	4620      	mov	r0, r4
 8015026:	4652      	mov	r2, sl
 8015028:	4631      	mov	r1, r6
 801502a:	f006 fad5 	bl	801b5d8 <memset>
 801502e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015030:	2600      	movs	r6, #0
 8015032:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015034:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8015036:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801503a:	62ee      	str	r6, [r5, #44]	@ 0x2c
 801503c:	6326      	str	r6, [r4, #48]	@ 0x30
 801503e:	2b00      	cmp	r3, #0
 8015040:	f040 8097 	bne.w	8015172 <rcl_wait_set_resize+0x2ba>
 8015044:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8015046:	b120      	cbz	r0, 8015052 <rcl_wait_set_resize+0x19a>
 8015048:	4639      	mov	r1, r7
 801504a:	47c0      	blx	r8
 801504c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801504e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015050:	62ab      	str	r3, [r5, #40]	@ 0x28
 8015052:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015054:	2800      	cmp	r0, #0
 8015056:	d04c      	beq.n	80150f2 <rcl_wait_set_resize+0x23a>
 8015058:	4639      	mov	r1, r7
 801505a:	47c0      	blx	r8
 801505c:	2300      	movs	r3, #0
 801505e:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8015060:	4618      	mov	r0, r3
 8015062:	e9c2 330d 	strd	r3, r3, [r2, #52]	@ 0x34
 8015066:	b003      	add	sp, #12
 8015068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801506c:	6800      	ldr	r0, [r0, #0]
 801506e:	b120      	cbz	r0, 801507a <rcl_wait_set_resize+0x1c2>
 8015070:	4651      	mov	r1, sl
 8015072:	47d8      	blx	fp
 8015074:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015076:	f8c5 8000 	str.w	r8, [r5]
 801507a:	68a0      	ldr	r0, [r4, #8]
 801507c:	2800      	cmp	r0, #0
 801507e:	f43f af5f 	beq.w	8014f40 <rcl_wait_set_resize+0x88>
 8015082:	4651      	mov	r1, sl
 8015084:	47d8      	blx	fp
 8015086:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015088:	2300      	movs	r3, #0
 801508a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801508e:	e757      	b.n	8014f40 <rcl_wait_set_resize+0x88>
 8015090:	00b4      	lsls	r4, r6, #2
 8015092:	464a      	mov	r2, r9
 8015094:	68a8      	ldr	r0, [r5, #8]
 8015096:	4621      	mov	r1, r4
 8015098:	4798      	blx	r3
 801509a:	60a8      	str	r0, [r5, #8]
 801509c:	b340      	cbz	r0, 80150f0 <rcl_wait_set_resize+0x238>
 801509e:	4622      	mov	r2, r4
 80150a0:	4641      	mov	r1, r8
 80150a2:	f006 fa99 	bl	801b5d8 <memset>
 80150a6:	f04f 0800 	mov.w	r8, #0
 80150aa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80150ac:	60ee      	str	r6, [r5, #12]
 80150ae:	19f6      	adds	r6, r6, r7
 80150b0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80150b4:	f8c4 8010 	str.w	r8, [r4, #16]
 80150b8:	f43f af5e 	beq.w	8014f78 <rcl_wait_set_resize+0xc0>
 80150bc:	00b6      	lsls	r6, r6, #2
 80150be:	464a      	mov	r2, r9
 80150c0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80150c2:	6960      	ldr	r0, [r4, #20]
 80150c4:	4631      	mov	r1, r6
 80150c6:	4798      	blx	r3
 80150c8:	4681      	mov	r9, r0
 80150ca:	6160      	str	r0, [r4, #20]
 80150cc:	2800      	cmp	r0, #0
 80150ce:	f000 8084 	beq.w	80151da <rcl_wait_set_resize+0x322>
 80150d2:	4632      	mov	r2, r6
 80150d4:	4641      	mov	r1, r8
 80150d6:	f006 fa7f 	bl	801b5d8 <memset>
 80150da:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80150dc:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80150e0:	e753      	b.n	8014f8a <rcl_wait_set_resize+0xd2>
 80150e2:	009c      	lsls	r4, r3, #2
 80150e4:	464a      	mov	r2, r9
 80150e6:	69a8      	ldr	r0, [r5, #24]
 80150e8:	4621      	mov	r1, r4
 80150ea:	47c0      	blx	r8
 80150ec:	61a8      	str	r0, [r5, #24]
 80150ee:	bb40      	cbnz	r0, 8015142 <rcl_wait_set_resize+0x28a>
 80150f0:	200a      	movs	r0, #10
 80150f2:	b003      	add	sp, #12
 80150f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150f8:	00bc      	lsls	r4, r7, #2
 80150fa:	464a      	mov	r2, r9
 80150fc:	6928      	ldr	r0, [r5, #16]
 80150fe:	4621      	mov	r1, r4
 8015100:	47c0      	blx	r8
 8015102:	6128      	str	r0, [r5, #16]
 8015104:	2800      	cmp	r0, #0
 8015106:	d0f3      	beq.n	80150f0 <rcl_wait_set_resize+0x238>
 8015108:	4622      	mov	r2, r4
 801510a:	4631      	mov	r1, r6
 801510c:	f006 fa64 	bl	801b5d8 <memset>
 8015110:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015112:	616f      	str	r7, [r5, #20]
 8015114:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015118:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801511c:	e747      	b.n	8014fae <rcl_wait_set_resize+0xf6>
 801511e:	6a28      	ldr	r0, [r5, #32]
 8015120:	b120      	cbz	r0, 801512c <rcl_wait_set_resize+0x274>
 8015122:	4639      	mov	r1, r7
 8015124:	47c0      	blx	r8
 8015126:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015128:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801512a:	622b      	str	r3, [r5, #32]
 801512c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801512e:	2800      	cmp	r0, #0
 8015130:	f43f af7e 	beq.w	8015030 <rcl_wait_set_resize+0x178>
 8015134:	4639      	mov	r1, r7
 8015136:	47c0      	blx	r8
 8015138:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801513a:	2300      	movs	r3, #0
 801513c:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8015140:	e776      	b.n	8015030 <rcl_wait_set_resize+0x178>
 8015142:	4622      	mov	r2, r4
 8015144:	4631      	mov	r1, r6
 8015146:	f006 fa47 	bl	801b5d8 <memset>
 801514a:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 801514c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801514e:	464a      	mov	r2, r9
 8015150:	6a38      	ldr	r0, [r7, #32]
 8015152:	4621      	mov	r1, r4
 8015154:	61eb      	str	r3, [r5, #28]
 8015156:	61fe      	str	r6, [r7, #28]
 8015158:	47c0      	blx	r8
 801515a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801515c:	6238      	str	r0, [r7, #32]
 801515e:	6a1f      	ldr	r7, [r3, #32]
 8015160:	2f00      	cmp	r7, #0
 8015162:	d04a      	beq.n	80151fa <rcl_wait_set_resize+0x342>
 8015164:	4622      	mov	r2, r4
 8015166:	4631      	mov	r1, r6
 8015168:	4638      	mov	r0, r7
 801516a:	f006 fa35 	bl	801b5d8 <memset>
 801516e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015170:	e733      	b.n	8014fda <rcl_wait_set_resize+0x122>
 8015172:	009c      	lsls	r4, r3, #2
 8015174:	463a      	mov	r2, r7
 8015176:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8015178:	4621      	mov	r1, r4
 801517a:	47c8      	blx	r9
 801517c:	62a8      	str	r0, [r5, #40]	@ 0x28
 801517e:	2800      	cmp	r0, #0
 8015180:	d0b6      	beq.n	80150f0 <rcl_wait_set_resize+0x238>
 8015182:	4622      	mov	r2, r4
 8015184:	4631      	mov	r1, r6
 8015186:	f006 fa27 	bl	801b5d8 <memset>
 801518a:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801518e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015190:	463a      	mov	r2, r7
 8015192:	4621      	mov	r1, r4
 8015194:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8015198:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801519a:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 801519e:	47c8      	blx	r9
 80151a0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80151a2:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 80151a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d034      	beq.n	8015216 <rcl_wait_set_resize+0x35e>
 80151ac:	4622      	mov	r2, r4
 80151ae:	4631      	mov	r1, r6
 80151b0:	4618      	mov	r0, r3
 80151b2:	f006 fa11 	bl	801b5d8 <memset>
 80151b6:	4630      	mov	r0, r6
 80151b8:	b003      	add	sp, #12
 80151ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151be:	200b      	movs	r0, #11
 80151c0:	4770      	bx	lr
 80151c2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80151c6:	e794      	b.n	80150f2 <rcl_wait_set_resize+0x23a>
 80151c8:	6828      	ldr	r0, [r5, #0]
 80151ca:	4651      	mov	r1, sl
 80151cc:	9301      	str	r3, [sp, #4]
 80151ce:	47d8      	blx	fp
 80151d0:	9b01      	ldr	r3, [sp, #4]
 80151d2:	200a      	movs	r0, #10
 80151d4:	e9c5 3300 	strd	r3, r3, [r5]
 80151d8:	e78b      	b.n	80150f2 <rcl_wait_set_resize+0x23a>
 80151da:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80151dc:	68a8      	ldr	r0, [r5, #8]
 80151de:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80151e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80151e2:	4798      	blx	r3
 80151e4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80151e6:	6928      	ldr	r0, [r5, #16]
 80151e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80151ea:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80151ec:	e9c5 9902 	strd	r9, r9, [r5, #8]
 80151f0:	4790      	blx	r2
 80151f2:	200a      	movs	r0, #10
 80151f4:	e9c5 9904 	strd	r9, r9, [r5, #16]
 80151f8:	e77b      	b.n	80150f2 <rcl_wait_set_resize+0x23a>
 80151fa:	69a8      	ldr	r0, [r5, #24]
 80151fc:	4649      	mov	r1, r9
 80151fe:	47d0      	blx	sl
 8015200:	200a      	movs	r0, #10
 8015202:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8015206:	e774      	b.n	80150f2 <rcl_wait_set_resize+0x23a>
 8015208:	6a28      	ldr	r0, [r5, #32]
 801520a:	4639      	mov	r1, r7
 801520c:	47c0      	blx	r8
 801520e:	200a      	movs	r0, #10
 8015210:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8015214:	e76d      	b.n	80150f2 <rcl_wait_set_resize+0x23a>
 8015216:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8015218:	4639      	mov	r1, r7
 801521a:	9301      	str	r3, [sp, #4]
 801521c:	47c0      	blx	r8
 801521e:	9b01      	ldr	r3, [sp, #4]
 8015220:	200a      	movs	r0, #10
 8015222:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8015226:	e764      	b.n	80150f2 <rcl_wait_set_resize+0x23a>

08015228 <rcl_wait_set_init>:
 8015228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801522c:	b085      	sub	sp, #20
 801522e:	4605      	mov	r5, r0
 8015230:	460e      	mov	r6, r1
 8015232:	4617      	mov	r7, r2
 8015234:	a812      	add	r0, sp, #72	@ 0x48
 8015236:	4698      	mov	r8, r3
 8015238:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 801523c:	f7fa fc72 	bl	800fb24 <rcutils_allocator_is_valid>
 8015240:	2d00      	cmp	r5, #0
 8015242:	d072      	beq.n	801532a <rcl_wait_set_init+0x102>
 8015244:	f080 0001 	eor.w	r0, r0, #1
 8015248:	b2c0      	uxtb	r0, r0
 801524a:	2800      	cmp	r0, #0
 801524c:	d16d      	bne.n	801532a <rcl_wait_set_init+0x102>
 801524e:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8015252:	f1ba 0f00 	cmp.w	sl, #0
 8015256:	d004      	beq.n	8015262 <rcl_wait_set_init+0x3a>
 8015258:	2464      	movs	r4, #100	@ 0x64
 801525a:	4620      	mov	r0, r4
 801525c:	b005      	add	sp, #20
 801525e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015262:	f1b9 0f00 	cmp.w	r9, #0
 8015266:	d060      	beq.n	801532a <rcl_wait_set_init+0x102>
 8015268:	4648      	mov	r0, r9
 801526a:	f7fe fb75 	bl	8013958 <rcl_context_is_valid>
 801526e:	2800      	cmp	r0, #0
 8015270:	d068      	beq.n	8015344 <rcl_wait_set_init+0x11c>
 8015272:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015274:	205c      	movs	r0, #92	@ 0x5c
 8015276:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8015278:	4798      	blx	r3
 801527a:	6328      	str	r0, [r5, #48]	@ 0x30
 801527c:	2800      	cmp	r0, #0
 801527e:	d063      	beq.n	8015348 <rcl_wait_set_init+0x120>
 8015280:	225c      	movs	r2, #92	@ 0x5c
 8015282:	4651      	mov	r1, sl
 8015284:	f006 f9a8 	bl	801b5d8 <memset>
 8015288:	ac12      	add	r4, sp, #72	@ 0x48
 801528a:	f8d5 b030 	ldr.w	fp, [r5, #48]	@ 0x30
 801528e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8015292:	f10b 0c48 	add.w	ip, fp, #72	@ 0x48
 8015296:	f8cb 9044 	str.w	r9, [fp, #68]	@ 0x44
 801529a:	eb03 0e02 	add.w	lr, r3, r2
 801529e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80152a0:	f8d9 9000 	ldr.w	r9, [r9]
 80152a4:	449e      	add	lr, r3
 80152a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80152a8:	e9cb aa01 	strd	sl, sl, [fp, #4]
 80152ac:	e9cb aa04 	strd	sl, sl, [fp, #16]
 80152b0:	e9cb aa07 	strd	sl, sl, [fp, #28]
 80152b4:	e9cb aa0a 	strd	sl, sl, [fp, #40]	@ 0x28
 80152b8:	e9cb aa0d 	strd	sl, sl, [fp, #52]	@ 0x34
 80152bc:	44be      	add	lr, r7
 80152be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80152c2:	6823      	ldr	r3, [r4, #0]
 80152c4:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 80152c8:	f109 0028 	add.w	r0, r9, #40	@ 0x28
 80152cc:	f8cc 3000 	str.w	r3, [ip]
 80152d0:	f002 ffa8 	bl	8018224 <rmw_create_wait_set>
 80152d4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80152d6:	f8cb 003c 	str.w	r0, [fp, #60]	@ 0x3c
 80152da:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80152dc:	b350      	cbz	r0, 8015334 <rcl_wait_set_init+0x10c>
 80152de:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80152e0:	4643      	mov	r3, r8
 80152e2:	463a      	mov	r2, r7
 80152e4:	4631      	mov	r1, r6
 80152e6:	9402      	str	r4, [sp, #8]
 80152e8:	4628      	mov	r0, r5
 80152ea:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80152ec:	9401      	str	r4, [sp, #4]
 80152ee:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80152f0:	9400      	str	r4, [sp, #0]
 80152f2:	f7ff fde1 	bl	8014eb8 <rcl_wait_set_resize>
 80152f6:	4604      	mov	r4, r0
 80152f8:	2800      	cmp	r0, #0
 80152fa:	d0ae      	beq.n	801525a <rcl_wait_set_init+0x32>
 80152fc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80152fe:	bb2b      	cbnz	r3, 801534c <rcl_wait_set_init+0x124>
 8015300:	2600      	movs	r6, #0
 8015302:	4628      	mov	r0, r5
 8015304:	4633      	mov	r3, r6
 8015306:	4632      	mov	r2, r6
 8015308:	4631      	mov	r1, r6
 801530a:	9600      	str	r6, [sp, #0]
 801530c:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8015310:	f7ff fdd2 	bl	8014eb8 <rcl_wait_set_resize>
 8015314:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8015316:	2800      	cmp	r0, #0
 8015318:	d09f      	beq.n	801525a <rcl_wait_set_init+0x32>
 801531a:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801531c:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 801531e:	4798      	blx	r3
 8015320:	4620      	mov	r0, r4
 8015322:	632e      	str	r6, [r5, #48]	@ 0x30
 8015324:	b005      	add	sp, #20
 8015326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801532a:	240b      	movs	r4, #11
 801532c:	4620      	mov	r0, r4
 801532e:	b005      	add	sp, #20
 8015330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015334:	2401      	movs	r4, #1
 8015336:	f002 ff7f 	bl	8018238 <rmw_destroy_wait_set>
 801533a:	2800      	cmp	r0, #0
 801533c:	bf18      	it	ne
 801533e:	f44f 7461 	movne.w	r4, #900	@ 0x384
 8015342:	e7dd      	b.n	8015300 <rcl_wait_set_init+0xd8>
 8015344:	2465      	movs	r4, #101	@ 0x65
 8015346:	e788      	b.n	801525a <rcl_wait_set_init+0x32>
 8015348:	240a      	movs	r4, #10
 801534a:	e786      	b.n	801525a <rcl_wait_set_init+0x32>
 801534c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801534e:	e7f2      	b.n	8015336 <rcl_wait_set_init+0x10e>

08015350 <rcl_wait_set_add_guard_condition>:
 8015350:	b318      	cbz	r0, 801539a <rcl_wait_set_add_guard_condition+0x4a>
 8015352:	b538      	push	{r3, r4, r5, lr}
 8015354:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015356:	4604      	mov	r4, r0
 8015358:	b30b      	cbz	r3, 801539e <rcl_wait_set_add_guard_condition+0x4e>
 801535a:	b319      	cbz	r1, 80153a4 <rcl_wait_set_add_guard_condition+0x54>
 801535c:	68dd      	ldr	r5, [r3, #12]
 801535e:	68c0      	ldr	r0, [r0, #12]
 8015360:	4285      	cmp	r5, r0
 8015362:	d217      	bcs.n	8015394 <rcl_wait_set_add_guard_condition+0x44>
 8015364:	1c68      	adds	r0, r5, #1
 8015366:	60d8      	str	r0, [r3, #12]
 8015368:	68a3      	ldr	r3, [r4, #8]
 801536a:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801536e:	b102      	cbz	r2, 8015372 <rcl_wait_set_add_guard_condition+0x22>
 8015370:	6015      	str	r5, [r2, #0]
 8015372:	4608      	mov	r0, r1
 8015374:	f005 f97c 	bl	801a670 <rcl_guard_condition_get_rmw_handle>
 8015378:	b150      	cbz	r0, 8015390 <rcl_wait_set_add_guard_condition+0x40>
 801537a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801537c:	6842      	ldr	r2, [r0, #4]
 801537e:	2000      	movs	r0, #0
 8015380:	695b      	ldr	r3, [r3, #20]
 8015382:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015386:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015388:	6913      	ldr	r3, [r2, #16]
 801538a:	3301      	adds	r3, #1
 801538c:	6113      	str	r3, [r2, #16]
 801538e:	bd38      	pop	{r3, r4, r5, pc}
 8015390:	2001      	movs	r0, #1
 8015392:	bd38      	pop	{r3, r4, r5, pc}
 8015394:	f240 3086 	movw	r0, #902	@ 0x386
 8015398:	bd38      	pop	{r3, r4, r5, pc}
 801539a:	200b      	movs	r0, #11
 801539c:	4770      	bx	lr
 801539e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80153a2:	bd38      	pop	{r3, r4, r5, pc}
 80153a4:	200b      	movs	r0, #11
 80153a6:	bd38      	pop	{r3, r4, r5, pc}

080153a8 <rcl_wait_set_add_timer>:
 80153a8:	b328      	cbz	r0, 80153f6 <rcl_wait_set_add_timer+0x4e>
 80153aa:	b538      	push	{r3, r4, r5, lr}
 80153ac:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80153ae:	4604      	mov	r4, r0
 80153b0:	b31b      	cbz	r3, 80153fa <rcl_wait_set_add_timer+0x52>
 80153b2:	b329      	cbz	r1, 8015400 <rcl_wait_set_add_timer+0x58>
 80153b4:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80153b6:	6965      	ldr	r5, [r4, #20]
 80153b8:	42a8      	cmp	r0, r5
 80153ba:	d219      	bcs.n	80153f0 <rcl_wait_set_add_timer+0x48>
 80153bc:	1c45      	adds	r5, r0, #1
 80153be:	641d      	str	r5, [r3, #64]	@ 0x40
 80153c0:	6923      	ldr	r3, [r4, #16]
 80153c2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 80153c6:	b102      	cbz	r2, 80153ca <rcl_wait_set_add_timer+0x22>
 80153c8:	6010      	str	r0, [r2, #0]
 80153ca:	4608      	mov	r0, r1
 80153cc:	f7ff fc08 	bl	8014be0 <rcl_timer_get_guard_condition>
 80153d0:	b168      	cbz	r0, 80153ee <rcl_wait_set_add_timer+0x46>
 80153d2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80153d4:	68e3      	ldr	r3, [r4, #12]
 80153d6:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 80153d8:	3b01      	subs	r3, #1
 80153da:	441d      	add	r5, r3
 80153dc:	f005 f948 	bl	801a670 <rcl_guard_condition_get_rmw_handle>
 80153e0:	b180      	cbz	r0, 8015404 <rcl_wait_set_add_timer+0x5c>
 80153e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80153e4:	6842      	ldr	r2, [r0, #4]
 80153e6:	2000      	movs	r0, #0
 80153e8:	695b      	ldr	r3, [r3, #20]
 80153ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80153ee:	bd38      	pop	{r3, r4, r5, pc}
 80153f0:	f240 3086 	movw	r0, #902	@ 0x386
 80153f4:	bd38      	pop	{r3, r4, r5, pc}
 80153f6:	200b      	movs	r0, #11
 80153f8:	4770      	bx	lr
 80153fa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80153fe:	bd38      	pop	{r3, r4, r5, pc}
 8015400:	200b      	movs	r0, #11
 8015402:	bd38      	pop	{r3, r4, r5, pc}
 8015404:	2001      	movs	r0, #1
 8015406:	bd38      	pop	{r3, r4, r5, pc}

08015408 <rcl_wait_set_add_client>:
 8015408:	b318      	cbz	r0, 8015452 <rcl_wait_set_add_client+0x4a>
 801540a:	b538      	push	{r3, r4, r5, lr}
 801540c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801540e:	4604      	mov	r4, r0
 8015410:	b30b      	cbz	r3, 8015456 <rcl_wait_set_add_client+0x4e>
 8015412:	b319      	cbz	r1, 801545c <rcl_wait_set_add_client+0x54>
 8015414:	699d      	ldr	r5, [r3, #24]
 8015416:	69c0      	ldr	r0, [r0, #28]
 8015418:	4285      	cmp	r5, r0
 801541a:	d217      	bcs.n	801544c <rcl_wait_set_add_client+0x44>
 801541c:	1c68      	adds	r0, r5, #1
 801541e:	6198      	str	r0, [r3, #24]
 8015420:	69a3      	ldr	r3, [r4, #24]
 8015422:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8015426:	b102      	cbz	r2, 801542a <rcl_wait_set_add_client+0x22>
 8015428:	6015      	str	r5, [r2, #0]
 801542a:	4608      	mov	r0, r1
 801542c:	f7fe f9f8 	bl	8013820 <rcl_client_get_rmw_handle>
 8015430:	b150      	cbz	r0, 8015448 <rcl_wait_set_add_client+0x40>
 8015432:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015434:	6842      	ldr	r2, [r0, #4]
 8015436:	2000      	movs	r0, #0
 8015438:	6a1b      	ldr	r3, [r3, #32]
 801543a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801543e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015440:	69d3      	ldr	r3, [r2, #28]
 8015442:	3301      	adds	r3, #1
 8015444:	61d3      	str	r3, [r2, #28]
 8015446:	bd38      	pop	{r3, r4, r5, pc}
 8015448:	2001      	movs	r0, #1
 801544a:	bd38      	pop	{r3, r4, r5, pc}
 801544c:	f240 3086 	movw	r0, #902	@ 0x386
 8015450:	bd38      	pop	{r3, r4, r5, pc}
 8015452:	200b      	movs	r0, #11
 8015454:	4770      	bx	lr
 8015456:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801545a:	bd38      	pop	{r3, r4, r5, pc}
 801545c:	200b      	movs	r0, #11
 801545e:	bd38      	pop	{r3, r4, r5, pc}

08015460 <rcl_wait_set_add_service>:
 8015460:	b318      	cbz	r0, 80154aa <rcl_wait_set_add_service+0x4a>
 8015462:	b538      	push	{r3, r4, r5, lr}
 8015464:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015466:	4604      	mov	r4, r0
 8015468:	b30b      	cbz	r3, 80154ae <rcl_wait_set_add_service+0x4e>
 801546a:	b319      	cbz	r1, 80154b4 <rcl_wait_set_add_service+0x54>
 801546c:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801546e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8015470:	4285      	cmp	r5, r0
 8015472:	d217      	bcs.n	80154a4 <rcl_wait_set_add_service+0x44>
 8015474:	1c68      	adds	r0, r5, #1
 8015476:	6258      	str	r0, [r3, #36]	@ 0x24
 8015478:	6a23      	ldr	r3, [r4, #32]
 801547a:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801547e:	b102      	cbz	r2, 8015482 <rcl_wait_set_add_service+0x22>
 8015480:	6015      	str	r5, [r2, #0]
 8015482:	4608      	mov	r0, r1
 8015484:	f7ff f850 	bl	8014528 <rcl_service_get_rmw_handle>
 8015488:	b150      	cbz	r0, 80154a0 <rcl_wait_set_add_service+0x40>
 801548a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801548c:	6842      	ldr	r2, [r0, #4]
 801548e:	2000      	movs	r0, #0
 8015490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015492:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015496:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015498:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 801549a:	3301      	adds	r3, #1
 801549c:	6293      	str	r3, [r2, #40]	@ 0x28
 801549e:	bd38      	pop	{r3, r4, r5, pc}
 80154a0:	2001      	movs	r0, #1
 80154a2:	bd38      	pop	{r3, r4, r5, pc}
 80154a4:	f240 3086 	movw	r0, #902	@ 0x386
 80154a8:	bd38      	pop	{r3, r4, r5, pc}
 80154aa:	200b      	movs	r0, #11
 80154ac:	4770      	bx	lr
 80154ae:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80154b2:	bd38      	pop	{r3, r4, r5, pc}
 80154b4:	200b      	movs	r0, #11
 80154b6:	bd38      	pop	{r3, r4, r5, pc}

080154b8 <rcl_wait>:
 80154b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154bc:	ed2d 8b02 	vpush	{d8}
 80154c0:	b08d      	sub	sp, #52	@ 0x34
 80154c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80154c6:	2800      	cmp	r0, #0
 80154c8:	f000 814f 	beq.w	801576a <rcl_wait+0x2b2>
 80154cc:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80154ce:	4605      	mov	r5, r0
 80154d0:	2e00      	cmp	r6, #0
 80154d2:	f000 811a 	beq.w	801570a <rcl_wait+0x252>
 80154d6:	6843      	ldr	r3, [r0, #4]
 80154d8:	b983      	cbnz	r3, 80154fc <rcl_wait+0x44>
 80154da:	68eb      	ldr	r3, [r5, #12]
 80154dc:	b973      	cbnz	r3, 80154fc <rcl_wait+0x44>
 80154de:	696b      	ldr	r3, [r5, #20]
 80154e0:	b963      	cbnz	r3, 80154fc <rcl_wait+0x44>
 80154e2:	69eb      	ldr	r3, [r5, #28]
 80154e4:	b953      	cbnz	r3, 80154fc <rcl_wait+0x44>
 80154e6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80154e8:	b943      	cbnz	r3, 80154fc <rcl_wait+0x44>
 80154ea:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80154ec:	b933      	cbnz	r3, 80154fc <rcl_wait+0x44>
 80154ee:	f240 3085 	movw	r0, #901	@ 0x385
 80154f2:	b00d      	add	sp, #52	@ 0x34
 80154f4:	ecbd 8b02 	vpop	{d8}
 80154f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154fc:	9b04      	ldr	r3, [sp, #16]
 80154fe:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8015500:	2b01      	cmp	r3, #1
 8015502:	9b05      	ldr	r3, [sp, #20]
 8015504:	f173 0300 	sbcs.w	r3, r3, #0
 8015508:	f2c0 80f8 	blt.w	80156fc <rcl_wait+0x244>
 801550c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8015510:	2a00      	cmp	r2, #0
 8015512:	f000 810f 	beq.w	8015734 <rcl_wait+0x27c>
 8015516:	2400      	movs	r4, #0
 8015518:	4613      	mov	r3, r2
 801551a:	f240 3921 	movw	r9, #801	@ 0x321
 801551e:	4632      	mov	r2, r6
 8015520:	46a2      	mov	sl, r4
 8015522:	46a3      	mov	fp, r4
 8015524:	ed9f 8b98 	vldr	d8, [pc, #608]	@ 8015788 <rcl_wait+0x2d0>
 8015528:	e014      	b.n	8015554 <rcl_wait+0x9c>
 801552a:	2800      	cmp	r0, #0
 801552c:	d1e1      	bne.n	80154f2 <rcl_wait+0x3a>
 801552e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015532:	4542      	cmp	r2, r8
 8015534:	eb73 0107 	sbcs.w	r1, r3, r7
 8015538:	da03      	bge.n	8015542 <rcl_wait+0x8a>
 801553a:	4690      	mov	r8, r2
 801553c:	461f      	mov	r7, r3
 801553e:	f04f 0b01 	mov.w	fp, #1
 8015542:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8015544:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8015546:	3401      	adds	r4, #1
 8015548:	f14a 0a00 	adc.w	sl, sl, #0
 801554c:	429c      	cmp	r4, r3
 801554e:	f17a 0100 	sbcs.w	r1, sl, #0
 8015552:	d228      	bcs.n	80155a6 <rcl_wait+0xee>
 8015554:	6928      	ldr	r0, [r5, #16]
 8015556:	a908      	add	r1, sp, #32
 8015558:	00a6      	lsls	r6, r4, #2
 801555a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801555e:	2800      	cmp	r0, #0
 8015560:	d0f1      	beq.n	8015546 <rcl_wait+0x8e>
 8015562:	68eb      	ldr	r3, [r5, #12]
 8015564:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8015568:	4423      	add	r3, r4
 801556a:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 801556e:	f1be 0f00 	cmp.w	lr, #0
 8015572:	d006      	beq.n	8015582 <rcl_wait+0xca>
 8015574:	6913      	ldr	r3, [r2, #16]
 8015576:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801557a:	3301      	adds	r3, #1
 801557c:	6113      	str	r3, [r2, #16]
 801557e:	692b      	ldr	r3, [r5, #16]
 8015580:	5998      	ldr	r0, [r3, r6]
 8015582:	ed8d 8b08 	vstr	d8, [sp, #32]
 8015586:	f7ff faf9 	bl	8014b7c <rcl_timer_get_time_until_next_call>
 801558a:	4548      	cmp	r0, r9
 801558c:	d1cd      	bne.n	801552a <rcl_wait+0x72>
 801558e:	692b      	ldr	r3, [r5, #16]
 8015590:	2200      	movs	r2, #0
 8015592:	3401      	adds	r4, #1
 8015594:	519a      	str	r2, [r3, r6]
 8015596:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8015598:	f14a 0a00 	adc.w	sl, sl, #0
 801559c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801559e:	429c      	cmp	r4, r3
 80155a0:	f17a 0100 	sbcs.w	r1, sl, #0
 80155a4:	d3d6      	bcc.n	8015554 <rcl_wait+0x9c>
 80155a6:	4659      	mov	r1, fp
 80155a8:	4616      	mov	r6, r2
 80155aa:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80155ae:	4313      	orrs	r3, r2
 80155b0:	f040 80b4 	bne.w	801571c <rcl_wait+0x264>
 80155b4:	2300      	movs	r3, #0
 80155b6:	2200      	movs	r2, #0
 80155b8:	460c      	mov	r4, r1
 80155ba:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80155be:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80155c2:	ab08      	add	r3, sp, #32
 80155c4:	9302      	str	r3, [sp, #8]
 80155c6:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 80155ca:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 80155cc:	f106 0110 	add.w	r1, r6, #16
 80155d0:	9300      	str	r3, [sp, #0]
 80155d2:	1d30      	adds	r0, r6, #4
 80155d4:	f106 031c 	add.w	r3, r6, #28
 80155d8:	9201      	str	r2, [sp, #4]
 80155da:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 80155de:	f002 fcbd 	bl	8017f5c <rmw_wait>
 80155e2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80155e4:	4680      	mov	r8, r0
 80155e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80155e8:	b1e2      	cbz	r2, 8015624 <rcl_wait+0x16c>
 80155ea:	f04f 0900 	mov.w	r9, #0
 80155ee:	464f      	mov	r7, r9
 80155f0:	692a      	ldr	r2, [r5, #16]
 80155f2:	f10d 011f 	add.w	r1, sp, #31
 80155f6:	ea4f 0689 	mov.w	r6, r9, lsl #2
 80155fa:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 80155fe:	b160      	cbz	r0, 801561a <rcl_wait+0x162>
 8015600:	f88d 701f 	strb.w	r7, [sp, #31]
 8015604:	f7ff fa7e 	bl	8014b04 <rcl_timer_is_ready>
 8015608:	2800      	cmp	r0, #0
 801560a:	f47f af72 	bne.w	80154f2 <rcl_wait+0x3a>
 801560e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8015612:	b90b      	cbnz	r3, 8015618 <rcl_wait+0x160>
 8015614:	692a      	ldr	r2, [r5, #16]
 8015616:	5193      	str	r3, [r2, r6]
 8015618:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801561a:	f109 0901 	add.w	r9, r9, #1
 801561e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015620:	454a      	cmp	r2, r9
 8015622:	d8e5      	bhi.n	80155f0 <rcl_wait+0x138>
 8015624:	f038 0002 	bics.w	r0, r8, #2
 8015628:	d176      	bne.n	8015718 <rcl_wait+0x260>
 801562a:	686f      	ldr	r7, [r5, #4]
 801562c:	b17f      	cbz	r7, 801564e <rcl_wait+0x196>
 801562e:	4602      	mov	r2, r0
 8015630:	e002      	b.n	8015638 <rcl_wait+0x180>
 8015632:	3201      	adds	r2, #1
 8015634:	42ba      	cmp	r2, r7
 8015636:	d00a      	beq.n	801564e <rcl_wait+0x196>
 8015638:	6899      	ldr	r1, [r3, #8]
 801563a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801563e:	2900      	cmp	r1, #0
 8015640:	d1f7      	bne.n	8015632 <rcl_wait+0x17a>
 8015642:	682e      	ldr	r6, [r5, #0]
 8015644:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8015648:	3201      	adds	r2, #1
 801564a:	42ba      	cmp	r2, r7
 801564c:	d1f4      	bne.n	8015638 <rcl_wait+0x180>
 801564e:	68ef      	ldr	r7, [r5, #12]
 8015650:	b17f      	cbz	r7, 8015672 <rcl_wait+0x1ba>
 8015652:	2200      	movs	r2, #0
 8015654:	e002      	b.n	801565c <rcl_wait+0x1a4>
 8015656:	3201      	adds	r2, #1
 8015658:	42ba      	cmp	r2, r7
 801565a:	d00a      	beq.n	8015672 <rcl_wait+0x1ba>
 801565c:	6959      	ldr	r1, [r3, #20]
 801565e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015662:	2900      	cmp	r1, #0
 8015664:	d1f7      	bne.n	8015656 <rcl_wait+0x19e>
 8015666:	68ae      	ldr	r6, [r5, #8]
 8015668:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801566c:	3201      	adds	r2, #1
 801566e:	42ba      	cmp	r2, r7
 8015670:	d1f4      	bne.n	801565c <rcl_wait+0x1a4>
 8015672:	69ef      	ldr	r7, [r5, #28]
 8015674:	b17f      	cbz	r7, 8015696 <rcl_wait+0x1de>
 8015676:	2200      	movs	r2, #0
 8015678:	e002      	b.n	8015680 <rcl_wait+0x1c8>
 801567a:	3201      	adds	r2, #1
 801567c:	42ba      	cmp	r2, r7
 801567e:	d00a      	beq.n	8015696 <rcl_wait+0x1de>
 8015680:	6a19      	ldr	r1, [r3, #32]
 8015682:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015686:	2900      	cmp	r1, #0
 8015688:	d1f7      	bne.n	801567a <rcl_wait+0x1c2>
 801568a:	69ae      	ldr	r6, [r5, #24]
 801568c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8015690:	3201      	adds	r2, #1
 8015692:	42ba      	cmp	r2, r7
 8015694:	d1f4      	bne.n	8015680 <rcl_wait+0x1c8>
 8015696:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 8015698:	b17f      	cbz	r7, 80156ba <rcl_wait+0x202>
 801569a:	2200      	movs	r2, #0
 801569c:	e002      	b.n	80156a4 <rcl_wait+0x1ec>
 801569e:	3201      	adds	r2, #1
 80156a0:	42ba      	cmp	r2, r7
 80156a2:	d00a      	beq.n	80156ba <rcl_wait+0x202>
 80156a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80156a6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80156aa:	2900      	cmp	r1, #0
 80156ac:	d1f7      	bne.n	801569e <rcl_wait+0x1e6>
 80156ae:	6a2e      	ldr	r6, [r5, #32]
 80156b0:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 80156b4:	3201      	adds	r2, #1
 80156b6:	42ba      	cmp	r2, r7
 80156b8:	d1f4      	bne.n	80156a4 <rcl_wait+0x1ec>
 80156ba:	6aef      	ldr	r7, [r5, #44]	@ 0x2c
 80156bc:	b17f      	cbz	r7, 80156de <rcl_wait+0x226>
 80156be:	2200      	movs	r2, #0
 80156c0:	e002      	b.n	80156c8 <rcl_wait+0x210>
 80156c2:	3201      	adds	r2, #1
 80156c4:	42ba      	cmp	r2, r7
 80156c6:	d00a      	beq.n	80156de <rcl_wait+0x226>
 80156c8:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80156ca:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80156ce:	2900      	cmp	r1, #0
 80156d0:	d1f7      	bne.n	80156c2 <rcl_wait+0x20a>
 80156d2:	6aae      	ldr	r6, [r5, #40]	@ 0x28
 80156d4:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 80156d8:	3201      	adds	r2, #1
 80156da:	42ba      	cmp	r2, r7
 80156dc:	d1f4      	bne.n	80156c8 <rcl_wait+0x210>
 80156de:	f1b8 0f02 	cmp.w	r8, #2
 80156e2:	f47f af06 	bne.w	80154f2 <rcl_wait+0x3a>
 80156e6:	f084 0301 	eor.w	r3, r4, #1
 80156ea:	b2db      	uxtb	r3, r3
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	bf18      	it	ne
 80156f0:	2002      	movne	r0, #2
 80156f2:	b00d      	add	sp, #52	@ 0x34
 80156f4:	ecbd 8b02 	vpop	{d8}
 80156f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156fc:	2a00      	cmp	r2, #0
 80156fe:	d03a      	beq.n	8015776 <rcl_wait+0x2be>
 8015700:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8015704:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8015708:	e705      	b.n	8015516 <rcl_wait+0x5e>
 801570a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801570e:	b00d      	add	sp, #52	@ 0x34
 8015710:	ecbd 8b02 	vpop	{d8}
 8015714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015718:	2001      	movs	r0, #1
 801571a:	e6ea      	b.n	80154f2 <rcl_wait+0x3a>
 801571c:	9b04      	ldr	r3, [sp, #16]
 801571e:	460c      	mov	r4, r1
 8015720:	2b01      	cmp	r3, #1
 8015722:	9b05      	ldr	r3, [sp, #20]
 8015724:	f173 0300 	sbcs.w	r3, r3, #0
 8015728:	bfa8      	it	ge
 801572a:	f044 0401 	orrge.w	r4, r4, #1
 801572e:	b914      	cbnz	r4, 8015736 <rcl_wait+0x27e>
 8015730:	4623      	mov	r3, r4
 8015732:	e747      	b.n	80155c4 <rcl_wait+0x10c>
 8015734:	4611      	mov	r1, r2
 8015736:	2f00      	cmp	r7, #0
 8015738:	da02      	bge.n	8015740 <rcl_wait+0x288>
 801573a:	f04f 0800 	mov.w	r8, #0
 801573e:	4647      	mov	r7, r8
 8015740:	460c      	mov	r4, r1
 8015742:	4640      	mov	r0, r8
 8015744:	4639      	mov	r1, r7
 8015746:	a312      	add	r3, pc, #72	@ (adr r3, 8015790 <rcl_wait+0x2d8>)
 8015748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801574c:	f7ea fde0 	bl	8000310 <__aeabi_ldivmod>
 8015750:	a30f      	add	r3, pc, #60	@ (adr r3, 8015790 <rcl_wait+0x2d8>)
 8015752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015756:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801575a:	4640      	mov	r0, r8
 801575c:	4639      	mov	r1, r7
 801575e:	f7ea fdd7 	bl	8000310 <__aeabi_ldivmod>
 8015762:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8015766:	ab08      	add	r3, sp, #32
 8015768:	e72c      	b.n	80155c4 <rcl_wait+0x10c>
 801576a:	200b      	movs	r0, #11
 801576c:	b00d      	add	sp, #52	@ 0x34
 801576e:	ecbd 8b02 	vpop	{d8}
 8015772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015776:	4611      	mov	r1, r2
 8015778:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801577c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8015780:	e713      	b.n	80155aa <rcl_wait+0xf2>
 8015782:	bf00      	nop
 8015784:	f3af 8000 	nop.w
 8015788:	ffffffff 	.word	0xffffffff
 801578c:	7fffffff 	.word	0x7fffffff
 8015790:	3b9aca00 	.word	0x3b9aca00
 8015794:	00000000 	.word	0x00000000

08015798 <rcl_action_take_goal_response>:
 8015798:	2800      	cmp	r0, #0
 801579a:	d039      	beq.n	8015810 <rcl_action_take_goal_response+0x78>
 801579c:	b570      	push	{r4, r5, r6, lr}
 801579e:	4604      	mov	r4, r0
 80157a0:	6800      	ldr	r0, [r0, #0]
 80157a2:	b380      	cbz	r0, 8015806 <rcl_action_take_goal_response+0x6e>
 80157a4:	460e      	mov	r6, r1
 80157a6:	4615      	mov	r5, r2
 80157a8:	f7fe f8c2 	bl	8013930 <rcl_client_is_valid>
 80157ac:	b330      	cbz	r0, 80157fc <rcl_action_take_goal_response+0x64>
 80157ae:	6820      	ldr	r0, [r4, #0]
 80157b0:	3004      	adds	r0, #4
 80157b2:	f7fe f8bd 	bl	8013930 <rcl_client_is_valid>
 80157b6:	b308      	cbz	r0, 80157fc <rcl_action_take_goal_response+0x64>
 80157b8:	6820      	ldr	r0, [r4, #0]
 80157ba:	3008      	adds	r0, #8
 80157bc:	f7fe f8b8 	bl	8013930 <rcl_client_is_valid>
 80157c0:	b1e0      	cbz	r0, 80157fc <rcl_action_take_goal_response+0x64>
 80157c2:	6820      	ldr	r0, [r4, #0]
 80157c4:	300c      	adds	r0, #12
 80157c6:	f7ff f855 	bl	8014874 <rcl_subscription_is_valid>
 80157ca:	b1b8      	cbz	r0, 80157fc <rcl_action_take_goal_response+0x64>
 80157cc:	6820      	ldr	r0, [r4, #0]
 80157ce:	3010      	adds	r0, #16
 80157d0:	f7ff f850 	bl	8014874 <rcl_subscription_is_valid>
 80157d4:	b190      	cbz	r0, 80157fc <rcl_action_take_goal_response+0x64>
 80157d6:	b1cd      	cbz	r5, 801580c <rcl_action_take_goal_response+0x74>
 80157d8:	b1c6      	cbz	r6, 801580c <rcl_action_take_goal_response+0x74>
 80157da:	462a      	mov	r2, r5
 80157dc:	4631      	mov	r1, r6
 80157de:	6820      	ldr	r0, [r4, #0]
 80157e0:	f7fe f85e 	bl	80138a0 <rcl_take_response>
 80157e4:	b148      	cbz	r0, 80157fa <rcl_action_take_goal_response+0x62>
 80157e6:	280a      	cmp	r0, #10
 80157e8:	d007      	beq.n	80157fa <rcl_action_take_goal_response+0x62>
 80157ea:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80157ee:	f640 0337 	movw	r3, #2103	@ 0x837
 80157f2:	4290      	cmp	r0, r2
 80157f4:	bf0c      	ite	eq
 80157f6:	4618      	moveq	r0, r3
 80157f8:	2001      	movne	r0, #1
 80157fa:	bd70      	pop	{r4, r5, r6, pc}
 80157fc:	f7fa f9b8 	bl	800fb70 <rcutils_reset_error>
 8015800:	f640 0036 	movw	r0, #2102	@ 0x836
 8015804:	bd70      	pop	{r4, r5, r6, pc}
 8015806:	f640 0036 	movw	r0, #2102	@ 0x836
 801580a:	bd70      	pop	{r4, r5, r6, pc}
 801580c:	200b      	movs	r0, #11
 801580e:	bd70      	pop	{r4, r5, r6, pc}
 8015810:	f640 0036 	movw	r0, #2102	@ 0x836
 8015814:	4770      	bx	lr
 8015816:	bf00      	nop

08015818 <rcl_action_send_result_request>:
 8015818:	b390      	cbz	r0, 8015880 <rcl_action_send_result_request+0x68>
 801581a:	b570      	push	{r4, r5, r6, lr}
 801581c:	4604      	mov	r4, r0
 801581e:	6800      	ldr	r0, [r0, #0]
 8015820:	b348      	cbz	r0, 8015876 <rcl_action_send_result_request+0x5e>
 8015822:	460e      	mov	r6, r1
 8015824:	4615      	mov	r5, r2
 8015826:	f7fe f883 	bl	8013930 <rcl_client_is_valid>
 801582a:	b1f8      	cbz	r0, 801586c <rcl_action_send_result_request+0x54>
 801582c:	6820      	ldr	r0, [r4, #0]
 801582e:	3004      	adds	r0, #4
 8015830:	f7fe f87e 	bl	8013930 <rcl_client_is_valid>
 8015834:	b1d0      	cbz	r0, 801586c <rcl_action_send_result_request+0x54>
 8015836:	6820      	ldr	r0, [r4, #0]
 8015838:	3008      	adds	r0, #8
 801583a:	f7fe f879 	bl	8013930 <rcl_client_is_valid>
 801583e:	b1a8      	cbz	r0, 801586c <rcl_action_send_result_request+0x54>
 8015840:	6820      	ldr	r0, [r4, #0]
 8015842:	300c      	adds	r0, #12
 8015844:	f7ff f816 	bl	8014874 <rcl_subscription_is_valid>
 8015848:	b180      	cbz	r0, 801586c <rcl_action_send_result_request+0x54>
 801584a:	6820      	ldr	r0, [r4, #0]
 801584c:	3010      	adds	r0, #16
 801584e:	f7ff f811 	bl	8014874 <rcl_subscription_is_valid>
 8015852:	b158      	cbz	r0, 801586c <rcl_action_send_result_request+0x54>
 8015854:	b195      	cbz	r5, 801587c <rcl_action_send_result_request+0x64>
 8015856:	b18e      	cbz	r6, 801587c <rcl_action_send_result_request+0x64>
 8015858:	6820      	ldr	r0, [r4, #0]
 801585a:	462a      	mov	r2, r5
 801585c:	4631      	mov	r1, r6
 801585e:	3008      	adds	r0, #8
 8015860:	f7fd ffe4 	bl	801382c <rcl_send_request>
 8015864:	3800      	subs	r0, #0
 8015866:	bf18      	it	ne
 8015868:	2001      	movne	r0, #1
 801586a:	bd70      	pop	{r4, r5, r6, pc}
 801586c:	f7fa f980 	bl	800fb70 <rcutils_reset_error>
 8015870:	f640 0036 	movw	r0, #2102	@ 0x836
 8015874:	bd70      	pop	{r4, r5, r6, pc}
 8015876:	f640 0036 	movw	r0, #2102	@ 0x836
 801587a:	bd70      	pop	{r4, r5, r6, pc}
 801587c:	200b      	movs	r0, #11
 801587e:	bd70      	pop	{r4, r5, r6, pc}
 8015880:	f640 0036 	movw	r0, #2102	@ 0x836
 8015884:	4770      	bx	lr
 8015886:	bf00      	nop

08015888 <rcl_action_take_result_response>:
 8015888:	2800      	cmp	r0, #0
 801588a:	d03a      	beq.n	8015902 <rcl_action_take_result_response+0x7a>
 801588c:	b570      	push	{r4, r5, r6, lr}
 801588e:	4604      	mov	r4, r0
 8015890:	6800      	ldr	r0, [r0, #0]
 8015892:	b388      	cbz	r0, 80158f8 <rcl_action_take_result_response+0x70>
 8015894:	460e      	mov	r6, r1
 8015896:	4615      	mov	r5, r2
 8015898:	f7fe f84a 	bl	8013930 <rcl_client_is_valid>
 801589c:	b338      	cbz	r0, 80158ee <rcl_action_take_result_response+0x66>
 801589e:	6820      	ldr	r0, [r4, #0]
 80158a0:	3004      	adds	r0, #4
 80158a2:	f7fe f845 	bl	8013930 <rcl_client_is_valid>
 80158a6:	b310      	cbz	r0, 80158ee <rcl_action_take_result_response+0x66>
 80158a8:	6820      	ldr	r0, [r4, #0]
 80158aa:	3008      	adds	r0, #8
 80158ac:	f7fe f840 	bl	8013930 <rcl_client_is_valid>
 80158b0:	b1e8      	cbz	r0, 80158ee <rcl_action_take_result_response+0x66>
 80158b2:	6820      	ldr	r0, [r4, #0]
 80158b4:	300c      	adds	r0, #12
 80158b6:	f7fe ffdd 	bl	8014874 <rcl_subscription_is_valid>
 80158ba:	b1c0      	cbz	r0, 80158ee <rcl_action_take_result_response+0x66>
 80158bc:	6820      	ldr	r0, [r4, #0]
 80158be:	3010      	adds	r0, #16
 80158c0:	f7fe ffd8 	bl	8014874 <rcl_subscription_is_valid>
 80158c4:	b198      	cbz	r0, 80158ee <rcl_action_take_result_response+0x66>
 80158c6:	b1d5      	cbz	r5, 80158fe <rcl_action_take_result_response+0x76>
 80158c8:	b1ce      	cbz	r6, 80158fe <rcl_action_take_result_response+0x76>
 80158ca:	6820      	ldr	r0, [r4, #0]
 80158cc:	462a      	mov	r2, r5
 80158ce:	4631      	mov	r1, r6
 80158d0:	3008      	adds	r0, #8
 80158d2:	f7fd ffe5 	bl	80138a0 <rcl_take_response>
 80158d6:	b148      	cbz	r0, 80158ec <rcl_action_take_result_response+0x64>
 80158d8:	280a      	cmp	r0, #10
 80158da:	d007      	beq.n	80158ec <rcl_action_take_result_response+0x64>
 80158dc:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80158e0:	f640 0337 	movw	r3, #2103	@ 0x837
 80158e4:	4290      	cmp	r0, r2
 80158e6:	bf0c      	ite	eq
 80158e8:	4618      	moveq	r0, r3
 80158ea:	2001      	movne	r0, #1
 80158ec:	bd70      	pop	{r4, r5, r6, pc}
 80158ee:	f7fa f93f 	bl	800fb70 <rcutils_reset_error>
 80158f2:	f640 0036 	movw	r0, #2102	@ 0x836
 80158f6:	bd70      	pop	{r4, r5, r6, pc}
 80158f8:	f640 0036 	movw	r0, #2102	@ 0x836
 80158fc:	bd70      	pop	{r4, r5, r6, pc}
 80158fe:	200b      	movs	r0, #11
 8015900:	bd70      	pop	{r4, r5, r6, pc}
 8015902:	f640 0036 	movw	r0, #2102	@ 0x836
 8015906:	4770      	bx	lr

08015908 <rcl_action_take_cancel_response>:
 8015908:	2800      	cmp	r0, #0
 801590a:	d03a      	beq.n	8015982 <rcl_action_take_cancel_response+0x7a>
 801590c:	b570      	push	{r4, r5, r6, lr}
 801590e:	4604      	mov	r4, r0
 8015910:	6800      	ldr	r0, [r0, #0]
 8015912:	b388      	cbz	r0, 8015978 <rcl_action_take_cancel_response+0x70>
 8015914:	460e      	mov	r6, r1
 8015916:	4615      	mov	r5, r2
 8015918:	f7fe f80a 	bl	8013930 <rcl_client_is_valid>
 801591c:	b338      	cbz	r0, 801596e <rcl_action_take_cancel_response+0x66>
 801591e:	6820      	ldr	r0, [r4, #0]
 8015920:	3004      	adds	r0, #4
 8015922:	f7fe f805 	bl	8013930 <rcl_client_is_valid>
 8015926:	b310      	cbz	r0, 801596e <rcl_action_take_cancel_response+0x66>
 8015928:	6820      	ldr	r0, [r4, #0]
 801592a:	3008      	adds	r0, #8
 801592c:	f7fe f800 	bl	8013930 <rcl_client_is_valid>
 8015930:	b1e8      	cbz	r0, 801596e <rcl_action_take_cancel_response+0x66>
 8015932:	6820      	ldr	r0, [r4, #0]
 8015934:	300c      	adds	r0, #12
 8015936:	f7fe ff9d 	bl	8014874 <rcl_subscription_is_valid>
 801593a:	b1c0      	cbz	r0, 801596e <rcl_action_take_cancel_response+0x66>
 801593c:	6820      	ldr	r0, [r4, #0]
 801593e:	3010      	adds	r0, #16
 8015940:	f7fe ff98 	bl	8014874 <rcl_subscription_is_valid>
 8015944:	b198      	cbz	r0, 801596e <rcl_action_take_cancel_response+0x66>
 8015946:	b1d5      	cbz	r5, 801597e <rcl_action_take_cancel_response+0x76>
 8015948:	b1ce      	cbz	r6, 801597e <rcl_action_take_cancel_response+0x76>
 801594a:	6820      	ldr	r0, [r4, #0]
 801594c:	462a      	mov	r2, r5
 801594e:	4631      	mov	r1, r6
 8015950:	3004      	adds	r0, #4
 8015952:	f7fd ffa5 	bl	80138a0 <rcl_take_response>
 8015956:	b148      	cbz	r0, 801596c <rcl_action_take_cancel_response+0x64>
 8015958:	280a      	cmp	r0, #10
 801595a:	d007      	beq.n	801596c <rcl_action_take_cancel_response+0x64>
 801595c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015960:	f640 0337 	movw	r3, #2103	@ 0x837
 8015964:	4290      	cmp	r0, r2
 8015966:	bf0c      	ite	eq
 8015968:	4618      	moveq	r0, r3
 801596a:	2001      	movne	r0, #1
 801596c:	bd70      	pop	{r4, r5, r6, pc}
 801596e:	f7fa f8ff 	bl	800fb70 <rcutils_reset_error>
 8015972:	f640 0036 	movw	r0, #2102	@ 0x836
 8015976:	bd70      	pop	{r4, r5, r6, pc}
 8015978:	f640 0036 	movw	r0, #2102	@ 0x836
 801597c:	bd70      	pop	{r4, r5, r6, pc}
 801597e:	200b      	movs	r0, #11
 8015980:	bd70      	pop	{r4, r5, r6, pc}
 8015982:	f640 0036 	movw	r0, #2102	@ 0x836
 8015986:	4770      	bx	lr

08015988 <rcl_action_take_feedback>:
 8015988:	2800      	cmp	r0, #0
 801598a:	d038      	beq.n	80159fe <rcl_action_take_feedback+0x76>
 801598c:	b530      	push	{r4, r5, lr}
 801598e:	4604      	mov	r4, r0
 8015990:	6800      	ldr	r0, [r0, #0]
 8015992:	b091      	sub	sp, #68	@ 0x44
 8015994:	b378      	cbz	r0, 80159f6 <rcl_action_take_feedback+0x6e>
 8015996:	460d      	mov	r5, r1
 8015998:	f7fd ffca 	bl	8013930 <rcl_client_is_valid>
 801599c:	b328      	cbz	r0, 80159ea <rcl_action_take_feedback+0x62>
 801599e:	6820      	ldr	r0, [r4, #0]
 80159a0:	3004      	adds	r0, #4
 80159a2:	f7fd ffc5 	bl	8013930 <rcl_client_is_valid>
 80159a6:	b300      	cbz	r0, 80159ea <rcl_action_take_feedback+0x62>
 80159a8:	6820      	ldr	r0, [r4, #0]
 80159aa:	3008      	adds	r0, #8
 80159ac:	f7fd ffc0 	bl	8013930 <rcl_client_is_valid>
 80159b0:	b1d8      	cbz	r0, 80159ea <rcl_action_take_feedback+0x62>
 80159b2:	6820      	ldr	r0, [r4, #0]
 80159b4:	300c      	adds	r0, #12
 80159b6:	f7fe ff5d 	bl	8014874 <rcl_subscription_is_valid>
 80159ba:	b1b0      	cbz	r0, 80159ea <rcl_action_take_feedback+0x62>
 80159bc:	6820      	ldr	r0, [r4, #0]
 80159be:	3010      	adds	r0, #16
 80159c0:	f7fe ff58 	bl	8014874 <rcl_subscription_is_valid>
 80159c4:	b188      	cbz	r0, 80159ea <rcl_action_take_feedback+0x62>
 80159c6:	b1ed      	cbz	r5, 8015a04 <rcl_action_take_feedback+0x7c>
 80159c8:	6820      	ldr	r0, [r4, #0]
 80159ca:	2300      	movs	r3, #0
 80159cc:	466a      	mov	r2, sp
 80159ce:	4629      	mov	r1, r5
 80159d0:	300c      	adds	r0, #12
 80159d2:	f7fe fef3 	bl	80147bc <rcl_take>
 80159d6:	b160      	cbz	r0, 80159f2 <rcl_action_take_feedback+0x6a>
 80159d8:	f240 1391 	movw	r3, #401	@ 0x191
 80159dc:	4298      	cmp	r0, r3
 80159de:	d014      	beq.n	8015a0a <rcl_action_take_feedback+0x82>
 80159e0:	280a      	cmp	r0, #10
 80159e2:	bf18      	it	ne
 80159e4:	2001      	movne	r0, #1
 80159e6:	b011      	add	sp, #68	@ 0x44
 80159e8:	bd30      	pop	{r4, r5, pc}
 80159ea:	f7fa f8c1 	bl	800fb70 <rcutils_reset_error>
 80159ee:	f640 0036 	movw	r0, #2102	@ 0x836
 80159f2:	b011      	add	sp, #68	@ 0x44
 80159f4:	bd30      	pop	{r4, r5, pc}
 80159f6:	f640 0036 	movw	r0, #2102	@ 0x836
 80159fa:	b011      	add	sp, #68	@ 0x44
 80159fc:	bd30      	pop	{r4, r5, pc}
 80159fe:	f640 0036 	movw	r0, #2102	@ 0x836
 8015a02:	4770      	bx	lr
 8015a04:	200b      	movs	r0, #11
 8015a06:	b011      	add	sp, #68	@ 0x44
 8015a08:	bd30      	pop	{r4, r5, pc}
 8015a0a:	f640 0037 	movw	r0, #2103	@ 0x837
 8015a0e:	e7f0      	b.n	80159f2 <rcl_action_take_feedback+0x6a>

08015a10 <rcl_action_wait_set_add_action_client>:
 8015a10:	2800      	cmp	r0, #0
 8015a12:	d048      	beq.n	8015aa6 <rcl_action_wait_set_add_action_client+0x96>
 8015a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a16:	460c      	mov	r4, r1
 8015a18:	2900      	cmp	r1, #0
 8015a1a:	d03c      	beq.n	8015a96 <rcl_action_wait_set_add_action_client+0x86>
 8015a1c:	4605      	mov	r5, r0
 8015a1e:	6808      	ldr	r0, [r1, #0]
 8015a20:	2800      	cmp	r0, #0
 8015a22:	d038      	beq.n	8015a96 <rcl_action_wait_set_add_action_client+0x86>
 8015a24:	4617      	mov	r7, r2
 8015a26:	461e      	mov	r6, r3
 8015a28:	f7fd ff82 	bl	8013930 <rcl_client_is_valid>
 8015a2c:	b3b0      	cbz	r0, 8015a9c <rcl_action_wait_set_add_action_client+0x8c>
 8015a2e:	6820      	ldr	r0, [r4, #0]
 8015a30:	3004      	adds	r0, #4
 8015a32:	f7fd ff7d 	bl	8013930 <rcl_client_is_valid>
 8015a36:	b388      	cbz	r0, 8015a9c <rcl_action_wait_set_add_action_client+0x8c>
 8015a38:	6820      	ldr	r0, [r4, #0]
 8015a3a:	3008      	adds	r0, #8
 8015a3c:	f7fd ff78 	bl	8013930 <rcl_client_is_valid>
 8015a40:	b360      	cbz	r0, 8015a9c <rcl_action_wait_set_add_action_client+0x8c>
 8015a42:	6820      	ldr	r0, [r4, #0]
 8015a44:	300c      	adds	r0, #12
 8015a46:	f7fe ff15 	bl	8014874 <rcl_subscription_is_valid>
 8015a4a:	b338      	cbz	r0, 8015a9c <rcl_action_wait_set_add_action_client+0x8c>
 8015a4c:	6820      	ldr	r0, [r4, #0]
 8015a4e:	3010      	adds	r0, #16
 8015a50:	f7fe ff10 	bl	8014874 <rcl_subscription_is_valid>
 8015a54:	b310      	cbz	r0, 8015a9c <rcl_action_wait_set_add_action_client+0x8c>
 8015a56:	6821      	ldr	r1, [r4, #0]
 8015a58:	4628      	mov	r0, r5
 8015a5a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8015a5e:	f7ff fcd3 	bl	8015408 <rcl_wait_set_add_client>
 8015a62:	b9b8      	cbnz	r0, 8015a94 <rcl_action_wait_set_add_action_client+0x84>
 8015a64:	6821      	ldr	r1, [r4, #0]
 8015a66:	4628      	mov	r0, r5
 8015a68:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8015a6c:	3104      	adds	r1, #4
 8015a6e:	f7ff fccb 	bl	8015408 <rcl_wait_set_add_client>
 8015a72:	b978      	cbnz	r0, 8015a94 <rcl_action_wait_set_add_action_client+0x84>
 8015a74:	6821      	ldr	r1, [r4, #0]
 8015a76:	4628      	mov	r0, r5
 8015a78:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8015a7c:	3108      	adds	r1, #8
 8015a7e:	f7ff fcc3 	bl	8015408 <rcl_wait_set_add_client>
 8015a82:	b938      	cbnz	r0, 8015a94 <rcl_action_wait_set_add_action_client+0x84>
 8015a84:	6821      	ldr	r1, [r4, #0]
 8015a86:	4628      	mov	r0, r5
 8015a88:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8015a8c:	310c      	adds	r1, #12
 8015a8e:	f7ff f96b 	bl	8014d68 <rcl_wait_set_add_subscription>
 8015a92:	b158      	cbz	r0, 8015aac <rcl_action_wait_set_add_action_client+0x9c>
 8015a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a96:	f640 0036 	movw	r0, #2102	@ 0x836
 8015a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a9c:	f7fa f868 	bl	800fb70 <rcutils_reset_error>
 8015aa0:	f640 0036 	movw	r0, #2102	@ 0x836
 8015aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015aa6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015aaa:	4770      	bx	lr
 8015aac:	6821      	ldr	r1, [r4, #0]
 8015aae:	4628      	mov	r0, r5
 8015ab0:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8015ab4:	3110      	adds	r1, #16
 8015ab6:	f7ff f957 	bl	8014d68 <rcl_wait_set_add_subscription>
 8015aba:	2800      	cmp	r0, #0
 8015abc:	d1ea      	bne.n	8015a94 <rcl_action_wait_set_add_action_client+0x84>
 8015abe:	b11f      	cbz	r7, 8015ac8 <rcl_action_wait_set_add_action_client+0xb8>
 8015ac0:	6823      	ldr	r3, [r4, #0]
 8015ac2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8015ac6:	603b      	str	r3, [r7, #0]
 8015ac8:	2e00      	cmp	r6, #0
 8015aca:	d0e3      	beq.n	8015a94 <rcl_action_wait_set_add_action_client+0x84>
 8015acc:	6823      	ldr	r3, [r4, #0]
 8015ace:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8015ad2:	6033      	str	r3, [r6, #0]
 8015ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ad6:	bf00      	nop

08015ad8 <rcl_action_client_wait_set_get_entities_ready>:
 8015ad8:	2800      	cmp	r0, #0
 8015ada:	d050      	beq.n	8015b7e <rcl_action_client_wait_set_get_entities_ready+0xa6>
 8015adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ae0:	460c      	mov	r4, r1
 8015ae2:	2900      	cmp	r1, #0
 8015ae4:	d03e      	beq.n	8015b64 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 8015ae6:	4605      	mov	r5, r0
 8015ae8:	6808      	ldr	r0, [r1, #0]
 8015aea:	2800      	cmp	r0, #0
 8015aec:	d03a      	beq.n	8015b64 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 8015aee:	4616      	mov	r6, r2
 8015af0:	461f      	mov	r7, r3
 8015af2:	f7fd ff1d 	bl	8013930 <rcl_client_is_valid>
 8015af6:	2800      	cmp	r0, #0
 8015af8:	d038      	beq.n	8015b6c <rcl_action_client_wait_set_get_entities_ready+0x94>
 8015afa:	6820      	ldr	r0, [r4, #0]
 8015afc:	3004      	adds	r0, #4
 8015afe:	f7fd ff17 	bl	8013930 <rcl_client_is_valid>
 8015b02:	2800      	cmp	r0, #0
 8015b04:	d032      	beq.n	8015b6c <rcl_action_client_wait_set_get_entities_ready+0x94>
 8015b06:	6820      	ldr	r0, [r4, #0]
 8015b08:	3008      	adds	r0, #8
 8015b0a:	f7fd ff11 	bl	8013930 <rcl_client_is_valid>
 8015b0e:	b368      	cbz	r0, 8015b6c <rcl_action_client_wait_set_get_entities_ready+0x94>
 8015b10:	6820      	ldr	r0, [r4, #0]
 8015b12:	300c      	adds	r0, #12
 8015b14:	f7fe feae 	bl	8014874 <rcl_subscription_is_valid>
 8015b18:	b340      	cbz	r0, 8015b6c <rcl_action_client_wait_set_get_entities_ready+0x94>
 8015b1a:	6820      	ldr	r0, [r4, #0]
 8015b1c:	3010      	adds	r0, #16
 8015b1e:	f7fe fea9 	bl	8014874 <rcl_subscription_is_valid>
 8015b22:	b318      	cbz	r0, 8015b6c <rcl_action_client_wait_set_get_entities_ready+0x94>
 8015b24:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	@ 0x24
 8015b28:	2a00      	cmp	r2, #0
 8015b2a:	bf18      	it	ne
 8015b2c:	2b00      	cmpne	r3, #0
 8015b2e:	9b08      	ldr	r3, [sp, #32]
 8015b30:	bf0c      	ite	eq
 8015b32:	2101      	moveq	r1, #1
 8015b34:	2100      	movne	r1, #0
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	bf08      	it	eq
 8015b3a:	f041 0101 	orreq.w	r1, r1, #1
 8015b3e:	2f00      	cmp	r7, #0
 8015b40:	bf08      	it	eq
 8015b42:	f041 0101 	orreq.w	r1, r1, #1
 8015b46:	b9b9      	cbnz	r1, 8015b78 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8015b48:	b1b6      	cbz	r6, 8015b78 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8015b4a:	6823      	ldr	r3, [r4, #0]
 8015b4c:	686c      	ldr	r4, [r5, #4]
 8015b4e:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	@ 0x1d0
 8015b52:	428a      	cmp	r2, r1
 8015b54:	4610      	mov	r0, r2
 8015b56:	bf38      	it	cc
 8015b58:	4608      	movcc	r0, r1
 8015b5a:	4284      	cmp	r4, r0
 8015b5c:	d812      	bhi.n	8015b84 <rcl_action_client_wait_set_get_entities_ready+0xac>
 8015b5e:	2001      	movs	r0, #1
 8015b60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b64:	f640 0036 	movw	r0, #2102	@ 0x836
 8015b68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b6c:	f7fa f800 	bl	800fb70 <rcutils_reset_error>
 8015b70:	f640 0036 	movw	r0, #2102	@ 0x836
 8015b74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b78:	200b      	movs	r0, #11
 8015b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b7e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015b82:	4770      	bx	lr
 8015b84:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	@ 0x1c4
 8015b88:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	@ 0x1cc
 8015b8c:	45f0      	cmp	r8, lr
 8015b8e:	4640      	mov	r0, r8
 8015b90:	69ec      	ldr	r4, [r5, #28]
 8015b92:	bf38      	it	cc
 8015b94:	4670      	movcc	r0, lr
 8015b96:	4560      	cmp	r0, ip
 8015b98:	bf38      	it	cc
 8015b9a:	4660      	movcc	r0, ip
 8015b9c:	4284      	cmp	r4, r0
 8015b9e:	d9de      	bls.n	8015b5e <rcl_action_client_wait_set_get_entities_ready+0x86>
 8015ba0:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8015ba4:	682d      	ldr	r5, [r5, #0]
 8015ba6:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 8015baa:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 8015bae:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8015bb2:	1a18      	subs	r0, r3, r0
 8015bb4:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8015bb8:	f103 0c0c 	add.w	ip, r3, #12
 8015bbc:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 8015bc0:	fab0 f080 	clz	r0, r0
 8015bc4:	eba5 050c 	sub.w	r5, r5, ip
 8015bc8:	0940      	lsrs	r0, r0, #5
 8015bca:	fab5 f585 	clz	r5, r5
 8015bce:	096d      	lsrs	r5, r5, #5
 8015bd0:	7035      	strb	r5, [r6, #0]
 8015bd2:	f103 0510 	add.w	r5, r3, #16
 8015bd6:	1b64      	subs	r4, r4, r5
 8015bd8:	9d08      	ldr	r5, [sp, #32]
 8015bda:	fab4 f484 	clz	r4, r4
 8015bde:	0964      	lsrs	r4, r4, #5
 8015be0:	703c      	strb	r4, [r7, #0]
 8015be2:	1d1c      	adds	r4, r3, #4
 8015be4:	3308      	adds	r3, #8
 8015be6:	7028      	strb	r0, [r5, #0]
 8015be8:	1b09      	subs	r1, r1, r4
 8015bea:	2000      	movs	r0, #0
 8015bec:	1ad3      	subs	r3, r2, r3
 8015bee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015bf0:	fab1 f181 	clz	r1, r1
 8015bf4:	fab3 f383 	clz	r3, r3
 8015bf8:	0949      	lsrs	r1, r1, #5
 8015bfa:	095b      	lsrs	r3, r3, #5
 8015bfc:	7011      	strb	r1, [r2, #0]
 8015bfe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015c00:	7013      	strb	r3, [r2, #0]
 8015c02:	e7b1      	b.n	8015b68 <rcl_action_client_wait_set_get_entities_ready+0x90>

08015c04 <rcl_action_take_goal_request>:
 8015c04:	2800      	cmp	r0, #0
 8015c06:	d039      	beq.n	8015c7c <rcl_action_take_goal_request+0x78>
 8015c08:	b570      	push	{r4, r5, r6, lr}
 8015c0a:	4604      	mov	r4, r0
 8015c0c:	6800      	ldr	r0, [r0, #0]
 8015c0e:	b380      	cbz	r0, 8015c72 <rcl_action_take_goal_request+0x6e>
 8015c10:	460e      	mov	r6, r1
 8015c12:	4615      	mov	r5, r2
 8015c14:	f7fe fce6 	bl	80145e4 <rcl_service_is_valid>
 8015c18:	b330      	cbz	r0, 8015c68 <rcl_action_take_goal_request+0x64>
 8015c1a:	6820      	ldr	r0, [r4, #0]
 8015c1c:	3004      	adds	r0, #4
 8015c1e:	f7fe fce1 	bl	80145e4 <rcl_service_is_valid>
 8015c22:	b308      	cbz	r0, 8015c68 <rcl_action_take_goal_request+0x64>
 8015c24:	6820      	ldr	r0, [r4, #0]
 8015c26:	3008      	adds	r0, #8
 8015c28:	f7fe fcdc 	bl	80145e4 <rcl_service_is_valid>
 8015c2c:	b1e0      	cbz	r0, 8015c68 <rcl_action_take_goal_request+0x64>
 8015c2e:	6820      	ldr	r0, [r4, #0]
 8015c30:	300c      	adds	r0, #12
 8015c32:	f7fe fc57 	bl	80144e4 <rcl_publisher_is_valid>
 8015c36:	b1b8      	cbz	r0, 8015c68 <rcl_action_take_goal_request+0x64>
 8015c38:	6820      	ldr	r0, [r4, #0]
 8015c3a:	3010      	adds	r0, #16
 8015c3c:	f7fe fc52 	bl	80144e4 <rcl_publisher_is_valid>
 8015c40:	b190      	cbz	r0, 8015c68 <rcl_action_take_goal_request+0x64>
 8015c42:	b1cd      	cbz	r5, 8015c78 <rcl_action_take_goal_request+0x74>
 8015c44:	b1c6      	cbz	r6, 8015c78 <rcl_action_take_goal_request+0x74>
 8015c46:	462a      	mov	r2, r5
 8015c48:	4631      	mov	r1, r6
 8015c4a:	6820      	ldr	r0, [r4, #0]
 8015c4c:	f7fe fc72 	bl	8014534 <rcl_take_request>
 8015c50:	b148      	cbz	r0, 8015c66 <rcl_action_take_goal_request+0x62>
 8015c52:	280a      	cmp	r0, #10
 8015c54:	d007      	beq.n	8015c66 <rcl_action_take_goal_request+0x62>
 8015c56:	f240 2259 	movw	r2, #601	@ 0x259
 8015c5a:	f640 0399 	movw	r3, #2201	@ 0x899
 8015c5e:	4290      	cmp	r0, r2
 8015c60:	bf0c      	ite	eq
 8015c62:	4618      	moveq	r0, r3
 8015c64:	2001      	movne	r0, #1
 8015c66:	bd70      	pop	{r4, r5, r6, pc}
 8015c68:	f7f9 ff82 	bl	800fb70 <rcutils_reset_error>
 8015c6c:	f640 0098 	movw	r0, #2200	@ 0x898
 8015c70:	bd70      	pop	{r4, r5, r6, pc}
 8015c72:	f640 0098 	movw	r0, #2200	@ 0x898
 8015c76:	bd70      	pop	{r4, r5, r6, pc}
 8015c78:	200b      	movs	r0, #11
 8015c7a:	bd70      	pop	{r4, r5, r6, pc}
 8015c7c:	f640 0098 	movw	r0, #2200	@ 0x898
 8015c80:	4770      	bx	lr
 8015c82:	bf00      	nop

08015c84 <rcl_action_send_goal_response>:
 8015c84:	b390      	cbz	r0, 8015cec <rcl_action_send_goal_response+0x68>
 8015c86:	b570      	push	{r4, r5, r6, lr}
 8015c88:	4604      	mov	r4, r0
 8015c8a:	6800      	ldr	r0, [r0, #0]
 8015c8c:	b348      	cbz	r0, 8015ce2 <rcl_action_send_goal_response+0x5e>
 8015c8e:	460e      	mov	r6, r1
 8015c90:	4615      	mov	r5, r2
 8015c92:	f7fe fca7 	bl	80145e4 <rcl_service_is_valid>
 8015c96:	b1f8      	cbz	r0, 8015cd8 <rcl_action_send_goal_response+0x54>
 8015c98:	6820      	ldr	r0, [r4, #0]
 8015c9a:	3004      	adds	r0, #4
 8015c9c:	f7fe fca2 	bl	80145e4 <rcl_service_is_valid>
 8015ca0:	b1d0      	cbz	r0, 8015cd8 <rcl_action_send_goal_response+0x54>
 8015ca2:	6820      	ldr	r0, [r4, #0]
 8015ca4:	3008      	adds	r0, #8
 8015ca6:	f7fe fc9d 	bl	80145e4 <rcl_service_is_valid>
 8015caa:	b1a8      	cbz	r0, 8015cd8 <rcl_action_send_goal_response+0x54>
 8015cac:	6820      	ldr	r0, [r4, #0]
 8015cae:	300c      	adds	r0, #12
 8015cb0:	f7fe fc18 	bl	80144e4 <rcl_publisher_is_valid>
 8015cb4:	b180      	cbz	r0, 8015cd8 <rcl_action_send_goal_response+0x54>
 8015cb6:	6820      	ldr	r0, [r4, #0]
 8015cb8:	3010      	adds	r0, #16
 8015cba:	f7fe fc13 	bl	80144e4 <rcl_publisher_is_valid>
 8015cbe:	b158      	cbz	r0, 8015cd8 <rcl_action_send_goal_response+0x54>
 8015cc0:	b195      	cbz	r5, 8015ce8 <rcl_action_send_goal_response+0x64>
 8015cc2:	b18e      	cbz	r6, 8015ce8 <rcl_action_send_goal_response+0x64>
 8015cc4:	462a      	mov	r2, r5
 8015cc6:	4631      	mov	r1, r6
 8015cc8:	6820      	ldr	r0, [r4, #0]
 8015cca:	f7fe fc73 	bl	80145b4 <rcl_send_response>
 8015cce:	b110      	cbz	r0, 8015cd6 <rcl_action_send_goal_response+0x52>
 8015cd0:	2802      	cmp	r0, #2
 8015cd2:	bf18      	it	ne
 8015cd4:	2001      	movne	r0, #1
 8015cd6:	bd70      	pop	{r4, r5, r6, pc}
 8015cd8:	f7f9 ff4a 	bl	800fb70 <rcutils_reset_error>
 8015cdc:	f640 0098 	movw	r0, #2200	@ 0x898
 8015ce0:	bd70      	pop	{r4, r5, r6, pc}
 8015ce2:	f640 0098 	movw	r0, #2200	@ 0x898
 8015ce6:	bd70      	pop	{r4, r5, r6, pc}
 8015ce8:	200b      	movs	r0, #11
 8015cea:	bd70      	pop	{r4, r5, r6, pc}
 8015cec:	f640 0098 	movw	r0, #2200	@ 0x898
 8015cf0:	4770      	bx	lr
 8015cf2:	bf00      	nop

08015cf4 <rcl_action_take_result_request>:
 8015cf4:	2800      	cmp	r0, #0
 8015cf6:	d03a      	beq.n	8015d6e <rcl_action_take_result_request+0x7a>
 8015cf8:	b570      	push	{r4, r5, r6, lr}
 8015cfa:	4604      	mov	r4, r0
 8015cfc:	6800      	ldr	r0, [r0, #0]
 8015cfe:	b388      	cbz	r0, 8015d64 <rcl_action_take_result_request+0x70>
 8015d00:	460e      	mov	r6, r1
 8015d02:	4615      	mov	r5, r2
 8015d04:	f7fe fc6e 	bl	80145e4 <rcl_service_is_valid>
 8015d08:	b338      	cbz	r0, 8015d5a <rcl_action_take_result_request+0x66>
 8015d0a:	6820      	ldr	r0, [r4, #0]
 8015d0c:	3004      	adds	r0, #4
 8015d0e:	f7fe fc69 	bl	80145e4 <rcl_service_is_valid>
 8015d12:	b310      	cbz	r0, 8015d5a <rcl_action_take_result_request+0x66>
 8015d14:	6820      	ldr	r0, [r4, #0]
 8015d16:	3008      	adds	r0, #8
 8015d18:	f7fe fc64 	bl	80145e4 <rcl_service_is_valid>
 8015d1c:	b1e8      	cbz	r0, 8015d5a <rcl_action_take_result_request+0x66>
 8015d1e:	6820      	ldr	r0, [r4, #0]
 8015d20:	300c      	adds	r0, #12
 8015d22:	f7fe fbdf 	bl	80144e4 <rcl_publisher_is_valid>
 8015d26:	b1c0      	cbz	r0, 8015d5a <rcl_action_take_result_request+0x66>
 8015d28:	6820      	ldr	r0, [r4, #0]
 8015d2a:	3010      	adds	r0, #16
 8015d2c:	f7fe fbda 	bl	80144e4 <rcl_publisher_is_valid>
 8015d30:	b198      	cbz	r0, 8015d5a <rcl_action_take_result_request+0x66>
 8015d32:	b1d5      	cbz	r5, 8015d6a <rcl_action_take_result_request+0x76>
 8015d34:	b1ce      	cbz	r6, 8015d6a <rcl_action_take_result_request+0x76>
 8015d36:	6820      	ldr	r0, [r4, #0]
 8015d38:	462a      	mov	r2, r5
 8015d3a:	4631      	mov	r1, r6
 8015d3c:	3008      	adds	r0, #8
 8015d3e:	f7fe fbf9 	bl	8014534 <rcl_take_request>
 8015d42:	b148      	cbz	r0, 8015d58 <rcl_action_take_result_request+0x64>
 8015d44:	280a      	cmp	r0, #10
 8015d46:	d007      	beq.n	8015d58 <rcl_action_take_result_request+0x64>
 8015d48:	f240 2259 	movw	r2, #601	@ 0x259
 8015d4c:	f640 0399 	movw	r3, #2201	@ 0x899
 8015d50:	4290      	cmp	r0, r2
 8015d52:	bf0c      	ite	eq
 8015d54:	4618      	moveq	r0, r3
 8015d56:	2001      	movne	r0, #1
 8015d58:	bd70      	pop	{r4, r5, r6, pc}
 8015d5a:	f7f9 ff09 	bl	800fb70 <rcutils_reset_error>
 8015d5e:	f640 0098 	movw	r0, #2200	@ 0x898
 8015d62:	bd70      	pop	{r4, r5, r6, pc}
 8015d64:	f640 0098 	movw	r0, #2200	@ 0x898
 8015d68:	bd70      	pop	{r4, r5, r6, pc}
 8015d6a:	200b      	movs	r0, #11
 8015d6c:	bd70      	pop	{r4, r5, r6, pc}
 8015d6e:	f640 0098 	movw	r0, #2200	@ 0x898
 8015d72:	4770      	bx	lr

08015d74 <rcl_action_take_cancel_request>:
 8015d74:	2800      	cmp	r0, #0
 8015d76:	d03a      	beq.n	8015dee <rcl_action_take_cancel_request+0x7a>
 8015d78:	b570      	push	{r4, r5, r6, lr}
 8015d7a:	4604      	mov	r4, r0
 8015d7c:	6800      	ldr	r0, [r0, #0]
 8015d7e:	b388      	cbz	r0, 8015de4 <rcl_action_take_cancel_request+0x70>
 8015d80:	460e      	mov	r6, r1
 8015d82:	4615      	mov	r5, r2
 8015d84:	f7fe fc2e 	bl	80145e4 <rcl_service_is_valid>
 8015d88:	b338      	cbz	r0, 8015dda <rcl_action_take_cancel_request+0x66>
 8015d8a:	6820      	ldr	r0, [r4, #0]
 8015d8c:	3004      	adds	r0, #4
 8015d8e:	f7fe fc29 	bl	80145e4 <rcl_service_is_valid>
 8015d92:	b310      	cbz	r0, 8015dda <rcl_action_take_cancel_request+0x66>
 8015d94:	6820      	ldr	r0, [r4, #0]
 8015d96:	3008      	adds	r0, #8
 8015d98:	f7fe fc24 	bl	80145e4 <rcl_service_is_valid>
 8015d9c:	b1e8      	cbz	r0, 8015dda <rcl_action_take_cancel_request+0x66>
 8015d9e:	6820      	ldr	r0, [r4, #0]
 8015da0:	300c      	adds	r0, #12
 8015da2:	f7fe fb9f 	bl	80144e4 <rcl_publisher_is_valid>
 8015da6:	b1c0      	cbz	r0, 8015dda <rcl_action_take_cancel_request+0x66>
 8015da8:	6820      	ldr	r0, [r4, #0]
 8015daa:	3010      	adds	r0, #16
 8015dac:	f7fe fb9a 	bl	80144e4 <rcl_publisher_is_valid>
 8015db0:	b198      	cbz	r0, 8015dda <rcl_action_take_cancel_request+0x66>
 8015db2:	b1d5      	cbz	r5, 8015dea <rcl_action_take_cancel_request+0x76>
 8015db4:	b1ce      	cbz	r6, 8015dea <rcl_action_take_cancel_request+0x76>
 8015db6:	6820      	ldr	r0, [r4, #0]
 8015db8:	462a      	mov	r2, r5
 8015dba:	4631      	mov	r1, r6
 8015dbc:	3004      	adds	r0, #4
 8015dbe:	f7fe fbb9 	bl	8014534 <rcl_take_request>
 8015dc2:	b148      	cbz	r0, 8015dd8 <rcl_action_take_cancel_request+0x64>
 8015dc4:	280a      	cmp	r0, #10
 8015dc6:	d007      	beq.n	8015dd8 <rcl_action_take_cancel_request+0x64>
 8015dc8:	f240 2259 	movw	r2, #601	@ 0x259
 8015dcc:	f640 0399 	movw	r3, #2201	@ 0x899
 8015dd0:	4290      	cmp	r0, r2
 8015dd2:	bf0c      	ite	eq
 8015dd4:	4618      	moveq	r0, r3
 8015dd6:	2001      	movne	r0, #1
 8015dd8:	bd70      	pop	{r4, r5, r6, pc}
 8015dda:	f7f9 fec9 	bl	800fb70 <rcutils_reset_error>
 8015dde:	f640 0098 	movw	r0, #2200	@ 0x898
 8015de2:	bd70      	pop	{r4, r5, r6, pc}
 8015de4:	f640 0098 	movw	r0, #2200	@ 0x898
 8015de8:	bd70      	pop	{r4, r5, r6, pc}
 8015dea:	200b      	movs	r0, #11
 8015dec:	bd70      	pop	{r4, r5, r6, pc}
 8015dee:	f640 0098 	movw	r0, #2200	@ 0x898
 8015df2:	4770      	bx	lr

08015df4 <rcl_action_send_cancel_response>:
 8015df4:	b398      	cbz	r0, 8015e5e <rcl_action_send_cancel_response+0x6a>
 8015df6:	b570      	push	{r4, r5, r6, lr}
 8015df8:	4604      	mov	r4, r0
 8015dfa:	6800      	ldr	r0, [r0, #0]
 8015dfc:	b350      	cbz	r0, 8015e54 <rcl_action_send_cancel_response+0x60>
 8015dfe:	460e      	mov	r6, r1
 8015e00:	4615      	mov	r5, r2
 8015e02:	f7fe fbef 	bl	80145e4 <rcl_service_is_valid>
 8015e06:	b300      	cbz	r0, 8015e4a <rcl_action_send_cancel_response+0x56>
 8015e08:	6820      	ldr	r0, [r4, #0]
 8015e0a:	3004      	adds	r0, #4
 8015e0c:	f7fe fbea 	bl	80145e4 <rcl_service_is_valid>
 8015e10:	b1d8      	cbz	r0, 8015e4a <rcl_action_send_cancel_response+0x56>
 8015e12:	6820      	ldr	r0, [r4, #0]
 8015e14:	3008      	adds	r0, #8
 8015e16:	f7fe fbe5 	bl	80145e4 <rcl_service_is_valid>
 8015e1a:	b1b0      	cbz	r0, 8015e4a <rcl_action_send_cancel_response+0x56>
 8015e1c:	6820      	ldr	r0, [r4, #0]
 8015e1e:	300c      	adds	r0, #12
 8015e20:	f7fe fb60 	bl	80144e4 <rcl_publisher_is_valid>
 8015e24:	b188      	cbz	r0, 8015e4a <rcl_action_send_cancel_response+0x56>
 8015e26:	6820      	ldr	r0, [r4, #0]
 8015e28:	3010      	adds	r0, #16
 8015e2a:	f7fe fb5b 	bl	80144e4 <rcl_publisher_is_valid>
 8015e2e:	b160      	cbz	r0, 8015e4a <rcl_action_send_cancel_response+0x56>
 8015e30:	b19d      	cbz	r5, 8015e5a <rcl_action_send_cancel_response+0x66>
 8015e32:	b196      	cbz	r6, 8015e5a <rcl_action_send_cancel_response+0x66>
 8015e34:	6820      	ldr	r0, [r4, #0]
 8015e36:	462a      	mov	r2, r5
 8015e38:	4631      	mov	r1, r6
 8015e3a:	3004      	adds	r0, #4
 8015e3c:	f7fe fbba 	bl	80145b4 <rcl_send_response>
 8015e40:	b110      	cbz	r0, 8015e48 <rcl_action_send_cancel_response+0x54>
 8015e42:	2802      	cmp	r0, #2
 8015e44:	bf18      	it	ne
 8015e46:	2001      	movne	r0, #1
 8015e48:	bd70      	pop	{r4, r5, r6, pc}
 8015e4a:	f7f9 fe91 	bl	800fb70 <rcutils_reset_error>
 8015e4e:	f640 0098 	movw	r0, #2200	@ 0x898
 8015e52:	bd70      	pop	{r4, r5, r6, pc}
 8015e54:	f640 0098 	movw	r0, #2200	@ 0x898
 8015e58:	bd70      	pop	{r4, r5, r6, pc}
 8015e5a:	200b      	movs	r0, #11
 8015e5c:	bd70      	pop	{r4, r5, r6, pc}
 8015e5e:	f640 0098 	movw	r0, #2200	@ 0x898
 8015e62:	4770      	bx	lr

08015e64 <rcl_action_wait_set_add_action_server>:
 8015e64:	2800      	cmp	r0, #0
 8015e66:	d04d      	beq.n	8015f04 <rcl_action_wait_set_add_action_server+0xa0>
 8015e68:	b570      	push	{r4, r5, r6, lr}
 8015e6a:	460c      	mov	r4, r1
 8015e6c:	b159      	cbz	r1, 8015e86 <rcl_action_wait_set_add_action_server+0x22>
 8015e6e:	4605      	mov	r5, r0
 8015e70:	6808      	ldr	r0, [r1, #0]
 8015e72:	b140      	cbz	r0, 8015e86 <rcl_action_wait_set_add_action_server+0x22>
 8015e74:	4616      	mov	r6, r2
 8015e76:	f7fe fbb5 	bl	80145e4 <rcl_service_is_valid>
 8015e7a:	b120      	cbz	r0, 8015e86 <rcl_action_wait_set_add_action_server+0x22>
 8015e7c:	6820      	ldr	r0, [r4, #0]
 8015e7e:	3004      	adds	r0, #4
 8015e80:	f7fe fbb0 	bl	80145e4 <rcl_service_is_valid>
 8015e84:	b910      	cbnz	r0, 8015e8c <rcl_action_wait_set_add_action_server+0x28>
 8015e86:	f640 0098 	movw	r0, #2200	@ 0x898
 8015e8a:	bd70      	pop	{r4, r5, r6, pc}
 8015e8c:	6820      	ldr	r0, [r4, #0]
 8015e8e:	3008      	adds	r0, #8
 8015e90:	f7fe fba8 	bl	80145e4 <rcl_service_is_valid>
 8015e94:	2800      	cmp	r0, #0
 8015e96:	d0f6      	beq.n	8015e86 <rcl_action_wait_set_add_action_server+0x22>
 8015e98:	6820      	ldr	r0, [r4, #0]
 8015e9a:	300c      	adds	r0, #12
 8015e9c:	f7fe fb3a 	bl	8014514 <rcl_publisher_is_valid_except_context>
 8015ea0:	2800      	cmp	r0, #0
 8015ea2:	d0f0      	beq.n	8015e86 <rcl_action_wait_set_add_action_server+0x22>
 8015ea4:	6820      	ldr	r0, [r4, #0]
 8015ea6:	3010      	adds	r0, #16
 8015ea8:	f7fe fb34 	bl	8014514 <rcl_publisher_is_valid_except_context>
 8015eac:	2800      	cmp	r0, #0
 8015eae:	d0ea      	beq.n	8015e86 <rcl_action_wait_set_add_action_server+0x22>
 8015eb0:	6821      	ldr	r1, [r4, #0]
 8015eb2:	4628      	mov	r0, r5
 8015eb4:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8015eb8:	f7ff fad2 	bl	8015460 <rcl_wait_set_add_service>
 8015ebc:	2800      	cmp	r0, #0
 8015ebe:	d1e4      	bne.n	8015e8a <rcl_action_wait_set_add_action_server+0x26>
 8015ec0:	6821      	ldr	r1, [r4, #0]
 8015ec2:	4628      	mov	r0, r5
 8015ec4:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8015ec8:	3104      	adds	r1, #4
 8015eca:	f7ff fac9 	bl	8015460 <rcl_wait_set_add_service>
 8015ece:	2800      	cmp	r0, #0
 8015ed0:	d1db      	bne.n	8015e8a <rcl_action_wait_set_add_action_server+0x26>
 8015ed2:	6821      	ldr	r1, [r4, #0]
 8015ed4:	4628      	mov	r0, r5
 8015ed6:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8015eda:	3108      	adds	r1, #8
 8015edc:	f7ff fac0 	bl	8015460 <rcl_wait_set_add_service>
 8015ee0:	2800      	cmp	r0, #0
 8015ee2:	d1d2      	bne.n	8015e8a <rcl_action_wait_set_add_action_server+0x26>
 8015ee4:	6821      	ldr	r1, [r4, #0]
 8015ee6:	4628      	mov	r0, r5
 8015ee8:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8015eec:	3114      	adds	r1, #20
 8015eee:	f7ff fa5b 	bl	80153a8 <rcl_wait_set_add_timer>
 8015ef2:	2800      	cmp	r0, #0
 8015ef4:	d1c9      	bne.n	8015e8a <rcl_action_wait_set_add_action_server+0x26>
 8015ef6:	2e00      	cmp	r6, #0
 8015ef8:	d0c7      	beq.n	8015e8a <rcl_action_wait_set_add_action_server+0x26>
 8015efa:	6823      	ldr	r3, [r4, #0]
 8015efc:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8015f00:	6033      	str	r3, [r6, #0]
 8015f02:	bd70      	pop	{r4, r5, r6, pc}
 8015f04:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015f08:	4770      	bx	lr
 8015f0a:	bf00      	nop

08015f0c <rcl_action_server_wait_set_get_entities_ready>:
 8015f0c:	2800      	cmp	r0, #0
 8015f0e:	d067      	beq.n	8015fe0 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 8015f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f14:	460c      	mov	r4, r1
 8015f16:	b161      	cbz	r1, 8015f32 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8015f18:	4605      	mov	r5, r0
 8015f1a:	6808      	ldr	r0, [r1, #0]
 8015f1c:	b148      	cbz	r0, 8015f32 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8015f1e:	4616      	mov	r6, r2
 8015f20:	4698      	mov	r8, r3
 8015f22:	f7fe fb5f 	bl	80145e4 <rcl_service_is_valid>
 8015f26:	b120      	cbz	r0, 8015f32 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8015f28:	6820      	ldr	r0, [r4, #0]
 8015f2a:	3004      	adds	r0, #4
 8015f2c:	f7fe fb5a 	bl	80145e4 <rcl_service_is_valid>
 8015f30:	b918      	cbnz	r0, 8015f3a <rcl_action_server_wait_set_get_entities_ready+0x2e>
 8015f32:	f640 0098 	movw	r0, #2200	@ 0x898
 8015f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f3a:	6820      	ldr	r0, [r4, #0]
 8015f3c:	3008      	adds	r0, #8
 8015f3e:	f7fe fb51 	bl	80145e4 <rcl_service_is_valid>
 8015f42:	2800      	cmp	r0, #0
 8015f44:	d0f5      	beq.n	8015f32 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8015f46:	6820      	ldr	r0, [r4, #0]
 8015f48:	300c      	adds	r0, #12
 8015f4a:	f7fe fae3 	bl	8014514 <rcl_publisher_is_valid_except_context>
 8015f4e:	2800      	cmp	r0, #0
 8015f50:	d0ef      	beq.n	8015f32 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8015f52:	6820      	ldr	r0, [r4, #0]
 8015f54:	3010      	adds	r0, #16
 8015f56:	f7fe fadd 	bl	8014514 <rcl_publisher_is_valid_except_context>
 8015f5a:	2800      	cmp	r0, #0
 8015f5c:	d0e9      	beq.n	8015f32 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8015f5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015f62:	2a00      	cmp	r2, #0
 8015f64:	bf18      	it	ne
 8015f66:	2b00      	cmpne	r3, #0
 8015f68:	bf0c      	ite	eq
 8015f6a:	2101      	moveq	r1, #1
 8015f6c:	2100      	movne	r1, #0
 8015f6e:	f1b8 0f00 	cmp.w	r8, #0
 8015f72:	bf08      	it	eq
 8015f74:	f041 0101 	orreq.w	r1, r1, #1
 8015f78:	bba9      	cbnz	r1, 8015fe6 <rcl_action_server_wait_set_get_entities_ready+0xda>
 8015f7a:	b3a6      	cbz	r6, 8015fe6 <rcl_action_server_wait_set_get_entities_ready+0xda>
 8015f7c:	6821      	ldr	r1, [r4, #0]
 8015f7e:	2000      	movs	r0, #0
 8015f80:	692c      	ldr	r4, [r5, #16]
 8015f82:	f8d1 21e8 	ldr.w	r2, [r1, #488]	@ 0x1e8
 8015f86:	6a2f      	ldr	r7, [r5, #32]
 8015f88:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015f8c:	f8d1 41dc 	ldr.w	r4, [r1, #476]	@ 0x1dc
 8015f90:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8015f94:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 8015f98:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 8015f9c:	1a64      	subs	r4, r4, r1
 8015f9e:	f8d1 31e4 	ldr.w	r3, [r1, #484]	@ 0x1e4
 8015fa2:	fab4 f484 	clz	r4, r4
 8015fa6:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8015faa:	0964      	lsrs	r4, r4, #5
 8015fac:	7034      	strb	r4, [r6, #0]
 8015fae:	1d0c      	adds	r4, r1, #4
 8015fb0:	1b2c      	subs	r4, r5, r4
 8015fb2:	fab4 f484 	clz	r4, r4
 8015fb6:	0964      	lsrs	r4, r4, #5
 8015fb8:	f888 4000 	strb.w	r4, [r8]
 8015fbc:	f101 0408 	add.w	r4, r1, #8
 8015fc0:	1b1b      	subs	r3, r3, r4
 8015fc2:	9c06      	ldr	r4, [sp, #24]
 8015fc4:	fab3 f383 	clz	r3, r3
 8015fc8:	095b      	lsrs	r3, r3, #5
 8015fca:	7023      	strb	r3, [r4, #0]
 8015fcc:	f101 0314 	add.w	r3, r1, #20
 8015fd0:	1ad3      	subs	r3, r2, r3
 8015fd2:	9a07      	ldr	r2, [sp, #28]
 8015fd4:	fab3 f383 	clz	r3, r3
 8015fd8:	095b      	lsrs	r3, r3, #5
 8015fda:	7013      	strb	r3, [r2, #0]
 8015fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015fe0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015fe4:	4770      	bx	lr
 8015fe6:	200b      	movs	r0, #11
 8015fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015fec <_execute_event_handler>:
 8015fec:	2002      	movs	r0, #2
 8015fee:	4770      	bx	lr

08015ff0 <_cancel_goal_event_handler>:
 8015ff0:	2003      	movs	r0, #3
 8015ff2:	4770      	bx	lr

08015ff4 <_succeed_event_handler>:
 8015ff4:	2004      	movs	r0, #4
 8015ff6:	4770      	bx	lr

08015ff8 <_abort_event_handler>:
 8015ff8:	2006      	movs	r0, #6
 8015ffa:	4770      	bx	lr

08015ffc <_canceled_event_handler>:
 8015ffc:	2005      	movs	r0, #5
 8015ffe:	4770      	bx	lr

08016000 <rcl_action_transition_goal_state>:
 8016000:	b2c2      	uxtb	r2, r0
 8016002:	2a06      	cmp	r2, #6
 8016004:	d810      	bhi.n	8016028 <rcl_action_transition_goal_state+0x28>
 8016006:	2904      	cmp	r1, #4
 8016008:	d80e      	bhi.n	8016028 <rcl_action_transition_goal_state+0x28>
 801600a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801600e:	b410      	push	{r4}
 8016010:	1853      	adds	r3, r2, r1
 8016012:	4c06      	ldr	r4, [pc, #24]	@ (801602c <rcl_action_transition_goal_state+0x2c>)
 8016014:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8016018:	b113      	cbz	r3, 8016020 <rcl_action_transition_goal_state+0x20>
 801601a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801601e:	4718      	bx	r3
 8016020:	2000      	movs	r0, #0
 8016022:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016026:	4770      	bx	lr
 8016028:	2000      	movs	r0, #0
 801602a:	4770      	bx	lr
 801602c:	0801d494 	.word	0x0801d494

08016030 <rcl_action_get_zero_initialized_cancel_response>:
 8016030:	b510      	push	{r4, lr}
 8016032:	4c07      	ldr	r4, [pc, #28]	@ (8016050 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8016034:	4686      	mov	lr, r0
 8016036:	4684      	mov	ip, r0
 8016038:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801603a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801603e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016040:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016044:	6823      	ldr	r3, [r4, #0]
 8016046:	4670      	mov	r0, lr
 8016048:	f8cc 3000 	str.w	r3, [ip]
 801604c:	bd10      	pop	{r4, pc}
 801604e:	bf00      	nop
 8016050:	0801d520 	.word	0x0801d520

08016054 <rclc_action_send_result_request>:
 8016054:	b1d0      	cbz	r0, 801608c <rclc_action_send_result_request+0x38>
 8016056:	4684      	mov	ip, r0
 8016058:	f8d0 0009 	ldr.w	r0, [r0, #9]
 801605c:	b500      	push	{lr}
 801605e:	b087      	sub	sp, #28
 8016060:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8016064:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8016068:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801606c:	f10d 0e08 	add.w	lr, sp, #8
 8016070:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016074:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8016078:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801607c:	a902      	add	r1, sp, #8
 801607e:	3010      	adds	r0, #16
 8016080:	f7ff fbca 	bl	8015818 <rcl_action_send_result_request>
 8016084:	b920      	cbnz	r0, 8016090 <rclc_action_send_result_request+0x3c>
 8016086:	b007      	add	sp, #28
 8016088:	f85d fb04 	ldr.w	pc, [sp], #4
 801608c:	200b      	movs	r0, #11
 801608e:	4770      	bx	lr
 8016090:	9001      	str	r0, [sp, #4]
 8016092:	f7f9 fd6d 	bl	800fb70 <rcutils_reset_error>
 8016096:	9801      	ldr	r0, [sp, #4]
 8016098:	b007      	add	sp, #28
 801609a:	f85d fb04 	ldr.w	pc, [sp], #4
 801609e:	bf00      	nop

080160a0 <rclc_action_take_goal_handle>:
 80160a0:	b160      	cbz	r0, 80160bc <rclc_action_take_goal_handle+0x1c>
 80160a2:	6883      	ldr	r3, [r0, #8]
 80160a4:	b143      	cbz	r3, 80160b8 <rclc_action_take_goal_handle+0x18>
 80160a6:	6819      	ldr	r1, [r3, #0]
 80160a8:	2200      	movs	r2, #0
 80160aa:	6081      	str	r1, [r0, #8]
 80160ac:	721a      	strb	r2, [r3, #8]
 80160ae:	68c1      	ldr	r1, [r0, #12]
 80160b0:	621a      	str	r2, [r3, #32]
 80160b2:	849a      	strh	r2, [r3, #36]	@ 0x24
 80160b4:	6019      	str	r1, [r3, #0]
 80160b6:	60c3      	str	r3, [r0, #12]
 80160b8:	4618      	mov	r0, r3
 80160ba:	4770      	bx	lr
 80160bc:	4603      	mov	r3, r0
 80160be:	e7fb      	b.n	80160b8 <rclc_action_take_goal_handle+0x18>

080160c0 <rclc_action_remove_used_goal_handle>:
 80160c0:	b180      	cbz	r0, 80160e4 <rclc_action_remove_used_goal_handle+0x24>
 80160c2:	b179      	cbz	r1, 80160e4 <rclc_action_remove_used_goal_handle+0x24>
 80160c4:	68c3      	ldr	r3, [r0, #12]
 80160c6:	4299      	cmp	r1, r3
 80160c8:	d00d      	beq.n	80160e6 <rclc_action_remove_used_goal_handle+0x26>
 80160ca:	b12b      	cbz	r3, 80160d8 <rclc_action_remove_used_goal_handle+0x18>
 80160cc:	681a      	ldr	r2, [r3, #0]
 80160ce:	4291      	cmp	r1, r2
 80160d0:	d003      	beq.n	80160da <rclc_action_remove_used_goal_handle+0x1a>
 80160d2:	4613      	mov	r3, r2
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d1f9      	bne.n	80160cc <rclc_action_remove_used_goal_handle+0xc>
 80160d8:	4770      	bx	lr
 80160da:	680a      	ldr	r2, [r1, #0]
 80160dc:	601a      	str	r2, [r3, #0]
 80160de:	6883      	ldr	r3, [r0, #8]
 80160e0:	600b      	str	r3, [r1, #0]
 80160e2:	6081      	str	r1, [r0, #8]
 80160e4:	4770      	bx	lr
 80160e6:	680b      	ldr	r3, [r1, #0]
 80160e8:	60c3      	str	r3, [r0, #12]
 80160ea:	e7f8      	b.n	80160de <rclc_action_remove_used_goal_handle+0x1e>

080160ec <rclc_action_find_goal_handle_by_uuid>:
 80160ec:	b538      	push	{r3, r4, r5, lr}
 80160ee:	b181      	cbz	r1, 8016112 <rclc_action_find_goal_handle_by_uuid+0x26>
 80160f0:	b178      	cbz	r0, 8016112 <rclc_action_find_goal_handle_by_uuid+0x26>
 80160f2:	68c4      	ldr	r4, [r0, #12]
 80160f4:	460d      	mov	r5, r1
 80160f6:	b914      	cbnz	r4, 80160fe <rclc_action_find_goal_handle_by_uuid+0x12>
 80160f8:	e009      	b.n	801610e <rclc_action_find_goal_handle_by_uuid+0x22>
 80160fa:	6824      	ldr	r4, [r4, #0]
 80160fc:	b13c      	cbz	r4, 801610e <rclc_action_find_goal_handle_by_uuid+0x22>
 80160fe:	f104 0009 	add.w	r0, r4, #9
 8016102:	2210      	movs	r2, #16
 8016104:	4629      	mov	r1, r5
 8016106:	f005 fa3d 	bl	801b584 <memcmp>
 801610a:	2800      	cmp	r0, #0
 801610c:	d1f5      	bne.n	80160fa <rclc_action_find_goal_handle_by_uuid+0xe>
 801610e:	4620      	mov	r0, r4
 8016110:	bd38      	pop	{r3, r4, r5, pc}
 8016112:	2400      	movs	r4, #0
 8016114:	4620      	mov	r0, r4
 8016116:	bd38      	pop	{r3, r4, r5, pc}

08016118 <rclc_action_find_first_handle_by_status>:
 8016118:	b140      	cbz	r0, 801612c <rclc_action_find_first_handle_by_status+0x14>
 801611a:	68c0      	ldr	r0, [r0, #12]
 801611c:	b910      	cbnz	r0, 8016124 <rclc_action_find_first_handle_by_status+0xc>
 801611e:	e005      	b.n	801612c <rclc_action_find_first_handle_by_status+0x14>
 8016120:	6800      	ldr	r0, [r0, #0]
 8016122:	b118      	cbz	r0, 801612c <rclc_action_find_first_handle_by_status+0x14>
 8016124:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8016128:	428b      	cmp	r3, r1
 801612a:	d1f9      	bne.n	8016120 <rclc_action_find_first_handle_by_status+0x8>
 801612c:	4770      	bx	lr
 801612e:	bf00      	nop

08016130 <rclc_action_find_first_terminated_handle>:
 8016130:	b140      	cbz	r0, 8016144 <rclc_action_find_first_terminated_handle+0x14>
 8016132:	68c0      	ldr	r0, [r0, #12]
 8016134:	b910      	cbnz	r0, 801613c <rclc_action_find_first_terminated_handle+0xc>
 8016136:	e005      	b.n	8016144 <rclc_action_find_first_terminated_handle+0x14>
 8016138:	6800      	ldr	r0, [r0, #0]
 801613a:	b118      	cbz	r0, 8016144 <rclc_action_find_first_terminated_handle+0x14>
 801613c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8016140:	2b03      	cmp	r3, #3
 8016142:	ddf9      	ble.n	8016138 <rclc_action_find_first_terminated_handle+0x8>
 8016144:	4770      	bx	lr
 8016146:	bf00      	nop

08016148 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8016148:	b170      	cbz	r0, 8016168 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801614a:	68c0      	ldr	r0, [r0, #12]
 801614c:	b160      	cbz	r0, 8016168 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801614e:	b410      	push	{r4}
 8016150:	e001      	b.n	8016156 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8016152:	6800      	ldr	r0, [r0, #0]
 8016154:	b128      	cbz	r0, 8016162 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8016156:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801615a:	4299      	cmp	r1, r3
 801615c:	bf08      	it	eq
 801615e:	4294      	cmpeq	r4, r2
 8016160:	d1f7      	bne.n	8016152 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8016162:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016166:	4770      	bx	lr
 8016168:	4770      	bx	lr
 801616a:	bf00      	nop

0801616c <rclc_action_find_handle_by_result_request_sequence_number>:
 801616c:	b170      	cbz	r0, 801618c <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801616e:	68c0      	ldr	r0, [r0, #12]
 8016170:	b160      	cbz	r0, 801618c <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8016172:	b410      	push	{r4}
 8016174:	e001      	b.n	801617a <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8016176:	6800      	ldr	r0, [r0, #0]
 8016178:	b128      	cbz	r0, 8016186 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801617a:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801617e:	4299      	cmp	r1, r3
 8016180:	bf08      	it	eq
 8016182:	4294      	cmpeq	r4, r2
 8016184:	d1f7      	bne.n	8016176 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8016186:	f85d 4b04 	ldr.w	r4, [sp], #4
 801618a:	4770      	bx	lr
 801618c:	4770      	bx	lr
 801618e:	bf00      	nop

08016190 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8016190:	b170      	cbz	r0, 80161b0 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8016192:	68c0      	ldr	r0, [r0, #12]
 8016194:	b160      	cbz	r0, 80161b0 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8016196:	b410      	push	{r4}
 8016198:	e001      	b.n	801619e <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801619a:	6800      	ldr	r0, [r0, #0]
 801619c:	b128      	cbz	r0, 80161aa <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801619e:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 80161a2:	4299      	cmp	r1, r3
 80161a4:	bf08      	it	eq
 80161a6:	4294      	cmpeq	r4, r2
 80161a8:	d1f7      	bne.n	801619a <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 80161aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80161ae:	4770      	bx	lr
 80161b0:	4770      	bx	lr
 80161b2:	bf00      	nop

080161b4 <rclc_action_find_first_handle_with_goal_response>:
 80161b4:	b140      	cbz	r0, 80161c8 <rclc_action_find_first_handle_with_goal_response+0x14>
 80161b6:	68c0      	ldr	r0, [r0, #12]
 80161b8:	b910      	cbnz	r0, 80161c0 <rclc_action_find_first_handle_with_goal_response+0xc>
 80161ba:	e005      	b.n	80161c8 <rclc_action_find_first_handle_with_goal_response+0x14>
 80161bc:	6800      	ldr	r0, [r0, #0]
 80161be:	b118      	cbz	r0, 80161c8 <rclc_action_find_first_handle_with_goal_response+0x14>
 80161c0:	f890 3020 	ldrb.w	r3, [r0, #32]
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d0f9      	beq.n	80161bc <rclc_action_find_first_handle_with_goal_response+0x8>
 80161c8:	4770      	bx	lr
 80161ca:	bf00      	nop

080161cc <rclc_action_find_first_handle_with_result_response>:
 80161cc:	b140      	cbz	r0, 80161e0 <rclc_action_find_first_handle_with_result_response+0x14>
 80161ce:	68c0      	ldr	r0, [r0, #12]
 80161d0:	b910      	cbnz	r0, 80161d8 <rclc_action_find_first_handle_with_result_response+0xc>
 80161d2:	e005      	b.n	80161e0 <rclc_action_find_first_handle_with_result_response+0x14>
 80161d4:	6800      	ldr	r0, [r0, #0]
 80161d6:	b118      	cbz	r0, 80161e0 <rclc_action_find_first_handle_with_result_response+0x14>
 80161d8:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d0f9      	beq.n	80161d4 <rclc_action_find_first_handle_with_result_response+0x8>
 80161e0:	4770      	bx	lr
 80161e2:	bf00      	nop

080161e4 <rclc_action_server_response_goal_request>:
 80161e4:	b198      	cbz	r0, 801620e <rclc_action_server_response_goal_request+0x2a>
 80161e6:	2200      	movs	r2, #0
 80161e8:	460b      	mov	r3, r1
 80161ea:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80161ee:	b510      	push	{r4, lr}
 80161f0:	6844      	ldr	r4, [r0, #4]
 80161f2:	b086      	sub	sp, #24
 80161f4:	f104 0010 	add.w	r0, r4, #16
 80161f8:	9205      	str	r2, [sp, #20]
 80161fa:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80161fe:	aa03      	add	r2, sp, #12
 8016200:	f88d 300c 	strb.w	r3, [sp, #12]
 8016204:	f7ff fd3e 	bl	8015c84 <rcl_action_send_goal_response>
 8016208:	b918      	cbnz	r0, 8016212 <rclc_action_server_response_goal_request+0x2e>
 801620a:	b006      	add	sp, #24
 801620c:	bd10      	pop	{r4, pc}
 801620e:	200b      	movs	r0, #11
 8016210:	4770      	bx	lr
 8016212:	9001      	str	r0, [sp, #4]
 8016214:	f7f9 fcac 	bl	800fb70 <rcutils_reset_error>
 8016218:	9801      	ldr	r0, [sp, #4]
 801621a:	b006      	add	sp, #24
 801621c:	bd10      	pop	{r4, pc}
 801621e:	bf00      	nop

08016220 <rclc_action_server_goal_cancel_accept>:
 8016220:	b310      	cbz	r0, 8016268 <rclc_action_server_goal_cancel_accept+0x48>
 8016222:	b510      	push	{r4, lr}
 8016224:	b090      	sub	sp, #64	@ 0x40
 8016226:	4604      	mov	r4, r0
 8016228:	a806      	add	r0, sp, #24
 801622a:	f7ff ff01 	bl	8016030 <rcl_action_get_zero_initialized_cancel_response>
 801622e:	2300      	movs	r3, #0
 8016230:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8016234:	46ec      	mov	ip, sp
 8016236:	f8d4 100d 	ldr.w	r1, [r4, #13]
 801623a:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801623e:	f88d 3018 	strb.w	r3, [sp, #24]
 8016242:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8016246:	f8cd d01c 	str.w	sp, [sp, #28]
 801624a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801624e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8016270 <rclc_action_server_goal_cancel_accept+0x50>
 8016252:	6860      	ldr	r0, [r4, #4]
 8016254:	aa06      	add	r2, sp, #24
 8016256:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801625a:	3010      	adds	r0, #16
 801625c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016260:	f7ff fdc8 	bl	8015df4 <rcl_action_send_cancel_response>
 8016264:	b010      	add	sp, #64	@ 0x40
 8016266:	bd10      	pop	{r4, pc}
 8016268:	200b      	movs	r0, #11
 801626a:	4770      	bx	lr
 801626c:	f3af 8000 	nop.w
 8016270:	00000001 	.word	0x00000001
 8016274:	00000001 	.word	0x00000001

08016278 <rclc_action_server_goal_cancel_reject>:
 8016278:	b082      	sub	sp, #8
 801627a:	b530      	push	{r4, r5, lr}
 801627c:	b08b      	sub	sp, #44	@ 0x2c
 801627e:	ac0e      	add	r4, sp, #56	@ 0x38
 8016280:	e884 000c 	stmia.w	r4, {r2, r3}
 8016284:	b188      	cbz	r0, 80162aa <rclc_action_server_goal_cancel_reject+0x32>
 8016286:	4604      	mov	r4, r0
 8016288:	a801      	add	r0, sp, #4
 801628a:	460d      	mov	r5, r1
 801628c:	f7ff fed0 	bl	8016030 <rcl_action_get_zero_initialized_cancel_response>
 8016290:	aa01      	add	r2, sp, #4
 8016292:	a90e      	add	r1, sp, #56	@ 0x38
 8016294:	f104 0010 	add.w	r0, r4, #16
 8016298:	f88d 5004 	strb.w	r5, [sp, #4]
 801629c:	f7ff fdaa 	bl	8015df4 <rcl_action_send_cancel_response>
 80162a0:	b00b      	add	sp, #44	@ 0x2c
 80162a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80162a6:	b002      	add	sp, #8
 80162a8:	4770      	bx	lr
 80162aa:	200b      	movs	r0, #11
 80162ac:	b00b      	add	sp, #44	@ 0x2c
 80162ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80162b2:	b002      	add	sp, #8
 80162b4:	4770      	bx	lr
 80162b6:	bf00      	nop

080162b8 <__atomic_load_8>:
 80162b8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80162bc:	4a16      	ldr	r2, [pc, #88]	@ (8016318 <__atomic_load_8+0x60>)
 80162be:	4b17      	ldr	r3, [pc, #92]	@ (801631c <__atomic_load_8+0x64>)
 80162c0:	f04f 0c01 	mov.w	ip, #1
 80162c4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80162c8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80162cc:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80162d0:	fb02 f101 	mul.w	r1, r2, r1
 80162d4:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80162d8:	fba3 2301 	umull	r2, r3, r3, r1
 80162dc:	091b      	lsrs	r3, r3, #4
 80162de:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80162e2:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80162e6:	b4d0      	push	{r4, r6, r7}
 80162e8:	1ac9      	subs	r1, r1, r3
 80162ea:	4c0d      	ldr	r4, [pc, #52]	@ (8016320 <__atomic_load_8+0x68>)
 80162ec:	1862      	adds	r2, r4, r1
 80162ee:	e8d2 3f4f 	ldrexb	r3, [r2]
 80162f2:	e8c2 cf46 	strexb	r6, ip, [r2]
 80162f6:	2e00      	cmp	r6, #0
 80162f8:	d1f9      	bne.n	80162ee <__atomic_load_8+0x36>
 80162fa:	b2db      	uxtb	r3, r3
 80162fc:	f3bf 8f5b 	dmb	ish
 8016300:	2b00      	cmp	r3, #0
 8016302:	d1f4      	bne.n	80162ee <__atomic_load_8+0x36>
 8016304:	e9d0 6700 	ldrd	r6, r7, [r0]
 8016308:	f3bf 8f5b 	dmb	ish
 801630c:	5463      	strb	r3, [r4, r1]
 801630e:	4630      	mov	r0, r6
 8016310:	4639      	mov	r1, r7
 8016312:	bcd0      	pop	{r4, r6, r7}
 8016314:	4770      	bx	lr
 8016316:	bf00      	nop
 8016318:	27d4eb2d 	.word	0x27d4eb2d
 801631c:	b21642c9 	.word	0xb21642c9
 8016320:	2000f240 	.word	0x2000f240

08016324 <__atomic_store_8>:
 8016324:	b570      	push	{r4, r5, r6, lr}
 8016326:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 801632a:	4916      	ldr	r1, [pc, #88]	@ (8016384 <__atomic_store_8+0x60>)
 801632c:	4c16      	ldr	r4, [pc, #88]	@ (8016388 <__atomic_store_8+0x64>)
 801632e:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 8016332:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8016336:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 801633a:	fb01 fe0e 	mul.w	lr, r1, lr
 801633e:	4913      	ldr	r1, [pc, #76]	@ (801638c <__atomic_store_8+0x68>)
 8016340:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8016344:	fba1 510e 	umull	r5, r1, r1, lr
 8016348:	f04f 0501 	mov.w	r5, #1
 801634c:	0909      	lsrs	r1, r1, #4
 801634e:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 8016352:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 8016356:	ebae 0e01 	sub.w	lr, lr, r1
 801635a:	eb04 0c0e 	add.w	ip, r4, lr
 801635e:	e8dc 1f4f 	ldrexb	r1, [ip]
 8016362:	e8cc 5f46 	strexb	r6, r5, [ip]
 8016366:	2e00      	cmp	r6, #0
 8016368:	d1f9      	bne.n	801635e <__atomic_store_8+0x3a>
 801636a:	b2c9      	uxtb	r1, r1
 801636c:	f3bf 8f5b 	dmb	ish
 8016370:	2900      	cmp	r1, #0
 8016372:	d1f4      	bne.n	801635e <__atomic_store_8+0x3a>
 8016374:	e9c0 2300 	strd	r2, r3, [r0]
 8016378:	f3bf 8f5b 	dmb	ish
 801637c:	f804 100e 	strb.w	r1, [r4, lr]
 8016380:	bd70      	pop	{r4, r5, r6, pc}
 8016382:	bf00      	nop
 8016384:	27d4eb2d 	.word	0x27d4eb2d
 8016388:	2000f240 	.word	0x2000f240
 801638c:	b21642c9 	.word	0xb21642c9

08016390 <__atomic_exchange_8>:
 8016390:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8016394:	4917      	ldr	r1, [pc, #92]	@ (80163f4 <__atomic_exchange_8+0x64>)
 8016396:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 801639a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801639e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 80163a2:	fb01 fc0c 	mul.w	ip, r1, ip
 80163a6:	4914      	ldr	r1, [pc, #80]	@ (80163f8 <__atomic_exchange_8+0x68>)
 80163a8:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 80163ac:	b570      	push	{r4, r5, r6, lr}
 80163ae:	4686      	mov	lr, r0
 80163b0:	fba1 010c 	umull	r0, r1, r1, ip
 80163b4:	4d11      	ldr	r5, [pc, #68]	@ (80163fc <__atomic_exchange_8+0x6c>)
 80163b6:	f04f 0001 	mov.w	r0, #1
 80163ba:	0909      	lsrs	r1, r1, #4
 80163bc:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 80163c0:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 80163c4:	ebac 0c01 	sub.w	ip, ip, r1
 80163c8:	eb05 010c 	add.w	r1, r5, ip
 80163cc:	e8d1 4f4f 	ldrexb	r4, [r1]
 80163d0:	e8c1 0f46 	strexb	r6, r0, [r1]
 80163d4:	2e00      	cmp	r6, #0
 80163d6:	d1f9      	bne.n	80163cc <__atomic_exchange_8+0x3c>
 80163d8:	b2e4      	uxtb	r4, r4
 80163da:	f3bf 8f5b 	dmb	ish
 80163de:	2c00      	cmp	r4, #0
 80163e0:	d1f4      	bne.n	80163cc <__atomic_exchange_8+0x3c>
 80163e2:	e9de 0100 	ldrd	r0, r1, [lr]
 80163e6:	e9ce 2300 	strd	r2, r3, [lr]
 80163ea:	f3bf 8f5b 	dmb	ish
 80163ee:	f805 400c 	strb.w	r4, [r5, ip]
 80163f2:	bd70      	pop	{r4, r5, r6, pc}
 80163f4:	27d4eb2d 	.word	0x27d4eb2d
 80163f8:	b21642c9 	.word	0xb21642c9
 80163fc:	2000f240 	.word	0x2000f240

08016400 <rcutils_get_env>:
 8016400:	b168      	cbz	r0, 801641e <rcutils_get_env+0x1e>
 8016402:	b510      	push	{r4, lr}
 8016404:	460c      	mov	r4, r1
 8016406:	b129      	cbz	r1, 8016414 <rcutils_get_env+0x14>
 8016408:	f004 fc36 	bl	801ac78 <getenv>
 801640c:	b120      	cbz	r0, 8016418 <rcutils_get_env+0x18>
 801640e:	6020      	str	r0, [r4, #0]
 8016410:	2000      	movs	r0, #0
 8016412:	bd10      	pop	{r4, pc}
 8016414:	4803      	ldr	r0, [pc, #12]	@ (8016424 <rcutils_get_env+0x24>)
 8016416:	bd10      	pop	{r4, pc}
 8016418:	4b03      	ldr	r3, [pc, #12]	@ (8016428 <rcutils_get_env+0x28>)
 801641a:	6023      	str	r3, [r4, #0]
 801641c:	bd10      	pop	{r4, pc}
 801641e:	4803      	ldr	r0, [pc, #12]	@ (801642c <rcutils_get_env+0x2c>)
 8016420:	4770      	bx	lr
 8016422:	bf00      	nop
 8016424:	0801cc54 	.word	0x0801cc54
 8016428:	0801d008 	.word	0x0801d008
 801642c:	0801cc38 	.word	0x0801cc38

08016430 <rcutils_format_string_limit>:
 8016430:	b40f      	push	{r0, r1, r2, r3}
 8016432:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016434:	b083      	sub	sp, #12
 8016436:	ac08      	add	r4, sp, #32
 8016438:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801643a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801643e:	b326      	cbz	r6, 801648a <rcutils_format_string_limit+0x5a>
 8016440:	a808      	add	r0, sp, #32
 8016442:	f7f9 fb6f 	bl	800fb24 <rcutils_allocator_is_valid>
 8016446:	b300      	cbz	r0, 801648a <rcutils_format_string_limit+0x5a>
 8016448:	2100      	movs	r1, #0
 801644a:	ab0f      	add	r3, sp, #60	@ 0x3c
 801644c:	4632      	mov	r2, r6
 801644e:	4608      	mov	r0, r1
 8016450:	e9cd 3300 	strd	r3, r3, [sp]
 8016454:	f000 f906 	bl	8016664 <rcutils_vsnprintf>
 8016458:	1c43      	adds	r3, r0, #1
 801645a:	4605      	mov	r5, r0
 801645c:	d015      	beq.n	801648a <rcutils_format_string_limit+0x5a>
 801645e:	1c47      	adds	r7, r0, #1
 8016460:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016462:	429f      	cmp	r7, r3
 8016464:	d901      	bls.n	801646a <rcutils_format_string_limit+0x3a>
 8016466:	1e5d      	subs	r5, r3, #1
 8016468:	461f      	mov	r7, r3
 801646a:	9b08      	ldr	r3, [sp, #32]
 801646c:	4638      	mov	r0, r7
 801646e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016470:	4798      	blx	r3
 8016472:	4604      	mov	r4, r0
 8016474:	b148      	cbz	r0, 801648a <rcutils_format_string_limit+0x5a>
 8016476:	4632      	mov	r2, r6
 8016478:	4639      	mov	r1, r7
 801647a:	9b01      	ldr	r3, [sp, #4]
 801647c:	f000 f8f2 	bl	8016664 <rcutils_vsnprintf>
 8016480:	2800      	cmp	r0, #0
 8016482:	db09      	blt.n	8016498 <rcutils_format_string_limit+0x68>
 8016484:	2300      	movs	r3, #0
 8016486:	5563      	strb	r3, [r4, r5]
 8016488:	e000      	b.n	801648c <rcutils_format_string_limit+0x5c>
 801648a:	2400      	movs	r4, #0
 801648c:	4620      	mov	r0, r4
 801648e:	b003      	add	sp, #12
 8016490:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016494:	b004      	add	sp, #16
 8016496:	4770      	bx	lr
 8016498:	4620      	mov	r0, r4
 801649a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801649c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801649e:	2400      	movs	r4, #0
 80164a0:	4798      	blx	r3
 80164a2:	e7f3      	b.n	801648c <rcutils_format_string_limit+0x5c>

080164a4 <rcutils_repl_str>:
 80164a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164a8:	ed2d 8b02 	vpush	{d8}
 80164ac:	b087      	sub	sp, #28
 80164ae:	2600      	movs	r6, #0
 80164b0:	4680      	mov	r8, r0
 80164b2:	468a      	mov	sl, r1
 80164b4:	9000      	str	r0, [sp, #0]
 80164b6:	4608      	mov	r0, r1
 80164b8:	ee08 2a10 	vmov	s16, r2
 80164bc:	4699      	mov	r9, r3
 80164be:	2510      	movs	r5, #16
 80164c0:	f7e9 fec8 	bl	8000254 <strlen>
 80164c4:	4637      	mov	r7, r6
 80164c6:	46b3      	mov	fp, r6
 80164c8:	9001      	str	r0, [sp, #4]
 80164ca:	e01e      	b.n	801650a <rcutils_repl_str+0x66>
 80164cc:	f10b 0b01 	add.w	fp, fp, #1
 80164d0:	9b01      	ldr	r3, [sp, #4]
 80164d2:	455e      	cmp	r6, fp
 80164d4:	eb04 0803 	add.w	r8, r4, r3
 80164d8:	d211      	bcs.n	80164fe <rcutils_repl_str+0x5a>
 80164da:	442e      	add	r6, r5
 80164dc:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80164e0:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80164e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80164e8:	00b1      	lsls	r1, r6, #2
 80164ea:	4798      	blx	r3
 80164ec:	2800      	cmp	r0, #0
 80164ee:	f000 8088 	beq.w	8016602 <rcutils_repl_str+0x15e>
 80164f2:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 80164f6:	4607      	mov	r7, r0
 80164f8:	bf28      	it	cs
 80164fa:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 80164fe:	9a00      	ldr	r2, [sp, #0]
 8016500:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8016504:	1aa4      	subs	r4, r4, r2
 8016506:	f843 4c04 	str.w	r4, [r3, #-4]
 801650a:	4651      	mov	r1, sl
 801650c:	4640      	mov	r0, r8
 801650e:	f005 f88a 	bl	801b626 <strstr>
 8016512:	4604      	mov	r4, r0
 8016514:	4638      	mov	r0, r7
 8016516:	2c00      	cmp	r4, #0
 8016518:	d1d8      	bne.n	80164cc <rcutils_repl_str+0x28>
 801651a:	4640      	mov	r0, r8
 801651c:	f7e9 fe9a 	bl	8000254 <strlen>
 8016520:	9b00      	ldr	r3, [sp, #0]
 8016522:	eba8 0803 	sub.w	r8, r8, r3
 8016526:	eb08 0400 	add.w	r4, r8, r0
 801652a:	9402      	str	r4, [sp, #8]
 801652c:	f1bb 0f00 	cmp.w	fp, #0
 8016530:	d045      	beq.n	80165be <rcutils_repl_str+0x11a>
 8016532:	ee18 0a10 	vmov	r0, s16
 8016536:	f7e9 fe8d 	bl	8000254 <strlen>
 801653a:	9a01      	ldr	r2, [sp, #4]
 801653c:	4606      	mov	r6, r0
 801653e:	f8d9 3000 	ldr.w	r3, [r9]
 8016542:	1a82      	subs	r2, r0, r2
 8016544:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016548:	fb0b 4202 	mla	r2, fp, r2, r4
 801654c:	1c50      	adds	r0, r2, #1
 801654e:	9205      	str	r2, [sp, #20]
 8016550:	4798      	blx	r3
 8016552:	4682      	mov	sl, r0
 8016554:	2800      	cmp	r0, #0
 8016556:	d054      	beq.n	8016602 <rcutils_repl_str+0x15e>
 8016558:	683a      	ldr	r2, [r7, #0]
 801655a:	463d      	mov	r5, r7
 801655c:	9900      	ldr	r1, [sp, #0]
 801655e:	2401      	movs	r4, #1
 8016560:	f005 f903 	bl	801b76a <memcpy>
 8016564:	683b      	ldr	r3, [r7, #0]
 8016566:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 801656a:	eb0a 0803 	add.w	r8, sl, r3
 801656e:	ee18 7a10 	vmov	r7, s16
 8016572:	f8dd a000 	ldr.w	sl, [sp]
 8016576:	f8cd 9000 	str.w	r9, [sp]
 801657a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801657e:	4632      	mov	r2, r6
 8016580:	4639      	mov	r1, r7
 8016582:	4640      	mov	r0, r8
 8016584:	44b0      	add	r8, r6
 8016586:	f005 f8f0 	bl	801b76a <memcpy>
 801658a:	f855 2b04 	ldr.w	r2, [r5], #4
 801658e:	45a3      	cmp	fp, r4
 8016590:	444a      	add	r2, r9
 8016592:	eb0a 0102 	add.w	r1, sl, r2
 8016596:	d02a      	beq.n	80165ee <rcutils_repl_str+0x14a>
 8016598:	6828      	ldr	r0, [r5, #0]
 801659a:	1a82      	subs	r2, r0, r2
 801659c:	4640      	mov	r0, r8
 801659e:	4490      	add	r8, r2
 80165a0:	f005 f8e3 	bl	801b76a <memcpy>
 80165a4:	1c62      	adds	r2, r4, #1
 80165a6:	45a3      	cmp	fp, r4
 80165a8:	4614      	mov	r4, r2
 80165aa:	d8e8      	bhi.n	801657e <rcutils_repl_str+0xda>
 80165ac:	f8dd 9000 	ldr.w	r9, [sp]
 80165b0:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 80165b4:	2300      	movs	r3, #0
 80165b6:	9a05      	ldr	r2, [sp, #20]
 80165b8:	f80a 3002 	strb.w	r3, [sl, r2]
 80165bc:	e00b      	b.n	80165d6 <rcutils_repl_str+0x132>
 80165be:	4620      	mov	r0, r4
 80165c0:	f8d9 3000 	ldr.w	r3, [r9]
 80165c4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80165c8:	3001      	adds	r0, #1
 80165ca:	4798      	blx	r3
 80165cc:	4682      	mov	sl, r0
 80165ce:	b110      	cbz	r0, 80165d6 <rcutils_repl_str+0x132>
 80165d0:	9900      	ldr	r1, [sp, #0]
 80165d2:	f005 f8c2 	bl	801b75a <strcpy>
 80165d6:	4638      	mov	r0, r7
 80165d8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80165dc:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80165e0:	4798      	blx	r3
 80165e2:	4650      	mov	r0, sl
 80165e4:	b007      	add	sp, #28
 80165e6:	ecbd 8b02 	vpop	{d8}
 80165ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165ee:	9b02      	ldr	r3, [sp, #8]
 80165f0:	4640      	mov	r0, r8
 80165f2:	f8dd 9000 	ldr.w	r9, [sp]
 80165f6:	1a9a      	subs	r2, r3, r2
 80165f8:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 80165fc:	f005 f8b5 	bl	801b76a <memcpy>
 8016600:	e7d8      	b.n	80165b4 <rcutils_repl_str+0x110>
 8016602:	f04f 0a00 	mov.w	sl, #0
 8016606:	e7e6      	b.n	80165d6 <rcutils_repl_str+0x132>

08016608 <rcutils_snprintf>:
 8016608:	b40c      	push	{r2, r3}
 801660a:	b530      	push	{r4, r5, lr}
 801660c:	b083      	sub	sp, #12
 801660e:	ab06      	add	r3, sp, #24
 8016610:	f853 2b04 	ldr.w	r2, [r3], #4
 8016614:	9301      	str	r3, [sp, #4]
 8016616:	b1e2      	cbz	r2, 8016652 <rcutils_snprintf+0x4a>
 8016618:	fab0 f480 	clz	r4, r0
 801661c:	fab1 f581 	clz	r5, r1
 8016620:	ea50 0c01 	orrs.w	ip, r0, r1
 8016624:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8016628:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801662c:	d008      	beq.n	8016640 <rcutils_snprintf+0x38>
 801662e:	b984      	cbnz	r4, 8016652 <rcutils_snprintf+0x4a>
 8016630:	b97d      	cbnz	r5, 8016652 <rcutils_snprintf+0x4a>
 8016632:	f004 ff05 	bl	801b440 <vsniprintf>
 8016636:	b003      	add	sp, #12
 8016638:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801663c:	b002      	add	sp, #8
 801663e:	4770      	bx	lr
 8016640:	4661      	mov	r1, ip
 8016642:	4660      	mov	r0, ip
 8016644:	f004 fefc 	bl	801b440 <vsniprintf>
 8016648:	b003      	add	sp, #12
 801664a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801664e:	b002      	add	sp, #8
 8016650:	4770      	bx	lr
 8016652:	f005 f855 	bl	801b700 <__errno>
 8016656:	2216      	movs	r2, #22
 8016658:	4603      	mov	r3, r0
 801665a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801665e:	601a      	str	r2, [r3, #0]
 8016660:	e7e9      	b.n	8016636 <rcutils_snprintf+0x2e>
 8016662:	bf00      	nop

08016664 <rcutils_vsnprintf>:
 8016664:	b570      	push	{r4, r5, r6, lr}
 8016666:	b1b2      	cbz	r2, 8016696 <rcutils_vsnprintf+0x32>
 8016668:	fab0 f480 	clz	r4, r0
 801666c:	fab1 f581 	clz	r5, r1
 8016670:	ea50 0c01 	orrs.w	ip, r0, r1
 8016674:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8016678:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801667c:	d005      	beq.n	801668a <rcutils_vsnprintf+0x26>
 801667e:	b954      	cbnz	r4, 8016696 <rcutils_vsnprintf+0x32>
 8016680:	b94d      	cbnz	r5, 8016696 <rcutils_vsnprintf+0x32>
 8016682:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016686:	f004 bedb 	b.w	801b440 <vsniprintf>
 801668a:	4661      	mov	r1, ip
 801668c:	4660      	mov	r0, ip
 801668e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016692:	f004 bed5 	b.w	801b440 <vsniprintf>
 8016696:	f005 f833 	bl	801b700 <__errno>
 801669a:	2316      	movs	r3, #22
 801669c:	6003      	str	r3, [r0, #0]
 801669e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80166a2:	bd70      	pop	{r4, r5, r6, pc}

080166a4 <rcutils_strdup>:
 80166a4:	b084      	sub	sp, #16
 80166a6:	b570      	push	{r4, r5, r6, lr}
 80166a8:	b082      	sub	sp, #8
 80166aa:	4605      	mov	r5, r0
 80166ac:	ac07      	add	r4, sp, #28
 80166ae:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80166b2:	b1b0      	cbz	r0, 80166e2 <rcutils_strdup+0x3e>
 80166b4:	f7e9 fdce 	bl	8000254 <strlen>
 80166b8:	1c42      	adds	r2, r0, #1
 80166ba:	9b07      	ldr	r3, [sp, #28]
 80166bc:	4606      	mov	r6, r0
 80166be:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80166c0:	4610      	mov	r0, r2
 80166c2:	9201      	str	r2, [sp, #4]
 80166c4:	4798      	blx	r3
 80166c6:	4604      	mov	r4, r0
 80166c8:	b128      	cbz	r0, 80166d6 <rcutils_strdup+0x32>
 80166ca:	9a01      	ldr	r2, [sp, #4]
 80166cc:	4629      	mov	r1, r5
 80166ce:	f005 f84c 	bl	801b76a <memcpy>
 80166d2:	2300      	movs	r3, #0
 80166d4:	55a3      	strb	r3, [r4, r6]
 80166d6:	4620      	mov	r0, r4
 80166d8:	b002      	add	sp, #8
 80166da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80166de:	b004      	add	sp, #16
 80166e0:	4770      	bx	lr
 80166e2:	4604      	mov	r4, r0
 80166e4:	e7f7      	b.n	80166d6 <rcutils_strdup+0x32>
 80166e6:	bf00      	nop

080166e8 <rcutils_strndup>:
 80166e8:	b082      	sub	sp, #8
 80166ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166ec:	ac06      	add	r4, sp, #24
 80166ee:	4605      	mov	r5, r0
 80166f0:	e884 000c 	stmia.w	r4, {r2, r3}
 80166f4:	b188      	cbz	r0, 801671a <rcutils_strndup+0x32>
 80166f6:	1c4f      	adds	r7, r1, #1
 80166f8:	460e      	mov	r6, r1
 80166fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80166fc:	4638      	mov	r0, r7
 80166fe:	4790      	blx	r2
 8016700:	4604      	mov	r4, r0
 8016702:	b128      	cbz	r0, 8016710 <rcutils_strndup+0x28>
 8016704:	463a      	mov	r2, r7
 8016706:	4629      	mov	r1, r5
 8016708:	f005 f82f 	bl	801b76a <memcpy>
 801670c:	2300      	movs	r3, #0
 801670e:	55a3      	strb	r3, [r4, r6]
 8016710:	4620      	mov	r0, r4
 8016712:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016716:	b002      	add	sp, #8
 8016718:	4770      	bx	lr
 801671a:	4604      	mov	r4, r0
 801671c:	e7f8      	b.n	8016710 <rcutils_strndup+0x28>
 801671e:	bf00      	nop

08016720 <rcutils_get_zero_initialized_string_map>:
 8016720:	2000      	movs	r0, #0
 8016722:	4b01      	ldr	r3, [pc, #4]	@ (8016728 <rcutils_get_zero_initialized_string_map+0x8>)
 8016724:	6018      	str	r0, [r3, #0]
 8016726:	4770      	bx	lr
 8016728:	2000f258 	.word	0x2000f258

0801672c <rcutils_string_map_reserve>:
 801672c:	2800      	cmp	r0, #0
 801672e:	d05e      	beq.n	80167ee <rcutils_string_map_reserve+0xc2>
 8016730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016734:	460c      	mov	r4, r1
 8016736:	6801      	ldr	r1, [r0, #0]
 8016738:	b082      	sub	sp, #8
 801673a:	4605      	mov	r5, r0
 801673c:	b129      	cbz	r1, 801674a <rcutils_string_map_reserve+0x1e>
 801673e:	68cb      	ldr	r3, [r1, #12]
 8016740:	42a3      	cmp	r3, r4
 8016742:	d906      	bls.n	8016752 <rcutils_string_map_reserve+0x26>
 8016744:	461c      	mov	r4, r3
 8016746:	2900      	cmp	r1, #0
 8016748:	d1f9      	bne.n	801673e <rcutils_string_map_reserve+0x12>
 801674a:	201f      	movs	r0, #31
 801674c:	b002      	add	sp, #8
 801674e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016752:	688b      	ldr	r3, [r1, #8]
 8016754:	42a3      	cmp	r3, r4
 8016756:	d046      	beq.n	80167e6 <rcutils_string_map_reserve+0xba>
 8016758:	6a0e      	ldr	r6, [r1, #32]
 801675a:	2c00      	cmp	r4, #0
 801675c:	d033      	beq.n	80167c6 <rcutils_string_map_reserve+0x9a>
 801675e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8016762:	d242      	bcs.n	80167ea <rcutils_string_map_reserve+0xbe>
 8016764:	00a7      	lsls	r7, r4, #2
 8016766:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801676a:	6808      	ldr	r0, [r1, #0]
 801676c:	4632      	mov	r2, r6
 801676e:	4639      	mov	r1, r7
 8016770:	47c0      	blx	r8
 8016772:	2800      	cmp	r0, #0
 8016774:	d039      	beq.n	80167ea <rcutils_string_map_reserve+0xbe>
 8016776:	682b      	ldr	r3, [r5, #0]
 8016778:	4632      	mov	r2, r6
 801677a:	4639      	mov	r1, r7
 801677c:	6018      	str	r0, [r3, #0]
 801677e:	6858      	ldr	r0, [r3, #4]
 8016780:	47c0      	blx	r8
 8016782:	2800      	cmp	r0, #0
 8016784:	d031      	beq.n	80167ea <rcutils_string_map_reserve+0xbe>
 8016786:	682d      	ldr	r5, [r5, #0]
 8016788:	68ab      	ldr	r3, [r5, #8]
 801678a:	6068      	str	r0, [r5, #4]
 801678c:	42a3      	cmp	r3, r4
 801678e:	d225      	bcs.n	80167dc <rcutils_string_map_reserve+0xb0>
 8016790:	682a      	ldr	r2, [r5, #0]
 8016792:	eb00 0c07 	add.w	ip, r0, r7
 8016796:	0099      	lsls	r1, r3, #2
 8016798:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801679c:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80167a0:	45e6      	cmp	lr, ip
 80167a2:	d203      	bcs.n	80167ac <rcutils_string_map_reserve+0x80>
 80167a4:	eb02 0c07 	add.w	ip, r2, r7
 80167a8:	4566      	cmp	r6, ip
 80167aa:	d322      	bcc.n	80167f2 <rcutils_string_map_reserve+0xc6>
 80167ac:	1ae3      	subs	r3, r4, r3
 80167ae:	4670      	mov	r0, lr
 80167b0:	2100      	movs	r1, #0
 80167b2:	009a      	lsls	r2, r3, #2
 80167b4:	9201      	str	r2, [sp, #4]
 80167b6:	f004 ff0f 	bl	801b5d8 <memset>
 80167ba:	9a01      	ldr	r2, [sp, #4]
 80167bc:	2100      	movs	r1, #0
 80167be:	4630      	mov	r0, r6
 80167c0:	f004 ff0a 	bl	801b5d8 <memset>
 80167c4:	e00a      	b.n	80167dc <rcutils_string_map_reserve+0xb0>
 80167c6:	694f      	ldr	r7, [r1, #20]
 80167c8:	6808      	ldr	r0, [r1, #0]
 80167ca:	4631      	mov	r1, r6
 80167cc:	47b8      	blx	r7
 80167ce:	682b      	ldr	r3, [r5, #0]
 80167d0:	4631      	mov	r1, r6
 80167d2:	6858      	ldr	r0, [r3, #4]
 80167d4:	601c      	str	r4, [r3, #0]
 80167d6:	47b8      	blx	r7
 80167d8:	682d      	ldr	r5, [r5, #0]
 80167da:	606c      	str	r4, [r5, #4]
 80167dc:	2000      	movs	r0, #0
 80167de:	60ac      	str	r4, [r5, #8]
 80167e0:	b002      	add	sp, #8
 80167e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167e6:	2000      	movs	r0, #0
 80167e8:	e7b0      	b.n	801674c <rcutils_string_map_reserve+0x20>
 80167ea:	200a      	movs	r0, #10
 80167ec:	e7ae      	b.n	801674c <rcutils_string_map_reserve+0x20>
 80167ee:	200b      	movs	r0, #11
 80167f0:	4770      	bx	lr
 80167f2:	1f0b      	subs	r3, r1, #4
 80167f4:	4418      	add	r0, r3
 80167f6:	4413      	add	r3, r2
 80167f8:	3a04      	subs	r2, #4
 80167fa:	4417      	add	r7, r2
 80167fc:	2200      	movs	r2, #0
 80167fe:	f843 2f04 	str.w	r2, [r3, #4]!
 8016802:	42bb      	cmp	r3, r7
 8016804:	f840 2f04 	str.w	r2, [r0, #4]!
 8016808:	d1f9      	bne.n	80167fe <rcutils_string_map_reserve+0xd2>
 801680a:	e7e7      	b.n	80167dc <rcutils_string_map_reserve+0xb0>

0801680c <rcutils_string_map_init>:
 801680c:	b082      	sub	sp, #8
 801680e:	b570      	push	{r4, r5, r6, lr}
 8016810:	ac04      	add	r4, sp, #16
 8016812:	e884 000c 	stmia.w	r4, {r2, r3}
 8016816:	b380      	cbz	r0, 801687a <rcutils_string_map_init+0x6e>
 8016818:	6806      	ldr	r6, [r0, #0]
 801681a:	4604      	mov	r4, r0
 801681c:	b12e      	cbz	r6, 801682a <rcutils_string_map_init+0x1e>
 801681e:	251e      	movs	r5, #30
 8016820:	4628      	mov	r0, r5
 8016822:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016826:	b002      	add	sp, #8
 8016828:	4770      	bx	lr
 801682a:	a804      	add	r0, sp, #16
 801682c:	460d      	mov	r5, r1
 801682e:	f7f9 f979 	bl	800fb24 <rcutils_allocator_is_valid>
 8016832:	b310      	cbz	r0, 801687a <rcutils_string_map_init+0x6e>
 8016834:	9b04      	ldr	r3, [sp, #16]
 8016836:	2024      	movs	r0, #36	@ 0x24
 8016838:	9908      	ldr	r1, [sp, #32]
 801683a:	4798      	blx	r3
 801683c:	6020      	str	r0, [r4, #0]
 801683e:	b310      	cbz	r0, 8016886 <rcutils_string_map_init+0x7a>
 8016840:	f10d 0e10 	add.w	lr, sp, #16
 8016844:	f100 0c10 	add.w	ip, r0, #16
 8016848:	e9c0 6600 	strd	r6, r6, [r0]
 801684c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8016850:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016854:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016858:	f8de 3000 	ldr.w	r3, [lr]
 801685c:	4629      	mov	r1, r5
 801685e:	4620      	mov	r0, r4
 8016860:	f8cc 3000 	str.w	r3, [ip]
 8016864:	f7ff ff62 	bl	801672c <rcutils_string_map_reserve>
 8016868:	4605      	mov	r5, r0
 801686a:	2800      	cmp	r0, #0
 801686c:	d0d8      	beq.n	8016820 <rcutils_string_map_init+0x14>
 801686e:	9b05      	ldr	r3, [sp, #20]
 8016870:	9908      	ldr	r1, [sp, #32]
 8016872:	6820      	ldr	r0, [r4, #0]
 8016874:	4798      	blx	r3
 8016876:	6026      	str	r6, [r4, #0]
 8016878:	e7d2      	b.n	8016820 <rcutils_string_map_init+0x14>
 801687a:	250b      	movs	r5, #11
 801687c:	4628      	mov	r0, r5
 801687e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016882:	b002      	add	sp, #8
 8016884:	4770      	bx	lr
 8016886:	250a      	movs	r5, #10
 8016888:	e7ca      	b.n	8016820 <rcutils_string_map_init+0x14>
 801688a:	bf00      	nop

0801688c <rcutils_string_map_fini>:
 801688c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016890:	b082      	sub	sp, #8
 8016892:	2800      	cmp	r0, #0
 8016894:	d03a      	beq.n	801690c <rcutils_string_map_fini+0x80>
 8016896:	6804      	ldr	r4, [r0, #0]
 8016898:	4606      	mov	r6, r0
 801689a:	2c00      	cmp	r4, #0
 801689c:	d032      	beq.n	8016904 <rcutils_string_map_fini+0x78>
 801689e:	68a3      	ldr	r3, [r4, #8]
 80168a0:	b32b      	cbz	r3, 80168ee <rcutils_string_map_fini+0x62>
 80168a2:	2500      	movs	r5, #0
 80168a4:	6822      	ldr	r2, [r4, #0]
 80168a6:	462f      	mov	r7, r5
 80168a8:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80168ac:	b1e0      	cbz	r0, 80168e8 <rcutils_string_map_fini+0x5c>
 80168ae:	6a21      	ldr	r1, [r4, #32]
 80168b0:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80168b4:	9101      	str	r1, [sp, #4]
 80168b6:	47c0      	blx	r8
 80168b8:	9901      	ldr	r1, [sp, #4]
 80168ba:	e9d4 3200 	ldrd	r3, r2, [r4]
 80168be:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 80168c2:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80168c6:	47c0      	blx	r8
 80168c8:	68e3      	ldr	r3, [r4, #12]
 80168ca:	6862      	ldr	r2, [r4, #4]
 80168cc:	3b01      	subs	r3, #1
 80168ce:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80168d2:	3501      	adds	r5, #1
 80168d4:	60e3      	str	r3, [r4, #12]
 80168d6:	6834      	ldr	r4, [r6, #0]
 80168d8:	68a3      	ldr	r3, [r4, #8]
 80168da:	429d      	cmp	r5, r3
 80168dc:	d207      	bcs.n	80168ee <rcutils_string_map_fini+0x62>
 80168de:	6822      	ldr	r2, [r4, #0]
 80168e0:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80168e4:	2800      	cmp	r0, #0
 80168e6:	d1e2      	bne.n	80168ae <rcutils_string_map_fini+0x22>
 80168e8:	3501      	adds	r5, #1
 80168ea:	429d      	cmp	r5, r3
 80168ec:	d3dc      	bcc.n	80168a8 <rcutils_string_map_fini+0x1c>
 80168ee:	2100      	movs	r1, #0
 80168f0:	4630      	mov	r0, r6
 80168f2:	f7ff ff1b 	bl	801672c <rcutils_string_map_reserve>
 80168f6:	4604      	mov	r4, r0
 80168f8:	b920      	cbnz	r0, 8016904 <rcutils_string_map_fini+0x78>
 80168fa:	6830      	ldr	r0, [r6, #0]
 80168fc:	6943      	ldr	r3, [r0, #20]
 80168fe:	6a01      	ldr	r1, [r0, #32]
 8016900:	4798      	blx	r3
 8016902:	6034      	str	r4, [r6, #0]
 8016904:	4620      	mov	r0, r4
 8016906:	b002      	add	sp, #8
 8016908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801690c:	240b      	movs	r4, #11
 801690e:	4620      	mov	r0, r4
 8016910:	b002      	add	sp, #8
 8016912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016916:	bf00      	nop

08016918 <rcutils_string_map_getn>:
 8016918:	b378      	cbz	r0, 801697a <rcutils_string_map_getn+0x62>
 801691a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801691e:	f8d0 b000 	ldr.w	fp, [r0]
 8016922:	f1bb 0f00 	cmp.w	fp, #0
 8016926:	d01f      	beq.n	8016968 <rcutils_string_map_getn+0x50>
 8016928:	fab1 f481 	clz	r4, r1
 801692c:	4688      	mov	r8, r1
 801692e:	0964      	lsrs	r4, r4, #5
 8016930:	b1d1      	cbz	r1, 8016968 <rcutils_string_map_getn+0x50>
 8016932:	f8db 7008 	ldr.w	r7, [fp, #8]
 8016936:	f8db 6000 	ldr.w	r6, [fp]
 801693a:	b1af      	cbz	r7, 8016968 <rcutils_string_map_getn+0x50>
 801693c:	4691      	mov	r9, r2
 801693e:	3e04      	subs	r6, #4
 8016940:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8016944:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8016948:	3401      	adds	r4, #1
 801694a:	4628      	mov	r0, r5
 801694c:	b155      	cbz	r5, 8016964 <rcutils_string_map_getn+0x4c>
 801694e:	f7e9 fc81 	bl	8000254 <strlen>
 8016952:	4602      	mov	r2, r0
 8016954:	4629      	mov	r1, r5
 8016956:	4640      	mov	r0, r8
 8016958:	454a      	cmp	r2, r9
 801695a:	bf38      	it	cc
 801695c:	464a      	movcc	r2, r9
 801695e:	f004 fe50 	bl	801b602 <strncmp>
 8016962:	b120      	cbz	r0, 801696e <rcutils_string_map_getn+0x56>
 8016964:	42a7      	cmp	r7, r4
 8016966:	d1eb      	bne.n	8016940 <rcutils_string_map_getn+0x28>
 8016968:	2000      	movs	r0, #0
 801696a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801696e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8016972:	f853 000a 	ldr.w	r0, [r3, sl]
 8016976:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801697a:	4770      	bx	lr
 801697c:	0000      	movs	r0, r0
	...

08016980 <rmw_get_zero_initialized_context>:
 8016980:	b510      	push	{r4, lr}
 8016982:	4604      	mov	r4, r0
 8016984:	3010      	adds	r0, #16
 8016986:	f000 f80f 	bl	80169a8 <rmw_get_zero_initialized_init_options>
 801698a:	2300      	movs	r3, #0
 801698c:	4620      	mov	r0, r4
 801698e:	60a3      	str	r3, [r4, #8]
 8016990:	64a3      	str	r3, [r4, #72]	@ 0x48
 8016992:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8016994:	ed9f 7b02 	vldr	d7, [pc, #8]	@ 80169a0 <rmw_get_zero_initialized_context+0x20>
 8016998:	ed84 7b00 	vstr	d7, [r4]
 801699c:	bd10      	pop	{r4, pc}
 801699e:	bf00      	nop
	...

080169a8 <rmw_get_zero_initialized_init_options>:
 80169a8:	b510      	push	{r4, lr}
 80169aa:	4604      	mov	r4, r0
 80169ac:	2238      	movs	r2, #56	@ 0x38
 80169ae:	2100      	movs	r1, #0
 80169b0:	f004 fe12 	bl	801b5d8 <memset>
 80169b4:	f104 0010 	add.w	r0, r4, #16
 80169b8:	f000 f80a 	bl	80169d0 <rmw_get_default_security_options>
 80169bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80169c0:	4620      	mov	r0, r4
 80169c2:	60e3      	str	r3, [r4, #12]
 80169c4:	bd10      	pop	{r4, pc}
 80169c6:	bf00      	nop

080169c8 <rmw_get_default_publisher_options>:
 80169c8:	2200      	movs	r2, #0
 80169ca:	6002      	str	r2, [r0, #0]
 80169cc:	7102      	strb	r2, [r0, #4]
 80169ce:	4770      	bx	lr

080169d0 <rmw_get_default_security_options>:
 80169d0:	2200      	movs	r2, #0
 80169d2:	7002      	strb	r2, [r0, #0]
 80169d4:	6042      	str	r2, [r0, #4]
 80169d6:	4770      	bx	lr

080169d8 <rmw_subscription_content_filter_options_fini>:
 80169d8:	b1b0      	cbz	r0, 8016a08 <rmw_subscription_content_filter_options_fini+0x30>
 80169da:	b538      	push	{r3, r4, r5, lr}
 80169dc:	4604      	mov	r4, r0
 80169de:	4608      	mov	r0, r1
 80169e0:	460d      	mov	r5, r1
 80169e2:	f7f9 f89f 	bl	800fb24 <rcutils_allocator_is_valid>
 80169e6:	b168      	cbz	r0, 8016a04 <rmw_subscription_content_filter_options_fini+0x2c>
 80169e8:	6820      	ldr	r0, [r4, #0]
 80169ea:	b120      	cbz	r0, 80169f6 <rmw_subscription_content_filter_options_fini+0x1e>
 80169ec:	686b      	ldr	r3, [r5, #4]
 80169ee:	6929      	ldr	r1, [r5, #16]
 80169f0:	4798      	blx	r3
 80169f2:	2300      	movs	r3, #0
 80169f4:	6023      	str	r3, [r4, #0]
 80169f6:	1d20      	adds	r0, r4, #4
 80169f8:	f003 ff04 	bl	801a804 <rcutils_string_array_fini>
 80169fc:	3800      	subs	r0, #0
 80169fe:	bf18      	it	ne
 8016a00:	2001      	movne	r0, #1
 8016a02:	bd38      	pop	{r3, r4, r5, pc}
 8016a04:	200b      	movs	r0, #11
 8016a06:	bd38      	pop	{r3, r4, r5, pc}
 8016a08:	200b      	movs	r0, #11
 8016a0a:	4770      	bx	lr

08016a0c <rmw_get_default_subscription_options>:
 8016a0c:	2200      	movs	r2, #0
 8016a0e:	e9c0 2200 	strd	r2, r2, [r0]
 8016a12:	6082      	str	r2, [r0, #8]
 8016a14:	4770      	bx	lr
 8016a16:	bf00      	nop

08016a18 <rmw_time_equal>:
 8016a18:	b4f0      	push	{r4, r5, r6, r7}
 8016a1a:	b084      	sub	sp, #16
 8016a1c:	ac04      	add	r4, sp, #16
 8016a1e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8016a22:	4603      	mov	r3, r0
 8016a24:	4925      	ldr	r1, [pc, #148]	@ (8016abc <rmw_time_equal+0xa4>)
 8016a26:	9d01      	ldr	r5, [sp, #4]
 8016a28:	4610      	mov	r0, r2
 8016a2a:	4299      	cmp	r1, r3
 8016a2c:	f04f 0202 	mov.w	r2, #2
 8016a30:	9e03      	ldr	r6, [sp, #12]
 8016a32:	41aa      	sbcs	r2, r5
 8016a34:	d330      	bcc.n	8016a98 <rmw_time_equal+0x80>
 8016a36:	4c22      	ldr	r4, [pc, #136]	@ (8016ac0 <rmw_time_equal+0xa8>)
 8016a38:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016a3c:	fba3 3204 	umull	r3, r2, r3, r4
 8016a40:	fb04 2205 	mla	r2, r4, r5, r2
 8016a44:	43dd      	mvns	r5, r3
 8016a46:	1a8c      	subs	r4, r1, r2
 8016a48:	4285      	cmp	r5, r0
 8016a4a:	41b4      	sbcs	r4, r6
 8016a4c:	d332      	bcc.n	8016ab4 <rmw_time_equal+0x9c>
 8016a4e:	eb10 0c03 	adds.w	ip, r0, r3
 8016a52:	eb42 0106 	adc.w	r1, r2, r6
 8016a56:	4819      	ldr	r0, [pc, #100]	@ (8016abc <rmw_time_equal+0xa4>)
 8016a58:	2202      	movs	r2, #2
 8016a5a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8016a5c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8016a5e:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8016a62:	4298      	cmp	r0, r3
 8016a64:	41b2      	sbcs	r2, r6
 8016a66:	d31c      	bcc.n	8016aa2 <rmw_time_equal+0x8a>
 8016a68:	4c15      	ldr	r4, [pc, #84]	@ (8016ac0 <rmw_time_equal+0xa8>)
 8016a6a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8016a6e:	fba3 3204 	umull	r3, r2, r3, r4
 8016a72:	fb04 2206 	mla	r2, r4, r6, r2
 8016a76:	43de      	mvns	r6, r3
 8016a78:	1a84      	subs	r4, r0, r2
 8016a7a:	42ae      	cmp	r6, r5
 8016a7c:	41bc      	sbcs	r4, r7
 8016a7e:	d315      	bcc.n	8016aac <rmw_time_equal+0x94>
 8016a80:	195b      	adds	r3, r3, r5
 8016a82:	eb42 0207 	adc.w	r2, r2, r7
 8016a86:	428a      	cmp	r2, r1
 8016a88:	bf08      	it	eq
 8016a8a:	4563      	cmpeq	r3, ip
 8016a8c:	bf0c      	ite	eq
 8016a8e:	2001      	moveq	r0, #1
 8016a90:	2000      	movne	r0, #0
 8016a92:	b004      	add	sp, #16
 8016a94:	bcf0      	pop	{r4, r5, r6, r7}
 8016a96:	4770      	bx	lr
 8016a98:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8016a9c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016aa0:	e7d9      	b.n	8016a56 <rmw_time_equal+0x3e>
 8016aa2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016aa6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8016aaa:	e7ec      	b.n	8016a86 <rmw_time_equal+0x6e>
 8016aac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016ab0:	4602      	mov	r2, r0
 8016ab2:	e7e8      	b.n	8016a86 <rmw_time_equal+0x6e>
 8016ab4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8016ab8:	e7cd      	b.n	8016a56 <rmw_time_equal+0x3e>
 8016aba:	bf00      	nop
 8016abc:	25c17d04 	.word	0x25c17d04
 8016ac0:	3b9aca00 	.word	0x3b9aca00

08016ac4 <rmw_time_total_nsec>:
 8016ac4:	b470      	push	{r4, r5, r6}
 8016ac6:	b085      	sub	sp, #20
 8016ac8:	ac04      	add	r4, sp, #16
 8016aca:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8016ace:	4603      	mov	r3, r0
 8016ad0:	4913      	ldr	r1, [pc, #76]	@ (8016b20 <rmw_time_total_nsec+0x5c>)
 8016ad2:	9d01      	ldr	r5, [sp, #4]
 8016ad4:	4610      	mov	r0, r2
 8016ad6:	4299      	cmp	r1, r3
 8016ad8:	f04f 0202 	mov.w	r2, #2
 8016adc:	9e03      	ldr	r6, [sp, #12]
 8016ade:	41aa      	sbcs	r2, r5
 8016ae0:	d311      	bcc.n	8016b06 <rmw_time_total_nsec+0x42>
 8016ae2:	4c10      	ldr	r4, [pc, #64]	@ (8016b24 <rmw_time_total_nsec+0x60>)
 8016ae4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016ae8:	fba3 3204 	umull	r3, r2, r3, r4
 8016aec:	fb04 2205 	mla	r2, r4, r5, r2
 8016af0:	43dd      	mvns	r5, r3
 8016af2:	1a8c      	subs	r4, r1, r2
 8016af4:	4285      	cmp	r5, r0
 8016af6:	41b4      	sbcs	r4, r6
 8016af8:	d30c      	bcc.n	8016b14 <rmw_time_total_nsec+0x50>
 8016afa:	1818      	adds	r0, r3, r0
 8016afc:	eb42 0106 	adc.w	r1, r2, r6
 8016b00:	b005      	add	sp, #20
 8016b02:	bc70      	pop	{r4, r5, r6}
 8016b04:	4770      	bx	lr
 8016b06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016b0a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016b0e:	b005      	add	sp, #20
 8016b10:	bc70      	pop	{r4, r5, r6}
 8016b12:	4770      	bx	lr
 8016b14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016b18:	b005      	add	sp, #20
 8016b1a:	bc70      	pop	{r4, r5, r6}
 8016b1c:	4770      	bx	lr
 8016b1e:	bf00      	nop
 8016b20:	25c17d04 	.word	0x25c17d04
 8016b24:	3b9aca00 	.word	0x3b9aca00

08016b28 <rmw_get_zero_initialized_message_info>:
 8016b28:	b510      	push	{r4, lr}
 8016b2a:	4604      	mov	r4, r0
 8016b2c:	2240      	movs	r2, #64	@ 0x40
 8016b2e:	2100      	movs	r1, #0
 8016b30:	f004 fd52 	bl	801b5d8 <memset>
 8016b34:	4620      	mov	r0, r4
 8016b36:	bd10      	pop	{r4, pc}

08016b38 <rmw_validate_full_topic_name>:
 8016b38:	2800      	cmp	r0, #0
 8016b3a:	d05d      	beq.n	8016bf8 <rmw_validate_full_topic_name+0xc0>
 8016b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b40:	460d      	mov	r5, r1
 8016b42:	2900      	cmp	r1, #0
 8016b44:	d05a      	beq.n	8016bfc <rmw_validate_full_topic_name+0xc4>
 8016b46:	4604      	mov	r4, r0
 8016b48:	4616      	mov	r6, r2
 8016b4a:	f7e9 fb83 	bl	8000254 <strlen>
 8016b4e:	b150      	cbz	r0, 8016b66 <rmw_validate_full_topic_name+0x2e>
 8016b50:	7823      	ldrb	r3, [r4, #0]
 8016b52:	2b2f      	cmp	r3, #47	@ 0x2f
 8016b54:	d00e      	beq.n	8016b74 <rmw_validate_full_topic_name+0x3c>
 8016b56:	2302      	movs	r3, #2
 8016b58:	602b      	str	r3, [r5, #0]
 8016b5a:	b146      	cbz	r6, 8016b6e <rmw_validate_full_topic_name+0x36>
 8016b5c:	2300      	movs	r3, #0
 8016b5e:	4618      	mov	r0, r3
 8016b60:	6033      	str	r3, [r6, #0]
 8016b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b66:	2301      	movs	r3, #1
 8016b68:	602b      	str	r3, [r5, #0]
 8016b6a:	2e00      	cmp	r6, #0
 8016b6c:	d1f6      	bne.n	8016b5c <rmw_validate_full_topic_name+0x24>
 8016b6e:	2000      	movs	r0, #0
 8016b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b74:	1e43      	subs	r3, r0, #1
 8016b76:	5ce2      	ldrb	r2, [r4, r3]
 8016b78:	2a2f      	cmp	r2, #47	@ 0x2f
 8016b7a:	d041      	beq.n	8016c00 <rmw_validate_full_topic_name+0xc8>
 8016b7c:	1e62      	subs	r2, r4, #1
 8016b7e:	f1c4 0e01 	rsb	lr, r4, #1
 8016b82:	eb02 0800 	add.w	r8, r2, r0
 8016b86:	eb0e 0702 	add.w	r7, lr, r2
 8016b8a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8016b8e:	f023 0120 	bic.w	r1, r3, #32
 8016b92:	f1a3 0c2f 	sub.w	ip, r3, #47	@ 0x2f
 8016b96:	3941      	subs	r1, #65	@ 0x41
 8016b98:	2919      	cmp	r1, #25
 8016b9a:	d90f      	bls.n	8016bbc <rmw_validate_full_topic_name+0x84>
 8016b9c:	f1bc 0f0a 	cmp.w	ip, #10
 8016ba0:	d90c      	bls.n	8016bbc <rmw_validate_full_topic_name+0x84>
 8016ba2:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
 8016ba6:	fab3 f383 	clz	r3, r3
 8016baa:	095b      	lsrs	r3, r3, #5
 8016bac:	b933      	cbnz	r3, 8016bbc <rmw_validate_full_topic_name+0x84>
 8016bae:	2204      	movs	r2, #4
 8016bb0:	602a      	str	r2, [r5, #0]
 8016bb2:	2e00      	cmp	r6, #0
 8016bb4:	d0db      	beq.n	8016b6e <rmw_validate_full_topic_name+0x36>
 8016bb6:	4618      	mov	r0, r3
 8016bb8:	6037      	str	r7, [r6, #0]
 8016bba:	e7d2      	b.n	8016b62 <rmw_validate_full_topic_name+0x2a>
 8016bbc:	4542      	cmp	r2, r8
 8016bbe:	d1e2      	bne.n	8016b86 <rmw_validate_full_topic_name+0x4e>
 8016bc0:	2301      	movs	r3, #1
 8016bc2:	4f1a      	ldr	r7, [pc, #104]	@ (8016c2c <rmw_validate_full_topic_name+0xf4>)
 8016bc4:	e004      	b.n	8016bd0 <rmw_validate_full_topic_name+0x98>
 8016bc6:	4298      	cmp	r0, r3
 8016bc8:	f104 0401 	add.w	r4, r4, #1
 8016bcc:	4613      	mov	r3, r2
 8016bce:	d91c      	bls.n	8016c0a <rmw_validate_full_topic_name+0xd2>
 8016bd0:	4298      	cmp	r0, r3
 8016bd2:	f103 0201 	add.w	r2, r3, #1
 8016bd6:	d0f6      	beq.n	8016bc6 <rmw_validate_full_topic_name+0x8e>
 8016bd8:	7821      	ldrb	r1, [r4, #0]
 8016bda:	292f      	cmp	r1, #47	@ 0x2f
 8016bdc:	d1f3      	bne.n	8016bc6 <rmw_validate_full_topic_name+0x8e>
 8016bde:	7861      	ldrb	r1, [r4, #1]
 8016be0:	292f      	cmp	r1, #47	@ 0x2f
 8016be2:	d01e      	beq.n	8016c22 <rmw_validate_full_topic_name+0xea>
 8016be4:	5dc9      	ldrb	r1, [r1, r7]
 8016be6:	0749      	lsls	r1, r1, #29
 8016be8:	d5ed      	bpl.n	8016bc6 <rmw_validate_full_topic_name+0x8e>
 8016bea:	2206      	movs	r2, #6
 8016bec:	602a      	str	r2, [r5, #0]
 8016bee:	2e00      	cmp	r6, #0
 8016bf0:	d0bd      	beq.n	8016b6e <rmw_validate_full_topic_name+0x36>
 8016bf2:	2000      	movs	r0, #0
 8016bf4:	6033      	str	r3, [r6, #0]
 8016bf6:	e7b4      	b.n	8016b62 <rmw_validate_full_topic_name+0x2a>
 8016bf8:	200b      	movs	r0, #11
 8016bfa:	4770      	bx	lr
 8016bfc:	200b      	movs	r0, #11
 8016bfe:	e7b0      	b.n	8016b62 <rmw_validate_full_topic_name+0x2a>
 8016c00:	2203      	movs	r2, #3
 8016c02:	602a      	str	r2, [r5, #0]
 8016c04:	2e00      	cmp	r6, #0
 8016c06:	d1f4      	bne.n	8016bf2 <rmw_validate_full_topic_name+0xba>
 8016c08:	e7b1      	b.n	8016b6e <rmw_validate_full_topic_name+0x36>
 8016c0a:	28f7      	cmp	r0, #247	@ 0xf7
 8016c0c:	d803      	bhi.n	8016c16 <rmw_validate_full_topic_name+0xde>
 8016c0e:	2300      	movs	r3, #0
 8016c10:	4618      	mov	r0, r3
 8016c12:	602b      	str	r3, [r5, #0]
 8016c14:	e7a5      	b.n	8016b62 <rmw_validate_full_topic_name+0x2a>
 8016c16:	2307      	movs	r3, #7
 8016c18:	602b      	str	r3, [r5, #0]
 8016c1a:	2e00      	cmp	r6, #0
 8016c1c:	d0a7      	beq.n	8016b6e <rmw_validate_full_topic_name+0x36>
 8016c1e:	23f6      	movs	r3, #246	@ 0xf6
 8016c20:	e7e7      	b.n	8016bf2 <rmw_validate_full_topic_name+0xba>
 8016c22:	2205      	movs	r2, #5
 8016c24:	602a      	str	r2, [r5, #0]
 8016c26:	2e00      	cmp	r6, #0
 8016c28:	d1e3      	bne.n	8016bf2 <rmw_validate_full_topic_name+0xba>
 8016c2a:	e7a0      	b.n	8016b6e <rmw_validate_full_topic_name+0x36>
 8016c2c:	0801d867 	.word	0x0801d867

08016c30 <rmw_validate_namespace_with_size>:
 8016c30:	2800      	cmp	r0, #0
 8016c32:	d043      	beq.n	8016cbc <rmw_validate_namespace_with_size+0x8c>
 8016c34:	b570      	push	{r4, r5, r6, lr}
 8016c36:	4614      	mov	r4, r2
 8016c38:	b0c2      	sub	sp, #264	@ 0x108
 8016c3a:	b32a      	cbz	r2, 8016c88 <rmw_validate_namespace_with_size+0x58>
 8016c3c:	2901      	cmp	r1, #1
 8016c3e:	460d      	mov	r5, r1
 8016c40:	461e      	mov	r6, r3
 8016c42:	d102      	bne.n	8016c4a <rmw_validate_namespace_with_size+0x1a>
 8016c44:	7803      	ldrb	r3, [r0, #0]
 8016c46:	2b2f      	cmp	r3, #47	@ 0x2f
 8016c48:	d012      	beq.n	8016c70 <rmw_validate_namespace_with_size+0x40>
 8016c4a:	aa01      	add	r2, sp, #4
 8016c4c:	4669      	mov	r1, sp
 8016c4e:	f7ff ff73 	bl	8016b38 <rmw_validate_full_topic_name>
 8016c52:	b980      	cbnz	r0, 8016c76 <rmw_validate_namespace_with_size+0x46>
 8016c54:	9a00      	ldr	r2, [sp, #0]
 8016c56:	b14a      	cbz	r2, 8016c6c <rmw_validate_namespace_with_size+0x3c>
 8016c58:	2a07      	cmp	r2, #7
 8016c5a:	d007      	beq.n	8016c6c <rmw_validate_namespace_with_size+0x3c>
 8016c5c:	1e53      	subs	r3, r2, #1
 8016c5e:	2b05      	cmp	r3, #5
 8016c60:	d82e      	bhi.n	8016cc0 <rmw_validate_namespace_with_size+0x90>
 8016c62:	e8df f003 	tbb	[pc, r3]
 8016c66:	1f1c      	.short	0x1f1c
 8016c68:	14282522 	.word	0x14282522
 8016c6c:	2df5      	cmp	r5, #245	@ 0xf5
 8016c6e:	d804      	bhi.n	8016c7a <rmw_validate_namespace_with_size+0x4a>
 8016c70:	2300      	movs	r3, #0
 8016c72:	4618      	mov	r0, r3
 8016c74:	6023      	str	r3, [r4, #0]
 8016c76:	b042      	add	sp, #264	@ 0x108
 8016c78:	bd70      	pop	{r4, r5, r6, pc}
 8016c7a:	2307      	movs	r3, #7
 8016c7c:	6023      	str	r3, [r4, #0]
 8016c7e:	2e00      	cmp	r6, #0
 8016c80:	d0f9      	beq.n	8016c76 <rmw_validate_namespace_with_size+0x46>
 8016c82:	23f4      	movs	r3, #244	@ 0xf4
 8016c84:	6033      	str	r3, [r6, #0]
 8016c86:	e7f6      	b.n	8016c76 <rmw_validate_namespace_with_size+0x46>
 8016c88:	200b      	movs	r0, #11
 8016c8a:	b042      	add	sp, #264	@ 0x108
 8016c8c:	bd70      	pop	{r4, r5, r6, pc}
 8016c8e:	2306      	movs	r3, #6
 8016c90:	6023      	str	r3, [r4, #0]
 8016c92:	2e00      	cmp	r6, #0
 8016c94:	d0ef      	beq.n	8016c76 <rmw_validate_namespace_with_size+0x46>
 8016c96:	9b01      	ldr	r3, [sp, #4]
 8016c98:	6033      	str	r3, [r6, #0]
 8016c9a:	b042      	add	sp, #264	@ 0x108
 8016c9c:	bd70      	pop	{r4, r5, r6, pc}
 8016c9e:	2301      	movs	r3, #1
 8016ca0:	6023      	str	r3, [r4, #0]
 8016ca2:	e7f6      	b.n	8016c92 <rmw_validate_namespace_with_size+0x62>
 8016ca4:	2302      	movs	r3, #2
 8016ca6:	6023      	str	r3, [r4, #0]
 8016ca8:	e7f3      	b.n	8016c92 <rmw_validate_namespace_with_size+0x62>
 8016caa:	2303      	movs	r3, #3
 8016cac:	6023      	str	r3, [r4, #0]
 8016cae:	e7f0      	b.n	8016c92 <rmw_validate_namespace_with_size+0x62>
 8016cb0:	2304      	movs	r3, #4
 8016cb2:	6023      	str	r3, [r4, #0]
 8016cb4:	e7ed      	b.n	8016c92 <rmw_validate_namespace_with_size+0x62>
 8016cb6:	2305      	movs	r3, #5
 8016cb8:	6023      	str	r3, [r4, #0]
 8016cba:	e7ea      	b.n	8016c92 <rmw_validate_namespace_with_size+0x62>
 8016cbc:	200b      	movs	r0, #11
 8016cbe:	4770      	bx	lr
 8016cc0:	4613      	mov	r3, r2
 8016cc2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8016cc6:	4a03      	ldr	r2, [pc, #12]	@ (8016cd4 <rmw_validate_namespace_with_size+0xa4>)
 8016cc8:	a802      	add	r0, sp, #8
 8016cca:	f7ff fc9d 	bl	8016608 <rcutils_snprintf>
 8016cce:	2001      	movs	r0, #1
 8016cd0:	e7d1      	b.n	8016c76 <rmw_validate_namespace_with_size+0x46>
 8016cd2:	bf00      	nop
 8016cd4:	0801cc70 	.word	0x0801cc70

08016cd8 <rmw_validate_namespace>:
 8016cd8:	b168      	cbz	r0, 8016cf6 <rmw_validate_namespace+0x1e>
 8016cda:	b570      	push	{r4, r5, r6, lr}
 8016cdc:	460d      	mov	r5, r1
 8016cde:	4616      	mov	r6, r2
 8016ce0:	4604      	mov	r4, r0
 8016ce2:	f7e9 fab7 	bl	8000254 <strlen>
 8016ce6:	4633      	mov	r3, r6
 8016ce8:	4601      	mov	r1, r0
 8016cea:	462a      	mov	r2, r5
 8016cec:	4620      	mov	r0, r4
 8016cee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016cf2:	f7ff bf9d 	b.w	8016c30 <rmw_validate_namespace_with_size>
 8016cf6:	200b      	movs	r0, #11
 8016cf8:	4770      	bx	lr
 8016cfa:	bf00      	nop

08016cfc <rmw_namespace_validation_result_string>:
 8016cfc:	2807      	cmp	r0, #7
 8016cfe:	d803      	bhi.n	8016d08 <rmw_namespace_validation_result_string+0xc>
 8016d00:	4b02      	ldr	r3, [pc, #8]	@ (8016d0c <rmw_namespace_validation_result_string+0x10>)
 8016d02:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8016d06:	4770      	bx	lr
 8016d08:	4801      	ldr	r0, [pc, #4]	@ (8016d10 <rmw_namespace_validation_result_string+0x14>)
 8016d0a:	4770      	bx	lr
 8016d0c:	0801d544 	.word	0x0801d544
 8016d10:	0801ccc0 	.word	0x0801ccc0

08016d14 <rmw_validate_node_name>:
 8016d14:	2800      	cmp	r0, #0
 8016d16:	d042      	beq.n	8016d9e <rmw_validate_node_name+0x8a>
 8016d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d1c:	460d      	mov	r5, r1
 8016d1e:	2900      	cmp	r1, #0
 8016d20:	d03f      	beq.n	8016da2 <rmw_validate_node_name+0x8e>
 8016d22:	4604      	mov	r4, r0
 8016d24:	4616      	mov	r6, r2
 8016d26:	f7e9 fa95 	bl	8000254 <strlen>
 8016d2a:	b310      	cbz	r0, 8016d72 <rmw_validate_node_name+0x5e>
 8016d2c:	1e63      	subs	r3, r4, #1
 8016d2e:	f1c4 0101 	rsb	r1, r4, #1
 8016d32:	eb03 0800 	add.w	r8, r3, r0
 8016d36:	18cf      	adds	r7, r1, r3
 8016d38:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8016d3c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8016d40:	f02e 0c20 	bic.w	ip, lr, #32
 8016d44:	2a09      	cmp	r2, #9
 8016d46:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8016d4a:	d905      	bls.n	8016d58 <rmw_validate_node_name+0x44>
 8016d4c:	f1bc 0f19 	cmp.w	ip, #25
 8016d50:	d902      	bls.n	8016d58 <rmw_validate_node_name+0x44>
 8016d52:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8016d56:	d114      	bne.n	8016d82 <rmw_validate_node_name+0x6e>
 8016d58:	4598      	cmp	r8, r3
 8016d5a:	d1ec      	bne.n	8016d36 <rmw_validate_node_name+0x22>
 8016d5c:	7822      	ldrb	r2, [r4, #0]
 8016d5e:	4b16      	ldr	r3, [pc, #88]	@ (8016db8 <rmw_validate_node_name+0xa4>)
 8016d60:	5cd3      	ldrb	r3, [r2, r3]
 8016d62:	f013 0304 	ands.w	r3, r3, #4
 8016d66:	d113      	bne.n	8016d90 <rmw_validate_node_name+0x7c>
 8016d68:	28ff      	cmp	r0, #255	@ 0xff
 8016d6a:	d81c      	bhi.n	8016da6 <rmw_validate_node_name+0x92>
 8016d6c:	4618      	mov	r0, r3
 8016d6e:	602b      	str	r3, [r5, #0]
 8016d70:	e00c      	b.n	8016d8c <rmw_validate_node_name+0x78>
 8016d72:	2301      	movs	r3, #1
 8016d74:	602b      	str	r3, [r5, #0]
 8016d76:	b17e      	cbz	r6, 8016d98 <rmw_validate_node_name+0x84>
 8016d78:	2300      	movs	r3, #0
 8016d7a:	4618      	mov	r0, r3
 8016d7c:	6033      	str	r3, [r6, #0]
 8016d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d82:	2302      	movs	r3, #2
 8016d84:	602b      	str	r3, [r5, #0]
 8016d86:	b13e      	cbz	r6, 8016d98 <rmw_validate_node_name+0x84>
 8016d88:	2000      	movs	r0, #0
 8016d8a:	6037      	str	r7, [r6, #0]
 8016d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d90:	2303      	movs	r3, #3
 8016d92:	602b      	str	r3, [r5, #0]
 8016d94:	2e00      	cmp	r6, #0
 8016d96:	d1ef      	bne.n	8016d78 <rmw_validate_node_name+0x64>
 8016d98:	2000      	movs	r0, #0
 8016d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d9e:	200b      	movs	r0, #11
 8016da0:	4770      	bx	lr
 8016da2:	200b      	movs	r0, #11
 8016da4:	e7f2      	b.n	8016d8c <rmw_validate_node_name+0x78>
 8016da6:	2204      	movs	r2, #4
 8016da8:	602a      	str	r2, [r5, #0]
 8016daa:	2e00      	cmp	r6, #0
 8016dac:	d0f4      	beq.n	8016d98 <rmw_validate_node_name+0x84>
 8016dae:	22fe      	movs	r2, #254	@ 0xfe
 8016db0:	4618      	mov	r0, r3
 8016db2:	6032      	str	r2, [r6, #0]
 8016db4:	e7ea      	b.n	8016d8c <rmw_validate_node_name+0x78>
 8016db6:	bf00      	nop
 8016db8:	0801d867 	.word	0x0801d867

08016dbc <rmw_node_name_validation_result_string>:
 8016dbc:	2804      	cmp	r0, #4
 8016dbe:	d803      	bhi.n	8016dc8 <rmw_node_name_validation_result_string+0xc>
 8016dc0:	4b02      	ldr	r3, [pc, #8]	@ (8016dcc <rmw_node_name_validation_result_string+0x10>)
 8016dc2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8016dc6:	4770      	bx	lr
 8016dc8:	4801      	ldr	r0, [pc, #4]	@ (8016dd0 <rmw_node_name_validation_result_string+0x14>)
 8016dca:	4770      	bx	lr
 8016dcc:	0801d564 	.word	0x0801d564
 8016dd0:	0801ce68 	.word	0x0801ce68

08016dd4 <get_memory>:
 8016dd4:	4603      	mov	r3, r0
 8016dd6:	6840      	ldr	r0, [r0, #4]
 8016dd8:	b158      	cbz	r0, 8016df2 <get_memory+0x1e>
 8016dda:	6842      	ldr	r2, [r0, #4]
 8016ddc:	605a      	str	r2, [r3, #4]
 8016dde:	b10a      	cbz	r2, 8016de4 <get_memory+0x10>
 8016de0:	2100      	movs	r1, #0
 8016de2:	6011      	str	r1, [r2, #0]
 8016de4:	681a      	ldr	r2, [r3, #0]
 8016de6:	6042      	str	r2, [r0, #4]
 8016de8:	b102      	cbz	r2, 8016dec <get_memory+0x18>
 8016dea:	6010      	str	r0, [r2, #0]
 8016dec:	2200      	movs	r2, #0
 8016dee:	6002      	str	r2, [r0, #0]
 8016df0:	6018      	str	r0, [r3, #0]
 8016df2:	4770      	bx	lr

08016df4 <put_memory>:
 8016df4:	680b      	ldr	r3, [r1, #0]
 8016df6:	b10b      	cbz	r3, 8016dfc <put_memory+0x8>
 8016df8:	684a      	ldr	r2, [r1, #4]
 8016dfa:	605a      	str	r2, [r3, #4]
 8016dfc:	684a      	ldr	r2, [r1, #4]
 8016dfe:	b102      	cbz	r2, 8016e02 <put_memory+0xe>
 8016e00:	6013      	str	r3, [r2, #0]
 8016e02:	6803      	ldr	r3, [r0, #0]
 8016e04:	428b      	cmp	r3, r1
 8016e06:	6843      	ldr	r3, [r0, #4]
 8016e08:	bf08      	it	eq
 8016e0a:	6002      	streq	r2, [r0, #0]
 8016e0c:	604b      	str	r3, [r1, #4]
 8016e0e:	b103      	cbz	r3, 8016e12 <put_memory+0x1e>
 8016e10:	6019      	str	r1, [r3, #0]
 8016e12:	2300      	movs	r3, #0
 8016e14:	600b      	str	r3, [r1, #0]
 8016e16:	6041      	str	r1, [r0, #4]
 8016e18:	4770      	bx	lr
 8016e1a:	bf00      	nop

08016e1c <rmw_destroy_client>:
 8016e1c:	b570      	push	{r4, r5, r6, lr}
 8016e1e:	b128      	cbz	r0, 8016e2c <rmw_destroy_client+0x10>
 8016e20:	4604      	mov	r4, r0
 8016e22:	6800      	ldr	r0, [r0, #0]
 8016e24:	460d      	mov	r5, r1
 8016e26:	f001 fa95 	bl	8018354 <is_uxrce_rmw_identifier_valid>
 8016e2a:	b910      	cbnz	r0, 8016e32 <rmw_destroy_client+0x16>
 8016e2c:	2401      	movs	r4, #1
 8016e2e:	4620      	mov	r0, r4
 8016e30:	bd70      	pop	{r4, r5, r6, pc}
 8016e32:	6863      	ldr	r3, [r4, #4]
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d0f9      	beq.n	8016e2c <rmw_destroy_client+0x10>
 8016e38:	2d00      	cmp	r5, #0
 8016e3a:	d0f7      	beq.n	8016e2c <rmw_destroy_client+0x10>
 8016e3c:	6828      	ldr	r0, [r5, #0]
 8016e3e:	f001 fa89 	bl	8018354 <is_uxrce_rmw_identifier_valid>
 8016e42:	2800      	cmp	r0, #0
 8016e44:	d0f2      	beq.n	8016e2c <rmw_destroy_client+0x10>
 8016e46:	686e      	ldr	r6, [r5, #4]
 8016e48:	2e00      	cmp	r6, #0
 8016e4a:	d0ef      	beq.n	8016e2c <rmw_destroy_client+0x10>
 8016e4c:	6864      	ldr	r4, [r4, #4]
 8016e4e:	6932      	ldr	r2, [r6, #16]
 8016e50:	6920      	ldr	r0, [r4, #16]
 8016e52:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016e56:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016e5a:	6819      	ldr	r1, [r3, #0]
 8016e5c:	f002 fbf0 	bl	8019640 <uxr_buffer_cancel_data>
 8016e60:	4602      	mov	r2, r0
 8016e62:	6920      	ldr	r0, [r4, #16]
 8016e64:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016e68:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016e6c:	f001 f9f8 	bl	8018260 <run_xrce_session>
 8016e70:	6920      	ldr	r0, [r4, #16]
 8016e72:	6932      	ldr	r2, [r6, #16]
 8016e74:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016e78:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016e7c:	6819      	ldr	r1, [r3, #0]
 8016e7e:	f001 fb8d 	bl	801859c <uxr_buffer_delete_entity>
 8016e82:	4602      	mov	r2, r0
 8016e84:	6920      	ldr	r0, [r4, #16]
 8016e86:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016e8a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016e8e:	f001 f9e7 	bl	8018260 <run_xrce_session>
 8016e92:	4603      	mov	r3, r0
 8016e94:	4628      	mov	r0, r5
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	bf14      	ite	ne
 8016e9a:	2400      	movne	r4, #0
 8016e9c:	2402      	moveq	r4, #2
 8016e9e:	f7f9 f8c1 	bl	8010024 <rmw_uxrce_fini_client_memory>
 8016ea2:	e7c4      	b.n	8016e2e <rmw_destroy_client+0x12>

08016ea4 <rmw_get_implementation_identifier>:
 8016ea4:	4b01      	ldr	r3, [pc, #4]	@ (8016eac <rmw_get_implementation_identifier+0x8>)
 8016ea6:	6818      	ldr	r0, [r3, #0]
 8016ea8:	4770      	bx	lr
 8016eaa:	bf00      	nop
 8016eac:	0801d578 	.word	0x0801d578

08016eb0 <rmw_init_options_init>:
 8016eb0:	b084      	sub	sp, #16
 8016eb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016eb4:	b083      	sub	sp, #12
 8016eb6:	ad09      	add	r5, sp, #36	@ 0x24
 8016eb8:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8016ebc:	b130      	cbz	r0, 8016ecc <rmw_init_options_init+0x1c>
 8016ebe:	4604      	mov	r4, r0
 8016ec0:	4628      	mov	r0, r5
 8016ec2:	f7f8 fe2f 	bl	800fb24 <rcutils_allocator_is_valid>
 8016ec6:	b108      	cbz	r0, 8016ecc <rmw_init_options_init+0x1c>
 8016ec8:	68a6      	ldr	r6, [r4, #8]
 8016eca:	b12e      	cbz	r6, 8016ed8 <rmw_init_options_init+0x28>
 8016ecc:	200b      	movs	r0, #11
 8016ece:	b003      	add	sp, #12
 8016ed0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016ed4:	b004      	add	sp, #16
 8016ed6:	4770      	bx	lr
 8016ed8:	2200      	movs	r2, #0
 8016eda:	2300      	movs	r3, #0
 8016edc:	f104 0c20 	add.w	ip, r4, #32
 8016ee0:	466f      	mov	r7, sp
 8016ee2:	e9c4 2300 	strd	r2, r3, [r4]
 8016ee6:	4b1f      	ldr	r3, [pc, #124]	@ (8016f64 <rmw_init_options_init+0xb4>)
 8016ee8:	681b      	ldr	r3, [r3, #0]
 8016eea:	60a3      	str	r3, [r4, #8]
 8016eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016eee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016ef2:	682b      	ldr	r3, [r5, #0]
 8016ef4:	4638      	mov	r0, r7
 8016ef6:	f8cc 3000 	str.w	r3, [ip]
 8016efa:	61e6      	str	r6, [r4, #28]
 8016efc:	60e6      	str	r6, [r4, #12]
 8016efe:	f7ff fd67 	bl	80169d0 <rmw_get_default_security_options>
 8016f02:	f104 0310 	add.w	r3, r4, #16
 8016f06:	2203      	movs	r2, #3
 8016f08:	e897 0003 	ldmia.w	r7, {r0, r1}
 8016f0c:	e883 0003 	stmia.w	r3, {r0, r1}
 8016f10:	4815      	ldr	r0, [pc, #84]	@ (8016f68 <rmw_init_options_init+0xb8>)
 8016f12:	4916      	ldr	r1, [pc, #88]	@ (8016f6c <rmw_init_options_init+0xbc>)
 8016f14:	7626      	strb	r6, [r4, #24]
 8016f16:	f7f8 ffc5 	bl	800fea4 <rmw_uxrce_init_init_options_impl_memory>
 8016f1a:	4813      	ldr	r0, [pc, #76]	@ (8016f68 <rmw_init_options_init+0xb8>)
 8016f1c:	f7ff ff5a 	bl	8016dd4 <get_memory>
 8016f20:	b1f0      	cbz	r0, 8016f60 <rmw_init_options_init+0xb0>
 8016f22:	4a13      	ldr	r2, [pc, #76]	@ (8016f70 <rmw_init_options_init+0xc0>)
 8016f24:	6883      	ldr	r3, [r0, #8]
 8016f26:	6851      	ldr	r1, [r2, #4]
 8016f28:	6363      	str	r3, [r4, #52]	@ 0x34
 8016f2a:	7810      	ldrb	r0, [r2, #0]
 8016f2c:	6159      	str	r1, [r3, #20]
 8016f2e:	68d1      	ldr	r1, [r2, #12]
 8016f30:	7418      	strb	r0, [r3, #16]
 8016f32:	61d9      	str	r1, [r3, #28]
 8016f34:	6911      	ldr	r1, [r2, #16]
 8016f36:	6219      	str	r1, [r3, #32]
 8016f38:	6951      	ldr	r1, [r2, #20]
 8016f3a:	6892      	ldr	r2, [r2, #8]
 8016f3c:	6259      	str	r1, [r3, #36]	@ 0x24
 8016f3e:	619a      	str	r2, [r3, #24]
 8016f40:	f7fb fbca 	bl	80126d8 <uxr_nanos>
 8016f44:	f003 ff9e 	bl	801ae84 <srand>
 8016f48:	f003 ffca 	bl	801aee0 <rand>
 8016f4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016f4e:	6298      	str	r0, [r3, #40]	@ 0x28
 8016f50:	2800      	cmp	r0, #0
 8016f52:	d0f9      	beq.n	8016f48 <rmw_init_options_init+0x98>
 8016f54:	2000      	movs	r0, #0
 8016f56:	b003      	add	sp, #12
 8016f58:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016f5c:	b004      	add	sp, #16
 8016f5e:	4770      	bx	lr
 8016f60:	2001      	movs	r0, #1
 8016f62:	e7b4      	b.n	8016ece <rmw_init_options_init+0x1e>
 8016f64:	0801d578 	.word	0x0801d578
 8016f68:	2000f0cc 	.word	0x2000f0cc
 8016f6c:	2000a968 	.word	0x2000a968
 8016f70:	2000a7f4 	.word	0x2000a7f4

08016f74 <rmw_init_options_copy>:
 8016f74:	b570      	push	{r4, r5, r6, lr}
 8016f76:	b088      	sub	sp, #32
 8016f78:	b160      	cbz	r0, 8016f94 <rmw_init_options_copy+0x20>
 8016f7a:	460d      	mov	r5, r1
 8016f7c:	b151      	cbz	r1, 8016f94 <rmw_init_options_copy+0x20>
 8016f7e:	4604      	mov	r4, r0
 8016f80:	6880      	ldr	r0, [r0, #8]
 8016f82:	b128      	cbz	r0, 8016f90 <rmw_init_options_copy+0x1c>
 8016f84:	4b34      	ldr	r3, [pc, #208]	@ (8017058 <rmw_init_options_copy+0xe4>)
 8016f86:	6819      	ldr	r1, [r3, #0]
 8016f88:	f7e9 f95a 	bl	8000240 <strcmp>
 8016f8c:	2800      	cmp	r0, #0
 8016f8e:	d157      	bne.n	8017040 <rmw_init_options_copy+0xcc>
 8016f90:	68ab      	ldr	r3, [r5, #8]
 8016f92:	b11b      	cbz	r3, 8016f9c <rmw_init_options_copy+0x28>
 8016f94:	240b      	movs	r4, #11
 8016f96:	4620      	mov	r0, r4
 8016f98:	b008      	add	sp, #32
 8016f9a:	bd70      	pop	{r4, r5, r6, pc}
 8016f9c:	4623      	mov	r3, r4
 8016f9e:	462a      	mov	r2, r5
 8016fa0:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8016fa4:	f8d3 e000 	ldr.w	lr, [r3]
 8016fa8:	3310      	adds	r3, #16
 8016faa:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 8016fae:	3210      	adds	r2, #16
 8016fb0:	f853 0c08 	ldr.w	r0, [r3, #-8]
 8016fb4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8016fb8:	42b3      	cmp	r3, r6
 8016fba:	f842 ec10 	str.w	lr, [r2, #-16]
 8016fbe:	f842 cc0c 	str.w	ip, [r2, #-12]
 8016fc2:	f842 0c08 	str.w	r0, [r2, #-8]
 8016fc6:	f842 1c04 	str.w	r1, [r2, #-4]
 8016fca:	d1eb      	bne.n	8016fa4 <rmw_init_options_copy+0x30>
 8016fcc:	6819      	ldr	r1, [r3, #0]
 8016fce:	f104 0e20 	add.w	lr, r4, #32
 8016fd2:	685b      	ldr	r3, [r3, #4]
 8016fd4:	f10d 0c0c 	add.w	ip, sp, #12
 8016fd8:	6011      	str	r1, [r2, #0]
 8016fda:	6053      	str	r3, [r2, #4]
 8016fdc:	4666      	mov	r6, ip
 8016fde:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016fe2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016fe6:	f8de 3000 	ldr.w	r3, [lr]
 8016fea:	4630      	mov	r0, r6
 8016fec:	f8cc 3000 	str.w	r3, [ip]
 8016ff0:	f7f8 fd98 	bl	800fb24 <rcutils_allocator_is_valid>
 8016ff4:	2800      	cmp	r0, #0
 8016ff6:	d0cd      	beq.n	8016f94 <rmw_init_options_copy+0x20>
 8016ff8:	ab08      	add	r3, sp, #32
 8016ffa:	e913 0003 	ldmdb	r3, {r0, r1}
 8016ffe:	e88d 0003 	stmia.w	sp, {r0, r1}
 8017002:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8017006:	69e0      	ldr	r0, [r4, #28]
 8017008:	f7ff fb4c 	bl	80166a4 <rcutils_strdup>
 801700c:	61e8      	str	r0, [r5, #28]
 801700e:	69e3      	ldr	r3, [r4, #28]
 8017010:	b103      	cbz	r3, 8017014 <rmw_init_options_copy+0xa0>
 8017012:	b1f8      	cbz	r0, 8017054 <rmw_init_options_copy+0xe0>
 8017014:	4811      	ldr	r0, [pc, #68]	@ (801705c <rmw_init_options_copy+0xe8>)
 8017016:	f7ff fedd 	bl	8016dd4 <get_memory>
 801701a:	b1a8      	cbz	r0, 8017048 <rmw_init_options_copy+0xd4>
 801701c:	6883      	ldr	r3, [r0, #8]
 801701e:	636b      	str	r3, [r5, #52]	@ 0x34
 8017020:	f103 0510 	add.w	r5, r3, #16
 8017024:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8017026:	2400      	movs	r4, #0
 8017028:	f102 0c10 	add.w	ip, r2, #16
 801702c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017030:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017032:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8017036:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801703a:	4620      	mov	r0, r4
 801703c:	b008      	add	sp, #32
 801703e:	bd70      	pop	{r4, r5, r6, pc}
 8017040:	240c      	movs	r4, #12
 8017042:	4620      	mov	r0, r4
 8017044:	b008      	add	sp, #32
 8017046:	bd70      	pop	{r4, r5, r6, pc}
 8017048:	9b04      	ldr	r3, [sp, #16]
 801704a:	2401      	movs	r4, #1
 801704c:	9907      	ldr	r1, [sp, #28]
 801704e:	69e8      	ldr	r0, [r5, #28]
 8017050:	4798      	blx	r3
 8017052:	e7a0      	b.n	8016f96 <rmw_init_options_copy+0x22>
 8017054:	240a      	movs	r4, #10
 8017056:	e79e      	b.n	8016f96 <rmw_init_options_copy+0x22>
 8017058:	0801d578 	.word	0x0801d578
 801705c:	2000f0cc 	.word	0x2000f0cc

08017060 <rmw_init_options_fini>:
 8017060:	b510      	push	{r4, lr}
 8017062:	b08e      	sub	sp, #56	@ 0x38
 8017064:	2800      	cmp	r0, #0
 8017066:	d035      	beq.n	80170d4 <rmw_init_options_fini+0x74>
 8017068:	4604      	mov	r4, r0
 801706a:	3020      	adds	r0, #32
 801706c:	f7f8 fd5a 	bl	800fb24 <rcutils_allocator_is_valid>
 8017070:	b380      	cbz	r0, 80170d4 <rmw_init_options_fini+0x74>
 8017072:	68a0      	ldr	r0, [r4, #8]
 8017074:	b120      	cbz	r0, 8017080 <rmw_init_options_fini+0x20>
 8017076:	4b1c      	ldr	r3, [pc, #112]	@ (80170e8 <rmw_init_options_fini+0x88>)
 8017078:	6819      	ldr	r1, [r3, #0]
 801707a:	f7e9 f8e1 	bl	8000240 <strcmp>
 801707e:	bb88      	cbnz	r0, 80170e4 <rmw_init_options_fini+0x84>
 8017080:	4b1a      	ldr	r3, [pc, #104]	@ (80170ec <rmw_init_options_fini+0x8c>)
 8017082:	6819      	ldr	r1, [r3, #0]
 8017084:	b351      	cbz	r1, 80170dc <rmw_init_options_fini+0x7c>
 8017086:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8017088:	e001      	b.n	801708e <rmw_init_options_fini+0x2e>
 801708a:	6849      	ldr	r1, [r1, #4]
 801708c:	b331      	cbz	r1, 80170dc <rmw_init_options_fini+0x7c>
 801708e:	688b      	ldr	r3, [r1, #8]
 8017090:	429a      	cmp	r2, r3
 8017092:	d1fa      	bne.n	801708a <rmw_init_options_fini+0x2a>
 8017094:	4815      	ldr	r0, [pc, #84]	@ (80170ec <rmw_init_options_fini+0x8c>)
 8017096:	f7ff fead 	bl	8016df4 <put_memory>
 801709a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801709c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801709e:	69e0      	ldr	r0, [r4, #28]
 80170a0:	4798      	blx	r3
 80170a2:	4668      	mov	r0, sp
 80170a4:	f7ff fc80 	bl	80169a8 <rmw_get_zero_initialized_init_options>
 80170a8:	46ee      	mov	lr, sp
 80170aa:	46a4      	mov	ip, r4
 80170ac:	2400      	movs	r4, #0
 80170ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80170b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80170b6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80170ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80170be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80170c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80170c6:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80170ca:	e88c 0003 	stmia.w	ip, {r0, r1}
 80170ce:	4620      	mov	r0, r4
 80170d0:	b00e      	add	sp, #56	@ 0x38
 80170d2:	bd10      	pop	{r4, pc}
 80170d4:	240b      	movs	r4, #11
 80170d6:	4620      	mov	r0, r4
 80170d8:	b00e      	add	sp, #56	@ 0x38
 80170da:	bd10      	pop	{r4, pc}
 80170dc:	2401      	movs	r4, #1
 80170de:	4620      	mov	r0, r4
 80170e0:	b00e      	add	sp, #56	@ 0x38
 80170e2:	bd10      	pop	{r4, pc}
 80170e4:	240c      	movs	r4, #12
 80170e6:	e7f2      	b.n	80170ce <rmw_init_options_fini+0x6e>
 80170e8:	0801d578 	.word	0x0801d578
 80170ec:	2000f0cc 	.word	0x2000f0cc

080170f0 <rmw_init>:
 80170f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80170f4:	b083      	sub	sp, #12
 80170f6:	2800      	cmp	r0, #0
 80170f8:	f000 80d3 	beq.w	80172a2 <rmw_init+0x1b2>
 80170fc:	460e      	mov	r6, r1
 80170fe:	2900      	cmp	r1, #0
 8017100:	f000 80cf 	beq.w	80172a2 <rmw_init+0x1b2>
 8017104:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8017106:	4605      	mov	r5, r0
 8017108:	2b00      	cmp	r3, #0
 801710a:	f000 80ca 	beq.w	80172a2 <rmw_init+0x1b2>
 801710e:	4b78      	ldr	r3, [pc, #480]	@ (80172f0 <rmw_init+0x200>)
 8017110:	6880      	ldr	r0, [r0, #8]
 8017112:	681f      	ldr	r7, [r3, #0]
 8017114:	b128      	cbz	r0, 8017122 <rmw_init+0x32>
 8017116:	4639      	mov	r1, r7
 8017118:	f7e9 f892 	bl	8000240 <strcmp>
 801711c:	2800      	cmp	r0, #0
 801711e:	f040 80ca 	bne.w	80172b6 <rmw_init+0x1c6>
 8017122:	4c74      	ldr	r4, [pc, #464]	@ (80172f4 <rmw_init+0x204>)
 8017124:	f04f 0800 	mov.w	r8, #0
 8017128:	4973      	ldr	r1, [pc, #460]	@ (80172f8 <rmw_init+0x208>)
 801712a:	4874      	ldr	r0, [pc, #464]	@ (80172fc <rmw_init+0x20c>)
 801712c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017130:	60b7      	str	r7, [r6, #8]
 8017132:	e9c6 2300 	strd	r2, r3, [r6]
 8017136:	68eb      	ldr	r3, [r5, #12]
 8017138:	2201      	movs	r2, #1
 801713a:	64b3      	str	r3, [r6, #72]	@ 0x48
 801713c:	f7f8 fe52 	bl	800fde4 <rmw_uxrce_init_session_memory>
 8017140:	4620      	mov	r0, r4
 8017142:	2204      	movs	r2, #4
 8017144:	496e      	ldr	r1, [pc, #440]	@ (8017300 <rmw_init+0x210>)
 8017146:	f7f8 fe8d 	bl	800fe64 <rmw_uxrce_init_static_input_buffer_memory>
 801714a:	486c      	ldr	r0, [pc, #432]	@ (80172fc <rmw_init+0x20c>)
 801714c:	f884 800d 	strb.w	r8, [r4, #13]
 8017150:	f7ff fe40 	bl	8016dd4 <get_memory>
 8017154:	2800      	cmp	r0, #0
 8017156:	f000 80a9 	beq.w	80172ac <rmw_init+0x1bc>
 801715a:	6884      	ldr	r4, [r0, #8]
 801715c:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 801715e:	f104 0910 	add.w	r9, r4, #16
 8017162:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8017164:	f890 c010 	ldrb.w	ip, [r0, #16]
 8017168:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 801716c:	9101      	str	r1, [sp, #4]
 801716e:	4661      	mov	r1, ip
 8017170:	6a00      	ldr	r0, [r0, #32]
 8017172:	9000      	str	r0, [sp, #0]
 8017174:	4648      	mov	r0, r9
 8017176:	f001 fc8f 	bl	8018a98 <uxr_set_custom_transport_callbacks>
 801717a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801717e:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8017182:	4960      	ldr	r1, [pc, #384]	@ (8017304 <rmw_init+0x214>)
 8017184:	4860      	ldr	r0, [pc, #384]	@ (8017308 <rmw_init+0x218>)
 8017186:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 801718a:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 801718e:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8017192:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8017196:	2201      	movs	r2, #1
 8017198:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 801719c:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 80171a0:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 80171a4:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 80171a8:	64f4      	str	r4, [r6, #76]	@ 0x4c
 80171aa:	f7f8 fdfb 	bl	800fda4 <rmw_uxrce_init_node_memory>
 80171ae:	2205      	movs	r2, #5
 80171b0:	4956      	ldr	r1, [pc, #344]	@ (801730c <rmw_init+0x21c>)
 80171b2:	4857      	ldr	r0, [pc, #348]	@ (8017310 <rmw_init+0x220>)
 80171b4:	f7f8 fdd6 	bl	800fd64 <rmw_uxrce_init_subscription_memory>
 80171b8:	220a      	movs	r2, #10
 80171ba:	4956      	ldr	r1, [pc, #344]	@ (8017314 <rmw_init+0x224>)
 80171bc:	4856      	ldr	r0, [pc, #344]	@ (8017318 <rmw_init+0x228>)
 80171be:	f7f8 fdb1 	bl	800fd24 <rmw_uxrce_init_publisher_memory>
 80171c2:	2201      	movs	r2, #1
 80171c4:	4955      	ldr	r1, [pc, #340]	@ (801731c <rmw_init+0x22c>)
 80171c6:	4856      	ldr	r0, [pc, #344]	@ (8017320 <rmw_init+0x230>)
 80171c8:	f7f8 fd6c 	bl	800fca4 <rmw_uxrce_init_service_memory>
 80171cc:	2201      	movs	r2, #1
 80171ce:	4955      	ldr	r1, [pc, #340]	@ (8017324 <rmw_init+0x234>)
 80171d0:	4855      	ldr	r0, [pc, #340]	@ (8017328 <rmw_init+0x238>)
 80171d2:	f7f8 fd87 	bl	800fce4 <rmw_uxrce_init_client_memory>
 80171d6:	220f      	movs	r2, #15
 80171d8:	4954      	ldr	r1, [pc, #336]	@ (801732c <rmw_init+0x23c>)
 80171da:	4855      	ldr	r0, [pc, #340]	@ (8017330 <rmw_init+0x240>)
 80171dc:	f7f8 fe22 	bl	800fe24 <rmw_uxrce_init_topic_memory>
 80171e0:	2203      	movs	r2, #3
 80171e2:	4954      	ldr	r1, [pc, #336]	@ (8017334 <rmw_init+0x244>)
 80171e4:	4854      	ldr	r0, [pc, #336]	@ (8017338 <rmw_init+0x248>)
 80171e6:	f7f8 fe5d 	bl	800fea4 <rmw_uxrce_init_init_options_impl_memory>
 80171ea:	2204      	movs	r2, #4
 80171ec:	4953      	ldr	r1, [pc, #332]	@ (801733c <rmw_init+0x24c>)
 80171ee:	4854      	ldr	r0, [pc, #336]	@ (8017340 <rmw_init+0x250>)
 80171f0:	f7f8 fe78 	bl	800fee4 <rmw_uxrce_init_wait_set_memory>
 80171f4:	4953      	ldr	r1, [pc, #332]	@ (8017344 <rmw_init+0x254>)
 80171f6:	4854      	ldr	r0, [pc, #336]	@ (8017348 <rmw_init+0x258>)
 80171f8:	2204      	movs	r2, #4
 80171fa:	f7f8 fe93 	bl	800ff24 <rmw_uxrce_init_guard_condition_memory>
 80171fe:	4642      	mov	r2, r8
 8017200:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8017202:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8017204:	f000 fe92 	bl	8017f2c <rmw_uxrce_transport_init>
 8017208:	4607      	mov	r7, r0
 801720a:	2800      	cmp	r0, #0
 801720c:	d158      	bne.n	80172c0 <rmw_init+0x1d0>
 801720e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8017210:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8017214:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8017218:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801721a:	4628      	mov	r0, r5
 801721c:	f7fa f8a0 	bl	8011360 <uxr_init_session>
 8017220:	4622      	mov	r2, r4
 8017222:	494a      	ldr	r1, [pc, #296]	@ (801734c <rmw_init+0x25c>)
 8017224:	4628      	mov	r0, r5
 8017226:	f7fa f8bf 	bl	80113a8 <uxr_set_topic_callback>
 801722a:	463a      	mov	r2, r7
 801722c:	4948      	ldr	r1, [pc, #288]	@ (8017350 <rmw_init+0x260>)
 801722e:	4628      	mov	r0, r5
 8017230:	f7fa f8b6 	bl	80113a0 <uxr_set_status_callback>
 8017234:	463a      	mov	r2, r7
 8017236:	4947      	ldr	r1, [pc, #284]	@ (8017354 <rmw_init+0x264>)
 8017238:	4628      	mov	r0, r5
 801723a:	f7fa f8b9 	bl	80113b0 <uxr_set_request_callback>
 801723e:	463a      	mov	r2, r7
 8017240:	4945      	ldr	r1, [pc, #276]	@ (8017358 <rmw_init+0x268>)
 8017242:	4628      	mov	r0, r5
 8017244:	f7fa f8b8 	bl	80113b8 <uxr_set_reply_callback>
 8017248:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801724c:	2304      	movs	r3, #4
 801724e:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8017252:	0092      	lsls	r2, r2, #2
 8017254:	4628      	mov	r0, r5
 8017256:	f7fa f8ef 	bl	8011438 <uxr_create_input_reliable_stream>
 801725a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801725e:	2304      	movs	r3, #4
 8017260:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8017264:	0092      	lsls	r2, r2, #2
 8017266:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 801726a:	4628      	mov	r0, r5
 801726c:	f7fa f8ba 	bl	80113e4 <uxr_create_output_reliable_stream>
 8017270:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8017274:	4628      	mov	r0, r5
 8017276:	f7fa f8d9 	bl	801142c <uxr_create_input_best_effort_stream>
 801727a:	f241 3194 	movw	r1, #5012	@ 0x1394
 801727e:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8017282:	4628      	mov	r0, r5
 8017284:	4421      	add	r1, r4
 8017286:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801728a:	f7fa f899 	bl	80113c0 <uxr_create_output_best_effort_stream>
 801728e:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8017292:	4628      	mov	r0, r5
 8017294:	f7fa fe34 	bl	8011f00 <uxr_create_session>
 8017298:	b1f8      	cbz	r0, 80172da <rmw_init+0x1ea>
 801729a:	4638      	mov	r0, r7
 801729c:	b003      	add	sp, #12
 801729e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80172a2:	270b      	movs	r7, #11
 80172a4:	4638      	mov	r0, r7
 80172a6:	b003      	add	sp, #12
 80172a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80172ac:	2701      	movs	r7, #1
 80172ae:	4638      	mov	r0, r7
 80172b0:	b003      	add	sp, #12
 80172b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80172b6:	270c      	movs	r7, #12
 80172b8:	4638      	mov	r0, r7
 80172ba:	b003      	add	sp, #12
 80172bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80172c0:	4648      	mov	r0, r9
 80172c2:	f001 fc27 	bl	8018b14 <uxr_close_custom_transport>
 80172c6:	4621      	mov	r1, r4
 80172c8:	480c      	ldr	r0, [pc, #48]	@ (80172fc <rmw_init+0x20c>)
 80172ca:	f7ff fd93 	bl	8016df4 <put_memory>
 80172ce:	4638      	mov	r0, r7
 80172d0:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 80172d4:	b003      	add	sp, #12
 80172d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80172da:	4648      	mov	r0, r9
 80172dc:	f001 fc1a 	bl	8018b14 <uxr_close_custom_transport>
 80172e0:	4621      	mov	r1, r4
 80172e2:	4806      	ldr	r0, [pc, #24]	@ (80172fc <rmw_init+0x20c>)
 80172e4:	f7ff fd86 	bl	8016df4 <put_memory>
 80172e8:	64f7      	str	r7, [r6, #76]	@ 0x4c
 80172ea:	2701      	movs	r7, #1
 80172ec:	e7d5      	b.n	801729a <rmw_init+0x1aa>
 80172ee:	bf00      	nop
 80172f0:	0801d578 	.word	0x0801d578
 80172f4:	2000f11c 	.word	0x2000f11c
 80172f8:	2000b3c8 	.word	0x2000b3c8
 80172fc:	2000f10c 	.word	0x2000f10c
 8017300:	2000c970 	.word	0x2000c970
 8017304:	2000a9ec 	.word	0x2000a9ec
 8017308:	2000f0dc 	.word	0x2000f0dc
 801730c:	2000ea70 	.word	0x2000ea70
 8017310:	2000f12c 	.word	0x2000f12c
 8017314:	2000aa90 	.word	0x2000aa90
 8017318:	2000f0ec 	.word	0x2000f0ec
 801731c:	2000b300 	.word	0x2000b300
 8017320:	2000f0fc 	.word	0x2000f0fc
 8017324:	2000a820 	.word	0x2000a820
 8017328:	2000a810 	.word	0x2000a810
 801732c:	2000eea8 	.word	0x2000eea8
 8017330:	2000f13c 	.word	0x2000f13c
 8017334:	2000a968 	.word	0x2000a968
 8017338:	2000f0cc 	.word	0x2000f0cc
 801733c:	2000f04c 	.word	0x2000f04c
 8017340:	2000f14c 	.word	0x2000f14c
 8017344:	2000a8e8 	.word	0x2000a8e8
 8017348:	2000f0bc 	.word	0x2000f0bc
 801734c:	0801a861 	.word	0x0801a861
 8017350:	0801a859 	.word	0x0801a859
 8017354:	0801a8f9 	.word	0x0801a8f9
 8017358:	0801a995 	.word	0x0801a995

0801735c <rmw_context_fini>:
 801735c:	4b17      	ldr	r3, [pc, #92]	@ (80173bc <rmw_context_fini+0x60>)
 801735e:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8017360:	b570      	push	{r4, r5, r6, lr}
 8017362:	681c      	ldr	r4, [r3, #0]
 8017364:	4605      	mov	r5, r0
 8017366:	b334      	cbz	r4, 80173b6 <rmw_context_fini+0x5a>
 8017368:	2600      	movs	r6, #0
 801736a:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801736e:	6902      	ldr	r2, [r0, #16]
 8017370:	428a      	cmp	r2, r1
 8017372:	d018      	beq.n	80173a6 <rmw_context_fini+0x4a>
 8017374:	2c00      	cmp	r4, #0
 8017376:	d1f8      	bne.n	801736a <rmw_context_fini+0xe>
 8017378:	b189      	cbz	r1, 801739e <rmw_context_fini+0x42>
 801737a:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 801737e:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8017382:	789b      	ldrb	r3, [r3, #2]
 8017384:	2b01      	cmp	r3, #1
 8017386:	bf14      	ite	ne
 8017388:	210a      	movne	r1, #10
 801738a:	2100      	moveq	r1, #0
 801738c:	f7fa fd90 	bl	8011eb0 <uxr_delete_session_retries>
 8017390:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8017392:	f7f8 fde7 	bl	800ff64 <rmw_uxrce_fini_session_memory>
 8017396:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8017398:	3010      	adds	r0, #16
 801739a:	f001 fbbb 	bl	8018b14 <uxr_close_custom_transport>
 801739e:	2300      	movs	r3, #0
 80173a0:	4630      	mov	r0, r6
 80173a2:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80173a4:	bd70      	pop	{r4, r5, r6, pc}
 80173a6:	3018      	adds	r0, #24
 80173a8:	f000 f89c 	bl	80174e4 <rmw_destroy_node>
 80173ac:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80173ae:	4606      	mov	r6, r0
 80173b0:	2c00      	cmp	r4, #0
 80173b2:	d1da      	bne.n	801736a <rmw_context_fini+0xe>
 80173b4:	e7e0      	b.n	8017378 <rmw_context_fini+0x1c>
 80173b6:	4626      	mov	r6, r4
 80173b8:	e7de      	b.n	8017378 <rmw_context_fini+0x1c>
 80173ba:	bf00      	nop
 80173bc:	2000f0dc 	.word	0x2000f0dc

080173c0 <create_node>:
 80173c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80173c4:	b083      	sub	sp, #12
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	d064      	beq.n	8017494 <create_node+0xd4>
 80173ca:	4606      	mov	r6, r0
 80173cc:	4838      	ldr	r0, [pc, #224]	@ (80174b0 <create_node+0xf0>)
 80173ce:	460f      	mov	r7, r1
 80173d0:	4690      	mov	r8, r2
 80173d2:	461d      	mov	r5, r3
 80173d4:	f7ff fcfe 	bl	8016dd4 <get_memory>
 80173d8:	2800      	cmp	r0, #0
 80173da:	d05b      	beq.n	8017494 <create_node+0xd4>
 80173dc:	6884      	ldr	r4, [r0, #8]
 80173de:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80173e0:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 80173e4:	f104 0518 	add.w	r5, r4, #24
 80173e8:	6123      	str	r3, [r4, #16]
 80173ea:	f7ff fd5b 	bl	8016ea4 <rmw_get_implementation_identifier>
 80173ee:	f8c4 9020 	str.w	r9, [r4, #32]
 80173f2:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80173f6:	4630      	mov	r0, r6
 80173f8:	f7e8 ff2c 	bl	8000254 <strlen>
 80173fc:	1c42      	adds	r2, r0, #1
 80173fe:	2a3c      	cmp	r2, #60	@ 0x3c
 8017400:	d840      	bhi.n	8017484 <create_node+0xc4>
 8017402:	4648      	mov	r0, r9
 8017404:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8017408:	4631      	mov	r1, r6
 801740a:	f004 f9ae 	bl	801b76a <memcpy>
 801740e:	4638      	mov	r0, r7
 8017410:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8017414:	f7e8 ff1e 	bl	8000254 <strlen>
 8017418:	1c42      	adds	r2, r0, #1
 801741a:	2a3c      	cmp	r2, #60	@ 0x3c
 801741c:	d832      	bhi.n	8017484 <create_node+0xc4>
 801741e:	4639      	mov	r1, r7
 8017420:	4648      	mov	r0, r9
 8017422:	f004 f9a2 	bl	801b76a <memcpy>
 8017426:	6923      	ldr	r3, [r4, #16]
 8017428:	2101      	movs	r1, #1
 801742a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801742e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8017432:	1842      	adds	r2, r0, r1
 8017434:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8017438:	f001 fd64 	bl	8018f04 <uxr_object_id>
 801743c:	6160      	str	r0, [r4, #20]
 801743e:	783b      	ldrb	r3, [r7, #0]
 8017440:	2b2f      	cmp	r3, #47	@ 0x2f
 8017442:	d12c      	bne.n	801749e <create_node+0xde>
 8017444:	787b      	ldrb	r3, [r7, #1]
 8017446:	bb53      	cbnz	r3, 801749e <create_node+0xde>
 8017448:	4633      	mov	r3, r6
 801744a:	4a1a      	ldr	r2, [pc, #104]	@ (80174b4 <create_node+0xf4>)
 801744c:	213c      	movs	r1, #60	@ 0x3c
 801744e:	481a      	ldr	r0, [pc, #104]	@ (80174b8 <create_node+0xf8>)
 8017450:	f003 ff4e 	bl	801b2f0 <sniprintf>
 8017454:	6920      	ldr	r0, [r4, #16]
 8017456:	2106      	movs	r1, #6
 8017458:	fa1f f388 	uxth.w	r3, r8
 801745c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8017460:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017464:	9101      	str	r1, [sp, #4]
 8017466:	4914      	ldr	r1, [pc, #80]	@ (80174b8 <create_node+0xf8>)
 8017468:	9100      	str	r1, [sp, #0]
 801746a:	6811      	ldr	r1, [r2, #0]
 801746c:	6962      	ldr	r2, [r4, #20]
 801746e:	f001 f8e1 	bl	8018634 <uxr_buffer_create_participant_bin>
 8017472:	4602      	mov	r2, r0
 8017474:	6920      	ldr	r0, [r4, #16]
 8017476:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801747a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801747e:	f000 feef 	bl	8018260 <run_xrce_session>
 8017482:	b918      	cbnz	r0, 801748c <create_node+0xcc>
 8017484:	4628      	mov	r0, r5
 8017486:	2500      	movs	r5, #0
 8017488:	f7f8 fd72 	bl	800ff70 <rmw_uxrce_fini_node_memory>
 801748c:	4628      	mov	r0, r5
 801748e:	b003      	add	sp, #12
 8017490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017494:	2500      	movs	r5, #0
 8017496:	4628      	mov	r0, r5
 8017498:	b003      	add	sp, #12
 801749a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801749e:	463b      	mov	r3, r7
 80174a0:	4a06      	ldr	r2, [pc, #24]	@ (80174bc <create_node+0xfc>)
 80174a2:	213c      	movs	r1, #60	@ 0x3c
 80174a4:	9600      	str	r6, [sp, #0]
 80174a6:	4804      	ldr	r0, [pc, #16]	@ (80174b8 <create_node+0xf8>)
 80174a8:	f003 ff22 	bl	801b2f0 <sniprintf>
 80174ac:	e7d2      	b.n	8017454 <create_node+0x94>
 80174ae:	bf00      	nop
 80174b0:	2000f0dc 	.word	0x2000f0dc
 80174b4:	0801cf7c 	.word	0x0801cf7c
 80174b8:	2000f25c 	.word	0x2000f25c
 80174bc:	0801cc30 	.word	0x0801cc30

080174c0 <rmw_create_node>:
 80174c0:	468c      	mov	ip, r1
 80174c2:	4611      	mov	r1, r2
 80174c4:	f1bc 0f00 	cmp.w	ip, #0
 80174c8:	d00a      	beq.n	80174e0 <rmw_create_node+0x20>
 80174ca:	f89c 3000 	ldrb.w	r3, [ip]
 80174ce:	b13b      	cbz	r3, 80174e0 <rmw_create_node+0x20>
 80174d0:	b132      	cbz	r2, 80174e0 <rmw_create_node+0x20>
 80174d2:	7813      	ldrb	r3, [r2, #0]
 80174d4:	b123      	cbz	r3, 80174e0 <rmw_create_node+0x20>
 80174d6:	4603      	mov	r3, r0
 80174d8:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 80174da:	4660      	mov	r0, ip
 80174dc:	f7ff bf70 	b.w	80173c0 <create_node>
 80174e0:	2000      	movs	r0, #0
 80174e2:	4770      	bx	lr

080174e4 <rmw_destroy_node>:
 80174e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174e6:	b328      	cbz	r0, 8017534 <rmw_destroy_node+0x50>
 80174e8:	4607      	mov	r7, r0
 80174ea:	6800      	ldr	r0, [r0, #0]
 80174ec:	b120      	cbz	r0, 80174f8 <rmw_destroy_node+0x14>
 80174ee:	4b37      	ldr	r3, [pc, #220]	@ (80175cc <rmw_destroy_node+0xe8>)
 80174f0:	6819      	ldr	r1, [r3, #0]
 80174f2:	f7e8 fea5 	bl	8000240 <strcmp>
 80174f6:	b9e8      	cbnz	r0, 8017534 <rmw_destroy_node+0x50>
 80174f8:	687d      	ldr	r5, [r7, #4]
 80174fa:	b1dd      	cbz	r5, 8017534 <rmw_destroy_node+0x50>
 80174fc:	4b34      	ldr	r3, [pc, #208]	@ (80175d0 <rmw_destroy_node+0xec>)
 80174fe:	681c      	ldr	r4, [r3, #0]
 8017500:	2c00      	cmp	r4, #0
 8017502:	d060      	beq.n	80175c6 <rmw_destroy_node+0xe2>
 8017504:	2600      	movs	r6, #0
 8017506:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801750a:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 801750e:	429d      	cmp	r5, r3
 8017510:	d013      	beq.n	801753a <rmw_destroy_node+0x56>
 8017512:	2c00      	cmp	r4, #0
 8017514:	d1f7      	bne.n	8017506 <rmw_destroy_node+0x22>
 8017516:	4b2f      	ldr	r3, [pc, #188]	@ (80175d4 <rmw_destroy_node+0xf0>)
 8017518:	681c      	ldr	r4, [r3, #0]
 801751a:	b1c4      	cbz	r4, 801754e <rmw_destroy_node+0x6a>
 801751c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8017520:	6a0b      	ldr	r3, [r1, #32]
 8017522:	429d      	cmp	r5, r3
 8017524:	d1f9      	bne.n	801751a <rmw_destroy_node+0x36>
 8017526:	317c      	adds	r1, #124	@ 0x7c
 8017528:	4638      	mov	r0, r7
 801752a:	f000 fc49 	bl	8017dc0 <rmw_destroy_subscription>
 801752e:	2801      	cmp	r0, #1
 8017530:	4606      	mov	r6, r0
 8017532:	d1f2      	bne.n	801751a <rmw_destroy_node+0x36>
 8017534:	2601      	movs	r6, #1
 8017536:	4630      	mov	r0, r6
 8017538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801753a:	3184      	adds	r1, #132	@ 0x84
 801753c:	4638      	mov	r0, r7
 801753e:	f000 f94d 	bl	80177dc <rmw_destroy_publisher>
 8017542:	2801      	cmp	r0, #1
 8017544:	4606      	mov	r6, r0
 8017546:	d0f5      	beq.n	8017534 <rmw_destroy_node+0x50>
 8017548:	2c00      	cmp	r4, #0
 801754a:	d1dc      	bne.n	8017506 <rmw_destroy_node+0x22>
 801754c:	e7e3      	b.n	8017516 <rmw_destroy_node+0x32>
 801754e:	4b22      	ldr	r3, [pc, #136]	@ (80175d8 <rmw_destroy_node+0xf4>)
 8017550:	681c      	ldr	r4, [r3, #0]
 8017552:	b16c      	cbz	r4, 8017570 <rmw_destroy_node+0x8c>
 8017554:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8017558:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801755a:	429d      	cmp	r5, r3
 801755c:	d1f9      	bne.n	8017552 <rmw_destroy_node+0x6e>
 801755e:	317c      	adds	r1, #124	@ 0x7c
 8017560:	4638      	mov	r0, r7
 8017562:	f000 fadf 	bl	8017b24 <rmw_destroy_service>
 8017566:	2801      	cmp	r0, #1
 8017568:	4606      	mov	r6, r0
 801756a:	d0e3      	beq.n	8017534 <rmw_destroy_node+0x50>
 801756c:	2c00      	cmp	r4, #0
 801756e:	d1f1      	bne.n	8017554 <rmw_destroy_node+0x70>
 8017570:	4b1a      	ldr	r3, [pc, #104]	@ (80175dc <rmw_destroy_node+0xf8>)
 8017572:	681c      	ldr	r4, [r3, #0]
 8017574:	b16c      	cbz	r4, 8017592 <rmw_destroy_node+0xae>
 8017576:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801757a:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801757c:	429d      	cmp	r5, r3
 801757e:	d1f9      	bne.n	8017574 <rmw_destroy_node+0x90>
 8017580:	317c      	adds	r1, #124	@ 0x7c
 8017582:	4638      	mov	r0, r7
 8017584:	f7ff fc4a 	bl	8016e1c <rmw_destroy_client>
 8017588:	2801      	cmp	r0, #1
 801758a:	4606      	mov	r6, r0
 801758c:	d0d2      	beq.n	8017534 <rmw_destroy_node+0x50>
 801758e:	2c00      	cmp	r4, #0
 8017590:	d1f1      	bne.n	8017576 <rmw_destroy_node+0x92>
 8017592:	6928      	ldr	r0, [r5, #16]
 8017594:	696a      	ldr	r2, [r5, #20]
 8017596:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801759a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801759e:	6819      	ldr	r1, [r3, #0]
 80175a0:	f000 fffc 	bl	801859c <uxr_buffer_delete_entity>
 80175a4:	4602      	mov	r2, r0
 80175a6:	6928      	ldr	r0, [r5, #16]
 80175a8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80175ac:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80175b0:	f000 fe56 	bl	8018260 <run_xrce_session>
 80175b4:	4603      	mov	r3, r0
 80175b6:	4638      	mov	r0, r7
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	bf08      	it	eq
 80175bc:	2602      	moveq	r6, #2
 80175be:	f7f8 fcd7 	bl	800ff70 <rmw_uxrce_fini_node_memory>
 80175c2:	4630      	mov	r0, r6
 80175c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80175c6:	4626      	mov	r6, r4
 80175c8:	e7a5      	b.n	8017516 <rmw_destroy_node+0x32>
 80175ca:	bf00      	nop
 80175cc:	0801d578 	.word	0x0801d578
 80175d0:	2000f0ec 	.word	0x2000f0ec
 80175d4:	2000f12c 	.word	0x2000f12c
 80175d8:	2000f0fc 	.word	0x2000f0fc
 80175dc:	2000a810 	.word	0x2000a810

080175e0 <rmw_node_get_graph_guard_condition>:
 80175e0:	6843      	ldr	r3, [r0, #4]
 80175e2:	6918      	ldr	r0, [r3, #16]
 80175e4:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 80175e8:	4770      	bx	lr
 80175ea:	bf00      	nop

080175ec <rmw_create_publisher>:
 80175ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175f0:	b087      	sub	sp, #28
 80175f2:	2800      	cmp	r0, #0
 80175f4:	f000 80d2 	beq.w	801779c <rmw_create_publisher+0x1b0>
 80175f8:	460e      	mov	r6, r1
 80175fa:	2900      	cmp	r1, #0
 80175fc:	f000 80ce 	beq.w	801779c <rmw_create_publisher+0x1b0>
 8017600:	4604      	mov	r4, r0
 8017602:	6800      	ldr	r0, [r0, #0]
 8017604:	4615      	mov	r5, r2
 8017606:	461f      	mov	r7, r3
 8017608:	f000 fea4 	bl	8018354 <is_uxrce_rmw_identifier_valid>
 801760c:	f080 0001 	eor.w	r0, r0, #1
 8017610:	b2c0      	uxtb	r0, r0
 8017612:	2800      	cmp	r0, #0
 8017614:	f040 80c2 	bne.w	801779c <rmw_create_publisher+0x1b0>
 8017618:	2d00      	cmp	r5, #0
 801761a:	f000 80bf 	beq.w	801779c <rmw_create_publisher+0x1b0>
 801761e:	782b      	ldrb	r3, [r5, #0]
 8017620:	2b00      	cmp	r3, #0
 8017622:	f000 80bb 	beq.w	801779c <rmw_create_publisher+0x1b0>
 8017626:	2f00      	cmp	r7, #0
 8017628:	f000 80b8 	beq.w	801779c <rmw_create_publisher+0x1b0>
 801762c:	485e      	ldr	r0, [pc, #376]	@ (80177a8 <rmw_create_publisher+0x1bc>)
 801762e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8017632:	f7ff fbcf 	bl	8016dd4 <get_memory>
 8017636:	2800      	cmp	r0, #0
 8017638:	f000 80b0 	beq.w	801779c <rmw_create_publisher+0x1b0>
 801763c:	6884      	ldr	r4, [r0, #8]
 801763e:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 8017642:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 8017646:	f7ff fc2d 	bl	8016ea4 <rmw_get_implementation_identifier>
 801764a:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 801764e:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 8017652:	4628      	mov	r0, r5
 8017654:	f7e8 fdfe 	bl	8000254 <strlen>
 8017658:	3001      	adds	r0, #1
 801765a:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 801765e:	283c      	cmp	r0, #60	@ 0x3c
 8017660:	f200 808f 	bhi.w	8017782 <rmw_create_publisher+0x196>
 8017664:	462b      	mov	r3, r5
 8017666:	4a51      	ldr	r2, [pc, #324]	@ (80177ac <rmw_create_publisher+0x1c0>)
 8017668:	213c      	movs	r1, #60	@ 0x3c
 801766a:	4650      	mov	r0, sl
 801766c:	f003 fe40 	bl	801b2f0 <sniprintf>
 8017670:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017674:	4639      	mov	r1, r7
 8017676:	2250      	movs	r2, #80	@ 0x50
 8017678:	67e3      	str	r3, [r4, #124]	@ 0x7c
 801767a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801767e:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 8017682:	f004 f872 	bl	801b76a <memcpy>
 8017686:	7a3b      	ldrb	r3, [r7, #8]
 8017688:	4630      	mov	r0, r6
 801768a:	4949      	ldr	r1, [pc, #292]	@ (80177b0 <rmw_create_publisher+0x1c4>)
 801768c:	2b02      	cmp	r3, #2
 801768e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017692:	bf0c      	ite	eq
 8017694:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 8017698:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 801769c:	67a3      	str	r3, [r4, #120]	@ 0x78
 801769e:	2300      	movs	r3, #0
 80176a0:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80176a4:	f7f8 fde2 	bl	801026c <get_message_typesupport_handle>
 80176a8:	2800      	cmp	r0, #0
 80176aa:	d06a      	beq.n	8017782 <rmw_create_publisher+0x196>
 80176ac:	6842      	ldr	r2, [r0, #4]
 80176ae:	61a2      	str	r2, [r4, #24]
 80176b0:	2a00      	cmp	r2, #0
 80176b2:	d066      	beq.n	8017782 <rmw_create_publisher+0x196>
 80176b4:	4629      	mov	r1, r5
 80176b6:	463b      	mov	r3, r7
 80176b8:	4648      	mov	r0, r9
 80176ba:	f003 f9df 	bl	801aa7c <create_topic>
 80176be:	6260      	str	r0, [r4, #36]	@ 0x24
 80176c0:	2800      	cmp	r0, #0
 80176c2:	d062      	beq.n	801778a <rmw_create_publisher+0x19e>
 80176c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80176c8:	2103      	movs	r1, #3
 80176ca:	2506      	movs	r5, #6
 80176cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80176d0:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 80176d4:	1c42      	adds	r2, r0, #1
 80176d6:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 80176da:	f001 fc13 	bl	8018f04 <uxr_object_id>
 80176de:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 80176e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80176e6:	6120      	str	r0, [r4, #16]
 80176e8:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 80176ec:	6910      	ldr	r0, [r2, #16]
 80176ee:	9500      	str	r5, [sp, #0]
 80176f0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80176f4:	6819      	ldr	r1, [r3, #0]
 80176f6:	6922      	ldr	r2, [r4, #16]
 80176f8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80176fc:	f001 f802 	bl	8018704 <uxr_buffer_create_publisher_bin>
 8017700:	4602      	mov	r2, r0
 8017702:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8017706:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801770a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801770e:	f000 fda7 	bl	8018260 <run_xrce_session>
 8017712:	b3b0      	cbz	r0, 8017782 <rmw_create_publisher+0x196>
 8017714:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017718:	2105      	movs	r1, #5
 801771a:	f10d 0a10 	add.w	sl, sp, #16
 801771e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017722:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 8017726:	1c42      	adds	r2, r0, #1
 8017728:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 801772c:	f001 fbea 	bl	8018f04 <uxr_object_id>
 8017730:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8017734:	4639      	mov	r1, r7
 8017736:	6160      	str	r0, [r4, #20]
 8017738:	691e      	ldr	r6, [r3, #16]
 801773a:	4650      	mov	r0, sl
 801773c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017740:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8017744:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 8017748:	f8d3 7384 	ldr.w	r7, [r3, #900]	@ 0x384
 801774c:	f000 fda4 	bl	8018298 <convert_qos_profile>
 8017750:	9503      	str	r5, [sp, #12]
 8017752:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8017756:	9001      	str	r0, [sp, #4]
 8017758:	4630      	mov	r0, r6
 801775a:	f8ad 1008 	strh.w	r1, [sp, #8]
 801775e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8017762:	9300      	str	r3, [sp, #0]
 8017764:	6839      	ldr	r1, [r7, #0]
 8017766:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801776a:	f001 f82b 	bl	80187c4 <uxr_buffer_create_datawriter_bin>
 801776e:	4602      	mov	r2, r0
 8017770:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8017774:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8017778:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801777c:	f000 fd70 	bl	8018260 <run_xrce_session>
 8017780:	b970      	cbnz	r0, 80177a0 <rmw_create_publisher+0x1b4>
 8017782:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8017784:	b108      	cbz	r0, 801778a <rmw_create_publisher+0x19e>
 8017786:	f7f8 fc63 	bl	8010050 <rmw_uxrce_fini_topic_memory>
 801778a:	4640      	mov	r0, r8
 801778c:	f04f 0800 	mov.w	r8, #0
 8017790:	f7f8 fc06 	bl	800ffa0 <rmw_uxrce_fini_publisher_memory>
 8017794:	4640      	mov	r0, r8
 8017796:	b007      	add	sp, #28
 8017798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801779c:	f04f 0800 	mov.w	r8, #0
 80177a0:	4640      	mov	r0, r8
 80177a2:	b007      	add	sp, #28
 80177a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177a8:	2000f0ec 	.word	0x2000f0ec
 80177ac:	0801cf7c 	.word	0x0801cf7c
 80177b0:	0801c6a8 	.word	0x0801c6a8

080177b4 <rmw_publisher_get_actual_qos>:
 80177b4:	b178      	cbz	r0, 80177d6 <rmw_publisher_get_actual_qos+0x22>
 80177b6:	b510      	push	{r4, lr}
 80177b8:	fab1 f481 	clz	r4, r1
 80177bc:	0964      	lsrs	r4, r4, #5
 80177be:	b141      	cbz	r1, 80177d2 <rmw_publisher_get_actual_qos+0x1e>
 80177c0:	6843      	ldr	r3, [r0, #4]
 80177c2:	2250      	movs	r2, #80	@ 0x50
 80177c4:	4608      	mov	r0, r1
 80177c6:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80177ca:	f003 ffce 	bl	801b76a <memcpy>
 80177ce:	4620      	mov	r0, r4
 80177d0:	bd10      	pop	{r4, pc}
 80177d2:	200b      	movs	r0, #11
 80177d4:	bd10      	pop	{r4, pc}
 80177d6:	200b      	movs	r0, #11
 80177d8:	4770      	bx	lr
 80177da:	bf00      	nop

080177dc <rmw_destroy_publisher>:
 80177dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177e0:	b128      	cbz	r0, 80177ee <rmw_destroy_publisher+0x12>
 80177e2:	4604      	mov	r4, r0
 80177e4:	6800      	ldr	r0, [r0, #0]
 80177e6:	460d      	mov	r5, r1
 80177e8:	f000 fdb4 	bl	8018354 <is_uxrce_rmw_identifier_valid>
 80177ec:	b918      	cbnz	r0, 80177f6 <rmw_destroy_publisher+0x1a>
 80177ee:	2401      	movs	r4, #1
 80177f0:	4620      	mov	r0, r4
 80177f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177f6:	6863      	ldr	r3, [r4, #4]
 80177f8:	2b00      	cmp	r3, #0
 80177fa:	d0f8      	beq.n	80177ee <rmw_destroy_publisher+0x12>
 80177fc:	fab5 f485 	clz	r4, r5
 8017800:	0964      	lsrs	r4, r4, #5
 8017802:	2d00      	cmp	r5, #0
 8017804:	d0f3      	beq.n	80177ee <rmw_destroy_publisher+0x12>
 8017806:	6828      	ldr	r0, [r5, #0]
 8017808:	f000 fda4 	bl	8018354 <is_uxrce_rmw_identifier_valid>
 801780c:	2800      	cmp	r0, #0
 801780e:	d0ee      	beq.n	80177ee <rmw_destroy_publisher+0x12>
 8017810:	686e      	ldr	r6, [r5, #4]
 8017812:	2e00      	cmp	r6, #0
 8017814:	d0eb      	beq.n	80177ee <rmw_destroy_publisher+0x12>
 8017816:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8017818:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 801781c:	f003 f97e 	bl	801ab1c <destroy_topic>
 8017820:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8017824:	6972      	ldr	r2, [r6, #20]
 8017826:	6918      	ldr	r0, [r3, #16]
 8017828:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801782c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017830:	6819      	ldr	r1, [r3, #0]
 8017832:	f000 feb3 	bl	801859c <uxr_buffer_delete_entity>
 8017836:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801783a:	4680      	mov	r8, r0
 801783c:	6932      	ldr	r2, [r6, #16]
 801783e:	6918      	ldr	r0, [r3, #16]
 8017840:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017844:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017848:	6819      	ldr	r1, [r3, #0]
 801784a:	f000 fea7 	bl	801859c <uxr_buffer_delete_entity>
 801784e:	4606      	mov	r6, r0
 8017850:	6938      	ldr	r0, [r7, #16]
 8017852:	4642      	mov	r2, r8
 8017854:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017858:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801785c:	f000 fd00 	bl	8018260 <run_xrce_session>
 8017860:	693f      	ldr	r7, [r7, #16]
 8017862:	4632      	mov	r2, r6
 8017864:	4606      	mov	r6, r0
 8017866:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801786a:	4638      	mov	r0, r7
 801786c:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8017870:	f000 fcf6 	bl	8018260 <run_xrce_session>
 8017874:	b126      	cbz	r6, 8017880 <rmw_destroy_publisher+0xa4>
 8017876:	b118      	cbz	r0, 8017880 <rmw_destroy_publisher+0xa4>
 8017878:	4628      	mov	r0, r5
 801787a:	f7f8 fb91 	bl	800ffa0 <rmw_uxrce_fini_publisher_memory>
 801787e:	e7b7      	b.n	80177f0 <rmw_destroy_publisher+0x14>
 8017880:	2402      	movs	r4, #2
 8017882:	e7f9      	b.n	8017878 <rmw_destroy_publisher+0x9c>

08017884 <rmw_send_request>:
 8017884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017888:	4604      	mov	r4, r0
 801788a:	6800      	ldr	r0, [r0, #0]
 801788c:	b08b      	sub	sp, #44	@ 0x2c
 801788e:	460e      	mov	r6, r1
 8017890:	4615      	mov	r5, r2
 8017892:	b128      	cbz	r0, 80178a0 <rmw_send_request+0x1c>
 8017894:	4b21      	ldr	r3, [pc, #132]	@ (801791c <rmw_send_request+0x98>)
 8017896:	6819      	ldr	r1, [r3, #0]
 8017898:	f7e8 fcd2 	bl	8000240 <strcmp>
 801789c:	2800      	cmp	r0, #0
 801789e:	d139      	bne.n	8017914 <rmw_send_request+0x90>
 80178a0:	6864      	ldr	r4, [r4, #4]
 80178a2:	2700      	movs	r7, #0
 80178a4:	6963      	ldr	r3, [r4, #20]
 80178a6:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 80178aa:	689b      	ldr	r3, [r3, #8]
 80178ac:	4798      	blx	r3
 80178ae:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80178b2:	4630      	mov	r0, r6
 80178b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80178b8:	4798      	blx	r3
 80178ba:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80178be:	9000      	str	r0, [sp, #0]
 80178c0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80178c4:	6922      	ldr	r2, [r4, #16]
 80178c6:	ab02      	add	r3, sp, #8
 80178c8:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80178ca:	f002 fc4b 	bl	801a164 <uxr_prepare_output_stream>
 80178ce:	e9c5 0700 	strd	r0, r7, [r5]
 80178d2:	b198      	cbz	r0, 80178fc <rmw_send_request+0x78>
 80178d4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80178d8:	a902      	add	r1, sp, #8
 80178da:	4630      	mov	r0, r6
 80178dc:	4798      	blx	r3
 80178de:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 80178e2:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80178e6:	2b01      	cmp	r3, #1
 80178e8:	d00c      	beq.n	8017904 <rmw_send_request+0x80>
 80178ea:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80178ec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80178f0:	f7fa f994 	bl	8011c1c <uxr_run_session_until_confirm_delivery>
 80178f4:	4638      	mov	r0, r7
 80178f6:	b00b      	add	sp, #44	@ 0x2c
 80178f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178fc:	2001      	movs	r0, #1
 80178fe:	b00b      	add	sp, #44	@ 0x2c
 8017900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017904:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017908:	f7f9 fdce 	bl	80114a8 <uxr_flash_output_streams>
 801790c:	4638      	mov	r0, r7
 801790e:	b00b      	add	sp, #44	@ 0x2c
 8017910:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017914:	200c      	movs	r0, #12
 8017916:	b00b      	add	sp, #44	@ 0x2c
 8017918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801791c:	0801d578 	.word	0x0801d578

08017920 <rmw_take_request>:
 8017920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017924:	4605      	mov	r5, r0
 8017926:	6800      	ldr	r0, [r0, #0]
 8017928:	b089      	sub	sp, #36	@ 0x24
 801792a:	460c      	mov	r4, r1
 801792c:	4690      	mov	r8, r2
 801792e:	461e      	mov	r6, r3
 8017930:	b128      	cbz	r0, 801793e <rmw_take_request+0x1e>
 8017932:	4b28      	ldr	r3, [pc, #160]	@ (80179d4 <rmw_take_request+0xb4>)
 8017934:	6819      	ldr	r1, [r3, #0]
 8017936:	f7e8 fc83 	bl	8000240 <strcmp>
 801793a:	2800      	cmp	r0, #0
 801793c:	d146      	bne.n	80179cc <rmw_take_request+0xac>
 801793e:	b10e      	cbz	r6, 8017944 <rmw_take_request+0x24>
 8017940:	2300      	movs	r3, #0
 8017942:	7033      	strb	r3, [r6, #0]
 8017944:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8017948:	f7f8 fc12 	bl	8010170 <rmw_uxrce_clean_expired_static_input_buffer>
 801794c:	4648      	mov	r0, r9
 801794e:	f7f8 fbe5 	bl	801011c <rmw_uxrce_find_static_input_buffer_by_owner>
 8017952:	4607      	mov	r7, r0
 8017954:	b3b0      	cbz	r0, 80179c4 <rmw_take_request+0xa4>
 8017956:	6885      	ldr	r5, [r0, #8]
 8017958:	f8d5 2838 	ldr.w	r2, [r5, #2104]	@ 0x838
 801795c:	f8d5 383c 	ldr.w	r3, [r5, #2108]	@ 0x83c
 8017960:	e9c4 3208 	strd	r3, r2, [r4, #32]
 8017964:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8017968:	7423      	strb	r3, [r4, #16]
 801796a:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	@ 0x834
 801796e:	f895 3836 	ldrb.w	r3, [r5, #2102]	@ 0x836
 8017972:	f8a4 2011 	strh.w	r2, [r4, #17]
 8017976:	74e3      	strb	r3, [r4, #19]
 8017978:	f8d5 1828 	ldr.w	r1, [r5, #2088]	@ 0x828
 801797c:	f8d5 282c 	ldr.w	r2, [r5, #2092]	@ 0x82c
 8017980:	f8d5 3830 	ldr.w	r3, [r5, #2096]	@ 0x830
 8017984:	6161      	str	r1, [r4, #20]
 8017986:	61a2      	str	r2, [r4, #24]
 8017988:	61e3      	str	r3, [r4, #28]
 801798a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801798e:	689b      	ldr	r3, [r3, #8]
 8017990:	4798      	blx	r3
 8017992:	6844      	ldr	r4, [r0, #4]
 8017994:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8017998:	f105 0110 	add.w	r1, r5, #16
 801799c:	4668      	mov	r0, sp
 801799e:	f7f7 f8e3 	bl	800eb68 <ucdr_init_buffer>
 80179a2:	4641      	mov	r1, r8
 80179a4:	68e3      	ldr	r3, [r4, #12]
 80179a6:	4668      	mov	r0, sp
 80179a8:	4798      	blx	r3
 80179aa:	4639      	mov	r1, r7
 80179ac:	4604      	mov	r4, r0
 80179ae:	480a      	ldr	r0, [pc, #40]	@ (80179d8 <rmw_take_request+0xb8>)
 80179b0:	f7ff fa20 	bl	8016df4 <put_memory>
 80179b4:	b106      	cbz	r6, 80179b8 <rmw_take_request+0x98>
 80179b6:	7034      	strb	r4, [r6, #0]
 80179b8:	f084 0001 	eor.w	r0, r4, #1
 80179bc:	b2c0      	uxtb	r0, r0
 80179be:	b009      	add	sp, #36	@ 0x24
 80179c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80179c4:	2001      	movs	r0, #1
 80179c6:	b009      	add	sp, #36	@ 0x24
 80179c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80179cc:	200c      	movs	r0, #12
 80179ce:	b009      	add	sp, #36	@ 0x24
 80179d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80179d4:	0801d578 	.word	0x0801d578
 80179d8:	2000f11c 	.word	0x2000f11c

080179dc <rmw_send_response>:
 80179dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80179de:	4605      	mov	r5, r0
 80179e0:	6800      	ldr	r0, [r0, #0]
 80179e2:	b091      	sub	sp, #68	@ 0x44
 80179e4:	460c      	mov	r4, r1
 80179e6:	4616      	mov	r6, r2
 80179e8:	b128      	cbz	r0, 80179f6 <rmw_send_response+0x1a>
 80179ea:	4b29      	ldr	r3, [pc, #164]	@ (8017a90 <rmw_send_response+0xb4>)
 80179ec:	6819      	ldr	r1, [r3, #0]
 80179ee:	f7e8 fc27 	bl	8000240 <strcmp>
 80179f2:	2800      	cmp	r0, #0
 80179f4:	d141      	bne.n	8017a7a <rmw_send_response+0x9e>
 80179f6:	686d      	ldr	r5, [r5, #4]
 80179f8:	68a1      	ldr	r1, [r4, #8]
 80179fa:	6860      	ldr	r0, [r4, #4]
 80179fc:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 80179fe:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8017a02:	9307      	str	r3, [sp, #28]
 8017a04:	4623      	mov	r3, r4
 8017a06:	9206      	str	r2, [sp, #24]
 8017a08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017a0c:	789b      	ldrb	r3, [r3, #2]
 8017a0e:	f88d 2017 	strb.w	r2, [sp, #23]
 8017a12:	f88d 3016 	strb.w	r3, [sp, #22]
 8017a16:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8017a1a:	68e2      	ldr	r2, [r4, #12]
 8017a1c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017a20:	ab02      	add	r3, sp, #8
 8017a22:	696c      	ldr	r4, [r5, #20]
 8017a24:	c307      	stmia	r3!, {r0, r1, r2}
 8017a26:	68e3      	ldr	r3, [r4, #12]
 8017a28:	4798      	blx	r3
 8017a2a:	6844      	ldr	r4, [r0, #4]
 8017a2c:	4630      	mov	r0, r6
 8017a2e:	6923      	ldr	r3, [r4, #16]
 8017a30:	4798      	blx	r3
 8017a32:	f100 0318 	add.w	r3, r0, #24
 8017a36:	6938      	ldr	r0, [r7, #16]
 8017a38:	9300      	str	r3, [sp, #0]
 8017a3a:	ab08      	add	r3, sp, #32
 8017a3c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017a40:	692a      	ldr	r2, [r5, #16]
 8017a42:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8017a44:	f002 fb8e 	bl	801a164 <uxr_prepare_output_stream>
 8017a48:	b910      	cbnz	r0, 8017a50 <rmw_send_response+0x74>
 8017a4a:	2001      	movs	r0, #1
 8017a4c:	b011      	add	sp, #68	@ 0x44
 8017a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a50:	a902      	add	r1, sp, #8
 8017a52:	a808      	add	r0, sp, #32
 8017a54:	f7fb fe94 	bl	8013780 <uxr_serialize_SampleIdentity>
 8017a58:	68a3      	ldr	r3, [r4, #8]
 8017a5a:	a908      	add	r1, sp, #32
 8017a5c:	4630      	mov	r0, r6
 8017a5e:	4798      	blx	r3
 8017a60:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8017a64:	6938      	ldr	r0, [r7, #16]
 8017a66:	2b01      	cmp	r3, #1
 8017a68:	d00a      	beq.n	8017a80 <rmw_send_response+0xa4>
 8017a6a:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8017a6c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017a70:	f7fa f8d4 	bl	8011c1c <uxr_run_session_until_confirm_delivery>
 8017a74:	2000      	movs	r0, #0
 8017a76:	b011      	add	sp, #68	@ 0x44
 8017a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a7a:	200c      	movs	r0, #12
 8017a7c:	b011      	add	sp, #68	@ 0x44
 8017a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a80:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017a84:	f7f9 fd10 	bl	80114a8 <uxr_flash_output_streams>
 8017a88:	2000      	movs	r0, #0
 8017a8a:	b011      	add	sp, #68	@ 0x44
 8017a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a8e:	bf00      	nop
 8017a90:	0801d578 	.word	0x0801d578

08017a94 <rmw_take_response>:
 8017a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a98:	4604      	mov	r4, r0
 8017a9a:	6800      	ldr	r0, [r0, #0]
 8017a9c:	b088      	sub	sp, #32
 8017a9e:	460f      	mov	r7, r1
 8017aa0:	4690      	mov	r8, r2
 8017aa2:	461d      	mov	r5, r3
 8017aa4:	b120      	cbz	r0, 8017ab0 <rmw_take_response+0x1c>
 8017aa6:	4b1d      	ldr	r3, [pc, #116]	@ (8017b1c <rmw_take_response+0x88>)
 8017aa8:	6819      	ldr	r1, [r3, #0]
 8017aaa:	f7e8 fbc9 	bl	8000240 <strcmp>
 8017aae:	bb68      	cbnz	r0, 8017b0c <rmw_take_response+0x78>
 8017ab0:	b10d      	cbz	r5, 8017ab6 <rmw_take_response+0x22>
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	702b      	strb	r3, [r5, #0]
 8017ab6:	6864      	ldr	r4, [r4, #4]
 8017ab8:	f7f8 fb5a 	bl	8010170 <rmw_uxrce_clean_expired_static_input_buffer>
 8017abc:	4620      	mov	r0, r4
 8017abe:	f7f8 fb2d 	bl	801011c <rmw_uxrce_find_static_input_buffer_by_owner>
 8017ac2:	4606      	mov	r6, r0
 8017ac4:	b330      	cbz	r0, 8017b14 <rmw_take_response+0x80>
 8017ac6:	6963      	ldr	r3, [r4, #20]
 8017ac8:	6884      	ldr	r4, [r0, #8]
 8017aca:	68db      	ldr	r3, [r3, #12]
 8017acc:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8017ad0:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8017ad4:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8017ad8:	4798      	blx	r3
 8017ada:	6847      	ldr	r7, [r0, #4]
 8017adc:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8017ae0:	f104 0110 	add.w	r1, r4, #16
 8017ae4:	4668      	mov	r0, sp
 8017ae6:	f7f7 f83f 	bl	800eb68 <ucdr_init_buffer>
 8017aea:	4641      	mov	r1, r8
 8017aec:	68fb      	ldr	r3, [r7, #12]
 8017aee:	4668      	mov	r0, sp
 8017af0:	4798      	blx	r3
 8017af2:	4631      	mov	r1, r6
 8017af4:	4604      	mov	r4, r0
 8017af6:	480a      	ldr	r0, [pc, #40]	@ (8017b20 <rmw_take_response+0x8c>)
 8017af8:	f7ff f97c 	bl	8016df4 <put_memory>
 8017afc:	b105      	cbz	r5, 8017b00 <rmw_take_response+0x6c>
 8017afe:	702c      	strb	r4, [r5, #0]
 8017b00:	f084 0001 	eor.w	r0, r4, #1
 8017b04:	b2c0      	uxtb	r0, r0
 8017b06:	b008      	add	sp, #32
 8017b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b0c:	200c      	movs	r0, #12
 8017b0e:	b008      	add	sp, #32
 8017b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b14:	2001      	movs	r0, #1
 8017b16:	b008      	add	sp, #32
 8017b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b1c:	0801d578 	.word	0x0801d578
 8017b20:	2000f11c 	.word	0x2000f11c

08017b24 <rmw_destroy_service>:
 8017b24:	b570      	push	{r4, r5, r6, lr}
 8017b26:	b128      	cbz	r0, 8017b34 <rmw_destroy_service+0x10>
 8017b28:	4604      	mov	r4, r0
 8017b2a:	6800      	ldr	r0, [r0, #0]
 8017b2c:	460d      	mov	r5, r1
 8017b2e:	f000 fc11 	bl	8018354 <is_uxrce_rmw_identifier_valid>
 8017b32:	b910      	cbnz	r0, 8017b3a <rmw_destroy_service+0x16>
 8017b34:	2401      	movs	r4, #1
 8017b36:	4620      	mov	r0, r4
 8017b38:	bd70      	pop	{r4, r5, r6, pc}
 8017b3a:	6863      	ldr	r3, [r4, #4]
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d0f9      	beq.n	8017b34 <rmw_destroy_service+0x10>
 8017b40:	2d00      	cmp	r5, #0
 8017b42:	d0f7      	beq.n	8017b34 <rmw_destroy_service+0x10>
 8017b44:	6828      	ldr	r0, [r5, #0]
 8017b46:	f000 fc05 	bl	8018354 <is_uxrce_rmw_identifier_valid>
 8017b4a:	2800      	cmp	r0, #0
 8017b4c:	d0f2      	beq.n	8017b34 <rmw_destroy_service+0x10>
 8017b4e:	686e      	ldr	r6, [r5, #4]
 8017b50:	2e00      	cmp	r6, #0
 8017b52:	d0ef      	beq.n	8017b34 <rmw_destroy_service+0x10>
 8017b54:	6864      	ldr	r4, [r4, #4]
 8017b56:	6932      	ldr	r2, [r6, #16]
 8017b58:	6920      	ldr	r0, [r4, #16]
 8017b5a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017b5e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017b62:	6819      	ldr	r1, [r3, #0]
 8017b64:	f001 fd6c 	bl	8019640 <uxr_buffer_cancel_data>
 8017b68:	4602      	mov	r2, r0
 8017b6a:	6920      	ldr	r0, [r4, #16]
 8017b6c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017b70:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017b74:	f000 fb74 	bl	8018260 <run_xrce_session>
 8017b78:	6920      	ldr	r0, [r4, #16]
 8017b7a:	6932      	ldr	r2, [r6, #16]
 8017b7c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017b80:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017b84:	6819      	ldr	r1, [r3, #0]
 8017b86:	f000 fd09 	bl	801859c <uxr_buffer_delete_entity>
 8017b8a:	4602      	mov	r2, r0
 8017b8c:	6920      	ldr	r0, [r4, #16]
 8017b8e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017b92:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017b96:	f000 fb63 	bl	8018260 <run_xrce_session>
 8017b9a:	4603      	mov	r3, r0
 8017b9c:	4628      	mov	r0, r5
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	bf14      	ite	ne
 8017ba2:	2400      	movne	r4, #0
 8017ba4:	2402      	moveq	r4, #2
 8017ba6:	f7f8 fa27 	bl	800fff8 <rmw_uxrce_fini_service_memory>
 8017baa:	e7c4      	b.n	8017b36 <rmw_destroy_service+0x12>

08017bac <rmw_create_subscription>:
 8017bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bb0:	b08d      	sub	sp, #52	@ 0x34
 8017bb2:	2900      	cmp	r1, #0
 8017bb4:	f000 80d8 	beq.w	8017d68 <rmw_create_subscription+0x1bc>
 8017bb8:	4604      	mov	r4, r0
 8017bba:	2800      	cmp	r0, #0
 8017bbc:	f000 80d4 	beq.w	8017d68 <rmw_create_subscription+0x1bc>
 8017bc0:	6800      	ldr	r0, [r0, #0]
 8017bc2:	460e      	mov	r6, r1
 8017bc4:	4615      	mov	r5, r2
 8017bc6:	461f      	mov	r7, r3
 8017bc8:	f000 fbc4 	bl	8018354 <is_uxrce_rmw_identifier_valid>
 8017bcc:	f080 0001 	eor.w	r0, r0, #1
 8017bd0:	b2c0      	uxtb	r0, r0
 8017bd2:	2800      	cmp	r0, #0
 8017bd4:	f040 80c8 	bne.w	8017d68 <rmw_create_subscription+0x1bc>
 8017bd8:	2d00      	cmp	r5, #0
 8017bda:	f000 80c5 	beq.w	8017d68 <rmw_create_subscription+0x1bc>
 8017bde:	782b      	ldrb	r3, [r5, #0]
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	f000 80c1 	beq.w	8017d68 <rmw_create_subscription+0x1bc>
 8017be6:	2f00      	cmp	r7, #0
 8017be8:	f000 80be 	beq.w	8017d68 <rmw_create_subscription+0x1bc>
 8017bec:	4867      	ldr	r0, [pc, #412]	@ (8017d8c <rmw_create_subscription+0x1e0>)
 8017bee:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8017bf2:	f7ff f8ef 	bl	8016dd4 <get_memory>
 8017bf6:	4604      	mov	r4, r0
 8017bf8:	2800      	cmp	r0, #0
 8017bfa:	f000 80b6 	beq.w	8017d6a <rmw_create_subscription+0x1be>
 8017bfe:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8017c02:	f108 0a98 	add.w	sl, r8, #152	@ 0x98
 8017c06:	f8c8 8080 	str.w	r8, [r8, #128]	@ 0x80
 8017c0a:	f7ff f94b 	bl	8016ea4 <rmw_get_implementation_identifier>
 8017c0e:	f8c8 007c 	str.w	r0, [r8, #124]	@ 0x7c
 8017c12:	f8c8 a084 	str.w	sl, [r8, #132]	@ 0x84
 8017c16:	4628      	mov	r0, r5
 8017c18:	f7e8 fb1c 	bl	8000254 <strlen>
 8017c1c:	3001      	adds	r0, #1
 8017c1e:	f108 047c 	add.w	r4, r8, #124	@ 0x7c
 8017c22:	283c      	cmp	r0, #60	@ 0x3c
 8017c24:	f200 80a5 	bhi.w	8017d72 <rmw_create_subscription+0x1c6>
 8017c28:	462b      	mov	r3, r5
 8017c2a:	4a59      	ldr	r2, [pc, #356]	@ (8017d90 <rmw_create_subscription+0x1e4>)
 8017c2c:	213c      	movs	r1, #60	@ 0x3c
 8017c2e:	4650      	mov	r0, sl
 8017c30:	f003 fb5e 	bl	801b2f0 <sniprintf>
 8017c34:	4639      	mov	r1, r7
 8017c36:	2250      	movs	r2, #80	@ 0x50
 8017c38:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 8017c3c:	f8c8 9020 	str.w	r9, [r8, #32]
 8017c40:	f003 fd93 	bl	801b76a <memcpy>
 8017c44:	4630      	mov	r0, r6
 8017c46:	4953      	ldr	r1, [pc, #332]	@ (8017d94 <rmw_create_subscription+0x1e8>)
 8017c48:	f7f8 fb10 	bl	801026c <get_message_typesupport_handle>
 8017c4c:	2800      	cmp	r0, #0
 8017c4e:	f000 8090 	beq.w	8017d72 <rmw_create_subscription+0x1c6>
 8017c52:	6842      	ldr	r2, [r0, #4]
 8017c54:	f8c8 2018 	str.w	r2, [r8, #24]
 8017c58:	2a00      	cmp	r2, #0
 8017c5a:	f000 808a 	beq.w	8017d72 <rmw_create_subscription+0x1c6>
 8017c5e:	4629      	mov	r1, r5
 8017c60:	463b      	mov	r3, r7
 8017c62:	4648      	mov	r0, r9
 8017c64:	f002 ff0a 	bl	801aa7c <create_topic>
 8017c68:	f8c8 001c 	str.w	r0, [r8, #28]
 8017c6c:	2800      	cmp	r0, #0
 8017c6e:	f000 8085 	beq.w	8017d7c <rmw_create_subscription+0x1d0>
 8017c72:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017c76:	2104      	movs	r1, #4
 8017c78:	2506      	movs	r5, #6
 8017c7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017c7e:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8017c82:	1c42      	adds	r2, r0, #1
 8017c84:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 8017c88:	f001 f93c 	bl	8018f04 <uxr_object_id>
 8017c8c:	f8c8 0010 	str.w	r0, [r8, #16]
 8017c90:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8017c94:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8017c98:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017c9c:	9500      	str	r5, [sp, #0]
 8017c9e:	6819      	ldr	r1, [r3, #0]
 8017ca0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017ca4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8017ca8:	f000 fd5c 	bl	8018764 <uxr_buffer_create_subscriber_bin>
 8017cac:	4602      	mov	r2, r0
 8017cae:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8017cb2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8017cb6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8017cba:	f000 fad1 	bl	8018260 <run_xrce_session>
 8017cbe:	2800      	cmp	r0, #0
 8017cc0:	d057      	beq.n	8017d72 <rmw_create_subscription+0x1c6>
 8017cc2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017cc6:	4629      	mov	r1, r5
 8017cc8:	ae08      	add	r6, sp, #32
 8017cca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017cce:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8017cd2:	1c42      	adds	r2, r0, #1
 8017cd4:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 8017cd8:	f001 f914 	bl	8018f04 <uxr_object_id>
 8017cdc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8017ce0:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8017ce4:	4639      	mov	r1, r7
 8017ce6:	f8c8 0014 	str.w	r0, [r8, #20]
 8017cea:	4630      	mov	r0, r6
 8017cec:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8017cf0:	9305      	str	r3, [sp, #20]
 8017cf2:	f000 fad1 	bl	8018298 <convert_qos_profile>
 8017cf6:	9503      	str	r5, [sp, #12]
 8017cf8:	9b05      	ldr	r3, [sp, #20]
 8017cfa:	e896 0003 	ldmia.w	r6, {r0, r1}
 8017cfe:	9001      	str	r0, [sp, #4]
 8017d00:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8017d04:	f8ad 1008 	strh.w	r1, [sp, #8]
 8017d08:	691b      	ldr	r3, [r3, #16]
 8017d0a:	9300      	str	r3, [sp, #0]
 8017d0c:	f8db 1000 	ldr.w	r1, [fp]
 8017d10:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 8017d14:	f000 fdcc 	bl	80188b0 <uxr_buffer_create_datareader_bin>
 8017d18:	4602      	mov	r2, r0
 8017d1a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8017d1e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8017d22:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8017d26:	f000 fa9b 	bl	8018260 <run_xrce_session>
 8017d2a:	b310      	cbz	r0, 8017d72 <rmw_create_subscription+0x1c6>
 8017d2c:	7a3b      	ldrb	r3, [r7, #8]
 8017d2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017d32:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8017d36:	2b02      	cmp	r3, #2
 8017d38:	920a      	str	r2, [sp, #40]	@ 0x28
 8017d3a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8017d3e:	f04f 0200 	mov.w	r2, #0
 8017d42:	bf08      	it	eq
 8017d44:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8017d48:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017d4c:	bf18      	it	ne
 8017d4e:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	@ 0xd4
 8017d52:	920b      	str	r2, [sp, #44]	@ 0x2c
 8017d54:	9307      	str	r3, [sp, #28]
 8017d56:	ab0a      	add	r3, sp, #40	@ 0x28
 8017d58:	9300      	str	r3, [sp, #0]
 8017d5a:	9b07      	ldr	r3, [sp, #28]
 8017d5c:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8017d60:	6809      	ldr	r1, [r1, #0]
 8017d62:	f001 fc33 	bl	80195cc <uxr_buffer_request_data>
 8017d66:	e000      	b.n	8017d6a <rmw_create_subscription+0x1be>
 8017d68:	2400      	movs	r4, #0
 8017d6a:	4620      	mov	r0, r4
 8017d6c:	b00d      	add	sp, #52	@ 0x34
 8017d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d72:	f8d8 001c 	ldr.w	r0, [r8, #28]
 8017d76:	b108      	cbz	r0, 8017d7c <rmw_create_subscription+0x1d0>
 8017d78:	f7f8 f96a 	bl	8010050 <rmw_uxrce_fini_topic_memory>
 8017d7c:	4620      	mov	r0, r4
 8017d7e:	2400      	movs	r4, #0
 8017d80:	f7f8 f924 	bl	800ffcc <rmw_uxrce_fini_subscription_memory>
 8017d84:	4620      	mov	r0, r4
 8017d86:	b00d      	add	sp, #52	@ 0x34
 8017d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d8c:	2000f12c 	.word	0x2000f12c
 8017d90:	0801cf7c 	.word	0x0801cf7c
 8017d94:	0801c6a8 	.word	0x0801c6a8

08017d98 <rmw_subscription_get_actual_qos>:
 8017d98:	b178      	cbz	r0, 8017dba <rmw_subscription_get_actual_qos+0x22>
 8017d9a:	b510      	push	{r4, lr}
 8017d9c:	fab1 f481 	clz	r4, r1
 8017da0:	0964      	lsrs	r4, r4, #5
 8017da2:	b141      	cbz	r1, 8017db6 <rmw_subscription_get_actual_qos+0x1e>
 8017da4:	6843      	ldr	r3, [r0, #4]
 8017da6:	2250      	movs	r2, #80	@ 0x50
 8017da8:	4608      	mov	r0, r1
 8017daa:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8017dae:	f003 fcdc 	bl	801b76a <memcpy>
 8017db2:	4620      	mov	r0, r4
 8017db4:	bd10      	pop	{r4, pc}
 8017db6:	200b      	movs	r0, #11
 8017db8:	bd10      	pop	{r4, pc}
 8017dba:	200b      	movs	r0, #11
 8017dbc:	4770      	bx	lr
 8017dbe:	bf00      	nop

08017dc0 <rmw_destroy_subscription>:
 8017dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017dc4:	b128      	cbz	r0, 8017dd2 <rmw_destroy_subscription+0x12>
 8017dc6:	4604      	mov	r4, r0
 8017dc8:	6800      	ldr	r0, [r0, #0]
 8017dca:	460d      	mov	r5, r1
 8017dcc:	f000 fac2 	bl	8018354 <is_uxrce_rmw_identifier_valid>
 8017dd0:	b918      	cbnz	r0, 8017dda <rmw_destroy_subscription+0x1a>
 8017dd2:	2401      	movs	r4, #1
 8017dd4:	4620      	mov	r0, r4
 8017dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017dda:	6863      	ldr	r3, [r4, #4]
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	d0f8      	beq.n	8017dd2 <rmw_destroy_subscription+0x12>
 8017de0:	fab5 f485 	clz	r4, r5
 8017de4:	0964      	lsrs	r4, r4, #5
 8017de6:	2d00      	cmp	r5, #0
 8017de8:	d0f3      	beq.n	8017dd2 <rmw_destroy_subscription+0x12>
 8017dea:	6828      	ldr	r0, [r5, #0]
 8017dec:	f000 fab2 	bl	8018354 <is_uxrce_rmw_identifier_valid>
 8017df0:	2800      	cmp	r0, #0
 8017df2:	d0ee      	beq.n	8017dd2 <rmw_destroy_subscription+0x12>
 8017df4:	686e      	ldr	r6, [r5, #4]
 8017df6:	2e00      	cmp	r6, #0
 8017df8:	d0eb      	beq.n	8017dd2 <rmw_destroy_subscription+0x12>
 8017dfa:	6a37      	ldr	r7, [r6, #32]
 8017dfc:	6972      	ldr	r2, [r6, #20]
 8017dfe:	6938      	ldr	r0, [r7, #16]
 8017e00:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017e04:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017e08:	6819      	ldr	r1, [r3, #0]
 8017e0a:	f001 fc19 	bl	8019640 <uxr_buffer_cancel_data>
 8017e0e:	4602      	mov	r2, r0
 8017e10:	6938      	ldr	r0, [r7, #16]
 8017e12:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017e16:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017e1a:	f000 fa21 	bl	8018260 <run_xrce_session>
 8017e1e:	69f0      	ldr	r0, [r6, #28]
 8017e20:	f002 fe7c 	bl	801ab1c <destroy_topic>
 8017e24:	6a33      	ldr	r3, [r6, #32]
 8017e26:	6972      	ldr	r2, [r6, #20]
 8017e28:	6918      	ldr	r0, [r3, #16]
 8017e2a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017e2e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017e32:	6819      	ldr	r1, [r3, #0]
 8017e34:	f000 fbb2 	bl	801859c <uxr_buffer_delete_entity>
 8017e38:	6a33      	ldr	r3, [r6, #32]
 8017e3a:	4680      	mov	r8, r0
 8017e3c:	6932      	ldr	r2, [r6, #16]
 8017e3e:	6918      	ldr	r0, [r3, #16]
 8017e40:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017e44:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017e48:	6819      	ldr	r1, [r3, #0]
 8017e4a:	f000 fba7 	bl	801859c <uxr_buffer_delete_entity>
 8017e4e:	4606      	mov	r6, r0
 8017e50:	6938      	ldr	r0, [r7, #16]
 8017e52:	4642      	mov	r2, r8
 8017e54:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017e58:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017e5c:	f000 fa00 	bl	8018260 <run_xrce_session>
 8017e60:	693f      	ldr	r7, [r7, #16]
 8017e62:	4632      	mov	r2, r6
 8017e64:	4606      	mov	r6, r0
 8017e66:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8017e6a:	4638      	mov	r0, r7
 8017e6c:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8017e70:	f000 f9f6 	bl	8018260 <run_xrce_session>
 8017e74:	b126      	cbz	r6, 8017e80 <rmw_destroy_subscription+0xc0>
 8017e76:	b118      	cbz	r0, 8017e80 <rmw_destroy_subscription+0xc0>
 8017e78:	4628      	mov	r0, r5
 8017e7a:	f7f8 f8a7 	bl	800ffcc <rmw_uxrce_fini_subscription_memory>
 8017e7e:	e7a9      	b.n	8017dd4 <rmw_destroy_subscription+0x14>
 8017e80:	2402      	movs	r4, #2
 8017e82:	e7f9      	b.n	8017e78 <rmw_destroy_subscription+0xb8>

08017e84 <rmw_take_with_info>:
 8017e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e86:	4604      	mov	r4, r0
 8017e88:	6800      	ldr	r0, [r0, #0]
 8017e8a:	b089      	sub	sp, #36	@ 0x24
 8017e8c:	460f      	mov	r7, r1
 8017e8e:	4615      	mov	r5, r2
 8017e90:	b128      	cbz	r0, 8017e9e <rmw_take_with_info+0x1a>
 8017e92:	4b24      	ldr	r3, [pc, #144]	@ (8017f24 <rmw_take_with_info+0xa0>)
 8017e94:	6819      	ldr	r1, [r3, #0]
 8017e96:	f7e8 f9d3 	bl	8000240 <strcmp>
 8017e9a:	2800      	cmp	r0, #0
 8017e9c:	d13e      	bne.n	8017f1c <rmw_take_with_info+0x98>
 8017e9e:	b305      	cbz	r5, 8017ee2 <rmw_take_with_info+0x5e>
 8017ea0:	2300      	movs	r3, #0
 8017ea2:	6864      	ldr	r4, [r4, #4]
 8017ea4:	702b      	strb	r3, [r5, #0]
 8017ea6:	f7f8 f963 	bl	8010170 <rmw_uxrce_clean_expired_static_input_buffer>
 8017eaa:	4620      	mov	r0, r4
 8017eac:	f7f8 f936 	bl	801011c <rmw_uxrce_find_static_input_buffer_by_owner>
 8017eb0:	4606      	mov	r6, r0
 8017eb2:	b1f0      	cbz	r0, 8017ef2 <rmw_take_with_info+0x6e>
 8017eb4:	6881      	ldr	r1, [r0, #8]
 8017eb6:	4668      	mov	r0, sp
 8017eb8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8017ebc:	3110      	adds	r1, #16
 8017ebe:	f7f6 fe53 	bl	800eb68 <ucdr_init_buffer>
 8017ec2:	69a3      	ldr	r3, [r4, #24]
 8017ec4:	4639      	mov	r1, r7
 8017ec6:	4668      	mov	r0, sp
 8017ec8:	68db      	ldr	r3, [r3, #12]
 8017eca:	4798      	blx	r3
 8017ecc:	4604      	mov	r4, r0
 8017ece:	4631      	mov	r1, r6
 8017ed0:	4815      	ldr	r0, [pc, #84]	@ (8017f28 <rmw_take_with_info+0xa4>)
 8017ed2:	f7fe ff8f 	bl	8016df4 <put_memory>
 8017ed6:	702c      	strb	r4, [r5, #0]
 8017ed8:	f084 0001 	eor.w	r0, r4, #1
 8017edc:	b2c0      	uxtb	r0, r0
 8017ede:	b009      	add	sp, #36	@ 0x24
 8017ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017ee2:	6864      	ldr	r4, [r4, #4]
 8017ee4:	f7f8 f944 	bl	8010170 <rmw_uxrce_clean_expired_static_input_buffer>
 8017ee8:	4620      	mov	r0, r4
 8017eea:	f7f8 f917 	bl	801011c <rmw_uxrce_find_static_input_buffer_by_owner>
 8017eee:	4605      	mov	r5, r0
 8017ef0:	b910      	cbnz	r0, 8017ef8 <rmw_take_with_info+0x74>
 8017ef2:	2001      	movs	r0, #1
 8017ef4:	b009      	add	sp, #36	@ 0x24
 8017ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017ef8:	68a9      	ldr	r1, [r5, #8]
 8017efa:	4668      	mov	r0, sp
 8017efc:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8017f00:	3110      	adds	r1, #16
 8017f02:	f7f6 fe31 	bl	800eb68 <ucdr_init_buffer>
 8017f06:	69a3      	ldr	r3, [r4, #24]
 8017f08:	4639      	mov	r1, r7
 8017f0a:	4668      	mov	r0, sp
 8017f0c:	68db      	ldr	r3, [r3, #12]
 8017f0e:	4798      	blx	r3
 8017f10:	4629      	mov	r1, r5
 8017f12:	4604      	mov	r4, r0
 8017f14:	4804      	ldr	r0, [pc, #16]	@ (8017f28 <rmw_take_with_info+0xa4>)
 8017f16:	f7fe ff6d 	bl	8016df4 <put_memory>
 8017f1a:	e7dd      	b.n	8017ed8 <rmw_take_with_info+0x54>
 8017f1c:	200c      	movs	r0, #12
 8017f1e:	b009      	add	sp, #36	@ 0x24
 8017f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f22:	bf00      	nop
 8017f24:	0801d578 	.word	0x0801d578
 8017f28:	2000f11c 	.word	0x2000f11c

08017f2c <rmw_uxrce_transport_init>:
 8017f2c:	b508      	push	{r3, lr}
 8017f2e:	b108      	cbz	r0, 8017f34 <rmw_uxrce_transport_init+0x8>
 8017f30:	f100 0210 	add.w	r2, r0, #16
 8017f34:	b139      	cbz	r1, 8017f46 <rmw_uxrce_transport_init+0x1a>
 8017f36:	6949      	ldr	r1, [r1, #20]
 8017f38:	4610      	mov	r0, r2
 8017f3a:	f000 fdb7 	bl	8018aac <uxr_init_custom_transport>
 8017f3e:	f080 0001 	eor.w	r0, r0, #1
 8017f42:	b2c0      	uxtb	r0, r0
 8017f44:	bd08      	pop	{r3, pc}
 8017f46:	4b04      	ldr	r3, [pc, #16]	@ (8017f58 <rmw_uxrce_transport_init+0x2c>)
 8017f48:	4610      	mov	r0, r2
 8017f4a:	6859      	ldr	r1, [r3, #4]
 8017f4c:	f000 fdae 	bl	8018aac <uxr_init_custom_transport>
 8017f50:	f080 0001 	eor.w	r0, r0, #1
 8017f54:	b2c0      	uxtb	r0, r0
 8017f56:	bd08      	pop	{r3, pc}
 8017f58:	2000a7f4 	.word	0x2000a7f4

08017f5c <rmw_wait>:
 8017f5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017f60:	4698      	mov	r8, r3
 8017f62:	ea40 0301 	orr.w	r3, r0, r1
 8017f66:	b089      	sub	sp, #36	@ 0x24
 8017f68:	ea48 0303 	orr.w	r3, r8, r3
 8017f6c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8017f6e:	4313      	orrs	r3, r2
 8017f70:	f000 8106 	beq.w	8018180 <rmw_wait+0x224>
 8017f74:	4605      	mov	r5, r0
 8017f76:	460e      	mov	r6, r1
 8017f78:	4691      	mov	r9, r2
 8017f7a:	b16c      	cbz	r4, 8017f98 <rmw_wait+0x3c>
 8017f7c:	4ba6      	ldr	r3, [pc, #664]	@ (8018218 <rmw_wait+0x2bc>)
 8017f7e:	af04      	add	r7, sp, #16
 8017f80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017f82:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8017f86:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8017f8a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017f8e:	f7fe fd43 	bl	8016a18 <rmw_time_equal>
 8017f92:	2800      	cmp	r0, #0
 8017f94:	f000 810b 	beq.w	80181ae <rmw_wait+0x252>
 8017f98:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8017f9c:	f7f8 f8e8 	bl	8010170 <rmw_uxrce_clean_expired_static_input_buffer>
 8017fa0:	4b9e      	ldr	r3, [pc, #632]	@ (801821c <rmw_wait+0x2c0>)
 8017fa2:	681c      	ldr	r4, [r3, #0]
 8017fa4:	b14c      	cbz	r4, 8017fba <rmw_wait+0x5e>
 8017fa6:	4623      	mov	r3, r4
 8017fa8:	2100      	movs	r1, #0
 8017faa:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8017fae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017fb2:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8017fb6:	2b00      	cmp	r3, #0
 8017fb8:	d1f7      	bne.n	8017faa <rmw_wait+0x4e>
 8017fba:	f1b9 0f00 	cmp.w	r9, #0
 8017fbe:	d011      	beq.n	8017fe4 <rmw_wait+0x88>
 8017fc0:	f8d9 1000 	ldr.w	r1, [r9]
 8017fc4:	b171      	cbz	r1, 8017fe4 <rmw_wait+0x88>
 8017fc6:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8017fca:	2300      	movs	r3, #0
 8017fcc:	2001      	movs	r0, #1
 8017fce:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017fd2:	3301      	adds	r3, #1
 8017fd4:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8017fd6:	4299      	cmp	r1, r3
 8017fd8:	6912      	ldr	r2, [r2, #16]
 8017fda:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017fde:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017fe2:	d1f4      	bne.n	8017fce <rmw_wait+0x72>
 8017fe4:	f1b8 0f00 	cmp.w	r8, #0
 8017fe8:	d011      	beq.n	801800e <rmw_wait+0xb2>
 8017fea:	f8d8 1000 	ldr.w	r1, [r8]
 8017fee:	b171      	cbz	r1, 801800e <rmw_wait+0xb2>
 8017ff0:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8017ff4:	2300      	movs	r3, #0
 8017ff6:	2001      	movs	r0, #1
 8017ff8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017ffc:	3301      	adds	r3, #1
 8017ffe:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8018000:	4299      	cmp	r1, r3
 8018002:	6912      	ldr	r2, [r2, #16]
 8018004:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018008:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801800c:	d1f4      	bne.n	8017ff8 <rmw_wait+0x9c>
 801800e:	b185      	cbz	r5, 8018032 <rmw_wait+0xd6>
 8018010:	6829      	ldr	r1, [r5, #0]
 8018012:	b171      	cbz	r1, 8018032 <rmw_wait+0xd6>
 8018014:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8018018:	2300      	movs	r3, #0
 801801a:	2001      	movs	r0, #1
 801801c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8018020:	3301      	adds	r3, #1
 8018022:	6a12      	ldr	r2, [r2, #32]
 8018024:	4299      	cmp	r1, r3
 8018026:	6912      	ldr	r2, [r2, #16]
 8018028:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801802c:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8018030:	d1f4      	bne.n	801801c <rmw_wait+0xc0>
 8018032:	b344      	cbz	r4, 8018086 <rmw_wait+0x12a>
 8018034:	4622      	mov	r2, r4
 8018036:	2300      	movs	r3, #0
 8018038:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801803c:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8018040:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8018044:	440b      	add	r3, r1
 8018046:	b2db      	uxtb	r3, r3
 8018048:	2a00      	cmp	r2, #0
 801804a:	d1f5      	bne.n	8018038 <rmw_wait+0xdc>
 801804c:	2b00      	cmp	r3, #0
 801804e:	d05f      	beq.n	8018110 <rmw_wait+0x1b4>
 8018050:	1c7a      	adds	r2, r7, #1
 8018052:	d00d      	beq.n	8018070 <rmw_wait+0x114>
 8018054:	ee07 7a90 	vmov	s15, r7
 8018058:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801805c:	ee07 3a90 	vmov	s15, r3
 8018060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018064:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8018068:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801806c:	ee17 7a90 	vmov	r7, s15
 8018070:	68a0      	ldr	r0, [r4, #8]
 8018072:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8018076:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 801807a:	2b00      	cmp	r3, #0
 801807c:	f040 808d 	bne.w	801819a <rmw_wait+0x23e>
 8018080:	6864      	ldr	r4, [r4, #4]
 8018082:	2c00      	cmp	r4, #0
 8018084:	d1f4      	bne.n	8018070 <rmw_wait+0x114>
 8018086:	f1b9 0f00 	cmp.w	r9, #0
 801808a:	f000 80a1 	beq.w	80181d0 <rmw_wait+0x274>
 801808e:	f8d9 7000 	ldr.w	r7, [r9]
 8018092:	2f00      	cmp	r7, #0
 8018094:	f000 80a4 	beq.w	80181e0 <rmw_wait+0x284>
 8018098:	2400      	movs	r4, #0
 801809a:	4627      	mov	r7, r4
 801809c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80180a0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80180a4:	f7f8 f83a 	bl	801011c <rmw_uxrce_find_static_input_buffer_by_owner>
 80180a8:	2800      	cmp	r0, #0
 80180aa:	d03b      	beq.n	8018124 <rmw_wait+0x1c8>
 80180ac:	3401      	adds	r4, #1
 80180ae:	f8d9 3000 	ldr.w	r3, [r9]
 80180b2:	2701      	movs	r7, #1
 80180b4:	42a3      	cmp	r3, r4
 80180b6:	d8f1      	bhi.n	801809c <rmw_wait+0x140>
 80180b8:	2701      	movs	r7, #1
 80180ba:	f1b8 0f00 	cmp.w	r8, #0
 80180be:	d010      	beq.n	80180e2 <rmw_wait+0x186>
 80180c0:	f8d8 3000 	ldr.w	r3, [r8]
 80180c4:	b16b      	cbz	r3, 80180e2 <rmw_wait+0x186>
 80180c6:	2400      	movs	r4, #0
 80180c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80180cc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80180d0:	f7f8 f824 	bl	801011c <rmw_uxrce_find_static_input_buffer_by_owner>
 80180d4:	b370      	cbz	r0, 8018134 <rmw_wait+0x1d8>
 80180d6:	3401      	adds	r4, #1
 80180d8:	f8d8 3000 	ldr.w	r3, [r8]
 80180dc:	2701      	movs	r7, #1
 80180de:	42a3      	cmp	r3, r4
 80180e0:	d8f2      	bhi.n	80180c8 <rmw_wait+0x16c>
 80180e2:	2d00      	cmp	r5, #0
 80180e4:	d035      	beq.n	8018152 <rmw_wait+0x1f6>
 80180e6:	682b      	ldr	r3, [r5, #0]
 80180e8:	b39b      	cbz	r3, 8018152 <rmw_wait+0x1f6>
 80180ea:	2400      	movs	r4, #0
 80180ec:	686b      	ldr	r3, [r5, #4]
 80180ee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80180f2:	f7f8 f813 	bl	801011c <rmw_uxrce_find_static_input_buffer_by_owner>
 80180f6:	b328      	cbz	r0, 8018144 <rmw_wait+0x1e8>
 80180f8:	3401      	adds	r4, #1
 80180fa:	682b      	ldr	r3, [r5, #0]
 80180fc:	2701      	movs	r7, #1
 80180fe:	42a3      	cmp	r3, r4
 8018100:	d8f4      	bhi.n	80180ec <rmw_wait+0x190>
 8018102:	2e00      	cmp	r6, #0
 8018104:	d03c      	beq.n	8018180 <rmw_wait+0x224>
 8018106:	6834      	ldr	r4, [r6, #0]
 8018108:	2c00      	cmp	r4, #0
 801810a:	d039      	beq.n	8018180 <rmw_wait+0x224>
 801810c:	2701      	movs	r7, #1
 801810e:	e023      	b.n	8018158 <rmw_wait+0x1fc>
 8018110:	68a0      	ldr	r0, [r4, #8]
 8018112:	2100      	movs	r1, #0
 8018114:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018118:	f7f9 fd46 	bl	8011ba8 <uxr_run_session_timeout>
 801811c:	6864      	ldr	r4, [r4, #4]
 801811e:	2c00      	cmp	r4, #0
 8018120:	d1f6      	bne.n	8018110 <rmw_wait+0x1b4>
 8018122:	e7b0      	b.n	8018086 <rmw_wait+0x12a>
 8018124:	e9d9 3200 	ldrd	r3, r2, [r9]
 8018128:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801812c:	3401      	adds	r4, #1
 801812e:	42a3      	cmp	r3, r4
 8018130:	d8b4      	bhi.n	801809c <rmw_wait+0x140>
 8018132:	e7c2      	b.n	80180ba <rmw_wait+0x15e>
 8018134:	e9d8 3200 	ldrd	r3, r2, [r8]
 8018138:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801813c:	3401      	adds	r4, #1
 801813e:	429c      	cmp	r4, r3
 8018140:	d3c2      	bcc.n	80180c8 <rmw_wait+0x16c>
 8018142:	e7ce      	b.n	80180e2 <rmw_wait+0x186>
 8018144:	e9d5 3200 	ldrd	r3, r2, [r5]
 8018148:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801814c:	3401      	adds	r4, #1
 801814e:	42a3      	cmp	r3, r4
 8018150:	d8cc      	bhi.n	80180ec <rmw_wait+0x190>
 8018152:	b1a6      	cbz	r6, 801817e <rmw_wait+0x222>
 8018154:	6834      	ldr	r4, [r6, #0]
 8018156:	b194      	cbz	r4, 801817e <rmw_wait+0x222>
 8018158:	2300      	movs	r3, #0
 801815a:	461d      	mov	r5, r3
 801815c:	e004      	b.n	8018168 <rmw_wait+0x20c>
 801815e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8018162:	3301      	adds	r3, #1
 8018164:	42a3      	cmp	r3, r4
 8018166:	d00a      	beq.n	801817e <rmw_wait+0x222>
 8018168:	6870      	ldr	r0, [r6, #4]
 801816a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801816e:	7c0a      	ldrb	r2, [r1, #16]
 8018170:	2a00      	cmp	r2, #0
 8018172:	d0f4      	beq.n	801815e <rmw_wait+0x202>
 8018174:	3301      	adds	r3, #1
 8018176:	4617      	mov	r7, r2
 8018178:	740d      	strb	r5, [r1, #16]
 801817a:	42a3      	cmp	r3, r4
 801817c:	d1f4      	bne.n	8018168 <rmw_wait+0x20c>
 801817e:	b147      	cbz	r7, 8018192 <rmw_wait+0x236>
 8018180:	2000      	movs	r0, #0
 8018182:	b009      	add	sp, #36	@ 0x24
 8018184:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018188:	b11e      	cbz	r6, 8018192 <rmw_wait+0x236>
 801818a:	6834      	ldr	r4, [r6, #0]
 801818c:	462f      	mov	r7, r5
 801818e:	2c00      	cmp	r4, #0
 8018190:	d1e2      	bne.n	8018158 <rmw_wait+0x1fc>
 8018192:	2002      	movs	r0, #2
 8018194:	b009      	add	sp, #36	@ 0x24
 8018196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801819a:	4639      	mov	r1, r7
 801819c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80181a0:	f7f9 fd1c 	bl	8011bdc <uxr_run_session_until_data>
 80181a4:	6864      	ldr	r4, [r4, #4]
 80181a6:	2c00      	cmp	r4, #0
 80181a8:	f47f af62 	bne.w	8018070 <rmw_wait+0x114>
 80181ac:	e76b      	b.n	8018086 <rmw_wait+0x12a>
 80181ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80181b2:	f7fe fc87 	bl	8016ac4 <rmw_time_total_nsec>
 80181b6:	2300      	movs	r3, #0
 80181b8:	4a19      	ldr	r2, [pc, #100]	@ (8018220 <rmw_wait+0x2c4>)
 80181ba:	f7e8 f8f9 	bl	80003b0 <__aeabi_uldivmod>
 80181be:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 80181c2:	4607      	mov	r7, r0
 80181c4:	f171 0300 	sbcs.w	r3, r1, #0
 80181c8:	bfa8      	it	ge
 80181ca:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 80181ce:	e6e5      	b.n	8017f9c <rmw_wait+0x40>
 80181d0:	f1b8 0f00 	cmp.w	r8, #0
 80181d4:	d00f      	beq.n	80181f6 <rmw_wait+0x29a>
 80181d6:	f8d8 3000 	ldr.w	r3, [r8]
 80181da:	b193      	cbz	r3, 8018202 <rmw_wait+0x2a6>
 80181dc:	464f      	mov	r7, r9
 80181de:	e772      	b.n	80180c6 <rmw_wait+0x16a>
 80181e0:	f1b8 0f00 	cmp.w	r8, #0
 80181e4:	d007      	beq.n	80181f6 <rmw_wait+0x29a>
 80181e6:	f8d8 3000 	ldr.w	r3, [r8]
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	f47f af6b 	bne.w	80180c6 <rmw_wait+0x16a>
 80181f0:	b155      	cbz	r5, 8018208 <rmw_wait+0x2ac>
 80181f2:	461f      	mov	r7, r3
 80181f4:	e777      	b.n	80180e6 <rmw_wait+0x18a>
 80181f6:	2d00      	cmp	r5, #0
 80181f8:	d0c6      	beq.n	8018188 <rmw_wait+0x22c>
 80181fa:	682b      	ldr	r3, [r5, #0]
 80181fc:	b143      	cbz	r3, 8018210 <rmw_wait+0x2b4>
 80181fe:	4647      	mov	r7, r8
 8018200:	e773      	b.n	80180ea <rmw_wait+0x18e>
 8018202:	b10d      	cbz	r5, 8018208 <rmw_wait+0x2ac>
 8018204:	464f      	mov	r7, r9
 8018206:	e76e      	b.n	80180e6 <rmw_wait+0x18a>
 8018208:	462f      	mov	r7, r5
 801820a:	2e00      	cmp	r6, #0
 801820c:	d1a2      	bne.n	8018154 <rmw_wait+0x1f8>
 801820e:	e7c0      	b.n	8018192 <rmw_wait+0x236>
 8018210:	4647      	mov	r7, r8
 8018212:	2e00      	cmp	r6, #0
 8018214:	d19e      	bne.n	8018154 <rmw_wait+0x1f8>
 8018216:	e7bc      	b.n	8018192 <rmw_wait+0x236>
 8018218:	0801c4f8 	.word	0x0801c4f8
 801821c:	2000f10c 	.word	0x2000f10c
 8018220:	000f4240 	.word	0x000f4240

08018224 <rmw_create_wait_set>:
 8018224:	b508      	push	{r3, lr}
 8018226:	4803      	ldr	r0, [pc, #12]	@ (8018234 <rmw_create_wait_set+0x10>)
 8018228:	f7fe fdd4 	bl	8016dd4 <get_memory>
 801822c:	b108      	cbz	r0, 8018232 <rmw_create_wait_set+0xe>
 801822e:	6880      	ldr	r0, [r0, #8]
 8018230:	3010      	adds	r0, #16
 8018232:	bd08      	pop	{r3, pc}
 8018234:	2000f14c 	.word	0x2000f14c

08018238 <rmw_destroy_wait_set>:
 8018238:	b508      	push	{r3, lr}
 801823a:	4b08      	ldr	r3, [pc, #32]	@ (801825c <rmw_destroy_wait_set+0x24>)
 801823c:	6819      	ldr	r1, [r3, #0]
 801823e:	b911      	cbnz	r1, 8018246 <rmw_destroy_wait_set+0xe>
 8018240:	e00a      	b.n	8018258 <rmw_destroy_wait_set+0x20>
 8018242:	6849      	ldr	r1, [r1, #4]
 8018244:	b141      	cbz	r1, 8018258 <rmw_destroy_wait_set+0x20>
 8018246:	688b      	ldr	r3, [r1, #8]
 8018248:	3310      	adds	r3, #16
 801824a:	4298      	cmp	r0, r3
 801824c:	d1f9      	bne.n	8018242 <rmw_destroy_wait_set+0xa>
 801824e:	4803      	ldr	r0, [pc, #12]	@ (801825c <rmw_destroy_wait_set+0x24>)
 8018250:	f7fe fdd0 	bl	8016df4 <put_memory>
 8018254:	2000      	movs	r0, #0
 8018256:	bd08      	pop	{r3, pc}
 8018258:	2001      	movs	r0, #1
 801825a:	bd08      	pop	{r3, pc}
 801825c:	2000f14c 	.word	0x2000f14c

08018260 <run_xrce_session>:
 8018260:	b510      	push	{r4, lr}
 8018262:	788c      	ldrb	r4, [r1, #2]
 8018264:	b086      	sub	sp, #24
 8018266:	2c01      	cmp	r4, #1
 8018268:	f8ad 200e 	strh.w	r2, [sp, #14]
 801826c:	d00c      	beq.n	8018288 <run_xrce_session+0x28>
 801826e:	2401      	movs	r4, #1
 8018270:	4619      	mov	r1, r3
 8018272:	f10d 020e 	add.w	r2, sp, #14
 8018276:	f10d 0317 	add.w	r3, sp, #23
 801827a:	9400      	str	r4, [sp, #0]
 801827c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018280:	f7f9 fcf0 	bl	8011c64 <uxr_run_session_until_all_status>
 8018284:	b006      	add	sp, #24
 8018286:	bd10      	pop	{r4, pc}
 8018288:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801828c:	f7f9 f90c 	bl	80114a8 <uxr_flash_output_streams>
 8018290:	4620      	mov	r0, r4
 8018292:	b006      	add	sp, #24
 8018294:	bd10      	pop	{r4, pc}
 8018296:	bf00      	nop

08018298 <convert_qos_profile>:
 8018298:	7a4a      	ldrb	r2, [r1, #9]
 801829a:	f891 c008 	ldrb.w	ip, [r1, #8]
 801829e:	2a02      	cmp	r2, #2
 80182a0:	bf18      	it	ne
 80182a2:	2200      	movne	r2, #0
 80182a4:	7002      	strb	r2, [r0, #0]
 80182a6:	f1ac 0202 	sub.w	r2, ip, #2
 80182aa:	fab2 f282 	clz	r2, r2
 80182ae:	0952      	lsrs	r2, r2, #5
 80182b0:	7042      	strb	r2, [r0, #1]
 80182b2:	780a      	ldrb	r2, [r1, #0]
 80182b4:	8889      	ldrh	r1, [r1, #4]
 80182b6:	f1a2 0202 	sub.w	r2, r2, #2
 80182ba:	8081      	strh	r1, [r0, #4]
 80182bc:	fab2 f282 	clz	r2, r2
 80182c0:	0952      	lsrs	r2, r2, #5
 80182c2:	7082      	strb	r2, [r0, #2]
 80182c4:	4770      	bx	lr
 80182c6:	bf00      	nop

080182c8 <generate_type_name>:
 80182c8:	2300      	movs	r3, #0
 80182ca:	b530      	push	{r4, r5, lr}
 80182cc:	700b      	strb	r3, [r1, #0]
 80182ce:	b087      	sub	sp, #28
 80182d0:	6803      	ldr	r3, [r0, #0]
 80182d2:	4614      	mov	r4, r2
 80182d4:	b1bb      	cbz	r3, 8018306 <generate_type_name+0x3e>
 80182d6:	4a0e      	ldr	r2, [pc, #56]	@ (8018310 <generate_type_name+0x48>)
 80182d8:	4615      	mov	r5, r2
 80182da:	9500      	str	r5, [sp, #0]
 80182dc:	9203      	str	r2, [sp, #12]
 80182de:	4d0d      	ldr	r5, [pc, #52]	@ (8018314 <generate_type_name+0x4c>)
 80182e0:	6842      	ldr	r2, [r0, #4]
 80182e2:	4608      	mov	r0, r1
 80182e4:	490c      	ldr	r1, [pc, #48]	@ (8018318 <generate_type_name+0x50>)
 80182e6:	9204      	str	r2, [sp, #16]
 80182e8:	9105      	str	r1, [sp, #20]
 80182ea:	9102      	str	r1, [sp, #8]
 80182ec:	4621      	mov	r1, r4
 80182ee:	4a0b      	ldr	r2, [pc, #44]	@ (801831c <generate_type_name+0x54>)
 80182f0:	9501      	str	r5, [sp, #4]
 80182f2:	f002 fffd 	bl	801b2f0 <sniprintf>
 80182f6:	2800      	cmp	r0, #0
 80182f8:	bfa8      	it	ge
 80182fa:	4284      	cmpge	r4, r0
 80182fc:	bfcc      	ite	gt
 80182fe:	2001      	movgt	r0, #1
 8018300:	2000      	movle	r0, #0
 8018302:	b007      	add	sp, #28
 8018304:	bd30      	pop	{r4, r5, pc}
 8018306:	4b06      	ldr	r3, [pc, #24]	@ (8018320 <generate_type_name+0x58>)
 8018308:	4a01      	ldr	r2, [pc, #4]	@ (8018310 <generate_type_name+0x48>)
 801830a:	461d      	mov	r5, r3
 801830c:	e7e5      	b.n	80182da <generate_type_name+0x12>
 801830e:	bf00      	nop
 8018310:	0801cf6c 	.word	0x0801cf6c
 8018314:	0801cf84 	.word	0x0801cf84
 8018318:	0801cf80 	.word	0x0801cf80
 801831c:	0801cf70 	.word	0x0801cf70
 8018320:	0801d008 	.word	0x0801d008

08018324 <generate_topic_name>:
 8018324:	b530      	push	{r4, r5, lr}
 8018326:	4614      	mov	r4, r2
 8018328:	b083      	sub	sp, #12
 801832a:	4605      	mov	r5, r0
 801832c:	4b07      	ldr	r3, [pc, #28]	@ (801834c <generate_topic_name+0x28>)
 801832e:	4a08      	ldr	r2, [pc, #32]	@ (8018350 <generate_topic_name+0x2c>)
 8018330:	4608      	mov	r0, r1
 8018332:	9500      	str	r5, [sp, #0]
 8018334:	4621      	mov	r1, r4
 8018336:	f002 ffdb 	bl	801b2f0 <sniprintf>
 801833a:	2800      	cmp	r0, #0
 801833c:	bfa8      	it	ge
 801833e:	4284      	cmpge	r4, r0
 8018340:	bfcc      	ite	gt
 8018342:	2001      	movgt	r0, #1
 8018344:	2000      	movle	r0, #0
 8018346:	b003      	add	sp, #12
 8018348:	bd30      	pop	{r4, r5, pc}
 801834a:	bf00      	nop
 801834c:	0801d57c 	.word	0x0801d57c
 8018350:	0801cc28 	.word	0x0801cc28

08018354 <is_uxrce_rmw_identifier_valid>:
 8018354:	b510      	push	{r4, lr}
 8018356:	4604      	mov	r4, r0
 8018358:	b140      	cbz	r0, 801836c <is_uxrce_rmw_identifier_valid+0x18>
 801835a:	f7fe fda3 	bl	8016ea4 <rmw_get_implementation_identifier>
 801835e:	4601      	mov	r1, r0
 8018360:	4620      	mov	r0, r4
 8018362:	f7e7 ff6d 	bl	8000240 <strcmp>
 8018366:	fab0 f080 	clz	r0, r0
 801836a:	0940      	lsrs	r0, r0, #5
 801836c:	bd10      	pop	{r4, pc}
 801836e:	bf00      	nop

08018370 <sensor_msgs__msg__FluidPressure__init>:
 8018370:	b538      	push	{r3, r4, r5, lr}
 8018372:	4604      	mov	r4, r0
 8018374:	b128      	cbz	r0, 8018382 <sensor_msgs__msg__FluidPressure__init+0x12>
 8018376:	f000 f8b1 	bl	80184dc <std_msgs__msg__Header__init>
 801837a:	4605      	mov	r5, r0
 801837c:	b120      	cbz	r0, 8018388 <sensor_msgs__msg__FluidPressure__init+0x18>
 801837e:	4628      	mov	r0, r5
 8018380:	bd38      	pop	{r3, r4, r5, pc}
 8018382:	4605      	mov	r5, r0
 8018384:	4628      	mov	r0, r5
 8018386:	bd38      	pop	{r3, r4, r5, pc}
 8018388:	4620      	mov	r0, r4
 801838a:	f000 f8cb 	bl	8018524 <std_msgs__msg__Header__fini>
 801838e:	4628      	mov	r0, r5
 8018390:	bd38      	pop	{r3, r4, r5, pc}
 8018392:	bf00      	nop

08018394 <sensor_msgs__msg__FluidPressure__fini>:
 8018394:	b108      	cbz	r0, 801839a <sensor_msgs__msg__FluidPressure__fini+0x6>
 8018396:	f000 b8c5 	b.w	8018524 <std_msgs__msg__Header__fini>
 801839a:	4770      	bx	lr

0801839c <sensor_msgs__msg__Imu__init>:
 801839c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183a0:	4605      	mov	r5, r0
 80183a2:	b3c0      	cbz	r0, 8018416 <sensor_msgs__msg__Imu__init+0x7a>
 80183a4:	f000 f89a 	bl	80184dc <std_msgs__msg__Header__init>
 80183a8:	4604      	mov	r4, r0
 80183aa:	b310      	cbz	r0, 80183f2 <sensor_msgs__msg__Imu__init+0x56>
 80183ac:	f105 0618 	add.w	r6, r5, #24
 80183b0:	4630      	mov	r0, r6
 80183b2:	f000 f8c9 	bl	8018548 <geometry_msgs__msg__Quaternion__init>
 80183b6:	4604      	mov	r4, r0
 80183b8:	2800      	cmp	r0, #0
 80183ba:	d040      	beq.n	801843e <sensor_msgs__msg__Imu__init+0xa2>
 80183bc:	f105 0780 	add.w	r7, r5, #128	@ 0x80
 80183c0:	4638      	mov	r0, r7
 80183c2:	f7f8 fc45 	bl	8010c50 <geometry_msgs__msg__Vector3__init>
 80183c6:	4604      	mov	r4, r0
 80183c8:	b348      	cbz	r0, 801841e <sensor_msgs__msg__Imu__init+0x82>
 80183ca:	f105 08e0 	add.w	r8, r5, #224	@ 0xe0
 80183ce:	4640      	mov	r0, r8
 80183d0:	f7f8 fc3e 	bl	8010c50 <geometry_msgs__msg__Vector3__init>
 80183d4:	4604      	mov	r4, r0
 80183d6:	b9d8      	cbnz	r0, 8018410 <sensor_msgs__msg__Imu__init+0x74>
 80183d8:	4628      	mov	r0, r5
 80183da:	f000 f8a3 	bl	8018524 <std_msgs__msg__Header__fini>
 80183de:	4630      	mov	r0, r6
 80183e0:	f000 f8c2 	bl	8018568 <geometry_msgs__msg__Quaternion__fini>
 80183e4:	4638      	mov	r0, r7
 80183e6:	f7f8 fc37 	bl	8010c58 <geometry_msgs__msg__Vector3__fini>
 80183ea:	4640      	mov	r0, r8
 80183ec:	f7f8 fc34 	bl	8010c58 <geometry_msgs__msg__Vector3__fini>
 80183f0:	e00e      	b.n	8018410 <sensor_msgs__msg__Imu__init+0x74>
 80183f2:	4628      	mov	r0, r5
 80183f4:	f000 f896 	bl	8018524 <std_msgs__msg__Header__fini>
 80183f8:	f105 0018 	add.w	r0, r5, #24
 80183fc:	f000 f8b4 	bl	8018568 <geometry_msgs__msg__Quaternion__fini>
 8018400:	f105 0080 	add.w	r0, r5, #128	@ 0x80
 8018404:	f7f8 fc28 	bl	8010c58 <geometry_msgs__msg__Vector3__fini>
 8018408:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 801840c:	f7f8 fc24 	bl	8010c58 <geometry_msgs__msg__Vector3__fini>
 8018410:	4620      	mov	r0, r4
 8018412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018416:	4604      	mov	r4, r0
 8018418:	4620      	mov	r0, r4
 801841a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801841e:	4628      	mov	r0, r5
 8018420:	f000 f880 	bl	8018524 <std_msgs__msg__Header__fini>
 8018424:	4630      	mov	r0, r6
 8018426:	f000 f89f 	bl	8018568 <geometry_msgs__msg__Quaternion__fini>
 801842a:	4638      	mov	r0, r7
 801842c:	f7f8 fc14 	bl	8010c58 <geometry_msgs__msg__Vector3__fini>
 8018430:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 8018434:	f7f8 fc10 	bl	8010c58 <geometry_msgs__msg__Vector3__fini>
 8018438:	4620      	mov	r0, r4
 801843a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801843e:	4628      	mov	r0, r5
 8018440:	f000 f870 	bl	8018524 <std_msgs__msg__Header__fini>
 8018444:	4630      	mov	r0, r6
 8018446:	e7d9      	b.n	80183fc <sensor_msgs__msg__Imu__init+0x60>

08018448 <sensor_msgs__msg__Imu__fini>:
 8018448:	b188      	cbz	r0, 801846e <sensor_msgs__msg__Imu__fini+0x26>
 801844a:	b510      	push	{r4, lr}
 801844c:	4604      	mov	r4, r0
 801844e:	f000 f869 	bl	8018524 <std_msgs__msg__Header__fini>
 8018452:	f104 0018 	add.w	r0, r4, #24
 8018456:	f000 f887 	bl	8018568 <geometry_msgs__msg__Quaternion__fini>
 801845a:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 801845e:	f7f8 fbfb 	bl	8010c58 <geometry_msgs__msg__Vector3__fini>
 8018462:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 8018466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801846a:	f7f8 bbf5 	b.w	8010c58 <geometry_msgs__msg__Vector3__fini>
 801846e:	4770      	bx	lr

08018470 <sensor_msgs__msg__MagneticField__init>:
 8018470:	b570      	push	{r4, r5, r6, lr}
 8018472:	4605      	mov	r5, r0
 8018474:	b1a8      	cbz	r0, 80184a2 <sensor_msgs__msg__MagneticField__init+0x32>
 8018476:	f000 f831 	bl	80184dc <std_msgs__msg__Header__init>
 801847a:	4604      	mov	r4, r0
 801847c:	b140      	cbz	r0, 8018490 <sensor_msgs__msg__MagneticField__init+0x20>
 801847e:	f105 0618 	add.w	r6, r5, #24
 8018482:	4630      	mov	r0, r6
 8018484:	f7f8 fbe4 	bl	8010c50 <geometry_msgs__msg__Vector3__init>
 8018488:	4604      	mov	r4, r0
 801848a:	b168      	cbz	r0, 80184a8 <sensor_msgs__msg__MagneticField__init+0x38>
 801848c:	4620      	mov	r0, r4
 801848e:	bd70      	pop	{r4, r5, r6, pc}
 8018490:	4628      	mov	r0, r5
 8018492:	f000 f847 	bl	8018524 <std_msgs__msg__Header__fini>
 8018496:	f105 0018 	add.w	r0, r5, #24
 801849a:	f7f8 fbdd 	bl	8010c58 <geometry_msgs__msg__Vector3__fini>
 801849e:	4620      	mov	r0, r4
 80184a0:	bd70      	pop	{r4, r5, r6, pc}
 80184a2:	4604      	mov	r4, r0
 80184a4:	4620      	mov	r0, r4
 80184a6:	bd70      	pop	{r4, r5, r6, pc}
 80184a8:	4628      	mov	r0, r5
 80184aa:	f000 f83b 	bl	8018524 <std_msgs__msg__Header__fini>
 80184ae:	4630      	mov	r0, r6
 80184b0:	f7f8 fbd2 	bl	8010c58 <geometry_msgs__msg__Vector3__fini>
 80184b4:	e7ea      	b.n	801848c <sensor_msgs__msg__MagneticField__init+0x1c>
 80184b6:	bf00      	nop

080184b8 <sensor_msgs__msg__MagneticField__fini>:
 80184b8:	b148      	cbz	r0, 80184ce <sensor_msgs__msg__MagneticField__fini+0x16>
 80184ba:	b510      	push	{r4, lr}
 80184bc:	4604      	mov	r4, r0
 80184be:	f000 f831 	bl	8018524 <std_msgs__msg__Header__fini>
 80184c2:	f104 0018 	add.w	r0, r4, #24
 80184c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80184ca:	f7f8 bbc5 	b.w	8010c58 <geometry_msgs__msg__Vector3__fini>
 80184ce:	4770      	bx	lr

080184d0 <std_msgs__msg__Float32__init>:
 80184d0:	3800      	subs	r0, #0
 80184d2:	bf18      	it	ne
 80184d4:	2001      	movne	r0, #1
 80184d6:	4770      	bx	lr

080184d8 <std_msgs__msg__Float32__fini>:
 80184d8:	4770      	bx	lr
 80184da:	bf00      	nop

080184dc <std_msgs__msg__Header__init>:
 80184dc:	b570      	push	{r4, r5, r6, lr}
 80184de:	4605      	mov	r5, r0
 80184e0:	b1a8      	cbz	r0, 801850e <std_msgs__msg__Header__init+0x32>
 80184e2:	f000 f82b 	bl	801853c <builtin_interfaces__msg__Time__init>
 80184e6:	4604      	mov	r4, r0
 80184e8:	b140      	cbz	r0, 80184fc <std_msgs__msg__Header__init+0x20>
 80184ea:	f105 0608 	add.w	r6, r5, #8
 80184ee:	4630      	mov	r0, r6
 80184f0:	f002 fb36 	bl	801ab60 <rosidl_runtime_c__String__init>
 80184f4:	4604      	mov	r4, r0
 80184f6:	b168      	cbz	r0, 8018514 <std_msgs__msg__Header__init+0x38>
 80184f8:	4620      	mov	r0, r4
 80184fa:	bd70      	pop	{r4, r5, r6, pc}
 80184fc:	4628      	mov	r0, r5
 80184fe:	f000 f821 	bl	8018544 <builtin_interfaces__msg__Time__fini>
 8018502:	f105 0008 	add.w	r0, r5, #8
 8018506:	f002 fb41 	bl	801ab8c <rosidl_runtime_c__String__fini>
 801850a:	4620      	mov	r0, r4
 801850c:	bd70      	pop	{r4, r5, r6, pc}
 801850e:	4604      	mov	r4, r0
 8018510:	4620      	mov	r0, r4
 8018512:	bd70      	pop	{r4, r5, r6, pc}
 8018514:	4628      	mov	r0, r5
 8018516:	f000 f815 	bl	8018544 <builtin_interfaces__msg__Time__fini>
 801851a:	4630      	mov	r0, r6
 801851c:	f002 fb36 	bl	801ab8c <rosidl_runtime_c__String__fini>
 8018520:	e7ea      	b.n	80184f8 <std_msgs__msg__Header__init+0x1c>
 8018522:	bf00      	nop

08018524 <std_msgs__msg__Header__fini>:
 8018524:	b148      	cbz	r0, 801853a <std_msgs__msg__Header__fini+0x16>
 8018526:	b510      	push	{r4, lr}
 8018528:	4604      	mov	r4, r0
 801852a:	f000 f80b 	bl	8018544 <builtin_interfaces__msg__Time__fini>
 801852e:	f104 0008 	add.w	r0, r4, #8
 8018532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018536:	f002 bb29 	b.w	801ab8c <rosidl_runtime_c__String__fini>
 801853a:	4770      	bx	lr

0801853c <builtin_interfaces__msg__Time__init>:
 801853c:	3800      	subs	r0, #0
 801853e:	bf18      	it	ne
 8018540:	2001      	movne	r0, #1
 8018542:	4770      	bx	lr

08018544 <builtin_interfaces__msg__Time__fini>:
 8018544:	4770      	bx	lr
 8018546:	bf00      	nop

08018548 <geometry_msgs__msg__Quaternion__init>:
 8018548:	b160      	cbz	r0, 8018564 <geometry_msgs__msg__Quaternion__init+0x1c>
 801854a:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801854e:	2200      	movs	r2, #0
 8018550:	2300      	movs	r3, #0
 8018552:	ed80 7b06 	vstr	d7, [r0, #24]
 8018556:	e9c0 2300 	strd	r2, r3, [r0]
 801855a:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801855e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8018562:	2001      	movs	r0, #1
 8018564:	4770      	bx	lr
 8018566:	bf00      	nop

08018568 <geometry_msgs__msg__Quaternion__fini>:
 8018568:	4770      	bx	lr
 801856a:	bf00      	nop

0801856c <ucdr_serialize_string>:
 801856c:	b510      	push	{r4, lr}
 801856e:	b082      	sub	sp, #8
 8018570:	4604      	mov	r4, r0
 8018572:	4608      	mov	r0, r1
 8018574:	9101      	str	r1, [sp, #4]
 8018576:	f7e7 fe6d 	bl	8000254 <strlen>
 801857a:	4602      	mov	r2, r0
 801857c:	9901      	ldr	r1, [sp, #4]
 801857e:	4620      	mov	r0, r4
 8018580:	3201      	adds	r2, #1
 8018582:	b002      	add	sp, #8
 8018584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018588:	f7f8 be04 	b.w	8011194 <ucdr_serialize_sequence_char>

0801858c <ucdr_deserialize_string>:
 801858c:	b500      	push	{lr}
 801858e:	b083      	sub	sp, #12
 8018590:	ab01      	add	r3, sp, #4
 8018592:	f7f8 fe11 	bl	80111b8 <ucdr_deserialize_sequence_char>
 8018596:	b003      	add	sp, #12
 8018598:	f85d fb04 	ldr.w	pc, [sp], #4

0801859c <uxr_buffer_delete_entity>:
 801859c:	b510      	push	{r4, lr}
 801859e:	2300      	movs	r3, #0
 80185a0:	b08e      	sub	sp, #56	@ 0x38
 80185a2:	4604      	mov	r4, r0
 80185a4:	9103      	str	r1, [sp, #12]
 80185a6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80185aa:	2303      	movs	r3, #3
 80185ac:	2204      	movs	r2, #4
 80185ae:	9300      	str	r3, [sp, #0]
 80185b0:	ab06      	add	r3, sp, #24
 80185b2:	f7f9 fd83 	bl	80120bc <uxr_prepare_stream_to_write_submessage>
 80185b6:	b918      	cbnz	r0, 80185c0 <uxr_buffer_delete_entity+0x24>
 80185b8:	4604      	mov	r4, r0
 80185ba:	4620      	mov	r0, r4
 80185bc:	b00e      	add	sp, #56	@ 0x38
 80185be:	bd10      	pop	{r4, pc}
 80185c0:	9902      	ldr	r1, [sp, #8]
 80185c2:	aa05      	add	r2, sp, #20
 80185c4:	4620      	mov	r0, r4
 80185c6:	f7f9 feb5 	bl	8012334 <uxr_init_base_object_request>
 80185ca:	4604      	mov	r4, r0
 80185cc:	a905      	add	r1, sp, #20
 80185ce:	a806      	add	r0, sp, #24
 80185d0:	f7fa ff86 	bl	80134e0 <uxr_serialize_DELETE_Payload>
 80185d4:	4620      	mov	r0, r4
 80185d6:	b00e      	add	sp, #56	@ 0x38
 80185d8:	bd10      	pop	{r4, pc}
 80185da:	bf00      	nop

080185dc <uxr_common_create_entity>:
 80185dc:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80185e0:	b510      	push	{r4, lr}
 80185e2:	f1bc 0f01 	cmp.w	ip, #1
 80185e6:	b08c      	sub	sp, #48	@ 0x30
 80185e8:	4604      	mov	r4, r0
 80185ea:	9202      	str	r2, [sp, #8]
 80185ec:	bf0c      	ite	eq
 80185ee:	f003 0201 	andeq.w	r2, r3, #1
 80185f2:	2200      	movne	r2, #0
 80185f4:	330e      	adds	r3, #14
 80185f6:	9103      	str	r1, [sp, #12]
 80185f8:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 80185fc:	441a      	add	r2, r3
 80185fe:	ab04      	add	r3, sp, #16
 8018600:	9101      	str	r1, [sp, #4]
 8018602:	2101      	movs	r1, #1
 8018604:	b292      	uxth	r2, r2
 8018606:	9100      	str	r1, [sp, #0]
 8018608:	9903      	ldr	r1, [sp, #12]
 801860a:	f7f9 fd57 	bl	80120bc <uxr_prepare_stream_to_write_submessage>
 801860e:	b918      	cbnz	r0, 8018618 <uxr_common_create_entity+0x3c>
 8018610:	4604      	mov	r4, r0
 8018612:	4620      	mov	r0, r4
 8018614:	b00c      	add	sp, #48	@ 0x30
 8018616:	bd10      	pop	{r4, pc}
 8018618:	9902      	ldr	r1, [sp, #8]
 801861a:	4620      	mov	r0, r4
 801861c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801861e:	f7f9 fe89 	bl	8012334 <uxr_init_base_object_request>
 8018622:	4604      	mov	r4, r0
 8018624:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8018626:	a804      	add	r0, sp, #16
 8018628:	f7fa feb4 	bl	8013394 <uxr_serialize_CREATE_Payload>
 801862c:	4620      	mov	r0, r4
 801862e:	b00c      	add	sp, #48	@ 0x30
 8018630:	bd10      	pop	{r4, pc}
 8018632:	bf00      	nop

08018634 <uxr_buffer_create_participant_bin>:
 8018634:	b570      	push	{r4, r5, r6, lr}
 8018636:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 801863a:	4605      	mov	r5, r0
 801863c:	ac11      	add	r4, sp, #68	@ 0x44
 801863e:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8018642:	2303      	movs	r3, #3
 8018644:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8018648:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801864c:	7223      	strb	r3, [r4, #8]
 801864e:	2300      	movs	r3, #0
 8018650:	2201      	movs	r2, #1
 8018652:	f88d 3014 	strb.w	r3, [sp, #20]
 8018656:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8018658:	7122      	strb	r2, [r4, #4]
 801865a:	b1cb      	cbz	r3, 8018690 <uxr_buffer_create_participant_bin+0x5c>
 801865c:	f88d 201c 	strb.w	r2, [sp, #28]
 8018660:	9308      	str	r3, [sp, #32]
 8018662:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018666:	a915      	add	r1, sp, #84	@ 0x54
 8018668:	a809      	add	r0, sp, #36	@ 0x24
 801866a:	f7f6 fa7d 	bl	800eb68 <ucdr_init_buffer>
 801866e:	a905      	add	r1, sp, #20
 8018670:	a809      	add	r0, sp, #36	@ 0x24
 8018672:	f7fa fa79 	bl	8012b68 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8018676:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018678:	9600      	str	r6, [sp, #0]
 801867a:	4628      	mov	r0, r5
 801867c:	9401      	str	r4, [sp, #4]
 801867e:	60e3      	str	r3, [r4, #12]
 8018680:	b29b      	uxth	r3, r3
 8018682:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8018686:	f7ff ffa9 	bl	80185dc <uxr_common_create_entity>
 801868a:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 801868e:	bd70      	pop	{r4, r5, r6, pc}
 8018690:	f88d 301c 	strb.w	r3, [sp, #28]
 8018694:	e7e5      	b.n	8018662 <uxr_buffer_create_participant_bin+0x2e>
 8018696:	bf00      	nop

08018698 <uxr_buffer_create_topic_bin>:
 8018698:	b570      	push	{r4, r5, r6, lr}
 801869a:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 801869e:	4605      	mov	r5, r0
 80186a0:	4618      	mov	r0, r3
 80186a2:	9105      	str	r1, [sp, #20]
 80186a4:	a997      	add	r1, sp, #604	@ 0x25c
 80186a6:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 80186aa:	ac13      	add	r4, sp, #76	@ 0x4c
 80186ac:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80186b0:	2302      	movs	r3, #2
 80186b2:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 80186b6:	f000 fc47 	bl	8018f48 <uxr_object_id_to_raw>
 80186ba:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 80186bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80186c0:	a917      	add	r1, sp, #92	@ 0x5c
 80186c2:	a80b      	add	r0, sp, #44	@ 0x2c
 80186c4:	9306      	str	r3, [sp, #24]
 80186c6:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 80186c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80186ca:	2303      	movs	r3, #3
 80186cc:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80186d0:	2301      	movs	r3, #1
 80186d2:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80186d6:	2300      	movs	r3, #0
 80186d8:	f88d 301c 	strb.w	r3, [sp, #28]
 80186dc:	f7f6 fa44 	bl	800eb68 <ucdr_init_buffer>
 80186e0:	a906      	add	r1, sp, #24
 80186e2:	a80b      	add	r0, sp, #44	@ 0x2c
 80186e4:	f7fa fa62 	bl	8012bac <uxr_serialize_OBJK_Topic_Binary>
 80186e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80186ea:	4628      	mov	r0, r5
 80186ec:	9600      	str	r6, [sp, #0]
 80186ee:	9316      	str	r3, [sp, #88]	@ 0x58
 80186f0:	b29b      	uxth	r3, r3
 80186f2:	9401      	str	r4, [sp, #4]
 80186f4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80186f8:	f7ff ff70 	bl	80185dc <uxr_common_create_entity>
 80186fc:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8018700:	bd70      	pop	{r4, r5, r6, pc}
 8018702:	bf00      	nop

08018704 <uxr_buffer_create_publisher_bin>:
 8018704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018706:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 801870a:	2603      	movs	r6, #3
 801870c:	4605      	mov	r5, r0
 801870e:	4618      	mov	r0, r3
 8018710:	9105      	str	r1, [sp, #20]
 8018712:	a992      	add	r1, sp, #584	@ 0x248
 8018714:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8018718:	ac0e      	add	r4, sp, #56	@ 0x38
 801871a:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 801871e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8018722:	f000 fc11 	bl	8018f48 <uxr_object_id_to_raw>
 8018726:	2300      	movs	r3, #0
 8018728:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801872c:	a912      	add	r1, sp, #72	@ 0x48
 801872e:	a806      	add	r0, sp, #24
 8018730:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8018734:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8018738:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 801873c:	f7f6 fa14 	bl	800eb68 <ucdr_init_buffer>
 8018740:	a993      	add	r1, sp, #588	@ 0x24c
 8018742:	a806      	add	r0, sp, #24
 8018744:	f7fa fae6 	bl	8012d14 <uxr_serialize_OBJK_Publisher_Binary>
 8018748:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801874a:	4628      	mov	r0, r5
 801874c:	9700      	str	r7, [sp, #0]
 801874e:	9311      	str	r3, [sp, #68]	@ 0x44
 8018750:	b29b      	uxth	r3, r3
 8018752:	9401      	str	r4, [sp, #4]
 8018754:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8018758:	f7ff ff40 	bl	80185dc <uxr_common_create_entity>
 801875c:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8018760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018762:	bf00      	nop

08018764 <uxr_buffer_create_subscriber_bin>:
 8018764:	b570      	push	{r4, r5, r6, lr}
 8018766:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 801876a:	4605      	mov	r5, r0
 801876c:	4618      	mov	r0, r3
 801876e:	9105      	str	r1, [sp, #20]
 8018770:	a992      	add	r1, sp, #584	@ 0x248
 8018772:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 8018776:	ac0e      	add	r4, sp, #56	@ 0x38
 8018778:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801877c:	2304      	movs	r3, #4
 801877e:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8018782:	f000 fbe1 	bl	8018f48 <uxr_object_id_to_raw>
 8018786:	2300      	movs	r3, #0
 8018788:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801878c:	a912      	add	r1, sp, #72	@ 0x48
 801878e:	a806      	add	r0, sp, #24
 8018790:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8018794:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8018798:	2303      	movs	r3, #3
 801879a:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 801879e:	f7f6 f9e3 	bl	800eb68 <ucdr_init_buffer>
 80187a2:	a993      	add	r1, sp, #588	@ 0x24c
 80187a4:	a806      	add	r0, sp, #24
 80187a6:	f7fa fb65 	bl	8012e74 <uxr_serialize_OBJK_Subscriber_Binary>
 80187aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80187ac:	4628      	mov	r0, r5
 80187ae:	9600      	str	r6, [sp, #0]
 80187b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80187b2:	b29b      	uxth	r3, r3
 80187b4:	9401      	str	r4, [sp, #4]
 80187b6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80187ba:	f7ff ff0f 	bl	80185dc <uxr_common_create_entity>
 80187be:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 80187c2:	bd70      	pop	{r4, r5, r6, pc}

080187c4 <uxr_buffer_create_datawriter_bin>:
 80187c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187c8:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80187cc:	4606      	mov	r6, r0
 80187ce:	4618      	mov	r0, r3
 80187d0:	2703      	movs	r7, #3
 80187d2:	ac1d      	add	r4, sp, #116	@ 0x74
 80187d4:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 80187d8:	9105      	str	r1, [sp, #20]
 80187da:	a9a1      	add	r1, sp, #644	@ 0x284
 80187dc:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 80187e0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80187e4:	2305      	movs	r3, #5
 80187e6:	7123      	strb	r3, [r4, #4]
 80187e8:	f000 fbae 	bl	8018f48 <uxr_object_id_to_raw>
 80187ec:	a90e      	add	r1, sp, #56	@ 0x38
 80187ee:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 80187f0:	7227      	strb	r7, [r4, #8]
 80187f2:	f000 fba9 	bl	8018f48 <uxr_object_id_to_raw>
 80187f6:	2300      	movs	r3, #0
 80187f8:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 80187fc:	3d00      	subs	r5, #0
 80187fe:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8018802:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8018806:	bf18      	it	ne
 8018808:	2501      	movne	r5, #1
 801880a:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 801880e:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8018812:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8018816:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801881a:	2301      	movs	r3, #1
 801881c:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8018820:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8018824:	bb8a      	cbnz	r2, 801888a <uxr_buffer_create_datawriter_bin+0xc6>
 8018826:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801882a:	f04f 0c13 	mov.w	ip, #19
 801882e:	250b      	movs	r5, #11
 8018830:	2221      	movs	r2, #33	@ 0x21
 8018832:	2111      	movs	r1, #17
 8018834:	2009      	movs	r0, #9
 8018836:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801883a:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 801883e:	b923      	cbnz	r3, 801884a <uxr_buffer_create_datawriter_bin+0x86>
 8018840:	4672      	mov	r2, lr
 8018842:	4661      	mov	r1, ip
 8018844:	4628      	mov	r0, r5
 8018846:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 801884a:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 801884e:	2b01      	cmp	r3, #1
 8018850:	d025      	beq.n	801889e <uxr_buffer_create_datawriter_bin+0xda>
 8018852:	2b03      	cmp	r3, #3
 8018854:	d029      	beq.n	80188aa <uxr_buffer_create_datawriter_bin+0xe6>
 8018856:	b32b      	cbz	r3, 80188a4 <uxr_buffer_create_datawriter_bin+0xe0>
 8018858:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801885c:	a921      	add	r1, sp, #132	@ 0x84
 801885e:	a806      	add	r0, sp, #24
 8018860:	f7f6 f982 	bl	800eb68 <ucdr_init_buffer>
 8018864:	a90e      	add	r1, sp, #56	@ 0x38
 8018866:	a806      	add	r0, sp, #24
 8018868:	f7fa fbb6 	bl	8012fd8 <uxr_serialize_OBJK_DataWriter_Binary>
 801886c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801886e:	f8cd 8000 	str.w	r8, [sp]
 8018872:	4630      	mov	r0, r6
 8018874:	9401      	str	r4, [sp, #4]
 8018876:	60e3      	str	r3, [r4, #12]
 8018878:	b29b      	uxth	r3, r3
 801887a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801887e:	f7ff fead 	bl	80185dc <uxr_common_create_entity>
 8018882:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8018886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801888a:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 801888e:	f04f 0c12 	mov.w	ip, #18
 8018892:	250a      	movs	r5, #10
 8018894:	2220      	movs	r2, #32
 8018896:	2110      	movs	r1, #16
 8018898:	2008      	movs	r0, #8
 801889a:	2702      	movs	r7, #2
 801889c:	e7cd      	b.n	801883a <uxr_buffer_create_datawriter_bin+0x76>
 801889e:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80188a2:	e7d9      	b.n	8018858 <uxr_buffer_create_datawriter_bin+0x94>
 80188a4:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80188a8:	e7d6      	b.n	8018858 <uxr_buffer_create_datawriter_bin+0x94>
 80188aa:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80188ae:	e7d3      	b.n	8018858 <uxr_buffer_create_datawriter_bin+0x94>

080188b0 <uxr_buffer_create_datareader_bin>:
 80188b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188b4:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80188b8:	4606      	mov	r6, r0
 80188ba:	4618      	mov	r0, r3
 80188bc:	2703      	movs	r7, #3
 80188be:	ac1f      	add	r4, sp, #124	@ 0x7c
 80188c0:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 80188c4:	9105      	str	r1, [sp, #20]
 80188c6:	a9a3      	add	r1, sp, #652	@ 0x28c
 80188c8:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 80188cc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80188d0:	2306      	movs	r3, #6
 80188d2:	7123      	strb	r3, [r4, #4]
 80188d4:	f000 fb38 	bl	8018f48 <uxr_object_id_to_raw>
 80188d8:	a90e      	add	r1, sp, #56	@ 0x38
 80188da:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 80188dc:	7227      	strb	r7, [r4, #8]
 80188de:	f000 fb33 	bl	8018f48 <uxr_object_id_to_raw>
 80188e2:	2300      	movs	r3, #0
 80188e4:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 80188e8:	3d00      	subs	r5, #0
 80188ea:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 80188ee:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 80188f2:	bf18      	it	ne
 80188f4:	2501      	movne	r5, #1
 80188f6:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80188fa:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 80188fe:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8018902:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8018906:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801890a:	2301      	movs	r3, #1
 801890c:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8018910:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8018914:	bb8a      	cbnz	r2, 801897a <uxr_buffer_create_datareader_bin+0xca>
 8018916:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801891a:	f04f 0c13 	mov.w	ip, #19
 801891e:	250b      	movs	r5, #11
 8018920:	2221      	movs	r2, #33	@ 0x21
 8018922:	2111      	movs	r1, #17
 8018924:	2009      	movs	r0, #9
 8018926:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801892a:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 801892e:	b923      	cbnz	r3, 801893a <uxr_buffer_create_datareader_bin+0x8a>
 8018930:	4672      	mov	r2, lr
 8018932:	4661      	mov	r1, ip
 8018934:	4628      	mov	r0, r5
 8018936:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 801893a:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 801893e:	2b01      	cmp	r3, #1
 8018940:	d025      	beq.n	801898e <uxr_buffer_create_datareader_bin+0xde>
 8018942:	2b03      	cmp	r3, #3
 8018944:	d029      	beq.n	801899a <uxr_buffer_create_datareader_bin+0xea>
 8018946:	b32b      	cbz	r3, 8018994 <uxr_buffer_create_datareader_bin+0xe4>
 8018948:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801894c:	a923      	add	r1, sp, #140	@ 0x8c
 801894e:	a806      	add	r0, sp, #24
 8018950:	f7f6 f90a 	bl	800eb68 <ucdr_init_buffer>
 8018954:	a90e      	add	r1, sp, #56	@ 0x38
 8018956:	a806      	add	r0, sp, #24
 8018958:	f7fa fb02 	bl	8012f60 <uxr_serialize_OBJK_DataReader_Binary>
 801895c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801895e:	f8cd 8000 	str.w	r8, [sp]
 8018962:	4630      	mov	r0, r6
 8018964:	9401      	str	r4, [sp, #4]
 8018966:	60e3      	str	r3, [r4, #12]
 8018968:	b29b      	uxth	r3, r3
 801896a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801896e:	f7ff fe35 	bl	80185dc <uxr_common_create_entity>
 8018972:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8018976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801897a:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 801897e:	f04f 0c12 	mov.w	ip, #18
 8018982:	250a      	movs	r5, #10
 8018984:	2220      	movs	r2, #32
 8018986:	2110      	movs	r1, #16
 8018988:	2008      	movs	r0, #8
 801898a:	2702      	movs	r7, #2
 801898c:	e7cd      	b.n	801892a <uxr_buffer_create_datareader_bin+0x7a>
 801898e:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8018992:	e7d9      	b.n	8018948 <uxr_buffer_create_datareader_bin+0x98>
 8018994:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8018998:	e7d6      	b.n	8018948 <uxr_buffer_create_datareader_bin+0x98>
 801899a:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801899e:	e7d3      	b.n	8018948 <uxr_buffer_create_datareader_bin+0x98>

080189a0 <get_custom_error>:
 80189a0:	4b01      	ldr	r3, [pc, #4]	@ (80189a8 <get_custom_error+0x8>)
 80189a2:	7818      	ldrb	r0, [r3, #0]
 80189a4:	4770      	bx	lr
 80189a6:	bf00      	nop
 80189a8:	2000f298 	.word	0x2000f298

080189ac <recv_custom_msg>:
 80189ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189b0:	4693      	mov	fp, r2
 80189b2:	b089      	sub	sp, #36	@ 0x24
 80189b4:	2200      	movs	r2, #0
 80189b6:	4604      	mov	r4, r0
 80189b8:	468a      	mov	sl, r1
 80189ba:	9305      	str	r3, [sp, #20]
 80189bc:	f88d 201e 	strb.w	r2, [sp, #30]
 80189c0:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 80189c4:	b322      	cbz	r2, 8018a10 <recv_custom_msg+0x64>
 80189c6:	f200 2902 	addw	r9, r0, #514	@ 0x202
 80189ca:	f10d 081f 	add.w	r8, sp, #31
 80189ce:	af05      	add	r7, sp, #20
 80189d0:	f10d 061e 	add.w	r6, sp, #30
 80189d4:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80189d8:	e002      	b.n	80189e0 <recv_custom_msg+0x34>
 80189da:	9b05      	ldr	r3, [sp, #20]
 80189dc:	2b00      	cmp	r3, #0
 80189de:	dd0f      	ble.n	8018a00 <recv_custom_msg+0x54>
 80189e0:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 80189e4:	4623      	mov	r3, r4
 80189e6:	4622      	mov	r2, r4
 80189e8:	4648      	mov	r0, r9
 80189ea:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80189ee:	e9cd 5600 	strd	r5, r6, [sp]
 80189f2:	f001 f91f 	bl	8019c34 <uxr_read_framed_msg>
 80189f6:	2800      	cmp	r0, #0
 80189f8:	d0ef      	beq.n	80189da <recv_custom_msg+0x2e>
 80189fa:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80189fe:	b1b3      	cbz	r3, 8018a2e <recv_custom_msg+0x82>
 8018a00:	4b0f      	ldr	r3, [pc, #60]	@ (8018a40 <recv_custom_msg+0x94>)
 8018a02:	2000      	movs	r0, #0
 8018a04:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8018a08:	701a      	strb	r2, [r3, #0]
 8018a0a:	b009      	add	sp, #36	@ 0x24
 8018a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a10:	f10d 021f 	add.w	r2, sp, #31
 8018a14:	4601      	mov	r1, r0
 8018a16:	9200      	str	r2, [sp, #0]
 8018a18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018a1c:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8018a20:	47a8      	blx	r5
 8018a22:	2800      	cmp	r0, #0
 8018a24:	d0ec      	beq.n	8018a00 <recv_custom_msg+0x54>
 8018a26:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	d1e8      	bne.n	8018a00 <recv_custom_msg+0x54>
 8018a2e:	f8cb 0000 	str.w	r0, [fp]
 8018a32:	2001      	movs	r0, #1
 8018a34:	f8ca 4000 	str.w	r4, [sl]
 8018a38:	b009      	add	sp, #36	@ 0x24
 8018a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a3e:	bf00      	nop
 8018a40:	2000f298 	.word	0x2000f298

08018a44 <send_custom_msg>:
 8018a44:	b530      	push	{r4, r5, lr}
 8018a46:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8018a4a:	b087      	sub	sp, #28
 8018a4c:	4614      	mov	r4, r2
 8018a4e:	b995      	cbnz	r5, 8018a76 <send_custom_msg+0x32>
 8018a50:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 8018a54:	f10d 0317 	add.w	r3, sp, #23
 8018a58:	47a8      	blx	r5
 8018a5a:	1e03      	subs	r3, r0, #0
 8018a5c:	bf18      	it	ne
 8018a5e:	2301      	movne	r3, #1
 8018a60:	42a0      	cmp	r0, r4
 8018a62:	bf18      	it	ne
 8018a64:	2300      	movne	r3, #0
 8018a66:	b91b      	cbnz	r3, 8018a70 <send_custom_msg+0x2c>
 8018a68:	4a0a      	ldr	r2, [pc, #40]	@ (8018a94 <send_custom_msg+0x50>)
 8018a6a:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8018a6e:	7011      	strb	r1, [r2, #0]
 8018a70:	4618      	mov	r0, r3
 8018a72:	b007      	add	sp, #28
 8018a74:	bd30      	pop	{r4, r5, pc}
 8018a76:	460b      	mov	r3, r1
 8018a78:	2200      	movs	r2, #0
 8018a7a:	f10d 0117 	add.w	r1, sp, #23
 8018a7e:	9400      	str	r4, [sp, #0]
 8018a80:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8018a84:	4602      	mov	r2, r0
 8018a86:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8018a8a:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8018a8e:	f000 fef3 	bl	8019878 <uxr_write_framed_msg>
 8018a92:	e7e2      	b.n	8018a5a <send_custom_msg+0x16>
 8018a94:	2000f298 	.word	0x2000f298

08018a98 <uxr_set_custom_transport_callbacks>:
 8018a98:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8018a9c:	9901      	ldr	r1, [sp, #4]
 8018a9e:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8018aa2:	9b00      	ldr	r3, [sp, #0]
 8018aa4:	e9c0 319c 	strd	r3, r1, [r0, #624]	@ 0x270
 8018aa8:	4770      	bx	lr
 8018aaa:	bf00      	nop

08018aac <uxr_init_custom_transport>:
 8018aac:	b538      	push	{r3, r4, r5, lr}
 8018aae:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8018ab2:	b303      	cbz	r3, 8018af6 <uxr_init_custom_transport+0x4a>
 8018ab4:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8018ab8:	4604      	mov	r4, r0
 8018aba:	b1e2      	cbz	r2, 8018af6 <uxr_init_custom_transport+0x4a>
 8018abc:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8018ac0:	b1ca      	cbz	r2, 8018af6 <uxr_init_custom_transport+0x4a>
 8018ac2:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8018ac6:	b1b2      	cbz	r2, 8018af6 <uxr_init_custom_transport+0x4a>
 8018ac8:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8018acc:	4798      	blx	r3
 8018ace:	4605      	mov	r5, r0
 8018ad0:	b188      	cbz	r0, 8018af6 <uxr_init_custom_transport+0x4a>
 8018ad2:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8018ad6:	b98b      	cbnz	r3, 8018afc <uxr_init_custom_transport+0x50>
 8018ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8018b08 <uxr_init_custom_transport+0x5c>)
 8018ada:	4628      	mov	r0, r5
 8018adc:	490b      	ldr	r1, [pc, #44]	@ (8018b0c <uxr_init_custom_transport+0x60>)
 8018ade:	4a0c      	ldr	r2, [pc, #48]	@ (8018b10 <uxr_init_custom_transport+0x64>)
 8018ae0:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8018ae4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8018ae8:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8018aec:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8018af0:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8018af4:	bd38      	pop	{r3, r4, r5, pc}
 8018af6:	2500      	movs	r5, #0
 8018af8:	4628      	mov	r0, r5
 8018afa:	bd38      	pop	{r3, r4, r5, pc}
 8018afc:	2100      	movs	r1, #0
 8018afe:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8018b02:	f000 feb3 	bl	801986c <uxr_init_framing_io>
 8018b06:	e7e7      	b.n	8018ad8 <uxr_init_custom_transport+0x2c>
 8018b08:	080189ad 	.word	0x080189ad
 8018b0c:	08018a45 	.word	0x08018a45
 8018b10:	080189a1 	.word	0x080189a1

08018b14 <uxr_close_custom_transport>:
 8018b14:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8018b18:	4718      	bx	r3
 8018b1a:	bf00      	nop

08018b1c <uxr_init_input_best_effort_stream>:
 8018b1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018b20:	8003      	strh	r3, [r0, #0]
 8018b22:	4770      	bx	lr

08018b24 <uxr_reset_input_best_effort_stream>:
 8018b24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018b28:	8003      	strh	r3, [r0, #0]
 8018b2a:	4770      	bx	lr

08018b2c <uxr_receive_best_effort_message>:
 8018b2c:	b538      	push	{r3, r4, r5, lr}
 8018b2e:	4604      	mov	r4, r0
 8018b30:	8800      	ldrh	r0, [r0, #0]
 8018b32:	460d      	mov	r5, r1
 8018b34:	f000 fe82 	bl	801983c <uxr_seq_num_cmp>
 8018b38:	4603      	mov	r3, r0
 8018b3a:	0fc0      	lsrs	r0, r0, #31
 8018b3c:	2b00      	cmp	r3, #0
 8018b3e:	bfb8      	it	lt
 8018b40:	8025      	strhlt	r5, [r4, #0]
 8018b42:	bd38      	pop	{r3, r4, r5, pc}

08018b44 <on_full_input_buffer>:
 8018b44:	b570      	push	{r4, r5, r6, lr}
 8018b46:	460c      	mov	r4, r1
 8018b48:	4605      	mov	r5, r0
 8018b4a:	8908      	ldrh	r0, [r1, #8]
 8018b4c:	682b      	ldr	r3, [r5, #0]
 8018b4e:	7d26      	ldrb	r6, [r4, #20]
 8018b50:	e9d1 1200 	ldrd	r1, r2, [r1]
 8018b54:	fbb2 f2f0 	udiv	r2, r2, r0
 8018b58:	eba3 0c01 	sub.w	ip, r3, r1
 8018b5c:	fbbc fcf2 	udiv	ip, ip, r2
 8018b60:	f10c 0c01 	add.w	ip, ip, #1
 8018b64:	fa1f f38c 	uxth.w	r3, ip
 8018b68:	fbb3 fcf0 	udiv	ip, r3, r0
 8018b6c:	fb00 331c 	mls	r3, r0, ip, r3
 8018b70:	b29b      	uxth	r3, r3
 8018b72:	fb02 f303 	mul.w	r3, r2, r3
 8018b76:	1d18      	adds	r0, r3, #4
 8018b78:	4408      	add	r0, r1
 8018b7a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8018b7e:	b116      	cbz	r6, 8018b86 <on_full_input_buffer+0x42>
 8018b80:	2600      	movs	r6, #0
 8018b82:	f840 6c04 	str.w	r6, [r0, #-4]
 8018b86:	2a03      	cmp	r2, #3
 8018b88:	d801      	bhi.n	8018b8e <on_full_input_buffer+0x4a>
 8018b8a:	2001      	movs	r0, #1
 8018b8c:	bd70      	pop	{r4, r5, r6, pc}
 8018b8e:	3308      	adds	r3, #8
 8018b90:	4628      	mov	r0, r5
 8018b92:	3a04      	subs	r2, #4
 8018b94:	4419      	add	r1, r3
 8018b96:	692b      	ldr	r3, [r5, #16]
 8018b98:	f7f5 ffde 	bl	800eb58 <ucdr_init_buffer_origin>
 8018b9c:	4628      	mov	r0, r5
 8018b9e:	4622      	mov	r2, r4
 8018ba0:	4902      	ldr	r1, [pc, #8]	@ (8018bac <on_full_input_buffer+0x68>)
 8018ba2:	f7f5 ffb5 	bl	800eb10 <ucdr_set_on_full_buffer_callback>
 8018ba6:	2000      	movs	r0, #0
 8018ba8:	bd70      	pop	{r4, r5, r6, pc}
 8018baa:	bf00      	nop
 8018bac:	08018b45 	.word	0x08018b45

08018bb0 <uxr_init_input_reliable_stream>:
 8018bb0:	b510      	push	{r4, lr}
 8018bb2:	e9c0 1200 	strd	r1, r2, [r0]
 8018bb6:	2400      	movs	r4, #0
 8018bb8:	9a02      	ldr	r2, [sp, #8]
 8018bba:	8103      	strh	r3, [r0, #8]
 8018bbc:	6102      	str	r2, [r0, #16]
 8018bbe:	7504      	strb	r4, [r0, #20]
 8018bc0:	b1c3      	cbz	r3, 8018bf4 <uxr_init_input_reliable_stream+0x44>
 8018bc2:	600c      	str	r4, [r1, #0]
 8018bc4:	8901      	ldrh	r1, [r0, #8]
 8018bc6:	2901      	cmp	r1, #1
 8018bc8:	d914      	bls.n	8018bf4 <uxr_init_input_reliable_stream+0x44>
 8018bca:	f04f 0c01 	mov.w	ip, #1
 8018bce:	6843      	ldr	r3, [r0, #4]
 8018bd0:	f10c 0e01 	add.w	lr, ip, #1
 8018bd4:	fbbc f2f1 	udiv	r2, ip, r1
 8018bd8:	fbb3 f3f1 	udiv	r3, r3, r1
 8018bdc:	fb01 c212 	mls	r2, r1, r2, ip
 8018be0:	fa1f fc8e 	uxth.w	ip, lr
 8018be4:	b292      	uxth	r2, r2
 8018be6:	fb02 f303 	mul.w	r3, r2, r3
 8018bea:	6802      	ldr	r2, [r0, #0]
 8018bec:	50d4      	str	r4, [r2, r3]
 8018bee:	8901      	ldrh	r1, [r0, #8]
 8018bf0:	4561      	cmp	r1, ip
 8018bf2:	d8ec      	bhi.n	8018bce <uxr_init_input_reliable_stream+0x1e>
 8018bf4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018bf8:	60c3      	str	r3, [r0, #12]
 8018bfa:	bd10      	pop	{r4, pc}

08018bfc <uxr_reset_input_reliable_stream>:
 8018bfc:	8901      	ldrh	r1, [r0, #8]
 8018bfe:	b1d9      	cbz	r1, 8018c38 <uxr_reset_input_reliable_stream+0x3c>
 8018c00:	b510      	push	{r4, lr}
 8018c02:	f04f 0e00 	mov.w	lr, #0
 8018c06:	46f4      	mov	ip, lr
 8018c08:	4674      	mov	r4, lr
 8018c0a:	6843      	ldr	r3, [r0, #4]
 8018c0c:	f10e 0e01 	add.w	lr, lr, #1
 8018c10:	fbbc f2f1 	udiv	r2, ip, r1
 8018c14:	fbb3 f3f1 	udiv	r3, r3, r1
 8018c18:	fb01 c212 	mls	r2, r1, r2, ip
 8018c1c:	fa1f fc8e 	uxth.w	ip, lr
 8018c20:	b292      	uxth	r2, r2
 8018c22:	fb02 f303 	mul.w	r3, r2, r3
 8018c26:	6802      	ldr	r2, [r0, #0]
 8018c28:	50d4      	str	r4, [r2, r3]
 8018c2a:	8901      	ldrh	r1, [r0, #8]
 8018c2c:	4561      	cmp	r1, ip
 8018c2e:	d8ec      	bhi.n	8018c0a <uxr_reset_input_reliable_stream+0xe>
 8018c30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018c34:	60c3      	str	r3, [r0, #12]
 8018c36:	bd10      	pop	{r4, pc}
 8018c38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018c3c:	60c3      	str	r3, [r0, #12]
 8018c3e:	4770      	bx	lr

08018c40 <uxr_receive_reliable_message>:
 8018c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c44:	4604      	mov	r4, r0
 8018c46:	460d      	mov	r5, r1
 8018c48:	8901      	ldrh	r1, [r0, #8]
 8018c4a:	4617      	mov	r7, r2
 8018c4c:	8980      	ldrh	r0, [r0, #12]
 8018c4e:	4698      	mov	r8, r3
 8018c50:	f000 fdec 	bl	801982c <uxr_seq_num_add>
 8018c54:	4629      	mov	r1, r5
 8018c56:	4606      	mov	r6, r0
 8018c58:	89a0      	ldrh	r0, [r4, #12]
 8018c5a:	f000 fdef 	bl	801983c <uxr_seq_num_cmp>
 8018c5e:	2800      	cmp	r0, #0
 8018c60:	db0a      	blt.n	8018c78 <uxr_receive_reliable_message+0x38>
 8018c62:	2600      	movs	r6, #0
 8018c64:	4629      	mov	r1, r5
 8018c66:	89e0      	ldrh	r0, [r4, #14]
 8018c68:	f000 fde8 	bl	801983c <uxr_seq_num_cmp>
 8018c6c:	2800      	cmp	r0, #0
 8018c6e:	da00      	bge.n	8018c72 <uxr_receive_reliable_message+0x32>
 8018c70:	81e5      	strh	r5, [r4, #14]
 8018c72:	4630      	mov	r0, r6
 8018c74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c78:	4630      	mov	r0, r6
 8018c7a:	4629      	mov	r1, r5
 8018c7c:	f000 fdde 	bl	801983c <uxr_seq_num_cmp>
 8018c80:	2800      	cmp	r0, #0
 8018c82:	dbee      	blt.n	8018c62 <uxr_receive_reliable_message+0x22>
 8018c84:	6923      	ldr	r3, [r4, #16]
 8018c86:	4638      	mov	r0, r7
 8018c88:	4798      	blx	r3
 8018c8a:	4681      	mov	r9, r0
 8018c8c:	2101      	movs	r1, #1
 8018c8e:	89a0      	ldrh	r0, [r4, #12]
 8018c90:	f000 fdcc 	bl	801982c <uxr_seq_num_add>
 8018c94:	f1b9 0f00 	cmp.w	r9, #0
 8018c98:	bf08      	it	eq
 8018c9a:	4285      	cmpeq	r5, r0
 8018c9c:	bf0c      	ite	eq
 8018c9e:	2601      	moveq	r6, #1
 8018ca0:	2600      	movne	r6, #0
 8018ca2:	d104      	bne.n	8018cae <uxr_receive_reliable_message+0x6e>
 8018ca4:	2300      	movs	r3, #0
 8018ca6:	9a08      	ldr	r2, [sp, #32]
 8018ca8:	81a0      	strh	r0, [r4, #12]
 8018caa:	7013      	strb	r3, [r2, #0]
 8018cac:	e7da      	b.n	8018c64 <uxr_receive_reliable_message+0x24>
 8018cae:	8922      	ldrh	r2, [r4, #8]
 8018cb0:	6863      	ldr	r3, [r4, #4]
 8018cb2:	fbb5 f0f2 	udiv	r0, r5, r2
 8018cb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8018cba:	fb02 5010 	mls	r0, r2, r0, r5
 8018cbe:	b280      	uxth	r0, r0
 8018cc0:	fb03 f000 	mul.w	r0, r3, r0
 8018cc4:	6823      	ldr	r3, [r4, #0]
 8018cc6:	3004      	adds	r0, #4
 8018cc8:	4418      	add	r0, r3
 8018cca:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	d1c7      	bne.n	8018c62 <uxr_receive_reliable_message+0x22>
 8018cd2:	4639      	mov	r1, r7
 8018cd4:	4642      	mov	r2, r8
 8018cd6:	f002 fd48 	bl	801b76a <memcpy>
 8018cda:	8921      	ldrh	r1, [r4, #8]
 8018cdc:	6863      	ldr	r3, [r4, #4]
 8018cde:	fbb5 f2f1 	udiv	r2, r5, r1
 8018ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8018ce6:	fb01 5212 	mls	r2, r1, r2, r5
 8018cea:	b292      	uxth	r2, r2
 8018cec:	fb02 f303 	mul.w	r3, r2, r3
 8018cf0:	6822      	ldr	r2, [r4, #0]
 8018cf2:	f842 8003 	str.w	r8, [r2, r3]
 8018cf6:	2301      	movs	r3, #1
 8018cf8:	9a08      	ldr	r2, [sp, #32]
 8018cfa:	7013      	strb	r3, [r2, #0]
 8018cfc:	f1b9 0f00 	cmp.w	r9, #0
 8018d00:	d0af      	beq.n	8018c62 <uxr_receive_reliable_message+0x22>
 8018d02:	89a6      	ldrh	r6, [r4, #12]
 8018d04:	2101      	movs	r1, #1
 8018d06:	4630      	mov	r0, r6
 8018d08:	f000 fd90 	bl	801982c <uxr_seq_num_add>
 8018d0c:	8921      	ldrh	r1, [r4, #8]
 8018d0e:	6863      	ldr	r3, [r4, #4]
 8018d10:	4606      	mov	r6, r0
 8018d12:	fbb0 f2f1 	udiv	r2, r0, r1
 8018d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8018d1a:	fb01 0212 	mls	r2, r1, r2, r0
 8018d1e:	6820      	ldr	r0, [r4, #0]
 8018d20:	b292      	uxth	r2, r2
 8018d22:	fb02 f303 	mul.w	r3, r2, r3
 8018d26:	3304      	adds	r3, #4
 8018d28:	4418      	add	r0, r3
 8018d2a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	d097      	beq.n	8018c62 <uxr_receive_reliable_message+0x22>
 8018d32:	6923      	ldr	r3, [r4, #16]
 8018d34:	4798      	blx	r3
 8018d36:	2802      	cmp	r0, #2
 8018d38:	d002      	beq.n	8018d40 <uxr_receive_reliable_message+0x100>
 8018d3a:	2801      	cmp	r0, #1
 8018d3c:	d0e2      	beq.n	8018d04 <uxr_receive_reliable_message+0xc4>
 8018d3e:	e790      	b.n	8018c62 <uxr_receive_reliable_message+0x22>
 8018d40:	2601      	movs	r6, #1
 8018d42:	e78f      	b.n	8018c64 <uxr_receive_reliable_message+0x24>

08018d44 <uxr_next_input_reliable_buffer_available>:
 8018d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d48:	4604      	mov	r4, r0
 8018d4a:	460f      	mov	r7, r1
 8018d4c:	8980      	ldrh	r0, [r0, #12]
 8018d4e:	2101      	movs	r1, #1
 8018d50:	4690      	mov	r8, r2
 8018d52:	f000 fd6b 	bl	801982c <uxr_seq_num_add>
 8018d56:	8922      	ldrh	r2, [r4, #8]
 8018d58:	6866      	ldr	r6, [r4, #4]
 8018d5a:	fbb0 f3f2 	udiv	r3, r0, r2
 8018d5e:	fbb6 f6f2 	udiv	r6, r6, r2
 8018d62:	fb02 0313 	mls	r3, r2, r3, r0
 8018d66:	b29b      	uxth	r3, r3
 8018d68:	fb03 f606 	mul.w	r6, r3, r6
 8018d6c:	6823      	ldr	r3, [r4, #0]
 8018d6e:	3604      	adds	r6, #4
 8018d70:	441e      	add	r6, r3
 8018d72:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8018d76:	f1b9 0f00 	cmp.w	r9, #0
 8018d7a:	d023      	beq.n	8018dc4 <uxr_next_input_reliable_buffer_available+0x80>
 8018d7c:	4605      	mov	r5, r0
 8018d7e:	6923      	ldr	r3, [r4, #16]
 8018d80:	4630      	mov	r0, r6
 8018d82:	4798      	blx	r3
 8018d84:	4682      	mov	sl, r0
 8018d86:	b300      	cbz	r0, 8018dca <uxr_next_input_reliable_buffer_available+0x86>
 8018d88:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8018d8c:	2101      	movs	r1, #1
 8018d8e:	4650      	mov	r0, sl
 8018d90:	f000 fd4c 	bl	801982c <uxr_seq_num_add>
 8018d94:	8921      	ldrh	r1, [r4, #8]
 8018d96:	4682      	mov	sl, r0
 8018d98:	6863      	ldr	r3, [r4, #4]
 8018d9a:	6820      	ldr	r0, [r4, #0]
 8018d9c:	fbba f2f1 	udiv	r2, sl, r1
 8018da0:	fbb3 f3f1 	udiv	r3, r3, r1
 8018da4:	fb01 a212 	mls	r2, r1, r2, sl
 8018da8:	b292      	uxth	r2, r2
 8018daa:	fb02 f303 	mul.w	r3, r2, r3
 8018dae:	3304      	adds	r3, #4
 8018db0:	4418      	add	r0, r3
 8018db2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018db6:	b12b      	cbz	r3, 8018dc4 <uxr_next_input_reliable_buffer_available+0x80>
 8018db8:	6923      	ldr	r3, [r4, #16]
 8018dba:	4798      	blx	r3
 8018dbc:	2802      	cmp	r0, #2
 8018dbe:	d01b      	beq.n	8018df8 <uxr_next_input_reliable_buffer_available+0xb4>
 8018dc0:	2801      	cmp	r0, #1
 8018dc2:	d0e3      	beq.n	8018d8c <uxr_next_input_reliable_buffer_available+0x48>
 8018dc4:	2000      	movs	r0, #0
 8018dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018dca:	464a      	mov	r2, r9
 8018dcc:	4631      	mov	r1, r6
 8018dce:	4638      	mov	r0, r7
 8018dd0:	f7f5 feca 	bl	800eb68 <ucdr_init_buffer>
 8018dd4:	8921      	ldrh	r1, [r4, #8]
 8018dd6:	6863      	ldr	r3, [r4, #4]
 8018dd8:	2001      	movs	r0, #1
 8018dda:	fbb5 f2f1 	udiv	r2, r5, r1
 8018dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8018de2:	fb01 5212 	mls	r2, r1, r2, r5
 8018de6:	b292      	uxth	r2, r2
 8018de8:	fb02 f303 	mul.w	r3, r2, r3
 8018dec:	6822      	ldr	r2, [r4, #0]
 8018dee:	f842 a003 	str.w	sl, [r2, r3]
 8018df2:	81a5      	strh	r5, [r4, #12]
 8018df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018df8:	8920      	ldrh	r0, [r4, #8]
 8018dfa:	eb06 0108 	add.w	r1, r6, r8
 8018dfe:	6863      	ldr	r3, [r4, #4]
 8018e00:	eba9 0208 	sub.w	r2, r9, r8
 8018e04:	fbb5 f6f0 	udiv	r6, r5, r0
 8018e08:	fbb3 f3f0 	udiv	r3, r3, r0
 8018e0c:	fb00 5516 	mls	r5, r0, r6, r5
 8018e10:	2000      	movs	r0, #0
 8018e12:	b2ad      	uxth	r5, r5
 8018e14:	fb03 f505 	mul.w	r5, r3, r5
 8018e18:	6823      	ldr	r3, [r4, #0]
 8018e1a:	5158      	str	r0, [r3, r5]
 8018e1c:	4638      	mov	r0, r7
 8018e1e:	f7f5 fea3 	bl	800eb68 <ucdr_init_buffer>
 8018e22:	4638      	mov	r0, r7
 8018e24:	4622      	mov	r2, r4
 8018e26:	4903      	ldr	r1, [pc, #12]	@ (8018e34 <uxr_next_input_reliable_buffer_available+0xf0>)
 8018e28:	f7f5 fe72 	bl	800eb10 <ucdr_set_on_full_buffer_callback>
 8018e2c:	2001      	movs	r0, #1
 8018e2e:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8018e32:	e7c8      	b.n	8018dc6 <uxr_next_input_reliable_buffer_available+0x82>
 8018e34:	08018b45 	.word	0x08018b45

08018e38 <uxr_process_heartbeat>:
 8018e38:	b538      	push	{r3, r4, r5, lr}
 8018e3a:	4611      	mov	r1, r2
 8018e3c:	4604      	mov	r4, r0
 8018e3e:	89c0      	ldrh	r0, [r0, #14]
 8018e40:	4615      	mov	r5, r2
 8018e42:	f000 fcfb 	bl	801983c <uxr_seq_num_cmp>
 8018e46:	2800      	cmp	r0, #0
 8018e48:	bfb8      	it	lt
 8018e4a:	81e5      	strhlt	r5, [r4, #14]
 8018e4c:	bd38      	pop	{r3, r4, r5, pc}
 8018e4e:	bf00      	nop

08018e50 <uxr_compute_acknack>:
 8018e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018e54:	8903      	ldrh	r3, [r0, #8]
 8018e56:	4604      	mov	r4, r0
 8018e58:	460f      	mov	r7, r1
 8018e5a:	8985      	ldrh	r5, [r0, #12]
 8018e5c:	b1db      	cbz	r3, 8018e96 <uxr_compute_acknack+0x46>
 8018e5e:	4628      	mov	r0, r5
 8018e60:	2601      	movs	r6, #1
 8018e62:	e004      	b.n	8018e6e <uxr_compute_acknack+0x1e>
 8018e64:	4566      	cmp	r6, ip
 8018e66:	f106 0601 	add.w	r6, r6, #1
 8018e6a:	d214      	bcs.n	8018e96 <uxr_compute_acknack+0x46>
 8018e6c:	89a0      	ldrh	r0, [r4, #12]
 8018e6e:	b2b1      	uxth	r1, r6
 8018e70:	f000 fcdc 	bl	801982c <uxr_seq_num_add>
 8018e74:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018e78:	fbb0 f2fc 	udiv	r2, r0, ip
 8018e7c:	e9d4 1300 	ldrd	r1, r3, [r4]
 8018e80:	fb0c 0212 	mls	r2, ip, r2, r0
 8018e84:	fbb3 f3fc 	udiv	r3, r3, ip
 8018e88:	b292      	uxth	r2, r2
 8018e8a:	fb02 f303 	mul.w	r3, r2, r3
 8018e8e:	58cb      	ldr	r3, [r1, r3]
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d1e7      	bne.n	8018e64 <uxr_compute_acknack+0x14>
 8018e94:	4605      	mov	r5, r0
 8018e96:	803d      	strh	r5, [r7, #0]
 8018e98:	2101      	movs	r1, #1
 8018e9a:	89e6      	ldrh	r6, [r4, #14]
 8018e9c:	4628      	mov	r0, r5
 8018e9e:	f000 fcc9 	bl	8019834 <uxr_seq_num_sub>
 8018ea2:	4601      	mov	r1, r0
 8018ea4:	4630      	mov	r0, r6
 8018ea6:	f000 fcc5 	bl	8019834 <uxr_seq_num_sub>
 8018eaa:	4606      	mov	r6, r0
 8018eac:	b328      	cbz	r0, 8018efa <uxr_compute_acknack+0xaa>
 8018eae:	f04f 0900 	mov.w	r9, #0
 8018eb2:	f04f 0801 	mov.w	r8, #1
 8018eb6:	464d      	mov	r5, r9
 8018eb8:	fa1f f189 	uxth.w	r1, r9
 8018ebc:	8838      	ldrh	r0, [r7, #0]
 8018ebe:	f000 fcb5 	bl	801982c <uxr_seq_num_add>
 8018ec2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018ec6:	6861      	ldr	r1, [r4, #4]
 8018ec8:	fa08 fe09 	lsl.w	lr, r8, r9
 8018ecc:	6822      	ldr	r2, [r4, #0]
 8018ece:	f109 0901 	add.w	r9, r9, #1
 8018ed2:	ea4e 0e05 	orr.w	lr, lr, r5
 8018ed6:	fbb0 f3fc 	udiv	r3, r0, ip
 8018eda:	fbb1 f1fc 	udiv	r1, r1, ip
 8018ede:	fb03 001c 	mls	r0, r3, ip, r0
 8018ee2:	b283      	uxth	r3, r0
 8018ee4:	fb01 f303 	mul.w	r3, r1, r3
 8018ee8:	58d3      	ldr	r3, [r2, r3]
 8018eea:	b90b      	cbnz	r3, 8018ef0 <uxr_compute_acknack+0xa0>
 8018eec:	fa1f f58e 	uxth.w	r5, lr
 8018ef0:	454e      	cmp	r6, r9
 8018ef2:	d1e1      	bne.n	8018eb8 <uxr_compute_acknack+0x68>
 8018ef4:	4628      	mov	r0, r5
 8018ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018efa:	4605      	mov	r5, r0
 8018efc:	4628      	mov	r0, r5
 8018efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018f02:	bf00      	nop

08018f04 <uxr_object_id>:
 8018f04:	b082      	sub	sp, #8
 8018f06:	2300      	movs	r3, #0
 8018f08:	f88d 1006 	strb.w	r1, [sp, #6]
 8018f0c:	f360 030f 	bfi	r3, r0, #0, #16
 8018f10:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8018f14:	f362 431f 	bfi	r3, r2, #16, #16
 8018f18:	4618      	mov	r0, r3
 8018f1a:	b002      	add	sp, #8
 8018f1c:	4770      	bx	lr
 8018f1e:	bf00      	nop

08018f20 <uxr_object_id_from_raw>:
 8018f20:	7843      	ldrb	r3, [r0, #1]
 8018f22:	b082      	sub	sp, #8
 8018f24:	7801      	ldrb	r1, [r0, #0]
 8018f26:	2000      	movs	r0, #0
 8018f28:	091a      	lsrs	r2, r3, #4
 8018f2a:	f003 030f 	and.w	r3, r3, #15
 8018f2e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8018f32:	f88d 3006 	strb.w	r3, [sp, #6]
 8018f36:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018f3a:	f362 000f 	bfi	r0, r2, #0, #16
 8018f3e:	f363 401f 	bfi	r0, r3, #16, #16
 8018f42:	b002      	add	sp, #8
 8018f44:	4770      	bx	lr
 8018f46:	bf00      	nop

08018f48 <uxr_object_id_to_raw>:
 8018f48:	4602      	mov	r2, r0
 8018f4a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8018f4e:	b082      	sub	sp, #8
 8018f50:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8018f54:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8018f58:	f881 c000 	strb.w	ip, [r1]
 8018f5c:	7048      	strb	r0, [r1, #1]
 8018f5e:	b002      	add	sp, #8
 8018f60:	4770      	bx	lr
 8018f62:	bf00      	nop

08018f64 <uxr_init_output_best_effort_stream>:
 8018f64:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8018f68:	6001      	str	r1, [r0, #0]
 8018f6a:	7303      	strb	r3, [r0, #12]
 8018f6c:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8018f70:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8018f74:	4770      	bx	lr
 8018f76:	bf00      	nop

08018f78 <uxr_reset_output_best_effort_stream>:
 8018f78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018f7c:	7b03      	ldrb	r3, [r0, #12]
 8018f7e:	81c2      	strh	r2, [r0, #14]
 8018f80:	6043      	str	r3, [r0, #4]
 8018f82:	4770      	bx	lr

08018f84 <uxr_prepare_best_effort_buffer_to_write>:
 8018f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f86:	4604      	mov	r4, r0
 8018f88:	b083      	sub	sp, #12
 8018f8a:	6840      	ldr	r0, [r0, #4]
 8018f8c:	460d      	mov	r5, r1
 8018f8e:	4616      	mov	r6, r2
 8018f90:	f7f9 fb80 	bl	8012694 <uxr_submessage_padding>
 8018f94:	6863      	ldr	r3, [r4, #4]
 8018f96:	4418      	add	r0, r3
 8018f98:	68a3      	ldr	r3, [r4, #8]
 8018f9a:	1942      	adds	r2, r0, r5
 8018f9c:	4293      	cmp	r3, r2
 8018f9e:	bf2c      	ite	cs
 8018fa0:	2701      	movcs	r7, #1
 8018fa2:	2700      	movcc	r7, #0
 8018fa4:	d202      	bcs.n	8018fac <uxr_prepare_best_effort_buffer_to_write+0x28>
 8018fa6:	4638      	mov	r0, r7
 8018fa8:	b003      	add	sp, #12
 8018faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018fac:	9000      	str	r0, [sp, #0]
 8018fae:	2300      	movs	r3, #0
 8018fb0:	4630      	mov	r0, r6
 8018fb2:	6821      	ldr	r1, [r4, #0]
 8018fb4:	f7f5 fdc6 	bl	800eb44 <ucdr_init_buffer_origin_offset>
 8018fb8:	6861      	ldr	r1, [r4, #4]
 8018fba:	4638      	mov	r0, r7
 8018fbc:	4429      	add	r1, r5
 8018fbe:	6061      	str	r1, [r4, #4]
 8018fc0:	b003      	add	sp, #12
 8018fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018fc4 <uxr_prepare_best_effort_buffer_to_send>:
 8018fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018fc8:	4604      	mov	r4, r0
 8018fca:	461d      	mov	r5, r3
 8018fcc:	6840      	ldr	r0, [r0, #4]
 8018fce:	7b23      	ldrb	r3, [r4, #12]
 8018fd0:	4298      	cmp	r0, r3
 8018fd2:	bf8c      	ite	hi
 8018fd4:	2601      	movhi	r6, #1
 8018fd6:	2600      	movls	r6, #0
 8018fd8:	d802      	bhi.n	8018fe0 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8018fda:	4630      	mov	r0, r6
 8018fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018fe0:	4688      	mov	r8, r1
 8018fe2:	89e0      	ldrh	r0, [r4, #14]
 8018fe4:	2101      	movs	r1, #1
 8018fe6:	4617      	mov	r7, r2
 8018fe8:	f000 fc20 	bl	801982c <uxr_seq_num_add>
 8018fec:	6823      	ldr	r3, [r4, #0]
 8018fee:	81e0      	strh	r0, [r4, #14]
 8018ff0:	8028      	strh	r0, [r5, #0]
 8018ff2:	4630      	mov	r0, r6
 8018ff4:	f8c8 3000 	str.w	r3, [r8]
 8018ff8:	6863      	ldr	r3, [r4, #4]
 8018ffa:	603b      	str	r3, [r7, #0]
 8018ffc:	7b23      	ldrb	r3, [r4, #12]
 8018ffe:	6063      	str	r3, [r4, #4]
 8019000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019004 <on_full_output_buffer>:
 8019004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019006:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801900a:	460c      	mov	r4, r1
 801900c:	6803      	ldr	r3, [r0, #0]
 801900e:	4605      	mov	r5, r0
 8019010:	7b26      	ldrb	r6, [r4, #12]
 8019012:	e9d1 1200 	ldrd	r1, r2, [r1]
 8019016:	fbb2 f2fc 	udiv	r2, r2, ip
 801901a:	eba3 0e01 	sub.w	lr, r3, r1
 801901e:	6903      	ldr	r3, [r0, #16]
 8019020:	fbbe fef2 	udiv	lr, lr, r2
 8019024:	f10e 0e01 	add.w	lr, lr, #1
 8019028:	fa1f fe8e 	uxth.w	lr, lr
 801902c:	fbbe f7fc 	udiv	r7, lr, ip
 8019030:	fb0c ec17 	mls	ip, ip, r7, lr
 8019034:	fa1f fc8c 	uxth.w	ip, ip
 8019038:	fb02 fc0c 	mul.w	ip, r2, ip
 801903c:	f851 200c 	ldr.w	r2, [r1, ip]
 8019040:	44b4      	add	ip, r6
 8019042:	1b92      	subs	r2, r2, r6
 8019044:	f10c 0c08 	add.w	ip, ip, #8
 8019048:	3a04      	subs	r2, #4
 801904a:	4461      	add	r1, ip
 801904c:	f7f5 fd84 	bl	800eb58 <ucdr_init_buffer_origin>
 8019050:	4628      	mov	r0, r5
 8019052:	4622      	mov	r2, r4
 8019054:	4902      	ldr	r1, [pc, #8]	@ (8019060 <on_full_output_buffer+0x5c>)
 8019056:	f7f5 fd5b 	bl	800eb10 <ucdr_set_on_full_buffer_callback>
 801905a:	2000      	movs	r0, #0
 801905c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801905e:	bf00      	nop
 8019060:	08019005 	.word	0x08019005

08019064 <uxr_init_output_reliable_stream>:
 8019064:	b530      	push	{r4, r5, lr}
 8019066:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801906a:	8103      	strh	r3, [r0, #8]
 801906c:	7304      	strb	r4, [r0, #12]
 801906e:	e9c0 1200 	strd	r1, r2, [r0]
 8019072:	b1e3      	cbz	r3, 80190ae <uxr_init_output_reliable_stream+0x4a>
 8019074:	600c      	str	r4, [r1, #0]
 8019076:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801907a:	f1bc 0f01 	cmp.w	ip, #1
 801907e:	d916      	bls.n	80190ae <uxr_init_output_reliable_stream+0x4a>
 8019080:	f04f 0e01 	mov.w	lr, #1
 8019084:	6843      	ldr	r3, [r0, #4]
 8019086:	f10e 0501 	add.w	r5, lr, #1
 801908a:	7b04      	ldrb	r4, [r0, #12]
 801908c:	6801      	ldr	r1, [r0, #0]
 801908e:	fbbe f2fc 	udiv	r2, lr, ip
 8019092:	fbb3 f3fc 	udiv	r3, r3, ip
 8019096:	fb0c e212 	mls	r2, ip, r2, lr
 801909a:	fa1f fe85 	uxth.w	lr, r5
 801909e:	b292      	uxth	r2, r2
 80190a0:	fb02 f303 	mul.w	r3, r2, r3
 80190a4:	50cc      	str	r4, [r1, r3]
 80190a6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80190aa:	45f4      	cmp	ip, lr
 80190ac:	d8ea      	bhi.n	8019084 <uxr_init_output_reliable_stream+0x20>
 80190ae:	4b07      	ldr	r3, [pc, #28]	@ (80190cc <uxr_init_output_reliable_stream+0x68>)
 80190b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80190b4:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80190b8:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 80190bc:	f8c0 300e 	str.w	r3, [r0, #14]
 80190c0:	2300      	movs	r3, #0
 80190c2:	8242      	strh	r2, [r0, #18]
 80190c4:	8403      	strh	r3, [r0, #32]
 80190c6:	e9c0 4506 	strd	r4, r5, [r0, #24]
 80190ca:	bd30      	pop	{r4, r5, pc}
 80190cc:	ffff0000 	.word	0xffff0000

080190d0 <uxr_reset_output_reliable_stream>:
 80190d0:	8901      	ldrh	r1, [r0, #8]
 80190d2:	b510      	push	{r4, lr}
 80190d4:	b1b1      	cbz	r1, 8019104 <uxr_reset_output_reliable_stream+0x34>
 80190d6:	f04f 0e00 	mov.w	lr, #0
 80190da:	46f4      	mov	ip, lr
 80190dc:	6843      	ldr	r3, [r0, #4]
 80190de:	f10e 0e01 	add.w	lr, lr, #1
 80190e2:	7b04      	ldrb	r4, [r0, #12]
 80190e4:	fbbc f2f1 	udiv	r2, ip, r1
 80190e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80190ec:	fb01 c212 	mls	r2, r1, r2, ip
 80190f0:	fa1f fc8e 	uxth.w	ip, lr
 80190f4:	b292      	uxth	r2, r2
 80190f6:	fb02 f303 	mul.w	r3, r2, r3
 80190fa:	6802      	ldr	r2, [r0, #0]
 80190fc:	50d4      	str	r4, [r2, r3]
 80190fe:	8901      	ldrh	r1, [r0, #8]
 8019100:	4561      	cmp	r1, ip
 8019102:	d8eb      	bhi.n	80190dc <uxr_reset_output_reliable_stream+0xc>
 8019104:	4b08      	ldr	r3, [pc, #32]	@ (8019128 <uxr_reset_output_reliable_stream+0x58>)
 8019106:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801910a:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 8019120 <uxr_reset_output_reliable_stream+0x50>
 801910e:	f8c0 300e 	str.w	r3, [r0, #14]
 8019112:	2300      	movs	r3, #0
 8019114:	8242      	strh	r2, [r0, #18]
 8019116:	8403      	strh	r3, [r0, #32]
 8019118:	ed80 7b06 	vstr	d7, [r0, #24]
 801911c:	bd10      	pop	{r4, pc}
 801911e:	bf00      	nop
 8019120:	ffffffff 	.word	0xffffffff
 8019124:	7fffffff 	.word	0x7fffffff
 8019128:	ffff0000 	.word	0xffff0000

0801912c <uxr_prepare_reliable_buffer_to_write>:
 801912c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019130:	4604      	mov	r4, r0
 8019132:	b091      	sub	sp, #68	@ 0x44
 8019134:	8900      	ldrh	r0, [r0, #8]
 8019136:	468b      	mov	fp, r1
 8019138:	89e6      	ldrh	r6, [r4, #14]
 801913a:	9204      	str	r2, [sp, #16]
 801913c:	6865      	ldr	r5, [r4, #4]
 801913e:	6823      	ldr	r3, [r4, #0]
 8019140:	f894 900c 	ldrb.w	r9, [r4, #12]
 8019144:	fbb6 f2f0 	udiv	r2, r6, r0
 8019148:	fbb5 f5f0 	udiv	r5, r5, r0
 801914c:	fb00 6212 	mls	r2, r0, r2, r6
 8019150:	1f2f      	subs	r7, r5, #4
 8019152:	b292      	uxth	r2, r2
 8019154:	fb05 3202 	mla	r2, r5, r2, r3
 8019158:	1d11      	adds	r1, r2, #4
 801915a:	f8d2 8000 	ldr.w	r8, [r2]
 801915e:	9103      	str	r1, [sp, #12]
 8019160:	2800      	cmp	r0, #0
 8019162:	f000 814a 	beq.w	80193fa <uxr_prepare_reliable_buffer_to_write+0x2ce>
 8019166:	f04f 0c00 	mov.w	ip, #0
 801916a:	46e2      	mov	sl, ip
 801916c:	4661      	mov	r1, ip
 801916e:	f10c 0c01 	add.w	ip, ip, #1
 8019172:	fbb1 f2f0 	udiv	r2, r1, r0
 8019176:	fb00 1212 	mls	r2, r0, r2, r1
 801917a:	fa1f f18c 	uxth.w	r1, ip
 801917e:	b292      	uxth	r2, r2
 8019180:	fb05 f202 	mul.w	r2, r5, r2
 8019184:	589a      	ldr	r2, [r3, r2]
 8019186:	454a      	cmp	r2, r9
 8019188:	d103      	bne.n	8019192 <uxr_prepare_reliable_buffer_to_write+0x66>
 801918a:	f10a 0a01 	add.w	sl, sl, #1
 801918e:	fa1f fa8a 	uxth.w	sl, sl
 8019192:	4281      	cmp	r1, r0
 8019194:	d3eb      	bcc.n	801916e <uxr_prepare_reliable_buffer_to_write+0x42>
 8019196:	4640      	mov	r0, r8
 8019198:	2104      	movs	r1, #4
 801919a:	f8cd a014 	str.w	sl, [sp, #20]
 801919e:	f7f5 fce7 	bl	800eb70 <ucdr_alignment>
 80191a2:	4480      	add	r8, r0
 80191a4:	eb08 020b 	add.w	r2, r8, fp
 80191a8:	42ba      	cmp	r2, r7
 80191aa:	f240 80ca 	bls.w	8019342 <uxr_prepare_reliable_buffer_to_write+0x216>
 80191ae:	7b22      	ldrb	r2, [r4, #12]
 80191b0:	445a      	add	r2, fp
 80191b2:	42ba      	cmp	r2, r7
 80191b4:	f240 80b2 	bls.w	801931c <uxr_prepare_reliable_buffer_to_write+0x1f0>
 80191b8:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 80191bc:	b2bb      	uxth	r3, r7
 80191be:	eba2 0209 	sub.w	r2, r2, r9
 80191c2:	441a      	add	r2, r3
 80191c4:	b292      	uxth	r2, r2
 80191c6:	fb0a f902 	mul.w	r9, sl, r2
 80191ca:	9205      	str	r2, [sp, #20]
 80191cc:	45d9      	cmp	r9, fp
 80191ce:	9206      	str	r2, [sp, #24]
 80191d0:	f0c0 80b3 	bcc.w	801933a <uxr_prepare_reliable_buffer_to_write+0x20e>
 80191d4:	f108 0204 	add.w	r2, r8, #4
 80191d8:	42ba      	cmp	r2, r7
 80191da:	f080 80da 	bcs.w	8019392 <uxr_prepare_reliable_buffer_to_write+0x266>
 80191de:	f1a3 0904 	sub.w	r9, r3, #4
 80191e2:	9b05      	ldr	r3, [sp, #20]
 80191e4:	eba9 0908 	sub.w	r9, r9, r8
 80191e8:	fa1f f989 	uxth.w	r9, r9
 80191ec:	ebab 0b09 	sub.w	fp, fp, r9
 80191f0:	fbbb f2f3 	udiv	r2, fp, r3
 80191f4:	fb03 b312 	mls	r3, r3, r2, fp
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	f040 80c4 	bne.w	8019386 <uxr_prepare_reliable_buffer_to_write+0x25a>
 80191fe:	b293      	uxth	r3, r2
 8019200:	4553      	cmp	r3, sl
 8019202:	f200 809a 	bhi.w	801933a <uxr_prepare_reliable_buffer_to_write+0x20e>
 8019206:	2b00      	cmp	r3, #0
 8019208:	f000 80f9 	beq.w	80193fe <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801920c:	f8cd 801c 	str.w	r8, [sp, #28]
 8019210:	f04f 0a00 	mov.w	sl, #0
 8019214:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8019218:	f10d 0b20 	add.w	fp, sp, #32
 801921c:	9505      	str	r5, [sp, #20]
 801921e:	461d      	mov	r5, r3
 8019220:	e000      	b.n	8019224 <uxr_prepare_reliable_buffer_to_write+0xf8>
 8019222:	46c1      	mov	r9, r8
 8019224:	8922      	ldrh	r2, [r4, #8]
 8019226:	4658      	mov	r0, fp
 8019228:	6863      	ldr	r3, [r4, #4]
 801922a:	f10a 0a01 	add.w	sl, sl, #1
 801922e:	fbb6 f1f2 	udiv	r1, r6, r2
 8019232:	fbb3 f3f2 	udiv	r3, r3, r2
 8019236:	fb02 6111 	mls	r1, r2, r1, r6
 801923a:	463a      	mov	r2, r7
 801923c:	b289      	uxth	r1, r1
 801923e:	fb03 f101 	mul.w	r1, r3, r1
 8019242:	6823      	ldr	r3, [r4, #0]
 8019244:	3104      	adds	r1, #4
 8019246:	4419      	add	r1, r3
 8019248:	2300      	movs	r3, #0
 801924a:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801924e:	f8cd c000 	str.w	ip, [sp]
 8019252:	f7f5 fc77 	bl	800eb44 <ucdr_init_buffer_origin_offset>
 8019256:	464a      	mov	r2, r9
 8019258:	2300      	movs	r3, #0
 801925a:	210d      	movs	r1, #13
 801925c:	4658      	mov	r0, fp
 801925e:	f7f9 f9d9 	bl	8012614 <uxr_buffer_submessage_header>
 8019262:	8921      	ldrh	r1, [r4, #8]
 8019264:	6863      	ldr	r3, [r4, #4]
 8019266:	4630      	mov	r0, r6
 8019268:	fbb6 f2f1 	udiv	r2, r6, r1
 801926c:	fbb3 f3f1 	udiv	r3, r3, r1
 8019270:	fb01 6212 	mls	r2, r1, r2, r6
 8019274:	2101      	movs	r1, #1
 8019276:	b292      	uxth	r2, r2
 8019278:	fb02 f303 	mul.w	r3, r2, r3
 801927c:	6822      	ldr	r2, [r4, #0]
 801927e:	50d7      	str	r7, [r2, r3]
 8019280:	f000 fad4 	bl	801982c <uxr_seq_num_add>
 8019284:	4606      	mov	r6, r0
 8019286:	fa1f f38a 	uxth.w	r3, sl
 801928a:	429d      	cmp	r5, r3
 801928c:	d8c9      	bhi.n	8019222 <uxr_prepare_reliable_buffer_to_write+0xf6>
 801928e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8019292:	9d05      	ldr	r5, [sp, #20]
 8019294:	8920      	ldrh	r0, [r4, #8]
 8019296:	463a      	mov	r2, r7
 8019298:	6863      	ldr	r3, [r4, #4]
 801929a:	fbb6 f1f0 	udiv	r1, r6, r0
 801929e:	fbb3 f3f0 	udiv	r3, r3, r0
 80192a2:	fb00 6111 	mls	r1, r0, r1, r6
 80192a6:	4658      	mov	r0, fp
 80192a8:	b289      	uxth	r1, r1
 80192aa:	fb01 f303 	mul.w	r3, r1, r3
 80192ae:	6821      	ldr	r1, [r4, #0]
 80192b0:	3304      	adds	r3, #4
 80192b2:	4419      	add	r1, r3
 80192b4:	2300      	movs	r3, #0
 80192b6:	f851 7c04 	ldr.w	r7, [r1, #-4]
 80192ba:	9700      	str	r7, [sp, #0]
 80192bc:	f7f5 fc42 	bl	800eb44 <ucdr_init_buffer_origin_offset>
 80192c0:	9f06      	ldr	r7, [sp, #24]
 80192c2:	4658      	mov	r0, fp
 80192c4:	2302      	movs	r3, #2
 80192c6:	b2ba      	uxth	r2, r7
 80192c8:	210d      	movs	r1, #13
 80192ca:	f7f9 f9a3 	bl	8012614 <uxr_buffer_submessage_header>
 80192ce:	f108 0104 	add.w	r1, r8, #4
 80192d2:	9b03      	ldr	r3, [sp, #12]
 80192d4:	f1a5 0208 	sub.w	r2, r5, #8
 80192d8:	8925      	ldrh	r5, [r4, #8]
 80192da:	440b      	add	r3, r1
 80192dc:	eba2 0208 	sub.w	r2, r2, r8
 80192e0:	fbb6 f0f5 	udiv	r0, r6, r5
 80192e4:	4619      	mov	r1, r3
 80192e6:	6863      	ldr	r3, [r4, #4]
 80192e8:	fb05 6010 	mls	r0, r5, r0, r6
 80192ec:	fbb3 f3f5 	udiv	r3, r3, r5
 80192f0:	b280      	uxth	r0, r0
 80192f2:	6825      	ldr	r5, [r4, #0]
 80192f4:	fb00 f303 	mul.w	r3, r0, r3
 80192f8:	7b20      	ldrb	r0, [r4, #12]
 80192fa:	3004      	adds	r0, #4
 80192fc:	4438      	add	r0, r7
 80192fe:	50e8      	str	r0, [r5, r3]
 8019300:	9d04      	ldr	r5, [sp, #16]
 8019302:	4628      	mov	r0, r5
 8019304:	f7f5 fc30 	bl	800eb68 <ucdr_init_buffer>
 8019308:	4628      	mov	r0, r5
 801930a:	4622      	mov	r2, r4
 801930c:	493d      	ldr	r1, [pc, #244]	@ (8019404 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801930e:	f7f5 fbff 	bl	800eb10 <ucdr_set_on_full_buffer_callback>
 8019312:	2001      	movs	r0, #1
 8019314:	81e6      	strh	r6, [r4, #14]
 8019316:	b011      	add	sp, #68	@ 0x44
 8019318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801931c:	2101      	movs	r1, #1
 801931e:	89e0      	ldrh	r0, [r4, #14]
 8019320:	f000 fa84 	bl	801982c <uxr_seq_num_add>
 8019324:	4605      	mov	r5, r0
 8019326:	8921      	ldrh	r1, [r4, #8]
 8019328:	8a60      	ldrh	r0, [r4, #18]
 801932a:	f000 fa7f 	bl	801982c <uxr_seq_num_add>
 801932e:	4601      	mov	r1, r0
 8019330:	4628      	mov	r0, r5
 8019332:	f000 fa83 	bl	801983c <uxr_seq_num_cmp>
 8019336:	2800      	cmp	r0, #0
 8019338:	dd44      	ble.n	80193c4 <uxr_prepare_reliable_buffer_to_write+0x298>
 801933a:	2000      	movs	r0, #0
 801933c:	b011      	add	sp, #68	@ 0x44
 801933e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019342:	8921      	ldrh	r1, [r4, #8]
 8019344:	8a60      	ldrh	r0, [r4, #18]
 8019346:	9205      	str	r2, [sp, #20]
 8019348:	f000 fa70 	bl	801982c <uxr_seq_num_add>
 801934c:	4601      	mov	r1, r0
 801934e:	4630      	mov	r0, r6
 8019350:	f000 fa74 	bl	801983c <uxr_seq_num_cmp>
 8019354:	2800      	cmp	r0, #0
 8019356:	9a05      	ldr	r2, [sp, #20]
 8019358:	dcef      	bgt.n	801933a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801935a:	8925      	ldrh	r5, [r4, #8]
 801935c:	e9d4 7300 	ldrd	r7, r3, [r4]
 8019360:	fbb6 f4f5 	udiv	r4, r6, r5
 8019364:	fbb3 f3f5 	udiv	r3, r3, r5
 8019368:	fb05 6414 	mls	r4, r5, r4, r6
 801936c:	b2a4      	uxth	r4, r4
 801936e:	fb04 f303 	mul.w	r3, r4, r3
 8019372:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8019376:	50fa      	str	r2, [r7, r3]
 8019378:	2300      	movs	r3, #0
 801937a:	f8cd 8000 	str.w	r8, [sp]
 801937e:	f7f5 fbe1 	bl	800eb44 <ucdr_init_buffer_origin_offset>
 8019382:	2001      	movs	r0, #1
 8019384:	e7da      	b.n	801933c <uxr_prepare_reliable_buffer_to_write+0x210>
 8019386:	3201      	adds	r2, #1
 8019388:	9306      	str	r3, [sp, #24]
 801938a:	b293      	uxth	r3, r2
 801938c:	4553      	cmp	r3, sl
 801938e:	d8d4      	bhi.n	801933a <uxr_prepare_reliable_buffer_to_write+0x20e>
 8019390:	e739      	b.n	8019206 <uxr_prepare_reliable_buffer_to_write+0xda>
 8019392:	4630      	mov	r0, r6
 8019394:	2101      	movs	r1, #1
 8019396:	9307      	str	r3, [sp, #28]
 8019398:	f000 fa48 	bl	801982c <uxr_seq_num_add>
 801939c:	4606      	mov	r6, r0
 801939e:	8920      	ldrh	r0, [r4, #8]
 80193a0:	6862      	ldr	r2, [r4, #4]
 80193a2:	fbb6 f1f0 	udiv	r1, r6, r0
 80193a6:	fbb2 f2f0 	udiv	r2, r2, r0
 80193aa:	fb00 6111 	mls	r1, r0, r1, r6
 80193ae:	b289      	uxth	r1, r1
 80193b0:	fb01 f202 	mul.w	r2, r1, r2
 80193b4:	6821      	ldr	r1, [r4, #0]
 80193b6:	3204      	adds	r2, #4
 80193b8:	188b      	adds	r3, r1, r2
 80193ba:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80193be:	9303      	str	r3, [sp, #12]
 80193c0:	9b07      	ldr	r3, [sp, #28]
 80193c2:	e70c      	b.n	80191de <uxr_prepare_reliable_buffer_to_write+0xb2>
 80193c4:	8921      	ldrh	r1, [r4, #8]
 80193c6:	6863      	ldr	r3, [r4, #4]
 80193c8:	9804      	ldr	r0, [sp, #16]
 80193ca:	fbb5 f2f1 	udiv	r2, r5, r1
 80193ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80193d2:	fb01 5212 	mls	r2, r1, r2, r5
 80193d6:	6821      	ldr	r1, [r4, #0]
 80193d8:	b292      	uxth	r2, r2
 80193da:	fb02 f303 	mul.w	r3, r2, r3
 80193de:	7b22      	ldrb	r2, [r4, #12]
 80193e0:	3304      	adds	r3, #4
 80193e2:	445a      	add	r2, fp
 80193e4:	4419      	add	r1, r3
 80193e6:	f841 2c04 	str.w	r2, [r1, #-4]
 80193ea:	7b23      	ldrb	r3, [r4, #12]
 80193ec:	9300      	str	r3, [sp, #0]
 80193ee:	2300      	movs	r3, #0
 80193f0:	f7f5 fba8 	bl	800eb44 <ucdr_init_buffer_origin_offset>
 80193f4:	2001      	movs	r0, #1
 80193f6:	81e5      	strh	r5, [r4, #14]
 80193f8:	e7a0      	b.n	801933c <uxr_prepare_reliable_buffer_to_write+0x210>
 80193fa:	4682      	mov	sl, r0
 80193fc:	e6cb      	b.n	8019196 <uxr_prepare_reliable_buffer_to_write+0x6a>
 80193fe:	f10d 0b20 	add.w	fp, sp, #32
 8019402:	e747      	b.n	8019294 <uxr_prepare_reliable_buffer_to_write+0x168>
 8019404:	08019005 	.word	0x08019005

08019408 <uxr_prepare_next_reliable_buffer_to_send>:
 8019408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801940a:	4604      	mov	r4, r0
 801940c:	461d      	mov	r5, r3
 801940e:	460f      	mov	r7, r1
 8019410:	8a00      	ldrh	r0, [r0, #16]
 8019412:	2101      	movs	r1, #1
 8019414:	4616      	mov	r6, r2
 8019416:	f000 fa09 	bl	801982c <uxr_seq_num_add>
 801941a:	8028      	strh	r0, [r5, #0]
 801941c:	8922      	ldrh	r2, [r4, #8]
 801941e:	6863      	ldr	r3, [r4, #4]
 8019420:	fbb0 f1f2 	udiv	r1, r0, r2
 8019424:	fbb3 f3f2 	udiv	r3, r3, r2
 8019428:	fb02 0c11 	mls	ip, r2, r1, r0
 801942c:	89e1      	ldrh	r1, [r4, #14]
 801942e:	fa1f fc8c 	uxth.w	ip, ip
 8019432:	fb0c fc03 	mul.w	ip, ip, r3
 8019436:	6823      	ldr	r3, [r4, #0]
 8019438:	f10c 0c04 	add.w	ip, ip, #4
 801943c:	4463      	add	r3, ip
 801943e:	603b      	str	r3, [r7, #0]
 8019440:	6823      	ldr	r3, [r4, #0]
 8019442:	449c      	add	ip, r3
 8019444:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8019448:	6033      	str	r3, [r6, #0]
 801944a:	f000 f9f7 	bl	801983c <uxr_seq_num_cmp>
 801944e:	2800      	cmp	r0, #0
 8019450:	dd01      	ble.n	8019456 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8019452:	2000      	movs	r0, #0
 8019454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019456:	7b23      	ldrb	r3, [r4, #12]
 8019458:	6832      	ldr	r2, [r6, #0]
 801945a:	429a      	cmp	r2, r3
 801945c:	d9f9      	bls.n	8019452 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801945e:	8a61      	ldrh	r1, [r4, #18]
 8019460:	8a20      	ldrh	r0, [r4, #16]
 8019462:	f000 f9e7 	bl	8019834 <uxr_seq_num_sub>
 8019466:	8923      	ldrh	r3, [r4, #8]
 8019468:	4283      	cmp	r3, r0
 801946a:	d0f2      	beq.n	8019452 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801946c:	8828      	ldrh	r0, [r5, #0]
 801946e:	89e3      	ldrh	r3, [r4, #14]
 8019470:	8220      	strh	r0, [r4, #16]
 8019472:	4298      	cmp	r0, r3
 8019474:	d001      	beq.n	801947a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8019476:	2001      	movs	r0, #1
 8019478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801947a:	2101      	movs	r1, #1
 801947c:	f000 f9d6 	bl	801982c <uxr_seq_num_add>
 8019480:	4603      	mov	r3, r0
 8019482:	2001      	movs	r0, #1
 8019484:	81e3      	strh	r3, [r4, #14]
 8019486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019488 <uxr_update_output_stream_heartbeat_timestamp>:
 8019488:	b570      	push	{r4, r5, r6, lr}
 801948a:	8a01      	ldrh	r1, [r0, #16]
 801948c:	4604      	mov	r4, r0
 801948e:	8a40      	ldrh	r0, [r0, #18]
 8019490:	4615      	mov	r5, r2
 8019492:	461e      	mov	r6, r3
 8019494:	f000 f9d2 	bl	801983c <uxr_seq_num_cmp>
 8019498:	2800      	cmp	r0, #0
 801949a:	db07      	blt.n	80194ac <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801949c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80194a0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80194a4:	2000      	movs	r0, #0
 80194a6:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80194aa:	bd70      	pop	{r4, r5, r6, pc}
 80194ac:	f894 0020 	ldrb.w	r0, [r4, #32]
 80194b0:	b940      	cbnz	r0, 80194c4 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80194b2:	2301      	movs	r3, #1
 80194b4:	f884 3020 	strb.w	r3, [r4, #32]
 80194b8:	3564      	adds	r5, #100	@ 0x64
 80194ba:	f146 0600 	adc.w	r6, r6, #0
 80194be:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80194c2:	bd70      	pop	{r4, r5, r6, pc}
 80194c4:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80194c8:	4295      	cmp	r5, r2
 80194ca:	eb76 0303 	sbcs.w	r3, r6, r3
 80194ce:	db04      	blt.n	80194da <uxr_update_output_stream_heartbeat_timestamp+0x52>
 80194d0:	1c43      	adds	r3, r0, #1
 80194d2:	2001      	movs	r0, #1
 80194d4:	f884 3020 	strb.w	r3, [r4, #32]
 80194d8:	e7ee      	b.n	80194b8 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 80194da:	2000      	movs	r0, #0
 80194dc:	e7ec      	b.n	80194b8 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 80194de:	bf00      	nop

080194e0 <uxr_begin_output_nack_buffer_it>:
 80194e0:	8a40      	ldrh	r0, [r0, #18]
 80194e2:	4770      	bx	lr

080194e4 <uxr_next_reliable_nack_buffer_to_send>:
 80194e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194e8:	f890 7021 	ldrb.w	r7, [r0, #33]	@ 0x21
 80194ec:	b197      	cbz	r7, 8019514 <uxr_next_reliable_nack_buffer_to_send+0x30>
 80194ee:	4680      	mov	r8, r0
 80194f0:	460d      	mov	r5, r1
 80194f2:	4616      	mov	r6, r2
 80194f4:	461c      	mov	r4, r3
 80194f6:	8818      	ldrh	r0, [r3, #0]
 80194f8:	2101      	movs	r1, #1
 80194fa:	f000 f997 	bl	801982c <uxr_seq_num_add>
 80194fe:	8020      	strh	r0, [r4, #0]
 8019500:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 8019504:	f000 f99a 	bl	801983c <uxr_seq_num_cmp>
 8019508:	2800      	cmp	r0, #0
 801950a:	dd06      	ble.n	801951a <uxr_next_reliable_nack_buffer_to_send+0x36>
 801950c:	2300      	movs	r3, #0
 801950e:	461f      	mov	r7, r3
 8019510:	f888 3021 	strb.w	r3, [r8, #33]	@ 0x21
 8019514:	4638      	mov	r0, r7
 8019516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801951a:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801951e:	8820      	ldrh	r0, [r4, #0]
 8019520:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019524:	fbb0 f3f2 	udiv	r3, r0, r2
 8019528:	fbb1 fcf2 	udiv	ip, r1, r2
 801952c:	fb02 0313 	mls	r3, r2, r3, r0
 8019530:	b29b      	uxth	r3, r3
 8019532:	fb03 fc0c 	mul.w	ip, r3, ip
 8019536:	f8d8 3000 	ldr.w	r3, [r8]
 801953a:	f10c 0c04 	add.w	ip, ip, #4
 801953e:	4463      	add	r3, ip
 8019540:	602b      	str	r3, [r5, #0]
 8019542:	f8d8 3000 	ldr.w	r3, [r8]
 8019546:	4463      	add	r3, ip
 8019548:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801954c:	6033      	str	r3, [r6, #0]
 801954e:	f898 200c 	ldrb.w	r2, [r8, #12]
 8019552:	429a      	cmp	r2, r3
 8019554:	d0d0      	beq.n	80194f8 <uxr_next_reliable_nack_buffer_to_send+0x14>
 8019556:	e7dd      	b.n	8019514 <uxr_next_reliable_nack_buffer_to_send+0x30>

08019558 <uxr_process_acknack>:
 8019558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801955a:	4604      	mov	r4, r0
 801955c:	460e      	mov	r6, r1
 801955e:	4610      	mov	r0, r2
 8019560:	2101      	movs	r1, #1
 8019562:	f000 f967 	bl	8019834 <uxr_seq_num_sub>
 8019566:	8a61      	ldrh	r1, [r4, #18]
 8019568:	f000 f964 	bl	8019834 <uxr_seq_num_sub>
 801956c:	b1c8      	cbz	r0, 80195a2 <uxr_process_acknack+0x4a>
 801956e:	4605      	mov	r5, r0
 8019570:	2700      	movs	r7, #0
 8019572:	2101      	movs	r1, #1
 8019574:	8a60      	ldrh	r0, [r4, #18]
 8019576:	f000 f959 	bl	801982c <uxr_seq_num_add>
 801957a:	8923      	ldrh	r3, [r4, #8]
 801957c:	6862      	ldr	r2, [r4, #4]
 801957e:	3701      	adds	r7, #1
 8019580:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8019584:	6821      	ldr	r1, [r4, #0]
 8019586:	42bd      	cmp	r5, r7
 8019588:	8260      	strh	r0, [r4, #18]
 801958a:	fbb0 fef3 	udiv	lr, r0, r3
 801958e:	fbb2 f2f3 	udiv	r2, r2, r3
 8019592:	fb03 031e 	mls	r3, r3, lr, r0
 8019596:	b29b      	uxth	r3, r3
 8019598:	fb02 f303 	mul.w	r3, r2, r3
 801959c:	f841 c003 	str.w	ip, [r1, r3]
 80195a0:	d1e7      	bne.n	8019572 <uxr_process_acknack+0x1a>
 80195a2:	3e00      	subs	r6, #0
 80195a4:	f04f 0300 	mov.w	r3, #0
 80195a8:	bf18      	it	ne
 80195aa:	2601      	movne	r6, #1
 80195ac:	f884 3020 	strb.w	r3, [r4, #32]
 80195b0:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 80195b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80195b6:	bf00      	nop

080195b8 <uxr_is_output_up_to_date>:
 80195b8:	8a01      	ldrh	r1, [r0, #16]
 80195ba:	8a40      	ldrh	r0, [r0, #18]
 80195bc:	b508      	push	{r3, lr}
 80195be:	f000 f93d 	bl	801983c <uxr_seq_num_cmp>
 80195c2:	fab0 f080 	clz	r0, r0
 80195c6:	0940      	lsrs	r0, r0, #5
 80195c8:	bd08      	pop	{r3, pc}
 80195ca:	bf00      	nop

080195cc <uxr_buffer_request_data>:
 80195cc:	b530      	push	{r4, r5, lr}
 80195ce:	b095      	sub	sp, #84	@ 0x54
 80195d0:	4604      	mov	r4, r0
 80195d2:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 80195d4:	9303      	str	r3, [sp, #12]
 80195d6:	2d00      	cmp	r5, #0
 80195d8:	f88d 301c 	strb.w	r3, [sp, #28]
 80195dc:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80195e0:	f04f 0200 	mov.w	r2, #0
 80195e4:	bf14      	ite	ne
 80195e6:	2101      	movne	r1, #1
 80195e8:	4611      	moveq	r1, r2
 80195ea:	f88d 201d 	strb.w	r2, [sp, #29]
 80195ee:	f88d 201e 	strb.w	r2, [sp, #30]
 80195f2:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 80195f6:	d021      	beq.n	801963c <uxr_buffer_request_data+0x70>
 80195f8:	686b      	ldr	r3, [r5, #4]
 80195fa:	2210      	movs	r2, #16
 80195fc:	6829      	ldr	r1, [r5, #0]
 80195fe:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8019602:	f8cd 1026 	str.w	r1, [sp, #38]	@ 0x26
 8019606:	2308      	movs	r3, #8
 8019608:	2100      	movs	r1, #0
 801960a:	4620      	mov	r0, r4
 801960c:	e9cd 3100 	strd	r3, r1, [sp]
 8019610:	ab0c      	add	r3, sp, #48	@ 0x30
 8019612:	9905      	ldr	r1, [sp, #20]
 8019614:	f7f8 fd52 	bl	80120bc <uxr_prepare_stream_to_write_submessage>
 8019618:	b918      	cbnz	r0, 8019622 <uxr_buffer_request_data+0x56>
 801961a:	4604      	mov	r4, r0
 801961c:	4620      	mov	r0, r4
 801961e:	b015      	add	sp, #84	@ 0x54
 8019620:	bd30      	pop	{r4, r5, pc}
 8019622:	9904      	ldr	r1, [sp, #16]
 8019624:	aa06      	add	r2, sp, #24
 8019626:	4620      	mov	r0, r4
 8019628:	f7f8 fe84 	bl	8012334 <uxr_init_base_object_request>
 801962c:	4604      	mov	r4, r0
 801962e:	a906      	add	r1, sp, #24
 8019630:	a80c      	add	r0, sp, #48	@ 0x30
 8019632:	f7f9 ffff 	bl	8013634 <uxr_serialize_READ_DATA_Payload>
 8019636:	4620      	mov	r0, r4
 8019638:	b015      	add	sp, #84	@ 0x54
 801963a:	bd30      	pop	{r4, r5, pc}
 801963c:	2208      	movs	r2, #8
 801963e:	e7e2      	b.n	8019606 <uxr_buffer_request_data+0x3a>

08019640 <uxr_buffer_cancel_data>:
 8019640:	b510      	push	{r4, lr}
 8019642:	2300      	movs	r3, #0
 8019644:	b094      	sub	sp, #80	@ 0x50
 8019646:	4604      	mov	r4, r0
 8019648:	9205      	str	r2, [sp, #20]
 801964a:	9301      	str	r3, [sp, #4]
 801964c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019650:	f88d 301e 	strb.w	r3, [sp, #30]
 8019654:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8019658:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801965c:	2308      	movs	r3, #8
 801965e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8019662:	2201      	movs	r2, #1
 8019664:	9300      	str	r3, [sp, #0]
 8019666:	ab0c      	add	r3, sp, #48	@ 0x30
 8019668:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 801966c:	2210      	movs	r2, #16
 801966e:	f7f8 fd25 	bl	80120bc <uxr_prepare_stream_to_write_submessage>
 8019672:	b918      	cbnz	r0, 801967c <uxr_buffer_cancel_data+0x3c>
 8019674:	4604      	mov	r4, r0
 8019676:	4620      	mov	r0, r4
 8019678:	b014      	add	sp, #80	@ 0x50
 801967a:	bd10      	pop	{r4, pc}
 801967c:	9905      	ldr	r1, [sp, #20]
 801967e:	aa06      	add	r2, sp, #24
 8019680:	4620      	mov	r0, r4
 8019682:	f7f8 fe57 	bl	8012334 <uxr_init_base_object_request>
 8019686:	4604      	mov	r4, r0
 8019688:	a906      	add	r1, sp, #24
 801968a:	a80c      	add	r0, sp, #48	@ 0x30
 801968c:	f7f9 ffd2 	bl	8013634 <uxr_serialize_READ_DATA_Payload>
 8019690:	4620      	mov	r0, r4
 8019692:	b014      	add	sp, #80	@ 0x50
 8019694:	bd10      	pop	{r4, pc}
 8019696:	bf00      	nop

08019698 <read_submessage_format>:
 8019698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801969c:	b095      	sub	sp, #84	@ 0x54
 801969e:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 80196a2:	b113      	cbz	r3, 80196aa <read_submessage_format+0x12>
 80196a4:	b015      	add	sp, #84	@ 0x54
 80196a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80196aa:	4606      	mov	r6, r0
 80196ac:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80196ae:	460c      	mov	r4, r1
 80196b0:	4615      	mov	r5, r2
 80196b2:	9004      	str	r0, [sp, #16]
 80196b4:	4699      	mov	r9, r3
 80196b6:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80196b8:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 80196bc:	9005      	str	r0, [sp, #20]
 80196be:	a80c      	add	r0, sp, #48	@ 0x30
 80196c0:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80196c4:	1a52      	subs	r2, r2, r1
 80196c6:	f7f5 fa4f 	bl	800eb68 <ucdr_init_buffer>
 80196ca:	a80c      	add	r0, sp, #48	@ 0x30
 80196cc:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80196d0:	f7f5 fa1e 	bl	800eb10 <ucdr_set_on_full_buffer_callback>
 80196d4:	69e2      	ldr	r2, [r4, #28]
 80196d6:	b19a      	cbz	r2, 8019700 <read_submessage_format+0x68>
 80196d8:	f1b8 0f07 	cmp.w	r8, #7
 80196dc:	f882 9014 	strb.w	r9, [r2, #20]
 80196e0:	d040      	beq.n	8019764 <read_submessage_format+0xcc>
 80196e2:	f1b8 0f08 	cmp.w	r8, #8
 80196e6:	d02e      	beq.n	8019746 <read_submessage_format+0xae>
 80196e8:	f1b8 0f06 	cmp.w	r8, #6
 80196ec:	d011      	beq.n	8019712 <read_submessage_format+0x7a>
 80196ee:	2301      	movs	r3, #1
 80196f0:	7513      	strb	r3, [r2, #20]
 80196f2:	4629      	mov	r1, r5
 80196f4:	4620      	mov	r0, r4
 80196f6:	f7f5 fa8b 	bl	800ec10 <ucdr_advance_buffer>
 80196fa:	b015      	add	sp, #84	@ 0x54
 80196fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019700:	f1b8 0f07 	cmp.w	r8, #7
 8019704:	d02e      	beq.n	8019764 <read_submessage_format+0xcc>
 8019706:	f1b8 0f08 	cmp.w	r8, #8
 801970a:	d01c      	beq.n	8019746 <read_submessage_format+0xae>
 801970c:	f1b8 0f06 	cmp.w	r8, #6
 8019710:	d1ef      	bne.n	80196f2 <read_submessage_format+0x5a>
 8019712:	f8d6 8088 	ldr.w	r8, [r6, #136]	@ 0x88
 8019716:	f1b8 0f00 	cmp.w	r8, #0
 801971a:	d011      	beq.n	8019740 <read_submessage_format+0xa8>
 801971c:	ab0c      	add	r3, sp, #48	@ 0x30
 801971e:	9501      	str	r5, [sp, #4]
 8019720:	463a      	mov	r2, r7
 8019722:	4630      	mov	r0, r6
 8019724:	9300      	str	r3, [sp, #0]
 8019726:	2306      	movs	r3, #6
 8019728:	f88d 3016 	strb.w	r3, [sp, #22]
 801972c:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 8019730:	9302      	str	r3, [sp, #8]
 8019732:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8019736:	47c0      	blx	r8
 8019738:	2301      	movs	r3, #1
 801973a:	69e2      	ldr	r2, [r4, #28]
 801973c:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8019740:	2a00      	cmp	r2, #0
 8019742:	d1d4      	bne.n	80196ee <read_submessage_format+0x56>
 8019744:	e7d5      	b.n	80196f2 <read_submessage_format+0x5a>
 8019746:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 801974a:	2b00      	cmp	r3, #0
 801974c:	d0f8      	beq.n	8019740 <read_submessage_format+0xa8>
 801974e:	a80c      	add	r0, sp, #48	@ 0x30
 8019750:	a906      	add	r1, sp, #24
 8019752:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8019756:	f7fa f839 	bl	80137cc <uxr_deserialize_SampleIdentity>
 801975a:	b9a0      	cbnz	r0, 8019786 <read_submessage_format+0xee>
 801975c:	69e2      	ldr	r2, [r4, #28]
 801975e:	2a00      	cmp	r2, #0
 8019760:	d1c5      	bne.n	80196ee <read_submessage_format+0x56>
 8019762:	e7c6      	b.n	80196f2 <read_submessage_format+0x5a>
 8019764:	f8d6 30ac 	ldr.w	r3, [r6, #172]	@ 0xac
 8019768:	b13b      	cbz	r3, 801977a <read_submessage_format+0xe2>
 801976a:	a906      	add	r1, sp, #24
 801976c:	a80c      	add	r0, sp, #48	@ 0x30
 801976e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8019772:	f7f9 fcff 	bl	8013174 <uxr_deserialize_BaseObjectRequest>
 8019776:	bb60      	cbnz	r0, 80197d2 <read_submessage_format+0x13a>
 8019778:	69e2      	ldr	r2, [r4, #28]
 801977a:	68a3      	ldr	r3, [r4, #8]
 801977c:	442b      	add	r3, r5
 801977e:	60a3      	str	r3, [r4, #8]
 8019780:	2a00      	cmp	r2, #0
 8019782:	d1b4      	bne.n	80196ee <read_submessage_format+0x56>
 8019784:	e7b5      	b.n	80196f2 <read_submessage_format+0x5a>
 8019786:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019788:	a80c      	add	r0, sp, #48	@ 0x30
 801978a:	eba8 0803 	sub.w	r8, r8, r3
 801978e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8019792:	44a8      	add	r8, r5
 8019794:	1a52      	subs	r2, r2, r1
 8019796:	f7f5 f9e7 	bl	800eb68 <ucdr_init_buffer>
 801979a:	a80c      	add	r0, sp, #48	@ 0x30
 801979c:	fa1f f888 	uxth.w	r8, r8
 80197a0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80197a4:	f7f5 f9b4 	bl	800eb10 <ucdr_set_on_full_buffer_callback>
 80197a8:	ab0c      	add	r3, sp, #48	@ 0x30
 80197aa:	2108      	movs	r1, #8
 80197ac:	f8cd 8004 	str.w	r8, [sp, #4]
 80197b0:	9300      	str	r3, [sp, #0]
 80197b2:	463a      	mov	r2, r7
 80197b4:	f88d 1016 	strb.w	r1, [sp, #22]
 80197b8:	ab06      	add	r3, sp, #24
 80197ba:	f8d6 10a8 	ldr.w	r1, [r6, #168]	@ 0xa8
 80197be:	4630      	mov	r0, r6
 80197c0:	9102      	str	r1, [sp, #8]
 80197c2:	9905      	ldr	r1, [sp, #20]
 80197c4:	f8d6 70a4 	ldr.w	r7, [r6, #164]	@ 0xa4
 80197c8:	47b8      	blx	r7
 80197ca:	2301      	movs	r3, #1
 80197cc:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 80197d0:	e7c4      	b.n	801975c <read_submessage_format+0xc4>
 80197d2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80197d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80197d8:	a80c      	add	r0, sp, #48	@ 0x30
 80197da:	1a52      	subs	r2, r2, r1
 80197dc:	eba8 0803 	sub.w	r8, r8, r3
 80197e0:	f7f5 f9c2 	bl	800eb68 <ucdr_init_buffer>
 80197e4:	a80c      	add	r0, sp, #48	@ 0x30
 80197e6:	44a8      	add	r8, r5
 80197e8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80197ec:	f7f5 f990 	bl	800eb10 <ucdr_set_on_full_buffer_callback>
 80197f0:	ab0c      	add	r3, sp, #48	@ 0x30
 80197f2:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80197f6:	fa1f f888 	uxth.w	r8, r8
 80197fa:	9300      	str	r3, [sp, #0]
 80197fc:	463a      	mov	r2, r7
 80197fe:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8019802:	4630      	mov	r0, r6
 8019804:	f8cd 8004 	str.w	r8, [sp, #4]
 8019808:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801980c:	2107      	movs	r1, #7
 801980e:	f88d 1016 	strb.w	r1, [sp, #22]
 8019812:	b29b      	uxth	r3, r3
 8019814:	f8d6 10b0 	ldr.w	r1, [r6, #176]	@ 0xb0
 8019818:	9102      	str	r1, [sp, #8]
 801981a:	9905      	ldr	r1, [sp, #20]
 801981c:	f8d6 70ac 	ldr.w	r7, [r6, #172]	@ 0xac
 8019820:	47b8      	blx	r7
 8019822:	2301      	movs	r3, #1
 8019824:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8019828:	e7a6      	b.n	8019778 <read_submessage_format+0xe0>
 801982a:	bf00      	nop

0801982c <uxr_seq_num_add>:
 801982c:	4408      	add	r0, r1
 801982e:	b280      	uxth	r0, r0
 8019830:	4770      	bx	lr
 8019832:	bf00      	nop

08019834 <uxr_seq_num_sub>:
 8019834:	1a40      	subs	r0, r0, r1
 8019836:	b280      	uxth	r0, r0
 8019838:	4770      	bx	lr
 801983a:	bf00      	nop

0801983c <uxr_seq_num_cmp>:
 801983c:	4288      	cmp	r0, r1
 801983e:	d011      	beq.n	8019864 <uxr_seq_num_cmp+0x28>
 8019840:	d309      	bcc.n	8019856 <uxr_seq_num_cmp+0x1a>
 8019842:	4288      	cmp	r0, r1
 8019844:	d910      	bls.n	8019868 <uxr_seq_num_cmp+0x2c>
 8019846:	1a40      	subs	r0, r0, r1
 8019848:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801984c:	bfd4      	ite	le
 801984e:	2001      	movle	r0, #1
 8019850:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8019854:	4770      	bx	lr
 8019856:	1a0b      	subs	r3, r1, r0
 8019858:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801985c:	daf1      	bge.n	8019842 <uxr_seq_num_cmp+0x6>
 801985e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019862:	4770      	bx	lr
 8019864:	2000      	movs	r0, #0
 8019866:	4770      	bx	lr
 8019868:	2001      	movs	r0, #1
 801986a:	4770      	bx	lr

0801986c <uxr_init_framing_io>:
 801986c:	2300      	movs	r3, #0
 801986e:	7041      	strb	r1, [r0, #1]
 8019870:	7003      	strb	r3, [r0, #0]
 8019872:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8019874:	4770      	bx	lr
 8019876:	bf00      	nop

08019878 <uxr_write_framed_msg>:
 8019878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801987c:	4617      	mov	r7, r2
 801987e:	7842      	ldrb	r2, [r0, #1]
 8019880:	460e      	mov	r6, r1
 8019882:	b083      	sub	sp, #12
 8019884:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8019888:	469b      	mov	fp, r3
 801988a:	237e      	movs	r3, #126	@ 0x7e
 801988c:	4604      	mov	r4, r0
 801988e:	2901      	cmp	r1, #1
 8019890:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8019894:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8019898:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 801989c:	f240 8115 	bls.w	8019aca <uxr_write_framed_msg+0x252>
 80198a0:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80198a4:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 80198a8:	2202      	movs	r2, #2
 80198aa:	2901      	cmp	r1, #1
 80198ac:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80198b0:	d952      	bls.n	8019958 <uxr_write_framed_msg+0xe0>
 80198b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80198b4:	2103      	movs	r1, #3
 80198b6:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 80198ba:	b2dd      	uxtb	r5, r3
 80198bc:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80198c0:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 80198c4:	2a01      	cmp	r2, #1
 80198c6:	d95c      	bls.n	8019982 <uxr_write_framed_msg+0x10a>
 80198c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80198ca:	1862      	adds	r2, r4, r1
 80198cc:	3101      	adds	r1, #1
 80198ce:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80198d2:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 80198d6:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80198da:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 80198de:	2a01      	cmp	r2, #1
 80198e0:	d961      	bls.n	80199a6 <uxr_write_framed_msg+0x12e>
 80198e2:	1c4a      	adds	r2, r1, #1
 80198e4:	4421      	add	r1, r4
 80198e6:	b2d2      	uxtb	r2, r2
 80198e8:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 80198ec:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80198f0:	2b00      	cmp	r3, #0
 80198f2:	d06a      	beq.n	80199ca <uxr_write_framed_msg+0x152>
 80198f4:	f04f 0800 	mov.w	r8, #0
 80198f8:	46c1      	mov	r9, r8
 80198fa:	e016      	b.n	801992a <uxr_write_framed_msg+0xb2>
 80198fc:	2a29      	cmp	r2, #41	@ 0x29
 80198fe:	d868      	bhi.n	80199d2 <uxr_write_framed_msg+0x15a>
 8019900:	18a0      	adds	r0, r4, r2
 8019902:	3201      	adds	r2, #1
 8019904:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8019908:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801990c:	ea88 0101 	eor.w	r1, r8, r1
 8019910:	4b7d      	ldr	r3, [pc, #500]	@ (8019b08 <uxr_write_framed_msg+0x290>)
 8019912:	f109 0901 	add.w	r9, r9, #1
 8019916:	b2c9      	uxtb	r1, r1
 8019918:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 801991c:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8019920:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019922:	454b      	cmp	r3, r9
 8019924:	d969      	bls.n	80199fa <uxr_write_framed_msg+0x182>
 8019926:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801992a:	f81b 1009 	ldrb.w	r1, [fp, r9]
 801992e:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8019932:	2801      	cmp	r0, #1
 8019934:	d8e2      	bhi.n	80198fc <uxr_write_framed_msg+0x84>
 8019936:	1c50      	adds	r0, r2, #1
 8019938:	b2c0      	uxtb	r0, r0
 801993a:	2829      	cmp	r0, #41	@ 0x29
 801993c:	d849      	bhi.n	80199d2 <uxr_write_framed_msg+0x15a>
 801993e:	18a0      	adds	r0, r4, r2
 8019940:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8019944:	3202      	adds	r2, #2
 8019946:	f081 0520 	eor.w	r5, r1, #32
 801994a:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801994e:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8019952:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8019956:	e7d9      	b.n	801990c <uxr_write_framed_msg+0x94>
 8019958:	2104      	movs	r1, #4
 801995a:	f04f 0c03 	mov.w	ip, #3
 801995e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019960:	4422      	add	r2, r4
 8019962:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8019966:	44a4      	add	ip, r4
 8019968:	b2dd      	uxtb	r5, r3
 801996a:	f080 0020 	eor.w	r0, r0, #32
 801996e:	f882 e038 	strb.w	lr, [r2, #56]	@ 0x38
 8019972:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8019976:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 801997a:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801997e:	2a01      	cmp	r2, #1
 8019980:	d8a2      	bhi.n	80198c8 <uxr_write_framed_msg+0x50>
 8019982:	1862      	adds	r2, r4, r1
 8019984:	207d      	movs	r0, #125	@ 0x7d
 8019986:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019988:	f085 0520 	eor.w	r5, r5, #32
 801998c:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 8019990:	3102      	adds	r1, #2
 8019992:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8019996:	f882 5039 	strb.w	r5, [r2, #57]	@ 0x39
 801999a:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801999e:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 80199a2:	2a01      	cmp	r2, #1
 80199a4:	d89d      	bhi.n	80198e2 <uxr_write_framed_msg+0x6a>
 80199a6:	1c4d      	adds	r5, r1, #1
 80199a8:	1c8a      	adds	r2, r1, #2
 80199aa:	f080 0020 	eor.w	r0, r0, #32
 80199ae:	4421      	add	r1, r4
 80199b0:	fa54 f585 	uxtab	r5, r4, r5
 80199b4:	b2d2      	uxtb	r2, r2
 80199b6:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80199ba:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 80199be:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 80199c2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80199c6:	2b00      	cmp	r3, #0
 80199c8:	d194      	bne.n	80198f4 <uxr_write_framed_msg+0x7c>
 80199ca:	4619      	mov	r1, r3
 80199cc:	f8ad 3004 	strh.w	r3, [sp, #4]
 80199d0:	e019      	b.n	8019a06 <uxr_write_framed_msg+0x18e>
 80199d2:	2500      	movs	r5, #0
 80199d4:	e000      	b.n	80199d8 <uxr_write_framed_msg+0x160>
 80199d6:	b160      	cbz	r0, 80199f2 <uxr_write_framed_msg+0x17a>
 80199d8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80199dc:	1b52      	subs	r2, r2, r5
 80199de:	4653      	mov	r3, sl
 80199e0:	4638      	mov	r0, r7
 80199e2:	4421      	add	r1, r4
 80199e4:	47b0      	blx	r6
 80199e6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80199ea:	4405      	add	r5, r0
 80199ec:	4295      	cmp	r5, r2
 80199ee:	d3f2      	bcc.n	80199d6 <uxr_write_framed_msg+0x15e>
 80199f0:	d066      	beq.n	8019ac0 <uxr_write_framed_msg+0x248>
 80199f2:	2000      	movs	r0, #0
 80199f4:	b003      	add	sp, #12
 80199f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199fa:	fa5f f188 	uxtb.w	r1, r8
 80199fe:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8019a02:	f8ad 8004 	strh.w	r8, [sp, #4]
 8019a06:	f04f 0900 	mov.w	r9, #0
 8019a0a:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 8019a0e:	46c8      	mov	r8, r9
 8019a10:	e013      	b.n	8019a3a <uxr_write_framed_msg+0x1c2>
 8019a12:	2a29      	cmp	r2, #41	@ 0x29
 8019a14:	d824      	bhi.n	8019a60 <uxr_write_framed_msg+0x1e8>
 8019a16:	18a3      	adds	r3, r4, r2
 8019a18:	3201      	adds	r2, #1
 8019a1a:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 8019a1e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8019a22:	f109 0901 	add.w	r9, r9, #1
 8019a26:	f1b9 0f02 	cmp.w	r9, #2
 8019a2a:	d02d      	beq.n	8019a88 <uxr_write_framed_msg+0x210>
 8019a2c:	f109 0308 	add.w	r3, r9, #8
 8019a30:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8019a34:	446b      	add	r3, sp
 8019a36:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8019a3a:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 8019a3e:	2b01      	cmp	r3, #1
 8019a40:	d8e7      	bhi.n	8019a12 <uxr_write_framed_msg+0x19a>
 8019a42:	1c53      	adds	r3, r2, #1
 8019a44:	b2db      	uxtb	r3, r3
 8019a46:	2b29      	cmp	r3, #41	@ 0x29
 8019a48:	d80a      	bhi.n	8019a60 <uxr_write_framed_msg+0x1e8>
 8019a4a:	18a3      	adds	r3, r4, r2
 8019a4c:	f081 0120 	eor.w	r1, r1, #32
 8019a50:	3202      	adds	r2, #2
 8019a52:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 8019a56:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 8019a5a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8019a5e:	e7e0      	b.n	8019a22 <uxr_write_framed_msg+0x1aa>
 8019a60:	2500      	movs	r5, #0
 8019a62:	e001      	b.n	8019a68 <uxr_write_framed_msg+0x1f0>
 8019a64:	2800      	cmp	r0, #0
 8019a66:	d0c4      	beq.n	80199f2 <uxr_write_framed_msg+0x17a>
 8019a68:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8019a6c:	1b52      	subs	r2, r2, r5
 8019a6e:	4653      	mov	r3, sl
 8019a70:	4638      	mov	r0, r7
 8019a72:	4421      	add	r1, r4
 8019a74:	47b0      	blx	r6
 8019a76:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8019a7a:	4405      	add	r5, r0
 8019a7c:	4295      	cmp	r5, r2
 8019a7e:	d3f1      	bcc.n	8019a64 <uxr_write_framed_msg+0x1ec>
 8019a80:	d1b7      	bne.n	80199f2 <uxr_write_framed_msg+0x17a>
 8019a82:	f884 8062 	strb.w	r8, [r4, #98]	@ 0x62
 8019a86:	e7d1      	b.n	8019a2c <uxr_write_framed_msg+0x1b4>
 8019a88:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8019a8c:	b19a      	cbz	r2, 8019ab6 <uxr_write_framed_msg+0x23e>
 8019a8e:	2500      	movs	r5, #0
 8019a90:	e001      	b.n	8019a96 <uxr_write_framed_msg+0x21e>
 8019a92:	2800      	cmp	r0, #0
 8019a94:	d0ad      	beq.n	80199f2 <uxr_write_framed_msg+0x17a>
 8019a96:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8019a9a:	1b52      	subs	r2, r2, r5
 8019a9c:	4653      	mov	r3, sl
 8019a9e:	4638      	mov	r0, r7
 8019aa0:	4421      	add	r1, r4
 8019aa2:	47b0      	blx	r6
 8019aa4:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8019aa8:	4405      	add	r5, r0
 8019aaa:	4295      	cmp	r5, r2
 8019aac:	d3f1      	bcc.n	8019a92 <uxr_write_framed_msg+0x21a>
 8019aae:	d1a0      	bne.n	80199f2 <uxr_write_framed_msg+0x17a>
 8019ab0:	2300      	movs	r3, #0
 8019ab2:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8019ab6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019ab8:	b298      	uxth	r0, r3
 8019aba:	b003      	add	sp, #12
 8019abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ac0:	f04f 0300 	mov.w	r3, #0
 8019ac4:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8019ac8:	e72a      	b.n	8019920 <uxr_write_framed_msg+0xa8>
 8019aca:	217d      	movs	r1, #125	@ 0x7d
 8019acc:	f082 0220 	eor.w	r2, r2, #32
 8019ad0:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8019ad4:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8019ad8:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8019adc:	2203      	movs	r2, #3
 8019ade:	2901      	cmp	r1, #1
 8019ae0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8019ae4:	d803      	bhi.n	8019aee <uxr_write_framed_msg+0x276>
 8019ae6:	2105      	movs	r1, #5
 8019ae8:	f04f 0c04 	mov.w	ip, #4
 8019aec:	e737      	b.n	801995e <uxr_write_framed_msg+0xe6>
 8019aee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019af0:	2104      	movs	r1, #4
 8019af2:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8019af6:	b2dd      	uxtb	r5, r3
 8019af8:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8019afc:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8019b00:	2a01      	cmp	r2, #1
 8019b02:	f63f aee1 	bhi.w	80198c8 <uxr_write_framed_msg+0x50>
 8019b06:	e73c      	b.n	8019982 <uxr_write_framed_msg+0x10a>
 8019b08:	0801d580 	.word	0x0801d580

08019b0c <uxr_framing_read_transport>:
 8019b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b10:	4604      	mov	r4, r0
 8019b12:	b085      	sub	sp, #20
 8019b14:	4692      	mov	sl, r2
 8019b16:	4689      	mov	r9, r1
 8019b18:	461d      	mov	r5, r3
 8019b1a:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8019b1c:	f7f8 fdc0 	bl	80126a0 <uxr_millis>
 8019b20:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8019b24:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 8019b28:	4680      	mov	r8, r0
 8019b2a:	42ba      	cmp	r2, r7
 8019b2c:	d05f      	beq.n	8019bee <uxr_framing_read_transport+0xe2>
 8019b2e:	d817      	bhi.n	8019b60 <uxr_framing_read_transport+0x54>
 8019b30:	3f01      	subs	r7, #1
 8019b32:	1aba      	subs	r2, r7, r2
 8019b34:	2700      	movs	r7, #0
 8019b36:	b2d2      	uxtb	r2, r2
 8019b38:	42b2      	cmp	r2, r6
 8019b3a:	d81a      	bhi.n	8019b72 <uxr_framing_read_transport+0x66>
 8019b3c:	19d3      	adds	r3, r2, r7
 8019b3e:	42b3      	cmp	r3, r6
 8019b40:	d852      	bhi.n	8019be8 <uxr_framing_read_transport+0xdc>
 8019b42:	b9d2      	cbnz	r2, 8019b7a <uxr_framing_read_transport+0x6e>
 8019b44:	2600      	movs	r6, #0
 8019b46:	f7f8 fdab 	bl	80126a0 <uxr_millis>
 8019b4a:	682b      	ldr	r3, [r5, #0]
 8019b4c:	eba0 0008 	sub.w	r0, r0, r8
 8019b50:	1a1b      	subs	r3, r3, r0
 8019b52:	4630      	mov	r0, r6
 8019b54:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019b58:	602b      	str	r3, [r5, #0]
 8019b5a:	b005      	add	sp, #20
 8019b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b60:	2f00      	cmp	r7, #0
 8019b62:	d060      	beq.n	8019c26 <uxr_framing_read_transport+0x11a>
 8019b64:	f1c2 022a 	rsb	r2, r2, #42	@ 0x2a
 8019b68:	3f01      	subs	r7, #1
 8019b6a:	b2d2      	uxtb	r2, r2
 8019b6c:	b2ff      	uxtb	r7, r7
 8019b6e:	42b2      	cmp	r2, r6
 8019b70:	d9e4      	bls.n	8019b3c <uxr_framing_read_transport+0x30>
 8019b72:	b2f2      	uxtb	r2, r6
 8019b74:	2700      	movs	r7, #0
 8019b76:	2a00      	cmp	r2, #0
 8019b78:	d0e4      	beq.n	8019b44 <uxr_framing_read_transport+0x38>
 8019b7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019b7c:	4650      	mov	r0, sl
 8019b7e:	9203      	str	r2, [sp, #12]
 8019b80:	9300      	str	r3, [sp, #0]
 8019b82:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8019b86:	682b      	ldr	r3, [r5, #0]
 8019b88:	3102      	adds	r1, #2
 8019b8a:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 8019c30 <uxr_framing_read_transport+0x124>
 8019b8e:	4421      	add	r1, r4
 8019b90:	47c8      	blx	r9
 8019b92:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8019b96:	4606      	mov	r6, r0
 8019b98:	4403      	add	r3, r0
 8019b9a:	0859      	lsrs	r1, r3, #1
 8019b9c:	fbab 2101 	umull	r2, r1, fp, r1
 8019ba0:	222a      	movs	r2, #42	@ 0x2a
 8019ba2:	0889      	lsrs	r1, r1, #2
 8019ba4:	fb02 3111 	mls	r1, r2, r1, r3
 8019ba8:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8019bac:	2800      	cmp	r0, #0
 8019bae:	d0c9      	beq.n	8019b44 <uxr_framing_read_transport+0x38>
 8019bb0:	9a03      	ldr	r2, [sp, #12]
 8019bb2:	4290      	cmp	r0, r2
 8019bb4:	d1c7      	bne.n	8019b46 <uxr_framing_read_transport+0x3a>
 8019bb6:	2f00      	cmp	r7, #0
 8019bb8:	d0c5      	beq.n	8019b46 <uxr_framing_read_transport+0x3a>
 8019bba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019bbc:	3102      	adds	r1, #2
 8019bbe:	463a      	mov	r2, r7
 8019bc0:	4650      	mov	r0, sl
 8019bc2:	4421      	add	r1, r4
 8019bc4:	9300      	str	r3, [sp, #0]
 8019bc6:	2300      	movs	r3, #0
 8019bc8:	47c8      	blx	r9
 8019bca:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8019bce:	4406      	add	r6, r0
 8019bd0:	1813      	adds	r3, r2, r0
 8019bd2:	085a      	lsrs	r2, r3, #1
 8019bd4:	fbab 1b02 	umull	r1, fp, fp, r2
 8019bd8:	222a      	movs	r2, #42	@ 0x2a
 8019bda:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 8019bde:	fb02 331b 	mls	r3, r2, fp, r3
 8019be2:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8019be6:	e7ae      	b.n	8019b46 <uxr_framing_read_transport+0x3a>
 8019be8:	1ab6      	subs	r6, r6, r2
 8019bea:	b2f7      	uxtb	r7, r6
 8019bec:	e7a9      	b.n	8019b42 <uxr_framing_read_transport+0x36>
 8019bee:	2300      	movs	r3, #0
 8019bf0:	2e28      	cmp	r6, #40	@ 0x28
 8019bf2:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8019bf4:	d9bd      	bls.n	8019b72 <uxr_framing_read_transport+0x66>
 8019bf6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019bf8:	2229      	movs	r2, #41	@ 0x29
 8019bfa:	1ca1      	adds	r1, r4, #2
 8019bfc:	4650      	mov	r0, sl
 8019bfe:	9300      	str	r3, [sp, #0]
 8019c00:	682b      	ldr	r3, [r5, #0]
 8019c02:	47c8      	blx	r9
 8019c04:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8019c08:	4606      	mov	r6, r0
 8019c0a:	212a      	movs	r1, #42	@ 0x2a
 8019c0c:	4403      	add	r3, r0
 8019c0e:	4808      	ldr	r0, [pc, #32]	@ (8019c30 <uxr_framing_read_transport+0x124>)
 8019c10:	085a      	lsrs	r2, r3, #1
 8019c12:	fba0 0202 	umull	r0, r2, r0, r2
 8019c16:	0892      	lsrs	r2, r2, #2
 8019c18:	fb01 3312 	mls	r3, r1, r2, r3
 8019c1c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8019c20:	2e00      	cmp	r6, #0
 8019c22:	d08f      	beq.n	8019b44 <uxr_framing_read_transport+0x38>
 8019c24:	e78f      	b.n	8019b46 <uxr_framing_read_transport+0x3a>
 8019c26:	f1c2 0229 	rsb	r2, r2, #41	@ 0x29
 8019c2a:	b2d2      	uxtb	r2, r2
 8019c2c:	e784      	b.n	8019b38 <uxr_framing_read_transport+0x2c>
 8019c2e:	bf00      	nop
 8019c30:	30c30c31 	.word	0x30c30c31

08019c34 <uxr_read_framed_msg>:
 8019c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c38:	461e      	mov	r6, r3
 8019c3a:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8019c3e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8019c42:	b083      	sub	sp, #12
 8019c44:	4604      	mov	r4, r0
 8019c46:	4688      	mov	r8, r1
 8019c48:	429d      	cmp	r5, r3
 8019c4a:	4691      	mov	r9, r2
 8019c4c:	f000 818c 	beq.w	8019f68 <uxr_read_framed_msg+0x334>
 8019c50:	7823      	ldrb	r3, [r4, #0]
 8019c52:	4dc3      	ldr	r5, [pc, #780]	@ (8019f60 <uxr_read_framed_msg+0x32c>)
 8019c54:	4fc3      	ldr	r7, [pc, #780]	@ (8019f64 <uxr_read_framed_msg+0x330>)
 8019c56:	2b07      	cmp	r3, #7
 8019c58:	d8fd      	bhi.n	8019c56 <uxr_read_framed_msg+0x22>
 8019c5a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8019c5e:	011c      	.short	0x011c
 8019c60:	00d900fb 	.word	0x00d900fb
 8019c64:	008f00ba 	.word	0x008f00ba
 8019c68:	00320051 	.word	0x00320051
 8019c6c:	0008      	.short	0x0008
 8019c6e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8019c72:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8019c76:	4299      	cmp	r1, r3
 8019c78:	f000 814d 	beq.w	8019f16 <uxr_read_framed_msg+0x2e2>
 8019c7c:	18e2      	adds	r2, r4, r3
 8019c7e:	7892      	ldrb	r2, [r2, #2]
 8019c80:	2a7d      	cmp	r2, #125	@ 0x7d
 8019c82:	f000 81b8 	beq.w	8019ff6 <uxr_read_framed_msg+0x3c2>
 8019c86:	3301      	adds	r3, #1
 8019c88:	212a      	movs	r1, #42	@ 0x2a
 8019c8a:	2a7e      	cmp	r2, #126	@ 0x7e
 8019c8c:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8019c90:	fba5 c000 	umull	ip, r0, r5, r0
 8019c94:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8019c98:	fb01 3310 	mls	r3, r1, r0, r3
 8019c9c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019ca0:	f000 8257 	beq.w	801a152 <uxr_read_framed_msg+0x51e>
 8019ca4:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8019ca6:	2000      	movs	r0, #0
 8019ca8:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8019caa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8019cae:	7020      	strb	r0, [r4, #0]
 8019cb0:	b29b      	uxth	r3, r3
 8019cb2:	4299      	cmp	r1, r3
 8019cb4:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8019cb6:	f000 8178 	beq.w	8019faa <uxr_read_framed_msg+0x376>
 8019cba:	2000      	movs	r0, #0
 8019cbc:	b003      	add	sp, #12
 8019cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019cc2:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8019cc6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8019cca:	4298      	cmp	r0, r3
 8019ccc:	f000 8132 	beq.w	8019f34 <uxr_read_framed_msg+0x300>
 8019cd0:	18e2      	adds	r2, r4, r3
 8019cd2:	7891      	ldrb	r1, [r2, #2]
 8019cd4:	297d      	cmp	r1, #125	@ 0x7d
 8019cd6:	f000 8170 	beq.w	8019fba <uxr_read_framed_msg+0x386>
 8019cda:	3301      	adds	r3, #1
 8019cdc:	202a      	movs	r0, #42	@ 0x2a
 8019cde:	297e      	cmp	r1, #126	@ 0x7e
 8019ce0:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8019ce4:	fba5 c202 	umull	ip, r2, r5, r2
 8019ce8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019cec:	fb00 3312 	mls	r3, r0, r2, r3
 8019cf0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019cf4:	f000 821d 	beq.w	801a132 <uxr_read_framed_msg+0x4fe>
 8019cf8:	2307      	movs	r3, #7
 8019cfa:	86a1      	strh	r1, [r4, #52]	@ 0x34
 8019cfc:	7023      	strb	r3, [r4, #0]
 8019cfe:	e7aa      	b.n	8019c56 <uxr_read_framed_msg+0x22>
 8019d00:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8019d02:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8019d06:	459e      	cmp	lr, r3
 8019d08:	d827      	bhi.n	8019d5a <uxr_read_framed_msg+0x126>
 8019d0a:	e032      	b.n	8019d72 <uxr_read_framed_msg+0x13e>
 8019d0c:	fba5 b101 	umull	fp, r1, r5, r1
 8019d10:	f89c c002 	ldrb.w	ip, [ip, #2]
 8019d14:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8019d18:	0889      	lsrs	r1, r1, #2
 8019d1a:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8019d1e:	fb0b 0111 	mls	r1, fp, r1, r0
 8019d22:	f000 80d4 	beq.w	8019ece <uxr_read_framed_msg+0x29a>
 8019d26:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8019d2a:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 8019d2e:	f000 80cb 	beq.w	8019ec8 <uxr_read_framed_msg+0x294>
 8019d32:	f806 c003 	strb.w	ip, [r6, r3]
 8019d36:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8019d38:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8019d3a:	ea80 010c 	eor.w	r1, r0, ip
 8019d3e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8019d42:	3301      	adds	r3, #1
 8019d44:	b2c9      	uxtb	r1, r1
 8019d46:	b29b      	uxth	r3, r3
 8019d48:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8019d4c:	4573      	cmp	r3, lr
 8019d4e:	8663      	strh	r3, [r4, #50]	@ 0x32
 8019d50:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8019d54:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8019d56:	f080 811d 	bcs.w	8019f94 <uxr_read_framed_msg+0x360>
 8019d5a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8019d5e:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8019d62:	1c50      	adds	r0, r2, #1
 8019d64:	eb04 0c02 	add.w	ip, r4, r2
 8019d68:	4592      	cmp	sl, r2
 8019d6a:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8019d6e:	d1cd      	bne.n	8019d0c <uxr_read_framed_msg+0xd8>
 8019d70:	459e      	cmp	lr, r3
 8019d72:	f040 8114 	bne.w	8019f9e <uxr_read_framed_msg+0x36a>
 8019d76:	2306      	movs	r3, #6
 8019d78:	7023      	strb	r3, [r4, #0]
 8019d7a:	e76c      	b.n	8019c56 <uxr_read_framed_msg+0x22>
 8019d7c:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8019d80:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8019d84:	4298      	cmp	r0, r3
 8019d86:	f000 80c6 	beq.w	8019f16 <uxr_read_framed_msg+0x2e2>
 8019d8a:	18e2      	adds	r2, r4, r3
 8019d8c:	7891      	ldrb	r1, [r2, #2]
 8019d8e:	297d      	cmp	r1, #125	@ 0x7d
 8019d90:	f000 8193 	beq.w	801a0ba <uxr_read_framed_msg+0x486>
 8019d94:	3301      	adds	r3, #1
 8019d96:	202a      	movs	r0, #42	@ 0x2a
 8019d98:	297e      	cmp	r1, #126	@ 0x7e
 8019d9a:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8019d9e:	fba5 c202 	umull	ip, r2, r5, r2
 8019da2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019da6:	fb00 3312 	mls	r3, r0, r2, r3
 8019daa:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019dae:	f000 81d0 	beq.w	801a152 <uxr_read_framed_msg+0x51e>
 8019db2:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8019db4:	2000      	movs	r0, #0
 8019db6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8019dba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019dbc:	8660      	strh	r0, [r4, #50]	@ 0x32
 8019dbe:	b29b      	uxth	r3, r3
 8019dc0:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8019dc2:	428b      	cmp	r3, r1
 8019dc4:	8623      	strh	r3, [r4, #48]	@ 0x30
 8019dc6:	f240 80e2 	bls.w	8019f8e <uxr_read_framed_msg+0x35a>
 8019dca:	7020      	strb	r0, [r4, #0]
 8019dcc:	b003      	add	sp, #12
 8019dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019dd2:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8019dd6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8019dda:	4298      	cmp	r0, r3
 8019ddc:	f000 80aa 	beq.w	8019f34 <uxr_read_framed_msg+0x300>
 8019de0:	18e2      	adds	r2, r4, r3
 8019de2:	7891      	ldrb	r1, [r2, #2]
 8019de4:	297d      	cmp	r1, #125	@ 0x7d
 8019de6:	f000 8186 	beq.w	801a0f6 <uxr_read_framed_msg+0x4c2>
 8019dea:	3301      	adds	r3, #1
 8019dec:	202a      	movs	r0, #42	@ 0x2a
 8019dee:	297e      	cmp	r1, #126	@ 0x7e
 8019df0:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8019df4:	fba5 c202 	umull	ip, r2, r5, r2
 8019df8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019dfc:	fb00 3312 	mls	r3, r0, r2, r3
 8019e00:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019e04:	f000 8195 	beq.w	801a132 <uxr_read_framed_msg+0x4fe>
 8019e08:	2304      	movs	r3, #4
 8019e0a:	8621      	strh	r1, [r4, #48]	@ 0x30
 8019e0c:	7023      	strb	r3, [r4, #0]
 8019e0e:	e722      	b.n	8019c56 <uxr_read_framed_msg+0x22>
 8019e10:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8019e14:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8019e18:	4290      	cmp	r0, r2
 8019e1a:	f000 80b4 	beq.w	8019f86 <uxr_read_framed_msg+0x352>
 8019e1e:	18a3      	adds	r3, r4, r2
 8019e20:	7899      	ldrb	r1, [r3, #2]
 8019e22:	297d      	cmp	r1, #125	@ 0x7d
 8019e24:	f000 8107 	beq.w	801a036 <uxr_read_framed_msg+0x402>
 8019e28:	3201      	adds	r2, #1
 8019e2a:	232a      	movs	r3, #42	@ 0x2a
 8019e2c:	297e      	cmp	r1, #126	@ 0x7e
 8019e2e:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8019e32:	fba5 c000 	umull	ip, r0, r5, r0
 8019e36:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8019e3a:	fb03 2210 	mls	r2, r3, r0, r2
 8019e3e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8019e42:	f000 818a 	beq.w	801a15a <uxr_read_framed_msg+0x526>
 8019e46:	7863      	ldrb	r3, [r4, #1]
 8019e48:	428b      	cmp	r3, r1
 8019e4a:	bf0c      	ite	eq
 8019e4c:	2303      	moveq	r3, #3
 8019e4e:	2300      	movne	r3, #0
 8019e50:	7023      	strb	r3, [r4, #0]
 8019e52:	e700      	b.n	8019c56 <uxr_read_framed_msg+0x22>
 8019e54:	2300      	movs	r3, #0
 8019e56:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8019e5a:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 8019e5e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8019e62:	4299      	cmp	r1, r3
 8019e64:	d06a      	beq.n	8019f3c <uxr_read_framed_msg+0x308>
 8019e66:	18e2      	adds	r2, r4, r3
 8019e68:	7890      	ldrb	r0, [r2, #2]
 8019e6a:	287d      	cmp	r0, #125	@ 0x7d
 8019e6c:	f000 8100 	beq.w	801a070 <uxr_read_framed_msg+0x43c>
 8019e70:	3301      	adds	r3, #1
 8019e72:	212a      	movs	r1, #42	@ 0x2a
 8019e74:	287e      	cmp	r0, #126	@ 0x7e
 8019e76:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8019e7a:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8019e7e:	fba5 c202 	umull	ip, r2, r5, r2
 8019e82:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019e86:	fb01 3312 	mls	r3, r1, r2, r3
 8019e8a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019e8e:	d055      	beq.n	8019f3c <uxr_read_framed_msg+0x308>
 8019e90:	2302      	movs	r3, #2
 8019e92:	7023      	strb	r3, [r4, #0]
 8019e94:	e6df      	b.n	8019c56 <uxr_read_framed_msg+0x22>
 8019e96:	f894 c02c 	ldrb.w	ip, [r4, #44]	@ 0x2c
 8019e9a:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8019e9e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8019ea2:	1c5a      	adds	r2, r3, #1
 8019ea4:	459c      	cmp	ip, r3
 8019ea6:	eb04 0103 	add.w	r1, r4, r3
 8019eaa:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8019eae:	f43f af04 	beq.w	8019cba <uxr_read_framed_msg+0x86>
 8019eb2:	fba5 0303 	umull	r0, r3, r5, r3
 8019eb6:	7889      	ldrb	r1, [r1, #2]
 8019eb8:	089b      	lsrs	r3, r3, #2
 8019eba:	297e      	cmp	r1, #126	@ 0x7e
 8019ebc:	fb0e 2313 	mls	r3, lr, r3, r2
 8019ec0:	b2db      	uxtb	r3, r3
 8019ec2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019ec6:	d1ec      	bne.n	8019ea2 <uxr_read_framed_msg+0x26e>
 8019ec8:	2301      	movs	r3, #1
 8019eca:	7023      	strb	r3, [r4, #0]
 8019ecc:	e6c3      	b.n	8019c56 <uxr_read_framed_msg+0x22>
 8019ece:	1c50      	adds	r0, r2, #1
 8019ed0:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8019ed4:	3202      	adds	r2, #2
 8019ed6:	0841      	lsrs	r1, r0, #1
 8019ed8:	fba5 c101 	umull	ip, r1, r5, r1
 8019edc:	0889      	lsrs	r1, r1, #2
 8019ede:	fb0b 0111 	mls	r1, fp, r1, r0
 8019ee2:	1860      	adds	r0, r4, r1
 8019ee4:	b2c9      	uxtb	r1, r1
 8019ee6:	458a      	cmp	sl, r1
 8019ee8:	f43f af42 	beq.w	8019d70 <uxr_read_framed_msg+0x13c>
 8019eec:	0851      	lsrs	r1, r2, #1
 8019eee:	7880      	ldrb	r0, [r0, #2]
 8019ef0:	fba5 a101 	umull	sl, r1, r5, r1
 8019ef4:	287e      	cmp	r0, #126	@ 0x7e
 8019ef6:	f080 0c20 	eor.w	ip, r0, #32
 8019efa:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8019efe:	fb0b 2211 	mls	r2, fp, r1, r2
 8019f02:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8019f06:	f47f af14 	bne.w	8019d32 <uxr_read_framed_msg+0xfe>
 8019f0a:	459e      	cmp	lr, r3
 8019f0c:	f43f af33 	beq.w	8019d76 <uxr_read_framed_msg+0x142>
 8019f10:	2301      	movs	r3, #1
 8019f12:	7023      	strb	r3, [r4, #0]
 8019f14:	e69f      	b.n	8019c56 <uxr_read_framed_msg+0x22>
 8019f16:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019f18:	9300      	str	r3, [sp, #0]
 8019f1a:	2301      	movs	r3, #1
 8019f1c:	9301      	str	r3, [sp, #4]
 8019f1e:	464a      	mov	r2, r9
 8019f20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019f22:	4641      	mov	r1, r8
 8019f24:	4620      	mov	r0, r4
 8019f26:	f7ff fdf1 	bl	8019b0c <uxr_framing_read_transport>
 8019f2a:	2800      	cmp	r0, #0
 8019f2c:	f43f aec5 	beq.w	8019cba <uxr_read_framed_msg+0x86>
 8019f30:	7823      	ldrb	r3, [r4, #0]
 8019f32:	e690      	b.n	8019c56 <uxr_read_framed_msg+0x22>
 8019f34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019f36:	9300      	str	r3, [sp, #0]
 8019f38:	2302      	movs	r3, #2
 8019f3a:	e7ef      	b.n	8019f1c <uxr_read_framed_msg+0x2e8>
 8019f3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019f3e:	464a      	mov	r2, r9
 8019f40:	4641      	mov	r1, r8
 8019f42:	4620      	mov	r0, r4
 8019f44:	9300      	str	r3, [sp, #0]
 8019f46:	2304      	movs	r3, #4
 8019f48:	9301      	str	r3, [sp, #4]
 8019f4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019f4c:	f7ff fdde 	bl	8019b0c <uxr_framing_read_transport>
 8019f50:	2800      	cmp	r0, #0
 8019f52:	d1ed      	bne.n	8019f30 <uxr_read_framed_msg+0x2fc>
 8019f54:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8019f58:	2b7e      	cmp	r3, #126	@ 0x7e
 8019f5a:	d0e9      	beq.n	8019f30 <uxr_read_framed_msg+0x2fc>
 8019f5c:	e6ad      	b.n	8019cba <uxr_read_framed_msg+0x86>
 8019f5e:	bf00      	nop
 8019f60:	30c30c31 	.word	0x30c30c31
 8019f64:	0801d580 	.word	0x0801d580
 8019f68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019f6a:	9300      	str	r3, [sp, #0]
 8019f6c:	2305      	movs	r3, #5
 8019f6e:	9301      	str	r3, [sp, #4]
 8019f70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019f72:	f7ff fdcb 	bl	8019b0c <uxr_framing_read_transport>
 8019f76:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8019f7a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8019f7e:	429a      	cmp	r2, r3
 8019f80:	f43f ae9b 	beq.w	8019cba <uxr_read_framed_msg+0x86>
 8019f84:	e664      	b.n	8019c50 <uxr_read_framed_msg+0x1c>
 8019f86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019f88:	9300      	str	r3, [sp, #0]
 8019f8a:	2303      	movs	r3, #3
 8019f8c:	e7c6      	b.n	8019f1c <uxr_read_framed_msg+0x2e8>
 8019f8e:	2305      	movs	r3, #5
 8019f90:	7023      	strb	r3, [r4, #0]
 8019f92:	e660      	b.n	8019c56 <uxr_read_framed_msg+0x22>
 8019f94:	f43f aeef 	beq.w	8019d76 <uxr_read_framed_msg+0x142>
 8019f98:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8019f9c:	d094      	beq.n	8019ec8 <uxr_read_framed_msg+0x294>
 8019f9e:	ebae 0303 	sub.w	r3, lr, r3
 8019fa2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019fa4:	3302      	adds	r3, #2
 8019fa6:	9200      	str	r2, [sp, #0]
 8019fa8:	e7b8      	b.n	8019f1c <uxr_read_framed_msg+0x2e8>
 8019faa:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8019fae:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019fb0:	7013      	strb	r3, [r2, #0]
 8019fb2:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8019fb4:	b003      	add	sp, #12
 8019fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fba:	1c59      	adds	r1, r3, #1
 8019fbc:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8019fc0:	084a      	lsrs	r2, r1, #1
 8019fc2:	fba5 e202 	umull	lr, r2, r5, r2
 8019fc6:	0892      	lsrs	r2, r2, #2
 8019fc8:	fb0c 1212 	mls	r2, ip, r2, r1
 8019fcc:	b2d1      	uxtb	r1, r2
 8019fce:	4288      	cmp	r0, r1
 8019fd0:	d0b0      	beq.n	8019f34 <uxr_read_framed_msg+0x300>
 8019fd2:	3302      	adds	r3, #2
 8019fd4:	4422      	add	r2, r4
 8019fd6:	7891      	ldrb	r1, [r2, #2]
 8019fd8:	085a      	lsrs	r2, r3, #1
 8019fda:	fba5 0202 	umull	r0, r2, r5, r2
 8019fde:	297e      	cmp	r1, #126	@ 0x7e
 8019fe0:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019fe4:	fb0c 3312 	mls	r3, ip, r2, r3
 8019fe8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019fec:	f000 80a1 	beq.w	801a132 <uxr_read_framed_msg+0x4fe>
 8019ff0:	f081 0120 	eor.w	r1, r1, #32
 8019ff4:	e680      	b.n	8019cf8 <uxr_read_framed_msg+0xc4>
 8019ff6:	f103 0c01 	add.w	ip, r3, #1
 8019ffa:	202a      	movs	r0, #42	@ 0x2a
 8019ffc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801a000:	fba5 e202 	umull	lr, r2, r5, r2
 801a004:	0892      	lsrs	r2, r2, #2
 801a006:	fb00 c212 	mls	r2, r0, r2, ip
 801a00a:	fa5f fc82 	uxtb.w	ip, r2
 801a00e:	4561      	cmp	r1, ip
 801a010:	d081      	beq.n	8019f16 <uxr_read_framed_msg+0x2e2>
 801a012:	3302      	adds	r3, #2
 801a014:	4422      	add	r2, r4
 801a016:	0859      	lsrs	r1, r3, #1
 801a018:	7892      	ldrb	r2, [r2, #2]
 801a01a:	fba5 c101 	umull	ip, r1, r5, r1
 801a01e:	2a7e      	cmp	r2, #126	@ 0x7e
 801a020:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801a024:	fb00 3311 	mls	r3, r0, r1, r3
 801a028:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801a02c:	f000 8091 	beq.w	801a152 <uxr_read_framed_msg+0x51e>
 801a030:	f082 0220 	eor.w	r2, r2, #32
 801a034:	e636      	b.n	8019ca4 <uxr_read_framed_msg+0x70>
 801a036:	1c51      	adds	r1, r2, #1
 801a038:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801a03c:	084b      	lsrs	r3, r1, #1
 801a03e:	fba5 e303 	umull	lr, r3, r5, r3
 801a042:	089b      	lsrs	r3, r3, #2
 801a044:	fb0c 1313 	mls	r3, ip, r3, r1
 801a048:	b2d9      	uxtb	r1, r3
 801a04a:	4288      	cmp	r0, r1
 801a04c:	d09b      	beq.n	8019f86 <uxr_read_framed_msg+0x352>
 801a04e:	3202      	adds	r2, #2
 801a050:	4423      	add	r3, r4
 801a052:	0850      	lsrs	r0, r2, #1
 801a054:	789b      	ldrb	r3, [r3, #2]
 801a056:	fba5 1000 	umull	r1, r0, r5, r0
 801a05a:	2b7e      	cmp	r3, #126	@ 0x7e
 801a05c:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801a060:	fb0c 2210 	mls	r2, ip, r0, r2
 801a064:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801a068:	d077      	beq.n	801a15a <uxr_read_framed_msg+0x526>
 801a06a:	f083 0120 	eor.w	r1, r3, #32
 801a06e:	e6ea      	b.n	8019e46 <uxr_read_framed_msg+0x212>
 801a070:	f103 0c01 	add.w	ip, r3, #1
 801a074:	202a      	movs	r0, #42	@ 0x2a
 801a076:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801a07a:	fba5 e202 	umull	lr, r2, r5, r2
 801a07e:	0892      	lsrs	r2, r2, #2
 801a080:	fb00 c212 	mls	r2, r0, r2, ip
 801a084:	fa5f fc82 	uxtb.w	ip, r2
 801a088:	4561      	cmp	r1, ip
 801a08a:	f43f af57 	beq.w	8019f3c <uxr_read_framed_msg+0x308>
 801a08e:	3302      	adds	r3, #2
 801a090:	4422      	add	r2, r4
 801a092:	7891      	ldrb	r1, [r2, #2]
 801a094:	085a      	lsrs	r2, r3, #1
 801a096:	fba5 c202 	umull	ip, r2, r5, r2
 801a09a:	297e      	cmp	r1, #126	@ 0x7e
 801a09c:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801a0a0:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801a0a4:	fb00 3312 	mls	r3, r0, r2, r3
 801a0a8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801a0ac:	f43f af46 	beq.w	8019f3c <uxr_read_framed_msg+0x308>
 801a0b0:	f081 0120 	eor.w	r1, r1, #32
 801a0b4:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801a0b8:	e6ea      	b.n	8019e90 <uxr_read_framed_msg+0x25c>
 801a0ba:	1c59      	adds	r1, r3, #1
 801a0bc:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801a0c0:	084a      	lsrs	r2, r1, #1
 801a0c2:	fba5 e202 	umull	lr, r2, r5, r2
 801a0c6:	0892      	lsrs	r2, r2, #2
 801a0c8:	fb0c 1212 	mls	r2, ip, r2, r1
 801a0cc:	b2d1      	uxtb	r1, r2
 801a0ce:	4288      	cmp	r0, r1
 801a0d0:	f43f af21 	beq.w	8019f16 <uxr_read_framed_msg+0x2e2>
 801a0d4:	3302      	adds	r3, #2
 801a0d6:	4422      	add	r2, r4
 801a0d8:	7891      	ldrb	r1, [r2, #2]
 801a0da:	085a      	lsrs	r2, r3, #1
 801a0dc:	fba5 0202 	umull	r0, r2, r5, r2
 801a0e0:	297e      	cmp	r1, #126	@ 0x7e
 801a0e2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801a0e6:	fb0c 3312 	mls	r3, ip, r2, r3
 801a0ea:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801a0ee:	d030      	beq.n	801a152 <uxr_read_framed_msg+0x51e>
 801a0f0:	f081 0120 	eor.w	r1, r1, #32
 801a0f4:	e65d      	b.n	8019db2 <uxr_read_framed_msg+0x17e>
 801a0f6:	1c59      	adds	r1, r3, #1
 801a0f8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801a0fc:	084a      	lsrs	r2, r1, #1
 801a0fe:	fba5 e202 	umull	lr, r2, r5, r2
 801a102:	0892      	lsrs	r2, r2, #2
 801a104:	fb0c 1212 	mls	r2, ip, r2, r1
 801a108:	b2d1      	uxtb	r1, r2
 801a10a:	4288      	cmp	r0, r1
 801a10c:	f43f af12 	beq.w	8019f34 <uxr_read_framed_msg+0x300>
 801a110:	3302      	adds	r3, #2
 801a112:	4422      	add	r2, r4
 801a114:	7891      	ldrb	r1, [r2, #2]
 801a116:	085a      	lsrs	r2, r3, #1
 801a118:	fba5 0202 	umull	r0, r2, r5, r2
 801a11c:	297e      	cmp	r1, #126	@ 0x7e
 801a11e:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801a122:	fb0c 3312 	mls	r3, ip, r2, r3
 801a126:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801a12a:	d002      	beq.n	801a132 <uxr_read_framed_msg+0x4fe>
 801a12c:	f081 0120 	eor.w	r1, r1, #32
 801a130:	e66a      	b.n	8019e08 <uxr_read_framed_msg+0x1d4>
 801a132:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a134:	9300      	str	r3, [sp, #0]
 801a136:	2302      	movs	r3, #2
 801a138:	9301      	str	r3, [sp, #4]
 801a13a:	464a      	mov	r2, r9
 801a13c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a13e:	4641      	mov	r1, r8
 801a140:	4620      	mov	r0, r4
 801a142:	f7ff fce3 	bl	8019b0c <uxr_framing_read_transport>
 801a146:	2800      	cmp	r0, #0
 801a148:	f47f aef2 	bne.w	8019f30 <uxr_read_framed_msg+0x2fc>
 801a14c:	2301      	movs	r3, #1
 801a14e:	7023      	strb	r3, [r4, #0]
 801a150:	e581      	b.n	8019c56 <uxr_read_framed_msg+0x22>
 801a152:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a154:	9300      	str	r3, [sp, #0]
 801a156:	2301      	movs	r3, #1
 801a158:	e7ee      	b.n	801a138 <uxr_read_framed_msg+0x504>
 801a15a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a15c:	9300      	str	r3, [sp, #0]
 801a15e:	2303      	movs	r3, #3
 801a160:	e7ea      	b.n	801a138 <uxr_read_framed_msg+0x504>
 801a162:	bf00      	nop

0801a164 <uxr_prepare_output_stream>:
 801a164:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a166:	b087      	sub	sp, #28
 801a168:	2707      	movs	r7, #7
 801a16a:	2500      	movs	r5, #0
 801a16c:	461c      	mov	r4, r3
 801a16e:	4606      	mov	r6, r0
 801a170:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801a174:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801a176:	e9cd 7500 	strd	r7, r5, [sp]
 801a17a:	3204      	adds	r2, #4
 801a17c:	f7f7 ff9e 	bl	80120bc <uxr_prepare_stream_to_write_submessage>
 801a180:	f080 0201 	eor.w	r2, r0, #1
 801a184:	b2d2      	uxtb	r2, r2
 801a186:	75a2      	strb	r2, [r4, #22]
 801a188:	b112      	cbz	r2, 801a190 <uxr_prepare_output_stream+0x2c>
 801a18a:	4628      	mov	r0, r5
 801a18c:	b007      	add	sp, #28
 801a18e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a190:	aa05      	add	r2, sp, #20
 801a192:	9902      	ldr	r1, [sp, #8]
 801a194:	4630      	mov	r0, r6
 801a196:	f7f8 f8cd 	bl	8012334 <uxr_init_base_object_request>
 801a19a:	a905      	add	r1, sp, #20
 801a19c:	4605      	mov	r5, r0
 801a19e:	4620      	mov	r0, r4
 801a1a0:	f7f9 fa5e 	bl	8013660 <uxr_serialize_WRITE_DATA_Payload_Data>
 801a1a4:	69a6      	ldr	r6, [r4, #24]
 801a1a6:	69e7      	ldr	r7, [r4, #28]
 801a1a8:	4620      	mov	r0, r4
 801a1aa:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801a1ae:	1a52      	subs	r2, r2, r1
 801a1b0:	f7f4 fcda 	bl	800eb68 <ucdr_init_buffer>
 801a1b4:	4620      	mov	r0, r4
 801a1b6:	463a      	mov	r2, r7
 801a1b8:	4631      	mov	r1, r6
 801a1ba:	f7f4 fca9 	bl	800eb10 <ucdr_set_on_full_buffer_callback>
 801a1be:	4628      	mov	r0, r5
 801a1c0:	b007      	add	sp, #28
 801a1c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a1c4 <rcl_convert_rmw_ret_to_rcl_ret>:
 801a1c4:	280b      	cmp	r0, #11
 801a1c6:	dc0d      	bgt.n	801a1e4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801a1c8:	2800      	cmp	r0, #0
 801a1ca:	db09      	blt.n	801a1e0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801a1cc:	280b      	cmp	r0, #11
 801a1ce:	d807      	bhi.n	801a1e0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801a1d0:	e8df f000 	tbb	[pc, r0]
 801a1d4:	07060607 	.word	0x07060607
 801a1d8:	06060606 	.word	0x06060606
 801a1dc:	07070606 	.word	0x07070606
 801a1e0:	2001      	movs	r0, #1
 801a1e2:	4770      	bx	lr
 801a1e4:	28cb      	cmp	r0, #203	@ 0xcb
 801a1e6:	bf18      	it	ne
 801a1e8:	2001      	movne	r0, #1
 801a1ea:	4770      	bx	lr

0801a1ec <rcl_get_default_domain_id>:
 801a1ec:	b530      	push	{r4, r5, lr}
 801a1ee:	2300      	movs	r3, #0
 801a1f0:	b083      	sub	sp, #12
 801a1f2:	9300      	str	r3, [sp, #0]
 801a1f4:	b1d0      	cbz	r0, 801a22c <rcl_get_default_domain_id+0x40>
 801a1f6:	4604      	mov	r4, r0
 801a1f8:	4669      	mov	r1, sp
 801a1fa:	4815      	ldr	r0, [pc, #84]	@ (801a250 <rcl_get_default_domain_id+0x64>)
 801a1fc:	f7fc f900 	bl	8016400 <rcutils_get_env>
 801a200:	4602      	mov	r2, r0
 801a202:	b110      	cbz	r0, 801a20a <rcl_get_default_domain_id+0x1e>
 801a204:	2001      	movs	r0, #1
 801a206:	b003      	add	sp, #12
 801a208:	bd30      	pop	{r4, r5, pc}
 801a20a:	9b00      	ldr	r3, [sp, #0]
 801a20c:	b18b      	cbz	r3, 801a232 <rcl_get_default_domain_id+0x46>
 801a20e:	7818      	ldrb	r0, [r3, #0]
 801a210:	2800      	cmp	r0, #0
 801a212:	d0f8      	beq.n	801a206 <rcl_get_default_domain_id+0x1a>
 801a214:	a901      	add	r1, sp, #4
 801a216:	4618      	mov	r0, r3
 801a218:	9201      	str	r2, [sp, #4]
 801a21a:	f000 ff43 	bl	801b0a4 <strtoul>
 801a21e:	4605      	mov	r5, r0
 801a220:	b150      	cbz	r0, 801a238 <rcl_get_default_domain_id+0x4c>
 801a222:	1c43      	adds	r3, r0, #1
 801a224:	d00d      	beq.n	801a242 <rcl_get_default_domain_id+0x56>
 801a226:	2000      	movs	r0, #0
 801a228:	6025      	str	r5, [r4, #0]
 801a22a:	e7ec      	b.n	801a206 <rcl_get_default_domain_id+0x1a>
 801a22c:	200b      	movs	r0, #11
 801a22e:	b003      	add	sp, #12
 801a230:	bd30      	pop	{r4, r5, pc}
 801a232:	4618      	mov	r0, r3
 801a234:	b003      	add	sp, #12
 801a236:	bd30      	pop	{r4, r5, pc}
 801a238:	9b01      	ldr	r3, [sp, #4]
 801a23a:	781b      	ldrb	r3, [r3, #0]
 801a23c:	2b00      	cmp	r3, #0
 801a23e:	d0f2      	beq.n	801a226 <rcl_get_default_domain_id+0x3a>
 801a240:	e7e0      	b.n	801a204 <rcl_get_default_domain_id+0x18>
 801a242:	f001 fa5d 	bl	801b700 <__errno>
 801a246:	6803      	ldr	r3, [r0, #0]
 801a248:	2b22      	cmp	r3, #34	@ 0x22
 801a24a:	d1ec      	bne.n	801a226 <rcl_get_default_domain_id+0x3a>
 801a24c:	e7da      	b.n	801a204 <rcl_get_default_domain_id+0x18>
 801a24e:	bf00      	nop
 801a250:	0801cf88 	.word	0x0801cf88

0801a254 <rcl_expand_topic_name>:
 801a254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a258:	b08d      	sub	sp, #52	@ 0x34
 801a25a:	4698      	mov	r8, r3
 801a25c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801a25e:	9207      	str	r2, [sp, #28]
 801a260:	2b00      	cmp	r3, #0
 801a262:	bf18      	it	ne
 801a264:	f1b8 0f00 	cmpne.w	r8, #0
 801a268:	bf0c      	ite	eq
 801a26a:	2301      	moveq	r3, #1
 801a26c:	2300      	movne	r3, #0
 801a26e:	2a00      	cmp	r2, #0
 801a270:	bf08      	it	eq
 801a272:	f043 0301 	orreq.w	r3, r3, #1
 801a276:	2900      	cmp	r1, #0
 801a278:	bf08      	it	eq
 801a27a:	f043 0301 	orreq.w	r3, r3, #1
 801a27e:	2b00      	cmp	r3, #0
 801a280:	d13d      	bne.n	801a2fe <rcl_expand_topic_name+0xaa>
 801a282:	fab0 f280 	clz	r2, r0
 801a286:	4604      	mov	r4, r0
 801a288:	0952      	lsrs	r2, r2, #5
 801a28a:	2800      	cmp	r0, #0
 801a28c:	d037      	beq.n	801a2fe <rcl_expand_topic_name+0xaa>
 801a28e:	460f      	mov	r7, r1
 801a290:	a90b      	add	r1, sp, #44	@ 0x2c
 801a292:	f000 f9f3 	bl	801a67c <rcl_validate_topic_name>
 801a296:	4605      	mov	r5, r0
 801a298:	bb68      	cbnz	r0, 801a2f6 <rcl_expand_topic_name+0xa2>
 801a29a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a29c:	2b00      	cmp	r3, #0
 801a29e:	d137      	bne.n	801a310 <rcl_expand_topic_name+0xbc>
 801a2a0:	4602      	mov	r2, r0
 801a2a2:	a90b      	add	r1, sp, #44	@ 0x2c
 801a2a4:	4638      	mov	r0, r7
 801a2a6:	f7fc fd35 	bl	8016d14 <rmw_validate_node_name>
 801a2aa:	bb68      	cbnz	r0, 801a308 <rcl_expand_topic_name+0xb4>
 801a2ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a2ae:	2b00      	cmp	r3, #0
 801a2b0:	d133      	bne.n	801a31a <rcl_expand_topic_name+0xc6>
 801a2b2:	462a      	mov	r2, r5
 801a2b4:	a90b      	add	r1, sp, #44	@ 0x2c
 801a2b6:	9807      	ldr	r0, [sp, #28]
 801a2b8:	f7fc fd0e 	bl	8016cd8 <rmw_validate_namespace>
 801a2bc:	bb20      	cbnz	r0, 801a308 <rcl_expand_topic_name+0xb4>
 801a2be:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801a2c0:	2d00      	cmp	r5, #0
 801a2c2:	f040 80a2 	bne.w	801a40a <rcl_expand_topic_name+0x1b6>
 801a2c6:	217b      	movs	r1, #123	@ 0x7b
 801a2c8:	4620      	mov	r0, r4
 801a2ca:	f001 f98d 	bl	801b5e8 <strchr>
 801a2ce:	7823      	ldrb	r3, [r4, #0]
 801a2d0:	4681      	mov	r9, r0
 801a2d2:	bb20      	cbnz	r0, 801a31e <rcl_expand_topic_name+0xca>
 801a2d4:	2b2f      	cmp	r3, #47	@ 0x2f
 801a2d6:	d122      	bne.n	801a31e <rcl_expand_topic_name+0xca>
 801a2d8:	ab19      	add	r3, sp, #100	@ 0x64
 801a2da:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a2de:	ab16      	add	r3, sp, #88	@ 0x58
 801a2e0:	e88d 0003 	stmia.w	sp, {r0, r1}
 801a2e4:	4620      	mov	r0, r4
 801a2e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 801a2e8:	f7fc f9dc 	bl	80166a4 <rcutils_strdup>
 801a2ec:	2800      	cmp	r0, #0
 801a2ee:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801a2f0:	bf08      	it	eq
 801a2f2:	250a      	moveq	r5, #10
 801a2f4:	6018      	str	r0, [r3, #0]
 801a2f6:	4628      	mov	r0, r5
 801a2f8:	b00d      	add	sp, #52	@ 0x34
 801a2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2fe:	250b      	movs	r5, #11
 801a300:	4628      	mov	r0, r5
 801a302:	b00d      	add	sp, #52	@ 0x34
 801a304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a308:	f7ff ff5c 	bl	801a1c4 <rcl_convert_rmw_ret_to_rcl_ret>
 801a30c:	4605      	mov	r5, r0
 801a30e:	e7f2      	b.n	801a2f6 <rcl_expand_topic_name+0xa2>
 801a310:	2567      	movs	r5, #103	@ 0x67
 801a312:	4628      	mov	r0, r5
 801a314:	b00d      	add	sp, #52	@ 0x34
 801a316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a31a:	25c9      	movs	r5, #201	@ 0xc9
 801a31c:	e7eb      	b.n	801a2f6 <rcl_expand_topic_name+0xa2>
 801a31e:	2b7e      	cmp	r3, #126	@ 0x7e
 801a320:	d075      	beq.n	801a40e <rcl_expand_topic_name+0x1ba>
 801a322:	f1b9 0f00 	cmp.w	r9, #0
 801a326:	f000 80c2 	beq.w	801a4ae <rcl_expand_topic_name+0x25a>
 801a32a:	2300      	movs	r3, #0
 801a32c:	46a2      	mov	sl, r4
 801a32e:	461e      	mov	r6, r3
 801a330:	9508      	str	r5, [sp, #32]
 801a332:	4655      	mov	r5, sl
 801a334:	9409      	str	r4, [sp, #36]	@ 0x24
 801a336:	46b2      	mov	sl, r6
 801a338:	464c      	mov	r4, r9
 801a33a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801a33e:	2c00      	cmp	r4, #0
 801a340:	f000 80ae 	beq.w	801a4a0 <rcl_expand_topic_name+0x24c>
 801a344:	217d      	movs	r1, #125	@ 0x7d
 801a346:	4628      	mov	r0, r5
 801a348:	f001 f94e 	bl	801b5e8 <strchr>
 801a34c:	eba0 0904 	sub.w	r9, r0, r4
 801a350:	4621      	mov	r1, r4
 801a352:	4869      	ldr	r0, [pc, #420]	@ (801a4f8 <rcl_expand_topic_name+0x2a4>)
 801a354:	f109 0601 	add.w	r6, r9, #1
 801a358:	4632      	mov	r2, r6
 801a35a:	f001 f952 	bl	801b602 <strncmp>
 801a35e:	2800      	cmp	r0, #0
 801a360:	d051      	beq.n	801a406 <rcl_expand_topic_name+0x1b2>
 801a362:	4632      	mov	r2, r6
 801a364:	4621      	mov	r1, r4
 801a366:	4865      	ldr	r0, [pc, #404]	@ (801a4fc <rcl_expand_topic_name+0x2a8>)
 801a368:	f001 f94b 	bl	801b602 <strncmp>
 801a36c:	b128      	cbz	r0, 801a37a <rcl_expand_topic_name+0x126>
 801a36e:	4632      	mov	r2, r6
 801a370:	4621      	mov	r1, r4
 801a372:	4863      	ldr	r0, [pc, #396]	@ (801a500 <rcl_expand_topic_name+0x2ac>)
 801a374:	f001 f945 	bl	801b602 <strncmp>
 801a378:	bb38      	cbnz	r0, 801a3ca <rcl_expand_topic_name+0x176>
 801a37a:	46d9      	mov	r9, fp
 801a37c:	ab18      	add	r3, sp, #96	@ 0x60
 801a37e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a382:	ab16      	add	r3, sp, #88	@ 0x58
 801a384:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801a388:	4620      	mov	r0, r4
 801a38a:	4631      	mov	r1, r6
 801a38c:	cb0c      	ldmia	r3, {r2, r3}
 801a38e:	f7fc f9ab 	bl	80166e8 <rcutils_strndup>
 801a392:	4604      	mov	r4, r0
 801a394:	2800      	cmp	r0, #0
 801a396:	f000 80a3 	beq.w	801a4e0 <rcl_expand_topic_name+0x28c>
 801a39a:	464a      	mov	r2, r9
 801a39c:	4628      	mov	r0, r5
 801a39e:	ab16      	add	r3, sp, #88	@ 0x58
 801a3a0:	4621      	mov	r1, r4
 801a3a2:	f7fc f87f 	bl	80164a4 <rcutils_repl_str>
 801a3a6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801a3a8:	4605      	mov	r5, r0
 801a3aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801a3ac:	4620      	mov	r0, r4
 801a3ae:	4798      	blx	r3
 801a3b0:	4650      	mov	r0, sl
 801a3b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801a3b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801a3b6:	4798      	blx	r3
 801a3b8:	2d00      	cmp	r5, #0
 801a3ba:	d06c      	beq.n	801a496 <rcl_expand_topic_name+0x242>
 801a3bc:	217b      	movs	r1, #123	@ 0x7b
 801a3be:	4628      	mov	r0, r5
 801a3c0:	f001 f912 	bl	801b5e8 <strchr>
 801a3c4:	46aa      	mov	sl, r5
 801a3c6:	4604      	mov	r4, r0
 801a3c8:	e7b9      	b.n	801a33e <rcl_expand_topic_name+0xea>
 801a3ca:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801a3ce:	1c61      	adds	r1, r4, #1
 801a3d0:	4640      	mov	r0, r8
 801a3d2:	f7fc faa1 	bl	8016918 <rcutils_string_map_getn>
 801a3d6:	4681      	mov	r9, r0
 801a3d8:	2800      	cmp	r0, #0
 801a3da:	d1cf      	bne.n	801a37c <rcl_expand_topic_name+0x128>
 801a3dc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801a3de:	aa18      	add	r2, sp, #96	@ 0x60
 801a3e0:	2569      	movs	r5, #105	@ 0x69
 801a3e2:	6018      	str	r0, [r3, #0]
 801a3e4:	ab16      	add	r3, sp, #88	@ 0x58
 801a3e6:	ca07      	ldmia	r2, {r0, r1, r2}
 801a3e8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801a3ec:	4631      	mov	r1, r6
 801a3ee:	4620      	mov	r0, r4
 801a3f0:	cb0c      	ldmia	r3, {r2, r3}
 801a3f2:	f7fc f979 	bl	80166e8 <rcutils_strndup>
 801a3f6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801a3f8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801a3fa:	4798      	blx	r3
 801a3fc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801a3fe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801a400:	4650      	mov	r0, sl
 801a402:	4798      	blx	r3
 801a404:	e777      	b.n	801a2f6 <rcl_expand_topic_name+0xa2>
 801a406:	46b9      	mov	r9, r7
 801a408:	e7b8      	b.n	801a37c <rcl_expand_topic_name+0x128>
 801a40a:	25ca      	movs	r5, #202	@ 0xca
 801a40c:	e773      	b.n	801a2f6 <rcl_expand_topic_name+0xa2>
 801a40e:	9e07      	ldr	r6, [sp, #28]
 801a410:	4630      	mov	r0, r6
 801a412:	f7e5 ff1f 	bl	8000254 <strlen>
 801a416:	4a3b      	ldr	r2, [pc, #236]	@ (801a504 <rcl_expand_topic_name+0x2b0>)
 801a418:	4b3b      	ldr	r3, [pc, #236]	@ (801a508 <rcl_expand_topic_name+0x2b4>)
 801a41a:	9603      	str	r6, [sp, #12]
 801a41c:	2801      	cmp	r0, #1
 801a41e:	bf18      	it	ne
 801a420:	4613      	movne	r3, r2
 801a422:	9704      	str	r7, [sp, #16]
 801a424:	9302      	str	r3, [sp, #8]
 801a426:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801a428:	9300      	str	r3, [sp, #0]
 801a42a:	1c63      	adds	r3, r4, #1
 801a42c:	9305      	str	r3, [sp, #20]
 801a42e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801a432:	9301      	str	r3, [sp, #4]
 801a434:	ab16      	add	r3, sp, #88	@ 0x58
 801a436:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a438:	f7fb fffa 	bl	8016430 <rcutils_format_string_limit>
 801a43c:	4606      	mov	r6, r0
 801a43e:	b350      	cbz	r0, 801a496 <rcl_expand_topic_name+0x242>
 801a440:	f1b9 0f00 	cmp.w	r9, #0
 801a444:	d005      	beq.n	801a452 <rcl_expand_topic_name+0x1fe>
 801a446:	217b      	movs	r1, #123	@ 0x7b
 801a448:	46b2      	mov	sl, r6
 801a44a:	f001 f8cd 	bl	801b5e8 <strchr>
 801a44e:	4681      	mov	r9, r0
 801a450:	e76e      	b.n	801a330 <rcl_expand_topic_name+0xdc>
 801a452:	7833      	ldrb	r3, [r6, #0]
 801a454:	2b2f      	cmp	r3, #47	@ 0x2f
 801a456:	d01b      	beq.n	801a490 <rcl_expand_topic_name+0x23c>
 801a458:	9c07      	ldr	r4, [sp, #28]
 801a45a:	4620      	mov	r0, r4
 801a45c:	f7e5 fefa 	bl	8000254 <strlen>
 801a460:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801a464:	4a29      	ldr	r2, [pc, #164]	@ (801a50c <rcl_expand_topic_name+0x2b8>)
 801a466:	9301      	str	r3, [sp, #4]
 801a468:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801a46a:	9604      	str	r6, [sp, #16]
 801a46c:	9300      	str	r3, [sp, #0]
 801a46e:	4b28      	ldr	r3, [pc, #160]	@ (801a510 <rcl_expand_topic_name+0x2bc>)
 801a470:	9403      	str	r4, [sp, #12]
 801a472:	2801      	cmp	r0, #1
 801a474:	bf18      	it	ne
 801a476:	4613      	movne	r3, r2
 801a478:	9302      	str	r3, [sp, #8]
 801a47a:	ab16      	add	r3, sp, #88	@ 0x58
 801a47c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a47e:	f7fb ffd7 	bl	8016430 <rcutils_format_string_limit>
 801a482:	4603      	mov	r3, r0
 801a484:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801a486:	4630      	mov	r0, r6
 801a488:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801a48a:	461e      	mov	r6, r3
 801a48c:	4790      	blx	r2
 801a48e:	b116      	cbz	r6, 801a496 <rcl_expand_topic_name+0x242>
 801a490:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801a492:	601e      	str	r6, [r3, #0]
 801a494:	e72f      	b.n	801a2f6 <rcl_expand_topic_name+0xa2>
 801a496:	2300      	movs	r3, #0
 801a498:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801a49a:	250a      	movs	r5, #10
 801a49c:	6013      	str	r3, [r2, #0]
 801a49e:	e72a      	b.n	801a2f6 <rcl_expand_topic_name+0xa2>
 801a4a0:	4653      	mov	r3, sl
 801a4a2:	4656      	mov	r6, sl
 801a4a4:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801a4a8:	2b00      	cmp	r3, #0
 801a4aa:	d1d2      	bne.n	801a452 <rcl_expand_topic_name+0x1fe>
 801a4ac:	7823      	ldrb	r3, [r4, #0]
 801a4ae:	2b2f      	cmp	r3, #47	@ 0x2f
 801a4b0:	d01e      	beq.n	801a4f0 <rcl_expand_topic_name+0x29c>
 801a4b2:	9e07      	ldr	r6, [sp, #28]
 801a4b4:	4630      	mov	r0, r6
 801a4b6:	f7e5 fecd 	bl	8000254 <strlen>
 801a4ba:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801a4bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801a4c0:	9603      	str	r6, [sp, #12]
 801a4c2:	9404      	str	r4, [sp, #16]
 801a4c4:	e9cd 2300 	strd	r2, r3, [sp]
 801a4c8:	4a10      	ldr	r2, [pc, #64]	@ (801a50c <rcl_expand_topic_name+0x2b8>)
 801a4ca:	4b11      	ldr	r3, [pc, #68]	@ (801a510 <rcl_expand_topic_name+0x2bc>)
 801a4cc:	2801      	cmp	r0, #1
 801a4ce:	bf18      	it	ne
 801a4d0:	4613      	movne	r3, r2
 801a4d2:	9302      	str	r3, [sp, #8]
 801a4d4:	ab16      	add	r3, sp, #88	@ 0x58
 801a4d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a4d8:	f7fb ffaa 	bl	8016430 <rcutils_format_string_limit>
 801a4dc:	4606      	mov	r6, r0
 801a4de:	e7d6      	b.n	801a48e <rcl_expand_topic_name+0x23a>
 801a4e0:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	@ 0x68
 801a4e4:	4650      	mov	r0, sl
 801a4e6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801a4e8:	6014      	str	r4, [r2, #0]
 801a4ea:	250a      	movs	r5, #10
 801a4ec:	4798      	blx	r3
 801a4ee:	e702      	b.n	801a2f6 <rcl_expand_topic_name+0xa2>
 801a4f0:	2300      	movs	r3, #0
 801a4f2:	461e      	mov	r6, r3
 801a4f4:	e7cc      	b.n	801a490 <rcl_expand_topic_name+0x23c>
 801a4f6:	bf00      	nop
 801a4f8:	0801cfa0 	.word	0x0801cfa0
 801a4fc:	0801cfa8 	.word	0x0801cfa8
 801a500:	0801cfb0 	.word	0x0801cfb0
 801a504:	0801cf98 	.word	0x0801cf98
 801a508:	0801cf78 	.word	0x0801cf78
 801a50c:	0801cc30 	.word	0x0801cc30
 801a510:	0801cc28 	.word	0x0801cc28

0801a514 <rcl_get_default_topic_name_substitutions>:
 801a514:	2800      	cmp	r0, #0
 801a516:	bf0c      	ite	eq
 801a518:	200b      	moveq	r0, #11
 801a51a:	2000      	movne	r0, #0
 801a51c:	4770      	bx	lr
 801a51e:	bf00      	nop

0801a520 <rcl_get_zero_initialized_guard_condition>:
 801a520:	4a03      	ldr	r2, [pc, #12]	@ (801a530 <rcl_get_zero_initialized_guard_condition+0x10>)
 801a522:	4603      	mov	r3, r0
 801a524:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a528:	e883 0003 	stmia.w	r3, {r0, r1}
 801a52c:	4618      	mov	r0, r3
 801a52e:	4770      	bx	lr
 801a530:	0801d780 	.word	0x0801d780

0801a534 <rcl_guard_condition_init_from_rmw>:
 801a534:	b082      	sub	sp, #8
 801a536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a53a:	b086      	sub	sp, #24
 801a53c:	4604      	mov	r4, r0
 801a53e:	460e      	mov	r6, r1
 801a540:	4615      	mov	r5, r2
 801a542:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801a546:	f10d 0e04 	add.w	lr, sp, #4
 801a54a:	f84c 3f04 	str.w	r3, [ip, #4]!
 801a54e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a552:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801a556:	f8dc 3000 	ldr.w	r3, [ip]
 801a55a:	a801      	add	r0, sp, #4
 801a55c:	f8ce 3000 	str.w	r3, [lr]
 801a560:	f7f5 fae0 	bl	800fb24 <rcutils_allocator_is_valid>
 801a564:	f080 0301 	eor.w	r3, r0, #1
 801a568:	b2db      	uxtb	r3, r3
 801a56a:	bb3b      	cbnz	r3, 801a5bc <rcl_guard_condition_init_from_rmw+0x88>
 801a56c:	b334      	cbz	r4, 801a5bc <rcl_guard_condition_init_from_rmw+0x88>
 801a56e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801a572:	f1b8 0f00 	cmp.w	r8, #0
 801a576:	d11a      	bne.n	801a5ae <rcl_guard_condition_init_from_rmw+0x7a>
 801a578:	b305      	cbz	r5, 801a5bc <rcl_guard_condition_init_from_rmw+0x88>
 801a57a:	4628      	mov	r0, r5
 801a57c:	f7f9 f9ec 	bl	8013958 <rcl_context_is_valid>
 801a580:	b1f0      	cbz	r0, 801a5c0 <rcl_guard_condition_init_from_rmw+0x8c>
 801a582:	9b01      	ldr	r3, [sp, #4]
 801a584:	201c      	movs	r0, #28
 801a586:	9905      	ldr	r1, [sp, #20]
 801a588:	4798      	blx	r3
 801a58a:	4607      	mov	r7, r0
 801a58c:	6060      	str	r0, [r4, #4]
 801a58e:	b320      	cbz	r0, 801a5da <rcl_guard_condition_init_from_rmw+0xa6>
 801a590:	b1c6      	cbz	r6, 801a5c4 <rcl_guard_condition_init_from_rmw+0x90>
 801a592:	6006      	str	r6, [r0, #0]
 801a594:	f880 8004 	strb.w	r8, [r0, #4]
 801a598:	ac01      	add	r4, sp, #4
 801a59a:	f107 0c08 	add.w	ip, r7, #8
 801a59e:	2500      	movs	r5, #0
 801a5a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a5a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a5a6:	6823      	ldr	r3, [r4, #0]
 801a5a8:	f8cc 3000 	str.w	r3, [ip]
 801a5ac:	e000      	b.n	801a5b0 <rcl_guard_condition_init_from_rmw+0x7c>
 801a5ae:	2564      	movs	r5, #100	@ 0x64
 801a5b0:	4628      	mov	r0, r5
 801a5b2:	b006      	add	sp, #24
 801a5b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a5b8:	b002      	add	sp, #8
 801a5ba:	4770      	bx	lr
 801a5bc:	250b      	movs	r5, #11
 801a5be:	e7f7      	b.n	801a5b0 <rcl_guard_condition_init_from_rmw+0x7c>
 801a5c0:	2565      	movs	r5, #101	@ 0x65
 801a5c2:	e7f5      	b.n	801a5b0 <rcl_guard_condition_init_from_rmw+0x7c>
 801a5c4:	6828      	ldr	r0, [r5, #0]
 801a5c6:	3028      	adds	r0, #40	@ 0x28
 801a5c8:	f000 fa2e 	bl	801aa28 <rmw_create_guard_condition>
 801a5cc:	6038      	str	r0, [r7, #0]
 801a5ce:	6867      	ldr	r7, [r4, #4]
 801a5d0:	683e      	ldr	r6, [r7, #0]
 801a5d2:	b126      	cbz	r6, 801a5de <rcl_guard_condition_init_from_rmw+0xaa>
 801a5d4:	2301      	movs	r3, #1
 801a5d6:	713b      	strb	r3, [r7, #4]
 801a5d8:	e7de      	b.n	801a598 <rcl_guard_condition_init_from_rmw+0x64>
 801a5da:	250a      	movs	r5, #10
 801a5dc:	e7e8      	b.n	801a5b0 <rcl_guard_condition_init_from_rmw+0x7c>
 801a5de:	9b02      	ldr	r3, [sp, #8]
 801a5e0:	4638      	mov	r0, r7
 801a5e2:	9905      	ldr	r1, [sp, #20]
 801a5e4:	2501      	movs	r5, #1
 801a5e6:	4798      	blx	r3
 801a5e8:	6066      	str	r6, [r4, #4]
 801a5ea:	e7e1      	b.n	801a5b0 <rcl_guard_condition_init_from_rmw+0x7c>

0801a5ec <rcl_guard_condition_fini>:
 801a5ec:	b570      	push	{r4, r5, r6, lr}
 801a5ee:	b082      	sub	sp, #8
 801a5f0:	b1f0      	cbz	r0, 801a630 <rcl_guard_condition_fini+0x44>
 801a5f2:	6843      	ldr	r3, [r0, #4]
 801a5f4:	4604      	mov	r4, r0
 801a5f6:	b163      	cbz	r3, 801a612 <rcl_guard_condition_fini+0x26>
 801a5f8:	6818      	ldr	r0, [r3, #0]
 801a5fa:	68de      	ldr	r6, [r3, #12]
 801a5fc:	6999      	ldr	r1, [r3, #24]
 801a5fe:	b160      	cbz	r0, 801a61a <rcl_guard_condition_fini+0x2e>
 801a600:	791d      	ldrb	r5, [r3, #4]
 801a602:	b965      	cbnz	r5, 801a61e <rcl_guard_condition_fini+0x32>
 801a604:	4618      	mov	r0, r3
 801a606:	47b0      	blx	r6
 801a608:	2300      	movs	r3, #0
 801a60a:	4628      	mov	r0, r5
 801a60c:	6063      	str	r3, [r4, #4]
 801a60e:	b002      	add	sp, #8
 801a610:	bd70      	pop	{r4, r5, r6, pc}
 801a612:	461d      	mov	r5, r3
 801a614:	4628      	mov	r0, r5
 801a616:	b002      	add	sp, #8
 801a618:	bd70      	pop	{r4, r5, r6, pc}
 801a61a:	4605      	mov	r5, r0
 801a61c:	e7f2      	b.n	801a604 <rcl_guard_condition_fini+0x18>
 801a61e:	9101      	str	r1, [sp, #4]
 801a620:	f000 fa18 	bl	801aa54 <rmw_destroy_guard_condition>
 801a624:	1e05      	subs	r5, r0, #0
 801a626:	6863      	ldr	r3, [r4, #4]
 801a628:	9901      	ldr	r1, [sp, #4]
 801a62a:	bf18      	it	ne
 801a62c:	2501      	movne	r5, #1
 801a62e:	e7e9      	b.n	801a604 <rcl_guard_condition_fini+0x18>
 801a630:	250b      	movs	r5, #11
 801a632:	4628      	mov	r0, r5
 801a634:	b002      	add	sp, #8
 801a636:	bd70      	pop	{r4, r5, r6, pc}

0801a638 <rcl_guard_condition_get_default_options>:
 801a638:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a63a:	b087      	sub	sp, #28
 801a63c:	4606      	mov	r6, r0
 801a63e:	4c0b      	ldr	r4, [pc, #44]	@ (801a66c <rcl_guard_condition_get_default_options+0x34>)
 801a640:	4668      	mov	r0, sp
 801a642:	f7f5 fa61 	bl	800fb08 <rcutils_get_default_allocator>
 801a646:	46ee      	mov	lr, sp
 801a648:	46a4      	mov	ip, r4
 801a64a:	4625      	mov	r5, r4
 801a64c:	4634      	mov	r4, r6
 801a64e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a652:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a656:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a658:	f8de 7000 	ldr.w	r7, [lr]
 801a65c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a65e:	4630      	mov	r0, r6
 801a660:	f8cc 7000 	str.w	r7, [ip]
 801a664:	6027      	str	r7, [r4, #0]
 801a666:	b007      	add	sp, #28
 801a668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a66a:	bf00      	nop
 801a66c:	2000f29c 	.word	0x2000f29c

0801a670 <rcl_guard_condition_get_rmw_handle>:
 801a670:	b110      	cbz	r0, 801a678 <rcl_guard_condition_get_rmw_handle+0x8>
 801a672:	6840      	ldr	r0, [r0, #4]
 801a674:	b100      	cbz	r0, 801a678 <rcl_guard_condition_get_rmw_handle+0x8>
 801a676:	6800      	ldr	r0, [r0, #0]
 801a678:	4770      	bx	lr
 801a67a:	bf00      	nop

0801a67c <rcl_validate_topic_name>:
 801a67c:	2800      	cmp	r0, #0
 801a67e:	f000 8089 	beq.w	801a794 <rcl_validate_topic_name+0x118>
 801a682:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a686:	460e      	mov	r6, r1
 801a688:	2900      	cmp	r1, #0
 801a68a:	f000 8085 	beq.w	801a798 <rcl_validate_topic_name+0x11c>
 801a68e:	4604      	mov	r4, r0
 801a690:	4617      	mov	r7, r2
 801a692:	f7e5 fddf 	bl	8000254 <strlen>
 801a696:	b1b0      	cbz	r0, 801a6c6 <rcl_validate_topic_name+0x4a>
 801a698:	f894 e000 	ldrb.w	lr, [r4]
 801a69c:	f8df c160 	ldr.w	ip, [pc, #352]	@ 801a800 <rcl_validate_topic_name+0x184>
 801a6a0:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801a6a4:	f013 0304 	ands.w	r3, r3, #4
 801a6a8:	d139      	bne.n	801a71e <rcl_validate_topic_name+0xa2>
 801a6aa:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801a6ae:	f814 2008 	ldrb.w	r2, [r4, r8]
 801a6b2:	2a2f      	cmp	r2, #47	@ 0x2f
 801a6b4:	d10f      	bne.n	801a6d6 <rcl_validate_topic_name+0x5a>
 801a6b6:	2202      	movs	r2, #2
 801a6b8:	6032      	str	r2, [r6, #0]
 801a6ba:	b3a7      	cbz	r7, 801a726 <rcl_validate_topic_name+0xaa>
 801a6bc:	4618      	mov	r0, r3
 801a6be:	f8c7 8000 	str.w	r8, [r7]
 801a6c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a6c6:	2301      	movs	r3, #1
 801a6c8:	6033      	str	r3, [r6, #0]
 801a6ca:	b367      	cbz	r7, 801a726 <rcl_validate_topic_name+0xaa>
 801a6cc:	2300      	movs	r3, #0
 801a6ce:	4618      	mov	r0, r3
 801a6d0:	603b      	str	r3, [r7, #0]
 801a6d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a6d6:	f104 3aff 	add.w	sl, r4, #4294967295	@ 0xffffffff
 801a6da:	461d      	mov	r5, r3
 801a6dc:	4619      	mov	r1, r3
 801a6de:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801a6e2:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
 801a6e6:	f1b9 0f09 	cmp.w	r9, #9
 801a6ea:	d91f      	bls.n	801a72c <rcl_validate_topic_name+0xb0>
 801a6ec:	f022 0920 	bic.w	r9, r2, #32
 801a6f0:	f1a9 0941 	sub.w	r9, r9, #65	@ 0x41
 801a6f4:	f1b9 0f19 	cmp.w	r9, #25
 801a6f8:	d918      	bls.n	801a72c <rcl_validate_topic_name+0xb0>
 801a6fa:	2a5f      	cmp	r2, #95	@ 0x5f
 801a6fc:	d024      	beq.n	801a748 <rcl_validate_topic_name+0xcc>
 801a6fe:	2a2f      	cmp	r2, #47	@ 0x2f
 801a700:	d058      	beq.n	801a7b4 <rcl_validate_topic_name+0x138>
 801a702:	2a7e      	cmp	r2, #126	@ 0x7e
 801a704:	d04a      	beq.n	801a79c <rcl_validate_topic_name+0x120>
 801a706:	2a7b      	cmp	r2, #123	@ 0x7b
 801a708:	d05b      	beq.n	801a7c2 <rcl_validate_topic_name+0x146>
 801a70a:	2a7d      	cmp	r2, #125	@ 0x7d
 801a70c:	d169      	bne.n	801a7e2 <rcl_validate_topic_name+0x166>
 801a70e:	2d00      	cmp	r5, #0
 801a710:	d15c      	bne.n	801a7cc <rcl_validate_topic_name+0x150>
 801a712:	2305      	movs	r3, #5
 801a714:	6033      	str	r3, [r6, #0]
 801a716:	b137      	cbz	r7, 801a726 <rcl_validate_topic_name+0xaa>
 801a718:	2000      	movs	r0, #0
 801a71a:	6039      	str	r1, [r7, #0]
 801a71c:	e7d9      	b.n	801a6d2 <rcl_validate_topic_name+0x56>
 801a71e:	2304      	movs	r3, #4
 801a720:	6033      	str	r3, [r6, #0]
 801a722:	2f00      	cmp	r7, #0
 801a724:	d1d2      	bne.n	801a6cc <rcl_validate_topic_name+0x50>
 801a726:	2000      	movs	r0, #0
 801a728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a72c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801a730:	0752      	lsls	r2, r2, #29
 801a732:	d509      	bpl.n	801a748 <rcl_validate_topic_name+0xcc>
 801a734:	2900      	cmp	r1, #0
 801a736:	bf0c      	ite	eq
 801a738:	2200      	moveq	r2, #0
 801a73a:	f005 0201 	andne.w	r2, r5, #1
 801a73e:	b11a      	cbz	r2, 801a748 <rcl_validate_topic_name+0xcc>
 801a740:	1e4d      	subs	r5, r1, #1
 801a742:	429d      	cmp	r5, r3
 801a744:	d031      	beq.n	801a7aa <rcl_validate_topic_name+0x12e>
 801a746:	4615      	mov	r5, r2
 801a748:	3101      	adds	r1, #1
 801a74a:	4288      	cmp	r0, r1
 801a74c:	d1c7      	bne.n	801a6de <rcl_validate_topic_name+0x62>
 801a74e:	2d00      	cmp	r5, #0
 801a750:	d142      	bne.n	801a7d8 <rcl_validate_topic_name+0x15c>
 801a752:	4628      	mov	r0, r5
 801a754:	2301      	movs	r3, #1
 801a756:	e00c      	b.n	801a772 <rcl_validate_topic_name+0xf6>
 801a758:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 801a75c:	d101      	bne.n	801a762 <rcl_validate_topic_name+0xe6>
 801a75e:	2801      	cmp	r0, #1
 801a760:	d047      	beq.n	801a7f2 <rcl_validate_topic_name+0x176>
 801a762:	1c5a      	adds	r2, r3, #1
 801a764:	428b      	cmp	r3, r1
 801a766:	f100 0001 	add.w	r0, r0, #1
 801a76a:	f104 0401 	add.w	r4, r4, #1
 801a76e:	4613      	mov	r3, r2
 801a770:	d22e      	bcs.n	801a7d0 <rcl_validate_topic_name+0x154>
 801a772:	4580      	cmp	r8, r0
 801a774:	d0f5      	beq.n	801a762 <rcl_validate_topic_name+0xe6>
 801a776:	7822      	ldrb	r2, [r4, #0]
 801a778:	2a2f      	cmp	r2, #47	@ 0x2f
 801a77a:	d1ed      	bne.n	801a758 <rcl_validate_topic_name+0xdc>
 801a77c:	7862      	ldrb	r2, [r4, #1]
 801a77e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801a782:	0752      	lsls	r2, r2, #29
 801a784:	d5ed      	bpl.n	801a762 <rcl_validate_topic_name+0xe6>
 801a786:	2204      	movs	r2, #4
 801a788:	6032      	str	r2, [r6, #0]
 801a78a:	2f00      	cmp	r7, #0
 801a78c:	d0cb      	beq.n	801a726 <rcl_validate_topic_name+0xaa>
 801a78e:	2000      	movs	r0, #0
 801a790:	603b      	str	r3, [r7, #0]
 801a792:	e79e      	b.n	801a6d2 <rcl_validate_topic_name+0x56>
 801a794:	200b      	movs	r0, #11
 801a796:	4770      	bx	lr
 801a798:	200b      	movs	r0, #11
 801a79a:	e79a      	b.n	801a6d2 <rcl_validate_topic_name+0x56>
 801a79c:	2900      	cmp	r1, #0
 801a79e:	d0d3      	beq.n	801a748 <rcl_validate_topic_name+0xcc>
 801a7a0:	2306      	movs	r3, #6
 801a7a2:	6033      	str	r3, [r6, #0]
 801a7a4:	2f00      	cmp	r7, #0
 801a7a6:	d1b7      	bne.n	801a718 <rcl_validate_topic_name+0x9c>
 801a7a8:	e7bd      	b.n	801a726 <rcl_validate_topic_name+0xaa>
 801a7aa:	2309      	movs	r3, #9
 801a7ac:	6033      	str	r3, [r6, #0]
 801a7ae:	2f00      	cmp	r7, #0
 801a7b0:	d1b2      	bne.n	801a718 <rcl_validate_topic_name+0x9c>
 801a7b2:	e7b8      	b.n	801a726 <rcl_validate_topic_name+0xaa>
 801a7b4:	2d00      	cmp	r5, #0
 801a7b6:	d0c7      	beq.n	801a748 <rcl_validate_topic_name+0xcc>
 801a7b8:	2308      	movs	r3, #8
 801a7ba:	6033      	str	r3, [r6, #0]
 801a7bc:	2f00      	cmp	r7, #0
 801a7be:	d1ab      	bne.n	801a718 <rcl_validate_topic_name+0x9c>
 801a7c0:	e7b1      	b.n	801a726 <rcl_validate_topic_name+0xaa>
 801a7c2:	2d00      	cmp	r5, #0
 801a7c4:	d1f8      	bne.n	801a7b8 <rcl_validate_topic_name+0x13c>
 801a7c6:	460b      	mov	r3, r1
 801a7c8:	2501      	movs	r5, #1
 801a7ca:	e7bd      	b.n	801a748 <rcl_validate_topic_name+0xcc>
 801a7cc:	2500      	movs	r5, #0
 801a7ce:	e7bb      	b.n	801a748 <rcl_validate_topic_name+0xcc>
 801a7d0:	2300      	movs	r3, #0
 801a7d2:	4618      	mov	r0, r3
 801a7d4:	6033      	str	r3, [r6, #0]
 801a7d6:	e77c      	b.n	801a6d2 <rcl_validate_topic_name+0x56>
 801a7d8:	2205      	movs	r2, #5
 801a7da:	6032      	str	r2, [r6, #0]
 801a7dc:	2f00      	cmp	r7, #0
 801a7de:	d1d6      	bne.n	801a78e <rcl_validate_topic_name+0x112>
 801a7e0:	e7a1      	b.n	801a726 <rcl_validate_topic_name+0xaa>
 801a7e2:	2d00      	cmp	r5, #0
 801a7e4:	bf14      	ite	ne
 801a7e6:	2308      	movne	r3, #8
 801a7e8:	2303      	moveq	r3, #3
 801a7ea:	6033      	str	r3, [r6, #0]
 801a7ec:	2f00      	cmp	r7, #0
 801a7ee:	d193      	bne.n	801a718 <rcl_validate_topic_name+0x9c>
 801a7f0:	e799      	b.n	801a726 <rcl_validate_topic_name+0xaa>
 801a7f2:	2307      	movs	r3, #7
 801a7f4:	6033      	str	r3, [r6, #0]
 801a7f6:	2f00      	cmp	r7, #0
 801a7f8:	d095      	beq.n	801a726 <rcl_validate_topic_name+0xaa>
 801a7fa:	2301      	movs	r3, #1
 801a7fc:	e7c7      	b.n	801a78e <rcl_validate_topic_name+0x112>
 801a7fe:	bf00      	nop
 801a800:	0801d867 	.word	0x0801d867

0801a804 <rcutils_string_array_fini>:
 801a804:	b328      	cbz	r0, 801a852 <rcutils_string_array_fini+0x4e>
 801a806:	b570      	push	{r4, r5, r6, lr}
 801a808:	4604      	mov	r4, r0
 801a80a:	6840      	ldr	r0, [r0, #4]
 801a80c:	b1e0      	cbz	r0, 801a848 <rcutils_string_array_fini+0x44>
 801a80e:	f104 0008 	add.w	r0, r4, #8
 801a812:	f7f5 f987 	bl	800fb24 <rcutils_allocator_is_valid>
 801a816:	b1c0      	cbz	r0, 801a84a <rcutils_string_array_fini+0x46>
 801a818:	6823      	ldr	r3, [r4, #0]
 801a81a:	b1c3      	cbz	r3, 801a84e <rcutils_string_array_fini+0x4a>
 801a81c:	2500      	movs	r5, #0
 801a81e:	6860      	ldr	r0, [r4, #4]
 801a820:	462e      	mov	r6, r5
 801a822:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801a826:	68e3      	ldr	r3, [r4, #12]
 801a828:	69a1      	ldr	r1, [r4, #24]
 801a82a:	4798      	blx	r3
 801a82c:	e9d4 3000 	ldrd	r3, r0, [r4]
 801a830:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801a834:	3501      	adds	r5, #1
 801a836:	429d      	cmp	r5, r3
 801a838:	d3f3      	bcc.n	801a822 <rcutils_string_array_fini+0x1e>
 801a83a:	68e3      	ldr	r3, [r4, #12]
 801a83c:	69a1      	ldr	r1, [r4, #24]
 801a83e:	4798      	blx	r3
 801a840:	2300      	movs	r3, #0
 801a842:	4618      	mov	r0, r3
 801a844:	e9c4 3300 	strd	r3, r3, [r4]
 801a848:	bd70      	pop	{r4, r5, r6, pc}
 801a84a:	200b      	movs	r0, #11
 801a84c:	bd70      	pop	{r4, r5, r6, pc}
 801a84e:	6860      	ldr	r0, [r4, #4]
 801a850:	e7f3      	b.n	801a83a <rcutils_string_array_fini+0x36>
 801a852:	200b      	movs	r0, #11
 801a854:	4770      	bx	lr
 801a856:	bf00      	nop

0801a858 <on_status>:
 801a858:	b082      	sub	sp, #8
 801a85a:	b002      	add	sp, #8
 801a85c:	4770      	bx	lr
 801a85e:	bf00      	nop

0801a860 <on_topic>:
 801a860:	4a23      	ldr	r2, [pc, #140]	@ (801a8f0 <on_topic+0x90>)
 801a862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a866:	6812      	ldr	r2, [r2, #0]
 801a868:	b094      	sub	sp, #80	@ 0x50
 801a86a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801a86c:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 801a870:	9113      	str	r1, [sp, #76]	@ 0x4c
 801a872:	9312      	str	r3, [sp, #72]	@ 0x48
 801a874:	b3c2      	cbz	r2, 801a8e8 <on_topic+0x88>
 801a876:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801a87a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801a87e:	e001      	b.n	801a884 <on_topic+0x24>
 801a880:	6852      	ldr	r2, [r2, #4]
 801a882:	b38a      	cbz	r2, 801a8e8 <on_topic+0x88>
 801a884:	6894      	ldr	r4, [r2, #8]
 801a886:	8aa3      	ldrh	r3, [r4, #20]
 801a888:	428b      	cmp	r3, r1
 801a88a:	d1f9      	bne.n	801a880 <on_topic+0x20>
 801a88c:	7da3      	ldrb	r3, [r4, #22]
 801a88e:	4283      	cmp	r3, r0
 801a890:	d1f6      	bne.n	801a880 <on_topic+0x20>
 801a892:	2248      	movs	r2, #72	@ 0x48
 801a894:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801a898:	4668      	mov	r0, sp
 801a89a:	f000 ff66 	bl	801b76a <memcpy>
 801a89e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801a8a2:	4620      	mov	r0, r4
 801a8a4:	cb0c      	ldmia	r3, {r2, r3}
 801a8a6:	f7f5 fbdf 	bl	8010068 <rmw_uxrce_get_static_input_buffer_for_entity>
 801a8aa:	4607      	mov	r7, r0
 801a8ac:	b1e0      	cbz	r0, 801a8e8 <on_topic+0x88>
 801a8ae:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801a8b2:	462a      	mov	r2, r5
 801a8b4:	4630      	mov	r0, r6
 801a8b6:	f108 0110 	add.w	r1, r8, #16
 801a8ba:	f7f6 fb5b 	bl	8010f74 <ucdr_deserialize_array_uint8_t>
 801a8be:	b930      	cbnz	r0, 801a8ce <on_topic+0x6e>
 801a8c0:	4639      	mov	r1, r7
 801a8c2:	480c      	ldr	r0, [pc, #48]	@ (801a8f4 <on_topic+0x94>)
 801a8c4:	b014      	add	sp, #80	@ 0x50
 801a8c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a8ca:	f7fc ba93 	b.w	8016df4 <put_memory>
 801a8ce:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801a8d2:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 801a8d6:	f7f5 f9d7 	bl	800fc88 <rmw_uros_epoch_nanos>
 801a8da:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801a8de:	2305      	movs	r3, #5
 801a8e0:	e942 0102 	strd	r0, r1, [r2, #-8]
 801a8e4:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801a8e8:	b014      	add	sp, #80	@ 0x50
 801a8ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a8ee:	bf00      	nop
 801a8f0:	2000f12c 	.word	0x2000f12c
 801a8f4:	2000f11c 	.word	0x2000f11c

0801a8f8 <on_request>:
 801a8f8:	4824      	ldr	r0, [pc, #144]	@ (801a98c <on_request+0x94>)
 801a8fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a8fe:	6800      	ldr	r0, [r0, #0]
 801a900:	b094      	sub	sp, #80	@ 0x50
 801a902:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801a904:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 801a908:	9113      	str	r1, [sp, #76]	@ 0x4c
 801a90a:	2800      	cmp	r0, #0
 801a90c:	d03b      	beq.n	801a986 <on_request+0x8e>
 801a90e:	461d      	mov	r5, r3
 801a910:	e001      	b.n	801a916 <on_request+0x1e>
 801a912:	6840      	ldr	r0, [r0, #4]
 801a914:	b3b8      	cbz	r0, 801a986 <on_request+0x8e>
 801a916:	6884      	ldr	r4, [r0, #8]
 801a918:	8b21      	ldrh	r1, [r4, #24]
 801a91a:	4291      	cmp	r1, r2
 801a91c:	d1f9      	bne.n	801a912 <on_request+0x1a>
 801a91e:	2248      	movs	r2, #72	@ 0x48
 801a920:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801a924:	4668      	mov	r0, sp
 801a926:	f000 ff20 	bl	801b76a <memcpy>
 801a92a:	f104 0320 	add.w	r3, r4, #32
 801a92e:	4620      	mov	r0, r4
 801a930:	cb0c      	ldmia	r3, {r2, r3}
 801a932:	f7f5 fb99 	bl	8010068 <rmw_uxrce_get_static_input_buffer_for_entity>
 801a936:	4680      	mov	r8, r0
 801a938:	b328      	cbz	r0, 801a986 <on_request+0x8e>
 801a93a:	4630      	mov	r0, r6
 801a93c:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801a940:	463a      	mov	r2, r7
 801a942:	f106 0110 	add.w	r1, r6, #16
 801a946:	f7f6 fb15 	bl	8010f74 <ucdr_deserialize_array_uint8_t>
 801a94a:	b930      	cbnz	r0, 801a95a <on_request+0x62>
 801a94c:	4641      	mov	r1, r8
 801a94e:	4810      	ldr	r0, [pc, #64]	@ (801a990 <on_request+0x98>)
 801a950:	b014      	add	sp, #80	@ 0x50
 801a952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a956:	f7fc ba4d 	b.w	8016df4 <put_memory>
 801a95a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a95c:	f606 0c28 	addw	ip, r6, #2088	@ 0x828
 801a960:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 801a964:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 801a968:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a96c:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a970:	e88c 0003 	stmia.w	ip, {r0, r1}
 801a974:	f7f5 f988 	bl	800fc88 <rmw_uros_epoch_nanos>
 801a978:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 801a97c:	2303      	movs	r3, #3
 801a97e:	e942 0102 	strd	r0, r1, [r2, #-8]
 801a982:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 801a986:	b014      	add	sp, #80	@ 0x50
 801a988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a98c:	2000f0fc 	.word	0x2000f0fc
 801a990:	2000f11c 	.word	0x2000f11c

0801a994 <on_reply>:
 801a994:	4822      	ldr	r0, [pc, #136]	@ (801aa20 <on_reply+0x8c>)
 801a996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a99a:	6800      	ldr	r0, [r0, #0]
 801a99c:	b094      	sub	sp, #80	@ 0x50
 801a99e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801a9a0:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 801a9a4:	9113      	str	r1, [sp, #76]	@ 0x4c
 801a9a6:	b3b8      	cbz	r0, 801aa18 <on_reply+0x84>
 801a9a8:	461d      	mov	r5, r3
 801a9aa:	e001      	b.n	801a9b0 <on_reply+0x1c>
 801a9ac:	6840      	ldr	r0, [r0, #4]
 801a9ae:	b398      	cbz	r0, 801aa18 <on_reply+0x84>
 801a9b0:	6884      	ldr	r4, [r0, #8]
 801a9b2:	8b21      	ldrh	r1, [r4, #24]
 801a9b4:	4291      	cmp	r1, r2
 801a9b6:	d1f9      	bne.n	801a9ac <on_reply+0x18>
 801a9b8:	2248      	movs	r2, #72	@ 0x48
 801a9ba:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801a9be:	4668      	mov	r0, sp
 801a9c0:	f000 fed3 	bl	801b76a <memcpy>
 801a9c4:	f104 0320 	add.w	r3, r4, #32
 801a9c8:	4620      	mov	r0, r4
 801a9ca:	cb0c      	ldmia	r3, {r2, r3}
 801a9cc:	f7f5 fb4c 	bl	8010068 <rmw_uxrce_get_static_input_buffer_for_entity>
 801a9d0:	4680      	mov	r8, r0
 801a9d2:	b308      	cbz	r0, 801aa18 <on_reply+0x84>
 801a9d4:	4630      	mov	r0, r6
 801a9d6:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801a9da:	463a      	mov	r2, r7
 801a9dc:	f106 0110 	add.w	r1, r6, #16
 801a9e0:	f7f6 fac8 	bl	8010f74 <ucdr_deserialize_array_uint8_t>
 801a9e4:	b930      	cbnz	r0, 801a9f4 <on_reply+0x60>
 801a9e6:	4641      	mov	r1, r8
 801a9e8:	480e      	ldr	r0, [pc, #56]	@ (801aa24 <on_reply+0x90>)
 801a9ea:	b014      	add	sp, #80	@ 0x50
 801a9ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a9f0:	f7fc ba00 	b.w	8016df4 <put_memory>
 801a9f4:	2200      	movs	r2, #0
 801a9f6:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 801a9fa:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 801a9fe:	f8c6 282c 	str.w	r2, [r6, #2092]	@ 0x82c
 801aa02:	f8c6 5828 	str.w	r5, [r6, #2088]	@ 0x828
 801aa06:	f7f5 f93f 	bl	800fc88 <rmw_uros_epoch_nanos>
 801aa0a:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 801aa0e:	2304      	movs	r3, #4
 801aa10:	e942 0102 	strd	r0, r1, [r2, #-8]
 801aa14:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 801aa18:	b014      	add	sp, #80	@ 0x50
 801aa1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa1e:	bf00      	nop
 801aa20:	2000a810 	.word	0x2000a810
 801aa24:	2000f11c 	.word	0x2000f11c

0801aa28 <rmw_create_guard_condition>:
 801aa28:	b538      	push	{r3, r4, r5, lr}
 801aa2a:	4605      	mov	r5, r0
 801aa2c:	4808      	ldr	r0, [pc, #32]	@ (801aa50 <rmw_create_guard_condition+0x28>)
 801aa2e:	f7fc f9d1 	bl	8016dd4 <get_memory>
 801aa32:	4603      	mov	r3, r0
 801aa34:	b148      	cbz	r0, 801aa4a <rmw_create_guard_condition+0x22>
 801aa36:	6884      	ldr	r4, [r0, #8]
 801aa38:	2300      	movs	r3, #0
 801aa3a:	61e5      	str	r5, [r4, #28]
 801aa3c:	7423      	strb	r3, [r4, #16]
 801aa3e:	f7fc fa31 	bl	8016ea4 <rmw_get_implementation_identifier>
 801aa42:	f104 0314 	add.w	r3, r4, #20
 801aa46:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801aa4a:	4618      	mov	r0, r3
 801aa4c:	bd38      	pop	{r3, r4, r5, pc}
 801aa4e:	bf00      	nop
 801aa50:	2000f0bc 	.word	0x2000f0bc

0801aa54 <rmw_destroy_guard_condition>:
 801aa54:	b508      	push	{r3, lr}
 801aa56:	4b08      	ldr	r3, [pc, #32]	@ (801aa78 <rmw_destroy_guard_condition+0x24>)
 801aa58:	6819      	ldr	r1, [r3, #0]
 801aa5a:	b911      	cbnz	r1, 801aa62 <rmw_destroy_guard_condition+0xe>
 801aa5c:	e00a      	b.n	801aa74 <rmw_destroy_guard_condition+0x20>
 801aa5e:	6849      	ldr	r1, [r1, #4]
 801aa60:	b141      	cbz	r1, 801aa74 <rmw_destroy_guard_condition+0x20>
 801aa62:	688b      	ldr	r3, [r1, #8]
 801aa64:	3314      	adds	r3, #20
 801aa66:	4298      	cmp	r0, r3
 801aa68:	d1f9      	bne.n	801aa5e <rmw_destroy_guard_condition+0xa>
 801aa6a:	4803      	ldr	r0, [pc, #12]	@ (801aa78 <rmw_destroy_guard_condition+0x24>)
 801aa6c:	f7fc f9c2 	bl	8016df4 <put_memory>
 801aa70:	2000      	movs	r0, #0
 801aa72:	bd08      	pop	{r3, pc}
 801aa74:	2001      	movs	r0, #1
 801aa76:	bd08      	pop	{r3, pc}
 801aa78:	2000f0bc 	.word	0x2000f0bc

0801aa7c <create_topic>:
 801aa7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa80:	4605      	mov	r5, r0
 801aa82:	b084      	sub	sp, #16
 801aa84:	4822      	ldr	r0, [pc, #136]	@ (801ab10 <create_topic+0x94>)
 801aa86:	460f      	mov	r7, r1
 801aa88:	4616      	mov	r6, r2
 801aa8a:	f7fc f9a3 	bl	8016dd4 <get_memory>
 801aa8e:	4604      	mov	r4, r0
 801aa90:	2800      	cmp	r0, #0
 801aa92:	d039      	beq.n	801ab08 <create_topic+0x8c>
 801aa94:	692b      	ldr	r3, [r5, #16]
 801aa96:	2102      	movs	r1, #2
 801aa98:	6884      	ldr	r4, [r0, #8]
 801aa9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801aa9e:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 801ab18 <create_topic+0x9c>
 801aaa2:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801aaa6:	1c42      	adds	r2, r0, #1
 801aaa8:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801aaac:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801aab0:	f7fe fa28 	bl	8018f04 <uxr_object_id>
 801aab4:	223c      	movs	r2, #60	@ 0x3c
 801aab6:	6120      	str	r0, [r4, #16]
 801aab8:	4641      	mov	r1, r8
 801aaba:	4638      	mov	r0, r7
 801aabc:	f7fd fc32 	bl	8018324 <generate_topic_name>
 801aac0:	b1f0      	cbz	r0, 801ab00 <create_topic+0x84>
 801aac2:	4f14      	ldr	r7, [pc, #80]	@ (801ab14 <create_topic+0x98>)
 801aac4:	4630      	mov	r0, r6
 801aac6:	2264      	movs	r2, #100	@ 0x64
 801aac8:	4639      	mov	r1, r7
 801aaca:	f7fd fbfd 	bl	80182c8 <generate_type_name>
 801aace:	b1b8      	cbz	r0, 801ab00 <create_topic+0x84>
 801aad0:	6928      	ldr	r0, [r5, #16]
 801aad2:	2106      	movs	r1, #6
 801aad4:	696b      	ldr	r3, [r5, #20]
 801aad6:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801aada:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801aade:	f8cd 8000 	str.w	r8, [sp]
 801aae2:	e9cd 7101 	strd	r7, r1, [sp, #4]
 801aae6:	6811      	ldr	r1, [r2, #0]
 801aae8:	6922      	ldr	r2, [r4, #16]
 801aaea:	f7fd fdd5 	bl	8018698 <uxr_buffer_create_topic_bin>
 801aaee:	4602      	mov	r2, r0
 801aaf0:	6928      	ldr	r0, [r5, #16]
 801aaf2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801aaf6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801aafa:	f7fd fbb1 	bl	8018260 <run_xrce_session>
 801aafe:	b918      	cbnz	r0, 801ab08 <create_topic+0x8c>
 801ab00:	4620      	mov	r0, r4
 801ab02:	2400      	movs	r4, #0
 801ab04:	f7f5 faa4 	bl	8010050 <rmw_uxrce_fini_topic_memory>
 801ab08:	4620      	mov	r0, r4
 801ab0a:	b004      	add	sp, #16
 801ab0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ab10:	2000f13c 	.word	0x2000f13c
 801ab14:	2000f2ec 	.word	0x2000f2ec
 801ab18:	2000f2b0 	.word	0x2000f2b0

0801ab1c <destroy_topic>:
 801ab1c:	b538      	push	{r3, r4, r5, lr}
 801ab1e:	6985      	ldr	r5, [r0, #24]
 801ab20:	b1dd      	cbz	r5, 801ab5a <destroy_topic+0x3e>
 801ab22:	4604      	mov	r4, r0
 801ab24:	6928      	ldr	r0, [r5, #16]
 801ab26:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801ab2a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801ab2e:	6922      	ldr	r2, [r4, #16]
 801ab30:	6819      	ldr	r1, [r3, #0]
 801ab32:	f7fd fd33 	bl	801859c <uxr_buffer_delete_entity>
 801ab36:	4602      	mov	r2, r0
 801ab38:	6928      	ldr	r0, [r5, #16]
 801ab3a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801ab3e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801ab42:	f7fd fb8d 	bl	8018260 <run_xrce_session>
 801ab46:	4603      	mov	r3, r0
 801ab48:	4620      	mov	r0, r4
 801ab4a:	2b00      	cmp	r3, #0
 801ab4c:	bf14      	ite	ne
 801ab4e:	2400      	movne	r4, #0
 801ab50:	2402      	moveq	r4, #2
 801ab52:	f7f5 fa7d 	bl	8010050 <rmw_uxrce_fini_topic_memory>
 801ab56:	4620      	mov	r0, r4
 801ab58:	bd38      	pop	{r3, r4, r5, pc}
 801ab5a:	2401      	movs	r4, #1
 801ab5c:	4620      	mov	r0, r4
 801ab5e:	bd38      	pop	{r3, r4, r5, pc}

0801ab60 <rosidl_runtime_c__String__init>:
 801ab60:	b510      	push	{r4, lr}
 801ab62:	4604      	mov	r4, r0
 801ab64:	b086      	sub	sp, #24
 801ab66:	b170      	cbz	r0, 801ab86 <rosidl_runtime_c__String__init+0x26>
 801ab68:	a801      	add	r0, sp, #4
 801ab6a:	f7f4 ffcd 	bl	800fb08 <rcutils_get_default_allocator>
 801ab6e:	9b01      	ldr	r3, [sp, #4]
 801ab70:	9905      	ldr	r1, [sp, #20]
 801ab72:	2001      	movs	r0, #1
 801ab74:	4798      	blx	r3
 801ab76:	6020      	str	r0, [r4, #0]
 801ab78:	b128      	cbz	r0, 801ab86 <rosidl_runtime_c__String__init+0x26>
 801ab7a:	2100      	movs	r1, #0
 801ab7c:	2201      	movs	r2, #1
 801ab7e:	7001      	strb	r1, [r0, #0]
 801ab80:	4610      	mov	r0, r2
 801ab82:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801ab86:	b006      	add	sp, #24
 801ab88:	bd10      	pop	{r4, pc}
 801ab8a:	bf00      	nop

0801ab8c <rosidl_runtime_c__String__fini>:
 801ab8c:	b320      	cbz	r0, 801abd8 <rosidl_runtime_c__String__fini+0x4c>
 801ab8e:	6803      	ldr	r3, [r0, #0]
 801ab90:	b510      	push	{r4, lr}
 801ab92:	4604      	mov	r4, r0
 801ab94:	b086      	sub	sp, #24
 801ab96:	b173      	cbz	r3, 801abb6 <rosidl_runtime_c__String__fini+0x2a>
 801ab98:	6883      	ldr	r3, [r0, #8]
 801ab9a:	b1f3      	cbz	r3, 801abda <rosidl_runtime_c__String__fini+0x4e>
 801ab9c:	a801      	add	r0, sp, #4
 801ab9e:	f7f4 ffb3 	bl	800fb08 <rcutils_get_default_allocator>
 801aba2:	9b02      	ldr	r3, [sp, #8]
 801aba4:	9905      	ldr	r1, [sp, #20]
 801aba6:	6820      	ldr	r0, [r4, #0]
 801aba8:	4798      	blx	r3
 801abaa:	2300      	movs	r3, #0
 801abac:	e9c4 3300 	strd	r3, r3, [r4]
 801abb0:	60a3      	str	r3, [r4, #8]
 801abb2:	b006      	add	sp, #24
 801abb4:	bd10      	pop	{r4, pc}
 801abb6:	6843      	ldr	r3, [r0, #4]
 801abb8:	b9db      	cbnz	r3, 801abf2 <rosidl_runtime_c__String__fini+0x66>
 801abba:	6883      	ldr	r3, [r0, #8]
 801abbc:	2b00      	cmp	r3, #0
 801abbe:	d0f8      	beq.n	801abb2 <rosidl_runtime_c__String__fini+0x26>
 801abc0:	4b12      	ldr	r3, [pc, #72]	@ (801ac0c <rosidl_runtime_c__String__fini+0x80>)
 801abc2:	2251      	movs	r2, #81	@ 0x51
 801abc4:	2101      	movs	r1, #1
 801abc6:	4812      	ldr	r0, [pc, #72]	@ (801ac10 <rosidl_runtime_c__String__fini+0x84>)
 801abc8:	681b      	ldr	r3, [r3, #0]
 801abca:	68db      	ldr	r3, [r3, #12]
 801abcc:	f000 fb82 	bl	801b2d4 <fwrite>
 801abd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801abd4:	f000 f83e 	bl	801ac54 <exit>
 801abd8:	4770      	bx	lr
 801abda:	4b0c      	ldr	r3, [pc, #48]	@ (801ac0c <rosidl_runtime_c__String__fini+0x80>)
 801abdc:	224c      	movs	r2, #76	@ 0x4c
 801abde:	2101      	movs	r1, #1
 801abe0:	480c      	ldr	r0, [pc, #48]	@ (801ac14 <rosidl_runtime_c__String__fini+0x88>)
 801abe2:	681b      	ldr	r3, [r3, #0]
 801abe4:	68db      	ldr	r3, [r3, #12]
 801abe6:	f000 fb75 	bl	801b2d4 <fwrite>
 801abea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801abee:	f000 f831 	bl	801ac54 <exit>
 801abf2:	4b06      	ldr	r3, [pc, #24]	@ (801ac0c <rosidl_runtime_c__String__fini+0x80>)
 801abf4:	224e      	movs	r2, #78	@ 0x4e
 801abf6:	2101      	movs	r1, #1
 801abf8:	4807      	ldr	r0, [pc, #28]	@ (801ac18 <rosidl_runtime_c__String__fini+0x8c>)
 801abfa:	681b      	ldr	r3, [r3, #0]
 801abfc:	68db      	ldr	r3, [r3, #12]
 801abfe:	f000 fb69 	bl	801b2d4 <fwrite>
 801ac02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ac06:	f000 f825 	bl	801ac54 <exit>
 801ac0a:	bf00      	nop
 801ac0c:	200008f4 	.word	0x200008f4
 801ac10:	0801d05c 	.word	0x0801d05c
 801ac14:	0801cfbc 	.word	0x0801cfbc
 801ac18:	0801d00c 	.word	0x0801d00c

0801ac1c <calloc>:
 801ac1c:	4b02      	ldr	r3, [pc, #8]	@ (801ac28 <calloc+0xc>)
 801ac1e:	460a      	mov	r2, r1
 801ac20:	4601      	mov	r1, r0
 801ac22:	6818      	ldr	r0, [r3, #0]
 801ac24:	f000 b802 	b.w	801ac2c <_calloc_r>
 801ac28:	200008f4 	.word	0x200008f4

0801ac2c <_calloc_r>:
 801ac2c:	b570      	push	{r4, r5, r6, lr}
 801ac2e:	fba1 5402 	umull	r5, r4, r1, r2
 801ac32:	b934      	cbnz	r4, 801ac42 <_calloc_r+0x16>
 801ac34:	4629      	mov	r1, r5
 801ac36:	f000 f899 	bl	801ad6c <_malloc_r>
 801ac3a:	4606      	mov	r6, r0
 801ac3c:	b928      	cbnz	r0, 801ac4a <_calloc_r+0x1e>
 801ac3e:	4630      	mov	r0, r6
 801ac40:	bd70      	pop	{r4, r5, r6, pc}
 801ac42:	220c      	movs	r2, #12
 801ac44:	6002      	str	r2, [r0, #0]
 801ac46:	2600      	movs	r6, #0
 801ac48:	e7f9      	b.n	801ac3e <_calloc_r+0x12>
 801ac4a:	462a      	mov	r2, r5
 801ac4c:	4621      	mov	r1, r4
 801ac4e:	f000 fcc3 	bl	801b5d8 <memset>
 801ac52:	e7f4      	b.n	801ac3e <_calloc_r+0x12>

0801ac54 <exit>:
 801ac54:	b508      	push	{r3, lr}
 801ac56:	4b06      	ldr	r3, [pc, #24]	@ (801ac70 <exit+0x1c>)
 801ac58:	4604      	mov	r4, r0
 801ac5a:	b113      	cbz	r3, 801ac62 <exit+0xe>
 801ac5c:	2100      	movs	r1, #0
 801ac5e:	f3af 8000 	nop.w
 801ac62:	4b04      	ldr	r3, [pc, #16]	@ (801ac74 <exit+0x20>)
 801ac64:	681b      	ldr	r3, [r3, #0]
 801ac66:	b103      	cbz	r3, 801ac6a <exit+0x16>
 801ac68:	4798      	blx	r3
 801ac6a:	4620      	mov	r0, r4
 801ac6c:	f7e9 f80c 	bl	8003c88 <_exit>
 801ac70:	00000000 	.word	0x00000000
 801ac74:	2000f490 	.word	0x2000f490

0801ac78 <getenv>:
 801ac78:	b507      	push	{r0, r1, r2, lr}
 801ac7a:	4b04      	ldr	r3, [pc, #16]	@ (801ac8c <getenv+0x14>)
 801ac7c:	4601      	mov	r1, r0
 801ac7e:	aa01      	add	r2, sp, #4
 801ac80:	6818      	ldr	r0, [r3, #0]
 801ac82:	f000 f805 	bl	801ac90 <_findenv_r>
 801ac86:	b003      	add	sp, #12
 801ac88:	f85d fb04 	ldr.w	pc, [sp], #4
 801ac8c:	200008f4 	.word	0x200008f4

0801ac90 <_findenv_r>:
 801ac90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac94:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801ad04 <_findenv_r+0x74>
 801ac98:	4606      	mov	r6, r0
 801ac9a:	4689      	mov	r9, r1
 801ac9c:	4617      	mov	r7, r2
 801ac9e:	f000 fd91 	bl	801b7c4 <__env_lock>
 801aca2:	f8da 4000 	ldr.w	r4, [sl]
 801aca6:	b134      	cbz	r4, 801acb6 <_findenv_r+0x26>
 801aca8:	464b      	mov	r3, r9
 801acaa:	4698      	mov	r8, r3
 801acac:	f813 2b01 	ldrb.w	r2, [r3], #1
 801acb0:	b13a      	cbz	r2, 801acc2 <_findenv_r+0x32>
 801acb2:	2a3d      	cmp	r2, #61	@ 0x3d
 801acb4:	d1f9      	bne.n	801acaa <_findenv_r+0x1a>
 801acb6:	4630      	mov	r0, r6
 801acb8:	f000 fd8a 	bl	801b7d0 <__env_unlock>
 801acbc:	2000      	movs	r0, #0
 801acbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acc2:	eba8 0809 	sub.w	r8, r8, r9
 801acc6:	46a3      	mov	fp, r4
 801acc8:	f854 0b04 	ldr.w	r0, [r4], #4
 801accc:	2800      	cmp	r0, #0
 801acce:	d0f2      	beq.n	801acb6 <_findenv_r+0x26>
 801acd0:	4642      	mov	r2, r8
 801acd2:	4649      	mov	r1, r9
 801acd4:	f000 fc95 	bl	801b602 <strncmp>
 801acd8:	2800      	cmp	r0, #0
 801acda:	d1f4      	bne.n	801acc6 <_findenv_r+0x36>
 801acdc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801ace0:	eb03 0508 	add.w	r5, r3, r8
 801ace4:	f813 3008 	ldrb.w	r3, [r3, r8]
 801ace8:	2b3d      	cmp	r3, #61	@ 0x3d
 801acea:	d1ec      	bne.n	801acc6 <_findenv_r+0x36>
 801acec:	f8da 3000 	ldr.w	r3, [sl]
 801acf0:	ebab 0303 	sub.w	r3, fp, r3
 801acf4:	109b      	asrs	r3, r3, #2
 801acf6:	4630      	mov	r0, r6
 801acf8:	603b      	str	r3, [r7, #0]
 801acfa:	f000 fd69 	bl	801b7d0 <__env_unlock>
 801acfe:	1c68      	adds	r0, r5, #1
 801ad00:	e7dd      	b.n	801acbe <_findenv_r+0x2e>
 801ad02:	bf00      	nop
 801ad04:	2000002c 	.word	0x2000002c

0801ad08 <malloc>:
 801ad08:	4b02      	ldr	r3, [pc, #8]	@ (801ad14 <malloc+0xc>)
 801ad0a:	4601      	mov	r1, r0
 801ad0c:	6818      	ldr	r0, [r3, #0]
 801ad0e:	f000 b82d 	b.w	801ad6c <_malloc_r>
 801ad12:	bf00      	nop
 801ad14:	200008f4 	.word	0x200008f4

0801ad18 <free>:
 801ad18:	4b02      	ldr	r3, [pc, #8]	@ (801ad24 <free+0xc>)
 801ad1a:	4601      	mov	r1, r0
 801ad1c:	6818      	ldr	r0, [r3, #0]
 801ad1e:	f000 bd5d 	b.w	801b7dc <_free_r>
 801ad22:	bf00      	nop
 801ad24:	200008f4 	.word	0x200008f4

0801ad28 <sbrk_aligned>:
 801ad28:	b570      	push	{r4, r5, r6, lr}
 801ad2a:	4e0f      	ldr	r6, [pc, #60]	@ (801ad68 <sbrk_aligned+0x40>)
 801ad2c:	460c      	mov	r4, r1
 801ad2e:	6831      	ldr	r1, [r6, #0]
 801ad30:	4605      	mov	r5, r0
 801ad32:	b911      	cbnz	r1, 801ad3a <sbrk_aligned+0x12>
 801ad34:	f000 fcc2 	bl	801b6bc <_sbrk_r>
 801ad38:	6030      	str	r0, [r6, #0]
 801ad3a:	4621      	mov	r1, r4
 801ad3c:	4628      	mov	r0, r5
 801ad3e:	f000 fcbd 	bl	801b6bc <_sbrk_r>
 801ad42:	1c43      	adds	r3, r0, #1
 801ad44:	d103      	bne.n	801ad4e <sbrk_aligned+0x26>
 801ad46:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801ad4a:	4620      	mov	r0, r4
 801ad4c:	bd70      	pop	{r4, r5, r6, pc}
 801ad4e:	1cc4      	adds	r4, r0, #3
 801ad50:	f024 0403 	bic.w	r4, r4, #3
 801ad54:	42a0      	cmp	r0, r4
 801ad56:	d0f8      	beq.n	801ad4a <sbrk_aligned+0x22>
 801ad58:	1a21      	subs	r1, r4, r0
 801ad5a:	4628      	mov	r0, r5
 801ad5c:	f000 fcae 	bl	801b6bc <_sbrk_r>
 801ad60:	3001      	adds	r0, #1
 801ad62:	d1f2      	bne.n	801ad4a <sbrk_aligned+0x22>
 801ad64:	e7ef      	b.n	801ad46 <sbrk_aligned+0x1e>
 801ad66:	bf00      	nop
 801ad68:	2000f350 	.word	0x2000f350

0801ad6c <_malloc_r>:
 801ad6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ad70:	1ccd      	adds	r5, r1, #3
 801ad72:	f025 0503 	bic.w	r5, r5, #3
 801ad76:	3508      	adds	r5, #8
 801ad78:	2d0c      	cmp	r5, #12
 801ad7a:	bf38      	it	cc
 801ad7c:	250c      	movcc	r5, #12
 801ad7e:	2d00      	cmp	r5, #0
 801ad80:	4606      	mov	r6, r0
 801ad82:	db01      	blt.n	801ad88 <_malloc_r+0x1c>
 801ad84:	42a9      	cmp	r1, r5
 801ad86:	d904      	bls.n	801ad92 <_malloc_r+0x26>
 801ad88:	230c      	movs	r3, #12
 801ad8a:	6033      	str	r3, [r6, #0]
 801ad8c:	2000      	movs	r0, #0
 801ad8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ad92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801ae68 <_malloc_r+0xfc>
 801ad96:	f000 f869 	bl	801ae6c <__malloc_lock>
 801ad9a:	f8d8 3000 	ldr.w	r3, [r8]
 801ad9e:	461c      	mov	r4, r3
 801ada0:	bb44      	cbnz	r4, 801adf4 <_malloc_r+0x88>
 801ada2:	4629      	mov	r1, r5
 801ada4:	4630      	mov	r0, r6
 801ada6:	f7ff ffbf 	bl	801ad28 <sbrk_aligned>
 801adaa:	1c43      	adds	r3, r0, #1
 801adac:	4604      	mov	r4, r0
 801adae:	d158      	bne.n	801ae62 <_malloc_r+0xf6>
 801adb0:	f8d8 4000 	ldr.w	r4, [r8]
 801adb4:	4627      	mov	r7, r4
 801adb6:	2f00      	cmp	r7, #0
 801adb8:	d143      	bne.n	801ae42 <_malloc_r+0xd6>
 801adba:	2c00      	cmp	r4, #0
 801adbc:	d04b      	beq.n	801ae56 <_malloc_r+0xea>
 801adbe:	6823      	ldr	r3, [r4, #0]
 801adc0:	4639      	mov	r1, r7
 801adc2:	4630      	mov	r0, r6
 801adc4:	eb04 0903 	add.w	r9, r4, r3
 801adc8:	f000 fc78 	bl	801b6bc <_sbrk_r>
 801adcc:	4581      	cmp	r9, r0
 801adce:	d142      	bne.n	801ae56 <_malloc_r+0xea>
 801add0:	6821      	ldr	r1, [r4, #0]
 801add2:	1a6d      	subs	r5, r5, r1
 801add4:	4629      	mov	r1, r5
 801add6:	4630      	mov	r0, r6
 801add8:	f7ff ffa6 	bl	801ad28 <sbrk_aligned>
 801addc:	3001      	adds	r0, #1
 801adde:	d03a      	beq.n	801ae56 <_malloc_r+0xea>
 801ade0:	6823      	ldr	r3, [r4, #0]
 801ade2:	442b      	add	r3, r5
 801ade4:	6023      	str	r3, [r4, #0]
 801ade6:	f8d8 3000 	ldr.w	r3, [r8]
 801adea:	685a      	ldr	r2, [r3, #4]
 801adec:	bb62      	cbnz	r2, 801ae48 <_malloc_r+0xdc>
 801adee:	f8c8 7000 	str.w	r7, [r8]
 801adf2:	e00f      	b.n	801ae14 <_malloc_r+0xa8>
 801adf4:	6822      	ldr	r2, [r4, #0]
 801adf6:	1b52      	subs	r2, r2, r5
 801adf8:	d420      	bmi.n	801ae3c <_malloc_r+0xd0>
 801adfa:	2a0b      	cmp	r2, #11
 801adfc:	d917      	bls.n	801ae2e <_malloc_r+0xc2>
 801adfe:	1961      	adds	r1, r4, r5
 801ae00:	42a3      	cmp	r3, r4
 801ae02:	6025      	str	r5, [r4, #0]
 801ae04:	bf18      	it	ne
 801ae06:	6059      	strne	r1, [r3, #4]
 801ae08:	6863      	ldr	r3, [r4, #4]
 801ae0a:	bf08      	it	eq
 801ae0c:	f8c8 1000 	streq.w	r1, [r8]
 801ae10:	5162      	str	r2, [r4, r5]
 801ae12:	604b      	str	r3, [r1, #4]
 801ae14:	4630      	mov	r0, r6
 801ae16:	f000 f82f 	bl	801ae78 <__malloc_unlock>
 801ae1a:	f104 000b 	add.w	r0, r4, #11
 801ae1e:	1d23      	adds	r3, r4, #4
 801ae20:	f020 0007 	bic.w	r0, r0, #7
 801ae24:	1ac2      	subs	r2, r0, r3
 801ae26:	bf1c      	itt	ne
 801ae28:	1a1b      	subne	r3, r3, r0
 801ae2a:	50a3      	strne	r3, [r4, r2]
 801ae2c:	e7af      	b.n	801ad8e <_malloc_r+0x22>
 801ae2e:	6862      	ldr	r2, [r4, #4]
 801ae30:	42a3      	cmp	r3, r4
 801ae32:	bf0c      	ite	eq
 801ae34:	f8c8 2000 	streq.w	r2, [r8]
 801ae38:	605a      	strne	r2, [r3, #4]
 801ae3a:	e7eb      	b.n	801ae14 <_malloc_r+0xa8>
 801ae3c:	4623      	mov	r3, r4
 801ae3e:	6864      	ldr	r4, [r4, #4]
 801ae40:	e7ae      	b.n	801ada0 <_malloc_r+0x34>
 801ae42:	463c      	mov	r4, r7
 801ae44:	687f      	ldr	r7, [r7, #4]
 801ae46:	e7b6      	b.n	801adb6 <_malloc_r+0x4a>
 801ae48:	461a      	mov	r2, r3
 801ae4a:	685b      	ldr	r3, [r3, #4]
 801ae4c:	42a3      	cmp	r3, r4
 801ae4e:	d1fb      	bne.n	801ae48 <_malloc_r+0xdc>
 801ae50:	2300      	movs	r3, #0
 801ae52:	6053      	str	r3, [r2, #4]
 801ae54:	e7de      	b.n	801ae14 <_malloc_r+0xa8>
 801ae56:	230c      	movs	r3, #12
 801ae58:	6033      	str	r3, [r6, #0]
 801ae5a:	4630      	mov	r0, r6
 801ae5c:	f000 f80c 	bl	801ae78 <__malloc_unlock>
 801ae60:	e794      	b.n	801ad8c <_malloc_r+0x20>
 801ae62:	6005      	str	r5, [r0, #0]
 801ae64:	e7d6      	b.n	801ae14 <_malloc_r+0xa8>
 801ae66:	bf00      	nop
 801ae68:	2000f354 	.word	0x2000f354

0801ae6c <__malloc_lock>:
 801ae6c:	4801      	ldr	r0, [pc, #4]	@ (801ae74 <__malloc_lock+0x8>)
 801ae6e:	f000 bc72 	b.w	801b756 <__retarget_lock_acquire_recursive>
 801ae72:	bf00      	nop
 801ae74:	2000f499 	.word	0x2000f499

0801ae78 <__malloc_unlock>:
 801ae78:	4801      	ldr	r0, [pc, #4]	@ (801ae80 <__malloc_unlock+0x8>)
 801ae7a:	f000 bc6d 	b.w	801b758 <__retarget_lock_release_recursive>
 801ae7e:	bf00      	nop
 801ae80:	2000f499 	.word	0x2000f499

0801ae84 <srand>:
 801ae84:	b538      	push	{r3, r4, r5, lr}
 801ae86:	4b10      	ldr	r3, [pc, #64]	@ (801aec8 <srand+0x44>)
 801ae88:	681d      	ldr	r5, [r3, #0]
 801ae8a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801ae8c:	4604      	mov	r4, r0
 801ae8e:	b9b3      	cbnz	r3, 801aebe <srand+0x3a>
 801ae90:	2018      	movs	r0, #24
 801ae92:	f7ff ff39 	bl	801ad08 <malloc>
 801ae96:	4602      	mov	r2, r0
 801ae98:	6328      	str	r0, [r5, #48]	@ 0x30
 801ae9a:	b920      	cbnz	r0, 801aea6 <srand+0x22>
 801ae9c:	4b0b      	ldr	r3, [pc, #44]	@ (801aecc <srand+0x48>)
 801ae9e:	480c      	ldr	r0, [pc, #48]	@ (801aed0 <srand+0x4c>)
 801aea0:	2146      	movs	r1, #70	@ 0x46
 801aea2:	f000 fc71 	bl	801b788 <__assert_func>
 801aea6:	490b      	ldr	r1, [pc, #44]	@ (801aed4 <srand+0x50>)
 801aea8:	4b0b      	ldr	r3, [pc, #44]	@ (801aed8 <srand+0x54>)
 801aeaa:	e9c0 1300 	strd	r1, r3, [r0]
 801aeae:	4b0b      	ldr	r3, [pc, #44]	@ (801aedc <srand+0x58>)
 801aeb0:	6083      	str	r3, [r0, #8]
 801aeb2:	230b      	movs	r3, #11
 801aeb4:	8183      	strh	r3, [r0, #12]
 801aeb6:	2100      	movs	r1, #0
 801aeb8:	2001      	movs	r0, #1
 801aeba:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801aebe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801aec0:	2200      	movs	r2, #0
 801aec2:	611c      	str	r4, [r3, #16]
 801aec4:	615a      	str	r2, [r3, #20]
 801aec6:	bd38      	pop	{r3, r4, r5, pc}
 801aec8:	200008f4 	.word	0x200008f4
 801aecc:	0801d788 	.word	0x0801d788
 801aed0:	0801d79f 	.word	0x0801d79f
 801aed4:	abcd330e 	.word	0xabcd330e
 801aed8:	e66d1234 	.word	0xe66d1234
 801aedc:	0005deec 	.word	0x0005deec

0801aee0 <rand>:
 801aee0:	4b16      	ldr	r3, [pc, #88]	@ (801af3c <rand+0x5c>)
 801aee2:	b510      	push	{r4, lr}
 801aee4:	681c      	ldr	r4, [r3, #0]
 801aee6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801aee8:	b9b3      	cbnz	r3, 801af18 <rand+0x38>
 801aeea:	2018      	movs	r0, #24
 801aeec:	f7ff ff0c 	bl	801ad08 <malloc>
 801aef0:	4602      	mov	r2, r0
 801aef2:	6320      	str	r0, [r4, #48]	@ 0x30
 801aef4:	b920      	cbnz	r0, 801af00 <rand+0x20>
 801aef6:	4b12      	ldr	r3, [pc, #72]	@ (801af40 <rand+0x60>)
 801aef8:	4812      	ldr	r0, [pc, #72]	@ (801af44 <rand+0x64>)
 801aefa:	2152      	movs	r1, #82	@ 0x52
 801aefc:	f000 fc44 	bl	801b788 <__assert_func>
 801af00:	4911      	ldr	r1, [pc, #68]	@ (801af48 <rand+0x68>)
 801af02:	4b12      	ldr	r3, [pc, #72]	@ (801af4c <rand+0x6c>)
 801af04:	e9c0 1300 	strd	r1, r3, [r0]
 801af08:	4b11      	ldr	r3, [pc, #68]	@ (801af50 <rand+0x70>)
 801af0a:	6083      	str	r3, [r0, #8]
 801af0c:	230b      	movs	r3, #11
 801af0e:	8183      	strh	r3, [r0, #12]
 801af10:	2100      	movs	r1, #0
 801af12:	2001      	movs	r0, #1
 801af14:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801af18:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801af1a:	480e      	ldr	r0, [pc, #56]	@ (801af54 <rand+0x74>)
 801af1c:	690b      	ldr	r3, [r1, #16]
 801af1e:	694c      	ldr	r4, [r1, #20]
 801af20:	4a0d      	ldr	r2, [pc, #52]	@ (801af58 <rand+0x78>)
 801af22:	4358      	muls	r0, r3
 801af24:	fb02 0004 	mla	r0, r2, r4, r0
 801af28:	fba3 3202 	umull	r3, r2, r3, r2
 801af2c:	3301      	adds	r3, #1
 801af2e:	eb40 0002 	adc.w	r0, r0, r2
 801af32:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801af36:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801af3a:	bd10      	pop	{r4, pc}
 801af3c:	200008f4 	.word	0x200008f4
 801af40:	0801d788 	.word	0x0801d788
 801af44:	0801d79f 	.word	0x0801d79f
 801af48:	abcd330e 	.word	0xabcd330e
 801af4c:	e66d1234 	.word	0xe66d1234
 801af50:	0005deec 	.word	0x0005deec
 801af54:	5851f42d 	.word	0x5851f42d
 801af58:	4c957f2d 	.word	0x4c957f2d

0801af5c <realloc>:
 801af5c:	4b02      	ldr	r3, [pc, #8]	@ (801af68 <realloc+0xc>)
 801af5e:	460a      	mov	r2, r1
 801af60:	4601      	mov	r1, r0
 801af62:	6818      	ldr	r0, [r3, #0]
 801af64:	f000 b802 	b.w	801af6c <_realloc_r>
 801af68:	200008f4 	.word	0x200008f4

0801af6c <_realloc_r>:
 801af6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af70:	4607      	mov	r7, r0
 801af72:	4614      	mov	r4, r2
 801af74:	460d      	mov	r5, r1
 801af76:	b921      	cbnz	r1, 801af82 <_realloc_r+0x16>
 801af78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801af7c:	4611      	mov	r1, r2
 801af7e:	f7ff bef5 	b.w	801ad6c <_malloc_r>
 801af82:	b92a      	cbnz	r2, 801af90 <_realloc_r+0x24>
 801af84:	f000 fc2a 	bl	801b7dc <_free_r>
 801af88:	4625      	mov	r5, r4
 801af8a:	4628      	mov	r0, r5
 801af8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af90:	f000 fc6e 	bl	801b870 <_malloc_usable_size_r>
 801af94:	4284      	cmp	r4, r0
 801af96:	4606      	mov	r6, r0
 801af98:	d802      	bhi.n	801afa0 <_realloc_r+0x34>
 801af9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801af9e:	d8f4      	bhi.n	801af8a <_realloc_r+0x1e>
 801afa0:	4621      	mov	r1, r4
 801afa2:	4638      	mov	r0, r7
 801afa4:	f7ff fee2 	bl	801ad6c <_malloc_r>
 801afa8:	4680      	mov	r8, r0
 801afaa:	b908      	cbnz	r0, 801afb0 <_realloc_r+0x44>
 801afac:	4645      	mov	r5, r8
 801afae:	e7ec      	b.n	801af8a <_realloc_r+0x1e>
 801afb0:	42b4      	cmp	r4, r6
 801afb2:	4622      	mov	r2, r4
 801afb4:	4629      	mov	r1, r5
 801afb6:	bf28      	it	cs
 801afb8:	4632      	movcs	r2, r6
 801afba:	f000 fbd6 	bl	801b76a <memcpy>
 801afbe:	4629      	mov	r1, r5
 801afc0:	4638      	mov	r0, r7
 801afc2:	f000 fc0b 	bl	801b7dc <_free_r>
 801afc6:	e7f1      	b.n	801afac <_realloc_r+0x40>

0801afc8 <_strtoul_l.isra.0>:
 801afc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801afcc:	4e34      	ldr	r6, [pc, #208]	@ (801b0a0 <_strtoul_l.isra.0+0xd8>)
 801afce:	4686      	mov	lr, r0
 801afd0:	460d      	mov	r5, r1
 801afd2:	4628      	mov	r0, r5
 801afd4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801afd8:	5d37      	ldrb	r7, [r6, r4]
 801afda:	f017 0708 	ands.w	r7, r7, #8
 801afde:	d1f8      	bne.n	801afd2 <_strtoul_l.isra.0+0xa>
 801afe0:	2c2d      	cmp	r4, #45	@ 0x2d
 801afe2:	d110      	bne.n	801b006 <_strtoul_l.isra.0+0x3e>
 801afe4:	782c      	ldrb	r4, [r5, #0]
 801afe6:	2701      	movs	r7, #1
 801afe8:	1c85      	adds	r5, r0, #2
 801afea:	f033 0010 	bics.w	r0, r3, #16
 801afee:	d115      	bne.n	801b01c <_strtoul_l.isra.0+0x54>
 801aff0:	2c30      	cmp	r4, #48	@ 0x30
 801aff2:	d10d      	bne.n	801b010 <_strtoul_l.isra.0+0x48>
 801aff4:	7828      	ldrb	r0, [r5, #0]
 801aff6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801affa:	2858      	cmp	r0, #88	@ 0x58
 801affc:	d108      	bne.n	801b010 <_strtoul_l.isra.0+0x48>
 801affe:	786c      	ldrb	r4, [r5, #1]
 801b000:	3502      	adds	r5, #2
 801b002:	2310      	movs	r3, #16
 801b004:	e00a      	b.n	801b01c <_strtoul_l.isra.0+0x54>
 801b006:	2c2b      	cmp	r4, #43	@ 0x2b
 801b008:	bf04      	itt	eq
 801b00a:	782c      	ldrbeq	r4, [r5, #0]
 801b00c:	1c85      	addeq	r5, r0, #2
 801b00e:	e7ec      	b.n	801afea <_strtoul_l.isra.0+0x22>
 801b010:	2b00      	cmp	r3, #0
 801b012:	d1f6      	bne.n	801b002 <_strtoul_l.isra.0+0x3a>
 801b014:	2c30      	cmp	r4, #48	@ 0x30
 801b016:	bf14      	ite	ne
 801b018:	230a      	movne	r3, #10
 801b01a:	2308      	moveq	r3, #8
 801b01c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801b020:	2600      	movs	r6, #0
 801b022:	fbb8 f8f3 	udiv	r8, r8, r3
 801b026:	fb03 f908 	mul.w	r9, r3, r8
 801b02a:	ea6f 0909 	mvn.w	r9, r9
 801b02e:	4630      	mov	r0, r6
 801b030:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801b034:	f1bc 0f09 	cmp.w	ip, #9
 801b038:	d810      	bhi.n	801b05c <_strtoul_l.isra.0+0x94>
 801b03a:	4664      	mov	r4, ip
 801b03c:	42a3      	cmp	r3, r4
 801b03e:	dd1e      	ble.n	801b07e <_strtoul_l.isra.0+0xb6>
 801b040:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801b044:	d007      	beq.n	801b056 <_strtoul_l.isra.0+0x8e>
 801b046:	4580      	cmp	r8, r0
 801b048:	d316      	bcc.n	801b078 <_strtoul_l.isra.0+0xb0>
 801b04a:	d101      	bne.n	801b050 <_strtoul_l.isra.0+0x88>
 801b04c:	45a1      	cmp	r9, r4
 801b04e:	db13      	blt.n	801b078 <_strtoul_l.isra.0+0xb0>
 801b050:	fb00 4003 	mla	r0, r0, r3, r4
 801b054:	2601      	movs	r6, #1
 801b056:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b05a:	e7e9      	b.n	801b030 <_strtoul_l.isra.0+0x68>
 801b05c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801b060:	f1bc 0f19 	cmp.w	ip, #25
 801b064:	d801      	bhi.n	801b06a <_strtoul_l.isra.0+0xa2>
 801b066:	3c37      	subs	r4, #55	@ 0x37
 801b068:	e7e8      	b.n	801b03c <_strtoul_l.isra.0+0x74>
 801b06a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801b06e:	f1bc 0f19 	cmp.w	ip, #25
 801b072:	d804      	bhi.n	801b07e <_strtoul_l.isra.0+0xb6>
 801b074:	3c57      	subs	r4, #87	@ 0x57
 801b076:	e7e1      	b.n	801b03c <_strtoul_l.isra.0+0x74>
 801b078:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801b07c:	e7eb      	b.n	801b056 <_strtoul_l.isra.0+0x8e>
 801b07e:	1c73      	adds	r3, r6, #1
 801b080:	d106      	bne.n	801b090 <_strtoul_l.isra.0+0xc8>
 801b082:	2322      	movs	r3, #34	@ 0x22
 801b084:	f8ce 3000 	str.w	r3, [lr]
 801b088:	4630      	mov	r0, r6
 801b08a:	b932      	cbnz	r2, 801b09a <_strtoul_l.isra.0+0xd2>
 801b08c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b090:	b107      	cbz	r7, 801b094 <_strtoul_l.isra.0+0xcc>
 801b092:	4240      	negs	r0, r0
 801b094:	2a00      	cmp	r2, #0
 801b096:	d0f9      	beq.n	801b08c <_strtoul_l.isra.0+0xc4>
 801b098:	b106      	cbz	r6, 801b09c <_strtoul_l.isra.0+0xd4>
 801b09a:	1e69      	subs	r1, r5, #1
 801b09c:	6011      	str	r1, [r2, #0]
 801b09e:	e7f5      	b.n	801b08c <_strtoul_l.isra.0+0xc4>
 801b0a0:	0801d867 	.word	0x0801d867

0801b0a4 <strtoul>:
 801b0a4:	4613      	mov	r3, r2
 801b0a6:	460a      	mov	r2, r1
 801b0a8:	4601      	mov	r1, r0
 801b0aa:	4802      	ldr	r0, [pc, #8]	@ (801b0b4 <strtoul+0x10>)
 801b0ac:	6800      	ldr	r0, [r0, #0]
 801b0ae:	f7ff bf8b 	b.w	801afc8 <_strtoul_l.isra.0>
 801b0b2:	bf00      	nop
 801b0b4:	200008f4 	.word	0x200008f4

0801b0b8 <std>:
 801b0b8:	2300      	movs	r3, #0
 801b0ba:	b510      	push	{r4, lr}
 801b0bc:	4604      	mov	r4, r0
 801b0be:	e9c0 3300 	strd	r3, r3, [r0]
 801b0c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b0c6:	6083      	str	r3, [r0, #8]
 801b0c8:	8181      	strh	r1, [r0, #12]
 801b0ca:	6643      	str	r3, [r0, #100]	@ 0x64
 801b0cc:	81c2      	strh	r2, [r0, #14]
 801b0ce:	6183      	str	r3, [r0, #24]
 801b0d0:	4619      	mov	r1, r3
 801b0d2:	2208      	movs	r2, #8
 801b0d4:	305c      	adds	r0, #92	@ 0x5c
 801b0d6:	f000 fa7f 	bl	801b5d8 <memset>
 801b0da:	4b0d      	ldr	r3, [pc, #52]	@ (801b110 <std+0x58>)
 801b0dc:	6263      	str	r3, [r4, #36]	@ 0x24
 801b0de:	4b0d      	ldr	r3, [pc, #52]	@ (801b114 <std+0x5c>)
 801b0e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 801b0e2:	4b0d      	ldr	r3, [pc, #52]	@ (801b118 <std+0x60>)
 801b0e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801b0e6:	4b0d      	ldr	r3, [pc, #52]	@ (801b11c <std+0x64>)
 801b0e8:	6323      	str	r3, [r4, #48]	@ 0x30
 801b0ea:	4b0d      	ldr	r3, [pc, #52]	@ (801b120 <std+0x68>)
 801b0ec:	6224      	str	r4, [r4, #32]
 801b0ee:	429c      	cmp	r4, r3
 801b0f0:	d006      	beq.n	801b100 <std+0x48>
 801b0f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801b0f6:	4294      	cmp	r4, r2
 801b0f8:	d002      	beq.n	801b100 <std+0x48>
 801b0fa:	33d0      	adds	r3, #208	@ 0xd0
 801b0fc:	429c      	cmp	r4, r3
 801b0fe:	d105      	bne.n	801b10c <std+0x54>
 801b100:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801b104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b108:	f000 bb24 	b.w	801b754 <__retarget_lock_init_recursive>
 801b10c:	bd10      	pop	{r4, pc}
 801b10e:	bf00      	nop
 801b110:	0801b35d 	.word	0x0801b35d
 801b114:	0801b37f 	.word	0x0801b37f
 801b118:	0801b3b7 	.word	0x0801b3b7
 801b11c:	0801b3db 	.word	0x0801b3db
 801b120:	2000f358 	.word	0x2000f358

0801b124 <stdio_exit_handler>:
 801b124:	4a02      	ldr	r2, [pc, #8]	@ (801b130 <stdio_exit_handler+0xc>)
 801b126:	4903      	ldr	r1, [pc, #12]	@ (801b134 <stdio_exit_handler+0x10>)
 801b128:	4803      	ldr	r0, [pc, #12]	@ (801b138 <stdio_exit_handler+0x14>)
 801b12a:	f000 b869 	b.w	801b200 <_fwalk_sglue>
 801b12e:	bf00      	nop
 801b130:	200008e8 	.word	0x200008e8
 801b134:	0801bf51 	.word	0x0801bf51
 801b138:	200008f8 	.word	0x200008f8

0801b13c <cleanup_stdio>:
 801b13c:	6841      	ldr	r1, [r0, #4]
 801b13e:	4b0c      	ldr	r3, [pc, #48]	@ (801b170 <cleanup_stdio+0x34>)
 801b140:	4299      	cmp	r1, r3
 801b142:	b510      	push	{r4, lr}
 801b144:	4604      	mov	r4, r0
 801b146:	d001      	beq.n	801b14c <cleanup_stdio+0x10>
 801b148:	f000 ff02 	bl	801bf50 <_fflush_r>
 801b14c:	68a1      	ldr	r1, [r4, #8]
 801b14e:	4b09      	ldr	r3, [pc, #36]	@ (801b174 <cleanup_stdio+0x38>)
 801b150:	4299      	cmp	r1, r3
 801b152:	d002      	beq.n	801b15a <cleanup_stdio+0x1e>
 801b154:	4620      	mov	r0, r4
 801b156:	f000 fefb 	bl	801bf50 <_fflush_r>
 801b15a:	68e1      	ldr	r1, [r4, #12]
 801b15c:	4b06      	ldr	r3, [pc, #24]	@ (801b178 <cleanup_stdio+0x3c>)
 801b15e:	4299      	cmp	r1, r3
 801b160:	d004      	beq.n	801b16c <cleanup_stdio+0x30>
 801b162:	4620      	mov	r0, r4
 801b164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b168:	f000 bef2 	b.w	801bf50 <_fflush_r>
 801b16c:	bd10      	pop	{r4, pc}
 801b16e:	bf00      	nop
 801b170:	2000f358 	.word	0x2000f358
 801b174:	2000f3c0 	.word	0x2000f3c0
 801b178:	2000f428 	.word	0x2000f428

0801b17c <global_stdio_init.part.0>:
 801b17c:	b510      	push	{r4, lr}
 801b17e:	4b0b      	ldr	r3, [pc, #44]	@ (801b1ac <global_stdio_init.part.0+0x30>)
 801b180:	4c0b      	ldr	r4, [pc, #44]	@ (801b1b0 <global_stdio_init.part.0+0x34>)
 801b182:	4a0c      	ldr	r2, [pc, #48]	@ (801b1b4 <global_stdio_init.part.0+0x38>)
 801b184:	601a      	str	r2, [r3, #0]
 801b186:	4620      	mov	r0, r4
 801b188:	2200      	movs	r2, #0
 801b18a:	2104      	movs	r1, #4
 801b18c:	f7ff ff94 	bl	801b0b8 <std>
 801b190:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801b194:	2201      	movs	r2, #1
 801b196:	2109      	movs	r1, #9
 801b198:	f7ff ff8e 	bl	801b0b8 <std>
 801b19c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801b1a0:	2202      	movs	r2, #2
 801b1a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b1a6:	2112      	movs	r1, #18
 801b1a8:	f7ff bf86 	b.w	801b0b8 <std>
 801b1ac:	2000f490 	.word	0x2000f490
 801b1b0:	2000f358 	.word	0x2000f358
 801b1b4:	0801b125 	.word	0x0801b125

0801b1b8 <__sfp_lock_acquire>:
 801b1b8:	4801      	ldr	r0, [pc, #4]	@ (801b1c0 <__sfp_lock_acquire+0x8>)
 801b1ba:	f000 bacc 	b.w	801b756 <__retarget_lock_acquire_recursive>
 801b1be:	bf00      	nop
 801b1c0:	2000f49a 	.word	0x2000f49a

0801b1c4 <__sfp_lock_release>:
 801b1c4:	4801      	ldr	r0, [pc, #4]	@ (801b1cc <__sfp_lock_release+0x8>)
 801b1c6:	f000 bac7 	b.w	801b758 <__retarget_lock_release_recursive>
 801b1ca:	bf00      	nop
 801b1cc:	2000f49a 	.word	0x2000f49a

0801b1d0 <__sinit>:
 801b1d0:	b510      	push	{r4, lr}
 801b1d2:	4604      	mov	r4, r0
 801b1d4:	f7ff fff0 	bl	801b1b8 <__sfp_lock_acquire>
 801b1d8:	6a23      	ldr	r3, [r4, #32]
 801b1da:	b11b      	cbz	r3, 801b1e4 <__sinit+0x14>
 801b1dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b1e0:	f7ff bff0 	b.w	801b1c4 <__sfp_lock_release>
 801b1e4:	4b04      	ldr	r3, [pc, #16]	@ (801b1f8 <__sinit+0x28>)
 801b1e6:	6223      	str	r3, [r4, #32]
 801b1e8:	4b04      	ldr	r3, [pc, #16]	@ (801b1fc <__sinit+0x2c>)
 801b1ea:	681b      	ldr	r3, [r3, #0]
 801b1ec:	2b00      	cmp	r3, #0
 801b1ee:	d1f5      	bne.n	801b1dc <__sinit+0xc>
 801b1f0:	f7ff ffc4 	bl	801b17c <global_stdio_init.part.0>
 801b1f4:	e7f2      	b.n	801b1dc <__sinit+0xc>
 801b1f6:	bf00      	nop
 801b1f8:	0801b13d 	.word	0x0801b13d
 801b1fc:	2000f490 	.word	0x2000f490

0801b200 <_fwalk_sglue>:
 801b200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b204:	4607      	mov	r7, r0
 801b206:	4688      	mov	r8, r1
 801b208:	4614      	mov	r4, r2
 801b20a:	2600      	movs	r6, #0
 801b20c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b210:	f1b9 0901 	subs.w	r9, r9, #1
 801b214:	d505      	bpl.n	801b222 <_fwalk_sglue+0x22>
 801b216:	6824      	ldr	r4, [r4, #0]
 801b218:	2c00      	cmp	r4, #0
 801b21a:	d1f7      	bne.n	801b20c <_fwalk_sglue+0xc>
 801b21c:	4630      	mov	r0, r6
 801b21e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b222:	89ab      	ldrh	r3, [r5, #12]
 801b224:	2b01      	cmp	r3, #1
 801b226:	d907      	bls.n	801b238 <_fwalk_sglue+0x38>
 801b228:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b22c:	3301      	adds	r3, #1
 801b22e:	d003      	beq.n	801b238 <_fwalk_sglue+0x38>
 801b230:	4629      	mov	r1, r5
 801b232:	4638      	mov	r0, r7
 801b234:	47c0      	blx	r8
 801b236:	4306      	orrs	r6, r0
 801b238:	3568      	adds	r5, #104	@ 0x68
 801b23a:	e7e9      	b.n	801b210 <_fwalk_sglue+0x10>

0801b23c <_fwrite_r>:
 801b23c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b240:	9c08      	ldr	r4, [sp, #32]
 801b242:	468a      	mov	sl, r1
 801b244:	4690      	mov	r8, r2
 801b246:	fb02 f903 	mul.w	r9, r2, r3
 801b24a:	4606      	mov	r6, r0
 801b24c:	b118      	cbz	r0, 801b256 <_fwrite_r+0x1a>
 801b24e:	6a03      	ldr	r3, [r0, #32]
 801b250:	b90b      	cbnz	r3, 801b256 <_fwrite_r+0x1a>
 801b252:	f7ff ffbd 	bl	801b1d0 <__sinit>
 801b256:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b258:	07dd      	lsls	r5, r3, #31
 801b25a:	d405      	bmi.n	801b268 <_fwrite_r+0x2c>
 801b25c:	89a3      	ldrh	r3, [r4, #12]
 801b25e:	0598      	lsls	r0, r3, #22
 801b260:	d402      	bmi.n	801b268 <_fwrite_r+0x2c>
 801b262:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b264:	f000 fa77 	bl	801b756 <__retarget_lock_acquire_recursive>
 801b268:	89a3      	ldrh	r3, [r4, #12]
 801b26a:	0719      	lsls	r1, r3, #28
 801b26c:	d516      	bpl.n	801b29c <_fwrite_r+0x60>
 801b26e:	6923      	ldr	r3, [r4, #16]
 801b270:	b1a3      	cbz	r3, 801b29c <_fwrite_r+0x60>
 801b272:	2500      	movs	r5, #0
 801b274:	454d      	cmp	r5, r9
 801b276:	d01f      	beq.n	801b2b8 <_fwrite_r+0x7c>
 801b278:	68a7      	ldr	r7, [r4, #8]
 801b27a:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801b27e:	3f01      	subs	r7, #1
 801b280:	2f00      	cmp	r7, #0
 801b282:	60a7      	str	r7, [r4, #8]
 801b284:	da04      	bge.n	801b290 <_fwrite_r+0x54>
 801b286:	69a3      	ldr	r3, [r4, #24]
 801b288:	429f      	cmp	r7, r3
 801b28a:	db0f      	blt.n	801b2ac <_fwrite_r+0x70>
 801b28c:	290a      	cmp	r1, #10
 801b28e:	d00d      	beq.n	801b2ac <_fwrite_r+0x70>
 801b290:	6823      	ldr	r3, [r4, #0]
 801b292:	1c5a      	adds	r2, r3, #1
 801b294:	6022      	str	r2, [r4, #0]
 801b296:	7019      	strb	r1, [r3, #0]
 801b298:	3501      	adds	r5, #1
 801b29a:	e7eb      	b.n	801b274 <_fwrite_r+0x38>
 801b29c:	4621      	mov	r1, r4
 801b29e:	4630      	mov	r0, r6
 801b2a0:	f000 f91a 	bl	801b4d8 <__swsetup_r>
 801b2a4:	2800      	cmp	r0, #0
 801b2a6:	d0e4      	beq.n	801b272 <_fwrite_r+0x36>
 801b2a8:	2500      	movs	r5, #0
 801b2aa:	e005      	b.n	801b2b8 <_fwrite_r+0x7c>
 801b2ac:	4622      	mov	r2, r4
 801b2ae:	4630      	mov	r0, r6
 801b2b0:	f000 f8d4 	bl	801b45c <__swbuf_r>
 801b2b4:	3001      	adds	r0, #1
 801b2b6:	d1ef      	bne.n	801b298 <_fwrite_r+0x5c>
 801b2b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b2ba:	07da      	lsls	r2, r3, #31
 801b2bc:	d405      	bmi.n	801b2ca <_fwrite_r+0x8e>
 801b2be:	89a3      	ldrh	r3, [r4, #12]
 801b2c0:	059b      	lsls	r3, r3, #22
 801b2c2:	d402      	bmi.n	801b2ca <_fwrite_r+0x8e>
 801b2c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b2c6:	f000 fa47 	bl	801b758 <__retarget_lock_release_recursive>
 801b2ca:	fbb5 f0f8 	udiv	r0, r5, r8
 801b2ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801b2d4 <fwrite>:
 801b2d4:	b507      	push	{r0, r1, r2, lr}
 801b2d6:	9300      	str	r3, [sp, #0]
 801b2d8:	4613      	mov	r3, r2
 801b2da:	460a      	mov	r2, r1
 801b2dc:	4601      	mov	r1, r0
 801b2de:	4803      	ldr	r0, [pc, #12]	@ (801b2ec <fwrite+0x18>)
 801b2e0:	6800      	ldr	r0, [r0, #0]
 801b2e2:	f7ff ffab 	bl	801b23c <_fwrite_r>
 801b2e6:	b003      	add	sp, #12
 801b2e8:	f85d fb04 	ldr.w	pc, [sp], #4
 801b2ec:	200008f4 	.word	0x200008f4

0801b2f0 <sniprintf>:
 801b2f0:	b40c      	push	{r2, r3}
 801b2f2:	b530      	push	{r4, r5, lr}
 801b2f4:	4b18      	ldr	r3, [pc, #96]	@ (801b358 <sniprintf+0x68>)
 801b2f6:	1e0c      	subs	r4, r1, #0
 801b2f8:	681d      	ldr	r5, [r3, #0]
 801b2fa:	b09d      	sub	sp, #116	@ 0x74
 801b2fc:	da08      	bge.n	801b310 <sniprintf+0x20>
 801b2fe:	238b      	movs	r3, #139	@ 0x8b
 801b300:	602b      	str	r3, [r5, #0]
 801b302:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b306:	b01d      	add	sp, #116	@ 0x74
 801b308:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b30c:	b002      	add	sp, #8
 801b30e:	4770      	bx	lr
 801b310:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b314:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b318:	f04f 0300 	mov.w	r3, #0
 801b31c:	931b      	str	r3, [sp, #108]	@ 0x6c
 801b31e:	bf14      	ite	ne
 801b320:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801b324:	4623      	moveq	r3, r4
 801b326:	9304      	str	r3, [sp, #16]
 801b328:	9307      	str	r3, [sp, #28]
 801b32a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b32e:	9002      	str	r0, [sp, #8]
 801b330:	9006      	str	r0, [sp, #24]
 801b332:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b336:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b338:	ab21      	add	r3, sp, #132	@ 0x84
 801b33a:	a902      	add	r1, sp, #8
 801b33c:	4628      	mov	r0, r5
 801b33e:	9301      	str	r3, [sp, #4]
 801b340:	f000 fafa 	bl	801b938 <_svfiprintf_r>
 801b344:	1c43      	adds	r3, r0, #1
 801b346:	bfbc      	itt	lt
 801b348:	238b      	movlt	r3, #139	@ 0x8b
 801b34a:	602b      	strlt	r3, [r5, #0]
 801b34c:	2c00      	cmp	r4, #0
 801b34e:	d0da      	beq.n	801b306 <sniprintf+0x16>
 801b350:	9b02      	ldr	r3, [sp, #8]
 801b352:	2200      	movs	r2, #0
 801b354:	701a      	strb	r2, [r3, #0]
 801b356:	e7d6      	b.n	801b306 <sniprintf+0x16>
 801b358:	200008f4 	.word	0x200008f4

0801b35c <__sread>:
 801b35c:	b510      	push	{r4, lr}
 801b35e:	460c      	mov	r4, r1
 801b360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b364:	f000 f998 	bl	801b698 <_read_r>
 801b368:	2800      	cmp	r0, #0
 801b36a:	bfab      	itete	ge
 801b36c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b36e:	89a3      	ldrhlt	r3, [r4, #12]
 801b370:	181b      	addge	r3, r3, r0
 801b372:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b376:	bfac      	ite	ge
 801b378:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b37a:	81a3      	strhlt	r3, [r4, #12]
 801b37c:	bd10      	pop	{r4, pc}

0801b37e <__swrite>:
 801b37e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b382:	461f      	mov	r7, r3
 801b384:	898b      	ldrh	r3, [r1, #12]
 801b386:	05db      	lsls	r3, r3, #23
 801b388:	4605      	mov	r5, r0
 801b38a:	460c      	mov	r4, r1
 801b38c:	4616      	mov	r6, r2
 801b38e:	d505      	bpl.n	801b39c <__swrite+0x1e>
 801b390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b394:	2302      	movs	r3, #2
 801b396:	2200      	movs	r2, #0
 801b398:	f000 f96c 	bl	801b674 <_lseek_r>
 801b39c:	89a3      	ldrh	r3, [r4, #12]
 801b39e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b3a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b3a6:	81a3      	strh	r3, [r4, #12]
 801b3a8:	4632      	mov	r2, r6
 801b3aa:	463b      	mov	r3, r7
 801b3ac:	4628      	mov	r0, r5
 801b3ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b3b2:	f000 b993 	b.w	801b6dc <_write_r>

0801b3b6 <__sseek>:
 801b3b6:	b510      	push	{r4, lr}
 801b3b8:	460c      	mov	r4, r1
 801b3ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b3be:	f000 f959 	bl	801b674 <_lseek_r>
 801b3c2:	1c43      	adds	r3, r0, #1
 801b3c4:	89a3      	ldrh	r3, [r4, #12]
 801b3c6:	bf15      	itete	ne
 801b3c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b3ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b3ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b3d2:	81a3      	strheq	r3, [r4, #12]
 801b3d4:	bf18      	it	ne
 801b3d6:	81a3      	strhne	r3, [r4, #12]
 801b3d8:	bd10      	pop	{r4, pc}

0801b3da <__sclose>:
 801b3da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b3de:	f000 b939 	b.w	801b654 <_close_r>

0801b3e2 <_vsniprintf_r>:
 801b3e2:	b530      	push	{r4, r5, lr}
 801b3e4:	4614      	mov	r4, r2
 801b3e6:	2c00      	cmp	r4, #0
 801b3e8:	b09b      	sub	sp, #108	@ 0x6c
 801b3ea:	4605      	mov	r5, r0
 801b3ec:	461a      	mov	r2, r3
 801b3ee:	da05      	bge.n	801b3fc <_vsniprintf_r+0x1a>
 801b3f0:	238b      	movs	r3, #139	@ 0x8b
 801b3f2:	6003      	str	r3, [r0, #0]
 801b3f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b3f8:	b01b      	add	sp, #108	@ 0x6c
 801b3fa:	bd30      	pop	{r4, r5, pc}
 801b3fc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b400:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b404:	f04f 0300 	mov.w	r3, #0
 801b408:	9319      	str	r3, [sp, #100]	@ 0x64
 801b40a:	bf14      	ite	ne
 801b40c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801b410:	4623      	moveq	r3, r4
 801b412:	9302      	str	r3, [sp, #8]
 801b414:	9305      	str	r3, [sp, #20]
 801b416:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b41a:	9100      	str	r1, [sp, #0]
 801b41c:	9104      	str	r1, [sp, #16]
 801b41e:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b422:	4669      	mov	r1, sp
 801b424:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801b426:	f000 fa87 	bl	801b938 <_svfiprintf_r>
 801b42a:	1c43      	adds	r3, r0, #1
 801b42c:	bfbc      	itt	lt
 801b42e:	238b      	movlt	r3, #139	@ 0x8b
 801b430:	602b      	strlt	r3, [r5, #0]
 801b432:	2c00      	cmp	r4, #0
 801b434:	d0e0      	beq.n	801b3f8 <_vsniprintf_r+0x16>
 801b436:	9b00      	ldr	r3, [sp, #0]
 801b438:	2200      	movs	r2, #0
 801b43a:	701a      	strb	r2, [r3, #0]
 801b43c:	e7dc      	b.n	801b3f8 <_vsniprintf_r+0x16>
	...

0801b440 <vsniprintf>:
 801b440:	b507      	push	{r0, r1, r2, lr}
 801b442:	9300      	str	r3, [sp, #0]
 801b444:	4613      	mov	r3, r2
 801b446:	460a      	mov	r2, r1
 801b448:	4601      	mov	r1, r0
 801b44a:	4803      	ldr	r0, [pc, #12]	@ (801b458 <vsniprintf+0x18>)
 801b44c:	6800      	ldr	r0, [r0, #0]
 801b44e:	f7ff ffc8 	bl	801b3e2 <_vsniprintf_r>
 801b452:	b003      	add	sp, #12
 801b454:	f85d fb04 	ldr.w	pc, [sp], #4
 801b458:	200008f4 	.word	0x200008f4

0801b45c <__swbuf_r>:
 801b45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b45e:	460e      	mov	r6, r1
 801b460:	4614      	mov	r4, r2
 801b462:	4605      	mov	r5, r0
 801b464:	b118      	cbz	r0, 801b46e <__swbuf_r+0x12>
 801b466:	6a03      	ldr	r3, [r0, #32]
 801b468:	b90b      	cbnz	r3, 801b46e <__swbuf_r+0x12>
 801b46a:	f7ff feb1 	bl	801b1d0 <__sinit>
 801b46e:	69a3      	ldr	r3, [r4, #24]
 801b470:	60a3      	str	r3, [r4, #8]
 801b472:	89a3      	ldrh	r3, [r4, #12]
 801b474:	071a      	lsls	r2, r3, #28
 801b476:	d501      	bpl.n	801b47c <__swbuf_r+0x20>
 801b478:	6923      	ldr	r3, [r4, #16]
 801b47a:	b943      	cbnz	r3, 801b48e <__swbuf_r+0x32>
 801b47c:	4621      	mov	r1, r4
 801b47e:	4628      	mov	r0, r5
 801b480:	f000 f82a 	bl	801b4d8 <__swsetup_r>
 801b484:	b118      	cbz	r0, 801b48e <__swbuf_r+0x32>
 801b486:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801b48a:	4638      	mov	r0, r7
 801b48c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b48e:	6823      	ldr	r3, [r4, #0]
 801b490:	6922      	ldr	r2, [r4, #16]
 801b492:	1a98      	subs	r0, r3, r2
 801b494:	6963      	ldr	r3, [r4, #20]
 801b496:	b2f6      	uxtb	r6, r6
 801b498:	4283      	cmp	r3, r0
 801b49a:	4637      	mov	r7, r6
 801b49c:	dc05      	bgt.n	801b4aa <__swbuf_r+0x4e>
 801b49e:	4621      	mov	r1, r4
 801b4a0:	4628      	mov	r0, r5
 801b4a2:	f000 fd55 	bl	801bf50 <_fflush_r>
 801b4a6:	2800      	cmp	r0, #0
 801b4a8:	d1ed      	bne.n	801b486 <__swbuf_r+0x2a>
 801b4aa:	68a3      	ldr	r3, [r4, #8]
 801b4ac:	3b01      	subs	r3, #1
 801b4ae:	60a3      	str	r3, [r4, #8]
 801b4b0:	6823      	ldr	r3, [r4, #0]
 801b4b2:	1c5a      	adds	r2, r3, #1
 801b4b4:	6022      	str	r2, [r4, #0]
 801b4b6:	701e      	strb	r6, [r3, #0]
 801b4b8:	6962      	ldr	r2, [r4, #20]
 801b4ba:	1c43      	adds	r3, r0, #1
 801b4bc:	429a      	cmp	r2, r3
 801b4be:	d004      	beq.n	801b4ca <__swbuf_r+0x6e>
 801b4c0:	89a3      	ldrh	r3, [r4, #12]
 801b4c2:	07db      	lsls	r3, r3, #31
 801b4c4:	d5e1      	bpl.n	801b48a <__swbuf_r+0x2e>
 801b4c6:	2e0a      	cmp	r6, #10
 801b4c8:	d1df      	bne.n	801b48a <__swbuf_r+0x2e>
 801b4ca:	4621      	mov	r1, r4
 801b4cc:	4628      	mov	r0, r5
 801b4ce:	f000 fd3f 	bl	801bf50 <_fflush_r>
 801b4d2:	2800      	cmp	r0, #0
 801b4d4:	d0d9      	beq.n	801b48a <__swbuf_r+0x2e>
 801b4d6:	e7d6      	b.n	801b486 <__swbuf_r+0x2a>

0801b4d8 <__swsetup_r>:
 801b4d8:	b538      	push	{r3, r4, r5, lr}
 801b4da:	4b29      	ldr	r3, [pc, #164]	@ (801b580 <__swsetup_r+0xa8>)
 801b4dc:	4605      	mov	r5, r0
 801b4de:	6818      	ldr	r0, [r3, #0]
 801b4e0:	460c      	mov	r4, r1
 801b4e2:	b118      	cbz	r0, 801b4ec <__swsetup_r+0x14>
 801b4e4:	6a03      	ldr	r3, [r0, #32]
 801b4e6:	b90b      	cbnz	r3, 801b4ec <__swsetup_r+0x14>
 801b4e8:	f7ff fe72 	bl	801b1d0 <__sinit>
 801b4ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b4f0:	0719      	lsls	r1, r3, #28
 801b4f2:	d422      	bmi.n	801b53a <__swsetup_r+0x62>
 801b4f4:	06da      	lsls	r2, r3, #27
 801b4f6:	d407      	bmi.n	801b508 <__swsetup_r+0x30>
 801b4f8:	2209      	movs	r2, #9
 801b4fa:	602a      	str	r2, [r5, #0]
 801b4fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b500:	81a3      	strh	r3, [r4, #12]
 801b502:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b506:	e033      	b.n	801b570 <__swsetup_r+0x98>
 801b508:	0758      	lsls	r0, r3, #29
 801b50a:	d512      	bpl.n	801b532 <__swsetup_r+0x5a>
 801b50c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b50e:	b141      	cbz	r1, 801b522 <__swsetup_r+0x4a>
 801b510:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b514:	4299      	cmp	r1, r3
 801b516:	d002      	beq.n	801b51e <__swsetup_r+0x46>
 801b518:	4628      	mov	r0, r5
 801b51a:	f000 f95f 	bl	801b7dc <_free_r>
 801b51e:	2300      	movs	r3, #0
 801b520:	6363      	str	r3, [r4, #52]	@ 0x34
 801b522:	89a3      	ldrh	r3, [r4, #12]
 801b524:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801b528:	81a3      	strh	r3, [r4, #12]
 801b52a:	2300      	movs	r3, #0
 801b52c:	6063      	str	r3, [r4, #4]
 801b52e:	6923      	ldr	r3, [r4, #16]
 801b530:	6023      	str	r3, [r4, #0]
 801b532:	89a3      	ldrh	r3, [r4, #12]
 801b534:	f043 0308 	orr.w	r3, r3, #8
 801b538:	81a3      	strh	r3, [r4, #12]
 801b53a:	6923      	ldr	r3, [r4, #16]
 801b53c:	b94b      	cbnz	r3, 801b552 <__swsetup_r+0x7a>
 801b53e:	89a3      	ldrh	r3, [r4, #12]
 801b540:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801b544:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b548:	d003      	beq.n	801b552 <__swsetup_r+0x7a>
 801b54a:	4621      	mov	r1, r4
 801b54c:	4628      	mov	r0, r5
 801b54e:	f000 fd5f 	bl	801c010 <__smakebuf_r>
 801b552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b556:	f013 0201 	ands.w	r2, r3, #1
 801b55a:	d00a      	beq.n	801b572 <__swsetup_r+0x9a>
 801b55c:	2200      	movs	r2, #0
 801b55e:	60a2      	str	r2, [r4, #8]
 801b560:	6962      	ldr	r2, [r4, #20]
 801b562:	4252      	negs	r2, r2
 801b564:	61a2      	str	r2, [r4, #24]
 801b566:	6922      	ldr	r2, [r4, #16]
 801b568:	b942      	cbnz	r2, 801b57c <__swsetup_r+0xa4>
 801b56a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801b56e:	d1c5      	bne.n	801b4fc <__swsetup_r+0x24>
 801b570:	bd38      	pop	{r3, r4, r5, pc}
 801b572:	0799      	lsls	r1, r3, #30
 801b574:	bf58      	it	pl
 801b576:	6962      	ldrpl	r2, [r4, #20]
 801b578:	60a2      	str	r2, [r4, #8]
 801b57a:	e7f4      	b.n	801b566 <__swsetup_r+0x8e>
 801b57c:	2000      	movs	r0, #0
 801b57e:	e7f7      	b.n	801b570 <__swsetup_r+0x98>
 801b580:	200008f4 	.word	0x200008f4

0801b584 <memcmp>:
 801b584:	b510      	push	{r4, lr}
 801b586:	3901      	subs	r1, #1
 801b588:	4402      	add	r2, r0
 801b58a:	4290      	cmp	r0, r2
 801b58c:	d101      	bne.n	801b592 <memcmp+0xe>
 801b58e:	2000      	movs	r0, #0
 801b590:	e005      	b.n	801b59e <memcmp+0x1a>
 801b592:	7803      	ldrb	r3, [r0, #0]
 801b594:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b598:	42a3      	cmp	r3, r4
 801b59a:	d001      	beq.n	801b5a0 <memcmp+0x1c>
 801b59c:	1b18      	subs	r0, r3, r4
 801b59e:	bd10      	pop	{r4, pc}
 801b5a0:	3001      	adds	r0, #1
 801b5a2:	e7f2      	b.n	801b58a <memcmp+0x6>

0801b5a4 <memmove>:
 801b5a4:	4288      	cmp	r0, r1
 801b5a6:	b510      	push	{r4, lr}
 801b5a8:	eb01 0402 	add.w	r4, r1, r2
 801b5ac:	d902      	bls.n	801b5b4 <memmove+0x10>
 801b5ae:	4284      	cmp	r4, r0
 801b5b0:	4623      	mov	r3, r4
 801b5b2:	d807      	bhi.n	801b5c4 <memmove+0x20>
 801b5b4:	1e43      	subs	r3, r0, #1
 801b5b6:	42a1      	cmp	r1, r4
 801b5b8:	d008      	beq.n	801b5cc <memmove+0x28>
 801b5ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b5be:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b5c2:	e7f8      	b.n	801b5b6 <memmove+0x12>
 801b5c4:	4402      	add	r2, r0
 801b5c6:	4601      	mov	r1, r0
 801b5c8:	428a      	cmp	r2, r1
 801b5ca:	d100      	bne.n	801b5ce <memmove+0x2a>
 801b5cc:	bd10      	pop	{r4, pc}
 801b5ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b5d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b5d6:	e7f7      	b.n	801b5c8 <memmove+0x24>

0801b5d8 <memset>:
 801b5d8:	4402      	add	r2, r0
 801b5da:	4603      	mov	r3, r0
 801b5dc:	4293      	cmp	r3, r2
 801b5de:	d100      	bne.n	801b5e2 <memset+0xa>
 801b5e0:	4770      	bx	lr
 801b5e2:	f803 1b01 	strb.w	r1, [r3], #1
 801b5e6:	e7f9      	b.n	801b5dc <memset+0x4>

0801b5e8 <strchr>:
 801b5e8:	b2c9      	uxtb	r1, r1
 801b5ea:	4603      	mov	r3, r0
 801b5ec:	4618      	mov	r0, r3
 801b5ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b5f2:	b112      	cbz	r2, 801b5fa <strchr+0x12>
 801b5f4:	428a      	cmp	r2, r1
 801b5f6:	d1f9      	bne.n	801b5ec <strchr+0x4>
 801b5f8:	4770      	bx	lr
 801b5fa:	2900      	cmp	r1, #0
 801b5fc:	bf18      	it	ne
 801b5fe:	2000      	movne	r0, #0
 801b600:	4770      	bx	lr

0801b602 <strncmp>:
 801b602:	b510      	push	{r4, lr}
 801b604:	b16a      	cbz	r2, 801b622 <strncmp+0x20>
 801b606:	3901      	subs	r1, #1
 801b608:	1884      	adds	r4, r0, r2
 801b60a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b60e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b612:	429a      	cmp	r2, r3
 801b614:	d103      	bne.n	801b61e <strncmp+0x1c>
 801b616:	42a0      	cmp	r0, r4
 801b618:	d001      	beq.n	801b61e <strncmp+0x1c>
 801b61a:	2a00      	cmp	r2, #0
 801b61c:	d1f5      	bne.n	801b60a <strncmp+0x8>
 801b61e:	1ad0      	subs	r0, r2, r3
 801b620:	bd10      	pop	{r4, pc}
 801b622:	4610      	mov	r0, r2
 801b624:	e7fc      	b.n	801b620 <strncmp+0x1e>

0801b626 <strstr>:
 801b626:	780a      	ldrb	r2, [r1, #0]
 801b628:	b570      	push	{r4, r5, r6, lr}
 801b62a:	b96a      	cbnz	r2, 801b648 <strstr+0x22>
 801b62c:	bd70      	pop	{r4, r5, r6, pc}
 801b62e:	429a      	cmp	r2, r3
 801b630:	d109      	bne.n	801b646 <strstr+0x20>
 801b632:	460c      	mov	r4, r1
 801b634:	4605      	mov	r5, r0
 801b636:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801b63a:	2b00      	cmp	r3, #0
 801b63c:	d0f6      	beq.n	801b62c <strstr+0x6>
 801b63e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801b642:	429e      	cmp	r6, r3
 801b644:	d0f7      	beq.n	801b636 <strstr+0x10>
 801b646:	3001      	adds	r0, #1
 801b648:	7803      	ldrb	r3, [r0, #0]
 801b64a:	2b00      	cmp	r3, #0
 801b64c:	d1ef      	bne.n	801b62e <strstr+0x8>
 801b64e:	4618      	mov	r0, r3
 801b650:	e7ec      	b.n	801b62c <strstr+0x6>
	...

0801b654 <_close_r>:
 801b654:	b538      	push	{r3, r4, r5, lr}
 801b656:	4d06      	ldr	r5, [pc, #24]	@ (801b670 <_close_r+0x1c>)
 801b658:	2300      	movs	r3, #0
 801b65a:	4604      	mov	r4, r0
 801b65c:	4608      	mov	r0, r1
 801b65e:	602b      	str	r3, [r5, #0]
 801b660:	f7e8 fb56 	bl	8003d10 <_close>
 801b664:	1c43      	adds	r3, r0, #1
 801b666:	d102      	bne.n	801b66e <_close_r+0x1a>
 801b668:	682b      	ldr	r3, [r5, #0]
 801b66a:	b103      	cbz	r3, 801b66e <_close_r+0x1a>
 801b66c:	6023      	str	r3, [r4, #0]
 801b66e:	bd38      	pop	{r3, r4, r5, pc}
 801b670:	2000f494 	.word	0x2000f494

0801b674 <_lseek_r>:
 801b674:	b538      	push	{r3, r4, r5, lr}
 801b676:	4d07      	ldr	r5, [pc, #28]	@ (801b694 <_lseek_r+0x20>)
 801b678:	4604      	mov	r4, r0
 801b67a:	4608      	mov	r0, r1
 801b67c:	4611      	mov	r1, r2
 801b67e:	2200      	movs	r2, #0
 801b680:	602a      	str	r2, [r5, #0]
 801b682:	461a      	mov	r2, r3
 801b684:	f7e8 fb6b 	bl	8003d5e <_lseek>
 801b688:	1c43      	adds	r3, r0, #1
 801b68a:	d102      	bne.n	801b692 <_lseek_r+0x1e>
 801b68c:	682b      	ldr	r3, [r5, #0]
 801b68e:	b103      	cbz	r3, 801b692 <_lseek_r+0x1e>
 801b690:	6023      	str	r3, [r4, #0]
 801b692:	bd38      	pop	{r3, r4, r5, pc}
 801b694:	2000f494 	.word	0x2000f494

0801b698 <_read_r>:
 801b698:	b538      	push	{r3, r4, r5, lr}
 801b69a:	4d07      	ldr	r5, [pc, #28]	@ (801b6b8 <_read_r+0x20>)
 801b69c:	4604      	mov	r4, r0
 801b69e:	4608      	mov	r0, r1
 801b6a0:	4611      	mov	r1, r2
 801b6a2:	2200      	movs	r2, #0
 801b6a4:	602a      	str	r2, [r5, #0]
 801b6a6:	461a      	mov	r2, r3
 801b6a8:	f7e8 faf9 	bl	8003c9e <_read>
 801b6ac:	1c43      	adds	r3, r0, #1
 801b6ae:	d102      	bne.n	801b6b6 <_read_r+0x1e>
 801b6b0:	682b      	ldr	r3, [r5, #0]
 801b6b2:	b103      	cbz	r3, 801b6b6 <_read_r+0x1e>
 801b6b4:	6023      	str	r3, [r4, #0]
 801b6b6:	bd38      	pop	{r3, r4, r5, pc}
 801b6b8:	2000f494 	.word	0x2000f494

0801b6bc <_sbrk_r>:
 801b6bc:	b538      	push	{r3, r4, r5, lr}
 801b6be:	4d06      	ldr	r5, [pc, #24]	@ (801b6d8 <_sbrk_r+0x1c>)
 801b6c0:	2300      	movs	r3, #0
 801b6c2:	4604      	mov	r4, r0
 801b6c4:	4608      	mov	r0, r1
 801b6c6:	602b      	str	r3, [r5, #0]
 801b6c8:	f7e8 fb56 	bl	8003d78 <_sbrk>
 801b6cc:	1c43      	adds	r3, r0, #1
 801b6ce:	d102      	bne.n	801b6d6 <_sbrk_r+0x1a>
 801b6d0:	682b      	ldr	r3, [r5, #0]
 801b6d2:	b103      	cbz	r3, 801b6d6 <_sbrk_r+0x1a>
 801b6d4:	6023      	str	r3, [r4, #0]
 801b6d6:	bd38      	pop	{r3, r4, r5, pc}
 801b6d8:	2000f494 	.word	0x2000f494

0801b6dc <_write_r>:
 801b6dc:	b538      	push	{r3, r4, r5, lr}
 801b6de:	4d07      	ldr	r5, [pc, #28]	@ (801b6fc <_write_r+0x20>)
 801b6e0:	4604      	mov	r4, r0
 801b6e2:	4608      	mov	r0, r1
 801b6e4:	4611      	mov	r1, r2
 801b6e6:	2200      	movs	r2, #0
 801b6e8:	602a      	str	r2, [r5, #0]
 801b6ea:	461a      	mov	r2, r3
 801b6ec:	f7e8 faf4 	bl	8003cd8 <_write>
 801b6f0:	1c43      	adds	r3, r0, #1
 801b6f2:	d102      	bne.n	801b6fa <_write_r+0x1e>
 801b6f4:	682b      	ldr	r3, [r5, #0]
 801b6f6:	b103      	cbz	r3, 801b6fa <_write_r+0x1e>
 801b6f8:	6023      	str	r3, [r4, #0]
 801b6fa:	bd38      	pop	{r3, r4, r5, pc}
 801b6fc:	2000f494 	.word	0x2000f494

0801b700 <__errno>:
 801b700:	4b01      	ldr	r3, [pc, #4]	@ (801b708 <__errno+0x8>)
 801b702:	6818      	ldr	r0, [r3, #0]
 801b704:	4770      	bx	lr
 801b706:	bf00      	nop
 801b708:	200008f4 	.word	0x200008f4

0801b70c <__libc_init_array>:
 801b70c:	b570      	push	{r4, r5, r6, lr}
 801b70e:	4d0d      	ldr	r5, [pc, #52]	@ (801b744 <__libc_init_array+0x38>)
 801b710:	4c0d      	ldr	r4, [pc, #52]	@ (801b748 <__libc_init_array+0x3c>)
 801b712:	1b64      	subs	r4, r4, r5
 801b714:	10a4      	asrs	r4, r4, #2
 801b716:	2600      	movs	r6, #0
 801b718:	42a6      	cmp	r6, r4
 801b71a:	d109      	bne.n	801b730 <__libc_init_array+0x24>
 801b71c:	4d0b      	ldr	r5, [pc, #44]	@ (801b74c <__libc_init_array+0x40>)
 801b71e:	4c0c      	ldr	r4, [pc, #48]	@ (801b750 <__libc_init_array+0x44>)
 801b720:	f000 fe60 	bl	801c3e4 <_init>
 801b724:	1b64      	subs	r4, r4, r5
 801b726:	10a4      	asrs	r4, r4, #2
 801b728:	2600      	movs	r6, #0
 801b72a:	42a6      	cmp	r6, r4
 801b72c:	d105      	bne.n	801b73a <__libc_init_array+0x2e>
 801b72e:	bd70      	pop	{r4, r5, r6, pc}
 801b730:	f855 3b04 	ldr.w	r3, [r5], #4
 801b734:	4798      	blx	r3
 801b736:	3601      	adds	r6, #1
 801b738:	e7ee      	b.n	801b718 <__libc_init_array+0xc>
 801b73a:	f855 3b04 	ldr.w	r3, [r5], #4
 801b73e:	4798      	blx	r3
 801b740:	3601      	adds	r6, #1
 801b742:	e7f2      	b.n	801b72a <__libc_init_array+0x1e>
 801b744:	0801d970 	.word	0x0801d970
 801b748:	0801d970 	.word	0x0801d970
 801b74c:	0801d970 	.word	0x0801d970
 801b750:	0801d988 	.word	0x0801d988

0801b754 <__retarget_lock_init_recursive>:
 801b754:	4770      	bx	lr

0801b756 <__retarget_lock_acquire_recursive>:
 801b756:	4770      	bx	lr

0801b758 <__retarget_lock_release_recursive>:
 801b758:	4770      	bx	lr

0801b75a <strcpy>:
 801b75a:	4603      	mov	r3, r0
 801b75c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b760:	f803 2b01 	strb.w	r2, [r3], #1
 801b764:	2a00      	cmp	r2, #0
 801b766:	d1f9      	bne.n	801b75c <strcpy+0x2>
 801b768:	4770      	bx	lr

0801b76a <memcpy>:
 801b76a:	440a      	add	r2, r1
 801b76c:	4291      	cmp	r1, r2
 801b76e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801b772:	d100      	bne.n	801b776 <memcpy+0xc>
 801b774:	4770      	bx	lr
 801b776:	b510      	push	{r4, lr}
 801b778:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b77c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b780:	4291      	cmp	r1, r2
 801b782:	d1f9      	bne.n	801b778 <memcpy+0xe>
 801b784:	bd10      	pop	{r4, pc}
	...

0801b788 <__assert_func>:
 801b788:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b78a:	4614      	mov	r4, r2
 801b78c:	461a      	mov	r2, r3
 801b78e:	4b09      	ldr	r3, [pc, #36]	@ (801b7b4 <__assert_func+0x2c>)
 801b790:	681b      	ldr	r3, [r3, #0]
 801b792:	4605      	mov	r5, r0
 801b794:	68d8      	ldr	r0, [r3, #12]
 801b796:	b14c      	cbz	r4, 801b7ac <__assert_func+0x24>
 801b798:	4b07      	ldr	r3, [pc, #28]	@ (801b7b8 <__assert_func+0x30>)
 801b79a:	9100      	str	r1, [sp, #0]
 801b79c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b7a0:	4906      	ldr	r1, [pc, #24]	@ (801b7bc <__assert_func+0x34>)
 801b7a2:	462b      	mov	r3, r5
 801b7a4:	f000 fbfc 	bl	801bfa0 <fiprintf>
 801b7a8:	f000 fc90 	bl	801c0cc <abort>
 801b7ac:	4b04      	ldr	r3, [pc, #16]	@ (801b7c0 <__assert_func+0x38>)
 801b7ae:	461c      	mov	r4, r3
 801b7b0:	e7f3      	b.n	801b79a <__assert_func+0x12>
 801b7b2:	bf00      	nop
 801b7b4:	200008f4 	.word	0x200008f4
 801b7b8:	0801d7f7 	.word	0x0801d7f7
 801b7bc:	0801d804 	.word	0x0801d804
 801b7c0:	0801d832 	.word	0x0801d832

0801b7c4 <__env_lock>:
 801b7c4:	4801      	ldr	r0, [pc, #4]	@ (801b7cc <__env_lock+0x8>)
 801b7c6:	f7ff bfc6 	b.w	801b756 <__retarget_lock_acquire_recursive>
 801b7ca:	bf00      	nop
 801b7cc:	2000f498 	.word	0x2000f498

0801b7d0 <__env_unlock>:
 801b7d0:	4801      	ldr	r0, [pc, #4]	@ (801b7d8 <__env_unlock+0x8>)
 801b7d2:	f7ff bfc1 	b.w	801b758 <__retarget_lock_release_recursive>
 801b7d6:	bf00      	nop
 801b7d8:	2000f498 	.word	0x2000f498

0801b7dc <_free_r>:
 801b7dc:	b538      	push	{r3, r4, r5, lr}
 801b7de:	4605      	mov	r5, r0
 801b7e0:	2900      	cmp	r1, #0
 801b7e2:	d041      	beq.n	801b868 <_free_r+0x8c>
 801b7e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b7e8:	1f0c      	subs	r4, r1, #4
 801b7ea:	2b00      	cmp	r3, #0
 801b7ec:	bfb8      	it	lt
 801b7ee:	18e4      	addlt	r4, r4, r3
 801b7f0:	f7ff fb3c 	bl	801ae6c <__malloc_lock>
 801b7f4:	4a1d      	ldr	r2, [pc, #116]	@ (801b86c <_free_r+0x90>)
 801b7f6:	6813      	ldr	r3, [r2, #0]
 801b7f8:	b933      	cbnz	r3, 801b808 <_free_r+0x2c>
 801b7fa:	6063      	str	r3, [r4, #4]
 801b7fc:	6014      	str	r4, [r2, #0]
 801b7fe:	4628      	mov	r0, r5
 801b800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b804:	f7ff bb38 	b.w	801ae78 <__malloc_unlock>
 801b808:	42a3      	cmp	r3, r4
 801b80a:	d908      	bls.n	801b81e <_free_r+0x42>
 801b80c:	6820      	ldr	r0, [r4, #0]
 801b80e:	1821      	adds	r1, r4, r0
 801b810:	428b      	cmp	r3, r1
 801b812:	bf01      	itttt	eq
 801b814:	6819      	ldreq	r1, [r3, #0]
 801b816:	685b      	ldreq	r3, [r3, #4]
 801b818:	1809      	addeq	r1, r1, r0
 801b81a:	6021      	streq	r1, [r4, #0]
 801b81c:	e7ed      	b.n	801b7fa <_free_r+0x1e>
 801b81e:	461a      	mov	r2, r3
 801b820:	685b      	ldr	r3, [r3, #4]
 801b822:	b10b      	cbz	r3, 801b828 <_free_r+0x4c>
 801b824:	42a3      	cmp	r3, r4
 801b826:	d9fa      	bls.n	801b81e <_free_r+0x42>
 801b828:	6811      	ldr	r1, [r2, #0]
 801b82a:	1850      	adds	r0, r2, r1
 801b82c:	42a0      	cmp	r0, r4
 801b82e:	d10b      	bne.n	801b848 <_free_r+0x6c>
 801b830:	6820      	ldr	r0, [r4, #0]
 801b832:	4401      	add	r1, r0
 801b834:	1850      	adds	r0, r2, r1
 801b836:	4283      	cmp	r3, r0
 801b838:	6011      	str	r1, [r2, #0]
 801b83a:	d1e0      	bne.n	801b7fe <_free_r+0x22>
 801b83c:	6818      	ldr	r0, [r3, #0]
 801b83e:	685b      	ldr	r3, [r3, #4]
 801b840:	6053      	str	r3, [r2, #4]
 801b842:	4408      	add	r0, r1
 801b844:	6010      	str	r0, [r2, #0]
 801b846:	e7da      	b.n	801b7fe <_free_r+0x22>
 801b848:	d902      	bls.n	801b850 <_free_r+0x74>
 801b84a:	230c      	movs	r3, #12
 801b84c:	602b      	str	r3, [r5, #0]
 801b84e:	e7d6      	b.n	801b7fe <_free_r+0x22>
 801b850:	6820      	ldr	r0, [r4, #0]
 801b852:	1821      	adds	r1, r4, r0
 801b854:	428b      	cmp	r3, r1
 801b856:	bf04      	itt	eq
 801b858:	6819      	ldreq	r1, [r3, #0]
 801b85a:	685b      	ldreq	r3, [r3, #4]
 801b85c:	6063      	str	r3, [r4, #4]
 801b85e:	bf04      	itt	eq
 801b860:	1809      	addeq	r1, r1, r0
 801b862:	6021      	streq	r1, [r4, #0]
 801b864:	6054      	str	r4, [r2, #4]
 801b866:	e7ca      	b.n	801b7fe <_free_r+0x22>
 801b868:	bd38      	pop	{r3, r4, r5, pc}
 801b86a:	bf00      	nop
 801b86c:	2000f354 	.word	0x2000f354

0801b870 <_malloc_usable_size_r>:
 801b870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b874:	1f18      	subs	r0, r3, #4
 801b876:	2b00      	cmp	r3, #0
 801b878:	bfbc      	itt	lt
 801b87a:	580b      	ldrlt	r3, [r1, r0]
 801b87c:	18c0      	addlt	r0, r0, r3
 801b87e:	4770      	bx	lr

0801b880 <__ssputs_r>:
 801b880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b884:	688e      	ldr	r6, [r1, #8]
 801b886:	461f      	mov	r7, r3
 801b888:	42be      	cmp	r6, r7
 801b88a:	680b      	ldr	r3, [r1, #0]
 801b88c:	4682      	mov	sl, r0
 801b88e:	460c      	mov	r4, r1
 801b890:	4690      	mov	r8, r2
 801b892:	d82d      	bhi.n	801b8f0 <__ssputs_r+0x70>
 801b894:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b898:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801b89c:	d026      	beq.n	801b8ec <__ssputs_r+0x6c>
 801b89e:	6965      	ldr	r5, [r4, #20]
 801b8a0:	6909      	ldr	r1, [r1, #16]
 801b8a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b8a6:	eba3 0901 	sub.w	r9, r3, r1
 801b8aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b8ae:	1c7b      	adds	r3, r7, #1
 801b8b0:	444b      	add	r3, r9
 801b8b2:	106d      	asrs	r5, r5, #1
 801b8b4:	429d      	cmp	r5, r3
 801b8b6:	bf38      	it	cc
 801b8b8:	461d      	movcc	r5, r3
 801b8ba:	0553      	lsls	r3, r2, #21
 801b8bc:	d527      	bpl.n	801b90e <__ssputs_r+0x8e>
 801b8be:	4629      	mov	r1, r5
 801b8c0:	f7ff fa54 	bl	801ad6c <_malloc_r>
 801b8c4:	4606      	mov	r6, r0
 801b8c6:	b360      	cbz	r0, 801b922 <__ssputs_r+0xa2>
 801b8c8:	6921      	ldr	r1, [r4, #16]
 801b8ca:	464a      	mov	r2, r9
 801b8cc:	f7ff ff4d 	bl	801b76a <memcpy>
 801b8d0:	89a3      	ldrh	r3, [r4, #12]
 801b8d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801b8d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b8da:	81a3      	strh	r3, [r4, #12]
 801b8dc:	6126      	str	r6, [r4, #16]
 801b8de:	6165      	str	r5, [r4, #20]
 801b8e0:	444e      	add	r6, r9
 801b8e2:	eba5 0509 	sub.w	r5, r5, r9
 801b8e6:	6026      	str	r6, [r4, #0]
 801b8e8:	60a5      	str	r5, [r4, #8]
 801b8ea:	463e      	mov	r6, r7
 801b8ec:	42be      	cmp	r6, r7
 801b8ee:	d900      	bls.n	801b8f2 <__ssputs_r+0x72>
 801b8f0:	463e      	mov	r6, r7
 801b8f2:	6820      	ldr	r0, [r4, #0]
 801b8f4:	4632      	mov	r2, r6
 801b8f6:	4641      	mov	r1, r8
 801b8f8:	f7ff fe54 	bl	801b5a4 <memmove>
 801b8fc:	68a3      	ldr	r3, [r4, #8]
 801b8fe:	1b9b      	subs	r3, r3, r6
 801b900:	60a3      	str	r3, [r4, #8]
 801b902:	6823      	ldr	r3, [r4, #0]
 801b904:	4433      	add	r3, r6
 801b906:	6023      	str	r3, [r4, #0]
 801b908:	2000      	movs	r0, #0
 801b90a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b90e:	462a      	mov	r2, r5
 801b910:	f7ff fb2c 	bl	801af6c <_realloc_r>
 801b914:	4606      	mov	r6, r0
 801b916:	2800      	cmp	r0, #0
 801b918:	d1e0      	bne.n	801b8dc <__ssputs_r+0x5c>
 801b91a:	6921      	ldr	r1, [r4, #16]
 801b91c:	4650      	mov	r0, sl
 801b91e:	f7ff ff5d 	bl	801b7dc <_free_r>
 801b922:	230c      	movs	r3, #12
 801b924:	f8ca 3000 	str.w	r3, [sl]
 801b928:	89a3      	ldrh	r3, [r4, #12]
 801b92a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b92e:	81a3      	strh	r3, [r4, #12]
 801b930:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b934:	e7e9      	b.n	801b90a <__ssputs_r+0x8a>
	...

0801b938 <_svfiprintf_r>:
 801b938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b93c:	4698      	mov	r8, r3
 801b93e:	898b      	ldrh	r3, [r1, #12]
 801b940:	061b      	lsls	r3, r3, #24
 801b942:	b09d      	sub	sp, #116	@ 0x74
 801b944:	4607      	mov	r7, r0
 801b946:	460d      	mov	r5, r1
 801b948:	4614      	mov	r4, r2
 801b94a:	d510      	bpl.n	801b96e <_svfiprintf_r+0x36>
 801b94c:	690b      	ldr	r3, [r1, #16]
 801b94e:	b973      	cbnz	r3, 801b96e <_svfiprintf_r+0x36>
 801b950:	2140      	movs	r1, #64	@ 0x40
 801b952:	f7ff fa0b 	bl	801ad6c <_malloc_r>
 801b956:	6028      	str	r0, [r5, #0]
 801b958:	6128      	str	r0, [r5, #16]
 801b95a:	b930      	cbnz	r0, 801b96a <_svfiprintf_r+0x32>
 801b95c:	230c      	movs	r3, #12
 801b95e:	603b      	str	r3, [r7, #0]
 801b960:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b964:	b01d      	add	sp, #116	@ 0x74
 801b966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b96a:	2340      	movs	r3, #64	@ 0x40
 801b96c:	616b      	str	r3, [r5, #20]
 801b96e:	2300      	movs	r3, #0
 801b970:	9309      	str	r3, [sp, #36]	@ 0x24
 801b972:	2320      	movs	r3, #32
 801b974:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b978:	f8cd 800c 	str.w	r8, [sp, #12]
 801b97c:	2330      	movs	r3, #48	@ 0x30
 801b97e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801bb1c <_svfiprintf_r+0x1e4>
 801b982:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b986:	f04f 0901 	mov.w	r9, #1
 801b98a:	4623      	mov	r3, r4
 801b98c:	469a      	mov	sl, r3
 801b98e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b992:	b10a      	cbz	r2, 801b998 <_svfiprintf_r+0x60>
 801b994:	2a25      	cmp	r2, #37	@ 0x25
 801b996:	d1f9      	bne.n	801b98c <_svfiprintf_r+0x54>
 801b998:	ebba 0b04 	subs.w	fp, sl, r4
 801b99c:	d00b      	beq.n	801b9b6 <_svfiprintf_r+0x7e>
 801b99e:	465b      	mov	r3, fp
 801b9a0:	4622      	mov	r2, r4
 801b9a2:	4629      	mov	r1, r5
 801b9a4:	4638      	mov	r0, r7
 801b9a6:	f7ff ff6b 	bl	801b880 <__ssputs_r>
 801b9aa:	3001      	adds	r0, #1
 801b9ac:	f000 80a7 	beq.w	801bafe <_svfiprintf_r+0x1c6>
 801b9b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b9b2:	445a      	add	r2, fp
 801b9b4:	9209      	str	r2, [sp, #36]	@ 0x24
 801b9b6:	f89a 3000 	ldrb.w	r3, [sl]
 801b9ba:	2b00      	cmp	r3, #0
 801b9bc:	f000 809f 	beq.w	801bafe <_svfiprintf_r+0x1c6>
 801b9c0:	2300      	movs	r3, #0
 801b9c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b9c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b9ca:	f10a 0a01 	add.w	sl, sl, #1
 801b9ce:	9304      	str	r3, [sp, #16]
 801b9d0:	9307      	str	r3, [sp, #28]
 801b9d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b9d6:	931a      	str	r3, [sp, #104]	@ 0x68
 801b9d8:	4654      	mov	r4, sl
 801b9da:	2205      	movs	r2, #5
 801b9dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b9e0:	484e      	ldr	r0, [pc, #312]	@ (801bb1c <_svfiprintf_r+0x1e4>)
 801b9e2:	f7e4 fc45 	bl	8000270 <memchr>
 801b9e6:	9a04      	ldr	r2, [sp, #16]
 801b9e8:	b9d8      	cbnz	r0, 801ba22 <_svfiprintf_r+0xea>
 801b9ea:	06d0      	lsls	r0, r2, #27
 801b9ec:	bf44      	itt	mi
 801b9ee:	2320      	movmi	r3, #32
 801b9f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b9f4:	0711      	lsls	r1, r2, #28
 801b9f6:	bf44      	itt	mi
 801b9f8:	232b      	movmi	r3, #43	@ 0x2b
 801b9fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b9fe:	f89a 3000 	ldrb.w	r3, [sl]
 801ba02:	2b2a      	cmp	r3, #42	@ 0x2a
 801ba04:	d015      	beq.n	801ba32 <_svfiprintf_r+0xfa>
 801ba06:	9a07      	ldr	r2, [sp, #28]
 801ba08:	4654      	mov	r4, sl
 801ba0a:	2000      	movs	r0, #0
 801ba0c:	f04f 0c0a 	mov.w	ip, #10
 801ba10:	4621      	mov	r1, r4
 801ba12:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ba16:	3b30      	subs	r3, #48	@ 0x30
 801ba18:	2b09      	cmp	r3, #9
 801ba1a:	d94b      	bls.n	801bab4 <_svfiprintf_r+0x17c>
 801ba1c:	b1b0      	cbz	r0, 801ba4c <_svfiprintf_r+0x114>
 801ba1e:	9207      	str	r2, [sp, #28]
 801ba20:	e014      	b.n	801ba4c <_svfiprintf_r+0x114>
 801ba22:	eba0 0308 	sub.w	r3, r0, r8
 801ba26:	fa09 f303 	lsl.w	r3, r9, r3
 801ba2a:	4313      	orrs	r3, r2
 801ba2c:	9304      	str	r3, [sp, #16]
 801ba2e:	46a2      	mov	sl, r4
 801ba30:	e7d2      	b.n	801b9d8 <_svfiprintf_r+0xa0>
 801ba32:	9b03      	ldr	r3, [sp, #12]
 801ba34:	1d19      	adds	r1, r3, #4
 801ba36:	681b      	ldr	r3, [r3, #0]
 801ba38:	9103      	str	r1, [sp, #12]
 801ba3a:	2b00      	cmp	r3, #0
 801ba3c:	bfbb      	ittet	lt
 801ba3e:	425b      	neglt	r3, r3
 801ba40:	f042 0202 	orrlt.w	r2, r2, #2
 801ba44:	9307      	strge	r3, [sp, #28]
 801ba46:	9307      	strlt	r3, [sp, #28]
 801ba48:	bfb8      	it	lt
 801ba4a:	9204      	strlt	r2, [sp, #16]
 801ba4c:	7823      	ldrb	r3, [r4, #0]
 801ba4e:	2b2e      	cmp	r3, #46	@ 0x2e
 801ba50:	d10a      	bne.n	801ba68 <_svfiprintf_r+0x130>
 801ba52:	7863      	ldrb	r3, [r4, #1]
 801ba54:	2b2a      	cmp	r3, #42	@ 0x2a
 801ba56:	d132      	bne.n	801babe <_svfiprintf_r+0x186>
 801ba58:	9b03      	ldr	r3, [sp, #12]
 801ba5a:	1d1a      	adds	r2, r3, #4
 801ba5c:	681b      	ldr	r3, [r3, #0]
 801ba5e:	9203      	str	r2, [sp, #12]
 801ba60:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ba64:	3402      	adds	r4, #2
 801ba66:	9305      	str	r3, [sp, #20]
 801ba68:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801bb2c <_svfiprintf_r+0x1f4>
 801ba6c:	7821      	ldrb	r1, [r4, #0]
 801ba6e:	2203      	movs	r2, #3
 801ba70:	4650      	mov	r0, sl
 801ba72:	f7e4 fbfd 	bl	8000270 <memchr>
 801ba76:	b138      	cbz	r0, 801ba88 <_svfiprintf_r+0x150>
 801ba78:	9b04      	ldr	r3, [sp, #16]
 801ba7a:	eba0 000a 	sub.w	r0, r0, sl
 801ba7e:	2240      	movs	r2, #64	@ 0x40
 801ba80:	4082      	lsls	r2, r0
 801ba82:	4313      	orrs	r3, r2
 801ba84:	3401      	adds	r4, #1
 801ba86:	9304      	str	r3, [sp, #16]
 801ba88:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ba8c:	4824      	ldr	r0, [pc, #144]	@ (801bb20 <_svfiprintf_r+0x1e8>)
 801ba8e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ba92:	2206      	movs	r2, #6
 801ba94:	f7e4 fbec 	bl	8000270 <memchr>
 801ba98:	2800      	cmp	r0, #0
 801ba9a:	d036      	beq.n	801bb0a <_svfiprintf_r+0x1d2>
 801ba9c:	4b21      	ldr	r3, [pc, #132]	@ (801bb24 <_svfiprintf_r+0x1ec>)
 801ba9e:	bb1b      	cbnz	r3, 801bae8 <_svfiprintf_r+0x1b0>
 801baa0:	9b03      	ldr	r3, [sp, #12]
 801baa2:	3307      	adds	r3, #7
 801baa4:	f023 0307 	bic.w	r3, r3, #7
 801baa8:	3308      	adds	r3, #8
 801baaa:	9303      	str	r3, [sp, #12]
 801baac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801baae:	4433      	add	r3, r6
 801bab0:	9309      	str	r3, [sp, #36]	@ 0x24
 801bab2:	e76a      	b.n	801b98a <_svfiprintf_r+0x52>
 801bab4:	fb0c 3202 	mla	r2, ip, r2, r3
 801bab8:	460c      	mov	r4, r1
 801baba:	2001      	movs	r0, #1
 801babc:	e7a8      	b.n	801ba10 <_svfiprintf_r+0xd8>
 801babe:	2300      	movs	r3, #0
 801bac0:	3401      	adds	r4, #1
 801bac2:	9305      	str	r3, [sp, #20]
 801bac4:	4619      	mov	r1, r3
 801bac6:	f04f 0c0a 	mov.w	ip, #10
 801baca:	4620      	mov	r0, r4
 801bacc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bad0:	3a30      	subs	r2, #48	@ 0x30
 801bad2:	2a09      	cmp	r2, #9
 801bad4:	d903      	bls.n	801bade <_svfiprintf_r+0x1a6>
 801bad6:	2b00      	cmp	r3, #0
 801bad8:	d0c6      	beq.n	801ba68 <_svfiprintf_r+0x130>
 801bada:	9105      	str	r1, [sp, #20]
 801badc:	e7c4      	b.n	801ba68 <_svfiprintf_r+0x130>
 801bade:	fb0c 2101 	mla	r1, ip, r1, r2
 801bae2:	4604      	mov	r4, r0
 801bae4:	2301      	movs	r3, #1
 801bae6:	e7f0      	b.n	801baca <_svfiprintf_r+0x192>
 801bae8:	ab03      	add	r3, sp, #12
 801baea:	9300      	str	r3, [sp, #0]
 801baec:	462a      	mov	r2, r5
 801baee:	4b0e      	ldr	r3, [pc, #56]	@ (801bb28 <_svfiprintf_r+0x1f0>)
 801baf0:	a904      	add	r1, sp, #16
 801baf2:	4638      	mov	r0, r7
 801baf4:	f3af 8000 	nop.w
 801baf8:	1c42      	adds	r2, r0, #1
 801bafa:	4606      	mov	r6, r0
 801bafc:	d1d6      	bne.n	801baac <_svfiprintf_r+0x174>
 801bafe:	89ab      	ldrh	r3, [r5, #12]
 801bb00:	065b      	lsls	r3, r3, #25
 801bb02:	f53f af2d 	bmi.w	801b960 <_svfiprintf_r+0x28>
 801bb06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bb08:	e72c      	b.n	801b964 <_svfiprintf_r+0x2c>
 801bb0a:	ab03      	add	r3, sp, #12
 801bb0c:	9300      	str	r3, [sp, #0]
 801bb0e:	462a      	mov	r2, r5
 801bb10:	4b05      	ldr	r3, [pc, #20]	@ (801bb28 <_svfiprintf_r+0x1f0>)
 801bb12:	a904      	add	r1, sp, #16
 801bb14:	4638      	mov	r0, r7
 801bb16:	f000 f879 	bl	801bc0c <_printf_i>
 801bb1a:	e7ed      	b.n	801baf8 <_svfiprintf_r+0x1c0>
 801bb1c:	0801d833 	.word	0x0801d833
 801bb20:	0801d83d 	.word	0x0801d83d
 801bb24:	00000000 	.word	0x00000000
 801bb28:	0801b881 	.word	0x0801b881
 801bb2c:	0801d839 	.word	0x0801d839

0801bb30 <_printf_common>:
 801bb30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bb34:	4616      	mov	r6, r2
 801bb36:	4698      	mov	r8, r3
 801bb38:	688a      	ldr	r2, [r1, #8]
 801bb3a:	690b      	ldr	r3, [r1, #16]
 801bb3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801bb40:	4293      	cmp	r3, r2
 801bb42:	bfb8      	it	lt
 801bb44:	4613      	movlt	r3, r2
 801bb46:	6033      	str	r3, [r6, #0]
 801bb48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801bb4c:	4607      	mov	r7, r0
 801bb4e:	460c      	mov	r4, r1
 801bb50:	b10a      	cbz	r2, 801bb56 <_printf_common+0x26>
 801bb52:	3301      	adds	r3, #1
 801bb54:	6033      	str	r3, [r6, #0]
 801bb56:	6823      	ldr	r3, [r4, #0]
 801bb58:	0699      	lsls	r1, r3, #26
 801bb5a:	bf42      	ittt	mi
 801bb5c:	6833      	ldrmi	r3, [r6, #0]
 801bb5e:	3302      	addmi	r3, #2
 801bb60:	6033      	strmi	r3, [r6, #0]
 801bb62:	6825      	ldr	r5, [r4, #0]
 801bb64:	f015 0506 	ands.w	r5, r5, #6
 801bb68:	d106      	bne.n	801bb78 <_printf_common+0x48>
 801bb6a:	f104 0a19 	add.w	sl, r4, #25
 801bb6e:	68e3      	ldr	r3, [r4, #12]
 801bb70:	6832      	ldr	r2, [r6, #0]
 801bb72:	1a9b      	subs	r3, r3, r2
 801bb74:	42ab      	cmp	r3, r5
 801bb76:	dc26      	bgt.n	801bbc6 <_printf_common+0x96>
 801bb78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801bb7c:	6822      	ldr	r2, [r4, #0]
 801bb7e:	3b00      	subs	r3, #0
 801bb80:	bf18      	it	ne
 801bb82:	2301      	movne	r3, #1
 801bb84:	0692      	lsls	r2, r2, #26
 801bb86:	d42b      	bmi.n	801bbe0 <_printf_common+0xb0>
 801bb88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801bb8c:	4641      	mov	r1, r8
 801bb8e:	4638      	mov	r0, r7
 801bb90:	47c8      	blx	r9
 801bb92:	3001      	adds	r0, #1
 801bb94:	d01e      	beq.n	801bbd4 <_printf_common+0xa4>
 801bb96:	6823      	ldr	r3, [r4, #0]
 801bb98:	6922      	ldr	r2, [r4, #16]
 801bb9a:	f003 0306 	and.w	r3, r3, #6
 801bb9e:	2b04      	cmp	r3, #4
 801bba0:	bf02      	ittt	eq
 801bba2:	68e5      	ldreq	r5, [r4, #12]
 801bba4:	6833      	ldreq	r3, [r6, #0]
 801bba6:	1aed      	subeq	r5, r5, r3
 801bba8:	68a3      	ldr	r3, [r4, #8]
 801bbaa:	bf0c      	ite	eq
 801bbac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bbb0:	2500      	movne	r5, #0
 801bbb2:	4293      	cmp	r3, r2
 801bbb4:	bfc4      	itt	gt
 801bbb6:	1a9b      	subgt	r3, r3, r2
 801bbb8:	18ed      	addgt	r5, r5, r3
 801bbba:	2600      	movs	r6, #0
 801bbbc:	341a      	adds	r4, #26
 801bbbe:	42b5      	cmp	r5, r6
 801bbc0:	d11a      	bne.n	801bbf8 <_printf_common+0xc8>
 801bbc2:	2000      	movs	r0, #0
 801bbc4:	e008      	b.n	801bbd8 <_printf_common+0xa8>
 801bbc6:	2301      	movs	r3, #1
 801bbc8:	4652      	mov	r2, sl
 801bbca:	4641      	mov	r1, r8
 801bbcc:	4638      	mov	r0, r7
 801bbce:	47c8      	blx	r9
 801bbd0:	3001      	adds	r0, #1
 801bbd2:	d103      	bne.n	801bbdc <_printf_common+0xac>
 801bbd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bbd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bbdc:	3501      	adds	r5, #1
 801bbde:	e7c6      	b.n	801bb6e <_printf_common+0x3e>
 801bbe0:	18e1      	adds	r1, r4, r3
 801bbe2:	1c5a      	adds	r2, r3, #1
 801bbe4:	2030      	movs	r0, #48	@ 0x30
 801bbe6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801bbea:	4422      	add	r2, r4
 801bbec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801bbf0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801bbf4:	3302      	adds	r3, #2
 801bbf6:	e7c7      	b.n	801bb88 <_printf_common+0x58>
 801bbf8:	2301      	movs	r3, #1
 801bbfa:	4622      	mov	r2, r4
 801bbfc:	4641      	mov	r1, r8
 801bbfe:	4638      	mov	r0, r7
 801bc00:	47c8      	blx	r9
 801bc02:	3001      	adds	r0, #1
 801bc04:	d0e6      	beq.n	801bbd4 <_printf_common+0xa4>
 801bc06:	3601      	adds	r6, #1
 801bc08:	e7d9      	b.n	801bbbe <_printf_common+0x8e>
	...

0801bc0c <_printf_i>:
 801bc0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bc10:	7e0f      	ldrb	r7, [r1, #24]
 801bc12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801bc14:	2f78      	cmp	r7, #120	@ 0x78
 801bc16:	4691      	mov	r9, r2
 801bc18:	4680      	mov	r8, r0
 801bc1a:	460c      	mov	r4, r1
 801bc1c:	469a      	mov	sl, r3
 801bc1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801bc22:	d807      	bhi.n	801bc34 <_printf_i+0x28>
 801bc24:	2f62      	cmp	r7, #98	@ 0x62
 801bc26:	d80a      	bhi.n	801bc3e <_printf_i+0x32>
 801bc28:	2f00      	cmp	r7, #0
 801bc2a:	f000 80d1 	beq.w	801bdd0 <_printf_i+0x1c4>
 801bc2e:	2f58      	cmp	r7, #88	@ 0x58
 801bc30:	f000 80b8 	beq.w	801bda4 <_printf_i+0x198>
 801bc34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801bc38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801bc3c:	e03a      	b.n	801bcb4 <_printf_i+0xa8>
 801bc3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801bc42:	2b15      	cmp	r3, #21
 801bc44:	d8f6      	bhi.n	801bc34 <_printf_i+0x28>
 801bc46:	a101      	add	r1, pc, #4	@ (adr r1, 801bc4c <_printf_i+0x40>)
 801bc48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801bc4c:	0801bca5 	.word	0x0801bca5
 801bc50:	0801bcb9 	.word	0x0801bcb9
 801bc54:	0801bc35 	.word	0x0801bc35
 801bc58:	0801bc35 	.word	0x0801bc35
 801bc5c:	0801bc35 	.word	0x0801bc35
 801bc60:	0801bc35 	.word	0x0801bc35
 801bc64:	0801bcb9 	.word	0x0801bcb9
 801bc68:	0801bc35 	.word	0x0801bc35
 801bc6c:	0801bc35 	.word	0x0801bc35
 801bc70:	0801bc35 	.word	0x0801bc35
 801bc74:	0801bc35 	.word	0x0801bc35
 801bc78:	0801bdb7 	.word	0x0801bdb7
 801bc7c:	0801bce3 	.word	0x0801bce3
 801bc80:	0801bd71 	.word	0x0801bd71
 801bc84:	0801bc35 	.word	0x0801bc35
 801bc88:	0801bc35 	.word	0x0801bc35
 801bc8c:	0801bdd9 	.word	0x0801bdd9
 801bc90:	0801bc35 	.word	0x0801bc35
 801bc94:	0801bce3 	.word	0x0801bce3
 801bc98:	0801bc35 	.word	0x0801bc35
 801bc9c:	0801bc35 	.word	0x0801bc35
 801bca0:	0801bd79 	.word	0x0801bd79
 801bca4:	6833      	ldr	r3, [r6, #0]
 801bca6:	1d1a      	adds	r2, r3, #4
 801bca8:	681b      	ldr	r3, [r3, #0]
 801bcaa:	6032      	str	r2, [r6, #0]
 801bcac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801bcb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801bcb4:	2301      	movs	r3, #1
 801bcb6:	e09c      	b.n	801bdf2 <_printf_i+0x1e6>
 801bcb8:	6833      	ldr	r3, [r6, #0]
 801bcba:	6820      	ldr	r0, [r4, #0]
 801bcbc:	1d19      	adds	r1, r3, #4
 801bcbe:	6031      	str	r1, [r6, #0]
 801bcc0:	0606      	lsls	r6, r0, #24
 801bcc2:	d501      	bpl.n	801bcc8 <_printf_i+0xbc>
 801bcc4:	681d      	ldr	r5, [r3, #0]
 801bcc6:	e003      	b.n	801bcd0 <_printf_i+0xc4>
 801bcc8:	0645      	lsls	r5, r0, #25
 801bcca:	d5fb      	bpl.n	801bcc4 <_printf_i+0xb8>
 801bccc:	f9b3 5000 	ldrsh.w	r5, [r3]
 801bcd0:	2d00      	cmp	r5, #0
 801bcd2:	da03      	bge.n	801bcdc <_printf_i+0xd0>
 801bcd4:	232d      	movs	r3, #45	@ 0x2d
 801bcd6:	426d      	negs	r5, r5
 801bcd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bcdc:	4858      	ldr	r0, [pc, #352]	@ (801be40 <_printf_i+0x234>)
 801bcde:	230a      	movs	r3, #10
 801bce0:	e011      	b.n	801bd06 <_printf_i+0xfa>
 801bce2:	6821      	ldr	r1, [r4, #0]
 801bce4:	6833      	ldr	r3, [r6, #0]
 801bce6:	0608      	lsls	r0, r1, #24
 801bce8:	f853 5b04 	ldr.w	r5, [r3], #4
 801bcec:	d402      	bmi.n	801bcf4 <_printf_i+0xe8>
 801bcee:	0649      	lsls	r1, r1, #25
 801bcf0:	bf48      	it	mi
 801bcf2:	b2ad      	uxthmi	r5, r5
 801bcf4:	2f6f      	cmp	r7, #111	@ 0x6f
 801bcf6:	4852      	ldr	r0, [pc, #328]	@ (801be40 <_printf_i+0x234>)
 801bcf8:	6033      	str	r3, [r6, #0]
 801bcfa:	bf14      	ite	ne
 801bcfc:	230a      	movne	r3, #10
 801bcfe:	2308      	moveq	r3, #8
 801bd00:	2100      	movs	r1, #0
 801bd02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801bd06:	6866      	ldr	r6, [r4, #4]
 801bd08:	60a6      	str	r6, [r4, #8]
 801bd0a:	2e00      	cmp	r6, #0
 801bd0c:	db05      	blt.n	801bd1a <_printf_i+0x10e>
 801bd0e:	6821      	ldr	r1, [r4, #0]
 801bd10:	432e      	orrs	r6, r5
 801bd12:	f021 0104 	bic.w	r1, r1, #4
 801bd16:	6021      	str	r1, [r4, #0]
 801bd18:	d04b      	beq.n	801bdb2 <_printf_i+0x1a6>
 801bd1a:	4616      	mov	r6, r2
 801bd1c:	fbb5 f1f3 	udiv	r1, r5, r3
 801bd20:	fb03 5711 	mls	r7, r3, r1, r5
 801bd24:	5dc7      	ldrb	r7, [r0, r7]
 801bd26:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801bd2a:	462f      	mov	r7, r5
 801bd2c:	42bb      	cmp	r3, r7
 801bd2e:	460d      	mov	r5, r1
 801bd30:	d9f4      	bls.n	801bd1c <_printf_i+0x110>
 801bd32:	2b08      	cmp	r3, #8
 801bd34:	d10b      	bne.n	801bd4e <_printf_i+0x142>
 801bd36:	6823      	ldr	r3, [r4, #0]
 801bd38:	07df      	lsls	r7, r3, #31
 801bd3a:	d508      	bpl.n	801bd4e <_printf_i+0x142>
 801bd3c:	6923      	ldr	r3, [r4, #16]
 801bd3e:	6861      	ldr	r1, [r4, #4]
 801bd40:	4299      	cmp	r1, r3
 801bd42:	bfde      	ittt	le
 801bd44:	2330      	movle	r3, #48	@ 0x30
 801bd46:	f806 3c01 	strble.w	r3, [r6, #-1]
 801bd4a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801bd4e:	1b92      	subs	r2, r2, r6
 801bd50:	6122      	str	r2, [r4, #16]
 801bd52:	f8cd a000 	str.w	sl, [sp]
 801bd56:	464b      	mov	r3, r9
 801bd58:	aa03      	add	r2, sp, #12
 801bd5a:	4621      	mov	r1, r4
 801bd5c:	4640      	mov	r0, r8
 801bd5e:	f7ff fee7 	bl	801bb30 <_printf_common>
 801bd62:	3001      	adds	r0, #1
 801bd64:	d14a      	bne.n	801bdfc <_printf_i+0x1f0>
 801bd66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bd6a:	b004      	add	sp, #16
 801bd6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bd70:	6823      	ldr	r3, [r4, #0]
 801bd72:	f043 0320 	orr.w	r3, r3, #32
 801bd76:	6023      	str	r3, [r4, #0]
 801bd78:	4832      	ldr	r0, [pc, #200]	@ (801be44 <_printf_i+0x238>)
 801bd7a:	2778      	movs	r7, #120	@ 0x78
 801bd7c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801bd80:	6823      	ldr	r3, [r4, #0]
 801bd82:	6831      	ldr	r1, [r6, #0]
 801bd84:	061f      	lsls	r7, r3, #24
 801bd86:	f851 5b04 	ldr.w	r5, [r1], #4
 801bd8a:	d402      	bmi.n	801bd92 <_printf_i+0x186>
 801bd8c:	065f      	lsls	r7, r3, #25
 801bd8e:	bf48      	it	mi
 801bd90:	b2ad      	uxthmi	r5, r5
 801bd92:	6031      	str	r1, [r6, #0]
 801bd94:	07d9      	lsls	r1, r3, #31
 801bd96:	bf44      	itt	mi
 801bd98:	f043 0320 	orrmi.w	r3, r3, #32
 801bd9c:	6023      	strmi	r3, [r4, #0]
 801bd9e:	b11d      	cbz	r5, 801bda8 <_printf_i+0x19c>
 801bda0:	2310      	movs	r3, #16
 801bda2:	e7ad      	b.n	801bd00 <_printf_i+0xf4>
 801bda4:	4826      	ldr	r0, [pc, #152]	@ (801be40 <_printf_i+0x234>)
 801bda6:	e7e9      	b.n	801bd7c <_printf_i+0x170>
 801bda8:	6823      	ldr	r3, [r4, #0]
 801bdaa:	f023 0320 	bic.w	r3, r3, #32
 801bdae:	6023      	str	r3, [r4, #0]
 801bdb0:	e7f6      	b.n	801bda0 <_printf_i+0x194>
 801bdb2:	4616      	mov	r6, r2
 801bdb4:	e7bd      	b.n	801bd32 <_printf_i+0x126>
 801bdb6:	6833      	ldr	r3, [r6, #0]
 801bdb8:	6825      	ldr	r5, [r4, #0]
 801bdba:	6961      	ldr	r1, [r4, #20]
 801bdbc:	1d18      	adds	r0, r3, #4
 801bdbe:	6030      	str	r0, [r6, #0]
 801bdc0:	062e      	lsls	r6, r5, #24
 801bdc2:	681b      	ldr	r3, [r3, #0]
 801bdc4:	d501      	bpl.n	801bdca <_printf_i+0x1be>
 801bdc6:	6019      	str	r1, [r3, #0]
 801bdc8:	e002      	b.n	801bdd0 <_printf_i+0x1c4>
 801bdca:	0668      	lsls	r0, r5, #25
 801bdcc:	d5fb      	bpl.n	801bdc6 <_printf_i+0x1ba>
 801bdce:	8019      	strh	r1, [r3, #0]
 801bdd0:	2300      	movs	r3, #0
 801bdd2:	6123      	str	r3, [r4, #16]
 801bdd4:	4616      	mov	r6, r2
 801bdd6:	e7bc      	b.n	801bd52 <_printf_i+0x146>
 801bdd8:	6833      	ldr	r3, [r6, #0]
 801bdda:	1d1a      	adds	r2, r3, #4
 801bddc:	6032      	str	r2, [r6, #0]
 801bdde:	681e      	ldr	r6, [r3, #0]
 801bde0:	6862      	ldr	r2, [r4, #4]
 801bde2:	2100      	movs	r1, #0
 801bde4:	4630      	mov	r0, r6
 801bde6:	f7e4 fa43 	bl	8000270 <memchr>
 801bdea:	b108      	cbz	r0, 801bdf0 <_printf_i+0x1e4>
 801bdec:	1b80      	subs	r0, r0, r6
 801bdee:	6060      	str	r0, [r4, #4]
 801bdf0:	6863      	ldr	r3, [r4, #4]
 801bdf2:	6123      	str	r3, [r4, #16]
 801bdf4:	2300      	movs	r3, #0
 801bdf6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bdfa:	e7aa      	b.n	801bd52 <_printf_i+0x146>
 801bdfc:	6923      	ldr	r3, [r4, #16]
 801bdfe:	4632      	mov	r2, r6
 801be00:	4649      	mov	r1, r9
 801be02:	4640      	mov	r0, r8
 801be04:	47d0      	blx	sl
 801be06:	3001      	adds	r0, #1
 801be08:	d0ad      	beq.n	801bd66 <_printf_i+0x15a>
 801be0a:	6823      	ldr	r3, [r4, #0]
 801be0c:	079b      	lsls	r3, r3, #30
 801be0e:	d413      	bmi.n	801be38 <_printf_i+0x22c>
 801be10:	68e0      	ldr	r0, [r4, #12]
 801be12:	9b03      	ldr	r3, [sp, #12]
 801be14:	4298      	cmp	r0, r3
 801be16:	bfb8      	it	lt
 801be18:	4618      	movlt	r0, r3
 801be1a:	e7a6      	b.n	801bd6a <_printf_i+0x15e>
 801be1c:	2301      	movs	r3, #1
 801be1e:	4632      	mov	r2, r6
 801be20:	4649      	mov	r1, r9
 801be22:	4640      	mov	r0, r8
 801be24:	47d0      	blx	sl
 801be26:	3001      	adds	r0, #1
 801be28:	d09d      	beq.n	801bd66 <_printf_i+0x15a>
 801be2a:	3501      	adds	r5, #1
 801be2c:	68e3      	ldr	r3, [r4, #12]
 801be2e:	9903      	ldr	r1, [sp, #12]
 801be30:	1a5b      	subs	r3, r3, r1
 801be32:	42ab      	cmp	r3, r5
 801be34:	dcf2      	bgt.n	801be1c <_printf_i+0x210>
 801be36:	e7eb      	b.n	801be10 <_printf_i+0x204>
 801be38:	2500      	movs	r5, #0
 801be3a:	f104 0619 	add.w	r6, r4, #25
 801be3e:	e7f5      	b.n	801be2c <_printf_i+0x220>
 801be40:	0801d844 	.word	0x0801d844
 801be44:	0801d855 	.word	0x0801d855

0801be48 <__sflush_r>:
 801be48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801be4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be50:	0716      	lsls	r6, r2, #28
 801be52:	4605      	mov	r5, r0
 801be54:	460c      	mov	r4, r1
 801be56:	d454      	bmi.n	801bf02 <__sflush_r+0xba>
 801be58:	684b      	ldr	r3, [r1, #4]
 801be5a:	2b00      	cmp	r3, #0
 801be5c:	dc02      	bgt.n	801be64 <__sflush_r+0x1c>
 801be5e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801be60:	2b00      	cmp	r3, #0
 801be62:	dd48      	ble.n	801bef6 <__sflush_r+0xae>
 801be64:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801be66:	2e00      	cmp	r6, #0
 801be68:	d045      	beq.n	801bef6 <__sflush_r+0xae>
 801be6a:	2300      	movs	r3, #0
 801be6c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801be70:	682f      	ldr	r7, [r5, #0]
 801be72:	6a21      	ldr	r1, [r4, #32]
 801be74:	602b      	str	r3, [r5, #0]
 801be76:	d030      	beq.n	801beda <__sflush_r+0x92>
 801be78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801be7a:	89a3      	ldrh	r3, [r4, #12]
 801be7c:	0759      	lsls	r1, r3, #29
 801be7e:	d505      	bpl.n	801be8c <__sflush_r+0x44>
 801be80:	6863      	ldr	r3, [r4, #4]
 801be82:	1ad2      	subs	r2, r2, r3
 801be84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801be86:	b10b      	cbz	r3, 801be8c <__sflush_r+0x44>
 801be88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801be8a:	1ad2      	subs	r2, r2, r3
 801be8c:	2300      	movs	r3, #0
 801be8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801be90:	6a21      	ldr	r1, [r4, #32]
 801be92:	4628      	mov	r0, r5
 801be94:	47b0      	blx	r6
 801be96:	1c43      	adds	r3, r0, #1
 801be98:	89a3      	ldrh	r3, [r4, #12]
 801be9a:	d106      	bne.n	801beaa <__sflush_r+0x62>
 801be9c:	6829      	ldr	r1, [r5, #0]
 801be9e:	291d      	cmp	r1, #29
 801bea0:	d82b      	bhi.n	801befa <__sflush_r+0xb2>
 801bea2:	4a2a      	ldr	r2, [pc, #168]	@ (801bf4c <__sflush_r+0x104>)
 801bea4:	40ca      	lsrs	r2, r1
 801bea6:	07d6      	lsls	r6, r2, #31
 801bea8:	d527      	bpl.n	801befa <__sflush_r+0xb2>
 801beaa:	2200      	movs	r2, #0
 801beac:	6062      	str	r2, [r4, #4]
 801beae:	04d9      	lsls	r1, r3, #19
 801beb0:	6922      	ldr	r2, [r4, #16]
 801beb2:	6022      	str	r2, [r4, #0]
 801beb4:	d504      	bpl.n	801bec0 <__sflush_r+0x78>
 801beb6:	1c42      	adds	r2, r0, #1
 801beb8:	d101      	bne.n	801bebe <__sflush_r+0x76>
 801beba:	682b      	ldr	r3, [r5, #0]
 801bebc:	b903      	cbnz	r3, 801bec0 <__sflush_r+0x78>
 801bebe:	6560      	str	r0, [r4, #84]	@ 0x54
 801bec0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801bec2:	602f      	str	r7, [r5, #0]
 801bec4:	b1b9      	cbz	r1, 801bef6 <__sflush_r+0xae>
 801bec6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801beca:	4299      	cmp	r1, r3
 801becc:	d002      	beq.n	801bed4 <__sflush_r+0x8c>
 801bece:	4628      	mov	r0, r5
 801bed0:	f7ff fc84 	bl	801b7dc <_free_r>
 801bed4:	2300      	movs	r3, #0
 801bed6:	6363      	str	r3, [r4, #52]	@ 0x34
 801bed8:	e00d      	b.n	801bef6 <__sflush_r+0xae>
 801beda:	2301      	movs	r3, #1
 801bedc:	4628      	mov	r0, r5
 801bede:	47b0      	blx	r6
 801bee0:	4602      	mov	r2, r0
 801bee2:	1c50      	adds	r0, r2, #1
 801bee4:	d1c9      	bne.n	801be7a <__sflush_r+0x32>
 801bee6:	682b      	ldr	r3, [r5, #0]
 801bee8:	2b00      	cmp	r3, #0
 801beea:	d0c6      	beq.n	801be7a <__sflush_r+0x32>
 801beec:	2b1d      	cmp	r3, #29
 801beee:	d001      	beq.n	801bef4 <__sflush_r+0xac>
 801bef0:	2b16      	cmp	r3, #22
 801bef2:	d11e      	bne.n	801bf32 <__sflush_r+0xea>
 801bef4:	602f      	str	r7, [r5, #0]
 801bef6:	2000      	movs	r0, #0
 801bef8:	e022      	b.n	801bf40 <__sflush_r+0xf8>
 801befa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801befe:	b21b      	sxth	r3, r3
 801bf00:	e01b      	b.n	801bf3a <__sflush_r+0xf2>
 801bf02:	690f      	ldr	r7, [r1, #16]
 801bf04:	2f00      	cmp	r7, #0
 801bf06:	d0f6      	beq.n	801bef6 <__sflush_r+0xae>
 801bf08:	0793      	lsls	r3, r2, #30
 801bf0a:	680e      	ldr	r6, [r1, #0]
 801bf0c:	bf08      	it	eq
 801bf0e:	694b      	ldreq	r3, [r1, #20]
 801bf10:	600f      	str	r7, [r1, #0]
 801bf12:	bf18      	it	ne
 801bf14:	2300      	movne	r3, #0
 801bf16:	eba6 0807 	sub.w	r8, r6, r7
 801bf1a:	608b      	str	r3, [r1, #8]
 801bf1c:	f1b8 0f00 	cmp.w	r8, #0
 801bf20:	dde9      	ble.n	801bef6 <__sflush_r+0xae>
 801bf22:	6a21      	ldr	r1, [r4, #32]
 801bf24:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801bf26:	4643      	mov	r3, r8
 801bf28:	463a      	mov	r2, r7
 801bf2a:	4628      	mov	r0, r5
 801bf2c:	47b0      	blx	r6
 801bf2e:	2800      	cmp	r0, #0
 801bf30:	dc08      	bgt.n	801bf44 <__sflush_r+0xfc>
 801bf32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bf36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bf3a:	81a3      	strh	r3, [r4, #12]
 801bf3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bf40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf44:	4407      	add	r7, r0
 801bf46:	eba8 0800 	sub.w	r8, r8, r0
 801bf4a:	e7e7      	b.n	801bf1c <__sflush_r+0xd4>
 801bf4c:	20400001 	.word	0x20400001

0801bf50 <_fflush_r>:
 801bf50:	b538      	push	{r3, r4, r5, lr}
 801bf52:	690b      	ldr	r3, [r1, #16]
 801bf54:	4605      	mov	r5, r0
 801bf56:	460c      	mov	r4, r1
 801bf58:	b913      	cbnz	r3, 801bf60 <_fflush_r+0x10>
 801bf5a:	2500      	movs	r5, #0
 801bf5c:	4628      	mov	r0, r5
 801bf5e:	bd38      	pop	{r3, r4, r5, pc}
 801bf60:	b118      	cbz	r0, 801bf6a <_fflush_r+0x1a>
 801bf62:	6a03      	ldr	r3, [r0, #32]
 801bf64:	b90b      	cbnz	r3, 801bf6a <_fflush_r+0x1a>
 801bf66:	f7ff f933 	bl	801b1d0 <__sinit>
 801bf6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bf6e:	2b00      	cmp	r3, #0
 801bf70:	d0f3      	beq.n	801bf5a <_fflush_r+0xa>
 801bf72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801bf74:	07d0      	lsls	r0, r2, #31
 801bf76:	d404      	bmi.n	801bf82 <_fflush_r+0x32>
 801bf78:	0599      	lsls	r1, r3, #22
 801bf7a:	d402      	bmi.n	801bf82 <_fflush_r+0x32>
 801bf7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bf7e:	f7ff fbea 	bl	801b756 <__retarget_lock_acquire_recursive>
 801bf82:	4628      	mov	r0, r5
 801bf84:	4621      	mov	r1, r4
 801bf86:	f7ff ff5f 	bl	801be48 <__sflush_r>
 801bf8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801bf8c:	07da      	lsls	r2, r3, #31
 801bf8e:	4605      	mov	r5, r0
 801bf90:	d4e4      	bmi.n	801bf5c <_fflush_r+0xc>
 801bf92:	89a3      	ldrh	r3, [r4, #12]
 801bf94:	059b      	lsls	r3, r3, #22
 801bf96:	d4e1      	bmi.n	801bf5c <_fflush_r+0xc>
 801bf98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bf9a:	f7ff fbdd 	bl	801b758 <__retarget_lock_release_recursive>
 801bf9e:	e7dd      	b.n	801bf5c <_fflush_r+0xc>

0801bfa0 <fiprintf>:
 801bfa0:	b40e      	push	{r1, r2, r3}
 801bfa2:	b503      	push	{r0, r1, lr}
 801bfa4:	4601      	mov	r1, r0
 801bfa6:	ab03      	add	r3, sp, #12
 801bfa8:	4805      	ldr	r0, [pc, #20]	@ (801bfc0 <fiprintf+0x20>)
 801bfaa:	f853 2b04 	ldr.w	r2, [r3], #4
 801bfae:	6800      	ldr	r0, [r0, #0]
 801bfb0:	9301      	str	r3, [sp, #4]
 801bfb2:	f000 f8bb 	bl	801c12c <_vfiprintf_r>
 801bfb6:	b002      	add	sp, #8
 801bfb8:	f85d eb04 	ldr.w	lr, [sp], #4
 801bfbc:	b003      	add	sp, #12
 801bfbe:	4770      	bx	lr
 801bfc0:	200008f4 	.word	0x200008f4

0801bfc4 <__swhatbuf_r>:
 801bfc4:	b570      	push	{r4, r5, r6, lr}
 801bfc6:	460c      	mov	r4, r1
 801bfc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bfcc:	2900      	cmp	r1, #0
 801bfce:	b096      	sub	sp, #88	@ 0x58
 801bfd0:	4615      	mov	r5, r2
 801bfd2:	461e      	mov	r6, r3
 801bfd4:	da0d      	bge.n	801bff2 <__swhatbuf_r+0x2e>
 801bfd6:	89a3      	ldrh	r3, [r4, #12]
 801bfd8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801bfdc:	f04f 0100 	mov.w	r1, #0
 801bfe0:	bf14      	ite	ne
 801bfe2:	2340      	movne	r3, #64	@ 0x40
 801bfe4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801bfe8:	2000      	movs	r0, #0
 801bfea:	6031      	str	r1, [r6, #0]
 801bfec:	602b      	str	r3, [r5, #0]
 801bfee:	b016      	add	sp, #88	@ 0x58
 801bff0:	bd70      	pop	{r4, r5, r6, pc}
 801bff2:	466a      	mov	r2, sp
 801bff4:	f000 f848 	bl	801c088 <_fstat_r>
 801bff8:	2800      	cmp	r0, #0
 801bffa:	dbec      	blt.n	801bfd6 <__swhatbuf_r+0x12>
 801bffc:	9901      	ldr	r1, [sp, #4]
 801bffe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801c002:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801c006:	4259      	negs	r1, r3
 801c008:	4159      	adcs	r1, r3
 801c00a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c00e:	e7eb      	b.n	801bfe8 <__swhatbuf_r+0x24>

0801c010 <__smakebuf_r>:
 801c010:	898b      	ldrh	r3, [r1, #12]
 801c012:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c014:	079d      	lsls	r5, r3, #30
 801c016:	4606      	mov	r6, r0
 801c018:	460c      	mov	r4, r1
 801c01a:	d507      	bpl.n	801c02c <__smakebuf_r+0x1c>
 801c01c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801c020:	6023      	str	r3, [r4, #0]
 801c022:	6123      	str	r3, [r4, #16]
 801c024:	2301      	movs	r3, #1
 801c026:	6163      	str	r3, [r4, #20]
 801c028:	b003      	add	sp, #12
 801c02a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c02c:	ab01      	add	r3, sp, #4
 801c02e:	466a      	mov	r2, sp
 801c030:	f7ff ffc8 	bl	801bfc4 <__swhatbuf_r>
 801c034:	9f00      	ldr	r7, [sp, #0]
 801c036:	4605      	mov	r5, r0
 801c038:	4639      	mov	r1, r7
 801c03a:	4630      	mov	r0, r6
 801c03c:	f7fe fe96 	bl	801ad6c <_malloc_r>
 801c040:	b948      	cbnz	r0, 801c056 <__smakebuf_r+0x46>
 801c042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c046:	059a      	lsls	r2, r3, #22
 801c048:	d4ee      	bmi.n	801c028 <__smakebuf_r+0x18>
 801c04a:	f023 0303 	bic.w	r3, r3, #3
 801c04e:	f043 0302 	orr.w	r3, r3, #2
 801c052:	81a3      	strh	r3, [r4, #12]
 801c054:	e7e2      	b.n	801c01c <__smakebuf_r+0xc>
 801c056:	89a3      	ldrh	r3, [r4, #12]
 801c058:	6020      	str	r0, [r4, #0]
 801c05a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c05e:	81a3      	strh	r3, [r4, #12]
 801c060:	9b01      	ldr	r3, [sp, #4]
 801c062:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801c066:	b15b      	cbz	r3, 801c080 <__smakebuf_r+0x70>
 801c068:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c06c:	4630      	mov	r0, r6
 801c06e:	f000 f81d 	bl	801c0ac <_isatty_r>
 801c072:	b128      	cbz	r0, 801c080 <__smakebuf_r+0x70>
 801c074:	89a3      	ldrh	r3, [r4, #12]
 801c076:	f023 0303 	bic.w	r3, r3, #3
 801c07a:	f043 0301 	orr.w	r3, r3, #1
 801c07e:	81a3      	strh	r3, [r4, #12]
 801c080:	89a3      	ldrh	r3, [r4, #12]
 801c082:	431d      	orrs	r5, r3
 801c084:	81a5      	strh	r5, [r4, #12]
 801c086:	e7cf      	b.n	801c028 <__smakebuf_r+0x18>

0801c088 <_fstat_r>:
 801c088:	b538      	push	{r3, r4, r5, lr}
 801c08a:	4d07      	ldr	r5, [pc, #28]	@ (801c0a8 <_fstat_r+0x20>)
 801c08c:	2300      	movs	r3, #0
 801c08e:	4604      	mov	r4, r0
 801c090:	4608      	mov	r0, r1
 801c092:	4611      	mov	r1, r2
 801c094:	602b      	str	r3, [r5, #0]
 801c096:	f7e7 fe47 	bl	8003d28 <_fstat>
 801c09a:	1c43      	adds	r3, r0, #1
 801c09c:	d102      	bne.n	801c0a4 <_fstat_r+0x1c>
 801c09e:	682b      	ldr	r3, [r5, #0]
 801c0a0:	b103      	cbz	r3, 801c0a4 <_fstat_r+0x1c>
 801c0a2:	6023      	str	r3, [r4, #0]
 801c0a4:	bd38      	pop	{r3, r4, r5, pc}
 801c0a6:	bf00      	nop
 801c0a8:	2000f494 	.word	0x2000f494

0801c0ac <_isatty_r>:
 801c0ac:	b538      	push	{r3, r4, r5, lr}
 801c0ae:	4d06      	ldr	r5, [pc, #24]	@ (801c0c8 <_isatty_r+0x1c>)
 801c0b0:	2300      	movs	r3, #0
 801c0b2:	4604      	mov	r4, r0
 801c0b4:	4608      	mov	r0, r1
 801c0b6:	602b      	str	r3, [r5, #0]
 801c0b8:	f7e7 fe46 	bl	8003d48 <_isatty>
 801c0bc:	1c43      	adds	r3, r0, #1
 801c0be:	d102      	bne.n	801c0c6 <_isatty_r+0x1a>
 801c0c0:	682b      	ldr	r3, [r5, #0]
 801c0c2:	b103      	cbz	r3, 801c0c6 <_isatty_r+0x1a>
 801c0c4:	6023      	str	r3, [r4, #0]
 801c0c6:	bd38      	pop	{r3, r4, r5, pc}
 801c0c8:	2000f494 	.word	0x2000f494

0801c0cc <abort>:
 801c0cc:	b508      	push	{r3, lr}
 801c0ce:	2006      	movs	r0, #6
 801c0d0:	f000 f96c 	bl	801c3ac <raise>
 801c0d4:	2001      	movs	r0, #1
 801c0d6:	f7e7 fdd7 	bl	8003c88 <_exit>

0801c0da <__sfputc_r>:
 801c0da:	6893      	ldr	r3, [r2, #8]
 801c0dc:	3b01      	subs	r3, #1
 801c0de:	2b00      	cmp	r3, #0
 801c0e0:	b410      	push	{r4}
 801c0e2:	6093      	str	r3, [r2, #8]
 801c0e4:	da08      	bge.n	801c0f8 <__sfputc_r+0x1e>
 801c0e6:	6994      	ldr	r4, [r2, #24]
 801c0e8:	42a3      	cmp	r3, r4
 801c0ea:	db01      	blt.n	801c0f0 <__sfputc_r+0x16>
 801c0ec:	290a      	cmp	r1, #10
 801c0ee:	d103      	bne.n	801c0f8 <__sfputc_r+0x1e>
 801c0f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c0f4:	f7ff b9b2 	b.w	801b45c <__swbuf_r>
 801c0f8:	6813      	ldr	r3, [r2, #0]
 801c0fa:	1c58      	adds	r0, r3, #1
 801c0fc:	6010      	str	r0, [r2, #0]
 801c0fe:	7019      	strb	r1, [r3, #0]
 801c100:	4608      	mov	r0, r1
 801c102:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c106:	4770      	bx	lr

0801c108 <__sfputs_r>:
 801c108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c10a:	4606      	mov	r6, r0
 801c10c:	460f      	mov	r7, r1
 801c10e:	4614      	mov	r4, r2
 801c110:	18d5      	adds	r5, r2, r3
 801c112:	42ac      	cmp	r4, r5
 801c114:	d101      	bne.n	801c11a <__sfputs_r+0x12>
 801c116:	2000      	movs	r0, #0
 801c118:	e007      	b.n	801c12a <__sfputs_r+0x22>
 801c11a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c11e:	463a      	mov	r2, r7
 801c120:	4630      	mov	r0, r6
 801c122:	f7ff ffda 	bl	801c0da <__sfputc_r>
 801c126:	1c43      	adds	r3, r0, #1
 801c128:	d1f3      	bne.n	801c112 <__sfputs_r+0xa>
 801c12a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801c12c <_vfiprintf_r>:
 801c12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c130:	460d      	mov	r5, r1
 801c132:	b09d      	sub	sp, #116	@ 0x74
 801c134:	4614      	mov	r4, r2
 801c136:	4698      	mov	r8, r3
 801c138:	4606      	mov	r6, r0
 801c13a:	b118      	cbz	r0, 801c144 <_vfiprintf_r+0x18>
 801c13c:	6a03      	ldr	r3, [r0, #32]
 801c13e:	b90b      	cbnz	r3, 801c144 <_vfiprintf_r+0x18>
 801c140:	f7ff f846 	bl	801b1d0 <__sinit>
 801c144:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c146:	07d9      	lsls	r1, r3, #31
 801c148:	d405      	bmi.n	801c156 <_vfiprintf_r+0x2a>
 801c14a:	89ab      	ldrh	r3, [r5, #12]
 801c14c:	059a      	lsls	r2, r3, #22
 801c14e:	d402      	bmi.n	801c156 <_vfiprintf_r+0x2a>
 801c150:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c152:	f7ff fb00 	bl	801b756 <__retarget_lock_acquire_recursive>
 801c156:	89ab      	ldrh	r3, [r5, #12]
 801c158:	071b      	lsls	r3, r3, #28
 801c15a:	d501      	bpl.n	801c160 <_vfiprintf_r+0x34>
 801c15c:	692b      	ldr	r3, [r5, #16]
 801c15e:	b99b      	cbnz	r3, 801c188 <_vfiprintf_r+0x5c>
 801c160:	4629      	mov	r1, r5
 801c162:	4630      	mov	r0, r6
 801c164:	f7ff f9b8 	bl	801b4d8 <__swsetup_r>
 801c168:	b170      	cbz	r0, 801c188 <_vfiprintf_r+0x5c>
 801c16a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c16c:	07dc      	lsls	r4, r3, #31
 801c16e:	d504      	bpl.n	801c17a <_vfiprintf_r+0x4e>
 801c170:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c174:	b01d      	add	sp, #116	@ 0x74
 801c176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c17a:	89ab      	ldrh	r3, [r5, #12]
 801c17c:	0598      	lsls	r0, r3, #22
 801c17e:	d4f7      	bmi.n	801c170 <_vfiprintf_r+0x44>
 801c180:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c182:	f7ff fae9 	bl	801b758 <__retarget_lock_release_recursive>
 801c186:	e7f3      	b.n	801c170 <_vfiprintf_r+0x44>
 801c188:	2300      	movs	r3, #0
 801c18a:	9309      	str	r3, [sp, #36]	@ 0x24
 801c18c:	2320      	movs	r3, #32
 801c18e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c192:	f8cd 800c 	str.w	r8, [sp, #12]
 801c196:	2330      	movs	r3, #48	@ 0x30
 801c198:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801c348 <_vfiprintf_r+0x21c>
 801c19c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c1a0:	f04f 0901 	mov.w	r9, #1
 801c1a4:	4623      	mov	r3, r4
 801c1a6:	469a      	mov	sl, r3
 801c1a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c1ac:	b10a      	cbz	r2, 801c1b2 <_vfiprintf_r+0x86>
 801c1ae:	2a25      	cmp	r2, #37	@ 0x25
 801c1b0:	d1f9      	bne.n	801c1a6 <_vfiprintf_r+0x7a>
 801c1b2:	ebba 0b04 	subs.w	fp, sl, r4
 801c1b6:	d00b      	beq.n	801c1d0 <_vfiprintf_r+0xa4>
 801c1b8:	465b      	mov	r3, fp
 801c1ba:	4622      	mov	r2, r4
 801c1bc:	4629      	mov	r1, r5
 801c1be:	4630      	mov	r0, r6
 801c1c0:	f7ff ffa2 	bl	801c108 <__sfputs_r>
 801c1c4:	3001      	adds	r0, #1
 801c1c6:	f000 80a7 	beq.w	801c318 <_vfiprintf_r+0x1ec>
 801c1ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c1cc:	445a      	add	r2, fp
 801c1ce:	9209      	str	r2, [sp, #36]	@ 0x24
 801c1d0:	f89a 3000 	ldrb.w	r3, [sl]
 801c1d4:	2b00      	cmp	r3, #0
 801c1d6:	f000 809f 	beq.w	801c318 <_vfiprintf_r+0x1ec>
 801c1da:	2300      	movs	r3, #0
 801c1dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c1e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c1e4:	f10a 0a01 	add.w	sl, sl, #1
 801c1e8:	9304      	str	r3, [sp, #16]
 801c1ea:	9307      	str	r3, [sp, #28]
 801c1ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c1f0:	931a      	str	r3, [sp, #104]	@ 0x68
 801c1f2:	4654      	mov	r4, sl
 801c1f4:	2205      	movs	r2, #5
 801c1f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c1fa:	4853      	ldr	r0, [pc, #332]	@ (801c348 <_vfiprintf_r+0x21c>)
 801c1fc:	f7e4 f838 	bl	8000270 <memchr>
 801c200:	9a04      	ldr	r2, [sp, #16]
 801c202:	b9d8      	cbnz	r0, 801c23c <_vfiprintf_r+0x110>
 801c204:	06d1      	lsls	r1, r2, #27
 801c206:	bf44      	itt	mi
 801c208:	2320      	movmi	r3, #32
 801c20a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c20e:	0713      	lsls	r3, r2, #28
 801c210:	bf44      	itt	mi
 801c212:	232b      	movmi	r3, #43	@ 0x2b
 801c214:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c218:	f89a 3000 	ldrb.w	r3, [sl]
 801c21c:	2b2a      	cmp	r3, #42	@ 0x2a
 801c21e:	d015      	beq.n	801c24c <_vfiprintf_r+0x120>
 801c220:	9a07      	ldr	r2, [sp, #28]
 801c222:	4654      	mov	r4, sl
 801c224:	2000      	movs	r0, #0
 801c226:	f04f 0c0a 	mov.w	ip, #10
 801c22a:	4621      	mov	r1, r4
 801c22c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c230:	3b30      	subs	r3, #48	@ 0x30
 801c232:	2b09      	cmp	r3, #9
 801c234:	d94b      	bls.n	801c2ce <_vfiprintf_r+0x1a2>
 801c236:	b1b0      	cbz	r0, 801c266 <_vfiprintf_r+0x13a>
 801c238:	9207      	str	r2, [sp, #28]
 801c23a:	e014      	b.n	801c266 <_vfiprintf_r+0x13a>
 801c23c:	eba0 0308 	sub.w	r3, r0, r8
 801c240:	fa09 f303 	lsl.w	r3, r9, r3
 801c244:	4313      	orrs	r3, r2
 801c246:	9304      	str	r3, [sp, #16]
 801c248:	46a2      	mov	sl, r4
 801c24a:	e7d2      	b.n	801c1f2 <_vfiprintf_r+0xc6>
 801c24c:	9b03      	ldr	r3, [sp, #12]
 801c24e:	1d19      	adds	r1, r3, #4
 801c250:	681b      	ldr	r3, [r3, #0]
 801c252:	9103      	str	r1, [sp, #12]
 801c254:	2b00      	cmp	r3, #0
 801c256:	bfbb      	ittet	lt
 801c258:	425b      	neglt	r3, r3
 801c25a:	f042 0202 	orrlt.w	r2, r2, #2
 801c25e:	9307      	strge	r3, [sp, #28]
 801c260:	9307      	strlt	r3, [sp, #28]
 801c262:	bfb8      	it	lt
 801c264:	9204      	strlt	r2, [sp, #16]
 801c266:	7823      	ldrb	r3, [r4, #0]
 801c268:	2b2e      	cmp	r3, #46	@ 0x2e
 801c26a:	d10a      	bne.n	801c282 <_vfiprintf_r+0x156>
 801c26c:	7863      	ldrb	r3, [r4, #1]
 801c26e:	2b2a      	cmp	r3, #42	@ 0x2a
 801c270:	d132      	bne.n	801c2d8 <_vfiprintf_r+0x1ac>
 801c272:	9b03      	ldr	r3, [sp, #12]
 801c274:	1d1a      	adds	r2, r3, #4
 801c276:	681b      	ldr	r3, [r3, #0]
 801c278:	9203      	str	r2, [sp, #12]
 801c27a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c27e:	3402      	adds	r4, #2
 801c280:	9305      	str	r3, [sp, #20]
 801c282:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801c358 <_vfiprintf_r+0x22c>
 801c286:	7821      	ldrb	r1, [r4, #0]
 801c288:	2203      	movs	r2, #3
 801c28a:	4650      	mov	r0, sl
 801c28c:	f7e3 fff0 	bl	8000270 <memchr>
 801c290:	b138      	cbz	r0, 801c2a2 <_vfiprintf_r+0x176>
 801c292:	9b04      	ldr	r3, [sp, #16]
 801c294:	eba0 000a 	sub.w	r0, r0, sl
 801c298:	2240      	movs	r2, #64	@ 0x40
 801c29a:	4082      	lsls	r2, r0
 801c29c:	4313      	orrs	r3, r2
 801c29e:	3401      	adds	r4, #1
 801c2a0:	9304      	str	r3, [sp, #16]
 801c2a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c2a6:	4829      	ldr	r0, [pc, #164]	@ (801c34c <_vfiprintf_r+0x220>)
 801c2a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c2ac:	2206      	movs	r2, #6
 801c2ae:	f7e3 ffdf 	bl	8000270 <memchr>
 801c2b2:	2800      	cmp	r0, #0
 801c2b4:	d03f      	beq.n	801c336 <_vfiprintf_r+0x20a>
 801c2b6:	4b26      	ldr	r3, [pc, #152]	@ (801c350 <_vfiprintf_r+0x224>)
 801c2b8:	bb1b      	cbnz	r3, 801c302 <_vfiprintf_r+0x1d6>
 801c2ba:	9b03      	ldr	r3, [sp, #12]
 801c2bc:	3307      	adds	r3, #7
 801c2be:	f023 0307 	bic.w	r3, r3, #7
 801c2c2:	3308      	adds	r3, #8
 801c2c4:	9303      	str	r3, [sp, #12]
 801c2c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c2c8:	443b      	add	r3, r7
 801c2ca:	9309      	str	r3, [sp, #36]	@ 0x24
 801c2cc:	e76a      	b.n	801c1a4 <_vfiprintf_r+0x78>
 801c2ce:	fb0c 3202 	mla	r2, ip, r2, r3
 801c2d2:	460c      	mov	r4, r1
 801c2d4:	2001      	movs	r0, #1
 801c2d6:	e7a8      	b.n	801c22a <_vfiprintf_r+0xfe>
 801c2d8:	2300      	movs	r3, #0
 801c2da:	3401      	adds	r4, #1
 801c2dc:	9305      	str	r3, [sp, #20]
 801c2de:	4619      	mov	r1, r3
 801c2e0:	f04f 0c0a 	mov.w	ip, #10
 801c2e4:	4620      	mov	r0, r4
 801c2e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c2ea:	3a30      	subs	r2, #48	@ 0x30
 801c2ec:	2a09      	cmp	r2, #9
 801c2ee:	d903      	bls.n	801c2f8 <_vfiprintf_r+0x1cc>
 801c2f0:	2b00      	cmp	r3, #0
 801c2f2:	d0c6      	beq.n	801c282 <_vfiprintf_r+0x156>
 801c2f4:	9105      	str	r1, [sp, #20]
 801c2f6:	e7c4      	b.n	801c282 <_vfiprintf_r+0x156>
 801c2f8:	fb0c 2101 	mla	r1, ip, r1, r2
 801c2fc:	4604      	mov	r4, r0
 801c2fe:	2301      	movs	r3, #1
 801c300:	e7f0      	b.n	801c2e4 <_vfiprintf_r+0x1b8>
 801c302:	ab03      	add	r3, sp, #12
 801c304:	9300      	str	r3, [sp, #0]
 801c306:	462a      	mov	r2, r5
 801c308:	4b12      	ldr	r3, [pc, #72]	@ (801c354 <_vfiprintf_r+0x228>)
 801c30a:	a904      	add	r1, sp, #16
 801c30c:	4630      	mov	r0, r6
 801c30e:	f3af 8000 	nop.w
 801c312:	4607      	mov	r7, r0
 801c314:	1c78      	adds	r0, r7, #1
 801c316:	d1d6      	bne.n	801c2c6 <_vfiprintf_r+0x19a>
 801c318:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c31a:	07d9      	lsls	r1, r3, #31
 801c31c:	d405      	bmi.n	801c32a <_vfiprintf_r+0x1fe>
 801c31e:	89ab      	ldrh	r3, [r5, #12]
 801c320:	059a      	lsls	r2, r3, #22
 801c322:	d402      	bmi.n	801c32a <_vfiprintf_r+0x1fe>
 801c324:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c326:	f7ff fa17 	bl	801b758 <__retarget_lock_release_recursive>
 801c32a:	89ab      	ldrh	r3, [r5, #12]
 801c32c:	065b      	lsls	r3, r3, #25
 801c32e:	f53f af1f 	bmi.w	801c170 <_vfiprintf_r+0x44>
 801c332:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c334:	e71e      	b.n	801c174 <_vfiprintf_r+0x48>
 801c336:	ab03      	add	r3, sp, #12
 801c338:	9300      	str	r3, [sp, #0]
 801c33a:	462a      	mov	r2, r5
 801c33c:	4b05      	ldr	r3, [pc, #20]	@ (801c354 <_vfiprintf_r+0x228>)
 801c33e:	a904      	add	r1, sp, #16
 801c340:	4630      	mov	r0, r6
 801c342:	f7ff fc63 	bl	801bc0c <_printf_i>
 801c346:	e7e4      	b.n	801c312 <_vfiprintf_r+0x1e6>
 801c348:	0801d833 	.word	0x0801d833
 801c34c:	0801d83d 	.word	0x0801d83d
 801c350:	00000000 	.word	0x00000000
 801c354:	0801c109 	.word	0x0801c109
 801c358:	0801d839 	.word	0x0801d839

0801c35c <_raise_r>:
 801c35c:	291f      	cmp	r1, #31
 801c35e:	b538      	push	{r3, r4, r5, lr}
 801c360:	4605      	mov	r5, r0
 801c362:	460c      	mov	r4, r1
 801c364:	d904      	bls.n	801c370 <_raise_r+0x14>
 801c366:	2316      	movs	r3, #22
 801c368:	6003      	str	r3, [r0, #0]
 801c36a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c36e:	bd38      	pop	{r3, r4, r5, pc}
 801c370:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801c372:	b112      	cbz	r2, 801c37a <_raise_r+0x1e>
 801c374:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c378:	b94b      	cbnz	r3, 801c38e <_raise_r+0x32>
 801c37a:	4628      	mov	r0, r5
 801c37c:	f000 f830 	bl	801c3e0 <_getpid_r>
 801c380:	4622      	mov	r2, r4
 801c382:	4601      	mov	r1, r0
 801c384:	4628      	mov	r0, r5
 801c386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c38a:	f000 b817 	b.w	801c3bc <_kill_r>
 801c38e:	2b01      	cmp	r3, #1
 801c390:	d00a      	beq.n	801c3a8 <_raise_r+0x4c>
 801c392:	1c59      	adds	r1, r3, #1
 801c394:	d103      	bne.n	801c39e <_raise_r+0x42>
 801c396:	2316      	movs	r3, #22
 801c398:	6003      	str	r3, [r0, #0]
 801c39a:	2001      	movs	r0, #1
 801c39c:	e7e7      	b.n	801c36e <_raise_r+0x12>
 801c39e:	2100      	movs	r1, #0
 801c3a0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801c3a4:	4620      	mov	r0, r4
 801c3a6:	4798      	blx	r3
 801c3a8:	2000      	movs	r0, #0
 801c3aa:	e7e0      	b.n	801c36e <_raise_r+0x12>

0801c3ac <raise>:
 801c3ac:	4b02      	ldr	r3, [pc, #8]	@ (801c3b8 <raise+0xc>)
 801c3ae:	4601      	mov	r1, r0
 801c3b0:	6818      	ldr	r0, [r3, #0]
 801c3b2:	f7ff bfd3 	b.w	801c35c <_raise_r>
 801c3b6:	bf00      	nop
 801c3b8:	200008f4 	.word	0x200008f4

0801c3bc <_kill_r>:
 801c3bc:	b538      	push	{r3, r4, r5, lr}
 801c3be:	4d07      	ldr	r5, [pc, #28]	@ (801c3dc <_kill_r+0x20>)
 801c3c0:	2300      	movs	r3, #0
 801c3c2:	4604      	mov	r4, r0
 801c3c4:	4608      	mov	r0, r1
 801c3c6:	4611      	mov	r1, r2
 801c3c8:	602b      	str	r3, [r5, #0]
 801c3ca:	f7e7 fc4d 	bl	8003c68 <_kill>
 801c3ce:	1c43      	adds	r3, r0, #1
 801c3d0:	d102      	bne.n	801c3d8 <_kill_r+0x1c>
 801c3d2:	682b      	ldr	r3, [r5, #0]
 801c3d4:	b103      	cbz	r3, 801c3d8 <_kill_r+0x1c>
 801c3d6:	6023      	str	r3, [r4, #0]
 801c3d8:	bd38      	pop	{r3, r4, r5, pc}
 801c3da:	bf00      	nop
 801c3dc:	2000f494 	.word	0x2000f494

0801c3e0 <_getpid_r>:
 801c3e0:	f7e7 bc3a 	b.w	8003c58 <_getpid>

0801c3e4 <_init>:
 801c3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c3e6:	bf00      	nop
 801c3e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c3ea:	bc08      	pop	{r3}
 801c3ec:	469e      	mov	lr, r3
 801c3ee:	4770      	bx	lr

0801c3f0 <_fini>:
 801c3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c3f2:	bf00      	nop
 801c3f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c3f6:	bc08      	pop	{r3}
 801c3f8:	469e      	mov	lr, r3
 801c3fa:	4770      	bx	lr
