
BAUROV-OTOPILOT-Drivers1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d78  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08007f78  08007f78  00008f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008010  08008010  0000a010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008010  08008010  00009010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008018  08008018  0000a010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008018  08008018  00009018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800801c  0800801c  0000901c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08008020  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cfc  20000010  08008030  0000a010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d0c  08008030  0000ad0c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ec85  00000000  00000000  0000a03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000414c  00000000  00000000  00028cc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019a0  00000000  00000000  0002ce10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013ff  00000000  00000000  0002e7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029fc9  00000000  00000000  0002fbaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e101  00000000  00000000  00059b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107fe4  00000000  00000000  00077c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017fc5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bbc  00000000  00000000  0017fca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0018685c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000010 	.word	0x20000010
 800021c:	00000000 	.word	0x00000000
 8000220:	08007f60 	.word	0x08007f60

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000014 	.word	0x20000014
 800023c:	08007f60 	.word	0x08007f60

08000240 <__aeabi_ldivmod>:
 8000240:	b97b      	cbnz	r3, 8000262 <__aeabi_ldivmod+0x22>
 8000242:	b972      	cbnz	r2, 8000262 <__aeabi_ldivmod+0x22>
 8000244:	2900      	cmp	r1, #0
 8000246:	bfbe      	ittt	lt
 8000248:	2000      	movlt	r0, #0
 800024a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800024e:	e006      	blt.n	800025e <__aeabi_ldivmod+0x1e>
 8000250:	bf08      	it	eq
 8000252:	2800      	cmpeq	r0, #0
 8000254:	bf1c      	itt	ne
 8000256:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800025a:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800025e:	f000 b9d3 	b.w	8000608 <__aeabi_idiv0>
 8000262:	f1ad 0c08 	sub.w	ip, sp, #8
 8000266:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800026a:	2900      	cmp	r1, #0
 800026c:	db09      	blt.n	8000282 <__aeabi_ldivmod+0x42>
 800026e:	2b00      	cmp	r3, #0
 8000270:	db1a      	blt.n	80002a8 <__aeabi_ldivmod+0x68>
 8000272:	f000 f84d 	bl	8000310 <__udivmoddi4>
 8000276:	f8dd e004 	ldr.w	lr, [sp, #4]
 800027a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027e:	b004      	add	sp, #16
 8000280:	4770      	bx	lr
 8000282:	4240      	negs	r0, r0
 8000284:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000288:	2b00      	cmp	r3, #0
 800028a:	db1b      	blt.n	80002c4 <__aeabi_ldivmod+0x84>
 800028c:	f000 f840 	bl	8000310 <__udivmoddi4>
 8000290:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000294:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000298:	b004      	add	sp, #16
 800029a:	4240      	negs	r0, r0
 800029c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a0:	4252      	negs	r2, r2
 80002a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a6:	4770      	bx	lr
 80002a8:	4252      	negs	r2, r2
 80002aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ae:	f000 f82f 	bl	8000310 <__udivmoddi4>
 80002b2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ba:	b004      	add	sp, #16
 80002bc:	4240      	negs	r0, r0
 80002be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c2:	4770      	bx	lr
 80002c4:	4252      	negs	r2, r2
 80002c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ca:	f000 f821 	bl	8000310 <__udivmoddi4>
 80002ce:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d6:	b004      	add	sp, #16
 80002d8:	4252      	negs	r2, r2
 80002da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <AVG_Filter>:
#include "Filters.h"

AVG_FilterTypeDef_T AVG_IMU_ACC_X, AVG_IMU_ACC_Y, AVG_IMU_ACC_Z, AVG_IMU_GYR_X, AVG_IMU_GYR_Y, AVG_IMU_GYR_Z, AVG_IMU_MAG_X, AVG_IMU_MAG_Y, AVG_IMU_MAG_Z;
MED_FilterTypeDef_T MED_IMU_ACC_X, MED_IMU_ACC_Y, MED_IMU_ACC_Z, MED_IMU_GYR_X, MED_IMU_GYR_Y, MED_IMU_GYR_Z, MED_IMU_MAG_X, MED_IMU_MAG_Y, MED_IMU_MAG_Z;

void AVG_Filter(AVG_FilterTypeDef_T *handle, uint32_t data){
 800060c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000610:	b086      	sub	sp, #24
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
 8000616:	6039      	str	r1, [r7, #0]
	int64_t sum = 0;
 8000618:	f04f 0200 	mov.w	r2, #0
 800061c:	f04f 0300 	mov.w	r3, #0
 8000620:	e9c7 2304 	strd	r2, r3, [r7, #16]
	handle->AVG_FilterBuffer[handle->AVG_FilterCounter++] = data;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	8b1b      	ldrh	r3, [r3, #24]
 8000628:	1c5a      	adds	r2, r3, #1
 800062a:	b291      	uxth	r1, r2
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	8311      	strh	r1, [r2, #24]
 8000630:	461a      	mov	r2, r3
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	b219      	sxth	r1, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	if(handle->AVG_FilterCounter == AVG_FilterBufferSize){
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	8b1b      	ldrh	r3, [r3, #24]
 8000640:	2b0a      	cmp	r3, #10
 8000642:	d134      	bne.n	80006ae <AVG_Filter+0xa2>
		for(uint8_t i=0; i<AVG_FilterBufferSize; i++)
 8000644:	2300      	movs	r3, #0
 8000646:	73fb      	strb	r3, [r7, #15]
 8000648:	e012      	b.n	8000670 <AVG_Filter+0x64>
			sum += handle->AVG_FilterBuffer[i];
 800064a:	7bfa      	ldrb	r2, [r7, #15]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000652:	b21b      	sxth	r3, r3
 8000654:	17da      	asrs	r2, r3, #31
 8000656:	461c      	mov	r4, r3
 8000658:	4615      	mov	r5, r2
 800065a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800065e:	eb12 0804 	adds.w	r8, r2, r4
 8000662:	eb43 0905 	adc.w	r9, r3, r5
 8000666:	e9c7 8904 	strd	r8, r9, [r7, #16]
		for(uint8_t i=0; i<AVG_FilterBufferSize; i++)
 800066a:	7bfb      	ldrb	r3, [r7, #15]
 800066c:	3301      	adds	r3, #1
 800066e:	73fb      	strb	r3, [r7, #15]
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	2b09      	cmp	r3, #9
 8000674:	d9e9      	bls.n	800064a <AVG_Filter+0x3e>

		handle->AVG_FilteredData = (int16_t)(sum/AVG_FilterBufferSize);
 8000676:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800067a:	f04f 020a 	mov.w	r2, #10
 800067e:	f04f 0300 	mov.w	r3, #0
 8000682:	f7ff fddd 	bl	8000240 <__aeabi_ldivmod>
 8000686:	4602      	mov	r2, r0
 8000688:	460b      	mov	r3, r1
 800068a:	b212      	sxth	r2, r2
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	829a      	strh	r2, [r3, #20]
		handle->AVG_FilteredPreData = handle->AVG_FilteredData;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	82da      	strh	r2, [r3, #22]
		handle->AVG_FilterCounter = 0;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2200      	movs	r2, #0
 800069e:	831a      	strh	r2, [r3, #24]
		memset(handle->AVG_FilterBuffer, 0, sizeof(handle->AVG_FilterBuffer));
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2214      	movs	r2, #20
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f007 fc20 	bl	8007eec <memset>
	}else{
		handle->AVG_FilteredData=handle->AVG_FilteredPreData;
	}
}
 80006ac:	e004      	b.n	80006b8 <AVG_Filter+0xac>
		handle->AVG_FilteredData=handle->AVG_FilteredPreData;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	829a      	strh	r2, [r3, #20]
}
 80006b8:	bf00      	nop
 80006ba:	3718      	adds	r7, #24
 80006bc:	46bd      	mov	sp, r7
 80006be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080006c2 <MED_Filter_SortArray>:

static void MED_Filter_SortArray(int16_t* arr, uint8_t size) {
 80006c2:	b480      	push	{r7}
 80006c4:	b085      	sub	sp, #20
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]
 80006ca:	460b      	mov	r3, r1
 80006cc:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < size - 1; i++) {
 80006ce:	2300      	movs	r3, #0
 80006d0:	73fb      	strb	r3, [r7, #15]
 80006d2:	e032      	b.n	800073a <MED_Filter_SortArray+0x78>
        for (uint8_t j = i + 1; j < size; j++) {
 80006d4:	7bfb      	ldrb	r3, [r7, #15]
 80006d6:	3301      	adds	r3, #1
 80006d8:	73bb      	strb	r3, [r7, #14]
 80006da:	e027      	b.n	800072c <MED_Filter_SortArray+0x6a>
            if (arr[j] < arr[i]) {
 80006dc:	7bbb      	ldrb	r3, [r7, #14]
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	4413      	add	r3, r2
 80006e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	6879      	ldr	r1, [r7, #4]
 80006ee:	440b      	add	r3, r1
 80006f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	da16      	bge.n	8000726 <MED_Filter_SortArray+0x64>
                int16_t tmp = arr[i];
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	687a      	ldr	r2, [r7, #4]
 80006fe:	4413      	add	r3, r2
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	81bb      	strh	r3, [r7, #12]
                arr[i] = arr[j];
 8000704:	7bbb      	ldrb	r3, [r7, #14]
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	441a      	add	r2, r3
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	6879      	ldr	r1, [r7, #4]
 8000712:	440b      	add	r3, r1
 8000714:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000718:	801a      	strh	r2, [r3, #0]
                arr[j] = tmp;
 800071a:	7bbb      	ldrb	r3, [r7, #14]
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	4413      	add	r3, r2
 8000722:	89ba      	ldrh	r2, [r7, #12]
 8000724:	801a      	strh	r2, [r3, #0]
        for (uint8_t j = i + 1; j < size; j++) {
 8000726:	7bbb      	ldrb	r3, [r7, #14]
 8000728:	3301      	adds	r3, #1
 800072a:	73bb      	strb	r3, [r7, #14]
 800072c:	7bba      	ldrb	r2, [r7, #14]
 800072e:	78fb      	ldrb	r3, [r7, #3]
 8000730:	429a      	cmp	r2, r3
 8000732:	d3d3      	bcc.n	80006dc <MED_Filter_SortArray+0x1a>
    for (uint8_t i = 0; i < size - 1; i++) {
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	3301      	adds	r3, #1
 8000738:	73fb      	strb	r3, [r7, #15]
 800073a:	7bfa      	ldrb	r2, [r7, #15]
 800073c:	78fb      	ldrb	r3, [r7, #3]
 800073e:	3b01      	subs	r3, #1
 8000740:	429a      	cmp	r2, r3
 8000742:	dbc7      	blt.n	80006d4 <MED_Filter_SortArray+0x12>
            }
        }
    }
}
 8000744:	bf00      	nop
 8000746:	bf00      	nop
 8000748:	3714      	adds	r7, #20
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <MED_Filter>:

void MED_Filter(MED_FilterTypeDef_T *handle, uint32_t data){
 8000752:	b580      	push	{r7, lr}
 8000754:	b082      	sub	sp, #8
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
 800075a:	6039      	str	r1, [r7, #0]
	handle->MED_FilterBuffer[handle->MED_FilterCounter++] = data;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	8a5b      	ldrh	r3, [r3, #18]
 8000760:	1c5a      	adds	r2, r3, #1
 8000762:	b291      	uxth	r1, r2
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	8251      	strh	r1, [r2, #18]
 8000768:	461a      	mov	r2, r3
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	b219      	sxth	r1, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	if(handle->MED_FilterCounter == MED_FilterBufferSize){
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	8a5b      	ldrh	r3, [r3, #18]
 8000778:	2b07      	cmp	r3, #7
 800077a:	d118      	bne.n	80007ae <MED_Filter+0x5c>
		MED_Filter_SortArray(handle->MED_FilterBuffer, MED_FilterBufferSize);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2107      	movs	r1, #7
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ff9e 	bl	80006c2 <MED_Filter_SortArray>
		handle->MED_FilteredData = handle->MED_FilterBuffer[(MED_FilterBufferSize-1)/2];
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	81da      	strh	r2, [r3, #14]
		handle->MED_FilteredPreData = handle->MED_FilteredData;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	821a      	strh	r2, [r3, #16]
		handle->MED_FilterCounter = 0;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2200      	movs	r2, #0
 800079e:	825a      	strh	r2, [r3, #18]
		memset(handle->MED_FilterBuffer, 0, sizeof(handle->MED_FilterBuffer));
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	220e      	movs	r2, #14
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f007 fba0 	bl	8007eec <memset>
	}else{
		handle->MED_FilteredData=handle->MED_FilteredPreData;
	}
}
 80007ac:	e004      	b.n	80007b8 <MED_Filter+0x66>
		handle->MED_FilteredData=handle->MED_FilteredPreData;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	81da      	strh	r2, [r3, #14]
}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <I2C_Init>:
 * GLOBAL FUNCTIONS
 ********************************************************/
/** Brief description which ends at this dot. Details follow
 *  here.
 */
void I2C_Init(void *handle, uint8_t I2CNo){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	460b      	mov	r3, r1
 80007ca:	70fb      	strb	r3, [r7, #3]
	I2C_HandleTypeDef_T *i2c;
	i2c = I2C_GetModule(I2CNo);
 80007cc:	78fb      	ldrb	r3, [r7, #3]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 f864 	bl	800089c <I2C_GetModule>
 80007d4:	60f8      	str	r0, [r7, #12]
    i2c->handle = handle;
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	601a      	str	r2, [r3, #0]
}
 80007dc:	bf00      	nop
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <I2C_ReadWrite_Poll>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
I2C_ReturnTypeDef_T I2C_ReadWrite_Poll(uint8_t I2CNo, uint8_t DevAddress, uint8_t *txBuff, uint8_t txLenght, uint8_t *rxBuff, uint8_t rxLenght){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af02      	add	r7, sp, #8
 80007ea:	603a      	str	r2, [r7, #0]
 80007ec:	461a      	mov	r2, r3
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
 80007f2:	460b      	mov	r3, r1
 80007f4:	71bb      	strb	r3, [r7, #6]
 80007f6:	4613      	mov	r3, r2
 80007f8:	717b      	strb	r3, [r7, #5]
	I2C_HandleTypeDef_T *i2c;
	HAL_StatusTypeDef res;
	uint8_t txAddr, rxAddr;
	txAddr = DevAddress<<1;
 80007fa:	79bb      	ldrb	r3, [r7, #6]
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	75fb      	strb	r3, [r7, #23]
	rxAddr = ((DevAddress<<1) | 0x01);
 8000800:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	b25b      	sxtb	r3, r3
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	b25b      	sxtb	r3, r3
 800080e:	75bb      	strb	r3, [r7, #22]
	i2c = I2C_GetModule(I2CNo);
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	4618      	mov	r0, r3
 8000814:	f000 f842 	bl	800089c <I2C_GetModule>
 8000818:	6138      	str	r0, [r7, #16]
	if(rxLenght == 0){
 800081a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800081e:	2b00      	cmp	r3, #0
 8000820:	d114      	bne.n	800084c <I2C_ReadWrite_Poll+0x68>
		res = HAL_I2C_Master_Transmit(i2c->handle , txAddr, txBuff, txLenght,1000);
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	6818      	ldr	r0, [r3, #0]
 8000826:	7dfb      	ldrb	r3, [r7, #23]
 8000828:	b299      	uxth	r1, r3
 800082a:	797b      	ldrb	r3, [r7, #5]
 800082c:	b29b      	uxth	r3, r3
 800082e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000832:	9200      	str	r2, [sp, #0]
 8000834:	683a      	ldr	r2, [r7, #0]
 8000836:	f001 fedd 	bl	80025f4 <HAL_I2C_Master_Transmit>
 800083a:	4603      	mov	r3, r0
 800083c:	73fb      	strb	r3, [r7, #15]
		return res == I2C_ERROR;
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	2b01      	cmp	r3, #1
 8000842:	bf0c      	ite	eq
 8000844:	2301      	moveq	r3, #1
 8000846:	2300      	movne	r3, #0
 8000848:	b2db      	uxtb	r3, r3
 800084a:	e023      	b.n	8000894 <I2C_ReadWrite_Poll+0xb0>
	}else{
		HAL_I2C_Master_Transmit(i2c->handle , txAddr, txBuff, txLenght,1000);
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	6818      	ldr	r0, [r3, #0]
 8000850:	7dfb      	ldrb	r3, [r7, #23]
 8000852:	b299      	uxth	r1, r3
 8000854:	797b      	ldrb	r3, [r7, #5]
 8000856:	b29b      	uxth	r3, r3
 8000858:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800085c:	9200      	str	r2, [sp, #0]
 800085e:	683a      	ldr	r2, [r7, #0]
 8000860:	f001 fec8 	bl	80025f4 <HAL_I2C_Master_Transmit>
		HAL_Delay(1);
 8000864:	2001      	movs	r0, #1
 8000866:	f001 f91f 	bl	8001aa8 <HAL_Delay>
		res = HAL_I2C_Master_Receive(i2c->handle, rxAddr, rxBuff, rxLenght,1000);
 800086a:	693b      	ldr	r3, [r7, #16]
 800086c:	6818      	ldr	r0, [r3, #0]
 800086e:	7dbb      	ldrb	r3, [r7, #22]
 8000870:	b299      	uxth	r1, r3
 8000872:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000876:	b29b      	uxth	r3, r3
 8000878:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800087c:	9200      	str	r2, [sp, #0]
 800087e:	6a3a      	ldr	r2, [r7, #32]
 8000880:	f001 ffd0 	bl	8002824 <HAL_I2C_Master_Receive>
 8000884:	4603      	mov	r3, r0
 8000886:	73fb      	strb	r3, [r7, #15]
		return res == I2C_ERROR;
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	2b01      	cmp	r3, #1
 800088c:	bf0c      	ite	eq
 800088e:	2301      	moveq	r3, #1
 8000890:	2300      	movne	r3, #0
 8000892:	b2db      	uxtb	r3, r3
	}
}
 8000894:	4618      	mov	r0, r3
 8000896:	3718      	adds	r7, #24
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <I2C_GetModule>:
 * PRIVATE FUNCTIONS
 *********************************************************/
/** Brief description which ends at this dot. Details follow
 *  here.
 */
I2C_HandleTypeDef_T* I2C_GetModule(uint8_t I2CNo){
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
	switch(I2CNo){
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2b03      	cmp	r3, #3
 80008aa:	d00a      	beq.n	80008c2 <I2C_GetModule+0x26>
 80008ac:	2b03      	cmp	r3, #3
 80008ae:	dc0a      	bgt.n	80008c6 <I2C_GetModule+0x2a>
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d002      	beq.n	80008ba <I2C_GetModule+0x1e>
 80008b4:	2b02      	cmp	r3, #2
 80008b6:	d002      	beq.n	80008be <I2C_GetModule+0x22>
 80008b8:	e005      	b.n	80008c6 <I2C_GetModule+0x2a>
		case I2CNO_1 : return &I2C_1; break;
 80008ba:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <I2C_GetModule+0x38>)
 80008bc:	e004      	b.n	80008c8 <I2C_GetModule+0x2c>
		case I2CNO_2 : return &I2C_2; break;
 80008be:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <I2C_GetModule+0x3c>)
 80008c0:	e002      	b.n	80008c8 <I2C_GetModule+0x2c>
		case I2CNO_3 : return &I2C_3; break;
 80008c2:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <I2C_GetModule+0x40>)
 80008c4:	e000      	b.n	80008c8 <I2C_GetModule+0x2c>
		default : return NULL; break;
 80008c6:	2300      	movs	r3, #0
	}
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	200001dc 	.word	0x200001dc
 80008d8:	200001e4 	.word	0x200001e4
 80008dc:	200001ec 	.word	0x200001ec

080008e0 <IMU_Init>:
#include "IMU.h"
#include "Filters.h"

IMU_TypeDef_T IMU_1;

void IMU_Init(IMU_TypeDef_T *ImuHandle, uint8_t ImuSensorNo, uint8_t IMU_I2CNO, uint8_t IMU_I2CAdress, void* ResetGPIOPort, uint16_t ResetGPIOPin){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af02      	add	r7, sp, #8
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	4608      	mov	r0, r1
 80008ea:	4611      	mov	r1, r2
 80008ec:	461a      	mov	r2, r3
 80008ee:	4603      	mov	r3, r0
 80008f0:	70fb      	strb	r3, [r7, #3]
 80008f2:	460b      	mov	r3, r1
 80008f4:	70bb      	strb	r3, [r7, #2]
 80008f6:	4613      	mov	r3, r2
 80008f8:	707b      	strb	r3, [r7, #1]
	BNO055_Sensor_T *imuSensor;
	imuSensor = IMU_GetSensorHandle(ImuSensorNo);
 80008fa:	78fb      	ldrb	r3, [r7, #3]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f000 f9dd 	bl	8000cbc <IMU_GetSensorHandle>
 8000902:	60f8      	str	r0, [r7, #12]

	BNO055_Init(imuSensor, IMU_I2CNO, IMU_I2CAdress, ResetGPIOPort, ResetGPIOPin);
 8000904:	787a      	ldrb	r2, [r7, #1]
 8000906:	78b9      	ldrb	r1, [r7, #2]
 8000908:	8bbb      	ldrh	r3, [r7, #28]
 800090a:	9300      	str	r3, [sp, #0]
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	68f8      	ldr	r0, [r7, #12]
 8000910:	f000 f9f2 	bl	8000cf8 <BNO055_Init>

	ImuHandle->CalcConst.ACC_1MpS2_LSB = imuSensor->CalcConst.ACC_1MpS2_LSB;
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000918:	ee07 3a90 	vmov	s15, r3
 800091c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	ImuHandle->CalcConst.GYR_1RPS_LSB  = imuSensor->CalcConst.GYR_1RPS_LSB;
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800092a:	ee07 3a90 	vmov	s15, r3
 800092e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	ImuHandle->CalcConst.MAG_1uT_LSB   = imuSensor->CalcConst.MAG_1uT_LSB;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800093c:	ee07 3a90 	vmov	s15, r3
 8000940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

	HAL_Delay(250);
 800094a:	20fa      	movs	r0, #250	@ 0xfa
 800094c:	f001 f8ac 	bl	8001aa8 <HAL_Delay>
}
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <IMU_Execute>:

void IMU_Execute(IMU_TypeDef_T *ImuHandle, uint8_t ImuSensorNo){
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	460b      	mov	r3, r1
 8000962:	70fb      	strb	r3, [r7, #3]
	BNO055_Sensor_T *imuSensor;

	imuSensor = IMU_GetSensorHandle(ImuSensorNo);
 8000964:	78fb      	ldrb	r3, [r7, #3]
 8000966:	4618      	mov	r0, r3
 8000968:	f000 f9a8 	bl	8000cbc <IMU_GetSensorHandle>
 800096c:	60f8      	str	r0, [r7, #12]

	BNO055_Get_SysError(imuSensor);
 800096e:	68f8      	ldr	r0, [r7, #12]
 8000970:	f000 fea7 	bl	80016c2 <BNO055_Get_SysError>
	BNO055_Get_ACC_Data(imuSensor);
 8000974:	68f8      	ldr	r0, [r7, #12]
 8000976:	f000 fcd7 	bl	8001328 <BNO055_Get_ACC_Data>
	BNO055_Get_MAG_Data(imuSensor);
 800097a:	68f8      	ldr	r0, [r7, #12]
 800097c:	f000 fd5a 	bl	8001434 <BNO055_Get_MAG_Data>
	BNO055_Get_GYR_Data(imuSensor);
 8000980:	68f8      	ldr	r0, [r7, #12]
 8000982:	f000 fdad 	bl	80014e0 <BNO055_Get_GYR_Data>

	IMU_PopulateData(ImuHandle, ImuSensorNo);
 8000986:	78fb      	ldrb	r3, [r7, #3]
 8000988:	4619      	mov	r1, r3
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f000 f95a 	bl	8000c44 <IMU_PopulateData>

	MED_Filter(&MED_IMU_ACC_X, ImuHandle->AllRawData.Accelerometer.X_Axis);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000996:	4619      	mov	r1, r3
 8000998:	4898      	ldr	r0, [pc, #608]	@ (8000bfc <IMU_Execute+0x2a4>)
 800099a:	f7ff feda 	bl	8000752 <MED_Filter>
	AVG_Filter(&AVG_IMU_ACC_X, MED_IMU_ACC_X.MED_FilteredData);
 800099e:	4b97      	ldr	r3, [pc, #604]	@ (8000bfc <IMU_Execute+0x2a4>)
 80009a0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80009a4:	4619      	mov	r1, r3
 80009a6:	4896      	ldr	r0, [pc, #600]	@ (8000c00 <IMU_Execute+0x2a8>)
 80009a8:	f7ff fe30 	bl	800060c <AVG_Filter>
	MED_Filter(&MED_IMU_ACC_Y, ImuHandle->AllRawData.Accelerometer.Y_Axis);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80009b2:	4619      	mov	r1, r3
 80009b4:	4893      	ldr	r0, [pc, #588]	@ (8000c04 <IMU_Execute+0x2ac>)
 80009b6:	f7ff fecc 	bl	8000752 <MED_Filter>
	AVG_Filter(&AVG_IMU_ACC_Y, MED_IMU_ACC_Y.MED_FilteredData);
 80009ba:	4b92      	ldr	r3, [pc, #584]	@ (8000c04 <IMU_Execute+0x2ac>)
 80009bc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80009c0:	4619      	mov	r1, r3
 80009c2:	4891      	ldr	r0, [pc, #580]	@ (8000c08 <IMU_Execute+0x2b0>)
 80009c4:	f7ff fe22 	bl	800060c <AVG_Filter>
	MED_Filter(&MED_IMU_ACC_Z, ImuHandle->AllRawData.Accelerometer.Z_Axis);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80009ce:	4619      	mov	r1, r3
 80009d0:	488e      	ldr	r0, [pc, #568]	@ (8000c0c <IMU_Execute+0x2b4>)
 80009d2:	f7ff febe 	bl	8000752 <MED_Filter>
	AVG_Filter(&AVG_IMU_ACC_Z, MED_IMU_ACC_Z.MED_FilteredData);
 80009d6:	4b8d      	ldr	r3, [pc, #564]	@ (8000c0c <IMU_Execute+0x2b4>)
 80009d8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80009dc:	4619      	mov	r1, r3
 80009de:	488c      	ldr	r0, [pc, #560]	@ (8000c10 <IMU_Execute+0x2b8>)
 80009e0:	f7ff fe14 	bl	800060c <AVG_Filter>
	MED_Filter(&MED_IMU_GYR_X, ImuHandle->AllRawData.Gyroscope.X_Axis);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80009ea:	4619      	mov	r1, r3
 80009ec:	4889      	ldr	r0, [pc, #548]	@ (8000c14 <IMU_Execute+0x2bc>)
 80009ee:	f7ff feb0 	bl	8000752 <MED_Filter>
	AVG_Filter(&AVG_IMU_GYR_X, MED_IMU_GYR_X.MED_FilteredData);
 80009f2:	4b88      	ldr	r3, [pc, #544]	@ (8000c14 <IMU_Execute+0x2bc>)
 80009f4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80009f8:	4619      	mov	r1, r3
 80009fa:	4887      	ldr	r0, [pc, #540]	@ (8000c18 <IMU_Execute+0x2c0>)
 80009fc:	f7ff fe06 	bl	800060c <AVG_Filter>
	MED_Filter(&MED_IMU_GYR_Y, ImuHandle->AllRawData.Gyroscope.Y_Axis);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000a06:	4619      	mov	r1, r3
 8000a08:	4884      	ldr	r0, [pc, #528]	@ (8000c1c <IMU_Execute+0x2c4>)
 8000a0a:	f7ff fea2 	bl	8000752 <MED_Filter>
	AVG_Filter(&AVG_IMU_GYR_Y, MED_IMU_GYR_Y.MED_FilteredData);
 8000a0e:	4b83      	ldr	r3, [pc, #524]	@ (8000c1c <IMU_Execute+0x2c4>)
 8000a10:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000a14:	4619      	mov	r1, r3
 8000a16:	4882      	ldr	r0, [pc, #520]	@ (8000c20 <IMU_Execute+0x2c8>)
 8000a18:	f7ff fdf8 	bl	800060c <AVG_Filter>
	MED_Filter(&MED_IMU_GYR_Z, ImuHandle->AllRawData.Gyroscope.Z_Axis);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000a22:	4619      	mov	r1, r3
 8000a24:	487f      	ldr	r0, [pc, #508]	@ (8000c24 <IMU_Execute+0x2cc>)
 8000a26:	f7ff fe94 	bl	8000752 <MED_Filter>
	AVG_Filter(&AVG_IMU_GYR_Z, MED_IMU_GYR_Z.MED_FilteredData);
 8000a2a:	4b7e      	ldr	r3, [pc, #504]	@ (8000c24 <IMU_Execute+0x2cc>)
 8000a2c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000a30:	4619      	mov	r1, r3
 8000a32:	487d      	ldr	r0, [pc, #500]	@ (8000c28 <IMU_Execute+0x2d0>)
 8000a34:	f7ff fdea 	bl	800060c <AVG_Filter>
	MED_Filter(&MED_IMU_MAG_X, ImuHandle->AllRawData.Magnetometer.X_Axis);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000a3e:	4619      	mov	r1, r3
 8000a40:	487a      	ldr	r0, [pc, #488]	@ (8000c2c <IMU_Execute+0x2d4>)
 8000a42:	f7ff fe86 	bl	8000752 <MED_Filter>
	AVG_Filter(&AVG_IMU_MAG_X, MED_IMU_MAG_X.MED_FilteredData);
 8000a46:	4b79      	ldr	r3, [pc, #484]	@ (8000c2c <IMU_Execute+0x2d4>)
 8000a48:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4878      	ldr	r0, [pc, #480]	@ (8000c30 <IMU_Execute+0x2d8>)
 8000a50:	f7ff fddc 	bl	800060c <AVG_Filter>
	MED_Filter(&MED_IMU_MAG_Y, ImuHandle->AllRawData.Magnetometer.Y_Axis);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4875      	ldr	r0, [pc, #468]	@ (8000c34 <IMU_Execute+0x2dc>)
 8000a5e:	f7ff fe78 	bl	8000752 <MED_Filter>
	AVG_Filter(&AVG_IMU_MAG_Y, MED_IMU_MAG_Y.MED_FilteredData);
 8000a62:	4b74      	ldr	r3, [pc, #464]	@ (8000c34 <IMU_Execute+0x2dc>)
 8000a64:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4873      	ldr	r0, [pc, #460]	@ (8000c38 <IMU_Execute+0x2e0>)
 8000a6c:	f7ff fdce 	bl	800060c <AVG_Filter>
	MED_Filter(&MED_IMU_MAG_Z, ImuHandle->AllRawData.Magnetometer.Z_Axis);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000a76:	4619      	mov	r1, r3
 8000a78:	4870      	ldr	r0, [pc, #448]	@ (8000c3c <IMU_Execute+0x2e4>)
 8000a7a:	f7ff fe6a 	bl	8000752 <MED_Filter>
	AVG_Filter(&AVG_IMU_MAG_Z, MED_IMU_MAG_Z.MED_FilteredData);
 8000a7e:	4b6f      	ldr	r3, [pc, #444]	@ (8000c3c <IMU_Execute+0x2e4>)
 8000a80:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000a84:	4619      	mov	r1, r3
 8000a86:	486e      	ldr	r0, [pc, #440]	@ (8000c40 <IMU_Execute+0x2e8>)
 8000a88:	f7ff fdc0 	bl	800060c <AVG_Filter>

	ImuHandle->FilteredData.Accelerometer.X_Axis = AVG_IMU_ACC_X.AVG_FilteredData;
 8000a8c:	4b5c      	ldr	r3, [pc, #368]	@ (8000c00 <IMU_Execute+0x2a8>)
 8000a8e:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	825a      	strh	r2, [r3, #18]
	ImuHandle->FilteredData.Accelerometer.Y_Axis = AVG_IMU_ACC_Y.AVG_FilteredData;
 8000a96:	4b5c      	ldr	r3, [pc, #368]	@ (8000c08 <IMU_Execute+0x2b0>)
 8000a98:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	829a      	strh	r2, [r3, #20]
	ImuHandle->FilteredData.Accelerometer.Z_Axis = AVG_IMU_ACC_Z.AVG_FilteredData;
 8000aa0:	4b5b      	ldr	r3, [pc, #364]	@ (8000c10 <IMU_Execute+0x2b8>)
 8000aa2:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	82da      	strh	r2, [r3, #22]
	ImuHandle->FilteredData.Gyroscope.X_Axis     = AVG_IMU_GYR_X.AVG_FilteredData;
 8000aaa:	4b5b      	ldr	r3, [pc, #364]	@ (8000c18 <IMU_Execute+0x2c0>)
 8000aac:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	831a      	strh	r2, [r3, #24]
	ImuHandle->FilteredData.Gyroscope.Y_Axis     = AVG_IMU_GYR_Y.AVG_FilteredData;
 8000ab4:	4b5a      	ldr	r3, [pc, #360]	@ (8000c20 <IMU_Execute+0x2c8>)
 8000ab6:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	835a      	strh	r2, [r3, #26]
	ImuHandle->FilteredData.Gyroscope.Z_Axis     = AVG_IMU_GYR_Z.AVG_FilteredData;
 8000abe:	4b5a      	ldr	r3, [pc, #360]	@ (8000c28 <IMU_Execute+0x2d0>)
 8000ac0:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	839a      	strh	r2, [r3, #28]
	ImuHandle->FilteredData.Magnetometer.X_Axis  = AVG_IMU_MAG_X.AVG_FilteredData;
 8000ac8:	4b59      	ldr	r3, [pc, #356]	@ (8000c30 <IMU_Execute+0x2d8>)
 8000aca:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	83da      	strh	r2, [r3, #30]
	ImuHandle->FilteredData.Magnetometer.Y_Axis  = AVG_IMU_MAG_Y.AVG_FilteredData;
 8000ad2:	4b59      	ldr	r3, [pc, #356]	@ (8000c38 <IMU_Execute+0x2e0>)
 8000ad4:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	841a      	strh	r2, [r3, #32]
	ImuHandle->FilteredData.Magnetometer.Z_Axis  = AVG_IMU_MAG_Z.AVG_FilteredData;
 8000adc:	4b58      	ldr	r3, [pc, #352]	@ (8000c40 <IMU_Execute+0x2e8>)
 8000ade:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	845a      	strh	r2, [r3, #34]	@ 0x22


	ImuHandle->CalculatedData.Accelerometer.X_Axis = (float)(ImuHandle->FilteredData.Accelerometer.X_Axis / ImuHandle->CalcConst.ACC_1MpS2_LSB);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000aec:	ee07 3a90 	vmov	s15, r3
 8000af0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8000afa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	ImuHandle->CalculatedData.Accelerometer.Y_Axis = (float)(ImuHandle->FilteredData.Accelerometer.Y_Axis / ImuHandle->CalcConst.ACC_1MpS2_LSB);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000b0a:	ee07 3a90 	vmov	s15, r3
 8000b0e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8000b18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	ImuHandle->CalculatedData.Accelerometer.Z_Axis = (float)(ImuHandle->FilteredData.Accelerometer.Z_Axis / ImuHandle->CalcConst.ACC_1MpS2_LSB);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000b28:	ee07 3a90 	vmov	s15, r3
 8000b2c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8000b36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	ImuHandle->CalculatedData.Gyroscope.X_Axis     = (float)(ImuHandle->FilteredData.Gyroscope.X_Axis / ImuHandle->CalcConst.GYR_1RPS_LSB);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000b46:	ee07 3a90 	vmov	s15, r3
 8000b4a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8000b54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	ImuHandle->CalculatedData.Gyroscope.Y_Axis     = (float)(ImuHandle->FilteredData.Gyroscope.Y_Axis / ImuHandle->CalcConst.GYR_1RPS_LSB);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8000b64:	ee07 3a90 	vmov	s15, r3
 8000b68:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8000b72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	ImuHandle->CalculatedData.Gyroscope.Z_Axis     = (float)(ImuHandle->FilteredData.Gyroscope.Z_Axis / ImuHandle->CalcConst.GYR_1RPS_LSB);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8000b82:	ee07 3a90 	vmov	s15, r3
 8000b86:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8000b90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	ImuHandle->CalculatedData.Magnetometer.X_Axis  = (float)((ImuHandle->FilteredData.Magnetometer.X_Axis / ImuHandle->CalcConst.MAG_1uT_LSB));
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000ba0:	ee07 3a90 	vmov	s15, r3
 8000ba4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8000bae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	ImuHandle->CalculatedData.Magnetometer.Y_Axis  = (float)((ImuHandle->FilteredData.Magnetometer.Y_Axis / ImuHandle->CalcConst.MAG_1uT_LSB));
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000bbe:	ee07 3a90 	vmov	s15, r3
 8000bc2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8000bcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	ImuHandle->CalculatedData.Magnetometer.Z_Axis  = (float)((ImuHandle->FilteredData.Magnetometer.Z_Axis / ImuHandle->CalcConst.MAG_1uT_LSB));
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8000bdc:	ee07 3a90 	vmov	s15, r3
 8000be0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8000bea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
//	ImuHandle->CalculatedData.Gyroscope.Z_Axis     = (int16_t)IMU_1.AllRawData.Gyroscope.Z_Axis;
//	ImuHandle->CalculatedData.Magnetometer.X_Axis  = (int16_t)IMU_1.AllRawData.Magnetometer.X_Axis;
//	ImuHandle->CalculatedData.Magnetometer.Y_Axis  = (int16_t)IMU_1.AllRawData.Magnetometer.Y_Axis;
//	ImuHandle->CalculatedData.Magnetometer.Z_Axis  = (int16_t)IMU_1.AllRawData.Magnetometer.Z_Axis;

}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000128 	.word	0x20000128
 8000c00:	2000002c 	.word	0x2000002c
 8000c04:	2000013c 	.word	0x2000013c
 8000c08:	20000048 	.word	0x20000048
 8000c0c:	20000150 	.word	0x20000150
 8000c10:	20000064 	.word	0x20000064
 8000c14:	20000164 	.word	0x20000164
 8000c18:	20000080 	.word	0x20000080
 8000c1c:	20000178 	.word	0x20000178
 8000c20:	2000009c 	.word	0x2000009c
 8000c24:	2000018c 	.word	0x2000018c
 8000c28:	200000b8 	.word	0x200000b8
 8000c2c:	200001a0 	.word	0x200001a0
 8000c30:	200000d4 	.word	0x200000d4
 8000c34:	200001b4 	.word	0x200001b4
 8000c38:	200000f0 	.word	0x200000f0
 8000c3c:	200001c8 	.word	0x200001c8
 8000c40:	2000010c 	.word	0x2000010c

08000c44 <IMU_PopulateData>:

void IMU_PopulateData(IMU_TypeDef_T *ImuHandle, uint8_t ImuSensorNo){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	70fb      	strb	r3, [r7, #3]
	BNO055_Sensor_T *imuSensor;
	imuSensor = IMU_GetSensorHandle(ImuSensorNo);
 8000c50:	78fb      	ldrb	r3, [r7, #3]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f000 f832 	bl	8000cbc <IMU_GetSensorHandle>
 8000c58:	60f8      	str	r0, [r7, #12]

	ImuHandle->AllRawData.Accelerometer.X_Axis = (int16_t)imuSensor->ImuData.ACC_X;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	801a      	strh	r2, [r3, #0]
	ImuHandle->AllRawData.Accelerometer.Y_Axis = (int16_t)imuSensor->ImuData.ACC_Y;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	805a      	strh	r2, [r3, #2]
	ImuHandle->AllRawData.Accelerometer.Z_Axis = (int16_t)imuSensor->ImuData.ACC_Z;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	809a      	strh	r2, [r3, #4]
	ImuHandle->AllRawData.Gyroscope.X_Axis     = imuSensor->ImuData.GYR_X;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	80da      	strh	r2, [r3, #6]
	ImuHandle->AllRawData.Gyroscope.Y_Axis     = imuSensor->ImuData.GYR_Y;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	811a      	strh	r2, [r3, #8]
	ImuHandle->AllRawData.Gyroscope.Z_Axis     = imuSensor->ImuData.GYR_Z;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	815a      	strh	r2, [r3, #10]
	ImuHandle->AllRawData.Magnetometer.X_Axis  = imuSensor->ImuData.MAG_X;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	819a      	strh	r2, [r3, #12]
	ImuHandle->AllRawData.Magnetometer.Y_Axis  = imuSensor->ImuData.MAG_Y;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	81da      	strh	r2, [r3, #14]
	ImuHandle->AllRawData.Magnetometer.Z_Axis  = imuSensor->ImuData.MAG_Z;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	821a      	strh	r2, [r3, #16]
}
 8000cb4:	bf00      	nop
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <IMU_GetSensorHandle>:

BNO055_Sensor_T* IMU_GetSensorHandle(uint8_t sensorNo){
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
	switch(sensorNo){
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	2b03      	cmp	r3, #3
 8000cca:	d00a      	beq.n	8000ce2 <IMU_GetSensorHandle+0x26>
 8000ccc:	2b03      	cmp	r3, #3
 8000cce:	dc06      	bgt.n	8000cde <IMU_GetSensorHandle+0x22>
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d002      	beq.n	8000cda <IMU_GetSensorHandle+0x1e>
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d006      	beq.n	8000ce6 <IMU_GetSensorHandle+0x2a>
 8000cd8:	e001      	b.n	8000cde <IMU_GetSensorHandle+0x22>
		case 1 : return &BNO055_Sensor_1;break;
 8000cda:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <IMU_GetSensorHandle+0x38>)
 8000cdc:	e004      	b.n	8000ce8 <IMU_GetSensorHandle+0x2c>
		case 2 : break;
		case 3 : break;
		default : return &BNO055_Sensor_1;
 8000cde:	4b05      	ldr	r3, [pc, #20]	@ (8000cf4 <IMU_GetSensorHandle+0x38>)
 8000ce0:	e002      	b.n	8000ce8 <IMU_GetSensorHandle+0x2c>
		case 3 : break;
 8000ce2:	bf00      	nop
 8000ce4:	e000      	b.n	8000ce8 <IMU_GetSensorHandle+0x2c>
		case 2 : break;
 8000ce6:	bf00      	nop
	}
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	20000248 	.word	0x20000248

08000cf8 <BNO055_Init>:
BNO055_Sensor_T BNO055_Sensor_1;

/** Brief description which ends at this dot. Details follow
 *  here.
 */
void BNO055_Init(BNO055_Sensor_T *handle, uint8_t I2C_No, uint8_t I2C_Adress, void* ResetGPIOPort, uint16_t ResetGPIOPin){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	460b      	mov	r3, r1
 8000d04:	72fb      	strb	r3, [r7, #11]
 8000d06:	4613      	mov	r3, r2
 8000d08:	72bb      	strb	r3, [r7, #10]
	handle->I2C_No = I2C_No;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	7afa      	ldrb	r2, [r7, #11]
 8000d0e:	701a      	strb	r2, [r3, #0]
	handle->Chip_I2C_Address = I2C_Adress;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	7aba      	ldrb	r2, [r7, #10]
 8000d14:	705a      	strb	r2, [r3, #1]
	handle->ResetPort = ResetGPIOPort;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	605a      	str	r2, [r3, #4]
	handle->ResetPin = ResetGPIOPin;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	8b3a      	ldrh	r2, [r7, #24]
 8000d20:	811a      	strh	r2, [r3, #8]
	handle->CalcConst.ACC_1MpS2_LSB = 100;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	2264      	movs	r2, #100	@ 0x64
 8000d26:	845a      	strh	r2, [r3, #34]	@ 0x22
	handle->CalcConst.GYR_1RPS_LSB = 900;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f44f 7261 	mov.w	r2, #900	@ 0x384
 8000d2e:	84da      	strh	r2, [r3, #38]	@ 0x26
	handle->CalcConst.MAG_1uT_LSB = 16;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	2210      	movs	r2, #16
 8000d34:	849a      	strh	r2, [r3, #36]	@ 0x24
	handle->CalcConst.ACCRange_G = 4;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	2204      	movs	r2, #4
 8000d3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	handle->CalcConst.GYRRange_DPS = 500;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000d44:	855a      	strh	r2, [r3, #42]	@ 0x2a

	BNO055_Reset(handle);
 8000d46:	68f8      	ldr	r0, [r7, #12]
 8000d48:	f000 f843 	bl	8000dd2 <BNO055_Reset>

	BNO055_Set_OperationMode(handle, BNO055_DATA_OPR_MODE_NDOF);
 8000d4c:	210c      	movs	r1, #12
 8000d4e:	68f8      	ldr	r0, [r7, #12]
 8000d50:	f000 f85e 	bl	8000e10 <BNO055_Set_OperationMode>
	HAL_Delay(25);
 8000d54:	2019      	movs	r0, #25
 8000d56:	f000 fea7 	bl	8001aa8 <HAL_Delay>
//    		BNO055_GetCalibrationData(handle);
//    		break;
//    	}
//    }

    BNO055_Set_OperationMode(handle, BNO055_DATA_OPR_MODE_OPR);
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	68f8      	ldr	r0, [r7, #12]
 8000d5e:	f000 f857 	bl	8000e10 <BNO055_Set_OperationMode>
    HAL_Delay(25);
 8000d62:	2019      	movs	r0, #25
 8000d64:	f000 fea0 	bl	8001aa8 <HAL_Delay>

	BNO055_Set_PowerMode(handle, BNO055_DATA_PWR_MODE_NORMAL);
 8000d68:	2100      	movs	r1, #0
 8000d6a:	68f8      	ldr	r0, [r7, #12]
 8000d6c:	f000 f888 	bl	8000e80 <BNO055_Set_PowerMode>
//	BNO055_GetCalibrationData(handle);
	BNO055_Set_DataUnit(handle, BNO055_DATA_UNIT_ACC_mG | BNO055_DATA_UNIT_ORI_AND);
 8000d70:	2181      	movs	r1, #129	@ 0x81
 8000d72:	68f8      	ldr	r0, [r7, #12]
 8000d74:	f000 fc0a 	bl	800158c <BNO055_Set_DataUnit>

	BNO055_Get_DataUnit(handle);
 8000d78:	68f8      	ldr	r0, [r7, #12]
 8000d7a:	f000 fc32 	bl	80015e2 <BNO055_Get_DataUnit>

	BNO055_Set_ACC_Mode(handle, BNO055_DATA_ACC_RANGE_4G | BNO055_DATA_ACC_BW_62p5Hz |  BNO055_DATA_ACC_MODE_NORMAL);
 8000d7e:	210d      	movs	r1, #13
 8000d80:	68f8      	ldr	r0, [r7, #12]
 8000d82:	f000 f8b5 	bl	8000ef0 <BNO055_Set_ACC_Mode>

	BNO055_Get_ACC_Mode(handle);
 8000d86:	68f8      	ldr	r0, [r7, #12]
 8000d88:	f000 f8ea 	bl	8000f60 <BNO055_Get_ACC_Mode>

	BNO055_Set_MAG_Mode(handle, BNO055_DATA_MAG_BW_10Hz | BNO055_DATA_MAG_MODE_HIGHACCURACY | BNO055_DATA_MAG_PWRMODE_NORMAL);
 8000d8c:	211b      	movs	r1, #27
 8000d8e:	68f8      	ldr	r0, [r7, #12]
 8000d90:	f000 f91c 	bl	8000fcc <BNO055_Set_MAG_Mode>

	BNO055_Set_GYR_Mode_1(handle, BNO055_DATA_GYR_RANGE_500DPS | BNO055_DATA_GYR_BW_12Hz);
 8000d94:	212a      	movs	r1, #42	@ 0x2a
 8000d96:	68f8      	ldr	r0, [r7, #12]
 8000d98:	f000 f950 	bl	800103c <BNO055_Set_GYR_Mode_1>

	BNO055_Set_GYR_Mode_2(handle, BNO055_DATA_GYR_MODE_NORMAL);
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	68f8      	ldr	r0, [r7, #12]
 8000da0:	f000 f984 	bl	80010ac <BNO055_Set_GYR_Mode_2>


	BNO055_Set_OperationMode(handle, BNO055_DATA_OPR_MODE_AMG);
 8000da4:	2107      	movs	r1, #7
 8000da6:	68f8      	ldr	r0, [r7, #12]
 8000da8:	f000 f832 	bl	8000e10 <BNO055_Set_OperationMode>

	HAL_Delay(100);
 8000dac:	2064      	movs	r0, #100	@ 0x64
 8000dae:	f000 fe7b 	bl	8001aa8 <HAL_Delay>

	BNO055_Get_ChipID(handle);
 8000db2:	68f8      	ldr	r0, [r7, #12]
 8000db4:	f000 f9b2 	bl	800111c <BNO055_Get_ChipID>
	BNO055_Get_ACC_ID(handle);
 8000db8:	68f8      	ldr	r0, [r7, #12]
 8000dba:	f000 f9f0 	bl	800119e <BNO055_Get_ACC_ID>
	BNO055_Get_GYR_ID(handle);
 8000dbe:	68f8      	ldr	r0, [r7, #12]
 8000dc0:	f000 fa2e 	bl	8001220 <BNO055_Get_GYR_ID>
	BNO055_Get_MAG_ID(handle);
 8000dc4:	68f8      	ldr	r0, [r7, #12]
 8000dc6:	f000 fa6d 	bl	80012a4 <BNO055_Get_MAG_ID>
}
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <BNO055_Reset>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
void BNO055_Reset(BNO055_Sensor_T *handle){
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(handle->ResetPort, handle->ResetPin, RESET);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6858      	ldr	r0, [r3, #4]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	891b      	ldrh	r3, [r3, #8]
 8000de2:	2200      	movs	r2, #0
 8000de4:	4619      	mov	r1, r3
 8000de6:	f001 fb35 	bl	8002454 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000dea:	2064      	movs	r0, #100	@ 0x64
 8000dec:	f000 fe5c 	bl	8001aa8 <HAL_Delay>
	HAL_GPIO_WritePin(handle->ResetPort, handle->ResetPin, SET);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6858      	ldr	r0, [r3, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	891b      	ldrh	r3, [r3, #8]
 8000df8:	2201      	movs	r2, #1
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	f001 fb2a 	bl	8002454 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000e00:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e04:	f000 fe50 	bl	8001aa8 <HAL_Delay>
}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <BNO055_Set_OperationMode>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_OperationMode(BNO055_Sensor_T *handle, uint8_t mode){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af02      	add	r7, sp, #8
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	460b      	mov	r3, r1
 8000e1a:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2], res;
	TxBuff[0] = BNO055_REG_ADDRESS_OPR_MODE;
 8000e1c:	233d      	movs	r3, #61	@ 0x3d
 8000e1e:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = mode;
 8000e20:	78fb      	ldrb	r3, [r7, #3]
 8000e22:	737b      	strb	r3, [r7, #13]

    if(!BNO055_Get_PageID(handle)){
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f000 fc0b 	bl	8001640 <BNO055_Get_PageID>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d121      	bne.n	8000e74 <BNO055_Set_OperationMode+0x64>
    	if(!handle->PageID){
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d10a      	bne.n	8000e50 <BNO055_Set_OperationMode+0x40>
    		return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8000e3a:	f107 010c 	add.w	r1, r7, #12
 8000e3e:	2300      	movs	r3, #0
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	2300      	movs	r3, #0
 8000e44:	2202      	movs	r2, #2
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f000 fc59 	bl	80016fe <BNO055_SendReceive>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	e013      	b.n	8000e78 <BNO055_Set_OperationMode+0x68>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0)){
 8000e50:	2100      	movs	r1, #0
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f000 fc12 	bl	800167c <BNO055_Set_PageID>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d10c      	bne.n	8000e78 <BNO055_Set_OperationMode+0x68>
    			return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8000e5e:	f107 010c 	add.w	r1, r7, #12
 8000e62:	2300      	movs	r3, #0
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	2300      	movs	r3, #0
 8000e68:	2202      	movs	r2, #2
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f000 fc47 	bl	80016fe <BNO055_SendReceive>
 8000e70:	4603      	mov	r3, r0
 8000e72:	e001      	b.n	8000e78 <BNO055_Set_OperationMode+0x68>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	e7ff      	b.n	8000e78 <BNO055_Set_OperationMode+0x68>
    }
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <BNO055_Set_PowerMode>:
}

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_PowerMode(BNO055_Sensor_T *handle, uint8_t mode){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af02      	add	r7, sp, #8
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = BNO055_REG_ADDRESS_PWR_MODE;
 8000e8c:	233e      	movs	r3, #62	@ 0x3e
 8000e8e:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = mode;
 8000e90:	78fb      	ldrb	r3, [r7, #3]
 8000e92:	737b      	strb	r3, [r7, #13]

    if(!BNO055_Get_PageID(handle)){
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f000 fbd3 	bl	8001640 <BNO055_Get_PageID>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d121      	bne.n	8000ee4 <BNO055_Set_PowerMode+0x64>
    	if(!handle->PageID){
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10a      	bne.n	8000ec0 <BNO055_Set_PowerMode+0x40>
    		return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8000eaa:	f107 010c 	add.w	r1, r7, #12
 8000eae:	2300      	movs	r3, #0
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f000 fc21 	bl	80016fe <BNO055_SendReceive>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	e013      	b.n	8000ee8 <BNO055_Set_PowerMode+0x68>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0)){
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f000 fbda 	bl	800167c <BNO055_Set_PageID>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d10c      	bne.n	8000ee8 <BNO055_Set_PowerMode+0x68>
    			return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8000ece:	f107 010c 	add.w	r1, r7, #12
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	9300      	str	r3, [sp, #0]
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	2202      	movs	r2, #2
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f000 fc0f 	bl	80016fe <BNO055_SendReceive>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	e001      	b.n	8000ee8 <BNO055_Set_PowerMode+0x68>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e7ff      	b.n	8000ee8 <BNO055_Set_PowerMode+0x68>
    }
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <BNO055_Set_ACC_Mode>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_ACC_Mode(BNO055_Sensor_T *handle, uint8_t mode){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af02      	add	r7, sp, #8
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = BNO055_REG_ADDRESS_ACC_CONFIG;
 8000efc:	2308      	movs	r3, #8
 8000efe:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = mode;
 8000f00:	78fb      	ldrb	r3, [r7, #3]
 8000f02:	737b      	strb	r3, [r7, #13]

    if(!BNO055_Get_PageID(handle)){
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f000 fb9b 	bl	8001640 <BNO055_Get_PageID>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d121      	bne.n	8000f54 <BNO055_Set_ACC_Mode+0x64>
    	if(handle->PageID){
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d00a      	beq.n	8000f30 <BNO055_Set_ACC_Mode+0x40>
    		return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8000f1a:	f107 010c 	add.w	r1, r7, #12
 8000f1e:	2300      	movs	r3, #0
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	2300      	movs	r3, #0
 8000f24:	2202      	movs	r2, #2
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f000 fbe9 	bl	80016fe <BNO055_SendReceive>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	e013      	b.n	8000f58 <BNO055_Set_ACC_Mode+0x68>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_1)){
 8000f30:	2101      	movs	r1, #1
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f000 fba2 	bl	800167c <BNO055_Set_PageID>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d10c      	bne.n	8000f58 <BNO055_Set_ACC_Mode+0x68>
    			return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8000f3e:	f107 010c 	add.w	r1, r7, #12
 8000f42:	2300      	movs	r3, #0
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	2300      	movs	r3, #0
 8000f48:	2202      	movs	r2, #2
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f000 fbd7 	bl	80016fe <BNO055_SendReceive>
 8000f50:	4603      	mov	r3, r0
 8000f52:	e001      	b.n	8000f58 <BNO055_Set_ACC_Mode+0x68>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e7ff      	b.n	8000f58 <BNO055_Set_ACC_Mode+0x68>
    }
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <BNO055_Get_ACC_Mode>:


/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_ACC_Mode(BNO055_Sensor_T *handle){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af02      	add	r7, sp, #8
 8000f66:	6078      	str	r0, [r7, #4]
	uint8_t TxBuff[1], RxBuff[1];
	TxBuff[0] = BNO055_REG_ADDRESS_ACC_CONFIG;
 8000f68:	2308      	movs	r3, #8
 8000f6a:	733b      	strb	r3, [r7, #12]

    if(!BNO055_Get_PageID(handle)){
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 fb67 	bl	8001640 <BNO055_Get_PageID>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d123      	bne.n	8000fc0 <BNO055_Get_ACC_Mode+0x60>
    	if(handle->PageID){
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00b      	beq.n	8000f9a <BNO055_Get_ACC_Mode+0x3a>
    		return BNO055_SendReceive(handle,TxBuff, 1, RxBuff, 1);
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	f107 010c 	add.w	r1, r7, #12
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	9200      	str	r2, [sp, #0]
 8000f8e:	2201      	movs	r2, #1
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f000 fbb4 	bl	80016fe <BNO055_SendReceive>
 8000f96:	4603      	mov	r3, r0
 8000f98:	e014      	b.n	8000fc4 <BNO055_Get_ACC_Mode+0x64>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_1)){
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f000 fb6d 	bl	800167c <BNO055_Set_PageID>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d10d      	bne.n	8000fc4 <BNO055_Get_ACC_Mode+0x64>
    			return BNO055_SendReceive(handle,TxBuff, 1, RxBuff, 1);
 8000fa8:	f107 0308 	add.w	r3, r7, #8
 8000fac:	f107 010c 	add.w	r1, r7, #12
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	9200      	str	r2, [sp, #0]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 fba1 	bl	80016fe <BNO055_SendReceive>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	e001      	b.n	8000fc4 <BNO055_Get_ACC_Mode+0x64>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e7ff      	b.n	8000fc4 <BNO055_Get_ACC_Mode+0x64>
    }
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <BNO055_Set_MAG_Mode>:


/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_MAG_Mode(BNO055_Sensor_T *handle, uint8_t mode){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = BNO055_REG_ADDRESS_MAG_CONFIG;
 8000fd8:	2309      	movs	r3, #9
 8000fda:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = mode;
 8000fdc:	78fb      	ldrb	r3, [r7, #3]
 8000fde:	737b      	strb	r3, [r7, #13]

    if(!BNO055_Get_PageID(handle)){
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f000 fb2d 	bl	8001640 <BNO055_Get_PageID>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d121      	bne.n	8001030 <BNO055_Set_MAG_Mode+0x64>
    	if(handle->PageID){
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d00a      	beq.n	800100c <BNO055_Set_MAG_Mode+0x40>
    		return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8000ff6:	f107 010c 	add.w	r1, r7, #12
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	2300      	movs	r3, #0
 8001000:	2202      	movs	r2, #2
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f000 fb7b 	bl	80016fe <BNO055_SendReceive>
 8001008:	4603      	mov	r3, r0
 800100a:	e013      	b.n	8001034 <BNO055_Set_MAG_Mode+0x68>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_1)){
 800100c:	2101      	movs	r1, #1
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 fb34 	bl	800167c <BNO055_Set_PageID>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d10c      	bne.n	8001034 <BNO055_Set_MAG_Mode+0x68>
    			return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 800101a:	f107 010c 	add.w	r1, r7, #12
 800101e:	2300      	movs	r3, #0
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	2300      	movs	r3, #0
 8001024:	2202      	movs	r2, #2
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 fb69 	bl	80016fe <BNO055_SendReceive>
 800102c:	4603      	mov	r3, r0
 800102e:	e001      	b.n	8001034 <BNO055_Set_MAG_Mode+0x68>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e7ff      	b.n	8001034 <BNO055_Set_MAG_Mode+0x68>
    }
}
 8001034:	4618      	mov	r0, r3
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <BNO055_Set_GYR_Mode_1>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_GYR_Mode_1(BNO055_Sensor_T *handle, uint8_t mode){
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af02      	add	r7, sp, #8
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = BNO055_REG_ADDRESS_GYR_CONFIG_1;
 8001048:	230a      	movs	r3, #10
 800104a:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = mode;
 800104c:	78fb      	ldrb	r3, [r7, #3]
 800104e:	737b      	strb	r3, [r7, #13]

    if(!BNO055_Get_PageID(handle)){
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f000 faf5 	bl	8001640 <BNO055_Get_PageID>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d121      	bne.n	80010a0 <BNO055_Set_GYR_Mode_1+0x64>
    	if(handle->PageID){
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001062:	2b00      	cmp	r3, #0
 8001064:	d00a      	beq.n	800107c <BNO055_Set_GYR_Mode_1+0x40>
    		return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8001066:	f107 010c 	add.w	r1, r7, #12
 800106a:	2300      	movs	r3, #0
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2300      	movs	r3, #0
 8001070:	2202      	movs	r2, #2
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 fb43 	bl	80016fe <BNO055_SendReceive>
 8001078:	4603      	mov	r3, r0
 800107a:	e013      	b.n	80010a4 <BNO055_Set_GYR_Mode_1+0x68>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_1)){
 800107c:	2101      	movs	r1, #1
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f000 fafc 	bl	800167c <BNO055_Set_PageID>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d10c      	bne.n	80010a4 <BNO055_Set_GYR_Mode_1+0x68>
    			return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 800108a:	f107 010c 	add.w	r1, r7, #12
 800108e:	2300      	movs	r3, #0
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	2300      	movs	r3, #0
 8001094:	2202      	movs	r2, #2
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f000 fb31 	bl	80016fe <BNO055_SendReceive>
 800109c:	4603      	mov	r3, r0
 800109e:	e001      	b.n	80010a4 <BNO055_Set_GYR_Mode_1+0x68>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e7ff      	b.n	80010a4 <BNO055_Set_GYR_Mode_1+0x68>
    }
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <BNO055_Set_GYR_Mode_2>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_GYR_Mode_2(BNO055_Sensor_T *handle, uint8_t mode){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af02      	add	r7, sp, #8
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	460b      	mov	r3, r1
 80010b6:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = BNO055_REG_ADDRESS_GYR_CONFIG_2;
 80010b8:	230b      	movs	r3, #11
 80010ba:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = mode;
 80010bc:	78fb      	ldrb	r3, [r7, #3]
 80010be:	737b      	strb	r3, [r7, #13]

    if(!BNO055_Get_PageID(handle)){
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f000 fabd 	bl	8001640 <BNO055_Get_PageID>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d121      	bne.n	8001110 <BNO055_Set_GYR_Mode_2+0x64>
    	if(handle->PageID){
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00a      	beq.n	80010ec <BNO055_Set_GYR_Mode_2+0x40>
    		return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 80010d6:	f107 010c 	add.w	r1, r7, #12
 80010da:	2300      	movs	r3, #0
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2300      	movs	r3, #0
 80010e0:	2202      	movs	r2, #2
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f000 fb0b 	bl	80016fe <BNO055_SendReceive>
 80010e8:	4603      	mov	r3, r0
 80010ea:	e013      	b.n	8001114 <BNO055_Set_GYR_Mode_2+0x68>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_1)){
 80010ec:	2101      	movs	r1, #1
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f000 fac4 	bl	800167c <BNO055_Set_PageID>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d10c      	bne.n	8001114 <BNO055_Set_GYR_Mode_2+0x68>
    			return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 80010fa:	f107 010c 	add.w	r1, r7, #12
 80010fe:	2300      	movs	r3, #0
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2300      	movs	r3, #0
 8001104:	2202      	movs	r2, #2
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 faf9 	bl	80016fe <BNO055_SendReceive>
 800110c:	4603      	mov	r3, r0
 800110e:	e001      	b.n	8001114 <BNO055_Set_GYR_Mode_2+0x68>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e7ff      	b.n	8001114 <BNO055_Set_GYR_Mode_2+0x68>
    }
}
 8001114:	4618      	mov	r0, r3
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <BNO055_Get_ChipID>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_ChipID(BNO055_Sensor_T *handle){
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af02      	add	r7, sp, #8
 8001122:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[1];
	BNO055_ReturnTypeDef_T res= BNO055_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	73fb      	strb	r3, [r7, #15]
	Txbuff[0] = BNO055_REG_ADDRESS_CHIP_ID;
 8001128:	2300      	movs	r3, #0
 800112a:	733b      	strb	r3, [r7, #12]

    if(!BNO055_Get_PageID(handle)){
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f000 fa87 	bl	8001640 <BNO055_Get_PageID>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d125      	bne.n	8001184 <BNO055_Get_ChipID+0x68>
    	if(!handle->PageID){
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800113e:	2b00      	cmp	r3, #0
 8001140:	d10c      	bne.n	800115c <BNO055_Get_ChipID+0x40>
    		res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 8001142:	f107 0308 	add.w	r3, r7, #8
 8001146:	f107 010c 	add.w	r1, r7, #12
 800114a:	2201      	movs	r2, #1
 800114c:	9200      	str	r2, [sp, #0]
 800114e:	2201      	movs	r2, #1
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 fad4 	bl	80016fe <BNO055_SendReceive>
 8001156:	4603      	mov	r3, r0
 8001158:	73fb      	strb	r3, [r7, #15]
 800115a:	e015      	b.n	8001188 <BNO055_Get_ChipID+0x6c>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0)){
 800115c:	2100      	movs	r1, #0
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f000 fa8c 	bl	800167c <BNO055_Set_PageID>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10e      	bne.n	8001188 <BNO055_Get_ChipID+0x6c>
    			res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 800116a:	f107 0308 	add.w	r3, r7, #8
 800116e:	f107 010c 	add.w	r1, r7, #12
 8001172:	2201      	movs	r2, #1
 8001174:	9200      	str	r2, [sp, #0]
 8001176:	2201      	movs	r2, #1
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f000 fac0 	bl	80016fe <BNO055_SendReceive>
 800117e:	4603      	mov	r3, r0
 8001180:	73fb      	strb	r3, [r7, #15]
 8001182:	e001      	b.n	8001188 <BNO055_Get_ChipID+0x6c>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e006      	b.n	8001196 <BNO055_Get_ChipID+0x7a>
    }

    if(!res)
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d102      	bne.n	8001194 <BNO055_Get_ChipID+0x78>
     	handle->IDs.CHIP_ID = RxBuff[0];
 800118e:	7a3a      	ldrb	r2, [r7, #8]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	779a      	strb	r2, [r3, #30]

     return res;
 8001194:	7bfb      	ldrb	r3, [r7, #15]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <BNO055_Get_ACC_ID>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_ACC_ID(BNO055_Sensor_T *handle){
 800119e:	b580      	push	{r7, lr}
 80011a0:	b086      	sub	sp, #24
 80011a2:	af02      	add	r7, sp, #8
 80011a4:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[1];
	BNO055_ReturnTypeDef_T res= BNO055_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	73fb      	strb	r3, [r7, #15]
	Txbuff[0] = BNO055_REG_ADDRESS_ACC_ID;
 80011aa:	2301      	movs	r3, #1
 80011ac:	733b      	strb	r3, [r7, #12]

    if(!BNO055_Get_PageID(handle)){
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f000 fa46 	bl	8001640 <BNO055_Get_PageID>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d125      	bne.n	8001206 <BNO055_Get_ACC_ID+0x68>
    	if(!handle->PageID){
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d10c      	bne.n	80011de <BNO055_Get_ACC_ID+0x40>
    		res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 80011c4:	f107 0308 	add.w	r3, r7, #8
 80011c8:	f107 010c 	add.w	r1, r7, #12
 80011cc:	2201      	movs	r2, #1
 80011ce:	9200      	str	r2, [sp, #0]
 80011d0:	2201      	movs	r2, #1
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f000 fa93 	bl	80016fe <BNO055_SendReceive>
 80011d8:	4603      	mov	r3, r0
 80011da:	73fb      	strb	r3, [r7, #15]
 80011dc:	e015      	b.n	800120a <BNO055_Get_ACC_ID+0x6c>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0)){
 80011de:	2100      	movs	r1, #0
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f000 fa4b 	bl	800167c <BNO055_Set_PageID>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d10e      	bne.n	800120a <BNO055_Get_ACC_ID+0x6c>
    			res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 80011ec:	f107 0308 	add.w	r3, r7, #8
 80011f0:	f107 010c 	add.w	r1, r7, #12
 80011f4:	2201      	movs	r2, #1
 80011f6:	9200      	str	r2, [sp, #0]
 80011f8:	2201      	movs	r2, #1
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 fa7f 	bl	80016fe <BNO055_SendReceive>
 8001200:	4603      	mov	r3, r0
 8001202:	73fb      	strb	r3, [r7, #15]
 8001204:	e001      	b.n	800120a <BNO055_Get_ACC_ID+0x6c>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e006      	b.n	8001218 <BNO055_Get_ACC_ID+0x7a>
    }

    if(!res)
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d102      	bne.n	8001216 <BNO055_Get_ACC_ID+0x78>
     	handle->IDs.ACC_ID = RxBuff[0];
 8001210:	7a3a      	ldrb	r2, [r7, #8]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	77da      	strb	r2, [r3, #31]

     return res;
 8001216:	7bfb      	ldrb	r3, [r7, #15]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <BNO055_Get_GYR_ID>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_GYR_ID(BNO055_Sensor_T *handle){
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af02      	add	r7, sp, #8
 8001226:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[1];
	BNO055_ReturnTypeDef_T res= BNO055_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	73fb      	strb	r3, [r7, #15]
	Txbuff[0] = BNO055_REG_ADDRESS_GYR_ID;
 800122c:	2303      	movs	r3, #3
 800122e:	733b      	strb	r3, [r7, #12]

    if(!BNO055_Get_PageID(handle)){
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f000 fa05 	bl	8001640 <BNO055_Get_PageID>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d125      	bne.n	8001288 <BNO055_Get_GYR_ID+0x68>
    	if(!handle->PageID){
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001242:	2b00      	cmp	r3, #0
 8001244:	d10c      	bne.n	8001260 <BNO055_Get_GYR_ID+0x40>
    		res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 8001246:	f107 0308 	add.w	r3, r7, #8
 800124a:	f107 010c 	add.w	r1, r7, #12
 800124e:	2201      	movs	r2, #1
 8001250:	9200      	str	r2, [sp, #0]
 8001252:	2201      	movs	r2, #1
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 fa52 	bl	80016fe <BNO055_SendReceive>
 800125a:	4603      	mov	r3, r0
 800125c:	73fb      	strb	r3, [r7, #15]
 800125e:	e015      	b.n	800128c <BNO055_Get_GYR_ID+0x6c>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0)){
 8001260:	2100      	movs	r1, #0
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 fa0a 	bl	800167c <BNO055_Set_PageID>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d10e      	bne.n	800128c <BNO055_Get_GYR_ID+0x6c>
    			res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 800126e:	f107 0308 	add.w	r3, r7, #8
 8001272:	f107 010c 	add.w	r1, r7, #12
 8001276:	2201      	movs	r2, #1
 8001278:	9200      	str	r2, [sp, #0]
 800127a:	2201      	movs	r2, #1
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f000 fa3e 	bl	80016fe <BNO055_SendReceive>
 8001282:	4603      	mov	r3, r0
 8001284:	73fb      	strb	r3, [r7, #15]
 8001286:	e001      	b.n	800128c <BNO055_Get_GYR_ID+0x6c>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e007      	b.n	800129c <BNO055_Get_GYR_ID+0x7c>
    }

    if(!res)
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d103      	bne.n	800129a <BNO055_Get_GYR_ID+0x7a>
    	handle->IDs.GYR_ID = RxBuff[0];
 8001292:	7a3a      	ldrb	r2, [r7, #8]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    return res;
 800129a:	7bfb      	ldrb	r3, [r7, #15]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <BNO055_Get_MAG_ID>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_MAG_ID(BNO055_Sensor_T *handle){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af02      	add	r7, sp, #8
 80012aa:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[1];
	BNO055_ReturnTypeDef_T res= BNO055_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	73fb      	strb	r3, [r7, #15]
	Txbuff[0] = BNO055_REG_ADDRESS_MAG_ID;
 80012b0:	2302      	movs	r3, #2
 80012b2:	733b      	strb	r3, [r7, #12]

    if(!BNO055_Get_PageID(handle)){
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 f9c3 	bl	8001640 <BNO055_Get_PageID>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d125      	bne.n	800130c <BNO055_Get_MAG_ID+0x68>
    	if(!handle->PageID){
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d10c      	bne.n	80012e4 <BNO055_Get_MAG_ID+0x40>
    		res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 80012ca:	f107 0308 	add.w	r3, r7, #8
 80012ce:	f107 010c 	add.w	r1, r7, #12
 80012d2:	2201      	movs	r2, #1
 80012d4:	9200      	str	r2, [sp, #0]
 80012d6:	2201      	movs	r2, #1
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f000 fa10 	bl	80016fe <BNO055_SendReceive>
 80012de:	4603      	mov	r3, r0
 80012e0:	73fb      	strb	r3, [r7, #15]
 80012e2:	e015      	b.n	8001310 <BNO055_Get_MAG_ID+0x6c>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0)){
 80012e4:	2100      	movs	r1, #0
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f000 f9c8 	bl	800167c <BNO055_Set_PageID>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d10e      	bne.n	8001310 <BNO055_Get_MAG_ID+0x6c>
    			res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 80012f2:	f107 0308 	add.w	r3, r7, #8
 80012f6:	f107 010c 	add.w	r1, r7, #12
 80012fa:	2201      	movs	r2, #1
 80012fc:	9200      	str	r2, [sp, #0]
 80012fe:	2201      	movs	r2, #1
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 f9fc 	bl	80016fe <BNO055_SendReceive>
 8001306:	4603      	mov	r3, r0
 8001308:	73fb      	strb	r3, [r7, #15]
 800130a:	e001      	b.n	8001310 <BNO055_Get_MAG_ID+0x6c>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e007      	b.n	8001320 <BNO055_Get_MAG_ID+0x7c>
    }

    if(!res)
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d103      	bne.n	800131e <BNO055_Get_MAG_ID+0x7a>
        handle->IDs.MAG_ID = RxBuff[0];
 8001316:	7a3a      	ldrb	r2, [r7, #8]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f883 2020 	strb.w	r2, [r3, #32]

    return res;
 800131e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <BNO055_Get_ACC_Data>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_ACC_Data(BNO055_Sensor_T *handle){
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af02      	add	r7, sp, #8
 800132e:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[6];
	BNO055_ReturnTypeDef_T res = BNO055_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	75fb      	strb	r3, [r7, #23]
	Txbuff[0] = BNO055_REG_ADDRESS_ACC_X_DATA_LSB;
 8001334:	2308      	movs	r3, #8
 8001336:	753b      	strb	r3, [r7, #20]

	BNO055_Get_PageID(handle);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f000 f981 	bl	8001640 <BNO055_Get_PageID>
	if(!handle->PageID)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001344:	2b00      	cmp	r3, #0
 8001346:	d10c      	bne.n	8001362 <BNO055_Get_ACC_Data+0x3a>
		res =BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 6);
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	f107 0114 	add.w	r1, r7, #20
 8001350:	2206      	movs	r2, #6
 8001352:	9200      	str	r2, [sp, #0]
 8001354:	2201      	movs	r2, #1
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 f9d1 	bl	80016fe <BNO055_SendReceive>
 800135c:	4603      	mov	r3, r0
 800135e:	75fb      	strb	r3, [r7, #23]
 8001360:	e012      	b.n	8001388 <BNO055_Get_ACC_Data+0x60>
	else{
		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0))
 8001362:	2100      	movs	r1, #0
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f000 f989 	bl	800167c <BNO055_Set_PageID>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d10b      	bne.n	8001388 <BNO055_Get_ACC_Data+0x60>
			res =BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 6);
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	f107 0114 	add.w	r1, r7, #20
 8001378:	2206      	movs	r2, #6
 800137a:	9200      	str	r2, [sp, #0]
 800137c:	2201      	movs	r2, #1
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 f9bd 	bl	80016fe <BNO055_SendReceive>
 8001384:	4603      	mov	r3, r0
 8001386:	75fb      	strb	r3, [r7, #23]
	}
	if(!res){
 8001388:	7dfb      	ldrb	r3, [r7, #23]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d14d      	bne.n	800142a <BNO055_Get_ACC_Data+0x102>
		if(!(RxBuff[1]>>7)){
 800138e:	7b7b      	ldrb	r3, [r7, #13]
 8001390:	b25b      	sxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	db0b      	blt.n	80013ae <BNO055_Get_ACC_Data+0x86>
			if( ((RxBuff[1]>>6)&(0x01)) ){
 8001396:	7b7b      	ldrb	r3, [r7, #13]
 8001398:	099b      	lsrs	r3, r3, #6
 800139a:	b2db      	uxtb	r3, r3
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d004      	beq.n	80013ae <BNO055_Get_ACC_Data+0x86>
				RxBuff[1] |= 0x80;
 80013a4:	7b7b      	ldrb	r3, [r7, #13]
 80013a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	737b      	strb	r3, [r7, #13]
			}
		}
		if(!(RxBuff[3]>>7)){
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	b25b      	sxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	db0b      	blt.n	80013ce <BNO055_Get_ACC_Data+0xa6>
			if( ((RxBuff[3]>>6)&(0x01)) ){
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	099b      	lsrs	r3, r3, #6
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d004      	beq.n	80013ce <BNO055_Get_ACC_Data+0xa6>
				RxBuff[3] |= 0x80;
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	73fb      	strb	r3, [r7, #15]
			}
		}
		if(!(RxBuff[5]>>7)){
 80013ce:	7c7b      	ldrb	r3, [r7, #17]
 80013d0:	b25b      	sxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	db0b      	blt.n	80013ee <BNO055_Get_ACC_Data+0xc6>
			if( ((RxBuff[5]>>6)&(0x01)) ){
 80013d6:	7c7b      	ldrb	r3, [r7, #17]
 80013d8:	099b      	lsrs	r3, r3, #6
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d004      	beq.n	80013ee <BNO055_Get_ACC_Data+0xc6>
				RxBuff[5] |= 0x80;
 80013e4:	7c7b      	ldrb	r3, [r7, #17]
 80013e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	747b      	strb	r3, [r7, #17]
			}
		}
		handle->ImuData.ACC_X = (int16_t)((int16_t)(RxBuff[1]<<8) | RxBuff[0]);
 80013ee:	7b7b      	ldrb	r3, [r7, #13]
 80013f0:	b21b      	sxth	r3, r3
 80013f2:	021b      	lsls	r3, r3, #8
 80013f4:	b21a      	sxth	r2, r3
 80013f6:	7b3b      	ldrb	r3, [r7, #12]
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	4313      	orrs	r3, r2
 80013fc:	b21a      	sxth	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	819a      	strh	r2, [r3, #12]
		handle->ImuData.ACC_Y = (int16_t)((int16_t)(RxBuff[3]<<8) | RxBuff[2]);
 8001402:	7bfb      	ldrb	r3, [r7, #15]
 8001404:	b21b      	sxth	r3, r3
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	b21a      	sxth	r2, r3
 800140a:	7bbb      	ldrb	r3, [r7, #14]
 800140c:	b21b      	sxth	r3, r3
 800140e:	4313      	orrs	r3, r2
 8001410:	b21a      	sxth	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	81da      	strh	r2, [r3, #14]
		handle->ImuData.ACC_Z = (int16_t)((int16_t)(RxBuff[5]<<8) | RxBuff[4]);
 8001416:	7c7b      	ldrb	r3, [r7, #17]
 8001418:	b21b      	sxth	r3, r3
 800141a:	021b      	lsls	r3, r3, #8
 800141c:	b21a      	sxth	r2, r3
 800141e:	7c3b      	ldrb	r3, [r7, #16]
 8001420:	b21b      	sxth	r3, r3
 8001422:	4313      	orrs	r3, r2
 8001424:	b21a      	sxth	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	821a      	strh	r2, [r3, #16]
	}
	return res;
 800142a:	7dfb      	ldrb	r3, [r7, #23]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <BNO055_Get_MAG_Data>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_MAG_Data(BNO055_Sensor_T *handle){
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af02      	add	r7, sp, #8
 800143a:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[6];
	BNO055_ReturnTypeDef_T res = BNO055_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	75fb      	strb	r3, [r7, #23]
	Txbuff[0] = BNO055_REG_ADDRESS_MAG_X_DATA_LSB;
 8001440:	230e      	movs	r3, #14
 8001442:	753b      	strb	r3, [r7, #20]

	BNO055_Get_PageID(handle);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f000 f8fb 	bl	8001640 <BNO055_Get_PageID>
	if(!handle->PageID)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001450:	2b00      	cmp	r3, #0
 8001452:	d10c      	bne.n	800146e <BNO055_Get_MAG_Data+0x3a>
		res =BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 6);
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	f107 0114 	add.w	r1, r7, #20
 800145c:	2206      	movs	r2, #6
 800145e:	9200      	str	r2, [sp, #0]
 8001460:	2201      	movs	r2, #1
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 f94b 	bl	80016fe <BNO055_SendReceive>
 8001468:	4603      	mov	r3, r0
 800146a:	75fb      	strb	r3, [r7, #23]
 800146c:	e012      	b.n	8001494 <BNO055_Get_MAG_Data+0x60>
	else{
		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0))
 800146e:	2100      	movs	r1, #0
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f000 f903 	bl	800167c <BNO055_Set_PageID>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d10b      	bne.n	8001494 <BNO055_Get_MAG_Data+0x60>
			res =BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 6);
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	f107 0114 	add.w	r1, r7, #20
 8001484:	2206      	movs	r2, #6
 8001486:	9200      	str	r2, [sp, #0]
 8001488:	2201      	movs	r2, #1
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 f937 	bl	80016fe <BNO055_SendReceive>
 8001490:	4603      	mov	r3, r0
 8001492:	75fb      	strb	r3, [r7, #23]
	}

	if(!res){
 8001494:	7dfb      	ldrb	r3, [r7, #23]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d11d      	bne.n	80014d6 <BNO055_Get_MAG_Data+0xa2>
		handle->ImuData.MAG_X = (RxBuff[0] | (RxBuff[1]<<8));
 800149a:	7b3b      	ldrb	r3, [r7, #12]
 800149c:	b21a      	sxth	r2, r3
 800149e:	7b7b      	ldrb	r3, [r7, #13]
 80014a0:	b21b      	sxth	r3, r3
 80014a2:	021b      	lsls	r3, r3, #8
 80014a4:	b21b      	sxth	r3, r3
 80014a6:	4313      	orrs	r3, r2
 80014a8:	b21a      	sxth	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	831a      	strh	r2, [r3, #24]
		handle->ImuData.MAG_Y = (RxBuff[2] | (RxBuff[3]<<8));
 80014ae:	7bbb      	ldrb	r3, [r7, #14]
 80014b0:	b21a      	sxth	r2, r3
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	b21b      	sxth	r3, r3
 80014b6:	021b      	lsls	r3, r3, #8
 80014b8:	b21b      	sxth	r3, r3
 80014ba:	4313      	orrs	r3, r2
 80014bc:	b21a      	sxth	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	835a      	strh	r2, [r3, #26]
		handle->ImuData.MAG_Z = (RxBuff[4] | (RxBuff[5]<<8));
 80014c2:	7c3b      	ldrb	r3, [r7, #16]
 80014c4:	b21a      	sxth	r2, r3
 80014c6:	7c7b      	ldrb	r3, [r7, #17]
 80014c8:	b21b      	sxth	r3, r3
 80014ca:	021b      	lsls	r3, r3, #8
 80014cc:	b21b      	sxth	r3, r3
 80014ce:	4313      	orrs	r3, r2
 80014d0:	b21a      	sxth	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	839a      	strh	r2, [r3, #28]
	}
	return res;
 80014d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <BNO055_Get_GYR_Data>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_GYR_Data(BNO055_Sensor_T *handle){
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af02      	add	r7, sp, #8
 80014e6:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[6];
	BNO055_ReturnTypeDef_T res = BNO055_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	75fb      	strb	r3, [r7, #23]
	Txbuff[0] = BNO055_REG_ADDRESS_GYR_X_DATA_LSB;
 80014ec:	2314      	movs	r3, #20
 80014ee:	753b      	strb	r3, [r7, #20]

	BNO055_Get_PageID(handle);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f000 f8a5 	bl	8001640 <BNO055_Get_PageID>
	if(!handle->PageID)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d10c      	bne.n	800151a <BNO055_Get_GYR_Data+0x3a>
		res =BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 6);
 8001500:	f107 030c 	add.w	r3, r7, #12
 8001504:	f107 0114 	add.w	r1, r7, #20
 8001508:	2206      	movs	r2, #6
 800150a:	9200      	str	r2, [sp, #0]
 800150c:	2201      	movs	r2, #1
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 f8f5 	bl	80016fe <BNO055_SendReceive>
 8001514:	4603      	mov	r3, r0
 8001516:	75fb      	strb	r3, [r7, #23]
 8001518:	e012      	b.n	8001540 <BNO055_Get_GYR_Data+0x60>
	else{
		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0))
 800151a:	2100      	movs	r1, #0
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 f8ad 	bl	800167c <BNO055_Set_PageID>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d10b      	bne.n	8001540 <BNO055_Get_GYR_Data+0x60>
			res =BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 6);
 8001528:	f107 030c 	add.w	r3, r7, #12
 800152c:	f107 0114 	add.w	r1, r7, #20
 8001530:	2206      	movs	r2, #6
 8001532:	9200      	str	r2, [sp, #0]
 8001534:	2201      	movs	r2, #1
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 f8e1 	bl	80016fe <BNO055_SendReceive>
 800153c:	4603      	mov	r3, r0
 800153e:	75fb      	strb	r3, [r7, #23]
		}

	if(!res){
 8001540:	7dfb      	ldrb	r3, [r7, #23]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d11d      	bne.n	8001582 <BNO055_Get_GYR_Data+0xa2>
		handle->ImuData.GYR_X = (RxBuff[0] | (RxBuff[1]<<8));
 8001546:	7b3b      	ldrb	r3, [r7, #12]
 8001548:	b21a      	sxth	r2, r3
 800154a:	7b7b      	ldrb	r3, [r7, #13]
 800154c:	b21b      	sxth	r3, r3
 800154e:	021b      	lsls	r3, r3, #8
 8001550:	b21b      	sxth	r3, r3
 8001552:	4313      	orrs	r3, r2
 8001554:	b21a      	sxth	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	825a      	strh	r2, [r3, #18]
		handle->ImuData.GYR_Y = (RxBuff[2] | (RxBuff[3]<<8));
 800155a:	7bbb      	ldrb	r3, [r7, #14]
 800155c:	b21a      	sxth	r2, r3
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	b21b      	sxth	r3, r3
 8001562:	021b      	lsls	r3, r3, #8
 8001564:	b21b      	sxth	r3, r3
 8001566:	4313      	orrs	r3, r2
 8001568:	b21a      	sxth	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	829a      	strh	r2, [r3, #20]
		handle->ImuData.GYR_Z = (RxBuff[4] | (RxBuff[5]<<8));
 800156e:	7c3b      	ldrb	r3, [r7, #16]
 8001570:	b21a      	sxth	r2, r3
 8001572:	7c7b      	ldrb	r3, [r7, #17]
 8001574:	b21b      	sxth	r3, r3
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	b21b      	sxth	r3, r3
 800157a:	4313      	orrs	r3, r2
 800157c:	b21a      	sxth	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	82da      	strh	r2, [r3, #22]
	}
		return res;
 8001582:	7dfb      	ldrb	r3, [r7, #23]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <BNO055_Set_DataUnit>:
}

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_DataUnit(BNO055_Sensor_T *handle, uint8_t data){
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af02      	add	r7, sp, #8
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = 0x3B;
 8001598:	233b      	movs	r3, #59	@ 0x3b
 800159a:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = data;
 800159c:	78fb      	ldrb	r3, [r7, #3]
 800159e:	737b      	strb	r3, [r7, #13]

	BNO055_Get_PageID(handle);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 f84d 	bl	8001640 <BNO055_Get_PageID>
	if(handle->PageID){
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <BNO055_Set_DataUnit+0x2c>
		BNO055_Set_PageID(handle, BNO055_PAGE_ID_0);
 80015b0:	2100      	movs	r1, #0
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 f862 	bl	800167c <BNO055_Set_PageID>
	}

	if(!handle->PageID){
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d10a      	bne.n	80015d8 <BNO055_Set_DataUnit+0x4c>
		return BNO055_SendReceive(handle, TxBuff, 2, 0, 0);
 80015c2:	f107 010c 	add.w	r1, r7, #12
 80015c6:	2300      	movs	r3, #0
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	2300      	movs	r3, #0
 80015cc:	2202      	movs	r2, #2
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f895 	bl	80016fe <BNO055_SendReceive>
 80015d4:	4603      	mov	r3, r0
 80015d6:	e000      	b.n	80015da <BNO055_Set_DataUnit+0x4e>
	}
	return BNO055_ERROR;
 80015d8:	2301      	movs	r3, #1
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <BNO055_Get_DataUnit>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_DataUnit(BNO055_Sensor_T *handle){
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b086      	sub	sp, #24
 80015e6:	af02      	add	r7, sp, #8
 80015e8:	6078      	str	r0, [r7, #4]
	uint8_t TxBuff[1], RxBuff[1];
	TxBuff[0] = 0x3B;
 80015ea:	233b      	movs	r3, #59	@ 0x3b
 80015ec:	733b      	strb	r3, [r7, #12]

	BNO055_Get_PageID(handle);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f826 	bl	8001640 <BNO055_Get_PageID>
	if(handle->PageID){
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <BNO055_Get_DataUnit+0x24>
		BNO055_Set_PageID(handle, BNO055_PAGE_ID_0);
 80015fe:	2100      	movs	r1, #0
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f000 f83b 	bl	800167c <BNO055_Set_PageID>
	}
	if(!handle->PageID){
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800160c:	2b00      	cmp	r3, #0
 800160e:	d112      	bne.n	8001636 <BNO055_Get_DataUnit+0x54>
		if(!BNO055_SendReceive(handle, TxBuff, 1, RxBuff, 1)){
 8001610:	f107 0308 	add.w	r3, r7, #8
 8001614:	f107 010c 	add.w	r1, r7, #12
 8001618:	2201      	movs	r2, #1
 800161a:	9200      	str	r2, [sp, #0]
 800161c:	2201      	movs	r2, #1
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 f86d 	bl	80016fe <BNO055_SendReceive>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d105      	bne.n	8001636 <BNO055_Get_DataUnit+0x54>
			handle->UnitStat = RxBuff[0];
 800162a:	7a3a      	ldrb	r2, [r7, #8]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			return BNO055_OK;
 8001632:	2300      	movs	r3, #0
 8001634:	e000      	b.n	8001638 <BNO055_Get_DataUnit+0x56>
		}
	}
	return BNO055_ERROR;
 8001636:	2301      	movs	r3, #1

}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <BNO055_Get_PageID>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_PageID(BNO055_Sensor_T *handle){
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af02      	add	r7, sp, #8
 8001646:	6078      	str	r0, [r7, #4]
	uint8_t TxBuff[1], RxBuff[1];
	TxBuff[0] = 0x07;
 8001648:	2307      	movs	r3, #7
 800164a:	733b      	strb	r3, [r7, #12]
	if(BNO055_SendReceive(handle, TxBuff, 1, RxBuff, 1))
 800164c:	f107 0308 	add.w	r3, r7, #8
 8001650:	f107 010c 	add.w	r1, r7, #12
 8001654:	2201      	movs	r2, #1
 8001656:	9200      	str	r2, [sp, #0]
 8001658:	2201      	movs	r2, #1
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 f84f 	bl	80016fe <BNO055_SendReceive>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <BNO055_Get_PageID+0x2a>
		return BNO055_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e004      	b.n	8001674 <BNO055_Get_PageID+0x34>
	else
		handle->PageID = RxBuff[0];
 800166a:	7a3a      	ldrb	r2, [r7, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	return BNO055_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <BNO055_Set_PageID>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_PageID(BNO055_Sensor_T *handle, uint8_t PageID){
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af02      	add	r7, sp, #8
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = 0x07;
 8001688:	2307      	movs	r3, #7
 800168a:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = PageID;
 800168c:	78fb      	ldrb	r3, [r7, #3]
 800168e:	737b      	strb	r3, [r7, #13]
	if(BNO055_SendReceive(handle, TxBuff, 2, 0, 0))
 8001690:	f107 010c 	add.w	r1, r7, #12
 8001694:	2300      	movs	r3, #0
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	2300      	movs	r3, #0
 800169a:	2202      	movs	r2, #2
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f000 f82e 	bl	80016fe <BNO055_SendReceive>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <BNO055_Set_PageID+0x30>
		return BNO055_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e006      	b.n	80016ba <BNO055_Set_PageID+0x3e>
	else{
		HAL_Delay(5);
 80016ac:	2005      	movs	r0, #5
 80016ae:	f000 f9fb 	bl	8001aa8 <HAL_Delay>
		BNO055_Get_PageID(handle);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff ffc4 	bl	8001640 <BNO055_Get_PageID>
		return BNO055_OK;
 80016b8:	2300      	movs	r3, #0
	}
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <BNO055_Get_SysError>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_SysError(BNO055_Sensor_T *handle){
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b086      	sub	sp, #24
 80016c6:	af02      	add	r7, sp, #8
 80016c8:	6078      	str	r0, [r7, #4]
	uint8_t TxBuff[1], RxBuff[1];
	TxBuff[0] = 0x3A;
 80016ca:	233a      	movs	r3, #58	@ 0x3a
 80016cc:	733b      	strb	r3, [r7, #12]
	if(BNO055_SendReceive(handle, TxBuff, 1, RxBuff, 1))
 80016ce:	f107 0308 	add.w	r3, r7, #8
 80016d2:	f107 010c 	add.w	r1, r7, #12
 80016d6:	2201      	movs	r2, #1
 80016d8:	9200      	str	r2, [sp, #0]
 80016da:	2201      	movs	r2, #1
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 f80e 	bl	80016fe <BNO055_SendReceive>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <BNO055_Get_SysError+0x2a>
		return BNO055_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e004      	b.n	80016f6 <BNO055_Get_SysError+0x34>
	else
		handle->SysError = RxBuff[0];
 80016ec:	7a3a      	ldrb	r2, [r7, #8]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
	return BNO055_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <BNO055_SendReceive>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_SendReceive(BNO055_Sensor_T *handle, uint8_t *txBuff, uint8_t txLenght, uint8_t *rxBuff, uint8_t rxLenght){
 80016fe:	b580      	push	{r7, lr}
 8001700:	b088      	sub	sp, #32
 8001702:	af02      	add	r7, sp, #8
 8001704:	60f8      	str	r0, [r7, #12]
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	603b      	str	r3, [r7, #0]
 800170a:	4613      	mov	r3, r2
 800170c:	71fb      	strb	r3, [r7, #7]
	BNO055_ReturnTypeDef_T res = BNO055_CommPorter_SendReceive(handle->I2C_No, handle->Chip_I2C_Address, txBuff, txLenght, rxBuff, rxLenght);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	7818      	ldrb	r0, [r3, #0]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	7859      	ldrb	r1, [r3, #1]
 8001716:	79fa      	ldrb	r2, [r7, #7]
 8001718:	f897 3020 	ldrb.w	r3, [r7, #32]
 800171c:	9301      	str	r3, [sp, #4]
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	4613      	mov	r3, r2
 8001724:	68ba      	ldr	r2, [r7, #8]
 8001726:	f000 f80f 	bl	8001748 <BNO055_CommPorter_SendReceive>
 800172a:	4603      	mov	r3, r0
 800172c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(1);
 800172e:	2001      	movs	r0, #1
 8001730:	f000 f9ba 	bl	8001aa8 <HAL_Delay>
	if(res){
 8001734:	7dfb      	ldrb	r3, [r7, #23]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <BNO055_SendReceive+0x40>
		return res;
 800173a:	7dfb      	ldrb	r3, [r7, #23]
 800173c:	e000      	b.n	8001740 <BNO055_SendReceive+0x42>
	}else{
		return res;
 800173e:	7dfb      	ldrb	r3, [r7, #23]
	}
}
 8001740:	4618      	mov	r0, r3
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <BNO055_CommPorter_SendReceive>:
 */

#include <stdint.h>
#include "I2C.h"

uint8_t BNO055_CommPorter_SendReceive(uint8_t I2CNo, uint8_t DevAddress, uint8_t *txBuff, uint8_t txLenght, uint8_t *rxBuff, uint8_t rxLenght){
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af02      	add	r7, sp, #8
 800174e:	603a      	str	r2, [r7, #0]
 8001750:	461a      	mov	r2, r3
 8001752:	4603      	mov	r3, r0
 8001754:	71fb      	strb	r3, [r7, #7]
 8001756:	460b      	mov	r3, r1
 8001758:	71bb      	strb	r3, [r7, #6]
 800175a:	4613      	mov	r3, r2
 800175c:	717b      	strb	r3, [r7, #5]
	return I2C_ReadWrite_Poll(I2CNo, DevAddress, txBuff, txLenght, rxBuff, rxLenght);
 800175e:	797a      	ldrb	r2, [r7, #5]
 8001760:	79b9      	ldrb	r1, [r7, #6]
 8001762:	79f8      	ldrb	r0, [r7, #7]
 8001764:	7d3b      	ldrb	r3, [r7, #20]
 8001766:	9301      	str	r3, [sp, #4]
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	4613      	mov	r3, r2
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	f7ff f838 	bl	80007e4 <I2C_ReadWrite_Poll>
 8001774:	4603      	mov	r3, r0
//	return I2C_ReadWrite_IT(I2CNo, DevAddress, txBuff, txLenght, rxBuff, rxLenght);
//	return I2C_ReadWrite_DMA(I2CNo, DevAddress, txBuff, txLenght, rxBuff, rxLenght);
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001784:	f000 fbab 	bl	8001ede <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001788:	f000 f828 	bl	80017dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800178c:	f000 f90c 	bl	80019a8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001790:	f000 f8da 	bl	8001948 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8001794:	f000 f894 	bl	80018c0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001798:	f003 fda8 	bl	80052ec <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Thread_MicroROS */
  Thread_MicroROSHandle = osThreadNew(TaskMicroROS, NULL, &Thread_MicroROS_attributes);
 800179c:	4a09      	ldr	r2, [pc, #36]	@ (80017c4 <main+0x44>)
 800179e:	2100      	movs	r1, #0
 80017a0:	4809      	ldr	r0, [pc, #36]	@ (80017c8 <main+0x48>)
 80017a2:	f003 fe0d 	bl	80053c0 <osThreadNew>
 80017a6:	4603      	mov	r3, r0
 80017a8:	4a08      	ldr	r2, [pc, #32]	@ (80017cc <main+0x4c>)
 80017aa:	6013      	str	r3, [r2, #0]

  /* creation of Thread_Sensors */
  Thread_SensorsHandle = osThreadNew(TaskSensors, NULL, &Thread_Sensors_attributes);
 80017ac:	4a08      	ldr	r2, [pc, #32]	@ (80017d0 <main+0x50>)
 80017ae:	2100      	movs	r1, #0
 80017b0:	4808      	ldr	r0, [pc, #32]	@ (80017d4 <main+0x54>)
 80017b2:	f003 fe05 	bl	80053c0 <osThreadNew>
 80017b6:	4603      	mov	r3, r0
 80017b8:	4a07      	ldr	r2, [pc, #28]	@ (80017d8 <main+0x58>)
 80017ba:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80017bc:	f003 fdca 	bl	8005354 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <main+0x40>
 80017c4:	08007fb0 	.word	0x08007fb0
 80017c8:	08001ac1 	.word	0x08001ac1
 80017cc:	2000036c 	.word	0x2000036c
 80017d0:	08007fd4 	.word	0x08007fd4
 80017d4:	08001af1 	.word	0x08001af1
 80017d8:	20000370 	.word	0x20000370

080017dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b094      	sub	sp, #80	@ 0x50
 80017e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017e2:	f107 031c 	add.w	r3, r7, #28
 80017e6:	2234      	movs	r2, #52	@ 0x34
 80017e8:	2100      	movs	r1, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f006 fb7e 	bl	8007eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017f0:	f107 0308 	add.w	r3, r7, #8
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001800:	f001 fc44 	bl	800308c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001804:	4b2c      	ldr	r3, [pc, #176]	@ (80018b8 <SystemClock_Config+0xdc>)
 8001806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001808:	4a2b      	ldr	r2, [pc, #172]	@ (80018b8 <SystemClock_Config+0xdc>)
 800180a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800180e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001810:	4b29      	ldr	r3, [pc, #164]	@ (80018b8 <SystemClock_Config+0xdc>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800181c:	4b27      	ldr	r3, [pc, #156]	@ (80018bc <SystemClock_Config+0xe0>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001824:	4a25      	ldr	r2, [pc, #148]	@ (80018bc <SystemClock_Config+0xe0>)
 8001826:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	4b23      	ldr	r3, [pc, #140]	@ (80018bc <SystemClock_Config+0xe0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001834:	603b      	str	r3, [r7, #0]
 8001836:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001838:	2301      	movs	r3, #1
 800183a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800183c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001840:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001842:	2302      	movs	r3, #2
 8001844:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001846:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800184a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800184c:	2304      	movs	r3, #4
 800184e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001850:	2360      	movs	r3, #96	@ 0x60
 8001852:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001854:	2302      	movs	r3, #2
 8001856:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001858:	2304      	movs	r3, #4
 800185a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800185c:	2302      	movs	r3, #2
 800185e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001860:	f107 031c 	add.w	r3, r7, #28
 8001864:	4618      	mov	r0, r3
 8001866:	f001 fc71 	bl	800314c <HAL_RCC_OscConfig>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001870:	f000 f978 	bl	8001b64 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001874:	f001 fc1a 	bl	80030ac <HAL_PWREx_EnableOverDrive>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800187e:	f000 f971 	bl	8001b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001882:	230f      	movs	r3, #15
 8001884:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001886:	2302      	movs	r3, #2
 8001888:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800188e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001892:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001894:	2300      	movs	r3, #0
 8001896:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001898:	f107 0308 	add.w	r3, r7, #8
 800189c:	2103      	movs	r1, #3
 800189e:	4618      	mov	r0, r3
 80018a0:	f001 ff02 	bl	80036a8 <HAL_RCC_ClockConfig>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80018aa:	f000 f95b 	bl	8001b64 <Error_Handler>
  }
}
 80018ae:	bf00      	nop
 80018b0:	3750      	adds	r7, #80	@ 0x50
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40007000 	.word	0x40007000

080018c0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018c4:	4b1d      	ldr	r3, [pc, #116]	@ (800193c <MX_I2C2_Init+0x7c>)
 80018c6:	4a1e      	ldr	r2, [pc, #120]	@ (8001940 <MX_I2C2_Init+0x80>)
 80018c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80018ca:	4b1c      	ldr	r3, [pc, #112]	@ (800193c <MX_I2C2_Init+0x7c>)
 80018cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001944 <MX_I2C2_Init+0x84>)
 80018ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80018d0:	4b1a      	ldr	r3, [pc, #104]	@ (800193c <MX_I2C2_Init+0x7c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018d6:	4b19      	ldr	r3, [pc, #100]	@ (800193c <MX_I2C2_Init+0x7c>)
 80018d8:	2201      	movs	r2, #1
 80018da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018dc:	4b17      	ldr	r3, [pc, #92]	@ (800193c <MX_I2C2_Init+0x7c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80018e2:	4b16      	ldr	r3, [pc, #88]	@ (800193c <MX_I2C2_Init+0x7c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018e8:	4b14      	ldr	r3, [pc, #80]	@ (800193c <MX_I2C2_Init+0x7c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018ee:	4b13      	ldr	r3, [pc, #76]	@ (800193c <MX_I2C2_Init+0x7c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018f4:	4b11      	ldr	r3, [pc, #68]	@ (800193c <MX_I2C2_Init+0x7c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018fa:	4810      	ldr	r0, [pc, #64]	@ (800193c <MX_I2C2_Init+0x7c>)
 80018fc:	f000 fdde 	bl	80024bc <HAL_I2C_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001906:	f000 f92d 	bl	8001b64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800190a:	2100      	movs	r1, #0
 800190c:	480b      	ldr	r0, [pc, #44]	@ (800193c <MX_I2C2_Init+0x7c>)
 800190e:	f001 fb25 	bl	8002f5c <HAL_I2CEx_ConfigAnalogFilter>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001918:	f000 f924 	bl	8001b64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800191c:	2100      	movs	r1, #0
 800191e:	4807      	ldr	r0, [pc, #28]	@ (800193c <MX_I2C2_Init+0x7c>)
 8001920:	f001 fb67 	bl	8002ff2 <HAL_I2CEx_ConfigDigitalFilter>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800192a:	f000 f91b 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */
  I2C_Init(&hi2c2, I2CNO_2);
 800192e:	2102      	movs	r1, #2
 8001930:	4802      	ldr	r0, [pc, #8]	@ (800193c <MX_I2C2_Init+0x7c>)
 8001932:	f7fe ff45 	bl	80007c0 <I2C_Init>
  /* USER CODE END I2C2_Init 2 */

}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000290 	.word	0x20000290
 8001940:	40005800 	.word	0x40005800
 8001944:	20303e5d 	.word	0x20303e5d

08001948 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800194c:	4b14      	ldr	r3, [pc, #80]	@ (80019a0 <MX_USART3_UART_Init+0x58>)
 800194e:	4a15      	ldr	r2, [pc, #84]	@ (80019a4 <MX_USART3_UART_Init+0x5c>)
 8001950:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001952:	4b13      	ldr	r3, [pc, #76]	@ (80019a0 <MX_USART3_UART_Init+0x58>)
 8001954:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001958:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800195a:	4b11      	ldr	r3, [pc, #68]	@ (80019a0 <MX_USART3_UART_Init+0x58>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001960:	4b0f      	ldr	r3, [pc, #60]	@ (80019a0 <MX_USART3_UART_Init+0x58>)
 8001962:	2200      	movs	r2, #0
 8001964:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001966:	4b0e      	ldr	r3, [pc, #56]	@ (80019a0 <MX_USART3_UART_Init+0x58>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800196c:	4b0c      	ldr	r3, [pc, #48]	@ (80019a0 <MX_USART3_UART_Init+0x58>)
 800196e:	220c      	movs	r2, #12
 8001970:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001972:	4b0b      	ldr	r3, [pc, #44]	@ (80019a0 <MX_USART3_UART_Init+0x58>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001978:	4b09      	ldr	r3, [pc, #36]	@ (80019a0 <MX_USART3_UART_Init+0x58>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800197e:	4b08      	ldr	r3, [pc, #32]	@ (80019a0 <MX_USART3_UART_Init+0x58>)
 8001980:	2200      	movs	r2, #0
 8001982:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001984:	4b06      	ldr	r3, [pc, #24]	@ (80019a0 <MX_USART3_UART_Init+0x58>)
 8001986:	2200      	movs	r2, #0
 8001988:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800198a:	4805      	ldr	r0, [pc, #20]	@ (80019a0 <MX_USART3_UART_Init+0x58>)
 800198c:	f002 ffda 	bl	8004944 <HAL_UART_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001996:	f000 f8e5 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200002e4 	.word	0x200002e4
 80019a4:	40004800 	.word	0x40004800

080019a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08c      	sub	sp, #48	@ 0x30
 80019ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ae:	f107 031c 	add.w	r3, r7, #28
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	609a      	str	r2, [r3, #8]
 80019ba:	60da      	str	r2, [r3, #12]
 80019bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019be:	4b37      	ldr	r3, [pc, #220]	@ (8001a9c <MX_GPIO_Init+0xf4>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	4a36      	ldr	r2, [pc, #216]	@ (8001a9c <MX_GPIO_Init+0xf4>)
 80019c4:	f043 0304 	orr.w	r3, r3, #4
 80019c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ca:	4b34      	ldr	r3, [pc, #208]	@ (8001a9c <MX_GPIO_Init+0xf4>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	61bb      	str	r3, [r7, #24]
 80019d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019d6:	4b31      	ldr	r3, [pc, #196]	@ (8001a9c <MX_GPIO_Init+0xf4>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019da:	4a30      	ldr	r2, [pc, #192]	@ (8001a9c <MX_GPIO_Init+0xf4>)
 80019dc:	f043 0320 	orr.w	r3, r3, #32
 80019e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e2:	4b2e      	ldr	r3, [pc, #184]	@ (8001a9c <MX_GPIO_Init+0xf4>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	f003 0320 	and.w	r3, r3, #32
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ee:	4b2b      	ldr	r3, [pc, #172]	@ (8001a9c <MX_GPIO_Init+0xf4>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	4a2a      	ldr	r2, [pc, #168]	@ (8001a9c <MX_GPIO_Init+0xf4>)
 80019f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fa:	4b28      	ldr	r3, [pc, #160]	@ (8001a9c <MX_GPIO_Init+0xf4>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a06:	4b25      	ldr	r3, [pc, #148]	@ (8001a9c <MX_GPIO_Init+0xf4>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0a:	4a24      	ldr	r2, [pc, #144]	@ (8001a9c <MX_GPIO_Init+0xf4>)
 8001a0c:	f043 0302 	orr.w	r3, r3, #2
 8001a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a12:	4b22      	ldr	r3, [pc, #136]	@ (8001a9c <MX_GPIO_Init+0xf4>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a1e:	4b1f      	ldr	r3, [pc, #124]	@ (8001a9c <MX_GPIO_Init+0xf4>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	4a1e      	ldr	r2, [pc, #120]	@ (8001a9c <MX_GPIO_Init+0xf4>)
 8001a24:	f043 0308 	orr.w	r3, r3, #8
 8001a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001a9c <MX_GPIO_Init+0xf4>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a36:	4b19      	ldr	r3, [pc, #100]	@ (8001a9c <MX_GPIO_Init+0xf4>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	4a18      	ldr	r2, [pc, #96]	@ (8001a9c <MX_GPIO_Init+0xf4>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a42:	4b16      	ldr	r3, [pc, #88]	@ (8001a9c <MX_GPIO_Init+0xf4>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001a54:	4812      	ldr	r0, [pc, #72]	@ (8001aa0 <MX_GPIO_Init+0xf8>)
 8001a56:	f000 fcfd 	bl	8002454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001a5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a60:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001a6a:	f107 031c 	add.w	r3, r7, #28
 8001a6e:	4619      	mov	r1, r3
 8001a70:	480c      	ldr	r0, [pc, #48]	@ (8001aa4 <MX_GPIO_Init+0xfc>)
 8001a72:	f000 fb43 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001a76:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a84:	2300      	movs	r3, #0
 8001a86:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a88:	f107 031c 	add.w	r3, r7, #28
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4804      	ldr	r0, [pc, #16]	@ (8001aa0 <MX_GPIO_Init+0xf8>)
 8001a90:	f000 fb34 	bl	80020fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a94:	bf00      	nop
 8001a96:	3730      	adds	r7, #48	@ 0x30
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40020400 	.word	0x40020400
 8001aa4:	40020800 	.word	0x40020800

08001aa8 <HAL_Delay>:

/* USER CODE BEGIN 4 */
void HAL_Delay(uint32_t Delay)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  osDelay(Delay);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f003 fd2b 	bl	800550c <osDelay>
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <TaskMicroROS>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMicroROS */
void TaskMicroROS(void *argument)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int i=0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	i++;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	60fb      	str	r3, [r7, #12]
	if(i>=10){
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2b09      	cmp	r3, #9
 8001ad6:	dd05      	ble.n	8001ae4 <TaskMicroROS+0x24>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001ad8:	2101      	movs	r1, #1
 8001ada:	4804      	ldr	r0, [pc, #16]	@ (8001aec <TaskMicroROS+0x2c>)
 8001adc:	f000 fcd3 	bl	8002486 <HAL_GPIO_TogglePin>
		i=0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
	}
    osDelay(10);
 8001ae4:	200a      	movs	r0, #10
 8001ae6:	f003 fd11 	bl	800550c <osDelay>
	i++;
 8001aea:	e7ef      	b.n	8001acc <TaskMicroROS+0xc>
 8001aec:	40020400 	.word	0x40020400

08001af0 <TaskSensors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskSensors */
void TaskSensors(void *argument)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af02      	add	r7, sp, #8
 8001af6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskSensors */
	int i=0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
	IMU_Init(&IMU_1, 1, I2CNO_2, BNO055_I2C_ADRESS, 0, 0);
 8001afc:	2300      	movs	r3, #0
 8001afe:	9301      	str	r3, [sp, #4]
 8001b00:	2300      	movs	r3, #0
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	2328      	movs	r3, #40	@ 0x28
 8001b06:	2202      	movs	r2, #2
 8001b08:	2101      	movs	r1, #1
 8001b0a:	480b      	ldr	r0, [pc, #44]	@ (8001b38 <TaskSensors+0x48>)
 8001b0c:	f7fe fee8 	bl	80008e0 <IMU_Init>
  /* Infinite loop */
  for(;;)
  {
	i++;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	3301      	adds	r3, #1
 8001b14:	60fb      	str	r3, [r7, #12]
	if(i>=25){
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2b18      	cmp	r3, #24
 8001b1a:	dd05      	ble.n	8001b28 <TaskSensors+0x38>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD2_Pin);
 8001b1c:	2180      	movs	r1, #128	@ 0x80
 8001b1e:	4807      	ldr	r0, [pc, #28]	@ (8001b3c <TaskSensors+0x4c>)
 8001b20:	f000 fcb1 	bl	8002486 <HAL_GPIO_TogglePin>
		i=0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60fb      	str	r3, [r7, #12]
	}
	IMU_Execute(&IMU_1, 1);
 8001b28:	2101      	movs	r1, #1
 8001b2a:	4803      	ldr	r0, [pc, #12]	@ (8001b38 <TaskSensors+0x48>)
 8001b2c:	f7fe ff14 	bl	8000958 <IMU_Execute>
	osDelay(10);
 8001b30:	200a      	movs	r0, #10
 8001b32:	f003 fceb 	bl	800550c <osDelay>
	i++;
 8001b36:	e7eb      	b.n	8001b10 <TaskSensors+0x20>
 8001b38:	200001f4 	.word	0x200001f4
 8001b3c:	40020400 	.word	0x40020400

08001b40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a04      	ldr	r2, [pc, #16]	@ (8001b60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d101      	bne.n	8001b56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b52:	f000 f9d1 	bl	8001ef8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40010000 	.word	0x40010000

08001b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b68:	b672      	cpsid	i
}
 8001b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b6c:	bf00      	nop
 8001b6e:	e7fd      	b.n	8001b6c <Error_Handler+0x8>

08001b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b76:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <HAL_MspInit+0x4c>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	4a10      	ldr	r2, [pc, #64]	@ (8001bbc <HAL_MspInit+0x4c>)
 8001b7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b82:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <HAL_MspInit+0x4c>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001bbc <HAL_MspInit+0x4c>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b92:	4a0a      	ldr	r2, [pc, #40]	@ (8001bbc <HAL_MspInit+0x4c>)
 8001b94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b9a:	4b08      	ldr	r3, [pc, #32]	@ (8001bbc <HAL_MspInit+0x4c>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ba2:	603b      	str	r3, [r7, #0]
 8001ba4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	210f      	movs	r1, #15
 8001baa:	f06f 0001 	mvn.w	r0, #1
 8001bae:	f000 fa7b 	bl	80020a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800

08001bc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b0ae      	sub	sp, #184	@ 0xb8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	2290      	movs	r2, #144	@ 0x90
 8001bde:	2100      	movs	r1, #0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f006 f983 	bl	8007eec <memset>
  if(hi2c->Instance==I2C2)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a21      	ldr	r2, [pc, #132]	@ (8001c70 <HAL_I2C_MspInit+0xb0>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d13b      	bne.n	8001c68 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001bf0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001bf4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bfa:	f107 0314 	add.w	r3, r7, #20
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f001 ffaa 	bl	8003b58 <HAL_RCCEx_PeriphCLKConfig>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001c0a:	f7ff ffab 	bl	8001b64 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c0e:	4b19      	ldr	r3, [pc, #100]	@ (8001c74 <HAL_I2C_MspInit+0xb4>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	4a18      	ldr	r2, [pc, #96]	@ (8001c74 <HAL_I2C_MspInit+0xb4>)
 8001c14:	f043 0320 	orr.w	r3, r3, #32
 8001c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c1a:	4b16      	ldr	r3, [pc, #88]	@ (8001c74 <HAL_I2C_MspInit+0xb4>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1e:	f003 0320 	and.w	r3, r3, #32
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c26:	2303      	movs	r3, #3
 8001c28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c2c:	2312      	movs	r3, #18
 8001c2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c3e:	2304      	movs	r3, #4
 8001c40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c44:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c48:	4619      	mov	r1, r3
 8001c4a:	480b      	ldr	r0, [pc, #44]	@ (8001c78 <HAL_I2C_MspInit+0xb8>)
 8001c4c:	f000 fa56 	bl	80020fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c50:	4b08      	ldr	r3, [pc, #32]	@ (8001c74 <HAL_I2C_MspInit+0xb4>)
 8001c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c54:	4a07      	ldr	r2, [pc, #28]	@ (8001c74 <HAL_I2C_MspInit+0xb4>)
 8001c56:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c5c:	4b05      	ldr	r3, [pc, #20]	@ (8001c74 <HAL_I2C_MspInit+0xb4>)
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001c68:	bf00      	nop
 8001c6a:	37b8      	adds	r7, #184	@ 0xb8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40005800 	.word	0x40005800
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40021400 	.word	0x40021400

08001c7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b0ae      	sub	sp, #184	@ 0xb8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c84:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	2290      	movs	r2, #144	@ 0x90
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f006 f925 	bl	8007eec <memset>
  if(huart->Instance==USART3)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a22      	ldr	r2, [pc, #136]	@ (8001d30 <HAL_UART_MspInit+0xb4>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d13c      	bne.n	8001d26 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001cac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cb0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cb6:	f107 0314 	add.w	r3, r7, #20
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f001 ff4c 	bl	8003b58 <HAL_RCCEx_PeriphCLKConfig>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001cc6:	f7ff ff4d 	bl	8001b64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cca:	4b1a      	ldr	r3, [pc, #104]	@ (8001d34 <HAL_UART_MspInit+0xb8>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cce:	4a19      	ldr	r2, [pc, #100]	@ (8001d34 <HAL_UART_MspInit+0xb8>)
 8001cd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cd6:	4b17      	ldr	r3, [pc, #92]	@ (8001d34 <HAL_UART_MspInit+0xb8>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ce2:	4b14      	ldr	r3, [pc, #80]	@ (8001d34 <HAL_UART_MspInit+0xb8>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce6:	4a13      	ldr	r2, [pc, #76]	@ (8001d34 <HAL_UART_MspInit+0xb8>)
 8001ce8:	f043 0308 	orr.w	r3, r3, #8
 8001cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cee:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <HAL_UART_MspInit+0xb8>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001cfa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001cfe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d14:	2307      	movs	r3, #7
 8001d16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d1a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4805      	ldr	r0, [pc, #20]	@ (8001d38 <HAL_UART_MspInit+0xbc>)
 8001d22:	f000 f9eb 	bl	80020fc <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001d26:	bf00      	nop
 8001d28:	37b8      	adds	r7, #184	@ 0xb8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40004800 	.word	0x40004800
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40020c00 	.word	0x40020c00

08001d3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08c      	sub	sp, #48	@ 0x30
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d4c:	4b2e      	ldr	r3, [pc, #184]	@ (8001e08 <HAL_InitTick+0xcc>)
 8001d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d50:	4a2d      	ldr	r2, [pc, #180]	@ (8001e08 <HAL_InitTick+0xcc>)
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d58:	4b2b      	ldr	r3, [pc, #172]	@ (8001e08 <HAL_InitTick+0xcc>)
 8001d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d64:	f107 020c 	add.w	r2, r7, #12
 8001d68:	f107 0310 	add.w	r3, r7, #16
 8001d6c:	4611      	mov	r1, r2
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f001 fec0 	bl	8003af4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001d74:	f001 feaa 	bl	8003acc <HAL_RCC_GetPCLK2Freq>
 8001d78:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d7c:	4a23      	ldr	r2, [pc, #140]	@ (8001e0c <HAL_InitTick+0xd0>)
 8001d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d82:	0c9b      	lsrs	r3, r3, #18
 8001d84:	3b01      	subs	r3, #1
 8001d86:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001d88:	4b21      	ldr	r3, [pc, #132]	@ (8001e10 <HAL_InitTick+0xd4>)
 8001d8a:	4a22      	ldr	r2, [pc, #136]	@ (8001e14 <HAL_InitTick+0xd8>)
 8001d8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001d8e:	4b20      	ldr	r3, [pc, #128]	@ (8001e10 <HAL_InitTick+0xd4>)
 8001d90:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d94:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d96:	4a1e      	ldr	r2, [pc, #120]	@ (8001e10 <HAL_InitTick+0xd4>)
 8001d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001d9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001e10 <HAL_InitTick+0xd4>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e10 <HAL_InitTick+0xd4>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da8:	4b19      	ldr	r3, [pc, #100]	@ (8001e10 <HAL_InitTick+0xd4>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001dae:	4818      	ldr	r0, [pc, #96]	@ (8001e10 <HAL_InitTick+0xd4>)
 8001db0:	f002 fafa 	bl	80043a8 <HAL_TIM_Base_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001dba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d11b      	bne.n	8001dfa <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001dc2:	4813      	ldr	r0, [pc, #76]	@ (8001e10 <HAL_InitTick+0xd4>)
 8001dc4:	f002 fb52 	bl	800446c <HAL_TIM_Base_Start_IT>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001dce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d111      	bne.n	8001dfa <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001dd6:	2019      	movs	r0, #25
 8001dd8:	f000 f982 	bl	80020e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b0f      	cmp	r3, #15
 8001de0:	d808      	bhi.n	8001df4 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001de2:	2200      	movs	r2, #0
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	2019      	movs	r0, #25
 8001de8:	f000 f95e 	bl	80020a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dec:	4a0a      	ldr	r2, [pc, #40]	@ (8001e18 <HAL_InitTick+0xdc>)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	e002      	b.n	8001dfa <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001dfa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3730      	adds	r7, #48	@ 0x30
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	431bde83 	.word	0x431bde83
 8001e10:	20000374 	.word	0x20000374
 8001e14:	40010000 	.word	0x40010000
 8001e18:	20000004 	.word	0x20000004

08001e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <NMI_Handler+0x4>

08001e24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e28:	bf00      	nop
 8001e2a:	e7fd      	b.n	8001e28 <HardFault_Handler+0x4>

08001e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e30:	bf00      	nop
 8001e32:	e7fd      	b.n	8001e30 <MemManage_Handler+0x4>

08001e34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e38:	bf00      	nop
 8001e3a:	e7fd      	b.n	8001e38 <BusFault_Handler+0x4>

08001e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e40:	bf00      	nop
 8001e42:	e7fd      	b.n	8001e40 <UsageFault_Handler+0x4>

08001e44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
	...

08001e54 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e58:	4802      	ldr	r0, [pc, #8]	@ (8001e64 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e5a:	f002 fb7f 	bl	800455c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000374 	.word	0x20000374

08001e68 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e6c:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <SystemInit+0x20>)
 8001e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e72:	4a05      	ldr	r2, [pc, #20]	@ (8001e88 <SystemInit+0x20>)
 8001e74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ec4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e90:	f7ff ffea 	bl	8001e68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e94:	480c      	ldr	r0, [pc, #48]	@ (8001ec8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e96:	490d      	ldr	r1, [pc, #52]	@ (8001ecc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e98:	4a0d      	ldr	r2, [pc, #52]	@ (8001ed0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e9c:	e002      	b.n	8001ea4 <LoopCopyDataInit>

08001e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ea2:	3304      	adds	r3, #4

08001ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea8:	d3f9      	bcc.n	8001e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001eac:	4c0a      	ldr	r4, [pc, #40]	@ (8001ed8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb0:	e001      	b.n	8001eb6 <LoopFillZerobss>

08001eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb4:	3204      	adds	r2, #4

08001eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb8:	d3fb      	bcc.n	8001eb2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001eba:	f006 f81f 	bl	8007efc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ebe:	f7ff fc5f 	bl	8001780 <main>
  bx  lr    
 8001ec2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ec4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ecc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001ed0:	08008020 	.word	0x08008020
  ldr r2, =_sbss
 8001ed4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001ed8:	20004d0c 	.word	0x20004d0c

08001edc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001edc:	e7fe      	b.n	8001edc <ADC_IRQHandler>

08001ede <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee2:	2003      	movs	r0, #3
 8001ee4:	f000 f8d5 	bl	8002092 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ee8:	200f      	movs	r0, #15
 8001eea:	f7ff ff27 	bl	8001d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eee:	f7ff fe3f 	bl	8001b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001efc:	4b06      	ldr	r3, [pc, #24]	@ (8001f18 <HAL_IncTick+0x20>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	461a      	mov	r2, r3
 8001f02:	4b06      	ldr	r3, [pc, #24]	@ (8001f1c <HAL_IncTick+0x24>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4413      	add	r3, r2
 8001f08:	4a04      	ldr	r2, [pc, #16]	@ (8001f1c <HAL_IncTick+0x24>)
 8001f0a:	6013      	str	r3, [r2, #0]
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	20000008 	.word	0x20000008
 8001f1c:	200003c0 	.word	0x200003c0

08001f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return uwTick;
 8001f24:	4b03      	ldr	r3, [pc, #12]	@ (8001f34 <HAL_GetTick+0x14>)
 8001f26:	681b      	ldr	r3, [r3, #0]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	200003c0 	.word	0x200003c0

08001f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f48:	4b0b      	ldr	r3, [pc, #44]	@ (8001f78 <__NVIC_SetPriorityGrouping+0x40>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f54:	4013      	ands	r3, r2
 8001f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f60:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <__NVIC_SetPriorityGrouping+0x44>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f66:	4a04      	ldr	r2, [pc, #16]	@ (8001f78 <__NVIC_SetPriorityGrouping+0x40>)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	60d3      	str	r3, [r2, #12]
}
 8001f6c:	bf00      	nop
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000ed00 	.word	0xe000ed00
 8001f7c:	05fa0000 	.word	0x05fa0000

08001f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f84:	4b04      	ldr	r3, [pc, #16]	@ (8001f98 <__NVIC_GetPriorityGrouping+0x18>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	0a1b      	lsrs	r3, r3, #8
 8001f8a:	f003 0307 	and.w	r3, r3, #7
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	db0b      	blt.n	8001fc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	f003 021f 	and.w	r2, r3, #31
 8001fb4:	4907      	ldr	r1, [pc, #28]	@ (8001fd4 <__NVIC_EnableIRQ+0x38>)
 8001fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fba:	095b      	lsrs	r3, r3, #5
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	e000e100 	.word	0xe000e100

08001fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	6039      	str	r1, [r7, #0]
 8001fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	db0a      	blt.n	8002002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	490c      	ldr	r1, [pc, #48]	@ (8002024 <__NVIC_SetPriority+0x4c>)
 8001ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff6:	0112      	lsls	r2, r2, #4
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002000:	e00a      	b.n	8002018 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	b2da      	uxtb	r2, r3
 8002006:	4908      	ldr	r1, [pc, #32]	@ (8002028 <__NVIC_SetPriority+0x50>)
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	3b04      	subs	r3, #4
 8002010:	0112      	lsls	r2, r2, #4
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	440b      	add	r3, r1
 8002016:	761a      	strb	r2, [r3, #24]
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	e000e100 	.word	0xe000e100
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800202c:	b480      	push	{r7}
 800202e:	b089      	sub	sp, #36	@ 0x24
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	f1c3 0307 	rsb	r3, r3, #7
 8002046:	2b04      	cmp	r3, #4
 8002048:	bf28      	it	cs
 800204a:	2304      	movcs	r3, #4
 800204c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3304      	adds	r3, #4
 8002052:	2b06      	cmp	r3, #6
 8002054:	d902      	bls.n	800205c <NVIC_EncodePriority+0x30>
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	3b03      	subs	r3, #3
 800205a:	e000      	b.n	800205e <NVIC_EncodePriority+0x32>
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002060:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43da      	mvns	r2, r3
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	401a      	ands	r2, r3
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002074:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	fa01 f303 	lsl.w	r3, r1, r3
 800207e:	43d9      	mvns	r1, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002084:	4313      	orrs	r3, r2
         );
}
 8002086:	4618      	mov	r0, r3
 8002088:	3724      	adds	r7, #36	@ 0x24
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff ff4c 	bl	8001f38 <__NVIC_SetPriorityGrouping>
}
 80020a0:	bf00      	nop
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
 80020b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020ba:	f7ff ff61 	bl	8001f80 <__NVIC_GetPriorityGrouping>
 80020be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	68b9      	ldr	r1, [r7, #8]
 80020c4:	6978      	ldr	r0, [r7, #20]
 80020c6:	f7ff ffb1 	bl	800202c <NVIC_EncodePriority>
 80020ca:	4602      	mov	r2, r0
 80020cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020d0:	4611      	mov	r1, r2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff ff80 	bl	8001fd8 <__NVIC_SetPriority>
}
 80020d8:	bf00      	nop
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff ff54 	bl	8001f9c <__NVIC_EnableIRQ>
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b089      	sub	sp, #36	@ 0x24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002112:	2300      	movs	r3, #0
 8002114:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
 800211a:	e175      	b.n	8002408 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800211c:	2201      	movs	r2, #1
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	4013      	ands	r3, r2
 800212e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	429a      	cmp	r2, r3
 8002136:	f040 8164 	bne.w	8002402 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	2b01      	cmp	r3, #1
 8002144:	d005      	beq.n	8002152 <HAL_GPIO_Init+0x56>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f003 0303 	and.w	r3, r3, #3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d130      	bne.n	80021b4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	2203      	movs	r2, #3
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4013      	ands	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002188:	2201      	movs	r2, #1
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	091b      	lsrs	r3, r3, #4
 800219e:	f003 0201 	and.w	r2, r3, #1
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	2b03      	cmp	r3, #3
 80021be:	d017      	beq.n	80021f0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	2203      	movs	r2, #3
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 0303 	and.w	r3, r3, #3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d123      	bne.n	8002244 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	08da      	lsrs	r2, r3, #3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3208      	adds	r2, #8
 8002204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	220f      	movs	r2, #15
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	691a      	ldr	r2, [r3, #16]
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	08da      	lsrs	r2, r3, #3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3208      	adds	r2, #8
 800223e:	69b9      	ldr	r1, [r7, #24]
 8002240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	2203      	movs	r2, #3
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 0203 	and.w	r2, r3, #3
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 80be 	beq.w	8002402 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002286:	4b66      	ldr	r3, [pc, #408]	@ (8002420 <HAL_GPIO_Init+0x324>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800228a:	4a65      	ldr	r2, [pc, #404]	@ (8002420 <HAL_GPIO_Init+0x324>)
 800228c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002290:	6453      	str	r3, [r2, #68]	@ 0x44
 8002292:	4b63      	ldr	r3, [pc, #396]	@ (8002420 <HAL_GPIO_Init+0x324>)
 8002294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002296:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800229e:	4a61      	ldr	r2, [pc, #388]	@ (8002424 <HAL_GPIO_Init+0x328>)
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	089b      	lsrs	r3, r3, #2
 80022a4:	3302      	adds	r3, #2
 80022a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	220f      	movs	r2, #15
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4013      	ands	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a58      	ldr	r2, [pc, #352]	@ (8002428 <HAL_GPIO_Init+0x32c>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d037      	beq.n	800233a <HAL_GPIO_Init+0x23e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a57      	ldr	r2, [pc, #348]	@ (800242c <HAL_GPIO_Init+0x330>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d031      	beq.n	8002336 <HAL_GPIO_Init+0x23a>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a56      	ldr	r2, [pc, #344]	@ (8002430 <HAL_GPIO_Init+0x334>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d02b      	beq.n	8002332 <HAL_GPIO_Init+0x236>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a55      	ldr	r2, [pc, #340]	@ (8002434 <HAL_GPIO_Init+0x338>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d025      	beq.n	800232e <HAL_GPIO_Init+0x232>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a54      	ldr	r2, [pc, #336]	@ (8002438 <HAL_GPIO_Init+0x33c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d01f      	beq.n	800232a <HAL_GPIO_Init+0x22e>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a53      	ldr	r2, [pc, #332]	@ (800243c <HAL_GPIO_Init+0x340>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d019      	beq.n	8002326 <HAL_GPIO_Init+0x22a>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a52      	ldr	r2, [pc, #328]	@ (8002440 <HAL_GPIO_Init+0x344>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d013      	beq.n	8002322 <HAL_GPIO_Init+0x226>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a51      	ldr	r2, [pc, #324]	@ (8002444 <HAL_GPIO_Init+0x348>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d00d      	beq.n	800231e <HAL_GPIO_Init+0x222>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a50      	ldr	r2, [pc, #320]	@ (8002448 <HAL_GPIO_Init+0x34c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d007      	beq.n	800231a <HAL_GPIO_Init+0x21e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a4f      	ldr	r2, [pc, #316]	@ (800244c <HAL_GPIO_Init+0x350>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d101      	bne.n	8002316 <HAL_GPIO_Init+0x21a>
 8002312:	2309      	movs	r3, #9
 8002314:	e012      	b.n	800233c <HAL_GPIO_Init+0x240>
 8002316:	230a      	movs	r3, #10
 8002318:	e010      	b.n	800233c <HAL_GPIO_Init+0x240>
 800231a:	2308      	movs	r3, #8
 800231c:	e00e      	b.n	800233c <HAL_GPIO_Init+0x240>
 800231e:	2307      	movs	r3, #7
 8002320:	e00c      	b.n	800233c <HAL_GPIO_Init+0x240>
 8002322:	2306      	movs	r3, #6
 8002324:	e00a      	b.n	800233c <HAL_GPIO_Init+0x240>
 8002326:	2305      	movs	r3, #5
 8002328:	e008      	b.n	800233c <HAL_GPIO_Init+0x240>
 800232a:	2304      	movs	r3, #4
 800232c:	e006      	b.n	800233c <HAL_GPIO_Init+0x240>
 800232e:	2303      	movs	r3, #3
 8002330:	e004      	b.n	800233c <HAL_GPIO_Init+0x240>
 8002332:	2302      	movs	r3, #2
 8002334:	e002      	b.n	800233c <HAL_GPIO_Init+0x240>
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <HAL_GPIO_Init+0x240>
 800233a:	2300      	movs	r3, #0
 800233c:	69fa      	ldr	r2, [r7, #28]
 800233e:	f002 0203 	and.w	r2, r2, #3
 8002342:	0092      	lsls	r2, r2, #2
 8002344:	4093      	lsls	r3, r2
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800234c:	4935      	ldr	r1, [pc, #212]	@ (8002424 <HAL_GPIO_Init+0x328>)
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	089b      	lsrs	r3, r3, #2
 8002352:	3302      	adds	r3, #2
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800235a:	4b3d      	ldr	r3, [pc, #244]	@ (8002450 <HAL_GPIO_Init+0x354>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	43db      	mvns	r3, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4013      	ands	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800237e:	4a34      	ldr	r2, [pc, #208]	@ (8002450 <HAL_GPIO_Init+0x354>)
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002384:	4b32      	ldr	r3, [pc, #200]	@ (8002450 <HAL_GPIO_Init+0x354>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023a8:	4a29      	ldr	r2, [pc, #164]	@ (8002450 <HAL_GPIO_Init+0x354>)
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023ae:	4b28      	ldr	r3, [pc, #160]	@ (8002450 <HAL_GPIO_Init+0x354>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002450 <HAL_GPIO_Init+0x354>)
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002450 <HAL_GPIO_Init+0x354>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023fc:	4a14      	ldr	r2, [pc, #80]	@ (8002450 <HAL_GPIO_Init+0x354>)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3301      	adds	r3, #1
 8002406:	61fb      	str	r3, [r7, #28]
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	2b0f      	cmp	r3, #15
 800240c:	f67f ae86 	bls.w	800211c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002410:	bf00      	nop
 8002412:	bf00      	nop
 8002414:	3724      	adds	r7, #36	@ 0x24
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40023800 	.word	0x40023800
 8002424:	40013800 	.word	0x40013800
 8002428:	40020000 	.word	0x40020000
 800242c:	40020400 	.word	0x40020400
 8002430:	40020800 	.word	0x40020800
 8002434:	40020c00 	.word	0x40020c00
 8002438:	40021000 	.word	0x40021000
 800243c:	40021400 	.word	0x40021400
 8002440:	40021800 	.word	0x40021800
 8002444:	40021c00 	.word	0x40021c00
 8002448:	40022000 	.word	0x40022000
 800244c:	40022400 	.word	0x40022400
 8002450:	40013c00 	.word	0x40013c00

08002454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	807b      	strh	r3, [r7, #2]
 8002460:	4613      	mov	r3, r2
 8002462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002464:	787b      	ldrb	r3, [r7, #1]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800246a:	887a      	ldrh	r2, [r7, #2]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002470:	e003      	b.n	800247a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002472:	887b      	ldrh	r3, [r7, #2]
 8002474:	041a      	lsls	r2, r3, #16
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	619a      	str	r2, [r3, #24]
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002486:	b480      	push	{r7}
 8002488:	b085      	sub	sp, #20
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
 800248e:	460b      	mov	r3, r1
 8002490:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002498:	887a      	ldrh	r2, [r7, #2]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4013      	ands	r3, r2
 800249e:	041a      	lsls	r2, r3, #16
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	43d9      	mvns	r1, r3
 80024a4:	887b      	ldrh	r3, [r7, #2]
 80024a6:	400b      	ands	r3, r1
 80024a8:	431a      	orrs	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	619a      	str	r2, [r3, #24]
}
 80024ae:	bf00      	nop
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
	...

080024bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e08b      	b.n	80025e6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d106      	bne.n	80024e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7ff fb6c 	bl	8001bc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2224      	movs	r2, #36	@ 0x24
 80024ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0201 	bic.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800250c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800251c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d107      	bne.n	8002536 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	e006      	b.n	8002544 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002542:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	2b02      	cmp	r3, #2
 800254a:	d108      	bne.n	800255e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800255a:	605a      	str	r2, [r3, #4]
 800255c:	e007      	b.n	800256e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800256c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6859      	ldr	r1, [r3, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b1d      	ldr	r3, [pc, #116]	@ (80025f0 <HAL_I2C_Init+0x134>)
 800257a:	430b      	orrs	r3, r1
 800257c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68da      	ldr	r2, [r3, #12]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800258c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691a      	ldr	r2, [r3, #16]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69d9      	ldr	r1, [r3, #28]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a1a      	ldr	r2, [r3, #32]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0201 	orr.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2220      	movs	r2, #32
 80025d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	02008000 	.word	0x02008000

080025f4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af02      	add	r7, sp, #8
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	607a      	str	r2, [r7, #4]
 80025fe:	461a      	mov	r2, r3
 8002600:	460b      	mov	r3, r1
 8002602:	817b      	strh	r3, [r7, #10]
 8002604:	4613      	mov	r3, r2
 8002606:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b20      	cmp	r3, #32
 8002612:	f040 80fd 	bne.w	8002810 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_I2C_Master_Transmit+0x30>
 8002620:	2302      	movs	r3, #2
 8002622:	e0f6      	b.n	8002812 <HAL_I2C_Master_Transmit+0x21e>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800262c:	f7ff fc78 	bl	8001f20 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	2319      	movs	r3, #25
 8002638:	2201      	movs	r2, #1
 800263a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 fa0a 	bl	8002a58 <I2C_WaitOnFlagUntilTimeout>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e0e1      	b.n	8002812 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2221      	movs	r2, #33	@ 0x21
 8002652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2210      	movs	r2, #16
 800265a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	893a      	ldrh	r2, [r7, #8]
 800266e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800267a:	b29b      	uxth	r3, r3
 800267c:	2bff      	cmp	r3, #255	@ 0xff
 800267e:	d906      	bls.n	800268e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	22ff      	movs	r2, #255	@ 0xff
 8002684:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002686:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	e007      	b.n	800269e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002692:	b29a      	uxth	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002698:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800269c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d024      	beq.n	80026f0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026aa:	781a      	ldrb	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	3b01      	subs	r3, #1
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ce:	3b01      	subs	r3, #1
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	3301      	adds	r3, #1
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	8979      	ldrh	r1, [r7, #10]
 80026e2:	4b4e      	ldr	r3, [pc, #312]	@ (800281c <HAL_I2C_Master_Transmit+0x228>)
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 fc05 	bl	8002ef8 <I2C_TransferConfig>
 80026ee:	e066      	b.n	80027be <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	8979      	ldrh	r1, [r7, #10]
 80026f8:	4b48      	ldr	r3, [pc, #288]	@ (800281c <HAL_I2C_Master_Transmit+0x228>)
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 fbfa 	bl	8002ef8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002704:	e05b      	b.n	80027be <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	6a39      	ldr	r1, [r7, #32]
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 f9fd 	bl	8002b0a <I2C_WaitOnTXISFlagUntilTimeout>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e07b      	b.n	8002812 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271e:	781a      	ldrb	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002734:	b29b      	uxth	r3, r3
 8002736:	3b01      	subs	r3, #1
 8002738:	b29a      	uxth	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002742:	3b01      	subs	r3, #1
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800274e:	b29b      	uxth	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	d034      	beq.n	80027be <HAL_I2C_Master_Transmit+0x1ca>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002758:	2b00      	cmp	r3, #0
 800275a:	d130      	bne.n	80027be <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	6a3b      	ldr	r3, [r7, #32]
 8002762:	2200      	movs	r2, #0
 8002764:	2180      	movs	r1, #128	@ 0x80
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 f976 	bl	8002a58 <I2C_WaitOnFlagUntilTimeout>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e04d      	b.n	8002812 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800277a:	b29b      	uxth	r3, r3
 800277c:	2bff      	cmp	r3, #255	@ 0xff
 800277e:	d90e      	bls.n	800279e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	22ff      	movs	r2, #255	@ 0xff
 8002784:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800278a:	b2da      	uxtb	r2, r3
 800278c:	8979      	ldrh	r1, [r7, #10]
 800278e:	2300      	movs	r3, #0
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 fbae 	bl	8002ef8 <I2C_TransferConfig>
 800279c:	e00f      	b.n	80027be <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	8979      	ldrh	r1, [r7, #10]
 80027b0:	2300      	movs	r3, #0
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 fb9d 	bl	8002ef8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d19e      	bne.n	8002706 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	6a39      	ldr	r1, [r7, #32]
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 f9e3 	bl	8002b98 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e01a      	b.n	8002812 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2220      	movs	r2, #32
 80027e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6859      	ldr	r1, [r3, #4]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002820 <HAL_I2C_Master_Transmit+0x22c>)
 80027f0:	400b      	ands	r3, r1
 80027f2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2220      	movs	r2, #32
 80027f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800280c:	2300      	movs	r3, #0
 800280e:	e000      	b.n	8002812 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002810:	2302      	movs	r3, #2
  }
}
 8002812:	4618      	mov	r0, r3
 8002814:	3718      	adds	r7, #24
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	80002000 	.word	0x80002000
 8002820:	fe00e800 	.word	0xfe00e800

08002824 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af02      	add	r7, sp, #8
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	607a      	str	r2, [r7, #4]
 800282e:	461a      	mov	r2, r3
 8002830:	460b      	mov	r3, r1
 8002832:	817b      	strh	r3, [r7, #10]
 8002834:	4613      	mov	r3, r2
 8002836:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b20      	cmp	r3, #32
 8002842:	f040 80db 	bne.w	80029fc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <HAL_I2C_Master_Receive+0x30>
 8002850:	2302      	movs	r3, #2
 8002852:	e0d4      	b.n	80029fe <HAL_I2C_Master_Receive+0x1da>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800285c:	f7ff fb60 	bl	8001f20 <HAL_GetTick>
 8002860:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	2319      	movs	r3, #25
 8002868:	2201      	movs	r2, #1
 800286a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f000 f8f2 	bl	8002a58 <I2C_WaitOnFlagUntilTimeout>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e0bf      	b.n	80029fe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2222      	movs	r2, #34	@ 0x22
 8002882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2210      	movs	r2, #16
 800288a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	893a      	ldrh	r2, [r7, #8]
 800289e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	2bff      	cmp	r3, #255	@ 0xff
 80028ae:	d90e      	bls.n	80028ce <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2201      	movs	r2, #1
 80028b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	8979      	ldrh	r1, [r7, #10]
 80028be:	4b52      	ldr	r3, [pc, #328]	@ (8002a08 <HAL_I2C_Master_Receive+0x1e4>)
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 fb16 	bl	8002ef8 <I2C_TransferConfig>
 80028cc:	e06d      	b.n	80029aa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	8979      	ldrh	r1, [r7, #10]
 80028e0:	4b49      	ldr	r3, [pc, #292]	@ (8002a08 <HAL_I2C_Master_Receive+0x1e4>)
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 fb05 	bl	8002ef8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80028ee:	e05c      	b.n	80029aa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	6a39      	ldr	r1, [r7, #32]
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 f993 	bl	8002c20 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e07c      	b.n	80029fe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002916:	1c5a      	adds	r2, r3, #1
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002920:	3b01      	subs	r3, #1
 8002922:	b29a      	uxth	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800292c:	b29b      	uxth	r3, r3
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800293a:	b29b      	uxth	r3, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	d034      	beq.n	80029aa <HAL_I2C_Master_Receive+0x186>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002944:	2b00      	cmp	r3, #0
 8002946:	d130      	bne.n	80029aa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	6a3b      	ldr	r3, [r7, #32]
 800294e:	2200      	movs	r2, #0
 8002950:	2180      	movs	r1, #128	@ 0x80
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 f880 	bl	8002a58 <I2C_WaitOnFlagUntilTimeout>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e04d      	b.n	80029fe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002966:	b29b      	uxth	r3, r3
 8002968:	2bff      	cmp	r3, #255	@ 0xff
 800296a:	d90e      	bls.n	800298a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	22ff      	movs	r2, #255	@ 0xff
 8002970:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002976:	b2da      	uxtb	r2, r3
 8002978:	8979      	ldrh	r1, [r7, #10]
 800297a:	2300      	movs	r3, #0
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 fab8 	bl	8002ef8 <I2C_TransferConfig>
 8002988:	e00f      	b.n	80029aa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002998:	b2da      	uxtb	r2, r3
 800299a:	8979      	ldrh	r1, [r7, #10]
 800299c:	2300      	movs	r3, #0
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f000 faa7 	bl	8002ef8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d19d      	bne.n	80028f0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	6a39      	ldr	r1, [r7, #32]
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 f8ed 	bl	8002b98 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e01a      	b.n	80029fe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2220      	movs	r2, #32
 80029ce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6859      	ldr	r1, [r3, #4]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	4b0c      	ldr	r3, [pc, #48]	@ (8002a0c <HAL_I2C_Master_Receive+0x1e8>)
 80029dc:	400b      	ands	r3, r1
 80029de:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80029f8:	2300      	movs	r3, #0
 80029fa:	e000      	b.n	80029fe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80029fc:	2302      	movs	r3, #2
  }
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	80002400 	.word	0x80002400
 8002a0c:	fe00e800 	.word	0xfe00e800

08002a10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d103      	bne.n	8002a2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d007      	beq.n	8002a4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	699a      	ldr	r2, [r3, #24]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0201 	orr.w	r2, r2, #1
 8002a4a:	619a      	str	r2, [r3, #24]
  }
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	603b      	str	r3, [r7, #0]
 8002a64:	4613      	mov	r3, r2
 8002a66:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a68:	e03b      	b.n	8002ae2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	6839      	ldr	r1, [r7, #0]
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 f962 	bl	8002d38 <I2C_IsErrorOccurred>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e041      	b.n	8002b02 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a84:	d02d      	beq.n	8002ae2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a86:	f7ff fa4b 	bl	8001f20 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d302      	bcc.n	8002a9c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d122      	bne.n	8002ae2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699a      	ldr	r2, [r3, #24]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	bf0c      	ite	eq
 8002aac:	2301      	moveq	r3, #1
 8002aae:	2300      	movne	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d113      	bne.n	8002ae2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002abe:	f043 0220 	orr.w	r2, r3, #32
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2220      	movs	r2, #32
 8002aca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e00f      	b.n	8002b02 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	699a      	ldr	r2, [r3, #24]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	4013      	ands	r3, r2
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	bf0c      	ite	eq
 8002af2:	2301      	moveq	r3, #1
 8002af4:	2300      	movne	r3, #0
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	461a      	mov	r2, r3
 8002afa:	79fb      	ldrb	r3, [r7, #7]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d0b4      	beq.n	8002a6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b084      	sub	sp, #16
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b16:	e033      	b.n	8002b80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	68b9      	ldr	r1, [r7, #8]
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 f90b 	bl	8002d38 <I2C_IsErrorOccurred>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e031      	b.n	8002b90 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b32:	d025      	beq.n	8002b80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b34:	f7ff f9f4 	bl	8001f20 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d302      	bcc.n	8002b4a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d11a      	bne.n	8002b80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d013      	beq.n	8002b80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5c:	f043 0220 	orr.w	r2, r3, #32
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2220      	movs	r2, #32
 8002b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e007      	b.n	8002b90 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d1c4      	bne.n	8002b18 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ba4:	e02f      	b.n	8002c06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	68b9      	ldr	r1, [r7, #8]
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 f8c4 	bl	8002d38 <I2C_IsErrorOccurred>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e02d      	b.n	8002c16 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bba:	f7ff f9b1 	bl	8001f20 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d302      	bcc.n	8002bd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d11a      	bne.n	8002c06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	f003 0320 	and.w	r3, r3, #32
 8002bda:	2b20      	cmp	r3, #32
 8002bdc:	d013      	beq.n	8002c06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be2:	f043 0220 	orr.w	r2, r3, #32
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e007      	b.n	8002c16 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	f003 0320 	and.w	r3, r3, #32
 8002c10:	2b20      	cmp	r3, #32
 8002c12:	d1c8      	bne.n	8002ba6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
	...

08002c20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002c30:	e071      	b.n	8002d16 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	68b9      	ldr	r1, [r7, #8]
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 f87e 	bl	8002d38 <I2C_IsErrorOccurred>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	f003 0320 	and.w	r3, r3, #32
 8002c50:	2b20      	cmp	r3, #32
 8002c52:	d13b      	bne.n	8002ccc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002c54:	7dfb      	ldrb	r3, [r7, #23]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d138      	bne.n	8002ccc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	d105      	bne.n	8002c74 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002c70:	2300      	movs	r3, #0
 8002c72:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	f003 0310 	and.w	r3, r3, #16
 8002c7e:	2b10      	cmp	r3, #16
 8002c80:	d121      	bne.n	8002cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2210      	movs	r2, #16
 8002c88:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2204      	movs	r2, #4
 8002c8e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2220      	movs	r2, #32
 8002c96:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6859      	ldr	r1, [r3, #4]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	4b24      	ldr	r3, [pc, #144]	@ (8002d34 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002ca4:	400b      	ands	r3, r1
 8002ca6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2220      	movs	r2, #32
 8002cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	75fb      	strb	r3, [r7, #23]
 8002cc4:	e002      	b.n	8002ccc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002ccc:	f7ff f928 	bl	8001f20 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d302      	bcc.n	8002ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d119      	bne.n	8002d16 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002ce2:	7dfb      	ldrb	r3, [r7, #23]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d116      	bne.n	8002d16 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	f003 0304 	and.w	r3, r3, #4
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d00f      	beq.n	8002d16 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cfa:	f043 0220 	orr.w	r2, r3, #32
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2220      	movs	r2, #32
 8002d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d002      	beq.n	8002d2a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002d24:	7dfb      	ldrb	r3, [r7, #23]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d083      	beq.n	8002c32 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	fe00e800 	.word	0xfe00e800

08002d38 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08a      	sub	sp, #40	@ 0x28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d44:	2300      	movs	r3, #0
 8002d46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002d52:	2300      	movs	r3, #0
 8002d54:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d068      	beq.n	8002e36 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2210      	movs	r2, #16
 8002d6a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d6c:	e049      	b.n	8002e02 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d74:	d045      	beq.n	8002e02 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d76:	f7ff f8d3 	bl	8001f20 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d302      	bcc.n	8002d8c <I2C_IsErrorOccurred+0x54>
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d13a      	bne.n	8002e02 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d96:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d9e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002daa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002dae:	d121      	bne.n	8002df4 <I2C_IsErrorOccurred+0xbc>
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002db6:	d01d      	beq.n	8002df4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002db8:	7cfb      	ldrb	r3, [r7, #19]
 8002dba:	2b20      	cmp	r3, #32
 8002dbc:	d01a      	beq.n	8002df4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002dcc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002dce:	f7ff f8a7 	bl	8001f20 <HAL_GetTick>
 8002dd2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dd4:	e00e      	b.n	8002df4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002dd6:	f7ff f8a3 	bl	8001f20 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b19      	cmp	r3, #25
 8002de2:	d907      	bls.n	8002df4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002de4:	6a3b      	ldr	r3, [r7, #32]
 8002de6:	f043 0320 	orr.w	r3, r3, #32
 8002dea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002df2:	e006      	b.n	8002e02 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	f003 0320 	and.w	r3, r3, #32
 8002dfe:	2b20      	cmp	r3, #32
 8002e00:	d1e9      	bne.n	8002dd6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	f003 0320 	and.w	r3, r3, #32
 8002e0c:	2b20      	cmp	r3, #32
 8002e0e:	d003      	beq.n	8002e18 <I2C_IsErrorOccurred+0xe0>
 8002e10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0aa      	beq.n	8002d6e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002e18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d103      	bne.n	8002e28 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2220      	movs	r2, #32
 8002e26:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	f043 0304 	orr.w	r3, r3, #4
 8002e2e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00b      	beq.n	8002e60 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00b      	beq.n	8002e82 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	f043 0308 	orr.w	r3, r3, #8
 8002e70:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e7a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00b      	beq.n	8002ea4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	f043 0302 	orr.w	r3, r3, #2
 8002e92:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d01c      	beq.n	8002ee6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f7ff fdaf 	bl	8002a10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6859      	ldr	r1, [r3, #4]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8002ef4 <I2C_IsErrorOccurred+0x1bc>)
 8002ebe:	400b      	ands	r3, r1
 8002ec0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002ee6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3728      	adds	r7, #40	@ 0x28
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	fe00e800 	.word	0xfe00e800

08002ef8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b087      	sub	sp, #28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	607b      	str	r3, [r7, #4]
 8002f02:	460b      	mov	r3, r1
 8002f04:	817b      	strh	r3, [r7, #10]
 8002f06:	4613      	mov	r3, r2
 8002f08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f0a:	897b      	ldrh	r3, [r7, #10]
 8002f0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f10:	7a7b      	ldrb	r3, [r7, #9]
 8002f12:	041b      	lsls	r3, r3, #16
 8002f14:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f18:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f26:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	0d5b      	lsrs	r3, r3, #21
 8002f32:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002f36:	4b08      	ldr	r3, [pc, #32]	@ (8002f58 <I2C_TransferConfig+0x60>)
 8002f38:	430b      	orrs	r3, r1
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	ea02 0103 	and.w	r1, r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002f4a:	bf00      	nop
 8002f4c:	371c      	adds	r7, #28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	03ff63ff 	.word	0x03ff63ff

08002f5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b20      	cmp	r3, #32
 8002f70:	d138      	bne.n	8002fe4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e032      	b.n	8002fe6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2224      	movs	r2, #36	@ 0x24
 8002f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0201 	bic.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002fae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6819      	ldr	r1, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0201 	orr.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	e000      	b.n	8002fe6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fe4:	2302      	movs	r3, #2
  }
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b085      	sub	sp, #20
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
 8002ffa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b20      	cmp	r3, #32
 8003006:	d139      	bne.n	800307c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003012:	2302      	movs	r3, #2
 8003014:	e033      	b.n	800307e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2224      	movs	r2, #36	@ 0x24
 8003022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0201 	bic.w	r2, r2, #1
 8003034:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003044:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	021b      	lsls	r3, r3, #8
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	4313      	orrs	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0201 	orr.w	r2, r2, #1
 8003066:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003078:	2300      	movs	r3, #0
 800307a:	e000      	b.n	800307e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800307c:	2302      	movs	r3, #2
  }
}
 800307e:	4618      	mov	r0, r3
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
	...

0800308c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003090:	4b05      	ldr	r3, [pc, #20]	@ (80030a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a04      	ldr	r2, [pc, #16]	@ (80030a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003096:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800309a:	6013      	str	r3, [r2, #0]
}
 800309c:	bf00      	nop
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	40007000 	.word	0x40007000

080030ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80030b2:	2300      	movs	r3, #0
 80030b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80030b6:	4b23      	ldr	r3, [pc, #140]	@ (8003144 <HAL_PWREx_EnableOverDrive+0x98>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	4a22      	ldr	r2, [pc, #136]	@ (8003144 <HAL_PWREx_EnableOverDrive+0x98>)
 80030bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80030c2:	4b20      	ldr	r3, [pc, #128]	@ (8003144 <HAL_PWREx_EnableOverDrive+0x98>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ca:	603b      	str	r3, [r7, #0]
 80030cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80030ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003148 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a1d      	ldr	r2, [pc, #116]	@ (8003148 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030d8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030da:	f7fe ff21 	bl	8001f20 <HAL_GetTick>
 80030de:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030e0:	e009      	b.n	80030f6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030e2:	f7fe ff1d 	bl	8001f20 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80030f0:	d901      	bls.n	80030f6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e022      	b.n	800313c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030f6:	4b14      	ldr	r3, [pc, #80]	@ (8003148 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003102:	d1ee      	bne.n	80030e2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003104:	4b10      	ldr	r3, [pc, #64]	@ (8003148 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a0f      	ldr	r2, [pc, #60]	@ (8003148 <HAL_PWREx_EnableOverDrive+0x9c>)
 800310a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800310e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003110:	f7fe ff06 	bl	8001f20 <HAL_GetTick>
 8003114:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003116:	e009      	b.n	800312c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003118:	f7fe ff02 	bl	8001f20 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003126:	d901      	bls.n	800312c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e007      	b.n	800313c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800312c:	4b06      	ldr	r3, [pc, #24]	@ (8003148 <HAL_PWREx_EnableOverDrive+0x9c>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003134:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003138:	d1ee      	bne.n	8003118 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40023800 	.word	0x40023800
 8003148:	40007000 	.word	0x40007000

0800314c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003154:	2300      	movs	r3, #0
 8003156:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e29b      	b.n	800369a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 8087 	beq.w	800327e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003170:	4b96      	ldr	r3, [pc, #600]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 030c 	and.w	r3, r3, #12
 8003178:	2b04      	cmp	r3, #4
 800317a:	d00c      	beq.n	8003196 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800317c:	4b93      	ldr	r3, [pc, #588]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 030c 	and.w	r3, r3, #12
 8003184:	2b08      	cmp	r3, #8
 8003186:	d112      	bne.n	80031ae <HAL_RCC_OscConfig+0x62>
 8003188:	4b90      	ldr	r3, [pc, #576]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003190:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003194:	d10b      	bne.n	80031ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003196:	4b8d      	ldr	r3, [pc, #564]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d06c      	beq.n	800327c <HAL_RCC_OscConfig+0x130>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d168      	bne.n	800327c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e275      	b.n	800369a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031b6:	d106      	bne.n	80031c6 <HAL_RCC_OscConfig+0x7a>
 80031b8:	4b84      	ldr	r3, [pc, #528]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a83      	ldr	r2, [pc, #524]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 80031be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031c2:	6013      	str	r3, [r2, #0]
 80031c4:	e02e      	b.n	8003224 <HAL_RCC_OscConfig+0xd8>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10c      	bne.n	80031e8 <HAL_RCC_OscConfig+0x9c>
 80031ce:	4b7f      	ldr	r3, [pc, #508]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a7e      	ldr	r2, [pc, #504]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 80031d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	4b7c      	ldr	r3, [pc, #496]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a7b      	ldr	r2, [pc, #492]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 80031e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	e01d      	b.n	8003224 <HAL_RCC_OscConfig+0xd8>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031f0:	d10c      	bne.n	800320c <HAL_RCC_OscConfig+0xc0>
 80031f2:	4b76      	ldr	r3, [pc, #472]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a75      	ldr	r2, [pc, #468]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 80031f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	4b73      	ldr	r3, [pc, #460]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a72      	ldr	r2, [pc, #456]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 8003204:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003208:	6013      	str	r3, [r2, #0]
 800320a:	e00b      	b.n	8003224 <HAL_RCC_OscConfig+0xd8>
 800320c:	4b6f      	ldr	r3, [pc, #444]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a6e      	ldr	r2, [pc, #440]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 8003212:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003216:	6013      	str	r3, [r2, #0]
 8003218:	4b6c      	ldr	r3, [pc, #432]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a6b      	ldr	r2, [pc, #428]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 800321e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003222:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d013      	beq.n	8003254 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322c:	f7fe fe78 	bl	8001f20 <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003234:	f7fe fe74 	bl	8001f20 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b64      	cmp	r3, #100	@ 0x64
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e229      	b.n	800369a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003246:	4b61      	ldr	r3, [pc, #388]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d0f0      	beq.n	8003234 <HAL_RCC_OscConfig+0xe8>
 8003252:	e014      	b.n	800327e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003254:	f7fe fe64 	bl	8001f20 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800325c:	f7fe fe60 	bl	8001f20 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b64      	cmp	r3, #100	@ 0x64
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e215      	b.n	800369a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800326e:	4b57      	ldr	r3, [pc, #348]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f0      	bne.n	800325c <HAL_RCC_OscConfig+0x110>
 800327a:	e000      	b.n	800327e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800327c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d069      	beq.n	800335e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800328a:	4b50      	ldr	r3, [pc, #320]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 030c 	and.w	r3, r3, #12
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00b      	beq.n	80032ae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003296:	4b4d      	ldr	r3, [pc, #308]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 030c 	and.w	r3, r3, #12
 800329e:	2b08      	cmp	r3, #8
 80032a0:	d11c      	bne.n	80032dc <HAL_RCC_OscConfig+0x190>
 80032a2:	4b4a      	ldr	r3, [pc, #296]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d116      	bne.n	80032dc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ae:	4b47      	ldr	r3, [pc, #284]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d005      	beq.n	80032c6 <HAL_RCC_OscConfig+0x17a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d001      	beq.n	80032c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e1e9      	b.n	800369a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c6:	4b41      	ldr	r3, [pc, #260]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	493d      	ldr	r1, [pc, #244]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032da:	e040      	b.n	800335e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d023      	beq.n	800332c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032e4:	4b39      	ldr	r3, [pc, #228]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a38      	ldr	r2, [pc, #224]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f0:	f7fe fe16 	bl	8001f20 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f8:	f7fe fe12 	bl	8001f20 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e1c7      	b.n	800369a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800330a:	4b30      	ldr	r3, [pc, #192]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0f0      	beq.n	80032f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003316:	4b2d      	ldr	r3, [pc, #180]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	4929      	ldr	r1, [pc, #164]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 8003326:	4313      	orrs	r3, r2
 8003328:	600b      	str	r3, [r1, #0]
 800332a:	e018      	b.n	800335e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800332c:	4b27      	ldr	r3, [pc, #156]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a26      	ldr	r2, [pc, #152]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 8003332:	f023 0301 	bic.w	r3, r3, #1
 8003336:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003338:	f7fe fdf2 	bl	8001f20 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003340:	f7fe fdee 	bl	8001f20 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e1a3      	b.n	800369a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003352:	4b1e      	ldr	r3, [pc, #120]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f0      	bne.n	8003340 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b00      	cmp	r3, #0
 8003368:	d038      	beq.n	80033dc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d019      	beq.n	80033a6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003372:	4b16      	ldr	r3, [pc, #88]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 8003374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003376:	4a15      	ldr	r2, [pc, #84]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 8003378:	f043 0301 	orr.w	r3, r3, #1
 800337c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337e:	f7fe fdcf 	bl	8001f20 <HAL_GetTick>
 8003382:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003384:	e008      	b.n	8003398 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003386:	f7fe fdcb 	bl	8001f20 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e180      	b.n	800369a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003398:	4b0c      	ldr	r3, [pc, #48]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 800339a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0f0      	beq.n	8003386 <HAL_RCC_OscConfig+0x23a>
 80033a4:	e01a      	b.n	80033dc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033a6:	4b09      	ldr	r3, [pc, #36]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 80033a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033aa:	4a08      	ldr	r2, [pc, #32]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 80033ac:	f023 0301 	bic.w	r3, r3, #1
 80033b0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b2:	f7fe fdb5 	bl	8001f20 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033b8:	e00a      	b.n	80033d0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ba:	f7fe fdb1 	bl	8001f20 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d903      	bls.n	80033d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e166      	b.n	800369a <HAL_RCC_OscConfig+0x54e>
 80033cc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d0:	4b92      	ldr	r3, [pc, #584]	@ (800361c <HAL_RCC_OscConfig+0x4d0>)
 80033d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1ee      	bne.n	80033ba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 80a4 	beq.w	8003532 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ea:	4b8c      	ldr	r3, [pc, #560]	@ (800361c <HAL_RCC_OscConfig+0x4d0>)
 80033ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10d      	bne.n	8003412 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80033f6:	4b89      	ldr	r3, [pc, #548]	@ (800361c <HAL_RCC_OscConfig+0x4d0>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fa:	4a88      	ldr	r2, [pc, #544]	@ (800361c <HAL_RCC_OscConfig+0x4d0>)
 80033fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003400:	6413      	str	r3, [r2, #64]	@ 0x40
 8003402:	4b86      	ldr	r3, [pc, #536]	@ (800361c <HAL_RCC_OscConfig+0x4d0>)
 8003404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800340a:	60bb      	str	r3, [r7, #8]
 800340c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800340e:	2301      	movs	r3, #1
 8003410:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003412:	4b83      	ldr	r3, [pc, #524]	@ (8003620 <HAL_RCC_OscConfig+0x4d4>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800341a:	2b00      	cmp	r3, #0
 800341c:	d118      	bne.n	8003450 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800341e:	4b80      	ldr	r3, [pc, #512]	@ (8003620 <HAL_RCC_OscConfig+0x4d4>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a7f      	ldr	r2, [pc, #508]	@ (8003620 <HAL_RCC_OscConfig+0x4d4>)
 8003424:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003428:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800342a:	f7fe fd79 	bl	8001f20 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003430:	e008      	b.n	8003444 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003432:	f7fe fd75 	bl	8001f20 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b64      	cmp	r3, #100	@ 0x64
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e12a      	b.n	800369a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003444:	4b76      	ldr	r3, [pc, #472]	@ (8003620 <HAL_RCC_OscConfig+0x4d4>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0f0      	beq.n	8003432 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d106      	bne.n	8003466 <HAL_RCC_OscConfig+0x31a>
 8003458:	4b70      	ldr	r3, [pc, #448]	@ (800361c <HAL_RCC_OscConfig+0x4d0>)
 800345a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800345c:	4a6f      	ldr	r2, [pc, #444]	@ (800361c <HAL_RCC_OscConfig+0x4d0>)
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	6713      	str	r3, [r2, #112]	@ 0x70
 8003464:	e02d      	b.n	80034c2 <HAL_RCC_OscConfig+0x376>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10c      	bne.n	8003488 <HAL_RCC_OscConfig+0x33c>
 800346e:	4b6b      	ldr	r3, [pc, #428]	@ (800361c <HAL_RCC_OscConfig+0x4d0>)
 8003470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003472:	4a6a      	ldr	r2, [pc, #424]	@ (800361c <HAL_RCC_OscConfig+0x4d0>)
 8003474:	f023 0301 	bic.w	r3, r3, #1
 8003478:	6713      	str	r3, [r2, #112]	@ 0x70
 800347a:	4b68      	ldr	r3, [pc, #416]	@ (800361c <HAL_RCC_OscConfig+0x4d0>)
 800347c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800347e:	4a67      	ldr	r2, [pc, #412]	@ (800361c <HAL_RCC_OscConfig+0x4d0>)
 8003480:	f023 0304 	bic.w	r3, r3, #4
 8003484:	6713      	str	r3, [r2, #112]	@ 0x70
 8003486:	e01c      	b.n	80034c2 <HAL_RCC_OscConfig+0x376>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	2b05      	cmp	r3, #5
 800348e:	d10c      	bne.n	80034aa <HAL_RCC_OscConfig+0x35e>
 8003490:	4b62      	ldr	r3, [pc, #392]	@ (800361c <HAL_RCC_OscConfig+0x4d0>)
 8003492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003494:	4a61      	ldr	r2, [pc, #388]	@ (800361c <HAL_RCC_OscConfig+0x4d0>)
 8003496:	f043 0304 	orr.w	r3, r3, #4
 800349a:	6713      	str	r3, [r2, #112]	@ 0x70
 800349c:	4b5f      	ldr	r3, [pc, #380]	@ (800361c <HAL_RCC_OscConfig+0x4d0>)
 800349e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034a0:	4a5e      	ldr	r2, [pc, #376]	@ (800361c <HAL_RCC_OscConfig+0x4d0>)
 80034a2:	f043 0301 	orr.w	r3, r3, #1
 80034a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80034a8:	e00b      	b.n	80034c2 <HAL_RCC_OscConfig+0x376>
 80034aa:	4b5c      	ldr	r3, [pc, #368]	@ (800361c <HAL_RCC_OscConfig+0x4d0>)
 80034ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ae:	4a5b      	ldr	r2, [pc, #364]	@ (800361c <HAL_RCC_OscConfig+0x4d0>)
 80034b0:	f023 0301 	bic.w	r3, r3, #1
 80034b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80034b6:	4b59      	ldr	r3, [pc, #356]	@ (800361c <HAL_RCC_OscConfig+0x4d0>)
 80034b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ba:	4a58      	ldr	r2, [pc, #352]	@ (800361c <HAL_RCC_OscConfig+0x4d0>)
 80034bc:	f023 0304 	bic.w	r3, r3, #4
 80034c0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d015      	beq.n	80034f6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ca:	f7fe fd29 	bl	8001f20 <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d0:	e00a      	b.n	80034e8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d2:	f7fe fd25 	bl	8001f20 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e0d8      	b.n	800369a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e8:	4b4c      	ldr	r3, [pc, #304]	@ (800361c <HAL_RCC_OscConfig+0x4d0>)
 80034ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0ee      	beq.n	80034d2 <HAL_RCC_OscConfig+0x386>
 80034f4:	e014      	b.n	8003520 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f6:	f7fe fd13 	bl	8001f20 <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034fc:	e00a      	b.n	8003514 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034fe:	f7fe fd0f 	bl	8001f20 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	f241 3288 	movw	r2, #5000	@ 0x1388
 800350c:	4293      	cmp	r3, r2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e0c2      	b.n	800369a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003514:	4b41      	ldr	r3, [pc, #260]	@ (800361c <HAL_RCC_OscConfig+0x4d0>)
 8003516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1ee      	bne.n	80034fe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003520:	7dfb      	ldrb	r3, [r7, #23]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d105      	bne.n	8003532 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003526:	4b3d      	ldr	r3, [pc, #244]	@ (800361c <HAL_RCC_OscConfig+0x4d0>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352a:	4a3c      	ldr	r2, [pc, #240]	@ (800361c <HAL_RCC_OscConfig+0x4d0>)
 800352c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003530:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 80ae 	beq.w	8003698 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800353c:	4b37      	ldr	r3, [pc, #220]	@ (800361c <HAL_RCC_OscConfig+0x4d0>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f003 030c 	and.w	r3, r3, #12
 8003544:	2b08      	cmp	r3, #8
 8003546:	d06d      	beq.n	8003624 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	2b02      	cmp	r3, #2
 800354e:	d14b      	bne.n	80035e8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003550:	4b32      	ldr	r3, [pc, #200]	@ (800361c <HAL_RCC_OscConfig+0x4d0>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a31      	ldr	r2, [pc, #196]	@ (800361c <HAL_RCC_OscConfig+0x4d0>)
 8003556:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800355a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355c:	f7fe fce0 	bl	8001f20 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003564:	f7fe fcdc 	bl	8001f20 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e091      	b.n	800369a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003576:	4b29      	ldr	r3, [pc, #164]	@ (800361c <HAL_RCC_OscConfig+0x4d0>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f0      	bne.n	8003564 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69da      	ldr	r2, [r3, #28]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003590:	019b      	lsls	r3, r3, #6
 8003592:	431a      	orrs	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003598:	085b      	lsrs	r3, r3, #1
 800359a:	3b01      	subs	r3, #1
 800359c:	041b      	lsls	r3, r3, #16
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a4:	061b      	lsls	r3, r3, #24
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ac:	071b      	lsls	r3, r3, #28
 80035ae:	491b      	ldr	r1, [pc, #108]	@ (800361c <HAL_RCC_OscConfig+0x4d0>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035b4:	4b19      	ldr	r3, [pc, #100]	@ (800361c <HAL_RCC_OscConfig+0x4d0>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a18      	ldr	r2, [pc, #96]	@ (800361c <HAL_RCC_OscConfig+0x4d0>)
 80035ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c0:	f7fe fcae 	bl	8001f20 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c8:	f7fe fcaa 	bl	8001f20 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e05f      	b.n	800369a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035da:	4b10      	ldr	r3, [pc, #64]	@ (800361c <HAL_RCC_OscConfig+0x4d0>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0f0      	beq.n	80035c8 <HAL_RCC_OscConfig+0x47c>
 80035e6:	e057      	b.n	8003698 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e8:	4b0c      	ldr	r3, [pc, #48]	@ (800361c <HAL_RCC_OscConfig+0x4d0>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a0b      	ldr	r2, [pc, #44]	@ (800361c <HAL_RCC_OscConfig+0x4d0>)
 80035ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f4:	f7fe fc94 	bl	8001f20 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035fc:	f7fe fc90 	bl	8001f20 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e045      	b.n	800369a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360e:	4b03      	ldr	r3, [pc, #12]	@ (800361c <HAL_RCC_OscConfig+0x4d0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f0      	bne.n	80035fc <HAL_RCC_OscConfig+0x4b0>
 800361a:	e03d      	b.n	8003698 <HAL_RCC_OscConfig+0x54c>
 800361c:	40023800 	.word	0x40023800
 8003620:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003624:	4b1f      	ldr	r3, [pc, #124]	@ (80036a4 <HAL_RCC_OscConfig+0x558>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d030      	beq.n	8003694 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800363c:	429a      	cmp	r2, r3
 800363e:	d129      	bne.n	8003694 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800364a:	429a      	cmp	r2, r3
 800364c:	d122      	bne.n	8003694 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003654:	4013      	ands	r3, r2
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800365a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800365c:	4293      	cmp	r3, r2
 800365e:	d119      	bne.n	8003694 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366a:	085b      	lsrs	r3, r3, #1
 800366c:	3b01      	subs	r3, #1
 800366e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003670:	429a      	cmp	r2, r3
 8003672:	d10f      	bne.n	8003694 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800367e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003680:	429a      	cmp	r2, r3
 8003682:	d107      	bne.n	8003694 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003690:	429a      	cmp	r2, r3
 8003692:	d001      	beq.n	8003698 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e000      	b.n	800369a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40023800 	.word	0x40023800

080036a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d101      	bne.n	80036c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0d0      	b.n	8003862 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036c0:	4b6a      	ldr	r3, [pc, #424]	@ (800386c <HAL_RCC_ClockConfig+0x1c4>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 030f 	and.w	r3, r3, #15
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d910      	bls.n	80036f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ce:	4b67      	ldr	r3, [pc, #412]	@ (800386c <HAL_RCC_ClockConfig+0x1c4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f023 020f 	bic.w	r2, r3, #15
 80036d6:	4965      	ldr	r1, [pc, #404]	@ (800386c <HAL_RCC_ClockConfig+0x1c4>)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	4313      	orrs	r3, r2
 80036dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036de:	4b63      	ldr	r3, [pc, #396]	@ (800386c <HAL_RCC_ClockConfig+0x1c4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d001      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e0b8      	b.n	8003862 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d020      	beq.n	800373e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d005      	beq.n	8003714 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003708:	4b59      	ldr	r3, [pc, #356]	@ (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	4a58      	ldr	r2, [pc, #352]	@ (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 800370e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003712:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0308 	and.w	r3, r3, #8
 800371c:	2b00      	cmp	r3, #0
 800371e:	d005      	beq.n	800372c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003720:	4b53      	ldr	r3, [pc, #332]	@ (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	4a52      	ldr	r2, [pc, #328]	@ (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 8003726:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800372a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800372c:	4b50      	ldr	r3, [pc, #320]	@ (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	494d      	ldr	r1, [pc, #308]	@ (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 800373a:	4313      	orrs	r3, r2
 800373c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d040      	beq.n	80037cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d107      	bne.n	8003762 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003752:	4b47      	ldr	r3, [pc, #284]	@ (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d115      	bne.n	800378a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e07f      	b.n	8003862 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b02      	cmp	r3, #2
 8003768:	d107      	bne.n	800377a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800376a:	4b41      	ldr	r3, [pc, #260]	@ (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d109      	bne.n	800378a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e073      	b.n	8003862 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800377a:	4b3d      	ldr	r3, [pc, #244]	@ (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e06b      	b.n	8003862 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800378a:	4b39      	ldr	r3, [pc, #228]	@ (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f023 0203 	bic.w	r2, r3, #3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	4936      	ldr	r1, [pc, #216]	@ (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 8003798:	4313      	orrs	r3, r2
 800379a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800379c:	f7fe fbc0 	bl	8001f20 <HAL_GetTick>
 80037a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a2:	e00a      	b.n	80037ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a4:	f7fe fbbc 	bl	8001f20 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e053      	b.n	8003862 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ba:	4b2d      	ldr	r3, [pc, #180]	@ (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 020c 	and.w	r2, r3, #12
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d1eb      	bne.n	80037a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037cc:	4b27      	ldr	r3, [pc, #156]	@ (800386c <HAL_RCC_ClockConfig+0x1c4>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 030f 	and.w	r3, r3, #15
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d210      	bcs.n	80037fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037da:	4b24      	ldr	r3, [pc, #144]	@ (800386c <HAL_RCC_ClockConfig+0x1c4>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f023 020f 	bic.w	r2, r3, #15
 80037e2:	4922      	ldr	r1, [pc, #136]	@ (800386c <HAL_RCC_ClockConfig+0x1c4>)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ea:	4b20      	ldr	r3, [pc, #128]	@ (800386c <HAL_RCC_ClockConfig+0x1c4>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d001      	beq.n	80037fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e032      	b.n	8003862 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b00      	cmp	r3, #0
 8003806:	d008      	beq.n	800381a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003808:	4b19      	ldr	r3, [pc, #100]	@ (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	4916      	ldr	r1, [pc, #88]	@ (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 8003816:	4313      	orrs	r3, r2
 8003818:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	2b00      	cmp	r3, #0
 8003824:	d009      	beq.n	800383a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003826:	4b12      	ldr	r3, [pc, #72]	@ (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	490e      	ldr	r1, [pc, #56]	@ (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 8003836:	4313      	orrs	r3, r2
 8003838:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800383a:	f000 f821 	bl	8003880 <HAL_RCC_GetSysClockFreq>
 800383e:	4602      	mov	r2, r0
 8003840:	4b0b      	ldr	r3, [pc, #44]	@ (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	091b      	lsrs	r3, r3, #4
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	490a      	ldr	r1, [pc, #40]	@ (8003874 <HAL_RCC_ClockConfig+0x1cc>)
 800384c:	5ccb      	ldrb	r3, [r1, r3]
 800384e:	fa22 f303 	lsr.w	r3, r2, r3
 8003852:	4a09      	ldr	r2, [pc, #36]	@ (8003878 <HAL_RCC_ClockConfig+0x1d0>)
 8003854:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003856:	4b09      	ldr	r3, [pc, #36]	@ (800387c <HAL_RCC_ClockConfig+0x1d4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f7fe fa6e 	bl	8001d3c <HAL_InitTick>

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40023c00 	.word	0x40023c00
 8003870:	40023800 	.word	0x40023800
 8003874:	08007ff8 	.word	0x08007ff8
 8003878:	20000000 	.word	0x20000000
 800387c:	20000004 	.word	0x20000004

08003880 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003884:	b094      	sub	sp, #80	@ 0x50
 8003886:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003888:	2300      	movs	r3, #0
 800388a:	647b      	str	r3, [r7, #68]	@ 0x44
 800388c:	2300      	movs	r3, #0
 800388e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003890:	2300      	movs	r3, #0
 8003892:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003894:	2300      	movs	r3, #0
 8003896:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003898:	4b79      	ldr	r3, [pc, #484]	@ (8003a80 <HAL_RCC_GetSysClockFreq+0x200>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f003 030c 	and.w	r3, r3, #12
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d00d      	beq.n	80038c0 <HAL_RCC_GetSysClockFreq+0x40>
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	f200 80e1 	bhi.w	8003a6c <HAL_RCC_GetSysClockFreq+0x1ec>
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d002      	beq.n	80038b4 <HAL_RCC_GetSysClockFreq+0x34>
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d003      	beq.n	80038ba <HAL_RCC_GetSysClockFreq+0x3a>
 80038b2:	e0db      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038b4:	4b73      	ldr	r3, [pc, #460]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x204>)
 80038b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038b8:	e0db      	b.n	8003a72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038ba:	4b73      	ldr	r3, [pc, #460]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x208>)
 80038bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038be:	e0d8      	b.n	8003a72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038c0:	4b6f      	ldr	r3, [pc, #444]	@ (8003a80 <HAL_RCC_GetSysClockFreq+0x200>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038c8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80038ca:	4b6d      	ldr	r3, [pc, #436]	@ (8003a80 <HAL_RCC_GetSysClockFreq+0x200>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d063      	beq.n	800399e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038d6:	4b6a      	ldr	r3, [pc, #424]	@ (8003a80 <HAL_RCC_GetSysClockFreq+0x200>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	099b      	lsrs	r3, r3, #6
 80038dc:	2200      	movs	r2, #0
 80038de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80038e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80038ea:	2300      	movs	r3, #0
 80038ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80038ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80038f2:	4622      	mov	r2, r4
 80038f4:	462b      	mov	r3, r5
 80038f6:	f04f 0000 	mov.w	r0, #0
 80038fa:	f04f 0100 	mov.w	r1, #0
 80038fe:	0159      	lsls	r1, r3, #5
 8003900:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003904:	0150      	lsls	r0, r2, #5
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	4621      	mov	r1, r4
 800390c:	1a51      	subs	r1, r2, r1
 800390e:	6139      	str	r1, [r7, #16]
 8003910:	4629      	mov	r1, r5
 8003912:	eb63 0301 	sbc.w	r3, r3, r1
 8003916:	617b      	str	r3, [r7, #20]
 8003918:	f04f 0200 	mov.w	r2, #0
 800391c:	f04f 0300 	mov.w	r3, #0
 8003920:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003924:	4659      	mov	r1, fp
 8003926:	018b      	lsls	r3, r1, #6
 8003928:	4651      	mov	r1, sl
 800392a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800392e:	4651      	mov	r1, sl
 8003930:	018a      	lsls	r2, r1, #6
 8003932:	4651      	mov	r1, sl
 8003934:	ebb2 0801 	subs.w	r8, r2, r1
 8003938:	4659      	mov	r1, fp
 800393a:	eb63 0901 	sbc.w	r9, r3, r1
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	f04f 0300 	mov.w	r3, #0
 8003946:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800394a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800394e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003952:	4690      	mov	r8, r2
 8003954:	4699      	mov	r9, r3
 8003956:	4623      	mov	r3, r4
 8003958:	eb18 0303 	adds.w	r3, r8, r3
 800395c:	60bb      	str	r3, [r7, #8]
 800395e:	462b      	mov	r3, r5
 8003960:	eb49 0303 	adc.w	r3, r9, r3
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	f04f 0200 	mov.w	r2, #0
 800396a:	f04f 0300 	mov.w	r3, #0
 800396e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003972:	4629      	mov	r1, r5
 8003974:	024b      	lsls	r3, r1, #9
 8003976:	4621      	mov	r1, r4
 8003978:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800397c:	4621      	mov	r1, r4
 800397e:	024a      	lsls	r2, r1, #9
 8003980:	4610      	mov	r0, r2
 8003982:	4619      	mov	r1, r3
 8003984:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003986:	2200      	movs	r2, #0
 8003988:	62bb      	str	r3, [r7, #40]	@ 0x28
 800398a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800398c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003990:	f7fc fca6 	bl	80002e0 <__aeabi_uldivmod>
 8003994:	4602      	mov	r2, r0
 8003996:	460b      	mov	r3, r1
 8003998:	4613      	mov	r3, r2
 800399a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800399c:	e058      	b.n	8003a50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800399e:	4b38      	ldr	r3, [pc, #224]	@ (8003a80 <HAL_RCC_GetSysClockFreq+0x200>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	099b      	lsrs	r3, r3, #6
 80039a4:	2200      	movs	r2, #0
 80039a6:	4618      	mov	r0, r3
 80039a8:	4611      	mov	r1, r2
 80039aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039ae:	623b      	str	r3, [r7, #32]
 80039b0:	2300      	movs	r3, #0
 80039b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80039b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039b8:	4642      	mov	r2, r8
 80039ba:	464b      	mov	r3, r9
 80039bc:	f04f 0000 	mov.w	r0, #0
 80039c0:	f04f 0100 	mov.w	r1, #0
 80039c4:	0159      	lsls	r1, r3, #5
 80039c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039ca:	0150      	lsls	r0, r2, #5
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4641      	mov	r1, r8
 80039d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80039d6:	4649      	mov	r1, r9
 80039d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	f04f 0300 	mov.w	r3, #0
 80039e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039f0:	ebb2 040a 	subs.w	r4, r2, sl
 80039f4:	eb63 050b 	sbc.w	r5, r3, fp
 80039f8:	f04f 0200 	mov.w	r2, #0
 80039fc:	f04f 0300 	mov.w	r3, #0
 8003a00:	00eb      	lsls	r3, r5, #3
 8003a02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a06:	00e2      	lsls	r2, r4, #3
 8003a08:	4614      	mov	r4, r2
 8003a0a:	461d      	mov	r5, r3
 8003a0c:	4643      	mov	r3, r8
 8003a0e:	18e3      	adds	r3, r4, r3
 8003a10:	603b      	str	r3, [r7, #0]
 8003a12:	464b      	mov	r3, r9
 8003a14:	eb45 0303 	adc.w	r3, r5, r3
 8003a18:	607b      	str	r3, [r7, #4]
 8003a1a:	f04f 0200 	mov.w	r2, #0
 8003a1e:	f04f 0300 	mov.w	r3, #0
 8003a22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a26:	4629      	mov	r1, r5
 8003a28:	028b      	lsls	r3, r1, #10
 8003a2a:	4621      	mov	r1, r4
 8003a2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a30:	4621      	mov	r1, r4
 8003a32:	028a      	lsls	r2, r1, #10
 8003a34:	4610      	mov	r0, r2
 8003a36:	4619      	mov	r1, r3
 8003a38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	61bb      	str	r3, [r7, #24]
 8003a3e:	61fa      	str	r2, [r7, #28]
 8003a40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a44:	f7fc fc4c 	bl	80002e0 <__aeabi_uldivmod>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003a50:	4b0b      	ldr	r3, [pc, #44]	@ (8003a80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	0c1b      	lsrs	r3, r3, #16
 8003a56:	f003 0303 	and.w	r3, r3, #3
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003a60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a6a:	e002      	b.n	8003a72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a6c:	4b05      	ldr	r3, [pc, #20]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3750      	adds	r7, #80	@ 0x50
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a7e:	bf00      	nop
 8003a80:	40023800 	.word	0x40023800
 8003a84:	00f42400 	.word	0x00f42400
 8003a88:	007a1200 	.word	0x007a1200

08003a8c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a90:	4b03      	ldr	r3, [pc, #12]	@ (8003aa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a92:	681b      	ldr	r3, [r3, #0]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	20000000 	.word	0x20000000

08003aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003aa8:	f7ff fff0 	bl	8003a8c <HAL_RCC_GetHCLKFreq>
 8003aac:	4602      	mov	r2, r0
 8003aae:	4b05      	ldr	r3, [pc, #20]	@ (8003ac4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	0a9b      	lsrs	r3, r3, #10
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	4903      	ldr	r1, [pc, #12]	@ (8003ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aba:	5ccb      	ldrb	r3, [r1, r3]
 8003abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	08008008 	.word	0x08008008

08003acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ad0:	f7ff ffdc 	bl	8003a8c <HAL_RCC_GetHCLKFreq>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	4b05      	ldr	r3, [pc, #20]	@ (8003aec <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	0b5b      	lsrs	r3, r3, #13
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	4903      	ldr	r1, [pc, #12]	@ (8003af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ae2:	5ccb      	ldrb	r3, [r1, r3]
 8003ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40023800 	.word	0x40023800
 8003af0:	08008008 	.word	0x08008008

08003af4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	220f      	movs	r2, #15
 8003b02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b04:	4b12      	ldr	r3, [pc, #72]	@ (8003b50 <HAL_RCC_GetClockConfig+0x5c>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f003 0203 	and.w	r2, r3, #3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b10:	4b0f      	ldr	r3, [pc, #60]	@ (8003b50 <HAL_RCC_GetClockConfig+0x5c>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b50 <HAL_RCC_GetClockConfig+0x5c>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003b28:	4b09      	ldr	r3, [pc, #36]	@ (8003b50 <HAL_RCC_GetClockConfig+0x5c>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	08db      	lsrs	r3, r3, #3
 8003b2e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b36:	4b07      	ldr	r3, [pc, #28]	@ (8003b54 <HAL_RCC_GetClockConfig+0x60>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 020f 	and.w	r2, r3, #15
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	601a      	str	r2, [r3, #0]
}
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	40023800 	.word	0x40023800
 8003b54:	40023c00 	.word	0x40023c00

08003b58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b088      	sub	sp, #32
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003b60:	2300      	movs	r3, #0
 8003b62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003b64:	2300      	movs	r3, #0
 8003b66:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003b70:	2300      	movs	r3, #0
 8003b72:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d012      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b80:	4b69      	ldr	r3, [pc, #420]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	4a68      	ldr	r2, [pc, #416]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b86:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003b8a:	6093      	str	r3, [r2, #8]
 8003b8c:	4b66      	ldr	r3, [pc, #408]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b94:	4964      	ldr	r1, [pc, #400]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d017      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bb2:	4b5d      	ldr	r3, [pc, #372]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bb8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc0:	4959      	ldr	r1, [pc, #356]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bcc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bd0:	d101      	bne.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003bde:	2301      	movs	r3, #1
 8003be0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d017      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003bee:	4b4e      	ldr	r3, [pc, #312]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bf4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfc:	494a      	ldr	r1, [pc, #296]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c0c:	d101      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0320 	and.w	r3, r3, #32
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 808b 	beq.w	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c3c:	4b3a      	ldr	r3, [pc, #232]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c40:	4a39      	ldr	r2, [pc, #228]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c46:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c48:	4b37      	ldr	r3, [pc, #220]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c50:	60bb      	str	r3, [r7, #8]
 8003c52:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c54:	4b35      	ldr	r3, [pc, #212]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a34      	ldr	r2, [pc, #208]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c60:	f7fe f95e 	bl	8001f20 <HAL_GetTick>
 8003c64:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c66:	e008      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c68:	f7fe f95a 	bl	8001f20 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b64      	cmp	r3, #100	@ 0x64
 8003c74:	d901      	bls.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e38f      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c7a:	4b2c      	ldr	r3, [pc, #176]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0f0      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c86:	4b28      	ldr	r3, [pc, #160]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c8e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d035      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d02e      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ca4:	4b20      	ldr	r3, [pc, #128]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cae:	4b1e      	ldr	r3, [pc, #120]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb2:	4a1d      	ldr	r2, [pc, #116]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cb8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cba:	4b1b      	ldr	r3, [pc, #108]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cbe:	4a1a      	ldr	r2, [pc, #104]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cc4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003cc6:	4a18      	ldr	r2, [pc, #96]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ccc:	4b16      	ldr	r3, [pc, #88]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d114      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd8:	f7fe f922 	bl	8001f20 <HAL_GetTick>
 8003cdc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cde:	e00a      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ce0:	f7fe f91e 	bl	8001f20 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e351      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0ee      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d0e:	d111      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003d10:	4b05      	ldr	r3, [pc, #20]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003d1c:	4b04      	ldr	r3, [pc, #16]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d1e:	400b      	ands	r3, r1
 8003d20:	4901      	ldr	r1, [pc, #4]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	608b      	str	r3, [r1, #8]
 8003d26:	e00b      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	40007000 	.word	0x40007000
 8003d30:	0ffffcff 	.word	0x0ffffcff
 8003d34:	4bac      	ldr	r3, [pc, #688]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	4aab      	ldr	r2, [pc, #684]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d3a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003d3e:	6093      	str	r3, [r2, #8]
 8003d40:	4ba9      	ldr	r3, [pc, #676]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d42:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d4c:	49a6      	ldr	r1, [pc, #664]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0310 	and.w	r3, r3, #16
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d010      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d5e:	4ba2      	ldr	r3, [pc, #648]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d64:	4aa0      	ldr	r2, [pc, #640]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d6a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003d6e:	4b9e      	ldr	r3, [pc, #632]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d70:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d78:	499b      	ldr	r1, [pc, #620]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00a      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d8c:	4b96      	ldr	r3, [pc, #600]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d92:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d9a:	4993      	ldr	r1, [pc, #588]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003dae:	4b8e      	ldr	r3, [pc, #568]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003db4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003dbc:	498a      	ldr	r1, [pc, #552]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00a      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dd0:	4b85      	ldr	r3, [pc, #532]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dde:	4982      	ldr	r1, [pc, #520]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003df2:	4b7d      	ldr	r3, [pc, #500]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e00:	4979      	ldr	r1, [pc, #484]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e14:	4b74      	ldr	r3, [pc, #464]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e1a:	f023 0203 	bic.w	r2, r3, #3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e22:	4971      	ldr	r1, [pc, #452]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e36:	4b6c      	ldr	r3, [pc, #432]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e3c:	f023 020c 	bic.w	r2, r3, #12
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e44:	4968      	ldr	r1, [pc, #416]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00a      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e58:	4b63      	ldr	r3, [pc, #396]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e5e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e66:	4960      	ldr	r1, [pc, #384]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00a      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e7a:	4b5b      	ldr	r3, [pc, #364]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e80:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e88:	4957      	ldr	r1, [pc, #348]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e9c:	4b52      	ldr	r3, [pc, #328]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ea2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eaa:	494f      	ldr	r1, [pc, #316]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003ebe:	4b4a      	ldr	r3, [pc, #296]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ecc:	4946      	ldr	r1, [pc, #280]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00a      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003ee0:	4b41      	ldr	r3, [pc, #260]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ee6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eee:	493e      	ldr	r1, [pc, #248]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003f02:	4b39      	ldr	r3, [pc, #228]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f08:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f10:	4935      	ldr	r1, [pc, #212]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00a      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f24:	4b30      	ldr	r3, [pc, #192]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f2a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f32:	492d      	ldr	r1, [pc, #180]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d011      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f46:	4b28      	ldr	r3, [pc, #160]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f4c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f54:	4924      	ldr	r1, [pc, #144]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f64:	d101      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003f66:	2301      	movs	r3, #1
 8003f68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003f76:	2301      	movs	r3, #1
 8003f78:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f86:	4b18      	ldr	r3, [pc, #96]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f8c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f94:	4914      	ldr	r1, [pc, #80]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00b      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fae:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fb8:	490b      	ldr	r1, [pc, #44]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00f      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003fcc:	4b06      	ldr	r3, [pc, #24]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fd2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fdc:	4902      	ldr	r1, [pc, #8]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003fe4:	e002      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003fe6:	bf00      	nop
 8003fe8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00b      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ff8:	4b8a      	ldr	r3, [pc, #552]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ffa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ffe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004008:	4986      	ldr	r1, [pc, #536]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00b      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800401c:	4b81      	ldr	r3, [pc, #516]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800401e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004022:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800402c:	497d      	ldr	r1, [pc, #500]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800402e:	4313      	orrs	r3, r2
 8004030:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d006      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 80d6 	beq.w	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004048:	4b76      	ldr	r3, [pc, #472]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a75      	ldr	r2, [pc, #468]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800404e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004052:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004054:	f7fd ff64 	bl	8001f20 <HAL_GetTick>
 8004058:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800405a:	e008      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800405c:	f7fd ff60 	bl	8001f20 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b64      	cmp	r3, #100	@ 0x64
 8004068:	d901      	bls.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e195      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800406e:	4b6d      	ldr	r3, [pc, #436]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1f0      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d021      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800408a:	2b00      	cmp	r3, #0
 800408c:	d11d      	bne.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800408e:	4b65      	ldr	r3, [pc, #404]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004090:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004094:	0c1b      	lsrs	r3, r3, #16
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800409c:	4b61      	ldr	r3, [pc, #388]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800409e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040a2:	0e1b      	lsrs	r3, r3, #24
 80040a4:	f003 030f 	and.w	r3, r3, #15
 80040a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	019a      	lsls	r2, r3, #6
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	041b      	lsls	r3, r3, #16
 80040b4:	431a      	orrs	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	061b      	lsls	r3, r3, #24
 80040ba:	431a      	orrs	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	071b      	lsls	r3, r3, #28
 80040c2:	4958      	ldr	r1, [pc, #352]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d004      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040de:	d00a      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d02e      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040f4:	d129      	bne.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80040f6:	4b4b      	ldr	r3, [pc, #300]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040fc:	0c1b      	lsrs	r3, r3, #16
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004104:	4b47      	ldr	r3, [pc, #284]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004106:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800410a:	0f1b      	lsrs	r3, r3, #28
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	019a      	lsls	r2, r3, #6
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	041b      	lsls	r3, r3, #16
 800411c:	431a      	orrs	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	061b      	lsls	r3, r3, #24
 8004124:	431a      	orrs	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	071b      	lsls	r3, r3, #28
 800412a:	493e      	ldr	r1, [pc, #248]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004132:	4b3c      	ldr	r3, [pc, #240]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004134:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004138:	f023 021f 	bic.w	r2, r3, #31
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004140:	3b01      	subs	r3, #1
 8004142:	4938      	ldr	r1, [pc, #224]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d01d      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004156:	4b33      	ldr	r3, [pc, #204]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004158:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800415c:	0e1b      	lsrs	r3, r3, #24
 800415e:	f003 030f 	and.w	r3, r3, #15
 8004162:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004164:	4b2f      	ldr	r3, [pc, #188]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004166:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800416a:	0f1b      	lsrs	r3, r3, #28
 800416c:	f003 0307 	and.w	r3, r3, #7
 8004170:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	019a      	lsls	r2, r3, #6
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	041b      	lsls	r3, r3, #16
 800417e:	431a      	orrs	r2, r3
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	061b      	lsls	r3, r3, #24
 8004184:	431a      	orrs	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	071b      	lsls	r3, r3, #28
 800418a:	4926      	ldr	r1, [pc, #152]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d011      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	019a      	lsls	r2, r3, #6
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	041b      	lsls	r3, r3, #16
 80041aa:	431a      	orrs	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	061b      	lsls	r3, r3, #24
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	071b      	lsls	r3, r3, #28
 80041ba:	491a      	ldr	r1, [pc, #104]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80041c2:	4b18      	ldr	r3, [pc, #96]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a17      	ldr	r2, [pc, #92]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80041cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041ce:	f7fd fea7 	bl	8001f20 <HAL_GetTick>
 80041d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041d4:	e008      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041d6:	f7fd fea3 	bl	8001f20 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b64      	cmp	r3, #100	@ 0x64
 80041e2:	d901      	bls.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e0d8      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041e8:	4b0e      	ldr	r3, [pc, #56]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d0f0      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	f040 80ce 	bne.w	8004398 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80041fc:	4b09      	ldr	r3, [pc, #36]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a08      	ldr	r2, [pc, #32]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004202:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004206:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004208:	f7fd fe8a 	bl	8001f20 <HAL_GetTick>
 800420c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800420e:	e00b      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004210:	f7fd fe86 	bl	8001f20 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b64      	cmp	r3, #100	@ 0x64
 800421c:	d904      	bls.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e0bb      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004222:	bf00      	nop
 8004224:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004228:	4b5e      	ldr	r3, [pc, #376]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004230:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004234:	d0ec      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004246:	2b00      	cmp	r3, #0
 8004248:	d009      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004252:	2b00      	cmp	r3, #0
 8004254:	d02e      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425a:	2b00      	cmp	r3, #0
 800425c:	d12a      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800425e:	4b51      	ldr	r3, [pc, #324]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004264:	0c1b      	lsrs	r3, r3, #16
 8004266:	f003 0303 	and.w	r3, r3, #3
 800426a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800426c:	4b4d      	ldr	r3, [pc, #308]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800426e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004272:	0f1b      	lsrs	r3, r3, #28
 8004274:	f003 0307 	and.w	r3, r3, #7
 8004278:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	019a      	lsls	r2, r3, #6
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	041b      	lsls	r3, r3, #16
 8004284:	431a      	orrs	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	061b      	lsls	r3, r3, #24
 800428c:	431a      	orrs	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	071b      	lsls	r3, r3, #28
 8004292:	4944      	ldr	r1, [pc, #272]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004294:	4313      	orrs	r3, r2
 8004296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800429a:	4b42      	ldr	r3, [pc, #264]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800429c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042a0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a8:	3b01      	subs	r3, #1
 80042aa:	021b      	lsls	r3, r3, #8
 80042ac:	493d      	ldr	r1, [pc, #244]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d022      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042c8:	d11d      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80042ca:	4b36      	ldr	r3, [pc, #216]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042d0:	0e1b      	lsrs	r3, r3, #24
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80042d8:	4b32      	ldr	r3, [pc, #200]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042de:	0f1b      	lsrs	r3, r3, #28
 80042e0:	f003 0307 	and.w	r3, r3, #7
 80042e4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	019a      	lsls	r2, r3, #6
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	041b      	lsls	r3, r3, #16
 80042f2:	431a      	orrs	r2, r3
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	061b      	lsls	r3, r3, #24
 80042f8:	431a      	orrs	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	071b      	lsls	r3, r3, #28
 80042fe:	4929      	ldr	r1, [pc, #164]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004300:	4313      	orrs	r3, r2
 8004302:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0308 	and.w	r3, r3, #8
 800430e:	2b00      	cmp	r3, #0
 8004310:	d028      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004312:	4b24      	ldr	r3, [pc, #144]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004318:	0e1b      	lsrs	r3, r3, #24
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004320:	4b20      	ldr	r3, [pc, #128]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004326:	0c1b      	lsrs	r3, r3, #16
 8004328:	f003 0303 	and.w	r3, r3, #3
 800432c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	019a      	lsls	r2, r3, #6
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	041b      	lsls	r3, r3, #16
 8004338:	431a      	orrs	r2, r3
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	061b      	lsls	r3, r3, #24
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	071b      	lsls	r3, r3, #28
 8004346:	4917      	ldr	r1, [pc, #92]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004348:	4313      	orrs	r3, r2
 800434a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800434e:	4b15      	ldr	r3, [pc, #84]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004350:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004354:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800435c:	4911      	ldr	r1, [pc, #68]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800435e:	4313      	orrs	r3, r2
 8004360:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004364:	4b0f      	ldr	r3, [pc, #60]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a0e      	ldr	r2, [pc, #56]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800436a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800436e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004370:	f7fd fdd6 	bl	8001f20 <HAL_GetTick>
 8004374:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004376:	e008      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004378:	f7fd fdd2 	bl	8001f20 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b64      	cmp	r3, #100	@ 0x64
 8004384:	d901      	bls.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e007      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800438a:	4b06      	ldr	r3, [pc, #24]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004392:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004396:	d1ef      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3720      	adds	r7, #32
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	40023800 	.word	0x40023800

080043a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e049      	b.n	800444e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d106      	bne.n	80043d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f841 	bl	8004456 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2202      	movs	r2, #2
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3304      	adds	r3, #4
 80043e4:	4619      	mov	r1, r3
 80043e6:	4610      	mov	r0, r2
 80043e8:	f000 f9e8 	bl	80047bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800445e:	bf00      	nop
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
	...

0800446c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b01      	cmp	r3, #1
 800447e:	d001      	beq.n	8004484 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e054      	b.n	800452e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f042 0201 	orr.w	r2, r2, #1
 800449a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a26      	ldr	r2, [pc, #152]	@ (800453c <HAL_TIM_Base_Start_IT+0xd0>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d022      	beq.n	80044ec <HAL_TIM_Base_Start_IT+0x80>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ae:	d01d      	beq.n	80044ec <HAL_TIM_Base_Start_IT+0x80>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a22      	ldr	r2, [pc, #136]	@ (8004540 <HAL_TIM_Base_Start_IT+0xd4>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d018      	beq.n	80044ec <HAL_TIM_Base_Start_IT+0x80>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a21      	ldr	r2, [pc, #132]	@ (8004544 <HAL_TIM_Base_Start_IT+0xd8>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d013      	beq.n	80044ec <HAL_TIM_Base_Start_IT+0x80>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a1f      	ldr	r2, [pc, #124]	@ (8004548 <HAL_TIM_Base_Start_IT+0xdc>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d00e      	beq.n	80044ec <HAL_TIM_Base_Start_IT+0x80>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a1e      	ldr	r2, [pc, #120]	@ (800454c <HAL_TIM_Base_Start_IT+0xe0>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d009      	beq.n	80044ec <HAL_TIM_Base_Start_IT+0x80>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a1c      	ldr	r2, [pc, #112]	@ (8004550 <HAL_TIM_Base_Start_IT+0xe4>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d004      	beq.n	80044ec <HAL_TIM_Base_Start_IT+0x80>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004554 <HAL_TIM_Base_Start_IT+0xe8>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d115      	bne.n	8004518 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689a      	ldr	r2, [r3, #8]
 80044f2:	4b19      	ldr	r3, [pc, #100]	@ (8004558 <HAL_TIM_Base_Start_IT+0xec>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b06      	cmp	r3, #6
 80044fc:	d015      	beq.n	800452a <HAL_TIM_Base_Start_IT+0xbe>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004504:	d011      	beq.n	800452a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f042 0201 	orr.w	r2, r2, #1
 8004514:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004516:	e008      	b.n	800452a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0201 	orr.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	e000      	b.n	800452c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800452a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	40010000 	.word	0x40010000
 8004540:	40000400 	.word	0x40000400
 8004544:	40000800 	.word	0x40000800
 8004548:	40000c00 	.word	0x40000c00
 800454c:	40010400 	.word	0x40010400
 8004550:	40014000 	.word	0x40014000
 8004554:	40001800 	.word	0x40001800
 8004558:	00010007 	.word	0x00010007

0800455c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d020      	beq.n	80045c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d01b      	beq.n	80045c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f06f 0202 	mvn.w	r2, #2
 8004590:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f8e9 	bl	800477e <HAL_TIM_IC_CaptureCallback>
 80045ac:	e005      	b.n	80045ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f8db 	bl	800476a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f8ec 	bl	8004792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f003 0304 	and.w	r3, r3, #4
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d020      	beq.n	800460c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d01b      	beq.n	800460c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f06f 0204 	mvn.w	r2, #4
 80045dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2202      	movs	r2, #2
 80045e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f8c3 	bl	800477e <HAL_TIM_IC_CaptureCallback>
 80045f8:	e005      	b.n	8004606 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f8b5 	bl	800476a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f8c6 	bl	8004792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d020      	beq.n	8004658 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b00      	cmp	r3, #0
 800461e:	d01b      	beq.n	8004658 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f06f 0208 	mvn.w	r2, #8
 8004628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2204      	movs	r2, #4
 800462e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	f003 0303 	and.w	r3, r3, #3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f89d 	bl	800477e <HAL_TIM_IC_CaptureCallback>
 8004644:	e005      	b.n	8004652 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f88f 	bl	800476a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f8a0 	bl	8004792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f003 0310 	and.w	r3, r3, #16
 800465e:	2b00      	cmp	r3, #0
 8004660:	d020      	beq.n	80046a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f003 0310 	and.w	r3, r3, #16
 8004668:	2b00      	cmp	r3, #0
 800466a:	d01b      	beq.n	80046a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f06f 0210 	mvn.w	r2, #16
 8004674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2208      	movs	r2, #8
 800467a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f877 	bl	800477e <HAL_TIM_IC_CaptureCallback>
 8004690:	e005      	b.n	800469e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f869 	bl	800476a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f87a 	bl	8004792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00c      	beq.n	80046c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d007      	beq.n	80046c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f06f 0201 	mvn.w	r2, #1
 80046c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7fd fa3c 	bl	8001b40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d104      	bne.n	80046dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00c      	beq.n	80046f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d007      	beq.n	80046f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80046ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 f913 	bl	800491c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00c      	beq.n	800471a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004706:	2b00      	cmp	r3, #0
 8004708:	d007      	beq.n	800471a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f90b 	bl	8004930 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00c      	beq.n	800473e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800472a:	2b00      	cmp	r3, #0
 800472c:	d007      	beq.n	800473e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f834 	bl	80047a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	f003 0320 	and.w	r3, r3, #32
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00c      	beq.n	8004762 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f003 0320 	and.w	r3, r3, #32
 800474e:	2b00      	cmp	r3, #0
 8004750:	d007      	beq.n	8004762 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f06f 0220 	mvn.w	r2, #32
 800475a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 f8d3 	bl	8004908 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004762:	bf00      	nop
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800476a:	b480      	push	{r7}
 800476c:	b083      	sub	sp, #12
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004772:	bf00      	nop
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800477e:	b480      	push	{r7}
 8004780:	b083      	sub	sp, #12
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b083      	sub	sp, #12
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047ae:	bf00      	nop
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
	...

080047bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a43      	ldr	r2, [pc, #268]	@ (80048dc <TIM_Base_SetConfig+0x120>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d013      	beq.n	80047fc <TIM_Base_SetConfig+0x40>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047da:	d00f      	beq.n	80047fc <TIM_Base_SetConfig+0x40>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a40      	ldr	r2, [pc, #256]	@ (80048e0 <TIM_Base_SetConfig+0x124>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d00b      	beq.n	80047fc <TIM_Base_SetConfig+0x40>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a3f      	ldr	r2, [pc, #252]	@ (80048e4 <TIM_Base_SetConfig+0x128>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d007      	beq.n	80047fc <TIM_Base_SetConfig+0x40>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a3e      	ldr	r2, [pc, #248]	@ (80048e8 <TIM_Base_SetConfig+0x12c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d003      	beq.n	80047fc <TIM_Base_SetConfig+0x40>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a3d      	ldr	r2, [pc, #244]	@ (80048ec <TIM_Base_SetConfig+0x130>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d108      	bne.n	800480e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004802:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	4313      	orrs	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a32      	ldr	r2, [pc, #200]	@ (80048dc <TIM_Base_SetConfig+0x120>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d02b      	beq.n	800486e <TIM_Base_SetConfig+0xb2>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800481c:	d027      	beq.n	800486e <TIM_Base_SetConfig+0xb2>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a2f      	ldr	r2, [pc, #188]	@ (80048e0 <TIM_Base_SetConfig+0x124>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d023      	beq.n	800486e <TIM_Base_SetConfig+0xb2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a2e      	ldr	r2, [pc, #184]	@ (80048e4 <TIM_Base_SetConfig+0x128>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d01f      	beq.n	800486e <TIM_Base_SetConfig+0xb2>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a2d      	ldr	r2, [pc, #180]	@ (80048e8 <TIM_Base_SetConfig+0x12c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d01b      	beq.n	800486e <TIM_Base_SetConfig+0xb2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a2c      	ldr	r2, [pc, #176]	@ (80048ec <TIM_Base_SetConfig+0x130>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d017      	beq.n	800486e <TIM_Base_SetConfig+0xb2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a2b      	ldr	r2, [pc, #172]	@ (80048f0 <TIM_Base_SetConfig+0x134>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d013      	beq.n	800486e <TIM_Base_SetConfig+0xb2>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a2a      	ldr	r2, [pc, #168]	@ (80048f4 <TIM_Base_SetConfig+0x138>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d00f      	beq.n	800486e <TIM_Base_SetConfig+0xb2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a29      	ldr	r2, [pc, #164]	@ (80048f8 <TIM_Base_SetConfig+0x13c>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d00b      	beq.n	800486e <TIM_Base_SetConfig+0xb2>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a28      	ldr	r2, [pc, #160]	@ (80048fc <TIM_Base_SetConfig+0x140>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d007      	beq.n	800486e <TIM_Base_SetConfig+0xb2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a27      	ldr	r2, [pc, #156]	@ (8004900 <TIM_Base_SetConfig+0x144>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d003      	beq.n	800486e <TIM_Base_SetConfig+0xb2>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a26      	ldr	r2, [pc, #152]	@ (8004904 <TIM_Base_SetConfig+0x148>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d108      	bne.n	8004880 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	4313      	orrs	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	4313      	orrs	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	689a      	ldr	r2, [r3, #8]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a0e      	ldr	r2, [pc, #56]	@ (80048dc <TIM_Base_SetConfig+0x120>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d003      	beq.n	80048ae <TIM_Base_SetConfig+0xf2>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a10      	ldr	r2, [pc, #64]	@ (80048ec <TIM_Base_SetConfig+0x130>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d103      	bne.n	80048b6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	691a      	ldr	r2, [r3, #16]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f043 0204 	orr.w	r2, r3, #4
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	601a      	str	r2, [r3, #0]
}
 80048ce:	bf00      	nop
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	40010000 	.word	0x40010000
 80048e0:	40000400 	.word	0x40000400
 80048e4:	40000800 	.word	0x40000800
 80048e8:	40000c00 	.word	0x40000c00
 80048ec:	40010400 	.word	0x40010400
 80048f0:	40014000 	.word	0x40014000
 80048f4:	40014400 	.word	0x40014400
 80048f8:	40014800 	.word	0x40014800
 80048fc:	40001800 	.word	0x40001800
 8004900:	40001c00 	.word	0x40001c00
 8004904:	40002000 	.word	0x40002000

08004908 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e040      	b.n	80049d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800495a:	2b00      	cmp	r3, #0
 800495c:	d106      	bne.n	800496c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7fd f988 	bl	8001c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2224      	movs	r2, #36	@ 0x24
 8004970:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 0201 	bic.w	r2, r2, #1
 8004980:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004986:	2b00      	cmp	r3, #0
 8004988:	d002      	beq.n	8004990 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 fa8c 	bl	8004ea8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f825 	bl	80049e0 <UART_SetConfig>
 8004996:	4603      	mov	r3, r0
 8004998:	2b01      	cmp	r3, #1
 800499a:	d101      	bne.n	80049a0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e01b      	b.n	80049d8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80049ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689a      	ldr	r2, [r3, #8]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80049be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 0201 	orr.w	r2, r2, #1
 80049ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 fb0b 	bl	8004fec <UART_CheckIdleState>
 80049d6:	4603      	mov	r3, r0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b088      	sub	sp, #32
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049e8:	2300      	movs	r3, #0
 80049ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	431a      	orrs	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	69db      	ldr	r3, [r3, #28]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	4ba6      	ldr	r3, [pc, #664]	@ (8004ca4 <UART_SetConfig+0x2c4>)
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	6812      	ldr	r2, [r2, #0]
 8004a12:	6979      	ldr	r1, [r7, #20]
 8004a14:	430b      	orrs	r3, r1
 8004a16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68da      	ldr	r2, [r3, #12]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a94      	ldr	r2, [pc, #592]	@ (8004ca8 <UART_SetConfig+0x2c8>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d120      	bne.n	8004a9e <UART_SetConfig+0xbe>
 8004a5c:	4b93      	ldr	r3, [pc, #588]	@ (8004cac <UART_SetConfig+0x2cc>)
 8004a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	2b03      	cmp	r3, #3
 8004a68:	d816      	bhi.n	8004a98 <UART_SetConfig+0xb8>
 8004a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a70 <UART_SetConfig+0x90>)
 8004a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a70:	08004a81 	.word	0x08004a81
 8004a74:	08004a8d 	.word	0x08004a8d
 8004a78:	08004a87 	.word	0x08004a87
 8004a7c:	08004a93 	.word	0x08004a93
 8004a80:	2301      	movs	r3, #1
 8004a82:	77fb      	strb	r3, [r7, #31]
 8004a84:	e150      	b.n	8004d28 <UART_SetConfig+0x348>
 8004a86:	2302      	movs	r3, #2
 8004a88:	77fb      	strb	r3, [r7, #31]
 8004a8a:	e14d      	b.n	8004d28 <UART_SetConfig+0x348>
 8004a8c:	2304      	movs	r3, #4
 8004a8e:	77fb      	strb	r3, [r7, #31]
 8004a90:	e14a      	b.n	8004d28 <UART_SetConfig+0x348>
 8004a92:	2308      	movs	r3, #8
 8004a94:	77fb      	strb	r3, [r7, #31]
 8004a96:	e147      	b.n	8004d28 <UART_SetConfig+0x348>
 8004a98:	2310      	movs	r3, #16
 8004a9a:	77fb      	strb	r3, [r7, #31]
 8004a9c:	e144      	b.n	8004d28 <UART_SetConfig+0x348>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a83      	ldr	r2, [pc, #524]	@ (8004cb0 <UART_SetConfig+0x2d0>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d132      	bne.n	8004b0e <UART_SetConfig+0x12e>
 8004aa8:	4b80      	ldr	r3, [pc, #512]	@ (8004cac <UART_SetConfig+0x2cc>)
 8004aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aae:	f003 030c 	and.w	r3, r3, #12
 8004ab2:	2b0c      	cmp	r3, #12
 8004ab4:	d828      	bhi.n	8004b08 <UART_SetConfig+0x128>
 8004ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8004abc <UART_SetConfig+0xdc>)
 8004ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004abc:	08004af1 	.word	0x08004af1
 8004ac0:	08004b09 	.word	0x08004b09
 8004ac4:	08004b09 	.word	0x08004b09
 8004ac8:	08004b09 	.word	0x08004b09
 8004acc:	08004afd 	.word	0x08004afd
 8004ad0:	08004b09 	.word	0x08004b09
 8004ad4:	08004b09 	.word	0x08004b09
 8004ad8:	08004b09 	.word	0x08004b09
 8004adc:	08004af7 	.word	0x08004af7
 8004ae0:	08004b09 	.word	0x08004b09
 8004ae4:	08004b09 	.word	0x08004b09
 8004ae8:	08004b09 	.word	0x08004b09
 8004aec:	08004b03 	.word	0x08004b03
 8004af0:	2300      	movs	r3, #0
 8004af2:	77fb      	strb	r3, [r7, #31]
 8004af4:	e118      	b.n	8004d28 <UART_SetConfig+0x348>
 8004af6:	2302      	movs	r3, #2
 8004af8:	77fb      	strb	r3, [r7, #31]
 8004afa:	e115      	b.n	8004d28 <UART_SetConfig+0x348>
 8004afc:	2304      	movs	r3, #4
 8004afe:	77fb      	strb	r3, [r7, #31]
 8004b00:	e112      	b.n	8004d28 <UART_SetConfig+0x348>
 8004b02:	2308      	movs	r3, #8
 8004b04:	77fb      	strb	r3, [r7, #31]
 8004b06:	e10f      	b.n	8004d28 <UART_SetConfig+0x348>
 8004b08:	2310      	movs	r3, #16
 8004b0a:	77fb      	strb	r3, [r7, #31]
 8004b0c:	e10c      	b.n	8004d28 <UART_SetConfig+0x348>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a68      	ldr	r2, [pc, #416]	@ (8004cb4 <UART_SetConfig+0x2d4>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d120      	bne.n	8004b5a <UART_SetConfig+0x17a>
 8004b18:	4b64      	ldr	r3, [pc, #400]	@ (8004cac <UART_SetConfig+0x2cc>)
 8004b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b1e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004b22:	2b30      	cmp	r3, #48	@ 0x30
 8004b24:	d013      	beq.n	8004b4e <UART_SetConfig+0x16e>
 8004b26:	2b30      	cmp	r3, #48	@ 0x30
 8004b28:	d814      	bhi.n	8004b54 <UART_SetConfig+0x174>
 8004b2a:	2b20      	cmp	r3, #32
 8004b2c:	d009      	beq.n	8004b42 <UART_SetConfig+0x162>
 8004b2e:	2b20      	cmp	r3, #32
 8004b30:	d810      	bhi.n	8004b54 <UART_SetConfig+0x174>
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d002      	beq.n	8004b3c <UART_SetConfig+0x15c>
 8004b36:	2b10      	cmp	r3, #16
 8004b38:	d006      	beq.n	8004b48 <UART_SetConfig+0x168>
 8004b3a:	e00b      	b.n	8004b54 <UART_SetConfig+0x174>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	77fb      	strb	r3, [r7, #31]
 8004b40:	e0f2      	b.n	8004d28 <UART_SetConfig+0x348>
 8004b42:	2302      	movs	r3, #2
 8004b44:	77fb      	strb	r3, [r7, #31]
 8004b46:	e0ef      	b.n	8004d28 <UART_SetConfig+0x348>
 8004b48:	2304      	movs	r3, #4
 8004b4a:	77fb      	strb	r3, [r7, #31]
 8004b4c:	e0ec      	b.n	8004d28 <UART_SetConfig+0x348>
 8004b4e:	2308      	movs	r3, #8
 8004b50:	77fb      	strb	r3, [r7, #31]
 8004b52:	e0e9      	b.n	8004d28 <UART_SetConfig+0x348>
 8004b54:	2310      	movs	r3, #16
 8004b56:	77fb      	strb	r3, [r7, #31]
 8004b58:	e0e6      	b.n	8004d28 <UART_SetConfig+0x348>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a56      	ldr	r2, [pc, #344]	@ (8004cb8 <UART_SetConfig+0x2d8>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d120      	bne.n	8004ba6 <UART_SetConfig+0x1c6>
 8004b64:	4b51      	ldr	r3, [pc, #324]	@ (8004cac <UART_SetConfig+0x2cc>)
 8004b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b6a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004b6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b70:	d013      	beq.n	8004b9a <UART_SetConfig+0x1ba>
 8004b72:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b74:	d814      	bhi.n	8004ba0 <UART_SetConfig+0x1c0>
 8004b76:	2b80      	cmp	r3, #128	@ 0x80
 8004b78:	d009      	beq.n	8004b8e <UART_SetConfig+0x1ae>
 8004b7a:	2b80      	cmp	r3, #128	@ 0x80
 8004b7c:	d810      	bhi.n	8004ba0 <UART_SetConfig+0x1c0>
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d002      	beq.n	8004b88 <UART_SetConfig+0x1a8>
 8004b82:	2b40      	cmp	r3, #64	@ 0x40
 8004b84:	d006      	beq.n	8004b94 <UART_SetConfig+0x1b4>
 8004b86:	e00b      	b.n	8004ba0 <UART_SetConfig+0x1c0>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	77fb      	strb	r3, [r7, #31]
 8004b8c:	e0cc      	b.n	8004d28 <UART_SetConfig+0x348>
 8004b8e:	2302      	movs	r3, #2
 8004b90:	77fb      	strb	r3, [r7, #31]
 8004b92:	e0c9      	b.n	8004d28 <UART_SetConfig+0x348>
 8004b94:	2304      	movs	r3, #4
 8004b96:	77fb      	strb	r3, [r7, #31]
 8004b98:	e0c6      	b.n	8004d28 <UART_SetConfig+0x348>
 8004b9a:	2308      	movs	r3, #8
 8004b9c:	77fb      	strb	r3, [r7, #31]
 8004b9e:	e0c3      	b.n	8004d28 <UART_SetConfig+0x348>
 8004ba0:	2310      	movs	r3, #16
 8004ba2:	77fb      	strb	r3, [r7, #31]
 8004ba4:	e0c0      	b.n	8004d28 <UART_SetConfig+0x348>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a44      	ldr	r2, [pc, #272]	@ (8004cbc <UART_SetConfig+0x2dc>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d125      	bne.n	8004bfc <UART_SetConfig+0x21c>
 8004bb0:	4b3e      	ldr	r3, [pc, #248]	@ (8004cac <UART_SetConfig+0x2cc>)
 8004bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bbe:	d017      	beq.n	8004bf0 <UART_SetConfig+0x210>
 8004bc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bc4:	d817      	bhi.n	8004bf6 <UART_SetConfig+0x216>
 8004bc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bca:	d00b      	beq.n	8004be4 <UART_SetConfig+0x204>
 8004bcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bd0:	d811      	bhi.n	8004bf6 <UART_SetConfig+0x216>
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <UART_SetConfig+0x1fe>
 8004bd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bda:	d006      	beq.n	8004bea <UART_SetConfig+0x20a>
 8004bdc:	e00b      	b.n	8004bf6 <UART_SetConfig+0x216>
 8004bde:	2300      	movs	r3, #0
 8004be0:	77fb      	strb	r3, [r7, #31]
 8004be2:	e0a1      	b.n	8004d28 <UART_SetConfig+0x348>
 8004be4:	2302      	movs	r3, #2
 8004be6:	77fb      	strb	r3, [r7, #31]
 8004be8:	e09e      	b.n	8004d28 <UART_SetConfig+0x348>
 8004bea:	2304      	movs	r3, #4
 8004bec:	77fb      	strb	r3, [r7, #31]
 8004bee:	e09b      	b.n	8004d28 <UART_SetConfig+0x348>
 8004bf0:	2308      	movs	r3, #8
 8004bf2:	77fb      	strb	r3, [r7, #31]
 8004bf4:	e098      	b.n	8004d28 <UART_SetConfig+0x348>
 8004bf6:	2310      	movs	r3, #16
 8004bf8:	77fb      	strb	r3, [r7, #31]
 8004bfa:	e095      	b.n	8004d28 <UART_SetConfig+0x348>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a2f      	ldr	r2, [pc, #188]	@ (8004cc0 <UART_SetConfig+0x2e0>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d125      	bne.n	8004c52 <UART_SetConfig+0x272>
 8004c06:	4b29      	ldr	r3, [pc, #164]	@ (8004cac <UART_SetConfig+0x2cc>)
 8004c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c0c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004c10:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c14:	d017      	beq.n	8004c46 <UART_SetConfig+0x266>
 8004c16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c1a:	d817      	bhi.n	8004c4c <UART_SetConfig+0x26c>
 8004c1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c20:	d00b      	beq.n	8004c3a <UART_SetConfig+0x25a>
 8004c22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c26:	d811      	bhi.n	8004c4c <UART_SetConfig+0x26c>
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <UART_SetConfig+0x254>
 8004c2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c30:	d006      	beq.n	8004c40 <UART_SetConfig+0x260>
 8004c32:	e00b      	b.n	8004c4c <UART_SetConfig+0x26c>
 8004c34:	2301      	movs	r3, #1
 8004c36:	77fb      	strb	r3, [r7, #31]
 8004c38:	e076      	b.n	8004d28 <UART_SetConfig+0x348>
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	77fb      	strb	r3, [r7, #31]
 8004c3e:	e073      	b.n	8004d28 <UART_SetConfig+0x348>
 8004c40:	2304      	movs	r3, #4
 8004c42:	77fb      	strb	r3, [r7, #31]
 8004c44:	e070      	b.n	8004d28 <UART_SetConfig+0x348>
 8004c46:	2308      	movs	r3, #8
 8004c48:	77fb      	strb	r3, [r7, #31]
 8004c4a:	e06d      	b.n	8004d28 <UART_SetConfig+0x348>
 8004c4c:	2310      	movs	r3, #16
 8004c4e:	77fb      	strb	r3, [r7, #31]
 8004c50:	e06a      	b.n	8004d28 <UART_SetConfig+0x348>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a1b      	ldr	r2, [pc, #108]	@ (8004cc4 <UART_SetConfig+0x2e4>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d138      	bne.n	8004cce <UART_SetConfig+0x2ee>
 8004c5c:	4b13      	ldr	r3, [pc, #76]	@ (8004cac <UART_SetConfig+0x2cc>)
 8004c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c62:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004c66:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c6a:	d017      	beq.n	8004c9c <UART_SetConfig+0x2bc>
 8004c6c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c70:	d82a      	bhi.n	8004cc8 <UART_SetConfig+0x2e8>
 8004c72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c76:	d00b      	beq.n	8004c90 <UART_SetConfig+0x2b0>
 8004c78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c7c:	d824      	bhi.n	8004cc8 <UART_SetConfig+0x2e8>
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <UART_SetConfig+0x2aa>
 8004c82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c86:	d006      	beq.n	8004c96 <UART_SetConfig+0x2b6>
 8004c88:	e01e      	b.n	8004cc8 <UART_SetConfig+0x2e8>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	77fb      	strb	r3, [r7, #31]
 8004c8e:	e04b      	b.n	8004d28 <UART_SetConfig+0x348>
 8004c90:	2302      	movs	r3, #2
 8004c92:	77fb      	strb	r3, [r7, #31]
 8004c94:	e048      	b.n	8004d28 <UART_SetConfig+0x348>
 8004c96:	2304      	movs	r3, #4
 8004c98:	77fb      	strb	r3, [r7, #31]
 8004c9a:	e045      	b.n	8004d28 <UART_SetConfig+0x348>
 8004c9c:	2308      	movs	r3, #8
 8004c9e:	77fb      	strb	r3, [r7, #31]
 8004ca0:	e042      	b.n	8004d28 <UART_SetConfig+0x348>
 8004ca2:	bf00      	nop
 8004ca4:	efff69f3 	.word	0xefff69f3
 8004ca8:	40011000 	.word	0x40011000
 8004cac:	40023800 	.word	0x40023800
 8004cb0:	40004400 	.word	0x40004400
 8004cb4:	40004800 	.word	0x40004800
 8004cb8:	40004c00 	.word	0x40004c00
 8004cbc:	40005000 	.word	0x40005000
 8004cc0:	40011400 	.word	0x40011400
 8004cc4:	40007800 	.word	0x40007800
 8004cc8:	2310      	movs	r3, #16
 8004cca:	77fb      	strb	r3, [r7, #31]
 8004ccc:	e02c      	b.n	8004d28 <UART_SetConfig+0x348>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a72      	ldr	r2, [pc, #456]	@ (8004e9c <UART_SetConfig+0x4bc>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d125      	bne.n	8004d24 <UART_SetConfig+0x344>
 8004cd8:	4b71      	ldr	r3, [pc, #452]	@ (8004ea0 <UART_SetConfig+0x4c0>)
 8004cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cde:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004ce2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004ce6:	d017      	beq.n	8004d18 <UART_SetConfig+0x338>
 8004ce8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004cec:	d817      	bhi.n	8004d1e <UART_SetConfig+0x33e>
 8004cee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cf2:	d00b      	beq.n	8004d0c <UART_SetConfig+0x32c>
 8004cf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cf8:	d811      	bhi.n	8004d1e <UART_SetConfig+0x33e>
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <UART_SetConfig+0x326>
 8004cfe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d02:	d006      	beq.n	8004d12 <UART_SetConfig+0x332>
 8004d04:	e00b      	b.n	8004d1e <UART_SetConfig+0x33e>
 8004d06:	2300      	movs	r3, #0
 8004d08:	77fb      	strb	r3, [r7, #31]
 8004d0a:	e00d      	b.n	8004d28 <UART_SetConfig+0x348>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	77fb      	strb	r3, [r7, #31]
 8004d10:	e00a      	b.n	8004d28 <UART_SetConfig+0x348>
 8004d12:	2304      	movs	r3, #4
 8004d14:	77fb      	strb	r3, [r7, #31]
 8004d16:	e007      	b.n	8004d28 <UART_SetConfig+0x348>
 8004d18:	2308      	movs	r3, #8
 8004d1a:	77fb      	strb	r3, [r7, #31]
 8004d1c:	e004      	b.n	8004d28 <UART_SetConfig+0x348>
 8004d1e:	2310      	movs	r3, #16
 8004d20:	77fb      	strb	r3, [r7, #31]
 8004d22:	e001      	b.n	8004d28 <UART_SetConfig+0x348>
 8004d24:	2310      	movs	r3, #16
 8004d26:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d30:	d15b      	bne.n	8004dea <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004d32:	7ffb      	ldrb	r3, [r7, #31]
 8004d34:	2b08      	cmp	r3, #8
 8004d36:	d828      	bhi.n	8004d8a <UART_SetConfig+0x3aa>
 8004d38:	a201      	add	r2, pc, #4	@ (adr r2, 8004d40 <UART_SetConfig+0x360>)
 8004d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3e:	bf00      	nop
 8004d40:	08004d65 	.word	0x08004d65
 8004d44:	08004d6d 	.word	0x08004d6d
 8004d48:	08004d75 	.word	0x08004d75
 8004d4c:	08004d8b 	.word	0x08004d8b
 8004d50:	08004d7b 	.word	0x08004d7b
 8004d54:	08004d8b 	.word	0x08004d8b
 8004d58:	08004d8b 	.word	0x08004d8b
 8004d5c:	08004d8b 	.word	0x08004d8b
 8004d60:	08004d83 	.word	0x08004d83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d64:	f7fe fe9e 	bl	8003aa4 <HAL_RCC_GetPCLK1Freq>
 8004d68:	61b8      	str	r0, [r7, #24]
        break;
 8004d6a:	e013      	b.n	8004d94 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d6c:	f7fe feae 	bl	8003acc <HAL_RCC_GetPCLK2Freq>
 8004d70:	61b8      	str	r0, [r7, #24]
        break;
 8004d72:	e00f      	b.n	8004d94 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d74:	4b4b      	ldr	r3, [pc, #300]	@ (8004ea4 <UART_SetConfig+0x4c4>)
 8004d76:	61bb      	str	r3, [r7, #24]
        break;
 8004d78:	e00c      	b.n	8004d94 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d7a:	f7fe fd81 	bl	8003880 <HAL_RCC_GetSysClockFreq>
 8004d7e:	61b8      	str	r0, [r7, #24]
        break;
 8004d80:	e008      	b.n	8004d94 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d86:	61bb      	str	r3, [r7, #24]
        break;
 8004d88:	e004      	b.n	8004d94 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	77bb      	strb	r3, [r7, #30]
        break;
 8004d92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d074      	beq.n	8004e84 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	005a      	lsls	r2, r3, #1
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	085b      	lsrs	r3, r3, #1
 8004da4:	441a      	add	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	2b0f      	cmp	r3, #15
 8004db4:	d916      	bls.n	8004de4 <UART_SetConfig+0x404>
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dbc:	d212      	bcs.n	8004de4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	f023 030f 	bic.w	r3, r3, #15
 8004dc6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	085b      	lsrs	r3, r3, #1
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	f003 0307 	and.w	r3, r3, #7
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	89fb      	ldrh	r3, [r7, #14]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	89fa      	ldrh	r2, [r7, #14]
 8004de0:	60da      	str	r2, [r3, #12]
 8004de2:	e04f      	b.n	8004e84 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	77bb      	strb	r3, [r7, #30]
 8004de8:	e04c      	b.n	8004e84 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004dea:	7ffb      	ldrb	r3, [r7, #31]
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d828      	bhi.n	8004e42 <UART_SetConfig+0x462>
 8004df0:	a201      	add	r2, pc, #4	@ (adr r2, 8004df8 <UART_SetConfig+0x418>)
 8004df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df6:	bf00      	nop
 8004df8:	08004e1d 	.word	0x08004e1d
 8004dfc:	08004e25 	.word	0x08004e25
 8004e00:	08004e2d 	.word	0x08004e2d
 8004e04:	08004e43 	.word	0x08004e43
 8004e08:	08004e33 	.word	0x08004e33
 8004e0c:	08004e43 	.word	0x08004e43
 8004e10:	08004e43 	.word	0x08004e43
 8004e14:	08004e43 	.word	0x08004e43
 8004e18:	08004e3b 	.word	0x08004e3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e1c:	f7fe fe42 	bl	8003aa4 <HAL_RCC_GetPCLK1Freq>
 8004e20:	61b8      	str	r0, [r7, #24]
        break;
 8004e22:	e013      	b.n	8004e4c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e24:	f7fe fe52 	bl	8003acc <HAL_RCC_GetPCLK2Freq>
 8004e28:	61b8      	str	r0, [r7, #24]
        break;
 8004e2a:	e00f      	b.n	8004e4c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ea4 <UART_SetConfig+0x4c4>)
 8004e2e:	61bb      	str	r3, [r7, #24]
        break;
 8004e30:	e00c      	b.n	8004e4c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e32:	f7fe fd25 	bl	8003880 <HAL_RCC_GetSysClockFreq>
 8004e36:	61b8      	str	r0, [r7, #24]
        break;
 8004e38:	e008      	b.n	8004e4c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e3e:	61bb      	str	r3, [r7, #24]
        break;
 8004e40:	e004      	b.n	8004e4c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004e42:	2300      	movs	r3, #0
 8004e44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	77bb      	strb	r3, [r7, #30]
        break;
 8004e4a:	bf00      	nop
    }

    if (pclk != 0U)
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d018      	beq.n	8004e84 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	085a      	lsrs	r2, r3, #1
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	441a      	add	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e64:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	2b0f      	cmp	r3, #15
 8004e6a:	d909      	bls.n	8004e80 <UART_SetConfig+0x4a0>
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e72:	d205      	bcs.n	8004e80 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	60da      	str	r2, [r3, #12]
 8004e7e:	e001      	b.n	8004e84 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004e90:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3720      	adds	r7, #32
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	40007c00 	.word	0x40007c00
 8004ea0:	40023800 	.word	0x40023800
 8004ea4:	00f42400 	.word	0x00f42400

08004ea8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb4:	f003 0308 	and.w	r3, r3, #8
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00a      	beq.n	8004ed2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00a      	beq.n	8004ef4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00a      	beq.n	8004f16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	430a      	orrs	r2, r1
 8004f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1a:	f003 0304 	and.w	r3, r3, #4
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00a      	beq.n	8004f38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3c:	f003 0310 	and.w	r3, r3, #16
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00a      	beq.n	8004f5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5e:	f003 0320 	and.w	r3, r3, #32
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00a      	beq.n	8004f7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d01a      	beq.n	8004fbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fa6:	d10a      	bne.n	8004fbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00a      	beq.n	8004fe0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	605a      	str	r2, [r3, #4]
  }
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b098      	sub	sp, #96	@ 0x60
 8004ff0:	af02      	add	r7, sp, #8
 8004ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ffc:	f7fc ff90 	bl	8001f20 <HAL_GetTick>
 8005000:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0308 	and.w	r3, r3, #8
 800500c:	2b08      	cmp	r3, #8
 800500e:	d12e      	bne.n	800506e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005010:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005018:	2200      	movs	r2, #0
 800501a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f88c 	bl	800513c <UART_WaitOnFlagUntilTimeout>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d021      	beq.n	800506e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005032:	e853 3f00 	ldrex	r3, [r3]
 8005036:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800503a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800503e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	461a      	mov	r2, r3
 8005046:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005048:	647b      	str	r3, [r7, #68]	@ 0x44
 800504a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800504e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005050:	e841 2300 	strex	r3, r2, [r1]
 8005054:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1e6      	bne.n	800502a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2220      	movs	r2, #32
 8005060:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e062      	b.n	8005134 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0304 	and.w	r3, r3, #4
 8005078:	2b04      	cmp	r3, #4
 800507a:	d149      	bne.n	8005110 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800507c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005084:	2200      	movs	r2, #0
 8005086:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f856 	bl	800513c <UART_WaitOnFlagUntilTimeout>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d03c      	beq.n	8005110 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509e:	e853 3f00 	ldrex	r3, [r3]
 80050a2:	623b      	str	r3, [r7, #32]
   return(result);
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	461a      	mov	r2, r3
 80050b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80050b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050bc:	e841 2300 	strex	r3, r2, [r1]
 80050c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1e6      	bne.n	8005096 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	3308      	adds	r3, #8
 80050ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	e853 3f00 	ldrex	r3, [r3]
 80050d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0301 	bic.w	r3, r3, #1
 80050de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	3308      	adds	r3, #8
 80050e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050e8:	61fa      	str	r2, [r7, #28]
 80050ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ec:	69b9      	ldr	r1, [r7, #24]
 80050ee:	69fa      	ldr	r2, [r7, #28]
 80050f0:	e841 2300 	strex	r3, r2, [r1]
 80050f4:	617b      	str	r3, [r7, #20]
   return(result);
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1e5      	bne.n	80050c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2220      	movs	r2, #32
 8005100:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e011      	b.n	8005134 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2220      	movs	r2, #32
 8005114:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2220      	movs	r2, #32
 800511a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3758      	adds	r7, #88	@ 0x58
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	603b      	str	r3, [r7, #0]
 8005148:	4613      	mov	r3, r2
 800514a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800514c:	e04f      	b.n	80051ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005154:	d04b      	beq.n	80051ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005156:	f7fc fee3 	bl	8001f20 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	429a      	cmp	r2, r3
 8005164:	d302      	bcc.n	800516c <UART_WaitOnFlagUntilTimeout+0x30>
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d101      	bne.n	8005170 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e04e      	b.n	800520e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0304 	and.w	r3, r3, #4
 800517a:	2b00      	cmp	r3, #0
 800517c:	d037      	beq.n	80051ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2b80      	cmp	r3, #128	@ 0x80
 8005182:	d034      	beq.n	80051ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2b40      	cmp	r3, #64	@ 0x40
 8005188:	d031      	beq.n	80051ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	f003 0308 	and.w	r3, r3, #8
 8005194:	2b08      	cmp	r3, #8
 8005196:	d110      	bne.n	80051ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2208      	movs	r2, #8
 800519e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f000 f838 	bl	8005216 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2208      	movs	r2, #8
 80051aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e029      	b.n	800520e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	69db      	ldr	r3, [r3, #28]
 80051c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051c8:	d111      	bne.n	80051ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80051d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 f81e 	bl	8005216 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2220      	movs	r2, #32
 80051de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e00f      	b.n	800520e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	69da      	ldr	r2, [r3, #28]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	4013      	ands	r3, r2
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	bf0c      	ite	eq
 80051fe:	2301      	moveq	r3, #1
 8005200:	2300      	movne	r3, #0
 8005202:	b2db      	uxtb	r3, r3
 8005204:	461a      	mov	r2, r3
 8005206:	79fb      	ldrb	r3, [r7, #7]
 8005208:	429a      	cmp	r2, r3
 800520a:	d0a0      	beq.n	800514e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005216:	b480      	push	{r7}
 8005218:	b095      	sub	sp, #84	@ 0x54
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005226:	e853 3f00 	ldrex	r3, [r3]
 800522a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800522c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800522e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005232:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	461a      	mov	r2, r3
 800523a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800523c:	643b      	str	r3, [r7, #64]	@ 0x40
 800523e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005240:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005242:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005244:	e841 2300 	strex	r3, r2, [r1]
 8005248:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800524a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1e6      	bne.n	800521e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	3308      	adds	r3, #8
 8005256:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005258:	6a3b      	ldr	r3, [r7, #32]
 800525a:	e853 3f00 	ldrex	r3, [r3]
 800525e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	f023 0301 	bic.w	r3, r3, #1
 8005266:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	3308      	adds	r3, #8
 800526e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005270:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005272:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005274:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005276:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005278:	e841 2300 	strex	r3, r2, [r1]
 800527c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800527e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1e5      	bne.n	8005250 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005288:	2b01      	cmp	r3, #1
 800528a:	d118      	bne.n	80052be <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	e853 3f00 	ldrex	r3, [r3]
 8005298:	60bb      	str	r3, [r7, #8]
   return(result);
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	f023 0310 	bic.w	r3, r3, #16
 80052a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	461a      	mov	r2, r3
 80052a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052aa:	61bb      	str	r3, [r7, #24]
 80052ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ae:	6979      	ldr	r1, [r7, #20]
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	e841 2300 	strex	r3, r2, [r1]
 80052b6:	613b      	str	r3, [r7, #16]
   return(result);
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1e6      	bne.n	800528c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2220      	movs	r2, #32
 80052c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80052d2:	bf00      	nop
 80052d4:	3754      	adds	r7, #84	@ 0x54
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80052de:	b480      	push	{r7}
 80052e0:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80052e2:	bf00      	nop
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052f2:	f3ef 8305 	mrs	r3, IPSR
 80052f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80052f8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10f      	bne.n	800531e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052fe:	f3ef 8310 	mrs	r3, PRIMASK
 8005302:	607b      	str	r3, [r7, #4]
  return(result);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d105      	bne.n	8005316 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800530a:	f3ef 8311 	mrs	r3, BASEPRI
 800530e:	603b      	str	r3, [r7, #0]
  return(result);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d007      	beq.n	8005326 <osKernelInitialize+0x3a>
 8005316:	4b0e      	ldr	r3, [pc, #56]	@ (8005350 <osKernelInitialize+0x64>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b02      	cmp	r3, #2
 800531c:	d103      	bne.n	8005326 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800531e:	f06f 0305 	mvn.w	r3, #5
 8005322:	60fb      	str	r3, [r7, #12]
 8005324:	e00c      	b.n	8005340 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005326:	4b0a      	ldr	r3, [pc, #40]	@ (8005350 <osKernelInitialize+0x64>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d105      	bne.n	800533a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800532e:	4b08      	ldr	r3, [pc, #32]	@ (8005350 <osKernelInitialize+0x64>)
 8005330:	2201      	movs	r2, #1
 8005332:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005334:	2300      	movs	r3, #0
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	e002      	b.n	8005340 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800533a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800533e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005340:	68fb      	ldr	r3, [r7, #12]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	200003c4 	.word	0x200003c4

08005354 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800535a:	f3ef 8305 	mrs	r3, IPSR
 800535e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005360:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10f      	bne.n	8005386 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005366:	f3ef 8310 	mrs	r3, PRIMASK
 800536a:	607b      	str	r3, [r7, #4]
  return(result);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d105      	bne.n	800537e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005372:	f3ef 8311 	mrs	r3, BASEPRI
 8005376:	603b      	str	r3, [r7, #0]
  return(result);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d007      	beq.n	800538e <osKernelStart+0x3a>
 800537e:	4b0f      	ldr	r3, [pc, #60]	@ (80053bc <osKernelStart+0x68>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2b02      	cmp	r3, #2
 8005384:	d103      	bne.n	800538e <osKernelStart+0x3a>
    stat = osErrorISR;
 8005386:	f06f 0305 	mvn.w	r3, #5
 800538a:	60fb      	str	r3, [r7, #12]
 800538c:	e010      	b.n	80053b0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800538e:	4b0b      	ldr	r3, [pc, #44]	@ (80053bc <osKernelStart+0x68>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d109      	bne.n	80053aa <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005396:	f7ff ffa2 	bl	80052de <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800539a:	4b08      	ldr	r3, [pc, #32]	@ (80053bc <osKernelStart+0x68>)
 800539c:	2202      	movs	r2, #2
 800539e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80053a0:	f001 f8ca 	bl	8006538 <vTaskStartScheduler>
      stat = osOK;
 80053a4:	2300      	movs	r3, #0
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	e002      	b.n	80053b0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80053aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80053ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80053b0:	68fb      	ldr	r3, [r7, #12]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	200003c4 	.word	0x200003c4

080053c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b090      	sub	sp, #64	@ 0x40
 80053c4:	af04      	add	r7, sp, #16
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80053cc:	2300      	movs	r3, #0
 80053ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053d0:	f3ef 8305 	mrs	r3, IPSR
 80053d4:	61fb      	str	r3, [r7, #28]
  return(result);
 80053d6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f040 808f 	bne.w	80054fc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053de:	f3ef 8310 	mrs	r3, PRIMASK
 80053e2:	61bb      	str	r3, [r7, #24]
  return(result);
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d105      	bne.n	80053f6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053ea:	f3ef 8311 	mrs	r3, BASEPRI
 80053ee:	617b      	str	r3, [r7, #20]
  return(result);
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <osThreadNew+0x3e>
 80053f6:	4b44      	ldr	r3, [pc, #272]	@ (8005508 <osThreadNew+0x148>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d07e      	beq.n	80054fc <osThreadNew+0x13c>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d07b      	beq.n	80054fc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005404:	2380      	movs	r3, #128	@ 0x80
 8005406:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005408:	2318      	movs	r3, #24
 800540a:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800540c:	2300      	movs	r3, #0
 800540e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8005410:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005414:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d045      	beq.n	80054a8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d002      	beq.n	800542a <osThreadNew+0x6a>
        name = attr->name;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d002      	beq.n	8005438 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543a:	2b00      	cmp	r3, #0
 800543c:	d008      	beq.n	8005450 <osThreadNew+0x90>
 800543e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005440:	2b38      	cmp	r3, #56	@ 0x38
 8005442:	d805      	bhi.n	8005450 <osThreadNew+0x90>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <osThreadNew+0x94>
        return (NULL);
 8005450:	2300      	movs	r3, #0
 8005452:	e054      	b.n	80054fe <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d003      	beq.n	8005464 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	089b      	lsrs	r3, r3, #2
 8005462:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00e      	beq.n	800548a <osThreadNew+0xca>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	2b5b      	cmp	r3, #91	@ 0x5b
 8005472:	d90a      	bls.n	800548a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005478:	2b00      	cmp	r3, #0
 800547a:	d006      	beq.n	800548a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d002      	beq.n	800548a <osThreadNew+0xca>
        mem = 1;
 8005484:	2301      	movs	r3, #1
 8005486:	623b      	str	r3, [r7, #32]
 8005488:	e010      	b.n	80054ac <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10c      	bne.n	80054ac <osThreadNew+0xec>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d108      	bne.n	80054ac <osThreadNew+0xec>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d104      	bne.n	80054ac <osThreadNew+0xec>
          mem = 0;
 80054a2:	2300      	movs	r3, #0
 80054a4:	623b      	str	r3, [r7, #32]
 80054a6:	e001      	b.n	80054ac <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80054a8:	2300      	movs	r3, #0
 80054aa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80054ac:	6a3b      	ldr	r3, [r7, #32]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d110      	bne.n	80054d4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80054ba:	9202      	str	r2, [sp, #8]
 80054bc:	9301      	str	r3, [sp, #4]
 80054be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 fe4f 	bl	800616c <xTaskCreateStatic>
 80054ce:	4603      	mov	r3, r0
 80054d0:	613b      	str	r3, [r7, #16]
 80054d2:	e013      	b.n	80054fc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d110      	bne.n	80054fc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80054da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054dc:	b29a      	uxth	r2, r3
 80054de:	f107 0310 	add.w	r3, r7, #16
 80054e2:	9301      	str	r3, [sp, #4]
 80054e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f000 fea3 	bl	8006238 <xTaskCreate>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d001      	beq.n	80054fc <osThreadNew+0x13c>
          hTask = NULL;
 80054f8:	2300      	movs	r3, #0
 80054fa:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80054fc:	693b      	ldr	r3, [r7, #16]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3730      	adds	r7, #48	@ 0x30
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	200003c4 	.word	0x200003c4

0800550c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005514:	f3ef 8305 	mrs	r3, IPSR
 8005518:	613b      	str	r3, [r7, #16]
  return(result);
 800551a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10f      	bne.n	8005540 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005520:	f3ef 8310 	mrs	r3, PRIMASK
 8005524:	60fb      	str	r3, [r7, #12]
  return(result);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d105      	bne.n	8005538 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800552c:	f3ef 8311 	mrs	r3, BASEPRI
 8005530:	60bb      	str	r3, [r7, #8]
  return(result);
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d007      	beq.n	8005548 <osDelay+0x3c>
 8005538:	4b0a      	ldr	r3, [pc, #40]	@ (8005564 <osDelay+0x58>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2b02      	cmp	r3, #2
 800553e:	d103      	bne.n	8005548 <osDelay+0x3c>
    stat = osErrorISR;
 8005540:	f06f 0305 	mvn.w	r3, #5
 8005544:	617b      	str	r3, [r7, #20]
 8005546:	e007      	b.n	8005558 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005548:	2300      	movs	r3, #0
 800554a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d002      	beq.n	8005558 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 ffb8 	bl	80064c8 <vTaskDelay>
    }
  }

  return (stat);
 8005558:	697b      	ldr	r3, [r7, #20]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3718      	adds	r7, #24
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	200003c4 	.word	0x200003c4

08005568 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4a07      	ldr	r2, [pc, #28]	@ (8005594 <vApplicationGetIdleTaskMemory+0x2c>)
 8005578:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	4a06      	ldr	r2, [pc, #24]	@ (8005598 <vApplicationGetIdleTaskMemory+0x30>)
 800557e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2280      	movs	r2, #128	@ 0x80
 8005584:	601a      	str	r2, [r3, #0]
}
 8005586:	bf00      	nop
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	200003c8 	.word	0x200003c8
 8005598:	20000424 	.word	0x20000424

0800559c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4a07      	ldr	r2, [pc, #28]	@ (80055c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80055ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	4a06      	ldr	r2, [pc, #24]	@ (80055cc <vApplicationGetTimerTaskMemory+0x30>)
 80055b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80055ba:	601a      	str	r2, [r3, #0]
}
 80055bc:	bf00      	nop
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	20000624 	.word	0x20000624
 80055cc:	20000680 	.word	0x20000680

080055d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f103 0208 	add.w	r2, r3, #8
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80055e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f103 0208 	add.w	r2, r3, #8
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f103 0208 	add.w	r2, r3, #8
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800561e:	bf00      	nop
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800562a:	b480      	push	{r7}
 800562c:	b085      	sub	sp, #20
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	1c5a      	adds	r2, r3, #1
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	601a      	str	r2, [r3, #0]
}
 8005666:	bf00      	nop
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005672:	b480      	push	{r7}
 8005674:	b085      	sub	sp, #20
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
 800567a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005688:	d103      	bne.n	8005692 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	60fb      	str	r3, [r7, #12]
 8005690:	e00c      	b.n	80056ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	3308      	adds	r3, #8
 8005696:	60fb      	str	r3, [r7, #12]
 8005698:	e002      	b.n	80056a0 <vListInsert+0x2e>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d2f6      	bcs.n	800569a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	601a      	str	r2, [r3, #0]
}
 80056d8:	bf00      	nop
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	6892      	ldr	r2, [r2, #8]
 80056fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	6852      	ldr	r2, [r2, #4]
 8005704:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	429a      	cmp	r2, r3
 800570e:	d103      	bne.n	8005718 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	1e5a      	subs	r2, r3, #1
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3714      	adds	r7, #20
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10d      	bne.n	8005768 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800574c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005750:	b672      	cpsid	i
 8005752:	f383 8811 	msr	BASEPRI, r3
 8005756:	f3bf 8f6f 	isb	sy
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	b662      	cpsie	i
 8005760:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005762:	bf00      	nop
 8005764:	bf00      	nop
 8005766:	e7fd      	b.n	8005764 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005768:	f002 f8a8 	bl	80078bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005774:	68f9      	ldr	r1, [r7, #12]
 8005776:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005778:	fb01 f303 	mul.w	r3, r1, r3
 800577c:	441a      	add	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005798:	3b01      	subs	r3, #1
 800579a:	68f9      	ldr	r1, [r7, #12]
 800579c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800579e:	fb01 f303 	mul.w	r3, r1, r3
 80057a2:	441a      	add	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	22ff      	movs	r2, #255	@ 0xff
 80057ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	22ff      	movs	r2, #255	@ 0xff
 80057b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d114      	bne.n	80057e8 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d01a      	beq.n	80057fc <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	3310      	adds	r3, #16
 80057ca:	4618      	mov	r0, r3
 80057cc:	f001 f950 	bl	8006a70 <xTaskRemoveFromEventList>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d012      	beq.n	80057fc <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80057d6:	4b0d      	ldr	r3, [pc, #52]	@ (800580c <xQueueGenericReset+0xd4>)
 80057d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057dc:	601a      	str	r2, [r3, #0]
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	e009      	b.n	80057fc <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	3310      	adds	r3, #16
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7ff feef 	bl	80055d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	3324      	adds	r3, #36	@ 0x24
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7ff feea 	bl	80055d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80057fc:	f002 f894 	bl	8007928 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005800:	2301      	movs	r3, #1
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	e000ed04 	.word	0xe000ed04

08005810 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005810:	b580      	push	{r7, lr}
 8005812:	b08e      	sub	sp, #56	@ 0x38
 8005814:	af02      	add	r7, sp, #8
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
 800581c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10d      	bne.n	8005840 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8005824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005828:	b672      	cpsid	i
 800582a:	f383 8811 	msr	BASEPRI, r3
 800582e:	f3bf 8f6f 	isb	sy
 8005832:	f3bf 8f4f 	dsb	sy
 8005836:	b662      	cpsie	i
 8005838:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800583a:	bf00      	nop
 800583c:	bf00      	nop
 800583e:	e7fd      	b.n	800583c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10d      	bne.n	8005862 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8005846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800584a:	b672      	cpsid	i
 800584c:	f383 8811 	msr	BASEPRI, r3
 8005850:	f3bf 8f6f 	isb	sy
 8005854:	f3bf 8f4f 	dsb	sy
 8005858:	b662      	cpsie	i
 800585a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800585c:	bf00      	nop
 800585e:	bf00      	nop
 8005860:	e7fd      	b.n	800585e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <xQueueGenericCreateStatic+0x5e>
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <xQueueGenericCreateStatic+0x62>
 800586e:	2301      	movs	r3, #1
 8005870:	e000      	b.n	8005874 <xQueueGenericCreateStatic+0x64>
 8005872:	2300      	movs	r3, #0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10d      	bne.n	8005894 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8005878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800587c:	b672      	cpsid	i
 800587e:	f383 8811 	msr	BASEPRI, r3
 8005882:	f3bf 8f6f 	isb	sy
 8005886:	f3bf 8f4f 	dsb	sy
 800588a:	b662      	cpsie	i
 800588c:	623b      	str	r3, [r7, #32]
}
 800588e:	bf00      	nop
 8005890:	bf00      	nop
 8005892:	e7fd      	b.n	8005890 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d102      	bne.n	80058a0 <xQueueGenericCreateStatic+0x90>
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <xQueueGenericCreateStatic+0x94>
 80058a0:	2301      	movs	r3, #1
 80058a2:	e000      	b.n	80058a6 <xQueueGenericCreateStatic+0x96>
 80058a4:	2300      	movs	r3, #0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10d      	bne.n	80058c6 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80058aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ae:	b672      	cpsid	i
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	b662      	cpsie	i
 80058be:	61fb      	str	r3, [r7, #28]
}
 80058c0:	bf00      	nop
 80058c2:	bf00      	nop
 80058c4:	e7fd      	b.n	80058c2 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80058c6:	2350      	movs	r3, #80	@ 0x50
 80058c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	2b50      	cmp	r3, #80	@ 0x50
 80058ce:	d00d      	beq.n	80058ec <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80058d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d4:	b672      	cpsid	i
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	b662      	cpsie	i
 80058e4:	61bb      	str	r3, [r7, #24]
}
 80058e6:	bf00      	nop
 80058e8:	bf00      	nop
 80058ea:	e7fd      	b.n	80058e8 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80058ec:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80058f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00d      	beq.n	8005914 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80058f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005900:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005906:	9300      	str	r3, [sp, #0]
 8005908:	4613      	mov	r3, r2
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	68b9      	ldr	r1, [r7, #8]
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f000 f805 	bl	800591e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005916:	4618      	mov	r0, r3
 8005918:	3730      	adds	r7, #48	@ 0x30
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b084      	sub	sp, #16
 8005922:	af00      	add	r7, sp, #0
 8005924:	60f8      	str	r0, [r7, #12]
 8005926:	60b9      	str	r1, [r7, #8]
 8005928:	607a      	str	r2, [r7, #4]
 800592a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d103      	bne.n	800593a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	e002      	b.n	8005940 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800594c:	2101      	movs	r1, #1
 800594e:	69b8      	ldr	r0, [r7, #24]
 8005950:	f7ff fef2 	bl	8005738 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	78fa      	ldrb	r2, [r7, #3]
 8005958:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800595c:	bf00      	nop
 800595e:	3710      	adds	r7, #16
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b08e      	sub	sp, #56	@ 0x38
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
 8005970:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005972:	2300      	movs	r3, #0
 8005974:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800597a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10d      	bne.n	800599c <xQueueGenericSend+0x38>
	__asm volatile
 8005980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005984:	b672      	cpsid	i
 8005986:	f383 8811 	msr	BASEPRI, r3
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	b662      	cpsie	i
 8005994:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005996:	bf00      	nop
 8005998:	bf00      	nop
 800599a:	e7fd      	b.n	8005998 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d103      	bne.n	80059aa <xQueueGenericSend+0x46>
 80059a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <xQueueGenericSend+0x4a>
 80059aa:	2301      	movs	r3, #1
 80059ac:	e000      	b.n	80059b0 <xQueueGenericSend+0x4c>
 80059ae:	2300      	movs	r3, #0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10d      	bne.n	80059d0 <xQueueGenericSend+0x6c>
	__asm volatile
 80059b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059b8:	b672      	cpsid	i
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	b662      	cpsie	i
 80059c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80059ca:	bf00      	nop
 80059cc:	bf00      	nop
 80059ce:	e7fd      	b.n	80059cc <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d103      	bne.n	80059de <xQueueGenericSend+0x7a>
 80059d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d101      	bne.n	80059e2 <xQueueGenericSend+0x7e>
 80059de:	2301      	movs	r3, #1
 80059e0:	e000      	b.n	80059e4 <xQueueGenericSend+0x80>
 80059e2:	2300      	movs	r3, #0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10d      	bne.n	8005a04 <xQueueGenericSend+0xa0>
	__asm volatile
 80059e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ec:	b672      	cpsid	i
 80059ee:	f383 8811 	msr	BASEPRI, r3
 80059f2:	f3bf 8f6f 	isb	sy
 80059f6:	f3bf 8f4f 	dsb	sy
 80059fa:	b662      	cpsie	i
 80059fc:	623b      	str	r3, [r7, #32]
}
 80059fe:	bf00      	nop
 8005a00:	bf00      	nop
 8005a02:	e7fd      	b.n	8005a00 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a04:	f001 f9fc 	bl	8006e00 <xTaskGetSchedulerState>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d102      	bne.n	8005a14 <xQueueGenericSend+0xb0>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <xQueueGenericSend+0xb4>
 8005a14:	2301      	movs	r3, #1
 8005a16:	e000      	b.n	8005a1a <xQueueGenericSend+0xb6>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10d      	bne.n	8005a3a <xQueueGenericSend+0xd6>
	__asm volatile
 8005a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a22:	b672      	cpsid	i
 8005a24:	f383 8811 	msr	BASEPRI, r3
 8005a28:	f3bf 8f6f 	isb	sy
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	b662      	cpsie	i
 8005a32:	61fb      	str	r3, [r7, #28]
}
 8005a34:	bf00      	nop
 8005a36:	bf00      	nop
 8005a38:	e7fd      	b.n	8005a36 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a3a:	f001 ff3f 	bl	80078bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d302      	bcc.n	8005a50 <xQueueGenericSend+0xec>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d129      	bne.n	8005aa4 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a50:	683a      	ldr	r2, [r7, #0]
 8005a52:	68b9      	ldr	r1, [r7, #8]
 8005a54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a56:	f000 fa1b 	bl	8005e90 <prvCopyDataToQueue>
 8005a5a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d010      	beq.n	8005a86 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a66:	3324      	adds	r3, #36	@ 0x24
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f001 f801 	bl	8006a70 <xTaskRemoveFromEventList>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d013      	beq.n	8005a9c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005a74:	4b3f      	ldr	r3, [pc, #252]	@ (8005b74 <xQueueGenericSend+0x210>)
 8005a76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a7a:	601a      	str	r2, [r3, #0]
 8005a7c:	f3bf 8f4f 	dsb	sy
 8005a80:	f3bf 8f6f 	isb	sy
 8005a84:	e00a      	b.n	8005a9c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d007      	beq.n	8005a9c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a8c:	4b39      	ldr	r3, [pc, #228]	@ (8005b74 <xQueueGenericSend+0x210>)
 8005a8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a9c:	f001 ff44 	bl	8007928 <vPortExitCritical>
				return pdPASS;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e063      	b.n	8005b6c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d103      	bne.n	8005ab2 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005aaa:	f001 ff3d 	bl	8007928 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	e05c      	b.n	8005b6c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d106      	bne.n	8005ac6 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ab8:	f107 0314 	add.w	r3, r7, #20
 8005abc:	4618      	mov	r0, r3
 8005abe:	f001 f83d 	bl	8006b3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ac6:	f001 ff2f 	bl	8007928 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005aca:	f000 fda1 	bl	8006610 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ace:	f001 fef5 	bl	80078bc <vPortEnterCritical>
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ad8:	b25b      	sxtb	r3, r3
 8005ada:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ade:	d103      	bne.n	8005ae8 <xQueueGenericSend+0x184>
 8005ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005aee:	b25b      	sxtb	r3, r3
 8005af0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005af4:	d103      	bne.n	8005afe <xQueueGenericSend+0x19a>
 8005af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005afe:	f001 ff13 	bl	8007928 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b02:	1d3a      	adds	r2, r7, #4
 8005b04:	f107 0314 	add.w	r3, r7, #20
 8005b08:	4611      	mov	r1, r2
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f001 f82c 	bl	8006b68 <xTaskCheckForTimeOut>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d124      	bne.n	8005b60 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b16:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b18:	f000 fab2 	bl	8006080 <prvIsQueueFull>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d018      	beq.n	8005b54 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b24:	3310      	adds	r3, #16
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	4611      	mov	r1, r2
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 ff4a 	bl	80069c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005b30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b32:	f000 fa3d 	bl	8005fb0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b36:	f000 fd79 	bl	800662c <xTaskResumeAll>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f47f af7c 	bne.w	8005a3a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8005b42:	4b0c      	ldr	r3, [pc, #48]	@ (8005b74 <xQueueGenericSend+0x210>)
 8005b44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	f3bf 8f6f 	isb	sy
 8005b52:	e772      	b.n	8005a3a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b56:	f000 fa2b 	bl	8005fb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b5a:	f000 fd67 	bl	800662c <xTaskResumeAll>
 8005b5e:	e76c      	b.n	8005a3a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b62:	f000 fa25 	bl	8005fb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b66:	f000 fd61 	bl	800662c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3738      	adds	r7, #56	@ 0x38
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	e000ed04 	.word	0xe000ed04

08005b78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b08e      	sub	sp, #56	@ 0x38
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
 8005b84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10d      	bne.n	8005bac <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8005b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b94:	b672      	cpsid	i
 8005b96:	f383 8811 	msr	BASEPRI, r3
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	b662      	cpsie	i
 8005ba4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005ba6:	bf00      	nop
 8005ba8:	bf00      	nop
 8005baa:	e7fd      	b.n	8005ba8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d103      	bne.n	8005bba <xQueueGenericSendFromISR+0x42>
 8005bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <xQueueGenericSendFromISR+0x46>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e000      	b.n	8005bc0 <xQueueGenericSendFromISR+0x48>
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10d      	bne.n	8005be0 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8005bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc8:	b672      	cpsid	i
 8005bca:	f383 8811 	msr	BASEPRI, r3
 8005bce:	f3bf 8f6f 	isb	sy
 8005bd2:	f3bf 8f4f 	dsb	sy
 8005bd6:	b662      	cpsie	i
 8005bd8:	623b      	str	r3, [r7, #32]
}
 8005bda:	bf00      	nop
 8005bdc:	bf00      	nop
 8005bde:	e7fd      	b.n	8005bdc <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d103      	bne.n	8005bee <xQueueGenericSendFromISR+0x76>
 8005be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d101      	bne.n	8005bf2 <xQueueGenericSendFromISR+0x7a>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e000      	b.n	8005bf4 <xQueueGenericSendFromISR+0x7c>
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10d      	bne.n	8005c14 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8005bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bfc:	b672      	cpsid	i
 8005bfe:	f383 8811 	msr	BASEPRI, r3
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	f3bf 8f4f 	dsb	sy
 8005c0a:	b662      	cpsie	i
 8005c0c:	61fb      	str	r3, [r7, #28]
}
 8005c0e:	bf00      	nop
 8005c10:	bf00      	nop
 8005c12:	e7fd      	b.n	8005c10 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c14:	f001 ff3a 	bl	8007a8c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005c18:	f3ef 8211 	mrs	r2, BASEPRI
 8005c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c20:	b672      	cpsid	i
 8005c22:	f383 8811 	msr	BASEPRI, r3
 8005c26:	f3bf 8f6f 	isb	sy
 8005c2a:	f3bf 8f4f 	dsb	sy
 8005c2e:	b662      	cpsie	i
 8005c30:	61ba      	str	r2, [r7, #24]
 8005c32:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005c34:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d302      	bcc.n	8005c4a <xQueueGenericSendFromISR+0xd2>
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d12c      	bne.n	8005ca4 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c54:	683a      	ldr	r2, [r7, #0]
 8005c56:	68b9      	ldr	r1, [r7, #8]
 8005c58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c5a:	f000 f919 	bl	8005e90 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c5e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005c62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c66:	d112      	bne.n	8005c8e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d016      	beq.n	8005c9e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c72:	3324      	adds	r3, #36	@ 0x24
 8005c74:	4618      	mov	r0, r3
 8005c76:	f000 fefb 	bl	8006a70 <xTaskRemoveFromEventList>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00e      	beq.n	8005c9e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00b      	beq.n	8005c9e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]
 8005c8c:	e007      	b.n	8005c9e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c8e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005c92:	3301      	adds	r3, #1
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	b25a      	sxtb	r2, r3
 8005c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8005ca2:	e001      	b.n	8005ca8 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005caa:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005cb2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3738      	adds	r7, #56	@ 0x38
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
	...

08005cc0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b08c      	sub	sp, #48	@ 0x30
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10d      	bne.n	8005cf6 <xQueueReceive+0x36>
	__asm volatile
 8005cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cde:	b672      	cpsid	i
 8005ce0:	f383 8811 	msr	BASEPRI, r3
 8005ce4:	f3bf 8f6f 	isb	sy
 8005ce8:	f3bf 8f4f 	dsb	sy
 8005cec:	b662      	cpsie	i
 8005cee:	623b      	str	r3, [r7, #32]
}
 8005cf0:	bf00      	nop
 8005cf2:	bf00      	nop
 8005cf4:	e7fd      	b.n	8005cf2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d103      	bne.n	8005d04 <xQueueReceive+0x44>
 8005cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d101      	bne.n	8005d08 <xQueueReceive+0x48>
 8005d04:	2301      	movs	r3, #1
 8005d06:	e000      	b.n	8005d0a <xQueueReceive+0x4a>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10d      	bne.n	8005d2a <xQueueReceive+0x6a>
	__asm volatile
 8005d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d12:	b672      	cpsid	i
 8005d14:	f383 8811 	msr	BASEPRI, r3
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	b662      	cpsie	i
 8005d22:	61fb      	str	r3, [r7, #28]
}
 8005d24:	bf00      	nop
 8005d26:	bf00      	nop
 8005d28:	e7fd      	b.n	8005d26 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d2a:	f001 f869 	bl	8006e00 <xTaskGetSchedulerState>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d102      	bne.n	8005d3a <xQueueReceive+0x7a>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <xQueueReceive+0x7e>
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e000      	b.n	8005d40 <xQueueReceive+0x80>
 8005d3e:	2300      	movs	r3, #0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10d      	bne.n	8005d60 <xQueueReceive+0xa0>
	__asm volatile
 8005d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d48:	b672      	cpsid	i
 8005d4a:	f383 8811 	msr	BASEPRI, r3
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	b662      	cpsie	i
 8005d58:	61bb      	str	r3, [r7, #24]
}
 8005d5a:	bf00      	nop
 8005d5c:	bf00      	nop
 8005d5e:	e7fd      	b.n	8005d5c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d60:	f001 fdac 	bl	80078bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d68:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d01f      	beq.n	8005db0 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d70:	68b9      	ldr	r1, [r7, #8]
 8005d72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d74:	f000 f8f6 	bl	8005f64 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7a:	1e5a      	subs	r2, r3, #1
 8005d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d7e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00f      	beq.n	8005da8 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d8a:	3310      	adds	r3, #16
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f000 fe6f 	bl	8006a70 <xTaskRemoveFromEventList>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d007      	beq.n	8005da8 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d98:	4b3c      	ldr	r3, [pc, #240]	@ (8005e8c <xQueueReceive+0x1cc>)
 8005d9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005da8:	f001 fdbe 	bl	8007928 <vPortExitCritical>
				return pdPASS;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e069      	b.n	8005e84 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d103      	bne.n	8005dbe <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005db6:	f001 fdb7 	bl	8007928 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	e062      	b.n	8005e84 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d106      	bne.n	8005dd2 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005dc4:	f107 0310 	add.w	r3, r7, #16
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f000 feb7 	bl	8006b3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005dd2:	f001 fda9 	bl	8007928 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005dd6:	f000 fc1b 	bl	8006610 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005dda:	f001 fd6f 	bl	80078bc <vPortEnterCritical>
 8005dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005de4:	b25b      	sxtb	r3, r3
 8005de6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005dea:	d103      	bne.n	8005df4 <xQueueReceive+0x134>
 8005dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005dfa:	b25b      	sxtb	r3, r3
 8005dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e00:	d103      	bne.n	8005e0a <xQueueReceive+0x14a>
 8005e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e0a:	f001 fd8d 	bl	8007928 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e0e:	1d3a      	adds	r2, r7, #4
 8005e10:	f107 0310 	add.w	r3, r7, #16
 8005e14:	4611      	mov	r1, r2
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 fea6 	bl	8006b68 <xTaskCheckForTimeOut>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d123      	bne.n	8005e6a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e24:	f000 f916 	bl	8006054 <prvIsQueueEmpty>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d017      	beq.n	8005e5e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e30:	3324      	adds	r3, #36	@ 0x24
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	4611      	mov	r1, r2
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 fdc4 	bl	80069c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e3e:	f000 f8b7 	bl	8005fb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e42:	f000 fbf3 	bl	800662c <xTaskResumeAll>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d189      	bne.n	8005d60 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8005e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8005e8c <xQueueReceive+0x1cc>)
 8005e4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e52:	601a      	str	r2, [r3, #0]
 8005e54:	f3bf 8f4f 	dsb	sy
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	e780      	b.n	8005d60 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005e5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e60:	f000 f8a6 	bl	8005fb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e64:	f000 fbe2 	bl	800662c <xTaskResumeAll>
 8005e68:	e77a      	b.n	8005d60 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005e6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e6c:	f000 f8a0 	bl	8005fb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e70:	f000 fbdc 	bl	800662c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e76:	f000 f8ed 	bl	8006054 <prvIsQueueEmpty>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f43f af6f 	beq.w	8005d60 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e82:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3730      	adds	r7, #48	@ 0x30
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	e000ed04 	.word	0xe000ed04

08005e90 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ea4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10d      	bne.n	8005eca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d14d      	bne.n	8005f52 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 ffbe 	bl	8006e3c <xTaskPriorityDisinherit>
 8005ec0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	609a      	str	r2, [r3, #8]
 8005ec8:	e043      	b.n	8005f52 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d119      	bne.n	8005f04 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6858      	ldr	r0, [r3, #4]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed8:	461a      	mov	r2, r3
 8005eda:	68b9      	ldr	r1, [r7, #8]
 8005edc:	f002 f832 	bl	8007f44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee8:	441a      	add	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d32b      	bcc.n	8005f52 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	605a      	str	r2, [r3, #4]
 8005f02:	e026      	b.n	8005f52 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	68d8      	ldr	r0, [r3, #12]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	68b9      	ldr	r1, [r7, #8]
 8005f10:	f002 f818 	bl	8007f44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	68da      	ldr	r2, [r3, #12]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f1c:	425b      	negs	r3, r3
 8005f1e:	441a      	add	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	68da      	ldr	r2, [r3, #12]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d207      	bcs.n	8005f40 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	689a      	ldr	r2, [r3, #8]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f38:	425b      	negs	r3, r3
 8005f3a:	441a      	add	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d105      	bne.n	8005f52 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	1c5a      	adds	r2, r3, #1
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005f5a:	697b      	ldr	r3, [r7, #20]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3718      	adds	r7, #24
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d018      	beq.n	8005fa8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68da      	ldr	r2, [r3, #12]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f7e:	441a      	add	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	68da      	ldr	r2, [r3, #12]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d303      	bcc.n	8005f98 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	68d9      	ldr	r1, [r3, #12]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	6838      	ldr	r0, [r7, #0]
 8005fa4:	f001 ffce 	bl	8007f44 <memcpy>
	}
}
 8005fa8:	bf00      	nop
 8005faa:	3708      	adds	r7, #8
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005fb8:	f001 fc80 	bl	80078bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005fc2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fc4:	e011      	b.n	8005fea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d012      	beq.n	8005ff4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	3324      	adds	r3, #36	@ 0x24
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f000 fd4c 	bl	8006a70 <xTaskRemoveFromEventList>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005fde:	f000 fe2b 	bl	8006c38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005fe2:	7bfb      	ldrb	r3, [r7, #15]
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	dce9      	bgt.n	8005fc6 <prvUnlockQueue+0x16>
 8005ff2:	e000      	b.n	8005ff6 <prvUnlockQueue+0x46>
					break;
 8005ff4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	22ff      	movs	r2, #255	@ 0xff
 8005ffa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005ffe:	f001 fc93 	bl	8007928 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006002:	f001 fc5b 	bl	80078bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800600c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800600e:	e011      	b.n	8006034 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d012      	beq.n	800603e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	3310      	adds	r3, #16
 800601c:	4618      	mov	r0, r3
 800601e:	f000 fd27 	bl	8006a70 <xTaskRemoveFromEventList>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d001      	beq.n	800602c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006028:	f000 fe06 	bl	8006c38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800602c:	7bbb      	ldrb	r3, [r7, #14]
 800602e:	3b01      	subs	r3, #1
 8006030:	b2db      	uxtb	r3, r3
 8006032:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006034:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006038:	2b00      	cmp	r3, #0
 800603a:	dce9      	bgt.n	8006010 <prvUnlockQueue+0x60>
 800603c:	e000      	b.n	8006040 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800603e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	22ff      	movs	r2, #255	@ 0xff
 8006044:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006048:	f001 fc6e 	bl	8007928 <vPortExitCritical>
}
 800604c:	bf00      	nop
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800605c:	f001 fc2e 	bl	80078bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006064:	2b00      	cmp	r3, #0
 8006066:	d102      	bne.n	800606e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006068:	2301      	movs	r3, #1
 800606a:	60fb      	str	r3, [r7, #12]
 800606c:	e001      	b.n	8006072 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800606e:	2300      	movs	r3, #0
 8006070:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006072:	f001 fc59 	bl	8007928 <vPortExitCritical>

	return xReturn;
 8006076:	68fb      	ldr	r3, [r7, #12]
}
 8006078:	4618      	mov	r0, r3
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006088:	f001 fc18 	bl	80078bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006094:	429a      	cmp	r2, r3
 8006096:	d102      	bne.n	800609e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006098:	2301      	movs	r3, #1
 800609a:	60fb      	str	r3, [r7, #12]
 800609c:	e001      	b.n	80060a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800609e:	2300      	movs	r3, #0
 80060a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060a2:	f001 fc41 	bl	8007928 <vPortExitCritical>

	return xReturn;
 80060a6:	68fb      	ldr	r3, [r7, #12]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060ba:	2300      	movs	r3, #0
 80060bc:	60fb      	str	r3, [r7, #12]
 80060be:	e014      	b.n	80060ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80060c0:	4a0f      	ldr	r2, [pc, #60]	@ (8006100 <vQueueAddToRegistry+0x50>)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10b      	bne.n	80060e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80060cc:	490c      	ldr	r1, [pc, #48]	@ (8006100 <vQueueAddToRegistry+0x50>)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	683a      	ldr	r2, [r7, #0]
 80060d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80060d6:	4a0a      	ldr	r2, [pc, #40]	@ (8006100 <vQueueAddToRegistry+0x50>)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	00db      	lsls	r3, r3, #3
 80060dc:	4413      	add	r3, r2
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80060e2:	e006      	b.n	80060f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	3301      	adds	r3, #1
 80060e8:	60fb      	str	r3, [r7, #12]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2b07      	cmp	r3, #7
 80060ee:	d9e7      	bls.n	80060c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80060f0:	bf00      	nop
 80060f2:	bf00      	nop
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	20000a80 	.word	0x20000a80

08006104 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006114:	f001 fbd2 	bl	80078bc <vPortEnterCritical>
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800611e:	b25b      	sxtb	r3, r3
 8006120:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006124:	d103      	bne.n	800612e <vQueueWaitForMessageRestricted+0x2a>
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006134:	b25b      	sxtb	r3, r3
 8006136:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800613a:	d103      	bne.n	8006144 <vQueueWaitForMessageRestricted+0x40>
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006144:	f001 fbf0 	bl	8007928 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800614c:	2b00      	cmp	r3, #0
 800614e:	d106      	bne.n	800615e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	3324      	adds	r3, #36	@ 0x24
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	68b9      	ldr	r1, [r7, #8]
 8006158:	4618      	mov	r0, r3
 800615a:	f000 fc5b 	bl	8006a14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800615e:	6978      	ldr	r0, [r7, #20]
 8006160:	f7ff ff26 	bl	8005fb0 <prvUnlockQueue>
	}
 8006164:	bf00      	nop
 8006166:	3718      	adds	r7, #24
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800616c:	b580      	push	{r7, lr}
 800616e:	b08e      	sub	sp, #56	@ 0x38
 8006170:	af04      	add	r7, sp, #16
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
 8006178:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800617a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10d      	bne.n	800619c <xTaskCreateStatic+0x30>
	__asm volatile
 8006180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006184:	b672      	cpsid	i
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	b662      	cpsie	i
 8006194:	623b      	str	r3, [r7, #32]
}
 8006196:	bf00      	nop
 8006198:	bf00      	nop
 800619a:	e7fd      	b.n	8006198 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800619c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d10d      	bne.n	80061be <xTaskCreateStatic+0x52>
	__asm volatile
 80061a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a6:	b672      	cpsid	i
 80061a8:	f383 8811 	msr	BASEPRI, r3
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	b662      	cpsie	i
 80061b6:	61fb      	str	r3, [r7, #28]
}
 80061b8:	bf00      	nop
 80061ba:	bf00      	nop
 80061bc:	e7fd      	b.n	80061ba <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80061be:	235c      	movs	r3, #92	@ 0x5c
 80061c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	2b5c      	cmp	r3, #92	@ 0x5c
 80061c6:	d00d      	beq.n	80061e4 <xTaskCreateStatic+0x78>
	__asm volatile
 80061c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061cc:	b672      	cpsid	i
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	b662      	cpsie	i
 80061dc:	61bb      	str	r3, [r7, #24]
}
 80061de:	bf00      	nop
 80061e0:	bf00      	nop
 80061e2:	e7fd      	b.n	80061e0 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80061e4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80061e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d01e      	beq.n	800622a <xTaskCreateStatic+0xbe>
 80061ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d01b      	beq.n	800622a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80061f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80061fa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80061fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006204:	2300      	movs	r3, #0
 8006206:	9303      	str	r3, [sp, #12]
 8006208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620a:	9302      	str	r3, [sp, #8]
 800620c:	f107 0314 	add.w	r3, r7, #20
 8006210:	9301      	str	r3, [sp, #4]
 8006212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	68b9      	ldr	r1, [r7, #8]
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f000 f850 	bl	80062c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006222:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006224:	f000 f8e0 	bl	80063e8 <prvAddNewTaskToReadyList>
 8006228:	e001      	b.n	800622e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800622a:	2300      	movs	r3, #0
 800622c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800622e:	697b      	ldr	r3, [r7, #20]
	}
 8006230:	4618      	mov	r0, r3
 8006232:	3728      	adds	r7, #40	@ 0x28
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006238:	b580      	push	{r7, lr}
 800623a:	b08c      	sub	sp, #48	@ 0x30
 800623c:	af04      	add	r7, sp, #16
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	603b      	str	r3, [r7, #0]
 8006244:	4613      	mov	r3, r2
 8006246:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006248:	88fb      	ldrh	r3, [r7, #6]
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4618      	mov	r0, r3
 800624e:	f001 fc63 	bl	8007b18 <pvPortMalloc>
 8006252:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00e      	beq.n	8006278 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800625a:	205c      	movs	r0, #92	@ 0x5c
 800625c:	f001 fc5c 	bl	8007b18 <pvPortMalloc>
 8006260:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d003      	beq.n	8006270 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	631a      	str	r2, [r3, #48]	@ 0x30
 800626e:	e005      	b.n	800627c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006270:	6978      	ldr	r0, [r7, #20]
 8006272:	f001 fd1f 	bl	8007cb4 <vPortFree>
 8006276:	e001      	b.n	800627c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006278:	2300      	movs	r3, #0
 800627a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d017      	beq.n	80062b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800628a:	88fa      	ldrh	r2, [r7, #6]
 800628c:	2300      	movs	r3, #0
 800628e:	9303      	str	r3, [sp, #12]
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	9302      	str	r3, [sp, #8]
 8006294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006296:	9301      	str	r3, [sp, #4]
 8006298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800629a:	9300      	str	r3, [sp, #0]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	68b9      	ldr	r1, [r7, #8]
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f000 f80e 	bl	80062c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062a6:	69f8      	ldr	r0, [r7, #28]
 80062a8:	f000 f89e 	bl	80063e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80062ac:	2301      	movs	r3, #1
 80062ae:	61bb      	str	r3, [r7, #24]
 80062b0:	e002      	b.n	80062b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80062b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80062b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80062b8:	69bb      	ldr	r3, [r7, #24]
	}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3720      	adds	r7, #32
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b088      	sub	sp, #32
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	60f8      	str	r0, [r7, #12]
 80062ca:	60b9      	str	r1, [r7, #8]
 80062cc:	607a      	str	r2, [r7, #4]
 80062ce:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80062d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	461a      	mov	r2, r3
 80062da:	21a5      	movs	r1, #165	@ 0xa5
 80062dc:	f001 fe06 	bl	8007eec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80062e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062e4:	6879      	ldr	r1, [r7, #4]
 80062e6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80062ea:	440b      	add	r3, r1
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	4413      	add	r3, r2
 80062f0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	f023 0307 	bic.w	r3, r3, #7
 80062f8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	f003 0307 	and.w	r3, r3, #7
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00d      	beq.n	8006320 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8006304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006308:	b672      	cpsid	i
 800630a:	f383 8811 	msr	BASEPRI, r3
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f3bf 8f4f 	dsb	sy
 8006316:	b662      	cpsie	i
 8006318:	617b      	str	r3, [r7, #20]
}
 800631a:	bf00      	nop
 800631c:	bf00      	nop
 800631e:	e7fd      	b.n	800631c <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d01f      	beq.n	8006366 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006326:	2300      	movs	r3, #0
 8006328:	61fb      	str	r3, [r7, #28]
 800632a:	e012      	b.n	8006352 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	4413      	add	r3, r2
 8006332:	7819      	ldrb	r1, [r3, #0]
 8006334:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	4413      	add	r3, r2
 800633a:	3334      	adds	r3, #52	@ 0x34
 800633c:	460a      	mov	r2, r1
 800633e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	4413      	add	r3, r2
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d006      	beq.n	800635a <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	3301      	adds	r3, #1
 8006350:	61fb      	str	r3, [r7, #28]
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	2b0f      	cmp	r3, #15
 8006356:	d9e9      	bls.n	800632c <prvInitialiseNewTask+0x6a>
 8006358:	e000      	b.n	800635c <prvInitialiseNewTask+0x9a>
			{
				break;
 800635a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800635c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800635e:	2200      	movs	r2, #0
 8006360:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006364:	e003      	b.n	800636e <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800636e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006370:	2b37      	cmp	r3, #55	@ 0x37
 8006372:	d901      	bls.n	8006378 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006374:	2337      	movs	r3, #55	@ 0x37
 8006376:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800637c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800637e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006380:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006382:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006386:	2200      	movs	r2, #0
 8006388:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800638a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800638c:	3304      	adds	r3, #4
 800638e:	4618      	mov	r0, r3
 8006390:	f7ff f93e 	bl	8005610 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006396:	3318      	adds	r3, #24
 8006398:	4618      	mov	r0, r3
 800639a:	f7ff f939 	bl	8005610 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800639e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80063aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80063ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063b2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80063b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b6:	2200      	movs	r2, #0
 80063b8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80063ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	68f9      	ldr	r1, [r7, #12]
 80063c6:	69b8      	ldr	r0, [r7, #24]
 80063c8:	f001 f968 	bl	800769c <pxPortInitialiseStack>
 80063cc:	4602      	mov	r2, r0
 80063ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80063d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d002      	beq.n	80063de <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80063d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063de:	bf00      	nop
 80063e0:	3720      	adds	r7, #32
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
	...

080063e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80063f0:	f001 fa64 	bl	80078bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80063f4:	4b2d      	ldr	r3, [pc, #180]	@ (80064ac <prvAddNewTaskToReadyList+0xc4>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	3301      	adds	r3, #1
 80063fa:	4a2c      	ldr	r2, [pc, #176]	@ (80064ac <prvAddNewTaskToReadyList+0xc4>)
 80063fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80063fe:	4b2c      	ldr	r3, [pc, #176]	@ (80064b0 <prvAddNewTaskToReadyList+0xc8>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d109      	bne.n	800641a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006406:	4a2a      	ldr	r2, [pc, #168]	@ (80064b0 <prvAddNewTaskToReadyList+0xc8>)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800640c:	4b27      	ldr	r3, [pc, #156]	@ (80064ac <prvAddNewTaskToReadyList+0xc4>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d110      	bne.n	8006436 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006414:	f000 fc34 	bl	8006c80 <prvInitialiseTaskLists>
 8006418:	e00d      	b.n	8006436 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800641a:	4b26      	ldr	r3, [pc, #152]	@ (80064b4 <prvAddNewTaskToReadyList+0xcc>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d109      	bne.n	8006436 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006422:	4b23      	ldr	r3, [pc, #140]	@ (80064b0 <prvAddNewTaskToReadyList+0xc8>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800642c:	429a      	cmp	r2, r3
 800642e:	d802      	bhi.n	8006436 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006430:	4a1f      	ldr	r2, [pc, #124]	@ (80064b0 <prvAddNewTaskToReadyList+0xc8>)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006436:	4b20      	ldr	r3, [pc, #128]	@ (80064b8 <prvAddNewTaskToReadyList+0xd0>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	3301      	adds	r3, #1
 800643c:	4a1e      	ldr	r2, [pc, #120]	@ (80064b8 <prvAddNewTaskToReadyList+0xd0>)
 800643e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006440:	4b1d      	ldr	r3, [pc, #116]	@ (80064b8 <prvAddNewTaskToReadyList+0xd0>)
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800644c:	4b1b      	ldr	r3, [pc, #108]	@ (80064bc <prvAddNewTaskToReadyList+0xd4>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	429a      	cmp	r2, r3
 8006452:	d903      	bls.n	800645c <prvAddNewTaskToReadyList+0x74>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006458:	4a18      	ldr	r2, [pc, #96]	@ (80064bc <prvAddNewTaskToReadyList+0xd4>)
 800645a:	6013      	str	r3, [r2, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006460:	4613      	mov	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	4a15      	ldr	r2, [pc, #84]	@ (80064c0 <prvAddNewTaskToReadyList+0xd8>)
 800646a:	441a      	add	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	3304      	adds	r3, #4
 8006470:	4619      	mov	r1, r3
 8006472:	4610      	mov	r0, r2
 8006474:	f7ff f8d9 	bl	800562a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006478:	f001 fa56 	bl	8007928 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800647c:	4b0d      	ldr	r3, [pc, #52]	@ (80064b4 <prvAddNewTaskToReadyList+0xcc>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00e      	beq.n	80064a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006484:	4b0a      	ldr	r3, [pc, #40]	@ (80064b0 <prvAddNewTaskToReadyList+0xc8>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800648e:	429a      	cmp	r2, r3
 8006490:	d207      	bcs.n	80064a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006492:	4b0c      	ldr	r3, [pc, #48]	@ (80064c4 <prvAddNewTaskToReadyList+0xdc>)
 8006494:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006498:	601a      	str	r2, [r3, #0]
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064a2:	bf00      	nop
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20000f94 	.word	0x20000f94
 80064b0:	20000ac0 	.word	0x20000ac0
 80064b4:	20000fa0 	.word	0x20000fa0
 80064b8:	20000fb0 	.word	0x20000fb0
 80064bc:	20000f9c 	.word	0x20000f9c
 80064c0:	20000ac4 	.word	0x20000ac4
 80064c4:	e000ed04 	.word	0xe000ed04

080064c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80064d0:	2300      	movs	r3, #0
 80064d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d01a      	beq.n	8006510 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064da:	4b15      	ldr	r3, [pc, #84]	@ (8006530 <vTaskDelay+0x68>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00d      	beq.n	80064fe <vTaskDelay+0x36>
	__asm volatile
 80064e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e6:	b672      	cpsid	i
 80064e8:	f383 8811 	msr	BASEPRI, r3
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	b662      	cpsie	i
 80064f6:	60bb      	str	r3, [r7, #8]
}
 80064f8:	bf00      	nop
 80064fa:	bf00      	nop
 80064fc:	e7fd      	b.n	80064fa <vTaskDelay+0x32>
			vTaskSuspendAll();
 80064fe:	f000 f887 	bl	8006610 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006502:	2100      	movs	r1, #0
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 fd0d 	bl	8006f24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800650a:	f000 f88f 	bl	800662c <xTaskResumeAll>
 800650e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d107      	bne.n	8006526 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8006516:	4b07      	ldr	r3, [pc, #28]	@ (8006534 <vTaskDelay+0x6c>)
 8006518:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800651c:	601a      	str	r2, [r3, #0]
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006526:	bf00      	nop
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	20000fbc 	.word	0x20000fbc
 8006534:	e000ed04 	.word	0xe000ed04

08006538 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b08a      	sub	sp, #40	@ 0x28
 800653c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800653e:	2300      	movs	r3, #0
 8006540:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006542:	2300      	movs	r3, #0
 8006544:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006546:	463a      	mov	r2, r7
 8006548:	1d39      	adds	r1, r7, #4
 800654a:	f107 0308 	add.w	r3, r7, #8
 800654e:	4618      	mov	r0, r3
 8006550:	f7ff f80a 	bl	8005568 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006554:	6839      	ldr	r1, [r7, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	9202      	str	r2, [sp, #8]
 800655c:	9301      	str	r3, [sp, #4]
 800655e:	2300      	movs	r3, #0
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	2300      	movs	r3, #0
 8006564:	460a      	mov	r2, r1
 8006566:	4924      	ldr	r1, [pc, #144]	@ (80065f8 <vTaskStartScheduler+0xc0>)
 8006568:	4824      	ldr	r0, [pc, #144]	@ (80065fc <vTaskStartScheduler+0xc4>)
 800656a:	f7ff fdff 	bl	800616c <xTaskCreateStatic>
 800656e:	4603      	mov	r3, r0
 8006570:	4a23      	ldr	r2, [pc, #140]	@ (8006600 <vTaskStartScheduler+0xc8>)
 8006572:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006574:	4b22      	ldr	r3, [pc, #136]	@ (8006600 <vTaskStartScheduler+0xc8>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d002      	beq.n	8006582 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800657c:	2301      	movs	r3, #1
 800657e:	617b      	str	r3, [r7, #20]
 8006580:	e001      	b.n	8006586 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006582:	2300      	movs	r3, #0
 8006584:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d102      	bne.n	8006592 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800658c:	f000 fd1e 	bl	8006fcc <xTimerCreateTimerTask>
 8006590:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d118      	bne.n	80065ca <vTaskStartScheduler+0x92>
	__asm volatile
 8006598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800659c:	b672      	cpsid	i
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	b662      	cpsie	i
 80065ac:	613b      	str	r3, [r7, #16]
}
 80065ae:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80065b0:	4b14      	ldr	r3, [pc, #80]	@ (8006604 <vTaskStartScheduler+0xcc>)
 80065b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80065b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80065b8:	4b13      	ldr	r3, [pc, #76]	@ (8006608 <vTaskStartScheduler+0xd0>)
 80065ba:	2201      	movs	r2, #1
 80065bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80065be:	4b13      	ldr	r3, [pc, #76]	@ (800660c <vTaskStartScheduler+0xd4>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80065c4:	f001 f8fc 	bl	80077c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80065c8:	e011      	b.n	80065ee <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065d0:	d10d      	bne.n	80065ee <vTaskStartScheduler+0xb6>
	__asm volatile
 80065d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d6:	b672      	cpsid	i
 80065d8:	f383 8811 	msr	BASEPRI, r3
 80065dc:	f3bf 8f6f 	isb	sy
 80065e0:	f3bf 8f4f 	dsb	sy
 80065e4:	b662      	cpsie	i
 80065e6:	60fb      	str	r3, [r7, #12]
}
 80065e8:	bf00      	nop
 80065ea:	bf00      	nop
 80065ec:	e7fd      	b.n	80065ea <vTaskStartScheduler+0xb2>
}
 80065ee:	bf00      	nop
 80065f0:	3718      	adds	r7, #24
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	08007f98 	.word	0x08007f98
 80065fc:	08006c51 	.word	0x08006c51
 8006600:	20000fb8 	.word	0x20000fb8
 8006604:	20000fb4 	.word	0x20000fb4
 8006608:	20000fa0 	.word	0x20000fa0
 800660c:	20000f98 	.word	0x20000f98

08006610 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006610:	b480      	push	{r7}
 8006612:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006614:	4b04      	ldr	r3, [pc, #16]	@ (8006628 <vTaskSuspendAll+0x18>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	3301      	adds	r3, #1
 800661a:	4a03      	ldr	r2, [pc, #12]	@ (8006628 <vTaskSuspendAll+0x18>)
 800661c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800661e:	bf00      	nop
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr
 8006628:	20000fbc 	.word	0x20000fbc

0800662c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006632:	2300      	movs	r3, #0
 8006634:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006636:	2300      	movs	r3, #0
 8006638:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800663a:	4b43      	ldr	r3, [pc, #268]	@ (8006748 <xTaskResumeAll+0x11c>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10d      	bne.n	800665e <xTaskResumeAll+0x32>
	__asm volatile
 8006642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006646:	b672      	cpsid	i
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	b662      	cpsie	i
 8006656:	603b      	str	r3, [r7, #0]
}
 8006658:	bf00      	nop
 800665a:	bf00      	nop
 800665c:	e7fd      	b.n	800665a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800665e:	f001 f92d 	bl	80078bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006662:	4b39      	ldr	r3, [pc, #228]	@ (8006748 <xTaskResumeAll+0x11c>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	3b01      	subs	r3, #1
 8006668:	4a37      	ldr	r2, [pc, #220]	@ (8006748 <xTaskResumeAll+0x11c>)
 800666a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800666c:	4b36      	ldr	r3, [pc, #216]	@ (8006748 <xTaskResumeAll+0x11c>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d162      	bne.n	800673a <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006674:	4b35      	ldr	r3, [pc, #212]	@ (800674c <xTaskResumeAll+0x120>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d05e      	beq.n	800673a <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800667c:	e02f      	b.n	80066de <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800667e:	4b34      	ldr	r3, [pc, #208]	@ (8006750 <xTaskResumeAll+0x124>)
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	3318      	adds	r3, #24
 800668a:	4618      	mov	r0, r3
 800668c:	f7ff f82a 	bl	80056e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	3304      	adds	r3, #4
 8006694:	4618      	mov	r0, r3
 8006696:	f7ff f825 	bl	80056e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800669e:	4b2d      	ldr	r3, [pc, #180]	@ (8006754 <xTaskResumeAll+0x128>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d903      	bls.n	80066ae <xTaskResumeAll+0x82>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066aa:	4a2a      	ldr	r2, [pc, #168]	@ (8006754 <xTaskResumeAll+0x128>)
 80066ac:	6013      	str	r3, [r2, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066b2:	4613      	mov	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	4a27      	ldr	r2, [pc, #156]	@ (8006758 <xTaskResumeAll+0x12c>)
 80066bc:	441a      	add	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3304      	adds	r3, #4
 80066c2:	4619      	mov	r1, r3
 80066c4:	4610      	mov	r0, r2
 80066c6:	f7fe ffb0 	bl	800562a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066ce:	4b23      	ldr	r3, [pc, #140]	@ (800675c <xTaskResumeAll+0x130>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d302      	bcc.n	80066de <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 80066d8:	4b21      	ldr	r3, [pc, #132]	@ (8006760 <xTaskResumeAll+0x134>)
 80066da:	2201      	movs	r2, #1
 80066dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066de:	4b1c      	ldr	r3, [pc, #112]	@ (8006750 <xTaskResumeAll+0x124>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1cb      	bne.n	800667e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d001      	beq.n	80066f0 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80066ec:	f000 fb68 	bl	8006dc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80066f0:	4b1c      	ldr	r3, [pc, #112]	@ (8006764 <xTaskResumeAll+0x138>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d010      	beq.n	800671e <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066fc:	f000 f846 	bl	800678c <xTaskIncrementTick>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d002      	beq.n	800670c <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8006706:	4b16      	ldr	r3, [pc, #88]	@ (8006760 <xTaskResumeAll+0x134>)
 8006708:	2201      	movs	r2, #1
 800670a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	3b01      	subs	r3, #1
 8006710:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1f1      	bne.n	80066fc <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8006718:	4b12      	ldr	r3, [pc, #72]	@ (8006764 <xTaskResumeAll+0x138>)
 800671a:	2200      	movs	r2, #0
 800671c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800671e:	4b10      	ldr	r3, [pc, #64]	@ (8006760 <xTaskResumeAll+0x134>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d009      	beq.n	800673a <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006726:	2301      	movs	r3, #1
 8006728:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800672a:	4b0f      	ldr	r3, [pc, #60]	@ (8006768 <xTaskResumeAll+0x13c>)
 800672c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006730:	601a      	str	r2, [r3, #0]
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800673a:	f001 f8f5 	bl	8007928 <vPortExitCritical>

	return xAlreadyYielded;
 800673e:	68bb      	ldr	r3, [r7, #8]
}
 8006740:	4618      	mov	r0, r3
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	20000fbc 	.word	0x20000fbc
 800674c:	20000f94 	.word	0x20000f94
 8006750:	20000f54 	.word	0x20000f54
 8006754:	20000f9c 	.word	0x20000f9c
 8006758:	20000ac4 	.word	0x20000ac4
 800675c:	20000ac0 	.word	0x20000ac0
 8006760:	20000fa8 	.word	0x20000fa8
 8006764:	20000fa4 	.word	0x20000fa4
 8006768:	e000ed04 	.word	0xe000ed04

0800676c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006772:	4b05      	ldr	r3, [pc, #20]	@ (8006788 <xTaskGetTickCount+0x1c>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006778:	687b      	ldr	r3, [r7, #4]
}
 800677a:	4618      	mov	r0, r3
 800677c:	370c      	adds	r7, #12
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop
 8006788:	20000f98 	.word	0x20000f98

0800678c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006792:	2300      	movs	r3, #0
 8006794:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006796:	4b50      	ldr	r3, [pc, #320]	@ (80068d8 <xTaskIncrementTick+0x14c>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	f040 808c 	bne.w	80068b8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80067a0:	4b4e      	ldr	r3, [pc, #312]	@ (80068dc <xTaskIncrementTick+0x150>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	3301      	adds	r3, #1
 80067a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80067a8:	4a4c      	ldr	r2, [pc, #304]	@ (80068dc <xTaskIncrementTick+0x150>)
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d123      	bne.n	80067fc <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80067b4:	4b4a      	ldr	r3, [pc, #296]	@ (80068e0 <xTaskIncrementTick+0x154>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00d      	beq.n	80067da <xTaskIncrementTick+0x4e>
	__asm volatile
 80067be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c2:	b672      	cpsid	i
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	b662      	cpsie	i
 80067d2:	603b      	str	r3, [r7, #0]
}
 80067d4:	bf00      	nop
 80067d6:	bf00      	nop
 80067d8:	e7fd      	b.n	80067d6 <xTaskIncrementTick+0x4a>
 80067da:	4b41      	ldr	r3, [pc, #260]	@ (80068e0 <xTaskIncrementTick+0x154>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	60fb      	str	r3, [r7, #12]
 80067e0:	4b40      	ldr	r3, [pc, #256]	@ (80068e4 <xTaskIncrementTick+0x158>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a3e      	ldr	r2, [pc, #248]	@ (80068e0 <xTaskIncrementTick+0x154>)
 80067e6:	6013      	str	r3, [r2, #0]
 80067e8:	4a3e      	ldr	r2, [pc, #248]	@ (80068e4 <xTaskIncrementTick+0x158>)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6013      	str	r3, [r2, #0]
 80067ee:	4b3e      	ldr	r3, [pc, #248]	@ (80068e8 <xTaskIncrementTick+0x15c>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	3301      	adds	r3, #1
 80067f4:	4a3c      	ldr	r2, [pc, #240]	@ (80068e8 <xTaskIncrementTick+0x15c>)
 80067f6:	6013      	str	r3, [r2, #0]
 80067f8:	f000 fae2 	bl	8006dc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067fc:	4b3b      	ldr	r3, [pc, #236]	@ (80068ec <xTaskIncrementTick+0x160>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	429a      	cmp	r2, r3
 8006804:	d349      	bcc.n	800689a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006806:	4b36      	ldr	r3, [pc, #216]	@ (80068e0 <xTaskIncrementTick+0x154>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d104      	bne.n	800681a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006810:	4b36      	ldr	r3, [pc, #216]	@ (80068ec <xTaskIncrementTick+0x160>)
 8006812:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006816:	601a      	str	r2, [r3, #0]
					break;
 8006818:	e03f      	b.n	800689a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800681a:	4b31      	ldr	r3, [pc, #196]	@ (80068e0 <xTaskIncrementTick+0x154>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	429a      	cmp	r2, r3
 8006830:	d203      	bcs.n	800683a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006832:	4a2e      	ldr	r2, [pc, #184]	@ (80068ec <xTaskIncrementTick+0x160>)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006838:	e02f      	b.n	800689a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	3304      	adds	r3, #4
 800683e:	4618      	mov	r0, r3
 8006840:	f7fe ff50 	bl	80056e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006848:	2b00      	cmp	r3, #0
 800684a:	d004      	beq.n	8006856 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	3318      	adds	r3, #24
 8006850:	4618      	mov	r0, r3
 8006852:	f7fe ff47 	bl	80056e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800685a:	4b25      	ldr	r3, [pc, #148]	@ (80068f0 <xTaskIncrementTick+0x164>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	429a      	cmp	r2, r3
 8006860:	d903      	bls.n	800686a <xTaskIncrementTick+0xde>
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006866:	4a22      	ldr	r2, [pc, #136]	@ (80068f0 <xTaskIncrementTick+0x164>)
 8006868:	6013      	str	r3, [r2, #0]
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800686e:	4613      	mov	r3, r2
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4413      	add	r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	4a1f      	ldr	r2, [pc, #124]	@ (80068f4 <xTaskIncrementTick+0x168>)
 8006878:	441a      	add	r2, r3
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	3304      	adds	r3, #4
 800687e:	4619      	mov	r1, r3
 8006880:	4610      	mov	r0, r2
 8006882:	f7fe fed2 	bl	800562a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800688a:	4b1b      	ldr	r3, [pc, #108]	@ (80068f8 <xTaskIncrementTick+0x16c>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006890:	429a      	cmp	r2, r3
 8006892:	d3b8      	bcc.n	8006806 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8006894:	2301      	movs	r3, #1
 8006896:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006898:	e7b5      	b.n	8006806 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800689a:	4b17      	ldr	r3, [pc, #92]	@ (80068f8 <xTaskIncrementTick+0x16c>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068a0:	4914      	ldr	r1, [pc, #80]	@ (80068f4 <xTaskIncrementTick+0x168>)
 80068a2:	4613      	mov	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4413      	add	r3, r2
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	440b      	add	r3, r1
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d907      	bls.n	80068c2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80068b2:	2301      	movs	r3, #1
 80068b4:	617b      	str	r3, [r7, #20]
 80068b6:	e004      	b.n	80068c2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80068b8:	4b10      	ldr	r3, [pc, #64]	@ (80068fc <xTaskIncrementTick+0x170>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	3301      	adds	r3, #1
 80068be:	4a0f      	ldr	r2, [pc, #60]	@ (80068fc <xTaskIncrementTick+0x170>)
 80068c0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80068c2:	4b0f      	ldr	r3, [pc, #60]	@ (8006900 <xTaskIncrementTick+0x174>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d001      	beq.n	80068ce <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80068ca:	2301      	movs	r3, #1
 80068cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80068ce:	697b      	ldr	r3, [r7, #20]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3718      	adds	r7, #24
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	20000fbc 	.word	0x20000fbc
 80068dc:	20000f98 	.word	0x20000f98
 80068e0:	20000f4c 	.word	0x20000f4c
 80068e4:	20000f50 	.word	0x20000f50
 80068e8:	20000fac 	.word	0x20000fac
 80068ec:	20000fb4 	.word	0x20000fb4
 80068f0:	20000f9c 	.word	0x20000f9c
 80068f4:	20000ac4 	.word	0x20000ac4
 80068f8:	20000ac0 	.word	0x20000ac0
 80068fc:	20000fa4 	.word	0x20000fa4
 8006900:	20000fa8 	.word	0x20000fa8

08006904 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800690a:	4b29      	ldr	r3, [pc, #164]	@ (80069b0 <vTaskSwitchContext+0xac>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006912:	4b28      	ldr	r3, [pc, #160]	@ (80069b4 <vTaskSwitchContext+0xb0>)
 8006914:	2201      	movs	r2, #1
 8006916:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006918:	e044      	b.n	80069a4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800691a:	4b26      	ldr	r3, [pc, #152]	@ (80069b4 <vTaskSwitchContext+0xb0>)
 800691c:	2200      	movs	r2, #0
 800691e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006920:	4b25      	ldr	r3, [pc, #148]	@ (80069b8 <vTaskSwitchContext+0xb4>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	60fb      	str	r3, [r7, #12]
 8006926:	e013      	b.n	8006950 <vTaskSwitchContext+0x4c>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10d      	bne.n	800694a <vTaskSwitchContext+0x46>
	__asm volatile
 800692e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006932:	b672      	cpsid	i
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	b662      	cpsie	i
 8006942:	607b      	str	r3, [r7, #4]
}
 8006944:	bf00      	nop
 8006946:	bf00      	nop
 8006948:	e7fd      	b.n	8006946 <vTaskSwitchContext+0x42>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	3b01      	subs	r3, #1
 800694e:	60fb      	str	r3, [r7, #12]
 8006950:	491a      	ldr	r1, [pc, #104]	@ (80069bc <vTaskSwitchContext+0xb8>)
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	4613      	mov	r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	440b      	add	r3, r1
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d0e1      	beq.n	8006928 <vTaskSwitchContext+0x24>
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	4613      	mov	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	4a13      	ldr	r2, [pc, #76]	@ (80069bc <vTaskSwitchContext+0xb8>)
 8006970:	4413      	add	r3, r2
 8006972:	60bb      	str	r3, [r7, #8]
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	685a      	ldr	r2, [r3, #4]
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	605a      	str	r2, [r3, #4]
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	3308      	adds	r3, #8
 8006986:	429a      	cmp	r2, r3
 8006988:	d104      	bne.n	8006994 <vTaskSwitchContext+0x90>
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	685a      	ldr	r2, [r3, #4]
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	605a      	str	r2, [r3, #4]
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	4a09      	ldr	r2, [pc, #36]	@ (80069c0 <vTaskSwitchContext+0xbc>)
 800699c:	6013      	str	r3, [r2, #0]
 800699e:	4a06      	ldr	r2, [pc, #24]	@ (80069b8 <vTaskSwitchContext+0xb4>)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6013      	str	r3, [r2, #0]
}
 80069a4:	bf00      	nop
 80069a6:	3714      	adds	r7, #20
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr
 80069b0:	20000fbc 	.word	0x20000fbc
 80069b4:	20000fa8 	.word	0x20000fa8
 80069b8:	20000f9c 	.word	0x20000f9c
 80069bc:	20000ac4 	.word	0x20000ac4
 80069c0:	20000ac0 	.word	0x20000ac0

080069c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10d      	bne.n	80069f0 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80069d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d8:	b672      	cpsid	i
 80069da:	f383 8811 	msr	BASEPRI, r3
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	b662      	cpsie	i
 80069e8:	60fb      	str	r3, [r7, #12]
}
 80069ea:	bf00      	nop
 80069ec:	bf00      	nop
 80069ee:	e7fd      	b.n	80069ec <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069f0:	4b07      	ldr	r3, [pc, #28]	@ (8006a10 <vTaskPlaceOnEventList+0x4c>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	3318      	adds	r3, #24
 80069f6:	4619      	mov	r1, r3
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f7fe fe3a 	bl	8005672 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069fe:	2101      	movs	r1, #1
 8006a00:	6838      	ldr	r0, [r7, #0]
 8006a02:	f000 fa8f 	bl	8006f24 <prvAddCurrentTaskToDelayedList>
}
 8006a06:	bf00      	nop
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	20000ac0 	.word	0x20000ac0

08006a14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b086      	sub	sp, #24
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10d      	bne.n	8006a42 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8006a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a2a:	b672      	cpsid	i
 8006a2c:	f383 8811 	msr	BASEPRI, r3
 8006a30:	f3bf 8f6f 	isb	sy
 8006a34:	f3bf 8f4f 	dsb	sy
 8006a38:	b662      	cpsie	i
 8006a3a:	617b      	str	r3, [r7, #20]
}
 8006a3c:	bf00      	nop
 8006a3e:	bf00      	nop
 8006a40:	e7fd      	b.n	8006a3e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a42:	4b0a      	ldr	r3, [pc, #40]	@ (8006a6c <vTaskPlaceOnEventListRestricted+0x58>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	3318      	adds	r3, #24
 8006a48:	4619      	mov	r1, r3
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f7fe fded 	bl	800562a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d002      	beq.n	8006a5c <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8006a56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006a5a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a5c:	6879      	ldr	r1, [r7, #4]
 8006a5e:	68b8      	ldr	r0, [r7, #8]
 8006a60:	f000 fa60 	bl	8006f24 <prvAddCurrentTaskToDelayedList>
	}
 8006a64:	bf00      	nop
 8006a66:	3718      	adds	r7, #24
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	20000ac0 	.word	0x20000ac0

08006a70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10d      	bne.n	8006aa2 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8006a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a8a:	b672      	cpsid	i
 8006a8c:	f383 8811 	msr	BASEPRI, r3
 8006a90:	f3bf 8f6f 	isb	sy
 8006a94:	f3bf 8f4f 	dsb	sy
 8006a98:	b662      	cpsie	i
 8006a9a:	60fb      	str	r3, [r7, #12]
}
 8006a9c:	bf00      	nop
 8006a9e:	bf00      	nop
 8006aa0:	e7fd      	b.n	8006a9e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	3318      	adds	r3, #24
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fe fe1c 	bl	80056e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aac:	4b1d      	ldr	r3, [pc, #116]	@ (8006b24 <xTaskRemoveFromEventList+0xb4>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d11d      	bne.n	8006af0 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	3304      	adds	r3, #4
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7fe fe13 	bl	80056e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ac2:	4b19      	ldr	r3, [pc, #100]	@ (8006b28 <xTaskRemoveFromEventList+0xb8>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d903      	bls.n	8006ad2 <xTaskRemoveFromEventList+0x62>
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ace:	4a16      	ldr	r2, [pc, #88]	@ (8006b28 <xTaskRemoveFromEventList+0xb8>)
 8006ad0:	6013      	str	r3, [r2, #0]
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	4413      	add	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4a13      	ldr	r2, [pc, #76]	@ (8006b2c <xTaskRemoveFromEventList+0xbc>)
 8006ae0:	441a      	add	r2, r3
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	3304      	adds	r3, #4
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	4610      	mov	r0, r2
 8006aea:	f7fe fd9e 	bl	800562a <vListInsertEnd>
 8006aee:	e005      	b.n	8006afc <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	3318      	adds	r3, #24
 8006af4:	4619      	mov	r1, r3
 8006af6:	480e      	ldr	r0, [pc, #56]	@ (8006b30 <xTaskRemoveFromEventList+0xc0>)
 8006af8:	f7fe fd97 	bl	800562a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b00:	4b0c      	ldr	r3, [pc, #48]	@ (8006b34 <xTaskRemoveFromEventList+0xc4>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d905      	bls.n	8006b16 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8006b38 <xTaskRemoveFromEventList+0xc8>)
 8006b10:	2201      	movs	r2, #1
 8006b12:	601a      	str	r2, [r3, #0]
 8006b14:	e001      	b.n	8006b1a <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8006b16:	2300      	movs	r3, #0
 8006b18:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006b1a:	697b      	ldr	r3, [r7, #20]
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3718      	adds	r7, #24
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	20000fbc 	.word	0x20000fbc
 8006b28:	20000f9c 	.word	0x20000f9c
 8006b2c:	20000ac4 	.word	0x20000ac4
 8006b30:	20000f54 	.word	0x20000f54
 8006b34:	20000ac0 	.word	0x20000ac0
 8006b38:	20000fa8 	.word	0x20000fa8

08006b3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b44:	4b06      	ldr	r3, [pc, #24]	@ (8006b60 <vTaskInternalSetTimeOutState+0x24>)
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b4c:	4b05      	ldr	r3, [pc, #20]	@ (8006b64 <vTaskInternalSetTimeOutState+0x28>)
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	605a      	str	r2, [r3, #4]
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr
 8006b60:	20000fac 	.word	0x20000fac
 8006b64:	20000f98 	.word	0x20000f98

08006b68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b088      	sub	sp, #32
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10d      	bne.n	8006b94 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8006b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b7c:	b672      	cpsid	i
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	b662      	cpsie	i
 8006b8c:	613b      	str	r3, [r7, #16]
}
 8006b8e:	bf00      	nop
 8006b90:	bf00      	nop
 8006b92:	e7fd      	b.n	8006b90 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d10d      	bne.n	8006bb6 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8006b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b9e:	b672      	cpsid	i
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	b662      	cpsie	i
 8006bae:	60fb      	str	r3, [r7, #12]
}
 8006bb0:	bf00      	nop
 8006bb2:	bf00      	nop
 8006bb4:	e7fd      	b.n	8006bb2 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8006bb6:	f000 fe81 	bl	80078bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006bba:	4b1d      	ldr	r3, [pc, #116]	@ (8006c30 <xTaskCheckForTimeOut+0xc8>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	69ba      	ldr	r2, [r7, #24]
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006bd2:	d102      	bne.n	8006bda <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	61fb      	str	r3, [r7, #28]
 8006bd8:	e023      	b.n	8006c22 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	4b15      	ldr	r3, [pc, #84]	@ (8006c34 <xTaskCheckForTimeOut+0xcc>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d007      	beq.n	8006bf6 <xTaskCheckForTimeOut+0x8e>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	69ba      	ldr	r2, [r7, #24]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d302      	bcc.n	8006bf6 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	61fb      	str	r3, [r7, #28]
 8006bf4:	e015      	b.n	8006c22 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	697a      	ldr	r2, [r7, #20]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d20b      	bcs.n	8006c18 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	1ad2      	subs	r2, r2, r3
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f7ff ff95 	bl	8006b3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c12:	2300      	movs	r3, #0
 8006c14:	61fb      	str	r3, [r7, #28]
 8006c16:	e004      	b.n	8006c22 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006c22:	f000 fe81 	bl	8007928 <vPortExitCritical>

	return xReturn;
 8006c26:	69fb      	ldr	r3, [r7, #28]
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3720      	adds	r7, #32
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	20000f98 	.word	0x20000f98
 8006c34:	20000fac 	.word	0x20000fac

08006c38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c38:	b480      	push	{r7}
 8006c3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c3c:	4b03      	ldr	r3, [pc, #12]	@ (8006c4c <vTaskMissedYield+0x14>)
 8006c3e:	2201      	movs	r2, #1
 8006c40:	601a      	str	r2, [r3, #0]
}
 8006c42:	bf00      	nop
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr
 8006c4c:	20000fa8 	.word	0x20000fa8

08006c50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c58:	f000 f852 	bl	8006d00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c5c:	4b06      	ldr	r3, [pc, #24]	@ (8006c78 <prvIdleTask+0x28>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d9f9      	bls.n	8006c58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c64:	4b05      	ldr	r3, [pc, #20]	@ (8006c7c <prvIdleTask+0x2c>)
 8006c66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c6a:	601a      	str	r2, [r3, #0]
 8006c6c:	f3bf 8f4f 	dsb	sy
 8006c70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c74:	e7f0      	b.n	8006c58 <prvIdleTask+0x8>
 8006c76:	bf00      	nop
 8006c78:	20000ac4 	.word	0x20000ac4
 8006c7c:	e000ed04 	.word	0xe000ed04

08006c80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c86:	2300      	movs	r3, #0
 8006c88:	607b      	str	r3, [r7, #4]
 8006c8a:	e00c      	b.n	8006ca6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4413      	add	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4a12      	ldr	r2, [pc, #72]	@ (8006ce0 <prvInitialiseTaskLists+0x60>)
 8006c98:	4413      	add	r3, r2
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fe fc98 	bl	80055d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	607b      	str	r3, [r7, #4]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2b37      	cmp	r3, #55	@ 0x37
 8006caa:	d9ef      	bls.n	8006c8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006cac:	480d      	ldr	r0, [pc, #52]	@ (8006ce4 <prvInitialiseTaskLists+0x64>)
 8006cae:	f7fe fc8f 	bl	80055d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006cb2:	480d      	ldr	r0, [pc, #52]	@ (8006ce8 <prvInitialiseTaskLists+0x68>)
 8006cb4:	f7fe fc8c 	bl	80055d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006cb8:	480c      	ldr	r0, [pc, #48]	@ (8006cec <prvInitialiseTaskLists+0x6c>)
 8006cba:	f7fe fc89 	bl	80055d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006cbe:	480c      	ldr	r0, [pc, #48]	@ (8006cf0 <prvInitialiseTaskLists+0x70>)
 8006cc0:	f7fe fc86 	bl	80055d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006cc4:	480b      	ldr	r0, [pc, #44]	@ (8006cf4 <prvInitialiseTaskLists+0x74>)
 8006cc6:	f7fe fc83 	bl	80055d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006cca:	4b0b      	ldr	r3, [pc, #44]	@ (8006cf8 <prvInitialiseTaskLists+0x78>)
 8006ccc:	4a05      	ldr	r2, [pc, #20]	@ (8006ce4 <prvInitialiseTaskLists+0x64>)
 8006cce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8006cfc <prvInitialiseTaskLists+0x7c>)
 8006cd2:	4a05      	ldr	r2, [pc, #20]	@ (8006ce8 <prvInitialiseTaskLists+0x68>)
 8006cd4:	601a      	str	r2, [r3, #0]
}
 8006cd6:	bf00      	nop
 8006cd8:	3708      	adds	r7, #8
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	20000ac4 	.word	0x20000ac4
 8006ce4:	20000f24 	.word	0x20000f24
 8006ce8:	20000f38 	.word	0x20000f38
 8006cec:	20000f54 	.word	0x20000f54
 8006cf0:	20000f68 	.word	0x20000f68
 8006cf4:	20000f80 	.word	0x20000f80
 8006cf8:	20000f4c 	.word	0x20000f4c
 8006cfc:	20000f50 	.word	0x20000f50

08006d00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d06:	e019      	b.n	8006d3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d08:	f000 fdd8 	bl	80078bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d0c:	4b10      	ldr	r3, [pc, #64]	@ (8006d50 <prvCheckTasksWaitingTermination+0x50>)
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	3304      	adds	r3, #4
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7fe fce3 	bl	80056e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d54 <prvCheckTasksWaitingTermination+0x54>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	3b01      	subs	r3, #1
 8006d24:	4a0b      	ldr	r2, [pc, #44]	@ (8006d54 <prvCheckTasksWaitingTermination+0x54>)
 8006d26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d28:	4b0b      	ldr	r3, [pc, #44]	@ (8006d58 <prvCheckTasksWaitingTermination+0x58>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8006d58 <prvCheckTasksWaitingTermination+0x58>)
 8006d30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d32:	f000 fdf9 	bl	8007928 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f810 	bl	8006d5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d3c:	4b06      	ldr	r3, [pc, #24]	@ (8006d58 <prvCheckTasksWaitingTermination+0x58>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1e1      	bne.n	8006d08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d44:	bf00      	nop
 8006d46:	bf00      	nop
 8006d48:	3708      	adds	r7, #8
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	20000f68 	.word	0x20000f68
 8006d54:	20000f94 	.word	0x20000f94
 8006d58:	20000f7c 	.word	0x20000f7c

08006d5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d108      	bne.n	8006d80 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d72:	4618      	mov	r0, r3
 8006d74:	f000 ff9e 	bl	8007cb4 <vPortFree>
				vPortFree( pxTCB );
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 ff9b 	bl	8007cb4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d7e:	e01b      	b.n	8006db8 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d103      	bne.n	8006d92 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 ff92 	bl	8007cb4 <vPortFree>
	}
 8006d90:	e012      	b.n	8006db8 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d00d      	beq.n	8006db8 <prvDeleteTCB+0x5c>
	__asm volatile
 8006d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da0:	b672      	cpsid	i
 8006da2:	f383 8811 	msr	BASEPRI, r3
 8006da6:	f3bf 8f6f 	isb	sy
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	b662      	cpsie	i
 8006db0:	60fb      	str	r3, [r7, #12]
}
 8006db2:	bf00      	nop
 8006db4:	bf00      	nop
 8006db6:	e7fd      	b.n	8006db4 <prvDeleteTCB+0x58>
	}
 8006db8:	bf00      	nop
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8006df8 <prvResetNextTaskUnblockTime+0x38>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d104      	bne.n	8006dda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8006dfc <prvResetNextTaskUnblockTime+0x3c>)
 8006dd2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006dd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006dd8:	e008      	b.n	8006dec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dda:	4b07      	ldr	r3, [pc, #28]	@ (8006df8 <prvResetNextTaskUnblockTime+0x38>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	4a04      	ldr	r2, [pc, #16]	@ (8006dfc <prvResetNextTaskUnblockTime+0x3c>)
 8006dea:	6013      	str	r3, [r2, #0]
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr
 8006df8:	20000f4c 	.word	0x20000f4c
 8006dfc:	20000fb4 	.word	0x20000fb4

08006e00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006e06:	4b0b      	ldr	r3, [pc, #44]	@ (8006e34 <xTaskGetSchedulerState+0x34>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d102      	bne.n	8006e14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	607b      	str	r3, [r7, #4]
 8006e12:	e008      	b.n	8006e26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e14:	4b08      	ldr	r3, [pc, #32]	@ (8006e38 <xTaskGetSchedulerState+0x38>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d102      	bne.n	8006e22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	607b      	str	r3, [r7, #4]
 8006e20:	e001      	b.n	8006e26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e22:	2300      	movs	r3, #0
 8006e24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e26:	687b      	ldr	r3, [r7, #4]
	}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr
 8006e34:	20000fa0 	.word	0x20000fa0
 8006e38:	20000fbc 	.word	0x20000fbc

08006e3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b086      	sub	sp, #24
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d05c      	beq.n	8006f0c <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e52:	4b31      	ldr	r3, [pc, #196]	@ (8006f18 <xTaskPriorityDisinherit+0xdc>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d00d      	beq.n	8006e78 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8006e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e60:	b672      	cpsid	i
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	b662      	cpsie	i
 8006e70:	60fb      	str	r3, [r7, #12]
}
 8006e72:	bf00      	nop
 8006e74:	bf00      	nop
 8006e76:	e7fd      	b.n	8006e74 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10d      	bne.n	8006e9c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8006e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e84:	b672      	cpsid	i
 8006e86:	f383 8811 	msr	BASEPRI, r3
 8006e8a:	f3bf 8f6f 	isb	sy
 8006e8e:	f3bf 8f4f 	dsb	sy
 8006e92:	b662      	cpsie	i
 8006e94:	60bb      	str	r3, [r7, #8]
}
 8006e96:	bf00      	nop
 8006e98:	bf00      	nop
 8006e9a:	e7fd      	b.n	8006e98 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ea0:	1e5a      	subs	r2, r3, #1
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d02c      	beq.n	8006f0c <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d128      	bne.n	8006f0c <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	3304      	adds	r3, #4
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7fe fc10 	bl	80056e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006edc:	4b0f      	ldr	r3, [pc, #60]	@ (8006f1c <xTaskPriorityDisinherit+0xe0>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d903      	bls.n	8006eec <xTaskPriorityDisinherit+0xb0>
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee8:	4a0c      	ldr	r2, [pc, #48]	@ (8006f1c <xTaskPriorityDisinherit+0xe0>)
 8006eea:	6013      	str	r3, [r2, #0]
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	4413      	add	r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4a09      	ldr	r2, [pc, #36]	@ (8006f20 <xTaskPriorityDisinherit+0xe4>)
 8006efa:	441a      	add	r2, r3
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	3304      	adds	r3, #4
 8006f00:	4619      	mov	r1, r3
 8006f02:	4610      	mov	r0, r2
 8006f04:	f7fe fb91 	bl	800562a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f0c:	697b      	ldr	r3, [r7, #20]
	}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3718      	adds	r7, #24
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	20000ac0 	.word	0x20000ac0
 8006f1c:	20000f9c 	.word	0x20000f9c
 8006f20:	20000ac4 	.word	0x20000ac4

08006f24 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f2e:	4b21      	ldr	r3, [pc, #132]	@ (8006fb4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f34:	4b20      	ldr	r3, [pc, #128]	@ (8006fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	3304      	adds	r3, #4
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7fe fbd2 	bl	80056e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f46:	d10a      	bne.n	8006f5e <prvAddCurrentTaskToDelayedList+0x3a>
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d007      	beq.n	8006f5e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8006fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	3304      	adds	r3, #4
 8006f54:	4619      	mov	r1, r3
 8006f56:	4819      	ldr	r0, [pc, #100]	@ (8006fbc <prvAddCurrentTaskToDelayedList+0x98>)
 8006f58:	f7fe fb67 	bl	800562a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f5c:	e026      	b.n	8006fac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4413      	add	r3, r2
 8006f64:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f66:	4b14      	ldr	r3, [pc, #80]	@ (8006fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f6e:	68ba      	ldr	r2, [r7, #8]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d209      	bcs.n	8006f8a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f76:	4b12      	ldr	r3, [pc, #72]	@ (8006fc0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8006fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	3304      	adds	r3, #4
 8006f80:	4619      	mov	r1, r3
 8006f82:	4610      	mov	r0, r2
 8006f84:	f7fe fb75 	bl	8005672 <vListInsert>
}
 8006f88:	e010      	b.n	8006fac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8006fc4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8006fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	3304      	adds	r3, #4
 8006f94:	4619      	mov	r1, r3
 8006f96:	4610      	mov	r0, r2
 8006f98:	f7fe fb6b 	bl	8005672 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8006fc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68ba      	ldr	r2, [r7, #8]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d202      	bcs.n	8006fac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006fa6:	4a08      	ldr	r2, [pc, #32]	@ (8006fc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	6013      	str	r3, [r2, #0]
}
 8006fac:	bf00      	nop
 8006fae:	3710      	adds	r7, #16
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	20000f98 	.word	0x20000f98
 8006fb8:	20000ac0 	.word	0x20000ac0
 8006fbc:	20000f80 	.word	0x20000f80
 8006fc0:	20000f50 	.word	0x20000f50
 8006fc4:	20000f4c 	.word	0x20000f4c
 8006fc8:	20000fb4 	.word	0x20000fb4

08006fcc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b08a      	sub	sp, #40	@ 0x28
 8006fd0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006fd6:	f000 fb21 	bl	800761c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006fda:	4b1e      	ldr	r3, [pc, #120]	@ (8007054 <xTimerCreateTimerTask+0x88>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d021      	beq.n	8007026 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006fea:	1d3a      	adds	r2, r7, #4
 8006fec:	f107 0108 	add.w	r1, r7, #8
 8006ff0:	f107 030c 	add.w	r3, r7, #12
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7fe fad1 	bl	800559c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006ffa:	6879      	ldr	r1, [r7, #4]
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	9202      	str	r2, [sp, #8]
 8007002:	9301      	str	r3, [sp, #4]
 8007004:	2302      	movs	r3, #2
 8007006:	9300      	str	r3, [sp, #0]
 8007008:	2300      	movs	r3, #0
 800700a:	460a      	mov	r2, r1
 800700c:	4912      	ldr	r1, [pc, #72]	@ (8007058 <xTimerCreateTimerTask+0x8c>)
 800700e:	4813      	ldr	r0, [pc, #76]	@ (800705c <xTimerCreateTimerTask+0x90>)
 8007010:	f7ff f8ac 	bl	800616c <xTaskCreateStatic>
 8007014:	4603      	mov	r3, r0
 8007016:	4a12      	ldr	r2, [pc, #72]	@ (8007060 <xTimerCreateTimerTask+0x94>)
 8007018:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800701a:	4b11      	ldr	r3, [pc, #68]	@ (8007060 <xTimerCreateTimerTask+0x94>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d001      	beq.n	8007026 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007022:	2301      	movs	r3, #1
 8007024:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10d      	bne.n	8007048 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800702c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007030:	b672      	cpsid	i
 8007032:	f383 8811 	msr	BASEPRI, r3
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	b662      	cpsie	i
 8007040:	613b      	str	r3, [r7, #16]
}
 8007042:	bf00      	nop
 8007044:	bf00      	nop
 8007046:	e7fd      	b.n	8007044 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8007048:	697b      	ldr	r3, [r7, #20]
}
 800704a:	4618      	mov	r0, r3
 800704c:	3718      	adds	r7, #24
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	20000ff0 	.word	0x20000ff0
 8007058:	08007fa0 	.word	0x08007fa0
 800705c:	080071a5 	.word	0x080071a5
 8007060:	20000ff4 	.word	0x20000ff4

08007064 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b08a      	sub	sp, #40	@ 0x28
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
 8007070:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007072:	2300      	movs	r3, #0
 8007074:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10d      	bne.n	8007098 <xTimerGenericCommand+0x34>
	__asm volatile
 800707c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007080:	b672      	cpsid	i
 8007082:	f383 8811 	msr	BASEPRI, r3
 8007086:	f3bf 8f6f 	isb	sy
 800708a:	f3bf 8f4f 	dsb	sy
 800708e:	b662      	cpsie	i
 8007090:	623b      	str	r3, [r7, #32]
}
 8007092:	bf00      	nop
 8007094:	bf00      	nop
 8007096:	e7fd      	b.n	8007094 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007098:	4b19      	ldr	r3, [pc, #100]	@ (8007100 <xTimerGenericCommand+0x9c>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d02a      	beq.n	80070f6 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	2b05      	cmp	r3, #5
 80070b0:	dc18      	bgt.n	80070e4 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80070b2:	f7ff fea5 	bl	8006e00 <xTaskGetSchedulerState>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d109      	bne.n	80070d0 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80070bc:	4b10      	ldr	r3, [pc, #64]	@ (8007100 <xTimerGenericCommand+0x9c>)
 80070be:	6818      	ldr	r0, [r3, #0]
 80070c0:	f107 0110 	add.w	r1, r7, #16
 80070c4:	2300      	movs	r3, #0
 80070c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070c8:	f7fe fc4c 	bl	8005964 <xQueueGenericSend>
 80070cc:	6278      	str	r0, [r7, #36]	@ 0x24
 80070ce:	e012      	b.n	80070f6 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80070d0:	4b0b      	ldr	r3, [pc, #44]	@ (8007100 <xTimerGenericCommand+0x9c>)
 80070d2:	6818      	ldr	r0, [r3, #0]
 80070d4:	f107 0110 	add.w	r1, r7, #16
 80070d8:	2300      	movs	r3, #0
 80070da:	2200      	movs	r2, #0
 80070dc:	f7fe fc42 	bl	8005964 <xQueueGenericSend>
 80070e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80070e2:	e008      	b.n	80070f6 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80070e4:	4b06      	ldr	r3, [pc, #24]	@ (8007100 <xTimerGenericCommand+0x9c>)
 80070e6:	6818      	ldr	r0, [r3, #0]
 80070e8:	f107 0110 	add.w	r1, r7, #16
 80070ec:	2300      	movs	r3, #0
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	f7fe fd42 	bl	8005b78 <xQueueGenericSendFromISR>
 80070f4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80070f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3728      	adds	r7, #40	@ 0x28
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	20000ff0 	.word	0x20000ff0

08007104 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b088      	sub	sp, #32
 8007108:	af02      	add	r7, sp, #8
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800710e:	4b24      	ldr	r3, [pc, #144]	@ (80071a0 <prvProcessExpiredTimer+0x9c>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	3304      	adds	r3, #4
 800711c:	4618      	mov	r0, r3
 800711e:	f7fe fae1 	bl	80056e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007128:	f003 0304 	and.w	r3, r3, #4
 800712c:	2b00      	cmp	r3, #0
 800712e:	d025      	beq.n	800717c <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	699a      	ldr	r2, [r3, #24]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	18d1      	adds	r1, r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	683a      	ldr	r2, [r7, #0]
 800713c:	6978      	ldr	r0, [r7, #20]
 800713e:	f000 f8d7 	bl	80072f0 <prvInsertTimerInActiveList>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d022      	beq.n	800718e <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007148:	2300      	movs	r3, #0
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	2300      	movs	r3, #0
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	2100      	movs	r1, #0
 8007152:	6978      	ldr	r0, [r7, #20]
 8007154:	f7ff ff86 	bl	8007064 <xTimerGenericCommand>
 8007158:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d116      	bne.n	800718e <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8007160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007164:	b672      	cpsid	i
 8007166:	f383 8811 	msr	BASEPRI, r3
 800716a:	f3bf 8f6f 	isb	sy
 800716e:	f3bf 8f4f 	dsb	sy
 8007172:	b662      	cpsie	i
 8007174:	60fb      	str	r3, [r7, #12]
}
 8007176:	bf00      	nop
 8007178:	bf00      	nop
 800717a:	e7fd      	b.n	8007178 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007182:	f023 0301 	bic.w	r3, r3, #1
 8007186:	b2da      	uxtb	r2, r3
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	6978      	ldr	r0, [r7, #20]
 8007194:	4798      	blx	r3
}
 8007196:	bf00      	nop
 8007198:	3718      	adds	r7, #24
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	20000fe8 	.word	0x20000fe8

080071a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071ac:	f107 0308 	add.w	r3, r7, #8
 80071b0:	4618      	mov	r0, r3
 80071b2:	f000 f859 	bl	8007268 <prvGetNextExpireTime>
 80071b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	4619      	mov	r1, r3
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f000 f805 	bl	80071cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80071c2:	f000 f8d7 	bl	8007374 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071c6:	bf00      	nop
 80071c8:	e7f0      	b.n	80071ac <prvTimerTask+0x8>
	...

080071cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80071d6:	f7ff fa1b 	bl	8006610 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80071da:	f107 0308 	add.w	r3, r7, #8
 80071de:	4618      	mov	r0, r3
 80071e0:	f000 f866 	bl	80072b0 <prvSampleTimeNow>
 80071e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d130      	bne.n	800724e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10a      	bne.n	8007208 <prvProcessTimerOrBlockTask+0x3c>
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d806      	bhi.n	8007208 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80071fa:	f7ff fa17 	bl	800662c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80071fe:	68f9      	ldr	r1, [r7, #12]
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f7ff ff7f 	bl	8007104 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007206:	e024      	b.n	8007252 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d008      	beq.n	8007220 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800720e:	4b13      	ldr	r3, [pc, #76]	@ (800725c <prvProcessTimerOrBlockTask+0x90>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d101      	bne.n	800721c <prvProcessTimerOrBlockTask+0x50>
 8007218:	2301      	movs	r3, #1
 800721a:	e000      	b.n	800721e <prvProcessTimerOrBlockTask+0x52>
 800721c:	2300      	movs	r3, #0
 800721e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007220:	4b0f      	ldr	r3, [pc, #60]	@ (8007260 <prvProcessTimerOrBlockTask+0x94>)
 8007222:	6818      	ldr	r0, [r3, #0]
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	4619      	mov	r1, r3
 800722e:	f7fe ff69 	bl	8006104 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007232:	f7ff f9fb 	bl	800662c <xTaskResumeAll>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d10a      	bne.n	8007252 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800723c:	4b09      	ldr	r3, [pc, #36]	@ (8007264 <prvProcessTimerOrBlockTask+0x98>)
 800723e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007242:	601a      	str	r2, [r3, #0]
 8007244:	f3bf 8f4f 	dsb	sy
 8007248:	f3bf 8f6f 	isb	sy
}
 800724c:	e001      	b.n	8007252 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800724e:	f7ff f9ed 	bl	800662c <xTaskResumeAll>
}
 8007252:	bf00      	nop
 8007254:	3710      	adds	r7, #16
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	20000fec 	.word	0x20000fec
 8007260:	20000ff0 	.word	0x20000ff0
 8007264:	e000ed04 	.word	0xe000ed04

08007268 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007270:	4b0e      	ldr	r3, [pc, #56]	@ (80072ac <prvGetNextExpireTime+0x44>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d101      	bne.n	800727e <prvGetNextExpireTime+0x16>
 800727a:	2201      	movs	r2, #1
 800727c:	e000      	b.n	8007280 <prvGetNextExpireTime+0x18>
 800727e:	2200      	movs	r2, #0
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d105      	bne.n	8007298 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800728c:	4b07      	ldr	r3, [pc, #28]	@ (80072ac <prvGetNextExpireTime+0x44>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	60fb      	str	r3, [r7, #12]
 8007296:	e001      	b.n	800729c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007298:	2300      	movs	r3, #0
 800729a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800729c:	68fb      	ldr	r3, [r7, #12]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3714      	adds	r7, #20
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	20000fe8 	.word	0x20000fe8

080072b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80072b8:	f7ff fa58 	bl	800676c <xTaskGetTickCount>
 80072bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80072be:	4b0b      	ldr	r3, [pc, #44]	@ (80072ec <prvSampleTimeNow+0x3c>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d205      	bcs.n	80072d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80072c8:	f000 f940 	bl	800754c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	601a      	str	r2, [r3, #0]
 80072d2:	e002      	b.n	80072da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80072da:	4a04      	ldr	r2, [pc, #16]	@ (80072ec <prvSampleTimeNow+0x3c>)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80072e0:	68fb      	ldr	r3, [r7, #12]
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	20000ff8 	.word	0x20000ff8

080072f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
 80072fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80072fe:	2300      	movs	r3, #0
 8007300:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	68ba      	ldr	r2, [r7, #8]
 8007306:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800730e:	68ba      	ldr	r2, [r7, #8]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	429a      	cmp	r2, r3
 8007314:	d812      	bhi.n	800733c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	1ad2      	subs	r2, r2, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	429a      	cmp	r2, r3
 8007322:	d302      	bcc.n	800732a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007324:	2301      	movs	r3, #1
 8007326:	617b      	str	r3, [r7, #20]
 8007328:	e01b      	b.n	8007362 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800732a:	4b10      	ldr	r3, [pc, #64]	@ (800736c <prvInsertTimerInActiveList+0x7c>)
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	3304      	adds	r3, #4
 8007332:	4619      	mov	r1, r3
 8007334:	4610      	mov	r0, r2
 8007336:	f7fe f99c 	bl	8005672 <vListInsert>
 800733a:	e012      	b.n	8007362 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	429a      	cmp	r2, r3
 8007342:	d206      	bcs.n	8007352 <prvInsertTimerInActiveList+0x62>
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	429a      	cmp	r2, r3
 800734a:	d302      	bcc.n	8007352 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800734c:	2301      	movs	r3, #1
 800734e:	617b      	str	r3, [r7, #20]
 8007350:	e007      	b.n	8007362 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007352:	4b07      	ldr	r3, [pc, #28]	@ (8007370 <prvInsertTimerInActiveList+0x80>)
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	3304      	adds	r3, #4
 800735a:	4619      	mov	r1, r3
 800735c:	4610      	mov	r0, r2
 800735e:	f7fe f988 	bl	8005672 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007362:	697b      	ldr	r3, [r7, #20]
}
 8007364:	4618      	mov	r0, r3
 8007366:	3718      	adds	r7, #24
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	20000fec 	.word	0x20000fec
 8007370:	20000fe8 	.word	0x20000fe8

08007374 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b08e      	sub	sp, #56	@ 0x38
 8007378:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800737a:	e0d4      	b.n	8007526 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	da1b      	bge.n	80073ba <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007382:	1d3b      	adds	r3, r7, #4
 8007384:	3304      	adds	r3, #4
 8007386:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800738a:	2b00      	cmp	r3, #0
 800738c:	d10d      	bne.n	80073aa <prvProcessReceivedCommands+0x36>
	__asm volatile
 800738e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007392:	b672      	cpsid	i
 8007394:	f383 8811 	msr	BASEPRI, r3
 8007398:	f3bf 8f6f 	isb	sy
 800739c:	f3bf 8f4f 	dsb	sy
 80073a0:	b662      	cpsie	i
 80073a2:	61fb      	str	r3, [r7, #28]
}
 80073a4:	bf00      	nop
 80073a6:	bf00      	nop
 80073a8:	e7fd      	b.n	80073a6 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80073aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073b0:	6850      	ldr	r0, [r2, #4]
 80073b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073b4:	6892      	ldr	r2, [r2, #8]
 80073b6:	4611      	mov	r1, r2
 80073b8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f2c0 80b2 	blt.w	8007526 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80073c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073c8:	695b      	ldr	r3, [r3, #20]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d004      	beq.n	80073d8 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d0:	3304      	adds	r3, #4
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7fe f986 	bl	80056e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80073d8:	463b      	mov	r3, r7
 80073da:	4618      	mov	r0, r3
 80073dc:	f7ff ff68 	bl	80072b0 <prvSampleTimeNow>
 80073e0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2b09      	cmp	r3, #9
 80073e6:	f200 809b 	bhi.w	8007520 <prvProcessReceivedCommands+0x1ac>
 80073ea:	a201      	add	r2, pc, #4	@ (adr r2, 80073f0 <prvProcessReceivedCommands+0x7c>)
 80073ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f0:	08007419 	.word	0x08007419
 80073f4:	08007419 	.word	0x08007419
 80073f8:	08007419 	.word	0x08007419
 80073fc:	08007493 	.word	0x08007493
 8007400:	080074a7 	.word	0x080074a7
 8007404:	080074f7 	.word	0x080074f7
 8007408:	08007419 	.word	0x08007419
 800740c:	08007419 	.word	0x08007419
 8007410:	08007493 	.word	0x08007493
 8007414:	080074a7 	.word	0x080074a7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800741a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800741e:	f043 0301 	orr.w	r3, r3, #1
 8007422:	b2da      	uxtb	r2, r3
 8007424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007426:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800742a:	68ba      	ldr	r2, [r7, #8]
 800742c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	18d1      	adds	r1, r2, r3
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007436:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007438:	f7ff ff5a 	bl	80072f0 <prvInsertTimerInActiveList>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	d070      	beq.n	8007524 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007444:	6a1b      	ldr	r3, [r3, #32]
 8007446:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007448:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800744a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800744c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007450:	f003 0304 	and.w	r3, r3, #4
 8007454:	2b00      	cmp	r3, #0
 8007456:	d065      	beq.n	8007524 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	441a      	add	r2, r3
 8007460:	2300      	movs	r3, #0
 8007462:	9300      	str	r3, [sp, #0]
 8007464:	2300      	movs	r3, #0
 8007466:	2100      	movs	r1, #0
 8007468:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800746a:	f7ff fdfb 	bl	8007064 <xTimerGenericCommand>
 800746e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007470:	6a3b      	ldr	r3, [r7, #32]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d156      	bne.n	8007524 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8007476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800747a:	b672      	cpsid	i
 800747c:	f383 8811 	msr	BASEPRI, r3
 8007480:	f3bf 8f6f 	isb	sy
 8007484:	f3bf 8f4f 	dsb	sy
 8007488:	b662      	cpsie	i
 800748a:	61bb      	str	r3, [r7, #24]
}
 800748c:	bf00      	nop
 800748e:	bf00      	nop
 8007490:	e7fd      	b.n	800748e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007494:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007498:	f023 0301 	bic.w	r3, r3, #1
 800749c:	b2da      	uxtb	r2, r3
 800749e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80074a4:	e03f      	b.n	8007526 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074ac:	f043 0301 	orr.w	r3, r3, #1
 80074b0:	b2da      	uxtb	r2, r3
 80074b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80074b8:	68ba      	ldr	r2, [r7, #8]
 80074ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074bc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80074be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d10d      	bne.n	80074e2 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80074c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ca:	b672      	cpsid	i
 80074cc:	f383 8811 	msr	BASEPRI, r3
 80074d0:	f3bf 8f6f 	isb	sy
 80074d4:	f3bf 8f4f 	dsb	sy
 80074d8:	b662      	cpsie	i
 80074da:	617b      	str	r3, [r7, #20]
}
 80074dc:	bf00      	nop
 80074de:	bf00      	nop
 80074e0:	e7fd      	b.n	80074de <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80074e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e4:	699a      	ldr	r2, [r3, #24]
 80074e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e8:	18d1      	adds	r1, r2, r3
 80074ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074f0:	f7ff fefe 	bl	80072f0 <prvInsertTimerInActiveList>
					break;
 80074f4:	e017      	b.n	8007526 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80074f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074fc:	f003 0302 	and.w	r3, r3, #2
 8007500:	2b00      	cmp	r3, #0
 8007502:	d103      	bne.n	800750c <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8007504:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007506:	f000 fbd5 	bl	8007cb4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800750a:	e00c      	b.n	8007526 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800750c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800750e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007512:	f023 0301 	bic.w	r3, r3, #1
 8007516:	b2da      	uxtb	r2, r3
 8007518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800751a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800751e:	e002      	b.n	8007526 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8007520:	bf00      	nop
 8007522:	e000      	b.n	8007526 <prvProcessReceivedCommands+0x1b2>
					break;
 8007524:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007526:	4b08      	ldr	r3, [pc, #32]	@ (8007548 <prvProcessReceivedCommands+0x1d4>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	1d39      	adds	r1, r7, #4
 800752c:	2200      	movs	r2, #0
 800752e:	4618      	mov	r0, r3
 8007530:	f7fe fbc6 	bl	8005cc0 <xQueueReceive>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	f47f af20 	bne.w	800737c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800753c:	bf00      	nop
 800753e:	bf00      	nop
 8007540:	3730      	adds	r7, #48	@ 0x30
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	20000ff0 	.word	0x20000ff0

0800754c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b088      	sub	sp, #32
 8007550:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007552:	e04b      	b.n	80075ec <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007554:	4b2f      	ldr	r3, [pc, #188]	@ (8007614 <prvSwitchTimerLists+0xc8>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800755e:	4b2d      	ldr	r3, [pc, #180]	@ (8007614 <prvSwitchTimerLists+0xc8>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	3304      	adds	r3, #4
 800756c:	4618      	mov	r0, r3
 800756e:	f7fe f8b9 	bl	80056e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007580:	f003 0304 	and.w	r3, r3, #4
 8007584:	2b00      	cmp	r3, #0
 8007586:	d031      	beq.n	80075ec <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	699b      	ldr	r3, [r3, #24]
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	4413      	add	r3, r2
 8007590:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007592:	68ba      	ldr	r2, [r7, #8]
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	429a      	cmp	r2, r3
 8007598:	d90e      	bls.n	80075b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80075a6:	4b1b      	ldr	r3, [pc, #108]	@ (8007614 <prvSwitchTimerLists+0xc8>)
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	3304      	adds	r3, #4
 80075ae:	4619      	mov	r1, r3
 80075b0:	4610      	mov	r0, r2
 80075b2:	f7fe f85e 	bl	8005672 <vListInsert>
 80075b6:	e019      	b.n	80075ec <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075b8:	2300      	movs	r3, #0
 80075ba:	9300      	str	r3, [sp, #0]
 80075bc:	2300      	movs	r3, #0
 80075be:	693a      	ldr	r2, [r7, #16]
 80075c0:	2100      	movs	r1, #0
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f7ff fd4e 	bl	8007064 <xTimerGenericCommand>
 80075c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d10d      	bne.n	80075ec <prvSwitchTimerLists+0xa0>
	__asm volatile
 80075d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d4:	b672      	cpsid	i
 80075d6:	f383 8811 	msr	BASEPRI, r3
 80075da:	f3bf 8f6f 	isb	sy
 80075de:	f3bf 8f4f 	dsb	sy
 80075e2:	b662      	cpsie	i
 80075e4:	603b      	str	r3, [r7, #0]
}
 80075e6:	bf00      	nop
 80075e8:	bf00      	nop
 80075ea:	e7fd      	b.n	80075e8 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075ec:	4b09      	ldr	r3, [pc, #36]	@ (8007614 <prvSwitchTimerLists+0xc8>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d1ae      	bne.n	8007554 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80075f6:	4b07      	ldr	r3, [pc, #28]	@ (8007614 <prvSwitchTimerLists+0xc8>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80075fc:	4b06      	ldr	r3, [pc, #24]	@ (8007618 <prvSwitchTimerLists+0xcc>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a04      	ldr	r2, [pc, #16]	@ (8007614 <prvSwitchTimerLists+0xc8>)
 8007602:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007604:	4a04      	ldr	r2, [pc, #16]	@ (8007618 <prvSwitchTimerLists+0xcc>)
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	6013      	str	r3, [r2, #0]
}
 800760a:	bf00      	nop
 800760c:	3718      	adds	r7, #24
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	20000fe8 	.word	0x20000fe8
 8007618:	20000fec 	.word	0x20000fec

0800761c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007622:	f000 f94b 	bl	80078bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007626:	4b15      	ldr	r3, [pc, #84]	@ (800767c <prvCheckForValidListAndQueue+0x60>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d120      	bne.n	8007670 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800762e:	4814      	ldr	r0, [pc, #80]	@ (8007680 <prvCheckForValidListAndQueue+0x64>)
 8007630:	f7fd ffce 	bl	80055d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007634:	4813      	ldr	r0, [pc, #76]	@ (8007684 <prvCheckForValidListAndQueue+0x68>)
 8007636:	f7fd ffcb 	bl	80055d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800763a:	4b13      	ldr	r3, [pc, #76]	@ (8007688 <prvCheckForValidListAndQueue+0x6c>)
 800763c:	4a10      	ldr	r2, [pc, #64]	@ (8007680 <prvCheckForValidListAndQueue+0x64>)
 800763e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007640:	4b12      	ldr	r3, [pc, #72]	@ (800768c <prvCheckForValidListAndQueue+0x70>)
 8007642:	4a10      	ldr	r2, [pc, #64]	@ (8007684 <prvCheckForValidListAndQueue+0x68>)
 8007644:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007646:	2300      	movs	r3, #0
 8007648:	9300      	str	r3, [sp, #0]
 800764a:	4b11      	ldr	r3, [pc, #68]	@ (8007690 <prvCheckForValidListAndQueue+0x74>)
 800764c:	4a11      	ldr	r2, [pc, #68]	@ (8007694 <prvCheckForValidListAndQueue+0x78>)
 800764e:	2110      	movs	r1, #16
 8007650:	200a      	movs	r0, #10
 8007652:	f7fe f8dd 	bl	8005810 <xQueueGenericCreateStatic>
 8007656:	4603      	mov	r3, r0
 8007658:	4a08      	ldr	r2, [pc, #32]	@ (800767c <prvCheckForValidListAndQueue+0x60>)
 800765a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800765c:	4b07      	ldr	r3, [pc, #28]	@ (800767c <prvCheckForValidListAndQueue+0x60>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d005      	beq.n	8007670 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007664:	4b05      	ldr	r3, [pc, #20]	@ (800767c <prvCheckForValidListAndQueue+0x60>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	490b      	ldr	r1, [pc, #44]	@ (8007698 <prvCheckForValidListAndQueue+0x7c>)
 800766a:	4618      	mov	r0, r3
 800766c:	f7fe fd20 	bl	80060b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007670:	f000 f95a 	bl	8007928 <vPortExitCritical>
}
 8007674:	bf00      	nop
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	20000ff0 	.word	0x20000ff0
 8007680:	20000fc0 	.word	0x20000fc0
 8007684:	20000fd4 	.word	0x20000fd4
 8007688:	20000fe8 	.word	0x20000fe8
 800768c:	20000fec 	.word	0x20000fec
 8007690:	2000109c 	.word	0x2000109c
 8007694:	20000ffc 	.word	0x20000ffc
 8007698:	08007fa8 	.word	0x08007fa8

0800769c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	3b04      	subs	r3, #4
 80076ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80076b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	3b04      	subs	r3, #4
 80076ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	f023 0201 	bic.w	r2, r3, #1
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	3b04      	subs	r3, #4
 80076ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80076cc:	4a0c      	ldr	r2, [pc, #48]	@ (8007700 <pxPortInitialiseStack+0x64>)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	3b14      	subs	r3, #20
 80076d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	3b04      	subs	r3, #4
 80076e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f06f 0202 	mvn.w	r2, #2
 80076ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	3b20      	subs	r3, #32
 80076f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80076f2:	68fb      	ldr	r3, [r7, #12]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3714      	adds	r7, #20
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr
 8007700:	08007705 	.word	0x08007705

08007704 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800770a:	2300      	movs	r3, #0
 800770c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800770e:	4b15      	ldr	r3, [pc, #84]	@ (8007764 <prvTaskExitError+0x60>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007716:	d00d      	beq.n	8007734 <prvTaskExitError+0x30>
	__asm volatile
 8007718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800771c:	b672      	cpsid	i
 800771e:	f383 8811 	msr	BASEPRI, r3
 8007722:	f3bf 8f6f 	isb	sy
 8007726:	f3bf 8f4f 	dsb	sy
 800772a:	b662      	cpsie	i
 800772c:	60fb      	str	r3, [r7, #12]
}
 800772e:	bf00      	nop
 8007730:	bf00      	nop
 8007732:	e7fd      	b.n	8007730 <prvTaskExitError+0x2c>
	__asm volatile
 8007734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007738:	b672      	cpsid	i
 800773a:	f383 8811 	msr	BASEPRI, r3
 800773e:	f3bf 8f6f 	isb	sy
 8007742:	f3bf 8f4f 	dsb	sy
 8007746:	b662      	cpsie	i
 8007748:	60bb      	str	r3, [r7, #8]
}
 800774a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800774c:	bf00      	nop
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d0fc      	beq.n	800774e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007754:	bf00      	nop
 8007756:	bf00      	nop
 8007758:	3714      	adds	r7, #20
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	2000000c 	.word	0x2000000c
	...

08007770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007770:	4b07      	ldr	r3, [pc, #28]	@ (8007790 <pxCurrentTCBConst2>)
 8007772:	6819      	ldr	r1, [r3, #0]
 8007774:	6808      	ldr	r0, [r1, #0]
 8007776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800777a:	f380 8809 	msr	PSP, r0
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	f04f 0000 	mov.w	r0, #0
 8007786:	f380 8811 	msr	BASEPRI, r0
 800778a:	4770      	bx	lr
 800778c:	f3af 8000 	nop.w

08007790 <pxCurrentTCBConst2>:
 8007790:	20000ac0 	.word	0x20000ac0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007794:	bf00      	nop
 8007796:	bf00      	nop

08007798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007798:	4808      	ldr	r0, [pc, #32]	@ (80077bc <prvPortStartFirstTask+0x24>)
 800779a:	6800      	ldr	r0, [r0, #0]
 800779c:	6800      	ldr	r0, [r0, #0]
 800779e:	f380 8808 	msr	MSP, r0
 80077a2:	f04f 0000 	mov.w	r0, #0
 80077a6:	f380 8814 	msr	CONTROL, r0
 80077aa:	b662      	cpsie	i
 80077ac:	b661      	cpsie	f
 80077ae:	f3bf 8f4f 	dsb	sy
 80077b2:	f3bf 8f6f 	isb	sy
 80077b6:	df00      	svc	0
 80077b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80077ba:	bf00      	nop
 80077bc:	e000ed08 	.word	0xe000ed08

080077c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80077c6:	4b37      	ldr	r3, [pc, #220]	@ (80078a4 <xPortStartScheduler+0xe4>)
 80077c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	22ff      	movs	r2, #255	@ 0xff
 80077d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80077e0:	78fb      	ldrb	r3, [r7, #3]
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80077e8:	b2da      	uxtb	r2, r3
 80077ea:	4b2f      	ldr	r3, [pc, #188]	@ (80078a8 <xPortStartScheduler+0xe8>)
 80077ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80077ee:	4b2f      	ldr	r3, [pc, #188]	@ (80078ac <xPortStartScheduler+0xec>)
 80077f0:	2207      	movs	r2, #7
 80077f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077f4:	e009      	b.n	800780a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80077f6:	4b2d      	ldr	r3, [pc, #180]	@ (80078ac <xPortStartScheduler+0xec>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	3b01      	subs	r3, #1
 80077fc:	4a2b      	ldr	r2, [pc, #172]	@ (80078ac <xPortStartScheduler+0xec>)
 80077fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007800:	78fb      	ldrb	r3, [r7, #3]
 8007802:	b2db      	uxtb	r3, r3
 8007804:	005b      	lsls	r3, r3, #1
 8007806:	b2db      	uxtb	r3, r3
 8007808:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800780a:	78fb      	ldrb	r3, [r7, #3]
 800780c:	b2db      	uxtb	r3, r3
 800780e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007812:	2b80      	cmp	r3, #128	@ 0x80
 8007814:	d0ef      	beq.n	80077f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007816:	4b25      	ldr	r3, [pc, #148]	@ (80078ac <xPortStartScheduler+0xec>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f1c3 0307 	rsb	r3, r3, #7
 800781e:	2b04      	cmp	r3, #4
 8007820:	d00d      	beq.n	800783e <xPortStartScheduler+0x7e>
	__asm volatile
 8007822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007826:	b672      	cpsid	i
 8007828:	f383 8811 	msr	BASEPRI, r3
 800782c:	f3bf 8f6f 	isb	sy
 8007830:	f3bf 8f4f 	dsb	sy
 8007834:	b662      	cpsie	i
 8007836:	60bb      	str	r3, [r7, #8]
}
 8007838:	bf00      	nop
 800783a:	bf00      	nop
 800783c:	e7fd      	b.n	800783a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800783e:	4b1b      	ldr	r3, [pc, #108]	@ (80078ac <xPortStartScheduler+0xec>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	021b      	lsls	r3, r3, #8
 8007844:	4a19      	ldr	r2, [pc, #100]	@ (80078ac <xPortStartScheduler+0xec>)
 8007846:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007848:	4b18      	ldr	r3, [pc, #96]	@ (80078ac <xPortStartScheduler+0xec>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007850:	4a16      	ldr	r2, [pc, #88]	@ (80078ac <xPortStartScheduler+0xec>)
 8007852:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	b2da      	uxtb	r2, r3
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800785c:	4b14      	ldr	r3, [pc, #80]	@ (80078b0 <xPortStartScheduler+0xf0>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a13      	ldr	r2, [pc, #76]	@ (80078b0 <xPortStartScheduler+0xf0>)
 8007862:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007866:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007868:	4b11      	ldr	r3, [pc, #68]	@ (80078b0 <xPortStartScheduler+0xf0>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a10      	ldr	r2, [pc, #64]	@ (80078b0 <xPortStartScheduler+0xf0>)
 800786e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007872:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007874:	f000 f8dc 	bl	8007a30 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007878:	4b0e      	ldr	r3, [pc, #56]	@ (80078b4 <xPortStartScheduler+0xf4>)
 800787a:	2200      	movs	r2, #0
 800787c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800787e:	f000 f8fb 	bl	8007a78 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007882:	4b0d      	ldr	r3, [pc, #52]	@ (80078b8 <xPortStartScheduler+0xf8>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a0c      	ldr	r2, [pc, #48]	@ (80078b8 <xPortStartScheduler+0xf8>)
 8007888:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800788c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800788e:	f7ff ff83 	bl	8007798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007892:	f7ff f837 	bl	8006904 <vTaskSwitchContext>
	prvTaskExitError();
 8007896:	f7ff ff35 	bl	8007704 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	e000e400 	.word	0xe000e400
 80078a8:	200010ec 	.word	0x200010ec
 80078ac:	200010f0 	.word	0x200010f0
 80078b0:	e000ed20 	.word	0xe000ed20
 80078b4:	2000000c 	.word	0x2000000c
 80078b8:	e000ef34 	.word	0xe000ef34

080078bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
	__asm volatile
 80078c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c6:	b672      	cpsid	i
 80078c8:	f383 8811 	msr	BASEPRI, r3
 80078cc:	f3bf 8f6f 	isb	sy
 80078d0:	f3bf 8f4f 	dsb	sy
 80078d4:	b662      	cpsie	i
 80078d6:	607b      	str	r3, [r7, #4]
}
 80078d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80078da:	4b11      	ldr	r3, [pc, #68]	@ (8007920 <vPortEnterCritical+0x64>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	3301      	adds	r3, #1
 80078e0:	4a0f      	ldr	r2, [pc, #60]	@ (8007920 <vPortEnterCritical+0x64>)
 80078e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80078e4:	4b0e      	ldr	r3, [pc, #56]	@ (8007920 <vPortEnterCritical+0x64>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d112      	bne.n	8007912 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80078ec:	4b0d      	ldr	r3, [pc, #52]	@ (8007924 <vPortEnterCritical+0x68>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00d      	beq.n	8007912 <vPortEnterCritical+0x56>
	__asm volatile
 80078f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078fa:	b672      	cpsid	i
 80078fc:	f383 8811 	msr	BASEPRI, r3
 8007900:	f3bf 8f6f 	isb	sy
 8007904:	f3bf 8f4f 	dsb	sy
 8007908:	b662      	cpsie	i
 800790a:	603b      	str	r3, [r7, #0]
}
 800790c:	bf00      	nop
 800790e:	bf00      	nop
 8007910:	e7fd      	b.n	800790e <vPortEnterCritical+0x52>
	}
}
 8007912:	bf00      	nop
 8007914:	370c      	adds	r7, #12
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	2000000c 	.word	0x2000000c
 8007924:	e000ed04 	.word	0xe000ed04

08007928 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800792e:	4b13      	ldr	r3, [pc, #76]	@ (800797c <vPortExitCritical+0x54>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10d      	bne.n	8007952 <vPortExitCritical+0x2a>
	__asm volatile
 8007936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800793a:	b672      	cpsid	i
 800793c:	f383 8811 	msr	BASEPRI, r3
 8007940:	f3bf 8f6f 	isb	sy
 8007944:	f3bf 8f4f 	dsb	sy
 8007948:	b662      	cpsie	i
 800794a:	607b      	str	r3, [r7, #4]
}
 800794c:	bf00      	nop
 800794e:	bf00      	nop
 8007950:	e7fd      	b.n	800794e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007952:	4b0a      	ldr	r3, [pc, #40]	@ (800797c <vPortExitCritical+0x54>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	3b01      	subs	r3, #1
 8007958:	4a08      	ldr	r2, [pc, #32]	@ (800797c <vPortExitCritical+0x54>)
 800795a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800795c:	4b07      	ldr	r3, [pc, #28]	@ (800797c <vPortExitCritical+0x54>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d105      	bne.n	8007970 <vPortExitCritical+0x48>
 8007964:	2300      	movs	r3, #0
 8007966:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	f383 8811 	msr	BASEPRI, r3
}
 800796e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007970:	bf00      	nop
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr
 800797c:	2000000c 	.word	0x2000000c

08007980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007980:	f3ef 8009 	mrs	r0, PSP
 8007984:	f3bf 8f6f 	isb	sy
 8007988:	4b15      	ldr	r3, [pc, #84]	@ (80079e0 <pxCurrentTCBConst>)
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	f01e 0f10 	tst.w	lr, #16
 8007990:	bf08      	it	eq
 8007992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800799a:	6010      	str	r0, [r2, #0]
 800799c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80079a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80079a4:	b672      	cpsid	i
 80079a6:	f380 8811 	msr	BASEPRI, r0
 80079aa:	f3bf 8f4f 	dsb	sy
 80079ae:	f3bf 8f6f 	isb	sy
 80079b2:	b662      	cpsie	i
 80079b4:	f7fe ffa6 	bl	8006904 <vTaskSwitchContext>
 80079b8:	f04f 0000 	mov.w	r0, #0
 80079bc:	f380 8811 	msr	BASEPRI, r0
 80079c0:	bc09      	pop	{r0, r3}
 80079c2:	6819      	ldr	r1, [r3, #0]
 80079c4:	6808      	ldr	r0, [r1, #0]
 80079c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ca:	f01e 0f10 	tst.w	lr, #16
 80079ce:	bf08      	it	eq
 80079d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80079d4:	f380 8809 	msr	PSP, r0
 80079d8:	f3bf 8f6f 	isb	sy
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop

080079e0 <pxCurrentTCBConst>:
 80079e0:	20000ac0 	.word	0x20000ac0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80079e4:	bf00      	nop
 80079e6:	bf00      	nop

080079e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
	__asm volatile
 80079ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f2:	b672      	cpsid	i
 80079f4:	f383 8811 	msr	BASEPRI, r3
 80079f8:	f3bf 8f6f 	isb	sy
 80079fc:	f3bf 8f4f 	dsb	sy
 8007a00:	b662      	cpsie	i
 8007a02:	607b      	str	r3, [r7, #4]
}
 8007a04:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a06:	f7fe fec1 	bl	800678c <xTaskIncrementTick>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d003      	beq.n	8007a18 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a10:	4b06      	ldr	r3, [pc, #24]	@ (8007a2c <SysTick_Handler+0x44>)
 8007a12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a16:	601a      	str	r2, [r3, #0]
 8007a18:	2300      	movs	r3, #0
 8007a1a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	f383 8811 	msr	BASEPRI, r3
}
 8007a22:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a24:	bf00      	nop
 8007a26:	3708      	adds	r7, #8
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	e000ed04 	.word	0xe000ed04

08007a30 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a30:	b480      	push	{r7}
 8007a32:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a34:	4b0b      	ldr	r3, [pc, #44]	@ (8007a64 <vPortSetupTimerInterrupt+0x34>)
 8007a36:	2200      	movs	r2, #0
 8007a38:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8007a68 <vPortSetupTimerInterrupt+0x38>)
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a40:	4b0a      	ldr	r3, [pc, #40]	@ (8007a6c <vPortSetupTimerInterrupt+0x3c>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a0a      	ldr	r2, [pc, #40]	@ (8007a70 <vPortSetupTimerInterrupt+0x40>)
 8007a46:	fba2 2303 	umull	r2, r3, r2, r3
 8007a4a:	099b      	lsrs	r3, r3, #6
 8007a4c:	4a09      	ldr	r2, [pc, #36]	@ (8007a74 <vPortSetupTimerInterrupt+0x44>)
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a52:	4b04      	ldr	r3, [pc, #16]	@ (8007a64 <vPortSetupTimerInterrupt+0x34>)
 8007a54:	2207      	movs	r2, #7
 8007a56:	601a      	str	r2, [r3, #0]
}
 8007a58:	bf00      	nop
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	e000e010 	.word	0xe000e010
 8007a68:	e000e018 	.word	0xe000e018
 8007a6c:	20000000 	.word	0x20000000
 8007a70:	10624dd3 	.word	0x10624dd3
 8007a74:	e000e014 	.word	0xe000e014

08007a78 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007a78:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007a88 <vPortEnableVFP+0x10>
 8007a7c:	6801      	ldr	r1, [r0, #0]
 8007a7e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007a82:	6001      	str	r1, [r0, #0]
 8007a84:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007a86:	bf00      	nop
 8007a88:	e000ed88 	.word	0xe000ed88

08007a8c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007a92:	f3ef 8305 	mrs	r3, IPSR
 8007a96:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2b0f      	cmp	r3, #15
 8007a9c:	d917      	bls.n	8007ace <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007a9e:	4a1a      	ldr	r2, [pc, #104]	@ (8007b08 <vPortValidateInterruptPriority+0x7c>)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007aa8:	4b18      	ldr	r3, [pc, #96]	@ (8007b0c <vPortValidateInterruptPriority+0x80>)
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	7afa      	ldrb	r2, [r7, #11]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d20d      	bcs.n	8007ace <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8007ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab6:	b672      	cpsid	i
 8007ab8:	f383 8811 	msr	BASEPRI, r3
 8007abc:	f3bf 8f6f 	isb	sy
 8007ac0:	f3bf 8f4f 	dsb	sy
 8007ac4:	b662      	cpsie	i
 8007ac6:	607b      	str	r3, [r7, #4]
}
 8007ac8:	bf00      	nop
 8007aca:	bf00      	nop
 8007acc:	e7fd      	b.n	8007aca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ace:	4b10      	ldr	r3, [pc, #64]	@ (8007b10 <vPortValidateInterruptPriority+0x84>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8007b14 <vPortValidateInterruptPriority+0x88>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d90d      	bls.n	8007afa <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8007ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae2:	b672      	cpsid	i
 8007ae4:	f383 8811 	msr	BASEPRI, r3
 8007ae8:	f3bf 8f6f 	isb	sy
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	b662      	cpsie	i
 8007af2:	603b      	str	r3, [r7, #0]
}
 8007af4:	bf00      	nop
 8007af6:	bf00      	nop
 8007af8:	e7fd      	b.n	8007af6 <vPortValidateInterruptPriority+0x6a>
	}
 8007afa:	bf00      	nop
 8007afc:	3714      	adds	r7, #20
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	e000e3f0 	.word	0xe000e3f0
 8007b0c:	200010ec 	.word	0x200010ec
 8007b10:	e000ed0c 	.word	0xe000ed0c
 8007b14:	200010f0 	.word	0x200010f0

08007b18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b08a      	sub	sp, #40	@ 0x28
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b20:	2300      	movs	r3, #0
 8007b22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b24:	f7fe fd74 	bl	8006610 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b28:	4b5d      	ldr	r3, [pc, #372]	@ (8007ca0 <pvPortMalloc+0x188>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d101      	bne.n	8007b34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b30:	f000 f920 	bl	8007d74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b34:	4b5b      	ldr	r3, [pc, #364]	@ (8007ca4 <pvPortMalloc+0x18c>)
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4013      	ands	r3, r2
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f040 8094 	bne.w	8007c6a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d020      	beq.n	8007b8a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8007b48:	2208      	movs	r2, #8
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f003 0307 	and.w	r3, r3, #7
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d017      	beq.n	8007b8a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f023 0307 	bic.w	r3, r3, #7
 8007b60:	3308      	adds	r3, #8
 8007b62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f003 0307 	and.w	r3, r3, #7
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00d      	beq.n	8007b8a <pvPortMalloc+0x72>
	__asm volatile
 8007b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b72:	b672      	cpsid	i
 8007b74:	f383 8811 	msr	BASEPRI, r3
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	b662      	cpsie	i
 8007b82:	617b      	str	r3, [r7, #20]
}
 8007b84:	bf00      	nop
 8007b86:	bf00      	nop
 8007b88:	e7fd      	b.n	8007b86 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d06c      	beq.n	8007c6a <pvPortMalloc+0x152>
 8007b90:	4b45      	ldr	r3, [pc, #276]	@ (8007ca8 <pvPortMalloc+0x190>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d867      	bhi.n	8007c6a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007b9a:	4b44      	ldr	r3, [pc, #272]	@ (8007cac <pvPortMalloc+0x194>)
 8007b9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007b9e:	4b43      	ldr	r3, [pc, #268]	@ (8007cac <pvPortMalloc+0x194>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ba4:	e004      	b.n	8007bb0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8007ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d903      	bls.n	8007bc2 <pvPortMalloc+0xaa>
 8007bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1f1      	bne.n	8007ba6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007bc2:	4b37      	ldr	r3, [pc, #220]	@ (8007ca0 <pvPortMalloc+0x188>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d04e      	beq.n	8007c6a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007bcc:	6a3b      	ldr	r3, [r7, #32]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2208      	movs	r2, #8
 8007bd2:	4413      	add	r3, r2
 8007bd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	6a3b      	ldr	r3, [r7, #32]
 8007bdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be0:	685a      	ldr	r2, [r3, #4]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	1ad2      	subs	r2, r2, r3
 8007be6:	2308      	movs	r3, #8
 8007be8:	005b      	lsls	r3, r3, #1
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d922      	bls.n	8007c34 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	f003 0307 	and.w	r3, r3, #7
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00d      	beq.n	8007c1c <pvPortMalloc+0x104>
	__asm volatile
 8007c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c04:	b672      	cpsid	i
 8007c06:	f383 8811 	msr	BASEPRI, r3
 8007c0a:	f3bf 8f6f 	isb	sy
 8007c0e:	f3bf 8f4f 	dsb	sy
 8007c12:	b662      	cpsie	i
 8007c14:	613b      	str	r3, [r7, #16]
}
 8007c16:	bf00      	nop
 8007c18:	bf00      	nop
 8007c1a:	e7fd      	b.n	8007c18 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1e:	685a      	ldr	r2, [r3, #4]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	1ad2      	subs	r2, r2, r3
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c2e:	69b8      	ldr	r0, [r7, #24]
 8007c30:	f000 f902 	bl	8007e38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c34:	4b1c      	ldr	r3, [pc, #112]	@ (8007ca8 <pvPortMalloc+0x190>)
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	1ad3      	subs	r3, r2, r3
 8007c3e:	4a1a      	ldr	r2, [pc, #104]	@ (8007ca8 <pvPortMalloc+0x190>)
 8007c40:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c42:	4b19      	ldr	r3, [pc, #100]	@ (8007ca8 <pvPortMalloc+0x190>)
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	4b1a      	ldr	r3, [pc, #104]	@ (8007cb0 <pvPortMalloc+0x198>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d203      	bcs.n	8007c56 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c4e:	4b16      	ldr	r3, [pc, #88]	@ (8007ca8 <pvPortMalloc+0x190>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a17      	ldr	r2, [pc, #92]	@ (8007cb0 <pvPortMalloc+0x198>)
 8007c54:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c58:	685a      	ldr	r2, [r3, #4]
 8007c5a:	4b12      	ldr	r3, [pc, #72]	@ (8007ca4 <pvPortMalloc+0x18c>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	431a      	orrs	r2, r3
 8007c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c62:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c66:	2200      	movs	r2, #0
 8007c68:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c6a:	f7fe fcdf 	bl	800662c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	f003 0307 	and.w	r3, r3, #7
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00d      	beq.n	8007c94 <pvPortMalloc+0x17c>
	__asm volatile
 8007c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c7c:	b672      	cpsid	i
 8007c7e:	f383 8811 	msr	BASEPRI, r3
 8007c82:	f3bf 8f6f 	isb	sy
 8007c86:	f3bf 8f4f 	dsb	sy
 8007c8a:	b662      	cpsie	i
 8007c8c:	60fb      	str	r3, [r7, #12]
}
 8007c8e:	bf00      	nop
 8007c90:	bf00      	nop
 8007c92:	e7fd      	b.n	8007c90 <pvPortMalloc+0x178>
	return pvReturn;
 8007c94:	69fb      	ldr	r3, [r7, #28]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3728      	adds	r7, #40	@ 0x28
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	20004cfc 	.word	0x20004cfc
 8007ca4:	20004d08 	.word	0x20004d08
 8007ca8:	20004d00 	.word	0x20004d00
 8007cac:	20004cf4 	.word	0x20004cf4
 8007cb0:	20004d04 	.word	0x20004d04

08007cb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b086      	sub	sp, #24
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d04e      	beq.n	8007d64 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007cc6:	2308      	movs	r3, #8
 8007cc8:	425b      	negs	r3, r3
 8007cca:	697a      	ldr	r2, [r7, #20]
 8007ccc:	4413      	add	r3, r2
 8007cce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	685a      	ldr	r2, [r3, #4]
 8007cd8:	4b24      	ldr	r3, [pc, #144]	@ (8007d6c <vPortFree+0xb8>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4013      	ands	r3, r2
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10d      	bne.n	8007cfe <vPortFree+0x4a>
	__asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ce6:	b672      	cpsid	i
 8007ce8:	f383 8811 	msr	BASEPRI, r3
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	b662      	cpsie	i
 8007cf6:	60fb      	str	r3, [r7, #12]
}
 8007cf8:	bf00      	nop
 8007cfa:	bf00      	nop
 8007cfc:	e7fd      	b.n	8007cfa <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00d      	beq.n	8007d22 <vPortFree+0x6e>
	__asm volatile
 8007d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d0a:	b672      	cpsid	i
 8007d0c:	f383 8811 	msr	BASEPRI, r3
 8007d10:	f3bf 8f6f 	isb	sy
 8007d14:	f3bf 8f4f 	dsb	sy
 8007d18:	b662      	cpsie	i
 8007d1a:	60bb      	str	r3, [r7, #8]
}
 8007d1c:	bf00      	nop
 8007d1e:	bf00      	nop
 8007d20:	e7fd      	b.n	8007d1e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	685a      	ldr	r2, [r3, #4]
 8007d26:	4b11      	ldr	r3, [pc, #68]	@ (8007d6c <vPortFree+0xb8>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4013      	ands	r3, r2
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d019      	beq.n	8007d64 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d115      	bne.n	8007d64 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8007d6c <vPortFree+0xb8>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	43db      	mvns	r3, r3
 8007d42:	401a      	ands	r2, r3
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d48:	f7fe fc62 	bl	8006610 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	685a      	ldr	r2, [r3, #4]
 8007d50:	4b07      	ldr	r3, [pc, #28]	@ (8007d70 <vPortFree+0xbc>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4413      	add	r3, r2
 8007d56:	4a06      	ldr	r2, [pc, #24]	@ (8007d70 <vPortFree+0xbc>)
 8007d58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d5a:	6938      	ldr	r0, [r7, #16]
 8007d5c:	f000 f86c 	bl	8007e38 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007d60:	f7fe fc64 	bl	800662c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d64:	bf00      	nop
 8007d66:	3718      	adds	r7, #24
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	20004d08 	.word	0x20004d08
 8007d70:	20004d00 	.word	0x20004d00

08007d74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d74:	b480      	push	{r7}
 8007d76:	b085      	sub	sp, #20
 8007d78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d7a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007d7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007d80:	4b27      	ldr	r3, [pc, #156]	@ (8007e20 <prvHeapInit+0xac>)
 8007d82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f003 0307 	and.w	r3, r3, #7
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00c      	beq.n	8007da8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	3307      	adds	r3, #7
 8007d92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f023 0307 	bic.w	r3, r3, #7
 8007d9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	4a1f      	ldr	r2, [pc, #124]	@ (8007e20 <prvHeapInit+0xac>)
 8007da4:	4413      	add	r3, r2
 8007da6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007dac:	4a1d      	ldr	r2, [pc, #116]	@ (8007e24 <prvHeapInit+0xb0>)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007db2:	4b1c      	ldr	r3, [pc, #112]	@ (8007e24 <prvHeapInit+0xb0>)
 8007db4:	2200      	movs	r2, #0
 8007db6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	68ba      	ldr	r2, [r7, #8]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007dc0:	2208      	movs	r2, #8
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	1a9b      	subs	r3, r3, r2
 8007dc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f023 0307 	bic.w	r3, r3, #7
 8007dce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	4a15      	ldr	r2, [pc, #84]	@ (8007e28 <prvHeapInit+0xb4>)
 8007dd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007dd6:	4b14      	ldr	r3, [pc, #80]	@ (8007e28 <prvHeapInit+0xb4>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007dde:	4b12      	ldr	r3, [pc, #72]	@ (8007e28 <prvHeapInit+0xb4>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2200      	movs	r2, #0
 8007de4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	1ad2      	subs	r2, r2, r3
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007df4:	4b0c      	ldr	r3, [pc, #48]	@ (8007e28 <prvHeapInit+0xb4>)
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	4a0a      	ldr	r2, [pc, #40]	@ (8007e2c <prvHeapInit+0xb8>)
 8007e02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	4a09      	ldr	r2, [pc, #36]	@ (8007e30 <prvHeapInit+0xbc>)
 8007e0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e0c:	4b09      	ldr	r3, [pc, #36]	@ (8007e34 <prvHeapInit+0xc0>)
 8007e0e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007e12:	601a      	str	r2, [r3, #0]
}
 8007e14:	bf00      	nop
 8007e16:	3714      	adds	r7, #20
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	200010f4 	.word	0x200010f4
 8007e24:	20004cf4 	.word	0x20004cf4
 8007e28:	20004cfc 	.word	0x20004cfc
 8007e2c:	20004d04 	.word	0x20004d04
 8007e30:	20004d00 	.word	0x20004d00
 8007e34:	20004d08 	.word	0x20004d08

08007e38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e40:	4b28      	ldr	r3, [pc, #160]	@ (8007ee4 <prvInsertBlockIntoFreeList+0xac>)
 8007e42:	60fb      	str	r3, [r7, #12]
 8007e44:	e002      	b.n	8007e4c <prvInsertBlockIntoFreeList+0x14>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	60fb      	str	r3, [r7, #12]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d8f7      	bhi.n	8007e46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	68ba      	ldr	r2, [r7, #8]
 8007e60:	4413      	add	r3, r2
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d108      	bne.n	8007e7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	685a      	ldr	r2, [r3, #4]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	441a      	add	r2, r3
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	68ba      	ldr	r2, [r7, #8]
 8007e84:	441a      	add	r2, r3
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d118      	bne.n	8007ec0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	4b15      	ldr	r3, [pc, #84]	@ (8007ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d00d      	beq.n	8007eb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	685a      	ldr	r2, [r3, #4]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	441a      	add	r2, r3
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	601a      	str	r2, [r3, #0]
 8007eb4:	e008      	b.n	8007ec8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8007ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	601a      	str	r2, [r3, #0]
 8007ebe:	e003      	b.n	8007ec8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d002      	beq.n	8007ed6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ed6:	bf00      	nop
 8007ed8:	3714      	adds	r7, #20
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	20004cf4 	.word	0x20004cf4
 8007ee8:	20004cfc 	.word	0x20004cfc

08007eec <memset>:
 8007eec:	4402      	add	r2, r0
 8007eee:	4603      	mov	r3, r0
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d100      	bne.n	8007ef6 <memset+0xa>
 8007ef4:	4770      	bx	lr
 8007ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8007efa:	e7f9      	b.n	8007ef0 <memset+0x4>

08007efc <__libc_init_array>:
 8007efc:	b570      	push	{r4, r5, r6, lr}
 8007efe:	4d0d      	ldr	r5, [pc, #52]	@ (8007f34 <__libc_init_array+0x38>)
 8007f00:	4c0d      	ldr	r4, [pc, #52]	@ (8007f38 <__libc_init_array+0x3c>)
 8007f02:	1b64      	subs	r4, r4, r5
 8007f04:	10a4      	asrs	r4, r4, #2
 8007f06:	2600      	movs	r6, #0
 8007f08:	42a6      	cmp	r6, r4
 8007f0a:	d109      	bne.n	8007f20 <__libc_init_array+0x24>
 8007f0c:	4d0b      	ldr	r5, [pc, #44]	@ (8007f3c <__libc_init_array+0x40>)
 8007f0e:	4c0c      	ldr	r4, [pc, #48]	@ (8007f40 <__libc_init_array+0x44>)
 8007f10:	f000 f826 	bl	8007f60 <_init>
 8007f14:	1b64      	subs	r4, r4, r5
 8007f16:	10a4      	asrs	r4, r4, #2
 8007f18:	2600      	movs	r6, #0
 8007f1a:	42a6      	cmp	r6, r4
 8007f1c:	d105      	bne.n	8007f2a <__libc_init_array+0x2e>
 8007f1e:	bd70      	pop	{r4, r5, r6, pc}
 8007f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f24:	4798      	blx	r3
 8007f26:	3601      	adds	r6, #1
 8007f28:	e7ee      	b.n	8007f08 <__libc_init_array+0xc>
 8007f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f2e:	4798      	blx	r3
 8007f30:	3601      	adds	r6, #1
 8007f32:	e7f2      	b.n	8007f1a <__libc_init_array+0x1e>
 8007f34:	08008018 	.word	0x08008018
 8007f38:	08008018 	.word	0x08008018
 8007f3c:	08008018 	.word	0x08008018
 8007f40:	0800801c 	.word	0x0800801c

08007f44 <memcpy>:
 8007f44:	440a      	add	r2, r1
 8007f46:	4291      	cmp	r1, r2
 8007f48:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007f4c:	d100      	bne.n	8007f50 <memcpy+0xc>
 8007f4e:	4770      	bx	lr
 8007f50:	b510      	push	{r4, lr}
 8007f52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f5a:	4291      	cmp	r1, r2
 8007f5c:	d1f9      	bne.n	8007f52 <memcpy+0xe>
 8007f5e:	bd10      	pop	{r4, pc}

08007f60 <_init>:
 8007f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f62:	bf00      	nop
 8007f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f66:	bc08      	pop	{r3}
 8007f68:	469e      	mov	lr, r3
 8007f6a:	4770      	bx	lr

08007f6c <_fini>:
 8007f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f6e:	bf00      	nop
 8007f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f72:	bc08      	pop	{r3}
 8007f74:	469e      	mov	lr, r3
 8007f76:	4770      	bx	lr
