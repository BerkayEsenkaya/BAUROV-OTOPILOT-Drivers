
BAUROV-OTOPILOT-Drivers1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017388  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e2c  08017588  08017588  00018588  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080183b4  080183b4  0001a5e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080183b4  080183b4  000193b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080183bc  080183bc  0001a5e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080183bc  080183bc  000193bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080183c4  080183c4  000193c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000005e8  20000000  080183c8  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e69c  200005e8  080189b0  0001a5e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000ec84  080189b0  0001ac84  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001a5e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025336  00000000  00000000  0001a616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000508e  00000000  00000000  0003f94c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e60  00000000  00000000  000449e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000179b  00000000  00000000  00046840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ece0  00000000  00000000  00047fdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002639c  00000000  00000000  00076cbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011631e  00000000  00000000  0009d057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001b3375  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008d30  00000000  00000000  001b33ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  001bc11c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200005e8 	.word	0x200005e8
 800021c:	00000000 	.word	0x00000000
 8000220:	08017570 	.word	0x08017570

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200005ec 	.word	0x200005ec
 800023c:	08017570 	.word	0x08017570

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800032e:	f000 b9d3 	b.w	80006d8 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003c4:	f000 b988 	b.w	80006d8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	468e      	mov	lr, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	4688      	mov	r8, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d962      	bls.n	80004bc <__udivmoddi4+0xdc>
 80003f6:	fab2 f682 	clz	r6, r2
 80003fa:	b14e      	cbz	r6, 8000410 <__udivmoddi4+0x30>
 80003fc:	f1c6 0320 	rsb	r3, r6, #32
 8000400:	fa01 f806 	lsl.w	r8, r1, r6
 8000404:	fa20 f303 	lsr.w	r3, r0, r3
 8000408:	40b7      	lsls	r7, r6
 800040a:	ea43 0808 	orr.w	r8, r3, r8
 800040e:	40b4      	lsls	r4, r6
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	fa1f fc87 	uxth.w	ip, r7
 8000418:	fbb8 f1fe 	udiv	r1, r8, lr
 800041c:	0c23      	lsrs	r3, r4, #16
 800041e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fb01 f20c 	mul.w	r2, r1, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d909      	bls.n	8000442 <__udivmoddi4+0x62>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000434:	f080 80ea 	bcs.w	800060c <__udivmoddi4+0x22c>
 8000438:	429a      	cmp	r2, r3
 800043a:	f240 80e7 	bls.w	800060c <__udivmoddi4+0x22c>
 800043e:	3902      	subs	r1, #2
 8000440:	443b      	add	r3, r7
 8000442:	1a9a      	subs	r2, r3, r2
 8000444:	b2a3      	uxth	r3, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000452:	fb00 fc0c 	mul.w	ip, r0, ip
 8000456:	459c      	cmp	ip, r3
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x8e>
 800045a:	18fb      	adds	r3, r7, r3
 800045c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000460:	f080 80d6 	bcs.w	8000610 <__udivmoddi4+0x230>
 8000464:	459c      	cmp	ip, r3
 8000466:	f240 80d3 	bls.w	8000610 <__udivmoddi4+0x230>
 800046a:	443b      	add	r3, r7
 800046c:	3802      	subs	r0, #2
 800046e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000472:	eba3 030c 	sub.w	r3, r3, ip
 8000476:	2100      	movs	r1, #0
 8000478:	b11d      	cbz	r5, 8000482 <__udivmoddi4+0xa2>
 800047a:	40f3      	lsrs	r3, r6
 800047c:	2200      	movs	r2, #0
 800047e:	e9c5 3200 	strd	r3, r2, [r5]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d905      	bls.n	8000496 <__udivmoddi4+0xb6>
 800048a:	b10d      	cbz	r5, 8000490 <__udivmoddi4+0xb0>
 800048c:	e9c5 0100 	strd	r0, r1, [r5]
 8000490:	2100      	movs	r1, #0
 8000492:	4608      	mov	r0, r1
 8000494:	e7f5      	b.n	8000482 <__udivmoddi4+0xa2>
 8000496:	fab3 f183 	clz	r1, r3
 800049a:	2900      	cmp	r1, #0
 800049c:	d146      	bne.n	800052c <__udivmoddi4+0x14c>
 800049e:	4573      	cmp	r3, lr
 80004a0:	d302      	bcc.n	80004a8 <__udivmoddi4+0xc8>
 80004a2:	4282      	cmp	r2, r0
 80004a4:	f200 8105 	bhi.w	80006b2 <__udivmoddi4+0x2d2>
 80004a8:	1a84      	subs	r4, r0, r2
 80004aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80004ae:	2001      	movs	r0, #1
 80004b0:	4690      	mov	r8, r2
 80004b2:	2d00      	cmp	r5, #0
 80004b4:	d0e5      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004b6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ba:	e7e2      	b.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	2a00      	cmp	r2, #0
 80004be:	f000 8090 	beq.w	80005e2 <__udivmoddi4+0x202>
 80004c2:	fab2 f682 	clz	r6, r2
 80004c6:	2e00      	cmp	r6, #0
 80004c8:	f040 80a4 	bne.w	8000614 <__udivmoddi4+0x234>
 80004cc:	1a8a      	subs	r2, r1, r2
 80004ce:	0c03      	lsrs	r3, r0, #16
 80004d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004d4:	b280      	uxth	r0, r0
 80004d6:	b2bc      	uxth	r4, r7
 80004d8:	2101      	movs	r1, #1
 80004da:	fbb2 fcfe 	udiv	ip, r2, lr
 80004de:	fb0e 221c 	mls	r2, lr, ip, r2
 80004e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004e6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ea:	429a      	cmp	r2, r3
 80004ec:	d907      	bls.n	80004fe <__udivmoddi4+0x11e>
 80004ee:	18fb      	adds	r3, r7, r3
 80004f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x11c>
 80004f6:	429a      	cmp	r2, r3
 80004f8:	f200 80e0 	bhi.w	80006bc <__udivmoddi4+0x2dc>
 80004fc:	46c4      	mov	ip, r8
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	fbb3 f2fe 	udiv	r2, r3, lr
 8000504:	fb0e 3312 	mls	r3, lr, r2, r3
 8000508:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800050c:	fb02 f404 	mul.w	r4, r2, r4
 8000510:	429c      	cmp	r4, r3
 8000512:	d907      	bls.n	8000524 <__udivmoddi4+0x144>
 8000514:	18fb      	adds	r3, r7, r3
 8000516:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800051a:	d202      	bcs.n	8000522 <__udivmoddi4+0x142>
 800051c:	429c      	cmp	r4, r3
 800051e:	f200 80ca 	bhi.w	80006b6 <__udivmoddi4+0x2d6>
 8000522:	4602      	mov	r2, r0
 8000524:	1b1b      	subs	r3, r3, r4
 8000526:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800052a:	e7a5      	b.n	8000478 <__udivmoddi4+0x98>
 800052c:	f1c1 0620 	rsb	r6, r1, #32
 8000530:	408b      	lsls	r3, r1
 8000532:	fa22 f706 	lsr.w	r7, r2, r6
 8000536:	431f      	orrs	r7, r3
 8000538:	fa0e f401 	lsl.w	r4, lr, r1
 800053c:	fa20 f306 	lsr.w	r3, r0, r6
 8000540:	fa2e fe06 	lsr.w	lr, lr, r6
 8000544:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000548:	4323      	orrs	r3, r4
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	fa1f fc87 	uxth.w	ip, r7
 8000552:	fbbe f0f9 	udiv	r0, lr, r9
 8000556:	0c1c      	lsrs	r4, r3, #16
 8000558:	fb09 ee10 	mls	lr, r9, r0, lr
 800055c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000560:	fb00 fe0c 	mul.w	lr, r0, ip
 8000564:	45a6      	cmp	lr, r4
 8000566:	fa02 f201 	lsl.w	r2, r2, r1
 800056a:	d909      	bls.n	8000580 <__udivmoddi4+0x1a0>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000572:	f080 809c 	bcs.w	80006ae <__udivmoddi4+0x2ce>
 8000576:	45a6      	cmp	lr, r4
 8000578:	f240 8099 	bls.w	80006ae <__udivmoddi4+0x2ce>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	eba4 040e 	sub.w	r4, r4, lr
 8000584:	fa1f fe83 	uxth.w	lr, r3
 8000588:	fbb4 f3f9 	udiv	r3, r4, r9
 800058c:	fb09 4413 	mls	r4, r9, r3, r4
 8000590:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000594:	fb03 fc0c 	mul.w	ip, r3, ip
 8000598:	45a4      	cmp	ip, r4
 800059a:	d908      	bls.n	80005ae <__udivmoddi4+0x1ce>
 800059c:	193c      	adds	r4, r7, r4
 800059e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80005a2:	f080 8082 	bcs.w	80006aa <__udivmoddi4+0x2ca>
 80005a6:	45a4      	cmp	ip, r4
 80005a8:	d97f      	bls.n	80006aa <__udivmoddi4+0x2ca>
 80005aa:	3b02      	subs	r3, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005b2:	eba4 040c 	sub.w	r4, r4, ip
 80005b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ba:	4564      	cmp	r4, ip
 80005bc:	4673      	mov	r3, lr
 80005be:	46e1      	mov	r9, ip
 80005c0:	d362      	bcc.n	8000688 <__udivmoddi4+0x2a8>
 80005c2:	d05f      	beq.n	8000684 <__udivmoddi4+0x2a4>
 80005c4:	b15d      	cbz	r5, 80005de <__udivmoddi4+0x1fe>
 80005c6:	ebb8 0203 	subs.w	r2, r8, r3
 80005ca:	eb64 0409 	sbc.w	r4, r4, r9
 80005ce:	fa04 f606 	lsl.w	r6, r4, r6
 80005d2:	fa22 f301 	lsr.w	r3, r2, r1
 80005d6:	431e      	orrs	r6, r3
 80005d8:	40cc      	lsrs	r4, r1
 80005da:	e9c5 6400 	strd	r6, r4, [r5]
 80005de:	2100      	movs	r1, #0
 80005e0:	e74f      	b.n	8000482 <__udivmoddi4+0xa2>
 80005e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005e6:	0c01      	lsrs	r1, r0, #16
 80005e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005ec:	b280      	uxth	r0, r0
 80005ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005f2:	463b      	mov	r3, r7
 80005f4:	4638      	mov	r0, r7
 80005f6:	463c      	mov	r4, r7
 80005f8:	46b8      	mov	r8, r7
 80005fa:	46be      	mov	lr, r7
 80005fc:	2620      	movs	r6, #32
 80005fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000602:	eba2 0208 	sub.w	r2, r2, r8
 8000606:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800060a:	e766      	b.n	80004da <__udivmoddi4+0xfa>
 800060c:	4601      	mov	r1, r0
 800060e:	e718      	b.n	8000442 <__udivmoddi4+0x62>
 8000610:	4610      	mov	r0, r2
 8000612:	e72c      	b.n	800046e <__udivmoddi4+0x8e>
 8000614:	f1c6 0220 	rsb	r2, r6, #32
 8000618:	fa2e f302 	lsr.w	r3, lr, r2
 800061c:	40b7      	lsls	r7, r6
 800061e:	40b1      	lsls	r1, r6
 8000620:	fa20 f202 	lsr.w	r2, r0, r2
 8000624:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000628:	430a      	orrs	r2, r1
 800062a:	fbb3 f8fe 	udiv	r8, r3, lr
 800062e:	b2bc      	uxth	r4, r7
 8000630:	fb0e 3318 	mls	r3, lr, r8, r3
 8000634:	0c11      	lsrs	r1, r2, #16
 8000636:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800063a:	fb08 f904 	mul.w	r9, r8, r4
 800063e:	40b0      	lsls	r0, r6
 8000640:	4589      	cmp	r9, r1
 8000642:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000646:	b280      	uxth	r0, r0
 8000648:	d93e      	bls.n	80006c8 <__udivmoddi4+0x2e8>
 800064a:	1879      	adds	r1, r7, r1
 800064c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000650:	d201      	bcs.n	8000656 <__udivmoddi4+0x276>
 8000652:	4589      	cmp	r9, r1
 8000654:	d81f      	bhi.n	8000696 <__udivmoddi4+0x2b6>
 8000656:	eba1 0109 	sub.w	r1, r1, r9
 800065a:	fbb1 f9fe 	udiv	r9, r1, lr
 800065e:	fb09 f804 	mul.w	r8, r9, r4
 8000662:	fb0e 1119 	mls	r1, lr, r9, r1
 8000666:	b292      	uxth	r2, r2
 8000668:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800066c:	4542      	cmp	r2, r8
 800066e:	d229      	bcs.n	80006c4 <__udivmoddi4+0x2e4>
 8000670:	18ba      	adds	r2, r7, r2
 8000672:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000676:	d2c4      	bcs.n	8000602 <__udivmoddi4+0x222>
 8000678:	4542      	cmp	r2, r8
 800067a:	d2c2      	bcs.n	8000602 <__udivmoddi4+0x222>
 800067c:	f1a9 0102 	sub.w	r1, r9, #2
 8000680:	443a      	add	r2, r7
 8000682:	e7be      	b.n	8000602 <__udivmoddi4+0x222>
 8000684:	45f0      	cmp	r8, lr
 8000686:	d29d      	bcs.n	80005c4 <__udivmoddi4+0x1e4>
 8000688:	ebbe 0302 	subs.w	r3, lr, r2
 800068c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000690:	3801      	subs	r0, #1
 8000692:	46e1      	mov	r9, ip
 8000694:	e796      	b.n	80005c4 <__udivmoddi4+0x1e4>
 8000696:	eba7 0909 	sub.w	r9, r7, r9
 800069a:	4449      	add	r1, r9
 800069c:	f1a8 0c02 	sub.w	ip, r8, #2
 80006a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a4:	fb09 f804 	mul.w	r8, r9, r4
 80006a8:	e7db      	b.n	8000662 <__udivmoddi4+0x282>
 80006aa:	4673      	mov	r3, lr
 80006ac:	e77f      	b.n	80005ae <__udivmoddi4+0x1ce>
 80006ae:	4650      	mov	r0, sl
 80006b0:	e766      	b.n	8000580 <__udivmoddi4+0x1a0>
 80006b2:	4608      	mov	r0, r1
 80006b4:	e6fd      	b.n	80004b2 <__udivmoddi4+0xd2>
 80006b6:	443b      	add	r3, r7
 80006b8:	3a02      	subs	r2, #2
 80006ba:	e733      	b.n	8000524 <__udivmoddi4+0x144>
 80006bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006c0:	443b      	add	r3, r7
 80006c2:	e71c      	b.n	80004fe <__udivmoddi4+0x11e>
 80006c4:	4649      	mov	r1, r9
 80006c6:	e79c      	b.n	8000602 <__udivmoddi4+0x222>
 80006c8:	eba1 0109 	sub.w	r1, r1, r9
 80006cc:	46c4      	mov	ip, r8
 80006ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80006d2:	fb09 f804 	mul.w	r8, r9, r4
 80006d6:	e7c4      	b.n	8000662 <__udivmoddi4+0x282>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <AVG_Filter_s16>:
MED_Filter_s16_TypeDef_T MED_IMU_ACC_X, MED_IMU_ACC_Y, MED_IMU_ACC_Z, MED_IMU_GYR_X, MED_IMU_GYR_Y, MED_IMU_GYR_Z, MED_IMU_MAG_X, MED_IMU_MAG_Y, MED_IMU_MAG_Z;

AVG_Filter_u32_TypeDef_T AVG_PressureSensor_1;
MED_Filter_u32_TypeDef_T MED_PressureSensor_1;

void AVG_Filter_s16(AVG_Filter_s16_TypeDef_T *handle, int16_t data){
 80006dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80006e0:	b086      	sub	sp, #24
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
 80006e6:	460b      	mov	r3, r1
 80006e8:	807b      	strh	r3, [r7, #2]
	int64_t sum = 0;
 80006ea:	f04f 0200 	mov.w	r2, #0
 80006ee:	f04f 0300 	mov.w	r3, #0
 80006f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	handle->AVG_FilterBuffer[handle->AVG_FilterCounter++] = data;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	8b1b      	ldrh	r3, [r3, #24]
 80006fa:	1c5a      	adds	r2, r3, #1
 80006fc:	b291      	uxth	r1, r2
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	8311      	strh	r1, [r2, #24]
 8000702:	4619      	mov	r1, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	887a      	ldrh	r2, [r7, #2]
 8000708:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	if(handle->AVG_FilterCounter == AVG_FilterBufferSize){
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	8b1b      	ldrh	r3, [r3, #24]
 8000710:	2b0a      	cmp	r3, #10
 8000712:	d134      	bne.n	800077e <AVG_Filter_s16+0xa2>
		for(uint8_t i=0; i<AVG_FilterBufferSize; i++)
 8000714:	2300      	movs	r3, #0
 8000716:	73fb      	strb	r3, [r7, #15]
 8000718:	e012      	b.n	8000740 <AVG_Filter_s16+0x64>
			sum += handle->AVG_FilterBuffer[i];
 800071a:	7bfa      	ldrb	r2, [r7, #15]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000722:	b21b      	sxth	r3, r3
 8000724:	17da      	asrs	r2, r3, #31
 8000726:	461c      	mov	r4, r3
 8000728:	4615      	mov	r5, r2
 800072a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800072e:	eb12 0804 	adds.w	r8, r2, r4
 8000732:	eb43 0905 	adc.w	r9, r3, r5
 8000736:	e9c7 8904 	strd	r8, r9, [r7, #16]
		for(uint8_t i=0; i<AVG_FilterBufferSize; i++)
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	3301      	adds	r3, #1
 800073e:	73fb      	strb	r3, [r7, #15]
 8000740:	7bfb      	ldrb	r3, [r7, #15]
 8000742:	2b09      	cmp	r3, #9
 8000744:	d9e9      	bls.n	800071a <AVG_Filter_s16+0x3e>

		handle->AVG_FilteredData = (int16_t)(sum/AVG_FilterBufferSize);
 8000746:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800074a:	f04f 020a 	mov.w	r2, #10
 800074e:	f04f 0300 	mov.w	r3, #0
 8000752:	f7ff fddd 	bl	8000310 <__aeabi_ldivmod>
 8000756:	4602      	mov	r2, r0
 8000758:	460b      	mov	r3, r1
 800075a:	b212      	sxth	r2, r2
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	829a      	strh	r2, [r3, #20]
		handle->AVG_FilteredPreData = handle->AVG_FilteredData;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	82da      	strh	r2, [r3, #22]
		handle->AVG_FilterCounter = 0;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2200      	movs	r2, #0
 800076e:	831a      	strh	r2, [r3, #24]
		memset(handle->AVG_FilterBuffer, 0, sizeof(handle->AVG_FilterBuffer));
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2214      	movs	r2, #20
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f015 fff2 	bl	8016760 <memset>
	}else{
		handle->AVG_FilteredData=handle->AVG_FilteredPreData;
	}
}
 800077c:	e004      	b.n	8000788 <AVG_Filter_s16+0xac>
		handle->AVG_FilteredData=handle->AVG_FilteredPreData;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	829a      	strh	r2, [r3, #20]
}
 8000788:	bf00      	nop
 800078a:	3718      	adds	r7, #24
 800078c:	46bd      	mov	sp, r7
 800078e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000792 <MED_Filter_SortArray_s16>:

static void MED_Filter_SortArray_s16(int16_t* arr, uint8_t size) {
 8000792:	b480      	push	{r7}
 8000794:	b085      	sub	sp, #20
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
 800079a:	460b      	mov	r3, r1
 800079c:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < size - 1; i++) {
 800079e:	2300      	movs	r3, #0
 80007a0:	73fb      	strb	r3, [r7, #15]
 80007a2:	e032      	b.n	800080a <MED_Filter_SortArray_s16+0x78>
        for (uint8_t j = i + 1; j < size; j++) {
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
 80007a6:	3301      	adds	r3, #1
 80007a8:	73bb      	strb	r3, [r7, #14]
 80007aa:	e027      	b.n	80007fc <MED_Filter_SortArray_s16+0x6a>
            if (arr[j] < arr[i]) {
 80007ac:	7bbb      	ldrb	r3, [r7, #14]
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	4413      	add	r3, r2
 80007b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	6879      	ldr	r1, [r7, #4]
 80007be:	440b      	add	r3, r1
 80007c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	da16      	bge.n	80007f6 <MED_Filter_SortArray_s16+0x64>
                int16_t tmp = arr[i];
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	4413      	add	r3, r2
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	81bb      	strh	r3, [r7, #12]
                arr[i] = arr[j];
 80007d4:	7bbb      	ldrb	r3, [r7, #14]
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	441a      	add	r2, r3
 80007dc:	7bfb      	ldrb	r3, [r7, #15]
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	6879      	ldr	r1, [r7, #4]
 80007e2:	440b      	add	r3, r1
 80007e4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80007e8:	801a      	strh	r2, [r3, #0]
                arr[j] = tmp;
 80007ea:	7bbb      	ldrb	r3, [r7, #14]
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	4413      	add	r3, r2
 80007f2:	89ba      	ldrh	r2, [r7, #12]
 80007f4:	801a      	strh	r2, [r3, #0]
        for (uint8_t j = i + 1; j < size; j++) {
 80007f6:	7bbb      	ldrb	r3, [r7, #14]
 80007f8:	3301      	adds	r3, #1
 80007fa:	73bb      	strb	r3, [r7, #14]
 80007fc:	7bba      	ldrb	r2, [r7, #14]
 80007fe:	78fb      	ldrb	r3, [r7, #3]
 8000800:	429a      	cmp	r2, r3
 8000802:	d3d3      	bcc.n	80007ac <MED_Filter_SortArray_s16+0x1a>
    for (uint8_t i = 0; i < size - 1; i++) {
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	3301      	adds	r3, #1
 8000808:	73fb      	strb	r3, [r7, #15]
 800080a:	7bfa      	ldrb	r2, [r7, #15]
 800080c:	78fb      	ldrb	r3, [r7, #3]
 800080e:	3b01      	subs	r3, #1
 8000810:	429a      	cmp	r2, r3
 8000812:	dbc7      	blt.n	80007a4 <MED_Filter_SortArray_s16+0x12>
            }
        }
    }
}
 8000814:	bf00      	nop
 8000816:	bf00      	nop
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <MED_Filter_s16>:

void MED_Filter_s16(MED_Filter_s16_TypeDef_T *handle, int16_t data){
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
 800082a:	460b      	mov	r3, r1
 800082c:	807b      	strh	r3, [r7, #2]
	handle->MED_FilterBuffer[handle->MED_FilterCounter++] = data;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	8a5b      	ldrh	r3, [r3, #18]
 8000832:	1c5a      	adds	r2, r3, #1
 8000834:	b291      	uxth	r1, r2
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	8251      	strh	r1, [r2, #18]
 800083a:	4619      	mov	r1, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	887a      	ldrh	r2, [r7, #2]
 8000840:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	if(handle->MED_FilterCounter == MED_FilterBufferSize){
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	8a5b      	ldrh	r3, [r3, #18]
 8000848:	2b07      	cmp	r3, #7
 800084a:	d118      	bne.n	800087e <MED_Filter_s16+0x5c>
		MED_Filter_SortArray_s16(handle->MED_FilterBuffer, MED_FilterBufferSize);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2107      	movs	r1, #7
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff9e 	bl	8000792 <MED_Filter_SortArray_s16>
		handle->MED_FilteredData = handle->MED_FilterBuffer[(MED_FilterBufferSize-1)/2];
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	81da      	strh	r2, [r3, #14]
		handle->MED_FilteredPreData = handle->MED_FilteredData;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	821a      	strh	r2, [r3, #16]
		handle->MED_FilterCounter = 0;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2200      	movs	r2, #0
 800086e:	825a      	strh	r2, [r3, #18]
		memset(handle->MED_FilterBuffer, 0, sizeof(handle->MED_FilterBuffer));
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	220e      	movs	r2, #14
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f015 ff72 	bl	8016760 <memset>
	}else{
		handle->MED_FilteredData=handle->MED_FilteredPreData;
	}
}
 800087c:	e004      	b.n	8000888 <MED_Filter_s16+0x66>
		handle->MED_FilteredData=handle->MED_FilteredPreData;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	81da      	strh	r2, [r3, #14]
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <I2C_Init>:
 * GLOBAL FUNCTIONS
 *********************************************************/
/** Brief description which ends at this dot. Details follow
 *  here.
 */
void I2C_Init(void *handle, uint8_t I2CNo){
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	460b      	mov	r3, r1
 800089a:	70fb      	strb	r3, [r7, #3]
	I2C_HandleTypeDef_T *i2c;
	i2c = I2C_GetModule(I2CNo);
 800089c:	78fb      	ldrb	r3, [r7, #3]
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 f864 	bl	800096c <I2C_GetModule>
 80008a4:	60f8      	str	r0, [r7, #12]
    i2c->handle = handle;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	601a      	str	r2, [r3, #0]
}
 80008ac:	bf00      	nop
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <I2C_ReadWrite_Poll>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
I2C_ReturnTypeDef_T I2C_ReadWrite_Poll(uint8_t I2CNo, uint8_t DevAddress, uint8_t *txBuff, uint8_t txLenght, uint8_t *rxBuff, uint8_t rxLenght){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af02      	add	r7, sp, #8
 80008ba:	603a      	str	r2, [r7, #0]
 80008bc:	461a      	mov	r2, r3
 80008be:	4603      	mov	r3, r0
 80008c0:	71fb      	strb	r3, [r7, #7]
 80008c2:	460b      	mov	r3, r1
 80008c4:	71bb      	strb	r3, [r7, #6]
 80008c6:	4613      	mov	r3, r2
 80008c8:	717b      	strb	r3, [r7, #5]
	I2C_HandleTypeDef_T *i2c;
	HAL_StatusTypeDef res;
	uint8_t txAddr, rxAddr;
	txAddr = DevAddress<<1;
 80008ca:	79bb      	ldrb	r3, [r7, #6]
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	75fb      	strb	r3, [r7, #23]
	rxAddr = ((DevAddress<<1) | 0x01);
 80008d0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	b25b      	sxtb	r3, r3
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	b25b      	sxtb	r3, r3
 80008de:	75bb      	strb	r3, [r7, #22]
	i2c = I2C_GetModule(I2CNo);
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 f842 	bl	800096c <I2C_GetModule>
 80008e8:	6138      	str	r0, [r7, #16]
	if(rxLenght == 0){
 80008ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d114      	bne.n	800091c <I2C_ReadWrite_Poll+0x68>
		res = HAL_I2C_Master_Transmit(i2c->handle , txAddr, txBuff, txLenght,1000);
 80008f2:	693b      	ldr	r3, [r7, #16]
 80008f4:	6818      	ldr	r0, [r3, #0]
 80008f6:	7dfb      	ldrb	r3, [r7, #23]
 80008f8:	b299      	uxth	r1, r3
 80008fa:	797b      	ldrb	r3, [r7, #5]
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000902:	9200      	str	r2, [sp, #0]
 8000904:	683a      	ldr	r2, [r7, #0]
 8000906:	f003 fc4d 	bl	80041a4 <HAL_I2C_Master_Transmit>
 800090a:	4603      	mov	r3, r0
 800090c:	73fb      	strb	r3, [r7, #15]
		return res == I2C_ERROR;
 800090e:	7bfb      	ldrb	r3, [r7, #15]
 8000910:	2b01      	cmp	r3, #1
 8000912:	bf0c      	ite	eq
 8000914:	2301      	moveq	r3, #1
 8000916:	2300      	movne	r3, #0
 8000918:	b2db      	uxtb	r3, r3
 800091a:	e023      	b.n	8000964 <I2C_ReadWrite_Poll+0xb0>
	}else{
		HAL_I2C_Master_Transmit(i2c->handle , txAddr, txBuff, txLenght,1000);
 800091c:	693b      	ldr	r3, [r7, #16]
 800091e:	6818      	ldr	r0, [r3, #0]
 8000920:	7dfb      	ldrb	r3, [r7, #23]
 8000922:	b299      	uxth	r1, r3
 8000924:	797b      	ldrb	r3, [r7, #5]
 8000926:	b29b      	uxth	r3, r3
 8000928:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800092c:	9200      	str	r2, [sp, #0]
 800092e:	683a      	ldr	r2, [r7, #0]
 8000930:	f003 fc38 	bl	80041a4 <HAL_I2C_Master_Transmit>
		HAL_Delay(1);
 8000934:	2001      	movs	r0, #1
 8000936:	f001 fcf3 	bl	8002320 <HAL_Delay>
		res = HAL_I2C_Master_Receive(i2c->handle, rxAddr, rxBuff, rxLenght,1000);
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	6818      	ldr	r0, [r3, #0]
 800093e:	7dbb      	ldrb	r3, [r7, #22]
 8000940:	b299      	uxth	r1, r3
 8000942:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000946:	b29b      	uxth	r3, r3
 8000948:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800094c:	9200      	str	r2, [sp, #0]
 800094e:	6a3a      	ldr	r2, [r7, #32]
 8000950:	f003 fd40 	bl	80043d4 <HAL_I2C_Master_Receive>
 8000954:	4603      	mov	r3, r0
 8000956:	73fb      	strb	r3, [r7, #15]
		return res == I2C_ERROR;
 8000958:	7bfb      	ldrb	r3, [r7, #15]
 800095a:	2b01      	cmp	r3, #1
 800095c:	bf0c      	ite	eq
 800095e:	2301      	moveq	r3, #1
 8000960:	2300      	movne	r3, #0
 8000962:	b2db      	uxtb	r3, r3
	}
}
 8000964:	4618      	mov	r0, r3
 8000966:	3718      	adds	r7, #24
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <I2C_GetModule>:
 * PRIVATE FUNCTIONS
 *********************************************************/
/** Brief description which ends at this dot. Details follow
 *  here.
 */
I2C_HandleTypeDef_T* I2C_GetModule(uint8_t I2CNo){
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
	switch(I2CNo){
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	2b03      	cmp	r3, #3
 800097a:	d00a      	beq.n	8000992 <I2C_GetModule+0x26>
 800097c:	2b03      	cmp	r3, #3
 800097e:	dc0a      	bgt.n	8000996 <I2C_GetModule+0x2a>
 8000980:	2b01      	cmp	r3, #1
 8000982:	d002      	beq.n	800098a <I2C_GetModule+0x1e>
 8000984:	2b02      	cmp	r3, #2
 8000986:	d002      	beq.n	800098e <I2C_GetModule+0x22>
 8000988:	e005      	b.n	8000996 <I2C_GetModule+0x2a>
		case I2CNO_1 : return &I2C_1; break;
 800098a:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <I2C_GetModule+0x38>)
 800098c:	e004      	b.n	8000998 <I2C_GetModule+0x2c>
		case I2CNO_2 : return &I2C_2; break;
 800098e:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <I2C_GetModule+0x3c>)
 8000990:	e002      	b.n	8000998 <I2C_GetModule+0x2c>
		case I2CNO_3 : return &I2C_3; break;
 8000992:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <I2C_GetModule+0x40>)
 8000994:	e000      	b.n	8000998 <I2C_GetModule+0x2c>
		default : return NULL; break;
 8000996:	2300      	movs	r3, #0
	}
}
 8000998:	4618      	mov	r0, r3
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	200007b4 	.word	0x200007b4
 80009a8:	200007bc 	.word	0x200007bc
 80009ac:	200007c4 	.word	0x200007c4

080009b0 <IMU_Init>:
#include "IMU.h"
#include "Filters.h"

IMU_TypeDef_T IMU_1;

void IMU_Init(IMU_TypeDef_T *ImuHandle, uint8_t ImuSensorNo, uint8_t IMU_I2CNO, uint8_t IMU_I2CAdress, void* ResetGPIOPort, uint16_t ResetGPIOPin){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af02      	add	r7, sp, #8
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	4608      	mov	r0, r1
 80009ba:	4611      	mov	r1, r2
 80009bc:	461a      	mov	r2, r3
 80009be:	4603      	mov	r3, r0
 80009c0:	70fb      	strb	r3, [r7, #3]
 80009c2:	460b      	mov	r3, r1
 80009c4:	70bb      	strb	r3, [r7, #2]
 80009c6:	4613      	mov	r3, r2
 80009c8:	707b      	strb	r3, [r7, #1]
	BNO055_Sensor_T *imuSensor;
	imuSensor = IMU_GetSensorHandle(ImuSensorNo);
 80009ca:	78fb      	ldrb	r3, [r7, #3]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 f9dd 	bl	8000d8c <IMU_GetSensorHandle>
 80009d2:	60f8      	str	r0, [r7, #12]

	BNO055_Init(imuSensor, IMU_I2CNO, IMU_I2CAdress, ResetGPIOPort, ResetGPIOPin);
 80009d4:	787a      	ldrb	r2, [r7, #1]
 80009d6:	78b9      	ldrb	r1, [r7, #2]
 80009d8:	8bbb      	ldrh	r3, [r7, #28]
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	68f8      	ldr	r0, [r7, #12]
 80009e0:	f000 f9f2 	bl	8000dc8 <BNO055_Init>

	ImuHandle->CalcConst.ACC_1MpS2_LSB = imuSensor->CalcConst.ACC_1MpS2_LSB;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80009e8:	ee07 3a90 	vmov	s15, r3
 80009ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	ImuHandle->CalcConst.GYR_1RPS_LSB  = imuSensor->CalcConst.GYR_1RPS_LSB;
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80009fa:	ee07 3a90 	vmov	s15, r3
 80009fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	ImuHandle->CalcConst.MAG_1uT_LSB   = imuSensor->CalcConst.MAG_1uT_LSB;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000a0c:	ee07 3a90 	vmov	s15, r3
 8000a10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

	HAL_Delay(250);
 8000a1a:	20fa      	movs	r0, #250	@ 0xfa
 8000a1c:	f001 fc80 	bl	8002320 <HAL_Delay>
}
 8000a20:	bf00      	nop
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <IMU_Execute>:

void IMU_Execute(IMU_TypeDef_T *ImuHandle, uint8_t ImuSensorNo){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	460b      	mov	r3, r1
 8000a32:	70fb      	strb	r3, [r7, #3]
	BNO055_Sensor_T *imuSensor;

	imuSensor = IMU_GetSensorHandle(ImuSensorNo);
 8000a34:	78fb      	ldrb	r3, [r7, #3]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 f9a8 	bl	8000d8c <IMU_GetSensorHandle>
 8000a3c:	60f8      	str	r0, [r7, #12]

	BNO055_Get_SysError(imuSensor);
 8000a3e:	68f8      	ldr	r0, [r7, #12]
 8000a40:	f000 fea7 	bl	8001792 <BNO055_Get_SysError>
	BNO055_Get_ACC_Data(imuSensor);
 8000a44:	68f8      	ldr	r0, [r7, #12]
 8000a46:	f000 fcd7 	bl	80013f8 <BNO055_Get_ACC_Data>
	BNO055_Get_MAG_Data(imuSensor);
 8000a4a:	68f8      	ldr	r0, [r7, #12]
 8000a4c:	f000 fd5a 	bl	8001504 <BNO055_Get_MAG_Data>
	BNO055_Get_GYR_Data(imuSensor);
 8000a50:	68f8      	ldr	r0, [r7, #12]
 8000a52:	f000 fdad 	bl	80015b0 <BNO055_Get_GYR_Data>

	IMU_PopulateData(ImuHandle, ImuSensorNo);
 8000a56:	78fb      	ldrb	r3, [r7, #3]
 8000a58:	4619      	mov	r1, r3
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f000 f95a 	bl	8000d14 <IMU_PopulateData>

	MED_Filter_s16(&MED_IMU_ACC_X, ImuHandle->AllRawData.Accelerometer.X_Axis);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a66:	4619      	mov	r1, r3
 8000a68:	4898      	ldr	r0, [pc, #608]	@ (8000ccc <IMU_Execute+0x2a4>)
 8000a6a:	f7ff feda 	bl	8000822 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_ACC_X, MED_IMU_ACC_X.MED_FilteredData);
 8000a6e:	4b97      	ldr	r3, [pc, #604]	@ (8000ccc <IMU_Execute+0x2a4>)
 8000a70:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000a74:	4619      	mov	r1, r3
 8000a76:	4896      	ldr	r0, [pc, #600]	@ (8000cd0 <IMU_Execute+0x2a8>)
 8000a78:	f7ff fe30 	bl	80006dc <AVG_Filter_s16>
	MED_Filter_s16(&MED_IMU_ACC_Y, ImuHandle->AllRawData.Accelerometer.Y_Axis);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a82:	4619      	mov	r1, r3
 8000a84:	4893      	ldr	r0, [pc, #588]	@ (8000cd4 <IMU_Execute+0x2ac>)
 8000a86:	f7ff fecc 	bl	8000822 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_ACC_Y, MED_IMU_ACC_Y.MED_FilteredData);
 8000a8a:	4b92      	ldr	r3, [pc, #584]	@ (8000cd4 <IMU_Execute+0x2ac>)
 8000a8c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000a90:	4619      	mov	r1, r3
 8000a92:	4891      	ldr	r0, [pc, #580]	@ (8000cd8 <IMU_Execute+0x2b0>)
 8000a94:	f7ff fe22 	bl	80006dc <AVG_Filter_s16>
	MED_Filter_s16(&MED_IMU_ACC_Z, ImuHandle->AllRawData.Accelerometer.Z_Axis);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	488e      	ldr	r0, [pc, #568]	@ (8000cdc <IMU_Execute+0x2b4>)
 8000aa2:	f7ff febe 	bl	8000822 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_ACC_Z, MED_IMU_ACC_Z.MED_FilteredData);
 8000aa6:	4b8d      	ldr	r3, [pc, #564]	@ (8000cdc <IMU_Execute+0x2b4>)
 8000aa8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000aac:	4619      	mov	r1, r3
 8000aae:	488c      	ldr	r0, [pc, #560]	@ (8000ce0 <IMU_Execute+0x2b8>)
 8000ab0:	f7ff fe14 	bl	80006dc <AVG_Filter_s16>
	MED_Filter_s16(&MED_IMU_GYR_X, ImuHandle->AllRawData.Gyroscope.X_Axis);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000aba:	4619      	mov	r1, r3
 8000abc:	4889      	ldr	r0, [pc, #548]	@ (8000ce4 <IMU_Execute+0x2bc>)
 8000abe:	f7ff feb0 	bl	8000822 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_GYR_X, MED_IMU_GYR_X.MED_FilteredData);
 8000ac2:	4b88      	ldr	r3, [pc, #544]	@ (8000ce4 <IMU_Execute+0x2bc>)
 8000ac4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4887      	ldr	r0, [pc, #540]	@ (8000ce8 <IMU_Execute+0x2c0>)
 8000acc:	f7ff fe06 	bl	80006dc <AVG_Filter_s16>
	MED_Filter_s16(&MED_IMU_GYR_Y, ImuHandle->AllRawData.Gyroscope.Y_Axis);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4884      	ldr	r0, [pc, #528]	@ (8000cec <IMU_Execute+0x2c4>)
 8000ada:	f7ff fea2 	bl	8000822 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_GYR_Y, MED_IMU_GYR_Y.MED_FilteredData);
 8000ade:	4b83      	ldr	r3, [pc, #524]	@ (8000cec <IMU_Execute+0x2c4>)
 8000ae0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4882      	ldr	r0, [pc, #520]	@ (8000cf0 <IMU_Execute+0x2c8>)
 8000ae8:	f7ff fdf8 	bl	80006dc <AVG_Filter_s16>
	MED_Filter_s16(&MED_IMU_GYR_Z, ImuHandle->AllRawData.Gyroscope.Z_Axis);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000af2:	4619      	mov	r1, r3
 8000af4:	487f      	ldr	r0, [pc, #508]	@ (8000cf4 <IMU_Execute+0x2cc>)
 8000af6:	f7ff fe94 	bl	8000822 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_GYR_Z, MED_IMU_GYR_Z.MED_FilteredData);
 8000afa:	4b7e      	ldr	r3, [pc, #504]	@ (8000cf4 <IMU_Execute+0x2cc>)
 8000afc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b00:	4619      	mov	r1, r3
 8000b02:	487d      	ldr	r0, [pc, #500]	@ (8000cf8 <IMU_Execute+0x2d0>)
 8000b04:	f7ff fdea 	bl	80006dc <AVG_Filter_s16>
	MED_Filter_s16(&MED_IMU_MAG_X, ImuHandle->AllRawData.Magnetometer.X_Axis);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000b0e:	4619      	mov	r1, r3
 8000b10:	487a      	ldr	r0, [pc, #488]	@ (8000cfc <IMU_Execute+0x2d4>)
 8000b12:	f7ff fe86 	bl	8000822 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_MAG_X, MED_IMU_MAG_X.MED_FilteredData);
 8000b16:	4b79      	ldr	r3, [pc, #484]	@ (8000cfc <IMU_Execute+0x2d4>)
 8000b18:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4878      	ldr	r0, [pc, #480]	@ (8000d00 <IMU_Execute+0x2d8>)
 8000b20:	f7ff fddc 	bl	80006dc <AVG_Filter_s16>
	MED_Filter_s16(&MED_IMU_MAG_Y, ImuHandle->AllRawData.Magnetometer.Y_Axis);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4875      	ldr	r0, [pc, #468]	@ (8000d04 <IMU_Execute+0x2dc>)
 8000b2e:	f7ff fe78 	bl	8000822 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_MAG_Y, MED_IMU_MAG_Y.MED_FilteredData);
 8000b32:	4b74      	ldr	r3, [pc, #464]	@ (8000d04 <IMU_Execute+0x2dc>)
 8000b34:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4873      	ldr	r0, [pc, #460]	@ (8000d08 <IMU_Execute+0x2e0>)
 8000b3c:	f7ff fdce 	bl	80006dc <AVG_Filter_s16>
	MED_Filter_s16(&MED_IMU_MAG_Z, ImuHandle->AllRawData.Magnetometer.Z_Axis);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000b46:	4619      	mov	r1, r3
 8000b48:	4870      	ldr	r0, [pc, #448]	@ (8000d0c <IMU_Execute+0x2e4>)
 8000b4a:	f7ff fe6a 	bl	8000822 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_MAG_Z, MED_IMU_MAG_Z.MED_FilteredData);
 8000b4e:	4b6f      	ldr	r3, [pc, #444]	@ (8000d0c <IMU_Execute+0x2e4>)
 8000b50:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b54:	4619      	mov	r1, r3
 8000b56:	486e      	ldr	r0, [pc, #440]	@ (8000d10 <IMU_Execute+0x2e8>)
 8000b58:	f7ff fdc0 	bl	80006dc <AVG_Filter_s16>

	ImuHandle->FilteredData.Accelerometer.X_Axis = AVG_IMU_ACC_X.AVG_FilteredData;
 8000b5c:	4b5c      	ldr	r3, [pc, #368]	@ (8000cd0 <IMU_Execute+0x2a8>)
 8000b5e:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	825a      	strh	r2, [r3, #18]
	ImuHandle->FilteredData.Accelerometer.Y_Axis = AVG_IMU_ACC_Y.AVG_FilteredData;
 8000b66:	4b5c      	ldr	r3, [pc, #368]	@ (8000cd8 <IMU_Execute+0x2b0>)
 8000b68:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	829a      	strh	r2, [r3, #20]
	ImuHandle->FilteredData.Accelerometer.Z_Axis = AVG_IMU_ACC_Z.AVG_FilteredData;
 8000b70:	4b5b      	ldr	r3, [pc, #364]	@ (8000ce0 <IMU_Execute+0x2b8>)
 8000b72:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	82da      	strh	r2, [r3, #22]
	ImuHandle->FilteredData.Gyroscope.X_Axis     = AVG_IMU_GYR_X.AVG_FilteredData;
 8000b7a:	4b5b      	ldr	r3, [pc, #364]	@ (8000ce8 <IMU_Execute+0x2c0>)
 8000b7c:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	831a      	strh	r2, [r3, #24]
	ImuHandle->FilteredData.Gyroscope.Y_Axis     = AVG_IMU_GYR_Y.AVG_FilteredData;
 8000b84:	4b5a      	ldr	r3, [pc, #360]	@ (8000cf0 <IMU_Execute+0x2c8>)
 8000b86:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	835a      	strh	r2, [r3, #26]
	ImuHandle->FilteredData.Gyroscope.Z_Axis     = AVG_IMU_GYR_Z.AVG_FilteredData;
 8000b8e:	4b5a      	ldr	r3, [pc, #360]	@ (8000cf8 <IMU_Execute+0x2d0>)
 8000b90:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	839a      	strh	r2, [r3, #28]
	ImuHandle->FilteredData.Magnetometer.X_Axis  = AVG_IMU_MAG_X.AVG_FilteredData;
 8000b98:	4b59      	ldr	r3, [pc, #356]	@ (8000d00 <IMU_Execute+0x2d8>)
 8000b9a:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	83da      	strh	r2, [r3, #30]
	ImuHandle->FilteredData.Magnetometer.Y_Axis  = AVG_IMU_MAG_Y.AVG_FilteredData;
 8000ba2:	4b59      	ldr	r3, [pc, #356]	@ (8000d08 <IMU_Execute+0x2e0>)
 8000ba4:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	841a      	strh	r2, [r3, #32]
	ImuHandle->FilteredData.Magnetometer.Z_Axis  = AVG_IMU_MAG_Z.AVG_FilteredData;
 8000bac:	4b58      	ldr	r3, [pc, #352]	@ (8000d10 <IMU_Execute+0x2e8>)
 8000bae:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	845a      	strh	r2, [r3, #34]	@ 0x22

	ImuHandle->CalculatedData.Accelerometer.X_Axis = (float)(ImuHandle->FilteredData.Accelerometer.X_Axis / ImuHandle->CalcConst.ACC_1MpS2_LSB);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000bbc:	ee07 3a90 	vmov	s15, r3
 8000bc0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8000bca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	ImuHandle->CalculatedData.Accelerometer.Y_Axis = (float)(ImuHandle->FilteredData.Accelerometer.Y_Axis / ImuHandle->CalcConst.ACC_1MpS2_LSB);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000bda:	ee07 3a90 	vmov	s15, r3
 8000bde:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8000be8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	ImuHandle->CalculatedData.Accelerometer.Z_Axis = (float)(ImuHandle->FilteredData.Accelerometer.Z_Axis / ImuHandle->CalcConst.ACC_1MpS2_LSB);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000bf8:	ee07 3a90 	vmov	s15, r3
 8000bfc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8000c06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	ImuHandle->CalculatedData.Gyroscope.X_Axis     = (float)(ImuHandle->FilteredData.Gyroscope.X_Axis / ImuHandle->CalcConst.GYR_1RPS_LSB);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000c16:	ee07 3a90 	vmov	s15, r3
 8000c1a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8000c24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	ImuHandle->CalculatedData.Gyroscope.Y_Axis     = (float)(ImuHandle->FilteredData.Gyroscope.Y_Axis / ImuHandle->CalcConst.GYR_1RPS_LSB);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8000c34:	ee07 3a90 	vmov	s15, r3
 8000c38:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8000c42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	ImuHandle->CalculatedData.Gyroscope.Z_Axis     = (float)(ImuHandle->FilteredData.Gyroscope.Z_Axis / ImuHandle->CalcConst.GYR_1RPS_LSB);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8000c52:	ee07 3a90 	vmov	s15, r3
 8000c56:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8000c60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	ImuHandle->CalculatedData.Magnetometer.X_Axis  = (float)((ImuHandle->FilteredData.Magnetometer.X_Axis / ImuHandle->CalcConst.MAG_1uT_LSB));
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000c70:	ee07 3a90 	vmov	s15, r3
 8000c74:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8000c7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	ImuHandle->CalculatedData.Magnetometer.Y_Axis  = (float)((ImuHandle->FilteredData.Magnetometer.Y_Axis / ImuHandle->CalcConst.MAG_1uT_LSB));
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000c8e:	ee07 3a90 	vmov	s15, r3
 8000c92:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8000c9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	ImuHandle->CalculatedData.Magnetometer.Z_Axis  = (float)((ImuHandle->FilteredData.Magnetometer.Z_Axis / ImuHandle->CalcConst.MAG_1uT_LSB));
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8000cac:	ee07 3a90 	vmov	s15, r3
 8000cb0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8000cba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
}
 8000cc4:	bf00      	nop
 8000cc6:	3710      	adds	r7, #16
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000700 	.word	0x20000700
 8000cd0:	20000604 	.word	0x20000604
 8000cd4:	20000714 	.word	0x20000714
 8000cd8:	20000620 	.word	0x20000620
 8000cdc:	20000728 	.word	0x20000728
 8000ce0:	2000063c 	.word	0x2000063c
 8000ce4:	2000073c 	.word	0x2000073c
 8000ce8:	20000658 	.word	0x20000658
 8000cec:	20000750 	.word	0x20000750
 8000cf0:	20000674 	.word	0x20000674
 8000cf4:	20000764 	.word	0x20000764
 8000cf8:	20000690 	.word	0x20000690
 8000cfc:	20000778 	.word	0x20000778
 8000d00:	200006ac 	.word	0x200006ac
 8000d04:	2000078c 	.word	0x2000078c
 8000d08:	200006c8 	.word	0x200006c8
 8000d0c:	200007a0 	.word	0x200007a0
 8000d10:	200006e4 	.word	0x200006e4

08000d14 <IMU_PopulateData>:

void IMU_PopulateData(IMU_TypeDef_T *ImuHandle, uint8_t ImuSensorNo){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	70fb      	strb	r3, [r7, #3]
	BNO055_Sensor_T *imuSensor;
	imuSensor = IMU_GetSensorHandle(ImuSensorNo);
 8000d20:	78fb      	ldrb	r3, [r7, #3]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 f832 	bl	8000d8c <IMU_GetSensorHandle>
 8000d28:	60f8      	str	r0, [r7, #12]

	ImuHandle->AllRawData.Accelerometer.X_Axis = (int16_t)imuSensor->ImuData.ACC_X;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	801a      	strh	r2, [r3, #0]
	ImuHandle->AllRawData.Accelerometer.Y_Axis = (int16_t)imuSensor->ImuData.ACC_Y;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	805a      	strh	r2, [r3, #2]
	ImuHandle->AllRawData.Accelerometer.Z_Axis = (int16_t)imuSensor->ImuData.ACC_Z;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	809a      	strh	r2, [r3, #4]
	ImuHandle->AllRawData.Gyroscope.X_Axis     = imuSensor->ImuData.GYR_X;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	80da      	strh	r2, [r3, #6]
	ImuHandle->AllRawData.Gyroscope.Y_Axis     = imuSensor->ImuData.GYR_Y;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	811a      	strh	r2, [r3, #8]
	ImuHandle->AllRawData.Gyroscope.Z_Axis     = imuSensor->ImuData.GYR_Z;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	815a      	strh	r2, [r3, #10]
	ImuHandle->AllRawData.Magnetometer.X_Axis  = imuSensor->ImuData.MAG_X;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	819a      	strh	r2, [r3, #12]
	ImuHandle->AllRawData.Magnetometer.Y_Axis  = imuSensor->ImuData.MAG_Y;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	81da      	strh	r2, [r3, #14]
	ImuHandle->AllRawData.Magnetometer.Z_Axis  = imuSensor->ImuData.MAG_Z;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	821a      	strh	r2, [r3, #16]
}
 8000d84:	bf00      	nop
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <IMU_GetSensorHandle>:

BNO055_Sensor_T* IMU_GetSensorHandle(uint8_t sensorNo){
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
	switch(sensorNo){
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	2b03      	cmp	r3, #3
 8000d9a:	d00a      	beq.n	8000db2 <IMU_GetSensorHandle+0x26>
 8000d9c:	2b03      	cmp	r3, #3
 8000d9e:	dc06      	bgt.n	8000dae <IMU_GetSensorHandle+0x22>
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d002      	beq.n	8000daa <IMU_GetSensorHandle+0x1e>
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d006      	beq.n	8000db6 <IMU_GetSensorHandle+0x2a>
 8000da8:	e001      	b.n	8000dae <IMU_GetSensorHandle+0x22>
		case 1 : return &BNO055_Sensor_1;break;
 8000daa:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <IMU_GetSensorHandle+0x38>)
 8000dac:	e004      	b.n	8000db8 <IMU_GetSensorHandle+0x2c>
		case 2 : break;
		case 3 : break;
		default : return &BNO055_Sensor_1;
 8000dae:	4b05      	ldr	r3, [pc, #20]	@ (8000dc4 <IMU_GetSensorHandle+0x38>)
 8000db0:	e002      	b.n	8000db8 <IMU_GetSensorHandle+0x2c>
		case 3 : break;
 8000db2:	bf00      	nop
 8000db4:	e000      	b.n	8000db8 <IMU_GetSensorHandle+0x2c>
		case 2 : break;
 8000db6:	bf00      	nop
	}
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	20000820 	.word	0x20000820

08000dc8 <BNO055_Init>:
BNO055_Sensor_T BNO055_Sensor_1;

/** Brief description which ends at this dot. Details follow
 *  here.
 */
void BNO055_Init(BNO055_Sensor_T *handle, uint8_t I2C_No, uint8_t I2C_Adress, void* ResetGPIOPort, uint16_t ResetGPIOPin){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	72fb      	strb	r3, [r7, #11]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	72bb      	strb	r3, [r7, #10]
	handle->I2C_No = I2C_No;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	7afa      	ldrb	r2, [r7, #11]
 8000dde:	701a      	strb	r2, [r3, #0]
	handle->Chip_I2C_Address = I2C_Adress;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	7aba      	ldrb	r2, [r7, #10]
 8000de4:	705a      	strb	r2, [r3, #1]
	handle->ResetPort = ResetGPIOPort;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	605a      	str	r2, [r3, #4]
	handle->ResetPin = ResetGPIOPin;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	8b3a      	ldrh	r2, [r7, #24]
 8000df0:	811a      	strh	r2, [r3, #8]
	handle->CalcConst.ACC_1MpS2_LSB = 100;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	2264      	movs	r2, #100	@ 0x64
 8000df6:	845a      	strh	r2, [r3, #34]	@ 0x22
	handle->CalcConst.GYR_1RPS_LSB = 900;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f44f 7261 	mov.w	r2, #900	@ 0x384
 8000dfe:	84da      	strh	r2, [r3, #38]	@ 0x26
	handle->CalcConst.MAG_1uT_LSB = 16;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	2210      	movs	r2, #16
 8000e04:	849a      	strh	r2, [r3, #36]	@ 0x24
	handle->CalcConst.ACCRange_G = 4;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	2204      	movs	r2, #4
 8000e0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	handle->CalcConst.GYRRange_DPS = 500;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000e14:	855a      	strh	r2, [r3, #42]	@ 0x2a

	BNO055_Reset(handle);
 8000e16:	68f8      	ldr	r0, [r7, #12]
 8000e18:	f000 f843 	bl	8000ea2 <BNO055_Reset>

	BNO055_Set_OperationMode(handle, BNO055_DATA_OPR_MODE_NDOF);
 8000e1c:	210c      	movs	r1, #12
 8000e1e:	68f8      	ldr	r0, [r7, #12]
 8000e20:	f000 f85e 	bl	8000ee0 <BNO055_Set_OperationMode>
	HAL_Delay(25);
 8000e24:	2019      	movs	r0, #25
 8000e26:	f001 fa7b 	bl	8002320 <HAL_Delay>
//    		BNO055_GetCalibrationData(handle);
//    		break;
//    	}
//    }

    BNO055_Set_OperationMode(handle, BNO055_DATA_OPR_MODE_OPR);
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	68f8      	ldr	r0, [r7, #12]
 8000e2e:	f000 f857 	bl	8000ee0 <BNO055_Set_OperationMode>
    HAL_Delay(25);
 8000e32:	2019      	movs	r0, #25
 8000e34:	f001 fa74 	bl	8002320 <HAL_Delay>

	BNO055_Set_PowerMode(handle, BNO055_DATA_PWR_MODE_NORMAL);
 8000e38:	2100      	movs	r1, #0
 8000e3a:	68f8      	ldr	r0, [r7, #12]
 8000e3c:	f000 f888 	bl	8000f50 <BNO055_Set_PowerMode>
//	BNO055_GetCalibrationData(handle);
	BNO055_Set_DataUnit(handle, BNO055_DATA_UNIT_ACC_mG | BNO055_DATA_UNIT_ORI_AND);
 8000e40:	2181      	movs	r1, #129	@ 0x81
 8000e42:	68f8      	ldr	r0, [r7, #12]
 8000e44:	f000 fc0a 	bl	800165c <BNO055_Set_DataUnit>

	BNO055_Get_DataUnit(handle);
 8000e48:	68f8      	ldr	r0, [r7, #12]
 8000e4a:	f000 fc32 	bl	80016b2 <BNO055_Get_DataUnit>

	BNO055_Set_ACC_Mode(handle, BNO055_DATA_ACC_RANGE_4G | BNO055_DATA_ACC_BW_62p5Hz |  BNO055_DATA_ACC_MODE_NORMAL);
 8000e4e:	210d      	movs	r1, #13
 8000e50:	68f8      	ldr	r0, [r7, #12]
 8000e52:	f000 f8b5 	bl	8000fc0 <BNO055_Set_ACC_Mode>

	BNO055_Get_ACC_Mode(handle);
 8000e56:	68f8      	ldr	r0, [r7, #12]
 8000e58:	f000 f8ea 	bl	8001030 <BNO055_Get_ACC_Mode>

	BNO055_Set_MAG_Mode(handle, BNO055_DATA_MAG_BW_10Hz | BNO055_DATA_MAG_MODE_HIGHACCURACY | BNO055_DATA_MAG_PWRMODE_NORMAL);
 8000e5c:	211b      	movs	r1, #27
 8000e5e:	68f8      	ldr	r0, [r7, #12]
 8000e60:	f000 f91c 	bl	800109c <BNO055_Set_MAG_Mode>

	BNO055_Set_GYR_Mode_1(handle, BNO055_DATA_GYR_RANGE_500DPS | BNO055_DATA_GYR_BW_12Hz);
 8000e64:	212a      	movs	r1, #42	@ 0x2a
 8000e66:	68f8      	ldr	r0, [r7, #12]
 8000e68:	f000 f950 	bl	800110c <BNO055_Set_GYR_Mode_1>

	BNO055_Set_GYR_Mode_2(handle, BNO055_DATA_GYR_MODE_NORMAL);
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	68f8      	ldr	r0, [r7, #12]
 8000e70:	f000 f984 	bl	800117c <BNO055_Set_GYR_Mode_2>


	BNO055_Set_OperationMode(handle, BNO055_DATA_OPR_MODE_AMG);
 8000e74:	2107      	movs	r1, #7
 8000e76:	68f8      	ldr	r0, [r7, #12]
 8000e78:	f000 f832 	bl	8000ee0 <BNO055_Set_OperationMode>

	HAL_Delay(100);
 8000e7c:	2064      	movs	r0, #100	@ 0x64
 8000e7e:	f001 fa4f 	bl	8002320 <HAL_Delay>

	BNO055_Get_ChipID(handle);
 8000e82:	68f8      	ldr	r0, [r7, #12]
 8000e84:	f000 f9b2 	bl	80011ec <BNO055_Get_ChipID>
	BNO055_Get_ACC_ID(handle);
 8000e88:	68f8      	ldr	r0, [r7, #12]
 8000e8a:	f000 f9f0 	bl	800126e <BNO055_Get_ACC_ID>
	BNO055_Get_GYR_ID(handle);
 8000e8e:	68f8      	ldr	r0, [r7, #12]
 8000e90:	f000 fa2e 	bl	80012f0 <BNO055_Get_GYR_ID>
	BNO055_Get_MAG_ID(handle);
 8000e94:	68f8      	ldr	r0, [r7, #12]
 8000e96:	f000 fa6d 	bl	8001374 <BNO055_Get_MAG_ID>
}
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <BNO055_Reset>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
void BNO055_Reset(BNO055_Sensor_T *handle){
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(handle->ResetPort, handle->ResetPin, RESET);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6858      	ldr	r0, [r3, #4]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	891b      	ldrh	r3, [r3, #8]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f003 f8a5 	bl	8004004 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000eba:	2064      	movs	r0, #100	@ 0x64
 8000ebc:	f001 fa30 	bl	8002320 <HAL_Delay>
	HAL_GPIO_WritePin(handle->ResetPort, handle->ResetPin, SET);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6858      	ldr	r0, [r3, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	891b      	ldrh	r3, [r3, #8]
 8000ec8:	2201      	movs	r2, #1
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f003 f89a 	bl	8004004 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000ed0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ed4:	f001 fa24 	bl	8002320 <HAL_Delay>
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <BNO055_Set_OperationMode>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_OperationMode(BNO055_Sensor_T *handle, uint8_t mode){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af02      	add	r7, sp, #8
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2], res;
	TxBuff[0] = BNO055_REG_ADDRESS_OPR_MODE;
 8000eec:	233d      	movs	r3, #61	@ 0x3d
 8000eee:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = mode;
 8000ef0:	78fb      	ldrb	r3, [r7, #3]
 8000ef2:	737b      	strb	r3, [r7, #13]

    if(!BNO055_Get_PageID(handle)){
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f000 fc0b 	bl	8001710 <BNO055_Get_PageID>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d121      	bne.n	8000f44 <BNO055_Set_OperationMode+0x64>
    	if(!handle->PageID){
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d10a      	bne.n	8000f20 <BNO055_Set_OperationMode+0x40>
    		return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8000f0a:	f107 010c 	add.w	r1, r7, #12
 8000f0e:	2300      	movs	r3, #0
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	2300      	movs	r3, #0
 8000f14:	2202      	movs	r2, #2
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f000 fc59 	bl	80017ce <BNO055_SendReceive>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	e013      	b.n	8000f48 <BNO055_Set_OperationMode+0x68>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0)){
 8000f20:	2100      	movs	r1, #0
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f000 fc12 	bl	800174c <BNO055_Set_PageID>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d10c      	bne.n	8000f48 <BNO055_Set_OperationMode+0x68>
    			return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8000f2e:	f107 010c 	add.w	r1, r7, #12
 8000f32:	2300      	movs	r3, #0
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	2300      	movs	r3, #0
 8000f38:	2202      	movs	r2, #2
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f000 fc47 	bl	80017ce <BNO055_SendReceive>
 8000f40:	4603      	mov	r3, r0
 8000f42:	e001      	b.n	8000f48 <BNO055_Set_OperationMode+0x68>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e7ff      	b.n	8000f48 <BNO055_Set_OperationMode+0x68>
    }
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <BNO055_Set_PowerMode>:
}

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_PowerMode(BNO055_Sensor_T *handle, uint8_t mode){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af02      	add	r7, sp, #8
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = BNO055_REG_ADDRESS_PWR_MODE;
 8000f5c:	233e      	movs	r3, #62	@ 0x3e
 8000f5e:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = mode;
 8000f60:	78fb      	ldrb	r3, [r7, #3]
 8000f62:	737b      	strb	r3, [r7, #13]

    if(!BNO055_Get_PageID(handle)){
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f000 fbd3 	bl	8001710 <BNO055_Get_PageID>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d121      	bne.n	8000fb4 <BNO055_Set_PowerMode+0x64>
    	if(!handle->PageID){
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d10a      	bne.n	8000f90 <BNO055_Set_PowerMode+0x40>
    		return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8000f7a:	f107 010c 	add.w	r1, r7, #12
 8000f7e:	2300      	movs	r3, #0
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	2300      	movs	r3, #0
 8000f84:	2202      	movs	r2, #2
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f000 fc21 	bl	80017ce <BNO055_SendReceive>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	e013      	b.n	8000fb8 <BNO055_Set_PowerMode+0x68>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0)){
 8000f90:	2100      	movs	r1, #0
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f000 fbda 	bl	800174c <BNO055_Set_PageID>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d10c      	bne.n	8000fb8 <BNO055_Set_PowerMode+0x68>
    			return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8000f9e:	f107 010c 	add.w	r1, r7, #12
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	2202      	movs	r2, #2
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 fc0f 	bl	80017ce <BNO055_SendReceive>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	e001      	b.n	8000fb8 <BNO055_Set_PowerMode+0x68>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e7ff      	b.n	8000fb8 <BNO055_Set_PowerMode+0x68>
    }
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <BNO055_Set_ACC_Mode>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_ACC_Mode(BNO055_Sensor_T *handle, uint8_t mode){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af02      	add	r7, sp, #8
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = BNO055_REG_ADDRESS_ACC_CONFIG;
 8000fcc:	2308      	movs	r3, #8
 8000fce:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = mode;
 8000fd0:	78fb      	ldrb	r3, [r7, #3]
 8000fd2:	737b      	strb	r3, [r7, #13]

    if(!BNO055_Get_PageID(handle)){
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f000 fb9b 	bl	8001710 <BNO055_Get_PageID>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d121      	bne.n	8001024 <BNO055_Set_ACC_Mode+0x64>
    	if(handle->PageID){
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d00a      	beq.n	8001000 <BNO055_Set_ACC_Mode+0x40>
    		return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8000fea:	f107 010c 	add.w	r1, r7, #12
 8000fee:	2300      	movs	r3, #0
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f000 fbe9 	bl	80017ce <BNO055_SendReceive>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	e013      	b.n	8001028 <BNO055_Set_ACC_Mode+0x68>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_1)){
 8001000:	2101      	movs	r1, #1
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f000 fba2 	bl	800174c <BNO055_Set_PageID>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d10c      	bne.n	8001028 <BNO055_Set_ACC_Mode+0x68>
    			return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 800100e:	f107 010c 	add.w	r1, r7, #12
 8001012:	2300      	movs	r3, #0
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	2300      	movs	r3, #0
 8001018:	2202      	movs	r2, #2
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 fbd7 	bl	80017ce <BNO055_SendReceive>
 8001020:	4603      	mov	r3, r0
 8001022:	e001      	b.n	8001028 <BNO055_Set_ACC_Mode+0x68>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e7ff      	b.n	8001028 <BNO055_Set_ACC_Mode+0x68>
    }
}
 8001028:	4618      	mov	r0, r3
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <BNO055_Get_ACC_Mode>:


/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_ACC_Mode(BNO055_Sensor_T *handle){
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af02      	add	r7, sp, #8
 8001036:	6078      	str	r0, [r7, #4]
	uint8_t TxBuff[1], RxBuff[1];
	TxBuff[0] = BNO055_REG_ADDRESS_ACC_CONFIG;
 8001038:	2308      	movs	r3, #8
 800103a:	733b      	strb	r3, [r7, #12]

    if(!BNO055_Get_PageID(handle)){
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 fb67 	bl	8001710 <BNO055_Get_PageID>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d123      	bne.n	8001090 <BNO055_Get_ACC_Mode+0x60>
    	if(handle->PageID){
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800104e:	2b00      	cmp	r3, #0
 8001050:	d00b      	beq.n	800106a <BNO055_Get_ACC_Mode+0x3a>
    		return BNO055_SendReceive(handle,TxBuff, 1, RxBuff, 1);
 8001052:	f107 0308 	add.w	r3, r7, #8
 8001056:	f107 010c 	add.w	r1, r7, #12
 800105a:	2201      	movs	r2, #1
 800105c:	9200      	str	r2, [sp, #0]
 800105e:	2201      	movs	r2, #1
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 fbb4 	bl	80017ce <BNO055_SendReceive>
 8001066:	4603      	mov	r3, r0
 8001068:	e014      	b.n	8001094 <BNO055_Get_ACC_Mode+0x64>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_1)){
 800106a:	2101      	movs	r1, #1
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f000 fb6d 	bl	800174c <BNO055_Set_PageID>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d10d      	bne.n	8001094 <BNO055_Get_ACC_Mode+0x64>
    			return BNO055_SendReceive(handle,TxBuff, 1, RxBuff, 1);
 8001078:	f107 0308 	add.w	r3, r7, #8
 800107c:	f107 010c 	add.w	r1, r7, #12
 8001080:	2201      	movs	r2, #1
 8001082:	9200      	str	r2, [sp, #0]
 8001084:	2201      	movs	r2, #1
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f000 fba1 	bl	80017ce <BNO055_SendReceive>
 800108c:	4603      	mov	r3, r0
 800108e:	e001      	b.n	8001094 <BNO055_Get_ACC_Mode+0x64>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e7ff      	b.n	8001094 <BNO055_Get_ACC_Mode+0x64>
    }
}
 8001094:	4618      	mov	r0, r3
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <BNO055_Set_MAG_Mode>:


/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_MAG_Mode(BNO055_Sensor_T *handle, uint8_t mode){
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af02      	add	r7, sp, #8
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = BNO055_REG_ADDRESS_MAG_CONFIG;
 80010a8:	2309      	movs	r3, #9
 80010aa:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = mode;
 80010ac:	78fb      	ldrb	r3, [r7, #3]
 80010ae:	737b      	strb	r3, [r7, #13]

    if(!BNO055_Get_PageID(handle)){
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 fb2d 	bl	8001710 <BNO055_Get_PageID>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d121      	bne.n	8001100 <BNO055_Set_MAG_Mode+0x64>
    	if(handle->PageID){
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d00a      	beq.n	80010dc <BNO055_Set_MAG_Mode+0x40>
    		return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 80010c6:	f107 010c 	add.w	r1, r7, #12
 80010ca:	2300      	movs	r3, #0
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	2300      	movs	r3, #0
 80010d0:	2202      	movs	r2, #2
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f000 fb7b 	bl	80017ce <BNO055_SendReceive>
 80010d8:	4603      	mov	r3, r0
 80010da:	e013      	b.n	8001104 <BNO055_Set_MAG_Mode+0x68>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_1)){
 80010dc:	2101      	movs	r1, #1
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f000 fb34 	bl	800174c <BNO055_Set_PageID>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10c      	bne.n	8001104 <BNO055_Set_MAG_Mode+0x68>
    			return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 80010ea:	f107 010c 	add.w	r1, r7, #12
 80010ee:	2300      	movs	r3, #0
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	2300      	movs	r3, #0
 80010f4:	2202      	movs	r2, #2
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f000 fb69 	bl	80017ce <BNO055_SendReceive>
 80010fc:	4603      	mov	r3, r0
 80010fe:	e001      	b.n	8001104 <BNO055_Set_MAG_Mode+0x68>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e7ff      	b.n	8001104 <BNO055_Set_MAG_Mode+0x68>
    }
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <BNO055_Set_GYR_Mode_1>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_GYR_Mode_1(BNO055_Sensor_T *handle, uint8_t mode){
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af02      	add	r7, sp, #8
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = BNO055_REG_ADDRESS_GYR_CONFIG_1;
 8001118:	230a      	movs	r3, #10
 800111a:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = mode;
 800111c:	78fb      	ldrb	r3, [r7, #3]
 800111e:	737b      	strb	r3, [r7, #13]

    if(!BNO055_Get_PageID(handle)){
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f000 faf5 	bl	8001710 <BNO055_Get_PageID>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d121      	bne.n	8001170 <BNO055_Set_GYR_Mode_1+0x64>
    	if(handle->PageID){
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00a      	beq.n	800114c <BNO055_Set_GYR_Mode_1+0x40>
    		return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8001136:	f107 010c 	add.w	r1, r7, #12
 800113a:	2300      	movs	r3, #0
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	2300      	movs	r3, #0
 8001140:	2202      	movs	r2, #2
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 fb43 	bl	80017ce <BNO055_SendReceive>
 8001148:	4603      	mov	r3, r0
 800114a:	e013      	b.n	8001174 <BNO055_Set_GYR_Mode_1+0x68>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_1)){
 800114c:	2101      	movs	r1, #1
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f000 fafc 	bl	800174c <BNO055_Set_PageID>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10c      	bne.n	8001174 <BNO055_Set_GYR_Mode_1+0x68>
    			return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 800115a:	f107 010c 	add.w	r1, r7, #12
 800115e:	2300      	movs	r3, #0
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	2300      	movs	r3, #0
 8001164:	2202      	movs	r2, #2
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 fb31 	bl	80017ce <BNO055_SendReceive>
 800116c:	4603      	mov	r3, r0
 800116e:	e001      	b.n	8001174 <BNO055_Set_GYR_Mode_1+0x68>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e7ff      	b.n	8001174 <BNO055_Set_GYR_Mode_1+0x68>
    }
}
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <BNO055_Set_GYR_Mode_2>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_GYR_Mode_2(BNO055_Sensor_T *handle, uint8_t mode){
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af02      	add	r7, sp, #8
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = BNO055_REG_ADDRESS_GYR_CONFIG_2;
 8001188:	230b      	movs	r3, #11
 800118a:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = mode;
 800118c:	78fb      	ldrb	r3, [r7, #3]
 800118e:	737b      	strb	r3, [r7, #13]

    if(!BNO055_Get_PageID(handle)){
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f000 fabd 	bl	8001710 <BNO055_Get_PageID>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d121      	bne.n	80011e0 <BNO055_Set_GYR_Mode_2+0x64>
    	if(handle->PageID){
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d00a      	beq.n	80011bc <BNO055_Set_GYR_Mode_2+0x40>
    		return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 80011a6:	f107 010c 	add.w	r1, r7, #12
 80011aa:	2300      	movs	r3, #0
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	2300      	movs	r3, #0
 80011b0:	2202      	movs	r2, #2
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f000 fb0b 	bl	80017ce <BNO055_SendReceive>
 80011b8:	4603      	mov	r3, r0
 80011ba:	e013      	b.n	80011e4 <BNO055_Set_GYR_Mode_2+0x68>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_1)){
 80011bc:	2101      	movs	r1, #1
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f000 fac4 	bl	800174c <BNO055_Set_PageID>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d10c      	bne.n	80011e4 <BNO055_Set_GYR_Mode_2+0x68>
    			return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 80011ca:	f107 010c 	add.w	r1, r7, #12
 80011ce:	2300      	movs	r3, #0
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	2300      	movs	r3, #0
 80011d4:	2202      	movs	r2, #2
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f000 faf9 	bl	80017ce <BNO055_SendReceive>
 80011dc:	4603      	mov	r3, r0
 80011de:	e001      	b.n	80011e4 <BNO055_Set_GYR_Mode_2+0x68>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e7ff      	b.n	80011e4 <BNO055_Set_GYR_Mode_2+0x68>
    }
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <BNO055_Get_ChipID>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_ChipID(BNO055_Sensor_T *handle){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af02      	add	r7, sp, #8
 80011f2:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[1];
	BNO055_ReturnTypeDef_T res= BNO055_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	73fb      	strb	r3, [r7, #15]
	Txbuff[0] = BNO055_REG_ADDRESS_CHIP_ID;
 80011f8:	2300      	movs	r3, #0
 80011fa:	733b      	strb	r3, [r7, #12]

    if(!BNO055_Get_PageID(handle)){
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f000 fa87 	bl	8001710 <BNO055_Get_PageID>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d125      	bne.n	8001254 <BNO055_Get_ChipID+0x68>
    	if(!handle->PageID){
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800120e:	2b00      	cmp	r3, #0
 8001210:	d10c      	bne.n	800122c <BNO055_Get_ChipID+0x40>
    		res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 8001212:	f107 0308 	add.w	r3, r7, #8
 8001216:	f107 010c 	add.w	r1, r7, #12
 800121a:	2201      	movs	r2, #1
 800121c:	9200      	str	r2, [sp, #0]
 800121e:	2201      	movs	r2, #1
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f000 fad4 	bl	80017ce <BNO055_SendReceive>
 8001226:	4603      	mov	r3, r0
 8001228:	73fb      	strb	r3, [r7, #15]
 800122a:	e015      	b.n	8001258 <BNO055_Get_ChipID+0x6c>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0)){
 800122c:	2100      	movs	r1, #0
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 fa8c 	bl	800174c <BNO055_Set_PageID>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d10e      	bne.n	8001258 <BNO055_Get_ChipID+0x6c>
    			res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 800123a:	f107 0308 	add.w	r3, r7, #8
 800123e:	f107 010c 	add.w	r1, r7, #12
 8001242:	2201      	movs	r2, #1
 8001244:	9200      	str	r2, [sp, #0]
 8001246:	2201      	movs	r2, #1
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f000 fac0 	bl	80017ce <BNO055_SendReceive>
 800124e:	4603      	mov	r3, r0
 8001250:	73fb      	strb	r3, [r7, #15]
 8001252:	e001      	b.n	8001258 <BNO055_Get_ChipID+0x6c>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e006      	b.n	8001266 <BNO055_Get_ChipID+0x7a>
    }

    if(!res)
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d102      	bne.n	8001264 <BNO055_Get_ChipID+0x78>
     	handle->IDs.CHIP_ID = RxBuff[0];
 800125e:	7a3a      	ldrb	r2, [r7, #8]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	779a      	strb	r2, [r3, #30]

     return res;
 8001264:	7bfb      	ldrb	r3, [r7, #15]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <BNO055_Get_ACC_ID>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_ACC_ID(BNO055_Sensor_T *handle){
 800126e:	b580      	push	{r7, lr}
 8001270:	b086      	sub	sp, #24
 8001272:	af02      	add	r7, sp, #8
 8001274:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[1];
	BNO055_ReturnTypeDef_T res= BNO055_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	73fb      	strb	r3, [r7, #15]
	Txbuff[0] = BNO055_REG_ADDRESS_ACC_ID;
 800127a:	2301      	movs	r3, #1
 800127c:	733b      	strb	r3, [r7, #12]

    if(!BNO055_Get_PageID(handle)){
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f000 fa46 	bl	8001710 <BNO055_Get_PageID>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d125      	bne.n	80012d6 <BNO055_Get_ACC_ID+0x68>
    	if(!handle->PageID){
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001290:	2b00      	cmp	r3, #0
 8001292:	d10c      	bne.n	80012ae <BNO055_Get_ACC_ID+0x40>
    		res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 8001294:	f107 0308 	add.w	r3, r7, #8
 8001298:	f107 010c 	add.w	r1, r7, #12
 800129c:	2201      	movs	r2, #1
 800129e:	9200      	str	r2, [sp, #0]
 80012a0:	2201      	movs	r2, #1
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 fa93 	bl	80017ce <BNO055_SendReceive>
 80012a8:	4603      	mov	r3, r0
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	e015      	b.n	80012da <BNO055_Get_ACC_ID+0x6c>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0)){
 80012ae:	2100      	movs	r1, #0
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f000 fa4b 	bl	800174c <BNO055_Set_PageID>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d10e      	bne.n	80012da <BNO055_Get_ACC_ID+0x6c>
    			res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 80012bc:	f107 0308 	add.w	r3, r7, #8
 80012c0:	f107 010c 	add.w	r1, r7, #12
 80012c4:	2201      	movs	r2, #1
 80012c6:	9200      	str	r2, [sp, #0]
 80012c8:	2201      	movs	r2, #1
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f000 fa7f 	bl	80017ce <BNO055_SendReceive>
 80012d0:	4603      	mov	r3, r0
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e001      	b.n	80012da <BNO055_Get_ACC_ID+0x6c>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e006      	b.n	80012e8 <BNO055_Get_ACC_ID+0x7a>
    }

    if(!res)
 80012da:	7bfb      	ldrb	r3, [r7, #15]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d102      	bne.n	80012e6 <BNO055_Get_ACC_ID+0x78>
     	handle->IDs.ACC_ID = RxBuff[0];
 80012e0:	7a3a      	ldrb	r2, [r7, #8]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	77da      	strb	r2, [r3, #31]

     return res;
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <BNO055_Get_GYR_ID>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_GYR_ID(BNO055_Sensor_T *handle){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af02      	add	r7, sp, #8
 80012f6:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[1];
	BNO055_ReturnTypeDef_T res= BNO055_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	73fb      	strb	r3, [r7, #15]
	Txbuff[0] = BNO055_REG_ADDRESS_GYR_ID;
 80012fc:	2303      	movs	r3, #3
 80012fe:	733b      	strb	r3, [r7, #12]

    if(!BNO055_Get_PageID(handle)){
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 fa05 	bl	8001710 <BNO055_Get_PageID>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d125      	bne.n	8001358 <BNO055_Get_GYR_ID+0x68>
    	if(!handle->PageID){
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001312:	2b00      	cmp	r3, #0
 8001314:	d10c      	bne.n	8001330 <BNO055_Get_GYR_ID+0x40>
    		res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 8001316:	f107 0308 	add.w	r3, r7, #8
 800131a:	f107 010c 	add.w	r1, r7, #12
 800131e:	2201      	movs	r2, #1
 8001320:	9200      	str	r2, [sp, #0]
 8001322:	2201      	movs	r2, #1
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f000 fa52 	bl	80017ce <BNO055_SendReceive>
 800132a:	4603      	mov	r3, r0
 800132c:	73fb      	strb	r3, [r7, #15]
 800132e:	e015      	b.n	800135c <BNO055_Get_GYR_ID+0x6c>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0)){
 8001330:	2100      	movs	r1, #0
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 fa0a 	bl	800174c <BNO055_Set_PageID>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d10e      	bne.n	800135c <BNO055_Get_GYR_ID+0x6c>
    			res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 800133e:	f107 0308 	add.w	r3, r7, #8
 8001342:	f107 010c 	add.w	r1, r7, #12
 8001346:	2201      	movs	r2, #1
 8001348:	9200      	str	r2, [sp, #0]
 800134a:	2201      	movs	r2, #1
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f000 fa3e 	bl	80017ce <BNO055_SendReceive>
 8001352:	4603      	mov	r3, r0
 8001354:	73fb      	strb	r3, [r7, #15]
 8001356:	e001      	b.n	800135c <BNO055_Get_GYR_ID+0x6c>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e007      	b.n	800136c <BNO055_Get_GYR_ID+0x7c>
    }

    if(!res)
 800135c:	7bfb      	ldrb	r3, [r7, #15]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d103      	bne.n	800136a <BNO055_Get_GYR_ID+0x7a>
    	handle->IDs.GYR_ID = RxBuff[0];
 8001362:	7a3a      	ldrb	r2, [r7, #8]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    return res;
 800136a:	7bfb      	ldrb	r3, [r7, #15]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <BNO055_Get_MAG_ID>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_MAG_ID(BNO055_Sensor_T *handle){
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af02      	add	r7, sp, #8
 800137a:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[1];
	BNO055_ReturnTypeDef_T res= BNO055_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	73fb      	strb	r3, [r7, #15]
	Txbuff[0] = BNO055_REG_ADDRESS_MAG_ID;
 8001380:	2302      	movs	r3, #2
 8001382:	733b      	strb	r3, [r7, #12]

    if(!BNO055_Get_PageID(handle)){
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 f9c3 	bl	8001710 <BNO055_Get_PageID>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d125      	bne.n	80013dc <BNO055_Get_MAG_ID+0x68>
    	if(!handle->PageID){
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001396:	2b00      	cmp	r3, #0
 8001398:	d10c      	bne.n	80013b4 <BNO055_Get_MAG_ID+0x40>
    		res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 800139a:	f107 0308 	add.w	r3, r7, #8
 800139e:	f107 010c 	add.w	r1, r7, #12
 80013a2:	2201      	movs	r2, #1
 80013a4:	9200      	str	r2, [sp, #0]
 80013a6:	2201      	movs	r2, #1
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f000 fa10 	bl	80017ce <BNO055_SendReceive>
 80013ae:	4603      	mov	r3, r0
 80013b0:	73fb      	strb	r3, [r7, #15]
 80013b2:	e015      	b.n	80013e0 <BNO055_Get_MAG_ID+0x6c>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0)){
 80013b4:	2100      	movs	r1, #0
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f000 f9c8 	bl	800174c <BNO055_Set_PageID>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10e      	bne.n	80013e0 <BNO055_Get_MAG_ID+0x6c>
    			res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	f107 010c 	add.w	r1, r7, #12
 80013ca:	2201      	movs	r2, #1
 80013cc:	9200      	str	r2, [sp, #0]
 80013ce:	2201      	movs	r2, #1
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f000 f9fc 	bl	80017ce <BNO055_SendReceive>
 80013d6:	4603      	mov	r3, r0
 80013d8:	73fb      	strb	r3, [r7, #15]
 80013da:	e001      	b.n	80013e0 <BNO055_Get_MAG_ID+0x6c>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e007      	b.n	80013f0 <BNO055_Get_MAG_ID+0x7c>
    }

    if(!res)
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d103      	bne.n	80013ee <BNO055_Get_MAG_ID+0x7a>
        handle->IDs.MAG_ID = RxBuff[0];
 80013e6:	7a3a      	ldrb	r2, [r7, #8]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f883 2020 	strb.w	r2, [r3, #32]

    return res;
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <BNO055_Get_ACC_Data>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_ACC_Data(BNO055_Sensor_T *handle){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af02      	add	r7, sp, #8
 80013fe:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[6];
	BNO055_ReturnTypeDef_T res = BNO055_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	75fb      	strb	r3, [r7, #23]
	Txbuff[0] = BNO055_REG_ADDRESS_ACC_X_DATA_LSB;
 8001404:	2308      	movs	r3, #8
 8001406:	753b      	strb	r3, [r7, #20]

	BNO055_Get_PageID(handle);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 f981 	bl	8001710 <BNO055_Get_PageID>
	if(!handle->PageID)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001414:	2b00      	cmp	r3, #0
 8001416:	d10c      	bne.n	8001432 <BNO055_Get_ACC_Data+0x3a>
		res =BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 6);
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	f107 0114 	add.w	r1, r7, #20
 8001420:	2206      	movs	r2, #6
 8001422:	9200      	str	r2, [sp, #0]
 8001424:	2201      	movs	r2, #1
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 f9d1 	bl	80017ce <BNO055_SendReceive>
 800142c:	4603      	mov	r3, r0
 800142e:	75fb      	strb	r3, [r7, #23]
 8001430:	e012      	b.n	8001458 <BNO055_Get_ACC_Data+0x60>
	else{
		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0))
 8001432:	2100      	movs	r1, #0
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f000 f989 	bl	800174c <BNO055_Set_PageID>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d10b      	bne.n	8001458 <BNO055_Get_ACC_Data+0x60>
			res =BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 6);
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	f107 0114 	add.w	r1, r7, #20
 8001448:	2206      	movs	r2, #6
 800144a:	9200      	str	r2, [sp, #0]
 800144c:	2201      	movs	r2, #1
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 f9bd 	bl	80017ce <BNO055_SendReceive>
 8001454:	4603      	mov	r3, r0
 8001456:	75fb      	strb	r3, [r7, #23]
	}
	if(!res){
 8001458:	7dfb      	ldrb	r3, [r7, #23]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d14d      	bne.n	80014fa <BNO055_Get_ACC_Data+0x102>
		if(!(RxBuff[1]>>7)){
 800145e:	7b7b      	ldrb	r3, [r7, #13]
 8001460:	b25b      	sxtb	r3, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	db0b      	blt.n	800147e <BNO055_Get_ACC_Data+0x86>
			if( ((RxBuff[1]>>6)&(0x01)) ){
 8001466:	7b7b      	ldrb	r3, [r7, #13]
 8001468:	099b      	lsrs	r3, r3, #6
 800146a:	b2db      	uxtb	r3, r3
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	2b00      	cmp	r3, #0
 8001472:	d004      	beq.n	800147e <BNO055_Get_ACC_Data+0x86>
				RxBuff[1] |= 0x80;
 8001474:	7b7b      	ldrb	r3, [r7, #13]
 8001476:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800147a:	b2db      	uxtb	r3, r3
 800147c:	737b      	strb	r3, [r7, #13]
			}
		}
		if(!(RxBuff[3]>>7)){
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	b25b      	sxtb	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	db0b      	blt.n	800149e <BNO055_Get_ACC_Data+0xa6>
			if( ((RxBuff[3]>>6)&(0x01)) ){
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	099b      	lsrs	r3, r3, #6
 800148a:	b2db      	uxtb	r3, r3
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	2b00      	cmp	r3, #0
 8001492:	d004      	beq.n	800149e <BNO055_Get_ACC_Data+0xa6>
				RxBuff[3] |= 0x80;
 8001494:	7bfb      	ldrb	r3, [r7, #15]
 8001496:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800149a:	b2db      	uxtb	r3, r3
 800149c:	73fb      	strb	r3, [r7, #15]
			}
		}
		if(!(RxBuff[5]>>7)){
 800149e:	7c7b      	ldrb	r3, [r7, #17]
 80014a0:	b25b      	sxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	db0b      	blt.n	80014be <BNO055_Get_ACC_Data+0xc6>
			if( ((RxBuff[5]>>6)&(0x01)) ){
 80014a6:	7c7b      	ldrb	r3, [r7, #17]
 80014a8:	099b      	lsrs	r3, r3, #6
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d004      	beq.n	80014be <BNO055_Get_ACC_Data+0xc6>
				RxBuff[5] |= 0x80;
 80014b4:	7c7b      	ldrb	r3, [r7, #17]
 80014b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	747b      	strb	r3, [r7, #17]
			}
		}
		handle->ImuData.ACC_X = (int16_t)((int16_t)(RxBuff[1]<<8) | RxBuff[0]);
 80014be:	7b7b      	ldrb	r3, [r7, #13]
 80014c0:	b21b      	sxth	r3, r3
 80014c2:	021b      	lsls	r3, r3, #8
 80014c4:	b21a      	sxth	r2, r3
 80014c6:	7b3b      	ldrb	r3, [r7, #12]
 80014c8:	b21b      	sxth	r3, r3
 80014ca:	4313      	orrs	r3, r2
 80014cc:	b21a      	sxth	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	819a      	strh	r2, [r3, #12]
		handle->ImuData.ACC_Y = (int16_t)((int16_t)(RxBuff[3]<<8) | RxBuff[2]);
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	b21b      	sxth	r3, r3
 80014d6:	021b      	lsls	r3, r3, #8
 80014d8:	b21a      	sxth	r2, r3
 80014da:	7bbb      	ldrb	r3, [r7, #14]
 80014dc:	b21b      	sxth	r3, r3
 80014de:	4313      	orrs	r3, r2
 80014e0:	b21a      	sxth	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	81da      	strh	r2, [r3, #14]
		handle->ImuData.ACC_Z = (int16_t)((int16_t)(RxBuff[5]<<8) | RxBuff[4]);
 80014e6:	7c7b      	ldrb	r3, [r7, #17]
 80014e8:	b21b      	sxth	r3, r3
 80014ea:	021b      	lsls	r3, r3, #8
 80014ec:	b21a      	sxth	r2, r3
 80014ee:	7c3b      	ldrb	r3, [r7, #16]
 80014f0:	b21b      	sxth	r3, r3
 80014f2:	4313      	orrs	r3, r2
 80014f4:	b21a      	sxth	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	821a      	strh	r2, [r3, #16]
	}
	return res;
 80014fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <BNO055_Get_MAG_Data>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_MAG_Data(BNO055_Sensor_T *handle){
 8001504:	b580      	push	{r7, lr}
 8001506:	b088      	sub	sp, #32
 8001508:	af02      	add	r7, sp, #8
 800150a:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[6];
	BNO055_ReturnTypeDef_T res = BNO055_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	75fb      	strb	r3, [r7, #23]
	Txbuff[0] = BNO055_REG_ADDRESS_MAG_X_DATA_LSB;
 8001510:	230e      	movs	r3, #14
 8001512:	753b      	strb	r3, [r7, #20]

	BNO055_Get_PageID(handle);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 f8fb 	bl	8001710 <BNO055_Get_PageID>
	if(!handle->PageID)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10c      	bne.n	800153e <BNO055_Get_MAG_Data+0x3a>
		res =BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 6);
 8001524:	f107 030c 	add.w	r3, r7, #12
 8001528:	f107 0114 	add.w	r1, r7, #20
 800152c:	2206      	movs	r2, #6
 800152e:	9200      	str	r2, [sp, #0]
 8001530:	2201      	movs	r2, #1
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 f94b 	bl	80017ce <BNO055_SendReceive>
 8001538:	4603      	mov	r3, r0
 800153a:	75fb      	strb	r3, [r7, #23]
 800153c:	e012      	b.n	8001564 <BNO055_Get_MAG_Data+0x60>
	else{
		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0))
 800153e:	2100      	movs	r1, #0
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f000 f903 	bl	800174c <BNO055_Set_PageID>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d10b      	bne.n	8001564 <BNO055_Get_MAG_Data+0x60>
			res =BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 6);
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	f107 0114 	add.w	r1, r7, #20
 8001554:	2206      	movs	r2, #6
 8001556:	9200      	str	r2, [sp, #0]
 8001558:	2201      	movs	r2, #1
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f937 	bl	80017ce <BNO055_SendReceive>
 8001560:	4603      	mov	r3, r0
 8001562:	75fb      	strb	r3, [r7, #23]
	}

	if(!res){
 8001564:	7dfb      	ldrb	r3, [r7, #23]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d11d      	bne.n	80015a6 <BNO055_Get_MAG_Data+0xa2>
		handle->ImuData.MAG_X = (RxBuff[0] | (RxBuff[1]<<8));
 800156a:	7b3b      	ldrb	r3, [r7, #12]
 800156c:	b21a      	sxth	r2, r3
 800156e:	7b7b      	ldrb	r3, [r7, #13]
 8001570:	b21b      	sxth	r3, r3
 8001572:	021b      	lsls	r3, r3, #8
 8001574:	b21b      	sxth	r3, r3
 8001576:	4313      	orrs	r3, r2
 8001578:	b21a      	sxth	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	831a      	strh	r2, [r3, #24]
		handle->ImuData.MAG_Y = (RxBuff[2] | (RxBuff[3]<<8));
 800157e:	7bbb      	ldrb	r3, [r7, #14]
 8001580:	b21a      	sxth	r2, r3
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	b21b      	sxth	r3, r3
 8001586:	021b      	lsls	r3, r3, #8
 8001588:	b21b      	sxth	r3, r3
 800158a:	4313      	orrs	r3, r2
 800158c:	b21a      	sxth	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	835a      	strh	r2, [r3, #26]
		handle->ImuData.MAG_Z = (RxBuff[4] | (RxBuff[5]<<8));
 8001592:	7c3b      	ldrb	r3, [r7, #16]
 8001594:	b21a      	sxth	r2, r3
 8001596:	7c7b      	ldrb	r3, [r7, #17]
 8001598:	b21b      	sxth	r3, r3
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	b21b      	sxth	r3, r3
 800159e:	4313      	orrs	r3, r2
 80015a0:	b21a      	sxth	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	839a      	strh	r2, [r3, #28]
	}
	return res;
 80015a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <BNO055_Get_GYR_Data>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_GYR_Data(BNO055_Sensor_T *handle){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af02      	add	r7, sp, #8
 80015b6:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[6];
	BNO055_ReturnTypeDef_T res = BNO055_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	75fb      	strb	r3, [r7, #23]
	Txbuff[0] = BNO055_REG_ADDRESS_GYR_X_DATA_LSB;
 80015bc:	2314      	movs	r3, #20
 80015be:	753b      	strb	r3, [r7, #20]

	BNO055_Get_PageID(handle);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 f8a5 	bl	8001710 <BNO055_Get_PageID>
	if(!handle->PageID)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d10c      	bne.n	80015ea <BNO055_Get_GYR_Data+0x3a>
		res =BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 6);
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	f107 0114 	add.w	r1, r7, #20
 80015d8:	2206      	movs	r2, #6
 80015da:	9200      	str	r2, [sp, #0]
 80015dc:	2201      	movs	r2, #1
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 f8f5 	bl	80017ce <BNO055_SendReceive>
 80015e4:	4603      	mov	r3, r0
 80015e6:	75fb      	strb	r3, [r7, #23]
 80015e8:	e012      	b.n	8001610 <BNO055_Get_GYR_Data+0x60>
	else{
		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0))
 80015ea:	2100      	movs	r1, #0
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 f8ad 	bl	800174c <BNO055_Set_PageID>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d10b      	bne.n	8001610 <BNO055_Get_GYR_Data+0x60>
			res =BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 6);
 80015f8:	f107 030c 	add.w	r3, r7, #12
 80015fc:	f107 0114 	add.w	r1, r7, #20
 8001600:	2206      	movs	r2, #6
 8001602:	9200      	str	r2, [sp, #0]
 8001604:	2201      	movs	r2, #1
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 f8e1 	bl	80017ce <BNO055_SendReceive>
 800160c:	4603      	mov	r3, r0
 800160e:	75fb      	strb	r3, [r7, #23]
		}

	if(!res){
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d11d      	bne.n	8001652 <BNO055_Get_GYR_Data+0xa2>
		handle->ImuData.GYR_X = (RxBuff[0] | (RxBuff[1]<<8));
 8001616:	7b3b      	ldrb	r3, [r7, #12]
 8001618:	b21a      	sxth	r2, r3
 800161a:	7b7b      	ldrb	r3, [r7, #13]
 800161c:	b21b      	sxth	r3, r3
 800161e:	021b      	lsls	r3, r3, #8
 8001620:	b21b      	sxth	r3, r3
 8001622:	4313      	orrs	r3, r2
 8001624:	b21a      	sxth	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	825a      	strh	r2, [r3, #18]
		handle->ImuData.GYR_Y = (RxBuff[2] | (RxBuff[3]<<8));
 800162a:	7bbb      	ldrb	r3, [r7, #14]
 800162c:	b21a      	sxth	r2, r3
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	b21b      	sxth	r3, r3
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	b21b      	sxth	r3, r3
 8001636:	4313      	orrs	r3, r2
 8001638:	b21a      	sxth	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	829a      	strh	r2, [r3, #20]
		handle->ImuData.GYR_Z = (RxBuff[4] | (RxBuff[5]<<8));
 800163e:	7c3b      	ldrb	r3, [r7, #16]
 8001640:	b21a      	sxth	r2, r3
 8001642:	7c7b      	ldrb	r3, [r7, #17]
 8001644:	b21b      	sxth	r3, r3
 8001646:	021b      	lsls	r3, r3, #8
 8001648:	b21b      	sxth	r3, r3
 800164a:	4313      	orrs	r3, r2
 800164c:	b21a      	sxth	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	82da      	strh	r2, [r3, #22]
	}
		return res;
 8001652:	7dfb      	ldrb	r3, [r7, #23]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <BNO055_Set_DataUnit>:
}

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_DataUnit(BNO055_Sensor_T *handle, uint8_t data){
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af02      	add	r7, sp, #8
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = 0x3B;
 8001668:	233b      	movs	r3, #59	@ 0x3b
 800166a:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = data;
 800166c:	78fb      	ldrb	r3, [r7, #3]
 800166e:	737b      	strb	r3, [r7, #13]

	BNO055_Get_PageID(handle);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f000 f84d 	bl	8001710 <BNO055_Get_PageID>
	if(handle->PageID){
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <BNO055_Set_DataUnit+0x2c>
		BNO055_Set_PageID(handle, BNO055_PAGE_ID_0);
 8001680:	2100      	movs	r1, #0
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 f862 	bl	800174c <BNO055_Set_PageID>
	}

	if(!handle->PageID){
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10a      	bne.n	80016a8 <BNO055_Set_DataUnit+0x4c>
		return BNO055_SendReceive(handle, TxBuff, 2, 0, 0);
 8001692:	f107 010c 	add.w	r1, r7, #12
 8001696:	2300      	movs	r3, #0
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	2300      	movs	r3, #0
 800169c:	2202      	movs	r2, #2
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 f895 	bl	80017ce <BNO055_SendReceive>
 80016a4:	4603      	mov	r3, r0
 80016a6:	e000      	b.n	80016aa <BNO055_Set_DataUnit+0x4e>
	}
	return BNO055_ERROR;
 80016a8:	2301      	movs	r3, #1
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <BNO055_Get_DataUnit>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_DataUnit(BNO055_Sensor_T *handle){
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b086      	sub	sp, #24
 80016b6:	af02      	add	r7, sp, #8
 80016b8:	6078      	str	r0, [r7, #4]
	uint8_t TxBuff[1], RxBuff[1];
	TxBuff[0] = 0x3B;
 80016ba:	233b      	movs	r3, #59	@ 0x3b
 80016bc:	733b      	strb	r3, [r7, #12]

	BNO055_Get_PageID(handle);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 f826 	bl	8001710 <BNO055_Get_PageID>
	if(handle->PageID){
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <BNO055_Get_DataUnit+0x24>
		BNO055_Set_PageID(handle, BNO055_PAGE_ID_0);
 80016ce:	2100      	movs	r1, #0
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 f83b 	bl	800174c <BNO055_Set_PageID>
	}
	if(!handle->PageID){
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d112      	bne.n	8001706 <BNO055_Get_DataUnit+0x54>
		if(!BNO055_SendReceive(handle, TxBuff, 1, RxBuff, 1)){
 80016e0:	f107 0308 	add.w	r3, r7, #8
 80016e4:	f107 010c 	add.w	r1, r7, #12
 80016e8:	2201      	movs	r2, #1
 80016ea:	9200      	str	r2, [sp, #0]
 80016ec:	2201      	movs	r2, #1
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 f86d 	bl	80017ce <BNO055_SendReceive>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d105      	bne.n	8001706 <BNO055_Get_DataUnit+0x54>
			handle->UnitStat = RxBuff[0];
 80016fa:	7a3a      	ldrb	r2, [r7, #8]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			return BNO055_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	e000      	b.n	8001708 <BNO055_Get_DataUnit+0x56>
		}
	}
	return BNO055_ERROR;
 8001706:	2301      	movs	r3, #1

}
 8001708:	4618      	mov	r0, r3
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <BNO055_Get_PageID>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_PageID(BNO055_Sensor_T *handle){
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af02      	add	r7, sp, #8
 8001716:	6078      	str	r0, [r7, #4]
	uint8_t TxBuff[1], RxBuff[1];
	TxBuff[0] = 0x07;
 8001718:	2307      	movs	r3, #7
 800171a:	733b      	strb	r3, [r7, #12]
	if(BNO055_SendReceive(handle, TxBuff, 1, RxBuff, 1))
 800171c:	f107 0308 	add.w	r3, r7, #8
 8001720:	f107 010c 	add.w	r1, r7, #12
 8001724:	2201      	movs	r2, #1
 8001726:	9200      	str	r2, [sp, #0]
 8001728:	2201      	movs	r2, #1
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f84f 	bl	80017ce <BNO055_SendReceive>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <BNO055_Get_PageID+0x2a>
		return BNO055_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e004      	b.n	8001744 <BNO055_Get_PageID+0x34>
	else
		handle->PageID = RxBuff[0];
 800173a:	7a3a      	ldrb	r2, [r7, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	return BNO055_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <BNO055_Set_PageID>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_PageID(BNO055_Sensor_T *handle, uint8_t PageID){
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af02      	add	r7, sp, #8
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = 0x07;
 8001758:	2307      	movs	r3, #7
 800175a:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = PageID;
 800175c:	78fb      	ldrb	r3, [r7, #3]
 800175e:	737b      	strb	r3, [r7, #13]
	if(BNO055_SendReceive(handle, TxBuff, 2, 0, 0))
 8001760:	f107 010c 	add.w	r1, r7, #12
 8001764:	2300      	movs	r3, #0
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	2300      	movs	r3, #0
 800176a:	2202      	movs	r2, #2
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 f82e 	bl	80017ce <BNO055_SendReceive>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <BNO055_Set_PageID+0x30>
		return BNO055_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e006      	b.n	800178a <BNO055_Set_PageID+0x3e>
	else{
		HAL_Delay(5);
 800177c:	2005      	movs	r0, #5
 800177e:	f000 fdcf 	bl	8002320 <HAL_Delay>
		BNO055_Get_PageID(handle);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7ff ffc4 	bl	8001710 <BNO055_Get_PageID>
		return BNO055_OK;
 8001788:	2300      	movs	r3, #0
	}
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <BNO055_Get_SysError>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_SysError(BNO055_Sensor_T *handle){
 8001792:	b580      	push	{r7, lr}
 8001794:	b086      	sub	sp, #24
 8001796:	af02      	add	r7, sp, #8
 8001798:	6078      	str	r0, [r7, #4]
	uint8_t TxBuff[1], RxBuff[1];
	TxBuff[0] = 0x3A;
 800179a:	233a      	movs	r3, #58	@ 0x3a
 800179c:	733b      	strb	r3, [r7, #12]
	if(BNO055_SendReceive(handle, TxBuff, 1, RxBuff, 1))
 800179e:	f107 0308 	add.w	r3, r7, #8
 80017a2:	f107 010c 	add.w	r1, r7, #12
 80017a6:	2201      	movs	r2, #1
 80017a8:	9200      	str	r2, [sp, #0]
 80017aa:	2201      	movs	r2, #1
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 f80e 	bl	80017ce <BNO055_SendReceive>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <BNO055_Get_SysError+0x2a>
		return BNO055_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e004      	b.n	80017c6 <BNO055_Get_SysError+0x34>
	else
		handle->SysError = RxBuff[0];
 80017bc:	7a3a      	ldrb	r2, [r7, #8]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
	return BNO055_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <BNO055_SendReceive>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_SendReceive(BNO055_Sensor_T *handle, uint8_t *txBuff, uint8_t txLenght, uint8_t *rxBuff, uint8_t rxLenght){
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b088      	sub	sp, #32
 80017d2:	af02      	add	r7, sp, #8
 80017d4:	60f8      	str	r0, [r7, #12]
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	603b      	str	r3, [r7, #0]
 80017da:	4613      	mov	r3, r2
 80017dc:	71fb      	strb	r3, [r7, #7]
	BNO055_ReturnTypeDef_T res = BNO055_CommPorter_SendReceive(handle->I2C_No, handle->Chip_I2C_Address, txBuff, txLenght, rxBuff, rxLenght);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	7818      	ldrb	r0, [r3, #0]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	7859      	ldrb	r1, [r3, #1]
 80017e6:	79fa      	ldrb	r2, [r7, #7]
 80017e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017ec:	9301      	str	r3, [sp, #4]
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	4613      	mov	r3, r2
 80017f4:	68ba      	ldr	r2, [r7, #8]
 80017f6:	f000 f80f 	bl	8001818 <BNO055_CommPorter_SendReceive>
 80017fa:	4603      	mov	r3, r0
 80017fc:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(1);
 80017fe:	2001      	movs	r0, #1
 8001800:	f000 fd8e 	bl	8002320 <HAL_Delay>
	if(res){
 8001804:	7dfb      	ldrb	r3, [r7, #23]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <BNO055_SendReceive+0x40>
		return res;
 800180a:	7dfb      	ldrb	r3, [r7, #23]
 800180c:	e000      	b.n	8001810 <BNO055_SendReceive+0x42>
	}else{
		return res;
 800180e:	7dfb      	ldrb	r3, [r7, #23]
	}
}
 8001810:	4618      	mov	r0, r3
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <BNO055_CommPorter_SendReceive>:
 */

#include <stdint.h>
#include "I2C.h"

uint8_t BNO055_CommPorter_SendReceive(uint8_t I2CNo, uint8_t DevAddress, uint8_t *txBuff, uint8_t txLenght, uint8_t *rxBuff, uint8_t rxLenght){
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af02      	add	r7, sp, #8
 800181e:	603a      	str	r2, [r7, #0]
 8001820:	461a      	mov	r2, r3
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
 8001826:	460b      	mov	r3, r1
 8001828:	71bb      	strb	r3, [r7, #6]
 800182a:	4613      	mov	r3, r2
 800182c:	717b      	strb	r3, [r7, #5]
	return I2C_ReadWrite_Poll(I2CNo, DevAddress, txBuff, txLenght, rxBuff, rxLenght);
 800182e:	797a      	ldrb	r2, [r7, #5]
 8001830:	79b9      	ldrb	r1, [r7, #6]
 8001832:	79f8      	ldrb	r0, [r7, #7]
 8001834:	7d3b      	ldrb	r3, [r7, #20]
 8001836:	9301      	str	r3, [sp, #4]
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	4613      	mov	r3, r2
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	f7ff f838 	bl	80008b4 <I2C_ReadWrite_Poll>
 8001844:	4603      	mov	r3, r0
//	return I2C_ReadWrite_IT(I2CNo, DevAddress, txBuff, txLenght, rxBuff, rxLenght);
//	return I2C_ReadWrite_DMA(I2CNo, DevAddress, txBuff, txLenght, rxBuff, rxLenght);
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	@ 0x28
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001858:	2300      	movs	r3, #0
 800185a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800185c:	f008 fede 	bl	800a61c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001860:	4b5d      	ldr	r3, [pc, #372]	@ (80019d8 <pvPortMallocMicroROS+0x188>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001868:	f000 f990 	bl	8001b8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800186c:	4b5b      	ldr	r3, [pc, #364]	@ (80019dc <pvPortMallocMicroROS+0x18c>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4013      	ands	r3, r2
 8001874:	2b00      	cmp	r3, #0
 8001876:	f040 8094 	bne.w	80019a2 <pvPortMallocMicroROS+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d020      	beq.n	80018c2 <pvPortMallocMicroROS+0x72>
			{
				xWantedSize += xHeapStructSize;
 8001880:	2208      	movs	r2, #8
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	2b00      	cmp	r3, #0
 8001890:	d017      	beq.n	80018c2 <pvPortMallocMicroROS+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f023 0307 	bic.w	r3, r3, #7
 8001898:	3308      	adds	r3, #8
 800189a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00d      	beq.n	80018c2 <pvPortMallocMicroROS+0x72>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80018a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018aa:	b672      	cpsid	i
 80018ac:	f383 8811 	msr	BASEPRI, r3
 80018b0:	f3bf 8f6f 	isb	sy
 80018b4:	f3bf 8f4f 	dsb	sy
 80018b8:	b662      	cpsie	i
 80018ba:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
 80018c0:	e7fd      	b.n	80018be <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d06c      	beq.n	80019a2 <pvPortMallocMicroROS+0x152>
 80018c8:	4b45      	ldr	r3, [pc, #276]	@ (80019e0 <pvPortMallocMicroROS+0x190>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d867      	bhi.n	80019a2 <pvPortMallocMicroROS+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80018d2:	4b44      	ldr	r3, [pc, #272]	@ (80019e4 <pvPortMallocMicroROS+0x194>)
 80018d4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80018d6:	4b43      	ldr	r3, [pc, #268]	@ (80019e4 <pvPortMallocMicroROS+0x194>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80018dc:	e004      	b.n	80018e8 <pvPortMallocMicroROS+0x98>
				{
					pxPreviousBlock = pxBlock;
 80018de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80018e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80018e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d903      	bls.n	80018fa <pvPortMallocMicroROS+0xaa>
 80018f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f1      	bne.n	80018de <pvPortMallocMicroROS+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80018fa:	4b37      	ldr	r3, [pc, #220]	@ (80019d8 <pvPortMallocMicroROS+0x188>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001900:	429a      	cmp	r2, r3
 8001902:	d04e      	beq.n	80019a2 <pvPortMallocMicroROS+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001904:	6a3b      	ldr	r3, [r7, #32]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2208      	movs	r2, #8
 800190a:	4413      	add	r3, r2
 800190c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800190e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	6a3b      	ldr	r3, [r7, #32]
 8001914:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	1ad2      	subs	r2, r2, r3
 800191e:	2308      	movs	r3, #8
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	429a      	cmp	r2, r3
 8001924:	d922      	bls.n	800196c <pvPortMallocMicroROS+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4413      	add	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	2b00      	cmp	r3, #0
 8001936:	d00d      	beq.n	8001954 <pvPortMallocMicroROS+0x104>
	__asm volatile
 8001938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800193c:	b672      	cpsid	i
 800193e:	f383 8811 	msr	BASEPRI, r3
 8001942:	f3bf 8f6f 	isb	sy
 8001946:	f3bf 8f4f 	dsb	sy
 800194a:	b662      	cpsie	i
 800194c:	613b      	str	r3, [r7, #16]
}
 800194e:	bf00      	nop
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <pvPortMallocMicroROS+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	1ad2      	subs	r2, r2, r3
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001966:	69b8      	ldr	r0, [r7, #24]
 8001968:	f000 f972 	bl	8001c50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800196c:	4b1c      	ldr	r3, [pc, #112]	@ (80019e0 <pvPortMallocMicroROS+0x190>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	4a1a      	ldr	r2, [pc, #104]	@ (80019e0 <pvPortMallocMicroROS+0x190>)
 8001978:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800197a:	4b19      	ldr	r3, [pc, #100]	@ (80019e0 <pvPortMallocMicroROS+0x190>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	4b1a      	ldr	r3, [pc, #104]	@ (80019e8 <pvPortMallocMicroROS+0x198>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	d203      	bcs.n	800198e <pvPortMallocMicroROS+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001986:	4b16      	ldr	r3, [pc, #88]	@ (80019e0 <pvPortMallocMicroROS+0x190>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a17      	ldr	r2, [pc, #92]	@ (80019e8 <pvPortMallocMicroROS+0x198>)
 800198c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800198e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	4b12      	ldr	r3, [pc, #72]	@ (80019dc <pvPortMallocMicroROS+0x18c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	431a      	orrs	r2, r3
 8001998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800199c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80019a2:	f008 fe49 	bl	800a638 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00d      	beq.n	80019cc <pvPortMallocMicroROS+0x17c>
	__asm volatile
 80019b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019b4:	b672      	cpsid	i
 80019b6:	f383 8811 	msr	BASEPRI, r3
 80019ba:	f3bf 8f6f 	isb	sy
 80019be:	f3bf 8f4f 	dsb	sy
 80019c2:	b662      	cpsie	i
 80019c4:	60fb      	str	r3, [r7, #12]
}
 80019c6:	bf00      	nop
 80019c8:	bf00      	nop
 80019ca:	e7fd      	b.n	80019c8 <pvPortMallocMicroROS+0x178>
	return pvReturn;
 80019cc:	69fb      	ldr	r3, [r7, #28]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3728      	adds	r7, #40	@ 0x28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20004470 	.word	0x20004470
 80019dc:	2000447c 	.word	0x2000447c
 80019e0:	20004474 	.word	0x20004474
 80019e4:	20004468 	.word	0x20004468
 80019e8:	20004478 	.word	0x20004478

080019ec <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d04e      	beq.n	8001a9c <vPortFreeMicroROS+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80019fe:	2308      	movs	r3, #8
 8001a00:	425b      	negs	r3, r3
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	4413      	add	r3, r2
 8001a06:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	4b24      	ldr	r3, [pc, #144]	@ (8001aa4 <vPortFreeMicroROS+0xb8>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4013      	ands	r3, r2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10d      	bne.n	8001a36 <vPortFreeMicroROS+0x4a>
	__asm volatile
 8001a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a1e:	b672      	cpsid	i
 8001a20:	f383 8811 	msr	BASEPRI, r3
 8001a24:	f3bf 8f6f 	isb	sy
 8001a28:	f3bf 8f4f 	dsb	sy
 8001a2c:	b662      	cpsie	i
 8001a2e:	60fb      	str	r3, [r7, #12]
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	e7fd      	b.n	8001a32 <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00d      	beq.n	8001a5a <vPortFreeMicroROS+0x6e>
	__asm volatile
 8001a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a42:	b672      	cpsid	i
 8001a44:	f383 8811 	msr	BASEPRI, r3
 8001a48:	f3bf 8f6f 	isb	sy
 8001a4c:	f3bf 8f4f 	dsb	sy
 8001a50:	b662      	cpsie	i
 8001a52:	60bb      	str	r3, [r7, #8]
}
 8001a54:	bf00      	nop
 8001a56:	bf00      	nop
 8001a58:	e7fd      	b.n	8001a56 <vPortFreeMicroROS+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	4b11      	ldr	r3, [pc, #68]	@ (8001aa4 <vPortFreeMicroROS+0xb8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d019      	beq.n	8001a9c <vPortFreeMicroROS+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d115      	bne.n	8001a9c <vPortFreeMicroROS+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa4 <vPortFreeMicroROS+0xb8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001a80:	f008 fdcc 	bl	800a61c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	4b07      	ldr	r3, [pc, #28]	@ (8001aa8 <vPortFreeMicroROS+0xbc>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	4a06      	ldr	r2, [pc, #24]	@ (8001aa8 <vPortFreeMicroROS+0xbc>)
 8001a90:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001a92:	6938      	ldr	r0, [r7, #16]
 8001a94:	f000 f8dc 	bl	8001c50 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001a98:	f008 fdce 	bl	800a638 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001a9c:	bf00      	nop
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	2000447c 	.word	0x2000447c
 8001aa8:	20004474 	.word	0x20004474

08001aac <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001aac:	b480      	push	{r7}
 8001aae:	b087      	sub	sp, #28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001ab8:	2308      	movs	r3, #8
 8001aba:	425b      	negs	r3, r3
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	4413      	add	r3, r2
 8001ac0:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <getBlockSize+0x38>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60fb      	str	r3, [r7, #12]

	return count;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	371c      	adds	r7, #28
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	2000447c 	.word	0x2000447c

08001ae8 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001af2:	f008 fd93 	bl	800a61c <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001af6:	6838      	ldr	r0, [r7, #0]
 8001af8:	f7ff feaa 	bl	8001850 <pvPortMallocMicroROS>
 8001afc:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d017      	beq.n	8001b34 <pvPortReallocMicroROS+0x4c>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d014      	beq.n	8001b34 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff ffce 	bl	8001aac <getBlockSize>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2208      	movs	r2, #8
 8001b14:	1a9b      	subs	r3, r3, r2
 8001b16:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d201      	bcs.n	8001b24 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	68b8      	ldr	r0, [r7, #8]
 8001b2a:	f014 fee2 	bl	80168f2 <memcpy>

		vPortFreeMicroROS(pv);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff ff5c 	bl	80019ec <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001b34:	f008 fd80 	bl	800a638 <xTaskResumeAll>

	return newmem;
 8001b38:	68bb      	ldr	r3, [r7, #8]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001b4c:	f008 fd66 	bl	800a61c <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	fb02 f303 	mul.w	r3, r2, r3
 8001b58:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001b5a:	6978      	ldr	r0, [r7, #20]
 8001b5c:	f7ff fe78 	bl	8001850 <pvPortMallocMicroROS>
 8001b60:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001b66:	e004      	b.n	8001b72 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1c5a      	adds	r2, r3, #1
 8001b6c:	613a      	str	r2, [r7, #16]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	1e5a      	subs	r2, r3, #1
 8001b76:	617a      	str	r2, [r7, #20]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1f5      	bne.n	8001b68 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001b7c:	f008 fd5c 	bl	800a638 <xTaskResumeAll>
  	return mem;
 8001b80:	68fb      	ldr	r3, [r7, #12]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001b92:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8001b96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001b98:	4b27      	ldr	r3, [pc, #156]	@ (8001c38 <prvHeapInit+0xac>)
 8001b9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00c      	beq.n	8001bc0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	3307      	adds	r3, #7
 8001baa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f023 0307 	bic.w	r3, r3, #7
 8001bb2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001bb4:	68ba      	ldr	r2, [r7, #8]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	4a1f      	ldr	r2, [pc, #124]	@ (8001c38 <prvHeapInit+0xac>)
 8001bbc:	4413      	add	r3, r2
 8001bbe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001bc4:	4a1d      	ldr	r2, [pc, #116]	@ (8001c3c <prvHeapInit+0xb0>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001bca:	4b1c      	ldr	r3, [pc, #112]	@ (8001c3c <prvHeapInit+0xb0>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001bd8:	2208      	movs	r2, #8
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	1a9b      	subs	r3, r3, r2
 8001bde:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f023 0307 	bic.w	r3, r3, #7
 8001be6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4a15      	ldr	r2, [pc, #84]	@ (8001c40 <prvHeapInit+0xb4>)
 8001bec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001bee:	4b14      	ldr	r3, [pc, #80]	@ (8001c40 <prvHeapInit+0xb4>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001bf6:	4b12      	ldr	r3, [pc, #72]	@ (8001c40 <prvHeapInit+0xb4>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	1ad2      	subs	r2, r2, r3
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c40 <prvHeapInit+0xb4>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	4a0a      	ldr	r2, [pc, #40]	@ (8001c44 <prvHeapInit+0xb8>)
 8001c1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	4a09      	ldr	r2, [pc, #36]	@ (8001c48 <prvHeapInit+0xbc>)
 8001c22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001c24:	4b09      	ldr	r3, [pc, #36]	@ (8001c4c <prvHeapInit+0xc0>)
 8001c26:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001c2a:	601a      	str	r2, [r3, #0]
}
 8001c2c:	bf00      	nop
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	20000868 	.word	0x20000868
 8001c3c:	20004468 	.word	0x20004468
 8001c40:	20004470 	.word	0x20004470
 8001c44:	20004478 	.word	0x20004478
 8001c48:	20004474 	.word	0x20004474
 8001c4c:	2000447c 	.word	0x2000447c

08001c50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001c58:	4b28      	ldr	r3, [pc, #160]	@ (8001cfc <prvInsertBlockIntoFreeList+0xac>)
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	e002      	b.n	8001c64 <prvInsertBlockIntoFreeList+0x14>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d8f7      	bhi.n	8001c5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	4413      	add	r3, r2
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d108      	bne.n	8001c92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	441a      	add	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	441a      	add	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d118      	bne.n	8001cd8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	4b15      	ldr	r3, [pc, #84]	@ (8001d00 <prvInsertBlockIntoFreeList+0xb0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d00d      	beq.n	8001cce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	441a      	add	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	e008      	b.n	8001ce0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001cce:	4b0c      	ldr	r3, [pc, #48]	@ (8001d00 <prvInsertBlockIntoFreeList+0xb0>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	e003      	b.n	8001ce0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d002      	beq.n	8001cee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001cee:	bf00      	nop
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	20004468 	.word	0x20004468
 8001d00:	20004470 	.word	0x20004470

08001d04 <Servo_SetAngle>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t ServoAngle = 0;
void Servo_SetAngle(uint8_t angle) {
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
    // SG90 yaklaşık 0°–180° arası çalışır
    // 0° = 1000 µs, 180° = 2000 µs
    uint16_t pulse = 1000 + ((angle * 1000) / 180);
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d14:	fb02 f303 	mul.w	r3, r2, r3
 8001d18:	4a0a      	ldr	r2, [pc, #40]	@ (8001d44 <Servo_SetAngle+0x40>)
 8001d1a:	fb82 1203 	smull	r1, r2, r2, r3
 8001d1e:	441a      	add	r2, r3
 8001d20:	11d2      	asrs	r2, r2, #7
 8001d22:	17db      	asrs	r3, r3, #31
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001d2c:	81fb      	strh	r3, [r7, #14]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulse);
 8001d2e:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <Servo_SetAngle+0x44>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	89fa      	ldrh	r2, [r7, #14]
 8001d34:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001d36:	bf00      	nop
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	b60b60b7 	.word	0xb60b60b7
 8001d48:	200046d8 	.word	0x200046d8

08001d4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d50:	f001 fa87 	bl	8003262 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d54:	f000 f83a 	bl	8001dcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d58:	f000 fa44 	bl	80021e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d5c:	f000 fa1c 	bl	8002198 <MX_DMA_Init>
  MX_I2C2_Init();
 8001d60:	f000 f8a6 	bl	8001eb0 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8001d64:	f000 f9e8 	bl	8002138 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8001d68:	f000 f8e8 	bl	8001f3c <MX_I2C3_Init>
  MX_SPI1_Init();
 8001d6c:	f000 f92c 	bl	8001fc8 <MX_SPI1_Init>
  MX_TIM3_Init();
 8001d70:	f000 f968 	bl	8002044 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001d74:	f006 ff48 	bl	8008c08 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of IMU_DataMutex */
  IMU_DataMutexHandle = osMutexNew(&IMU_DataMutex_attributes);
 8001d78:	480c      	ldr	r0, [pc, #48]	@ (8001dac <main+0x60>)
 8001d7a:	f007 f883 	bl	8008e84 <osMutexNew>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	4a0b      	ldr	r2, [pc, #44]	@ (8001db0 <main+0x64>)
 8001d82:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Thread_MicroROS */
  Thread_MicroROSHandle = osThreadNew(TaskMicroROS, NULL, &Thread_MicroROS_attributes);
 8001d84:	4a0b      	ldr	r2, [pc, #44]	@ (8001db4 <main+0x68>)
 8001d86:	2100      	movs	r1, #0
 8001d88:	480b      	ldr	r0, [pc, #44]	@ (8001db8 <main+0x6c>)
 8001d8a:	f006 ffa7 	bl	8008cdc <osThreadNew>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	4a0a      	ldr	r2, [pc, #40]	@ (8001dbc <main+0x70>)
 8001d92:	6013      	str	r3, [r2, #0]

  /* creation of Thread_Sensors */
  Thread_SensorsHandle = osThreadNew(TaskSensors, NULL, &Thread_Sensors_attributes);
 8001d94:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc0 <main+0x74>)
 8001d96:	2100      	movs	r1, #0
 8001d98:	480a      	ldr	r0, [pc, #40]	@ (8001dc4 <main+0x78>)
 8001d9a:	f006 ff9f 	bl	8008cdc <osThreadNew>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	4a09      	ldr	r2, [pc, #36]	@ (8001dc8 <main+0x7c>)
 8001da2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001da4:	f006 ff64 	bl	8008c70 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001da8:	bf00      	nop
 8001daa:	e7fd      	b.n	8001da8 <main+0x5c>
 8001dac:	08017690 	.word	0x08017690
 8001db0:	20004874 	.word	0x20004874
 8001db4:	08017648 	.word	0x08017648
 8001db8:	08002339 	.word	0x08002339
 8001dbc:	2000486c 	.word	0x2000486c
 8001dc0:	0801766c 	.word	0x0801766c
 8001dc4:	080024dd 	.word	0x080024dd
 8001dc8:	20004870 	.word	0x20004870

08001dcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b094      	sub	sp, #80	@ 0x50
 8001dd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dd2:	f107 031c 	add.w	r3, r7, #28
 8001dd6:	2234      	movs	r2, #52	@ 0x34
 8001dd8:	2100      	movs	r1, #0
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f014 fcc0 	bl	8016760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001de0:	f107 0308 	add.w	r3, r7, #8
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001df0:	f002 ff44 	bl	8004c7c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df4:	4b2c      	ldr	r3, [pc, #176]	@ (8001ea8 <SystemClock_Config+0xdc>)
 8001df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df8:	4a2b      	ldr	r2, [pc, #172]	@ (8001ea8 <SystemClock_Config+0xdc>)
 8001dfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dfe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e00:	4b29      	ldr	r3, [pc, #164]	@ (8001ea8 <SystemClock_Config+0xdc>)
 8001e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e08:	607b      	str	r3, [r7, #4]
 8001e0a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e0c:	4b27      	ldr	r3, [pc, #156]	@ (8001eac <SystemClock_Config+0xe0>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001e14:	4a25      	ldr	r2, [pc, #148]	@ (8001eac <SystemClock_Config+0xe0>)
 8001e16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	4b23      	ldr	r3, [pc, #140]	@ (8001eac <SystemClock_Config+0xe0>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e24:	603b      	str	r3, [r7, #0]
 8001e26:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e2c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e30:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e32:	2302      	movs	r3, #2
 8001e34:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e36:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e3c:	2304      	movs	r3, #4
 8001e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001e40:	2360      	movs	r3, #96	@ 0x60
 8001e42:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e44:	2302      	movs	r3, #2
 8001e46:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e48:	2304      	movs	r3, #4
 8001e4a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e50:	f107 031c 	add.w	r3, r7, #28
 8001e54:	4618      	mov	r0, r3
 8001e56:	f002 ff71 	bl	8004d3c <HAL_RCC_OscConfig>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001e60:	f000 fbb8 	bl	80025d4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001e64:	f002 ff1a 	bl	8004c9c <HAL_PWREx_EnableOverDrive>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001e6e:	f000 fbb1 	bl	80025d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e72:	230f      	movs	r3, #15
 8001e74:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e76:	2302      	movs	r3, #2
 8001e78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e88:	f107 0308 	add.w	r3, r7, #8
 8001e8c:	2103      	movs	r1, #3
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f003 fa02 	bl	8005298 <HAL_RCC_ClockConfig>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001e9a:	f000 fb9b 	bl	80025d4 <Error_Handler>
  }
}
 8001e9e:	bf00      	nop
 8001ea0:	3750      	adds	r7, #80	@ 0x50
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40007000 	.word	0x40007000

08001eb0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f30 <MX_I2C2_Init+0x80>)
 8001eb6:	4a1f      	ldr	r2, [pc, #124]	@ (8001f34 <MX_I2C2_Init+0x84>)
 8001eb8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20000209;
 8001eba:	4b1d      	ldr	r3, [pc, #116]	@ (8001f30 <MX_I2C2_Init+0x80>)
 8001ebc:	4a1e      	ldr	r2, [pc, #120]	@ (8001f38 <MX_I2C2_Init+0x88>)
 8001ebe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f30 <MX_I2C2_Init+0x80>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f30 <MX_I2C2_Init+0x80>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ecc:	4b18      	ldr	r3, [pc, #96]	@ (8001f30 <MX_I2C2_Init+0x80>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001ed2:	4b17      	ldr	r3, [pc, #92]	@ (8001f30 <MX_I2C2_Init+0x80>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ed8:	4b15      	ldr	r3, [pc, #84]	@ (8001f30 <MX_I2C2_Init+0x80>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ede:	4b14      	ldr	r3, [pc, #80]	@ (8001f30 <MX_I2C2_Init+0x80>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ee4:	4b12      	ldr	r3, [pc, #72]	@ (8001f30 <MX_I2C2_Init+0x80>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001eea:	4811      	ldr	r0, [pc, #68]	@ (8001f30 <MX_I2C2_Init+0x80>)
 8001eec:	f002 f8be 	bl	800406c <HAL_I2C_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001ef6:	f000 fb6d 	bl	80025d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001efa:	2100      	movs	r1, #0
 8001efc:	480c      	ldr	r0, [pc, #48]	@ (8001f30 <MX_I2C2_Init+0x80>)
 8001efe:	f002 fe05 	bl	8004b0c <HAL_I2CEx_ConfigAnalogFilter>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001f08:	f000 fb64 	bl	80025d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	4808      	ldr	r0, [pc, #32]	@ (8001f30 <MX_I2C2_Init+0x80>)
 8001f10:	f002 fe47 	bl	8004ba2 <HAL_I2CEx_ConfigDigitalFilter>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001f1a:	f000 fb5b 	bl	80025d4 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C2);
 8001f1e:	2002      	movs	r0, #2
 8001f20:	f002 fe8c 	bl	8004c3c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C2_Init 2 */
  I2C_Init(&hi2c2, I2CNO_2);
 8001f24:	2102      	movs	r1, #2
 8001f26:	4802      	ldr	r0, [pc, #8]	@ (8001f30 <MX_I2C2_Init+0x80>)
 8001f28:	f7fe fcb2 	bl	8000890 <I2C_Init>
  /* USER CODE END I2C2_Init 2 */

}
 8001f2c:	bf00      	nop
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	200045cc 	.word	0x200045cc
 8001f34:	40005800 	.word	0x40005800
 8001f38:	20000209 	.word	0x20000209

08001f3c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001f40:	4b1e      	ldr	r3, [pc, #120]	@ (8001fbc <MX_I2C3_Init+0x80>)
 8001f42:	4a1f      	ldr	r2, [pc, #124]	@ (8001fc0 <MX_I2C3_Init+0x84>)
 8001f44:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20000209;
 8001f46:	4b1d      	ldr	r3, [pc, #116]	@ (8001fbc <MX_I2C3_Init+0x80>)
 8001f48:	4a1e      	ldr	r2, [pc, #120]	@ (8001fc4 <MX_I2C3_Init+0x88>)
 8001f4a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fbc <MX_I2C3_Init+0x80>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f52:	4b1a      	ldr	r3, [pc, #104]	@ (8001fbc <MX_I2C3_Init+0x80>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f58:	4b18      	ldr	r3, [pc, #96]	@ (8001fbc <MX_I2C3_Init+0x80>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001f5e:	4b17      	ldr	r3, [pc, #92]	@ (8001fbc <MX_I2C3_Init+0x80>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f64:	4b15      	ldr	r3, [pc, #84]	@ (8001fbc <MX_I2C3_Init+0x80>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f6a:	4b14      	ldr	r3, [pc, #80]	@ (8001fbc <MX_I2C3_Init+0x80>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f70:	4b12      	ldr	r3, [pc, #72]	@ (8001fbc <MX_I2C3_Init+0x80>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001f76:	4811      	ldr	r0, [pc, #68]	@ (8001fbc <MX_I2C3_Init+0x80>)
 8001f78:	f002 f878 	bl	800406c <HAL_I2C_Init>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001f82:	f000 fb27 	bl	80025d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f86:	2100      	movs	r1, #0
 8001f88:	480c      	ldr	r0, [pc, #48]	@ (8001fbc <MX_I2C3_Init+0x80>)
 8001f8a:	f002 fdbf 	bl	8004b0c <HAL_I2CEx_ConfigAnalogFilter>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001f94:	f000 fb1e 	bl	80025d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4808      	ldr	r0, [pc, #32]	@ (8001fbc <MX_I2C3_Init+0x80>)
 8001f9c:	f002 fe01 	bl	8004ba2 <HAL_I2CEx_ConfigDigitalFilter>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001fa6:	f000 fb15 	bl	80025d4 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 8001faa:	2004      	movs	r0, #4
 8001fac:	f002 fe46 	bl	8004c3c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */
  I2C_Init(&hi2c3, I2CNO_3);
 8001fb0:	2103      	movs	r1, #3
 8001fb2:	4802      	ldr	r0, [pc, #8]	@ (8001fbc <MX_I2C3_Init+0x80>)
 8001fb4:	f7fe fc6c 	bl	8000890 <I2C_Init>
  /* USER CODE END I2C3_Init 2 */

}
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20004620 	.word	0x20004620
 8001fc0:	40005c00 	.word	0x40005c00
 8001fc4:	20000209 	.word	0x20000209

08001fc8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800203c <MX_SPI1_Init+0x74>)
 8001fce:	4a1c      	ldr	r2, [pc, #112]	@ (8002040 <MX_SPI1_Init+0x78>)
 8001fd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fd2:	4b1a      	ldr	r3, [pc, #104]	@ (800203c <MX_SPI1_Init+0x74>)
 8001fd4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001fd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fda:	4b18      	ldr	r3, [pc, #96]	@ (800203c <MX_SPI1_Init+0x74>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fe0:	4b16      	ldr	r3, [pc, #88]	@ (800203c <MX_SPI1_Init+0x74>)
 8001fe2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001fe6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fe8:	4b14      	ldr	r3, [pc, #80]	@ (800203c <MX_SPI1_Init+0x74>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fee:	4b13      	ldr	r3, [pc, #76]	@ (800203c <MX_SPI1_Init+0x74>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ff4:	4b11      	ldr	r3, [pc, #68]	@ (800203c <MX_SPI1_Init+0x74>)
 8001ff6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ffa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800203c <MX_SPI1_Init+0x74>)
 8001ffe:	2208      	movs	r2, #8
 8002000:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002002:	4b0e      	ldr	r3, [pc, #56]	@ (800203c <MX_SPI1_Init+0x74>)
 8002004:	2200      	movs	r2, #0
 8002006:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002008:	4b0c      	ldr	r3, [pc, #48]	@ (800203c <MX_SPI1_Init+0x74>)
 800200a:	2200      	movs	r2, #0
 800200c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800200e:	4b0b      	ldr	r3, [pc, #44]	@ (800203c <MX_SPI1_Init+0x74>)
 8002010:	2200      	movs	r2, #0
 8002012:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002014:	4b09      	ldr	r3, [pc, #36]	@ (800203c <MX_SPI1_Init+0x74>)
 8002016:	2207      	movs	r2, #7
 8002018:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800201a:	4b08      	ldr	r3, [pc, #32]	@ (800203c <MX_SPI1_Init+0x74>)
 800201c:	2200      	movs	r2, #0
 800201e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002020:	4b06      	ldr	r3, [pc, #24]	@ (800203c <MX_SPI1_Init+0x74>)
 8002022:	2208      	movs	r2, #8
 8002024:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002026:	4805      	ldr	r0, [pc, #20]	@ (800203c <MX_SPI1_Init+0x74>)
 8002028:	f003 ffb6 	bl	8005f98 <HAL_SPI_Init>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002032:	f000 facf 	bl	80025d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20004674 	.word	0x20004674
 8002040:	40013000 	.word	0x40013000

08002044 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b090      	sub	sp, #64	@ 0x40
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800204a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	609a      	str	r2, [r3, #8]
 8002056:	60da      	str	r2, [r3, #12]
 8002058:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800205a:	f107 0320 	add.w	r3, r7, #32
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002066:	1d3b      	adds	r3, r7, #4
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
 8002074:	615a      	str	r2, [r3, #20]
 8002076:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002078:	4b2d      	ldr	r3, [pc, #180]	@ (8002130 <MX_TIM3_Init+0xec>)
 800207a:	4a2e      	ldr	r2, [pc, #184]	@ (8002134 <MX_TIM3_Init+0xf0>)
 800207c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 800207e:	4b2c      	ldr	r3, [pc, #176]	@ (8002130 <MX_TIM3_Init+0xec>)
 8002080:	2230      	movs	r2, #48	@ 0x30
 8002082:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002084:	4b2a      	ldr	r3, [pc, #168]	@ (8002130 <MX_TIM3_Init+0xec>)
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 800208a:	4b29      	ldr	r3, [pc, #164]	@ (8002130 <MX_TIM3_Init+0xec>)
 800208c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002090:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002092:	4b27      	ldr	r3, [pc, #156]	@ (8002130 <MX_TIM3_Init+0xec>)
 8002094:	2200      	movs	r2, #0
 8002096:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002098:	4b25      	ldr	r3, [pc, #148]	@ (8002130 <MX_TIM3_Init+0xec>)
 800209a:	2200      	movs	r2, #0
 800209c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800209e:	4824      	ldr	r0, [pc, #144]	@ (8002130 <MX_TIM3_Init+0xec>)
 80020a0:	f004 f945 	bl	800632e <HAL_TIM_Base_Init>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80020aa:	f000 fa93 	bl	80025d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80020ae:	4820      	ldr	r0, [pc, #128]	@ (8002130 <MX_TIM3_Init+0xec>)
 80020b0:	f004 fa0c 	bl	80064cc <HAL_TIM_PWM_Init>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80020ba:	f000 fa8b 	bl	80025d4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80020be:	2307      	movs	r3, #7
 80020c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80020c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020ca:	4619      	mov	r1, r3
 80020cc:	4818      	ldr	r0, [pc, #96]	@ (8002130 <MX_TIM3_Init+0xec>)
 80020ce:	f004 fc79 	bl	80069c4 <HAL_TIM_SlaveConfigSynchro>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80020d8:	f000 fa7c 	bl	80025d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020dc:	2300      	movs	r3, #0
 80020de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e0:	2300      	movs	r3, #0
 80020e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020e4:	f107 0320 	add.w	r3, r7, #32
 80020e8:	4619      	mov	r1, r3
 80020ea:	4811      	ldr	r0, [pc, #68]	@ (8002130 <MX_TIM3_Init+0xec>)
 80020ec:	f005 f8ec 	bl	80072c8 <HAL_TIMEx_MasterConfigSynchronization>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 80020f6:	f000 fa6d 	bl	80025d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020fa:	2360      	movs	r3, #96	@ 0x60
 80020fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800210a:	1d3b      	adds	r3, r7, #4
 800210c:	2204      	movs	r2, #4
 800210e:	4619      	mov	r1, r3
 8002110:	4807      	ldr	r0, [pc, #28]	@ (8002130 <MX_TIM3_Init+0xec>)
 8002112:	f004 fb43 	bl	800679c <HAL_TIM_PWM_ConfigChannel>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 800211c:	f000 fa5a 	bl	80025d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002120:	4803      	ldr	r0, [pc, #12]	@ (8002130 <MX_TIM3_Init+0xec>)
 8002122:	f000 fd27 	bl	8002b74 <HAL_TIM_MspPostInit>

}
 8002126:	bf00      	nop
 8002128:	3740      	adds	r7, #64	@ 0x40
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	200046d8 	.word	0x200046d8
 8002134:	40000400 	.word	0x40000400

08002138 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800213c:	4b14      	ldr	r3, [pc, #80]	@ (8002190 <MX_USART2_UART_Init+0x58>)
 800213e:	4a15      	ldr	r2, [pc, #84]	@ (8002194 <MX_USART2_UART_Init+0x5c>)
 8002140:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002142:	4b13      	ldr	r3, [pc, #76]	@ (8002190 <MX_USART2_UART_Init+0x58>)
 8002144:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002148:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800214a:	4b11      	ldr	r3, [pc, #68]	@ (8002190 <MX_USART2_UART_Init+0x58>)
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002150:	4b0f      	ldr	r3, [pc, #60]	@ (8002190 <MX_USART2_UART_Init+0x58>)
 8002152:	2200      	movs	r2, #0
 8002154:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002156:	4b0e      	ldr	r3, [pc, #56]	@ (8002190 <MX_USART2_UART_Init+0x58>)
 8002158:	2200      	movs	r2, #0
 800215a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800215c:	4b0c      	ldr	r3, [pc, #48]	@ (8002190 <MX_USART2_UART_Init+0x58>)
 800215e:	220c      	movs	r2, #12
 8002160:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002162:	4b0b      	ldr	r3, [pc, #44]	@ (8002190 <MX_USART2_UART_Init+0x58>)
 8002164:	2200      	movs	r2, #0
 8002166:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002168:	4b09      	ldr	r3, [pc, #36]	@ (8002190 <MX_USART2_UART_Init+0x58>)
 800216a:	2200      	movs	r2, #0
 800216c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800216e:	4b08      	ldr	r3, [pc, #32]	@ (8002190 <MX_USART2_UART_Init+0x58>)
 8002170:	2200      	movs	r2, #0
 8002172:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002174:	4b06      	ldr	r3, [pc, #24]	@ (8002190 <MX_USART2_UART_Init+0x58>)
 8002176:	2200      	movs	r2, #0
 8002178:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800217a:	4805      	ldr	r0, [pc, #20]	@ (8002190 <MX_USART2_UART_Init+0x58>)
 800217c:	f005 f950 	bl	8007420 <HAL_UART_Init>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002186:	f000 fa25 	bl	80025d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20004724 	.word	0x20004724
 8002194:	40004400 	.word	0x40004400

08002198 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800219e:	4b10      	ldr	r3, [pc, #64]	@ (80021e0 <MX_DMA_Init+0x48>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a2:	4a0f      	ldr	r2, [pc, #60]	@ (80021e0 <MX_DMA_Init+0x48>)
 80021a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021aa:	4b0d      	ldr	r3, [pc, #52]	@ (80021e0 <MX_DMA_Init+0x48>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021b2:	607b      	str	r3, [r7, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80021b6:	2200      	movs	r2, #0
 80021b8:	2105      	movs	r1, #5
 80021ba:	2010      	movs	r0, #16
 80021bc:	f001 f936 	bl	800342c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80021c0:	2010      	movs	r0, #16
 80021c2:	f001 f94f 	bl	8003464 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80021c6:	2200      	movs	r2, #0
 80021c8:	2105      	movs	r1, #5
 80021ca:	2011      	movs	r0, #17
 80021cc:	f001 f92e 	bl	800342c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80021d0:	2011      	movs	r0, #17
 80021d2:	f001 f947 	bl	8003464 <HAL_NVIC_EnableIRQ>

}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40023800 	.word	0x40023800

080021e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08a      	sub	sp, #40	@ 0x28
 80021e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ea:	f107 0314 	add.w	r3, r7, #20
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	605a      	str	r2, [r3, #4]
 80021f4:	609a      	str	r2, [r3, #8]
 80021f6:	60da      	str	r2, [r3, #12]
 80021f8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021fa:	4b44      	ldr	r3, [pc, #272]	@ (800230c <MX_GPIO_Init+0x128>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fe:	4a43      	ldr	r2, [pc, #268]	@ (800230c <MX_GPIO_Init+0x128>)
 8002200:	f043 0304 	orr.w	r3, r3, #4
 8002204:	6313      	str	r3, [r2, #48]	@ 0x30
 8002206:	4b41      	ldr	r3, [pc, #260]	@ (800230c <MX_GPIO_Init+0x128>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	f003 0304 	and.w	r3, r3, #4
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002212:	4b3e      	ldr	r3, [pc, #248]	@ (800230c <MX_GPIO_Init+0x128>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002216:	4a3d      	ldr	r2, [pc, #244]	@ (800230c <MX_GPIO_Init+0x128>)
 8002218:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800221c:	6313      	str	r3, [r2, #48]	@ 0x30
 800221e:	4b3b      	ldr	r3, [pc, #236]	@ (800230c <MX_GPIO_Init+0x128>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800222a:	4b38      	ldr	r3, [pc, #224]	@ (800230c <MX_GPIO_Init+0x128>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222e:	4a37      	ldr	r2, [pc, #220]	@ (800230c <MX_GPIO_Init+0x128>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	6313      	str	r3, [r2, #48]	@ 0x30
 8002236:	4b35      	ldr	r3, [pc, #212]	@ (800230c <MX_GPIO_Init+0x128>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	60bb      	str	r3, [r7, #8]
 8002240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002242:	4b32      	ldr	r3, [pc, #200]	@ (800230c <MX_GPIO_Init+0x128>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002246:	4a31      	ldr	r2, [pc, #196]	@ (800230c <MX_GPIO_Init+0x128>)
 8002248:	f043 0302 	orr.w	r3, r3, #2
 800224c:	6313      	str	r3, [r2, #48]	@ 0x30
 800224e:	4b2f      	ldr	r3, [pc, #188]	@ (800230c <MX_GPIO_Init+0x128>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	607b      	str	r3, [r7, #4]
 8002258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800225a:	4b2c      	ldr	r3, [pc, #176]	@ (800230c <MX_GPIO_Init+0x128>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	4a2b      	ldr	r2, [pc, #172]	@ (800230c <MX_GPIO_Init+0x128>)
 8002260:	f043 0308 	orr.w	r3, r3, #8
 8002264:	6313      	str	r3, [r2, #48]	@ 0x30
 8002266:	4b29      	ldr	r3, [pc, #164]	@ (800230c <MX_GPIO_Init+0x128>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	603b      	str	r3, [r7, #0]
 8002270:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002272:	2200      	movs	r2, #0
 8002274:	f244 0181 	movw	r1, #16513	@ 0x4081
 8002278:	4825      	ldr	r0, [pc, #148]	@ (8002310 <MX_GPIO_Init+0x12c>)
 800227a:	f001 fec3 	bl	8004004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800227e:	2201      	movs	r2, #1
 8002280:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002284:	4823      	ldr	r0, [pc, #140]	@ (8002314 <MX_GPIO_Init+0x130>)
 8002286:	f001 febd 	bl	8004004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800228a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800228e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002290:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002294:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800229a:	f107 0314 	add.w	r3, r7, #20
 800229e:	4619      	mov	r1, r3
 80022a0:	481d      	ldr	r0, [pc, #116]	@ (8002318 <MX_GPIO_Init+0x134>)
 80022a2:	f001 fd03 	bl	8003cac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80022a6:	f244 0381 	movw	r3, #16513	@ 0x4081
 80022aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ac:	2301      	movs	r3, #1
 80022ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b4:	2300      	movs	r3, #0
 80022b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	4619      	mov	r1, r3
 80022be:	4814      	ldr	r0, [pc, #80]	@ (8002310 <MX_GPIO_Init+0x12c>)
 80022c0:	f001 fcf4 	bl	8003cac <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80022c4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80022c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ca:	2302      	movs	r3, #2
 80022cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d2:	2303      	movs	r3, #3
 80022d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022d6:	2307      	movs	r3, #7
 80022d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022da:	f107 0314 	add.w	r3, r7, #20
 80022de:	4619      	mov	r1, r3
 80022e0:	480e      	ldr	r0, [pc, #56]	@ (800231c <MX_GPIO_Init+0x138>)
 80022e2:	f001 fce3 	bl	8003cac <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80022e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80022ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ec:	2301      	movs	r3, #1
 80022ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f4:	2300      	movs	r3, #0
 80022f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	4619      	mov	r1, r3
 80022fe:	4805      	ldr	r0, [pc, #20]	@ (8002314 <MX_GPIO_Init+0x130>)
 8002300:	f001 fcd4 	bl	8003cac <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002304:	bf00      	nop
 8002306:	3728      	adds	r7, #40	@ 0x28
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40023800 	.word	0x40023800
 8002310:	40020400 	.word	0x40020400
 8002314:	40020000 	.word	0x40020000
 8002318:	40020800 	.word	0x40020800
 800231c:	40020c00 	.word	0x40020c00

08002320 <HAL_Delay>:




void HAL_Delay(uint32_t Delay)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  osDelay(Delay);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f006 fd7d 	bl	8008e28 <osDelay>
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <TaskMicroROS>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMicroROS */
void TaskMicroROS(void *argument)
{
 8002338:	b5b0      	push	{r4, r5, r7, lr}
 800233a:	b0a6      	sub	sp, #152	@ 0x98
 800233c:	af02      	add	r7, sp, #8
 800233e:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN 5 */
	// micro-ROS configuration

	  rmw_uros_set_custom_transport(
 8002340:	4b53      	ldr	r3, [pc, #332]	@ (8002490 <TaskMicroROS+0x158>)
 8002342:	9301      	str	r3, [sp, #4]
 8002344:	4b53      	ldr	r3, [pc, #332]	@ (8002494 <TaskMicroROS+0x15c>)
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	4b53      	ldr	r3, [pc, #332]	@ (8002498 <TaskMicroROS+0x160>)
 800234a:	4a54      	ldr	r2, [pc, #336]	@ (800249c <TaskMicroROS+0x164>)
 800234c:	4954      	ldr	r1, [pc, #336]	@ (80024a0 <TaskMicroROS+0x168>)
 800234e:	2001      	movs	r0, #1
 8002350:	f00a f94a 	bl	800c5e8 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8002354:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002358:	4618      	mov	r0, r3
 800235a:	f00a f8c7 	bl	800c4ec <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 800235e:	4b51      	ldr	r3, [pc, #324]	@ (80024a4 <TaskMicroROS+0x16c>)
 8002360:	677b      	str	r3, [r7, #116]	@ 0x74
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8002362:	4b51      	ldr	r3, [pc, #324]	@ (80024a8 <TaskMicroROS+0x170>)
 8002364:	67bb      	str	r3, [r7, #120]	@ 0x78
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8002366:	4b51      	ldr	r3, [pc, #324]	@ (80024ac <TaskMicroROS+0x174>)
 8002368:	67fb      	str	r3, [r7, #124]	@ 0x7c
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800236a:	4b51      	ldr	r3, [pc, #324]	@ (80024b0 <TaskMicroROS+0x178>)
 800236c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8002370:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002374:	4618      	mov	r0, r3
 8002376:	f00a f8c7 	bl	800c508 <rcutils_set_default_allocator>
 800237a:	4603      	mov	r3, r0
 800237c:	f083 0301 	eor.w	r3, r3, #1
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d004      	beq.n	8002390 <TaskMicroROS+0x58>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 8002386:	f240 2182 	movw	r1, #642	@ 0x282
 800238a:	484a      	ldr	r0, [pc, #296]	@ (80024b4 <TaskMicroROS+0x17c>)
 800238c:	f014 f872 	bl	8016474 <iprintf>
//	  std_msgs__msg__Int32 msg;
	  rclc_support_t support;
	  rcl_allocator_t allocator;
	  rcl_node_t node;
//
	  allocator = rcl_get_default_allocator();
 8002390:	463b      	mov	r3, r7
 8002392:	4618      	mov	r0, r3
 8002394:	f00a f8d6 	bl	800c544 <rcutils_get_default_allocator>
 8002398:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800239c:	463d      	mov	r5, r7
 800239e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023a2:	682b      	ldr	r3, [r5, #0]
 80023a4:	6023      	str	r3, [r4, #0]
//
//	  //create init_options
	  rcl_ret_t ret = rclc_support_init(&support, 0, NULL, &allocator);
 80023a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023aa:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 80023ae:	2200      	movs	r2, #0
 80023b0:	2100      	movs	r1, #0
 80023b2:	f009 ffcd 	bl	800c350 <rclc_support_init>
 80023b6:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	  if(ret != RCL_RET_OK){
 80023ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d002      	beq.n	80023c8 <TaskMicroROS+0x90>
		  osDelay(10);
 80023c2:	200a      	movs	r0, #10
 80023c4:	f006 fd30 	bl	8008e28 <osDelay>

	  }
//	  // create node
	  rclc_node_init_default(&node, "cubemx_node", "", &support);
 80023c8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80023cc:	f107 0020 	add.w	r0, r7, #32
 80023d0:	4a39      	ldr	r2, [pc, #228]	@ (80024b8 <TaskMicroROS+0x180>)
 80023d2:	493a      	ldr	r1, [pc, #232]	@ (80024bc <TaskMicroROS+0x184>)
 80023d4:	f00a f806 	bl	800c3e4 <rclc_node_init_default>
//	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
//	    "cubemx_publisher");
//
//	  msg.data = 0;

	  rclc_publisher_init_default(
 80023d8:	f00a fdb8 	bl	800cf4c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 80023dc:	4602      	mov	r2, r0
 80023de:	f107 0120 	add.w	r1, r7, #32
 80023e2:	4b37      	ldr	r3, [pc, #220]	@ (80024c0 <TaskMicroROS+0x188>)
 80023e4:	4837      	ldr	r0, [pc, #220]	@ (80024c4 <TaskMicroROS+0x18c>)
 80023e6:	f00a f83f 	bl	800c468 <rclc_publisher_init_default>
	      &imu_publisher,
	      &node,
	      ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu),
	      "imu_data");

	  memset(&imu_msg, 0, sizeof(imu_msg));
 80023ea:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80023ee:	2100      	movs	r1, #0
 80023f0:	4835      	ldr	r0, [pc, #212]	@ (80024c8 <TaskMicroROS+0x190>)
 80023f2:	f014 f9b5 	bl	8016760 <memset>
	  uint8_t i=0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
//	    {
//	      printf("Error publishing (line %d)\n", __LINE__);
//	    }
//
//	    msg.data++;
	    i++;
 80023fc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002400:	3301      	adds	r3, #1
 8002402:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	    if(i>10){
 8002406:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800240a:	2b0a      	cmp	r3, #10
 800240c:	d906      	bls.n	800241c <TaskMicroROS+0xe4>
	    	i=0;
 800240e:	2300      	movs	r3, #0
 8002410:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	    	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8002414:	2101      	movs	r1, #1
 8002416:	482d      	ldr	r0, [pc, #180]	@ (80024cc <TaskMicroROS+0x194>)
 8002418:	f001 fe0d 	bl	8004036 <HAL_GPIO_TogglePin>
	    }


	    imu_msg.header.stamp.sec = rmw_uros_epoch_millis() / 1000;
 800241c:	f00a faaa 	bl	800c974 <rmw_uros_epoch_millis>
 8002420:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002424:	f04f 0300 	mov.w	r3, #0
 8002428:	f7fd ff72 	bl	8000310 <__aeabi_ldivmod>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4b25      	ldr	r3, [pc, #148]	@ (80024c8 <TaskMicroROS+0x190>)
 8002432:	601a      	str	r2, [r3, #0]
	    imu_msg.header.stamp.nanosec = (rmw_uros_epoch_millis() % 1000) * 1000000;
 8002434:	f00a fa9e 	bl	800c974 <rmw_uros_epoch_millis>
 8002438:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800243c:	f04f 0300 	mov.w	r3, #0
 8002440:	f7fd ff66 	bl	8000310 <__aeabi_ldivmod>
 8002444:	4b22      	ldr	r3, [pc, #136]	@ (80024d0 <TaskMicroROS+0x198>)
 8002446:	fb02 f303 	mul.w	r3, r2, r3
 800244a:	4a1f      	ldr	r2, [pc, #124]	@ (80024c8 <TaskMicroROS+0x190>)
 800244c:	6053      	str	r3, [r2, #4]
	    imu_msg.header.frame_id.data = frame_id;
 800244e:	4b1e      	ldr	r3, [pc, #120]	@ (80024c8 <TaskMicroROS+0x190>)
 8002450:	4a20      	ldr	r2, [pc, #128]	@ (80024d4 <TaskMicroROS+0x19c>)
 8002452:	609a      	str	r2, [r3, #8]
	    imu_msg.header.frame_id.size = strlen("imu_link");
 8002454:	4b1c      	ldr	r3, [pc, #112]	@ (80024c8 <TaskMicroROS+0x190>)
 8002456:	2208      	movs	r2, #8
 8002458:	60da      	str	r2, [r3, #12]
	    imu_msg.header.frame_id.capacity = imu_msg.header.frame_id.size + 1;
 800245a:	4b1b      	ldr	r3, [pc, #108]	@ (80024c8 <TaskMicroROS+0x190>)
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	3301      	adds	r3, #1
 8002460:	4a19      	ldr	r2, [pc, #100]	@ (80024c8 <TaskMicroROS+0x190>)
 8002462:	6113      	str	r3, [r2, #16]

	    osMutexAcquire(imuMsgMutexHandle, osWaitForever);
 8002464:	4b1c      	ldr	r3, [pc, #112]	@ (80024d8 <TaskMicroROS+0x1a0>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800246c:	4618      	mov	r0, r3
 800246e:	f006 fda3 	bl	8008fb8 <osMutexAcquire>

	    rcl_publish(&imu_publisher, &imu_msg, NULL);
 8002472:	2200      	movs	r2, #0
 8002474:	4914      	ldr	r1, [pc, #80]	@ (80024c8 <TaskMicroROS+0x190>)
 8002476:	4813      	ldr	r0, [pc, #76]	@ (80024c4 <TaskMicroROS+0x18c>)
 8002478:	f009 ff46 	bl	800c308 <rcl_publish>

	    osMutexRelease(imuMsgMutexHandle);
 800247c:	4b16      	ldr	r3, [pc, #88]	@ (80024d8 <TaskMicroROS+0x1a0>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f006 fdf7 	bl	8009074 <osMutexRelease>

	    osDelay(10);
 8002486:	200a      	movs	r0, #10
 8002488:	f006 fcce 	bl	8008e28 <osDelay>
	    i++;
 800248c:	e7b6      	b.n	80023fc <TaskMicroROS+0xc4>
 800248e:	bf00      	nop
 8002490:	08003169 	.word	0x08003169
 8002494:	08003109 	.word	0x08003109
 8002498:	080030e9 	.word	0x080030e9
 800249c:	080030bd 	.word	0x080030bd
 80024a0:	20004724 	.word	0x20004724
 80024a4:	080025e1 	.word	0x080025e1
 80024a8:	08002625 	.word	0x08002625
 80024ac:	0800265d 	.word	0x0800265d
 80024b0:	080026c9 	.word	0x080026c9
 80024b4:	080175e0 	.word	0x080175e0
 80024b8:	08017608 	.word	0x08017608
 80024bc:	0801760c 	.word	0x0801760c
 80024c0:	08017618 	.word	0x08017618
 80024c4:	20004480 	.word	0x20004480
 80024c8:	20004488 	.word	0x20004488
 80024cc:	40020400 	.word	0x40020400
 80024d0:	000f4240 	.word	0x000f4240
 80024d4:	20000000 	.word	0x20000000
 80024d8:	200045c8 	.word	0x200045c8

080024dc <TaskSensors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskSensors */
void TaskSensors(void *argument)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af02      	add	r7, sp, #8
 80024e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskSensors */

	int i=0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]
	ServoAngle = 90;
 80024e8:	4b2c      	ldr	r3, [pc, #176]	@ (800259c <TaskSensors+0xc0>)
 80024ea:	225a      	movs	r2, #90	@ 0x5a
 80024ec:	801a      	strh	r2, [r3, #0]
	IMU_Init(&IMU_1, 1, I2CNO_3, BNO055_I2C_ADRESS, 0, 0);
 80024ee:	2300      	movs	r3, #0
 80024f0:	9301      	str	r3, [sp, #4]
 80024f2:	2300      	movs	r3, #0
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	2328      	movs	r3, #40	@ 0x28
 80024f8:	2203      	movs	r2, #3
 80024fa:	2101      	movs	r1, #1
 80024fc:	4828      	ldr	r0, [pc, #160]	@ (80025a0 <TaskSensors+0xc4>)
 80024fe:	f7fe fa57 	bl	80009b0 <IMU_Init>
	osDelay(100);
 8002502:	2064      	movs	r0, #100	@ 0x64
 8002504:	f006 fc90 	bl	8008e28 <osDelay>
  /* Infinite loop */
  for(;;)
  {
	i++;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	3301      	adds	r3, #1
 800250c:	60fb      	str	r3, [r7, #12]
	if(i>=20){
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2b13      	cmp	r3, #19
 8002512:	dd05      	ble.n	8002520 <TaskSensors+0x44>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002514:	2180      	movs	r1, #128	@ 0x80
 8002516:	4823      	ldr	r0, [pc, #140]	@ (80025a4 <TaskSensors+0xc8>)
 8002518:	f001 fd8d 	bl	8004036 <HAL_GPIO_TogglePin>
		i=0;
 800251c:	2300      	movs	r3, #0
 800251e:	60fb      	str	r3, [r7, #12]
	}

	for(int j = 0; j<180; j+=10){
 8002520:	2300      	movs	r3, #0
 8002522:	60bb      	str	r3, [r7, #8]
 8002524:	e00a      	b.n	800253c <TaskSensors+0x60>
		Servo_SetAngle(j);
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	b2db      	uxtb	r3, r3
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff fbea 	bl	8001d04 <Servo_SetAngle>
		osDelay(10);
 8002530:	200a      	movs	r0, #10
 8002532:	f006 fc79 	bl	8008e28 <osDelay>
	for(int j = 0; j<180; j+=10){
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	330a      	adds	r3, #10
 800253a:	60bb      	str	r3, [r7, #8]
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2bb3      	cmp	r3, #179	@ 0xb3
 8002540:	ddf1      	ble.n	8002526 <TaskSensors+0x4a>
//	Servo_SetAngle(120);
//	osDelay(10);
//	Servo_SetAngle(180);
//    osDelay(10);

	IMU_Execute(&IMU_1, 1);
 8002542:	2101      	movs	r1, #1
 8002544:	4816      	ldr	r0, [pc, #88]	@ (80025a0 <TaskSensors+0xc4>)
 8002546:	f7fe fa6f 	bl	8000a28 <IMU_Execute>




	osMutexAcquire(imuMsgMutexHandle, osWaitForever);
 800254a:	4b17      	ldr	r3, [pc, #92]	@ (80025a8 <TaskSensors+0xcc>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002552:	4618      	mov	r0, r3
 8002554:	f006 fd30 	bl	8008fb8 <osMutexAcquire>

	imu_msg.linear_acceleration.x = IMU_1.CalculatedData.Accelerometer.X_Axis;
 8002558:	4b11      	ldr	r3, [pc, #68]	@ (80025a0 <TaskSensors+0xc4>)
 800255a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800255e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002562:	4b12      	ldr	r3, [pc, #72]	@ (80025ac <TaskSensors+0xd0>)
 8002564:	ed83 7b38 	vstr	d7, [r3, #224]	@ 0xe0
	imu_msg.linear_acceleration.y = IMU_1.CalculatedData.Accelerometer.Y_Axis;
 8002568:	4b0d      	ldr	r3, [pc, #52]	@ (80025a0 <TaskSensors+0xc4>)
 800256a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800256e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002572:	4b0e      	ldr	r3, [pc, #56]	@ (80025ac <TaskSensors+0xd0>)
 8002574:	ed83 7b3a 	vstr	d7, [r3, #232]	@ 0xe8
	imu_msg.linear_acceleration.z = IMU_1.CalculatedData.Accelerometer.Z_Axis;
 8002578:	4b09      	ldr	r3, [pc, #36]	@ (80025a0 <TaskSensors+0xc4>)
 800257a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800257e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002582:	4b0a      	ldr	r3, [pc, #40]	@ (80025ac <TaskSensors+0xd0>)
 8002584:	ed83 7b3c 	vstr	d7, [r3, #240]	@ 0xf0

	osMutexRelease(imuMsgMutexHandle);
 8002588:	4b07      	ldr	r3, [pc, #28]	@ (80025a8 <TaskSensors+0xcc>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f006 fd71 	bl	8009074 <osMutexRelease>

	osDelay(100);
 8002592:	2064      	movs	r0, #100	@ 0x64
 8002594:	f006 fc48 	bl	8008e28 <osDelay>
	i++;
 8002598:	e7b6      	b.n	8002508 <TaskSensors+0x2c>
 800259a:	bf00      	nop
 800259c:	20004878 	.word	0x20004878
 80025a0:	200007cc 	.word	0x200007cc
 80025a4:	40020400 	.word	0x40020400
 80025a8:	200045c8 	.word	0x200045c8
 80025ac:	20004488 	.word	0x20004488

080025b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a04      	ldr	r2, [pc, #16]	@ (80025d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d101      	bne.n	80025c6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80025c2:	f000 fe5b 	bl	800327c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40010000 	.word	0x40010000

080025d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025d8:	b672      	cpsid	i
}
 80025da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025dc:	bf00      	nop
 80025de:	e7fd      	b.n	80025dc <Error_Handler+0x8>

080025e0 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80025ea:	4b0c      	ldr	r3, [pc, #48]	@ (800261c <microros_allocate+0x3c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	461a      	mov	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4413      	add	r3, r2
 80025f4:	461a      	mov	r2, r3
 80025f6:	4b09      	ldr	r3, [pc, #36]	@ (800261c <microros_allocate+0x3c>)
 80025f8:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80025fa:	4b09      	ldr	r3, [pc, #36]	@ (8002620 <microros_allocate+0x40>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4413      	add	r3, r2
 8002604:	461a      	mov	r2, r3
 8002606:	4b06      	ldr	r3, [pc, #24]	@ (8002620 <microros_allocate+0x40>)
 8002608:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7ff f920 	bl	8001850 <pvPortMallocMicroROS>
 8002610:	4603      	mov	r3, r0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	2000487c 	.word	0x2000487c
 8002620:	20004880 	.word	0x20004880

08002624 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00c      	beq.n	800264e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7ff fa39 	bl	8001aac <getBlockSize>
 800263a:	4603      	mov	r3, r0
 800263c:	4a06      	ldr	r2, [pc, #24]	@ (8002658 <microros_deallocate+0x34>)
 800263e:	6812      	ldr	r2, [r2, #0]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	461a      	mov	r2, r3
 8002644:	4b04      	ldr	r3, [pc, #16]	@ (8002658 <microros_deallocate+0x34>)
 8002646:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7ff f9cf 	bl	80019ec <vPortFreeMicroROS>
  }
}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	20004880 	.word	0x20004880

0800265c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002668:	4b15      	ldr	r3, [pc, #84]	@ (80026c0 <microros_reallocate+0x64>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	461a      	mov	r2, r3
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	4413      	add	r3, r2
 8002672:	461a      	mov	r2, r3
 8002674:	4b12      	ldr	r3, [pc, #72]	@ (80026c0 <microros_reallocate+0x64>)
 8002676:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002678:	4b12      	ldr	r3, [pc, #72]	@ (80026c4 <microros_reallocate+0x68>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	461a      	mov	r2, r3
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	4413      	add	r3, r2
 8002682:	461a      	mov	r2, r3
 8002684:	4b0f      	ldr	r3, [pc, #60]	@ (80026c4 <microros_reallocate+0x68>)
 8002686:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d104      	bne.n	8002698 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800268e:	68b8      	ldr	r0, [r7, #8]
 8002690:	f7ff f8de 	bl	8001850 <pvPortMallocMicroROS>
 8002694:	4603      	mov	r3, r0
 8002696:	e00e      	b.n	80026b6 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f7ff fa07 	bl	8001aac <getBlockSize>
 800269e:	4603      	mov	r3, r0
 80026a0:	4a08      	ldr	r2, [pc, #32]	@ (80026c4 <microros_reallocate+0x68>)
 80026a2:	6812      	ldr	r2, [r2, #0]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	461a      	mov	r2, r3
 80026a8:	4b06      	ldr	r3, [pc, #24]	@ (80026c4 <microros_reallocate+0x68>)
 80026aa:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80026ac:	68b9      	ldr	r1, [r7, #8]
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f7ff fa1a 	bl	8001ae8 <pvPortReallocMicroROS>
 80026b4:	4603      	mov	r3, r0
  }
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	2000487c 	.word	0x2000487c
 80026c4:	20004880 	.word	0x20004880

080026c8 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	fb02 f303 	mul.w	r3, r2, r3
 80026dc:	4a0c      	ldr	r2, [pc, #48]	@ (8002710 <microros_zero_allocate+0x48>)
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	4413      	add	r3, r2
 80026e2:	461a      	mov	r2, r3
 80026e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002710 <microros_zero_allocate+0x48>)
 80026e6:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	fb02 f303 	mul.w	r3, r2, r3
 80026f0:	4a08      	ldr	r2, [pc, #32]	@ (8002714 <microros_zero_allocate+0x4c>)
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	4413      	add	r3, r2
 80026f6:	461a      	mov	r2, r3
 80026f8:	4b06      	ldr	r3, [pc, #24]	@ (8002714 <microros_zero_allocate+0x4c>)
 80026fa:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80026fc:	68b9      	ldr	r1, [r7, #8]
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f7ff fa1f 	bl	8001b42 <pvPortCallocMicroROS>
 8002704:	4603      	mov	r3, r0
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	2000487c 	.word	0x2000487c
 8002714:	20004880 	.word	0x20004880

08002718 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002718:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800271c:	b086      	sub	sp, #24
 800271e:	af00      	add	r7, sp, #0
 8002720:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002724:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800272a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800272e:	a320      	add	r3, pc, #128	@ (adr r3, 80027b0 <UTILS_NanosecondsToTimespec+0x98>)
 8002730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002734:	f7fd fdec 	bl	8000310 <__aeabi_ldivmod>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002742:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002746:	a31a      	add	r3, pc, #104	@ (adr r3, 80027b0 <UTILS_NanosecondsToTimespec+0x98>)
 8002748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274c:	f7fd fde0 	bl	8000310 <__aeabi_ldivmod>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	da20      	bge.n	800279e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	4a11      	ldr	r2, [pc, #68]	@ (80027a8 <UTILS_NanosecondsToTimespec+0x90>)
 8002762:	fb82 1203 	smull	r1, r2, r2, r3
 8002766:	1712      	asrs	r2, r2, #28
 8002768:	17db      	asrs	r3, r3, #31
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	3301      	adds	r3, #1
 800276e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002776:	6979      	ldr	r1, [r7, #20]
 8002778:	17c8      	asrs	r0, r1, #31
 800277a:	460c      	mov	r4, r1
 800277c:	4605      	mov	r5, r0
 800277e:	ebb2 0804 	subs.w	r8, r2, r4
 8002782:	eb63 0905 	sbc.w	r9, r3, r5
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	4906      	ldr	r1, [pc, #24]	@ (80027ac <UTILS_NanosecondsToTimespec+0x94>)
 8002794:	fb01 f303 	mul.w	r3, r1, r3
 8002798:	441a      	add	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	609a      	str	r2, [r3, #8]
    }
}
 800279e:	bf00      	nop
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80027a8:	44b82fa1 	.word	0x44b82fa1
 80027ac:	3b9aca00 	.word	0x3b9aca00
 80027b0:	3b9aca00 	.word	0x3b9aca00
 80027b4:	00000000 	.word	0x00000000

080027b8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80027b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027bc:	b08e      	sub	sp, #56	@ 0x38
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80027c2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80027c4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80027c8:	2300      	movs	r3, #0
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	f04f 0300 	mov.w	r3, #0
 80027d6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80027da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027de:	4618      	mov	r0, r3
 80027e0:	f008 f9b2 	bl	800ab48 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80027e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e6:	17da      	asrs	r2, r3, #31
 80027e8:	61bb      	str	r3, [r7, #24]
 80027ea:	61fa      	str	r2, [r7, #28]
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	f04f 0300 	mov.w	r3, #0
 80027f4:	69b9      	ldr	r1, [r7, #24]
 80027f6:	000b      	movs	r3, r1
 80027f8:	2200      	movs	r2, #0
 80027fa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80027fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002800:	2200      	movs	r2, #0
 8002802:	461c      	mov	r4, r3
 8002804:	4615      	mov	r5, r2
 8002806:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800280a:	1911      	adds	r1, r2, r4
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	416b      	adcs	r3, r5
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002816:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800281a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	f04f 0400 	mov.w	r4, #0
 8002826:	f04f 0500 	mov.w	r5, #0
 800282a:	015d      	lsls	r5, r3, #5
 800282c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002830:	0154      	lsls	r4, r2, #5
 8002832:	4622      	mov	r2, r4
 8002834:	462b      	mov	r3, r5
 8002836:	ebb2 0800 	subs.w	r8, r2, r0
 800283a:	eb63 0901 	sbc.w	r9, r3, r1
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800284a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800284e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002852:	4690      	mov	r8, r2
 8002854:	4699      	mov	r9, r3
 8002856:	eb18 0a00 	adds.w	sl, r8, r0
 800285a:	eb49 0b01 	adc.w	fp, r9, r1
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800286a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800286e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002872:	ebb2 040a 	subs.w	r4, r2, sl
 8002876:	603c      	str	r4, [r7, #0]
 8002878:	eb63 030b 	sbc.w	r3, r3, fp
 800287c:	607b      	str	r3, [r7, #4]
 800287e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002882:	4623      	mov	r3, r4
 8002884:	181b      	adds	r3, r3, r0
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	462b      	mov	r3, r5
 800288a:	eb41 0303 	adc.w	r3, r1, r3
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	6a3a      	ldr	r2, [r7, #32]
 8002892:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002896:	f7ff ff3f 	bl	8002718 <UTILS_NanosecondsToTimespec>

    return 0;
 800289a:	2300      	movs	r3, #0
 800289c:	4618      	mov	r0, r3
 800289e:	3738      	adds	r7, #56	@ 0x38
 80028a0:	46bd      	mov	sp, r7
 80028a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080028a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80028ae:	4b11      	ldr	r3, [pc, #68]	@ (80028f4 <HAL_MspInit+0x4c>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b2:	4a10      	ldr	r2, [pc, #64]	@ (80028f4 <HAL_MspInit+0x4c>)
 80028b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ba:	4b0e      	ldr	r3, [pc, #56]	@ (80028f4 <HAL_MspInit+0x4c>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028c2:	607b      	str	r3, [r7, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c6:	4b0b      	ldr	r3, [pc, #44]	@ (80028f4 <HAL_MspInit+0x4c>)
 80028c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ca:	4a0a      	ldr	r2, [pc, #40]	@ (80028f4 <HAL_MspInit+0x4c>)
 80028cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80028d2:	4b08      	ldr	r3, [pc, #32]	@ (80028f4 <HAL_MspInit+0x4c>)
 80028d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028da:	603b      	str	r3, [r7, #0]
 80028dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80028de:	2200      	movs	r2, #0
 80028e0:	210f      	movs	r1, #15
 80028e2:	f06f 0001 	mvn.w	r0, #1
 80028e6:	f000 fda1 	bl	800342c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028ea:	bf00      	nop
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40023800 	.word	0x40023800

080028f8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b0b0      	sub	sp, #192	@ 0xc0
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002900:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
 800290e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002910:	f107 031c 	add.w	r3, r7, #28
 8002914:	2290      	movs	r2, #144	@ 0x90
 8002916:	2100      	movs	r1, #0
 8002918:	4618      	mov	r0, r3
 800291a:	f013 ff21 	bl	8016760 <memset>
  if(hi2c->Instance==I2C2)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a55      	ldr	r2, [pc, #340]	@ (8002a78 <HAL_I2C_MspInit+0x180>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d13e      	bne.n	80029a6 <HAL_I2C_MspInit+0xae>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002928:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800292c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800292e:	2300      	movs	r3, #0
 8002930:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002934:	f107 031c 	add.w	r3, r7, #28
 8002938:	4618      	mov	r0, r3
 800293a:	f002 ff05 	bl	8005748 <HAL_RCCEx_PeriphCLKConfig>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8002944:	f7ff fe46 	bl	80025d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002948:	4b4c      	ldr	r3, [pc, #304]	@ (8002a7c <HAL_I2C_MspInit+0x184>)
 800294a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294c:	4a4b      	ldr	r2, [pc, #300]	@ (8002a7c <HAL_I2C_MspInit+0x184>)
 800294e:	f043 0302 	orr.w	r3, r3, #2
 8002952:	6313      	str	r3, [r2, #48]	@ 0x30
 8002954:	4b49      	ldr	r3, [pc, #292]	@ (8002a7c <HAL_I2C_MspInit+0x184>)
 8002956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	61bb      	str	r3, [r7, #24]
 800295e:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002960:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002964:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002968:	2312      	movs	r3, #18
 800296a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002974:	2303      	movs	r3, #3
 8002976:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800297a:	2304      	movs	r3, #4
 800297c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002980:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002984:	4619      	mov	r1, r3
 8002986:	483e      	ldr	r0, [pc, #248]	@ (8002a80 <HAL_I2C_MspInit+0x188>)
 8002988:	f001 f990 	bl	8003cac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800298c:	4b3b      	ldr	r3, [pc, #236]	@ (8002a7c <HAL_I2C_MspInit+0x184>)
 800298e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002990:	4a3a      	ldr	r2, [pc, #232]	@ (8002a7c <HAL_I2C_MspInit+0x184>)
 8002992:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002996:	6413      	str	r3, [r2, #64]	@ 0x40
 8002998:	4b38      	ldr	r3, [pc, #224]	@ (8002a7c <HAL_I2C_MspInit+0x184>)
 800299a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 80029a4:	e064      	b.n	8002a70 <HAL_I2C_MspInit+0x178>
  else if(hi2c->Instance==I2C3)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a36      	ldr	r2, [pc, #216]	@ (8002a84 <HAL_I2C_MspInit+0x18c>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d15f      	bne.n	8002a70 <HAL_I2C_MspInit+0x178>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80029b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029b4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80029b6:	2300      	movs	r3, #0
 80029b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029bc:	f107 031c 	add.w	r3, r7, #28
 80029c0:	4618      	mov	r0, r3
 80029c2:	f002 fec1 	bl	8005748 <HAL_RCCEx_PeriphCLKConfig>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 80029cc:	f7ff fe02 	bl	80025d4 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029d0:	4b2a      	ldr	r3, [pc, #168]	@ (8002a7c <HAL_I2C_MspInit+0x184>)
 80029d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d4:	4a29      	ldr	r2, [pc, #164]	@ (8002a7c <HAL_I2C_MspInit+0x184>)
 80029d6:	f043 0304 	orr.w	r3, r3, #4
 80029da:	6313      	str	r3, [r2, #48]	@ 0x30
 80029dc:	4b27      	ldr	r3, [pc, #156]	@ (8002a7c <HAL_I2C_MspInit+0x184>)
 80029de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e8:	4b24      	ldr	r3, [pc, #144]	@ (8002a7c <HAL_I2C_MspInit+0x184>)
 80029ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ec:	4a23      	ldr	r2, [pc, #140]	@ (8002a7c <HAL_I2C_MspInit+0x184>)
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80029f4:	4b21      	ldr	r3, [pc, #132]	@ (8002a7c <HAL_I2C_MspInit+0x184>)
 80029f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a08:	2312      	movs	r3, #18
 8002a0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a14:	2303      	movs	r3, #3
 8002a16:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a1a:	2304      	movs	r3, #4
 8002a1c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a20:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002a24:	4619      	mov	r1, r3
 8002a26:	4818      	ldr	r0, [pc, #96]	@ (8002a88 <HAL_I2C_MspInit+0x190>)
 8002a28:	f001 f940 	bl	8003cac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a34:	2312      	movs	r3, #18
 8002a36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a40:	2303      	movs	r3, #3
 8002a42:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a46:	2304      	movs	r3, #4
 8002a48:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a4c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002a50:	4619      	mov	r1, r3
 8002a52:	480e      	ldr	r0, [pc, #56]	@ (8002a8c <HAL_I2C_MspInit+0x194>)
 8002a54:	f001 f92a 	bl	8003cac <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002a58:	4b08      	ldr	r3, [pc, #32]	@ (8002a7c <HAL_I2C_MspInit+0x184>)
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5c:	4a07      	ldr	r2, [pc, #28]	@ (8002a7c <HAL_I2C_MspInit+0x184>)
 8002a5e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a62:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a64:	4b05      	ldr	r3, [pc, #20]	@ (8002a7c <HAL_I2C_MspInit+0x184>)
 8002a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a6c:	60bb      	str	r3, [r7, #8]
 8002a6e:	68bb      	ldr	r3, [r7, #8]
}
 8002a70:	bf00      	nop
 8002a72:	37c0      	adds	r7, #192	@ 0xc0
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40005800 	.word	0x40005800
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40020400 	.word	0x40020400
 8002a84:	40005c00 	.word	0x40005c00
 8002a88:	40020800 	.word	0x40020800
 8002a8c:	40020000 	.word	0x40020000

08002a90 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08a      	sub	sp, #40	@ 0x28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a98:	f107 0314 	add.w	r3, r7, #20
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	60da      	str	r2, [r3, #12]
 8002aa6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a1b      	ldr	r2, [pc, #108]	@ (8002b1c <HAL_SPI_MspInit+0x8c>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d12f      	bne.n	8002b12 <HAL_SPI_MspInit+0x82>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b20 <HAL_SPI_MspInit+0x90>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab6:	4a1a      	ldr	r2, [pc, #104]	@ (8002b20 <HAL_SPI_MspInit+0x90>)
 8002ab8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002abc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002abe:	4b18      	ldr	r3, [pc, #96]	@ (8002b20 <HAL_SPI_MspInit+0x90>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aca:	4b15      	ldr	r3, [pc, #84]	@ (8002b20 <HAL_SPI_MspInit+0x90>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ace:	4a14      	ldr	r2, [pc, #80]	@ (8002b20 <HAL_SPI_MspInit+0x90>)
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ad6:	4b12      	ldr	r3, [pc, #72]	@ (8002b20 <HAL_SPI_MspInit+0x90>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002ae2:	23e0      	movs	r3, #224	@ 0xe0
 8002ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aee:	2303      	movs	r3, #3
 8002af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002af2:	2305      	movs	r3, #5
 8002af4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af6:	f107 0314 	add.w	r3, r7, #20
 8002afa:	4619      	mov	r1, r3
 8002afc:	4809      	ldr	r0, [pc, #36]	@ (8002b24 <HAL_SPI_MspInit+0x94>)
 8002afe:	f001 f8d5 	bl	8003cac <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002b02:	2200      	movs	r2, #0
 8002b04:	2105      	movs	r1, #5
 8002b06:	2023      	movs	r0, #35	@ 0x23
 8002b08:	f000 fc90 	bl	800342c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002b0c:	2023      	movs	r0, #35	@ 0x23
 8002b0e:	f000 fca9 	bl	8003464 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002b12:	bf00      	nop
 8002b14:	3728      	adds	r7, #40	@ 0x28
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40013000 	.word	0x40013000
 8002b20:	40023800 	.word	0x40023800
 8002b24:	40020000 	.word	0x40020000

08002b28 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a0d      	ldr	r2, [pc, #52]	@ (8002b6c <HAL_TIM_Base_MspInit+0x44>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d113      	bne.n	8002b62 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b70 <HAL_TIM_Base_MspInit+0x48>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3e:	4a0c      	ldr	r2, [pc, #48]	@ (8002b70 <HAL_TIM_Base_MspInit+0x48>)
 8002b40:	f043 0302 	orr.w	r3, r3, #2
 8002b44:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b46:	4b0a      	ldr	r3, [pc, #40]	@ (8002b70 <HAL_TIM_Base_MspInit+0x48>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002b52:	2200      	movs	r2, #0
 8002b54:	2105      	movs	r1, #5
 8002b56:	201d      	movs	r0, #29
 8002b58:	f000 fc68 	bl	800342c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b5c:	201d      	movs	r0, #29
 8002b5e:	f000 fc81 	bl	8003464 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002b62:	bf00      	nop
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40000400 	.word	0x40000400
 8002b70:	40023800 	.word	0x40023800

08002b74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7c:	f107 030c 	add.w	r3, r7, #12
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	609a      	str	r2, [r3, #8]
 8002b88:	60da      	str	r2, [r3, #12]
 8002b8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a11      	ldr	r2, [pc, #68]	@ (8002bd8 <HAL_TIM_MspPostInit+0x64>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d11b      	bne.n	8002bce <HAL_TIM_MspPostInit+0x5a>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b96:	4b11      	ldr	r3, [pc, #68]	@ (8002bdc <HAL_TIM_MspPostInit+0x68>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9a:	4a10      	ldr	r2, [pc, #64]	@ (8002bdc <HAL_TIM_MspPostInit+0x68>)
 8002b9c:	f043 0304 	orr.w	r3, r3, #4
 8002ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8002bdc <HAL_TIM_MspPostInit+0x68>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	60bb      	str	r3, [r7, #8]
 8002bac:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002bae:	2380      	movs	r3, #128	@ 0x80
 8002bb0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bc2:	f107 030c 	add.w	r3, r7, #12
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4805      	ldr	r0, [pc, #20]	@ (8002be0 <HAL_TIM_MspPostInit+0x6c>)
 8002bca:	f001 f86f 	bl	8003cac <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002bce:	bf00      	nop
 8002bd0:	3720      	adds	r7, #32
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40000400 	.word	0x40000400
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	40020800 	.word	0x40020800

08002be4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b0ae      	sub	sp, #184	@ 0xb8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bec:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	605a      	str	r2, [r3, #4]
 8002bf6:	609a      	str	r2, [r3, #8]
 8002bf8:	60da      	str	r2, [r3, #12]
 8002bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bfc:	f107 0314 	add.w	r3, r7, #20
 8002c00:	2290      	movs	r2, #144	@ 0x90
 8002c02:	2100      	movs	r1, #0
 8002c04:	4618      	mov	r0, r3
 8002c06:	f013 fdab 	bl	8016760 <memset>
  if(huart->Instance==USART2)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a54      	ldr	r2, [pc, #336]	@ (8002d60 <HAL_UART_MspInit+0x17c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	f040 80a1 	bne.w	8002d58 <HAL_UART_MspInit+0x174>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002c16:	2380      	movs	r3, #128	@ 0x80
 8002c18:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c1e:	f107 0314 	add.w	r3, r7, #20
 8002c22:	4618      	mov	r0, r3
 8002c24:	f002 fd90 	bl	8005748 <HAL_RCCEx_PeriphCLKConfig>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002c2e:	f7ff fcd1 	bl	80025d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c32:	4b4c      	ldr	r3, [pc, #304]	@ (8002d64 <HAL_UART_MspInit+0x180>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c36:	4a4b      	ldr	r2, [pc, #300]	@ (8002d64 <HAL_UART_MspInit+0x180>)
 8002c38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c3e:	4b49      	ldr	r3, [pc, #292]	@ (8002d64 <HAL_UART_MspInit+0x180>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4a:	4b46      	ldr	r3, [pc, #280]	@ (8002d64 <HAL_UART_MspInit+0x180>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4e:	4a45      	ldr	r2, [pc, #276]	@ (8002d64 <HAL_UART_MspInit+0x180>)
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c56:	4b43      	ldr	r3, [pc, #268]	@ (8002d64 <HAL_UART_MspInit+0x180>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002c62:	230c      	movs	r3, #12
 8002c64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c74:	2303      	movs	r3, #3
 8002c76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c7a:	2307      	movs	r3, #7
 8002c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c80:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002c84:	4619      	mov	r1, r3
 8002c86:	4838      	ldr	r0, [pc, #224]	@ (8002d68 <HAL_UART_MspInit+0x184>)
 8002c88:	f001 f810 	bl	8003cac <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002c8c:	4b37      	ldr	r3, [pc, #220]	@ (8002d6c <HAL_UART_MspInit+0x188>)
 8002c8e:	4a38      	ldr	r2, [pc, #224]	@ (8002d70 <HAL_UART_MspInit+0x18c>)
 8002c90:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002c92:	4b36      	ldr	r3, [pc, #216]	@ (8002d6c <HAL_UART_MspInit+0x188>)
 8002c94:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002c98:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c9a:	4b34      	ldr	r3, [pc, #208]	@ (8002d6c <HAL_UART_MspInit+0x188>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ca0:	4b32      	ldr	r3, [pc, #200]	@ (8002d6c <HAL_UART_MspInit+0x188>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ca6:	4b31      	ldr	r3, [pc, #196]	@ (8002d6c <HAL_UART_MspInit+0x188>)
 8002ca8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cac:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cae:	4b2f      	ldr	r3, [pc, #188]	@ (8002d6c <HAL_UART_MspInit+0x188>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cb4:	4b2d      	ldr	r3, [pc, #180]	@ (8002d6c <HAL_UART_MspInit+0x188>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002cba:	4b2c      	ldr	r3, [pc, #176]	@ (8002d6c <HAL_UART_MspInit+0x188>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002cc0:	4b2a      	ldr	r3, [pc, #168]	@ (8002d6c <HAL_UART_MspInit+0x188>)
 8002cc2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002cc6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cc8:	4b28      	ldr	r3, [pc, #160]	@ (8002d6c <HAL_UART_MspInit+0x188>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002cce:	4827      	ldr	r0, [pc, #156]	@ (8002d6c <HAL_UART_MspInit+0x188>)
 8002cd0:	f000 fbd6 	bl	8003480 <HAL_DMA_Init>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8002cda:	f7ff fc7b 	bl	80025d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a22      	ldr	r2, [pc, #136]	@ (8002d6c <HAL_UART_MspInit+0x188>)
 8002ce2:	675a      	str	r2, [r3, #116]	@ 0x74
 8002ce4:	4a21      	ldr	r2, [pc, #132]	@ (8002d6c <HAL_UART_MspInit+0x188>)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002cea:	4b22      	ldr	r3, [pc, #136]	@ (8002d74 <HAL_UART_MspInit+0x190>)
 8002cec:	4a22      	ldr	r2, [pc, #136]	@ (8002d78 <HAL_UART_MspInit+0x194>)
 8002cee:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002cf0:	4b20      	ldr	r3, [pc, #128]	@ (8002d74 <HAL_UART_MspInit+0x190>)
 8002cf2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002cf6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cf8:	4b1e      	ldr	r3, [pc, #120]	@ (8002d74 <HAL_UART_MspInit+0x190>)
 8002cfa:	2240      	movs	r2, #64	@ 0x40
 8002cfc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cfe:	4b1d      	ldr	r3, [pc, #116]	@ (8002d74 <HAL_UART_MspInit+0x190>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d04:	4b1b      	ldr	r3, [pc, #108]	@ (8002d74 <HAL_UART_MspInit+0x190>)
 8002d06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d0a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d0c:	4b19      	ldr	r3, [pc, #100]	@ (8002d74 <HAL_UART_MspInit+0x190>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d12:	4b18      	ldr	r3, [pc, #96]	@ (8002d74 <HAL_UART_MspInit+0x190>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002d18:	4b16      	ldr	r3, [pc, #88]	@ (8002d74 <HAL_UART_MspInit+0x190>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002d1e:	4b15      	ldr	r3, [pc, #84]	@ (8002d74 <HAL_UART_MspInit+0x190>)
 8002d20:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002d24:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d26:	4b13      	ldr	r3, [pc, #76]	@ (8002d74 <HAL_UART_MspInit+0x190>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002d2c:	4811      	ldr	r0, [pc, #68]	@ (8002d74 <HAL_UART_MspInit+0x190>)
 8002d2e:	f000 fba7 	bl	8003480 <HAL_DMA_Init>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <HAL_UART_MspInit+0x158>
    {
      Error_Handler();
 8002d38:	f7ff fc4c 	bl	80025d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a0d      	ldr	r2, [pc, #52]	@ (8002d74 <HAL_UART_MspInit+0x190>)
 8002d40:	671a      	str	r2, [r3, #112]	@ 0x70
 8002d42:	4a0c      	ldr	r2, [pc, #48]	@ (8002d74 <HAL_UART_MspInit+0x190>)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2105      	movs	r1, #5
 8002d4c:	2026      	movs	r0, #38	@ 0x26
 8002d4e:	f000 fb6d 	bl	800342c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002d52:	2026      	movs	r0, #38	@ 0x26
 8002d54:	f000 fb86 	bl	8003464 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002d58:	bf00      	nop
 8002d5a:	37b8      	adds	r7, #184	@ 0xb8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40004400 	.word	0x40004400
 8002d64:	40023800 	.word	0x40023800
 8002d68:	40020000 	.word	0x40020000
 8002d6c:	200047ac 	.word	0x200047ac
 8002d70:	40026088 	.word	0x40026088
 8002d74:	2000480c 	.word	0x2000480c
 8002d78:	400260a0 	.word	0x400260a0

08002d7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08c      	sub	sp, #48	@ 0x30
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002d8c:	4b2e      	ldr	r3, [pc, #184]	@ (8002e48 <HAL_InitTick+0xcc>)
 8002d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d90:	4a2d      	ldr	r2, [pc, #180]	@ (8002e48 <HAL_InitTick+0xcc>)
 8002d92:	f043 0301 	orr.w	r3, r3, #1
 8002d96:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d98:	4b2b      	ldr	r3, [pc, #172]	@ (8002e48 <HAL_InitTick+0xcc>)
 8002d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002da4:	f107 020c 	add.w	r2, r7, #12
 8002da8:	f107 0310 	add.w	r3, r7, #16
 8002dac:	4611      	mov	r1, r2
 8002dae:	4618      	mov	r0, r3
 8002db0:	f002 fc98 	bl	80056e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002db4:	f002 fc82 	bl	80056bc <HAL_RCC_GetPCLK2Freq>
 8002db8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dbc:	4a23      	ldr	r2, [pc, #140]	@ (8002e4c <HAL_InitTick+0xd0>)
 8002dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc2:	0c9b      	lsrs	r3, r3, #18
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002dc8:	4b21      	ldr	r3, [pc, #132]	@ (8002e50 <HAL_InitTick+0xd4>)
 8002dca:	4a22      	ldr	r2, [pc, #136]	@ (8002e54 <HAL_InitTick+0xd8>)
 8002dcc:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002dce:	4b20      	ldr	r3, [pc, #128]	@ (8002e50 <HAL_InitTick+0xd4>)
 8002dd0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002dd4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002dd6:	4a1e      	ldr	r2, [pc, #120]	@ (8002e50 <HAL_InitTick+0xd4>)
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dda:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002ddc:	4b1c      	ldr	r3, [pc, #112]	@ (8002e50 <HAL_InitTick+0xd4>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002de2:	4b1b      	ldr	r3, [pc, #108]	@ (8002e50 <HAL_InitTick+0xd4>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002de8:	4b19      	ldr	r3, [pc, #100]	@ (8002e50 <HAL_InitTick+0xd4>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002dee:	4818      	ldr	r0, [pc, #96]	@ (8002e50 <HAL_InitTick+0xd4>)
 8002df0:	f003 fa9d 	bl	800632e <HAL_TIM_Base_Init>
 8002df4:	4603      	mov	r3, r0
 8002df6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002dfa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d11b      	bne.n	8002e3a <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002e02:	4813      	ldr	r0, [pc, #76]	@ (8002e50 <HAL_InitTick+0xd4>)
 8002e04:	f003 faea 	bl	80063dc <HAL_TIM_Base_Start_IT>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002e0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d111      	bne.n	8002e3a <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002e16:	2019      	movs	r0, #25
 8002e18:	f000 fb24 	bl	8003464 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b0f      	cmp	r3, #15
 8002e20:	d808      	bhi.n	8002e34 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002e22:	2200      	movs	r2, #0
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	2019      	movs	r0, #25
 8002e28:	f000 fb00 	bl	800342c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e2c:	4a0a      	ldr	r2, [pc, #40]	@ (8002e58 <HAL_InitTick+0xdc>)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6013      	str	r3, [r2, #0]
 8002e32:	e002      	b.n	8002e3a <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002e3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3730      	adds	r7, #48	@ 0x30
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	431bde83 	.word	0x431bde83
 8002e50:	20004884 	.word	0x20004884
 8002e54:	40010000 	.word	0x40010000
 8002e58:	20000014 	.word	0x20000014

08002e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e60:	bf00      	nop
 8002e62:	e7fd      	b.n	8002e60 <NMI_Handler+0x4>

08002e64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e68:	bf00      	nop
 8002e6a:	e7fd      	b.n	8002e68 <HardFault_Handler+0x4>

08002e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e70:	bf00      	nop
 8002e72:	e7fd      	b.n	8002e70 <MemManage_Handler+0x4>

08002e74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e78:	bf00      	nop
 8002e7a:	e7fd      	b.n	8002e78 <BusFault_Handler+0x4>

08002e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e80:	bf00      	nop
 8002e82:	e7fd      	b.n	8002e80 <UsageFault_Handler+0x4>

08002e84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e88:	bf00      	nop
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
	...

08002e94 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002e98:	4802      	ldr	r0, [pc, #8]	@ (8002ea4 <DMA1_Stream5_IRQHandler+0x10>)
 8002e9a:	f000 fc91 	bl	80037c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002e9e:	bf00      	nop
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	200047ac 	.word	0x200047ac

08002ea8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002eac:	4802      	ldr	r0, [pc, #8]	@ (8002eb8 <DMA1_Stream6_IRQHandler+0x10>)
 8002eae:	f000 fc87 	bl	80037c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	2000480c 	.word	0x2000480c

08002ebc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ec0:	4802      	ldr	r0, [pc, #8]	@ (8002ecc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002ec2:	f003 fb64 	bl	800658e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002ec6:	bf00      	nop
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	20004884 	.word	0x20004884

08002ed0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002ed4:	4802      	ldr	r0, [pc, #8]	@ (8002ee0 <TIM3_IRQHandler+0x10>)
 8002ed6:	f003 fb5a 	bl	800658e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002eda:	bf00      	nop
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	200046d8 	.word	0x200046d8

08002ee4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002ee8:	4802      	ldr	r0, [pc, #8]	@ (8002ef4 <SPI1_IRQHandler+0x10>)
 8002eea:	f003 f901 	bl	80060f0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002eee:	bf00      	nop
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	20004674 	.word	0x20004674

08002ef8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002efc:	4802      	ldr	r0, [pc, #8]	@ (8002f08 <USART2_IRQHandler+0x10>)
 8002efe:	f004 fc2f 	bl	8007760 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f02:	bf00      	nop
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	20004724 	.word	0x20004724

08002f0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  return 1;
 8002f10:	2301      	movs	r3, #1
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <_kill>:

int _kill(int pid, int sig)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f26:	f013 fcaf 	bl	8016888 <__errno>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2216      	movs	r2, #22
 8002f2e:	601a      	str	r2, [r3, #0]
  return -1;
 8002f30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <_exit>:

void _exit (int status)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f44:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff ffe7 	bl	8002f1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f4e:	bf00      	nop
 8002f50:	e7fd      	b.n	8002f4e <_exit+0x12>

08002f52 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b086      	sub	sp, #24
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	60f8      	str	r0, [r7, #12]
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	e00a      	b.n	8002f7a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f64:	f3af 8000 	nop.w
 8002f68:	4601      	mov	r1, r0
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	1c5a      	adds	r2, r3, #1
 8002f6e:	60ba      	str	r2, [r7, #8]
 8002f70:	b2ca      	uxtb	r2, r1
 8002f72:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	3301      	adds	r3, #1
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	dbf0      	blt.n	8002f64 <_read+0x12>
  }

  return len;
 8002f82:	687b      	ldr	r3, [r7, #4]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3718      	adds	r7, #24
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f98:	2300      	movs	r3, #0
 8002f9a:	617b      	str	r3, [r7, #20]
 8002f9c:	e009      	b.n	8002fb2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	1c5a      	adds	r2, r3, #1
 8002fa2:	60ba      	str	r2, [r7, #8]
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	617b      	str	r3, [r7, #20]
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	dbf1      	blt.n	8002f9e <_write+0x12>
  }
  return len;
 8002fba:	687b      	ldr	r3, [r7, #4]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <_close>:

int _close(int file)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fcc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fec:	605a      	str	r2, [r3, #4]
  return 0;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <_isatty>:

int _isatty(int file)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003004:	2301      	movs	r3, #1
}
 8003006:	4618      	mov	r0, r3
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003012:	b480      	push	{r7}
 8003014:	b085      	sub	sp, #20
 8003016:	af00      	add	r7, sp, #0
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003034:	4a14      	ldr	r2, [pc, #80]	@ (8003088 <_sbrk+0x5c>)
 8003036:	4b15      	ldr	r3, [pc, #84]	@ (800308c <_sbrk+0x60>)
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003040:	4b13      	ldr	r3, [pc, #76]	@ (8003090 <_sbrk+0x64>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d102      	bne.n	800304e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003048:	4b11      	ldr	r3, [pc, #68]	@ (8003090 <_sbrk+0x64>)
 800304a:	4a12      	ldr	r2, [pc, #72]	@ (8003094 <_sbrk+0x68>)
 800304c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800304e:	4b10      	ldr	r3, [pc, #64]	@ (8003090 <_sbrk+0x64>)
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4413      	add	r3, r2
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	429a      	cmp	r2, r3
 800305a:	d207      	bcs.n	800306c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800305c:	f013 fc14 	bl	8016888 <__errno>
 8003060:	4603      	mov	r3, r0
 8003062:	220c      	movs	r2, #12
 8003064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003066:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800306a:	e009      	b.n	8003080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800306c:	4b08      	ldr	r3, [pc, #32]	@ (8003090 <_sbrk+0x64>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003072:	4b07      	ldr	r3, [pc, #28]	@ (8003090 <_sbrk+0x64>)
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4413      	add	r3, r2
 800307a:	4a05      	ldr	r2, [pc, #20]	@ (8003090 <_sbrk+0x64>)
 800307c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800307e:	68fb      	ldr	r3, [r7, #12]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	20080000 	.word	0x20080000
 800308c:	00000400 	.word	0x00000400
 8003090:	200048d4 	.word	0x200048d4
 8003094:	2000ec88 	.word	0x2000ec88

08003098 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800309c:	4b06      	ldr	r3, [pc, #24]	@ (80030b8 <SystemInit+0x20>)
 800309e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a2:	4a05      	ldr	r2, [pc, #20]	@ (80030b8 <SystemInit+0x20>)
 80030a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80030a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030ac:	bf00      	nop
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	e000ed00 	.word	0xe000ed00

080030bc <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80030ca:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80030cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80030d0:	4904      	ldr	r1, [pc, #16]	@ (80030e4 <cubemx_transport_open+0x28>)
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f004 fa6e 	bl	80075b4 <HAL_UART_Receive_DMA>
    return true;
 80030d8:	2301      	movs	r3, #1
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	200048d8 	.word	0x200048d8

080030e8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80030f6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f004 fa9f 	bl	800763c <HAL_UART_DMAStop>
    return true;
 80030fe:	2301      	movs	r3, #1
}
 8003100:	4618      	mov	r0, r3
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
 8003114:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800311c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003122:	2b20      	cmp	r3, #32
 8003124:	d11a      	bne.n	800315c <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	b29b      	uxth	r3, r3
 800312a:	461a      	mov	r2, r3
 800312c:	68b9      	ldr	r1, [r7, #8]
 800312e:	6978      	ldr	r0, [r7, #20]
 8003130:	f004 f9c4 	bl	80074bc <HAL_UART_Transmit_DMA>
 8003134:	4603      	mov	r3, r0
 8003136:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8003138:	e002      	b.n	8003140 <cubemx_transport_write+0x38>
            osDelay(1);
 800313a:	2001      	movs	r0, #1
 800313c:	f005 fe74 	bl	8008e28 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8003140:	7cfb      	ldrb	r3, [r7, #19]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d103      	bne.n	800314e <cubemx_transport_write+0x46>
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800314a:	2b20      	cmp	r3, #32
 800314c:	d1f5      	bne.n	800313a <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 800314e:	7cfb      	ldrb	r3, [r7, #19]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <cubemx_transport_write+0x50>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	e002      	b.n	800315e <cubemx_transport_write+0x56>
 8003158:	2300      	movs	r3, #0
 800315a:	e000      	b.n	800315e <cubemx_transport_write+0x56>
    }else{
        return 0;
 800315c:	2300      	movs	r3, #0
    }
}
 800315e:	4618      	mov	r0, r3
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
	...

08003168 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
 8003174:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800317c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800317e:	2300      	movs	r3, #0
 8003180:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8003182:	b672      	cpsid	i
}
 8003184:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8003192:	4a1c      	ldr	r2, [pc, #112]	@ (8003204 <cubemx_transport_read+0x9c>)
 8003194:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003196:	b662      	cpsie	i
}
 8003198:	bf00      	nop
        __enable_irq();
        ms_used++;
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	3301      	adds	r3, #1
 800319e:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80031a0:	2001      	movs	r0, #1
 80031a2:	f005 fe41 	bl	8008e28 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80031a6:	4b18      	ldr	r3, [pc, #96]	@ (8003208 <cubemx_transport_read+0xa0>)
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	4b16      	ldr	r3, [pc, #88]	@ (8003204 <cubemx_transport_read+0x9c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d103      	bne.n	80031ba <cubemx_transport_read+0x52>
 80031b2:	69fa      	ldr	r2, [r7, #28]
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	dbe3      	blt.n	8003182 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80031be:	e011      	b.n	80031e4 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80031c0:	4b11      	ldr	r3, [pc, #68]	@ (8003208 <cubemx_transport_read+0xa0>)
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68b9      	ldr	r1, [r7, #8]
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	440b      	add	r3, r1
 80031ca:	4910      	ldr	r1, [pc, #64]	@ (800320c <cubemx_transport_read+0xa4>)
 80031cc:	5c8a      	ldrb	r2, [r1, r2]
 80031ce:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80031d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003208 <cubemx_transport_read+0xa0>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	3301      	adds	r3, #1
 80031d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031da:	4a0b      	ldr	r2, [pc, #44]	@ (8003208 <cubemx_transport_read+0xa0>)
 80031dc:	6013      	str	r3, [r2, #0]
        wrote++;
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	3301      	adds	r3, #1
 80031e2:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80031e4:	4b08      	ldr	r3, [pc, #32]	@ (8003208 <cubemx_transport_read+0xa0>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	4b06      	ldr	r3, [pc, #24]	@ (8003204 <cubemx_transport_read+0x9c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d003      	beq.n	80031f8 <cubemx_transport_read+0x90>
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d3e3      	bcc.n	80031c0 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 80031f8:	69bb      	ldr	r3, [r7, #24]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3720      	adds	r7, #32
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	200050dc 	.word	0x200050dc
 8003208:	200050d8 	.word	0x200050d8
 800320c:	200048d8 	.word	0x200048d8

08003210 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003210:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003248 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003214:	f7ff ff40 	bl	8003098 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003218:	480c      	ldr	r0, [pc, #48]	@ (800324c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800321a:	490d      	ldr	r1, [pc, #52]	@ (8003250 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800321c:	4a0d      	ldr	r2, [pc, #52]	@ (8003254 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800321e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003220:	e002      	b.n	8003228 <LoopCopyDataInit>

08003222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003226:	3304      	adds	r3, #4

08003228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800322a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800322c:	d3f9      	bcc.n	8003222 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800322e:	4a0a      	ldr	r2, [pc, #40]	@ (8003258 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003230:	4c0a      	ldr	r4, [pc, #40]	@ (800325c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003234:	e001      	b.n	800323a <LoopFillZerobss>

08003236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003238:	3204      	adds	r2, #4

0800323a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800323a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800323c:	d3fb      	bcc.n	8003236 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800323e:	f013 fb29 	bl	8016894 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003242:	f7fe fd83 	bl	8001d4c <main>
  bx  lr    
 8003246:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003248:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800324c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003250:	200005e8 	.word	0x200005e8
  ldr r2, =_sidata
 8003254:	080183c8 	.word	0x080183c8
  ldr r2, =_sbss
 8003258:	200005e8 	.word	0x200005e8
  ldr r4, =_ebss
 800325c:	2000ec84 	.word	0x2000ec84

08003260 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003260:	e7fe      	b.n	8003260 <ADC_IRQHandler>

08003262 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003266:	2003      	movs	r0, #3
 8003268:	f000 f8d5 	bl	8003416 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800326c:	200f      	movs	r0, #15
 800326e:	f7ff fd85 	bl	8002d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003272:	f7ff fb19 	bl	80028a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	bd80      	pop	{r7, pc}

0800327c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003280:	4b06      	ldr	r3, [pc, #24]	@ (800329c <HAL_IncTick+0x20>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	461a      	mov	r2, r3
 8003286:	4b06      	ldr	r3, [pc, #24]	@ (80032a0 <HAL_IncTick+0x24>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4413      	add	r3, r2
 800328c:	4a04      	ldr	r2, [pc, #16]	@ (80032a0 <HAL_IncTick+0x24>)
 800328e:	6013      	str	r3, [r2, #0]
}
 8003290:	bf00      	nop
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	20000018 	.word	0x20000018
 80032a0:	200050e0 	.word	0x200050e0

080032a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  return uwTick;
 80032a8:	4b03      	ldr	r3, [pc, #12]	@ (80032b8 <HAL_GetTick+0x14>)
 80032aa:	681b      	ldr	r3, [r3, #0]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	200050e0 	.word	0x200050e0

080032bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032cc:	4b0b      	ldr	r3, [pc, #44]	@ (80032fc <__NVIC_SetPriorityGrouping+0x40>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032d8:	4013      	ands	r3, r2
 80032da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80032e4:	4b06      	ldr	r3, [pc, #24]	@ (8003300 <__NVIC_SetPriorityGrouping+0x44>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032ea:	4a04      	ldr	r2, [pc, #16]	@ (80032fc <__NVIC_SetPriorityGrouping+0x40>)
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	60d3      	str	r3, [r2, #12]
}
 80032f0:	bf00      	nop
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	e000ed00 	.word	0xe000ed00
 8003300:	05fa0000 	.word	0x05fa0000

08003304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003308:	4b04      	ldr	r3, [pc, #16]	@ (800331c <__NVIC_GetPriorityGrouping+0x18>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	0a1b      	lsrs	r3, r3, #8
 800330e:	f003 0307 	and.w	r3, r3, #7
}
 8003312:	4618      	mov	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	e000ed00 	.word	0xe000ed00

08003320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	4603      	mov	r3, r0
 8003328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800332a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332e:	2b00      	cmp	r3, #0
 8003330:	db0b      	blt.n	800334a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003332:	79fb      	ldrb	r3, [r7, #7]
 8003334:	f003 021f 	and.w	r2, r3, #31
 8003338:	4907      	ldr	r1, [pc, #28]	@ (8003358 <__NVIC_EnableIRQ+0x38>)
 800333a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333e:	095b      	lsrs	r3, r3, #5
 8003340:	2001      	movs	r0, #1
 8003342:	fa00 f202 	lsl.w	r2, r0, r2
 8003346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	e000e100 	.word	0xe000e100

0800335c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	4603      	mov	r3, r0
 8003364:	6039      	str	r1, [r7, #0]
 8003366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336c:	2b00      	cmp	r3, #0
 800336e:	db0a      	blt.n	8003386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	b2da      	uxtb	r2, r3
 8003374:	490c      	ldr	r1, [pc, #48]	@ (80033a8 <__NVIC_SetPriority+0x4c>)
 8003376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337a:	0112      	lsls	r2, r2, #4
 800337c:	b2d2      	uxtb	r2, r2
 800337e:	440b      	add	r3, r1
 8003380:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003384:	e00a      	b.n	800339c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	b2da      	uxtb	r2, r3
 800338a:	4908      	ldr	r1, [pc, #32]	@ (80033ac <__NVIC_SetPriority+0x50>)
 800338c:	79fb      	ldrb	r3, [r7, #7]
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	3b04      	subs	r3, #4
 8003394:	0112      	lsls	r2, r2, #4
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	440b      	add	r3, r1
 800339a:	761a      	strb	r2, [r3, #24]
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	e000e100 	.word	0xe000e100
 80033ac:	e000ed00 	.word	0xe000ed00

080033b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b089      	sub	sp, #36	@ 0x24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	f1c3 0307 	rsb	r3, r3, #7
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	bf28      	it	cs
 80033ce:	2304      	movcs	r3, #4
 80033d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	3304      	adds	r3, #4
 80033d6:	2b06      	cmp	r3, #6
 80033d8:	d902      	bls.n	80033e0 <NVIC_EncodePriority+0x30>
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	3b03      	subs	r3, #3
 80033de:	e000      	b.n	80033e2 <NVIC_EncodePriority+0x32>
 80033e0:	2300      	movs	r3, #0
 80033e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43da      	mvns	r2, r3
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	401a      	ands	r2, r3
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003402:	43d9      	mvns	r1, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003408:	4313      	orrs	r3, r2
         );
}
 800340a:	4618      	mov	r0, r3
 800340c:	3724      	adds	r7, #36	@ 0x24
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff ff4c 	bl	80032bc <__NVIC_SetPriorityGrouping>
}
 8003424:	bf00      	nop
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
 8003438:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800343a:	2300      	movs	r3, #0
 800343c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800343e:	f7ff ff61 	bl	8003304 <__NVIC_GetPriorityGrouping>
 8003442:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	68b9      	ldr	r1, [r7, #8]
 8003448:	6978      	ldr	r0, [r7, #20]
 800344a:	f7ff ffb1 	bl	80033b0 <NVIC_EncodePriority>
 800344e:	4602      	mov	r2, r0
 8003450:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003454:	4611      	mov	r1, r2
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff ff80 	bl	800335c <__NVIC_SetPriority>
}
 800345c:	bf00      	nop
 800345e:	3718      	adds	r7, #24
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	4603      	mov	r3, r0
 800346c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800346e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff ff54 	bl	8003320 <__NVIC_EnableIRQ>
}
 8003478:	bf00      	nop
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800348c:	f7ff ff0a 	bl	80032a4 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e099      	b.n	80035d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2202      	movs	r2, #2
 80034a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 0201 	bic.w	r2, r2, #1
 80034ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034bc:	e00f      	b.n	80034de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034be:	f7ff fef1 	bl	80032a4 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b05      	cmp	r3, #5
 80034ca:	d908      	bls.n	80034de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2220      	movs	r2, #32
 80034d0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2203      	movs	r2, #3
 80034d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e078      	b.n	80035d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1e8      	bne.n	80034be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	4b38      	ldr	r3, [pc, #224]	@ (80035d8 <HAL_DMA_Init+0x158>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800350a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003516:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003522:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	4313      	orrs	r3, r2
 800352e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003534:	2b04      	cmp	r3, #4
 8003536:	d107      	bne.n	8003548 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003540:	4313      	orrs	r3, r2
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	4313      	orrs	r3, r2
 8003546:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f023 0307 	bic.w	r3, r3, #7
 800355e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	4313      	orrs	r3, r2
 8003568:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356e:	2b04      	cmp	r3, #4
 8003570:	d117      	bne.n	80035a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	4313      	orrs	r3, r2
 800357a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00e      	beq.n	80035a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 fb15 	bl	8003bb4 <DMA_CheckFifoParam>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d008      	beq.n	80035a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2240      	movs	r2, #64	@ 0x40
 8003594:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800359e:	2301      	movs	r3, #1
 80035a0:	e016      	b.n	80035d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 facc 	bl	8003b48 <DMA_CalcBaseAndBitshift>
 80035b0:	4603      	mov	r3, r0
 80035b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b8:	223f      	movs	r2, #63	@ 0x3f
 80035ba:	409a      	lsls	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	e010803f 	.word	0xe010803f

080035dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
 80035e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d101      	bne.n	8003602 <HAL_DMA_Start_IT+0x26>
 80035fe:	2302      	movs	r3, #2
 8003600:	e048      	b.n	8003694 <HAL_DMA_Start_IT+0xb8>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b01      	cmp	r3, #1
 8003614:	d137      	bne.n	8003686 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2202      	movs	r2, #2
 800361a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	68b9      	ldr	r1, [r7, #8]
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 fa5e 	bl	8003aec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003634:	223f      	movs	r2, #63	@ 0x3f
 8003636:	409a      	lsls	r2, r3
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0216 	orr.w	r2, r2, #22
 800364a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695a      	ldr	r2, [r3, #20]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800365a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003660:	2b00      	cmp	r3, #0
 8003662:	d007      	beq.n	8003674 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0208 	orr.w	r2, r2, #8
 8003672:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0201 	orr.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	e005      	b.n	8003692 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800368e:	2302      	movs	r3, #2
 8003690:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003692:	7dfb      	ldrb	r3, [r7, #23]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80036aa:	f7ff fdfb 	bl	80032a4 <HAL_GetTick>
 80036ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d008      	beq.n	80036ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2280      	movs	r2, #128	@ 0x80
 80036c0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e052      	b.n	8003774 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0216 	bic.w	r2, r2, #22
 80036dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	695a      	ldr	r2, [r3, #20]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d103      	bne.n	80036fe <HAL_DMA_Abort+0x62>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d007      	beq.n	800370e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0208 	bic.w	r2, r2, #8
 800370c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 0201 	bic.w	r2, r2, #1
 800371c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800371e:	e013      	b.n	8003748 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003720:	f7ff fdc0 	bl	80032a4 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b05      	cmp	r3, #5
 800372c:	d90c      	bls.n	8003748 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2220      	movs	r2, #32
 8003732:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2203      	movs	r2, #3
 8003738:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e015      	b.n	8003774 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1e4      	bne.n	8003720 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800375a:	223f      	movs	r2, #63	@ 0x3f
 800375c:	409a      	lsls	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d004      	beq.n	800379a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2280      	movs	r2, #128	@ 0x80
 8003794:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e00c      	b.n	80037b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2205      	movs	r2, #5
 800379e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 0201 	bic.w	r2, r2, #1
 80037b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80037c8:	2300      	movs	r3, #0
 80037ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80037cc:	4b8e      	ldr	r3, [pc, #568]	@ (8003a08 <HAL_DMA_IRQHandler+0x248>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a8e      	ldr	r2, [pc, #568]	@ (8003a0c <HAL_DMA_IRQHandler+0x24c>)
 80037d2:	fba2 2303 	umull	r2, r3, r2, r3
 80037d6:	0a9b      	lsrs	r3, r3, #10
 80037d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ea:	2208      	movs	r2, #8
 80037ec:	409a      	lsls	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	4013      	ands	r3, r2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d01a      	beq.n	800382c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	d013      	beq.n	800382c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0204 	bic.w	r2, r2, #4
 8003812:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003818:	2208      	movs	r2, #8
 800381a:	409a      	lsls	r2, r3
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003824:	f043 0201 	orr.w	r2, r3, #1
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003830:	2201      	movs	r2, #1
 8003832:	409a      	lsls	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4013      	ands	r3, r2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d012      	beq.n	8003862 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00b      	beq.n	8003862 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800384e:	2201      	movs	r2, #1
 8003850:	409a      	lsls	r2, r3
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800385a:	f043 0202 	orr.w	r2, r3, #2
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003866:	2204      	movs	r2, #4
 8003868:	409a      	lsls	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4013      	ands	r3, r2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d012      	beq.n	8003898 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00b      	beq.n	8003898 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003884:	2204      	movs	r2, #4
 8003886:	409a      	lsls	r2, r3
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003890:	f043 0204 	orr.w	r2, r3, #4
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800389c:	2210      	movs	r2, #16
 800389e:	409a      	lsls	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4013      	ands	r3, r2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d043      	beq.n	8003930 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0308 	and.w	r3, r3, #8
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d03c      	beq.n	8003930 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ba:	2210      	movs	r2, #16
 80038bc:	409a      	lsls	r2, r3
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d018      	beq.n	8003902 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d108      	bne.n	80038f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d024      	beq.n	8003930 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	4798      	blx	r3
 80038ee:	e01f      	b.n	8003930 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d01b      	beq.n	8003930 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	4798      	blx	r3
 8003900:	e016      	b.n	8003930 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800390c:	2b00      	cmp	r3, #0
 800390e:	d107      	bne.n	8003920 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0208 	bic.w	r2, r2, #8
 800391e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003934:	2220      	movs	r2, #32
 8003936:	409a      	lsls	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4013      	ands	r3, r2
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 808f 	beq.w	8003a60 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0310 	and.w	r3, r3, #16
 800394c:	2b00      	cmp	r3, #0
 800394e:	f000 8087 	beq.w	8003a60 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003956:	2220      	movs	r2, #32
 8003958:	409a      	lsls	r2, r3
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b05      	cmp	r3, #5
 8003968:	d136      	bne.n	80039d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0216 	bic.w	r2, r2, #22
 8003978:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695a      	ldr	r2, [r3, #20]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003988:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398e:	2b00      	cmp	r3, #0
 8003990:	d103      	bne.n	800399a <HAL_DMA_IRQHandler+0x1da>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003996:	2b00      	cmp	r3, #0
 8003998:	d007      	beq.n	80039aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0208 	bic.w	r2, r2, #8
 80039a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ae:	223f      	movs	r2, #63	@ 0x3f
 80039b0:	409a      	lsls	r2, r3
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d07e      	beq.n	8003acc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	4798      	blx	r3
        }
        return;
 80039d6:	e079      	b.n	8003acc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d01d      	beq.n	8003a22 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10d      	bne.n	8003a10 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d031      	beq.n	8003a60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	4798      	blx	r3
 8003a04:	e02c      	b.n	8003a60 <HAL_DMA_IRQHandler+0x2a0>
 8003a06:	bf00      	nop
 8003a08:	20000010 	.word	0x20000010
 8003a0c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d023      	beq.n	8003a60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	4798      	blx	r3
 8003a20:	e01e      	b.n	8003a60 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10f      	bne.n	8003a50 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0210 	bic.w	r2, r2, #16
 8003a3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d032      	beq.n	8003ace <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d022      	beq.n	8003aba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2205      	movs	r2, #5
 8003a78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0201 	bic.w	r2, r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	60bb      	str	r3, [r7, #8]
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d307      	bcc.n	8003aa8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f2      	bne.n	8003a8c <HAL_DMA_IRQHandler+0x2cc>
 8003aa6:	e000      	b.n	8003aaa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003aa8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d005      	beq.n	8003ace <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	4798      	blx	r3
 8003aca:	e000      	b.n	8003ace <HAL_DMA_IRQHandler+0x30e>
        return;
 8003acc:	bf00      	nop
    }
  }
}
 8003ace:	3718      	adds	r7, #24
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
 8003af8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003b08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	2b40      	cmp	r3, #64	@ 0x40
 8003b18:	d108      	bne.n	8003b2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b2a:	e007      	b.n	8003b3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	60da      	str	r2, [r3, #12]
}
 8003b3c:	bf00      	nop
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	3b10      	subs	r3, #16
 8003b58:	4a13      	ldr	r2, [pc, #76]	@ (8003ba8 <DMA_CalcBaseAndBitshift+0x60>)
 8003b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5e:	091b      	lsrs	r3, r3, #4
 8003b60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b62:	4a12      	ldr	r2, [pc, #72]	@ (8003bac <DMA_CalcBaseAndBitshift+0x64>)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	4413      	add	r3, r2
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2b03      	cmp	r3, #3
 8003b74:	d908      	bls.n	8003b88 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb0 <DMA_CalcBaseAndBitshift+0x68>)
 8003b7e:	4013      	ands	r3, r2
 8003b80:	1d1a      	adds	r2, r3, #4
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b86:	e006      	b.n	8003b96 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	4b08      	ldr	r3, [pc, #32]	@ (8003bb0 <DMA_CalcBaseAndBitshift+0x68>)
 8003b90:	4013      	ands	r3, r2
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	aaaaaaab 	.word	0xaaaaaaab
 8003bac:	080176b8 	.word	0x080176b8
 8003bb0:	fffffc00 	.word	0xfffffc00

08003bb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d11f      	bne.n	8003c0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2b03      	cmp	r3, #3
 8003bd2:	d856      	bhi.n	8003c82 <DMA_CheckFifoParam+0xce>
 8003bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8003bdc <DMA_CheckFifoParam+0x28>)
 8003bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bda:	bf00      	nop
 8003bdc:	08003bed 	.word	0x08003bed
 8003be0:	08003bff 	.word	0x08003bff
 8003be4:	08003bed 	.word	0x08003bed
 8003be8:	08003c83 	.word	0x08003c83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d046      	beq.n	8003c86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bfc:	e043      	b.n	8003c86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c02:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003c06:	d140      	bne.n	8003c8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c0c:	e03d      	b.n	8003c8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c16:	d121      	bne.n	8003c5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2b03      	cmp	r3, #3
 8003c1c:	d837      	bhi.n	8003c8e <DMA_CheckFifoParam+0xda>
 8003c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c24 <DMA_CheckFifoParam+0x70>)
 8003c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c24:	08003c35 	.word	0x08003c35
 8003c28:	08003c3b 	.word	0x08003c3b
 8003c2c:	08003c35 	.word	0x08003c35
 8003c30:	08003c4d 	.word	0x08003c4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	73fb      	strb	r3, [r7, #15]
      break;
 8003c38:	e030      	b.n	8003c9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d025      	beq.n	8003c92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c4a:	e022      	b.n	8003c92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c50:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003c54:	d11f      	bne.n	8003c96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c5a:	e01c      	b.n	8003c96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d903      	bls.n	8003c6a <DMA_CheckFifoParam+0xb6>
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b03      	cmp	r3, #3
 8003c66:	d003      	beq.n	8003c70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c68:	e018      	b.n	8003c9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	73fb      	strb	r3, [r7, #15]
      break;
 8003c6e:	e015      	b.n	8003c9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00e      	beq.n	8003c9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c80:	e00b      	b.n	8003c9a <DMA_CheckFifoParam+0xe6>
      break;
 8003c82:	bf00      	nop
 8003c84:	e00a      	b.n	8003c9c <DMA_CheckFifoParam+0xe8>
      break;
 8003c86:	bf00      	nop
 8003c88:	e008      	b.n	8003c9c <DMA_CheckFifoParam+0xe8>
      break;
 8003c8a:	bf00      	nop
 8003c8c:	e006      	b.n	8003c9c <DMA_CheckFifoParam+0xe8>
      break;
 8003c8e:	bf00      	nop
 8003c90:	e004      	b.n	8003c9c <DMA_CheckFifoParam+0xe8>
      break;
 8003c92:	bf00      	nop
 8003c94:	e002      	b.n	8003c9c <DMA_CheckFifoParam+0xe8>
      break;   
 8003c96:	bf00      	nop
 8003c98:	e000      	b.n	8003c9c <DMA_CheckFifoParam+0xe8>
      break;
 8003c9a:	bf00      	nop
    }
  } 
  
  return status; 
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop

08003cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b089      	sub	sp, #36	@ 0x24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61fb      	str	r3, [r7, #28]
 8003cca:	e175      	b.n	8003fb8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003ccc:	2201      	movs	r2, #1
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	f040 8164 	bne.w	8003fb2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d005      	beq.n	8003d02 <HAL_GPIO_Init+0x56>
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d130      	bne.n	8003d64 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	2203      	movs	r2, #3
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	43db      	mvns	r3, r3
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	4013      	ands	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d38:	2201      	movs	r2, #1
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	43db      	mvns	r3, r3
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4013      	ands	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	091b      	lsrs	r3, r3, #4
 8003d4e:	f003 0201 	and.w	r2, r3, #1
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f003 0303 	and.w	r3, r3, #3
 8003d6c:	2b03      	cmp	r3, #3
 8003d6e:	d017      	beq.n	8003da0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	2203      	movs	r2, #3
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	43db      	mvns	r3, r3
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	4013      	ands	r3, r2
 8003d86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f003 0303 	and.w	r3, r3, #3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d123      	bne.n	8003df4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	08da      	lsrs	r2, r3, #3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3208      	adds	r2, #8
 8003db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	220f      	movs	r2, #15
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	08da      	lsrs	r2, r3, #3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	3208      	adds	r2, #8
 8003dee:	69b9      	ldr	r1, [r7, #24]
 8003df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	2203      	movs	r2, #3
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	43db      	mvns	r3, r3
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f003 0203 	and.w	r2, r3, #3
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 80be 	beq.w	8003fb2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e36:	4b66      	ldr	r3, [pc, #408]	@ (8003fd0 <HAL_GPIO_Init+0x324>)
 8003e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3a:	4a65      	ldr	r2, [pc, #404]	@ (8003fd0 <HAL_GPIO_Init+0x324>)
 8003e3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e40:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e42:	4b63      	ldr	r3, [pc, #396]	@ (8003fd0 <HAL_GPIO_Init+0x324>)
 8003e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003e4e:	4a61      	ldr	r2, [pc, #388]	@ (8003fd4 <HAL_GPIO_Init+0x328>)
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	089b      	lsrs	r3, r3, #2
 8003e54:	3302      	adds	r3, #2
 8003e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	220f      	movs	r2, #15
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a58      	ldr	r2, [pc, #352]	@ (8003fd8 <HAL_GPIO_Init+0x32c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d037      	beq.n	8003eea <HAL_GPIO_Init+0x23e>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a57      	ldr	r2, [pc, #348]	@ (8003fdc <HAL_GPIO_Init+0x330>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d031      	beq.n	8003ee6 <HAL_GPIO_Init+0x23a>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a56      	ldr	r2, [pc, #344]	@ (8003fe0 <HAL_GPIO_Init+0x334>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d02b      	beq.n	8003ee2 <HAL_GPIO_Init+0x236>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a55      	ldr	r2, [pc, #340]	@ (8003fe4 <HAL_GPIO_Init+0x338>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d025      	beq.n	8003ede <HAL_GPIO_Init+0x232>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a54      	ldr	r2, [pc, #336]	@ (8003fe8 <HAL_GPIO_Init+0x33c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d01f      	beq.n	8003eda <HAL_GPIO_Init+0x22e>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a53      	ldr	r2, [pc, #332]	@ (8003fec <HAL_GPIO_Init+0x340>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d019      	beq.n	8003ed6 <HAL_GPIO_Init+0x22a>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a52      	ldr	r2, [pc, #328]	@ (8003ff0 <HAL_GPIO_Init+0x344>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d013      	beq.n	8003ed2 <HAL_GPIO_Init+0x226>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a51      	ldr	r2, [pc, #324]	@ (8003ff4 <HAL_GPIO_Init+0x348>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d00d      	beq.n	8003ece <HAL_GPIO_Init+0x222>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a50      	ldr	r2, [pc, #320]	@ (8003ff8 <HAL_GPIO_Init+0x34c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d007      	beq.n	8003eca <HAL_GPIO_Init+0x21e>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a4f      	ldr	r2, [pc, #316]	@ (8003ffc <HAL_GPIO_Init+0x350>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d101      	bne.n	8003ec6 <HAL_GPIO_Init+0x21a>
 8003ec2:	2309      	movs	r3, #9
 8003ec4:	e012      	b.n	8003eec <HAL_GPIO_Init+0x240>
 8003ec6:	230a      	movs	r3, #10
 8003ec8:	e010      	b.n	8003eec <HAL_GPIO_Init+0x240>
 8003eca:	2308      	movs	r3, #8
 8003ecc:	e00e      	b.n	8003eec <HAL_GPIO_Init+0x240>
 8003ece:	2307      	movs	r3, #7
 8003ed0:	e00c      	b.n	8003eec <HAL_GPIO_Init+0x240>
 8003ed2:	2306      	movs	r3, #6
 8003ed4:	e00a      	b.n	8003eec <HAL_GPIO_Init+0x240>
 8003ed6:	2305      	movs	r3, #5
 8003ed8:	e008      	b.n	8003eec <HAL_GPIO_Init+0x240>
 8003eda:	2304      	movs	r3, #4
 8003edc:	e006      	b.n	8003eec <HAL_GPIO_Init+0x240>
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e004      	b.n	8003eec <HAL_GPIO_Init+0x240>
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	e002      	b.n	8003eec <HAL_GPIO_Init+0x240>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <HAL_GPIO_Init+0x240>
 8003eea:	2300      	movs	r3, #0
 8003eec:	69fa      	ldr	r2, [r7, #28]
 8003eee:	f002 0203 	and.w	r2, r2, #3
 8003ef2:	0092      	lsls	r2, r2, #2
 8003ef4:	4093      	lsls	r3, r2
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003efc:	4935      	ldr	r1, [pc, #212]	@ (8003fd4 <HAL_GPIO_Init+0x328>)
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	089b      	lsrs	r3, r3, #2
 8003f02:	3302      	adds	r3, #2
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f0a:	4b3d      	ldr	r3, [pc, #244]	@ (8004000 <HAL_GPIO_Init+0x354>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	43db      	mvns	r3, r3
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	4013      	ands	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f2e:	4a34      	ldr	r2, [pc, #208]	@ (8004000 <HAL_GPIO_Init+0x354>)
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f34:	4b32      	ldr	r3, [pc, #200]	@ (8004000 <HAL_GPIO_Init+0x354>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	4013      	ands	r3, r2
 8003f42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d003      	beq.n	8003f58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f58:	4a29      	ldr	r2, [pc, #164]	@ (8004000 <HAL_GPIO_Init+0x354>)
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f5e:	4b28      	ldr	r3, [pc, #160]	@ (8004000 <HAL_GPIO_Init+0x354>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	43db      	mvns	r3, r3
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f82:	4a1f      	ldr	r2, [pc, #124]	@ (8004000 <HAL_GPIO_Init+0x354>)
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f88:	4b1d      	ldr	r3, [pc, #116]	@ (8004000 <HAL_GPIO_Init+0x354>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	43db      	mvns	r3, r3
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	4013      	ands	r3, r2
 8003f96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fac:	4a14      	ldr	r2, [pc, #80]	@ (8004000 <HAL_GPIO_Init+0x354>)
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	61fb      	str	r3, [r7, #28]
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	2b0f      	cmp	r3, #15
 8003fbc:	f67f ae86 	bls.w	8003ccc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003fc0:	bf00      	nop
 8003fc2:	bf00      	nop
 8003fc4:	3724      	adds	r7, #36	@ 0x24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	40023800 	.word	0x40023800
 8003fd4:	40013800 	.word	0x40013800
 8003fd8:	40020000 	.word	0x40020000
 8003fdc:	40020400 	.word	0x40020400
 8003fe0:	40020800 	.word	0x40020800
 8003fe4:	40020c00 	.word	0x40020c00
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	40021400 	.word	0x40021400
 8003ff0:	40021800 	.word	0x40021800
 8003ff4:	40021c00 	.word	0x40021c00
 8003ff8:	40022000 	.word	0x40022000
 8003ffc:	40022400 	.word	0x40022400
 8004000:	40013c00 	.word	0x40013c00

08004004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	807b      	strh	r3, [r7, #2]
 8004010:	4613      	mov	r3, r2
 8004012:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004014:	787b      	ldrb	r3, [r7, #1]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800401a:	887a      	ldrh	r2, [r7, #2]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004020:	e003      	b.n	800402a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004022:	887b      	ldrh	r3, [r7, #2]
 8004024:	041a      	lsls	r2, r3, #16
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	619a      	str	r2, [r3, #24]
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004036:	b480      	push	{r7}
 8004038:	b085      	sub	sp, #20
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	460b      	mov	r3, r1
 8004040:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004048:	887a      	ldrh	r2, [r7, #2]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	4013      	ands	r3, r2
 800404e:	041a      	lsls	r2, r3, #16
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	43d9      	mvns	r1, r3
 8004054:	887b      	ldrh	r3, [r7, #2]
 8004056:	400b      	ands	r3, r1
 8004058:	431a      	orrs	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	619a      	str	r2, [r3, #24]
}
 800405e:	bf00      	nop
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
	...

0800406c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e08b      	b.n	8004196 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d106      	bne.n	8004098 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7fe fc30 	bl	80028f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2224      	movs	r2, #36	@ 0x24
 800409c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0201 	bic.w	r2, r2, #1
 80040ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80040bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80040cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d107      	bne.n	80040e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689a      	ldr	r2, [r3, #8]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040e2:	609a      	str	r2, [r3, #8]
 80040e4:	e006      	b.n	80040f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80040f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d108      	bne.n	800410e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800410a:	605a      	str	r2, [r3, #4]
 800410c:	e007      	b.n	800411e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800411c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6859      	ldr	r1, [r3, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	4b1d      	ldr	r3, [pc, #116]	@ (80041a0 <HAL_I2C_Init+0x134>)
 800412a:	430b      	orrs	r3, r1
 800412c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800413c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691a      	ldr	r2, [r3, #16]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	69d9      	ldr	r1, [r3, #28]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a1a      	ldr	r2, [r3, #32]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0201 	orr.w	r2, r2, #1
 8004176:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2220      	movs	r2, #32
 8004182:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	02008000 	.word	0x02008000

080041a4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b088      	sub	sp, #32
 80041a8:	af02      	add	r7, sp, #8
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	607a      	str	r2, [r7, #4]
 80041ae:	461a      	mov	r2, r3
 80041b0:	460b      	mov	r3, r1
 80041b2:	817b      	strh	r3, [r7, #10]
 80041b4:	4613      	mov	r3, r2
 80041b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b20      	cmp	r3, #32
 80041c2:	f040 80fd 	bne.w	80043c0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d101      	bne.n	80041d4 <HAL_I2C_Master_Transmit+0x30>
 80041d0:	2302      	movs	r3, #2
 80041d2:	e0f6      	b.n	80043c2 <HAL_I2C_Master_Transmit+0x21e>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80041dc:	f7ff f862 	bl	80032a4 <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	2319      	movs	r3, #25
 80041e8:	2201      	movs	r2, #1
 80041ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 fa0a 	bl	8004608 <I2C_WaitOnFlagUntilTimeout>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e0e1      	b.n	80043c2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2221      	movs	r2, #33	@ 0x21
 8004202:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2210      	movs	r2, #16
 800420a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	893a      	ldrh	r2, [r7, #8]
 800421e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800422a:	b29b      	uxth	r3, r3
 800422c:	2bff      	cmp	r3, #255	@ 0xff
 800422e:	d906      	bls.n	800423e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	22ff      	movs	r2, #255	@ 0xff
 8004234:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004236:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800423a:	617b      	str	r3, [r7, #20]
 800423c:	e007      	b.n	800424e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004248:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800424c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004252:	2b00      	cmp	r3, #0
 8004254:	d024      	beq.n	80042a0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425a:	781a      	ldrb	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800427e:	3b01      	subs	r3, #1
 8004280:	b29a      	uxth	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800428a:	b2db      	uxtb	r3, r3
 800428c:	3301      	adds	r3, #1
 800428e:	b2da      	uxtb	r2, r3
 8004290:	8979      	ldrh	r1, [r7, #10]
 8004292:	4b4e      	ldr	r3, [pc, #312]	@ (80043cc <HAL_I2C_Master_Transmit+0x228>)
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 fc05 	bl	8004aa8 <I2C_TransferConfig>
 800429e:	e066      	b.n	800436e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	8979      	ldrh	r1, [r7, #10]
 80042a8:	4b48      	ldr	r3, [pc, #288]	@ (80043cc <HAL_I2C_Master_Transmit+0x228>)
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 fbfa 	bl	8004aa8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80042b4:	e05b      	b.n	800436e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	6a39      	ldr	r1, [r7, #32]
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 f9fd 	bl	80046ba <I2C_WaitOnTXISFlagUntilTimeout>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e07b      	b.n	80043c2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ce:	781a      	ldrb	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042fe:	b29b      	uxth	r3, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	d034      	beq.n	800436e <HAL_I2C_Master_Transmit+0x1ca>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004308:	2b00      	cmp	r3, #0
 800430a:	d130      	bne.n	800436e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	2200      	movs	r2, #0
 8004314:	2180      	movs	r1, #128	@ 0x80
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 f976 	bl	8004608 <I2C_WaitOnFlagUntilTimeout>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e04d      	b.n	80043c2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800432a:	b29b      	uxth	r3, r3
 800432c:	2bff      	cmp	r3, #255	@ 0xff
 800432e:	d90e      	bls.n	800434e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	22ff      	movs	r2, #255	@ 0xff
 8004334:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800433a:	b2da      	uxtb	r2, r3
 800433c:	8979      	ldrh	r1, [r7, #10]
 800433e:	2300      	movs	r3, #0
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 fbae 	bl	8004aa8 <I2C_TransferConfig>
 800434c:	e00f      	b.n	800436e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004352:	b29a      	uxth	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800435c:	b2da      	uxtb	r2, r3
 800435e:	8979      	ldrh	r1, [r7, #10]
 8004360:	2300      	movs	r3, #0
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 fb9d 	bl	8004aa8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004372:	b29b      	uxth	r3, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	d19e      	bne.n	80042b6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	6a39      	ldr	r1, [r7, #32]
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 f9e3 	bl	8004748 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e01a      	b.n	80043c2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2220      	movs	r2, #32
 8004392:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6859      	ldr	r1, [r3, #4]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	4b0c      	ldr	r3, [pc, #48]	@ (80043d0 <HAL_I2C_Master_Transmit+0x22c>)
 80043a0:	400b      	ands	r3, r1
 80043a2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2220      	movs	r2, #32
 80043a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80043bc:	2300      	movs	r3, #0
 80043be:	e000      	b.n	80043c2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80043c0:	2302      	movs	r3, #2
  }
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3718      	adds	r7, #24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	80002000 	.word	0x80002000
 80043d0:	fe00e800 	.word	0xfe00e800

080043d4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af02      	add	r7, sp, #8
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	607a      	str	r2, [r7, #4]
 80043de:	461a      	mov	r2, r3
 80043e0:	460b      	mov	r3, r1
 80043e2:	817b      	strh	r3, [r7, #10]
 80043e4:	4613      	mov	r3, r2
 80043e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b20      	cmp	r3, #32
 80043f2:	f040 80db 	bne.w	80045ac <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d101      	bne.n	8004404 <HAL_I2C_Master_Receive+0x30>
 8004400:	2302      	movs	r3, #2
 8004402:	e0d4      	b.n	80045ae <HAL_I2C_Master_Receive+0x1da>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800440c:	f7fe ff4a 	bl	80032a4 <HAL_GetTick>
 8004410:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	2319      	movs	r3, #25
 8004418:	2201      	movs	r2, #1
 800441a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 f8f2 	bl	8004608 <I2C_WaitOnFlagUntilTimeout>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e0bf      	b.n	80045ae <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2222      	movs	r2, #34	@ 0x22
 8004432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2210      	movs	r2, #16
 800443a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	893a      	ldrh	r2, [r7, #8]
 800444e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800445a:	b29b      	uxth	r3, r3
 800445c:	2bff      	cmp	r3, #255	@ 0xff
 800445e:	d90e      	bls.n	800447e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2201      	movs	r2, #1
 8004464:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800446a:	b2da      	uxtb	r2, r3
 800446c:	8979      	ldrh	r1, [r7, #10]
 800446e:	4b52      	ldr	r3, [pc, #328]	@ (80045b8 <HAL_I2C_Master_Receive+0x1e4>)
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f000 fb16 	bl	8004aa8 <I2C_TransferConfig>
 800447c:	e06d      	b.n	800455a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004482:	b29a      	uxth	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800448c:	b2da      	uxtb	r2, r3
 800448e:	8979      	ldrh	r1, [r7, #10]
 8004490:	4b49      	ldr	r3, [pc, #292]	@ (80045b8 <HAL_I2C_Master_Receive+0x1e4>)
 8004492:	9300      	str	r3, [sp, #0]
 8004494:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 fb05 	bl	8004aa8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800449e:	e05c      	b.n	800455a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	6a39      	ldr	r1, [r7, #32]
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 f993 	bl	80047d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e07c      	b.n	80045ae <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044be:	b2d2      	uxtb	r2, r2
 80044c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c6:	1c5a      	adds	r2, r3, #1
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044dc:	b29b      	uxth	r3, r3
 80044de:	3b01      	subs	r3, #1
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d034      	beq.n	800455a <HAL_I2C_Master_Receive+0x186>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d130      	bne.n	800455a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	6a3b      	ldr	r3, [r7, #32]
 80044fe:	2200      	movs	r2, #0
 8004500:	2180      	movs	r1, #128	@ 0x80
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 f880 	bl	8004608 <I2C_WaitOnFlagUntilTimeout>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e04d      	b.n	80045ae <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004516:	b29b      	uxth	r3, r3
 8004518:	2bff      	cmp	r3, #255	@ 0xff
 800451a:	d90e      	bls.n	800453a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	22ff      	movs	r2, #255	@ 0xff
 8004520:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004526:	b2da      	uxtb	r2, r3
 8004528:	8979      	ldrh	r1, [r7, #10]
 800452a:	2300      	movs	r3, #0
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 fab8 	bl	8004aa8 <I2C_TransferConfig>
 8004538:	e00f      	b.n	800455a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800453e:	b29a      	uxth	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004548:	b2da      	uxtb	r2, r3
 800454a:	8979      	ldrh	r1, [r7, #10]
 800454c:	2300      	movs	r3, #0
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 faa7 	bl	8004aa8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800455e:	b29b      	uxth	r3, r3
 8004560:	2b00      	cmp	r3, #0
 8004562:	d19d      	bne.n	80044a0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	6a39      	ldr	r1, [r7, #32]
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 f8ed 	bl	8004748 <I2C_WaitOnSTOPFlagUntilTimeout>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e01a      	b.n	80045ae <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2220      	movs	r2, #32
 800457e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6859      	ldr	r1, [r3, #4]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	4b0c      	ldr	r3, [pc, #48]	@ (80045bc <HAL_I2C_Master_Receive+0x1e8>)
 800458c:	400b      	ands	r3, r1
 800458e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2220      	movs	r2, #32
 8004594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80045a8:	2300      	movs	r3, #0
 80045aa:	e000      	b.n	80045ae <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80045ac:	2302      	movs	r3, #2
  }
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3718      	adds	r7, #24
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	80002400 	.word	0x80002400
 80045bc:	fe00e800 	.word	0xfe00e800

080045c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d103      	bne.n	80045de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2200      	movs	r2, #0
 80045dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d007      	beq.n	80045fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699a      	ldr	r2, [r3, #24]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0201 	orr.w	r2, r2, #1
 80045fa:	619a      	str	r2, [r3, #24]
  }
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	603b      	str	r3, [r7, #0]
 8004614:	4613      	mov	r3, r2
 8004616:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004618:	e03b      	b.n	8004692 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	6839      	ldr	r1, [r7, #0]
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f000 f962 	bl	80048e8 <I2C_IsErrorOccurred>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e041      	b.n	80046b2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004634:	d02d      	beq.n	8004692 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004636:	f7fe fe35 	bl	80032a4 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	429a      	cmp	r2, r3
 8004644:	d302      	bcc.n	800464c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d122      	bne.n	8004692 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	699a      	ldr	r2, [r3, #24]
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	4013      	ands	r3, r2
 8004656:	68ba      	ldr	r2, [r7, #8]
 8004658:	429a      	cmp	r2, r3
 800465a:	bf0c      	ite	eq
 800465c:	2301      	moveq	r3, #1
 800465e:	2300      	movne	r3, #0
 8004660:	b2db      	uxtb	r3, r3
 8004662:	461a      	mov	r2, r3
 8004664:	79fb      	ldrb	r3, [r7, #7]
 8004666:	429a      	cmp	r2, r3
 8004668:	d113      	bne.n	8004692 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800466e:	f043 0220 	orr.w	r2, r3, #32
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2220      	movs	r2, #32
 800467a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e00f      	b.n	80046b2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	699a      	ldr	r2, [r3, #24]
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	4013      	ands	r3, r2
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	429a      	cmp	r2, r3
 80046a0:	bf0c      	ite	eq
 80046a2:	2301      	moveq	r3, #1
 80046a4:	2300      	movne	r3, #0
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	461a      	mov	r2, r3
 80046aa:	79fb      	ldrb	r3, [r7, #7]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d0b4      	beq.n	800461a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b084      	sub	sp, #16
 80046be:	af00      	add	r7, sp, #0
 80046c0:	60f8      	str	r0, [r7, #12]
 80046c2:	60b9      	str	r1, [r7, #8]
 80046c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046c6:	e033      	b.n	8004730 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	68b9      	ldr	r1, [r7, #8]
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 f90b 	bl	80048e8 <I2C_IsErrorOccurred>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e031      	b.n	8004740 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046e2:	d025      	beq.n	8004730 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e4:	f7fe fdde 	bl	80032a4 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d302      	bcc.n	80046fa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d11a      	bne.n	8004730 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b02      	cmp	r3, #2
 8004706:	d013      	beq.n	8004730 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800470c:	f043 0220 	orr.w	r2, r3, #32
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2220      	movs	r2, #32
 8004718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e007      	b.n	8004740 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b02      	cmp	r3, #2
 800473c:	d1c4      	bne.n	80046c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004754:	e02f      	b.n	80047b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	68b9      	ldr	r1, [r7, #8]
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 f8c4 	bl	80048e8 <I2C_IsErrorOccurred>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e02d      	b.n	80047c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800476a:	f7fe fd9b 	bl	80032a4 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	429a      	cmp	r2, r3
 8004778:	d302      	bcc.n	8004780 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d11a      	bne.n	80047b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	f003 0320 	and.w	r3, r3, #32
 800478a:	2b20      	cmp	r3, #32
 800478c:	d013      	beq.n	80047b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004792:	f043 0220 	orr.w	r2, r3, #32
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2220      	movs	r2, #32
 800479e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e007      	b.n	80047c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	f003 0320 	and.w	r3, r3, #32
 80047c0:	2b20      	cmp	r3, #32
 80047c2:	d1c8      	bne.n	8004756 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
	...

080047d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047dc:	2300      	movs	r3, #0
 80047de:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80047e0:	e071      	b.n	80048c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	68b9      	ldr	r1, [r7, #8]
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f000 f87e 	bl	80048e8 <I2C_IsErrorOccurred>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	f003 0320 	and.w	r3, r3, #32
 8004800:	2b20      	cmp	r3, #32
 8004802:	d13b      	bne.n	800487c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8004804:	7dfb      	ldrb	r3, [r7, #23]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d138      	bne.n	800487c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b04      	cmp	r3, #4
 8004816:	d105      	bne.n	8004824 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004820:	2300      	movs	r3, #0
 8004822:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	f003 0310 	and.w	r3, r3, #16
 800482e:	2b10      	cmp	r3, #16
 8004830:	d121      	bne.n	8004876 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2210      	movs	r2, #16
 8004838:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2204      	movs	r2, #4
 800483e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2220      	movs	r2, #32
 8004846:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6859      	ldr	r1, [r3, #4]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	4b24      	ldr	r3, [pc, #144]	@ (80048e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8004854:	400b      	ands	r3, r1
 8004856:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2220      	movs	r2, #32
 800485c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	75fb      	strb	r3, [r7, #23]
 8004874:	e002      	b.n	800487c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800487c:	f7fe fd12 	bl	80032a4 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	429a      	cmp	r2, r3
 800488a:	d302      	bcc.n	8004892 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d119      	bne.n	80048c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8004892:	7dfb      	ldrb	r3, [r7, #23]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d116      	bne.n	80048c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	f003 0304 	and.w	r3, r3, #4
 80048a2:	2b04      	cmp	r3, #4
 80048a4:	d00f      	beq.n	80048c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048aa:	f043 0220 	orr.w	r2, r3, #32
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2220      	movs	r2, #32
 80048b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	f003 0304 	and.w	r3, r3, #4
 80048d0:	2b04      	cmp	r3, #4
 80048d2:	d002      	beq.n	80048da <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80048d4:	7dfb      	ldrb	r3, [r7, #23]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d083      	beq.n	80047e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80048da:	7dfb      	ldrb	r3, [r7, #23]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3718      	adds	r7, #24
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	fe00e800 	.word	0xfe00e800

080048e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b08a      	sub	sp, #40	@ 0x28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048f4:	2300      	movs	r3, #0
 80048f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004902:	2300      	movs	r3, #0
 8004904:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	f003 0310 	and.w	r3, r3, #16
 8004910:	2b00      	cmp	r3, #0
 8004912:	d068      	beq.n	80049e6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2210      	movs	r2, #16
 800491a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800491c:	e049      	b.n	80049b2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004924:	d045      	beq.n	80049b2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004926:	f7fe fcbd 	bl	80032a4 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	429a      	cmp	r2, r3
 8004934:	d302      	bcc.n	800493c <I2C_IsErrorOccurred+0x54>
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d13a      	bne.n	80049b2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004946:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800494e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800495a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800495e:	d121      	bne.n	80049a4 <I2C_IsErrorOccurred+0xbc>
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004966:	d01d      	beq.n	80049a4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004968:	7cfb      	ldrb	r3, [r7, #19]
 800496a:	2b20      	cmp	r3, #32
 800496c:	d01a      	beq.n	80049a4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800497c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800497e:	f7fe fc91 	bl	80032a4 <HAL_GetTick>
 8004982:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004984:	e00e      	b.n	80049a4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004986:	f7fe fc8d 	bl	80032a4 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b19      	cmp	r3, #25
 8004992:	d907      	bls.n	80049a4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004994:	6a3b      	ldr	r3, [r7, #32]
 8004996:	f043 0320 	orr.w	r3, r3, #32
 800499a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80049a2:	e006      	b.n	80049b2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	f003 0320 	and.w	r3, r3, #32
 80049ae:	2b20      	cmp	r3, #32
 80049b0:	d1e9      	bne.n	8004986 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	f003 0320 	and.w	r3, r3, #32
 80049bc:	2b20      	cmp	r3, #32
 80049be:	d003      	beq.n	80049c8 <I2C_IsErrorOccurred+0xe0>
 80049c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0aa      	beq.n	800491e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80049c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d103      	bne.n	80049d8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2220      	movs	r2, #32
 80049d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	f043 0304 	orr.w	r3, r3, #4
 80049de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00b      	beq.n	8004a10 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80049f8:	6a3b      	ldr	r3, [r7, #32]
 80049fa:	f043 0301 	orr.w	r3, r3, #1
 80049fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00b      	beq.n	8004a32 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
 8004a1c:	f043 0308 	orr.w	r3, r3, #8
 8004a20:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004a2a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00b      	beq.n	8004a54 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	f043 0302 	orr.w	r3, r3, #2
 8004a42:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004a54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d01c      	beq.n	8004a96 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f7ff fdaf 	bl	80045c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6859      	ldr	r1, [r3, #4]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8004aa4 <I2C_IsErrorOccurred+0x1bc>)
 8004a6e:	400b      	ands	r3, r1
 8004a70:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a76:	6a3b      	ldr	r3, [r7, #32]
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2220      	movs	r2, #32
 8004a82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004a96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3728      	adds	r7, #40	@ 0x28
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	fe00e800 	.word	0xfe00e800

08004aa8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b087      	sub	sp, #28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	607b      	str	r3, [r7, #4]
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	817b      	strh	r3, [r7, #10]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004aba:	897b      	ldrh	r3, [r7, #10]
 8004abc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004ac0:	7a7b      	ldrb	r3, [r7, #9]
 8004ac2:	041b      	lsls	r3, r3, #16
 8004ac4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ac8:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004ad6:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	6a3b      	ldr	r3, [r7, #32]
 8004ae0:	0d5b      	lsrs	r3, r3, #21
 8004ae2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004ae6:	4b08      	ldr	r3, [pc, #32]	@ (8004b08 <I2C_TransferConfig+0x60>)
 8004ae8:	430b      	orrs	r3, r1
 8004aea:	43db      	mvns	r3, r3
 8004aec:	ea02 0103 	and.w	r1, r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004afa:	bf00      	nop
 8004afc:	371c      	adds	r7, #28
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	03ff63ff 	.word	0x03ff63ff

08004b0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b20      	cmp	r3, #32
 8004b20:	d138      	bne.n	8004b94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d101      	bne.n	8004b30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	e032      	b.n	8004b96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2224      	movs	r2, #36	@ 0x24
 8004b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 0201 	bic.w	r2, r2, #1
 8004b4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004b5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6819      	ldr	r1, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f042 0201 	orr.w	r2, r2, #1
 8004b7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2220      	movs	r2, #32
 8004b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b90:	2300      	movs	r3, #0
 8004b92:	e000      	b.n	8004b96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b94:	2302      	movs	r3, #2
  }
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b085      	sub	sp, #20
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2b20      	cmp	r3, #32
 8004bb6:	d139      	bne.n	8004c2c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d101      	bne.n	8004bc6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004bc2:	2302      	movs	r3, #2
 8004bc4:	e033      	b.n	8004c2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2224      	movs	r2, #36	@ 0x24
 8004bd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0201 	bic.w	r2, r2, #1
 8004be4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004bf4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	021b      	lsls	r3, r3, #8
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 0201 	orr.w	r2, r2, #1
 8004c16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	e000      	b.n	8004c2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004c2c:	2302      	movs	r3, #2
  }
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
	...

08004c3c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c44:	4b0b      	ldr	r3, [pc, #44]	@ (8004c74 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c48:	4a0a      	ldr	r2, [pc, #40]	@ (8004c74 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004c4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c4e:	6453      	str	r3, [r2, #68]	@ 0x44
 8004c50:	4b08      	ldr	r3, [pc, #32]	@ (8004c74 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004c52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c58:	60fb      	str	r3, [r7, #12]
 8004c5a:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMC, (uint32_t)ConfigFastModePlus);
 8004c5c:	4b06      	ldr	r3, [pc, #24]	@ (8004c78 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	4905      	ldr	r1, [pc, #20]	@ (8004c78 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	604b      	str	r3, [r1, #4]
}
 8004c68:	bf00      	nop
 8004c6a:	3714      	adds	r7, #20
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr
 8004c74:	40023800 	.word	0x40023800
 8004c78:	40013800 	.word	0x40013800

08004c7c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c80:	4b05      	ldr	r3, [pc, #20]	@ (8004c98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a04      	ldr	r2, [pc, #16]	@ (8004c98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c8a:	6013      	str	r3, [r2, #0]
}
 8004c8c:	bf00      	nop
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	40007000 	.word	0x40007000

08004c9c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004ca6:	4b23      	ldr	r3, [pc, #140]	@ (8004d34 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004caa:	4a22      	ldr	r2, [pc, #136]	@ (8004d34 <HAL_PWREx_EnableOverDrive+0x98>)
 8004cac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cb2:	4b20      	ldr	r3, [pc, #128]	@ (8004d34 <HAL_PWREx_EnableOverDrive+0x98>)
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cba:	603b      	str	r3, [r7, #0]
 8004cbc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8004d38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a1d      	ldr	r2, [pc, #116]	@ (8004d38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004cc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cc8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cca:	f7fe faeb 	bl	80032a4 <HAL_GetTick>
 8004cce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004cd0:	e009      	b.n	8004ce6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004cd2:	f7fe fae7 	bl	80032a4 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ce0:	d901      	bls.n	8004ce6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e022      	b.n	8004d2c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ce6:	4b14      	ldr	r3, [pc, #80]	@ (8004d38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cf2:	d1ee      	bne.n	8004cd2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004cf4:	4b10      	ldr	r3, [pc, #64]	@ (8004d38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a0f      	ldr	r2, [pc, #60]	@ (8004d38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004cfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cfe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d00:	f7fe fad0 	bl	80032a4 <HAL_GetTick>
 8004d04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d06:	e009      	b.n	8004d1c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d08:	f7fe facc 	bl	80032a4 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004d16:	d901      	bls.n	8004d1c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e007      	b.n	8004d2c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d1c:	4b06      	ldr	r3, [pc, #24]	@ (8004d38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d28:	d1ee      	bne.n	8004d08 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3708      	adds	r7, #8
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	40023800 	.word	0x40023800
 8004d38:	40007000 	.word	0x40007000

08004d3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004d44:	2300      	movs	r3, #0
 8004d46:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e29b      	b.n	800528a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f000 8087 	beq.w	8004e6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d60:	4b96      	ldr	r3, [pc, #600]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f003 030c 	and.w	r3, r3, #12
 8004d68:	2b04      	cmp	r3, #4
 8004d6a:	d00c      	beq.n	8004d86 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d6c:	4b93      	ldr	r3, [pc, #588]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f003 030c 	and.w	r3, r3, #12
 8004d74:	2b08      	cmp	r3, #8
 8004d76:	d112      	bne.n	8004d9e <HAL_RCC_OscConfig+0x62>
 8004d78:	4b90      	ldr	r3, [pc, #576]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d84:	d10b      	bne.n	8004d9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d86:	4b8d      	ldr	r3, [pc, #564]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d06c      	beq.n	8004e6c <HAL_RCC_OscConfig+0x130>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d168      	bne.n	8004e6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e275      	b.n	800528a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004da6:	d106      	bne.n	8004db6 <HAL_RCC_OscConfig+0x7a>
 8004da8:	4b84      	ldr	r3, [pc, #528]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a83      	ldr	r2, [pc, #524]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004dae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004db2:	6013      	str	r3, [r2, #0]
 8004db4:	e02e      	b.n	8004e14 <HAL_RCC_OscConfig+0xd8>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10c      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x9c>
 8004dbe:	4b7f      	ldr	r3, [pc, #508]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a7e      	ldr	r2, [pc, #504]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004dc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dc8:	6013      	str	r3, [r2, #0]
 8004dca:	4b7c      	ldr	r3, [pc, #496]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a7b      	ldr	r2, [pc, #492]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004dd0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004dd4:	6013      	str	r3, [r2, #0]
 8004dd6:	e01d      	b.n	8004e14 <HAL_RCC_OscConfig+0xd8>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004de0:	d10c      	bne.n	8004dfc <HAL_RCC_OscConfig+0xc0>
 8004de2:	4b76      	ldr	r3, [pc, #472]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a75      	ldr	r2, [pc, #468]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004de8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004dec:	6013      	str	r3, [r2, #0]
 8004dee:	4b73      	ldr	r3, [pc, #460]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a72      	ldr	r2, [pc, #456]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004df4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004df8:	6013      	str	r3, [r2, #0]
 8004dfa:	e00b      	b.n	8004e14 <HAL_RCC_OscConfig+0xd8>
 8004dfc:	4b6f      	ldr	r3, [pc, #444]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a6e      	ldr	r2, [pc, #440]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004e02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e06:	6013      	str	r3, [r2, #0]
 8004e08:	4b6c      	ldr	r3, [pc, #432]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a6b      	ldr	r2, [pc, #428]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004e0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d013      	beq.n	8004e44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e1c:	f7fe fa42 	bl	80032a4 <HAL_GetTick>
 8004e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e22:	e008      	b.n	8004e36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e24:	f7fe fa3e 	bl	80032a4 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b64      	cmp	r3, #100	@ 0x64
 8004e30:	d901      	bls.n	8004e36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e229      	b.n	800528a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e36:	4b61      	ldr	r3, [pc, #388]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d0f0      	beq.n	8004e24 <HAL_RCC_OscConfig+0xe8>
 8004e42:	e014      	b.n	8004e6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e44:	f7fe fa2e 	bl	80032a4 <HAL_GetTick>
 8004e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e4a:	e008      	b.n	8004e5e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e4c:	f7fe fa2a 	bl	80032a4 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b64      	cmp	r3, #100	@ 0x64
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e215      	b.n	800528a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e5e:	4b57      	ldr	r3, [pc, #348]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1f0      	bne.n	8004e4c <HAL_RCC_OscConfig+0x110>
 8004e6a:	e000      	b.n	8004e6e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d069      	beq.n	8004f4e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e7a:	4b50      	ldr	r3, [pc, #320]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f003 030c 	and.w	r3, r3, #12
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00b      	beq.n	8004e9e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e86:	4b4d      	ldr	r3, [pc, #308]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f003 030c 	and.w	r3, r3, #12
 8004e8e:	2b08      	cmp	r3, #8
 8004e90:	d11c      	bne.n	8004ecc <HAL_RCC_OscConfig+0x190>
 8004e92:	4b4a      	ldr	r3, [pc, #296]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d116      	bne.n	8004ecc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e9e:	4b47      	ldr	r3, [pc, #284]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d005      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x17a>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d001      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e1e9      	b.n	800528a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eb6:	4b41      	ldr	r3, [pc, #260]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	493d      	ldr	r1, [pc, #244]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eca:	e040      	b.n	8004f4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d023      	beq.n	8004f1c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ed4:	4b39      	ldr	r3, [pc, #228]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a38      	ldr	r2, [pc, #224]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004eda:	f043 0301 	orr.w	r3, r3, #1
 8004ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee0:	f7fe f9e0 	bl	80032a4 <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ee6:	e008      	b.n	8004efa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ee8:	f7fe f9dc 	bl	80032a4 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e1c7      	b.n	800528a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004efa:	4b30      	ldr	r3, [pc, #192]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0f0      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f06:	4b2d      	ldr	r3, [pc, #180]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	4929      	ldr	r1, [pc, #164]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	600b      	str	r3, [r1, #0]
 8004f1a:	e018      	b.n	8004f4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f1c:	4b27      	ldr	r3, [pc, #156]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a26      	ldr	r2, [pc, #152]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004f22:	f023 0301 	bic.w	r3, r3, #1
 8004f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f28:	f7fe f9bc 	bl	80032a4 <HAL_GetTick>
 8004f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f2e:	e008      	b.n	8004f42 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f30:	f7fe f9b8 	bl	80032a4 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e1a3      	b.n	800528a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f42:	4b1e      	ldr	r3, [pc, #120]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1f0      	bne.n	8004f30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0308 	and.w	r3, r3, #8
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d038      	beq.n	8004fcc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d019      	beq.n	8004f96 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f62:	4b16      	ldr	r3, [pc, #88]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004f64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f66:	4a15      	ldr	r2, [pc, #84]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004f68:	f043 0301 	orr.w	r3, r3, #1
 8004f6c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f6e:	f7fe f999 	bl	80032a4 <HAL_GetTick>
 8004f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f74:	e008      	b.n	8004f88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f76:	f7fe f995 	bl	80032a4 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e180      	b.n	800528a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f88:	4b0c      	ldr	r3, [pc, #48]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004f8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0f0      	beq.n	8004f76 <HAL_RCC_OscConfig+0x23a>
 8004f94:	e01a      	b.n	8004fcc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f96:	4b09      	ldr	r3, [pc, #36]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004f98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f9a:	4a08      	ldr	r2, [pc, #32]	@ (8004fbc <HAL_RCC_OscConfig+0x280>)
 8004f9c:	f023 0301 	bic.w	r3, r3, #1
 8004fa0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa2:	f7fe f97f 	bl	80032a4 <HAL_GetTick>
 8004fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fa8:	e00a      	b.n	8004fc0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004faa:	f7fe f97b 	bl	80032a4 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d903      	bls.n	8004fc0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e166      	b.n	800528a <HAL_RCC_OscConfig+0x54e>
 8004fbc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fc0:	4b92      	ldr	r3, [pc, #584]	@ (800520c <HAL_RCC_OscConfig+0x4d0>)
 8004fc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1ee      	bne.n	8004faa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0304 	and.w	r3, r3, #4
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 80a4 	beq.w	8005122 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fda:	4b8c      	ldr	r3, [pc, #560]	@ (800520c <HAL_RCC_OscConfig+0x4d0>)
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10d      	bne.n	8005002 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fe6:	4b89      	ldr	r3, [pc, #548]	@ (800520c <HAL_RCC_OscConfig+0x4d0>)
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fea:	4a88      	ldr	r2, [pc, #544]	@ (800520c <HAL_RCC_OscConfig+0x4d0>)
 8004fec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ff0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ff2:	4b86      	ldr	r3, [pc, #536]	@ (800520c <HAL_RCC_OscConfig+0x4d0>)
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ffa:	60bb      	str	r3, [r7, #8]
 8004ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ffe:	2301      	movs	r3, #1
 8005000:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005002:	4b83      	ldr	r3, [pc, #524]	@ (8005210 <HAL_RCC_OscConfig+0x4d4>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800500a:	2b00      	cmp	r3, #0
 800500c:	d118      	bne.n	8005040 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800500e:	4b80      	ldr	r3, [pc, #512]	@ (8005210 <HAL_RCC_OscConfig+0x4d4>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a7f      	ldr	r2, [pc, #508]	@ (8005210 <HAL_RCC_OscConfig+0x4d4>)
 8005014:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800501a:	f7fe f943 	bl	80032a4 <HAL_GetTick>
 800501e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005020:	e008      	b.n	8005034 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005022:	f7fe f93f 	bl	80032a4 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	2b64      	cmp	r3, #100	@ 0x64
 800502e:	d901      	bls.n	8005034 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e12a      	b.n	800528a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005034:	4b76      	ldr	r3, [pc, #472]	@ (8005210 <HAL_RCC_OscConfig+0x4d4>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0f0      	beq.n	8005022 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d106      	bne.n	8005056 <HAL_RCC_OscConfig+0x31a>
 8005048:	4b70      	ldr	r3, [pc, #448]	@ (800520c <HAL_RCC_OscConfig+0x4d0>)
 800504a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800504c:	4a6f      	ldr	r2, [pc, #444]	@ (800520c <HAL_RCC_OscConfig+0x4d0>)
 800504e:	f043 0301 	orr.w	r3, r3, #1
 8005052:	6713      	str	r3, [r2, #112]	@ 0x70
 8005054:	e02d      	b.n	80050b2 <HAL_RCC_OscConfig+0x376>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10c      	bne.n	8005078 <HAL_RCC_OscConfig+0x33c>
 800505e:	4b6b      	ldr	r3, [pc, #428]	@ (800520c <HAL_RCC_OscConfig+0x4d0>)
 8005060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005062:	4a6a      	ldr	r2, [pc, #424]	@ (800520c <HAL_RCC_OscConfig+0x4d0>)
 8005064:	f023 0301 	bic.w	r3, r3, #1
 8005068:	6713      	str	r3, [r2, #112]	@ 0x70
 800506a:	4b68      	ldr	r3, [pc, #416]	@ (800520c <HAL_RCC_OscConfig+0x4d0>)
 800506c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800506e:	4a67      	ldr	r2, [pc, #412]	@ (800520c <HAL_RCC_OscConfig+0x4d0>)
 8005070:	f023 0304 	bic.w	r3, r3, #4
 8005074:	6713      	str	r3, [r2, #112]	@ 0x70
 8005076:	e01c      	b.n	80050b2 <HAL_RCC_OscConfig+0x376>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	2b05      	cmp	r3, #5
 800507e:	d10c      	bne.n	800509a <HAL_RCC_OscConfig+0x35e>
 8005080:	4b62      	ldr	r3, [pc, #392]	@ (800520c <HAL_RCC_OscConfig+0x4d0>)
 8005082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005084:	4a61      	ldr	r2, [pc, #388]	@ (800520c <HAL_RCC_OscConfig+0x4d0>)
 8005086:	f043 0304 	orr.w	r3, r3, #4
 800508a:	6713      	str	r3, [r2, #112]	@ 0x70
 800508c:	4b5f      	ldr	r3, [pc, #380]	@ (800520c <HAL_RCC_OscConfig+0x4d0>)
 800508e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005090:	4a5e      	ldr	r2, [pc, #376]	@ (800520c <HAL_RCC_OscConfig+0x4d0>)
 8005092:	f043 0301 	orr.w	r3, r3, #1
 8005096:	6713      	str	r3, [r2, #112]	@ 0x70
 8005098:	e00b      	b.n	80050b2 <HAL_RCC_OscConfig+0x376>
 800509a:	4b5c      	ldr	r3, [pc, #368]	@ (800520c <HAL_RCC_OscConfig+0x4d0>)
 800509c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800509e:	4a5b      	ldr	r2, [pc, #364]	@ (800520c <HAL_RCC_OscConfig+0x4d0>)
 80050a0:	f023 0301 	bic.w	r3, r3, #1
 80050a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80050a6:	4b59      	ldr	r3, [pc, #356]	@ (800520c <HAL_RCC_OscConfig+0x4d0>)
 80050a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050aa:	4a58      	ldr	r2, [pc, #352]	@ (800520c <HAL_RCC_OscConfig+0x4d0>)
 80050ac:	f023 0304 	bic.w	r3, r3, #4
 80050b0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d015      	beq.n	80050e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ba:	f7fe f8f3 	bl	80032a4 <HAL_GetTick>
 80050be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050c0:	e00a      	b.n	80050d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050c2:	f7fe f8ef 	bl	80032a4 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d901      	bls.n	80050d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e0d8      	b.n	800528a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050d8:	4b4c      	ldr	r3, [pc, #304]	@ (800520c <HAL_RCC_OscConfig+0x4d0>)
 80050da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d0ee      	beq.n	80050c2 <HAL_RCC_OscConfig+0x386>
 80050e4:	e014      	b.n	8005110 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e6:	f7fe f8dd 	bl	80032a4 <HAL_GetTick>
 80050ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050ec:	e00a      	b.n	8005104 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ee:	f7fe f8d9 	bl	80032a4 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d901      	bls.n	8005104 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e0c2      	b.n	800528a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005104:	4b41      	ldr	r3, [pc, #260]	@ (800520c <HAL_RCC_OscConfig+0x4d0>)
 8005106:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1ee      	bne.n	80050ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005110:	7dfb      	ldrb	r3, [r7, #23]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d105      	bne.n	8005122 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005116:	4b3d      	ldr	r3, [pc, #244]	@ (800520c <HAL_RCC_OscConfig+0x4d0>)
 8005118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511a:	4a3c      	ldr	r2, [pc, #240]	@ (800520c <HAL_RCC_OscConfig+0x4d0>)
 800511c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005120:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	2b00      	cmp	r3, #0
 8005128:	f000 80ae 	beq.w	8005288 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800512c:	4b37      	ldr	r3, [pc, #220]	@ (800520c <HAL_RCC_OscConfig+0x4d0>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f003 030c 	and.w	r3, r3, #12
 8005134:	2b08      	cmp	r3, #8
 8005136:	d06d      	beq.n	8005214 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	2b02      	cmp	r3, #2
 800513e:	d14b      	bne.n	80051d8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005140:	4b32      	ldr	r3, [pc, #200]	@ (800520c <HAL_RCC_OscConfig+0x4d0>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a31      	ldr	r2, [pc, #196]	@ (800520c <HAL_RCC_OscConfig+0x4d0>)
 8005146:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800514a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514c:	f7fe f8aa 	bl	80032a4 <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005154:	f7fe f8a6 	bl	80032a4 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e091      	b.n	800528a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005166:	4b29      	ldr	r3, [pc, #164]	@ (800520c <HAL_RCC_OscConfig+0x4d0>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1f0      	bne.n	8005154 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	69da      	ldr	r2, [r3, #28]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	431a      	orrs	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005180:	019b      	lsls	r3, r3, #6
 8005182:	431a      	orrs	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005188:	085b      	lsrs	r3, r3, #1
 800518a:	3b01      	subs	r3, #1
 800518c:	041b      	lsls	r3, r3, #16
 800518e:	431a      	orrs	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005194:	061b      	lsls	r3, r3, #24
 8005196:	431a      	orrs	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800519c:	071b      	lsls	r3, r3, #28
 800519e:	491b      	ldr	r1, [pc, #108]	@ (800520c <HAL_RCC_OscConfig+0x4d0>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051a4:	4b19      	ldr	r3, [pc, #100]	@ (800520c <HAL_RCC_OscConfig+0x4d0>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a18      	ldr	r2, [pc, #96]	@ (800520c <HAL_RCC_OscConfig+0x4d0>)
 80051aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b0:	f7fe f878 	bl	80032a4 <HAL_GetTick>
 80051b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051b6:	e008      	b.n	80051ca <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051b8:	f7fe f874 	bl	80032a4 <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e05f      	b.n	800528a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ca:	4b10      	ldr	r3, [pc, #64]	@ (800520c <HAL_RCC_OscConfig+0x4d0>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d0f0      	beq.n	80051b8 <HAL_RCC_OscConfig+0x47c>
 80051d6:	e057      	b.n	8005288 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051d8:	4b0c      	ldr	r3, [pc, #48]	@ (800520c <HAL_RCC_OscConfig+0x4d0>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a0b      	ldr	r2, [pc, #44]	@ (800520c <HAL_RCC_OscConfig+0x4d0>)
 80051de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e4:	f7fe f85e 	bl	80032a4 <HAL_GetTick>
 80051e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ea:	e008      	b.n	80051fe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ec:	f7fe f85a 	bl	80032a4 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e045      	b.n	800528a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051fe:	4b03      	ldr	r3, [pc, #12]	@ (800520c <HAL_RCC_OscConfig+0x4d0>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1f0      	bne.n	80051ec <HAL_RCC_OscConfig+0x4b0>
 800520a:	e03d      	b.n	8005288 <HAL_RCC_OscConfig+0x54c>
 800520c:	40023800 	.word	0x40023800
 8005210:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005214:	4b1f      	ldr	r3, [pc, #124]	@ (8005294 <HAL_RCC_OscConfig+0x558>)
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d030      	beq.n	8005284 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800522c:	429a      	cmp	r2, r3
 800522e:	d129      	bne.n	8005284 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800523a:	429a      	cmp	r2, r3
 800523c:	d122      	bne.n	8005284 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005244:	4013      	ands	r3, r2
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800524a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800524c:	4293      	cmp	r3, r2
 800524e:	d119      	bne.n	8005284 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800525a:	085b      	lsrs	r3, r3, #1
 800525c:	3b01      	subs	r3, #1
 800525e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005260:	429a      	cmp	r2, r3
 8005262:	d10f      	bne.n	8005284 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800526e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005270:	429a      	cmp	r2, r3
 8005272:	d107      	bne.n	8005284 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800527e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005280:	429a      	cmp	r2, r3
 8005282:	d001      	beq.n	8005288 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e000      	b.n	800528a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3718      	adds	r7, #24
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	40023800 	.word	0x40023800

08005298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80052a2:	2300      	movs	r3, #0
 80052a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e0d0      	b.n	8005452 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052b0:	4b6a      	ldr	r3, [pc, #424]	@ (800545c <HAL_RCC_ClockConfig+0x1c4>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 030f 	and.w	r3, r3, #15
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d910      	bls.n	80052e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052be:	4b67      	ldr	r3, [pc, #412]	@ (800545c <HAL_RCC_ClockConfig+0x1c4>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f023 020f 	bic.w	r2, r3, #15
 80052c6:	4965      	ldr	r1, [pc, #404]	@ (800545c <HAL_RCC_ClockConfig+0x1c4>)
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ce:	4b63      	ldr	r3, [pc, #396]	@ (800545c <HAL_RCC_ClockConfig+0x1c4>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 030f 	and.w	r3, r3, #15
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d001      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e0b8      	b.n	8005452 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d020      	beq.n	800532e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d005      	beq.n	8005304 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052f8:	4b59      	ldr	r3, [pc, #356]	@ (8005460 <HAL_RCC_ClockConfig+0x1c8>)
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	4a58      	ldr	r2, [pc, #352]	@ (8005460 <HAL_RCC_ClockConfig+0x1c8>)
 80052fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005302:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0308 	and.w	r3, r3, #8
 800530c:	2b00      	cmp	r3, #0
 800530e:	d005      	beq.n	800531c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005310:	4b53      	ldr	r3, [pc, #332]	@ (8005460 <HAL_RCC_ClockConfig+0x1c8>)
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	4a52      	ldr	r2, [pc, #328]	@ (8005460 <HAL_RCC_ClockConfig+0x1c8>)
 8005316:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800531a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800531c:	4b50      	ldr	r3, [pc, #320]	@ (8005460 <HAL_RCC_ClockConfig+0x1c8>)
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	494d      	ldr	r1, [pc, #308]	@ (8005460 <HAL_RCC_ClockConfig+0x1c8>)
 800532a:	4313      	orrs	r3, r2
 800532c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d040      	beq.n	80053bc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d107      	bne.n	8005352 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005342:	4b47      	ldr	r3, [pc, #284]	@ (8005460 <HAL_RCC_ClockConfig+0x1c8>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d115      	bne.n	800537a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e07f      	b.n	8005452 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	2b02      	cmp	r3, #2
 8005358:	d107      	bne.n	800536a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800535a:	4b41      	ldr	r3, [pc, #260]	@ (8005460 <HAL_RCC_ClockConfig+0x1c8>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d109      	bne.n	800537a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e073      	b.n	8005452 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800536a:	4b3d      	ldr	r3, [pc, #244]	@ (8005460 <HAL_RCC_ClockConfig+0x1c8>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e06b      	b.n	8005452 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800537a:	4b39      	ldr	r3, [pc, #228]	@ (8005460 <HAL_RCC_ClockConfig+0x1c8>)
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f023 0203 	bic.w	r2, r3, #3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	4936      	ldr	r1, [pc, #216]	@ (8005460 <HAL_RCC_ClockConfig+0x1c8>)
 8005388:	4313      	orrs	r3, r2
 800538a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800538c:	f7fd ff8a 	bl	80032a4 <HAL_GetTick>
 8005390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005392:	e00a      	b.n	80053aa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005394:	f7fd ff86 	bl	80032a4 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e053      	b.n	8005452 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053aa:	4b2d      	ldr	r3, [pc, #180]	@ (8005460 <HAL_RCC_ClockConfig+0x1c8>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 020c 	and.w	r2, r3, #12
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d1eb      	bne.n	8005394 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053bc:	4b27      	ldr	r3, [pc, #156]	@ (800545c <HAL_RCC_ClockConfig+0x1c4>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 030f 	and.w	r3, r3, #15
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d210      	bcs.n	80053ec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ca:	4b24      	ldr	r3, [pc, #144]	@ (800545c <HAL_RCC_ClockConfig+0x1c4>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f023 020f 	bic.w	r2, r3, #15
 80053d2:	4922      	ldr	r1, [pc, #136]	@ (800545c <HAL_RCC_ClockConfig+0x1c4>)
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053da:	4b20      	ldr	r3, [pc, #128]	@ (800545c <HAL_RCC_ClockConfig+0x1c4>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 030f 	and.w	r3, r3, #15
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d001      	beq.n	80053ec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e032      	b.n	8005452 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0304 	and.w	r3, r3, #4
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d008      	beq.n	800540a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053f8:	4b19      	ldr	r3, [pc, #100]	@ (8005460 <HAL_RCC_ClockConfig+0x1c8>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	4916      	ldr	r1, [pc, #88]	@ (8005460 <HAL_RCC_ClockConfig+0x1c8>)
 8005406:	4313      	orrs	r3, r2
 8005408:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0308 	and.w	r3, r3, #8
 8005412:	2b00      	cmp	r3, #0
 8005414:	d009      	beq.n	800542a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005416:	4b12      	ldr	r3, [pc, #72]	@ (8005460 <HAL_RCC_ClockConfig+0x1c8>)
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	00db      	lsls	r3, r3, #3
 8005424:	490e      	ldr	r1, [pc, #56]	@ (8005460 <HAL_RCC_ClockConfig+0x1c8>)
 8005426:	4313      	orrs	r3, r2
 8005428:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800542a:	f000 f821 	bl	8005470 <HAL_RCC_GetSysClockFreq>
 800542e:	4602      	mov	r2, r0
 8005430:	4b0b      	ldr	r3, [pc, #44]	@ (8005460 <HAL_RCC_ClockConfig+0x1c8>)
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	091b      	lsrs	r3, r3, #4
 8005436:	f003 030f 	and.w	r3, r3, #15
 800543a:	490a      	ldr	r1, [pc, #40]	@ (8005464 <HAL_RCC_ClockConfig+0x1cc>)
 800543c:	5ccb      	ldrb	r3, [r1, r3]
 800543e:	fa22 f303 	lsr.w	r3, r2, r3
 8005442:	4a09      	ldr	r2, [pc, #36]	@ (8005468 <HAL_RCC_ClockConfig+0x1d0>)
 8005444:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005446:	4b09      	ldr	r3, [pc, #36]	@ (800546c <HAL_RCC_ClockConfig+0x1d4>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4618      	mov	r0, r3
 800544c:	f7fd fc96 	bl	8002d7c <HAL_InitTick>

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	40023c00 	.word	0x40023c00
 8005460:	40023800 	.word	0x40023800
 8005464:	080176a0 	.word	0x080176a0
 8005468:	20000010 	.word	0x20000010
 800546c:	20000014 	.word	0x20000014

08005470 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005470:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005474:	b094      	sub	sp, #80	@ 0x50
 8005476:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005478:	2300      	movs	r3, #0
 800547a:	647b      	str	r3, [r7, #68]	@ 0x44
 800547c:	2300      	movs	r3, #0
 800547e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005480:	2300      	movs	r3, #0
 8005482:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8005484:	2300      	movs	r3, #0
 8005486:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005488:	4b79      	ldr	r3, [pc, #484]	@ (8005670 <HAL_RCC_GetSysClockFreq+0x200>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f003 030c 	and.w	r3, r3, #12
 8005490:	2b08      	cmp	r3, #8
 8005492:	d00d      	beq.n	80054b0 <HAL_RCC_GetSysClockFreq+0x40>
 8005494:	2b08      	cmp	r3, #8
 8005496:	f200 80e1 	bhi.w	800565c <HAL_RCC_GetSysClockFreq+0x1ec>
 800549a:	2b00      	cmp	r3, #0
 800549c:	d002      	beq.n	80054a4 <HAL_RCC_GetSysClockFreq+0x34>
 800549e:	2b04      	cmp	r3, #4
 80054a0:	d003      	beq.n	80054aa <HAL_RCC_GetSysClockFreq+0x3a>
 80054a2:	e0db      	b.n	800565c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054a4:	4b73      	ldr	r3, [pc, #460]	@ (8005674 <HAL_RCC_GetSysClockFreq+0x204>)
 80054a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054a8:	e0db      	b.n	8005662 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054aa:	4b73      	ldr	r3, [pc, #460]	@ (8005678 <HAL_RCC_GetSysClockFreq+0x208>)
 80054ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054ae:	e0d8      	b.n	8005662 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054b0:	4b6f      	ldr	r3, [pc, #444]	@ (8005670 <HAL_RCC_GetSysClockFreq+0x200>)
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054b8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80054ba:	4b6d      	ldr	r3, [pc, #436]	@ (8005670 <HAL_RCC_GetSysClockFreq+0x200>)
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d063      	beq.n	800558e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054c6:	4b6a      	ldr	r3, [pc, #424]	@ (8005670 <HAL_RCC_GetSysClockFreq+0x200>)
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	099b      	lsrs	r3, r3, #6
 80054cc:	2200      	movs	r2, #0
 80054ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80054d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80054da:	2300      	movs	r3, #0
 80054dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80054de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80054e2:	4622      	mov	r2, r4
 80054e4:	462b      	mov	r3, r5
 80054e6:	f04f 0000 	mov.w	r0, #0
 80054ea:	f04f 0100 	mov.w	r1, #0
 80054ee:	0159      	lsls	r1, r3, #5
 80054f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054f4:	0150      	lsls	r0, r2, #5
 80054f6:	4602      	mov	r2, r0
 80054f8:	460b      	mov	r3, r1
 80054fa:	4621      	mov	r1, r4
 80054fc:	1a51      	subs	r1, r2, r1
 80054fe:	6139      	str	r1, [r7, #16]
 8005500:	4629      	mov	r1, r5
 8005502:	eb63 0301 	sbc.w	r3, r3, r1
 8005506:	617b      	str	r3, [r7, #20]
 8005508:	f04f 0200 	mov.w	r2, #0
 800550c:	f04f 0300 	mov.w	r3, #0
 8005510:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005514:	4659      	mov	r1, fp
 8005516:	018b      	lsls	r3, r1, #6
 8005518:	4651      	mov	r1, sl
 800551a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800551e:	4651      	mov	r1, sl
 8005520:	018a      	lsls	r2, r1, #6
 8005522:	4651      	mov	r1, sl
 8005524:	ebb2 0801 	subs.w	r8, r2, r1
 8005528:	4659      	mov	r1, fp
 800552a:	eb63 0901 	sbc.w	r9, r3, r1
 800552e:	f04f 0200 	mov.w	r2, #0
 8005532:	f04f 0300 	mov.w	r3, #0
 8005536:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800553a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800553e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005542:	4690      	mov	r8, r2
 8005544:	4699      	mov	r9, r3
 8005546:	4623      	mov	r3, r4
 8005548:	eb18 0303 	adds.w	r3, r8, r3
 800554c:	60bb      	str	r3, [r7, #8]
 800554e:	462b      	mov	r3, r5
 8005550:	eb49 0303 	adc.w	r3, r9, r3
 8005554:	60fb      	str	r3, [r7, #12]
 8005556:	f04f 0200 	mov.w	r2, #0
 800555a:	f04f 0300 	mov.w	r3, #0
 800555e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005562:	4629      	mov	r1, r5
 8005564:	024b      	lsls	r3, r1, #9
 8005566:	4621      	mov	r1, r4
 8005568:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800556c:	4621      	mov	r1, r4
 800556e:	024a      	lsls	r2, r1, #9
 8005570:	4610      	mov	r0, r2
 8005572:	4619      	mov	r1, r3
 8005574:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005576:	2200      	movs	r2, #0
 8005578:	62bb      	str	r3, [r7, #40]	@ 0x28
 800557a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800557c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005580:	f7fa ff16 	bl	80003b0 <__aeabi_uldivmod>
 8005584:	4602      	mov	r2, r0
 8005586:	460b      	mov	r3, r1
 8005588:	4613      	mov	r3, r2
 800558a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800558c:	e058      	b.n	8005640 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800558e:	4b38      	ldr	r3, [pc, #224]	@ (8005670 <HAL_RCC_GetSysClockFreq+0x200>)
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	099b      	lsrs	r3, r3, #6
 8005594:	2200      	movs	r2, #0
 8005596:	4618      	mov	r0, r3
 8005598:	4611      	mov	r1, r2
 800559a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800559e:	623b      	str	r3, [r7, #32]
 80055a0:	2300      	movs	r3, #0
 80055a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80055a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80055a8:	4642      	mov	r2, r8
 80055aa:	464b      	mov	r3, r9
 80055ac:	f04f 0000 	mov.w	r0, #0
 80055b0:	f04f 0100 	mov.w	r1, #0
 80055b4:	0159      	lsls	r1, r3, #5
 80055b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055ba:	0150      	lsls	r0, r2, #5
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	4641      	mov	r1, r8
 80055c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80055c6:	4649      	mov	r1, r9
 80055c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80055cc:	f04f 0200 	mov.w	r2, #0
 80055d0:	f04f 0300 	mov.w	r3, #0
 80055d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80055d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80055dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80055e0:	ebb2 040a 	subs.w	r4, r2, sl
 80055e4:	eb63 050b 	sbc.w	r5, r3, fp
 80055e8:	f04f 0200 	mov.w	r2, #0
 80055ec:	f04f 0300 	mov.w	r3, #0
 80055f0:	00eb      	lsls	r3, r5, #3
 80055f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055f6:	00e2      	lsls	r2, r4, #3
 80055f8:	4614      	mov	r4, r2
 80055fa:	461d      	mov	r5, r3
 80055fc:	4643      	mov	r3, r8
 80055fe:	18e3      	adds	r3, r4, r3
 8005600:	603b      	str	r3, [r7, #0]
 8005602:	464b      	mov	r3, r9
 8005604:	eb45 0303 	adc.w	r3, r5, r3
 8005608:	607b      	str	r3, [r7, #4]
 800560a:	f04f 0200 	mov.w	r2, #0
 800560e:	f04f 0300 	mov.w	r3, #0
 8005612:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005616:	4629      	mov	r1, r5
 8005618:	028b      	lsls	r3, r1, #10
 800561a:	4621      	mov	r1, r4
 800561c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005620:	4621      	mov	r1, r4
 8005622:	028a      	lsls	r2, r1, #10
 8005624:	4610      	mov	r0, r2
 8005626:	4619      	mov	r1, r3
 8005628:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800562a:	2200      	movs	r2, #0
 800562c:	61bb      	str	r3, [r7, #24]
 800562e:	61fa      	str	r2, [r7, #28]
 8005630:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005634:	f7fa febc 	bl	80003b0 <__aeabi_uldivmod>
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	4613      	mov	r3, r2
 800563e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005640:	4b0b      	ldr	r3, [pc, #44]	@ (8005670 <HAL_RCC_GetSysClockFreq+0x200>)
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	0c1b      	lsrs	r3, r3, #16
 8005646:	f003 0303 	and.w	r3, r3, #3
 800564a:	3301      	adds	r3, #1
 800564c:	005b      	lsls	r3, r3, #1
 800564e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005650:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005652:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005654:	fbb2 f3f3 	udiv	r3, r2, r3
 8005658:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800565a:	e002      	b.n	8005662 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800565c:	4b05      	ldr	r3, [pc, #20]	@ (8005674 <HAL_RCC_GetSysClockFreq+0x204>)
 800565e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005660:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005662:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005664:	4618      	mov	r0, r3
 8005666:	3750      	adds	r7, #80	@ 0x50
 8005668:	46bd      	mov	sp, r7
 800566a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800566e:	bf00      	nop
 8005670:	40023800 	.word	0x40023800
 8005674:	00f42400 	.word	0x00f42400
 8005678:	007a1200 	.word	0x007a1200

0800567c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800567c:	b480      	push	{r7}
 800567e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005680:	4b03      	ldr	r3, [pc, #12]	@ (8005690 <HAL_RCC_GetHCLKFreq+0x14>)
 8005682:	681b      	ldr	r3, [r3, #0]
}
 8005684:	4618      	mov	r0, r3
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	20000010 	.word	0x20000010

08005694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005698:	f7ff fff0 	bl	800567c <HAL_RCC_GetHCLKFreq>
 800569c:	4602      	mov	r2, r0
 800569e:	4b05      	ldr	r3, [pc, #20]	@ (80056b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	0a9b      	lsrs	r3, r3, #10
 80056a4:	f003 0307 	and.w	r3, r3, #7
 80056a8:	4903      	ldr	r1, [pc, #12]	@ (80056b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056aa:	5ccb      	ldrb	r3, [r1, r3]
 80056ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	40023800 	.word	0x40023800
 80056b8:	080176b0 	.word	0x080176b0

080056bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80056c0:	f7ff ffdc 	bl	800567c <HAL_RCC_GetHCLKFreq>
 80056c4:	4602      	mov	r2, r0
 80056c6:	4b05      	ldr	r3, [pc, #20]	@ (80056dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	0b5b      	lsrs	r3, r3, #13
 80056cc:	f003 0307 	and.w	r3, r3, #7
 80056d0:	4903      	ldr	r1, [pc, #12]	@ (80056e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056d2:	5ccb      	ldrb	r3, [r1, r3]
 80056d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056d8:	4618      	mov	r0, r3
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	40023800 	.word	0x40023800
 80056e0:	080176b0 	.word	0x080176b0

080056e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	220f      	movs	r2, #15
 80056f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80056f4:	4b12      	ldr	r3, [pc, #72]	@ (8005740 <HAL_RCC_GetClockConfig+0x5c>)
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f003 0203 	and.w	r2, r3, #3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005700:	4b0f      	ldr	r3, [pc, #60]	@ (8005740 <HAL_RCC_GetClockConfig+0x5c>)
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800570c:	4b0c      	ldr	r3, [pc, #48]	@ (8005740 <HAL_RCC_GetClockConfig+0x5c>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005718:	4b09      	ldr	r3, [pc, #36]	@ (8005740 <HAL_RCC_GetClockConfig+0x5c>)
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	08db      	lsrs	r3, r3, #3
 800571e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005726:	4b07      	ldr	r3, [pc, #28]	@ (8005744 <HAL_RCC_GetClockConfig+0x60>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 020f 	and.w	r2, r3, #15
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	601a      	str	r2, [r3, #0]
}
 8005732:	bf00      	nop
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	40023800 	.word	0x40023800
 8005744:	40023c00 	.word	0x40023c00

08005748 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b088      	sub	sp, #32
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005750:	2300      	movs	r3, #0
 8005752:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005754:	2300      	movs	r3, #0
 8005756:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005758:	2300      	movs	r3, #0
 800575a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800575c:	2300      	movs	r3, #0
 800575e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005760:	2300      	movs	r3, #0
 8005762:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	2b00      	cmp	r3, #0
 800576e:	d012      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005770:	4b69      	ldr	r3, [pc, #420]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	4a68      	ldr	r2, [pc, #416]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005776:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800577a:	6093      	str	r3, [r2, #8]
 800577c:	4b66      	ldr	r3, [pc, #408]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005784:	4964      	ldr	r1, [pc, #400]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005786:	4313      	orrs	r3, r2
 8005788:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005792:	2301      	movs	r3, #1
 8005794:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d017      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057a2:	4b5d      	ldr	r3, [pc, #372]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057a8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057b0:	4959      	ldr	r1, [pc, #356]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057c0:	d101      	bne.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80057c2:	2301      	movs	r3, #1
 80057c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80057ce:	2301      	movs	r3, #1
 80057d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d017      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80057de:	4b4e      	ldr	r3, [pc, #312]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057e4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ec:	494a      	ldr	r1, [pc, #296]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057fc:	d101      	bne.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80057fe:	2301      	movs	r3, #1
 8005800:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800580a:	2301      	movs	r3, #1
 800580c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800581a:	2301      	movs	r3, #1
 800581c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0320 	and.w	r3, r3, #32
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 808b 	beq.w	8005942 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800582c:	4b3a      	ldr	r3, [pc, #232]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800582e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005830:	4a39      	ldr	r2, [pc, #228]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005832:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005836:	6413      	str	r3, [r2, #64]	@ 0x40
 8005838:	4b37      	ldr	r3, [pc, #220]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800583a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800583c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005840:	60bb      	str	r3, [r7, #8]
 8005842:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005844:	4b35      	ldr	r3, [pc, #212]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a34      	ldr	r2, [pc, #208]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800584a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800584e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005850:	f7fd fd28 	bl	80032a4 <HAL_GetTick>
 8005854:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005856:	e008      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005858:	f7fd fd24 	bl	80032a4 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b64      	cmp	r3, #100	@ 0x64
 8005864:	d901      	bls.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e38f      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800586a:	4b2c      	ldr	r3, [pc, #176]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005872:	2b00      	cmp	r3, #0
 8005874:	d0f0      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005876:	4b28      	ldr	r3, [pc, #160]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800587a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800587e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d035      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	429a      	cmp	r2, r3
 8005892:	d02e      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005894:	4b20      	ldr	r3, [pc, #128]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005898:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800589c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800589e:	4b1e      	ldr	r3, [pc, #120]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058a2:	4a1d      	ldr	r2, [pc, #116]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058a8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058aa:	4b1b      	ldr	r3, [pc, #108]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ae:	4a1a      	ldr	r2, [pc, #104]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058b4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80058b6:	4a18      	ldr	r2, [pc, #96]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80058bc:	4b16      	ldr	r3, [pc, #88]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d114      	bne.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c8:	f7fd fcec 	bl	80032a4 <HAL_GetTick>
 80058cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058ce:	e00a      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058d0:	f7fd fce8 	bl	80032a4 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058de:	4293      	cmp	r3, r2
 80058e0:	d901      	bls.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e351      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ea:	f003 0302 	and.w	r3, r3, #2
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d0ee      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058fe:	d111      	bne.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005900:	4b05      	ldr	r3, [pc, #20]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800590c:	4b04      	ldr	r3, [pc, #16]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800590e:	400b      	ands	r3, r1
 8005910:	4901      	ldr	r1, [pc, #4]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005912:	4313      	orrs	r3, r2
 8005914:	608b      	str	r3, [r1, #8]
 8005916:	e00b      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005918:	40023800 	.word	0x40023800
 800591c:	40007000 	.word	0x40007000
 8005920:	0ffffcff 	.word	0x0ffffcff
 8005924:	4bac      	ldr	r3, [pc, #688]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	4aab      	ldr	r2, [pc, #684]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800592a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800592e:	6093      	str	r3, [r2, #8]
 8005930:	4ba9      	ldr	r3, [pc, #676]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005932:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800593c:	49a6      	ldr	r1, [pc, #664]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800593e:	4313      	orrs	r3, r2
 8005940:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0310 	and.w	r3, r3, #16
 800594a:	2b00      	cmp	r3, #0
 800594c:	d010      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800594e:	4ba2      	ldr	r3, [pc, #648]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005950:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005954:	4aa0      	ldr	r2, [pc, #640]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005956:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800595a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800595e:	4b9e      	ldr	r3, [pc, #632]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005960:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005968:	499b      	ldr	r1, [pc, #620]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800596a:	4313      	orrs	r3, r2
 800596c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00a      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800597c:	4b96      	ldr	r3, [pc, #600]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800597e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005982:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800598a:	4993      	ldr	r1, [pc, #588]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800598c:	4313      	orrs	r3, r2
 800598e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00a      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800599e:	4b8e      	ldr	r3, [pc, #568]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059ac:	498a      	ldr	r1, [pc, #552]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00a      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059c0:	4b85      	ldr	r3, [pc, #532]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059ce:	4982      	ldr	r1, [pc, #520]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00a      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80059e2:	4b7d      	ldr	r3, [pc, #500]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059e8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059f0:	4979      	ldr	r1, [pc, #484]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00a      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a04:	4b74      	ldr	r3, [pc, #464]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a0a:	f023 0203 	bic.w	r2, r3, #3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a12:	4971      	ldr	r1, [pc, #452]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00a      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a26:	4b6c      	ldr	r3, [pc, #432]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a2c:	f023 020c 	bic.w	r2, r3, #12
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a34:	4968      	ldr	r1, [pc, #416]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00a      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a48:	4b63      	ldr	r3, [pc, #396]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a4e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a56:	4960      	ldr	r1, [pc, #384]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00a      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a6a:	4b5b      	ldr	r3, [pc, #364]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a70:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a78:	4957      	ldr	r1, [pc, #348]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00a      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a8c:	4b52      	ldr	r3, [pc, #328]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a92:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a9a:	494f      	ldr	r1, [pc, #316]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00a      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005aae:	4b4a      	ldr	r3, [pc, #296]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ab4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005abc:	4946      	ldr	r1, [pc, #280]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00a      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005ad0:	4b41      	ldr	r3, [pc, #260]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ad6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ade:	493e      	ldr	r1, [pc, #248]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00a      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005af2:	4b39      	ldr	r3, [pc, #228]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005af8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b00:	4935      	ldr	r1, [pc, #212]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00a      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005b14:	4b30      	ldr	r3, [pc, #192]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b1a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b22:	492d      	ldr	r1, [pc, #180]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d011      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005b36:	4b28      	ldr	r3, [pc, #160]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b3c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b44:	4924      	ldr	r1, [pc, #144]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b54:	d101      	bne.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005b56:	2301      	movs	r3, #1
 8005b58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0308 	and.w	r3, r3, #8
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d001      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005b66:	2301      	movs	r3, #1
 8005b68:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00a      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b76:	4b18      	ldr	r3, [pc, #96]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b7c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b84:	4914      	ldr	r1, [pc, #80]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00b      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b98:	4b0f      	ldr	r3, [pc, #60]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b9e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ba8:	490b      	ldr	r1, [pc, #44]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00f      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005bbc:	4b06      	ldr	r3, [pc, #24]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bc2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bcc:	4902      	ldr	r1, [pc, #8]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005bd4:	e002      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005bd6:	bf00      	nop
 8005bd8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00b      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005be8:	4b8a      	ldr	r3, [pc, #552]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005bee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bf8:	4986      	ldr	r1, [pc, #536]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00b      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005c0c:	4b81      	ldr	r3, [pc, #516]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c12:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c1c:	497d      	ldr	r1, [pc, #500]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d006      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f000 80d6 	beq.w	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c38:	4b76      	ldr	r3, [pc, #472]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a75      	ldr	r2, [pc, #468]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c3e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005c42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c44:	f7fd fb2e 	bl	80032a4 <HAL_GetTick>
 8005c48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c4a:	e008      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c4c:	f7fd fb2a 	bl	80032a4 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b64      	cmp	r3, #100	@ 0x64
 8005c58:	d901      	bls.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e195      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c5e:	4b6d      	ldr	r3, [pc, #436]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1f0      	bne.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d021      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d11d      	bne.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005c7e:	4b65      	ldr	r3, [pc, #404]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c84:	0c1b      	lsrs	r3, r3, #16
 8005c86:	f003 0303 	and.w	r3, r3, #3
 8005c8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005c8c:	4b61      	ldr	r3, [pc, #388]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c92:	0e1b      	lsrs	r3, r3, #24
 8005c94:	f003 030f 	and.w	r3, r3, #15
 8005c98:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	019a      	lsls	r2, r3, #6
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	041b      	lsls	r3, r3, #16
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	061b      	lsls	r3, r3, #24
 8005caa:	431a      	orrs	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	071b      	lsls	r3, r3, #28
 8005cb2:	4958      	ldr	r1, [pc, #352]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d004      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cce:	d00a      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d02e      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ce4:	d129      	bne.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005ce6:	4b4b      	ldr	r3, [pc, #300]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ce8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cec:	0c1b      	lsrs	r3, r3, #16
 8005cee:	f003 0303 	and.w	r3, r3, #3
 8005cf2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005cf4:	4b47      	ldr	r3, [pc, #284]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cfa:	0f1b      	lsrs	r3, r3, #28
 8005cfc:	f003 0307 	and.w	r3, r3, #7
 8005d00:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	019a      	lsls	r2, r3, #6
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	041b      	lsls	r3, r3, #16
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	061b      	lsls	r3, r3, #24
 8005d14:	431a      	orrs	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	071b      	lsls	r3, r3, #28
 8005d1a:	493e      	ldr	r1, [pc, #248]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005d22:	4b3c      	ldr	r3, [pc, #240]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d28:	f023 021f 	bic.w	r2, r3, #31
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d30:	3b01      	subs	r3, #1
 8005d32:	4938      	ldr	r1, [pc, #224]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d01d      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d46:	4b33      	ldr	r3, [pc, #204]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d4c:	0e1b      	lsrs	r3, r3, #24
 8005d4e:	f003 030f 	and.w	r3, r3, #15
 8005d52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d54:	4b2f      	ldr	r3, [pc, #188]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d5a:	0f1b      	lsrs	r3, r3, #28
 8005d5c:	f003 0307 	and.w	r3, r3, #7
 8005d60:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	019a      	lsls	r2, r3, #6
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	041b      	lsls	r3, r3, #16
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	061b      	lsls	r3, r3, #24
 8005d74:	431a      	orrs	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	071b      	lsls	r3, r3, #28
 8005d7a:	4926      	ldr	r1, [pc, #152]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d011      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	019a      	lsls	r2, r3, #6
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	041b      	lsls	r3, r3, #16
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	061b      	lsls	r3, r3, #24
 8005da2:	431a      	orrs	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	071b      	lsls	r3, r3, #28
 8005daa:	491a      	ldr	r1, [pc, #104]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005db2:	4b18      	ldr	r3, [pc, #96]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a17      	ldr	r2, [pc, #92]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005db8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005dbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dbe:	f7fd fa71 	bl	80032a4 <HAL_GetTick>
 8005dc2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005dc4:	e008      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005dc6:	f7fd fa6d 	bl	80032a4 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	2b64      	cmp	r3, #100	@ 0x64
 8005dd2:	d901      	bls.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e0d8      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d0f0      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	f040 80ce 	bne.w	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005dec:	4b09      	ldr	r3, [pc, #36]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a08      	ldr	r2, [pc, #32]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005df2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005df6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005df8:	f7fd fa54 	bl	80032a4 <HAL_GetTick>
 8005dfc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005dfe:	e00b      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e00:	f7fd fa50 	bl	80032a4 <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	2b64      	cmp	r3, #100	@ 0x64
 8005e0c:	d904      	bls.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e0bb      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005e12:	bf00      	nop
 8005e14:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e18:	4b5e      	ldr	r3, [pc, #376]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e24:	d0ec      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d009      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d02e      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d12a      	bne.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005e4e:	4b51      	ldr	r3, [pc, #324]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e54:	0c1b      	lsrs	r3, r3, #16
 8005e56:	f003 0303 	and.w	r3, r3, #3
 8005e5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005e5c:	4b4d      	ldr	r3, [pc, #308]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e62:	0f1b      	lsrs	r3, r3, #28
 8005e64:	f003 0307 	and.w	r3, r3, #7
 8005e68:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	019a      	lsls	r2, r3, #6
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	041b      	lsls	r3, r3, #16
 8005e74:	431a      	orrs	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	061b      	lsls	r3, r3, #24
 8005e7c:	431a      	orrs	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	071b      	lsls	r3, r3, #28
 8005e82:	4944      	ldr	r1, [pc, #272]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e84:	4313      	orrs	r3, r2
 8005e86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005e8a:	4b42      	ldr	r3, [pc, #264]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e90:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	021b      	lsls	r3, r3, #8
 8005e9c:	493d      	ldr	r1, [pc, #244]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d022      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005eb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005eb8:	d11d      	bne.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005eba:	4b36      	ldr	r3, [pc, #216]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ec0:	0e1b      	lsrs	r3, r3, #24
 8005ec2:	f003 030f 	and.w	r3, r3, #15
 8005ec6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ec8:	4b32      	ldr	r3, [pc, #200]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ece:	0f1b      	lsrs	r3, r3, #28
 8005ed0:	f003 0307 	and.w	r3, r3, #7
 8005ed4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	019a      	lsls	r2, r3, #6
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	041b      	lsls	r3, r3, #16
 8005ee2:	431a      	orrs	r2, r3
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	061b      	lsls	r3, r3, #24
 8005ee8:	431a      	orrs	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	071b      	lsls	r3, r3, #28
 8005eee:	4929      	ldr	r1, [pc, #164]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0308 	and.w	r3, r3, #8
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d028      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f02:	4b24      	ldr	r3, [pc, #144]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f08:	0e1b      	lsrs	r3, r3, #24
 8005f0a:	f003 030f 	and.w	r3, r3, #15
 8005f0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005f10:	4b20      	ldr	r3, [pc, #128]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f16:	0c1b      	lsrs	r3, r3, #16
 8005f18:	f003 0303 	and.w	r3, r3, #3
 8005f1c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	019a      	lsls	r2, r3, #6
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	041b      	lsls	r3, r3, #16
 8005f28:	431a      	orrs	r2, r3
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	061b      	lsls	r3, r3, #24
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	69db      	ldr	r3, [r3, #28]
 8005f34:	071b      	lsls	r3, r3, #28
 8005f36:	4917      	ldr	r1, [pc, #92]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005f3e:	4b15      	ldr	r3, [pc, #84]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f44:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f4c:	4911      	ldr	r1, [pc, #68]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005f54:	4b0f      	ldr	r3, [pc, #60]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a0e      	ldr	r2, [pc, #56]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f60:	f7fd f9a0 	bl	80032a4 <HAL_GetTick>
 8005f64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f66:	e008      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005f68:	f7fd f99c 	bl	80032a4 <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	2b64      	cmp	r3, #100	@ 0x64
 8005f74:	d901      	bls.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e007      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f7a:	4b06      	ldr	r3, [pc, #24]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f86:	d1ef      	bne.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3720      	adds	r7, #32
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	40023800 	.word	0x40023800

08005f98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e09d      	b.n	80060e6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d108      	bne.n	8005fc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fba:	d009      	beq.n	8005fd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	61da      	str	r2, [r3, #28]
 8005fc2:	e005      	b.n	8005fd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d106      	bne.n	8005ff0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7fc fd50 	bl	8002a90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006006:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006010:	d902      	bls.n	8006018 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006012:	2300      	movs	r3, #0
 8006014:	60fb      	str	r3, [r7, #12]
 8006016:	e002      	b.n	800601e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006018:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800601c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006026:	d007      	beq.n	8006038 <HAL_SPI_Init+0xa0>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006030:	d002      	beq.n	8006038 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006048:	431a      	orrs	r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	431a      	orrs	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	431a      	orrs	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006066:	431a      	orrs	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	69db      	ldr	r3, [r3, #28]
 800606c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006070:	431a      	orrs	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800607a:	ea42 0103 	orr.w	r1, r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006082:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	430a      	orrs	r2, r1
 800608c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	0c1b      	lsrs	r3, r3, #16
 8006094:	f003 0204 	and.w	r2, r3, #4
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800609c:	f003 0310 	and.w	r3, r3, #16
 80060a0:	431a      	orrs	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060a6:	f003 0308 	and.w	r3, r3, #8
 80060aa:	431a      	orrs	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80060b4:	ea42 0103 	orr.w	r1, r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	69da      	ldr	r2, [r3, #28]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
	...

080060f0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b088      	sub	sp, #32
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	099b      	lsrs	r3, r3, #6
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10f      	bne.n	8006134 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00a      	beq.n	8006134 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	099b      	lsrs	r3, r3, #6
 8006122:	f003 0301 	and.w	r3, r3, #1
 8006126:	2b00      	cmp	r3, #0
 8006128:	d004      	beq.n	8006134 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	4798      	blx	r3
    return;
 8006132:	e0d7      	b.n	80062e4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	085b      	lsrs	r3, r3, #1
 8006138:	f003 0301 	and.w	r3, r3, #1
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00a      	beq.n	8006156 <HAL_SPI_IRQHandler+0x66>
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	09db      	lsrs	r3, r3, #7
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	2b00      	cmp	r3, #0
 800614a:	d004      	beq.n	8006156 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	4798      	blx	r3
    return;
 8006154:	e0c6      	b.n	80062e4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	095b      	lsrs	r3, r3, #5
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10c      	bne.n	800617c <HAL_SPI_IRQHandler+0x8c>
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	099b      	lsrs	r3, r3, #6
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	2b00      	cmp	r3, #0
 800616c:	d106      	bne.n	800617c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	0a1b      	lsrs	r3, r3, #8
 8006172:	f003 0301 	and.w	r3, r3, #1
 8006176:	2b00      	cmp	r3, #0
 8006178:	f000 80b4 	beq.w	80062e4 <HAL_SPI_IRQHandler+0x1f4>
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	095b      	lsrs	r3, r3, #5
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	2b00      	cmp	r3, #0
 8006186:	f000 80ad 	beq.w	80062e4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	099b      	lsrs	r3, r3, #6
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	2b00      	cmp	r3, #0
 8006194:	d023      	beq.n	80061de <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b03      	cmp	r3, #3
 80061a0:	d011      	beq.n	80061c6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061a6:	f043 0204 	orr.w	r2, r3, #4
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061ae:	2300      	movs	r3, #0
 80061b0:	617b      	str	r3, [r7, #20]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	617b      	str	r3, [r7, #20]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	617b      	str	r3, [r7, #20]
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	e00b      	b.n	80061de <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061c6:	2300      	movs	r3, #0
 80061c8:	613b      	str	r3, [r7, #16]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	613b      	str	r3, [r7, #16]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	613b      	str	r3, [r7, #16]
 80061da:	693b      	ldr	r3, [r7, #16]
        return;
 80061dc:	e082      	b.n	80062e4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	095b      	lsrs	r3, r3, #5
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d014      	beq.n	8006214 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061ee:	f043 0201 	orr.w	r2, r3, #1
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80061f6:	2300      	movs	r3, #0
 80061f8:	60fb      	str	r3, [r7, #12]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	60fb      	str	r3, [r7, #12]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006210:	601a      	str	r2, [r3, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	0a1b      	lsrs	r3, r3, #8
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00c      	beq.n	800623a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006224:	f043 0208 	orr.w	r2, r3, #8
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800622c:	2300      	movs	r3, #0
 800622e:	60bb      	str	r3, [r7, #8]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	60bb      	str	r3, [r7, #8]
 8006238:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800623e:	2b00      	cmp	r3, #0
 8006240:	d04f      	beq.n	80062e2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	685a      	ldr	r2, [r3, #4]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006250:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	f003 0302 	and.w	r3, r3, #2
 8006260:	2b00      	cmp	r3, #0
 8006262:	d104      	bne.n	800626e <HAL_SPI_IRQHandler+0x17e>
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	f003 0301 	and.w	r3, r3, #1
 800626a:	2b00      	cmp	r3, #0
 800626c:	d034      	beq.n	80062d8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f022 0203 	bic.w	r2, r2, #3
 800627c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006282:	2b00      	cmp	r3, #0
 8006284:	d011      	beq.n	80062aa <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800628a:	4a18      	ldr	r2, [pc, #96]	@ (80062ec <HAL_SPI_IRQHandler+0x1fc>)
 800628c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006292:	4618      	mov	r0, r3
 8006294:	f7fd fa72 	bl	800377c <HAL_DMA_Abort_IT>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d005      	beq.n	80062aa <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d016      	beq.n	80062e0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062b6:	4a0d      	ldr	r2, [pc, #52]	@ (80062ec <HAL_SPI_IRQHandler+0x1fc>)
 80062b8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062be:	4618      	mov	r0, r3
 80062c0:	f7fd fa5c 	bl	800377c <HAL_DMA_Abort_IT>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00a      	beq.n	80062e0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80062d6:	e003      	b.n	80062e0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f809 	bl	80062f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80062de:	e000      	b.n	80062e2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80062e0:	bf00      	nop
    return;
 80062e2:	bf00      	nop
  }
}
 80062e4:	3720      	adds	r7, #32
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	08006305 	.word	0x08006305

080062f0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006310:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f7ff ffe5 	bl	80062f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006326:	bf00      	nop
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b082      	sub	sp, #8
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d101      	bne.n	8006340 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e049      	b.n	80063d4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006346:	b2db      	uxtb	r3, r3
 8006348:	2b00      	cmp	r3, #0
 800634a:	d106      	bne.n	800635a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f7fc fbe7 	bl	8002b28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2202      	movs	r2, #2
 800635e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	3304      	adds	r3, #4
 800636a:	4619      	mov	r1, r3
 800636c:	4610      	mov	r0, r2
 800636e:	f000 fb93 	bl	8006a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3708      	adds	r7, #8
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d001      	beq.n	80063f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e054      	b.n	800649e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68da      	ldr	r2, [r3, #12]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f042 0201 	orr.w	r2, r2, #1
 800640a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a26      	ldr	r2, [pc, #152]	@ (80064ac <HAL_TIM_Base_Start_IT+0xd0>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d022      	beq.n	800645c <HAL_TIM_Base_Start_IT+0x80>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800641e:	d01d      	beq.n	800645c <HAL_TIM_Base_Start_IT+0x80>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a22      	ldr	r2, [pc, #136]	@ (80064b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d018      	beq.n	800645c <HAL_TIM_Base_Start_IT+0x80>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a21      	ldr	r2, [pc, #132]	@ (80064b4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d013      	beq.n	800645c <HAL_TIM_Base_Start_IT+0x80>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a1f      	ldr	r2, [pc, #124]	@ (80064b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d00e      	beq.n	800645c <HAL_TIM_Base_Start_IT+0x80>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a1e      	ldr	r2, [pc, #120]	@ (80064bc <HAL_TIM_Base_Start_IT+0xe0>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d009      	beq.n	800645c <HAL_TIM_Base_Start_IT+0x80>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a1c      	ldr	r2, [pc, #112]	@ (80064c0 <HAL_TIM_Base_Start_IT+0xe4>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d004      	beq.n	800645c <HAL_TIM_Base_Start_IT+0x80>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a1b      	ldr	r2, [pc, #108]	@ (80064c4 <HAL_TIM_Base_Start_IT+0xe8>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d115      	bne.n	8006488 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689a      	ldr	r2, [r3, #8]
 8006462:	4b19      	ldr	r3, [pc, #100]	@ (80064c8 <HAL_TIM_Base_Start_IT+0xec>)
 8006464:	4013      	ands	r3, r2
 8006466:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2b06      	cmp	r3, #6
 800646c:	d015      	beq.n	800649a <HAL_TIM_Base_Start_IT+0xbe>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006474:	d011      	beq.n	800649a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f042 0201 	orr.w	r2, r2, #1
 8006484:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006486:	e008      	b.n	800649a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f042 0201 	orr.w	r2, r2, #1
 8006496:	601a      	str	r2, [r3, #0]
 8006498:	e000      	b.n	800649c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800649a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	40010000 	.word	0x40010000
 80064b0:	40000400 	.word	0x40000400
 80064b4:	40000800 	.word	0x40000800
 80064b8:	40000c00 	.word	0x40000c00
 80064bc:	40010400 	.word	0x40010400
 80064c0:	40014000 	.word	0x40014000
 80064c4:	40001800 	.word	0x40001800
 80064c8:	00010007 	.word	0x00010007

080064cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e049      	b.n	8006572 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d106      	bne.n	80064f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 f841 	bl	800657a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2202      	movs	r2, #2
 80064fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	3304      	adds	r3, #4
 8006508:	4619      	mov	r1, r3
 800650a:	4610      	mov	r0, r2
 800650c:	f000 fac4 	bl	8006a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3708      	adds	r7, #8
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800657a:	b480      	push	{r7}
 800657c:	b083      	sub	sp, #12
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006582:	bf00      	nop
 8006584:	370c      	adds	r7, #12
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b084      	sub	sp, #16
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	f003 0302 	and.w	r3, r3, #2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d020      	beq.n	80065f2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d01b      	beq.n	80065f2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f06f 0202 	mvn.w	r2, #2
 80065c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	699b      	ldr	r3, [r3, #24]
 80065d0:	f003 0303 	and.w	r3, r3, #3
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d003      	beq.n	80065e0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 fa3f 	bl	8006a5c <HAL_TIM_IC_CaptureCallback>
 80065de:	e005      	b.n	80065ec <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 fa31 	bl	8006a48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 fa42 	bl	8006a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	f003 0304 	and.w	r3, r3, #4
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d020      	beq.n	800663e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f003 0304 	and.w	r3, r3, #4
 8006602:	2b00      	cmp	r3, #0
 8006604:	d01b      	beq.n	800663e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f06f 0204 	mvn.w	r2, #4
 800660e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2202      	movs	r2, #2
 8006614:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006620:	2b00      	cmp	r3, #0
 8006622:	d003      	beq.n	800662c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fa19 	bl	8006a5c <HAL_TIM_IC_CaptureCallback>
 800662a:	e005      	b.n	8006638 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 fa0b 	bl	8006a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fa1c 	bl	8006a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	f003 0308 	and.w	r3, r3, #8
 8006644:	2b00      	cmp	r3, #0
 8006646:	d020      	beq.n	800668a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f003 0308 	and.w	r3, r3, #8
 800664e:	2b00      	cmp	r3, #0
 8006650:	d01b      	beq.n	800668a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f06f 0208 	mvn.w	r2, #8
 800665a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2204      	movs	r2, #4
 8006660:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	69db      	ldr	r3, [r3, #28]
 8006668:	f003 0303 	and.w	r3, r3, #3
 800666c:	2b00      	cmp	r3, #0
 800666e:	d003      	beq.n	8006678 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f9f3 	bl	8006a5c <HAL_TIM_IC_CaptureCallback>
 8006676:	e005      	b.n	8006684 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f9e5 	bl	8006a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f9f6 	bl	8006a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	f003 0310 	and.w	r3, r3, #16
 8006690:	2b00      	cmp	r3, #0
 8006692:	d020      	beq.n	80066d6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f003 0310 	and.w	r3, r3, #16
 800669a:	2b00      	cmp	r3, #0
 800669c:	d01b      	beq.n	80066d6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f06f 0210 	mvn.w	r2, #16
 80066a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2208      	movs	r2, #8
 80066ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	69db      	ldr	r3, [r3, #28]
 80066b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d003      	beq.n	80066c4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 f9cd 	bl	8006a5c <HAL_TIM_IC_CaptureCallback>
 80066c2:	e005      	b.n	80066d0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f9bf 	bl	8006a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 f9d0 	bl	8006a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00c      	beq.n	80066fa <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d007      	beq.n	80066fa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f06f 0201 	mvn.w	r2, #1
 80066f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f7fb ff5b 	bl	80025b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006700:	2b00      	cmp	r3, #0
 8006702:	d104      	bne.n	800670e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00c      	beq.n	8006728 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006714:	2b00      	cmp	r3, #0
 8006716:	d007      	beq.n	8006728 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 fe68 	bl	80073f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00c      	beq.n	800674c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006738:	2b00      	cmp	r3, #0
 800673a:	d007      	beq.n	800674c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fe60 	bl	800740c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00c      	beq.n	8006770 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800675c:	2b00      	cmp	r3, #0
 800675e:	d007      	beq.n	8006770 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 f98a 	bl	8006a84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	f003 0320 	and.w	r3, r3, #32
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00c      	beq.n	8006794 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f003 0320 	and.w	r3, r3, #32
 8006780:	2b00      	cmp	r3, #0
 8006782:	d007      	beq.n	8006794 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f06f 0220 	mvn.w	r2, #32
 800678c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fe28 	bl	80073e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006794:	bf00      	nop
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067a8:	2300      	movs	r3, #0
 80067aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d101      	bne.n	80067ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80067b6:	2302      	movs	r3, #2
 80067b8:	e0ff      	b.n	80069ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2b14      	cmp	r3, #20
 80067c6:	f200 80f0 	bhi.w	80069aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80067ca:	a201      	add	r2, pc, #4	@ (adr r2, 80067d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80067cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d0:	08006825 	.word	0x08006825
 80067d4:	080069ab 	.word	0x080069ab
 80067d8:	080069ab 	.word	0x080069ab
 80067dc:	080069ab 	.word	0x080069ab
 80067e0:	08006865 	.word	0x08006865
 80067e4:	080069ab 	.word	0x080069ab
 80067e8:	080069ab 	.word	0x080069ab
 80067ec:	080069ab 	.word	0x080069ab
 80067f0:	080068a7 	.word	0x080068a7
 80067f4:	080069ab 	.word	0x080069ab
 80067f8:	080069ab 	.word	0x080069ab
 80067fc:	080069ab 	.word	0x080069ab
 8006800:	080068e7 	.word	0x080068e7
 8006804:	080069ab 	.word	0x080069ab
 8006808:	080069ab 	.word	0x080069ab
 800680c:	080069ab 	.word	0x080069ab
 8006810:	08006929 	.word	0x08006929
 8006814:	080069ab 	.word	0x080069ab
 8006818:	080069ab 	.word	0x080069ab
 800681c:	080069ab 	.word	0x080069ab
 8006820:	08006969 	.word	0x08006969
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68b9      	ldr	r1, [r7, #8]
 800682a:	4618      	mov	r0, r3
 800682c:	f000 f9da 	bl	8006be4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	699a      	ldr	r2, [r3, #24]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f042 0208 	orr.w	r2, r2, #8
 800683e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	699a      	ldr	r2, [r3, #24]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f022 0204 	bic.w	r2, r2, #4
 800684e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6999      	ldr	r1, [r3, #24]
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	691a      	ldr	r2, [r3, #16]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	430a      	orrs	r2, r1
 8006860:	619a      	str	r2, [r3, #24]
      break;
 8006862:	e0a5      	b.n	80069b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68b9      	ldr	r1, [r7, #8]
 800686a:	4618      	mov	r0, r3
 800686c:	f000 fa2c 	bl	8006cc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	699a      	ldr	r2, [r3, #24]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800687e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	699a      	ldr	r2, [r3, #24]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800688e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6999      	ldr	r1, [r3, #24]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	021a      	lsls	r2, r3, #8
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	430a      	orrs	r2, r1
 80068a2:	619a      	str	r2, [r3, #24]
      break;
 80068a4:	e084      	b.n	80069b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68b9      	ldr	r1, [r7, #8]
 80068ac:	4618      	mov	r0, r3
 80068ae:	f000 fa83 	bl	8006db8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	69da      	ldr	r2, [r3, #28]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f042 0208 	orr.w	r2, r2, #8
 80068c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	69da      	ldr	r2, [r3, #28]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f022 0204 	bic.w	r2, r2, #4
 80068d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	69d9      	ldr	r1, [r3, #28]
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	691a      	ldr	r2, [r3, #16]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	430a      	orrs	r2, r1
 80068e2:	61da      	str	r2, [r3, #28]
      break;
 80068e4:	e064      	b.n	80069b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68b9      	ldr	r1, [r7, #8]
 80068ec:	4618      	mov	r0, r3
 80068ee:	f000 fad9 	bl	8006ea4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	69da      	ldr	r2, [r3, #28]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006900:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	69da      	ldr	r2, [r3, #28]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006910:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	69d9      	ldr	r1, [r3, #28]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	021a      	lsls	r2, r3, #8
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	430a      	orrs	r2, r1
 8006924:	61da      	str	r2, [r3, #28]
      break;
 8006926:	e043      	b.n	80069b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68b9      	ldr	r1, [r7, #8]
 800692e:	4618      	mov	r0, r3
 8006930:	f000 fb10 	bl	8006f54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f042 0208 	orr.w	r2, r2, #8
 8006942:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f022 0204 	bic.w	r2, r2, #4
 8006952:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	691a      	ldr	r2, [r3, #16]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	430a      	orrs	r2, r1
 8006964:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006966:	e023      	b.n	80069b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68b9      	ldr	r1, [r7, #8]
 800696e:	4618      	mov	r0, r3
 8006970:	f000 fb42 	bl	8006ff8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006982:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006992:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	021a      	lsls	r2, r3, #8
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	430a      	orrs	r2, r1
 80069a6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80069a8:	e002      	b.n	80069b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	75fb      	strb	r3, [r7, #23]
      break;
 80069ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80069b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3718      	adds	r7, #24
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop

080069c4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d101      	bne.n	80069dc <HAL_TIM_SlaveConfigSynchro+0x18>
 80069d8:	2302      	movs	r3, #2
 80069da:	e031      	b.n	8006a40 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2202      	movs	r2, #2
 80069e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80069ec:	6839      	ldr	r1, [r7, #0]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fb56 	bl	80070a0 <TIM_SlaveTimer_SetConfig>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d009      	beq.n	8006a0e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e018      	b.n	8006a40 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68da      	ldr	r2, [r3, #12]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a1c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68da      	ldr	r2, [r3, #12]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006a2c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2201      	movs	r2, #1
 8006a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a43      	ldr	r2, [pc, #268]	@ (8006bb8 <TIM_Base_SetConfig+0x120>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d013      	beq.n	8006ad8 <TIM_Base_SetConfig+0x40>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ab6:	d00f      	beq.n	8006ad8 <TIM_Base_SetConfig+0x40>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a40      	ldr	r2, [pc, #256]	@ (8006bbc <TIM_Base_SetConfig+0x124>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d00b      	beq.n	8006ad8 <TIM_Base_SetConfig+0x40>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a3f      	ldr	r2, [pc, #252]	@ (8006bc0 <TIM_Base_SetConfig+0x128>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d007      	beq.n	8006ad8 <TIM_Base_SetConfig+0x40>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a3e      	ldr	r2, [pc, #248]	@ (8006bc4 <TIM_Base_SetConfig+0x12c>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d003      	beq.n	8006ad8 <TIM_Base_SetConfig+0x40>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a3d      	ldr	r2, [pc, #244]	@ (8006bc8 <TIM_Base_SetConfig+0x130>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d108      	bne.n	8006aea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ade:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a32      	ldr	r2, [pc, #200]	@ (8006bb8 <TIM_Base_SetConfig+0x120>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d02b      	beq.n	8006b4a <TIM_Base_SetConfig+0xb2>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006af8:	d027      	beq.n	8006b4a <TIM_Base_SetConfig+0xb2>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a2f      	ldr	r2, [pc, #188]	@ (8006bbc <TIM_Base_SetConfig+0x124>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d023      	beq.n	8006b4a <TIM_Base_SetConfig+0xb2>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a2e      	ldr	r2, [pc, #184]	@ (8006bc0 <TIM_Base_SetConfig+0x128>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d01f      	beq.n	8006b4a <TIM_Base_SetConfig+0xb2>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a2d      	ldr	r2, [pc, #180]	@ (8006bc4 <TIM_Base_SetConfig+0x12c>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d01b      	beq.n	8006b4a <TIM_Base_SetConfig+0xb2>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a2c      	ldr	r2, [pc, #176]	@ (8006bc8 <TIM_Base_SetConfig+0x130>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d017      	beq.n	8006b4a <TIM_Base_SetConfig+0xb2>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a2b      	ldr	r2, [pc, #172]	@ (8006bcc <TIM_Base_SetConfig+0x134>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d013      	beq.n	8006b4a <TIM_Base_SetConfig+0xb2>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a2a      	ldr	r2, [pc, #168]	@ (8006bd0 <TIM_Base_SetConfig+0x138>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d00f      	beq.n	8006b4a <TIM_Base_SetConfig+0xb2>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a29      	ldr	r2, [pc, #164]	@ (8006bd4 <TIM_Base_SetConfig+0x13c>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d00b      	beq.n	8006b4a <TIM_Base_SetConfig+0xb2>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a28      	ldr	r2, [pc, #160]	@ (8006bd8 <TIM_Base_SetConfig+0x140>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d007      	beq.n	8006b4a <TIM_Base_SetConfig+0xb2>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a27      	ldr	r2, [pc, #156]	@ (8006bdc <TIM_Base_SetConfig+0x144>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d003      	beq.n	8006b4a <TIM_Base_SetConfig+0xb2>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a26      	ldr	r2, [pc, #152]	@ (8006be0 <TIM_Base_SetConfig+0x148>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d108      	bne.n	8006b5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	689a      	ldr	r2, [r3, #8]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a0e      	ldr	r2, [pc, #56]	@ (8006bb8 <TIM_Base_SetConfig+0x120>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d003      	beq.n	8006b8a <TIM_Base_SetConfig+0xf2>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a10      	ldr	r2, [pc, #64]	@ (8006bc8 <TIM_Base_SetConfig+0x130>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d103      	bne.n	8006b92 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	691a      	ldr	r2, [r3, #16]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f043 0204 	orr.w	r2, r3, #4
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	601a      	str	r2, [r3, #0]
}
 8006baa:	bf00      	nop
 8006bac:	3714      	adds	r7, #20
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	40010000 	.word	0x40010000
 8006bbc:	40000400 	.word	0x40000400
 8006bc0:	40000800 	.word	0x40000800
 8006bc4:	40000c00 	.word	0x40000c00
 8006bc8:	40010400 	.word	0x40010400
 8006bcc:	40014000 	.word	0x40014000
 8006bd0:	40014400 	.word	0x40014400
 8006bd4:	40014800 	.word	0x40014800
 8006bd8:	40001800 	.word	0x40001800
 8006bdc:	40001c00 	.word	0x40001c00
 8006be0:	40002000 	.word	0x40002000

08006be4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b087      	sub	sp, #28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a1b      	ldr	r3, [r3, #32]
 8006bf8:	f023 0201 	bic.w	r2, r3, #1
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	699b      	ldr	r3, [r3, #24]
 8006c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	4b2b      	ldr	r3, [pc, #172]	@ (8006cbc <TIM_OC1_SetConfig+0xd8>)
 8006c10:	4013      	ands	r3, r2
 8006c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f023 0303 	bic.w	r3, r3, #3
 8006c1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f023 0302 	bic.w	r3, r3, #2
 8006c2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a21      	ldr	r2, [pc, #132]	@ (8006cc0 <TIM_OC1_SetConfig+0xdc>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d003      	beq.n	8006c48 <TIM_OC1_SetConfig+0x64>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a20      	ldr	r2, [pc, #128]	@ (8006cc4 <TIM_OC1_SetConfig+0xe0>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d10c      	bne.n	8006c62 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f023 0308 	bic.w	r3, r3, #8
 8006c4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	f023 0304 	bic.w	r3, r3, #4
 8006c60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a16      	ldr	r2, [pc, #88]	@ (8006cc0 <TIM_OC1_SetConfig+0xdc>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d003      	beq.n	8006c72 <TIM_OC1_SetConfig+0x8e>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a15      	ldr	r2, [pc, #84]	@ (8006cc4 <TIM_OC1_SetConfig+0xe0>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d111      	bne.n	8006c96 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	695b      	ldr	r3, [r3, #20]
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	693a      	ldr	r2, [r7, #16]
 8006c9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	685a      	ldr	r2, [r3, #4]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	697a      	ldr	r2, [r7, #20]
 8006cae:	621a      	str	r2, [r3, #32]
}
 8006cb0:	bf00      	nop
 8006cb2:	371c      	adds	r7, #28
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr
 8006cbc:	fffeff8f 	.word	0xfffeff8f
 8006cc0:	40010000 	.word	0x40010000
 8006cc4:	40010400 	.word	0x40010400

08006cc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b087      	sub	sp, #28
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a1b      	ldr	r3, [r3, #32]
 8006cdc:	f023 0210 	bic.w	r2, r3, #16
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	4b2e      	ldr	r3, [pc, #184]	@ (8006dac <TIM_OC2_SetConfig+0xe4>)
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	021b      	lsls	r3, r3, #8
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	f023 0320 	bic.w	r3, r3, #32
 8006d12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	011b      	lsls	r3, r3, #4
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a23      	ldr	r2, [pc, #140]	@ (8006db0 <TIM_OC2_SetConfig+0xe8>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d003      	beq.n	8006d30 <TIM_OC2_SetConfig+0x68>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a22      	ldr	r2, [pc, #136]	@ (8006db4 <TIM_OC2_SetConfig+0xec>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d10d      	bne.n	8006d4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	011b      	lsls	r3, r3, #4
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a18      	ldr	r2, [pc, #96]	@ (8006db0 <TIM_OC2_SetConfig+0xe8>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d003      	beq.n	8006d5c <TIM_OC2_SetConfig+0x94>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a17      	ldr	r2, [pc, #92]	@ (8006db4 <TIM_OC2_SetConfig+0xec>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d113      	bne.n	8006d84 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	695b      	ldr	r3, [r3, #20]
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	693a      	ldr	r2, [r7, #16]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	693a      	ldr	r2, [r7, #16]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	693a      	ldr	r2, [r7, #16]
 8006d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	685a      	ldr	r2, [r3, #4]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	621a      	str	r2, [r3, #32]
}
 8006d9e:	bf00      	nop
 8006da0:	371c      	adds	r7, #28
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	feff8fff 	.word	0xfeff8fff
 8006db0:	40010000 	.word	0x40010000
 8006db4:	40010400 	.word	0x40010400

08006db8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b087      	sub	sp, #28
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a1b      	ldr	r3, [r3, #32]
 8006dc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a1b      	ldr	r3, [r3, #32]
 8006dcc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	69db      	ldr	r3, [r3, #28]
 8006dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	4b2d      	ldr	r3, [pc, #180]	@ (8006e98 <TIM_OC3_SetConfig+0xe0>)
 8006de4:	4013      	ands	r3, r2
 8006de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f023 0303 	bic.w	r3, r3, #3
 8006dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	021b      	lsls	r3, r3, #8
 8006e08:	697a      	ldr	r2, [r7, #20]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a22      	ldr	r2, [pc, #136]	@ (8006e9c <TIM_OC3_SetConfig+0xe4>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d003      	beq.n	8006e1e <TIM_OC3_SetConfig+0x66>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a21      	ldr	r2, [pc, #132]	@ (8006ea0 <TIM_OC3_SetConfig+0xe8>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d10d      	bne.n	8006e3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	021b      	lsls	r3, r3, #8
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a17      	ldr	r2, [pc, #92]	@ (8006e9c <TIM_OC3_SetConfig+0xe4>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d003      	beq.n	8006e4a <TIM_OC3_SetConfig+0x92>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a16      	ldr	r2, [pc, #88]	@ (8006ea0 <TIM_OC3_SetConfig+0xe8>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d113      	bne.n	8006e72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	011b      	lsls	r3, r3, #4
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	699b      	ldr	r3, [r3, #24]
 8006e6a:	011b      	lsls	r3, r3, #4
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	685a      	ldr	r2, [r3, #4]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	697a      	ldr	r2, [r7, #20]
 8006e8a:	621a      	str	r2, [r3, #32]
}
 8006e8c:	bf00      	nop
 8006e8e:	371c      	adds	r7, #28
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr
 8006e98:	fffeff8f 	.word	0xfffeff8f
 8006e9c:	40010000 	.word	0x40010000
 8006ea0:	40010400 	.word	0x40010400

08006ea4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b087      	sub	sp, #28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
 8006eb2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a1b      	ldr	r3, [r3, #32]
 8006eb8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	69db      	ldr	r3, [r3, #28]
 8006eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	4b1e      	ldr	r3, [pc, #120]	@ (8006f48 <TIM_OC4_SetConfig+0xa4>)
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006eda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	021b      	lsls	r3, r3, #8
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006eee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	031b      	lsls	r3, r3, #12
 8006ef6:	693a      	ldr	r2, [r7, #16]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a13      	ldr	r2, [pc, #76]	@ (8006f4c <TIM_OC4_SetConfig+0xa8>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d003      	beq.n	8006f0c <TIM_OC4_SetConfig+0x68>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a12      	ldr	r2, [pc, #72]	@ (8006f50 <TIM_OC4_SetConfig+0xac>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d109      	bne.n	8006f20 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	695b      	ldr	r3, [r3, #20]
 8006f18:	019b      	lsls	r3, r3, #6
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	697a      	ldr	r2, [r7, #20]
 8006f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	685a      	ldr	r2, [r3, #4]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	621a      	str	r2, [r3, #32]
}
 8006f3a:	bf00      	nop
 8006f3c:	371c      	adds	r7, #28
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	feff8fff 	.word	0xfeff8fff
 8006f4c:	40010000 	.word	0x40010000
 8006f50:	40010400 	.word	0x40010400

08006f54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b087      	sub	sp, #28
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6a1b      	ldr	r3, [r3, #32]
 8006f68:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8006fec <TIM_OC5_SetConfig+0x98>)
 8006f80:	4013      	ands	r3, r2
 8006f82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006f94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	041b      	lsls	r3, r3, #16
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a12      	ldr	r2, [pc, #72]	@ (8006ff0 <TIM_OC5_SetConfig+0x9c>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d003      	beq.n	8006fb2 <TIM_OC5_SetConfig+0x5e>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a11      	ldr	r2, [pc, #68]	@ (8006ff4 <TIM_OC5_SetConfig+0xa0>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d109      	bne.n	8006fc6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	021b      	lsls	r3, r3, #8
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	697a      	ldr	r2, [r7, #20]
 8006fca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	685a      	ldr	r2, [r3, #4]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	693a      	ldr	r2, [r7, #16]
 8006fde:	621a      	str	r2, [r3, #32]
}
 8006fe0:	bf00      	nop
 8006fe2:	371c      	adds	r7, #28
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr
 8006fec:	fffeff8f 	.word	0xfffeff8f
 8006ff0:	40010000 	.word	0x40010000
 8006ff4:	40010400 	.word	0x40010400

08006ff8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a1b      	ldr	r3, [r3, #32]
 800700c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800701e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	4b1c      	ldr	r3, [pc, #112]	@ (8007094 <TIM_OC6_SetConfig+0x9c>)
 8007024:	4013      	ands	r3, r2
 8007026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	021b      	lsls	r3, r3, #8
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	4313      	orrs	r3, r2
 8007032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800703a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	051b      	lsls	r3, r3, #20
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	4313      	orrs	r3, r2
 8007046:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a13      	ldr	r2, [pc, #76]	@ (8007098 <TIM_OC6_SetConfig+0xa0>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d003      	beq.n	8007058 <TIM_OC6_SetConfig+0x60>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a12      	ldr	r2, [pc, #72]	@ (800709c <TIM_OC6_SetConfig+0xa4>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d109      	bne.n	800706c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800705e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	695b      	ldr	r3, [r3, #20]
 8007064:	029b      	lsls	r3, r3, #10
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	4313      	orrs	r3, r2
 800706a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	621a      	str	r2, [r3, #32]
}
 8007086:	bf00      	nop
 8007088:	371c      	adds	r7, #28
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	feff8fff 	.word	0xfeff8fff
 8007098:	40010000 	.word	0x40010000
 800709c:	40010400 	.word	0x40010400

080070a0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b086      	sub	sp, #24
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070aa:	2300      	movs	r3, #0
 80070ac:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070bc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	4b3e      	ldr	r3, [pc, #248]	@ (80071c4 <TIM_SlaveTimer_SetConfig+0x124>)
 80070cc:	4013      	ands	r3, r2
 80070ce:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	2b70      	cmp	r3, #112	@ 0x70
 80070e8:	d01a      	beq.n	8007120 <TIM_SlaveTimer_SetConfig+0x80>
 80070ea:	2b70      	cmp	r3, #112	@ 0x70
 80070ec:	d860      	bhi.n	80071b0 <TIM_SlaveTimer_SetConfig+0x110>
 80070ee:	2b60      	cmp	r3, #96	@ 0x60
 80070f0:	d054      	beq.n	800719c <TIM_SlaveTimer_SetConfig+0xfc>
 80070f2:	2b60      	cmp	r3, #96	@ 0x60
 80070f4:	d85c      	bhi.n	80071b0 <TIM_SlaveTimer_SetConfig+0x110>
 80070f6:	2b50      	cmp	r3, #80	@ 0x50
 80070f8:	d046      	beq.n	8007188 <TIM_SlaveTimer_SetConfig+0xe8>
 80070fa:	2b50      	cmp	r3, #80	@ 0x50
 80070fc:	d858      	bhi.n	80071b0 <TIM_SlaveTimer_SetConfig+0x110>
 80070fe:	2b40      	cmp	r3, #64	@ 0x40
 8007100:	d019      	beq.n	8007136 <TIM_SlaveTimer_SetConfig+0x96>
 8007102:	2b40      	cmp	r3, #64	@ 0x40
 8007104:	d854      	bhi.n	80071b0 <TIM_SlaveTimer_SetConfig+0x110>
 8007106:	2b30      	cmp	r3, #48	@ 0x30
 8007108:	d055      	beq.n	80071b6 <TIM_SlaveTimer_SetConfig+0x116>
 800710a:	2b30      	cmp	r3, #48	@ 0x30
 800710c:	d850      	bhi.n	80071b0 <TIM_SlaveTimer_SetConfig+0x110>
 800710e:	2b20      	cmp	r3, #32
 8007110:	d051      	beq.n	80071b6 <TIM_SlaveTimer_SetConfig+0x116>
 8007112:	2b20      	cmp	r3, #32
 8007114:	d84c      	bhi.n	80071b0 <TIM_SlaveTimer_SetConfig+0x110>
 8007116:	2b00      	cmp	r3, #0
 8007118:	d04d      	beq.n	80071b6 <TIM_SlaveTimer_SetConfig+0x116>
 800711a:	2b10      	cmp	r3, #16
 800711c:	d04b      	beq.n	80071b6 <TIM_SlaveTimer_SetConfig+0x116>
 800711e:	e047      	b.n	80071b0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8007130:	f000 f8a9 	bl	8007286 <TIM_ETR_SetConfig>
      break;
 8007134:	e040      	b.n	80071b8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2b05      	cmp	r3, #5
 800713c:	d101      	bne.n	8007142 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e03b      	b.n	80071ba <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	6a1b      	ldr	r3, [r3, #32]
 8007148:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	6a1a      	ldr	r2, [r3, #32]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f022 0201 	bic.w	r2, r2, #1
 8007158:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	699b      	ldr	r3, [r3, #24]
 8007160:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007168:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	011b      	lsls	r3, r3, #4
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	4313      	orrs	r3, r2
 8007174:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	621a      	str	r2, [r3, #32]
      break;
 8007186:	e017      	b.n	80071b8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007194:	461a      	mov	r2, r3
 8007196:	f000 f817 	bl	80071c8 <TIM_TI1_ConfigInputStage>
      break;
 800719a:	e00d      	b.n	80071b8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071a8:	461a      	mov	r2, r3
 80071aa:	f000 f83c 	bl	8007226 <TIM_TI2_ConfigInputStage>
      break;
 80071ae:	e003      	b.n	80071b8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	75fb      	strb	r3, [r7, #23]
      break;
 80071b4:	e000      	b.n	80071b8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80071b6:	bf00      	nop
  }

  return status;
 80071b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3718      	adds	r7, #24
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	fffefff8 	.word	0xfffefff8

080071c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b087      	sub	sp, #28
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6a1b      	ldr	r3, [r3, #32]
 80071d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	f023 0201 	bic.w	r2, r3, #1
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80071f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	011b      	lsls	r3, r3, #4
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f023 030a 	bic.w	r3, r3, #10
 8007204:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	4313      	orrs	r3, r2
 800720c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	621a      	str	r2, [r3, #32]
}
 800721a:	bf00      	nop
 800721c:	371c      	adds	r7, #28
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr

08007226 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007226:	b480      	push	{r7}
 8007228:	b087      	sub	sp, #28
 800722a:	af00      	add	r7, sp, #0
 800722c:	60f8      	str	r0, [r7, #12]
 800722e:	60b9      	str	r1, [r7, #8]
 8007230:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6a1b      	ldr	r3, [r3, #32]
 800723c:	f023 0210 	bic.w	r2, r3, #16
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007250:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	031b      	lsls	r3, r3, #12
 8007256:	693a      	ldr	r2, [r7, #16]
 8007258:	4313      	orrs	r3, r2
 800725a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007262:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	011b      	lsls	r3, r3, #4
 8007268:	697a      	ldr	r2, [r7, #20]
 800726a:	4313      	orrs	r3, r2
 800726c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	621a      	str	r2, [r3, #32]
}
 800727a:	bf00      	nop
 800727c:	371c      	adds	r7, #28
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr

08007286 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007286:	b480      	push	{r7}
 8007288:	b087      	sub	sp, #28
 800728a:	af00      	add	r7, sp, #0
 800728c:	60f8      	str	r0, [r7, #12]
 800728e:	60b9      	str	r1, [r7, #8]
 8007290:	607a      	str	r2, [r7, #4]
 8007292:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80072a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	021a      	lsls	r2, r3, #8
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	431a      	orrs	r2, r3
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	609a      	str	r2, [r3, #8]
}
 80072ba:	bf00      	nop
 80072bc:	371c      	adds	r7, #28
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
	...

080072c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d101      	bne.n	80072e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072dc:	2302      	movs	r3, #2
 80072de:	e06d      	b.n	80073bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2202      	movs	r2, #2
 80072ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a30      	ldr	r2, [pc, #192]	@ (80073c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d004      	beq.n	8007314 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a2f      	ldr	r2, [pc, #188]	@ (80073cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d108      	bne.n	8007326 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800731a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	4313      	orrs	r3, r2
 8007324:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800732c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68fa      	ldr	r2, [r7, #12]
 8007334:	4313      	orrs	r3, r2
 8007336:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a20      	ldr	r2, [pc, #128]	@ (80073c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d022      	beq.n	8007390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007352:	d01d      	beq.n	8007390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a1d      	ldr	r2, [pc, #116]	@ (80073d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d018      	beq.n	8007390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a1c      	ldr	r2, [pc, #112]	@ (80073d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d013      	beq.n	8007390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a1a      	ldr	r2, [pc, #104]	@ (80073d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d00e      	beq.n	8007390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a15      	ldr	r2, [pc, #84]	@ (80073cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d009      	beq.n	8007390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a16      	ldr	r2, [pc, #88]	@ (80073dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d004      	beq.n	8007390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a15      	ldr	r2, [pc, #84]	@ (80073e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d10c      	bne.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007396:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	4313      	orrs	r3, r2
 80073a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68ba      	ldr	r2, [r7, #8]
 80073a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2201      	movs	r2, #1
 80073ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3714      	adds	r7, #20
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr
 80073c8:	40010000 	.word	0x40010000
 80073cc:	40010400 	.word	0x40010400
 80073d0:	40000400 	.word	0x40000400
 80073d4:	40000800 	.word	0x40000800
 80073d8:	40000c00 	.word	0x40000c00
 80073dc:	40014000 	.word	0x40014000
 80073e0:	40001800 	.word	0x40001800

080073e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073ec:	bf00      	nop
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007400:	bf00      	nop
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007414:	bf00      	nop
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e040      	b.n	80074b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007436:	2b00      	cmp	r3, #0
 8007438:	d106      	bne.n	8007448 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7fb fbce 	bl	8002be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2224      	movs	r2, #36	@ 0x24
 800744c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f022 0201 	bic.w	r2, r2, #1
 800745c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007462:	2b00      	cmp	r3, #0
 8007464:	d002      	beq.n	800746c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 ff28 	bl	80082bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 fcc1 	bl	8007df4 <UART_SetConfig>
 8007472:	4603      	mov	r3, r0
 8007474:	2b01      	cmp	r3, #1
 8007476:	d101      	bne.n	800747c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	e01b      	b.n	80074b4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	685a      	ldr	r2, [r3, #4]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800748a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	689a      	ldr	r2, [r3, #8]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800749a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f042 0201 	orr.w	r2, r2, #1
 80074aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 ffa7 	bl	8008400 <UART_CheckIdleState>
 80074b2:	4603      	mov	r3, r0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3708      	adds	r7, #8
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b08a      	sub	sp, #40	@ 0x28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	4613      	mov	r3, r2
 80074c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074ce:	2b20      	cmp	r3, #32
 80074d0:	d165      	bne.n	800759e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d002      	beq.n	80074de <HAL_UART_Transmit_DMA+0x22>
 80074d8:	88fb      	ldrh	r3, [r7, #6]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d101      	bne.n	80074e2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e05e      	b.n	80075a0 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	88fa      	ldrh	r2, [r7, #6]
 80074ec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	88fa      	ldrh	r2, [r7, #6]
 80074f4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2221      	movs	r2, #33	@ 0x21
 8007504:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800750a:	2b00      	cmp	r3, #0
 800750c:	d027      	beq.n	800755e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007512:	4a25      	ldr	r2, [pc, #148]	@ (80075a8 <HAL_UART_Transmit_DMA+0xec>)
 8007514:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800751a:	4a24      	ldr	r2, [pc, #144]	@ (80075ac <HAL_UART_Transmit_DMA+0xf0>)
 800751c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007522:	4a23      	ldr	r2, [pc, #140]	@ (80075b0 <HAL_UART_Transmit_DMA+0xf4>)
 8007524:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800752a:	2200      	movs	r2, #0
 800752c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007536:	4619      	mov	r1, r3
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	3328      	adds	r3, #40	@ 0x28
 800753e:	461a      	mov	r2, r3
 8007540:	88fb      	ldrh	r3, [r7, #6]
 8007542:	f7fc f84b 	bl	80035dc <HAL_DMA_Start_IT>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d008      	beq.n	800755e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2210      	movs	r2, #16
 8007550:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2220      	movs	r2, #32
 8007558:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e020      	b.n	80075a0 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2240      	movs	r2, #64	@ 0x40
 8007564:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	3308      	adds	r3, #8
 800756c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	e853 3f00 	ldrex	r3, [r3]
 8007574:	613b      	str	r3, [r7, #16]
   return(result);
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800757c:	627b      	str	r3, [r7, #36]	@ 0x24
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	3308      	adds	r3, #8
 8007584:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007586:	623a      	str	r2, [r7, #32]
 8007588:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758a:	69f9      	ldr	r1, [r7, #28]
 800758c:	6a3a      	ldr	r2, [r7, #32]
 800758e:	e841 2300 	strex	r3, r2, [r1]
 8007592:	61bb      	str	r3, [r7, #24]
   return(result);
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1e5      	bne.n	8007566 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800759a:	2300      	movs	r3, #0
 800759c:	e000      	b.n	80075a0 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800759e:	2302      	movs	r3, #2
  }
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3728      	adds	r7, #40	@ 0x28
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	08008881 	.word	0x08008881
 80075ac:	08008917 	.word	0x08008917
 80075b0:	08008b03 	.word	0x08008b03

080075b4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b08a      	sub	sp, #40	@ 0x28
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	4613      	mov	r3, r2
 80075c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075c8:	2b20      	cmp	r3, #32
 80075ca:	d132      	bne.n	8007632 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d002      	beq.n	80075d8 <HAL_UART_Receive_DMA+0x24>
 80075d2:	88fb      	ldrh	r3, [r7, #6]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d101      	bne.n	80075dc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e02b      	b.n	8007634 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d018      	beq.n	8007622 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	e853 3f00 	ldrex	r3, [r3]
 80075fc:	613b      	str	r3, [r7, #16]
   return(result);
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007604:	627b      	str	r3, [r7, #36]	@ 0x24
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	461a      	mov	r2, r3
 800760c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760e:	623b      	str	r3, [r7, #32]
 8007610:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007612:	69f9      	ldr	r1, [r7, #28]
 8007614:	6a3a      	ldr	r2, [r7, #32]
 8007616:	e841 2300 	strex	r3, r2, [r1]
 800761a:	61bb      	str	r3, [r7, #24]
   return(result);
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1e6      	bne.n	80075f0 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007622:	88fb      	ldrh	r3, [r7, #6]
 8007624:	461a      	mov	r2, r3
 8007626:	68b9      	ldr	r1, [r7, #8]
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f000 ffff 	bl	800862c <UART_Start_Receive_DMA>
 800762e:	4603      	mov	r3, r0
 8007630:	e000      	b.n	8007634 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007632:	2302      	movs	r3, #2
  }
}
 8007634:	4618      	mov	r0, r3
 8007636:	3728      	adds	r7, #40	@ 0x28
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b090      	sub	sp, #64	@ 0x40
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007648:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007650:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800765c:	2b80      	cmp	r3, #128	@ 0x80
 800765e:	d139      	bne.n	80076d4 <HAL_UART_DMAStop+0x98>
 8007660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007662:	2b21      	cmp	r3, #33	@ 0x21
 8007664:	d136      	bne.n	80076d4 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	3308      	adds	r3, #8
 800766c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	e853 3f00 	ldrex	r3, [r3]
 8007674:	61fb      	str	r3, [r7, #28]
   return(result);
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800767c:	637b      	str	r3, [r7, #52]	@ 0x34
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	3308      	adds	r3, #8
 8007684:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007686:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007688:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800768c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800768e:	e841 2300 	strex	r3, r2, [r1]
 8007692:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007696:	2b00      	cmp	r3, #0
 8007698:	d1e5      	bne.n	8007666 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d015      	beq.n	80076ce <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7fb fff8 	bl	800369c <HAL_DMA_Abort>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00d      	beq.n	80076ce <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7fc fa0c 	bl	8003ad4 <HAL_DMA_GetError>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b20      	cmp	r3, #32
 80076c0:	d105      	bne.n	80076ce <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2210      	movs	r2, #16
 80076c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80076ca:	2303      	movs	r3, #3
 80076cc:	e044      	b.n	8007758 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f001 f84c 	bl	800876c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076de:	2b40      	cmp	r3, #64	@ 0x40
 80076e0:	d139      	bne.n	8007756 <HAL_UART_DMAStop+0x11a>
 80076e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076e4:	2b22      	cmp	r3, #34	@ 0x22
 80076e6:	d136      	bne.n	8007756 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	3308      	adds	r3, #8
 80076ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	e853 3f00 	ldrex	r3, [r3]
 80076f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	3308      	adds	r3, #8
 8007706:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007708:	61ba      	str	r2, [r7, #24]
 800770a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770c:	6979      	ldr	r1, [r7, #20]
 800770e:	69ba      	ldr	r2, [r7, #24]
 8007710:	e841 2300 	strex	r3, r2, [r1]
 8007714:	613b      	str	r3, [r7, #16]
   return(result);
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1e5      	bne.n	80076e8 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007720:	2b00      	cmp	r3, #0
 8007722:	d015      	beq.n	8007750 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007728:	4618      	mov	r0, r3
 800772a:	f7fb ffb7 	bl	800369c <HAL_DMA_Abort>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00d      	beq.n	8007750 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007738:	4618      	mov	r0, r3
 800773a:	f7fc f9cb 	bl	8003ad4 <HAL_DMA_GetError>
 800773e:	4603      	mov	r3, r0
 8007740:	2b20      	cmp	r3, #32
 8007742:	d105      	bne.n	8007750 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2210      	movs	r2, #16
 8007748:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800774c:	2303      	movs	r3, #3
 800774e:	e003      	b.n	8007758 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f001 f831 	bl	80087b8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	3740      	adds	r7, #64	@ 0x40
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b0ba      	sub	sp, #232	@ 0xe8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	69db      	ldr	r3, [r3, #28]
 800776e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007786:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800778a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800778e:	4013      	ands	r3, r2
 8007790:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007794:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007798:	2b00      	cmp	r3, #0
 800779a:	d115      	bne.n	80077c8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800779c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077a0:	f003 0320 	and.w	r3, r3, #32
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00f      	beq.n	80077c8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80077a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077ac:	f003 0320 	and.w	r3, r3, #32
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d009      	beq.n	80077c8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f000 82c6 	beq.w	8007d4a <HAL_UART_IRQHandler+0x5ea>
      {
        huart->RxISR(huart);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	4798      	blx	r3
      }
      return;
 80077c6:	e2c0      	b.n	8007d4a <HAL_UART_IRQHandler+0x5ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80077c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 8117 	beq.w	8007a00 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80077d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077d6:	f003 0301 	and.w	r3, r3, #1
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d106      	bne.n	80077ec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80077de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80077e2:	4b85      	ldr	r3, [pc, #532]	@ (80079f8 <HAL_UART_IRQHandler+0x298>)
 80077e4:	4013      	ands	r3, r2
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	f000 810a 	beq.w	8007a00 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80077ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077f0:	f003 0301 	and.w	r3, r3, #1
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d011      	beq.n	800781c <HAL_UART_IRQHandler+0xbc>
 80077f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00b      	beq.n	800781c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2201      	movs	r2, #1
 800780a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007812:	f043 0201 	orr.w	r2, r3, #1
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800781c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007820:	f003 0302 	and.w	r3, r3, #2
 8007824:	2b00      	cmp	r3, #0
 8007826:	d011      	beq.n	800784c <HAL_UART_IRQHandler+0xec>
 8007828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800782c:	f003 0301 	and.w	r3, r3, #1
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00b      	beq.n	800784c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2202      	movs	r2, #2
 800783a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007842:	f043 0204 	orr.w	r2, r3, #4
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800784c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007850:	f003 0304 	and.w	r3, r3, #4
 8007854:	2b00      	cmp	r3, #0
 8007856:	d011      	beq.n	800787c <HAL_UART_IRQHandler+0x11c>
 8007858:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800785c:	f003 0301 	and.w	r3, r3, #1
 8007860:	2b00      	cmp	r3, #0
 8007862:	d00b      	beq.n	800787c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2204      	movs	r2, #4
 800786a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007872:	f043 0202 	orr.w	r2, r3, #2
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800787c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007880:	f003 0308 	and.w	r3, r3, #8
 8007884:	2b00      	cmp	r3, #0
 8007886:	d017      	beq.n	80078b8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800788c:	f003 0320 	and.w	r3, r3, #32
 8007890:	2b00      	cmp	r3, #0
 8007892:	d105      	bne.n	80078a0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007898:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00b      	beq.n	80078b8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2208      	movs	r2, #8
 80078a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078ae:	f043 0208 	orr.w	r2, r3, #8
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80078b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d012      	beq.n	80078ea <HAL_UART_IRQHandler+0x18a>
 80078c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00c      	beq.n	80078ea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80078d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078e0:	f043 0220 	orr.w	r2, r3, #32
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f000 822c 	beq.w	8007d4e <HAL_UART_IRQHandler+0x5ee>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80078f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078fa:	f003 0320 	and.w	r3, r3, #32
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00d      	beq.n	800791e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007906:	f003 0320 	and.w	r3, r3, #32
 800790a:	2b00      	cmp	r3, #0
 800790c:	d007      	beq.n	800791e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007912:	2b00      	cmp	r3, #0
 8007914:	d003      	beq.n	800791e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007924:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007932:	2b40      	cmp	r3, #64	@ 0x40
 8007934:	d005      	beq.n	8007942 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007936:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800793a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800793e:	2b00      	cmp	r3, #0
 8007940:	d04f      	beq.n	80079e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 ff38 	bl	80087b8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007952:	2b40      	cmp	r3, #64	@ 0x40
 8007954:	d141      	bne.n	80079da <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	3308      	adds	r3, #8
 800795c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007960:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007964:	e853 3f00 	ldrex	r3, [r3]
 8007968:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800796c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007970:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007974:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	3308      	adds	r3, #8
 800797e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007982:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007986:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800798e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007992:	e841 2300 	strex	r3, r2, [r1]
 8007996:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800799a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1d9      	bne.n	8007956 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d013      	beq.n	80079d2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079ae:	4a13      	ldr	r2, [pc, #76]	@ (80079fc <HAL_UART_IRQHandler+0x29c>)
 80079b0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7fb fee0 	bl	800377c <HAL_DMA_Abort_IT>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d017      	beq.n	80079f2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80079cc:	4610      	mov	r0, r2
 80079ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079d0:	e00f      	b.n	80079f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f9ee 	bl	8007db4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079d8:	e00b      	b.n	80079f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 f9ea 	bl	8007db4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079e0:	e007      	b.n	80079f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f9e6 	bl	8007db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80079f0:	e1ad      	b.n	8007d4e <HAL_UART_IRQHandler+0x5ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079f2:	bf00      	nop
    return;
 80079f4:	e1ab      	b.n	8007d4e <HAL_UART_IRQHandler+0x5ee>
 80079f6:	bf00      	nop
 80079f8:	04000120 	.word	0x04000120
 80079fc:	08008b81 	.word	0x08008b81

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	f040 8166 	bne.w	8007cd6 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a0e:	f003 0310 	and.w	r3, r3, #16
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	f000 815f 	beq.w	8007cd6 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a1c:	f003 0310 	and.w	r3, r3, #16
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 8158 	beq.w	8007cd6 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	2210      	movs	r2, #16
 8007a2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a38:	2b40      	cmp	r3, #64	@ 0x40
 8007a3a:	f040 80d0 	bne.w	8007bde <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a4a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f000 80ab 	beq.w	8007baa <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007a5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	f080 80a3 	bcs.w	8007baa <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a6a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a72:	69db      	ldr	r3, [r3, #28]
 8007a74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a78:	f000 8086 	beq.w	8007b88 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007a88:	e853 3f00 	ldrex	r3, [r3]
 8007a8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007a90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007aa6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007aaa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007ab2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007ab6:	e841 2300 	strex	r3, r2, [r1]
 8007aba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007abe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1da      	bne.n	8007a7c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	3308      	adds	r3, #8
 8007acc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ace:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ad0:	e853 3f00 	ldrex	r3, [r3]
 8007ad4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007ad6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ad8:	f023 0301 	bic.w	r3, r3, #1
 8007adc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	3308      	adds	r3, #8
 8007ae6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007aea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007aee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007af2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007af6:	e841 2300 	strex	r3, r2, [r1]
 8007afa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007afc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1e1      	bne.n	8007ac6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	3308      	adds	r3, #8
 8007b08:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b0c:	e853 3f00 	ldrex	r3, [r3]
 8007b10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007b12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	3308      	adds	r3, #8
 8007b22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007b26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007b28:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007b2c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007b2e:	e841 2300 	strex	r3, r2, [r1]
 8007b32:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007b34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1e3      	bne.n	8007b02 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2220      	movs	r2, #32
 8007b3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b50:	e853 3f00 	ldrex	r3, [r3]
 8007b54:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007b56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b58:	f023 0310 	bic.w	r3, r3, #16
 8007b5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	461a      	mov	r2, r3
 8007b66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b6c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b72:	e841 2300 	strex	r3, r2, [r1]
 8007b76:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007b78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1e4      	bne.n	8007b48 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fb fd8a 	bl	800369c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2202      	movs	r2, #2
 8007b8c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 f910 	bl	8007dc8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007ba8:	e0d3      	b.n	8007d52 <HAL_UART_IRQHandler+0x5f2>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007bb0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	f040 80cc 	bne.w	8007d52 <HAL_UART_IRQHandler+0x5f2>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bbe:	69db      	ldr	r3, [r3, #28]
 8007bc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bc4:	f040 80c5 	bne.w	8007d52 <HAL_UART_IRQHandler+0x5f2>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2202      	movs	r2, #2
 8007bcc:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f8f6 	bl	8007dc8 <HAL_UARTEx_RxEventCallback>
      return;
 8007bdc:	e0b9      	b.n	8007d52 <HAL_UART_IRQHandler+0x5f2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f000 80ab 	beq.w	8007d56 <HAL_UART_IRQHandler+0x5f6>
          && (nb_rx_data > 0U))
 8007c00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f000 80a6 	beq.w	8007d56 <HAL_UART_IRQHandler+0x5f6>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c12:	e853 3f00 	ldrex	r3, [r3]
 8007c16:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	461a      	mov	r2, r3
 8007c28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c2e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c34:	e841 2300 	strex	r3, r2, [r1]
 8007c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d1e4      	bne.n	8007c0a <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	3308      	adds	r3, #8
 8007c46:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c4a:	e853 3f00 	ldrex	r3, [r3]
 8007c4e:	623b      	str	r3, [r7, #32]
   return(result);
 8007c50:	6a3b      	ldr	r3, [r7, #32]
 8007c52:	f023 0301 	bic.w	r3, r3, #1
 8007c56:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	3308      	adds	r3, #8
 8007c60:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007c64:	633a      	str	r2, [r7, #48]	@ 0x30
 8007c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c6c:	e841 2300 	strex	r3, r2, [r1]
 8007c70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d1e3      	bne.n	8007c40 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2220      	movs	r2, #32
 8007c7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	e853 3f00 	ldrex	r3, [r3]
 8007c98:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f023 0310 	bic.w	r3, r3, #16
 8007ca0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	461a      	mov	r2, r3
 8007caa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007cae:	61fb      	str	r3, [r7, #28]
 8007cb0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb2:	69b9      	ldr	r1, [r7, #24]
 8007cb4:	69fa      	ldr	r2, [r7, #28]
 8007cb6:	e841 2300 	strex	r3, r2, [r1]
 8007cba:	617b      	str	r3, [r7, #20]
   return(result);
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1e4      	bne.n	8007c8c <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2202      	movs	r2, #2
 8007cc6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007cc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007ccc:	4619      	mov	r1, r3
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f87a 	bl	8007dc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007cd4:	e03f      	b.n	8007d56 <HAL_UART_IRQHandler+0x5f6>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00e      	beq.n	8007d00 <HAL_UART_IRQHandler+0x5a0>
 8007ce2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ce6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d008      	beq.n	8007d00 <HAL_UART_IRQHandler+0x5a0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007cf6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f871 	bl	8007de0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007cfe:	e02d      	b.n	8007d5c <HAL_UART_IRQHandler+0x5fc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00e      	beq.n	8007d2a <HAL_UART_IRQHandler+0x5ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d008      	beq.n	8007d2a <HAL_UART_IRQHandler+0x5ca>
  {
    if (huart->TxISR != NULL)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d01c      	beq.n	8007d5a <HAL_UART_IRQHandler+0x5fa>
    {
      huart->TxISR(huart);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	4798      	blx	r3
    }
    return;
 8007d28:	e017      	b.n	8007d5a <HAL_UART_IRQHandler+0x5fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d012      	beq.n	8007d5c <HAL_UART_IRQHandler+0x5fc>
 8007d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00c      	beq.n	8007d5c <HAL_UART_IRQHandler+0x5fc>
  {
    UART_EndTransmit_IT(huart);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 ff2e 	bl	8008ba4 <UART_EndTransmit_IT>
    return;
 8007d48:	e008      	b.n	8007d5c <HAL_UART_IRQHandler+0x5fc>
      return;
 8007d4a:	bf00      	nop
 8007d4c:	e006      	b.n	8007d5c <HAL_UART_IRQHandler+0x5fc>
    return;
 8007d4e:	bf00      	nop
 8007d50:	e004      	b.n	8007d5c <HAL_UART_IRQHandler+0x5fc>
      return;
 8007d52:	bf00      	nop
 8007d54:	e002      	b.n	8007d5c <HAL_UART_IRQHandler+0x5fc>
      return;
 8007d56:	bf00      	nop
 8007d58:	e000      	b.n	8007d5c <HAL_UART_IRQHandler+0x5fc>
    return;
 8007d5a:	bf00      	nop
  }

}
 8007d5c:	37e8      	adds	r7, #232	@ 0xe8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop

08007d64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007da8:	bf00      	nop
 8007daa:	370c      	adds	r7, #12
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007dbc:	bf00      	nop
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007dd4:	bf00      	nop
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007de8:	bf00      	nop
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b088      	sub	sp, #32
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	689a      	ldr	r2, [r3, #8]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	431a      	orrs	r2, r3
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	695b      	ldr	r3, [r3, #20]
 8007e0e:	431a      	orrs	r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	69db      	ldr	r3, [r3, #28]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	4ba6      	ldr	r3, [pc, #664]	@ (80080b8 <UART_SetConfig+0x2c4>)
 8007e20:	4013      	ands	r3, r2
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	6812      	ldr	r2, [r2, #0]
 8007e26:	6979      	ldr	r1, [r7, #20]
 8007e28:	430b      	orrs	r3, r1
 8007e2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	68da      	ldr	r2, [r3, #12]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	430a      	orrs	r2, r1
 8007e40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	699b      	ldr	r3, [r3, #24]
 8007e46:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6a1b      	ldr	r3, [r3, #32]
 8007e4c:	697a      	ldr	r2, [r7, #20]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	697a      	ldr	r2, [r7, #20]
 8007e62:	430a      	orrs	r2, r1
 8007e64:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a94      	ldr	r2, [pc, #592]	@ (80080bc <UART_SetConfig+0x2c8>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d120      	bne.n	8007eb2 <UART_SetConfig+0xbe>
 8007e70:	4b93      	ldr	r3, [pc, #588]	@ (80080c0 <UART_SetConfig+0x2cc>)
 8007e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e76:	f003 0303 	and.w	r3, r3, #3
 8007e7a:	2b03      	cmp	r3, #3
 8007e7c:	d816      	bhi.n	8007eac <UART_SetConfig+0xb8>
 8007e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e84 <UART_SetConfig+0x90>)
 8007e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e84:	08007e95 	.word	0x08007e95
 8007e88:	08007ea1 	.word	0x08007ea1
 8007e8c:	08007e9b 	.word	0x08007e9b
 8007e90:	08007ea7 	.word	0x08007ea7
 8007e94:	2301      	movs	r3, #1
 8007e96:	77fb      	strb	r3, [r7, #31]
 8007e98:	e150      	b.n	800813c <UART_SetConfig+0x348>
 8007e9a:	2302      	movs	r3, #2
 8007e9c:	77fb      	strb	r3, [r7, #31]
 8007e9e:	e14d      	b.n	800813c <UART_SetConfig+0x348>
 8007ea0:	2304      	movs	r3, #4
 8007ea2:	77fb      	strb	r3, [r7, #31]
 8007ea4:	e14a      	b.n	800813c <UART_SetConfig+0x348>
 8007ea6:	2308      	movs	r3, #8
 8007ea8:	77fb      	strb	r3, [r7, #31]
 8007eaa:	e147      	b.n	800813c <UART_SetConfig+0x348>
 8007eac:	2310      	movs	r3, #16
 8007eae:	77fb      	strb	r3, [r7, #31]
 8007eb0:	e144      	b.n	800813c <UART_SetConfig+0x348>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a83      	ldr	r2, [pc, #524]	@ (80080c4 <UART_SetConfig+0x2d0>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d132      	bne.n	8007f22 <UART_SetConfig+0x12e>
 8007ebc:	4b80      	ldr	r3, [pc, #512]	@ (80080c0 <UART_SetConfig+0x2cc>)
 8007ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ec2:	f003 030c 	and.w	r3, r3, #12
 8007ec6:	2b0c      	cmp	r3, #12
 8007ec8:	d828      	bhi.n	8007f1c <UART_SetConfig+0x128>
 8007eca:	a201      	add	r2, pc, #4	@ (adr r2, 8007ed0 <UART_SetConfig+0xdc>)
 8007ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed0:	08007f05 	.word	0x08007f05
 8007ed4:	08007f1d 	.word	0x08007f1d
 8007ed8:	08007f1d 	.word	0x08007f1d
 8007edc:	08007f1d 	.word	0x08007f1d
 8007ee0:	08007f11 	.word	0x08007f11
 8007ee4:	08007f1d 	.word	0x08007f1d
 8007ee8:	08007f1d 	.word	0x08007f1d
 8007eec:	08007f1d 	.word	0x08007f1d
 8007ef0:	08007f0b 	.word	0x08007f0b
 8007ef4:	08007f1d 	.word	0x08007f1d
 8007ef8:	08007f1d 	.word	0x08007f1d
 8007efc:	08007f1d 	.word	0x08007f1d
 8007f00:	08007f17 	.word	0x08007f17
 8007f04:	2300      	movs	r3, #0
 8007f06:	77fb      	strb	r3, [r7, #31]
 8007f08:	e118      	b.n	800813c <UART_SetConfig+0x348>
 8007f0a:	2302      	movs	r3, #2
 8007f0c:	77fb      	strb	r3, [r7, #31]
 8007f0e:	e115      	b.n	800813c <UART_SetConfig+0x348>
 8007f10:	2304      	movs	r3, #4
 8007f12:	77fb      	strb	r3, [r7, #31]
 8007f14:	e112      	b.n	800813c <UART_SetConfig+0x348>
 8007f16:	2308      	movs	r3, #8
 8007f18:	77fb      	strb	r3, [r7, #31]
 8007f1a:	e10f      	b.n	800813c <UART_SetConfig+0x348>
 8007f1c:	2310      	movs	r3, #16
 8007f1e:	77fb      	strb	r3, [r7, #31]
 8007f20:	e10c      	b.n	800813c <UART_SetConfig+0x348>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a68      	ldr	r2, [pc, #416]	@ (80080c8 <UART_SetConfig+0x2d4>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d120      	bne.n	8007f6e <UART_SetConfig+0x17a>
 8007f2c:	4b64      	ldr	r3, [pc, #400]	@ (80080c0 <UART_SetConfig+0x2cc>)
 8007f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f32:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007f36:	2b30      	cmp	r3, #48	@ 0x30
 8007f38:	d013      	beq.n	8007f62 <UART_SetConfig+0x16e>
 8007f3a:	2b30      	cmp	r3, #48	@ 0x30
 8007f3c:	d814      	bhi.n	8007f68 <UART_SetConfig+0x174>
 8007f3e:	2b20      	cmp	r3, #32
 8007f40:	d009      	beq.n	8007f56 <UART_SetConfig+0x162>
 8007f42:	2b20      	cmp	r3, #32
 8007f44:	d810      	bhi.n	8007f68 <UART_SetConfig+0x174>
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d002      	beq.n	8007f50 <UART_SetConfig+0x15c>
 8007f4a:	2b10      	cmp	r3, #16
 8007f4c:	d006      	beq.n	8007f5c <UART_SetConfig+0x168>
 8007f4e:	e00b      	b.n	8007f68 <UART_SetConfig+0x174>
 8007f50:	2300      	movs	r3, #0
 8007f52:	77fb      	strb	r3, [r7, #31]
 8007f54:	e0f2      	b.n	800813c <UART_SetConfig+0x348>
 8007f56:	2302      	movs	r3, #2
 8007f58:	77fb      	strb	r3, [r7, #31]
 8007f5a:	e0ef      	b.n	800813c <UART_SetConfig+0x348>
 8007f5c:	2304      	movs	r3, #4
 8007f5e:	77fb      	strb	r3, [r7, #31]
 8007f60:	e0ec      	b.n	800813c <UART_SetConfig+0x348>
 8007f62:	2308      	movs	r3, #8
 8007f64:	77fb      	strb	r3, [r7, #31]
 8007f66:	e0e9      	b.n	800813c <UART_SetConfig+0x348>
 8007f68:	2310      	movs	r3, #16
 8007f6a:	77fb      	strb	r3, [r7, #31]
 8007f6c:	e0e6      	b.n	800813c <UART_SetConfig+0x348>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a56      	ldr	r2, [pc, #344]	@ (80080cc <UART_SetConfig+0x2d8>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d120      	bne.n	8007fba <UART_SetConfig+0x1c6>
 8007f78:	4b51      	ldr	r3, [pc, #324]	@ (80080c0 <UART_SetConfig+0x2cc>)
 8007f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f7e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007f82:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f84:	d013      	beq.n	8007fae <UART_SetConfig+0x1ba>
 8007f86:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f88:	d814      	bhi.n	8007fb4 <UART_SetConfig+0x1c0>
 8007f8a:	2b80      	cmp	r3, #128	@ 0x80
 8007f8c:	d009      	beq.n	8007fa2 <UART_SetConfig+0x1ae>
 8007f8e:	2b80      	cmp	r3, #128	@ 0x80
 8007f90:	d810      	bhi.n	8007fb4 <UART_SetConfig+0x1c0>
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d002      	beq.n	8007f9c <UART_SetConfig+0x1a8>
 8007f96:	2b40      	cmp	r3, #64	@ 0x40
 8007f98:	d006      	beq.n	8007fa8 <UART_SetConfig+0x1b4>
 8007f9a:	e00b      	b.n	8007fb4 <UART_SetConfig+0x1c0>
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	77fb      	strb	r3, [r7, #31]
 8007fa0:	e0cc      	b.n	800813c <UART_SetConfig+0x348>
 8007fa2:	2302      	movs	r3, #2
 8007fa4:	77fb      	strb	r3, [r7, #31]
 8007fa6:	e0c9      	b.n	800813c <UART_SetConfig+0x348>
 8007fa8:	2304      	movs	r3, #4
 8007faa:	77fb      	strb	r3, [r7, #31]
 8007fac:	e0c6      	b.n	800813c <UART_SetConfig+0x348>
 8007fae:	2308      	movs	r3, #8
 8007fb0:	77fb      	strb	r3, [r7, #31]
 8007fb2:	e0c3      	b.n	800813c <UART_SetConfig+0x348>
 8007fb4:	2310      	movs	r3, #16
 8007fb6:	77fb      	strb	r3, [r7, #31]
 8007fb8:	e0c0      	b.n	800813c <UART_SetConfig+0x348>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a44      	ldr	r2, [pc, #272]	@ (80080d0 <UART_SetConfig+0x2dc>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d125      	bne.n	8008010 <UART_SetConfig+0x21c>
 8007fc4:	4b3e      	ldr	r3, [pc, #248]	@ (80080c0 <UART_SetConfig+0x2cc>)
 8007fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fd2:	d017      	beq.n	8008004 <UART_SetConfig+0x210>
 8007fd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fd8:	d817      	bhi.n	800800a <UART_SetConfig+0x216>
 8007fda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fde:	d00b      	beq.n	8007ff8 <UART_SetConfig+0x204>
 8007fe0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fe4:	d811      	bhi.n	800800a <UART_SetConfig+0x216>
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d003      	beq.n	8007ff2 <UART_SetConfig+0x1fe>
 8007fea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fee:	d006      	beq.n	8007ffe <UART_SetConfig+0x20a>
 8007ff0:	e00b      	b.n	800800a <UART_SetConfig+0x216>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	77fb      	strb	r3, [r7, #31]
 8007ff6:	e0a1      	b.n	800813c <UART_SetConfig+0x348>
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	77fb      	strb	r3, [r7, #31]
 8007ffc:	e09e      	b.n	800813c <UART_SetConfig+0x348>
 8007ffe:	2304      	movs	r3, #4
 8008000:	77fb      	strb	r3, [r7, #31]
 8008002:	e09b      	b.n	800813c <UART_SetConfig+0x348>
 8008004:	2308      	movs	r3, #8
 8008006:	77fb      	strb	r3, [r7, #31]
 8008008:	e098      	b.n	800813c <UART_SetConfig+0x348>
 800800a:	2310      	movs	r3, #16
 800800c:	77fb      	strb	r3, [r7, #31]
 800800e:	e095      	b.n	800813c <UART_SetConfig+0x348>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a2f      	ldr	r2, [pc, #188]	@ (80080d4 <UART_SetConfig+0x2e0>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d125      	bne.n	8008066 <UART_SetConfig+0x272>
 800801a:	4b29      	ldr	r3, [pc, #164]	@ (80080c0 <UART_SetConfig+0x2cc>)
 800801c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008020:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008024:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008028:	d017      	beq.n	800805a <UART_SetConfig+0x266>
 800802a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800802e:	d817      	bhi.n	8008060 <UART_SetConfig+0x26c>
 8008030:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008034:	d00b      	beq.n	800804e <UART_SetConfig+0x25a>
 8008036:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800803a:	d811      	bhi.n	8008060 <UART_SetConfig+0x26c>
 800803c:	2b00      	cmp	r3, #0
 800803e:	d003      	beq.n	8008048 <UART_SetConfig+0x254>
 8008040:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008044:	d006      	beq.n	8008054 <UART_SetConfig+0x260>
 8008046:	e00b      	b.n	8008060 <UART_SetConfig+0x26c>
 8008048:	2301      	movs	r3, #1
 800804a:	77fb      	strb	r3, [r7, #31]
 800804c:	e076      	b.n	800813c <UART_SetConfig+0x348>
 800804e:	2302      	movs	r3, #2
 8008050:	77fb      	strb	r3, [r7, #31]
 8008052:	e073      	b.n	800813c <UART_SetConfig+0x348>
 8008054:	2304      	movs	r3, #4
 8008056:	77fb      	strb	r3, [r7, #31]
 8008058:	e070      	b.n	800813c <UART_SetConfig+0x348>
 800805a:	2308      	movs	r3, #8
 800805c:	77fb      	strb	r3, [r7, #31]
 800805e:	e06d      	b.n	800813c <UART_SetConfig+0x348>
 8008060:	2310      	movs	r3, #16
 8008062:	77fb      	strb	r3, [r7, #31]
 8008064:	e06a      	b.n	800813c <UART_SetConfig+0x348>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a1b      	ldr	r2, [pc, #108]	@ (80080d8 <UART_SetConfig+0x2e4>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d138      	bne.n	80080e2 <UART_SetConfig+0x2ee>
 8008070:	4b13      	ldr	r3, [pc, #76]	@ (80080c0 <UART_SetConfig+0x2cc>)
 8008072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008076:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800807a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800807e:	d017      	beq.n	80080b0 <UART_SetConfig+0x2bc>
 8008080:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008084:	d82a      	bhi.n	80080dc <UART_SetConfig+0x2e8>
 8008086:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800808a:	d00b      	beq.n	80080a4 <UART_SetConfig+0x2b0>
 800808c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008090:	d824      	bhi.n	80080dc <UART_SetConfig+0x2e8>
 8008092:	2b00      	cmp	r3, #0
 8008094:	d003      	beq.n	800809e <UART_SetConfig+0x2aa>
 8008096:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800809a:	d006      	beq.n	80080aa <UART_SetConfig+0x2b6>
 800809c:	e01e      	b.n	80080dc <UART_SetConfig+0x2e8>
 800809e:	2300      	movs	r3, #0
 80080a0:	77fb      	strb	r3, [r7, #31]
 80080a2:	e04b      	b.n	800813c <UART_SetConfig+0x348>
 80080a4:	2302      	movs	r3, #2
 80080a6:	77fb      	strb	r3, [r7, #31]
 80080a8:	e048      	b.n	800813c <UART_SetConfig+0x348>
 80080aa:	2304      	movs	r3, #4
 80080ac:	77fb      	strb	r3, [r7, #31]
 80080ae:	e045      	b.n	800813c <UART_SetConfig+0x348>
 80080b0:	2308      	movs	r3, #8
 80080b2:	77fb      	strb	r3, [r7, #31]
 80080b4:	e042      	b.n	800813c <UART_SetConfig+0x348>
 80080b6:	bf00      	nop
 80080b8:	efff69f3 	.word	0xefff69f3
 80080bc:	40011000 	.word	0x40011000
 80080c0:	40023800 	.word	0x40023800
 80080c4:	40004400 	.word	0x40004400
 80080c8:	40004800 	.word	0x40004800
 80080cc:	40004c00 	.word	0x40004c00
 80080d0:	40005000 	.word	0x40005000
 80080d4:	40011400 	.word	0x40011400
 80080d8:	40007800 	.word	0x40007800
 80080dc:	2310      	movs	r3, #16
 80080de:	77fb      	strb	r3, [r7, #31]
 80080e0:	e02c      	b.n	800813c <UART_SetConfig+0x348>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a72      	ldr	r2, [pc, #456]	@ (80082b0 <UART_SetConfig+0x4bc>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d125      	bne.n	8008138 <UART_SetConfig+0x344>
 80080ec:	4b71      	ldr	r3, [pc, #452]	@ (80082b4 <UART_SetConfig+0x4c0>)
 80080ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080f2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80080f6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80080fa:	d017      	beq.n	800812c <UART_SetConfig+0x338>
 80080fc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008100:	d817      	bhi.n	8008132 <UART_SetConfig+0x33e>
 8008102:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008106:	d00b      	beq.n	8008120 <UART_SetConfig+0x32c>
 8008108:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800810c:	d811      	bhi.n	8008132 <UART_SetConfig+0x33e>
 800810e:	2b00      	cmp	r3, #0
 8008110:	d003      	beq.n	800811a <UART_SetConfig+0x326>
 8008112:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008116:	d006      	beq.n	8008126 <UART_SetConfig+0x332>
 8008118:	e00b      	b.n	8008132 <UART_SetConfig+0x33e>
 800811a:	2300      	movs	r3, #0
 800811c:	77fb      	strb	r3, [r7, #31]
 800811e:	e00d      	b.n	800813c <UART_SetConfig+0x348>
 8008120:	2302      	movs	r3, #2
 8008122:	77fb      	strb	r3, [r7, #31]
 8008124:	e00a      	b.n	800813c <UART_SetConfig+0x348>
 8008126:	2304      	movs	r3, #4
 8008128:	77fb      	strb	r3, [r7, #31]
 800812a:	e007      	b.n	800813c <UART_SetConfig+0x348>
 800812c:	2308      	movs	r3, #8
 800812e:	77fb      	strb	r3, [r7, #31]
 8008130:	e004      	b.n	800813c <UART_SetConfig+0x348>
 8008132:	2310      	movs	r3, #16
 8008134:	77fb      	strb	r3, [r7, #31]
 8008136:	e001      	b.n	800813c <UART_SetConfig+0x348>
 8008138:	2310      	movs	r3, #16
 800813a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	69db      	ldr	r3, [r3, #28]
 8008140:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008144:	d15b      	bne.n	80081fe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008146:	7ffb      	ldrb	r3, [r7, #31]
 8008148:	2b08      	cmp	r3, #8
 800814a:	d828      	bhi.n	800819e <UART_SetConfig+0x3aa>
 800814c:	a201      	add	r2, pc, #4	@ (adr r2, 8008154 <UART_SetConfig+0x360>)
 800814e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008152:	bf00      	nop
 8008154:	08008179 	.word	0x08008179
 8008158:	08008181 	.word	0x08008181
 800815c:	08008189 	.word	0x08008189
 8008160:	0800819f 	.word	0x0800819f
 8008164:	0800818f 	.word	0x0800818f
 8008168:	0800819f 	.word	0x0800819f
 800816c:	0800819f 	.word	0x0800819f
 8008170:	0800819f 	.word	0x0800819f
 8008174:	08008197 	.word	0x08008197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008178:	f7fd fa8c 	bl	8005694 <HAL_RCC_GetPCLK1Freq>
 800817c:	61b8      	str	r0, [r7, #24]
        break;
 800817e:	e013      	b.n	80081a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008180:	f7fd fa9c 	bl	80056bc <HAL_RCC_GetPCLK2Freq>
 8008184:	61b8      	str	r0, [r7, #24]
        break;
 8008186:	e00f      	b.n	80081a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008188:	4b4b      	ldr	r3, [pc, #300]	@ (80082b8 <UART_SetConfig+0x4c4>)
 800818a:	61bb      	str	r3, [r7, #24]
        break;
 800818c:	e00c      	b.n	80081a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800818e:	f7fd f96f 	bl	8005470 <HAL_RCC_GetSysClockFreq>
 8008192:	61b8      	str	r0, [r7, #24]
        break;
 8008194:	e008      	b.n	80081a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008196:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800819a:	61bb      	str	r3, [r7, #24]
        break;
 800819c:	e004      	b.n	80081a8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800819e:	2300      	movs	r3, #0
 80081a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	77bb      	strb	r3, [r7, #30]
        break;
 80081a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d074      	beq.n	8008298 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	005a      	lsls	r2, r3, #1
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	085b      	lsrs	r3, r3, #1
 80081b8:	441a      	add	r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	fbb2 f3f3 	udiv	r3, r2, r3
 80081c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	2b0f      	cmp	r3, #15
 80081c8:	d916      	bls.n	80081f8 <UART_SetConfig+0x404>
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081d0:	d212      	bcs.n	80081f8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	f023 030f 	bic.w	r3, r3, #15
 80081da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	085b      	lsrs	r3, r3, #1
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	f003 0307 	and.w	r3, r3, #7
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	89fb      	ldrh	r3, [r7, #14]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	89fa      	ldrh	r2, [r7, #14]
 80081f4:	60da      	str	r2, [r3, #12]
 80081f6:	e04f      	b.n	8008298 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	77bb      	strb	r3, [r7, #30]
 80081fc:	e04c      	b.n	8008298 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80081fe:	7ffb      	ldrb	r3, [r7, #31]
 8008200:	2b08      	cmp	r3, #8
 8008202:	d828      	bhi.n	8008256 <UART_SetConfig+0x462>
 8008204:	a201      	add	r2, pc, #4	@ (adr r2, 800820c <UART_SetConfig+0x418>)
 8008206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800820a:	bf00      	nop
 800820c:	08008231 	.word	0x08008231
 8008210:	08008239 	.word	0x08008239
 8008214:	08008241 	.word	0x08008241
 8008218:	08008257 	.word	0x08008257
 800821c:	08008247 	.word	0x08008247
 8008220:	08008257 	.word	0x08008257
 8008224:	08008257 	.word	0x08008257
 8008228:	08008257 	.word	0x08008257
 800822c:	0800824f 	.word	0x0800824f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008230:	f7fd fa30 	bl	8005694 <HAL_RCC_GetPCLK1Freq>
 8008234:	61b8      	str	r0, [r7, #24]
        break;
 8008236:	e013      	b.n	8008260 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008238:	f7fd fa40 	bl	80056bc <HAL_RCC_GetPCLK2Freq>
 800823c:	61b8      	str	r0, [r7, #24]
        break;
 800823e:	e00f      	b.n	8008260 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008240:	4b1d      	ldr	r3, [pc, #116]	@ (80082b8 <UART_SetConfig+0x4c4>)
 8008242:	61bb      	str	r3, [r7, #24]
        break;
 8008244:	e00c      	b.n	8008260 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008246:	f7fd f913 	bl	8005470 <HAL_RCC_GetSysClockFreq>
 800824a:	61b8      	str	r0, [r7, #24]
        break;
 800824c:	e008      	b.n	8008260 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800824e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008252:	61bb      	str	r3, [r7, #24]
        break;
 8008254:	e004      	b.n	8008260 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008256:	2300      	movs	r3, #0
 8008258:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	77bb      	strb	r3, [r7, #30]
        break;
 800825e:	bf00      	nop
    }

    if (pclk != 0U)
 8008260:	69bb      	ldr	r3, [r7, #24]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d018      	beq.n	8008298 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	085a      	lsrs	r2, r3, #1
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	441a      	add	r2, r3
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	fbb2 f3f3 	udiv	r3, r2, r3
 8008278:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	2b0f      	cmp	r3, #15
 800827e:	d909      	bls.n	8008294 <UART_SetConfig+0x4a0>
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008286:	d205      	bcs.n	8008294 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	b29a      	uxth	r2, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	60da      	str	r2, [r3, #12]
 8008292:	e001      	b.n	8008298 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80082a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3720      	adds	r7, #32
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	40007c00 	.word	0x40007c00
 80082b4:	40023800 	.word	0x40023800
 80082b8:	00f42400 	.word	0x00f42400

080082bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082c8:	f003 0308 	and.w	r3, r3, #8
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d00a      	beq.n	80082e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	430a      	orrs	r2, r1
 80082e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ea:	f003 0301 	and.w	r3, r3, #1
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d00a      	beq.n	8008308 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	430a      	orrs	r2, r1
 8008306:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800830c:	f003 0302 	and.w	r3, r3, #2
 8008310:	2b00      	cmp	r3, #0
 8008312:	d00a      	beq.n	800832a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	430a      	orrs	r2, r1
 8008328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800832e:	f003 0304 	and.w	r3, r3, #4
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00a      	beq.n	800834c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	430a      	orrs	r2, r1
 800834a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008350:	f003 0310 	and.w	r3, r3, #16
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00a      	beq.n	800836e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	430a      	orrs	r2, r1
 800836c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008372:	f003 0320 	and.w	r3, r3, #32
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00a      	beq.n	8008390 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	430a      	orrs	r2, r1
 800838e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008398:	2b00      	cmp	r3, #0
 800839a:	d01a      	beq.n	80083d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	430a      	orrs	r2, r1
 80083b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083ba:	d10a      	bne.n	80083d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	430a      	orrs	r2, r1
 80083d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00a      	beq.n	80083f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	430a      	orrs	r2, r1
 80083f2:	605a      	str	r2, [r3, #4]
  }
}
 80083f4:	bf00      	nop
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b098      	sub	sp, #96	@ 0x60
 8008404:	af02      	add	r7, sp, #8
 8008406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008410:	f7fa ff48 	bl	80032a4 <HAL_GetTick>
 8008414:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 0308 	and.w	r3, r3, #8
 8008420:	2b08      	cmp	r3, #8
 8008422:	d12e      	bne.n	8008482 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008424:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008428:	9300      	str	r3, [sp, #0]
 800842a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800842c:	2200      	movs	r2, #0
 800842e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 f88c 	bl	8008550 <UART_WaitOnFlagUntilTimeout>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d021      	beq.n	8008482 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008446:	e853 3f00 	ldrex	r3, [r3]
 800844a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800844c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800844e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008452:	653b      	str	r3, [r7, #80]	@ 0x50
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	461a      	mov	r2, r3
 800845a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800845c:	647b      	str	r3, [r7, #68]	@ 0x44
 800845e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008460:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008462:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008464:	e841 2300 	strex	r3, r2, [r1]
 8008468:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800846a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800846c:	2b00      	cmp	r3, #0
 800846e:	d1e6      	bne.n	800843e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2220      	movs	r2, #32
 8008474:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800847e:	2303      	movs	r3, #3
 8008480:	e062      	b.n	8008548 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 0304 	and.w	r3, r3, #4
 800848c:	2b04      	cmp	r3, #4
 800848e:	d149      	bne.n	8008524 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008490:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008494:	9300      	str	r3, [sp, #0]
 8008496:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008498:	2200      	movs	r2, #0
 800849a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 f856 	bl	8008550 <UART_WaitOnFlagUntilTimeout>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d03c      	beq.n	8008524 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b2:	e853 3f00 	ldrex	r3, [r3]
 80084b6:	623b      	str	r3, [r7, #32]
   return(result);
 80084b8:	6a3b      	ldr	r3, [r7, #32]
 80084ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	461a      	mov	r2, r3
 80084c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80084ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084d0:	e841 2300 	strex	r3, r2, [r1]
 80084d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80084d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d1e6      	bne.n	80084aa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	3308      	adds	r3, #8
 80084e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	e853 3f00 	ldrex	r3, [r3]
 80084ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f023 0301 	bic.w	r3, r3, #1
 80084f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	3308      	adds	r3, #8
 80084fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084fc:	61fa      	str	r2, [r7, #28]
 80084fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008500:	69b9      	ldr	r1, [r7, #24]
 8008502:	69fa      	ldr	r2, [r7, #28]
 8008504:	e841 2300 	strex	r3, r2, [r1]
 8008508:	617b      	str	r3, [r7, #20]
   return(result);
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d1e5      	bne.n	80084dc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2220      	movs	r2, #32
 8008514:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008520:	2303      	movs	r3, #3
 8008522:	e011      	b.n	8008548 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2220      	movs	r2, #32
 8008528:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2220      	movs	r2, #32
 800852e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	3758      	adds	r7, #88	@ 0x58
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	603b      	str	r3, [r7, #0]
 800855c:	4613      	mov	r3, r2
 800855e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008560:	e04f      	b.n	8008602 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008568:	d04b      	beq.n	8008602 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800856a:	f7fa fe9b 	bl	80032a4 <HAL_GetTick>
 800856e:	4602      	mov	r2, r0
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	1ad3      	subs	r3, r2, r3
 8008574:	69ba      	ldr	r2, [r7, #24]
 8008576:	429a      	cmp	r2, r3
 8008578:	d302      	bcc.n	8008580 <UART_WaitOnFlagUntilTimeout+0x30>
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d101      	bne.n	8008584 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008580:	2303      	movs	r3, #3
 8008582:	e04e      	b.n	8008622 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f003 0304 	and.w	r3, r3, #4
 800858e:	2b00      	cmp	r3, #0
 8008590:	d037      	beq.n	8008602 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	2b80      	cmp	r3, #128	@ 0x80
 8008596:	d034      	beq.n	8008602 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	2b40      	cmp	r3, #64	@ 0x40
 800859c:	d031      	beq.n	8008602 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	69db      	ldr	r3, [r3, #28]
 80085a4:	f003 0308 	and.w	r3, r3, #8
 80085a8:	2b08      	cmp	r3, #8
 80085aa:	d110      	bne.n	80085ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2208      	movs	r2, #8
 80085b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085b4:	68f8      	ldr	r0, [r7, #12]
 80085b6:	f000 f8ff 	bl	80087b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2208      	movs	r2, #8
 80085be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2200      	movs	r2, #0
 80085c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80085ca:	2301      	movs	r3, #1
 80085cc:	e029      	b.n	8008622 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	69db      	ldr	r3, [r3, #28]
 80085d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80085d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80085dc:	d111      	bne.n	8008602 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80085e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085e8:	68f8      	ldr	r0, [r7, #12]
 80085ea:	f000 f8e5 	bl	80087b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2220      	movs	r2, #32
 80085f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80085fe:	2303      	movs	r3, #3
 8008600:	e00f      	b.n	8008622 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	69da      	ldr	r2, [r3, #28]
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	4013      	ands	r3, r2
 800860c:	68ba      	ldr	r2, [r7, #8]
 800860e:	429a      	cmp	r2, r3
 8008610:	bf0c      	ite	eq
 8008612:	2301      	moveq	r3, #1
 8008614:	2300      	movne	r3, #0
 8008616:	b2db      	uxtb	r3, r3
 8008618:	461a      	mov	r2, r3
 800861a:	79fb      	ldrb	r3, [r7, #7]
 800861c:	429a      	cmp	r2, r3
 800861e:	d0a0      	beq.n	8008562 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3710      	adds	r7, #16
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
	...

0800862c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b096      	sub	sp, #88	@ 0x58
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	4613      	mov	r3, r2
 8008638:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	88fa      	ldrh	r2, [r7, #6]
 8008644:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2222      	movs	r2, #34	@ 0x22
 8008654:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800865c:	2b00      	cmp	r3, #0
 800865e:	d028      	beq.n	80086b2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008664:	4a3e      	ldr	r2, [pc, #248]	@ (8008760 <UART_Start_Receive_DMA+0x134>)
 8008666:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800866c:	4a3d      	ldr	r2, [pc, #244]	@ (8008764 <UART_Start_Receive_DMA+0x138>)
 800866e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008674:	4a3c      	ldr	r2, [pc, #240]	@ (8008768 <UART_Start_Receive_DMA+0x13c>)
 8008676:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800867c:	2200      	movs	r2, #0
 800867e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	3324      	adds	r3, #36	@ 0x24
 800868a:	4619      	mov	r1, r3
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008690:	461a      	mov	r2, r3
 8008692:	88fb      	ldrh	r3, [r7, #6]
 8008694:	f7fa ffa2 	bl	80035dc <HAL_DMA_Start_IT>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d009      	beq.n	80086b2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2210      	movs	r2, #16
 80086a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2220      	movs	r2, #32
 80086aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	e051      	b.n	8008756 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d018      	beq.n	80086ec <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086c2:	e853 3f00 	ldrex	r3, [r3]
 80086c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80086c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	461a      	mov	r2, r3
 80086d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086da:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086dc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80086de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086e0:	e841 2300 	strex	r3, r2, [r1]
 80086e4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80086e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d1e6      	bne.n	80086ba <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	3308      	adds	r3, #8
 80086f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f6:	e853 3f00 	ldrex	r3, [r3]
 80086fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80086fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086fe:	f043 0301 	orr.w	r3, r3, #1
 8008702:	653b      	str	r3, [r7, #80]	@ 0x50
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	3308      	adds	r3, #8
 800870a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800870c:	637a      	str	r2, [r7, #52]	@ 0x34
 800870e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008710:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008712:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008714:	e841 2300 	strex	r3, r2, [r1]
 8008718:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800871a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800871c:	2b00      	cmp	r3, #0
 800871e:	d1e5      	bne.n	80086ec <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	3308      	adds	r3, #8
 8008726:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	e853 3f00 	ldrex	r3, [r3]
 800872e:	613b      	str	r3, [r7, #16]
   return(result);
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008736:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	3308      	adds	r3, #8
 800873e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008740:	623a      	str	r2, [r7, #32]
 8008742:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008744:	69f9      	ldr	r1, [r7, #28]
 8008746:	6a3a      	ldr	r2, [r7, #32]
 8008748:	e841 2300 	strex	r3, r2, [r1]
 800874c:	61bb      	str	r3, [r7, #24]
   return(result);
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d1e5      	bne.n	8008720 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3758      	adds	r7, #88	@ 0x58
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	08008933 	.word	0x08008933
 8008764:	08008a91 	.word	0x08008a91
 8008768:	08008b03 	.word	0x08008b03

0800876c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800876c:	b480      	push	{r7}
 800876e:	b089      	sub	sp, #36	@ 0x24
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	e853 3f00 	ldrex	r3, [r3]
 8008780:	60bb      	str	r3, [r7, #8]
   return(result);
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008788:	61fb      	str	r3, [r7, #28]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	461a      	mov	r2, r3
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	61bb      	str	r3, [r7, #24]
 8008794:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008796:	6979      	ldr	r1, [r7, #20]
 8008798:	69ba      	ldr	r2, [r7, #24]
 800879a:	e841 2300 	strex	r3, r2, [r1]
 800879e:	613b      	str	r3, [r7, #16]
   return(result);
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1e6      	bne.n	8008774 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2220      	movs	r2, #32
 80087aa:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80087ac:	bf00      	nop
 80087ae:	3724      	adds	r7, #36	@ 0x24
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b095      	sub	sp, #84	@ 0x54
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087c8:	e853 3f00 	ldrex	r3, [r3]
 80087cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80087ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	461a      	mov	r2, r3
 80087dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087de:	643b      	str	r3, [r7, #64]	@ 0x40
 80087e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80087e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80087e6:	e841 2300 	strex	r3, r2, [r1]
 80087ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80087ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d1e6      	bne.n	80087c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	3308      	adds	r3, #8
 80087f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fa:	6a3b      	ldr	r3, [r7, #32]
 80087fc:	e853 3f00 	ldrex	r3, [r3]
 8008800:	61fb      	str	r3, [r7, #28]
   return(result);
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	f023 0301 	bic.w	r3, r3, #1
 8008808:	64bb      	str	r3, [r7, #72]	@ 0x48
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	3308      	adds	r3, #8
 8008810:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008812:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008814:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008816:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008818:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800881a:	e841 2300 	strex	r3, r2, [r1]
 800881e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1e5      	bne.n	80087f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800882a:	2b01      	cmp	r3, #1
 800882c:	d118      	bne.n	8008860 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	e853 3f00 	ldrex	r3, [r3]
 800883a:	60bb      	str	r3, [r7, #8]
   return(result);
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	f023 0310 	bic.w	r3, r3, #16
 8008842:	647b      	str	r3, [r7, #68]	@ 0x44
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	461a      	mov	r2, r3
 800884a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800884c:	61bb      	str	r3, [r7, #24]
 800884e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008850:	6979      	ldr	r1, [r7, #20]
 8008852:	69ba      	ldr	r2, [r7, #24]
 8008854:	e841 2300 	strex	r3, r2, [r1]
 8008858:	613b      	str	r3, [r7, #16]
   return(result);
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d1e6      	bne.n	800882e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2220      	movs	r2, #32
 8008864:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008874:	bf00      	nop
 8008876:	3754      	adds	r7, #84	@ 0x54
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b090      	sub	sp, #64	@ 0x40
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800888c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	69db      	ldr	r3, [r3, #28]
 8008892:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008896:	d037      	beq.n	8008908 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8008898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800889a:	2200      	movs	r2, #0
 800889c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80088a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	3308      	adds	r3, #8
 80088a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088aa:	e853 3f00 	ldrex	r3, [r3]
 80088ae:	623b      	str	r3, [r7, #32]
   return(result);
 80088b0:	6a3b      	ldr	r3, [r7, #32]
 80088b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80088b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	3308      	adds	r3, #8
 80088be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80088c0:	633a      	str	r2, [r7, #48]	@ 0x30
 80088c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80088c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088c8:	e841 2300 	strex	r3, r2, [r1]
 80088cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80088ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d1e5      	bne.n	80088a0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80088d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	e853 3f00 	ldrex	r3, [r3]
 80088e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80088ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	461a      	mov	r2, r3
 80088f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088f2:	61fb      	str	r3, [r7, #28]
 80088f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f6:	69b9      	ldr	r1, [r7, #24]
 80088f8:	69fa      	ldr	r2, [r7, #28]
 80088fa:	e841 2300 	strex	r3, r2, [r1]
 80088fe:	617b      	str	r3, [r7, #20]
   return(result);
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1e6      	bne.n	80088d4 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008906:	e002      	b.n	800890e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8008908:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800890a:	f7ff fa2b 	bl	8007d64 <HAL_UART_TxCpltCallback>
}
 800890e:	bf00      	nop
 8008910:	3740      	adds	r7, #64	@ 0x40
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008916:	b580      	push	{r7, lr}
 8008918:	b084      	sub	sp, #16
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008922:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f7ff fa27 	bl	8007d78 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800892a:	bf00      	nop
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b09c      	sub	sp, #112	@ 0x70
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800893e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	69db      	ldr	r3, [r3, #28]
 8008944:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008948:	d071      	beq.n	8008a2e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800894a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800894c:	2200      	movs	r2, #0
 800894e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008952:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008958:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800895a:	e853 3f00 	ldrex	r3, [r3]
 800895e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008960:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008962:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008966:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008968:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	461a      	mov	r2, r3
 800896e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008970:	657b      	str	r3, [r7, #84]	@ 0x54
 8008972:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008974:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008976:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008978:	e841 2300 	strex	r3, r2, [r1]
 800897c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800897e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008980:	2b00      	cmp	r3, #0
 8008982:	d1e6      	bne.n	8008952 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008984:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	3308      	adds	r3, #8
 800898a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800898e:	e853 3f00 	ldrex	r3, [r3]
 8008992:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008996:	f023 0301 	bic.w	r3, r3, #1
 800899a:	667b      	str	r3, [r7, #100]	@ 0x64
 800899c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	3308      	adds	r3, #8
 80089a2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80089a4:	643a      	str	r2, [r7, #64]	@ 0x40
 80089a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80089aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80089ac:	e841 2300 	strex	r3, r2, [r1]
 80089b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80089b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d1e5      	bne.n	8008984 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	3308      	adds	r3, #8
 80089be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c0:	6a3b      	ldr	r3, [r7, #32]
 80089c2:	e853 3f00 	ldrex	r3, [r3]
 80089c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80089d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	3308      	adds	r3, #8
 80089d6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80089d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80089da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089e0:	e841 2300 	strex	r3, r2, [r1]
 80089e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80089e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d1e5      	bne.n	80089b8 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80089ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089ee:	2220      	movs	r2, #32
 80089f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d118      	bne.n	8008a2e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	e853 3f00 	ldrex	r3, [r3]
 8008a08:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	f023 0310 	bic.w	r3, r3, #16
 8008a10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008a12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	461a      	mov	r2, r3
 8008a18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008a1a:	61bb      	str	r3, [r7, #24]
 8008a1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1e:	6979      	ldr	r1, [r7, #20]
 8008a20:	69ba      	ldr	r2, [r7, #24]
 8008a22:	e841 2300 	strex	r3, r2, [r1]
 8008a26:	613b      	str	r3, [r7, #16]
   return(result);
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1e6      	bne.n	80089fc <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a30:	2200      	movs	r2, #0
 8008a32:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d122      	bne.n	8008a82 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 8008a3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 8008a4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a50:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008a54:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d204      	bcs.n	8008a66 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8008a5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a5e:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8008a62:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a68:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008a6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	1ad3      	subs	r3, r2, r3
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	4619      	mov	r1, r3
 8008a7a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008a7c:	f7ff f9a4 	bl	8007dc8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008a80:	e002      	b.n	8008a88 <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 8008a82:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008a84:	f7ff f982 	bl	8007d8c <HAL_UART_RxCpltCallback>
}
 8008a88:	bf00      	nop
 8008a8a:	3770      	adds	r7, #112	@ 0x70
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a9c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d123      	bne.n	8008af4 <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008ab2:	085b      	lsrs	r3, r3, #1
 8008ab4:	b29a      	uxth	r2, r3
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008aca:	897a      	ldrh	r2, [r7, #10]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d803      	bhi.n	8008ad8 <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	897a      	ldrh	r2, [r7, #10]
 8008ad4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	1ad3      	subs	r3, r2, r3
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	4619      	mov	r1, r3
 8008aec:	68f8      	ldr	r0, [r7, #12]
 8008aee:	f7ff f96b 	bl	8007dc8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008af2:	e002      	b.n	8008afa <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 8008af4:	68f8      	ldr	r0, [r7, #12]
 8008af6:	f7ff f953 	bl	8007da0 <HAL_UART_RxHalfCpltCallback>
}
 8008afa:	bf00      	nop
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b086      	sub	sp, #24
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b0e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b14:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b1c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b28:	2b80      	cmp	r3, #128	@ 0x80
 8008b2a:	d109      	bne.n	8008b40 <UART_DMAError+0x3e>
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	2b21      	cmp	r3, #33	@ 0x21
 8008b30:	d106      	bne.n	8008b40 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	2200      	movs	r2, #0
 8008b36:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8008b3a:	6978      	ldr	r0, [r7, #20]
 8008b3c:	f7ff fe16 	bl	800876c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b4a:	2b40      	cmp	r3, #64	@ 0x40
 8008b4c:	d109      	bne.n	8008b62 <UART_DMAError+0x60>
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2b22      	cmp	r3, #34	@ 0x22
 8008b52:	d106      	bne.n	8008b62 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	2200      	movs	r2, #0
 8008b58:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8008b5c:	6978      	ldr	r0, [r7, #20]
 8008b5e:	f7ff fe2b 	bl	80087b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b68:	f043 0210 	orr.w	r2, r3, #16
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b72:	6978      	ldr	r0, [r7, #20]
 8008b74:	f7ff f91e 	bl	8007db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b78:	bf00      	nop
 8008b7a:	3718      	adds	r7, #24
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	f7ff f90c 	bl	8007db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b9c:	bf00      	nop
 8008b9e:	3710      	adds	r7, #16
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b088      	sub	sp, #32
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	e853 3f00 	ldrex	r3, [r3]
 8008bb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bc0:	61fb      	str	r3, [r7, #28]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	61bb      	str	r3, [r7, #24]
 8008bcc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bce:	6979      	ldr	r1, [r7, #20]
 8008bd0:	69ba      	ldr	r2, [r7, #24]
 8008bd2:	e841 2300 	strex	r3, r2, [r1]
 8008bd6:	613b      	str	r3, [r7, #16]
   return(result);
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d1e6      	bne.n	8008bac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2220      	movs	r2, #32
 8008be2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f7ff f8ba 	bl	8007d64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bf0:	bf00      	nop
 8008bf2:	3720      	adds	r7, #32
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008bf8:	b480      	push	{r7}
 8008bfa:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008bfc:	bf00      	nop
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr
	...

08008c08 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008c08:	b480      	push	{r7}
 8008c0a:	b085      	sub	sp, #20
 8008c0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c0e:	f3ef 8305 	mrs	r3, IPSR
 8008c12:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c14:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d10f      	bne.n	8008c3a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c1a:	f3ef 8310 	mrs	r3, PRIMASK
 8008c1e:	607b      	str	r3, [r7, #4]
  return(result);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d105      	bne.n	8008c32 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c26:	f3ef 8311 	mrs	r3, BASEPRI
 8008c2a:	603b      	str	r3, [r7, #0]
  return(result);
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d007      	beq.n	8008c42 <osKernelInitialize+0x3a>
 8008c32:	4b0e      	ldr	r3, [pc, #56]	@ (8008c6c <osKernelInitialize+0x64>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	d103      	bne.n	8008c42 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008c3a:	f06f 0305 	mvn.w	r3, #5
 8008c3e:	60fb      	str	r3, [r7, #12]
 8008c40:	e00c      	b.n	8008c5c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008c42:	4b0a      	ldr	r3, [pc, #40]	@ (8008c6c <osKernelInitialize+0x64>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d105      	bne.n	8008c56 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008c4a:	4b08      	ldr	r3, [pc, #32]	@ (8008c6c <osKernelInitialize+0x64>)
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008c50:	2300      	movs	r3, #0
 8008c52:	60fb      	str	r3, [r7, #12]
 8008c54:	e002      	b.n	8008c5c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008c56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008c5a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3714      	adds	r7, #20
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
 8008c6c:	200050e4 	.word	0x200050e4

08008c70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c76:	f3ef 8305 	mrs	r3, IPSR
 8008c7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c7c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d10f      	bne.n	8008ca2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c82:	f3ef 8310 	mrs	r3, PRIMASK
 8008c86:	607b      	str	r3, [r7, #4]
  return(result);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d105      	bne.n	8008c9a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c8e:	f3ef 8311 	mrs	r3, BASEPRI
 8008c92:	603b      	str	r3, [r7, #0]
  return(result);
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d007      	beq.n	8008caa <osKernelStart+0x3a>
 8008c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8008cd8 <osKernelStart+0x68>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2b02      	cmp	r3, #2
 8008ca0:	d103      	bne.n	8008caa <osKernelStart+0x3a>
    stat = osErrorISR;
 8008ca2:	f06f 0305 	mvn.w	r3, #5
 8008ca6:	60fb      	str	r3, [r7, #12]
 8008ca8:	e010      	b.n	8008ccc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008caa:	4b0b      	ldr	r3, [pc, #44]	@ (8008cd8 <osKernelStart+0x68>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d109      	bne.n	8008cc6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008cb2:	f7ff ffa1 	bl	8008bf8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008cb6:	4b08      	ldr	r3, [pc, #32]	@ (8008cd8 <osKernelStart+0x68>)
 8008cb8:	2202      	movs	r2, #2
 8008cba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008cbc:	f001 fc42 	bl	800a544 <vTaskStartScheduler>
      stat = osOK;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	60fb      	str	r3, [r7, #12]
 8008cc4:	e002      	b.n	8008ccc <osKernelStart+0x5c>
    } else {
      stat = osError;
 8008cc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008cca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3710      	adds	r7, #16
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	200050e4 	.word	0x200050e4

08008cdc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b090      	sub	sp, #64	@ 0x40
 8008ce0:	af04      	add	r7, sp, #16
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	60b9      	str	r1, [r7, #8]
 8008ce6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cec:	f3ef 8305 	mrs	r3, IPSR
 8008cf0:	61fb      	str	r3, [r7, #28]
  return(result);
 8008cf2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f040 8090 	bne.w	8008e1a <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cfa:	f3ef 8310 	mrs	r3, PRIMASK
 8008cfe:	61bb      	str	r3, [r7, #24]
  return(result);
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d105      	bne.n	8008d12 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d06:	f3ef 8311 	mrs	r3, BASEPRI
 8008d0a:	617b      	str	r3, [r7, #20]
  return(result);
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d003      	beq.n	8008d1a <osThreadNew+0x3e>
 8008d12:	4b44      	ldr	r3, [pc, #272]	@ (8008e24 <osThreadNew+0x148>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	d07f      	beq.n	8008e1a <osThreadNew+0x13e>
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d07c      	beq.n	8008e1a <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 8008d20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008d24:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008d26:	2318      	movs	r3, #24
 8008d28:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8008d2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008d32:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d045      	beq.n	8008dc6 <osThreadNew+0xea>
      if (attr->name != NULL) {
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d002      	beq.n	8008d48 <osThreadNew+0x6c>
        name = attr->name;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	699b      	ldr	r3, [r3, #24]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d002      	beq.n	8008d56 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	699b      	ldr	r3, [r3, #24]
 8008d54:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d008      	beq.n	8008d6e <osThreadNew+0x92>
 8008d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d5e:	2b38      	cmp	r3, #56	@ 0x38
 8008d60:	d805      	bhi.n	8008d6e <osThreadNew+0x92>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	f003 0301 	and.w	r3, r3, #1
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d001      	beq.n	8008d72 <osThreadNew+0x96>
        return (NULL);
 8008d6e:	2300      	movs	r3, #0
 8008d70:	e054      	b.n	8008e1c <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	695b      	ldr	r3, [r3, #20]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d003      	beq.n	8008d82 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	695b      	ldr	r3, [r3, #20]
 8008d7e:	089b      	lsrs	r3, r3, #2
 8008d80:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00e      	beq.n	8008da8 <osThreadNew+0xcc>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	2b5b      	cmp	r3, #91	@ 0x5b
 8008d90:	d90a      	bls.n	8008da8 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d006      	beq.n	8008da8 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	695b      	ldr	r3, [r3, #20]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d002      	beq.n	8008da8 <osThreadNew+0xcc>
        mem = 1;
 8008da2:	2301      	movs	r3, #1
 8008da4:	623b      	str	r3, [r7, #32]
 8008da6:	e010      	b.n	8008dca <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d10c      	bne.n	8008dca <osThreadNew+0xee>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d108      	bne.n	8008dca <osThreadNew+0xee>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	691b      	ldr	r3, [r3, #16]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d104      	bne.n	8008dca <osThreadNew+0xee>
          mem = 0;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	623b      	str	r3, [r7, #32]
 8008dc4:	e001      	b.n	8008dca <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008dca:	6a3b      	ldr	r3, [r7, #32]
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d110      	bne.n	8008df2 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008dd8:	9202      	str	r2, [sp, #8]
 8008dda:	9301      	str	r3, [sp, #4]
 8008ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dde:	9300      	str	r3, [sp, #0]
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008de4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	f001 f9c6 	bl	800a178 <xTaskCreateStatic>
 8008dec:	4603      	mov	r3, r0
 8008dee:	613b      	str	r3, [r7, #16]
 8008df0:	e013      	b.n	8008e1a <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 8008df2:	6a3b      	ldr	r3, [r7, #32]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d110      	bne.n	8008e1a <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dfa:	b29a      	uxth	r2, r3
 8008dfc:	f107 0310 	add.w	r3, r7, #16
 8008e00:	9301      	str	r3, [sp, #4]
 8008e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e04:	9300      	str	r3, [sp, #0]
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	f001 fa1a 	bl	800a244 <xTaskCreate>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d001      	beq.n	8008e1a <osThreadNew+0x13e>
          hTask = NULL;
 8008e16:	2300      	movs	r3, #0
 8008e18:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008e1a:	693b      	ldr	r3, [r7, #16]
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3730      	adds	r7, #48	@ 0x30
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	200050e4 	.word	0x200050e4

08008e28 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b086      	sub	sp, #24
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e30:	f3ef 8305 	mrs	r3, IPSR
 8008e34:	613b      	str	r3, [r7, #16]
  return(result);
 8008e36:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d10f      	bne.n	8008e5c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e3c:	f3ef 8310 	mrs	r3, PRIMASK
 8008e40:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d105      	bne.n	8008e54 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008e48:	f3ef 8311 	mrs	r3, BASEPRI
 8008e4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d007      	beq.n	8008e64 <osDelay+0x3c>
 8008e54:	4b0a      	ldr	r3, [pc, #40]	@ (8008e80 <osDelay+0x58>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	d103      	bne.n	8008e64 <osDelay+0x3c>
    stat = osErrorISR;
 8008e5c:	f06f 0305 	mvn.w	r3, #5
 8008e60:	617b      	str	r3, [r7, #20]
 8008e62:	e007      	b.n	8008e74 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008e64:	2300      	movs	r3, #0
 8008e66:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d002      	beq.n	8008e74 <osDelay+0x4c>
      vTaskDelay(ticks);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f001 fb30 	bl	800a4d4 <vTaskDelay>
    }
  }

  return (stat);
 8008e74:	697b      	ldr	r3, [r7, #20]
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3718      	adds	r7, #24
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	200050e4 	.word	0x200050e4

08008e84 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b08a      	sub	sp, #40	@ 0x28
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e90:	f3ef 8305 	mrs	r3, IPSR
 8008e94:	613b      	str	r3, [r7, #16]
  return(result);
 8008e96:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	f040 8085 	bne.w	8008fa8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e9e:	f3ef 8310 	mrs	r3, PRIMASK
 8008ea2:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d105      	bne.n	8008eb6 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008eaa:	f3ef 8311 	mrs	r3, BASEPRI
 8008eae:	60bb      	str	r3, [r7, #8]
  return(result);
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d003      	beq.n	8008ebe <osMutexNew+0x3a>
 8008eb6:	4b3f      	ldr	r3, [pc, #252]	@ (8008fb4 <osMutexNew+0x130>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2b02      	cmp	r3, #2
 8008ebc:	d074      	beq.n	8008fa8 <osMutexNew+0x124>
    if (attr != NULL) {
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d003      	beq.n	8008ecc <osMutexNew+0x48>
      type = attr->attr_bits;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	623b      	str	r3, [r7, #32]
 8008eca:	e001      	b.n	8008ed0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008ed0:	6a3b      	ldr	r3, [r7, #32]
 8008ed2:	f003 0301 	and.w	r3, r3, #1
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d002      	beq.n	8008ee0 <osMutexNew+0x5c>
      rmtx = 1U;
 8008eda:	2301      	movs	r3, #1
 8008edc:	61fb      	str	r3, [r7, #28]
 8008ede:	e001      	b.n	8008ee4 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008ee4:	6a3b      	ldr	r3, [r7, #32]
 8008ee6:	f003 0308 	and.w	r3, r3, #8
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d15c      	bne.n	8008fa8 <osMutexNew+0x124>
      mem = -1;
 8008eee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008ef2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d015      	beq.n	8008f26 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d006      	beq.n	8008f10 <osMutexNew+0x8c>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	2b4f      	cmp	r3, #79	@ 0x4f
 8008f08:	d902      	bls.n	8008f10 <osMutexNew+0x8c>
          mem = 1;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	61bb      	str	r3, [r7, #24]
 8008f0e:	e00c      	b.n	8008f2a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d108      	bne.n	8008f2a <osMutexNew+0xa6>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d104      	bne.n	8008f2a <osMutexNew+0xa6>
            mem = 0;
 8008f20:	2300      	movs	r3, #0
 8008f22:	61bb      	str	r3, [r7, #24]
 8008f24:	e001      	b.n	8008f2a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8008f26:	2300      	movs	r3, #0
 8008f28:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d112      	bne.n	8008f56 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d007      	beq.n	8008f46 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	2004      	movs	r0, #4
 8008f3e:	f000 fb5c 	bl	80095fa <xQueueCreateMutexStatic>
 8008f42:	6278      	str	r0, [r7, #36]	@ 0x24
 8008f44:	e016      	b.n	8008f74 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	2001      	movs	r0, #1
 8008f4e:	f000 fb54 	bl	80095fa <xQueueCreateMutexStatic>
 8008f52:	6278      	str	r0, [r7, #36]	@ 0x24
 8008f54:	e00e      	b.n	8008f74 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d10b      	bne.n	8008f74 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d004      	beq.n	8008f6c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8008f62:	2004      	movs	r0, #4
 8008f64:	f000 fb31 	bl	80095ca <xQueueCreateMutex>
 8008f68:	6278      	str	r0, [r7, #36]	@ 0x24
 8008f6a:	e003      	b.n	8008f74 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8008f6c:	2001      	movs	r0, #1
 8008f6e:	f000 fb2c 	bl	80095ca <xQueueCreateMutex>
 8008f72:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d00c      	beq.n	8008f94 <osMutexNew+0x110>
        if (attr != NULL) {
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d003      	beq.n	8008f88 <osMutexNew+0x104>
          name = attr->name;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	617b      	str	r3, [r7, #20]
 8008f86:	e001      	b.n	8008f8c <osMutexNew+0x108>
        } else {
          name = NULL;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8008f8c:	6979      	ldr	r1, [r7, #20]
 8008f8e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008f90:	f001 f894 	bl	800a0bc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d006      	beq.n	8008fa8 <osMutexNew+0x124>
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d003      	beq.n	8008fa8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa2:	f043 0301 	orr.w	r3, r3, #1
 8008fa6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3728      	adds	r7, #40	@ 0x28
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	200050e4 	.word	0x200050e4

08008fb8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b088      	sub	sp, #32
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f023 0301 	bic.w	r3, r3, #1
 8008fc8:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f003 0301 	and.w	r3, r3, #1
 8008fd0:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fd6:	f3ef 8305 	mrs	r3, IPSR
 8008fda:	613b      	str	r3, [r7, #16]
  return(result);
 8008fdc:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d10f      	bne.n	8009002 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fe2:	f3ef 8310 	mrs	r3, PRIMASK
 8008fe6:	60fb      	str	r3, [r7, #12]
  return(result);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d105      	bne.n	8008ffa <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008fee:	f3ef 8311 	mrs	r3, BASEPRI
 8008ff2:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d007      	beq.n	800900a <osMutexAcquire+0x52>
 8008ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8009070 <osMutexAcquire+0xb8>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2b02      	cmp	r3, #2
 8009000:	d103      	bne.n	800900a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8009002:	f06f 0305 	mvn.w	r3, #5
 8009006:	61fb      	str	r3, [r7, #28]
 8009008:	e02c      	b.n	8009064 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d103      	bne.n	8009018 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8009010:	f06f 0303 	mvn.w	r3, #3
 8009014:	61fb      	str	r3, [r7, #28]
 8009016:	e025      	b.n	8009064 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d011      	beq.n	8009042 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800901e:	6839      	ldr	r1, [r7, #0]
 8009020:	69b8      	ldr	r0, [r7, #24]
 8009022:	f000 fb3c 	bl	800969e <xQueueTakeMutexRecursive>
 8009026:	4603      	mov	r3, r0
 8009028:	2b01      	cmp	r3, #1
 800902a:	d01b      	beq.n	8009064 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d003      	beq.n	800903a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8009032:	f06f 0301 	mvn.w	r3, #1
 8009036:	61fb      	str	r3, [r7, #28]
 8009038:	e014      	b.n	8009064 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800903a:	f06f 0302 	mvn.w	r3, #2
 800903e:	61fb      	str	r3, [r7, #28]
 8009040:	e010      	b.n	8009064 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8009042:	6839      	ldr	r1, [r7, #0]
 8009044:	69b8      	ldr	r0, [r7, #24]
 8009046:	f000 fdf9 	bl	8009c3c <xQueueSemaphoreTake>
 800904a:	4603      	mov	r3, r0
 800904c:	2b01      	cmp	r3, #1
 800904e:	d009      	beq.n	8009064 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d003      	beq.n	800905e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8009056:	f06f 0301 	mvn.w	r3, #1
 800905a:	61fb      	str	r3, [r7, #28]
 800905c:	e002      	b.n	8009064 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800905e:	f06f 0302 	mvn.w	r3, #2
 8009062:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009064:	69fb      	ldr	r3, [r7, #28]
}
 8009066:	4618      	mov	r0, r3
 8009068:	3720      	adds	r7, #32
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	200050e4 	.word	0x200050e4

08009074 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009074:	b580      	push	{r7, lr}
 8009076:	b088      	sub	sp, #32
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f023 0301 	bic.w	r3, r3, #1
 8009082:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f003 0301 	and.w	r3, r3, #1
 800908a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800908c:	2300      	movs	r3, #0
 800908e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009090:	f3ef 8305 	mrs	r3, IPSR
 8009094:	613b      	str	r3, [r7, #16]
  return(result);
 8009096:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8009098:	2b00      	cmp	r3, #0
 800909a:	d10f      	bne.n	80090bc <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800909c:	f3ef 8310 	mrs	r3, PRIMASK
 80090a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d105      	bne.n	80090b4 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80090a8:	f3ef 8311 	mrs	r3, BASEPRI
 80090ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d007      	beq.n	80090c4 <osMutexRelease+0x50>
 80090b4:	4b16      	ldr	r3, [pc, #88]	@ (8009110 <osMutexRelease+0x9c>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2b02      	cmp	r3, #2
 80090ba:	d103      	bne.n	80090c4 <osMutexRelease+0x50>
    stat = osErrorISR;
 80090bc:	f06f 0305 	mvn.w	r3, #5
 80090c0:	61fb      	str	r3, [r7, #28]
 80090c2:	e01f      	b.n	8009104 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 80090c4:	69bb      	ldr	r3, [r7, #24]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d103      	bne.n	80090d2 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 80090ca:	f06f 0303 	mvn.w	r3, #3
 80090ce:	61fb      	str	r3, [r7, #28]
 80090d0:	e018      	b.n	8009104 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d009      	beq.n	80090ec <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80090d8:	69b8      	ldr	r0, [r7, #24]
 80090da:	f000 faa9 	bl	8009630 <xQueueGiveMutexRecursive>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d00f      	beq.n	8009104 <osMutexRelease+0x90>
        stat = osErrorResource;
 80090e4:	f06f 0302 	mvn.w	r3, #2
 80090e8:	61fb      	str	r3, [r7, #28]
 80090ea:	e00b      	b.n	8009104 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80090ec:	2300      	movs	r3, #0
 80090ee:	2200      	movs	r2, #0
 80090f0:	2100      	movs	r1, #0
 80090f2:	69b8      	ldr	r0, [r7, #24]
 80090f4:	f000 fb0c 	bl	8009710 <xQueueGenericSend>
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d002      	beq.n	8009104 <osMutexRelease+0x90>
        stat = osErrorResource;
 80090fe:	f06f 0302 	mvn.w	r3, #2
 8009102:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8009104:	69fb      	ldr	r3, [r7, #28]
}
 8009106:	4618      	mov	r0, r3
 8009108:	3720      	adds	r7, #32
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	200050e4 	.word	0x200050e4

08009114 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	4a07      	ldr	r2, [pc, #28]	@ (8009140 <vApplicationGetIdleTaskMemory+0x2c>)
 8009124:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	4a06      	ldr	r2, [pc, #24]	@ (8009144 <vApplicationGetIdleTaskMemory+0x30>)
 800912a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009132:	601a      	str	r2, [r3, #0]
}
 8009134:	bf00      	nop
 8009136:	3714      	adds	r7, #20
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr
 8009140:	200050e8 	.word	0x200050e8
 8009144:	20005144 	.word	0x20005144

08009148 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009148:	b480      	push	{r7}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	60b9      	str	r1, [r7, #8]
 8009152:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	4a07      	ldr	r2, [pc, #28]	@ (8009174 <vApplicationGetTimerTaskMemory+0x2c>)
 8009158:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	4a06      	ldr	r2, [pc, #24]	@ (8009178 <vApplicationGetTimerTaskMemory+0x30>)
 800915e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009166:	601a      	str	r2, [r3, #0]
}
 8009168:	bf00      	nop
 800916a:	3714      	adds	r7, #20
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr
 8009174:	20005544 	.word	0x20005544
 8009178:	200055a0 	.word	0x200055a0

0800917c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f103 0208 	add.w	r2, r3, #8
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009194:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f103 0208 	add.w	r2, r3, #8
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f103 0208 	add.w	r2, r3, #8
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80091b0:	bf00      	nop
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80091ca:	bf00      	nop
 80091cc:	370c      	adds	r7, #12
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr

080091d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80091d6:	b480      	push	{r7}
 80091d8:	b085      	sub	sp, #20
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
 80091de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	689a      	ldr	r2, [r3, #8]
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	683a      	ldr	r2, [r7, #0]
 80091fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	683a      	ldr	r2, [r7, #0]
 8009200:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	1c5a      	adds	r2, r3, #1
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	601a      	str	r2, [r3, #0]
}
 8009212:	bf00      	nop
 8009214:	3714      	adds	r7, #20
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr

0800921e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800921e:	b480      	push	{r7}
 8009220:	b085      	sub	sp, #20
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
 8009226:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009234:	d103      	bne.n	800923e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	60fb      	str	r3, [r7, #12]
 800923c:	e00c      	b.n	8009258 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	3308      	adds	r3, #8
 8009242:	60fb      	str	r3, [r7, #12]
 8009244:	e002      	b.n	800924c <vListInsert+0x2e>
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	60fb      	str	r3, [r7, #12]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	68ba      	ldr	r2, [r7, #8]
 8009254:	429a      	cmp	r2, r3
 8009256:	d2f6      	bcs.n	8009246 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	685a      	ldr	r2, [r3, #4]
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	683a      	ldr	r2, [r7, #0]
 8009266:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	68fa      	ldr	r2, [r7, #12]
 800926c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	683a      	ldr	r2, [r7, #0]
 8009272:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	1c5a      	adds	r2, r3, #1
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	601a      	str	r2, [r3, #0]
}
 8009284:	bf00      	nop
 8009286:	3714      	adds	r7, #20
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009290:	b480      	push	{r7}
 8009292:	b085      	sub	sp, #20
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	6892      	ldr	r2, [r2, #8]
 80092a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	6852      	ldr	r2, [r2, #4]
 80092b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d103      	bne.n	80092c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	689a      	ldr	r2, [r3, #8]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	1e5a      	subs	r2, r3, #1
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3714      	adds	r7, #20
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr

080092e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d10d      	bne.n	8009314 <xQueueGenericReset+0x30>
	__asm volatile
 80092f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092fc:	b672      	cpsid	i
 80092fe:	f383 8811 	msr	BASEPRI, r3
 8009302:	f3bf 8f6f 	isb	sy
 8009306:	f3bf 8f4f 	dsb	sy
 800930a:	b662      	cpsie	i
 800930c:	60bb      	str	r3, [r7, #8]
}
 800930e:	bf00      	nop
 8009310:	bf00      	nop
 8009312:	e7fd      	b.n	8009310 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8009314:	f002 fc12 	bl	800bb3c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009320:	68f9      	ldr	r1, [r7, #12]
 8009322:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009324:	fb01 f303 	mul.w	r3, r1, r3
 8009328:	441a      	add	r2, r3
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2200      	movs	r2, #0
 8009332:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009344:	3b01      	subs	r3, #1
 8009346:	68f9      	ldr	r1, [r7, #12]
 8009348:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800934a:	fb01 f303 	mul.w	r3, r1, r3
 800934e:	441a      	add	r2, r3
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	22ff      	movs	r2, #255	@ 0xff
 8009358:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	22ff      	movs	r2, #255	@ 0xff
 8009360:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d114      	bne.n	8009394 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	691b      	ldr	r3, [r3, #16]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d01a      	beq.n	80093a8 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	3310      	adds	r3, #16
 8009376:	4618      	mov	r0, r3
 8009378:	f001 fb80 	bl	800aa7c <xTaskRemoveFromEventList>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d012      	beq.n	80093a8 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009382:	4b0d      	ldr	r3, [pc, #52]	@ (80093b8 <xQueueGenericReset+0xd4>)
 8009384:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009388:	601a      	str	r2, [r3, #0]
 800938a:	f3bf 8f4f 	dsb	sy
 800938e:	f3bf 8f6f 	isb	sy
 8009392:	e009      	b.n	80093a8 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	3310      	adds	r3, #16
 8009398:	4618      	mov	r0, r3
 800939a:	f7ff feef 	bl	800917c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	3324      	adds	r3, #36	@ 0x24
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7ff feea 	bl	800917c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80093a8:	f002 fbfe 	bl	800bba8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80093ac:	2301      	movs	r3, #1
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	e000ed04 	.word	0xe000ed04

080093bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b08e      	sub	sp, #56	@ 0x38
 80093c0:	af02      	add	r7, sp, #8
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	607a      	str	r2, [r7, #4]
 80093c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d10d      	bne.n	80093ec <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80093d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093d4:	b672      	cpsid	i
 80093d6:	f383 8811 	msr	BASEPRI, r3
 80093da:	f3bf 8f6f 	isb	sy
 80093de:	f3bf 8f4f 	dsb	sy
 80093e2:	b662      	cpsie	i
 80093e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80093e6:	bf00      	nop
 80093e8:	bf00      	nop
 80093ea:	e7fd      	b.n	80093e8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d10d      	bne.n	800940e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80093f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093f6:	b672      	cpsid	i
 80093f8:	f383 8811 	msr	BASEPRI, r3
 80093fc:	f3bf 8f6f 	isb	sy
 8009400:	f3bf 8f4f 	dsb	sy
 8009404:	b662      	cpsie	i
 8009406:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009408:	bf00      	nop
 800940a:	bf00      	nop
 800940c:	e7fd      	b.n	800940a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d002      	beq.n	800941a <xQueueGenericCreateStatic+0x5e>
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d001      	beq.n	800941e <xQueueGenericCreateStatic+0x62>
 800941a:	2301      	movs	r3, #1
 800941c:	e000      	b.n	8009420 <xQueueGenericCreateStatic+0x64>
 800941e:	2300      	movs	r3, #0
 8009420:	2b00      	cmp	r3, #0
 8009422:	d10d      	bne.n	8009440 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8009424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009428:	b672      	cpsid	i
 800942a:	f383 8811 	msr	BASEPRI, r3
 800942e:	f3bf 8f6f 	isb	sy
 8009432:	f3bf 8f4f 	dsb	sy
 8009436:	b662      	cpsie	i
 8009438:	623b      	str	r3, [r7, #32]
}
 800943a:	bf00      	nop
 800943c:	bf00      	nop
 800943e:	e7fd      	b.n	800943c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d102      	bne.n	800944c <xQueueGenericCreateStatic+0x90>
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d101      	bne.n	8009450 <xQueueGenericCreateStatic+0x94>
 800944c:	2301      	movs	r3, #1
 800944e:	e000      	b.n	8009452 <xQueueGenericCreateStatic+0x96>
 8009450:	2300      	movs	r3, #0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d10d      	bne.n	8009472 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8009456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800945a:	b672      	cpsid	i
 800945c:	f383 8811 	msr	BASEPRI, r3
 8009460:	f3bf 8f6f 	isb	sy
 8009464:	f3bf 8f4f 	dsb	sy
 8009468:	b662      	cpsie	i
 800946a:	61fb      	str	r3, [r7, #28]
}
 800946c:	bf00      	nop
 800946e:	bf00      	nop
 8009470:	e7fd      	b.n	800946e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009472:	2350      	movs	r3, #80	@ 0x50
 8009474:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	2b50      	cmp	r3, #80	@ 0x50
 800947a:	d00d      	beq.n	8009498 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800947c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009480:	b672      	cpsid	i
 8009482:	f383 8811 	msr	BASEPRI, r3
 8009486:	f3bf 8f6f 	isb	sy
 800948a:	f3bf 8f4f 	dsb	sy
 800948e:	b662      	cpsie	i
 8009490:	61bb      	str	r3, [r7, #24]
}
 8009492:	bf00      	nop
 8009494:	bf00      	nop
 8009496:	e7fd      	b.n	8009494 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009498:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800949e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d00d      	beq.n	80094c0 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80094a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094a6:	2201      	movs	r2, #1
 80094a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80094ac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80094b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094b2:	9300      	str	r3, [sp, #0]
 80094b4:	4613      	mov	r3, r2
 80094b6:	687a      	ldr	r2, [r7, #4]
 80094b8:	68b9      	ldr	r1, [r7, #8]
 80094ba:	68f8      	ldr	r0, [r7, #12]
 80094bc:	f000 f848 	bl	8009550 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80094c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3730      	adds	r7, #48	@ 0x30
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b08a      	sub	sp, #40	@ 0x28
 80094ce:	af02      	add	r7, sp, #8
 80094d0:	60f8      	str	r0, [r7, #12]
 80094d2:	60b9      	str	r1, [r7, #8]
 80094d4:	4613      	mov	r3, r2
 80094d6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d10d      	bne.n	80094fa <xQueueGenericCreate+0x30>
	__asm volatile
 80094de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094e2:	b672      	cpsid	i
 80094e4:	f383 8811 	msr	BASEPRI, r3
 80094e8:	f3bf 8f6f 	isb	sy
 80094ec:	f3bf 8f4f 	dsb	sy
 80094f0:	b662      	cpsie	i
 80094f2:	613b      	str	r3, [r7, #16]
}
 80094f4:	bf00      	nop
 80094f6:	bf00      	nop
 80094f8:	e7fd      	b.n	80094f6 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d102      	bne.n	8009506 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009500:	2300      	movs	r3, #0
 8009502:	61fb      	str	r3, [r7, #28]
 8009504:	e004      	b.n	8009510 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	68ba      	ldr	r2, [r7, #8]
 800950a:	fb02 f303 	mul.w	r3, r2, r3
 800950e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009510:	69fb      	ldr	r3, [r7, #28]
 8009512:	3350      	adds	r3, #80	@ 0x50
 8009514:	4618      	mov	r0, r3
 8009516:	f002 fc3f 	bl	800bd98 <pvPortMalloc>
 800951a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800951c:	69bb      	ldr	r3, [r7, #24]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d011      	beq.n	8009546 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	3350      	adds	r3, #80	@ 0x50
 800952a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800952c:	69bb      	ldr	r3, [r7, #24]
 800952e:	2200      	movs	r2, #0
 8009530:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009534:	79fa      	ldrb	r2, [r7, #7]
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	9300      	str	r3, [sp, #0]
 800953a:	4613      	mov	r3, r2
 800953c:	697a      	ldr	r2, [r7, #20]
 800953e:	68b9      	ldr	r1, [r7, #8]
 8009540:	68f8      	ldr	r0, [r7, #12]
 8009542:	f000 f805 	bl	8009550 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009546:	69bb      	ldr	r3, [r7, #24]
	}
 8009548:	4618      	mov	r0, r3
 800954a:	3720      	adds	r7, #32
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	607a      	str	r2, [r7, #4]
 800955c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d103      	bne.n	800956c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	69ba      	ldr	r2, [r7, #24]
 8009568:	601a      	str	r2, [r3, #0]
 800956a:	e002      	b.n	8009572 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009578:	69bb      	ldr	r3, [r7, #24]
 800957a:	68ba      	ldr	r2, [r7, #8]
 800957c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800957e:	2101      	movs	r1, #1
 8009580:	69b8      	ldr	r0, [r7, #24]
 8009582:	f7ff feaf 	bl	80092e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	78fa      	ldrb	r2, [r7, #3]
 800958a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800958e:	bf00      	nop
 8009590:	3710      	adds	r7, #16
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009596:	b580      	push	{r7, lr}
 8009598:	b082      	sub	sp, #8
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d00e      	beq.n	80095c2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80095b6:	2300      	movs	r3, #0
 80095b8:	2200      	movs	r2, #0
 80095ba:	2100      	movs	r1, #0
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 f8a7 	bl	8009710 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80095c2:	bf00      	nop
 80095c4:	3708      	adds	r7, #8
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b086      	sub	sp, #24
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	4603      	mov	r3, r0
 80095d2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80095d4:	2301      	movs	r3, #1
 80095d6:	617b      	str	r3, [r7, #20]
 80095d8:	2300      	movs	r3, #0
 80095da:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80095dc:	79fb      	ldrb	r3, [r7, #7]
 80095de:	461a      	mov	r2, r3
 80095e0:	6939      	ldr	r1, [r7, #16]
 80095e2:	6978      	ldr	r0, [r7, #20]
 80095e4:	f7ff ff71 	bl	80094ca <xQueueGenericCreate>
 80095e8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80095ea:	68f8      	ldr	r0, [r7, #12]
 80095ec:	f7ff ffd3 	bl	8009596 <prvInitialiseMutex>

		return xNewQueue;
 80095f0:	68fb      	ldr	r3, [r7, #12]
	}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3718      	adds	r7, #24
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b088      	sub	sp, #32
 80095fe:	af02      	add	r7, sp, #8
 8009600:	4603      	mov	r3, r0
 8009602:	6039      	str	r1, [r7, #0]
 8009604:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009606:	2301      	movs	r3, #1
 8009608:	617b      	str	r3, [r7, #20]
 800960a:	2300      	movs	r3, #0
 800960c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800960e:	79fb      	ldrb	r3, [r7, #7]
 8009610:	9300      	str	r3, [sp, #0]
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	2200      	movs	r2, #0
 8009616:	6939      	ldr	r1, [r7, #16]
 8009618:	6978      	ldr	r0, [r7, #20]
 800961a:	f7ff fecf 	bl	80093bc <xQueueGenericCreateStatic>
 800961e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009620:	68f8      	ldr	r0, [r7, #12]
 8009622:	f7ff ffb8 	bl	8009596 <prvInitialiseMutex>

		return xNewQueue;
 8009626:	68fb      	ldr	r3, [r7, #12]
	}
 8009628:	4618      	mov	r0, r3
 800962a:	3718      	adds	r7, #24
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009630:	b590      	push	{r4, r7, lr}
 8009632:	b087      	sub	sp, #28
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d10d      	bne.n	800965e <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 8009642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009646:	b672      	cpsid	i
 8009648:	f383 8811 	msr	BASEPRI, r3
 800964c:	f3bf 8f6f 	isb	sy
 8009650:	f3bf 8f4f 	dsb	sy
 8009654:	b662      	cpsie	i
 8009656:	60fb      	str	r3, [r7, #12]
}
 8009658:	bf00      	nop
 800965a:	bf00      	nop
 800965c:	e7fd      	b.n	800965a <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	689c      	ldr	r4, [r3, #8]
 8009662:	f001 fbfd 	bl	800ae60 <xTaskGetCurrentTaskHandle>
 8009666:	4603      	mov	r3, r0
 8009668:	429c      	cmp	r4, r3
 800966a:	d111      	bne.n	8009690 <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	1e5a      	subs	r2, r3, #1
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d105      	bne.n	800968a <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800967e:	2300      	movs	r3, #0
 8009680:	2200      	movs	r2, #0
 8009682:	2100      	movs	r1, #0
 8009684:	6938      	ldr	r0, [r7, #16]
 8009686:	f000 f843 	bl	8009710 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800968a:	2301      	movs	r3, #1
 800968c:	617b      	str	r3, [r7, #20]
 800968e:	e001      	b.n	8009694 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009690:	2300      	movs	r3, #0
 8009692:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009694:	697b      	ldr	r3, [r7, #20]
	}
 8009696:	4618      	mov	r0, r3
 8009698:	371c      	adds	r7, #28
 800969a:	46bd      	mov	sp, r7
 800969c:	bd90      	pop	{r4, r7, pc}

0800969e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800969e:	b590      	push	{r4, r7, lr}
 80096a0:	b087      	sub	sp, #28
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
 80096a6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d10d      	bne.n	80096ce <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 80096b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096b6:	b672      	cpsid	i
 80096b8:	f383 8811 	msr	BASEPRI, r3
 80096bc:	f3bf 8f6f 	isb	sy
 80096c0:	f3bf 8f4f 	dsb	sy
 80096c4:	b662      	cpsie	i
 80096c6:	60fb      	str	r3, [r7, #12]
}
 80096c8:	bf00      	nop
 80096ca:	bf00      	nop
 80096cc:	e7fd      	b.n	80096ca <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	689c      	ldr	r4, [r3, #8]
 80096d2:	f001 fbc5 	bl	800ae60 <xTaskGetCurrentTaskHandle>
 80096d6:	4603      	mov	r3, r0
 80096d8:	429c      	cmp	r4, r3
 80096da:	d107      	bne.n	80096ec <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	1c5a      	adds	r2, r3, #1
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80096e6:	2301      	movs	r3, #1
 80096e8:	617b      	str	r3, [r7, #20]
 80096ea:	e00c      	b.n	8009706 <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80096ec:	6839      	ldr	r1, [r7, #0]
 80096ee:	6938      	ldr	r0, [r7, #16]
 80096f0:	f000 faa4 	bl	8009c3c <xQueueSemaphoreTake>
 80096f4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d004      	beq.n	8009706 <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	1c5a      	adds	r2, r3, #1
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8009706:	697b      	ldr	r3, [r7, #20]
	}
 8009708:	4618      	mov	r0, r3
 800970a:	371c      	adds	r7, #28
 800970c:	46bd      	mov	sp, r7
 800970e:	bd90      	pop	{r4, r7, pc}

08009710 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b08e      	sub	sp, #56	@ 0x38
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	607a      	str	r2, [r7, #4]
 800971c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800971e:	2300      	movs	r3, #0
 8009720:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009728:	2b00      	cmp	r3, #0
 800972a:	d10d      	bne.n	8009748 <xQueueGenericSend+0x38>
	__asm volatile
 800972c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009730:	b672      	cpsid	i
 8009732:	f383 8811 	msr	BASEPRI, r3
 8009736:	f3bf 8f6f 	isb	sy
 800973a:	f3bf 8f4f 	dsb	sy
 800973e:	b662      	cpsie	i
 8009740:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009742:	bf00      	nop
 8009744:	bf00      	nop
 8009746:	e7fd      	b.n	8009744 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d103      	bne.n	8009756 <xQueueGenericSend+0x46>
 800974e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009752:	2b00      	cmp	r3, #0
 8009754:	d101      	bne.n	800975a <xQueueGenericSend+0x4a>
 8009756:	2301      	movs	r3, #1
 8009758:	e000      	b.n	800975c <xQueueGenericSend+0x4c>
 800975a:	2300      	movs	r3, #0
 800975c:	2b00      	cmp	r3, #0
 800975e:	d10d      	bne.n	800977c <xQueueGenericSend+0x6c>
	__asm volatile
 8009760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009764:	b672      	cpsid	i
 8009766:	f383 8811 	msr	BASEPRI, r3
 800976a:	f3bf 8f6f 	isb	sy
 800976e:	f3bf 8f4f 	dsb	sy
 8009772:	b662      	cpsie	i
 8009774:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009776:	bf00      	nop
 8009778:	bf00      	nop
 800977a:	e7fd      	b.n	8009778 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	2b02      	cmp	r3, #2
 8009780:	d103      	bne.n	800978a <xQueueGenericSend+0x7a>
 8009782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009786:	2b01      	cmp	r3, #1
 8009788:	d101      	bne.n	800978e <xQueueGenericSend+0x7e>
 800978a:	2301      	movs	r3, #1
 800978c:	e000      	b.n	8009790 <xQueueGenericSend+0x80>
 800978e:	2300      	movs	r3, #0
 8009790:	2b00      	cmp	r3, #0
 8009792:	d10d      	bne.n	80097b0 <xQueueGenericSend+0xa0>
	__asm volatile
 8009794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009798:	b672      	cpsid	i
 800979a:	f383 8811 	msr	BASEPRI, r3
 800979e:	f3bf 8f6f 	isb	sy
 80097a2:	f3bf 8f4f 	dsb	sy
 80097a6:	b662      	cpsie	i
 80097a8:	623b      	str	r3, [r7, #32]
}
 80097aa:	bf00      	nop
 80097ac:	bf00      	nop
 80097ae:	e7fd      	b.n	80097ac <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80097b0:	f001 fb66 	bl	800ae80 <xTaskGetSchedulerState>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d102      	bne.n	80097c0 <xQueueGenericSend+0xb0>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d101      	bne.n	80097c4 <xQueueGenericSend+0xb4>
 80097c0:	2301      	movs	r3, #1
 80097c2:	e000      	b.n	80097c6 <xQueueGenericSend+0xb6>
 80097c4:	2300      	movs	r3, #0
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d10d      	bne.n	80097e6 <xQueueGenericSend+0xd6>
	__asm volatile
 80097ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ce:	b672      	cpsid	i
 80097d0:	f383 8811 	msr	BASEPRI, r3
 80097d4:	f3bf 8f6f 	isb	sy
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	b662      	cpsie	i
 80097de:	61fb      	str	r3, [r7, #28]
}
 80097e0:	bf00      	nop
 80097e2:	bf00      	nop
 80097e4:	e7fd      	b.n	80097e2 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80097e6:	f002 f9a9 	bl	800bb3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80097ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d302      	bcc.n	80097fc <xQueueGenericSend+0xec>
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	2b02      	cmp	r3, #2
 80097fa:	d129      	bne.n	8009850 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80097fc:	683a      	ldr	r2, [r7, #0]
 80097fe:	68b9      	ldr	r1, [r7, #8]
 8009800:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009802:	f000 fb4b 	bl	8009e9c <prvCopyDataToQueue>
 8009806:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800980a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800980c:	2b00      	cmp	r3, #0
 800980e:	d010      	beq.n	8009832 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009812:	3324      	adds	r3, #36	@ 0x24
 8009814:	4618      	mov	r0, r3
 8009816:	f001 f931 	bl	800aa7c <xTaskRemoveFromEventList>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d013      	beq.n	8009848 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009820:	4b3f      	ldr	r3, [pc, #252]	@ (8009920 <xQueueGenericSend+0x210>)
 8009822:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009826:	601a      	str	r2, [r3, #0]
 8009828:	f3bf 8f4f 	dsb	sy
 800982c:	f3bf 8f6f 	isb	sy
 8009830:	e00a      	b.n	8009848 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009834:	2b00      	cmp	r3, #0
 8009836:	d007      	beq.n	8009848 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009838:	4b39      	ldr	r3, [pc, #228]	@ (8009920 <xQueueGenericSend+0x210>)
 800983a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800983e:	601a      	str	r2, [r3, #0]
 8009840:	f3bf 8f4f 	dsb	sy
 8009844:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009848:	f002 f9ae 	bl	800bba8 <vPortExitCritical>
				return pdPASS;
 800984c:	2301      	movs	r3, #1
 800984e:	e063      	b.n	8009918 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d103      	bne.n	800985e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009856:	f002 f9a7 	bl	800bba8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800985a:	2300      	movs	r3, #0
 800985c:	e05c      	b.n	8009918 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800985e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009860:	2b00      	cmp	r3, #0
 8009862:	d106      	bne.n	8009872 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009864:	f107 0314 	add.w	r3, r7, #20
 8009868:	4618      	mov	r0, r3
 800986a:	f001 f997 	bl	800ab9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800986e:	2301      	movs	r3, #1
 8009870:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009872:	f002 f999 	bl	800bba8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009876:	f000 fed1 	bl	800a61c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800987a:	f002 f95f 	bl	800bb3c <vPortEnterCritical>
 800987e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009880:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009884:	b25b      	sxtb	r3, r3
 8009886:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800988a:	d103      	bne.n	8009894 <xQueueGenericSend+0x184>
 800988c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800988e:	2200      	movs	r2, #0
 8009890:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009896:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800989a:	b25b      	sxtb	r3, r3
 800989c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80098a0:	d103      	bne.n	80098aa <xQueueGenericSend+0x19a>
 80098a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a4:	2200      	movs	r2, #0
 80098a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80098aa:	f002 f97d 	bl	800bba8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80098ae:	1d3a      	adds	r2, r7, #4
 80098b0:	f107 0314 	add.w	r3, r7, #20
 80098b4:	4611      	mov	r1, r2
 80098b6:	4618      	mov	r0, r3
 80098b8:	f001 f986 	bl	800abc8 <xTaskCheckForTimeOut>
 80098bc:	4603      	mov	r3, r0
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d124      	bne.n	800990c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80098c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80098c4:	f000 fbe2 	bl	800a08c <prvIsQueueFull>
 80098c8:	4603      	mov	r3, r0
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d018      	beq.n	8009900 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80098ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098d0:	3310      	adds	r3, #16
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	4611      	mov	r1, r2
 80098d6:	4618      	mov	r0, r3
 80098d8:	f001 f87a 	bl	800a9d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80098dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80098de:	f000 fb6d 	bl	8009fbc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80098e2:	f000 fea9 	bl	800a638 <xTaskResumeAll>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	f47f af7c 	bne.w	80097e6 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80098ee:	4b0c      	ldr	r3, [pc, #48]	@ (8009920 <xQueueGenericSend+0x210>)
 80098f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098f4:	601a      	str	r2, [r3, #0]
 80098f6:	f3bf 8f4f 	dsb	sy
 80098fa:	f3bf 8f6f 	isb	sy
 80098fe:	e772      	b.n	80097e6 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009900:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009902:	f000 fb5b 	bl	8009fbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009906:	f000 fe97 	bl	800a638 <xTaskResumeAll>
 800990a:	e76c      	b.n	80097e6 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800990c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800990e:	f000 fb55 	bl	8009fbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009912:	f000 fe91 	bl	800a638 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009916:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009918:	4618      	mov	r0, r3
 800991a:	3738      	adds	r7, #56	@ 0x38
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}
 8009920:	e000ed04 	.word	0xe000ed04

08009924 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b08e      	sub	sp, #56	@ 0x38
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	607a      	str	r2, [r7, #4]
 8009930:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009938:	2b00      	cmp	r3, #0
 800993a:	d10d      	bne.n	8009958 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800993c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009940:	b672      	cpsid	i
 8009942:	f383 8811 	msr	BASEPRI, r3
 8009946:	f3bf 8f6f 	isb	sy
 800994a:	f3bf 8f4f 	dsb	sy
 800994e:	b662      	cpsie	i
 8009950:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009952:	bf00      	nop
 8009954:	bf00      	nop
 8009956:	e7fd      	b.n	8009954 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d103      	bne.n	8009966 <xQueueGenericSendFromISR+0x42>
 800995e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009962:	2b00      	cmp	r3, #0
 8009964:	d101      	bne.n	800996a <xQueueGenericSendFromISR+0x46>
 8009966:	2301      	movs	r3, #1
 8009968:	e000      	b.n	800996c <xQueueGenericSendFromISR+0x48>
 800996a:	2300      	movs	r3, #0
 800996c:	2b00      	cmp	r3, #0
 800996e:	d10d      	bne.n	800998c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8009970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009974:	b672      	cpsid	i
 8009976:	f383 8811 	msr	BASEPRI, r3
 800997a:	f3bf 8f6f 	isb	sy
 800997e:	f3bf 8f4f 	dsb	sy
 8009982:	b662      	cpsie	i
 8009984:	623b      	str	r3, [r7, #32]
}
 8009986:	bf00      	nop
 8009988:	bf00      	nop
 800998a:	e7fd      	b.n	8009988 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	2b02      	cmp	r3, #2
 8009990:	d103      	bne.n	800999a <xQueueGenericSendFromISR+0x76>
 8009992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009996:	2b01      	cmp	r3, #1
 8009998:	d101      	bne.n	800999e <xQueueGenericSendFromISR+0x7a>
 800999a:	2301      	movs	r3, #1
 800999c:	e000      	b.n	80099a0 <xQueueGenericSendFromISR+0x7c>
 800999e:	2300      	movs	r3, #0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d10d      	bne.n	80099c0 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80099a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099a8:	b672      	cpsid	i
 80099aa:	f383 8811 	msr	BASEPRI, r3
 80099ae:	f3bf 8f6f 	isb	sy
 80099b2:	f3bf 8f4f 	dsb	sy
 80099b6:	b662      	cpsie	i
 80099b8:	61fb      	str	r3, [r7, #28]
}
 80099ba:	bf00      	nop
 80099bc:	bf00      	nop
 80099be:	e7fd      	b.n	80099bc <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80099c0:	f002 f9a4 	bl	800bd0c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80099c4:	f3ef 8211 	mrs	r2, BASEPRI
 80099c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099cc:	b672      	cpsid	i
 80099ce:	f383 8811 	msr	BASEPRI, r3
 80099d2:	f3bf 8f6f 	isb	sy
 80099d6:	f3bf 8f4f 	dsb	sy
 80099da:	b662      	cpsie	i
 80099dc:	61ba      	str	r2, [r7, #24]
 80099de:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80099e0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80099e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80099e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80099e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d302      	bcc.n	80099f6 <xQueueGenericSendFromISR+0xd2>
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	2b02      	cmp	r3, #2
 80099f4:	d12c      	bne.n	8009a50 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80099f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80099fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009a00:	683a      	ldr	r2, [r7, #0]
 8009a02:	68b9      	ldr	r1, [r7, #8]
 8009a04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a06:	f000 fa49 	bl	8009e9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009a0a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8009a0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a12:	d112      	bne.n	8009a3a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d016      	beq.n	8009a4a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a1e:	3324      	adds	r3, #36	@ 0x24
 8009a20:	4618      	mov	r0, r3
 8009a22:	f001 f82b 	bl	800aa7c <xTaskRemoveFromEventList>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d00e      	beq.n	8009a4a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d00b      	beq.n	8009a4a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2201      	movs	r2, #1
 8009a36:	601a      	str	r2, [r3, #0]
 8009a38:	e007      	b.n	8009a4a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009a3a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009a3e:	3301      	adds	r3, #1
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	b25a      	sxtb	r2, r3
 8009a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8009a4e:	e001      	b.n	8009a54 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009a50:	2300      	movs	r3, #0
 8009a52:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a56:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009a5e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3738      	adds	r7, #56	@ 0x38
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
	...

08009a6c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b08c      	sub	sp, #48	@ 0x30
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	60f8      	str	r0, [r7, #12]
 8009a74:	60b9      	str	r1, [r7, #8]
 8009a76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d10d      	bne.n	8009aa2 <xQueueReceive+0x36>
	__asm volatile
 8009a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a8a:	b672      	cpsid	i
 8009a8c:	f383 8811 	msr	BASEPRI, r3
 8009a90:	f3bf 8f6f 	isb	sy
 8009a94:	f3bf 8f4f 	dsb	sy
 8009a98:	b662      	cpsie	i
 8009a9a:	623b      	str	r3, [r7, #32]
}
 8009a9c:	bf00      	nop
 8009a9e:	bf00      	nop
 8009aa0:	e7fd      	b.n	8009a9e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d103      	bne.n	8009ab0 <xQueueReceive+0x44>
 8009aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d101      	bne.n	8009ab4 <xQueueReceive+0x48>
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	e000      	b.n	8009ab6 <xQueueReceive+0x4a>
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d10d      	bne.n	8009ad6 <xQueueReceive+0x6a>
	__asm volatile
 8009aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009abe:	b672      	cpsid	i
 8009ac0:	f383 8811 	msr	BASEPRI, r3
 8009ac4:	f3bf 8f6f 	isb	sy
 8009ac8:	f3bf 8f4f 	dsb	sy
 8009acc:	b662      	cpsie	i
 8009ace:	61fb      	str	r3, [r7, #28]
}
 8009ad0:	bf00      	nop
 8009ad2:	bf00      	nop
 8009ad4:	e7fd      	b.n	8009ad2 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ad6:	f001 f9d3 	bl	800ae80 <xTaskGetSchedulerState>
 8009ada:	4603      	mov	r3, r0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d102      	bne.n	8009ae6 <xQueueReceive+0x7a>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d101      	bne.n	8009aea <xQueueReceive+0x7e>
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	e000      	b.n	8009aec <xQueueReceive+0x80>
 8009aea:	2300      	movs	r3, #0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d10d      	bne.n	8009b0c <xQueueReceive+0xa0>
	__asm volatile
 8009af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009af4:	b672      	cpsid	i
 8009af6:	f383 8811 	msr	BASEPRI, r3
 8009afa:	f3bf 8f6f 	isb	sy
 8009afe:	f3bf 8f4f 	dsb	sy
 8009b02:	b662      	cpsie	i
 8009b04:	61bb      	str	r3, [r7, #24]
}
 8009b06:	bf00      	nop
 8009b08:	bf00      	nop
 8009b0a:	e7fd      	b.n	8009b08 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009b0c:	f002 f816 	bl	800bb3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b14:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d01f      	beq.n	8009b5c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009b1c:	68b9      	ldr	r1, [r7, #8]
 8009b1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b20:	f000 fa26 	bl	8009f70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b26:	1e5a      	subs	r2, r3, #1
 8009b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b2a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b2e:	691b      	ldr	r3, [r3, #16]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d00f      	beq.n	8009b54 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b36:	3310      	adds	r3, #16
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f000 ff9f 	bl	800aa7c <xTaskRemoveFromEventList>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d007      	beq.n	8009b54 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009b44:	4b3c      	ldr	r3, [pc, #240]	@ (8009c38 <xQueueReceive+0x1cc>)
 8009b46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b4a:	601a      	str	r2, [r3, #0]
 8009b4c:	f3bf 8f4f 	dsb	sy
 8009b50:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009b54:	f002 f828 	bl	800bba8 <vPortExitCritical>
				return pdPASS;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	e069      	b.n	8009c30 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d103      	bne.n	8009b6a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009b62:	f002 f821 	bl	800bba8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009b66:	2300      	movs	r3, #0
 8009b68:	e062      	b.n	8009c30 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d106      	bne.n	8009b7e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b70:	f107 0310 	add.w	r3, r7, #16
 8009b74:	4618      	mov	r0, r3
 8009b76:	f001 f811 	bl	800ab9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b7e:	f002 f813 	bl	800bba8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b82:	f000 fd4b 	bl	800a61c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b86:	f001 ffd9 	bl	800bb3c <vPortEnterCritical>
 8009b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b90:	b25b      	sxtb	r3, r3
 8009b92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b96:	d103      	bne.n	8009ba0 <xQueueReceive+0x134>
 8009b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009ba6:	b25b      	sxtb	r3, r3
 8009ba8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009bac:	d103      	bne.n	8009bb6 <xQueueReceive+0x14a>
 8009bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009bb6:	f001 fff7 	bl	800bba8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009bba:	1d3a      	adds	r2, r7, #4
 8009bbc:	f107 0310 	add.w	r3, r7, #16
 8009bc0:	4611      	mov	r1, r2
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f001 f800 	bl	800abc8 <xTaskCheckForTimeOut>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d123      	bne.n	8009c16 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009bce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bd0:	f000 fa46 	bl	800a060 <prvIsQueueEmpty>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d017      	beq.n	8009c0a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bdc:	3324      	adds	r3, #36	@ 0x24
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	4611      	mov	r1, r2
 8009be2:	4618      	mov	r0, r3
 8009be4:	f000 fef4 	bl	800a9d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009be8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bea:	f000 f9e7 	bl	8009fbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009bee:	f000 fd23 	bl	800a638 <xTaskResumeAll>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d189      	bne.n	8009b0c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8009bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8009c38 <xQueueReceive+0x1cc>)
 8009bfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bfe:	601a      	str	r2, [r3, #0]
 8009c00:	f3bf 8f4f 	dsb	sy
 8009c04:	f3bf 8f6f 	isb	sy
 8009c08:	e780      	b.n	8009b0c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009c0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c0c:	f000 f9d6 	bl	8009fbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c10:	f000 fd12 	bl	800a638 <xTaskResumeAll>
 8009c14:	e77a      	b.n	8009b0c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009c16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c18:	f000 f9d0 	bl	8009fbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c1c:	f000 fd0c 	bl	800a638 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c22:	f000 fa1d 	bl	800a060 <prvIsQueueEmpty>
 8009c26:	4603      	mov	r3, r0
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	f43f af6f 	beq.w	8009b0c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009c2e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3730      	adds	r7, #48	@ 0x30
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	e000ed04 	.word	0xe000ed04

08009c3c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b08e      	sub	sp, #56	@ 0x38
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009c46:	2300      	movs	r3, #0
 8009c48:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d10d      	bne.n	8009c74 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8009c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c5c:	b672      	cpsid	i
 8009c5e:	f383 8811 	msr	BASEPRI, r3
 8009c62:	f3bf 8f6f 	isb	sy
 8009c66:	f3bf 8f4f 	dsb	sy
 8009c6a:	b662      	cpsie	i
 8009c6c:	623b      	str	r3, [r7, #32]
}
 8009c6e:	bf00      	nop
 8009c70:	bf00      	nop
 8009c72:	e7fd      	b.n	8009c70 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00d      	beq.n	8009c98 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8009c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c80:	b672      	cpsid	i
 8009c82:	f383 8811 	msr	BASEPRI, r3
 8009c86:	f3bf 8f6f 	isb	sy
 8009c8a:	f3bf 8f4f 	dsb	sy
 8009c8e:	b662      	cpsie	i
 8009c90:	61fb      	str	r3, [r7, #28]
}
 8009c92:	bf00      	nop
 8009c94:	bf00      	nop
 8009c96:	e7fd      	b.n	8009c94 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c98:	f001 f8f2 	bl	800ae80 <xTaskGetSchedulerState>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d102      	bne.n	8009ca8 <xQueueSemaphoreTake+0x6c>
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d101      	bne.n	8009cac <xQueueSemaphoreTake+0x70>
 8009ca8:	2301      	movs	r3, #1
 8009caa:	e000      	b.n	8009cae <xQueueSemaphoreTake+0x72>
 8009cac:	2300      	movs	r3, #0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d10d      	bne.n	8009cce <xQueueSemaphoreTake+0x92>
	__asm volatile
 8009cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cb6:	b672      	cpsid	i
 8009cb8:	f383 8811 	msr	BASEPRI, r3
 8009cbc:	f3bf 8f6f 	isb	sy
 8009cc0:	f3bf 8f4f 	dsb	sy
 8009cc4:	b662      	cpsie	i
 8009cc6:	61bb      	str	r3, [r7, #24]
}
 8009cc8:	bf00      	nop
 8009cca:	bf00      	nop
 8009ccc:	e7fd      	b.n	8009cca <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009cce:	f001 ff35 	bl	800bb3c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cd6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d024      	beq.n	8009d28 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ce0:	1e5a      	subs	r2, r3, #1
 8009ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ce4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d104      	bne.n	8009cf8 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009cee:	f001 fa49 	bl	800b184 <pvTaskIncrementMutexHeldCount>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cf6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cfa:	691b      	ldr	r3, [r3, #16]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d00f      	beq.n	8009d20 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d02:	3310      	adds	r3, #16
 8009d04:	4618      	mov	r0, r3
 8009d06:	f000 feb9 	bl	800aa7c <xTaskRemoveFromEventList>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d007      	beq.n	8009d20 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009d10:	4b55      	ldr	r3, [pc, #340]	@ (8009e68 <xQueueSemaphoreTake+0x22c>)
 8009d12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d16:	601a      	str	r2, [r3, #0]
 8009d18:	f3bf 8f4f 	dsb	sy
 8009d1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009d20:	f001 ff42 	bl	800bba8 <vPortExitCritical>
				return pdPASS;
 8009d24:	2301      	movs	r3, #1
 8009d26:	e09a      	b.n	8009e5e <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d114      	bne.n	8009d58 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d00d      	beq.n	8009d50 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8009d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d38:	b672      	cpsid	i
 8009d3a:	f383 8811 	msr	BASEPRI, r3
 8009d3e:	f3bf 8f6f 	isb	sy
 8009d42:	f3bf 8f4f 	dsb	sy
 8009d46:	b662      	cpsie	i
 8009d48:	617b      	str	r3, [r7, #20]
}
 8009d4a:	bf00      	nop
 8009d4c:	bf00      	nop
 8009d4e:	e7fd      	b.n	8009d4c <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009d50:	f001 ff2a 	bl	800bba8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009d54:	2300      	movs	r3, #0
 8009d56:	e082      	b.n	8009e5e <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d106      	bne.n	8009d6c <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d5e:	f107 030c 	add.w	r3, r7, #12
 8009d62:	4618      	mov	r0, r3
 8009d64:	f000 ff1a 	bl	800ab9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d6c:	f001 ff1c 	bl	800bba8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009d70:	f000 fc54 	bl	800a61c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d74:	f001 fee2 	bl	800bb3c <vPortEnterCritical>
 8009d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d7a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009d7e:	b25b      	sxtb	r3, r3
 8009d80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009d84:	d103      	bne.n	8009d8e <xQueueSemaphoreTake+0x152>
 8009d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009d94:	b25b      	sxtb	r3, r3
 8009d96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009d9a:	d103      	bne.n	8009da4 <xQueueSemaphoreTake+0x168>
 8009d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009da4:	f001 ff00 	bl	800bba8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009da8:	463a      	mov	r2, r7
 8009daa:	f107 030c 	add.w	r3, r7, #12
 8009dae:	4611      	mov	r1, r2
 8009db0:	4618      	mov	r0, r3
 8009db2:	f000 ff09 	bl	800abc8 <xTaskCheckForTimeOut>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d132      	bne.n	8009e22 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009dbc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009dbe:	f000 f94f 	bl	800a060 <prvIsQueueEmpty>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d026      	beq.n	8009e16 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d109      	bne.n	8009de4 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8009dd0:	f001 feb4 	bl	800bb3c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f001 f86f 	bl	800aebc <xTaskPriorityInherit>
 8009dde:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009de0:	f001 fee2 	bl	800bba8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009de6:	3324      	adds	r3, #36	@ 0x24
 8009de8:	683a      	ldr	r2, [r7, #0]
 8009dea:	4611      	mov	r1, r2
 8009dec:	4618      	mov	r0, r3
 8009dee:	f000 fdef 	bl	800a9d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009df2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009df4:	f000 f8e2 	bl	8009fbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009df8:	f000 fc1e 	bl	800a638 <xTaskResumeAll>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	f47f af65 	bne.w	8009cce <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8009e04:	4b18      	ldr	r3, [pc, #96]	@ (8009e68 <xQueueSemaphoreTake+0x22c>)
 8009e06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e0a:	601a      	str	r2, [r3, #0]
 8009e0c:	f3bf 8f4f 	dsb	sy
 8009e10:	f3bf 8f6f 	isb	sy
 8009e14:	e75b      	b.n	8009cce <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009e16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009e18:	f000 f8d0 	bl	8009fbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e1c:	f000 fc0c 	bl	800a638 <xTaskResumeAll>
 8009e20:	e755      	b.n	8009cce <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009e22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009e24:	f000 f8ca 	bl	8009fbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e28:	f000 fc06 	bl	800a638 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009e2e:	f000 f917 	bl	800a060 <prvIsQueueEmpty>
 8009e32:	4603      	mov	r3, r0
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	f43f af4a 	beq.w	8009cce <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d00d      	beq.n	8009e5c <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8009e40:	f001 fe7c 	bl	800bb3c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009e44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009e46:	f000 f811 	bl	8009e6c <prvGetDisinheritPriorityAfterTimeout>
 8009e4a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009e52:	4618      	mov	r0, r3
 8009e54:	f001 f90e 	bl	800b074 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009e58:	f001 fea6 	bl	800bba8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009e5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3738      	adds	r7, #56	@ 0x38
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	bf00      	nop
 8009e68:	e000ed04 	.word	0xe000ed04

08009e6c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b085      	sub	sp, #20
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d006      	beq.n	8009e8a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8009e86:	60fb      	str	r3, [r7, #12]
 8009e88:	e001      	b.n	8009e8e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
	}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3714      	adds	r7, #20
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr

08009e9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b086      	sub	sp, #24
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eb0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d10d      	bne.n	8009ed6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d14d      	bne.n	8009f5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	689b      	ldr	r3, [r3, #8]
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f001 f860 	bl	800af8c <xTaskPriorityDisinherit>
 8009ecc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	609a      	str	r2, [r3, #8]
 8009ed4:	e043      	b.n	8009f5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d119      	bne.n	8009f10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	6858      	ldr	r0, [r3, #4]
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	68b9      	ldr	r1, [r7, #8]
 8009ee8:	f00c fd03 	bl	80168f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	685a      	ldr	r2, [r3, #4]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ef4:	441a      	add	r2, r3
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	685a      	ldr	r2, [r3, #4]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d32b      	bcc.n	8009f5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681a      	ldr	r2, [r3, #0]
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	605a      	str	r2, [r3, #4]
 8009f0e:	e026      	b.n	8009f5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	68d8      	ldr	r0, [r3, #12]
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f18:	461a      	mov	r2, r3
 8009f1a:	68b9      	ldr	r1, [r7, #8]
 8009f1c:	f00c fce9 	bl	80168f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	68da      	ldr	r2, [r3, #12]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f28:	425b      	negs	r3, r3
 8009f2a:	441a      	add	r2, r3
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	68da      	ldr	r2, [r3, #12]
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d207      	bcs.n	8009f4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	689a      	ldr	r2, [r3, #8]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f44:	425b      	negs	r3, r3
 8009f46:	441a      	add	r2, r3
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2b02      	cmp	r3, #2
 8009f50:	d105      	bne.n	8009f5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d002      	beq.n	8009f5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	1c5a      	adds	r2, r3, #1
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009f66:	697b      	ldr	r3, [r7, #20]
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3718      	adds	r7, #24
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d018      	beq.n	8009fb4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	68da      	ldr	r2, [r3, #12]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f8a:	441a      	add	r2, r3
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	68da      	ldr	r2, [r3, #12]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d303      	bcc.n	8009fa4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	68d9      	ldr	r1, [r3, #12]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fac:	461a      	mov	r2, r3
 8009fae:	6838      	ldr	r0, [r7, #0]
 8009fb0:	f00c fc9f 	bl	80168f2 <memcpy>
	}
}
 8009fb4:	bf00      	nop
 8009fb6:	3708      	adds	r7, #8
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009fc4:	f001 fdba 	bl	800bb3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009fce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009fd0:	e011      	b.n	8009ff6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d012      	beq.n	800a000 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	3324      	adds	r3, #36	@ 0x24
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f000 fd4c 	bl	800aa7c <xTaskRemoveFromEventList>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d001      	beq.n	8009fee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009fea:	f000 fe55 	bl	800ac98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009fee:	7bfb      	ldrb	r3, [r7, #15]
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	b2db      	uxtb	r3, r3
 8009ff4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	dce9      	bgt.n	8009fd2 <prvUnlockQueue+0x16>
 8009ffe:	e000      	b.n	800a002 <prvUnlockQueue+0x46>
					break;
 800a000:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	22ff      	movs	r2, #255	@ 0xff
 800a006:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a00a:	f001 fdcd 	bl	800bba8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a00e:	f001 fd95 	bl	800bb3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a018:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a01a:	e011      	b.n	800a040 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	691b      	ldr	r3, [r3, #16]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d012      	beq.n	800a04a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	3310      	adds	r3, #16
 800a028:	4618      	mov	r0, r3
 800a02a:	f000 fd27 	bl	800aa7c <xTaskRemoveFromEventList>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d001      	beq.n	800a038 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a034:	f000 fe30 	bl	800ac98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a038:	7bbb      	ldrb	r3, [r7, #14]
 800a03a:	3b01      	subs	r3, #1
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a040:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a044:	2b00      	cmp	r3, #0
 800a046:	dce9      	bgt.n	800a01c <prvUnlockQueue+0x60>
 800a048:	e000      	b.n	800a04c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a04a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	22ff      	movs	r2, #255	@ 0xff
 800a050:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a054:	f001 fda8 	bl	800bba8 <vPortExitCritical>
}
 800a058:	bf00      	nop
 800a05a:	3710      	adds	r7, #16
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a068:	f001 fd68 	bl	800bb3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a070:	2b00      	cmp	r3, #0
 800a072:	d102      	bne.n	800a07a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a074:	2301      	movs	r3, #1
 800a076:	60fb      	str	r3, [r7, #12]
 800a078:	e001      	b.n	800a07e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a07a:	2300      	movs	r3, #0
 800a07c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a07e:	f001 fd93 	bl	800bba8 <vPortExitCritical>

	return xReturn;
 800a082:	68fb      	ldr	r3, [r7, #12]
}
 800a084:	4618      	mov	r0, r3
 800a086:	3710      	adds	r7, #16
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a094:	f001 fd52 	bl	800bb3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d102      	bne.n	800a0aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	60fb      	str	r3, [r7, #12]
 800a0a8:	e001      	b.n	800a0ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a0ae:	f001 fd7b 	bl	800bba8 <vPortExitCritical>

	return xReturn;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3710      	adds	r7, #16
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a0bc:	b480      	push	{r7}
 800a0be:	b085      	sub	sp, #20
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	60fb      	str	r3, [r7, #12]
 800a0ca:	e014      	b.n	800a0f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a0cc:	4a0f      	ldr	r2, [pc, #60]	@ (800a10c <vQueueAddToRegistry+0x50>)
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d10b      	bne.n	800a0f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a0d8:	490c      	ldr	r1, [pc, #48]	@ (800a10c <vQueueAddToRegistry+0x50>)
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	683a      	ldr	r2, [r7, #0]
 800a0de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a0e2:	4a0a      	ldr	r2, [pc, #40]	@ (800a10c <vQueueAddToRegistry+0x50>)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	00db      	lsls	r3, r3, #3
 800a0e8:	4413      	add	r3, r2
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a0ee:	e006      	b.n	800a0fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	60fb      	str	r3, [r7, #12]
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2b07      	cmp	r3, #7
 800a0fa:	d9e7      	bls.n	800a0cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a0fc:	bf00      	nop
 800a0fe:	bf00      	nop
 800a100:	3714      	adds	r7, #20
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr
 800a10a:	bf00      	nop
 800a10c:	20005da0 	.word	0x20005da0

0800a110 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a110:	b580      	push	{r7, lr}
 800a112:	b086      	sub	sp, #24
 800a114:	af00      	add	r7, sp, #0
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	60b9      	str	r1, [r7, #8]
 800a11a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a120:	f001 fd0c 	bl	800bb3c <vPortEnterCritical>
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a12a:	b25b      	sxtb	r3, r3
 800a12c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a130:	d103      	bne.n	800a13a <vQueueWaitForMessageRestricted+0x2a>
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	2200      	movs	r2, #0
 800a136:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a140:	b25b      	sxtb	r3, r3
 800a142:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a146:	d103      	bne.n	800a150 <vQueueWaitForMessageRestricted+0x40>
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	2200      	movs	r2, #0
 800a14c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a150:	f001 fd2a 	bl	800bba8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d106      	bne.n	800a16a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	3324      	adds	r3, #36	@ 0x24
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	68b9      	ldr	r1, [r7, #8]
 800a164:	4618      	mov	r0, r3
 800a166:	f000 fc5b 	bl	800aa20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a16a:	6978      	ldr	r0, [r7, #20]
 800a16c:	f7ff ff26 	bl	8009fbc <prvUnlockQueue>
	}
 800a170:	bf00      	nop
 800a172:	3718      	adds	r7, #24
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b08e      	sub	sp, #56	@ 0x38
 800a17c:	af04      	add	r7, sp, #16
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	607a      	str	r2, [r7, #4]
 800a184:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d10d      	bne.n	800a1a8 <xTaskCreateStatic+0x30>
	__asm volatile
 800a18c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a190:	b672      	cpsid	i
 800a192:	f383 8811 	msr	BASEPRI, r3
 800a196:	f3bf 8f6f 	isb	sy
 800a19a:	f3bf 8f4f 	dsb	sy
 800a19e:	b662      	cpsie	i
 800a1a0:	623b      	str	r3, [r7, #32]
}
 800a1a2:	bf00      	nop
 800a1a4:	bf00      	nop
 800a1a6:	e7fd      	b.n	800a1a4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800a1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d10d      	bne.n	800a1ca <xTaskCreateStatic+0x52>
	__asm volatile
 800a1ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1b2:	b672      	cpsid	i
 800a1b4:	f383 8811 	msr	BASEPRI, r3
 800a1b8:	f3bf 8f6f 	isb	sy
 800a1bc:	f3bf 8f4f 	dsb	sy
 800a1c0:	b662      	cpsie	i
 800a1c2:	61fb      	str	r3, [r7, #28]
}
 800a1c4:	bf00      	nop
 800a1c6:	bf00      	nop
 800a1c8:	e7fd      	b.n	800a1c6 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a1ca:	235c      	movs	r3, #92	@ 0x5c
 800a1cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	2b5c      	cmp	r3, #92	@ 0x5c
 800a1d2:	d00d      	beq.n	800a1f0 <xTaskCreateStatic+0x78>
	__asm volatile
 800a1d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1d8:	b672      	cpsid	i
 800a1da:	f383 8811 	msr	BASEPRI, r3
 800a1de:	f3bf 8f6f 	isb	sy
 800a1e2:	f3bf 8f4f 	dsb	sy
 800a1e6:	b662      	cpsie	i
 800a1e8:	61bb      	str	r3, [r7, #24]
}
 800a1ea:	bf00      	nop
 800a1ec:	bf00      	nop
 800a1ee:	e7fd      	b.n	800a1ec <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a1f0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a1f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d01e      	beq.n	800a236 <xTaskCreateStatic+0xbe>
 800a1f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d01b      	beq.n	800a236 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a1fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a200:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a204:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a206:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a20a:	2202      	movs	r2, #2
 800a20c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a210:	2300      	movs	r3, #0
 800a212:	9303      	str	r3, [sp, #12]
 800a214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a216:	9302      	str	r3, [sp, #8]
 800a218:	f107 0314 	add.w	r3, r7, #20
 800a21c:	9301      	str	r3, [sp, #4]
 800a21e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a220:	9300      	str	r3, [sp, #0]
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	687a      	ldr	r2, [r7, #4]
 800a226:	68b9      	ldr	r1, [r7, #8]
 800a228:	68f8      	ldr	r0, [r7, #12]
 800a22a:	f000 f850 	bl	800a2ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a22e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a230:	f000 f8e0 	bl	800a3f4 <prvAddNewTaskToReadyList>
 800a234:	e001      	b.n	800a23a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800a236:	2300      	movs	r3, #0
 800a238:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a23a:	697b      	ldr	r3, [r7, #20]
	}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3728      	adds	r7, #40	@ 0x28
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a244:	b580      	push	{r7, lr}
 800a246:	b08c      	sub	sp, #48	@ 0x30
 800a248:	af04      	add	r7, sp, #16
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	60b9      	str	r1, [r7, #8]
 800a24e:	603b      	str	r3, [r7, #0]
 800a250:	4613      	mov	r3, r2
 800a252:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a254:	88fb      	ldrh	r3, [r7, #6]
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	4618      	mov	r0, r3
 800a25a:	f001 fd9d 	bl	800bd98 <pvPortMalloc>
 800a25e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d00e      	beq.n	800a284 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a266:	205c      	movs	r0, #92	@ 0x5c
 800a268:	f001 fd96 	bl	800bd98 <pvPortMalloc>
 800a26c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a26e:	69fb      	ldr	r3, [r7, #28]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d003      	beq.n	800a27c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	697a      	ldr	r2, [r7, #20]
 800a278:	631a      	str	r2, [r3, #48]	@ 0x30
 800a27a:	e005      	b.n	800a288 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a27c:	6978      	ldr	r0, [r7, #20]
 800a27e:	f001 fe59 	bl	800bf34 <vPortFree>
 800a282:	e001      	b.n	800a288 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a284:	2300      	movs	r3, #0
 800a286:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a288:	69fb      	ldr	r3, [r7, #28]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d017      	beq.n	800a2be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a28e:	69fb      	ldr	r3, [r7, #28]
 800a290:	2200      	movs	r2, #0
 800a292:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a296:	88fa      	ldrh	r2, [r7, #6]
 800a298:	2300      	movs	r3, #0
 800a29a:	9303      	str	r3, [sp, #12]
 800a29c:	69fb      	ldr	r3, [r7, #28]
 800a29e:	9302      	str	r3, [sp, #8]
 800a2a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2a2:	9301      	str	r3, [sp, #4]
 800a2a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2a6:	9300      	str	r3, [sp, #0]
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	68b9      	ldr	r1, [r7, #8]
 800a2ac:	68f8      	ldr	r0, [r7, #12]
 800a2ae:	f000 f80e 	bl	800a2ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a2b2:	69f8      	ldr	r0, [r7, #28]
 800a2b4:	f000 f89e 	bl	800a3f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	61bb      	str	r3, [r7, #24]
 800a2bc:	e002      	b.n	800a2c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a2be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a2c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a2c4:	69bb      	ldr	r3, [r7, #24]
	}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3720      	adds	r7, #32
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}

0800a2ce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a2ce:	b580      	push	{r7, lr}
 800a2d0:	b088      	sub	sp, #32
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	60f8      	str	r0, [r7, #12]
 800a2d6:	60b9      	str	r1, [r7, #8]
 800a2d8:	607a      	str	r2, [r7, #4]
 800a2da:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a2dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2de:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	009b      	lsls	r3, r3, #2
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	21a5      	movs	r1, #165	@ 0xa5
 800a2e8:	f00c fa3a 	bl	8016760 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a2ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a2f0:	6879      	ldr	r1, [r7, #4]
 800a2f2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800a2f6:	440b      	add	r3, r1
 800a2f8:	009b      	lsls	r3, r3, #2
 800a2fa:	4413      	add	r3, r2
 800a2fc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a2fe:	69bb      	ldr	r3, [r7, #24]
 800a300:	f023 0307 	bic.w	r3, r3, #7
 800a304:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	f003 0307 	and.w	r3, r3, #7
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d00d      	beq.n	800a32c <prvInitialiseNewTask+0x5e>
	__asm volatile
 800a310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a314:	b672      	cpsid	i
 800a316:	f383 8811 	msr	BASEPRI, r3
 800a31a:	f3bf 8f6f 	isb	sy
 800a31e:	f3bf 8f4f 	dsb	sy
 800a322:	b662      	cpsie	i
 800a324:	617b      	str	r3, [r7, #20]
}
 800a326:	bf00      	nop
 800a328:	bf00      	nop
 800a32a:	e7fd      	b.n	800a328 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d01f      	beq.n	800a372 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a332:	2300      	movs	r3, #0
 800a334:	61fb      	str	r3, [r7, #28]
 800a336:	e012      	b.n	800a35e <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a338:	68ba      	ldr	r2, [r7, #8]
 800a33a:	69fb      	ldr	r3, [r7, #28]
 800a33c:	4413      	add	r3, r2
 800a33e:	7819      	ldrb	r1, [r3, #0]
 800a340:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	4413      	add	r3, r2
 800a346:	3334      	adds	r3, #52	@ 0x34
 800a348:	460a      	mov	r2, r1
 800a34a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a34c:	68ba      	ldr	r2, [r7, #8]
 800a34e:	69fb      	ldr	r3, [r7, #28]
 800a350:	4413      	add	r3, r2
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d006      	beq.n	800a366 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a358:	69fb      	ldr	r3, [r7, #28]
 800a35a:	3301      	adds	r3, #1
 800a35c:	61fb      	str	r3, [r7, #28]
 800a35e:	69fb      	ldr	r3, [r7, #28]
 800a360:	2b0f      	cmp	r3, #15
 800a362:	d9e9      	bls.n	800a338 <prvInitialiseNewTask+0x6a>
 800a364:	e000      	b.n	800a368 <prvInitialiseNewTask+0x9a>
			{
				break;
 800a366:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a36a:	2200      	movs	r2, #0
 800a36c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a370:	e003      	b.n	800a37a <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a374:	2200      	movs	r2, #0
 800a376:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a37a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a37c:	2b37      	cmp	r3, #55	@ 0x37
 800a37e:	d901      	bls.n	800a384 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a380:	2337      	movs	r3, #55	@ 0x37
 800a382:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a386:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a388:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a38a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a38c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a38e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a392:	2200      	movs	r2, #0
 800a394:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a398:	3304      	adds	r3, #4
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7fe ff0e 	bl	80091bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a3a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3a2:	3318      	adds	r3, #24
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7fe ff09 	bl	80091bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3b2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3be:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a3c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a3c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a3ce:	683a      	ldr	r2, [r7, #0]
 800a3d0:	68f9      	ldr	r1, [r7, #12]
 800a3d2:	69b8      	ldr	r0, [r7, #24]
 800a3d4:	f001 faa6 	bl	800b924 <pxPortInitialiseStack>
 800a3d8:	4602      	mov	r2, r0
 800a3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a3de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d002      	beq.n	800a3ea <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a3e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3ea:	bf00      	nop
 800a3ec:	3720      	adds	r7, #32
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
	...

0800a3f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b082      	sub	sp, #8
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a3fc:	f001 fb9e 	bl	800bb3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a400:	4b2d      	ldr	r3, [pc, #180]	@ (800a4b8 <prvAddNewTaskToReadyList+0xc4>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	3301      	adds	r3, #1
 800a406:	4a2c      	ldr	r2, [pc, #176]	@ (800a4b8 <prvAddNewTaskToReadyList+0xc4>)
 800a408:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a40a:	4b2c      	ldr	r3, [pc, #176]	@ (800a4bc <prvAddNewTaskToReadyList+0xc8>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d109      	bne.n	800a426 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a412:	4a2a      	ldr	r2, [pc, #168]	@ (800a4bc <prvAddNewTaskToReadyList+0xc8>)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a418:	4b27      	ldr	r3, [pc, #156]	@ (800a4b8 <prvAddNewTaskToReadyList+0xc4>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d110      	bne.n	800a442 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a420:	f000 fc5e 	bl	800ace0 <prvInitialiseTaskLists>
 800a424:	e00d      	b.n	800a442 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a426:	4b26      	ldr	r3, [pc, #152]	@ (800a4c0 <prvAddNewTaskToReadyList+0xcc>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d109      	bne.n	800a442 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a42e:	4b23      	ldr	r3, [pc, #140]	@ (800a4bc <prvAddNewTaskToReadyList+0xc8>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a438:	429a      	cmp	r2, r3
 800a43a:	d802      	bhi.n	800a442 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a43c:	4a1f      	ldr	r2, [pc, #124]	@ (800a4bc <prvAddNewTaskToReadyList+0xc8>)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a442:	4b20      	ldr	r3, [pc, #128]	@ (800a4c4 <prvAddNewTaskToReadyList+0xd0>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	3301      	adds	r3, #1
 800a448:	4a1e      	ldr	r2, [pc, #120]	@ (800a4c4 <prvAddNewTaskToReadyList+0xd0>)
 800a44a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a44c:	4b1d      	ldr	r3, [pc, #116]	@ (800a4c4 <prvAddNewTaskToReadyList+0xd0>)
 800a44e:	681a      	ldr	r2, [r3, #0]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a458:	4b1b      	ldr	r3, [pc, #108]	@ (800a4c8 <prvAddNewTaskToReadyList+0xd4>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d903      	bls.n	800a468 <prvAddNewTaskToReadyList+0x74>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a464:	4a18      	ldr	r2, [pc, #96]	@ (800a4c8 <prvAddNewTaskToReadyList+0xd4>)
 800a466:	6013      	str	r3, [r2, #0]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a46c:	4613      	mov	r3, r2
 800a46e:	009b      	lsls	r3, r3, #2
 800a470:	4413      	add	r3, r2
 800a472:	009b      	lsls	r3, r3, #2
 800a474:	4a15      	ldr	r2, [pc, #84]	@ (800a4cc <prvAddNewTaskToReadyList+0xd8>)
 800a476:	441a      	add	r2, r3
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	3304      	adds	r3, #4
 800a47c:	4619      	mov	r1, r3
 800a47e:	4610      	mov	r0, r2
 800a480:	f7fe fea9 	bl	80091d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a484:	f001 fb90 	bl	800bba8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a488:	4b0d      	ldr	r3, [pc, #52]	@ (800a4c0 <prvAddNewTaskToReadyList+0xcc>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d00e      	beq.n	800a4ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a490:	4b0a      	ldr	r3, [pc, #40]	@ (800a4bc <prvAddNewTaskToReadyList+0xc8>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d207      	bcs.n	800a4ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a49e:	4b0c      	ldr	r3, [pc, #48]	@ (800a4d0 <prvAddNewTaskToReadyList+0xdc>)
 800a4a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4a4:	601a      	str	r2, [r3, #0]
 800a4a6:	f3bf 8f4f 	dsb	sy
 800a4aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4ae:	bf00      	nop
 800a4b0:	3708      	adds	r7, #8
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	200062b4 	.word	0x200062b4
 800a4bc:	20005de0 	.word	0x20005de0
 800a4c0:	200062c0 	.word	0x200062c0
 800a4c4:	200062d0 	.word	0x200062d0
 800a4c8:	200062bc 	.word	0x200062bc
 800a4cc:	20005de4 	.word	0x20005de4
 800a4d0:	e000ed04 	.word	0xe000ed04

0800a4d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d01a      	beq.n	800a51c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a4e6:	4b15      	ldr	r3, [pc, #84]	@ (800a53c <vTaskDelay+0x68>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d00d      	beq.n	800a50a <vTaskDelay+0x36>
	__asm volatile
 800a4ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4f2:	b672      	cpsid	i
 800a4f4:	f383 8811 	msr	BASEPRI, r3
 800a4f8:	f3bf 8f6f 	isb	sy
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	b662      	cpsie	i
 800a502:	60bb      	str	r3, [r7, #8]
}
 800a504:	bf00      	nop
 800a506:	bf00      	nop
 800a508:	e7fd      	b.n	800a506 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800a50a:	f000 f887 	bl	800a61c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a50e:	2100      	movs	r1, #0
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f000 fe4b 	bl	800b1ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a516:	f000 f88f 	bl	800a638 <xTaskResumeAll>
 800a51a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d107      	bne.n	800a532 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800a522:	4b07      	ldr	r3, [pc, #28]	@ (800a540 <vTaskDelay+0x6c>)
 800a524:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a528:	601a      	str	r2, [r3, #0]
 800a52a:	f3bf 8f4f 	dsb	sy
 800a52e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a532:	bf00      	nop
 800a534:	3710      	adds	r7, #16
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	bf00      	nop
 800a53c:	200062dc 	.word	0x200062dc
 800a540:	e000ed04 	.word	0xe000ed04

0800a544 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b08a      	sub	sp, #40	@ 0x28
 800a548:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a54a:	2300      	movs	r3, #0
 800a54c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a54e:	2300      	movs	r3, #0
 800a550:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a552:	463a      	mov	r2, r7
 800a554:	1d39      	adds	r1, r7, #4
 800a556:	f107 0308 	add.w	r3, r7, #8
 800a55a:	4618      	mov	r0, r3
 800a55c:	f7fe fdda 	bl	8009114 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a560:	6839      	ldr	r1, [r7, #0]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	68ba      	ldr	r2, [r7, #8]
 800a566:	9202      	str	r2, [sp, #8]
 800a568:	9301      	str	r3, [sp, #4]
 800a56a:	2300      	movs	r3, #0
 800a56c:	9300      	str	r3, [sp, #0]
 800a56e:	2300      	movs	r3, #0
 800a570:	460a      	mov	r2, r1
 800a572:	4924      	ldr	r1, [pc, #144]	@ (800a604 <vTaskStartScheduler+0xc0>)
 800a574:	4824      	ldr	r0, [pc, #144]	@ (800a608 <vTaskStartScheduler+0xc4>)
 800a576:	f7ff fdff 	bl	800a178 <xTaskCreateStatic>
 800a57a:	4603      	mov	r3, r0
 800a57c:	4a23      	ldr	r2, [pc, #140]	@ (800a60c <vTaskStartScheduler+0xc8>)
 800a57e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a580:	4b22      	ldr	r3, [pc, #136]	@ (800a60c <vTaskStartScheduler+0xc8>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d002      	beq.n	800a58e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a588:	2301      	movs	r3, #1
 800a58a:	617b      	str	r3, [r7, #20]
 800a58c:	e001      	b.n	800a592 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a58e:	2300      	movs	r3, #0
 800a590:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	2b01      	cmp	r3, #1
 800a596:	d102      	bne.n	800a59e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a598:	f000 fe5c 	bl	800b254 <xTimerCreateTimerTask>
 800a59c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	d118      	bne.n	800a5d6 <vTaskStartScheduler+0x92>
	__asm volatile
 800a5a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5a8:	b672      	cpsid	i
 800a5aa:	f383 8811 	msr	BASEPRI, r3
 800a5ae:	f3bf 8f6f 	isb	sy
 800a5b2:	f3bf 8f4f 	dsb	sy
 800a5b6:	b662      	cpsie	i
 800a5b8:	613b      	str	r3, [r7, #16]
}
 800a5ba:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a5bc:	4b14      	ldr	r3, [pc, #80]	@ (800a610 <vTaskStartScheduler+0xcc>)
 800a5be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a5c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a5c4:	4b13      	ldr	r3, [pc, #76]	@ (800a614 <vTaskStartScheduler+0xd0>)
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a5ca:	4b13      	ldr	r3, [pc, #76]	@ (800a618 <vTaskStartScheduler+0xd4>)
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a5d0:	f001 fa36 	bl	800ba40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a5d4:	e011      	b.n	800a5fa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a5dc:	d10d      	bne.n	800a5fa <vTaskStartScheduler+0xb6>
	__asm volatile
 800a5de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5e2:	b672      	cpsid	i
 800a5e4:	f383 8811 	msr	BASEPRI, r3
 800a5e8:	f3bf 8f6f 	isb	sy
 800a5ec:	f3bf 8f4f 	dsb	sy
 800a5f0:	b662      	cpsie	i
 800a5f2:	60fb      	str	r3, [r7, #12]
}
 800a5f4:	bf00      	nop
 800a5f6:	bf00      	nop
 800a5f8:	e7fd      	b.n	800a5f6 <vTaskStartScheduler+0xb2>
}
 800a5fa:	bf00      	nop
 800a5fc:	3718      	adds	r7, #24
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	08017624 	.word	0x08017624
 800a608:	0800acb1 	.word	0x0800acb1
 800a60c:	200062d8 	.word	0x200062d8
 800a610:	200062d4 	.word	0x200062d4
 800a614:	200062c0 	.word	0x200062c0
 800a618:	200062b8 	.word	0x200062b8

0800a61c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a61c:	b480      	push	{r7}
 800a61e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a620:	4b04      	ldr	r3, [pc, #16]	@ (800a634 <vTaskSuspendAll+0x18>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	3301      	adds	r3, #1
 800a626:	4a03      	ldr	r2, [pc, #12]	@ (800a634 <vTaskSuspendAll+0x18>)
 800a628:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a62a:	bf00      	nop
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr
 800a634:	200062dc 	.word	0x200062dc

0800a638 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a63e:	2300      	movs	r3, #0
 800a640:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a642:	2300      	movs	r3, #0
 800a644:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a646:	4b43      	ldr	r3, [pc, #268]	@ (800a754 <xTaskResumeAll+0x11c>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d10d      	bne.n	800a66a <xTaskResumeAll+0x32>
	__asm volatile
 800a64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a652:	b672      	cpsid	i
 800a654:	f383 8811 	msr	BASEPRI, r3
 800a658:	f3bf 8f6f 	isb	sy
 800a65c:	f3bf 8f4f 	dsb	sy
 800a660:	b662      	cpsie	i
 800a662:	603b      	str	r3, [r7, #0]
}
 800a664:	bf00      	nop
 800a666:	bf00      	nop
 800a668:	e7fd      	b.n	800a666 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a66a:	f001 fa67 	bl	800bb3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a66e:	4b39      	ldr	r3, [pc, #228]	@ (800a754 <xTaskResumeAll+0x11c>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	3b01      	subs	r3, #1
 800a674:	4a37      	ldr	r2, [pc, #220]	@ (800a754 <xTaskResumeAll+0x11c>)
 800a676:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a678:	4b36      	ldr	r3, [pc, #216]	@ (800a754 <xTaskResumeAll+0x11c>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d162      	bne.n	800a746 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a680:	4b35      	ldr	r3, [pc, #212]	@ (800a758 <xTaskResumeAll+0x120>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d05e      	beq.n	800a746 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a688:	e02f      	b.n	800a6ea <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a68a:	4b34      	ldr	r3, [pc, #208]	@ (800a75c <xTaskResumeAll+0x124>)
 800a68c:	68db      	ldr	r3, [r3, #12]
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	3318      	adds	r3, #24
 800a696:	4618      	mov	r0, r3
 800a698:	f7fe fdfa 	bl	8009290 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	3304      	adds	r3, #4
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7fe fdf5 	bl	8009290 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6aa:	4b2d      	ldr	r3, [pc, #180]	@ (800a760 <xTaskResumeAll+0x128>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d903      	bls.n	800a6ba <xTaskResumeAll+0x82>
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6b6:	4a2a      	ldr	r2, [pc, #168]	@ (800a760 <xTaskResumeAll+0x128>)
 800a6b8:	6013      	str	r3, [r2, #0]
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6be:	4613      	mov	r3, r2
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	4413      	add	r3, r2
 800a6c4:	009b      	lsls	r3, r3, #2
 800a6c6:	4a27      	ldr	r2, [pc, #156]	@ (800a764 <xTaskResumeAll+0x12c>)
 800a6c8:	441a      	add	r2, r3
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	3304      	adds	r3, #4
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	4610      	mov	r0, r2
 800a6d2:	f7fe fd80 	bl	80091d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6da:	4b23      	ldr	r3, [pc, #140]	@ (800a768 <xTaskResumeAll+0x130>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d302      	bcc.n	800a6ea <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800a6e4:	4b21      	ldr	r3, [pc, #132]	@ (800a76c <xTaskResumeAll+0x134>)
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a6ea:	4b1c      	ldr	r3, [pc, #112]	@ (800a75c <xTaskResumeAll+0x124>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d1cb      	bne.n	800a68a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d001      	beq.n	800a6fc <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a6f8:	f000 fb92 	bl	800ae20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a6fc:	4b1c      	ldr	r3, [pc, #112]	@ (800a770 <xTaskResumeAll+0x138>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d010      	beq.n	800a72a <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a708:	f000 f846 	bl	800a798 <xTaskIncrementTick>
 800a70c:	4603      	mov	r3, r0
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d002      	beq.n	800a718 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800a712:	4b16      	ldr	r3, [pc, #88]	@ (800a76c <xTaskResumeAll+0x134>)
 800a714:	2201      	movs	r2, #1
 800a716:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	3b01      	subs	r3, #1
 800a71c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d1f1      	bne.n	800a708 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800a724:	4b12      	ldr	r3, [pc, #72]	@ (800a770 <xTaskResumeAll+0x138>)
 800a726:	2200      	movs	r2, #0
 800a728:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a72a:	4b10      	ldr	r3, [pc, #64]	@ (800a76c <xTaskResumeAll+0x134>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d009      	beq.n	800a746 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a732:	2301      	movs	r3, #1
 800a734:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a736:	4b0f      	ldr	r3, [pc, #60]	@ (800a774 <xTaskResumeAll+0x13c>)
 800a738:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a73c:	601a      	str	r2, [r3, #0]
 800a73e:	f3bf 8f4f 	dsb	sy
 800a742:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a746:	f001 fa2f 	bl	800bba8 <vPortExitCritical>

	return xAlreadyYielded;
 800a74a:	68bb      	ldr	r3, [r7, #8]
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3710      	adds	r7, #16
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}
 800a754:	200062dc 	.word	0x200062dc
 800a758:	200062b4 	.word	0x200062b4
 800a75c:	20006274 	.word	0x20006274
 800a760:	200062bc 	.word	0x200062bc
 800a764:	20005de4 	.word	0x20005de4
 800a768:	20005de0 	.word	0x20005de0
 800a76c:	200062c8 	.word	0x200062c8
 800a770:	200062c4 	.word	0x200062c4
 800a774:	e000ed04 	.word	0xe000ed04

0800a778 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a778:	b480      	push	{r7}
 800a77a:	b083      	sub	sp, #12
 800a77c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a77e:	4b05      	ldr	r3, [pc, #20]	@ (800a794 <xTaskGetTickCount+0x1c>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a784:	687b      	ldr	r3, [r7, #4]
}
 800a786:	4618      	mov	r0, r3
 800a788:	370c      	adds	r7, #12
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr
 800a792:	bf00      	nop
 800a794:	200062b8 	.word	0x200062b8

0800a798 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b086      	sub	sp, #24
 800a79c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7a2:	4b50      	ldr	r3, [pc, #320]	@ (800a8e4 <xTaskIncrementTick+0x14c>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	f040 808c 	bne.w	800a8c4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a7ac:	4b4e      	ldr	r3, [pc, #312]	@ (800a8e8 <xTaskIncrementTick+0x150>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a7b4:	4a4c      	ldr	r2, [pc, #304]	@ (800a8e8 <xTaskIncrementTick+0x150>)
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d123      	bne.n	800a808 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800a7c0:	4b4a      	ldr	r3, [pc, #296]	@ (800a8ec <xTaskIncrementTick+0x154>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d00d      	beq.n	800a7e6 <xTaskIncrementTick+0x4e>
	__asm volatile
 800a7ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ce:	b672      	cpsid	i
 800a7d0:	f383 8811 	msr	BASEPRI, r3
 800a7d4:	f3bf 8f6f 	isb	sy
 800a7d8:	f3bf 8f4f 	dsb	sy
 800a7dc:	b662      	cpsie	i
 800a7de:	603b      	str	r3, [r7, #0]
}
 800a7e0:	bf00      	nop
 800a7e2:	bf00      	nop
 800a7e4:	e7fd      	b.n	800a7e2 <xTaskIncrementTick+0x4a>
 800a7e6:	4b41      	ldr	r3, [pc, #260]	@ (800a8ec <xTaskIncrementTick+0x154>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	60fb      	str	r3, [r7, #12]
 800a7ec:	4b40      	ldr	r3, [pc, #256]	@ (800a8f0 <xTaskIncrementTick+0x158>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a3e      	ldr	r2, [pc, #248]	@ (800a8ec <xTaskIncrementTick+0x154>)
 800a7f2:	6013      	str	r3, [r2, #0]
 800a7f4:	4a3e      	ldr	r2, [pc, #248]	@ (800a8f0 <xTaskIncrementTick+0x158>)
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	6013      	str	r3, [r2, #0]
 800a7fa:	4b3e      	ldr	r3, [pc, #248]	@ (800a8f4 <xTaskIncrementTick+0x15c>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	3301      	adds	r3, #1
 800a800:	4a3c      	ldr	r2, [pc, #240]	@ (800a8f4 <xTaskIncrementTick+0x15c>)
 800a802:	6013      	str	r3, [r2, #0]
 800a804:	f000 fb0c 	bl	800ae20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a808:	4b3b      	ldr	r3, [pc, #236]	@ (800a8f8 <xTaskIncrementTick+0x160>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	693a      	ldr	r2, [r7, #16]
 800a80e:	429a      	cmp	r2, r3
 800a810:	d349      	bcc.n	800a8a6 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a812:	4b36      	ldr	r3, [pc, #216]	@ (800a8ec <xTaskIncrementTick+0x154>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d104      	bne.n	800a826 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a81c:	4b36      	ldr	r3, [pc, #216]	@ (800a8f8 <xTaskIncrementTick+0x160>)
 800a81e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a822:	601a      	str	r2, [r3, #0]
					break;
 800a824:	e03f      	b.n	800a8a6 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a826:	4b31      	ldr	r3, [pc, #196]	@ (800a8ec <xTaskIncrementTick+0x154>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	68db      	ldr	r3, [r3, #12]
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a836:	693a      	ldr	r2, [r7, #16]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d203      	bcs.n	800a846 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a83e:	4a2e      	ldr	r2, [pc, #184]	@ (800a8f8 <xTaskIncrementTick+0x160>)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a844:	e02f      	b.n	800a8a6 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	3304      	adds	r3, #4
 800a84a:	4618      	mov	r0, r3
 800a84c:	f7fe fd20 	bl	8009290 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a854:	2b00      	cmp	r3, #0
 800a856:	d004      	beq.n	800a862 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	3318      	adds	r3, #24
 800a85c:	4618      	mov	r0, r3
 800a85e:	f7fe fd17 	bl	8009290 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a866:	4b25      	ldr	r3, [pc, #148]	@ (800a8fc <xTaskIncrementTick+0x164>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d903      	bls.n	800a876 <xTaskIncrementTick+0xde>
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a872:	4a22      	ldr	r2, [pc, #136]	@ (800a8fc <xTaskIncrementTick+0x164>)
 800a874:	6013      	str	r3, [r2, #0]
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a87a:	4613      	mov	r3, r2
 800a87c:	009b      	lsls	r3, r3, #2
 800a87e:	4413      	add	r3, r2
 800a880:	009b      	lsls	r3, r3, #2
 800a882:	4a1f      	ldr	r2, [pc, #124]	@ (800a900 <xTaskIncrementTick+0x168>)
 800a884:	441a      	add	r2, r3
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	3304      	adds	r3, #4
 800a88a:	4619      	mov	r1, r3
 800a88c:	4610      	mov	r0, r2
 800a88e:	f7fe fca2 	bl	80091d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a896:	4b1b      	ldr	r3, [pc, #108]	@ (800a904 <xTaskIncrementTick+0x16c>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d3b8      	bcc.n	800a812 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8a4:	e7b5      	b.n	800a812 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a8a6:	4b17      	ldr	r3, [pc, #92]	@ (800a904 <xTaskIncrementTick+0x16c>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8ac:	4914      	ldr	r1, [pc, #80]	@ (800a900 <xTaskIncrementTick+0x168>)
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	4413      	add	r3, r2
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	440b      	add	r3, r1
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d907      	bls.n	800a8ce <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	617b      	str	r3, [r7, #20]
 800a8c2:	e004      	b.n	800a8ce <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a8c4:	4b10      	ldr	r3, [pc, #64]	@ (800a908 <xTaskIncrementTick+0x170>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	4a0f      	ldr	r2, [pc, #60]	@ (800a908 <xTaskIncrementTick+0x170>)
 800a8cc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a8ce:	4b0f      	ldr	r3, [pc, #60]	@ (800a90c <xTaskIncrementTick+0x174>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d001      	beq.n	800a8da <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a8da:	697b      	ldr	r3, [r7, #20]
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3718      	adds	r7, #24
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	200062dc 	.word	0x200062dc
 800a8e8:	200062b8 	.word	0x200062b8
 800a8ec:	2000626c 	.word	0x2000626c
 800a8f0:	20006270 	.word	0x20006270
 800a8f4:	200062cc 	.word	0x200062cc
 800a8f8:	200062d4 	.word	0x200062d4
 800a8fc:	200062bc 	.word	0x200062bc
 800a900:	20005de4 	.word	0x20005de4
 800a904:	20005de0 	.word	0x20005de0
 800a908:	200062c4 	.word	0x200062c4
 800a90c:	200062c8 	.word	0x200062c8

0800a910 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a910:	b480      	push	{r7}
 800a912:	b085      	sub	sp, #20
 800a914:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a916:	4b29      	ldr	r3, [pc, #164]	@ (800a9bc <vTaskSwitchContext+0xac>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d003      	beq.n	800a926 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a91e:	4b28      	ldr	r3, [pc, #160]	@ (800a9c0 <vTaskSwitchContext+0xb0>)
 800a920:	2201      	movs	r2, #1
 800a922:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a924:	e044      	b.n	800a9b0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800a926:	4b26      	ldr	r3, [pc, #152]	@ (800a9c0 <vTaskSwitchContext+0xb0>)
 800a928:	2200      	movs	r2, #0
 800a92a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a92c:	4b25      	ldr	r3, [pc, #148]	@ (800a9c4 <vTaskSwitchContext+0xb4>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	60fb      	str	r3, [r7, #12]
 800a932:	e013      	b.n	800a95c <vTaskSwitchContext+0x4c>
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d10d      	bne.n	800a956 <vTaskSwitchContext+0x46>
	__asm volatile
 800a93a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a93e:	b672      	cpsid	i
 800a940:	f383 8811 	msr	BASEPRI, r3
 800a944:	f3bf 8f6f 	isb	sy
 800a948:	f3bf 8f4f 	dsb	sy
 800a94c:	b662      	cpsie	i
 800a94e:	607b      	str	r3, [r7, #4]
}
 800a950:	bf00      	nop
 800a952:	bf00      	nop
 800a954:	e7fd      	b.n	800a952 <vTaskSwitchContext+0x42>
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	3b01      	subs	r3, #1
 800a95a:	60fb      	str	r3, [r7, #12]
 800a95c:	491a      	ldr	r1, [pc, #104]	@ (800a9c8 <vTaskSwitchContext+0xb8>)
 800a95e:	68fa      	ldr	r2, [r7, #12]
 800a960:	4613      	mov	r3, r2
 800a962:	009b      	lsls	r3, r3, #2
 800a964:	4413      	add	r3, r2
 800a966:	009b      	lsls	r3, r3, #2
 800a968:	440b      	add	r3, r1
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d0e1      	beq.n	800a934 <vTaskSwitchContext+0x24>
 800a970:	68fa      	ldr	r2, [r7, #12]
 800a972:	4613      	mov	r3, r2
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	4413      	add	r3, r2
 800a978:	009b      	lsls	r3, r3, #2
 800a97a:	4a13      	ldr	r2, [pc, #76]	@ (800a9c8 <vTaskSwitchContext+0xb8>)
 800a97c:	4413      	add	r3, r2
 800a97e:	60bb      	str	r3, [r7, #8]
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	685a      	ldr	r2, [r3, #4]
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	605a      	str	r2, [r3, #4]
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	685a      	ldr	r2, [r3, #4]
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	3308      	adds	r3, #8
 800a992:	429a      	cmp	r2, r3
 800a994:	d104      	bne.n	800a9a0 <vTaskSwitchContext+0x90>
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	685a      	ldr	r2, [r3, #4]
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	605a      	str	r2, [r3, #4]
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	68db      	ldr	r3, [r3, #12]
 800a9a6:	4a09      	ldr	r2, [pc, #36]	@ (800a9cc <vTaskSwitchContext+0xbc>)
 800a9a8:	6013      	str	r3, [r2, #0]
 800a9aa:	4a06      	ldr	r2, [pc, #24]	@ (800a9c4 <vTaskSwitchContext+0xb4>)
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	6013      	str	r3, [r2, #0]
}
 800a9b0:	bf00      	nop
 800a9b2:	3714      	adds	r7, #20
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr
 800a9bc:	200062dc 	.word	0x200062dc
 800a9c0:	200062c8 	.word	0x200062c8
 800a9c4:	200062bc 	.word	0x200062bc
 800a9c8:	20005de4 	.word	0x20005de4
 800a9cc:	20005de0 	.word	0x20005de0

0800a9d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d10d      	bne.n	800a9fc <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800a9e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9e4:	b672      	cpsid	i
 800a9e6:	f383 8811 	msr	BASEPRI, r3
 800a9ea:	f3bf 8f6f 	isb	sy
 800a9ee:	f3bf 8f4f 	dsb	sy
 800a9f2:	b662      	cpsie	i
 800a9f4:	60fb      	str	r3, [r7, #12]
}
 800a9f6:	bf00      	nop
 800a9f8:	bf00      	nop
 800a9fa:	e7fd      	b.n	800a9f8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a9fc:	4b07      	ldr	r3, [pc, #28]	@ (800aa1c <vTaskPlaceOnEventList+0x4c>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	3318      	adds	r3, #24
 800aa02:	4619      	mov	r1, r3
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f7fe fc0a 	bl	800921e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aa0a:	2101      	movs	r1, #1
 800aa0c:	6838      	ldr	r0, [r7, #0]
 800aa0e:	f000 fbcd 	bl	800b1ac <prvAddCurrentTaskToDelayedList>
}
 800aa12:	bf00      	nop
 800aa14:	3710      	adds	r7, #16
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}
 800aa1a:	bf00      	nop
 800aa1c:	20005de0 	.word	0x20005de0

0800aa20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b086      	sub	sp, #24
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	60b9      	str	r1, [r7, #8]
 800aa2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d10d      	bne.n	800aa4e <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800aa32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa36:	b672      	cpsid	i
 800aa38:	f383 8811 	msr	BASEPRI, r3
 800aa3c:	f3bf 8f6f 	isb	sy
 800aa40:	f3bf 8f4f 	dsb	sy
 800aa44:	b662      	cpsie	i
 800aa46:	617b      	str	r3, [r7, #20]
}
 800aa48:	bf00      	nop
 800aa4a:	bf00      	nop
 800aa4c:	e7fd      	b.n	800aa4a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa4e:	4b0a      	ldr	r3, [pc, #40]	@ (800aa78 <vTaskPlaceOnEventListRestricted+0x58>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	3318      	adds	r3, #24
 800aa54:	4619      	mov	r1, r3
 800aa56:	68f8      	ldr	r0, [r7, #12]
 800aa58:	f7fe fbbd 	bl	80091d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d002      	beq.n	800aa68 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800aa62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aa66:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aa68:	6879      	ldr	r1, [r7, #4]
 800aa6a:	68b8      	ldr	r0, [r7, #8]
 800aa6c:	f000 fb9e 	bl	800b1ac <prvAddCurrentTaskToDelayedList>
	}
 800aa70:	bf00      	nop
 800aa72:	3718      	adds	r7, #24
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	20005de0 	.word	0x20005de0

0800aa7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b086      	sub	sp, #24
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d10d      	bne.n	800aaae <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800aa92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa96:	b672      	cpsid	i
 800aa98:	f383 8811 	msr	BASEPRI, r3
 800aa9c:	f3bf 8f6f 	isb	sy
 800aaa0:	f3bf 8f4f 	dsb	sy
 800aaa4:	b662      	cpsie	i
 800aaa6:	60fb      	str	r3, [r7, #12]
}
 800aaa8:	bf00      	nop
 800aaaa:	bf00      	nop
 800aaac:	e7fd      	b.n	800aaaa <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	3318      	adds	r3, #24
 800aab2:	4618      	mov	r0, r3
 800aab4:	f7fe fbec 	bl	8009290 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aab8:	4b1d      	ldr	r3, [pc, #116]	@ (800ab30 <xTaskRemoveFromEventList+0xb4>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d11d      	bne.n	800aafc <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	3304      	adds	r3, #4
 800aac4:	4618      	mov	r0, r3
 800aac6:	f7fe fbe3 	bl	8009290 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aace:	4b19      	ldr	r3, [pc, #100]	@ (800ab34 <xTaskRemoveFromEventList+0xb8>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d903      	bls.n	800aade <xTaskRemoveFromEventList+0x62>
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aada:	4a16      	ldr	r2, [pc, #88]	@ (800ab34 <xTaskRemoveFromEventList+0xb8>)
 800aadc:	6013      	str	r3, [r2, #0]
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aae2:	4613      	mov	r3, r2
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	4413      	add	r3, r2
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	4a13      	ldr	r2, [pc, #76]	@ (800ab38 <xTaskRemoveFromEventList+0xbc>)
 800aaec:	441a      	add	r2, r3
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	3304      	adds	r3, #4
 800aaf2:	4619      	mov	r1, r3
 800aaf4:	4610      	mov	r0, r2
 800aaf6:	f7fe fb6e 	bl	80091d6 <vListInsertEnd>
 800aafa:	e005      	b.n	800ab08 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	3318      	adds	r3, #24
 800ab00:	4619      	mov	r1, r3
 800ab02:	480e      	ldr	r0, [pc, #56]	@ (800ab3c <xTaskRemoveFromEventList+0xc0>)
 800ab04:	f7fe fb67 	bl	80091d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab0c:	4b0c      	ldr	r3, [pc, #48]	@ (800ab40 <xTaskRemoveFromEventList+0xc4>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d905      	bls.n	800ab22 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ab16:	2301      	movs	r3, #1
 800ab18:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ab1a:	4b0a      	ldr	r3, [pc, #40]	@ (800ab44 <xTaskRemoveFromEventList+0xc8>)
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	601a      	str	r2, [r3, #0]
 800ab20:	e001      	b.n	800ab26 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800ab22:	2300      	movs	r3, #0
 800ab24:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ab26:	697b      	ldr	r3, [r7, #20]
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3718      	adds	r7, #24
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}
 800ab30:	200062dc 	.word	0x200062dc
 800ab34:	200062bc 	.word	0x200062bc
 800ab38:	20005de4 	.word	0x20005de4
 800ab3c:	20006274 	.word	0x20006274
 800ab40:	20005de0 	.word	0x20005de0
 800ab44:	200062c8 	.word	0x200062c8

0800ab48 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b084      	sub	sp, #16
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d10d      	bne.n	800ab72 <vTaskSetTimeOutState+0x2a>
	__asm volatile
 800ab56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab5a:	b672      	cpsid	i
 800ab5c:	f383 8811 	msr	BASEPRI, r3
 800ab60:	f3bf 8f6f 	isb	sy
 800ab64:	f3bf 8f4f 	dsb	sy
 800ab68:	b662      	cpsie	i
 800ab6a:	60fb      	str	r3, [r7, #12]
}
 800ab6c:	bf00      	nop
 800ab6e:	bf00      	nop
 800ab70:	e7fd      	b.n	800ab6e <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 800ab72:	f000 ffe3 	bl	800bb3c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ab76:	4b07      	ldr	r3, [pc, #28]	@ (800ab94 <vTaskSetTimeOutState+0x4c>)
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800ab7e:	4b06      	ldr	r3, [pc, #24]	@ (800ab98 <vTaskSetTimeOutState+0x50>)
 800ab80:	681a      	ldr	r2, [r3, #0]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800ab86:	f001 f80f 	bl	800bba8 <vPortExitCritical>
}
 800ab8a:	bf00      	nop
 800ab8c:	3710      	adds	r7, #16
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
 800ab92:	bf00      	nop
 800ab94:	200062cc 	.word	0x200062cc
 800ab98:	200062b8 	.word	0x200062b8

0800ab9c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aba4:	4b06      	ldr	r3, [pc, #24]	@ (800abc0 <vTaskInternalSetTimeOutState+0x24>)
 800aba6:	681a      	ldr	r2, [r3, #0]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800abac:	4b05      	ldr	r3, [pc, #20]	@ (800abc4 <vTaskInternalSetTimeOutState+0x28>)
 800abae:	681a      	ldr	r2, [r3, #0]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	605a      	str	r2, [r3, #4]
}
 800abb4:	bf00      	nop
 800abb6:	370c      	adds	r7, #12
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr
 800abc0:	200062cc 	.word	0x200062cc
 800abc4:	200062b8 	.word	0x200062b8

0800abc8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b088      	sub	sp, #32
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d10d      	bne.n	800abf4 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800abd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abdc:	b672      	cpsid	i
 800abde:	f383 8811 	msr	BASEPRI, r3
 800abe2:	f3bf 8f6f 	isb	sy
 800abe6:	f3bf 8f4f 	dsb	sy
 800abea:	b662      	cpsie	i
 800abec:	613b      	str	r3, [r7, #16]
}
 800abee:	bf00      	nop
 800abf0:	bf00      	nop
 800abf2:	e7fd      	b.n	800abf0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d10d      	bne.n	800ac16 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800abfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abfe:	b672      	cpsid	i
 800ac00:	f383 8811 	msr	BASEPRI, r3
 800ac04:	f3bf 8f6f 	isb	sy
 800ac08:	f3bf 8f4f 	dsb	sy
 800ac0c:	b662      	cpsie	i
 800ac0e:	60fb      	str	r3, [r7, #12]
}
 800ac10:	bf00      	nop
 800ac12:	bf00      	nop
 800ac14:	e7fd      	b.n	800ac12 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800ac16:	f000 ff91 	bl	800bb3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ac1a:	4b1d      	ldr	r3, [pc, #116]	@ (800ac90 <xTaskCheckForTimeOut+0xc8>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	69ba      	ldr	r2, [r7, #24]
 800ac26:	1ad3      	subs	r3, r2, r3
 800ac28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ac32:	d102      	bne.n	800ac3a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ac34:	2300      	movs	r3, #0
 800ac36:	61fb      	str	r3, [r7, #28]
 800ac38:	e023      	b.n	800ac82 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681a      	ldr	r2, [r3, #0]
 800ac3e:	4b15      	ldr	r3, [pc, #84]	@ (800ac94 <xTaskCheckForTimeOut+0xcc>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d007      	beq.n	800ac56 <xTaskCheckForTimeOut+0x8e>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	69ba      	ldr	r2, [r7, #24]
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d302      	bcc.n	800ac56 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ac50:	2301      	movs	r3, #1
 800ac52:	61fb      	str	r3, [r7, #28]
 800ac54:	e015      	b.n	800ac82 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	697a      	ldr	r2, [r7, #20]
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d20b      	bcs.n	800ac78 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	681a      	ldr	r2, [r3, #0]
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	1ad2      	subs	r2, r2, r3
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f7ff ff95 	bl	800ab9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ac72:	2300      	movs	r3, #0
 800ac74:	61fb      	str	r3, [r7, #28]
 800ac76:	e004      	b.n	800ac82 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ac82:	f000 ff91 	bl	800bba8 <vPortExitCritical>

	return xReturn;
 800ac86:	69fb      	ldr	r3, [r7, #28]
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3720      	adds	r7, #32
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}
 800ac90:	200062b8 	.word	0x200062b8
 800ac94:	200062cc 	.word	0x200062cc

0800ac98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ac98:	b480      	push	{r7}
 800ac9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ac9c:	4b03      	ldr	r3, [pc, #12]	@ (800acac <vTaskMissedYield+0x14>)
 800ac9e:	2201      	movs	r2, #1
 800aca0:	601a      	str	r2, [r3, #0]
}
 800aca2:	bf00      	nop
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr
 800acac:	200062c8 	.word	0x200062c8

0800acb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800acb8:	f000 f852 	bl	800ad60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800acbc:	4b06      	ldr	r3, [pc, #24]	@ (800acd8 <prvIdleTask+0x28>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	d9f9      	bls.n	800acb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800acc4:	4b05      	ldr	r3, [pc, #20]	@ (800acdc <prvIdleTask+0x2c>)
 800acc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acca:	601a      	str	r2, [r3, #0]
 800accc:	f3bf 8f4f 	dsb	sy
 800acd0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800acd4:	e7f0      	b.n	800acb8 <prvIdleTask+0x8>
 800acd6:	bf00      	nop
 800acd8:	20005de4 	.word	0x20005de4
 800acdc:	e000ed04 	.word	0xe000ed04

0800ace0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b082      	sub	sp, #8
 800ace4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ace6:	2300      	movs	r3, #0
 800ace8:	607b      	str	r3, [r7, #4]
 800acea:	e00c      	b.n	800ad06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	4613      	mov	r3, r2
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	4413      	add	r3, r2
 800acf4:	009b      	lsls	r3, r3, #2
 800acf6:	4a12      	ldr	r2, [pc, #72]	@ (800ad40 <prvInitialiseTaskLists+0x60>)
 800acf8:	4413      	add	r3, r2
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7fe fa3e 	bl	800917c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	3301      	adds	r3, #1
 800ad04:	607b      	str	r3, [r7, #4]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2b37      	cmp	r3, #55	@ 0x37
 800ad0a:	d9ef      	bls.n	800acec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ad0c:	480d      	ldr	r0, [pc, #52]	@ (800ad44 <prvInitialiseTaskLists+0x64>)
 800ad0e:	f7fe fa35 	bl	800917c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ad12:	480d      	ldr	r0, [pc, #52]	@ (800ad48 <prvInitialiseTaskLists+0x68>)
 800ad14:	f7fe fa32 	bl	800917c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ad18:	480c      	ldr	r0, [pc, #48]	@ (800ad4c <prvInitialiseTaskLists+0x6c>)
 800ad1a:	f7fe fa2f 	bl	800917c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ad1e:	480c      	ldr	r0, [pc, #48]	@ (800ad50 <prvInitialiseTaskLists+0x70>)
 800ad20:	f7fe fa2c 	bl	800917c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ad24:	480b      	ldr	r0, [pc, #44]	@ (800ad54 <prvInitialiseTaskLists+0x74>)
 800ad26:	f7fe fa29 	bl	800917c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ad2a:	4b0b      	ldr	r3, [pc, #44]	@ (800ad58 <prvInitialiseTaskLists+0x78>)
 800ad2c:	4a05      	ldr	r2, [pc, #20]	@ (800ad44 <prvInitialiseTaskLists+0x64>)
 800ad2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ad30:	4b0a      	ldr	r3, [pc, #40]	@ (800ad5c <prvInitialiseTaskLists+0x7c>)
 800ad32:	4a05      	ldr	r2, [pc, #20]	@ (800ad48 <prvInitialiseTaskLists+0x68>)
 800ad34:	601a      	str	r2, [r3, #0]
}
 800ad36:	bf00      	nop
 800ad38:	3708      	adds	r7, #8
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
 800ad3e:	bf00      	nop
 800ad40:	20005de4 	.word	0x20005de4
 800ad44:	20006244 	.word	0x20006244
 800ad48:	20006258 	.word	0x20006258
 800ad4c:	20006274 	.word	0x20006274
 800ad50:	20006288 	.word	0x20006288
 800ad54:	200062a0 	.word	0x200062a0
 800ad58:	2000626c 	.word	0x2000626c
 800ad5c:	20006270 	.word	0x20006270

0800ad60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b082      	sub	sp, #8
 800ad64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad66:	e019      	b.n	800ad9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ad68:	f000 fee8 	bl	800bb3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad6c:	4b10      	ldr	r3, [pc, #64]	@ (800adb0 <prvCheckTasksWaitingTermination+0x50>)
 800ad6e:	68db      	ldr	r3, [r3, #12]
 800ad70:	68db      	ldr	r3, [r3, #12]
 800ad72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	3304      	adds	r3, #4
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f7fe fa89 	bl	8009290 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ad7e:	4b0d      	ldr	r3, [pc, #52]	@ (800adb4 <prvCheckTasksWaitingTermination+0x54>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	3b01      	subs	r3, #1
 800ad84:	4a0b      	ldr	r2, [pc, #44]	@ (800adb4 <prvCheckTasksWaitingTermination+0x54>)
 800ad86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ad88:	4b0b      	ldr	r3, [pc, #44]	@ (800adb8 <prvCheckTasksWaitingTermination+0x58>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	3b01      	subs	r3, #1
 800ad8e:	4a0a      	ldr	r2, [pc, #40]	@ (800adb8 <prvCheckTasksWaitingTermination+0x58>)
 800ad90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ad92:	f000 ff09 	bl	800bba8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f000 f810 	bl	800adbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad9c:	4b06      	ldr	r3, [pc, #24]	@ (800adb8 <prvCheckTasksWaitingTermination+0x58>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d1e1      	bne.n	800ad68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ada4:	bf00      	nop
 800ada6:	bf00      	nop
 800ada8:	3708      	adds	r7, #8
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
 800adae:	bf00      	nop
 800adb0:	20006288 	.word	0x20006288
 800adb4:	200062b4 	.word	0x200062b4
 800adb8:	2000629c 	.word	0x2000629c

0800adbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d108      	bne.n	800ade0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800add2:	4618      	mov	r0, r3
 800add4:	f001 f8ae 	bl	800bf34 <vPortFree>
				vPortFree( pxTCB );
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f001 f8ab 	bl	800bf34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800adde:	e01b      	b.n	800ae18 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ade6:	2b01      	cmp	r3, #1
 800ade8:	d103      	bne.n	800adf2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f001 f8a2 	bl	800bf34 <vPortFree>
	}
 800adf0:	e012      	b.n	800ae18 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800adf8:	2b02      	cmp	r3, #2
 800adfa:	d00d      	beq.n	800ae18 <prvDeleteTCB+0x5c>
	__asm volatile
 800adfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae00:	b672      	cpsid	i
 800ae02:	f383 8811 	msr	BASEPRI, r3
 800ae06:	f3bf 8f6f 	isb	sy
 800ae0a:	f3bf 8f4f 	dsb	sy
 800ae0e:	b662      	cpsie	i
 800ae10:	60fb      	str	r3, [r7, #12]
}
 800ae12:	bf00      	nop
 800ae14:	bf00      	nop
 800ae16:	e7fd      	b.n	800ae14 <prvDeleteTCB+0x58>
	}
 800ae18:	bf00      	nop
 800ae1a:	3710      	adds	r7, #16
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ae20:	b480      	push	{r7}
 800ae22:	b083      	sub	sp, #12
 800ae24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae26:	4b0c      	ldr	r3, [pc, #48]	@ (800ae58 <prvResetNextTaskUnblockTime+0x38>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d104      	bne.n	800ae3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ae30:	4b0a      	ldr	r3, [pc, #40]	@ (800ae5c <prvResetNextTaskUnblockTime+0x3c>)
 800ae32:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ae36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ae38:	e008      	b.n	800ae4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae3a:	4b07      	ldr	r3, [pc, #28]	@ (800ae58 <prvResetNextTaskUnblockTime+0x38>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	68db      	ldr	r3, [r3, #12]
 800ae40:	68db      	ldr	r3, [r3, #12]
 800ae42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	4a04      	ldr	r2, [pc, #16]	@ (800ae5c <prvResetNextTaskUnblockTime+0x3c>)
 800ae4a:	6013      	str	r3, [r2, #0]
}
 800ae4c:	bf00      	nop
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr
 800ae58:	2000626c 	.word	0x2000626c
 800ae5c:	200062d4 	.word	0x200062d4

0800ae60 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ae60:	b480      	push	{r7}
 800ae62:	b083      	sub	sp, #12
 800ae64:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ae66:	4b05      	ldr	r3, [pc, #20]	@ (800ae7c <xTaskGetCurrentTaskHandle+0x1c>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ae6c:	687b      	ldr	r3, [r7, #4]
	}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	370c      	adds	r7, #12
 800ae72:	46bd      	mov	sp, r7
 800ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae78:	4770      	bx	lr
 800ae7a:	bf00      	nop
 800ae7c:	20005de0 	.word	0x20005de0

0800ae80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ae80:	b480      	push	{r7}
 800ae82:	b083      	sub	sp, #12
 800ae84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ae86:	4b0b      	ldr	r3, [pc, #44]	@ (800aeb4 <xTaskGetSchedulerState+0x34>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d102      	bne.n	800ae94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	607b      	str	r3, [r7, #4]
 800ae92:	e008      	b.n	800aea6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae94:	4b08      	ldr	r3, [pc, #32]	@ (800aeb8 <xTaskGetSchedulerState+0x38>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d102      	bne.n	800aea2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ae9c:	2302      	movs	r3, #2
 800ae9e:	607b      	str	r3, [r7, #4]
 800aea0:	e001      	b.n	800aea6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aea2:	2300      	movs	r3, #0
 800aea4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aea6:	687b      	ldr	r3, [r7, #4]
	}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	370c      	adds	r7, #12
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr
 800aeb4:	200062c0 	.word	0x200062c0
 800aeb8:	200062dc 	.word	0x200062dc

0800aebc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b084      	sub	sp, #16
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800aec8:	2300      	movs	r3, #0
 800aeca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d051      	beq.n	800af76 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aed6:	4b2a      	ldr	r3, [pc, #168]	@ (800af80 <xTaskPriorityInherit+0xc4>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aedc:	429a      	cmp	r2, r3
 800aede:	d241      	bcs.n	800af64 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	699b      	ldr	r3, [r3, #24]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	db06      	blt.n	800aef6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aee8:	4b25      	ldr	r3, [pc, #148]	@ (800af80 <xTaskPriorityInherit+0xc4>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeee:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	6959      	ldr	r1, [r3, #20]
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aefe:	4613      	mov	r3, r2
 800af00:	009b      	lsls	r3, r3, #2
 800af02:	4413      	add	r3, r2
 800af04:	009b      	lsls	r3, r3, #2
 800af06:	4a1f      	ldr	r2, [pc, #124]	@ (800af84 <xTaskPriorityInherit+0xc8>)
 800af08:	4413      	add	r3, r2
 800af0a:	4299      	cmp	r1, r3
 800af0c:	d122      	bne.n	800af54 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	3304      	adds	r3, #4
 800af12:	4618      	mov	r0, r3
 800af14:	f7fe f9bc 	bl	8009290 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800af18:	4b19      	ldr	r3, [pc, #100]	@ (800af80 <xTaskPriorityInherit+0xc4>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af26:	4b18      	ldr	r3, [pc, #96]	@ (800af88 <xTaskPriorityInherit+0xcc>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d903      	bls.n	800af36 <xTaskPriorityInherit+0x7a>
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af32:	4a15      	ldr	r2, [pc, #84]	@ (800af88 <xTaskPriorityInherit+0xcc>)
 800af34:	6013      	str	r3, [r2, #0]
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af3a:	4613      	mov	r3, r2
 800af3c:	009b      	lsls	r3, r3, #2
 800af3e:	4413      	add	r3, r2
 800af40:	009b      	lsls	r3, r3, #2
 800af42:	4a10      	ldr	r2, [pc, #64]	@ (800af84 <xTaskPriorityInherit+0xc8>)
 800af44:	441a      	add	r2, r3
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	3304      	adds	r3, #4
 800af4a:	4619      	mov	r1, r3
 800af4c:	4610      	mov	r0, r2
 800af4e:	f7fe f942 	bl	80091d6 <vListInsertEnd>
 800af52:	e004      	b.n	800af5e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800af54:	4b0a      	ldr	r3, [pc, #40]	@ (800af80 <xTaskPriorityInherit+0xc4>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800af5e:	2301      	movs	r3, #1
 800af60:	60fb      	str	r3, [r7, #12]
 800af62:	e008      	b.n	800af76 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800af68:	4b05      	ldr	r3, [pc, #20]	@ (800af80 <xTaskPriorityInherit+0xc4>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af6e:	429a      	cmp	r2, r3
 800af70:	d201      	bcs.n	800af76 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800af72:	2301      	movs	r3, #1
 800af74:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800af76:	68fb      	ldr	r3, [r7, #12]
	}
 800af78:	4618      	mov	r0, r3
 800af7a:	3710      	adds	r7, #16
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}
 800af80:	20005de0 	.word	0x20005de0
 800af84:	20005de4 	.word	0x20005de4
 800af88:	200062bc 	.word	0x200062bc

0800af8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b086      	sub	sp, #24
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800af98:	2300      	movs	r3, #0
 800af9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d05c      	beq.n	800b05c <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800afa2:	4b31      	ldr	r3, [pc, #196]	@ (800b068 <xTaskPriorityDisinherit+0xdc>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	693a      	ldr	r2, [r7, #16]
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d00d      	beq.n	800afc8 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800afac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afb0:	b672      	cpsid	i
 800afb2:	f383 8811 	msr	BASEPRI, r3
 800afb6:	f3bf 8f6f 	isb	sy
 800afba:	f3bf 8f4f 	dsb	sy
 800afbe:	b662      	cpsie	i
 800afc0:	60fb      	str	r3, [r7, #12]
}
 800afc2:	bf00      	nop
 800afc4:	bf00      	nop
 800afc6:	e7fd      	b.n	800afc4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d10d      	bne.n	800afec <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800afd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afd4:	b672      	cpsid	i
 800afd6:	f383 8811 	msr	BASEPRI, r3
 800afda:	f3bf 8f6f 	isb	sy
 800afde:	f3bf 8f4f 	dsb	sy
 800afe2:	b662      	cpsie	i
 800afe4:	60bb      	str	r3, [r7, #8]
}
 800afe6:	bf00      	nop
 800afe8:	bf00      	nop
 800afea:	e7fd      	b.n	800afe8 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aff0:	1e5a      	subs	r2, r3, #1
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800affe:	429a      	cmp	r2, r3
 800b000:	d02c      	beq.n	800b05c <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b006:	2b00      	cmp	r3, #0
 800b008:	d128      	bne.n	800b05c <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	3304      	adds	r3, #4
 800b00e:	4618      	mov	r0, r3
 800b010:	f7fe f93e 	bl	8009290 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b020:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b02c:	4b0f      	ldr	r3, [pc, #60]	@ (800b06c <xTaskPriorityDisinherit+0xe0>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	429a      	cmp	r2, r3
 800b032:	d903      	bls.n	800b03c <xTaskPriorityDisinherit+0xb0>
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b038:	4a0c      	ldr	r2, [pc, #48]	@ (800b06c <xTaskPriorityDisinherit+0xe0>)
 800b03a:	6013      	str	r3, [r2, #0]
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b040:	4613      	mov	r3, r2
 800b042:	009b      	lsls	r3, r3, #2
 800b044:	4413      	add	r3, r2
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	4a09      	ldr	r2, [pc, #36]	@ (800b070 <xTaskPriorityDisinherit+0xe4>)
 800b04a:	441a      	add	r2, r3
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	3304      	adds	r3, #4
 800b050:	4619      	mov	r1, r3
 800b052:	4610      	mov	r0, r2
 800b054:	f7fe f8bf 	bl	80091d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b058:	2301      	movs	r3, #1
 800b05a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b05c:	697b      	ldr	r3, [r7, #20]
	}
 800b05e:	4618      	mov	r0, r3
 800b060:	3718      	adds	r7, #24
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	20005de0 	.word	0x20005de0
 800b06c:	200062bc 	.word	0x200062bc
 800b070:	20005de4 	.word	0x20005de4

0800b074 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b074:	b580      	push	{r7, lr}
 800b076:	b088      	sub	sp, #32
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b082:	2301      	movs	r3, #1
 800b084:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d070      	beq.n	800b16e <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b08c:	69bb      	ldr	r3, [r7, #24]
 800b08e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b090:	2b00      	cmp	r3, #0
 800b092:	d10d      	bne.n	800b0b0 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800b094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b098:	b672      	cpsid	i
 800b09a:	f383 8811 	msr	BASEPRI, r3
 800b09e:	f3bf 8f6f 	isb	sy
 800b0a2:	f3bf 8f4f 	dsb	sy
 800b0a6:	b662      	cpsie	i
 800b0a8:	60fb      	str	r3, [r7, #12]
}
 800b0aa:	bf00      	nop
 800b0ac:	bf00      	nop
 800b0ae:	e7fd      	b.n	800b0ac <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b0b0:	69bb      	ldr	r3, [r7, #24]
 800b0b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b0b4:	683a      	ldr	r2, [r7, #0]
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d902      	bls.n	800b0c0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	61fb      	str	r3, [r7, #28]
 800b0be:	e002      	b.n	800b0c6 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b0c0:	69bb      	ldr	r3, [r7, #24]
 800b0c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b0c4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b0c6:	69bb      	ldr	r3, [r7, #24]
 800b0c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0ca:	69fa      	ldr	r2, [r7, #28]
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d04e      	beq.n	800b16e <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b0d0:	69bb      	ldr	r3, [r7, #24]
 800b0d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0d4:	697a      	ldr	r2, [r7, #20]
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	d149      	bne.n	800b16e <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b0da:	4b27      	ldr	r3, [pc, #156]	@ (800b178 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	69ba      	ldr	r2, [r7, #24]
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d10d      	bne.n	800b100 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 800b0e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0e8:	b672      	cpsid	i
 800b0ea:	f383 8811 	msr	BASEPRI, r3
 800b0ee:	f3bf 8f6f 	isb	sy
 800b0f2:	f3bf 8f4f 	dsb	sy
 800b0f6:	b662      	cpsie	i
 800b0f8:	60bb      	str	r3, [r7, #8]
}
 800b0fa:	bf00      	nop
 800b0fc:	bf00      	nop
 800b0fe:	e7fd      	b.n	800b0fc <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b100:	69bb      	ldr	r3, [r7, #24]
 800b102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b104:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b106:	69bb      	ldr	r3, [r7, #24]
 800b108:	69fa      	ldr	r2, [r7, #28]
 800b10a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b10c:	69bb      	ldr	r3, [r7, #24]
 800b10e:	699b      	ldr	r3, [r3, #24]
 800b110:	2b00      	cmp	r3, #0
 800b112:	db04      	blt.n	800b11e <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b114:	69fb      	ldr	r3, [r7, #28]
 800b116:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b11a:	69bb      	ldr	r3, [r7, #24]
 800b11c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b11e:	69bb      	ldr	r3, [r7, #24]
 800b120:	6959      	ldr	r1, [r3, #20]
 800b122:	693a      	ldr	r2, [r7, #16]
 800b124:	4613      	mov	r3, r2
 800b126:	009b      	lsls	r3, r3, #2
 800b128:	4413      	add	r3, r2
 800b12a:	009b      	lsls	r3, r3, #2
 800b12c:	4a13      	ldr	r2, [pc, #76]	@ (800b17c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800b12e:	4413      	add	r3, r2
 800b130:	4299      	cmp	r1, r3
 800b132:	d11c      	bne.n	800b16e <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b134:	69bb      	ldr	r3, [r7, #24]
 800b136:	3304      	adds	r3, #4
 800b138:	4618      	mov	r0, r3
 800b13a:	f7fe f8a9 	bl	8009290 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b13e:	69bb      	ldr	r3, [r7, #24]
 800b140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b142:	4b0f      	ldr	r3, [pc, #60]	@ (800b180 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	429a      	cmp	r2, r3
 800b148:	d903      	bls.n	800b152 <vTaskPriorityDisinheritAfterTimeout+0xde>
 800b14a:	69bb      	ldr	r3, [r7, #24]
 800b14c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b14e:	4a0c      	ldr	r2, [pc, #48]	@ (800b180 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800b150:	6013      	str	r3, [r2, #0]
 800b152:	69bb      	ldr	r3, [r7, #24]
 800b154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b156:	4613      	mov	r3, r2
 800b158:	009b      	lsls	r3, r3, #2
 800b15a:	4413      	add	r3, r2
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	4a07      	ldr	r2, [pc, #28]	@ (800b17c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800b160:	441a      	add	r2, r3
 800b162:	69bb      	ldr	r3, [r7, #24]
 800b164:	3304      	adds	r3, #4
 800b166:	4619      	mov	r1, r3
 800b168:	4610      	mov	r0, r2
 800b16a:	f7fe f834 	bl	80091d6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b16e:	bf00      	nop
 800b170:	3720      	adds	r7, #32
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}
 800b176:	bf00      	nop
 800b178:	20005de0 	.word	0x20005de0
 800b17c:	20005de4 	.word	0x20005de4
 800b180:	200062bc 	.word	0x200062bc

0800b184 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b184:	b480      	push	{r7}
 800b186:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b188:	4b07      	ldr	r3, [pc, #28]	@ (800b1a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d004      	beq.n	800b19a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b190:	4b05      	ldr	r3, [pc, #20]	@ (800b1a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b196:	3201      	adds	r2, #1
 800b198:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800b19a:	4b03      	ldr	r3, [pc, #12]	@ (800b1a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b19c:	681b      	ldr	r3, [r3, #0]
	}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr
 800b1a8:	20005de0 	.word	0x20005de0

0800b1ac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b084      	sub	sp, #16
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b1b6:	4b21      	ldr	r3, [pc, #132]	@ (800b23c <prvAddCurrentTaskToDelayedList+0x90>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1bc:	4b20      	ldr	r3, [pc, #128]	@ (800b240 <prvAddCurrentTaskToDelayedList+0x94>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	3304      	adds	r3, #4
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f7fe f864 	bl	8009290 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b1ce:	d10a      	bne.n	800b1e6 <prvAddCurrentTaskToDelayedList+0x3a>
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d007      	beq.n	800b1e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1d6:	4b1a      	ldr	r3, [pc, #104]	@ (800b240 <prvAddCurrentTaskToDelayedList+0x94>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	3304      	adds	r3, #4
 800b1dc:	4619      	mov	r1, r3
 800b1de:	4819      	ldr	r0, [pc, #100]	@ (800b244 <prvAddCurrentTaskToDelayedList+0x98>)
 800b1e0:	f7fd fff9 	bl	80091d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b1e4:	e026      	b.n	800b234 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b1e6:	68fa      	ldr	r2, [r7, #12]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	4413      	add	r3, r2
 800b1ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b1ee:	4b14      	ldr	r3, [pc, #80]	@ (800b240 <prvAddCurrentTaskToDelayedList+0x94>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	68ba      	ldr	r2, [r7, #8]
 800b1f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b1f6:	68ba      	ldr	r2, [r7, #8]
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d209      	bcs.n	800b212 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1fe:	4b12      	ldr	r3, [pc, #72]	@ (800b248 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b200:	681a      	ldr	r2, [r3, #0]
 800b202:	4b0f      	ldr	r3, [pc, #60]	@ (800b240 <prvAddCurrentTaskToDelayedList+0x94>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	3304      	adds	r3, #4
 800b208:	4619      	mov	r1, r3
 800b20a:	4610      	mov	r0, r2
 800b20c:	f7fe f807 	bl	800921e <vListInsert>
}
 800b210:	e010      	b.n	800b234 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b212:	4b0e      	ldr	r3, [pc, #56]	@ (800b24c <prvAddCurrentTaskToDelayedList+0xa0>)
 800b214:	681a      	ldr	r2, [r3, #0]
 800b216:	4b0a      	ldr	r3, [pc, #40]	@ (800b240 <prvAddCurrentTaskToDelayedList+0x94>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	3304      	adds	r3, #4
 800b21c:	4619      	mov	r1, r3
 800b21e:	4610      	mov	r0, r2
 800b220:	f7fd fffd 	bl	800921e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b224:	4b0a      	ldr	r3, [pc, #40]	@ (800b250 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	68ba      	ldr	r2, [r7, #8]
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d202      	bcs.n	800b234 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b22e:	4a08      	ldr	r2, [pc, #32]	@ (800b250 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	6013      	str	r3, [r2, #0]
}
 800b234:	bf00      	nop
 800b236:	3710      	adds	r7, #16
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}
 800b23c:	200062b8 	.word	0x200062b8
 800b240:	20005de0 	.word	0x20005de0
 800b244:	200062a0 	.word	0x200062a0
 800b248:	20006270 	.word	0x20006270
 800b24c:	2000626c 	.word	0x2000626c
 800b250:	200062d4 	.word	0x200062d4

0800b254 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b08a      	sub	sp, #40	@ 0x28
 800b258:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b25a:	2300      	movs	r3, #0
 800b25c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b25e:	f000 fb21 	bl	800b8a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b262:	4b1e      	ldr	r3, [pc, #120]	@ (800b2dc <xTimerCreateTimerTask+0x88>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d021      	beq.n	800b2ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b26a:	2300      	movs	r3, #0
 800b26c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b26e:	2300      	movs	r3, #0
 800b270:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b272:	1d3a      	adds	r2, r7, #4
 800b274:	f107 0108 	add.w	r1, r7, #8
 800b278:	f107 030c 	add.w	r3, r7, #12
 800b27c:	4618      	mov	r0, r3
 800b27e:	f7fd ff63 	bl	8009148 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b282:	6879      	ldr	r1, [r7, #4]
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	68fa      	ldr	r2, [r7, #12]
 800b288:	9202      	str	r2, [sp, #8]
 800b28a:	9301      	str	r3, [sp, #4]
 800b28c:	2302      	movs	r3, #2
 800b28e:	9300      	str	r3, [sp, #0]
 800b290:	2300      	movs	r3, #0
 800b292:	460a      	mov	r2, r1
 800b294:	4912      	ldr	r1, [pc, #72]	@ (800b2e0 <xTimerCreateTimerTask+0x8c>)
 800b296:	4813      	ldr	r0, [pc, #76]	@ (800b2e4 <xTimerCreateTimerTask+0x90>)
 800b298:	f7fe ff6e 	bl	800a178 <xTaskCreateStatic>
 800b29c:	4603      	mov	r3, r0
 800b29e:	4a12      	ldr	r2, [pc, #72]	@ (800b2e8 <xTimerCreateTimerTask+0x94>)
 800b2a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b2a2:	4b11      	ldr	r3, [pc, #68]	@ (800b2e8 <xTimerCreateTimerTask+0x94>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d001      	beq.n	800b2ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d10d      	bne.n	800b2d0 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800b2b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2b8:	b672      	cpsid	i
 800b2ba:	f383 8811 	msr	BASEPRI, r3
 800b2be:	f3bf 8f6f 	isb	sy
 800b2c2:	f3bf 8f4f 	dsb	sy
 800b2c6:	b662      	cpsie	i
 800b2c8:	613b      	str	r3, [r7, #16]
}
 800b2ca:	bf00      	nop
 800b2cc:	bf00      	nop
 800b2ce:	e7fd      	b.n	800b2cc <xTimerCreateTimerTask+0x78>
	return xReturn;
 800b2d0:	697b      	ldr	r3, [r7, #20]
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3718      	adds	r7, #24
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}
 800b2da:	bf00      	nop
 800b2dc:	20006310 	.word	0x20006310
 800b2e0:	0801762c 	.word	0x0801762c
 800b2e4:	0800b42d 	.word	0x0800b42d
 800b2e8:	20006314 	.word	0x20006314

0800b2ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b08a      	sub	sp, #40	@ 0x28
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	60f8      	str	r0, [r7, #12]
 800b2f4:	60b9      	str	r1, [r7, #8]
 800b2f6:	607a      	str	r2, [r7, #4]
 800b2f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d10d      	bne.n	800b320 <xTimerGenericCommand+0x34>
	__asm volatile
 800b304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b308:	b672      	cpsid	i
 800b30a:	f383 8811 	msr	BASEPRI, r3
 800b30e:	f3bf 8f6f 	isb	sy
 800b312:	f3bf 8f4f 	dsb	sy
 800b316:	b662      	cpsie	i
 800b318:	623b      	str	r3, [r7, #32]
}
 800b31a:	bf00      	nop
 800b31c:	bf00      	nop
 800b31e:	e7fd      	b.n	800b31c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b320:	4b19      	ldr	r3, [pc, #100]	@ (800b388 <xTimerGenericCommand+0x9c>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d02a      	beq.n	800b37e <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	2b05      	cmp	r3, #5
 800b338:	dc18      	bgt.n	800b36c <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b33a:	f7ff fda1 	bl	800ae80 <xTaskGetSchedulerState>
 800b33e:	4603      	mov	r3, r0
 800b340:	2b02      	cmp	r3, #2
 800b342:	d109      	bne.n	800b358 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b344:	4b10      	ldr	r3, [pc, #64]	@ (800b388 <xTimerGenericCommand+0x9c>)
 800b346:	6818      	ldr	r0, [r3, #0]
 800b348:	f107 0110 	add.w	r1, r7, #16
 800b34c:	2300      	movs	r3, #0
 800b34e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b350:	f7fe f9de 	bl	8009710 <xQueueGenericSend>
 800b354:	6278      	str	r0, [r7, #36]	@ 0x24
 800b356:	e012      	b.n	800b37e <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b358:	4b0b      	ldr	r3, [pc, #44]	@ (800b388 <xTimerGenericCommand+0x9c>)
 800b35a:	6818      	ldr	r0, [r3, #0]
 800b35c:	f107 0110 	add.w	r1, r7, #16
 800b360:	2300      	movs	r3, #0
 800b362:	2200      	movs	r2, #0
 800b364:	f7fe f9d4 	bl	8009710 <xQueueGenericSend>
 800b368:	6278      	str	r0, [r7, #36]	@ 0x24
 800b36a:	e008      	b.n	800b37e <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b36c:	4b06      	ldr	r3, [pc, #24]	@ (800b388 <xTimerGenericCommand+0x9c>)
 800b36e:	6818      	ldr	r0, [r3, #0]
 800b370:	f107 0110 	add.w	r1, r7, #16
 800b374:	2300      	movs	r3, #0
 800b376:	683a      	ldr	r2, [r7, #0]
 800b378:	f7fe fad4 	bl	8009924 <xQueueGenericSendFromISR>
 800b37c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b380:	4618      	mov	r0, r3
 800b382:	3728      	adds	r7, #40	@ 0x28
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}
 800b388:	20006310 	.word	0x20006310

0800b38c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b088      	sub	sp, #32
 800b390:	af02      	add	r7, sp, #8
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b396:	4b24      	ldr	r3, [pc, #144]	@ (800b428 <prvProcessExpiredTimer+0x9c>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	68db      	ldr	r3, [r3, #12]
 800b39c:	68db      	ldr	r3, [r3, #12]
 800b39e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	3304      	adds	r3, #4
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f7fd ff73 	bl	8009290 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b3b0:	f003 0304 	and.w	r3, r3, #4
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d025      	beq.n	800b404 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	699a      	ldr	r2, [r3, #24]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	18d1      	adds	r1, r2, r3
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	683a      	ldr	r2, [r7, #0]
 800b3c4:	6978      	ldr	r0, [r7, #20]
 800b3c6:	f000 f8d7 	bl	800b578 <prvInsertTimerInActiveList>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d022      	beq.n	800b416 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	9300      	str	r3, [sp, #0]
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	687a      	ldr	r2, [r7, #4]
 800b3d8:	2100      	movs	r1, #0
 800b3da:	6978      	ldr	r0, [r7, #20]
 800b3dc:	f7ff ff86 	bl	800b2ec <xTimerGenericCommand>
 800b3e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d116      	bne.n	800b416 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800b3e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3ec:	b672      	cpsid	i
 800b3ee:	f383 8811 	msr	BASEPRI, r3
 800b3f2:	f3bf 8f6f 	isb	sy
 800b3f6:	f3bf 8f4f 	dsb	sy
 800b3fa:	b662      	cpsie	i
 800b3fc:	60fb      	str	r3, [r7, #12]
}
 800b3fe:	bf00      	nop
 800b400:	bf00      	nop
 800b402:	e7fd      	b.n	800b400 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b40a:	f023 0301 	bic.w	r3, r3, #1
 800b40e:	b2da      	uxtb	r2, r3
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	6a1b      	ldr	r3, [r3, #32]
 800b41a:	6978      	ldr	r0, [r7, #20]
 800b41c:	4798      	blx	r3
}
 800b41e:	bf00      	nop
 800b420:	3718      	adds	r7, #24
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}
 800b426:	bf00      	nop
 800b428:	20006308 	.word	0x20006308

0800b42c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b434:	f107 0308 	add.w	r3, r7, #8
 800b438:	4618      	mov	r0, r3
 800b43a:	f000 f859 	bl	800b4f0 <prvGetNextExpireTime>
 800b43e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	4619      	mov	r1, r3
 800b444:	68f8      	ldr	r0, [r7, #12]
 800b446:	f000 f805 	bl	800b454 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b44a:	f000 f8d7 	bl	800b5fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b44e:	bf00      	nop
 800b450:	e7f0      	b.n	800b434 <prvTimerTask+0x8>
	...

0800b454 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b45e:	f7ff f8dd 	bl	800a61c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b462:	f107 0308 	add.w	r3, r7, #8
 800b466:	4618      	mov	r0, r3
 800b468:	f000 f866 	bl	800b538 <prvSampleTimeNow>
 800b46c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d130      	bne.n	800b4d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d10a      	bne.n	800b490 <prvProcessTimerOrBlockTask+0x3c>
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	429a      	cmp	r2, r3
 800b480:	d806      	bhi.n	800b490 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b482:	f7ff f8d9 	bl	800a638 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b486:	68f9      	ldr	r1, [r7, #12]
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f7ff ff7f 	bl	800b38c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b48e:	e024      	b.n	800b4da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d008      	beq.n	800b4a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b496:	4b13      	ldr	r3, [pc, #76]	@ (800b4e4 <prvProcessTimerOrBlockTask+0x90>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d101      	bne.n	800b4a4 <prvProcessTimerOrBlockTask+0x50>
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	e000      	b.n	800b4a6 <prvProcessTimerOrBlockTask+0x52>
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b4a8:	4b0f      	ldr	r3, [pc, #60]	@ (800b4e8 <prvProcessTimerOrBlockTask+0x94>)
 800b4aa:	6818      	ldr	r0, [r3, #0]
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	1ad3      	subs	r3, r2, r3
 800b4b2:	683a      	ldr	r2, [r7, #0]
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	f7fe fe2b 	bl	800a110 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b4ba:	f7ff f8bd 	bl	800a638 <xTaskResumeAll>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d10a      	bne.n	800b4da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b4c4:	4b09      	ldr	r3, [pc, #36]	@ (800b4ec <prvProcessTimerOrBlockTask+0x98>)
 800b4c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4ca:	601a      	str	r2, [r3, #0]
 800b4cc:	f3bf 8f4f 	dsb	sy
 800b4d0:	f3bf 8f6f 	isb	sy
}
 800b4d4:	e001      	b.n	800b4da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b4d6:	f7ff f8af 	bl	800a638 <xTaskResumeAll>
}
 800b4da:	bf00      	nop
 800b4dc:	3710      	adds	r7, #16
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
 800b4e2:	bf00      	nop
 800b4e4:	2000630c 	.word	0x2000630c
 800b4e8:	20006310 	.word	0x20006310
 800b4ec:	e000ed04 	.word	0xe000ed04

0800b4f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b085      	sub	sp, #20
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b4f8:	4b0e      	ldr	r3, [pc, #56]	@ (800b534 <prvGetNextExpireTime+0x44>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d101      	bne.n	800b506 <prvGetNextExpireTime+0x16>
 800b502:	2201      	movs	r2, #1
 800b504:	e000      	b.n	800b508 <prvGetNextExpireTime+0x18>
 800b506:	2200      	movs	r2, #0
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d105      	bne.n	800b520 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b514:	4b07      	ldr	r3, [pc, #28]	@ (800b534 <prvGetNextExpireTime+0x44>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	68db      	ldr	r3, [r3, #12]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	60fb      	str	r3, [r7, #12]
 800b51e:	e001      	b.n	800b524 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b520:	2300      	movs	r3, #0
 800b522:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b524:	68fb      	ldr	r3, [r7, #12]
}
 800b526:	4618      	mov	r0, r3
 800b528:	3714      	adds	r7, #20
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr
 800b532:	bf00      	nop
 800b534:	20006308 	.word	0x20006308

0800b538 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b540:	f7ff f91a 	bl	800a778 <xTaskGetTickCount>
 800b544:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b546:	4b0b      	ldr	r3, [pc, #44]	@ (800b574 <prvSampleTimeNow+0x3c>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	68fa      	ldr	r2, [r7, #12]
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d205      	bcs.n	800b55c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b550:	f000 f940 	bl	800b7d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2201      	movs	r2, #1
 800b558:	601a      	str	r2, [r3, #0]
 800b55a:	e002      	b.n	800b562 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2200      	movs	r2, #0
 800b560:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b562:	4a04      	ldr	r2, [pc, #16]	@ (800b574 <prvSampleTimeNow+0x3c>)
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b568:	68fb      	ldr	r3, [r7, #12]
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3710      	adds	r7, #16
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
 800b572:	bf00      	nop
 800b574:	20006318 	.word	0x20006318

0800b578 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b086      	sub	sp, #24
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	60f8      	str	r0, [r7, #12]
 800b580:	60b9      	str	r1, [r7, #8]
 800b582:	607a      	str	r2, [r7, #4]
 800b584:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b586:	2300      	movs	r3, #0
 800b588:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	68ba      	ldr	r2, [r7, #8]
 800b58e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	68fa      	ldr	r2, [r7, #12]
 800b594:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b596:	68ba      	ldr	r2, [r7, #8]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d812      	bhi.n	800b5c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b59e:	687a      	ldr	r2, [r7, #4]
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	1ad2      	subs	r2, r2, r3
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	699b      	ldr	r3, [r3, #24]
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d302      	bcc.n	800b5b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	617b      	str	r3, [r7, #20]
 800b5b0:	e01b      	b.n	800b5ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b5b2:	4b10      	ldr	r3, [pc, #64]	@ (800b5f4 <prvInsertTimerInActiveList+0x7c>)
 800b5b4:	681a      	ldr	r2, [r3, #0]
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	3304      	adds	r3, #4
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	4610      	mov	r0, r2
 800b5be:	f7fd fe2e 	bl	800921e <vListInsert>
 800b5c2:	e012      	b.n	800b5ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b5c4:	687a      	ldr	r2, [r7, #4]
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d206      	bcs.n	800b5da <prvInsertTimerInActiveList+0x62>
 800b5cc:	68ba      	ldr	r2, [r7, #8]
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d302      	bcc.n	800b5da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	617b      	str	r3, [r7, #20]
 800b5d8:	e007      	b.n	800b5ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b5da:	4b07      	ldr	r3, [pc, #28]	@ (800b5f8 <prvInsertTimerInActiveList+0x80>)
 800b5dc:	681a      	ldr	r2, [r3, #0]
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	3304      	adds	r3, #4
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	4610      	mov	r0, r2
 800b5e6:	f7fd fe1a 	bl	800921e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b5ea:	697b      	ldr	r3, [r7, #20]
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3718      	adds	r7, #24
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}
 800b5f4:	2000630c 	.word	0x2000630c
 800b5f8:	20006308 	.word	0x20006308

0800b5fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b08e      	sub	sp, #56	@ 0x38
 800b600:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b602:	e0d4      	b.n	800b7ae <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2b00      	cmp	r3, #0
 800b608:	da1b      	bge.n	800b642 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b60a:	1d3b      	adds	r3, r7, #4
 800b60c:	3304      	adds	r3, #4
 800b60e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b612:	2b00      	cmp	r3, #0
 800b614:	d10d      	bne.n	800b632 <prvProcessReceivedCommands+0x36>
	__asm volatile
 800b616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b61a:	b672      	cpsid	i
 800b61c:	f383 8811 	msr	BASEPRI, r3
 800b620:	f3bf 8f6f 	isb	sy
 800b624:	f3bf 8f4f 	dsb	sy
 800b628:	b662      	cpsie	i
 800b62a:	61fb      	str	r3, [r7, #28]
}
 800b62c:	bf00      	nop
 800b62e:	bf00      	nop
 800b630:	e7fd      	b.n	800b62e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b638:	6850      	ldr	r0, [r2, #4]
 800b63a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b63c:	6892      	ldr	r2, [r2, #8]
 800b63e:	4611      	mov	r1, r2
 800b640:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2b00      	cmp	r3, #0
 800b646:	f2c0 80b2 	blt.w	800b7ae <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b64e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b650:	695b      	ldr	r3, [r3, #20]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d004      	beq.n	800b660 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b658:	3304      	adds	r3, #4
 800b65a:	4618      	mov	r0, r3
 800b65c:	f7fd fe18 	bl	8009290 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b660:	463b      	mov	r3, r7
 800b662:	4618      	mov	r0, r3
 800b664:	f7ff ff68 	bl	800b538 <prvSampleTimeNow>
 800b668:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2b09      	cmp	r3, #9
 800b66e:	f200 809b 	bhi.w	800b7a8 <prvProcessReceivedCommands+0x1ac>
 800b672:	a201      	add	r2, pc, #4	@ (adr r2, 800b678 <prvProcessReceivedCommands+0x7c>)
 800b674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b678:	0800b6a1 	.word	0x0800b6a1
 800b67c:	0800b6a1 	.word	0x0800b6a1
 800b680:	0800b6a1 	.word	0x0800b6a1
 800b684:	0800b71b 	.word	0x0800b71b
 800b688:	0800b72f 	.word	0x0800b72f
 800b68c:	0800b77f 	.word	0x0800b77f
 800b690:	0800b6a1 	.word	0x0800b6a1
 800b694:	0800b6a1 	.word	0x0800b6a1
 800b698:	0800b71b 	.word	0x0800b71b
 800b69c:	0800b72f 	.word	0x0800b72f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b6a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b6a6:	f043 0301 	orr.w	r3, r3, #1
 800b6aa:	b2da      	uxtb	r2, r3
 800b6ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b6b2:	68ba      	ldr	r2, [r7, #8]
 800b6b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6b6:	699b      	ldr	r3, [r3, #24]
 800b6b8:	18d1      	adds	r1, r2, r3
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b6c0:	f7ff ff5a 	bl	800b578 <prvInsertTimerInActiveList>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d070      	beq.n	800b7ac <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b6ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6cc:	6a1b      	ldr	r3, [r3, #32]
 800b6ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b6d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b6d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b6d8:	f003 0304 	and.w	r3, r3, #4
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d065      	beq.n	800b7ac <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b6e0:	68ba      	ldr	r2, [r7, #8]
 800b6e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6e4:	699b      	ldr	r3, [r3, #24]
 800b6e6:	441a      	add	r2, r3
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	9300      	str	r3, [sp, #0]
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	2100      	movs	r1, #0
 800b6f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b6f2:	f7ff fdfb 	bl	800b2ec <xTimerGenericCommand>
 800b6f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b6f8:	6a3b      	ldr	r3, [r7, #32]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d156      	bne.n	800b7ac <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800b6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b702:	b672      	cpsid	i
 800b704:	f383 8811 	msr	BASEPRI, r3
 800b708:	f3bf 8f6f 	isb	sy
 800b70c:	f3bf 8f4f 	dsb	sy
 800b710:	b662      	cpsie	i
 800b712:	61bb      	str	r3, [r7, #24]
}
 800b714:	bf00      	nop
 800b716:	bf00      	nop
 800b718:	e7fd      	b.n	800b716 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b71a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b71c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b720:	f023 0301 	bic.w	r3, r3, #1
 800b724:	b2da      	uxtb	r2, r3
 800b726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b728:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b72c:	e03f      	b.n	800b7ae <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b72e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b730:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b734:	f043 0301 	orr.w	r3, r3, #1
 800b738:	b2da      	uxtb	r2, r3
 800b73a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b73c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b740:	68ba      	ldr	r2, [r7, #8]
 800b742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b744:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b748:	699b      	ldr	r3, [r3, #24]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d10d      	bne.n	800b76a <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800b74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b752:	b672      	cpsid	i
 800b754:	f383 8811 	msr	BASEPRI, r3
 800b758:	f3bf 8f6f 	isb	sy
 800b75c:	f3bf 8f4f 	dsb	sy
 800b760:	b662      	cpsie	i
 800b762:	617b      	str	r3, [r7, #20]
}
 800b764:	bf00      	nop
 800b766:	bf00      	nop
 800b768:	e7fd      	b.n	800b766 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b76a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b76c:	699a      	ldr	r2, [r3, #24]
 800b76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b770:	18d1      	adds	r1, r2, r3
 800b772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b774:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b776:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b778:	f7ff fefe 	bl	800b578 <prvInsertTimerInActiveList>
					break;
 800b77c:	e017      	b.n	800b7ae <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b77e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b780:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b784:	f003 0302 	and.w	r3, r3, #2
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d103      	bne.n	800b794 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800b78c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b78e:	f000 fbd1 	bl	800bf34 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b792:	e00c      	b.n	800b7ae <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b796:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b79a:	f023 0301 	bic.w	r3, r3, #1
 800b79e:	b2da      	uxtb	r2, r3
 800b7a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b7a6:	e002      	b.n	800b7ae <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800b7a8:	bf00      	nop
 800b7aa:	e000      	b.n	800b7ae <prvProcessReceivedCommands+0x1b2>
					break;
 800b7ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b7ae:	4b08      	ldr	r3, [pc, #32]	@ (800b7d0 <prvProcessReceivedCommands+0x1d4>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	1d39      	adds	r1, r7, #4
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f7fe f958 	bl	8009a6c <xQueueReceive>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	f47f af20 	bne.w	800b604 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b7c4:	bf00      	nop
 800b7c6:	bf00      	nop
 800b7c8:	3730      	adds	r7, #48	@ 0x30
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}
 800b7ce:	bf00      	nop
 800b7d0:	20006310 	.word	0x20006310

0800b7d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b088      	sub	sp, #32
 800b7d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b7da:	e04b      	b.n	800b874 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b7dc:	4b2f      	ldr	r3, [pc, #188]	@ (800b89c <prvSwitchTimerLists+0xc8>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	68db      	ldr	r3, [r3, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7e6:	4b2d      	ldr	r3, [pc, #180]	@ (800b89c <prvSwitchTimerLists+0xc8>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	68db      	ldr	r3, [r3, #12]
 800b7ec:	68db      	ldr	r3, [r3, #12]
 800b7ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	3304      	adds	r3, #4
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f7fd fd4b 	bl	8009290 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	6a1b      	ldr	r3, [r3, #32]
 800b7fe:	68f8      	ldr	r0, [r7, #12]
 800b800:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b808:	f003 0304 	and.w	r3, r3, #4
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d031      	beq.n	800b874 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	699b      	ldr	r3, [r3, #24]
 800b814:	693a      	ldr	r2, [r7, #16]
 800b816:	4413      	add	r3, r2
 800b818:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b81a:	68ba      	ldr	r2, [r7, #8]
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	429a      	cmp	r2, r3
 800b820:	d90e      	bls.n	800b840 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	68ba      	ldr	r2, [r7, #8]
 800b826:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	68fa      	ldr	r2, [r7, #12]
 800b82c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b82e:	4b1b      	ldr	r3, [pc, #108]	@ (800b89c <prvSwitchTimerLists+0xc8>)
 800b830:	681a      	ldr	r2, [r3, #0]
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	3304      	adds	r3, #4
 800b836:	4619      	mov	r1, r3
 800b838:	4610      	mov	r0, r2
 800b83a:	f7fd fcf0 	bl	800921e <vListInsert>
 800b83e:	e019      	b.n	800b874 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b840:	2300      	movs	r3, #0
 800b842:	9300      	str	r3, [sp, #0]
 800b844:	2300      	movs	r3, #0
 800b846:	693a      	ldr	r2, [r7, #16]
 800b848:	2100      	movs	r1, #0
 800b84a:	68f8      	ldr	r0, [r7, #12]
 800b84c:	f7ff fd4e 	bl	800b2ec <xTimerGenericCommand>
 800b850:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d10d      	bne.n	800b874 <prvSwitchTimerLists+0xa0>
	__asm volatile
 800b858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b85c:	b672      	cpsid	i
 800b85e:	f383 8811 	msr	BASEPRI, r3
 800b862:	f3bf 8f6f 	isb	sy
 800b866:	f3bf 8f4f 	dsb	sy
 800b86a:	b662      	cpsie	i
 800b86c:	603b      	str	r3, [r7, #0]
}
 800b86e:	bf00      	nop
 800b870:	bf00      	nop
 800b872:	e7fd      	b.n	800b870 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b874:	4b09      	ldr	r3, [pc, #36]	@ (800b89c <prvSwitchTimerLists+0xc8>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d1ae      	bne.n	800b7dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b87e:	4b07      	ldr	r3, [pc, #28]	@ (800b89c <prvSwitchTimerLists+0xc8>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b884:	4b06      	ldr	r3, [pc, #24]	@ (800b8a0 <prvSwitchTimerLists+0xcc>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	4a04      	ldr	r2, [pc, #16]	@ (800b89c <prvSwitchTimerLists+0xc8>)
 800b88a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b88c:	4a04      	ldr	r2, [pc, #16]	@ (800b8a0 <prvSwitchTimerLists+0xcc>)
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	6013      	str	r3, [r2, #0]
}
 800b892:	bf00      	nop
 800b894:	3718      	adds	r7, #24
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}
 800b89a:	bf00      	nop
 800b89c:	20006308 	.word	0x20006308
 800b8a0:	2000630c 	.word	0x2000630c

0800b8a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b8aa:	f000 f947 	bl	800bb3c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b8ae:	4b15      	ldr	r3, [pc, #84]	@ (800b904 <prvCheckForValidListAndQueue+0x60>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d120      	bne.n	800b8f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b8b6:	4814      	ldr	r0, [pc, #80]	@ (800b908 <prvCheckForValidListAndQueue+0x64>)
 800b8b8:	f7fd fc60 	bl	800917c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b8bc:	4813      	ldr	r0, [pc, #76]	@ (800b90c <prvCheckForValidListAndQueue+0x68>)
 800b8be:	f7fd fc5d 	bl	800917c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b8c2:	4b13      	ldr	r3, [pc, #76]	@ (800b910 <prvCheckForValidListAndQueue+0x6c>)
 800b8c4:	4a10      	ldr	r2, [pc, #64]	@ (800b908 <prvCheckForValidListAndQueue+0x64>)
 800b8c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b8c8:	4b12      	ldr	r3, [pc, #72]	@ (800b914 <prvCheckForValidListAndQueue+0x70>)
 800b8ca:	4a10      	ldr	r2, [pc, #64]	@ (800b90c <prvCheckForValidListAndQueue+0x68>)
 800b8cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	9300      	str	r3, [sp, #0]
 800b8d2:	4b11      	ldr	r3, [pc, #68]	@ (800b918 <prvCheckForValidListAndQueue+0x74>)
 800b8d4:	4a11      	ldr	r2, [pc, #68]	@ (800b91c <prvCheckForValidListAndQueue+0x78>)
 800b8d6:	2110      	movs	r1, #16
 800b8d8:	200a      	movs	r0, #10
 800b8da:	f7fd fd6f 	bl	80093bc <xQueueGenericCreateStatic>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	4a08      	ldr	r2, [pc, #32]	@ (800b904 <prvCheckForValidListAndQueue+0x60>)
 800b8e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b8e4:	4b07      	ldr	r3, [pc, #28]	@ (800b904 <prvCheckForValidListAndQueue+0x60>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d005      	beq.n	800b8f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b8ec:	4b05      	ldr	r3, [pc, #20]	@ (800b904 <prvCheckForValidListAndQueue+0x60>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	490b      	ldr	r1, [pc, #44]	@ (800b920 <prvCheckForValidListAndQueue+0x7c>)
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7fe fbe2 	bl	800a0bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b8f8:	f000 f956 	bl	800bba8 <vPortExitCritical>
}
 800b8fc:	bf00      	nop
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop
 800b904:	20006310 	.word	0x20006310
 800b908:	200062e0 	.word	0x200062e0
 800b90c:	200062f4 	.word	0x200062f4
 800b910:	20006308 	.word	0x20006308
 800b914:	2000630c 	.word	0x2000630c
 800b918:	200063bc 	.word	0x200063bc
 800b91c:	2000631c 	.word	0x2000631c
 800b920:	08017634 	.word	0x08017634

0800b924 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b924:	b480      	push	{r7}
 800b926:	b085      	sub	sp, #20
 800b928:	af00      	add	r7, sp, #0
 800b92a:	60f8      	str	r0, [r7, #12]
 800b92c:	60b9      	str	r1, [r7, #8]
 800b92e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	3b04      	subs	r3, #4
 800b934:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b93c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	3b04      	subs	r3, #4
 800b942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	f023 0201 	bic.w	r2, r3, #1
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	3b04      	subs	r3, #4
 800b952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b954:	4a0c      	ldr	r2, [pc, #48]	@ (800b988 <pxPortInitialiseStack+0x64>)
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	3b14      	subs	r3, #20
 800b95e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b960:	687a      	ldr	r2, [r7, #4]
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	3b04      	subs	r3, #4
 800b96a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f06f 0202 	mvn.w	r2, #2
 800b972:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	3b20      	subs	r3, #32
 800b978:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b97a:	68fb      	ldr	r3, [r7, #12]
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3714      	adds	r7, #20
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr
 800b988:	0800b98d 	.word	0x0800b98d

0800b98c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b98c:	b480      	push	{r7}
 800b98e:	b085      	sub	sp, #20
 800b990:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b992:	2300      	movs	r3, #0
 800b994:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b996:	4b15      	ldr	r3, [pc, #84]	@ (800b9ec <prvTaskExitError+0x60>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b99e:	d00d      	beq.n	800b9bc <prvTaskExitError+0x30>
	__asm volatile
 800b9a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9a4:	b672      	cpsid	i
 800b9a6:	f383 8811 	msr	BASEPRI, r3
 800b9aa:	f3bf 8f6f 	isb	sy
 800b9ae:	f3bf 8f4f 	dsb	sy
 800b9b2:	b662      	cpsie	i
 800b9b4:	60fb      	str	r3, [r7, #12]
}
 800b9b6:	bf00      	nop
 800b9b8:	bf00      	nop
 800b9ba:	e7fd      	b.n	800b9b8 <prvTaskExitError+0x2c>
	__asm volatile
 800b9bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9c0:	b672      	cpsid	i
 800b9c2:	f383 8811 	msr	BASEPRI, r3
 800b9c6:	f3bf 8f6f 	isb	sy
 800b9ca:	f3bf 8f4f 	dsb	sy
 800b9ce:	b662      	cpsie	i
 800b9d0:	60bb      	str	r3, [r7, #8]
}
 800b9d2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b9d4:	bf00      	nop
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d0fc      	beq.n	800b9d6 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b9dc:	bf00      	nop
 800b9de:	bf00      	nop
 800b9e0:	3714      	adds	r7, #20
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e8:	4770      	bx	lr
 800b9ea:	bf00      	nop
 800b9ec:	2000001c 	.word	0x2000001c

0800b9f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b9f0:	4b07      	ldr	r3, [pc, #28]	@ (800ba10 <pxCurrentTCBConst2>)
 800b9f2:	6819      	ldr	r1, [r3, #0]
 800b9f4:	6808      	ldr	r0, [r1, #0]
 800b9f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9fa:	f380 8809 	msr	PSP, r0
 800b9fe:	f3bf 8f6f 	isb	sy
 800ba02:	f04f 0000 	mov.w	r0, #0
 800ba06:	f380 8811 	msr	BASEPRI, r0
 800ba0a:	4770      	bx	lr
 800ba0c:	f3af 8000 	nop.w

0800ba10 <pxCurrentTCBConst2>:
 800ba10:	20005de0 	.word	0x20005de0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ba14:	bf00      	nop
 800ba16:	bf00      	nop

0800ba18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ba18:	4808      	ldr	r0, [pc, #32]	@ (800ba3c <prvPortStartFirstTask+0x24>)
 800ba1a:	6800      	ldr	r0, [r0, #0]
 800ba1c:	6800      	ldr	r0, [r0, #0]
 800ba1e:	f380 8808 	msr	MSP, r0
 800ba22:	f04f 0000 	mov.w	r0, #0
 800ba26:	f380 8814 	msr	CONTROL, r0
 800ba2a:	b662      	cpsie	i
 800ba2c:	b661      	cpsie	f
 800ba2e:	f3bf 8f4f 	dsb	sy
 800ba32:	f3bf 8f6f 	isb	sy
 800ba36:	df00      	svc	0
 800ba38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ba3a:	bf00      	nop
 800ba3c:	e000ed08 	.word	0xe000ed08

0800ba40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b084      	sub	sp, #16
 800ba44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ba46:	4b37      	ldr	r3, [pc, #220]	@ (800bb24 <xPortStartScheduler+0xe4>)
 800ba48:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	781b      	ldrb	r3, [r3, #0]
 800ba4e:	b2db      	uxtb	r3, r3
 800ba50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	22ff      	movs	r2, #255	@ 0xff
 800ba56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	b2db      	uxtb	r3, r3
 800ba5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ba60:	78fb      	ldrb	r3, [r7, #3]
 800ba62:	b2db      	uxtb	r3, r3
 800ba64:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ba68:	b2da      	uxtb	r2, r3
 800ba6a:	4b2f      	ldr	r3, [pc, #188]	@ (800bb28 <xPortStartScheduler+0xe8>)
 800ba6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ba6e:	4b2f      	ldr	r3, [pc, #188]	@ (800bb2c <xPortStartScheduler+0xec>)
 800ba70:	2207      	movs	r2, #7
 800ba72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba74:	e009      	b.n	800ba8a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ba76:	4b2d      	ldr	r3, [pc, #180]	@ (800bb2c <xPortStartScheduler+0xec>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	3b01      	subs	r3, #1
 800ba7c:	4a2b      	ldr	r2, [pc, #172]	@ (800bb2c <xPortStartScheduler+0xec>)
 800ba7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ba80:	78fb      	ldrb	r3, [r7, #3]
 800ba82:	b2db      	uxtb	r3, r3
 800ba84:	005b      	lsls	r3, r3, #1
 800ba86:	b2db      	uxtb	r3, r3
 800ba88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba8a:	78fb      	ldrb	r3, [r7, #3]
 800ba8c:	b2db      	uxtb	r3, r3
 800ba8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba92:	2b80      	cmp	r3, #128	@ 0x80
 800ba94:	d0ef      	beq.n	800ba76 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ba96:	4b25      	ldr	r3, [pc, #148]	@ (800bb2c <xPortStartScheduler+0xec>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f1c3 0307 	rsb	r3, r3, #7
 800ba9e:	2b04      	cmp	r3, #4
 800baa0:	d00d      	beq.n	800babe <xPortStartScheduler+0x7e>
	__asm volatile
 800baa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baa6:	b672      	cpsid	i
 800baa8:	f383 8811 	msr	BASEPRI, r3
 800baac:	f3bf 8f6f 	isb	sy
 800bab0:	f3bf 8f4f 	dsb	sy
 800bab4:	b662      	cpsie	i
 800bab6:	60bb      	str	r3, [r7, #8]
}
 800bab8:	bf00      	nop
 800baba:	bf00      	nop
 800babc:	e7fd      	b.n	800baba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800babe:	4b1b      	ldr	r3, [pc, #108]	@ (800bb2c <xPortStartScheduler+0xec>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	021b      	lsls	r3, r3, #8
 800bac4:	4a19      	ldr	r2, [pc, #100]	@ (800bb2c <xPortStartScheduler+0xec>)
 800bac6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bac8:	4b18      	ldr	r3, [pc, #96]	@ (800bb2c <xPortStartScheduler+0xec>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bad0:	4a16      	ldr	r2, [pc, #88]	@ (800bb2c <xPortStartScheduler+0xec>)
 800bad2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	b2da      	uxtb	r2, r3
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800badc:	4b14      	ldr	r3, [pc, #80]	@ (800bb30 <xPortStartScheduler+0xf0>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4a13      	ldr	r2, [pc, #76]	@ (800bb30 <xPortStartScheduler+0xf0>)
 800bae2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bae6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bae8:	4b11      	ldr	r3, [pc, #68]	@ (800bb30 <xPortStartScheduler+0xf0>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	4a10      	ldr	r2, [pc, #64]	@ (800bb30 <xPortStartScheduler+0xf0>)
 800baee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800baf2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800baf4:	f000 f8dc 	bl	800bcb0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800baf8:	4b0e      	ldr	r3, [pc, #56]	@ (800bb34 <xPortStartScheduler+0xf4>)
 800bafa:	2200      	movs	r2, #0
 800bafc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bafe:	f000 f8fb 	bl	800bcf8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bb02:	4b0d      	ldr	r3, [pc, #52]	@ (800bb38 <xPortStartScheduler+0xf8>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	4a0c      	ldr	r2, [pc, #48]	@ (800bb38 <xPortStartScheduler+0xf8>)
 800bb08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800bb0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bb0e:	f7ff ff83 	bl	800ba18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bb12:	f7fe fefd 	bl	800a910 <vTaskSwitchContext>
	prvTaskExitError();
 800bb16:	f7ff ff39 	bl	800b98c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bb1a:	2300      	movs	r3, #0
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3710      	adds	r7, #16
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	e000e400 	.word	0xe000e400
 800bb28:	2000640c 	.word	0x2000640c
 800bb2c:	20006410 	.word	0x20006410
 800bb30:	e000ed20 	.word	0xe000ed20
 800bb34:	2000001c 	.word	0x2000001c
 800bb38:	e000ef34 	.word	0xe000ef34

0800bb3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b083      	sub	sp, #12
 800bb40:	af00      	add	r7, sp, #0
	__asm volatile
 800bb42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb46:	b672      	cpsid	i
 800bb48:	f383 8811 	msr	BASEPRI, r3
 800bb4c:	f3bf 8f6f 	isb	sy
 800bb50:	f3bf 8f4f 	dsb	sy
 800bb54:	b662      	cpsie	i
 800bb56:	607b      	str	r3, [r7, #4]
}
 800bb58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bb5a:	4b11      	ldr	r3, [pc, #68]	@ (800bba0 <vPortEnterCritical+0x64>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	3301      	adds	r3, #1
 800bb60:	4a0f      	ldr	r2, [pc, #60]	@ (800bba0 <vPortEnterCritical+0x64>)
 800bb62:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bb64:	4b0e      	ldr	r3, [pc, #56]	@ (800bba0 <vPortEnterCritical+0x64>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	d112      	bne.n	800bb92 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bb6c:	4b0d      	ldr	r3, [pc, #52]	@ (800bba4 <vPortEnterCritical+0x68>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	b2db      	uxtb	r3, r3
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d00d      	beq.n	800bb92 <vPortEnterCritical+0x56>
	__asm volatile
 800bb76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb7a:	b672      	cpsid	i
 800bb7c:	f383 8811 	msr	BASEPRI, r3
 800bb80:	f3bf 8f6f 	isb	sy
 800bb84:	f3bf 8f4f 	dsb	sy
 800bb88:	b662      	cpsie	i
 800bb8a:	603b      	str	r3, [r7, #0]
}
 800bb8c:	bf00      	nop
 800bb8e:	bf00      	nop
 800bb90:	e7fd      	b.n	800bb8e <vPortEnterCritical+0x52>
	}
}
 800bb92:	bf00      	nop
 800bb94:	370c      	adds	r7, #12
 800bb96:	46bd      	mov	sp, r7
 800bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9c:	4770      	bx	lr
 800bb9e:	bf00      	nop
 800bba0:	2000001c 	.word	0x2000001c
 800bba4:	e000ed04 	.word	0xe000ed04

0800bba8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b083      	sub	sp, #12
 800bbac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bbae:	4b13      	ldr	r3, [pc, #76]	@ (800bbfc <vPortExitCritical+0x54>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d10d      	bne.n	800bbd2 <vPortExitCritical+0x2a>
	__asm volatile
 800bbb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbba:	b672      	cpsid	i
 800bbbc:	f383 8811 	msr	BASEPRI, r3
 800bbc0:	f3bf 8f6f 	isb	sy
 800bbc4:	f3bf 8f4f 	dsb	sy
 800bbc8:	b662      	cpsie	i
 800bbca:	607b      	str	r3, [r7, #4]
}
 800bbcc:	bf00      	nop
 800bbce:	bf00      	nop
 800bbd0:	e7fd      	b.n	800bbce <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800bbd2:	4b0a      	ldr	r3, [pc, #40]	@ (800bbfc <vPortExitCritical+0x54>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	3b01      	subs	r3, #1
 800bbd8:	4a08      	ldr	r2, [pc, #32]	@ (800bbfc <vPortExitCritical+0x54>)
 800bbda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bbdc:	4b07      	ldr	r3, [pc, #28]	@ (800bbfc <vPortExitCritical+0x54>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d105      	bne.n	800bbf0 <vPortExitCritical+0x48>
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	f383 8811 	msr	BASEPRI, r3
}
 800bbee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bbf0:	bf00      	nop
 800bbf2:	370c      	adds	r7, #12
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr
 800bbfc:	2000001c 	.word	0x2000001c

0800bc00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bc00:	f3ef 8009 	mrs	r0, PSP
 800bc04:	f3bf 8f6f 	isb	sy
 800bc08:	4b15      	ldr	r3, [pc, #84]	@ (800bc60 <pxCurrentTCBConst>)
 800bc0a:	681a      	ldr	r2, [r3, #0]
 800bc0c:	f01e 0f10 	tst.w	lr, #16
 800bc10:	bf08      	it	eq
 800bc12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bc16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc1a:	6010      	str	r0, [r2, #0]
 800bc1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bc20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bc24:	b672      	cpsid	i
 800bc26:	f380 8811 	msr	BASEPRI, r0
 800bc2a:	f3bf 8f4f 	dsb	sy
 800bc2e:	f3bf 8f6f 	isb	sy
 800bc32:	b662      	cpsie	i
 800bc34:	f7fe fe6c 	bl	800a910 <vTaskSwitchContext>
 800bc38:	f04f 0000 	mov.w	r0, #0
 800bc3c:	f380 8811 	msr	BASEPRI, r0
 800bc40:	bc09      	pop	{r0, r3}
 800bc42:	6819      	ldr	r1, [r3, #0]
 800bc44:	6808      	ldr	r0, [r1, #0]
 800bc46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc4a:	f01e 0f10 	tst.w	lr, #16
 800bc4e:	bf08      	it	eq
 800bc50:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bc54:	f380 8809 	msr	PSP, r0
 800bc58:	f3bf 8f6f 	isb	sy
 800bc5c:	4770      	bx	lr
 800bc5e:	bf00      	nop

0800bc60 <pxCurrentTCBConst>:
 800bc60:	20005de0 	.word	0x20005de0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bc64:	bf00      	nop
 800bc66:	bf00      	nop

0800bc68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b082      	sub	sp, #8
 800bc6c:	af00      	add	r7, sp, #0
	__asm volatile
 800bc6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc72:	b672      	cpsid	i
 800bc74:	f383 8811 	msr	BASEPRI, r3
 800bc78:	f3bf 8f6f 	isb	sy
 800bc7c:	f3bf 8f4f 	dsb	sy
 800bc80:	b662      	cpsie	i
 800bc82:	607b      	str	r3, [r7, #4]
}
 800bc84:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bc86:	f7fe fd87 	bl	800a798 <xTaskIncrementTick>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d003      	beq.n	800bc98 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bc90:	4b06      	ldr	r3, [pc, #24]	@ (800bcac <SysTick_Handler+0x44>)
 800bc92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc96:	601a      	str	r2, [r3, #0]
 800bc98:	2300      	movs	r3, #0
 800bc9a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	f383 8811 	msr	BASEPRI, r3
}
 800bca2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bca4:	bf00      	nop
 800bca6:	3708      	adds	r7, #8
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}
 800bcac:	e000ed04 	.word	0xe000ed04

0800bcb0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bcb4:	4b0b      	ldr	r3, [pc, #44]	@ (800bce4 <vPortSetupTimerInterrupt+0x34>)
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bcba:	4b0b      	ldr	r3, [pc, #44]	@ (800bce8 <vPortSetupTimerInterrupt+0x38>)
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bcc0:	4b0a      	ldr	r3, [pc, #40]	@ (800bcec <vPortSetupTimerInterrupt+0x3c>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4a0a      	ldr	r2, [pc, #40]	@ (800bcf0 <vPortSetupTimerInterrupt+0x40>)
 800bcc6:	fba2 2303 	umull	r2, r3, r2, r3
 800bcca:	099b      	lsrs	r3, r3, #6
 800bccc:	4a09      	ldr	r2, [pc, #36]	@ (800bcf4 <vPortSetupTimerInterrupt+0x44>)
 800bcce:	3b01      	subs	r3, #1
 800bcd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bcd2:	4b04      	ldr	r3, [pc, #16]	@ (800bce4 <vPortSetupTimerInterrupt+0x34>)
 800bcd4:	2207      	movs	r2, #7
 800bcd6:	601a      	str	r2, [r3, #0]
}
 800bcd8:	bf00      	nop
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr
 800bce2:	bf00      	nop
 800bce4:	e000e010 	.word	0xe000e010
 800bce8:	e000e018 	.word	0xe000e018
 800bcec:	20000010 	.word	0x20000010
 800bcf0:	10624dd3 	.word	0x10624dd3
 800bcf4:	e000e014 	.word	0xe000e014

0800bcf8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bcf8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bd08 <vPortEnableVFP+0x10>
 800bcfc:	6801      	ldr	r1, [r0, #0]
 800bcfe:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800bd02:	6001      	str	r1, [r0, #0]
 800bd04:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bd06:	bf00      	nop
 800bd08:	e000ed88 	.word	0xe000ed88

0800bd0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b085      	sub	sp, #20
 800bd10:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bd12:	f3ef 8305 	mrs	r3, IPSR
 800bd16:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	2b0f      	cmp	r3, #15
 800bd1c:	d917      	bls.n	800bd4e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bd1e:	4a1a      	ldr	r2, [pc, #104]	@ (800bd88 <vPortValidateInterruptPriority+0x7c>)
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	4413      	add	r3, r2
 800bd24:	781b      	ldrb	r3, [r3, #0]
 800bd26:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bd28:	4b18      	ldr	r3, [pc, #96]	@ (800bd8c <vPortValidateInterruptPriority+0x80>)
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	7afa      	ldrb	r2, [r7, #11]
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d20d      	bcs.n	800bd4e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800bd32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd36:	b672      	cpsid	i
 800bd38:	f383 8811 	msr	BASEPRI, r3
 800bd3c:	f3bf 8f6f 	isb	sy
 800bd40:	f3bf 8f4f 	dsb	sy
 800bd44:	b662      	cpsie	i
 800bd46:	607b      	str	r3, [r7, #4]
}
 800bd48:	bf00      	nop
 800bd4a:	bf00      	nop
 800bd4c:	e7fd      	b.n	800bd4a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bd4e:	4b10      	ldr	r3, [pc, #64]	@ (800bd90 <vPortValidateInterruptPriority+0x84>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800bd56:	4b0f      	ldr	r3, [pc, #60]	@ (800bd94 <vPortValidateInterruptPriority+0x88>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d90d      	bls.n	800bd7a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800bd5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd62:	b672      	cpsid	i
 800bd64:	f383 8811 	msr	BASEPRI, r3
 800bd68:	f3bf 8f6f 	isb	sy
 800bd6c:	f3bf 8f4f 	dsb	sy
 800bd70:	b662      	cpsie	i
 800bd72:	603b      	str	r3, [r7, #0]
}
 800bd74:	bf00      	nop
 800bd76:	bf00      	nop
 800bd78:	e7fd      	b.n	800bd76 <vPortValidateInterruptPriority+0x6a>
	}
 800bd7a:	bf00      	nop
 800bd7c:	3714      	adds	r7, #20
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd84:	4770      	bx	lr
 800bd86:	bf00      	nop
 800bd88:	e000e3f0 	.word	0xe000e3f0
 800bd8c:	2000640c 	.word	0x2000640c
 800bd90:	e000ed0c 	.word	0xe000ed0c
 800bd94:	20006410 	.word	0x20006410

0800bd98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b08a      	sub	sp, #40	@ 0x28
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bda0:	2300      	movs	r3, #0
 800bda2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bda4:	f7fe fc3a 	bl	800a61c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bda8:	4b5d      	ldr	r3, [pc, #372]	@ (800bf20 <pvPortMalloc+0x188>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d101      	bne.n	800bdb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bdb0:	f000 f920 	bl	800bff4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bdb4:	4b5b      	ldr	r3, [pc, #364]	@ (800bf24 <pvPortMalloc+0x18c>)
 800bdb6:	681a      	ldr	r2, [r3, #0]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	4013      	ands	r3, r2
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	f040 8094 	bne.w	800beea <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d020      	beq.n	800be0a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800bdc8:	2208      	movs	r2, #8
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	4413      	add	r3, r2
 800bdce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f003 0307 	and.w	r3, r3, #7
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d017      	beq.n	800be0a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f023 0307 	bic.w	r3, r3, #7
 800bde0:	3308      	adds	r3, #8
 800bde2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f003 0307 	and.w	r3, r3, #7
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d00d      	beq.n	800be0a <pvPortMalloc+0x72>
	__asm volatile
 800bdee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdf2:	b672      	cpsid	i
 800bdf4:	f383 8811 	msr	BASEPRI, r3
 800bdf8:	f3bf 8f6f 	isb	sy
 800bdfc:	f3bf 8f4f 	dsb	sy
 800be00:	b662      	cpsie	i
 800be02:	617b      	str	r3, [r7, #20]
}
 800be04:	bf00      	nop
 800be06:	bf00      	nop
 800be08:	e7fd      	b.n	800be06 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d06c      	beq.n	800beea <pvPortMalloc+0x152>
 800be10:	4b45      	ldr	r3, [pc, #276]	@ (800bf28 <pvPortMalloc+0x190>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	687a      	ldr	r2, [r7, #4]
 800be16:	429a      	cmp	r2, r3
 800be18:	d867      	bhi.n	800beea <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800be1a:	4b44      	ldr	r3, [pc, #272]	@ (800bf2c <pvPortMalloc+0x194>)
 800be1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800be1e:	4b43      	ldr	r3, [pc, #268]	@ (800bf2c <pvPortMalloc+0x194>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be24:	e004      	b.n	800be30 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800be26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800be2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be32:	685b      	ldr	r3, [r3, #4]
 800be34:	687a      	ldr	r2, [r7, #4]
 800be36:	429a      	cmp	r2, r3
 800be38:	d903      	bls.n	800be42 <pvPortMalloc+0xaa>
 800be3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d1f1      	bne.n	800be26 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800be42:	4b37      	ldr	r3, [pc, #220]	@ (800bf20 <pvPortMalloc+0x188>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be48:	429a      	cmp	r2, r3
 800be4a:	d04e      	beq.n	800beea <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800be4c:	6a3b      	ldr	r3, [r7, #32]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	2208      	movs	r2, #8
 800be52:	4413      	add	r3, r2
 800be54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800be56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be58:	681a      	ldr	r2, [r3, #0]
 800be5a:	6a3b      	ldr	r3, [r7, #32]
 800be5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800be5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be60:	685a      	ldr	r2, [r3, #4]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	1ad2      	subs	r2, r2, r3
 800be66:	2308      	movs	r3, #8
 800be68:	005b      	lsls	r3, r3, #1
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d922      	bls.n	800beb4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800be6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	4413      	add	r3, r2
 800be74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	f003 0307 	and.w	r3, r3, #7
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d00d      	beq.n	800be9c <pvPortMalloc+0x104>
	__asm volatile
 800be80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be84:	b672      	cpsid	i
 800be86:	f383 8811 	msr	BASEPRI, r3
 800be8a:	f3bf 8f6f 	isb	sy
 800be8e:	f3bf 8f4f 	dsb	sy
 800be92:	b662      	cpsie	i
 800be94:	613b      	str	r3, [r7, #16]
}
 800be96:	bf00      	nop
 800be98:	bf00      	nop
 800be9a:	e7fd      	b.n	800be98 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800be9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be9e:	685a      	ldr	r2, [r3, #4]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	1ad2      	subs	r2, r2, r3
 800bea4:	69bb      	ldr	r3, [r7, #24]
 800bea6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beaa:	687a      	ldr	r2, [r7, #4]
 800beac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800beae:	69b8      	ldr	r0, [r7, #24]
 800beb0:	f000 f902 	bl	800c0b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800beb4:	4b1c      	ldr	r3, [pc, #112]	@ (800bf28 <pvPortMalloc+0x190>)
 800beb6:	681a      	ldr	r2, [r3, #0]
 800beb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beba:	685b      	ldr	r3, [r3, #4]
 800bebc:	1ad3      	subs	r3, r2, r3
 800bebe:	4a1a      	ldr	r2, [pc, #104]	@ (800bf28 <pvPortMalloc+0x190>)
 800bec0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bec2:	4b19      	ldr	r3, [pc, #100]	@ (800bf28 <pvPortMalloc+0x190>)
 800bec4:	681a      	ldr	r2, [r3, #0]
 800bec6:	4b1a      	ldr	r3, [pc, #104]	@ (800bf30 <pvPortMalloc+0x198>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	429a      	cmp	r2, r3
 800becc:	d203      	bcs.n	800bed6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bece:	4b16      	ldr	r3, [pc, #88]	@ (800bf28 <pvPortMalloc+0x190>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	4a17      	ldr	r2, [pc, #92]	@ (800bf30 <pvPortMalloc+0x198>)
 800bed4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bed8:	685a      	ldr	r2, [r3, #4]
 800beda:	4b12      	ldr	r3, [pc, #72]	@ (800bf24 <pvPortMalloc+0x18c>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	431a      	orrs	r2, r3
 800bee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bee2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bee6:	2200      	movs	r2, #0
 800bee8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800beea:	f7fe fba5 	bl	800a638 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800beee:	69fb      	ldr	r3, [r7, #28]
 800bef0:	f003 0307 	and.w	r3, r3, #7
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d00d      	beq.n	800bf14 <pvPortMalloc+0x17c>
	__asm volatile
 800bef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800befc:	b672      	cpsid	i
 800befe:	f383 8811 	msr	BASEPRI, r3
 800bf02:	f3bf 8f6f 	isb	sy
 800bf06:	f3bf 8f4f 	dsb	sy
 800bf0a:	b662      	cpsie	i
 800bf0c:	60fb      	str	r3, [r7, #12]
}
 800bf0e:	bf00      	nop
 800bf10:	bf00      	nop
 800bf12:	e7fd      	b.n	800bf10 <pvPortMalloc+0x178>
	return pvReturn;
 800bf14:	69fb      	ldr	r3, [r7, #28]
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3728      	adds	r7, #40	@ 0x28
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	2000a01c 	.word	0x2000a01c
 800bf24:	2000a028 	.word	0x2000a028
 800bf28:	2000a020 	.word	0x2000a020
 800bf2c:	2000a014 	.word	0x2000a014
 800bf30:	2000a024 	.word	0x2000a024

0800bf34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b086      	sub	sp, #24
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d04e      	beq.n	800bfe4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bf46:	2308      	movs	r3, #8
 800bf48:	425b      	negs	r3, r3
 800bf4a:	697a      	ldr	r2, [r7, #20]
 800bf4c:	4413      	add	r3, r2
 800bf4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	685a      	ldr	r2, [r3, #4]
 800bf58:	4b24      	ldr	r3, [pc, #144]	@ (800bfec <vPortFree+0xb8>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	4013      	ands	r3, r2
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d10d      	bne.n	800bf7e <vPortFree+0x4a>
	__asm volatile
 800bf62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf66:	b672      	cpsid	i
 800bf68:	f383 8811 	msr	BASEPRI, r3
 800bf6c:	f3bf 8f6f 	isb	sy
 800bf70:	f3bf 8f4f 	dsb	sy
 800bf74:	b662      	cpsie	i
 800bf76:	60fb      	str	r3, [r7, #12]
}
 800bf78:	bf00      	nop
 800bf7a:	bf00      	nop
 800bf7c:	e7fd      	b.n	800bf7a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bf7e:	693b      	ldr	r3, [r7, #16]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d00d      	beq.n	800bfa2 <vPortFree+0x6e>
	__asm volatile
 800bf86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf8a:	b672      	cpsid	i
 800bf8c:	f383 8811 	msr	BASEPRI, r3
 800bf90:	f3bf 8f6f 	isb	sy
 800bf94:	f3bf 8f4f 	dsb	sy
 800bf98:	b662      	cpsie	i
 800bf9a:	60bb      	str	r3, [r7, #8]
}
 800bf9c:	bf00      	nop
 800bf9e:	bf00      	nop
 800bfa0:	e7fd      	b.n	800bf9e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	685a      	ldr	r2, [r3, #4]
 800bfa6:	4b11      	ldr	r3, [pc, #68]	@ (800bfec <vPortFree+0xb8>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	4013      	ands	r3, r2
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d019      	beq.n	800bfe4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d115      	bne.n	800bfe4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	685a      	ldr	r2, [r3, #4]
 800bfbc:	4b0b      	ldr	r3, [pc, #44]	@ (800bfec <vPortFree+0xb8>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	43db      	mvns	r3, r3
 800bfc2:	401a      	ands	r2, r3
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bfc8:	f7fe fb28 	bl	800a61c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bfcc:	693b      	ldr	r3, [r7, #16]
 800bfce:	685a      	ldr	r2, [r3, #4]
 800bfd0:	4b07      	ldr	r3, [pc, #28]	@ (800bff0 <vPortFree+0xbc>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	4413      	add	r3, r2
 800bfd6:	4a06      	ldr	r2, [pc, #24]	@ (800bff0 <vPortFree+0xbc>)
 800bfd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bfda:	6938      	ldr	r0, [r7, #16]
 800bfdc:	f000 f86c 	bl	800c0b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800bfe0:	f7fe fb2a 	bl	800a638 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bfe4:	bf00      	nop
 800bfe6:	3718      	adds	r7, #24
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}
 800bfec:	2000a028 	.word	0x2000a028
 800bff0:	2000a020 	.word	0x2000a020

0800bff4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bff4:	b480      	push	{r7}
 800bff6:	b085      	sub	sp, #20
 800bff8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bffa:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800bffe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c000:	4b27      	ldr	r3, [pc, #156]	@ (800c0a0 <prvHeapInit+0xac>)
 800c002:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	f003 0307 	and.w	r3, r3, #7
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d00c      	beq.n	800c028 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	3307      	adds	r3, #7
 800c012:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f023 0307 	bic.w	r3, r3, #7
 800c01a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c01c:	68ba      	ldr	r2, [r7, #8]
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	1ad3      	subs	r3, r2, r3
 800c022:	4a1f      	ldr	r2, [pc, #124]	@ (800c0a0 <prvHeapInit+0xac>)
 800c024:	4413      	add	r3, r2
 800c026:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c02c:	4a1d      	ldr	r2, [pc, #116]	@ (800c0a4 <prvHeapInit+0xb0>)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c032:	4b1c      	ldr	r3, [pc, #112]	@ (800c0a4 <prvHeapInit+0xb0>)
 800c034:	2200      	movs	r2, #0
 800c036:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	68ba      	ldr	r2, [r7, #8]
 800c03c:	4413      	add	r3, r2
 800c03e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c040:	2208      	movs	r2, #8
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	1a9b      	subs	r3, r3, r2
 800c046:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f023 0307 	bic.w	r3, r3, #7
 800c04e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	4a15      	ldr	r2, [pc, #84]	@ (800c0a8 <prvHeapInit+0xb4>)
 800c054:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c056:	4b14      	ldr	r3, [pc, #80]	@ (800c0a8 <prvHeapInit+0xb4>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	2200      	movs	r2, #0
 800c05c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c05e:	4b12      	ldr	r3, [pc, #72]	@ (800c0a8 <prvHeapInit+0xb4>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	2200      	movs	r2, #0
 800c064:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	68fa      	ldr	r2, [r7, #12]
 800c06e:	1ad2      	subs	r2, r2, r3
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c074:	4b0c      	ldr	r3, [pc, #48]	@ (800c0a8 <prvHeapInit+0xb4>)
 800c076:	681a      	ldr	r2, [r3, #0]
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	4a0a      	ldr	r2, [pc, #40]	@ (800c0ac <prvHeapInit+0xb8>)
 800c082:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	4a09      	ldr	r2, [pc, #36]	@ (800c0b0 <prvHeapInit+0xbc>)
 800c08a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c08c:	4b09      	ldr	r3, [pc, #36]	@ (800c0b4 <prvHeapInit+0xc0>)
 800c08e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c092:	601a      	str	r2, [r3, #0]
}
 800c094:	bf00      	nop
 800c096:	3714      	adds	r7, #20
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr
 800c0a0:	20006414 	.word	0x20006414
 800c0a4:	2000a014 	.word	0x2000a014
 800c0a8:	2000a01c 	.word	0x2000a01c
 800c0ac:	2000a024 	.word	0x2000a024
 800c0b0:	2000a020 	.word	0x2000a020
 800c0b4:	2000a028 	.word	0x2000a028

0800c0b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b085      	sub	sp, #20
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c0c0:	4b28      	ldr	r3, [pc, #160]	@ (800c164 <prvInsertBlockIntoFreeList+0xac>)
 800c0c2:	60fb      	str	r3, [r7, #12]
 800c0c4:	e002      	b.n	800c0cc <prvInsertBlockIntoFreeList+0x14>
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	60fb      	str	r3, [r7, #12]
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	687a      	ldr	r2, [r7, #4]
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	d8f7      	bhi.n	800c0c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	685b      	ldr	r3, [r3, #4]
 800c0de:	68ba      	ldr	r2, [r7, #8]
 800c0e0:	4413      	add	r3, r2
 800c0e2:	687a      	ldr	r2, [r7, #4]
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d108      	bne.n	800c0fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	685a      	ldr	r2, [r3, #4]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	685b      	ldr	r3, [r3, #4]
 800c0f0:	441a      	add	r2, r3
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	68ba      	ldr	r2, [r7, #8]
 800c104:	441a      	add	r2, r3
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	429a      	cmp	r2, r3
 800c10c:	d118      	bne.n	800c140 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681a      	ldr	r2, [r3, #0]
 800c112:	4b15      	ldr	r3, [pc, #84]	@ (800c168 <prvInsertBlockIntoFreeList+0xb0>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	429a      	cmp	r2, r3
 800c118:	d00d      	beq.n	800c136 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	685a      	ldr	r2, [r3, #4]
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	441a      	add	r2, r3
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	681a      	ldr	r2, [r3, #0]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	601a      	str	r2, [r3, #0]
 800c134:	e008      	b.n	800c148 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c136:	4b0c      	ldr	r3, [pc, #48]	@ (800c168 <prvInsertBlockIntoFreeList+0xb0>)
 800c138:	681a      	ldr	r2, [r3, #0]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	601a      	str	r2, [r3, #0]
 800c13e:	e003      	b.n	800c148 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681a      	ldr	r2, [r3, #0]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c148:	68fa      	ldr	r2, [r7, #12]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d002      	beq.n	800c156 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	687a      	ldr	r2, [r7, #4]
 800c154:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c156:	bf00      	nop
 800c158:	3714      	adds	r7, #20
 800c15a:	46bd      	mov	sp, r7
 800c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c160:	4770      	bx	lr
 800c162:	bf00      	nop
 800c164:	2000a014 	.word	0x2000a014
 800c168:	2000a01c 	.word	0x2000a01c

0800c16c <rcl_get_zero_initialized_publisher>:
 800c16c:	4b01      	ldr	r3, [pc, #4]	@ (800c174 <rcl_get_zero_initialized_publisher+0x8>)
 800c16e:	6818      	ldr	r0, [r3, #0]
 800c170:	4770      	bx	lr
 800c172:	bf00      	nop
 800c174:	080176c0 	.word	0x080176c0

0800c178 <rcl_publisher_init>:
 800c178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c17c:	b088      	sub	sp, #32
 800c17e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800c180:	2e00      	cmp	r6, #0
 800c182:	d06b      	beq.n	800c25c <rcl_publisher_init+0xe4>
 800c184:	f106 0a50 	add.w	sl, r6, #80	@ 0x50
 800c188:	4605      	mov	r5, r0
 800c18a:	460f      	mov	r7, r1
 800c18c:	4690      	mov	r8, r2
 800c18e:	4650      	mov	r0, sl
 800c190:	4699      	mov	r9, r3
 800c192:	f000 f9e5 	bl	800c560 <rcutils_allocator_is_valid>
 800c196:	f080 0401 	eor.w	r4, r0, #1
 800c19a:	b2e4      	uxtb	r4, r4
 800c19c:	2c00      	cmp	r4, #0
 800c19e:	d15d      	bne.n	800c25c <rcl_publisher_init+0xe4>
 800c1a0:	2d00      	cmp	r5, #0
 800c1a2:	d05b      	beq.n	800c25c <rcl_publisher_init+0xe4>
 800c1a4:	682b      	ldr	r3, [r5, #0]
 800c1a6:	b123      	cbz	r3, 800c1b2 <rcl_publisher_init+0x3a>
 800c1a8:	2464      	movs	r4, #100	@ 0x64
 800c1aa:	4620      	mov	r0, r4
 800c1ac:	b008      	add	sp, #32
 800c1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1b2:	4638      	mov	r0, r7
 800c1b4:	f006 f924 	bl	8012400 <rcl_node_is_valid>
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	d054      	beq.n	800c266 <rcl_publisher_init+0xee>
 800c1bc:	f1b8 0f00 	cmp.w	r8, #0
 800c1c0:	d04c      	beq.n	800c25c <rcl_publisher_init+0xe4>
 800c1c2:	fab9 f389 	clz	r3, r9
 800c1c6:	095b      	lsrs	r3, r3, #5
 800c1c8:	f1b9 0f00 	cmp.w	r9, #0
 800c1cc:	d046      	beq.n	800c25c <rcl_publisher_init+0xe4>
 800c1ce:	aa07      	add	r2, sp, #28
 800c1d0:	9307      	str	r3, [sp, #28]
 800c1d2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800c1d6:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800c1da:	9205      	str	r2, [sp, #20]
 800c1dc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c1e0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c1e4:	4649      	mov	r1, r9
 800c1e6:	4638      	mov	r0, r7
 800c1e8:	e89a 000c 	ldmia.w	sl, {r2, r3}
 800c1ec:	f006 f960 	bl	80124b0 <rcl_node_resolve_name>
 800c1f0:	2800      	cmp	r0, #0
 800c1f2:	d14f      	bne.n	800c294 <rcl_publisher_init+0x11c>
 800c1f4:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 800c1f6:	20c8      	movs	r0, #200	@ 0xc8
 800c1f8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800c1fa:	4798      	blx	r3
 800c1fc:	6028      	str	r0, [r5, #0]
 800c1fe:	2800      	cmp	r0, #0
 800c200:	d050      	beq.n	800c2a4 <rcl_publisher_init+0x12c>
 800c202:	4638      	mov	r0, r7
 800c204:	f006 f91e 	bl	8012444 <rcl_node_get_rmw_handle>
 800c208:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800c20c:	4641      	mov	r1, r8
 800c20e:	9a07      	ldr	r2, [sp, #28]
 800c210:	9300      	str	r3, [sp, #0]
 800c212:	4633      	mov	r3, r6
 800c214:	682c      	ldr	r4, [r5, #0]
 800c216:	f000 fa61 	bl	800c6dc <rmw_create_publisher>
 800c21a:	682b      	ldr	r3, [r5, #0]
 800c21c:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 800c220:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c224:	b370      	cbz	r0, 800c284 <rcl_publisher_init+0x10c>
 800c226:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800c22a:	f000 fb3b 	bl	800c8a4 <rmw_publisher_get_actual_qos>
 800c22e:	682b      	ldr	r3, [r5, #0]
 800c230:	4604      	mov	r4, r0
 800c232:	b9d0      	cbnz	r0, 800c26a <rcl_publisher_init+0xf2>
 800c234:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 800c238:	4631      	mov	r1, r6
 800c23a:	4618      	mov	r0, r3
 800c23c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800c240:	2270      	movs	r2, #112	@ 0x70
 800c242:	f00a fb56 	bl	80168f2 <memcpy>
 800c246:	683a      	ldr	r2, [r7, #0]
 800c248:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800c24c:	9807      	ldr	r0, [sp, #28]
 800c24e:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800c250:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800c252:	4798      	blx	r3
 800c254:	4620      	mov	r0, r4
 800c256:	b008      	add	sp, #32
 800c258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c25c:	240b      	movs	r4, #11
 800c25e:	4620      	mov	r0, r4
 800c260:	b008      	add	sp, #32
 800c262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c266:	24c8      	movs	r4, #200	@ 0xc8
 800c268:	e79f      	b.n	800c1aa <rcl_publisher_init+0x32>
 800c26a:	b1cb      	cbz	r3, 800c2a0 <rcl_publisher_init+0x128>
 800c26c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c270:	b142      	cbz	r2, 800c284 <rcl_publisher_init+0x10c>
 800c272:	4638      	mov	r0, r7
 800c274:	f006 f8e6 	bl	8012444 <rcl_node_get_rmw_handle>
 800c278:	682b      	ldr	r3, [r5, #0]
 800c27a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800c27e:	f000 fb25 	bl	800c8cc <rmw_destroy_publisher>
 800c282:	682b      	ldr	r3, [r5, #0]
 800c284:	4618      	mov	r0, r3
 800c286:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 800c288:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800c28a:	2401      	movs	r4, #1
 800c28c:	4790      	blx	r2
 800c28e:	2300      	movs	r3, #0
 800c290:	602b      	str	r3, [r5, #0]
 800c292:	e7db      	b.n	800c24c <rcl_publisher_init+0xd4>
 800c294:	2867      	cmp	r0, #103	@ 0x67
 800c296:	d007      	beq.n	800c2a8 <rcl_publisher_init+0x130>
 800c298:	2869      	cmp	r0, #105	@ 0x69
 800c29a:	d005      	beq.n	800c2a8 <rcl_publisher_init+0x130>
 800c29c:	280a      	cmp	r0, #10
 800c29e:	d001      	beq.n	800c2a4 <rcl_publisher_init+0x12c>
 800c2a0:	2401      	movs	r4, #1
 800c2a2:	e7d3      	b.n	800c24c <rcl_publisher_init+0xd4>
 800c2a4:	240a      	movs	r4, #10
 800c2a6:	e7d1      	b.n	800c24c <rcl_publisher_init+0xd4>
 800c2a8:	2467      	movs	r4, #103	@ 0x67
 800c2aa:	e7cf      	b.n	800c24c <rcl_publisher_init+0xd4>

0800c2ac <rcl_publisher_get_default_options>:
 800c2ac:	b570      	push	{r4, r5, r6, lr}
 800c2ae:	4d14      	ldr	r5, [pc, #80]	@ (800c300 <rcl_publisher_get_default_options+0x54>)
 800c2b0:	b088      	sub	sp, #32
 800c2b2:	4604      	mov	r4, r0
 800c2b4:	2250      	movs	r2, #80	@ 0x50
 800c2b6:	4913      	ldr	r1, [pc, #76]	@ (800c304 <rcl_publisher_get_default_options+0x58>)
 800c2b8:	4628      	mov	r0, r5
 800c2ba:	f00a fb1a 	bl	80168f2 <memcpy>
 800c2be:	a802      	add	r0, sp, #8
 800c2c0:	f000 f940 	bl	800c544 <rcutils_get_default_allocator>
 800c2c4:	f10d 0c08 	add.w	ip, sp, #8
 800c2c8:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800c2cc:	466e      	mov	r6, sp
 800c2ce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c2d2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c2d6:	f8dc 3000 	ldr.w	r3, [ip]
 800c2da:	4630      	mov	r0, r6
 800c2dc:	f8ce 3000 	str.w	r3, [lr]
 800c2e0:	f000 f97e 	bl	800c5e0 <rmw_get_default_publisher_options>
 800c2e4:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800c2e8:	2270      	movs	r2, #112	@ 0x70
 800c2ea:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c2ee:	e883 0003 	stmia.w	r3, {r0, r1}
 800c2f2:	4629      	mov	r1, r5
 800c2f4:	4620      	mov	r0, r4
 800c2f6:	f00a fafc 	bl	80168f2 <memcpy>
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	b008      	add	sp, #32
 800c2fe:	bd70      	pop	{r4, r5, r6, pc}
 800c300:	2000a030 	.word	0x2000a030
 800c304:	080176c8 	.word	0x080176c8

0800c308 <rcl_publish>:
 800c308:	b1f8      	cbz	r0, 800c34a <rcl_publish+0x42>
 800c30a:	6803      	ldr	r3, [r0, #0]
 800c30c:	b570      	push	{r4, r5, r6, lr}
 800c30e:	4604      	mov	r4, r0
 800c310:	b1b3      	cbz	r3, 800c340 <rcl_publish+0x38>
 800c312:	4616      	mov	r6, r2
 800c314:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c318:	b192      	cbz	r2, 800c340 <rcl_publish+0x38>
 800c31a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c31e:	460d      	mov	r5, r1
 800c320:	f005 fca4 	bl	8011c6c <rcl_context_is_valid>
 800c324:	b160      	cbz	r0, 800c340 <rcl_publish+0x38>
 800c326:	6823      	ldr	r3, [r4, #0]
 800c328:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c32c:	b140      	cbz	r0, 800c340 <rcl_publish+0x38>
 800c32e:	b155      	cbz	r5, 800c346 <rcl_publish+0x3e>
 800c330:	4632      	mov	r2, r6
 800c332:	4629      	mov	r1, r5
 800c334:	f000 f972 	bl	800c61c <rmw_publish>
 800c338:	3800      	subs	r0, #0
 800c33a:	bf18      	it	ne
 800c33c:	2001      	movne	r0, #1
 800c33e:	bd70      	pop	{r4, r5, r6, pc}
 800c340:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c344:	bd70      	pop	{r4, r5, r6, pc}
 800c346:	200b      	movs	r0, #11
 800c348:	bd70      	pop	{r4, r5, r6, pc}
 800c34a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c34e:	4770      	bx	lr

0800c350 <rclc_support_init>:
 800c350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c354:	b086      	sub	sp, #24
 800c356:	b3bb      	cbz	r3, 800c3c8 <rclc_support_init+0x78>
 800c358:	4606      	mov	r6, r0
 800c35a:	b3a8      	cbz	r0, 800c3c8 <rclc_support_init+0x78>
 800c35c:	461c      	mov	r4, r3
 800c35e:	460f      	mov	r7, r1
 800c360:	4690      	mov	r8, r2
 800c362:	f005 fdd9 	bl	8011f18 <rcl_get_zero_initialized_init_options>
 800c366:	f104 050c 	add.w	r5, r4, #12
 800c36a:	9005      	str	r0, [sp, #20]
 800c36c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c370:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c374:	a805      	add	r0, sp, #20
 800c376:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800c37a:	f005 fdcf 	bl	8011f1c <rcl_init_options_init>
 800c37e:	4605      	mov	r5, r0
 800c380:	b9e0      	cbnz	r0, 800c3bc <rclc_support_init+0x6c>
 800c382:	ad02      	add	r5, sp, #8
 800c384:	4628      	mov	r0, r5
 800c386:	f005 fc67 	bl	8011c58 <rcl_get_zero_initialized_context>
 800c38a:	4633      	mov	r3, r6
 800c38c:	aa05      	add	r2, sp, #20
 800c38e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c392:	e886 0003 	stmia.w	r6, {r0, r1}
 800c396:	4641      	mov	r1, r8
 800c398:	4638      	mov	r0, r7
 800c39a:	f005 fccd 	bl	8011d38 <rcl_init>
 800c39e:	4605      	mov	r5, r0
 800c3a0:	b9b8      	cbnz	r0, 800c3d2 <rclc_support_init+0x82>
 800c3a2:	4622      	mov	r2, r4
 800c3a4:	f106 010c 	add.w	r1, r6, #12
 800c3a8:	2003      	movs	r0, #3
 800c3aa:	60b4      	str	r4, [r6, #8]
 800c3ac:	f006 f970 	bl	8012690 <rcl_clock_init>
 800c3b0:	4605      	mov	r5, r0
 800c3b2:	b970      	cbnz	r0, 800c3d2 <rclc_support_init+0x82>
 800c3b4:	a805      	add	r0, sp, #20
 800c3b6:	f005 fe17 	bl	8011fe8 <rcl_init_options_fini>
 800c3ba:	b108      	cbz	r0, 800c3c0 <rclc_support_init+0x70>
 800c3bc:	f000 f8f4 	bl	800c5a8 <rcutils_reset_error>
 800c3c0:	4628      	mov	r0, r5
 800c3c2:	b006      	add	sp, #24
 800c3c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3c8:	250b      	movs	r5, #11
 800c3ca:	4628      	mov	r0, r5
 800c3cc:	b006      	add	sp, #24
 800c3ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3d2:	f000 f8e9 	bl	800c5a8 <rcutils_reset_error>
 800c3d6:	a805      	add	r0, sp, #20
 800c3d8:	f005 fe06 	bl	8011fe8 <rcl_init_options_fini>
 800c3dc:	2800      	cmp	r0, #0
 800c3de:	d0ef      	beq.n	800c3c0 <rclc_support_init+0x70>
 800c3e0:	e7ec      	b.n	800c3bc <rclc_support_init+0x6c>
 800c3e2:	bf00      	nop

0800c3e4 <rclc_node_init_default>:
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	bf18      	it	ne
 800c3e8:	2a00      	cmpne	r2, #0
 800c3ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c3ee:	4616      	mov	r6, r2
 800c3f0:	bf0c      	ite	eq
 800c3f2:	2201      	moveq	r2, #1
 800c3f4:	2200      	movne	r2, #0
 800c3f6:	b0a1      	sub	sp, #132	@ 0x84
 800c3f8:	2900      	cmp	r1, #0
 800c3fa:	bf08      	it	eq
 800c3fc:	f042 0201 	orreq.w	r2, r2, #1
 800c400:	bb22      	cbnz	r2, 800c44c <rclc_node_init_default+0x68>
 800c402:	4604      	mov	r4, r0
 800c404:	b310      	cbz	r0, 800c44c <rclc_node_init_default+0x68>
 800c406:	f10d 0810 	add.w	r8, sp, #16
 800c40a:	461f      	mov	r7, r3
 800c40c:	460d      	mov	r5, r1
 800c40e:	f10d 0918 	add.w	r9, sp, #24
 800c412:	4640      	mov	r0, r8
 800c414:	f005 fea2 	bl	801215c <rcl_get_zero_initialized_node>
 800c418:	e898 0003 	ldmia.w	r8, {r0, r1}
 800c41c:	e884 0003 	stmia.w	r4, {r0, r1}
 800c420:	4648      	mov	r0, r9
 800c422:	f006 f815 	bl	8012450 <rcl_node_get_default_options>
 800c426:	4640      	mov	r0, r8
 800c428:	f005 fe98 	bl	801215c <rcl_get_zero_initialized_node>
 800c42c:	f8cd 9000 	str.w	r9, [sp]
 800c430:	463b      	mov	r3, r7
 800c432:	4632      	mov	r2, r6
 800c434:	e898 0003 	ldmia.w	r8, {r0, r1}
 800c438:	e884 0003 	stmia.w	r4, {r0, r1}
 800c43c:	4629      	mov	r1, r5
 800c43e:	4620      	mov	r0, r4
 800c440:	f005 fe96 	bl	8012170 <rcl_node_init>
 800c444:	b930      	cbnz	r0, 800c454 <rclc_node_init_default+0x70>
 800c446:	b021      	add	sp, #132	@ 0x84
 800c448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c44c:	200b      	movs	r0, #11
 800c44e:	b021      	add	sp, #132	@ 0x84
 800c450:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c454:	9003      	str	r0, [sp, #12]
 800c456:	f000 f8a7 	bl	800c5a8 <rcutils_reset_error>
 800c45a:	f000 f8a5 	bl	800c5a8 <rcutils_reset_error>
 800c45e:	9803      	ldr	r0, [sp, #12]
 800c460:	b021      	add	sp, #132	@ 0x84
 800c462:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c466:	bf00      	nop

0800c468 <rclc_publisher_init_default>:
 800c468:	2b00      	cmp	r3, #0
 800c46a:	bf18      	it	ne
 800c46c:	2a00      	cmpne	r2, #0
 800c46e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c472:	4616      	mov	r6, r2
 800c474:	bf0c      	ite	eq
 800c476:	2201      	moveq	r2, #1
 800c478:	2200      	movne	r2, #0
 800c47a:	b0a0      	sub	sp, #128	@ 0x80
 800c47c:	2900      	cmp	r1, #0
 800c47e:	bf08      	it	eq
 800c480:	f042 0201 	orreq.w	r2, r2, #1
 800c484:	bb1a      	cbnz	r2, 800c4ce <rclc_publisher_init_default+0x66>
 800c486:	4604      	mov	r4, r0
 800c488:	b308      	cbz	r0, 800c4ce <rclc_publisher_init_default+0x66>
 800c48a:	f10d 0810 	add.w	r8, sp, #16
 800c48e:	461f      	mov	r7, r3
 800c490:	460d      	mov	r5, r1
 800c492:	f7ff fe6b 	bl	800c16c <rcl_get_zero_initialized_publisher>
 800c496:	6020      	str	r0, [r4, #0]
 800c498:	4640      	mov	r0, r8
 800c49a:	f7ff ff07 	bl	800c2ac <rcl_publisher_get_default_options>
 800c49e:	2250      	movs	r2, #80	@ 0x50
 800c4a0:	490d      	ldr	r1, [pc, #52]	@ (800c4d8 <rclc_publisher_init_default+0x70>)
 800c4a2:	4640      	mov	r0, r8
 800c4a4:	f00a fa25 	bl	80168f2 <memcpy>
 800c4a8:	463b      	mov	r3, r7
 800c4aa:	4632      	mov	r2, r6
 800c4ac:	4629      	mov	r1, r5
 800c4ae:	4620      	mov	r0, r4
 800c4b0:	f8cd 8000 	str.w	r8, [sp]
 800c4b4:	f7ff fe60 	bl	800c178 <rcl_publisher_init>
 800c4b8:	b910      	cbnz	r0, 800c4c0 <rclc_publisher_init_default+0x58>
 800c4ba:	b020      	add	sp, #128	@ 0x80
 800c4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4c0:	9003      	str	r0, [sp, #12]
 800c4c2:	f000 f871 	bl	800c5a8 <rcutils_reset_error>
 800c4c6:	9803      	ldr	r0, [sp, #12]
 800c4c8:	b020      	add	sp, #128	@ 0x80
 800c4ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4ce:	200b      	movs	r0, #11
 800c4d0:	b020      	add	sp, #128	@ 0x80
 800c4d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4d6:	bf00      	nop
 800c4d8:	08017718 	.word	0x08017718

0800c4dc <__default_zero_allocate>:
 800c4dc:	f009 bc60 	b.w	8015da0 <calloc>

0800c4e0 <__default_reallocate>:
 800c4e0:	f009 bdfe 	b.w	80160e0 <realloc>

0800c4e4 <__default_deallocate>:
 800c4e4:	f009 bcda 	b.w	8015e9c <free>

0800c4e8 <__default_allocate>:
 800c4e8:	f009 bcd0 	b.w	8015e8c <malloc>

0800c4ec <rcutils_get_zero_initialized_allocator>:
 800c4ec:	b510      	push	{r4, lr}
 800c4ee:	4c05      	ldr	r4, [pc, #20]	@ (800c504 <rcutils_get_zero_initialized_allocator+0x18>)
 800c4f0:	4686      	mov	lr, r0
 800c4f2:	4684      	mov	ip, r0
 800c4f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c4f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c4fa:	6823      	ldr	r3, [r4, #0]
 800c4fc:	4670      	mov	r0, lr
 800c4fe:	f8cc 3000 	str.w	r3, [ip]
 800c502:	bd10      	pop	{r4, pc}
 800c504:	08017768 	.word	0x08017768

0800c508 <rcutils_set_default_allocator>:
 800c508:	b1a8      	cbz	r0, 800c536 <rcutils_set_default_allocator+0x2e>
 800c50a:	6802      	ldr	r2, [r0, #0]
 800c50c:	b1a2      	cbz	r2, 800c538 <rcutils_set_default_allocator+0x30>
 800c50e:	6841      	ldr	r1, [r0, #4]
 800c510:	b1a1      	cbz	r1, 800c53c <rcutils_set_default_allocator+0x34>
 800c512:	b410      	push	{r4}
 800c514:	68c4      	ldr	r4, [r0, #12]
 800c516:	b164      	cbz	r4, 800c532 <rcutils_set_default_allocator+0x2a>
 800c518:	6880      	ldr	r0, [r0, #8]
 800c51a:	b138      	cbz	r0, 800c52c <rcutils_set_default_allocator+0x24>
 800c51c:	4b08      	ldr	r3, [pc, #32]	@ (800c540 <rcutils_set_default_allocator+0x38>)
 800c51e:	601a      	str	r2, [r3, #0]
 800c520:	2200      	movs	r2, #0
 800c522:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800c526:	2001      	movs	r0, #1
 800c528:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800c52c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c530:	4770      	bx	lr
 800c532:	4620      	mov	r0, r4
 800c534:	e7fa      	b.n	800c52c <rcutils_set_default_allocator+0x24>
 800c536:	4770      	bx	lr
 800c538:	4610      	mov	r0, r2
 800c53a:	4770      	bx	lr
 800c53c:	4608      	mov	r0, r1
 800c53e:	4770      	bx	lr
 800c540:	20000020 	.word	0x20000020

0800c544 <rcutils_get_default_allocator>:
 800c544:	b510      	push	{r4, lr}
 800c546:	4c05      	ldr	r4, [pc, #20]	@ (800c55c <rcutils_get_default_allocator+0x18>)
 800c548:	4686      	mov	lr, r0
 800c54a:	4684      	mov	ip, r0
 800c54c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c54e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c552:	6823      	ldr	r3, [r4, #0]
 800c554:	4670      	mov	r0, lr
 800c556:	f8cc 3000 	str.w	r3, [ip]
 800c55a:	bd10      	pop	{r4, pc}
 800c55c:	20000020 	.word	0x20000020

0800c560 <rcutils_allocator_is_valid>:
 800c560:	b158      	cbz	r0, 800c57a <rcutils_allocator_is_valid+0x1a>
 800c562:	6803      	ldr	r3, [r0, #0]
 800c564:	b143      	cbz	r3, 800c578 <rcutils_allocator_is_valid+0x18>
 800c566:	6843      	ldr	r3, [r0, #4]
 800c568:	b133      	cbz	r3, 800c578 <rcutils_allocator_is_valid+0x18>
 800c56a:	68c3      	ldr	r3, [r0, #12]
 800c56c:	b123      	cbz	r3, 800c578 <rcutils_allocator_is_valid+0x18>
 800c56e:	6880      	ldr	r0, [r0, #8]
 800c570:	3800      	subs	r0, #0
 800c572:	bf18      	it	ne
 800c574:	2001      	movne	r0, #1
 800c576:	4770      	bx	lr
 800c578:	4618      	mov	r0, r3
 800c57a:	4770      	bx	lr

0800c57c <rcutils_get_error_string>:
 800c57c:	4b06      	ldr	r3, [pc, #24]	@ (800c598 <rcutils_get_error_string+0x1c>)
 800c57e:	781b      	ldrb	r3, [r3, #0]
 800c580:	b13b      	cbz	r3, 800c592 <rcutils_get_error_string+0x16>
 800c582:	4b06      	ldr	r3, [pc, #24]	@ (800c59c <rcutils_get_error_string+0x20>)
 800c584:	781a      	ldrb	r2, [r3, #0]
 800c586:	b90a      	cbnz	r2, 800c58c <rcutils_get_error_string+0x10>
 800c588:	2201      	movs	r2, #1
 800c58a:	701a      	strb	r2, [r3, #0]
 800c58c:	4b04      	ldr	r3, [pc, #16]	@ (800c5a0 <rcutils_get_error_string+0x24>)
 800c58e:	7818      	ldrb	r0, [r3, #0]
 800c590:	4770      	bx	lr
 800c592:	4b04      	ldr	r3, [pc, #16]	@ (800c5a4 <rcutils_get_error_string+0x28>)
 800c594:	7818      	ldrb	r0, [r3, #0]
 800c596:	4770      	bx	lr
 800c598:	2000a0a0 	.word	0x2000a0a0
 800c59c:	2000a0b9 	.word	0x2000a0b9
 800c5a0:	2000a0b8 	.word	0x2000a0b8
 800c5a4:	0801777c 	.word	0x0801777c

0800c5a8 <rcutils_reset_error>:
 800c5a8:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800c5c8 <rcutils_reset_error+0x20>
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	4a08      	ldr	r2, [pc, #32]	@ (800c5d0 <rcutils_reset_error+0x28>)
 800c5b0:	4808      	ldr	r0, [pc, #32]	@ (800c5d4 <rcutils_reset_error+0x2c>)
 800c5b2:	8013      	strh	r3, [r2, #0]
 800c5b4:	4908      	ldr	r1, [pc, #32]	@ (800c5d8 <rcutils_reset_error+0x30>)
 800c5b6:	7003      	strb	r3, [r0, #0]
 800c5b8:	700b      	strb	r3, [r1, #0]
 800c5ba:	ed82 7b02 	vstr	d7, [r2, #8]
 800c5be:	4a07      	ldr	r2, [pc, #28]	@ (800c5dc <rcutils_reset_error+0x34>)
 800c5c0:	7013      	strb	r3, [r2, #0]
 800c5c2:	4770      	bx	lr
 800c5c4:	f3af 8000 	nop.w
	...
 800c5d0:	2000a0a8 	.word	0x2000a0a8
 800c5d4:	2000a0b9 	.word	0x2000a0b9
 800c5d8:	2000a0b8 	.word	0x2000a0b8
 800c5dc:	2000a0a0 	.word	0x2000a0a0

0800c5e0 <rmw_get_default_publisher_options>:
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	6002      	str	r2, [r0, #0]
 800c5e4:	7102      	strb	r2, [r0, #4]
 800c5e6:	4770      	bx	lr

0800c5e8 <rmw_uros_set_custom_transport>:
 800c5e8:	b470      	push	{r4, r5, r6}
 800c5ea:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800c5ee:	b162      	cbz	r2, 800c60a <rmw_uros_set_custom_transport+0x22>
 800c5f0:	b15b      	cbz	r3, 800c60a <rmw_uros_set_custom_transport+0x22>
 800c5f2:	b155      	cbz	r5, 800c60a <rmw_uros_set_custom_transport+0x22>
 800c5f4:	b14e      	cbz	r6, 800c60a <rmw_uros_set_custom_transport+0x22>
 800c5f6:	4c06      	ldr	r4, [pc, #24]	@ (800c610 <rmw_uros_set_custom_transport+0x28>)
 800c5f8:	7020      	strb	r0, [r4, #0]
 800c5fa:	2000      	movs	r0, #0
 800c5fc:	6166      	str	r6, [r4, #20]
 800c5fe:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800c602:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c606:	bc70      	pop	{r4, r5, r6}
 800c608:	4770      	bx	lr
 800c60a:	200b      	movs	r0, #11
 800c60c:	bc70      	pop	{r4, r5, r6}
 800c60e:	4770      	bx	lr
 800c610:	2000a0bc 	.word	0x2000a0bc

0800c614 <flush_session>:
 800c614:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800c616:	f003 bc97 	b.w	800ff48 <uxr_run_session_until_confirm_delivery>
 800c61a:	bf00      	nop

0800c61c <rmw_publish>:
 800c61c:	2800      	cmp	r0, #0
 800c61e:	d053      	beq.n	800c6c8 <rmw_publish+0xac>
 800c620:	b570      	push	{r4, r5, r6, lr}
 800c622:	460d      	mov	r5, r1
 800c624:	b08e      	sub	sp, #56	@ 0x38
 800c626:	2900      	cmp	r1, #0
 800c628:	d04b      	beq.n	800c6c2 <rmw_publish+0xa6>
 800c62a:	4604      	mov	r4, r0
 800c62c:	6800      	ldr	r0, [r0, #0]
 800c62e:	f000 fc73 	bl	800cf18 <is_uxrce_rmw_identifier_valid>
 800c632:	2800      	cmp	r0, #0
 800c634:	d045      	beq.n	800c6c2 <rmw_publish+0xa6>
 800c636:	6866      	ldr	r6, [r4, #4]
 800c638:	2e00      	cmp	r6, #0
 800c63a:	d042      	beq.n	800c6c2 <rmw_publish+0xa6>
 800c63c:	69b4      	ldr	r4, [r6, #24]
 800c63e:	4628      	mov	r0, r5
 800c640:	6923      	ldr	r3, [r4, #16]
 800c642:	4798      	blx	r3
 800c644:	69f3      	ldr	r3, [r6, #28]
 800c646:	9005      	str	r0, [sp, #20]
 800c648:	b113      	cbz	r3, 800c650 <rmw_publish+0x34>
 800c64a:	a805      	add	r0, sp, #20
 800c64c:	4798      	blx	r3
 800c64e:	9805      	ldr	r0, [sp, #20]
 800c650:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800c654:	691b      	ldr	r3, [r3, #16]
 800c656:	9000      	str	r0, [sp, #0]
 800c658:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800c65c:	6972      	ldr	r2, [r6, #20]
 800c65e:	ab06      	add	r3, sp, #24
 800c660:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800c662:	f004 fa6f 	bl	8010b44 <uxr_prepare_output_stream>
 800c666:	b1d8      	cbz	r0, 800c6a0 <rmw_publish+0x84>
 800c668:	68a3      	ldr	r3, [r4, #8]
 800c66a:	a906      	add	r1, sp, #24
 800c66c:	4628      	mov	r0, r5
 800c66e:	4798      	blx	r3
 800c670:	6a33      	ldr	r3, [r6, #32]
 800c672:	4604      	mov	r4, r0
 800c674:	b10b      	cbz	r3, 800c67a <rmw_publish+0x5e>
 800c676:	a806      	add	r0, sp, #24
 800c678:	4798      	blx	r3
 800c67a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800c67e:	2b01      	cmp	r3, #1
 800c680:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800c684:	d022      	beq.n	800c6cc <rmw_publish+0xb0>
 800c686:	6918      	ldr	r0, [r3, #16]
 800c688:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800c68a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c68e:	f003 fc5b 	bl	800ff48 <uxr_run_session_until_confirm_delivery>
 800c692:	4020      	ands	r0, r4
 800c694:	b2c4      	uxtb	r4, r0
 800c696:	f084 0001 	eor.w	r0, r4, #1
 800c69a:	b2c0      	uxtb	r0, r0
 800c69c:	b00e      	add	sp, #56	@ 0x38
 800c69e:	bd70      	pop	{r4, r5, r6, pc}
 800c6a0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800c6a4:	6918      	ldr	r0, [r3, #16]
 800c6a6:	9b05      	ldr	r3, [sp, #20]
 800c6a8:	9602      	str	r6, [sp, #8]
 800c6aa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c6ae:	9300      	str	r3, [sp, #0]
 800c6b0:	4b09      	ldr	r3, [pc, #36]	@ (800c6d8 <rmw_publish+0xbc>)
 800c6b2:	9301      	str	r3, [sp, #4]
 800c6b4:	ab06      	add	r3, sp, #24
 800c6b6:	6972      	ldr	r2, [r6, #20]
 800c6b8:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800c6ba:	f004 fa73 	bl	8010ba4 <uxr_prepare_output_stream_fragmented>
 800c6be:	2800      	cmp	r0, #0
 800c6c0:	d1d2      	bne.n	800c668 <rmw_publish+0x4c>
 800c6c2:	2001      	movs	r0, #1
 800c6c4:	b00e      	add	sp, #56	@ 0x38
 800c6c6:	bd70      	pop	{r4, r5, r6, pc}
 800c6c8:	2001      	movs	r0, #1
 800c6ca:	4770      	bx	lr
 800c6cc:	6918      	ldr	r0, [r3, #16]
 800c6ce:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c6d2:	f003 f8b9 	bl	800f848 <uxr_flash_output_streams>
 800c6d6:	e7de      	b.n	800c696 <rmw_publish+0x7a>
 800c6d8:	0800c615 	.word	0x0800c615

0800c6dc <rmw_create_publisher>:
 800c6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6e0:	b087      	sub	sp, #28
 800c6e2:	2800      	cmp	r0, #0
 800c6e4:	f000 80d2 	beq.w	800c88c <rmw_create_publisher+0x1b0>
 800c6e8:	460e      	mov	r6, r1
 800c6ea:	2900      	cmp	r1, #0
 800c6ec:	f000 80ce 	beq.w	800c88c <rmw_create_publisher+0x1b0>
 800c6f0:	4604      	mov	r4, r0
 800c6f2:	6800      	ldr	r0, [r0, #0]
 800c6f4:	4615      	mov	r5, r2
 800c6f6:	461f      	mov	r7, r3
 800c6f8:	f000 fc0e 	bl	800cf18 <is_uxrce_rmw_identifier_valid>
 800c6fc:	f080 0001 	eor.w	r0, r0, #1
 800c700:	b2c0      	uxtb	r0, r0
 800c702:	2800      	cmp	r0, #0
 800c704:	f040 80c2 	bne.w	800c88c <rmw_create_publisher+0x1b0>
 800c708:	2d00      	cmp	r5, #0
 800c70a:	f000 80bf 	beq.w	800c88c <rmw_create_publisher+0x1b0>
 800c70e:	782b      	ldrb	r3, [r5, #0]
 800c710:	2b00      	cmp	r3, #0
 800c712:	f000 80bb 	beq.w	800c88c <rmw_create_publisher+0x1b0>
 800c716:	2f00      	cmp	r7, #0
 800c718:	f000 80b8 	beq.w	800c88c <rmw_create_publisher+0x1b0>
 800c71c:	485e      	ldr	r0, [pc, #376]	@ (800c898 <rmw_create_publisher+0x1bc>)
 800c71e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c722:	f006 fcf3 	bl	801310c <get_memory>
 800c726:	2800      	cmp	r0, #0
 800c728:	f000 80b0 	beq.w	800c88c <rmw_create_publisher+0x1b0>
 800c72c:	6884      	ldr	r4, [r0, #8]
 800c72e:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800c732:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800c736:	f006 fd0d 	bl	8013154 <rmw_get_implementation_identifier>
 800c73a:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800c73e:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800c742:	4628      	mov	r0, r5
 800c744:	f7f3 fd86 	bl	8000254 <strlen>
 800c748:	3001      	adds	r0, #1
 800c74a:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 800c74e:	283c      	cmp	r0, #60	@ 0x3c
 800c750:	f200 808f 	bhi.w	800c872 <rmw_create_publisher+0x196>
 800c754:	462b      	mov	r3, r5
 800c756:	4a51      	ldr	r2, [pc, #324]	@ (800c89c <rmw_create_publisher+0x1c0>)
 800c758:	213c      	movs	r1, #60	@ 0x3c
 800c75a:	4650      	mov	r0, sl
 800c75c:	f009 fe9c 	bl	8016498 <sniprintf>
 800c760:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c764:	4639      	mov	r1, r7
 800c766:	2250      	movs	r2, #80	@ 0x50
 800c768:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800c76a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800c76e:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800c772:	f00a f8be 	bl	80168f2 <memcpy>
 800c776:	7a3b      	ldrb	r3, [r7, #8]
 800c778:	4630      	mov	r0, r6
 800c77a:	4949      	ldr	r1, [pc, #292]	@ (800c8a0 <rmw_create_publisher+0x1c4>)
 800c77c:	2b02      	cmp	r3, #2
 800c77e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c782:	bf0c      	ite	eq
 800c784:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800c788:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800c78c:	67a3      	str	r3, [r4, #120]	@ 0x78
 800c78e:	2300      	movs	r3, #0
 800c790:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800c794:	f000 fbce 	bl	800cf34 <get_message_typesupport_handle>
 800c798:	2800      	cmp	r0, #0
 800c79a:	d06a      	beq.n	800c872 <rmw_create_publisher+0x196>
 800c79c:	6842      	ldr	r2, [r0, #4]
 800c79e:	61a2      	str	r2, [r4, #24]
 800c7a0:	2a00      	cmp	r2, #0
 800c7a2:	d066      	beq.n	800c872 <rmw_create_publisher+0x196>
 800c7a4:	4629      	mov	r1, r5
 800c7a6:	463b      	mov	r3, r7
 800c7a8:	4648      	mov	r0, r9
 800c7aa:	f006 ff61 	bl	8013670 <create_topic>
 800c7ae:	6260      	str	r0, [r4, #36]	@ 0x24
 800c7b0:	2800      	cmp	r0, #0
 800c7b2:	d062      	beq.n	800c87a <rmw_create_publisher+0x19e>
 800c7b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c7b8:	2103      	movs	r1, #3
 800c7ba:	2506      	movs	r5, #6
 800c7bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c7c0:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800c7c4:	1c42      	adds	r2, r0, #1
 800c7c6:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800c7ca:	f002 fedb 	bl	800f584 <uxr_object_id>
 800c7ce:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800c7d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c7d6:	6120      	str	r0, [r4, #16]
 800c7d8:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800c7dc:	6910      	ldr	r0, [r2, #16]
 800c7de:	9500      	str	r5, [sp, #0]
 800c7e0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c7e4:	6819      	ldr	r1, [r3, #0]
 800c7e6:	6922      	ldr	r2, [r4, #16]
 800c7e8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c7ec:	f002 fe24 	bl	800f438 <uxr_buffer_create_publisher_bin>
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c7f6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c7fa:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c7fe:	f000 fb11 	bl	800ce24 <run_xrce_session>
 800c802:	b3b0      	cbz	r0, 800c872 <rmw_create_publisher+0x196>
 800c804:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c808:	2105      	movs	r1, #5
 800c80a:	f10d 0a10 	add.w	sl, sp, #16
 800c80e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c812:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800c816:	1c42      	adds	r2, r0, #1
 800c818:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800c81c:	f002 feb2 	bl	800f584 <uxr_object_id>
 800c820:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800c824:	4639      	mov	r1, r7
 800c826:	6160      	str	r0, [r4, #20]
 800c828:	691e      	ldr	r6, [r3, #16]
 800c82a:	4650      	mov	r0, sl
 800c82c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c830:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800c834:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800c838:	f8d3 7384 	ldr.w	r7, [r3, #900]	@ 0x384
 800c83c:	f000 fb0e 	bl	800ce5c <convert_qos_profile>
 800c840:	9503      	str	r5, [sp, #12]
 800c842:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800c846:	9001      	str	r0, [sp, #4]
 800c848:	4630      	mov	r0, r6
 800c84a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800c84e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800c852:	9300      	str	r3, [sp, #0]
 800c854:	6839      	ldr	r1, [r7, #0]
 800c856:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800c85a:	f002 fe1d 	bl	800f498 <uxr_buffer_create_datawriter_bin>
 800c85e:	4602      	mov	r2, r0
 800c860:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c864:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c868:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c86c:	f000 fada 	bl	800ce24 <run_xrce_session>
 800c870:	b970      	cbnz	r0, 800c890 <rmw_create_publisher+0x1b4>
 800c872:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800c874:	b108      	cbz	r0, 800c87a <rmw_create_publisher+0x19e>
 800c876:	f000 fa6f 	bl	800cd58 <rmw_uxrce_fini_topic_memory>
 800c87a:	4640      	mov	r0, r8
 800c87c:	f04f 0800 	mov.w	r8, #0
 800c880:	f000 fa12 	bl	800cca8 <rmw_uxrce_fini_publisher_memory>
 800c884:	4640      	mov	r0, r8
 800c886:	b007      	add	sp, #28
 800c888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c88c:	f04f 0800 	mov.w	r8, #0
 800c890:	4640      	mov	r0, r8
 800c892:	b007      	add	sp, #28
 800c894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c898:	2000e9b4 	.word	0x2000e9b4
 800c89c:	080177b4 	.word	0x080177b4
 800c8a0:	08017780 	.word	0x08017780

0800c8a4 <rmw_publisher_get_actual_qos>:
 800c8a4:	b178      	cbz	r0, 800c8c6 <rmw_publisher_get_actual_qos+0x22>
 800c8a6:	b510      	push	{r4, lr}
 800c8a8:	fab1 f481 	clz	r4, r1
 800c8ac:	0964      	lsrs	r4, r4, #5
 800c8ae:	b141      	cbz	r1, 800c8c2 <rmw_publisher_get_actual_qos+0x1e>
 800c8b0:	6843      	ldr	r3, [r0, #4]
 800c8b2:	2250      	movs	r2, #80	@ 0x50
 800c8b4:	4608      	mov	r0, r1
 800c8b6:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800c8ba:	f00a f81a 	bl	80168f2 <memcpy>
 800c8be:	4620      	mov	r0, r4
 800c8c0:	bd10      	pop	{r4, pc}
 800c8c2:	200b      	movs	r0, #11
 800c8c4:	bd10      	pop	{r4, pc}
 800c8c6:	200b      	movs	r0, #11
 800c8c8:	4770      	bx	lr
 800c8ca:	bf00      	nop

0800c8cc <rmw_destroy_publisher>:
 800c8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8d0:	b128      	cbz	r0, 800c8de <rmw_destroy_publisher+0x12>
 800c8d2:	4604      	mov	r4, r0
 800c8d4:	6800      	ldr	r0, [r0, #0]
 800c8d6:	460d      	mov	r5, r1
 800c8d8:	f000 fb1e 	bl	800cf18 <is_uxrce_rmw_identifier_valid>
 800c8dc:	b918      	cbnz	r0, 800c8e6 <rmw_destroy_publisher+0x1a>
 800c8de:	2401      	movs	r4, #1
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8e6:	6863      	ldr	r3, [r4, #4]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d0f8      	beq.n	800c8de <rmw_destroy_publisher+0x12>
 800c8ec:	fab5 f485 	clz	r4, r5
 800c8f0:	0964      	lsrs	r4, r4, #5
 800c8f2:	2d00      	cmp	r5, #0
 800c8f4:	d0f3      	beq.n	800c8de <rmw_destroy_publisher+0x12>
 800c8f6:	6828      	ldr	r0, [r5, #0]
 800c8f8:	f000 fb0e 	bl	800cf18 <is_uxrce_rmw_identifier_valid>
 800c8fc:	2800      	cmp	r0, #0
 800c8fe:	d0ee      	beq.n	800c8de <rmw_destroy_publisher+0x12>
 800c900:	686e      	ldr	r6, [r5, #4]
 800c902:	2e00      	cmp	r6, #0
 800c904:	d0eb      	beq.n	800c8de <rmw_destroy_publisher+0x12>
 800c906:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800c908:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 800c90c:	f006 ff00 	bl	8013710 <destroy_topic>
 800c910:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800c914:	6972      	ldr	r2, [r6, #20]
 800c916:	6918      	ldr	r0, [r3, #16]
 800c918:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c91c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c920:	6819      	ldr	r1, [r3, #0]
 800c922:	f002 fcd5 	bl	800f2d0 <uxr_buffer_delete_entity>
 800c926:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800c92a:	4680      	mov	r8, r0
 800c92c:	6932      	ldr	r2, [r6, #16]
 800c92e:	6918      	ldr	r0, [r3, #16]
 800c930:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c934:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c938:	6819      	ldr	r1, [r3, #0]
 800c93a:	f002 fcc9 	bl	800f2d0 <uxr_buffer_delete_entity>
 800c93e:	4606      	mov	r6, r0
 800c940:	6938      	ldr	r0, [r7, #16]
 800c942:	4642      	mov	r2, r8
 800c944:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c948:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c94c:	f000 fa6a 	bl	800ce24 <run_xrce_session>
 800c950:	693f      	ldr	r7, [r7, #16]
 800c952:	4632      	mov	r2, r6
 800c954:	4606      	mov	r6, r0
 800c956:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800c95a:	4638      	mov	r0, r7
 800c95c:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800c960:	f000 fa60 	bl	800ce24 <run_xrce_session>
 800c964:	b126      	cbz	r6, 800c970 <rmw_destroy_publisher+0xa4>
 800c966:	b118      	cbz	r0, 800c970 <rmw_destroy_publisher+0xa4>
 800c968:	4628      	mov	r0, r5
 800c96a:	f000 f99d 	bl	800cca8 <rmw_uxrce_fini_publisher_memory>
 800c96e:	e7b7      	b.n	800c8e0 <rmw_destroy_publisher+0x14>
 800c970:	2402      	movs	r4, #2
 800c972:	e7f9      	b.n	800c968 <rmw_destroy_publisher+0x9c>

0800c974 <rmw_uros_epoch_millis>:
 800c974:	4b05      	ldr	r3, [pc, #20]	@ (800c98c <rmw_uros_epoch_millis+0x18>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	b123      	cbz	r3, 800c984 <rmw_uros_epoch_millis+0x10>
 800c97a:	6898      	ldr	r0, [r3, #8]
 800c97c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c980:	f002 bf46 	b.w	800f810 <uxr_epoch_millis>
 800c984:	2000      	movs	r0, #0
 800c986:	2100      	movs	r1, #0
 800c988:	4770      	bx	lr
 800c98a:	bf00      	nop
 800c98c:	2000e9d4 	.word	0x2000e9d4

0800c990 <rmw_uros_epoch_nanos>:
 800c990:	4b05      	ldr	r3, [pc, #20]	@ (800c9a8 <rmw_uros_epoch_nanos+0x18>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	b123      	cbz	r3, 800c9a0 <rmw_uros_epoch_nanos+0x10>
 800c996:	6898      	ldr	r0, [r3, #8]
 800c998:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c99c:	f002 bf4a 	b.w	800f834 <uxr_epoch_nanos>
 800c9a0:	2000      	movs	r0, #0
 800c9a2:	2100      	movs	r1, #0
 800c9a4:	4770      	bx	lr
 800c9a6:	bf00      	nop
 800c9a8:	2000e9d4 	.word	0x2000e9d4

0800c9ac <rmw_uxrce_init_service_memory>:
 800c9ac:	b1e2      	cbz	r2, 800c9e8 <rmw_uxrce_init_service_memory+0x3c>
 800c9ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9b2:	7b05      	ldrb	r5, [r0, #12]
 800c9b4:	4606      	mov	r6, r0
 800c9b6:	b9ad      	cbnz	r5, 800c9e4 <rmw_uxrce_init_service_memory+0x38>
 800c9b8:	23c8      	movs	r3, #200	@ 0xc8
 800c9ba:	4617      	mov	r7, r2
 800c9bc:	460c      	mov	r4, r1
 800c9be:	46a8      	mov	r8, r5
 800c9c0:	6083      	str	r3, [r0, #8]
 800c9c2:	f240 1301 	movw	r3, #257	@ 0x101
 800c9c6:	e9c0 5500 	strd	r5, r5, [r0]
 800c9ca:	8183      	strh	r3, [r0, #12]
 800c9cc:	3501      	adds	r5, #1
 800c9ce:	4621      	mov	r1, r4
 800c9d0:	4630      	mov	r0, r6
 800c9d2:	f006 fbab 	bl	801312c <put_memory>
 800c9d6:	42af      	cmp	r7, r5
 800c9d8:	60a4      	str	r4, [r4, #8]
 800c9da:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800c9de:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800c9e2:	d1f3      	bne.n	800c9cc <rmw_uxrce_init_service_memory+0x20>
 800c9e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9e8:	4770      	bx	lr
 800c9ea:	bf00      	nop

0800c9ec <rmw_uxrce_init_client_memory>:
 800c9ec:	b1e2      	cbz	r2, 800ca28 <rmw_uxrce_init_client_memory+0x3c>
 800c9ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9f2:	7b05      	ldrb	r5, [r0, #12]
 800c9f4:	4606      	mov	r6, r0
 800c9f6:	b9ad      	cbnz	r5, 800ca24 <rmw_uxrce_init_client_memory+0x38>
 800c9f8:	23c8      	movs	r3, #200	@ 0xc8
 800c9fa:	4617      	mov	r7, r2
 800c9fc:	460c      	mov	r4, r1
 800c9fe:	46a8      	mov	r8, r5
 800ca00:	6083      	str	r3, [r0, #8]
 800ca02:	f240 1301 	movw	r3, #257	@ 0x101
 800ca06:	e9c0 5500 	strd	r5, r5, [r0]
 800ca0a:	8183      	strh	r3, [r0, #12]
 800ca0c:	3501      	adds	r5, #1
 800ca0e:	4621      	mov	r1, r4
 800ca10:	4630      	mov	r0, r6
 800ca12:	f006 fb8b 	bl	801312c <put_memory>
 800ca16:	42af      	cmp	r7, r5
 800ca18:	60a4      	str	r4, [r4, #8]
 800ca1a:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800ca1e:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800ca22:	d1f3      	bne.n	800ca0c <rmw_uxrce_init_client_memory+0x20>
 800ca24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca28:	4770      	bx	lr
 800ca2a:	bf00      	nop

0800ca2c <rmw_uxrce_init_publisher_memory>:
 800ca2c:	b1e2      	cbz	r2, 800ca68 <rmw_uxrce_init_publisher_memory+0x3c>
 800ca2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca32:	7b05      	ldrb	r5, [r0, #12]
 800ca34:	4606      	mov	r6, r0
 800ca36:	b9ad      	cbnz	r5, 800ca64 <rmw_uxrce_init_publisher_memory+0x38>
 800ca38:	23d8      	movs	r3, #216	@ 0xd8
 800ca3a:	4617      	mov	r7, r2
 800ca3c:	460c      	mov	r4, r1
 800ca3e:	46a8      	mov	r8, r5
 800ca40:	6083      	str	r3, [r0, #8]
 800ca42:	f240 1301 	movw	r3, #257	@ 0x101
 800ca46:	e9c0 5500 	strd	r5, r5, [r0]
 800ca4a:	8183      	strh	r3, [r0, #12]
 800ca4c:	3501      	adds	r5, #1
 800ca4e:	4621      	mov	r1, r4
 800ca50:	4630      	mov	r0, r6
 800ca52:	f006 fb6b 	bl	801312c <put_memory>
 800ca56:	42af      	cmp	r7, r5
 800ca58:	60a4      	str	r4, [r4, #8]
 800ca5a:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ca5e:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800ca62:	d1f3      	bne.n	800ca4c <rmw_uxrce_init_publisher_memory+0x20>
 800ca64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca68:	4770      	bx	lr
 800ca6a:	bf00      	nop

0800ca6c <rmw_uxrce_init_subscription_memory>:
 800ca6c:	b1e2      	cbz	r2, 800caa8 <rmw_uxrce_init_subscription_memory+0x3c>
 800ca6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca72:	7b05      	ldrb	r5, [r0, #12]
 800ca74:	4606      	mov	r6, r0
 800ca76:	b9ad      	cbnz	r5, 800caa4 <rmw_uxrce_init_subscription_memory+0x38>
 800ca78:	23d8      	movs	r3, #216	@ 0xd8
 800ca7a:	4617      	mov	r7, r2
 800ca7c:	460c      	mov	r4, r1
 800ca7e:	46a8      	mov	r8, r5
 800ca80:	6083      	str	r3, [r0, #8]
 800ca82:	f240 1301 	movw	r3, #257	@ 0x101
 800ca86:	e9c0 5500 	strd	r5, r5, [r0]
 800ca8a:	8183      	strh	r3, [r0, #12]
 800ca8c:	3501      	adds	r5, #1
 800ca8e:	4621      	mov	r1, r4
 800ca90:	4630      	mov	r0, r6
 800ca92:	f006 fb4b 	bl	801312c <put_memory>
 800ca96:	42af      	cmp	r7, r5
 800ca98:	60a4      	str	r4, [r4, #8]
 800ca9a:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ca9e:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800caa2:	d1f3      	bne.n	800ca8c <rmw_uxrce_init_subscription_memory+0x20>
 800caa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caa8:	4770      	bx	lr
 800caaa:	bf00      	nop

0800caac <rmw_uxrce_init_node_memory>:
 800caac:	b1e2      	cbz	r2, 800cae8 <rmw_uxrce_init_node_memory+0x3c>
 800caae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cab2:	7b05      	ldrb	r5, [r0, #12]
 800cab4:	4606      	mov	r6, r0
 800cab6:	b9ad      	cbnz	r5, 800cae4 <rmw_uxrce_init_node_memory+0x38>
 800cab8:	23a4      	movs	r3, #164	@ 0xa4
 800caba:	4617      	mov	r7, r2
 800cabc:	460c      	mov	r4, r1
 800cabe:	46a8      	mov	r8, r5
 800cac0:	6083      	str	r3, [r0, #8]
 800cac2:	f240 1301 	movw	r3, #257	@ 0x101
 800cac6:	e9c0 5500 	strd	r5, r5, [r0]
 800caca:	8183      	strh	r3, [r0, #12]
 800cacc:	3501      	adds	r5, #1
 800cace:	4621      	mov	r1, r4
 800cad0:	4630      	mov	r0, r6
 800cad2:	f006 fb2b 	bl	801312c <put_memory>
 800cad6:	42af      	cmp	r7, r5
 800cad8:	60a4      	str	r4, [r4, #8]
 800cada:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800cade:	f804 8c98 	strb.w	r8, [r4, #-152]
 800cae2:	d1f3      	bne.n	800cacc <rmw_uxrce_init_node_memory+0x20>
 800cae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cae8:	4770      	bx	lr
 800caea:	bf00      	nop

0800caec <rmw_uxrce_init_session_memory>:
 800caec:	b1ea      	cbz	r2, 800cb2a <rmw_uxrce_init_session_memory+0x3e>
 800caee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800caf2:	7b05      	ldrb	r5, [r0, #12]
 800caf4:	4606      	mov	r6, r0
 800caf6:	b9b5      	cbnz	r5, 800cb26 <rmw_uxrce_init_session_memory+0x3a>
 800caf8:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800cafc:	f240 1301 	movw	r3, #257	@ 0x101
 800cb00:	4617      	mov	r7, r2
 800cb02:	460c      	mov	r4, r1
 800cb04:	46a9      	mov	r9, r5
 800cb06:	f8c0 8008 	str.w	r8, [r0, #8]
 800cb0a:	8183      	strh	r3, [r0, #12]
 800cb0c:	e9c0 5500 	strd	r5, r5, [r0]
 800cb10:	3501      	adds	r5, #1
 800cb12:	4621      	mov	r1, r4
 800cb14:	4630      	mov	r0, r6
 800cb16:	f006 fb09 	bl	801312c <put_memory>
 800cb1a:	42af      	cmp	r7, r5
 800cb1c:	60a4      	str	r4, [r4, #8]
 800cb1e:	f884 900c 	strb.w	r9, [r4, #12]
 800cb22:	4444      	add	r4, r8
 800cb24:	d1f4      	bne.n	800cb10 <rmw_uxrce_init_session_memory+0x24>
 800cb26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb2a:	4770      	bx	lr

0800cb2c <rmw_uxrce_init_topic_memory>:
 800cb2c:	b1e2      	cbz	r2, 800cb68 <rmw_uxrce_init_topic_memory+0x3c>
 800cb2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb32:	7b05      	ldrb	r5, [r0, #12]
 800cb34:	4606      	mov	r6, r0
 800cb36:	b9ad      	cbnz	r5, 800cb64 <rmw_uxrce_init_topic_memory+0x38>
 800cb38:	231c      	movs	r3, #28
 800cb3a:	4617      	mov	r7, r2
 800cb3c:	460c      	mov	r4, r1
 800cb3e:	46a8      	mov	r8, r5
 800cb40:	6083      	str	r3, [r0, #8]
 800cb42:	f240 1301 	movw	r3, #257	@ 0x101
 800cb46:	e9c0 5500 	strd	r5, r5, [r0]
 800cb4a:	8183      	strh	r3, [r0, #12]
 800cb4c:	3501      	adds	r5, #1
 800cb4e:	4621      	mov	r1, r4
 800cb50:	4630      	mov	r0, r6
 800cb52:	f006 faeb 	bl	801312c <put_memory>
 800cb56:	42af      	cmp	r7, r5
 800cb58:	60a4      	str	r4, [r4, #8]
 800cb5a:	f104 041c 	add.w	r4, r4, #28
 800cb5e:	f804 8c10 	strb.w	r8, [r4, #-16]
 800cb62:	d1f3      	bne.n	800cb4c <rmw_uxrce_init_topic_memory+0x20>
 800cb64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb68:	4770      	bx	lr
 800cb6a:	bf00      	nop

0800cb6c <rmw_uxrce_init_static_input_buffer_memory>:
 800cb6c:	b1ea      	cbz	r2, 800cbaa <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800cb6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb72:	7b05      	ldrb	r5, [r0, #12]
 800cb74:	4606      	mov	r6, r0
 800cb76:	b9b5      	cbnz	r5, 800cba6 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800cb78:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800cb7c:	4617      	mov	r7, r2
 800cb7e:	460c      	mov	r4, r1
 800cb80:	46a8      	mov	r8, r5
 800cb82:	6083      	str	r3, [r0, #8]
 800cb84:	f240 1301 	movw	r3, #257	@ 0x101
 800cb88:	e9c0 5500 	strd	r5, r5, [r0]
 800cb8c:	8183      	strh	r3, [r0, #12]
 800cb8e:	3501      	adds	r5, #1
 800cb90:	4621      	mov	r1, r4
 800cb92:	4630      	mov	r0, r6
 800cb94:	f006 faca 	bl	801312c <put_memory>
 800cb98:	42af      	cmp	r7, r5
 800cb9a:	60a4      	str	r4, [r4, #8]
 800cb9c:	f884 800c 	strb.w	r8, [r4, #12]
 800cba0:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800cba4:	d1f3      	bne.n	800cb8e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800cba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbaa:	4770      	bx	lr

0800cbac <rmw_uxrce_init_init_options_impl_memory>:
 800cbac:	b1e2      	cbz	r2, 800cbe8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800cbae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbb2:	7b05      	ldrb	r5, [r0, #12]
 800cbb4:	4606      	mov	r6, r0
 800cbb6:	b9ad      	cbnz	r5, 800cbe4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800cbb8:	232c      	movs	r3, #44	@ 0x2c
 800cbba:	4617      	mov	r7, r2
 800cbbc:	460c      	mov	r4, r1
 800cbbe:	46a8      	mov	r8, r5
 800cbc0:	6083      	str	r3, [r0, #8]
 800cbc2:	f240 1301 	movw	r3, #257	@ 0x101
 800cbc6:	e9c0 5500 	strd	r5, r5, [r0]
 800cbca:	8183      	strh	r3, [r0, #12]
 800cbcc:	3501      	adds	r5, #1
 800cbce:	4621      	mov	r1, r4
 800cbd0:	4630      	mov	r0, r6
 800cbd2:	f006 faab 	bl	801312c <put_memory>
 800cbd6:	42af      	cmp	r7, r5
 800cbd8:	60a4      	str	r4, [r4, #8]
 800cbda:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800cbde:	f804 8c20 	strb.w	r8, [r4, #-32]
 800cbe2:	d1f3      	bne.n	800cbcc <rmw_uxrce_init_init_options_impl_memory+0x20>
 800cbe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbe8:	4770      	bx	lr
 800cbea:	bf00      	nop

0800cbec <rmw_uxrce_init_wait_set_memory>:
 800cbec:	b1e2      	cbz	r2, 800cc28 <rmw_uxrce_init_wait_set_memory+0x3c>
 800cbee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbf2:	7b05      	ldrb	r5, [r0, #12]
 800cbf4:	4606      	mov	r6, r0
 800cbf6:	b9ad      	cbnz	r5, 800cc24 <rmw_uxrce_init_wait_set_memory+0x38>
 800cbf8:	231c      	movs	r3, #28
 800cbfa:	4617      	mov	r7, r2
 800cbfc:	460c      	mov	r4, r1
 800cbfe:	46a8      	mov	r8, r5
 800cc00:	6083      	str	r3, [r0, #8]
 800cc02:	f240 1301 	movw	r3, #257	@ 0x101
 800cc06:	e9c0 5500 	strd	r5, r5, [r0]
 800cc0a:	8183      	strh	r3, [r0, #12]
 800cc0c:	3501      	adds	r5, #1
 800cc0e:	4621      	mov	r1, r4
 800cc10:	4630      	mov	r0, r6
 800cc12:	f006 fa8b 	bl	801312c <put_memory>
 800cc16:	42af      	cmp	r7, r5
 800cc18:	60a4      	str	r4, [r4, #8]
 800cc1a:	f104 041c 	add.w	r4, r4, #28
 800cc1e:	f804 8c10 	strb.w	r8, [r4, #-16]
 800cc22:	d1f3      	bne.n	800cc0c <rmw_uxrce_init_wait_set_memory+0x20>
 800cc24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc28:	4770      	bx	lr
 800cc2a:	bf00      	nop

0800cc2c <rmw_uxrce_init_guard_condition_memory>:
 800cc2c:	b1e2      	cbz	r2, 800cc68 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800cc2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc32:	7b05      	ldrb	r5, [r0, #12]
 800cc34:	4606      	mov	r6, r0
 800cc36:	b9ad      	cbnz	r5, 800cc64 <rmw_uxrce_init_guard_condition_memory+0x38>
 800cc38:	2320      	movs	r3, #32
 800cc3a:	4617      	mov	r7, r2
 800cc3c:	460c      	mov	r4, r1
 800cc3e:	46a8      	mov	r8, r5
 800cc40:	6083      	str	r3, [r0, #8]
 800cc42:	f240 1301 	movw	r3, #257	@ 0x101
 800cc46:	e9c0 5500 	strd	r5, r5, [r0]
 800cc4a:	8183      	strh	r3, [r0, #12]
 800cc4c:	3501      	adds	r5, #1
 800cc4e:	4621      	mov	r1, r4
 800cc50:	4630      	mov	r0, r6
 800cc52:	f006 fa6b 	bl	801312c <put_memory>
 800cc56:	42af      	cmp	r7, r5
 800cc58:	60a4      	str	r4, [r4, #8]
 800cc5a:	f104 0420 	add.w	r4, r4, #32
 800cc5e:	f804 8c14 	strb.w	r8, [r4, #-20]
 800cc62:	d1f3      	bne.n	800cc4c <rmw_uxrce_init_guard_condition_memory+0x20>
 800cc64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc68:	4770      	bx	lr
 800cc6a:	bf00      	nop

0800cc6c <rmw_uxrce_fini_session_memory>:
 800cc6c:	4601      	mov	r1, r0
 800cc6e:	4801      	ldr	r0, [pc, #4]	@ (800cc74 <rmw_uxrce_fini_session_memory+0x8>)
 800cc70:	f006 ba5c 	b.w	801312c <put_memory>
 800cc74:	2000e9d4 	.word	0x2000e9d4

0800cc78 <rmw_uxrce_fini_node_memory>:
 800cc78:	b538      	push	{r3, r4, r5, lr}
 800cc7a:	4604      	mov	r4, r0
 800cc7c:	6800      	ldr	r0, [r0, #0]
 800cc7e:	b128      	cbz	r0, 800cc8c <rmw_uxrce_fini_node_memory+0x14>
 800cc80:	4b07      	ldr	r3, [pc, #28]	@ (800cca0 <rmw_uxrce_fini_node_memory+0x28>)
 800cc82:	6819      	ldr	r1, [r3, #0]
 800cc84:	f7f3 fadc 	bl	8000240 <strcmp>
 800cc88:	b940      	cbnz	r0, 800cc9c <rmw_uxrce_fini_node_memory+0x24>
 800cc8a:	6020      	str	r0, [r4, #0]
 800cc8c:	6861      	ldr	r1, [r4, #4]
 800cc8e:	b129      	cbz	r1, 800cc9c <rmw_uxrce_fini_node_memory+0x24>
 800cc90:	2500      	movs	r5, #0
 800cc92:	4804      	ldr	r0, [pc, #16]	@ (800cca4 <rmw_uxrce_fini_node_memory+0x2c>)
 800cc94:	610d      	str	r5, [r1, #16]
 800cc96:	f006 fa49 	bl	801312c <put_memory>
 800cc9a:	6065      	str	r5, [r4, #4]
 800cc9c:	bd38      	pop	{r3, r4, r5, pc}
 800cc9e:	bf00      	nop
 800cca0:	08017fc8 	.word	0x08017fc8
 800cca4:	2000e9a4 	.word	0x2000e9a4

0800cca8 <rmw_uxrce_fini_publisher_memory>:
 800cca8:	b510      	push	{r4, lr}
 800ccaa:	4604      	mov	r4, r0
 800ccac:	6800      	ldr	r0, [r0, #0]
 800ccae:	b128      	cbz	r0, 800ccbc <rmw_uxrce_fini_publisher_memory+0x14>
 800ccb0:	4b06      	ldr	r3, [pc, #24]	@ (800cccc <rmw_uxrce_fini_publisher_memory+0x24>)
 800ccb2:	6819      	ldr	r1, [r3, #0]
 800ccb4:	f7f3 fac4 	bl	8000240 <strcmp>
 800ccb8:	b938      	cbnz	r0, 800ccca <rmw_uxrce_fini_publisher_memory+0x22>
 800ccba:	6020      	str	r0, [r4, #0]
 800ccbc:	6861      	ldr	r1, [r4, #4]
 800ccbe:	b121      	cbz	r1, 800ccca <rmw_uxrce_fini_publisher_memory+0x22>
 800ccc0:	4803      	ldr	r0, [pc, #12]	@ (800ccd0 <rmw_uxrce_fini_publisher_memory+0x28>)
 800ccc2:	f006 fa33 	bl	801312c <put_memory>
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	6063      	str	r3, [r4, #4]
 800ccca:	bd10      	pop	{r4, pc}
 800cccc:	08017fc8 	.word	0x08017fc8
 800ccd0:	2000e9b4 	.word	0x2000e9b4

0800ccd4 <rmw_uxrce_fini_subscription_memory>:
 800ccd4:	b510      	push	{r4, lr}
 800ccd6:	4604      	mov	r4, r0
 800ccd8:	6800      	ldr	r0, [r0, #0]
 800ccda:	b128      	cbz	r0, 800cce8 <rmw_uxrce_fini_subscription_memory+0x14>
 800ccdc:	4b06      	ldr	r3, [pc, #24]	@ (800ccf8 <rmw_uxrce_fini_subscription_memory+0x24>)
 800ccde:	6819      	ldr	r1, [r3, #0]
 800cce0:	f7f3 faae 	bl	8000240 <strcmp>
 800cce4:	b938      	cbnz	r0, 800ccf6 <rmw_uxrce_fini_subscription_memory+0x22>
 800cce6:	6020      	str	r0, [r4, #0]
 800cce8:	6861      	ldr	r1, [r4, #4]
 800ccea:	b121      	cbz	r1, 800ccf6 <rmw_uxrce_fini_subscription_memory+0x22>
 800ccec:	4803      	ldr	r0, [pc, #12]	@ (800ccfc <rmw_uxrce_fini_subscription_memory+0x28>)
 800ccee:	f006 fa1d 	bl	801312c <put_memory>
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	6063      	str	r3, [r4, #4]
 800ccf6:	bd10      	pop	{r4, pc}
 800ccf8:	08017fc8 	.word	0x08017fc8
 800ccfc:	2000e9f4 	.word	0x2000e9f4

0800cd00 <rmw_uxrce_fini_service_memory>:
 800cd00:	b510      	push	{r4, lr}
 800cd02:	4604      	mov	r4, r0
 800cd04:	6800      	ldr	r0, [r0, #0]
 800cd06:	b128      	cbz	r0, 800cd14 <rmw_uxrce_fini_service_memory+0x14>
 800cd08:	4b06      	ldr	r3, [pc, #24]	@ (800cd24 <rmw_uxrce_fini_service_memory+0x24>)
 800cd0a:	6819      	ldr	r1, [r3, #0]
 800cd0c:	f7f3 fa98 	bl	8000240 <strcmp>
 800cd10:	b938      	cbnz	r0, 800cd22 <rmw_uxrce_fini_service_memory+0x22>
 800cd12:	6020      	str	r0, [r4, #0]
 800cd14:	6861      	ldr	r1, [r4, #4]
 800cd16:	b121      	cbz	r1, 800cd22 <rmw_uxrce_fini_service_memory+0x22>
 800cd18:	4803      	ldr	r0, [pc, #12]	@ (800cd28 <rmw_uxrce_fini_service_memory+0x28>)
 800cd1a:	f006 fa07 	bl	801312c <put_memory>
 800cd1e:	2300      	movs	r3, #0
 800cd20:	6063      	str	r3, [r4, #4]
 800cd22:	bd10      	pop	{r4, pc}
 800cd24:	08017fc8 	.word	0x08017fc8
 800cd28:	2000e9c4 	.word	0x2000e9c4

0800cd2c <rmw_uxrce_fini_client_memory>:
 800cd2c:	b510      	push	{r4, lr}
 800cd2e:	4604      	mov	r4, r0
 800cd30:	6800      	ldr	r0, [r0, #0]
 800cd32:	b128      	cbz	r0, 800cd40 <rmw_uxrce_fini_client_memory+0x14>
 800cd34:	4b06      	ldr	r3, [pc, #24]	@ (800cd50 <rmw_uxrce_fini_client_memory+0x24>)
 800cd36:	6819      	ldr	r1, [r3, #0]
 800cd38:	f7f3 fa82 	bl	8000240 <strcmp>
 800cd3c:	b938      	cbnz	r0, 800cd4e <rmw_uxrce_fini_client_memory+0x22>
 800cd3e:	6020      	str	r0, [r4, #0]
 800cd40:	6861      	ldr	r1, [r4, #4]
 800cd42:	b121      	cbz	r1, 800cd4e <rmw_uxrce_fini_client_memory+0x22>
 800cd44:	4803      	ldr	r0, [pc, #12]	@ (800cd54 <rmw_uxrce_fini_client_memory+0x28>)
 800cd46:	f006 f9f1 	bl	801312c <put_memory>
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	6063      	str	r3, [r4, #4]
 800cd4e:	bd10      	pop	{r4, pc}
 800cd50:	08017fc8 	.word	0x08017fc8
 800cd54:	2000a0d8 	.word	0x2000a0d8

0800cd58 <rmw_uxrce_fini_topic_memory>:
 800cd58:	b510      	push	{r4, lr}
 800cd5a:	4604      	mov	r4, r0
 800cd5c:	4803      	ldr	r0, [pc, #12]	@ (800cd6c <rmw_uxrce_fini_topic_memory+0x14>)
 800cd5e:	4621      	mov	r1, r4
 800cd60:	f006 f9e4 	bl	801312c <put_memory>
 800cd64:	2300      	movs	r3, #0
 800cd66:	61a3      	str	r3, [r4, #24]
 800cd68:	bd10      	pop	{r4, pc}
 800cd6a:	bf00      	nop
 800cd6c:	2000ea04 	.word	0x2000ea04

0800cd70 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800cd70:	b082      	sub	sp, #8
 800cd72:	492b      	ldr	r1, [pc, #172]	@ (800ce20 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800cd74:	b530      	push	{r4, r5, lr}
 800cd76:	680d      	ldr	r5, [r1, #0]
 800cd78:	ac03      	add	r4, sp, #12
 800cd7a:	e884 000c 	stmia.w	r4, {r2, r3}
 800cd7e:	461c      	mov	r4, r3
 800cd80:	2d00      	cmp	r5, #0
 800cd82:	d04b      	beq.n	800ce1c <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 800cd84:	462b      	mov	r3, r5
 800cd86:	2100      	movs	r1, #0
 800cd88:	689a      	ldr	r2, [r3, #8]
 800cd8a:	685b      	ldr	r3, [r3, #4]
 800cd8c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800cd90:	4290      	cmp	r0, r2
 800cd92:	bf08      	it	eq
 800cd94:	3101      	addeq	r1, #1
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d1f6      	bne.n	800cd88 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800cd9a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800cd9e:	2b02      	cmp	r3, #2
 800cda0:	d029      	beq.n	800cdf6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800cda2:	d820      	bhi.n	800cde6 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 800cda4:	428c      	cmp	r4, r1
 800cda6:	d828      	bhi.n	800cdfa <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800cda8:	fab4 f284 	clz	r2, r4
 800cdac:	0952      	lsrs	r2, r2, #5
 800cdae:	b324      	cbz	r4, 800cdfa <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800cdb0:	b1dd      	cbz	r5, 800cdea <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 800cdb2:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800cdb6:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800cdba:	e001      	b.n	800cdc0 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 800cdbc:	686d      	ldr	r5, [r5, #4]
 800cdbe:	b1ad      	cbz	r5, 800cdec <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800cdc0:	68ab      	ldr	r3, [r5, #8]
 800cdc2:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 800cdc6:	4288      	cmp	r0, r1
 800cdc8:	d1f8      	bne.n	800cdbc <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800cdca:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 800cdce:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800cdd2:	4561      	cmp	r1, ip
 800cdd4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800cdd8:	eb73 0e04 	sbcs.w	lr, r3, r4
 800cddc:	daee      	bge.n	800cdbc <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800cdde:	468c      	mov	ip, r1
 800cde0:	461c      	mov	r4, r3
 800cde2:	462a      	mov	r2, r5
 800cde4:	e7ea      	b.n	800cdbc <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800cde6:	2b03      	cmp	r3, #3
 800cde8:	d0dc      	beq.n	800cda4 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 800cdea:	2200      	movs	r2, #0
 800cdec:	4610      	mov	r0, r2
 800cdee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cdf2:	b002      	add	sp, #8
 800cdf4:	4770      	bx	lr
 800cdf6:	428c      	cmp	r4, r1
 800cdf8:	d905      	bls.n	800ce06 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800cdfa:	4809      	ldr	r0, [pc, #36]	@ (800ce20 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800cdfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce00:	b002      	add	sp, #8
 800ce02:	f006 b983 	b.w	801310c <get_memory>
 800ce06:	fab4 f284 	clz	r2, r4
 800ce0a:	0952      	lsrs	r2, r2, #5
 800ce0c:	2c00      	cmp	r4, #0
 800ce0e:	d1ed      	bne.n	800cdec <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800ce10:	4803      	ldr	r0, [pc, #12]	@ (800ce20 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800ce12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce16:	b002      	add	sp, #8
 800ce18:	f006 b978 	b.w	801310c <get_memory>
 800ce1c:	4629      	mov	r1, r5
 800ce1e:	e7bc      	b.n	800cd9a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800ce20:	2000e9e4 	.word	0x2000e9e4

0800ce24 <run_xrce_session>:
 800ce24:	b510      	push	{r4, lr}
 800ce26:	788c      	ldrb	r4, [r1, #2]
 800ce28:	b086      	sub	sp, #24
 800ce2a:	2c01      	cmp	r4, #1
 800ce2c:	f8ad 200e 	strh.w	r2, [sp, #14]
 800ce30:	d00c      	beq.n	800ce4c <run_xrce_session+0x28>
 800ce32:	2401      	movs	r4, #1
 800ce34:	4619      	mov	r1, r3
 800ce36:	f10d 020e 	add.w	r2, sp, #14
 800ce3a:	f10d 0317 	add.w	r3, sp, #23
 800ce3e:	9400      	str	r4, [sp, #0]
 800ce40:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ce44:	f003 f8a4 	bl	800ff90 <uxr_run_session_until_all_status>
 800ce48:	b006      	add	sp, #24
 800ce4a:	bd10      	pop	{r4, pc}
 800ce4c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ce50:	f002 fcfa 	bl	800f848 <uxr_flash_output_streams>
 800ce54:	4620      	mov	r0, r4
 800ce56:	b006      	add	sp, #24
 800ce58:	bd10      	pop	{r4, pc}
 800ce5a:	bf00      	nop

0800ce5c <convert_qos_profile>:
 800ce5c:	7a4a      	ldrb	r2, [r1, #9]
 800ce5e:	f891 c008 	ldrb.w	ip, [r1, #8]
 800ce62:	2a02      	cmp	r2, #2
 800ce64:	bf18      	it	ne
 800ce66:	2200      	movne	r2, #0
 800ce68:	7002      	strb	r2, [r0, #0]
 800ce6a:	f1ac 0202 	sub.w	r2, ip, #2
 800ce6e:	fab2 f282 	clz	r2, r2
 800ce72:	0952      	lsrs	r2, r2, #5
 800ce74:	7042      	strb	r2, [r0, #1]
 800ce76:	780a      	ldrb	r2, [r1, #0]
 800ce78:	8889      	ldrh	r1, [r1, #4]
 800ce7a:	f1a2 0202 	sub.w	r2, r2, #2
 800ce7e:	8081      	strh	r1, [r0, #4]
 800ce80:	fab2 f282 	clz	r2, r2
 800ce84:	0952      	lsrs	r2, r2, #5
 800ce86:	7082      	strb	r2, [r0, #2]
 800ce88:	4770      	bx	lr
 800ce8a:	bf00      	nop

0800ce8c <generate_type_name>:
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	b530      	push	{r4, r5, lr}
 800ce90:	700b      	strb	r3, [r1, #0]
 800ce92:	b087      	sub	sp, #28
 800ce94:	6803      	ldr	r3, [r0, #0]
 800ce96:	4614      	mov	r4, r2
 800ce98:	b1bb      	cbz	r3, 800ceca <generate_type_name+0x3e>
 800ce9a:	4a0e      	ldr	r2, [pc, #56]	@ (800ced4 <generate_type_name+0x48>)
 800ce9c:	4615      	mov	r5, r2
 800ce9e:	9500      	str	r5, [sp, #0]
 800cea0:	9203      	str	r2, [sp, #12]
 800cea2:	4d0d      	ldr	r5, [pc, #52]	@ (800ced8 <generate_type_name+0x4c>)
 800cea4:	6842      	ldr	r2, [r0, #4]
 800cea6:	4608      	mov	r0, r1
 800cea8:	490c      	ldr	r1, [pc, #48]	@ (800cedc <generate_type_name+0x50>)
 800ceaa:	9204      	str	r2, [sp, #16]
 800ceac:	9105      	str	r1, [sp, #20]
 800ceae:	9102      	str	r1, [sp, #8]
 800ceb0:	4621      	mov	r1, r4
 800ceb2:	4a0b      	ldr	r2, [pc, #44]	@ (800cee0 <generate_type_name+0x54>)
 800ceb4:	9501      	str	r5, [sp, #4]
 800ceb6:	f009 faef 	bl	8016498 <sniprintf>
 800ceba:	2800      	cmp	r0, #0
 800cebc:	bfa8      	it	ge
 800cebe:	4284      	cmpge	r4, r0
 800cec0:	bfcc      	ite	gt
 800cec2:	2001      	movgt	r0, #1
 800cec4:	2000      	movle	r0, #0
 800cec6:	b007      	add	sp, #28
 800cec8:	bd30      	pop	{r4, r5, pc}
 800ceca:	4b06      	ldr	r3, [pc, #24]	@ (800cee4 <generate_type_name+0x58>)
 800cecc:	4a01      	ldr	r2, [pc, #4]	@ (800ced4 <generate_type_name+0x48>)
 800cece:	461d      	mov	r5, r3
 800ced0:	e7e5      	b.n	800ce9e <generate_type_name+0x12>
 800ced2:	bf00      	nop
 800ced4:	080177a4 	.word	0x080177a4
 800ced8:	080177bc 	.word	0x080177bc
 800cedc:	080177b8 	.word	0x080177b8
 800cee0:	080177a8 	.word	0x080177a8
 800cee4:	08017e28 	.word	0x08017e28

0800cee8 <generate_topic_name>:
 800cee8:	b530      	push	{r4, r5, lr}
 800ceea:	4614      	mov	r4, r2
 800ceec:	b083      	sub	sp, #12
 800ceee:	4605      	mov	r5, r0
 800cef0:	4b07      	ldr	r3, [pc, #28]	@ (800cf10 <generate_topic_name+0x28>)
 800cef2:	4a08      	ldr	r2, [pc, #32]	@ (800cf14 <generate_topic_name+0x2c>)
 800cef4:	4608      	mov	r0, r1
 800cef6:	9500      	str	r5, [sp, #0]
 800cef8:	4621      	mov	r1, r4
 800cefa:	f009 facd 	bl	8016498 <sniprintf>
 800cefe:	2800      	cmp	r0, #0
 800cf00:	bfa8      	it	ge
 800cf02:	4284      	cmpge	r4, r0
 800cf04:	bfcc      	ite	gt
 800cf06:	2001      	movgt	r0, #1
 800cf08:	2000      	movle	r0, #0
 800cf0a:	b003      	add	sp, #12
 800cf0c:	bd30      	pop	{r4, r5, pc}
 800cf0e:	bf00      	nop
 800cf10:	08017ed0 	.word	0x08017ed0
 800cf14:	080177c0 	.word	0x080177c0

0800cf18 <is_uxrce_rmw_identifier_valid>:
 800cf18:	b510      	push	{r4, lr}
 800cf1a:	4604      	mov	r4, r0
 800cf1c:	b140      	cbz	r0, 800cf30 <is_uxrce_rmw_identifier_valid+0x18>
 800cf1e:	f006 f919 	bl	8013154 <rmw_get_implementation_identifier>
 800cf22:	4601      	mov	r1, r0
 800cf24:	4620      	mov	r0, r4
 800cf26:	f7f3 f98b 	bl	8000240 <strcmp>
 800cf2a:	fab0 f080 	clz	r0, r0
 800cf2e:	0940      	lsrs	r0, r0, #5
 800cf30:	bd10      	pop	{r4, pc}
 800cf32:	bf00      	nop

0800cf34 <get_message_typesupport_handle>:
 800cf34:	6883      	ldr	r3, [r0, #8]
 800cf36:	4718      	bx	r3

0800cf38 <get_message_typesupport_handle_function>:
 800cf38:	b510      	push	{r4, lr}
 800cf3a:	4604      	mov	r4, r0
 800cf3c:	6800      	ldr	r0, [r0, #0]
 800cf3e:	f7f3 f97f 	bl	8000240 <strcmp>
 800cf42:	2800      	cmp	r0, #0
 800cf44:	bf0c      	ite	eq
 800cf46:	4620      	moveq	r0, r4
 800cf48:	2000      	movne	r0, #0
 800cf4a:	bd10      	pop	{r4, pc}

0800cf4c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800cf4c:	4b04      	ldr	r3, [pc, #16]	@ (800cf60 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800cf4e:	681a      	ldr	r2, [r3, #0]
 800cf50:	b10a      	cbz	r2, 800cf56 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 800cf52:	4803      	ldr	r0, [pc, #12]	@ (800cf60 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800cf54:	4770      	bx	lr
 800cf56:	4a03      	ldr	r2, [pc, #12]	@ (800cf64 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 800cf58:	4801      	ldr	r0, [pc, #4]	@ (800cf60 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800cf5a:	6812      	ldr	r2, [r2, #0]
 800cf5c:	601a      	str	r2, [r3, #0]
 800cf5e:	4770      	bx	lr
 800cf60:	2000003c 	.word	0x2000003c
 800cf64:	20000584 	.word	0x20000584

0800cf68 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800cf68:	4a02      	ldr	r2, [pc, #8]	@ (800cf74 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 800cf6a:	4b03      	ldr	r3, [pc, #12]	@ (800cf78 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 800cf6c:	6812      	ldr	r2, [r2, #0]
 800cf6e:	601a      	str	r2, [r3, #0]
 800cf70:	4770      	bx	lr
 800cf72:	bf00      	nop
 800cf74:	20000584 	.word	0x20000584
 800cf78:	2000003c 	.word	0x2000003c

0800cf7c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 800cf7c:	2009      	movs	r0, #9
 800cf7e:	4770      	bx	lr

0800cf80 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 800cf80:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800cf84:	4770      	bx	lr
 800cf86:	bf00      	nop

0800cf88 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 800cf88:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800cf8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf90:	e9c2 0100 	strd	r0, r1, [r2]
 800cf94:	4770      	bx	lr
 800cf96:	bf00      	nop

0800cf98 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 800cf98:	e9d2 2300 	ldrd	r2, r3, [r2]
 800cf9c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800cfa0:	e9c1 2300 	strd	r2, r3, [r1]
 800cfa4:	4770      	bx	lr
 800cfa6:	bf00      	nop

0800cfa8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 800cfa8:	f006 bdd6 	b.w	8013b58 <sensor_msgs__msg__Imu__init>

0800cfac <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 800cfac:	f006 be2a 	b.w	8013c04 <sensor_msgs__msg__Imu__fini>

0800cfb0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 800cfb0:	2009      	movs	r0, #9
 800cfb2:	4770      	bx	lr

0800cfb4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 800cfb4:	2009      	movs	r0, #9
 800cfb6:	4770      	bx	lr

0800cfb8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 800cfb8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800cfbc:	4770      	bx	lr
 800cfbe:	bf00      	nop

0800cfc0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 800cfc0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800cfc4:	4770      	bx	lr
 800cfc6:	bf00      	nop

0800cfc8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 800cfc8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800cfcc:	4770      	bx	lr
 800cfce:	bf00      	nop

0800cfd0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 800cfd0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800cfd4:	4770      	bx	lr
 800cfd6:	bf00      	nop

0800cfd8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 800cfd8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800cfdc:	4770      	bx	lr
 800cfde:	bf00      	nop

0800cfe0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 800cfe0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800cfe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfe8:	e9c2 0100 	strd	r0, r1, [r2]
 800cfec:	4770      	bx	lr
 800cfee:	bf00      	nop

0800cff0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 800cff0:	e9d2 2300 	ldrd	r2, r3, [r2]
 800cff4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800cff8:	e9c1 2300 	strd	r2, r3, [r1]
 800cffc:	4770      	bx	lr
 800cffe:	bf00      	nop

0800d000 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 800d000:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800d004:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d008:	e9c2 0100 	strd	r0, r1, [r2]
 800d00c:	4770      	bx	lr
 800d00e:	bf00      	nop

0800d010 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 800d010:	e9d2 2300 	ldrd	r2, r3, [r2]
 800d014:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800d018:	e9c1 2300 	strd	r2, r3, [r1]
 800d01c:	4770      	bx	lr
 800d01e:	bf00      	nop

0800d020 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800d020:	b510      	push	{r4, lr}
 800d022:	4c0c      	ldr	r4, [pc, #48]	@ (800d054 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 800d024:	f000 f918 	bl	800d258 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800d028:	60e0      	str	r0, [r4, #12]
 800d02a:	f000 fa3f 	bl	800d4ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800d02e:	64a0      	str	r0, [r4, #72]	@ 0x48
 800d030:	f000 fa4e 	bl	800d4d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d034:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800d038:	f000 fa4a 	bl	800d4d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d03c:	4b06      	ldr	r3, [pc, #24]	@ (800d058 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800d03e:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 800d042:	681a      	ldr	r2, [r3, #0]
 800d044:	b10a      	cbz	r2, 800d04a <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 800d046:	4804      	ldr	r0, [pc, #16]	@ (800d058 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800d048:	bd10      	pop	{r4, pc}
 800d04a:	4a04      	ldr	r2, [pc, #16]	@ (800d05c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 800d04c:	4802      	ldr	r0, [pc, #8]	@ (800d058 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800d04e:	6812      	ldr	r2, [r2, #0]
 800d050:	601a      	str	r2, [r3, #0]
 800d052:	bd10      	pop	{r4, pc}
 800d054:	20000048 	.word	0x20000048
 800d058:	200001ec 	.word	0x200001ec
 800d05c:	20000588 	.word	0x20000588

0800d060 <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 800d060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d064:	4680      	mov	r8, r0
 800d066:	460f      	mov	r7, r1
 800d068:	f000 f91a 	bl	800d2a0 <get_serialized_size_std_msgs__msg__Header>
 800d06c:	4604      	mov	r4, r0
 800d06e:	f108 0018 	add.w	r0, r8, #24
 800d072:	443c      	add	r4, r7
 800d074:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800d078:	4621      	mov	r1, r4
 800d07a:	f000 fa37 	bl	800d4ec <get_serialized_size_geometry_msgs__msg__Quaternion>
 800d07e:	4404      	add	r4, r0
 800d080:	2108      	movs	r1, #8
 800d082:	4620      	mov	r0, r4
 800d084:	f002 f85c 	bl	800f140 <ucdr_alignment>
 800d088:	4606      	mov	r6, r0
 800d08a:	f108 0080 	add.w	r0, r8, #128	@ 0x80
 800d08e:	3648      	adds	r6, #72	@ 0x48
 800d090:	4426      	add	r6, r4
 800d092:	4631      	mov	r1, r6
 800d094:	f000 fada 	bl	800d64c <get_serialized_size_geometry_msgs__msg__Vector3>
 800d098:	1835      	adds	r5, r6, r0
 800d09a:	2108      	movs	r1, #8
 800d09c:	4628      	mov	r0, r5
 800d09e:	f002 f84f 	bl	800f140 <ucdr_alignment>
 800d0a2:	4604      	mov	r4, r0
 800d0a4:	f108 00e0 	add.w	r0, r8, #224	@ 0xe0
 800d0a8:	3448      	adds	r4, #72	@ 0x48
 800d0aa:	4425      	add	r5, r4
 800d0ac:	4629      	mov	r1, r5
 800d0ae:	f000 facd 	bl	800d64c <get_serialized_size_geometry_msgs__msg__Vector3>
 800d0b2:	4405      	add	r5, r0
 800d0b4:	2108      	movs	r1, #8
 800d0b6:	4628      	mov	r0, r5
 800d0b8:	f002 f842 	bl	800f140 <ucdr_alignment>
 800d0bc:	4438      	add	r0, r7
 800d0be:	4428      	add	r0, r5
 800d0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d0c4 <get_serialized_size_sensor_msgs__msg__Imu>:
 800d0c4:	b108      	cbz	r0, 800d0ca <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 800d0c6:	f7ff bfcb 	b.w	800d060 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800d0ca:	4770      	bx	lr

0800d0cc <_Imu__get_serialized_size>:
 800d0cc:	b110      	cbz	r0, 800d0d4 <_Imu__get_serialized_size+0x8>
 800d0ce:	2100      	movs	r1, #0
 800d0d0:	f7ff bfc6 	b.w	800d060 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800d0d4:	4770      	bx	lr
 800d0d6:	bf00      	nop

0800d0d8 <_Imu__cdr_deserialize>:
 800d0d8:	b538      	push	{r3, r4, r5, lr}
 800d0da:	460c      	mov	r4, r1
 800d0dc:	2900      	cmp	r1, #0
 800d0de:	d037      	beq.n	800d150 <_Imu__cdr_deserialize+0x78>
 800d0e0:	4605      	mov	r5, r0
 800d0e2:	f000 f961 	bl	800d3a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	4621      	mov	r1, r4
 800d0ea:	4628      	mov	r0, r5
 800d0ec:	685b      	ldr	r3, [r3, #4]
 800d0ee:	68db      	ldr	r3, [r3, #12]
 800d0f0:	4798      	blx	r3
 800d0f2:	f000 faa7 	bl	800d644 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	f104 0118 	add.w	r1, r4, #24
 800d0fc:	4628      	mov	r0, r5
 800d0fe:	685b      	ldr	r3, [r3, #4]
 800d100:	68db      	ldr	r3, [r3, #12]
 800d102:	4798      	blx	r3
 800d104:	2209      	movs	r2, #9
 800d106:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800d10a:	4628      	mov	r0, r5
 800d10c:	f000 fcb0 	bl	800da70 <ucdr_deserialize_array_double>
 800d110:	f000 fb24 	bl	800d75c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d114:	4603      	mov	r3, r0
 800d116:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 800d11a:	4628      	mov	r0, r5
 800d11c:	685b      	ldr	r3, [r3, #4]
 800d11e:	68db      	ldr	r3, [r3, #12]
 800d120:	4798      	blx	r3
 800d122:	2209      	movs	r2, #9
 800d124:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800d128:	4628      	mov	r0, r5
 800d12a:	f000 fca1 	bl	800da70 <ucdr_deserialize_array_double>
 800d12e:	f000 fb15 	bl	800d75c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d132:	4603      	mov	r3, r0
 800d134:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 800d138:	4628      	mov	r0, r5
 800d13a:	685b      	ldr	r3, [r3, #4]
 800d13c:	68db      	ldr	r3, [r3, #12]
 800d13e:	4798      	blx	r3
 800d140:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800d144:	4628      	mov	r0, r5
 800d146:	2209      	movs	r2, #9
 800d148:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d14c:	f000 bc90 	b.w	800da70 <ucdr_deserialize_array_double>
 800d150:	4608      	mov	r0, r1
 800d152:	bd38      	pop	{r3, r4, r5, pc}

0800d154 <_Imu__cdr_serialize>:
 800d154:	2800      	cmp	r0, #0
 800d156:	d039      	beq.n	800d1cc <_Imu__cdr_serialize+0x78>
 800d158:	b538      	push	{r3, r4, r5, lr}
 800d15a:	4604      	mov	r4, r0
 800d15c:	460d      	mov	r5, r1
 800d15e:	f000 f923 	bl	800d3a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800d162:	4603      	mov	r3, r0
 800d164:	4629      	mov	r1, r5
 800d166:	4620      	mov	r0, r4
 800d168:	685b      	ldr	r3, [r3, #4]
 800d16a:	689b      	ldr	r3, [r3, #8]
 800d16c:	4798      	blx	r3
 800d16e:	f000 fa69 	bl	800d644 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800d172:	4603      	mov	r3, r0
 800d174:	4629      	mov	r1, r5
 800d176:	f104 0018 	add.w	r0, r4, #24
 800d17a:	685b      	ldr	r3, [r3, #4]
 800d17c:	689b      	ldr	r3, [r3, #8]
 800d17e:	4798      	blx	r3
 800d180:	2209      	movs	r2, #9
 800d182:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800d186:	4628      	mov	r0, r5
 800d188:	f000 fc1e 	bl	800d9c8 <ucdr_serialize_array_double>
 800d18c:	f000 fae6 	bl	800d75c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d190:	4603      	mov	r3, r0
 800d192:	4629      	mov	r1, r5
 800d194:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 800d198:	685b      	ldr	r3, [r3, #4]
 800d19a:	689b      	ldr	r3, [r3, #8]
 800d19c:	4798      	blx	r3
 800d19e:	2209      	movs	r2, #9
 800d1a0:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800d1a4:	4628      	mov	r0, r5
 800d1a6:	f000 fc0f 	bl	800d9c8 <ucdr_serialize_array_double>
 800d1aa:	f000 fad7 	bl	800d75c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	4629      	mov	r1, r5
 800d1b2:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 800d1b6:	685b      	ldr	r3, [r3, #4]
 800d1b8:	689b      	ldr	r3, [r3, #8]
 800d1ba:	4798      	blx	r3
 800d1bc:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800d1c0:	4628      	mov	r0, r5
 800d1c2:	2209      	movs	r2, #9
 800d1c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1c8:	f000 bbfe 	b.w	800d9c8 <ucdr_serialize_array_double>
 800d1cc:	4770      	bx	lr
 800d1ce:	bf00      	nop

0800d1d0 <max_serialized_size_sensor_msgs__msg__Imu>:
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1d6:	7003      	strb	r3, [r0, #0]
 800d1d8:	4680      	mov	r8, r0
 800d1da:	460f      	mov	r7, r1
 800d1dc:	f000 f8da 	bl	800d394 <max_serialized_size_std_msgs__msg__Header>
 800d1e0:	4604      	mov	r4, r0
 800d1e2:	4640      	mov	r0, r8
 800d1e4:	443c      	add	r4, r7
 800d1e6:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800d1ea:	4621      	mov	r1, r4
 800d1ec:	f000 fa0a 	bl	800d604 <max_serialized_size_geometry_msgs__msg__Quaternion>
 800d1f0:	4404      	add	r4, r0
 800d1f2:	2108      	movs	r1, #8
 800d1f4:	4620      	mov	r0, r4
 800d1f6:	f001 ffa3 	bl	800f140 <ucdr_alignment>
 800d1fa:	4606      	mov	r6, r0
 800d1fc:	4640      	mov	r0, r8
 800d1fe:	3648      	adds	r6, #72	@ 0x48
 800d200:	4426      	add	r6, r4
 800d202:	4631      	mov	r1, r6
 800d204:	f000 fa90 	bl	800d728 <max_serialized_size_geometry_msgs__msg__Vector3>
 800d208:	1835      	adds	r5, r6, r0
 800d20a:	2108      	movs	r1, #8
 800d20c:	4628      	mov	r0, r5
 800d20e:	f001 ff97 	bl	800f140 <ucdr_alignment>
 800d212:	4604      	mov	r4, r0
 800d214:	4640      	mov	r0, r8
 800d216:	3448      	adds	r4, #72	@ 0x48
 800d218:	4425      	add	r5, r4
 800d21a:	4629      	mov	r1, r5
 800d21c:	f000 fa84 	bl	800d728 <max_serialized_size_geometry_msgs__msg__Vector3>
 800d220:	4405      	add	r5, r0
 800d222:	2108      	movs	r1, #8
 800d224:	4628      	mov	r0, r5
 800d226:	f001 ff8b 	bl	800f140 <ucdr_alignment>
 800d22a:	4438      	add	r0, r7
 800d22c:	4428      	add	r0, r5
 800d22e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d232:	bf00      	nop

0800d234 <_Imu__max_serialized_size>:
 800d234:	b500      	push	{lr}
 800d236:	b083      	sub	sp, #12
 800d238:	2100      	movs	r1, #0
 800d23a:	f10d 0007 	add.w	r0, sp, #7
 800d23e:	f7ff ffc7 	bl	800d1d0 <max_serialized_size_sensor_msgs__msg__Imu>
 800d242:	b003      	add	sp, #12
 800d244:	f85d fb04 	ldr.w	pc, [sp], #4

0800d248 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800d248:	4800      	ldr	r0, [pc, #0]	@ (800d24c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 800d24a:	4770      	bx	lr
 800d24c:	200001f8 	.word	0x200001f8

0800d250 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 800d250:	f006 bcec 	b.w	8013c2c <std_msgs__msg__Header__init>

0800d254 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 800d254:	f006 bd0e 	b.w	8013c74 <std_msgs__msg__Header__fini>

0800d258 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800d258:	b508      	push	{r3, lr}
 800d25a:	f000 f8ad 	bl	800d3b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d25e:	4b06      	ldr	r3, [pc, #24]	@ (800d278 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800d260:	4906      	ldr	r1, [pc, #24]	@ (800d27c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 800d262:	681a      	ldr	r2, [r3, #0]
 800d264:	60c8      	str	r0, [r1, #12]
 800d266:	b10a      	cbz	r2, 800d26c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 800d268:	4803      	ldr	r0, [pc, #12]	@ (800d278 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800d26a:	bd08      	pop	{r3, pc}
 800d26c:	4a04      	ldr	r2, [pc, #16]	@ (800d280 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 800d26e:	4802      	ldr	r0, [pc, #8]	@ (800d278 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800d270:	6812      	ldr	r2, [r2, #0]
 800d272:	601a      	str	r2, [r3, #0]
 800d274:	bd08      	pop	{r3, pc}
 800d276:	bf00      	nop
 800d278:	20000298 	.word	0x20000298
 800d27c:	20000220 	.word	0x20000220
 800d280:	20000588 	.word	0x20000588

0800d284 <_Header__max_serialized_size>:
 800d284:	b500      	push	{lr}
 800d286:	b083      	sub	sp, #12
 800d288:	2301      	movs	r3, #1
 800d28a:	2100      	movs	r1, #0
 800d28c:	f10d 0007 	add.w	r0, sp, #7
 800d290:	f88d 3007 	strb.w	r3, [sp, #7]
 800d294:	f000 f8ee 	bl	800d474 <max_serialized_size_builtin_interfaces__msg__Time>
 800d298:	b003      	add	sp, #12
 800d29a:	f85d fb04 	ldr.w	pc, [sp], #4
 800d29e:	bf00      	nop

0800d2a0 <get_serialized_size_std_msgs__msg__Header>:
 800d2a0:	b570      	push	{r4, r5, r6, lr}
 800d2a2:	4605      	mov	r5, r0
 800d2a4:	b168      	cbz	r0, 800d2c2 <get_serialized_size_std_msgs__msg__Header+0x22>
 800d2a6:	460c      	mov	r4, r1
 800d2a8:	f000 f894 	bl	800d3d4 <get_serialized_size_builtin_interfaces__msg__Time>
 800d2ac:	2104      	movs	r1, #4
 800d2ae:	1826      	adds	r6, r4, r0
 800d2b0:	f1c4 0405 	rsb	r4, r4, #5
 800d2b4:	4630      	mov	r0, r6
 800d2b6:	f001 ff43 	bl	800f140 <ucdr_alignment>
 800d2ba:	68e9      	ldr	r1, [r5, #12]
 800d2bc:	440c      	add	r4, r1
 800d2be:	4404      	add	r4, r0
 800d2c0:	19a0      	adds	r0, r4, r6
 800d2c2:	bd70      	pop	{r4, r5, r6, pc}

0800d2c4 <_Header__cdr_deserialize>:
 800d2c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2c6:	460c      	mov	r4, r1
 800d2c8:	b083      	sub	sp, #12
 800d2ca:	b1e9      	cbz	r1, 800d308 <_Header__cdr_deserialize+0x44>
 800d2cc:	4606      	mov	r6, r0
 800d2ce:	f000 f8e5 	bl	800d49c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	4621      	mov	r1, r4
 800d2d6:	4630      	mov	r0, r6
 800d2d8:	685b      	ldr	r3, [r3, #4]
 800d2da:	68db      	ldr	r3, [r3, #12]
 800d2dc:	4798      	blx	r3
 800d2de:	6927      	ldr	r7, [r4, #16]
 800d2e0:	ab01      	add	r3, sp, #4
 800d2e2:	68a1      	ldr	r1, [r4, #8]
 800d2e4:	463a      	mov	r2, r7
 800d2e6:	4630      	mov	r0, r6
 800d2e8:	f001 ffac 	bl	800f244 <ucdr_deserialize_sequence_char>
 800d2ec:	9b01      	ldr	r3, [sp, #4]
 800d2ee:	4605      	mov	r5, r0
 800d2f0:	b920      	cbnz	r0, 800d2fc <_Header__cdr_deserialize+0x38>
 800d2f2:	429f      	cmp	r7, r3
 800d2f4:	d30c      	bcc.n	800d310 <_Header__cdr_deserialize+0x4c>
 800d2f6:	4628      	mov	r0, r5
 800d2f8:	b003      	add	sp, #12
 800d2fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2fc:	b103      	cbz	r3, 800d300 <_Header__cdr_deserialize+0x3c>
 800d2fe:	3b01      	subs	r3, #1
 800d300:	4628      	mov	r0, r5
 800d302:	60e3      	str	r3, [r4, #12]
 800d304:	b003      	add	sp, #12
 800d306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d308:	460d      	mov	r5, r1
 800d30a:	4628      	mov	r0, r5
 800d30c:	b003      	add	sp, #12
 800d30e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d310:	2101      	movs	r1, #1
 800d312:	4630      	mov	r0, r6
 800d314:	75b5      	strb	r5, [r6, #22]
 800d316:	7571      	strb	r1, [r6, #21]
 800d318:	60e5      	str	r5, [r4, #12]
 800d31a:	f001 ff29 	bl	800f170 <ucdr_align_to>
 800d31e:	4630      	mov	r0, r6
 800d320:	9901      	ldr	r1, [sp, #4]
 800d322:	f001 ff5d 	bl	800f1e0 <ucdr_advance_buffer>
 800d326:	4628      	mov	r0, r5
 800d328:	b003      	add	sp, #12
 800d32a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d32c <_Header__cdr_serialize>:
 800d32c:	b308      	cbz	r0, 800d372 <_Header__cdr_serialize+0x46>
 800d32e:	b570      	push	{r4, r5, r6, lr}
 800d330:	4604      	mov	r4, r0
 800d332:	460d      	mov	r5, r1
 800d334:	f000 f8b2 	bl	800d49c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d338:	4603      	mov	r3, r0
 800d33a:	4629      	mov	r1, r5
 800d33c:	4620      	mov	r0, r4
 800d33e:	685b      	ldr	r3, [r3, #4]
 800d340:	689b      	ldr	r3, [r3, #8]
 800d342:	4798      	blx	r3
 800d344:	68a6      	ldr	r6, [r4, #8]
 800d346:	b15e      	cbz	r6, 800d360 <_Header__cdr_serialize+0x34>
 800d348:	4630      	mov	r0, r6
 800d34a:	f7f2 ff83 	bl	8000254 <strlen>
 800d34e:	4603      	mov	r3, r0
 800d350:	1c42      	adds	r2, r0, #1
 800d352:	4631      	mov	r1, r6
 800d354:	4628      	mov	r0, r5
 800d356:	60e3      	str	r3, [r4, #12]
 800d358:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d35c:	f001 bf60 	b.w	800f220 <ucdr_serialize_sequence_char>
 800d360:	4633      	mov	r3, r6
 800d362:	4632      	mov	r2, r6
 800d364:	4631      	mov	r1, r6
 800d366:	4628      	mov	r0, r5
 800d368:	60e3      	str	r3, [r4, #12]
 800d36a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d36e:	f001 bf57 	b.w	800f220 <ucdr_serialize_sequence_char>
 800d372:	4770      	bx	lr

0800d374 <_Header__get_serialized_size>:
 800d374:	b538      	push	{r3, r4, r5, lr}
 800d376:	4604      	mov	r4, r0
 800d378:	b150      	cbz	r0, 800d390 <_Header__get_serialized_size+0x1c>
 800d37a:	2100      	movs	r1, #0
 800d37c:	f000 f82a 	bl	800d3d4 <get_serialized_size_builtin_interfaces__msg__Time>
 800d380:	2104      	movs	r1, #4
 800d382:	4605      	mov	r5, r0
 800d384:	f001 fedc 	bl	800f140 <ucdr_alignment>
 800d388:	68e2      	ldr	r2, [r4, #12]
 800d38a:	3205      	adds	r2, #5
 800d38c:	1953      	adds	r3, r2, r5
 800d38e:	4418      	add	r0, r3
 800d390:	bd38      	pop	{r3, r4, r5, pc}
 800d392:	bf00      	nop

0800d394 <max_serialized_size_std_msgs__msg__Header>:
 800d394:	2301      	movs	r3, #1
 800d396:	b510      	push	{r4, lr}
 800d398:	7003      	strb	r3, [r0, #0]
 800d39a:	4604      	mov	r4, r0
 800d39c:	f000 f86a 	bl	800d474 <max_serialized_size_builtin_interfaces__msg__Time>
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	7023      	strb	r3, [r4, #0]
 800d3a4:	bd10      	pop	{r4, pc}
 800d3a6:	bf00      	nop

0800d3a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800d3a8:	4800      	ldr	r0, [pc, #0]	@ (800d3ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800d3aa:	4770      	bx	lr
 800d3ac:	200002a4 	.word	0x200002a4

0800d3b0 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800d3b0:	f006 bc6c 	b.w	8013c8c <builtin_interfaces__msg__Time__init>

0800d3b4 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800d3b4:	f006 bc6e 	b.w	8013c94 <builtin_interfaces__msg__Time__fini>

0800d3b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800d3b8:	4b04      	ldr	r3, [pc, #16]	@ (800d3cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800d3ba:	681a      	ldr	r2, [r3, #0]
 800d3bc:	b10a      	cbz	r2, 800d3c2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800d3be:	4803      	ldr	r0, [pc, #12]	@ (800d3cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800d3c0:	4770      	bx	lr
 800d3c2:	4a03      	ldr	r2, [pc, #12]	@ (800d3d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800d3c4:	4801      	ldr	r0, [pc, #4]	@ (800d3cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800d3c6:	6812      	ldr	r2, [r2, #0]
 800d3c8:	601a      	str	r2, [r3, #0]
 800d3ca:	4770      	bx	lr
 800d3cc:	20000344 	.word	0x20000344
 800d3d0:	20000588 	.word	0x20000588

0800d3d4 <get_serialized_size_builtin_interfaces__msg__Time>:
 800d3d4:	b180      	cbz	r0, 800d3f8 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800d3d6:	b538      	push	{r3, r4, r5, lr}
 800d3d8:	460d      	mov	r5, r1
 800d3da:	2104      	movs	r1, #4
 800d3dc:	4628      	mov	r0, r5
 800d3de:	f001 feaf 	bl	800f140 <ucdr_alignment>
 800d3e2:	1d2b      	adds	r3, r5, #4
 800d3e4:	f1c5 0504 	rsb	r5, r5, #4
 800d3e8:	2104      	movs	r1, #4
 800d3ea:	181c      	adds	r4, r3, r0
 800d3ec:	4620      	mov	r0, r4
 800d3ee:	f001 fea7 	bl	800f140 <ucdr_alignment>
 800d3f2:	4428      	add	r0, r5
 800d3f4:	4420      	add	r0, r4
 800d3f6:	bd38      	pop	{r3, r4, r5, pc}
 800d3f8:	4770      	bx	lr
 800d3fa:	bf00      	nop

0800d3fc <_Time__cdr_deserialize>:
 800d3fc:	b538      	push	{r3, r4, r5, lr}
 800d3fe:	460c      	mov	r4, r1
 800d400:	b141      	cbz	r1, 800d414 <_Time__cdr_deserialize+0x18>
 800d402:	4605      	mov	r5, r0
 800d404:	f001 fa7e 	bl	800e904 <ucdr_deserialize_int32_t>
 800d408:	1d21      	adds	r1, r4, #4
 800d40a:	4628      	mov	r0, r5
 800d40c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d410:	f000 bef6 	b.w	800e200 <ucdr_deserialize_uint32_t>
 800d414:	4608      	mov	r0, r1
 800d416:	bd38      	pop	{r3, r4, r5, pc}

0800d418 <_Time__cdr_serialize>:
 800d418:	b160      	cbz	r0, 800d434 <_Time__cdr_serialize+0x1c>
 800d41a:	b538      	push	{r3, r4, r5, lr}
 800d41c:	460d      	mov	r5, r1
 800d41e:	4604      	mov	r4, r0
 800d420:	6801      	ldr	r1, [r0, #0]
 800d422:	4628      	mov	r0, r5
 800d424:	f001 f9d6 	bl	800e7d4 <ucdr_serialize_int32_t>
 800d428:	6861      	ldr	r1, [r4, #4]
 800d42a:	4628      	mov	r0, r5
 800d42c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d430:	f000 bdb6 	b.w	800dfa0 <ucdr_serialize_uint32_t>
 800d434:	4770      	bx	lr
 800d436:	bf00      	nop

0800d438 <_Time__get_serialized_size>:
 800d438:	b160      	cbz	r0, 800d454 <_Time__get_serialized_size+0x1c>
 800d43a:	2104      	movs	r1, #4
 800d43c:	2000      	movs	r0, #0
 800d43e:	b510      	push	{r4, lr}
 800d440:	f001 fe7e 	bl	800f140 <ucdr_alignment>
 800d444:	2104      	movs	r1, #4
 800d446:	1844      	adds	r4, r0, r1
 800d448:	4620      	mov	r0, r4
 800d44a:	f001 fe79 	bl	800f140 <ucdr_alignment>
 800d44e:	3004      	adds	r0, #4
 800d450:	4420      	add	r0, r4
 800d452:	bd10      	pop	{r4, pc}
 800d454:	4770      	bx	lr
 800d456:	bf00      	nop

0800d458 <_Time__max_serialized_size>:
 800d458:	b510      	push	{r4, lr}
 800d45a:	2104      	movs	r1, #4
 800d45c:	2000      	movs	r0, #0
 800d45e:	f001 fe6f 	bl	800f140 <ucdr_alignment>
 800d462:	2104      	movs	r1, #4
 800d464:	1844      	adds	r4, r0, r1
 800d466:	4620      	mov	r0, r4
 800d468:	f001 fe6a 	bl	800f140 <ucdr_alignment>
 800d46c:	3004      	adds	r0, #4
 800d46e:	4420      	add	r0, r4
 800d470:	bd10      	pop	{r4, pc}
 800d472:	bf00      	nop

0800d474 <max_serialized_size_builtin_interfaces__msg__Time>:
 800d474:	b538      	push	{r3, r4, r5, lr}
 800d476:	460c      	mov	r4, r1
 800d478:	2301      	movs	r3, #1
 800d47a:	2104      	movs	r1, #4
 800d47c:	1d25      	adds	r5, r4, #4
 800d47e:	7003      	strb	r3, [r0, #0]
 800d480:	4620      	mov	r0, r4
 800d482:	f1c4 0404 	rsb	r4, r4, #4
 800d486:	f001 fe5b 	bl	800f140 <ucdr_alignment>
 800d48a:	4405      	add	r5, r0
 800d48c:	2104      	movs	r1, #4
 800d48e:	4628      	mov	r0, r5
 800d490:	f001 fe56 	bl	800f140 <ucdr_alignment>
 800d494:	4420      	add	r0, r4
 800d496:	4428      	add	r0, r5
 800d498:	bd38      	pop	{r3, r4, r5, pc}
 800d49a:	bf00      	nop

0800d49c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800d49c:	4800      	ldr	r0, [pc, #0]	@ (800d4a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800d49e:	4770      	bx	lr
 800d4a0:	20000350 	.word	0x20000350

0800d4a4 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 800d4a4:	f006 bbf8 	b.w	8013c98 <geometry_msgs__msg__Quaternion__init>

0800d4a8 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 800d4a8:	f006 bc06 	b.w	8013cb8 <geometry_msgs__msg__Quaternion__fini>

0800d4ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800d4ac:	4b04      	ldr	r3, [pc, #16]	@ (800d4c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800d4ae:	681a      	ldr	r2, [r3, #0]
 800d4b0:	b10a      	cbz	r2, 800d4b6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 800d4b2:	4803      	ldr	r0, [pc, #12]	@ (800d4c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800d4b4:	4770      	bx	lr
 800d4b6:	4a03      	ldr	r2, [pc, #12]	@ (800d4c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 800d4b8:	4801      	ldr	r0, [pc, #4]	@ (800d4c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800d4ba:	6812      	ldr	r2, [r2, #0]
 800d4bc:	601a      	str	r2, [r3, #0]
 800d4be:	4770      	bx	lr
 800d4c0:	20000468 	.word	0x20000468
 800d4c4:	20000588 	.word	0x20000588

0800d4c8 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800d4c8:	f006 bbf8 	b.w	8013cbc <geometry_msgs__msg__Vector3__init>

0800d4cc <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800d4cc:	f006 bbfa 	b.w	8013cc4 <geometry_msgs__msg__Vector3__fini>

0800d4d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800d4d0:	4b04      	ldr	r3, [pc, #16]	@ (800d4e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800d4d2:	681a      	ldr	r2, [r3, #0]
 800d4d4:	b10a      	cbz	r2, 800d4da <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800d4d6:	4803      	ldr	r0, [pc, #12]	@ (800d4e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800d4d8:	4770      	bx	lr
 800d4da:	4a03      	ldr	r2, [pc, #12]	@ (800d4e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800d4dc:	4801      	ldr	r0, [pc, #4]	@ (800d4e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800d4de:	6812      	ldr	r2, [r2, #0]
 800d4e0:	601a      	str	r2, [r3, #0]
 800d4e2:	4770      	bx	lr
 800d4e4:	20000528 	.word	0x20000528
 800d4e8:	20000588 	.word	0x20000588

0800d4ec <get_serialized_size_geometry_msgs__msg__Quaternion>:
 800d4ec:	b1e8      	cbz	r0, 800d52a <get_serialized_size_geometry_msgs__msg__Quaternion+0x3e>
 800d4ee:	b570      	push	{r4, r5, r6, lr}
 800d4f0:	460d      	mov	r5, r1
 800d4f2:	2108      	movs	r1, #8
 800d4f4:	4628      	mov	r0, r5
 800d4f6:	f001 fe23 	bl	800f140 <ucdr_alignment>
 800d4fa:	f105 0308 	add.w	r3, r5, #8
 800d4fe:	2108      	movs	r1, #8
 800d500:	f1c5 0508 	rsb	r5, r5, #8
 800d504:	181e      	adds	r6, r3, r0
 800d506:	4630      	mov	r0, r6
 800d508:	f001 fe1a 	bl	800f140 <ucdr_alignment>
 800d50c:	2108      	movs	r1, #8
 800d50e:	1844      	adds	r4, r0, r1
 800d510:	4434      	add	r4, r6
 800d512:	4620      	mov	r0, r4
 800d514:	f001 fe14 	bl	800f140 <ucdr_alignment>
 800d518:	2108      	movs	r1, #8
 800d51a:	4408      	add	r0, r1
 800d51c:	4404      	add	r4, r0
 800d51e:	4620      	mov	r0, r4
 800d520:	f001 fe0e 	bl	800f140 <ucdr_alignment>
 800d524:	4428      	add	r0, r5
 800d526:	4420      	add	r0, r4
 800d528:	bd70      	pop	{r4, r5, r6, pc}
 800d52a:	4770      	bx	lr

0800d52c <_Quaternion__cdr_deserialize>:
 800d52c:	b538      	push	{r3, r4, r5, lr}
 800d52e:	460c      	mov	r4, r1
 800d530:	b199      	cbz	r1, 800d55a <_Quaternion__cdr_deserialize+0x2e>
 800d532:	4605      	mov	r5, r0
 800d534:	f001 fc18 	bl	800ed68 <ucdr_deserialize_double>
 800d538:	f104 0108 	add.w	r1, r4, #8
 800d53c:	4628      	mov	r0, r5
 800d53e:	f001 fc13 	bl	800ed68 <ucdr_deserialize_double>
 800d542:	f104 0110 	add.w	r1, r4, #16
 800d546:	4628      	mov	r0, r5
 800d548:	f001 fc0e 	bl	800ed68 <ucdr_deserialize_double>
 800d54c:	f104 0118 	add.w	r1, r4, #24
 800d550:	4628      	mov	r0, r5
 800d552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d556:	f001 bc07 	b.w	800ed68 <ucdr_deserialize_double>
 800d55a:	4608      	mov	r0, r1
 800d55c:	bd38      	pop	{r3, r4, r5, pc}
 800d55e:	bf00      	nop

0800d560 <_Quaternion__cdr_serialize>:
 800d560:	b1c0      	cbz	r0, 800d594 <_Quaternion__cdr_serialize+0x34>
 800d562:	b538      	push	{r3, r4, r5, lr}
 800d564:	460d      	mov	r5, r1
 800d566:	4604      	mov	r4, r0
 800d568:	ed90 0b00 	vldr	d0, [r0]
 800d56c:	4608      	mov	r0, r1
 800d56e:	f001 fa59 	bl	800ea24 <ucdr_serialize_double>
 800d572:	4628      	mov	r0, r5
 800d574:	ed94 0b02 	vldr	d0, [r4, #8]
 800d578:	f001 fa54 	bl	800ea24 <ucdr_serialize_double>
 800d57c:	4628      	mov	r0, r5
 800d57e:	ed94 0b04 	vldr	d0, [r4, #16]
 800d582:	f001 fa4f 	bl	800ea24 <ucdr_serialize_double>
 800d586:	4628      	mov	r0, r5
 800d588:	ed94 0b06 	vldr	d0, [r4, #24]
 800d58c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d590:	f001 ba48 	b.w	800ea24 <ucdr_serialize_double>
 800d594:	4770      	bx	lr
 800d596:	bf00      	nop

0800d598 <_Quaternion__get_serialized_size>:
 800d598:	b1c0      	cbz	r0, 800d5cc <_Quaternion__get_serialized_size+0x34>
 800d59a:	2108      	movs	r1, #8
 800d59c:	2000      	movs	r0, #0
 800d59e:	b538      	push	{r3, r4, r5, lr}
 800d5a0:	f001 fdce 	bl	800f140 <ucdr_alignment>
 800d5a4:	2108      	movs	r1, #8
 800d5a6:	1845      	adds	r5, r0, r1
 800d5a8:	4628      	mov	r0, r5
 800d5aa:	f001 fdc9 	bl	800f140 <ucdr_alignment>
 800d5ae:	2108      	movs	r1, #8
 800d5b0:	1844      	adds	r4, r0, r1
 800d5b2:	442c      	add	r4, r5
 800d5b4:	4620      	mov	r0, r4
 800d5b6:	f001 fdc3 	bl	800f140 <ucdr_alignment>
 800d5ba:	2108      	movs	r1, #8
 800d5bc:	4408      	add	r0, r1
 800d5be:	4404      	add	r4, r0
 800d5c0:	4620      	mov	r0, r4
 800d5c2:	f001 fdbd 	bl	800f140 <ucdr_alignment>
 800d5c6:	3008      	adds	r0, #8
 800d5c8:	4420      	add	r0, r4
 800d5ca:	bd38      	pop	{r3, r4, r5, pc}
 800d5cc:	4770      	bx	lr
 800d5ce:	bf00      	nop

0800d5d0 <_Quaternion__max_serialized_size>:
 800d5d0:	b538      	push	{r3, r4, r5, lr}
 800d5d2:	2108      	movs	r1, #8
 800d5d4:	2000      	movs	r0, #0
 800d5d6:	f001 fdb3 	bl	800f140 <ucdr_alignment>
 800d5da:	2108      	movs	r1, #8
 800d5dc:	1845      	adds	r5, r0, r1
 800d5de:	4628      	mov	r0, r5
 800d5e0:	f001 fdae 	bl	800f140 <ucdr_alignment>
 800d5e4:	2108      	movs	r1, #8
 800d5e6:	1844      	adds	r4, r0, r1
 800d5e8:	442c      	add	r4, r5
 800d5ea:	4620      	mov	r0, r4
 800d5ec:	f001 fda8 	bl	800f140 <ucdr_alignment>
 800d5f0:	2108      	movs	r1, #8
 800d5f2:	4408      	add	r0, r1
 800d5f4:	4404      	add	r4, r0
 800d5f6:	4620      	mov	r0, r4
 800d5f8:	f001 fda2 	bl	800f140 <ucdr_alignment>
 800d5fc:	3008      	adds	r0, #8
 800d5fe:	4420      	add	r0, r4
 800d600:	bd38      	pop	{r3, r4, r5, pc}
 800d602:	bf00      	nop

0800d604 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 800d604:	b570      	push	{r4, r5, r6, lr}
 800d606:	460c      	mov	r4, r1
 800d608:	2301      	movs	r3, #1
 800d60a:	2108      	movs	r1, #8
 800d60c:	f104 0508 	add.w	r5, r4, #8
 800d610:	7003      	strb	r3, [r0, #0]
 800d612:	4620      	mov	r0, r4
 800d614:	f1c4 0408 	rsb	r4, r4, #8
 800d618:	f001 fd92 	bl	800f140 <ucdr_alignment>
 800d61c:	1946      	adds	r6, r0, r5
 800d61e:	2108      	movs	r1, #8
 800d620:	4630      	mov	r0, r6
 800d622:	f001 fd8d 	bl	800f140 <ucdr_alignment>
 800d626:	2108      	movs	r1, #8
 800d628:	1845      	adds	r5, r0, r1
 800d62a:	4435      	add	r5, r6
 800d62c:	4628      	mov	r0, r5
 800d62e:	f001 fd87 	bl	800f140 <ucdr_alignment>
 800d632:	2108      	movs	r1, #8
 800d634:	4408      	add	r0, r1
 800d636:	4405      	add	r5, r0
 800d638:	4628      	mov	r0, r5
 800d63a:	f001 fd81 	bl	800f140 <ucdr_alignment>
 800d63e:	4420      	add	r0, r4
 800d640:	4428      	add	r0, r5
 800d642:	bd70      	pop	{r4, r5, r6, pc}

0800d644 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800d644:	4800      	ldr	r0, [pc, #0]	@ (800d648 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 800d646:	4770      	bx	lr
 800d648:	20000534 	.word	0x20000534

0800d64c <get_serialized_size_geometry_msgs__msg__Vector3>:
 800d64c:	b1b8      	cbz	r0, 800d67e <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800d64e:	b538      	push	{r3, r4, r5, lr}
 800d650:	460d      	mov	r5, r1
 800d652:	2108      	movs	r1, #8
 800d654:	4628      	mov	r0, r5
 800d656:	f001 fd73 	bl	800f140 <ucdr_alignment>
 800d65a:	f105 0308 	add.w	r3, r5, #8
 800d65e:	2108      	movs	r1, #8
 800d660:	f1c5 0508 	rsb	r5, r5, #8
 800d664:	181c      	adds	r4, r3, r0
 800d666:	4620      	mov	r0, r4
 800d668:	f001 fd6a 	bl	800f140 <ucdr_alignment>
 800d66c:	2108      	movs	r1, #8
 800d66e:	4408      	add	r0, r1
 800d670:	4404      	add	r4, r0
 800d672:	4620      	mov	r0, r4
 800d674:	f001 fd64 	bl	800f140 <ucdr_alignment>
 800d678:	4428      	add	r0, r5
 800d67a:	4420      	add	r0, r4
 800d67c:	bd38      	pop	{r3, r4, r5, pc}
 800d67e:	4770      	bx	lr

0800d680 <_Vector3__cdr_deserialize>:
 800d680:	b538      	push	{r3, r4, r5, lr}
 800d682:	460c      	mov	r4, r1
 800d684:	b171      	cbz	r1, 800d6a4 <_Vector3__cdr_deserialize+0x24>
 800d686:	4605      	mov	r5, r0
 800d688:	f001 fb6e 	bl	800ed68 <ucdr_deserialize_double>
 800d68c:	f104 0108 	add.w	r1, r4, #8
 800d690:	4628      	mov	r0, r5
 800d692:	f001 fb69 	bl	800ed68 <ucdr_deserialize_double>
 800d696:	f104 0110 	add.w	r1, r4, #16
 800d69a:	4628      	mov	r0, r5
 800d69c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6a0:	f001 bb62 	b.w	800ed68 <ucdr_deserialize_double>
 800d6a4:	4608      	mov	r0, r1
 800d6a6:	bd38      	pop	{r3, r4, r5, pc}

0800d6a8 <_Vector3__cdr_serialize>:
 800d6a8:	b198      	cbz	r0, 800d6d2 <_Vector3__cdr_serialize+0x2a>
 800d6aa:	b538      	push	{r3, r4, r5, lr}
 800d6ac:	460d      	mov	r5, r1
 800d6ae:	4604      	mov	r4, r0
 800d6b0:	ed90 0b00 	vldr	d0, [r0]
 800d6b4:	4608      	mov	r0, r1
 800d6b6:	f001 f9b5 	bl	800ea24 <ucdr_serialize_double>
 800d6ba:	4628      	mov	r0, r5
 800d6bc:	ed94 0b02 	vldr	d0, [r4, #8]
 800d6c0:	f001 f9b0 	bl	800ea24 <ucdr_serialize_double>
 800d6c4:	4628      	mov	r0, r5
 800d6c6:	ed94 0b04 	vldr	d0, [r4, #16]
 800d6ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6ce:	f001 b9a9 	b.w	800ea24 <ucdr_serialize_double>
 800d6d2:	4770      	bx	lr

0800d6d4 <_Vector3__get_serialized_size>:
 800d6d4:	b190      	cbz	r0, 800d6fc <_Vector3__get_serialized_size+0x28>
 800d6d6:	2108      	movs	r1, #8
 800d6d8:	2000      	movs	r0, #0
 800d6da:	b510      	push	{r4, lr}
 800d6dc:	f001 fd30 	bl	800f140 <ucdr_alignment>
 800d6e0:	2108      	movs	r1, #8
 800d6e2:	1844      	adds	r4, r0, r1
 800d6e4:	4620      	mov	r0, r4
 800d6e6:	f001 fd2b 	bl	800f140 <ucdr_alignment>
 800d6ea:	2108      	movs	r1, #8
 800d6ec:	4408      	add	r0, r1
 800d6ee:	4404      	add	r4, r0
 800d6f0:	4620      	mov	r0, r4
 800d6f2:	f001 fd25 	bl	800f140 <ucdr_alignment>
 800d6f6:	3008      	adds	r0, #8
 800d6f8:	4420      	add	r0, r4
 800d6fa:	bd10      	pop	{r4, pc}
 800d6fc:	4770      	bx	lr
 800d6fe:	bf00      	nop

0800d700 <_Vector3__max_serialized_size>:
 800d700:	b538      	push	{r3, r4, r5, lr}
 800d702:	2108      	movs	r1, #8
 800d704:	2000      	movs	r0, #0
 800d706:	f001 fd1b 	bl	800f140 <ucdr_alignment>
 800d70a:	2108      	movs	r1, #8
 800d70c:	1845      	adds	r5, r0, r1
 800d70e:	4628      	mov	r0, r5
 800d710:	f001 fd16 	bl	800f140 <ucdr_alignment>
 800d714:	2108      	movs	r1, #8
 800d716:	1844      	adds	r4, r0, r1
 800d718:	442c      	add	r4, r5
 800d71a:	4620      	mov	r0, r4
 800d71c:	f001 fd10 	bl	800f140 <ucdr_alignment>
 800d720:	3008      	adds	r0, #8
 800d722:	4420      	add	r0, r4
 800d724:	bd38      	pop	{r3, r4, r5, pc}
 800d726:	bf00      	nop

0800d728 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800d728:	b570      	push	{r4, r5, r6, lr}
 800d72a:	460c      	mov	r4, r1
 800d72c:	2301      	movs	r3, #1
 800d72e:	2108      	movs	r1, #8
 800d730:	f104 0508 	add.w	r5, r4, #8
 800d734:	7003      	strb	r3, [r0, #0]
 800d736:	4620      	mov	r0, r4
 800d738:	f1c4 0408 	rsb	r4, r4, #8
 800d73c:	f001 fd00 	bl	800f140 <ucdr_alignment>
 800d740:	1946      	adds	r6, r0, r5
 800d742:	2108      	movs	r1, #8
 800d744:	4630      	mov	r0, r6
 800d746:	f001 fcfb 	bl	800f140 <ucdr_alignment>
 800d74a:	2108      	movs	r1, #8
 800d74c:	1845      	adds	r5, r0, r1
 800d74e:	4435      	add	r5, r6
 800d750:	4628      	mov	r0, r5
 800d752:	f001 fcf5 	bl	800f140 <ucdr_alignment>
 800d756:	4420      	add	r0, r4
 800d758:	4428      	add	r0, r5
 800d75a:	bd70      	pop	{r4, r5, r6, pc}

0800d75c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800d75c:	4800      	ldr	r0, [pc, #0]	@ (800d760 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800d75e:	4770      	bx	lr
 800d760:	2000055c 	.word	0x2000055c

0800d764 <ucdr_serialize_endian_array_char>:
 800d764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d768:	4619      	mov	r1, r3
 800d76a:	461f      	mov	r7, r3
 800d76c:	4605      	mov	r5, r0
 800d76e:	4690      	mov	r8, r2
 800d770:	f001 fc8e 	bl	800f090 <ucdr_check_buffer_available_for>
 800d774:	b9e0      	cbnz	r0, 800d7b0 <ucdr_serialize_endian_array_char+0x4c>
 800d776:	463e      	mov	r6, r7
 800d778:	e00b      	b.n	800d792 <ucdr_serialize_endian_array_char+0x2e>
 800d77a:	4441      	add	r1, r8
 800d77c:	68a8      	ldr	r0, [r5, #8]
 800d77e:	4622      	mov	r2, r4
 800d780:	1b36      	subs	r6, r6, r4
 800d782:	f009 f8b6 	bl	80168f2 <memcpy>
 800d786:	68ab      	ldr	r3, [r5, #8]
 800d788:	6928      	ldr	r0, [r5, #16]
 800d78a:	4423      	add	r3, r4
 800d78c:	4420      	add	r0, r4
 800d78e:	60ab      	str	r3, [r5, #8]
 800d790:	6128      	str	r0, [r5, #16]
 800d792:	4631      	mov	r1, r6
 800d794:	2201      	movs	r2, #1
 800d796:	4628      	mov	r0, r5
 800d798:	f001 fd04 	bl	800f1a4 <ucdr_check_final_buffer_behavior_array>
 800d79c:	1bb9      	subs	r1, r7, r6
 800d79e:	4604      	mov	r4, r0
 800d7a0:	2800      	cmp	r0, #0
 800d7a2:	d1ea      	bne.n	800d77a <ucdr_serialize_endian_array_char+0x16>
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	7da8      	ldrb	r0, [r5, #22]
 800d7a8:	756b      	strb	r3, [r5, #21]
 800d7aa:	4058      	eors	r0, r3
 800d7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7b0:	463a      	mov	r2, r7
 800d7b2:	4641      	mov	r1, r8
 800d7b4:	68a8      	ldr	r0, [r5, #8]
 800d7b6:	f009 f89c 	bl	80168f2 <memcpy>
 800d7ba:	68aa      	ldr	r2, [r5, #8]
 800d7bc:	692b      	ldr	r3, [r5, #16]
 800d7be:	443a      	add	r2, r7
 800d7c0:	443b      	add	r3, r7
 800d7c2:	60aa      	str	r2, [r5, #8]
 800d7c4:	612b      	str	r3, [r5, #16]
 800d7c6:	e7ed      	b.n	800d7a4 <ucdr_serialize_endian_array_char+0x40>

0800d7c8 <ucdr_deserialize_endian_array_char>:
 800d7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	461f      	mov	r7, r3
 800d7d0:	4605      	mov	r5, r0
 800d7d2:	4690      	mov	r8, r2
 800d7d4:	f001 fc5c 	bl	800f090 <ucdr_check_buffer_available_for>
 800d7d8:	b9e8      	cbnz	r0, 800d816 <ucdr_deserialize_endian_array_char+0x4e>
 800d7da:	463e      	mov	r6, r7
 800d7dc:	e00c      	b.n	800d7f8 <ucdr_deserialize_endian_array_char+0x30>
 800d7de:	eb08 0003 	add.w	r0, r8, r3
 800d7e2:	68a9      	ldr	r1, [r5, #8]
 800d7e4:	4622      	mov	r2, r4
 800d7e6:	1b36      	subs	r6, r6, r4
 800d7e8:	f009 f883 	bl	80168f2 <memcpy>
 800d7ec:	68ab      	ldr	r3, [r5, #8]
 800d7ee:	6928      	ldr	r0, [r5, #16]
 800d7f0:	4423      	add	r3, r4
 800d7f2:	4420      	add	r0, r4
 800d7f4:	60ab      	str	r3, [r5, #8]
 800d7f6:	6128      	str	r0, [r5, #16]
 800d7f8:	4631      	mov	r1, r6
 800d7fa:	2201      	movs	r2, #1
 800d7fc:	4628      	mov	r0, r5
 800d7fe:	f001 fcd1 	bl	800f1a4 <ucdr_check_final_buffer_behavior_array>
 800d802:	1bbb      	subs	r3, r7, r6
 800d804:	4604      	mov	r4, r0
 800d806:	2800      	cmp	r0, #0
 800d808:	d1e9      	bne.n	800d7de <ucdr_deserialize_endian_array_char+0x16>
 800d80a:	2301      	movs	r3, #1
 800d80c:	7da8      	ldrb	r0, [r5, #22]
 800d80e:	756b      	strb	r3, [r5, #21]
 800d810:	4058      	eors	r0, r3
 800d812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d816:	463a      	mov	r2, r7
 800d818:	68a9      	ldr	r1, [r5, #8]
 800d81a:	4640      	mov	r0, r8
 800d81c:	f009 f869 	bl	80168f2 <memcpy>
 800d820:	68aa      	ldr	r2, [r5, #8]
 800d822:	692b      	ldr	r3, [r5, #16]
 800d824:	443a      	add	r2, r7
 800d826:	443b      	add	r3, r7
 800d828:	60aa      	str	r2, [r5, #8]
 800d82a:	612b      	str	r3, [r5, #16]
 800d82c:	e7ed      	b.n	800d80a <ucdr_deserialize_endian_array_char+0x42>
 800d82e:	bf00      	nop

0800d830 <ucdr_serialize_array_uint8_t>:
 800d830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d834:	4688      	mov	r8, r1
 800d836:	4611      	mov	r1, r2
 800d838:	4617      	mov	r7, r2
 800d83a:	4605      	mov	r5, r0
 800d83c:	f001 fc28 	bl	800f090 <ucdr_check_buffer_available_for>
 800d840:	b9e0      	cbnz	r0, 800d87c <ucdr_serialize_array_uint8_t+0x4c>
 800d842:	463e      	mov	r6, r7
 800d844:	e00b      	b.n	800d85e <ucdr_serialize_array_uint8_t+0x2e>
 800d846:	4441      	add	r1, r8
 800d848:	68a8      	ldr	r0, [r5, #8]
 800d84a:	4622      	mov	r2, r4
 800d84c:	1b36      	subs	r6, r6, r4
 800d84e:	f009 f850 	bl	80168f2 <memcpy>
 800d852:	68ab      	ldr	r3, [r5, #8]
 800d854:	6928      	ldr	r0, [r5, #16]
 800d856:	4423      	add	r3, r4
 800d858:	4420      	add	r0, r4
 800d85a:	60ab      	str	r3, [r5, #8]
 800d85c:	6128      	str	r0, [r5, #16]
 800d85e:	4631      	mov	r1, r6
 800d860:	2201      	movs	r2, #1
 800d862:	4628      	mov	r0, r5
 800d864:	f001 fc9e 	bl	800f1a4 <ucdr_check_final_buffer_behavior_array>
 800d868:	1bb9      	subs	r1, r7, r6
 800d86a:	4604      	mov	r4, r0
 800d86c:	2800      	cmp	r0, #0
 800d86e:	d1ea      	bne.n	800d846 <ucdr_serialize_array_uint8_t+0x16>
 800d870:	2301      	movs	r3, #1
 800d872:	7da8      	ldrb	r0, [r5, #22]
 800d874:	756b      	strb	r3, [r5, #21]
 800d876:	4058      	eors	r0, r3
 800d878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d87c:	463a      	mov	r2, r7
 800d87e:	4641      	mov	r1, r8
 800d880:	68a8      	ldr	r0, [r5, #8]
 800d882:	f009 f836 	bl	80168f2 <memcpy>
 800d886:	68aa      	ldr	r2, [r5, #8]
 800d888:	692b      	ldr	r3, [r5, #16]
 800d88a:	443a      	add	r2, r7
 800d88c:	443b      	add	r3, r7
 800d88e:	60aa      	str	r2, [r5, #8]
 800d890:	612b      	str	r3, [r5, #16]
 800d892:	e7ed      	b.n	800d870 <ucdr_serialize_array_uint8_t+0x40>

0800d894 <ucdr_serialize_endian_array_uint8_t>:
 800d894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d898:	4619      	mov	r1, r3
 800d89a:	461f      	mov	r7, r3
 800d89c:	4605      	mov	r5, r0
 800d89e:	4690      	mov	r8, r2
 800d8a0:	f001 fbf6 	bl	800f090 <ucdr_check_buffer_available_for>
 800d8a4:	b9e0      	cbnz	r0, 800d8e0 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800d8a6:	463e      	mov	r6, r7
 800d8a8:	e00b      	b.n	800d8c2 <ucdr_serialize_endian_array_uint8_t+0x2e>
 800d8aa:	4441      	add	r1, r8
 800d8ac:	68a8      	ldr	r0, [r5, #8]
 800d8ae:	4622      	mov	r2, r4
 800d8b0:	1b36      	subs	r6, r6, r4
 800d8b2:	f009 f81e 	bl	80168f2 <memcpy>
 800d8b6:	68ab      	ldr	r3, [r5, #8]
 800d8b8:	6928      	ldr	r0, [r5, #16]
 800d8ba:	4423      	add	r3, r4
 800d8bc:	4420      	add	r0, r4
 800d8be:	60ab      	str	r3, [r5, #8]
 800d8c0:	6128      	str	r0, [r5, #16]
 800d8c2:	4631      	mov	r1, r6
 800d8c4:	2201      	movs	r2, #1
 800d8c6:	4628      	mov	r0, r5
 800d8c8:	f001 fc6c 	bl	800f1a4 <ucdr_check_final_buffer_behavior_array>
 800d8cc:	1bb9      	subs	r1, r7, r6
 800d8ce:	4604      	mov	r4, r0
 800d8d0:	2800      	cmp	r0, #0
 800d8d2:	d1ea      	bne.n	800d8aa <ucdr_serialize_endian_array_uint8_t+0x16>
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	7da8      	ldrb	r0, [r5, #22]
 800d8d8:	756b      	strb	r3, [r5, #21]
 800d8da:	4058      	eors	r0, r3
 800d8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8e0:	463a      	mov	r2, r7
 800d8e2:	4641      	mov	r1, r8
 800d8e4:	68a8      	ldr	r0, [r5, #8]
 800d8e6:	f009 f804 	bl	80168f2 <memcpy>
 800d8ea:	68aa      	ldr	r2, [r5, #8]
 800d8ec:	692b      	ldr	r3, [r5, #16]
 800d8ee:	443a      	add	r2, r7
 800d8f0:	443b      	add	r3, r7
 800d8f2:	60aa      	str	r2, [r5, #8]
 800d8f4:	612b      	str	r3, [r5, #16]
 800d8f6:	e7ed      	b.n	800d8d4 <ucdr_serialize_endian_array_uint8_t+0x40>

0800d8f8 <ucdr_deserialize_array_uint8_t>:
 800d8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8fc:	4688      	mov	r8, r1
 800d8fe:	4611      	mov	r1, r2
 800d900:	4617      	mov	r7, r2
 800d902:	4605      	mov	r5, r0
 800d904:	f001 fbc4 	bl	800f090 <ucdr_check_buffer_available_for>
 800d908:	b9e8      	cbnz	r0, 800d946 <ucdr_deserialize_array_uint8_t+0x4e>
 800d90a:	463e      	mov	r6, r7
 800d90c:	e00c      	b.n	800d928 <ucdr_deserialize_array_uint8_t+0x30>
 800d90e:	eb08 0003 	add.w	r0, r8, r3
 800d912:	68a9      	ldr	r1, [r5, #8]
 800d914:	4622      	mov	r2, r4
 800d916:	1b36      	subs	r6, r6, r4
 800d918:	f008 ffeb 	bl	80168f2 <memcpy>
 800d91c:	68ab      	ldr	r3, [r5, #8]
 800d91e:	6928      	ldr	r0, [r5, #16]
 800d920:	4423      	add	r3, r4
 800d922:	4420      	add	r0, r4
 800d924:	60ab      	str	r3, [r5, #8]
 800d926:	6128      	str	r0, [r5, #16]
 800d928:	4631      	mov	r1, r6
 800d92a:	2201      	movs	r2, #1
 800d92c:	4628      	mov	r0, r5
 800d92e:	f001 fc39 	bl	800f1a4 <ucdr_check_final_buffer_behavior_array>
 800d932:	1bbb      	subs	r3, r7, r6
 800d934:	4604      	mov	r4, r0
 800d936:	2800      	cmp	r0, #0
 800d938:	d1e9      	bne.n	800d90e <ucdr_deserialize_array_uint8_t+0x16>
 800d93a:	2301      	movs	r3, #1
 800d93c:	7da8      	ldrb	r0, [r5, #22]
 800d93e:	756b      	strb	r3, [r5, #21]
 800d940:	4058      	eors	r0, r3
 800d942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d946:	463a      	mov	r2, r7
 800d948:	68a9      	ldr	r1, [r5, #8]
 800d94a:	4640      	mov	r0, r8
 800d94c:	f008 ffd1 	bl	80168f2 <memcpy>
 800d950:	68aa      	ldr	r2, [r5, #8]
 800d952:	692b      	ldr	r3, [r5, #16]
 800d954:	443a      	add	r2, r7
 800d956:	443b      	add	r3, r7
 800d958:	60aa      	str	r2, [r5, #8]
 800d95a:	612b      	str	r3, [r5, #16]
 800d95c:	e7ed      	b.n	800d93a <ucdr_deserialize_array_uint8_t+0x42>
 800d95e:	bf00      	nop

0800d960 <ucdr_deserialize_endian_array_uint8_t>:
 800d960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d964:	4619      	mov	r1, r3
 800d966:	461f      	mov	r7, r3
 800d968:	4605      	mov	r5, r0
 800d96a:	4690      	mov	r8, r2
 800d96c:	f001 fb90 	bl	800f090 <ucdr_check_buffer_available_for>
 800d970:	b9e8      	cbnz	r0, 800d9ae <ucdr_deserialize_endian_array_uint8_t+0x4e>
 800d972:	463e      	mov	r6, r7
 800d974:	e00c      	b.n	800d990 <ucdr_deserialize_endian_array_uint8_t+0x30>
 800d976:	eb08 0003 	add.w	r0, r8, r3
 800d97a:	68a9      	ldr	r1, [r5, #8]
 800d97c:	4622      	mov	r2, r4
 800d97e:	1b36      	subs	r6, r6, r4
 800d980:	f008 ffb7 	bl	80168f2 <memcpy>
 800d984:	68ab      	ldr	r3, [r5, #8]
 800d986:	6928      	ldr	r0, [r5, #16]
 800d988:	4423      	add	r3, r4
 800d98a:	4420      	add	r0, r4
 800d98c:	60ab      	str	r3, [r5, #8]
 800d98e:	6128      	str	r0, [r5, #16]
 800d990:	4631      	mov	r1, r6
 800d992:	2201      	movs	r2, #1
 800d994:	4628      	mov	r0, r5
 800d996:	f001 fc05 	bl	800f1a4 <ucdr_check_final_buffer_behavior_array>
 800d99a:	1bbb      	subs	r3, r7, r6
 800d99c:	4604      	mov	r4, r0
 800d99e:	2800      	cmp	r0, #0
 800d9a0:	d1e9      	bne.n	800d976 <ucdr_deserialize_endian_array_uint8_t+0x16>
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	7da8      	ldrb	r0, [r5, #22]
 800d9a6:	756b      	strb	r3, [r5, #21]
 800d9a8:	4058      	eors	r0, r3
 800d9aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9ae:	463a      	mov	r2, r7
 800d9b0:	68a9      	ldr	r1, [r5, #8]
 800d9b2:	4640      	mov	r0, r8
 800d9b4:	f008 ff9d 	bl	80168f2 <memcpy>
 800d9b8:	68aa      	ldr	r2, [r5, #8]
 800d9ba:	692b      	ldr	r3, [r5, #16]
 800d9bc:	443a      	add	r2, r7
 800d9be:	443b      	add	r3, r7
 800d9c0:	60aa      	str	r2, [r5, #8]
 800d9c2:	612b      	str	r3, [r5, #16]
 800d9c4:	e7ed      	b.n	800d9a2 <ucdr_deserialize_endian_array_uint8_t+0x42>
 800d9c6:	bf00      	nop

0800d9c8 <ucdr_serialize_array_double>:
 800d9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9cc:	4604      	mov	r4, r0
 800d9ce:	460e      	mov	r6, r1
 800d9d0:	2108      	movs	r1, #8
 800d9d2:	4617      	mov	r7, r2
 800d9d4:	f001 fbbc 	bl	800f150 <ucdr_buffer_alignment>
 800d9d8:	4601      	mov	r1, r0
 800d9da:	4620      	mov	r0, r4
 800d9dc:	7d65      	ldrb	r5, [r4, #21]
 800d9de:	f001 fbff 	bl	800f1e0 <ucdr_advance_buffer>
 800d9e2:	7d21      	ldrb	r1, [r4, #20]
 800d9e4:	7565      	strb	r5, [r4, #21]
 800d9e6:	2901      	cmp	r1, #1
 800d9e8:	d010      	beq.n	800da0c <ucdr_serialize_array_double+0x44>
 800d9ea:	b157      	cbz	r7, 800da02 <ucdr_serialize_array_double+0x3a>
 800d9ec:	2500      	movs	r5, #0
 800d9ee:	e000      	b.n	800d9f2 <ucdr_serialize_array_double+0x2a>
 800d9f0:	7d21      	ldrb	r1, [r4, #20]
 800d9f2:	3501      	adds	r5, #1
 800d9f4:	4620      	mov	r0, r4
 800d9f6:	ecb6 0b02 	vldmia	r6!, {d0}
 800d9fa:	f001 f8e3 	bl	800ebc4 <ucdr_serialize_endian_double>
 800d9fe:	42af      	cmp	r7, r5
 800da00:	d1f6      	bne.n	800d9f0 <ucdr_serialize_array_double+0x28>
 800da02:	7da0      	ldrb	r0, [r4, #22]
 800da04:	f080 0001 	eor.w	r0, r0, #1
 800da08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da0c:	00ff      	lsls	r7, r7, #3
 800da0e:	4620      	mov	r0, r4
 800da10:	4639      	mov	r1, r7
 800da12:	f001 fb3d 	bl	800f090 <ucdr_check_buffer_available_for>
 800da16:	b9f8      	cbnz	r0, 800da58 <ucdr_serialize_array_double+0x90>
 800da18:	46b8      	mov	r8, r7
 800da1a:	e00c      	b.n	800da36 <ucdr_serialize_array_double+0x6e>
 800da1c:	462a      	mov	r2, r5
 800da1e:	4431      	add	r1, r6
 800da20:	68a0      	ldr	r0, [r4, #8]
 800da22:	eba8 0805 	sub.w	r8, r8, r5
 800da26:	f008 ff64 	bl	80168f2 <memcpy>
 800da2a:	68a2      	ldr	r2, [r4, #8]
 800da2c:	6923      	ldr	r3, [r4, #16]
 800da2e:	442a      	add	r2, r5
 800da30:	442b      	add	r3, r5
 800da32:	60a2      	str	r2, [r4, #8]
 800da34:	6123      	str	r3, [r4, #16]
 800da36:	4641      	mov	r1, r8
 800da38:	2208      	movs	r2, #8
 800da3a:	4620      	mov	r0, r4
 800da3c:	f001 fbb2 	bl	800f1a4 <ucdr_check_final_buffer_behavior_array>
 800da40:	eba7 0108 	sub.w	r1, r7, r8
 800da44:	4605      	mov	r5, r0
 800da46:	2800      	cmp	r0, #0
 800da48:	d1e8      	bne.n	800da1c <ucdr_serialize_array_double+0x54>
 800da4a:	2308      	movs	r3, #8
 800da4c:	7da0      	ldrb	r0, [r4, #22]
 800da4e:	7563      	strb	r3, [r4, #21]
 800da50:	f080 0001 	eor.w	r0, r0, #1
 800da54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da58:	463a      	mov	r2, r7
 800da5a:	4631      	mov	r1, r6
 800da5c:	68a0      	ldr	r0, [r4, #8]
 800da5e:	f008 ff48 	bl	80168f2 <memcpy>
 800da62:	68a2      	ldr	r2, [r4, #8]
 800da64:	6923      	ldr	r3, [r4, #16]
 800da66:	443a      	add	r2, r7
 800da68:	441f      	add	r7, r3
 800da6a:	60a2      	str	r2, [r4, #8]
 800da6c:	6127      	str	r7, [r4, #16]
 800da6e:	e7ec      	b.n	800da4a <ucdr_serialize_array_double+0x82>

0800da70 <ucdr_deserialize_array_double>:
 800da70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da74:	4604      	mov	r4, r0
 800da76:	460e      	mov	r6, r1
 800da78:	2108      	movs	r1, #8
 800da7a:	4617      	mov	r7, r2
 800da7c:	f001 fb68 	bl	800f150 <ucdr_buffer_alignment>
 800da80:	4601      	mov	r1, r0
 800da82:	4620      	mov	r0, r4
 800da84:	7d65      	ldrb	r5, [r4, #21]
 800da86:	f001 fbab 	bl	800f1e0 <ucdr_advance_buffer>
 800da8a:	7d21      	ldrb	r1, [r4, #20]
 800da8c:	7565      	strb	r5, [r4, #21]
 800da8e:	2901      	cmp	r1, #1
 800da90:	d010      	beq.n	800dab4 <ucdr_deserialize_array_double+0x44>
 800da92:	b157      	cbz	r7, 800daaa <ucdr_deserialize_array_double+0x3a>
 800da94:	2500      	movs	r5, #0
 800da96:	e000      	b.n	800da9a <ucdr_deserialize_array_double+0x2a>
 800da98:	7d21      	ldrb	r1, [r4, #20]
 800da9a:	3501      	adds	r5, #1
 800da9c:	4632      	mov	r2, r6
 800da9e:	4620      	mov	r0, r4
 800daa0:	3608      	adds	r6, #8
 800daa2:	f001 fa27 	bl	800eef4 <ucdr_deserialize_endian_double>
 800daa6:	42af      	cmp	r7, r5
 800daa8:	d1f6      	bne.n	800da98 <ucdr_deserialize_array_double+0x28>
 800daaa:	7da0      	ldrb	r0, [r4, #22]
 800daac:	f080 0001 	eor.w	r0, r0, #1
 800dab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dab4:	00ff      	lsls	r7, r7, #3
 800dab6:	4620      	mov	r0, r4
 800dab8:	4639      	mov	r1, r7
 800daba:	f001 fae9 	bl	800f090 <ucdr_check_buffer_available_for>
 800dabe:	b9f8      	cbnz	r0, 800db00 <ucdr_deserialize_array_double+0x90>
 800dac0:	46b8      	mov	r8, r7
 800dac2:	e00c      	b.n	800dade <ucdr_deserialize_array_double+0x6e>
 800dac4:	18f0      	adds	r0, r6, r3
 800dac6:	462a      	mov	r2, r5
 800dac8:	68a1      	ldr	r1, [r4, #8]
 800daca:	eba8 0805 	sub.w	r8, r8, r5
 800dace:	f008 ff10 	bl	80168f2 <memcpy>
 800dad2:	68a2      	ldr	r2, [r4, #8]
 800dad4:	6923      	ldr	r3, [r4, #16]
 800dad6:	442a      	add	r2, r5
 800dad8:	442b      	add	r3, r5
 800dada:	60a2      	str	r2, [r4, #8]
 800dadc:	6123      	str	r3, [r4, #16]
 800dade:	4641      	mov	r1, r8
 800dae0:	2208      	movs	r2, #8
 800dae2:	4620      	mov	r0, r4
 800dae4:	f001 fb5e 	bl	800f1a4 <ucdr_check_final_buffer_behavior_array>
 800dae8:	eba7 0308 	sub.w	r3, r7, r8
 800daec:	4605      	mov	r5, r0
 800daee:	2800      	cmp	r0, #0
 800daf0:	d1e8      	bne.n	800dac4 <ucdr_deserialize_array_double+0x54>
 800daf2:	2308      	movs	r3, #8
 800daf4:	7da0      	ldrb	r0, [r4, #22]
 800daf6:	7563      	strb	r3, [r4, #21]
 800daf8:	f080 0001 	eor.w	r0, r0, #1
 800dafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db00:	463a      	mov	r2, r7
 800db02:	68a1      	ldr	r1, [r4, #8]
 800db04:	4630      	mov	r0, r6
 800db06:	f008 fef4 	bl	80168f2 <memcpy>
 800db0a:	68a2      	ldr	r2, [r4, #8]
 800db0c:	6923      	ldr	r3, [r4, #16]
 800db0e:	443a      	add	r2, r7
 800db10:	441f      	add	r7, r3
 800db12:	60a2      	str	r2, [r4, #8]
 800db14:	6127      	str	r7, [r4, #16]
 800db16:	e7ec      	b.n	800daf2 <ucdr_deserialize_array_double+0x82>

0800db18 <ucdr_serialize_bool>:
 800db18:	b538      	push	{r3, r4, r5, lr}
 800db1a:	460d      	mov	r5, r1
 800db1c:	2101      	movs	r1, #1
 800db1e:	4604      	mov	r4, r0
 800db20:	f001 fac2 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800db24:	b148      	cbz	r0, 800db3a <ucdr_serialize_bool+0x22>
 800db26:	68a3      	ldr	r3, [r4, #8]
 800db28:	2101      	movs	r1, #1
 800db2a:	701d      	strb	r5, [r3, #0]
 800db2c:	68a2      	ldr	r2, [r4, #8]
 800db2e:	6923      	ldr	r3, [r4, #16]
 800db30:	440a      	add	r2, r1
 800db32:	7561      	strb	r1, [r4, #21]
 800db34:	440b      	add	r3, r1
 800db36:	60a2      	str	r2, [r4, #8]
 800db38:	6123      	str	r3, [r4, #16]
 800db3a:	7da0      	ldrb	r0, [r4, #22]
 800db3c:	f080 0001 	eor.w	r0, r0, #1
 800db40:	bd38      	pop	{r3, r4, r5, pc}
 800db42:	bf00      	nop

0800db44 <ucdr_deserialize_bool>:
 800db44:	b538      	push	{r3, r4, r5, lr}
 800db46:	460d      	mov	r5, r1
 800db48:	2101      	movs	r1, #1
 800db4a:	4604      	mov	r4, r0
 800db4c:	f001 faac 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800db50:	b160      	cbz	r0, 800db6c <ucdr_deserialize_bool+0x28>
 800db52:	68a2      	ldr	r2, [r4, #8]
 800db54:	2101      	movs	r1, #1
 800db56:	6923      	ldr	r3, [r4, #16]
 800db58:	f812 0b01 	ldrb.w	r0, [r2], #1
 800db5c:	440b      	add	r3, r1
 800db5e:	3800      	subs	r0, #0
 800db60:	bf18      	it	ne
 800db62:	2001      	movne	r0, #1
 800db64:	7028      	strb	r0, [r5, #0]
 800db66:	60a2      	str	r2, [r4, #8]
 800db68:	6123      	str	r3, [r4, #16]
 800db6a:	7561      	strb	r1, [r4, #21]
 800db6c:	7da0      	ldrb	r0, [r4, #22]
 800db6e:	f080 0001 	eor.w	r0, r0, #1
 800db72:	bd38      	pop	{r3, r4, r5, pc}

0800db74 <ucdr_serialize_uint8_t>:
 800db74:	b538      	push	{r3, r4, r5, lr}
 800db76:	460d      	mov	r5, r1
 800db78:	2101      	movs	r1, #1
 800db7a:	4604      	mov	r4, r0
 800db7c:	f001 fa94 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800db80:	b148      	cbz	r0, 800db96 <ucdr_serialize_uint8_t+0x22>
 800db82:	68a3      	ldr	r3, [r4, #8]
 800db84:	2101      	movs	r1, #1
 800db86:	701d      	strb	r5, [r3, #0]
 800db88:	68a2      	ldr	r2, [r4, #8]
 800db8a:	6923      	ldr	r3, [r4, #16]
 800db8c:	440a      	add	r2, r1
 800db8e:	7561      	strb	r1, [r4, #21]
 800db90:	440b      	add	r3, r1
 800db92:	60a2      	str	r2, [r4, #8]
 800db94:	6123      	str	r3, [r4, #16]
 800db96:	7da0      	ldrb	r0, [r4, #22]
 800db98:	f080 0001 	eor.w	r0, r0, #1
 800db9c:	bd38      	pop	{r3, r4, r5, pc}
 800db9e:	bf00      	nop

0800dba0 <ucdr_deserialize_uint8_t>:
 800dba0:	b538      	push	{r3, r4, r5, lr}
 800dba2:	460d      	mov	r5, r1
 800dba4:	2101      	movs	r1, #1
 800dba6:	4604      	mov	r4, r0
 800dba8:	f001 fa7e 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800dbac:	b150      	cbz	r0, 800dbc4 <ucdr_deserialize_uint8_t+0x24>
 800dbae:	68a3      	ldr	r3, [r4, #8]
 800dbb0:	2101      	movs	r1, #1
 800dbb2:	781b      	ldrb	r3, [r3, #0]
 800dbb4:	702b      	strb	r3, [r5, #0]
 800dbb6:	68a2      	ldr	r2, [r4, #8]
 800dbb8:	6923      	ldr	r3, [r4, #16]
 800dbba:	440a      	add	r2, r1
 800dbbc:	7561      	strb	r1, [r4, #21]
 800dbbe:	440b      	add	r3, r1
 800dbc0:	60a2      	str	r2, [r4, #8]
 800dbc2:	6123      	str	r3, [r4, #16]
 800dbc4:	7da0      	ldrb	r0, [r4, #22]
 800dbc6:	f080 0001 	eor.w	r0, r0, #1
 800dbca:	bd38      	pop	{r3, r4, r5, pc}

0800dbcc <ucdr_serialize_uint16_t>:
 800dbcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbd0:	460b      	mov	r3, r1
 800dbd2:	b082      	sub	sp, #8
 800dbd4:	4604      	mov	r4, r0
 800dbd6:	2102      	movs	r1, #2
 800dbd8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800dbdc:	f001 fab8 	bl	800f150 <ucdr_buffer_alignment>
 800dbe0:	4601      	mov	r1, r0
 800dbe2:	4620      	mov	r0, r4
 800dbe4:	7d67      	ldrb	r7, [r4, #21]
 800dbe6:	f001 fafb 	bl	800f1e0 <ucdr_advance_buffer>
 800dbea:	2102      	movs	r1, #2
 800dbec:	4620      	mov	r0, r4
 800dbee:	f001 fa4f 	bl	800f090 <ucdr_check_buffer_available_for>
 800dbf2:	bb78      	cbnz	r0, 800dc54 <ucdr_serialize_uint16_t+0x88>
 800dbf4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800dbf8:	42ab      	cmp	r3, r5
 800dbfa:	d926      	bls.n	800dc4a <ucdr_serialize_uint16_t+0x7e>
 800dbfc:	1b5e      	subs	r6, r3, r5
 800dbfe:	60a3      	str	r3, [r4, #8]
 800dc00:	6923      	ldr	r3, [r4, #16]
 800dc02:	4620      	mov	r0, r4
 800dc04:	f1c6 0802 	rsb	r8, r6, #2
 800dc08:	4433      	add	r3, r6
 800dc0a:	4641      	mov	r1, r8
 800dc0c:	6123      	str	r3, [r4, #16]
 800dc0e:	f001 fa4b 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800dc12:	2800      	cmp	r0, #0
 800dc14:	d03b      	beq.n	800dc8e <ucdr_serialize_uint16_t+0xc2>
 800dc16:	7d23      	ldrb	r3, [r4, #20]
 800dc18:	2b01      	cmp	r3, #1
 800dc1a:	d04a      	beq.n	800dcb2 <ucdr_serialize_uint16_t+0xe6>
 800dc1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dc20:	702b      	strb	r3, [r5, #0]
 800dc22:	2e00      	cmp	r6, #0
 800dc24:	d040      	beq.n	800dca8 <ucdr_serialize_uint16_t+0xdc>
 800dc26:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dc2a:	706b      	strb	r3, [r5, #1]
 800dc2c:	6923      	ldr	r3, [r4, #16]
 800dc2e:	2102      	movs	r1, #2
 800dc30:	68a2      	ldr	r2, [r4, #8]
 800dc32:	3302      	adds	r3, #2
 800dc34:	7da0      	ldrb	r0, [r4, #22]
 800dc36:	4442      	add	r2, r8
 800dc38:	7561      	strb	r1, [r4, #21]
 800dc3a:	1b9e      	subs	r6, r3, r6
 800dc3c:	f080 0001 	eor.w	r0, r0, #1
 800dc40:	60a2      	str	r2, [r4, #8]
 800dc42:	6126      	str	r6, [r4, #16]
 800dc44:	b002      	add	sp, #8
 800dc46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc4a:	2102      	movs	r1, #2
 800dc4c:	4620      	mov	r0, r4
 800dc4e:	f001 fa2b 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800dc52:	b190      	cbz	r0, 800dc7a <ucdr_serialize_uint16_t+0xae>
 800dc54:	7d23      	ldrb	r3, [r4, #20]
 800dc56:	2b01      	cmp	r3, #1
 800dc58:	68a3      	ldr	r3, [r4, #8]
 800dc5a:	d014      	beq.n	800dc86 <ucdr_serialize_uint16_t+0xba>
 800dc5c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800dc60:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dc64:	7019      	strb	r1, [r3, #0]
 800dc66:	68a3      	ldr	r3, [r4, #8]
 800dc68:	705a      	strb	r2, [r3, #1]
 800dc6a:	2102      	movs	r1, #2
 800dc6c:	68a2      	ldr	r2, [r4, #8]
 800dc6e:	6923      	ldr	r3, [r4, #16]
 800dc70:	440a      	add	r2, r1
 800dc72:	7561      	strb	r1, [r4, #21]
 800dc74:	440b      	add	r3, r1
 800dc76:	60a2      	str	r2, [r4, #8]
 800dc78:	6123      	str	r3, [r4, #16]
 800dc7a:	7da0      	ldrb	r0, [r4, #22]
 800dc7c:	f080 0001 	eor.w	r0, r0, #1
 800dc80:	b002      	add	sp, #8
 800dc82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc86:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800dc8a:	801a      	strh	r2, [r3, #0]
 800dc8c:	e7ed      	b.n	800dc6a <ucdr_serialize_uint16_t+0x9e>
 800dc8e:	68a2      	ldr	r2, [r4, #8]
 800dc90:	6923      	ldr	r3, [r4, #16]
 800dc92:	7da0      	ldrb	r0, [r4, #22]
 800dc94:	1b92      	subs	r2, r2, r6
 800dc96:	1b9b      	subs	r3, r3, r6
 800dc98:	7567      	strb	r7, [r4, #21]
 800dc9a:	f080 0001 	eor.w	r0, r0, #1
 800dc9e:	60a2      	str	r2, [r4, #8]
 800dca0:	6123      	str	r3, [r4, #16]
 800dca2:	b002      	add	sp, #8
 800dca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dca8:	68a3      	ldr	r3, [r4, #8]
 800dcaa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dcae:	701a      	strb	r2, [r3, #0]
 800dcb0:	e7bc      	b.n	800dc2c <ucdr_serialize_uint16_t+0x60>
 800dcb2:	4628      	mov	r0, r5
 800dcb4:	f10d 0506 	add.w	r5, sp, #6
 800dcb8:	4632      	mov	r2, r6
 800dcba:	4629      	mov	r1, r5
 800dcbc:	f008 fe19 	bl	80168f2 <memcpy>
 800dcc0:	4642      	mov	r2, r8
 800dcc2:	19a9      	adds	r1, r5, r6
 800dcc4:	68a0      	ldr	r0, [r4, #8]
 800dcc6:	f008 fe14 	bl	80168f2 <memcpy>
 800dcca:	e7af      	b.n	800dc2c <ucdr_serialize_uint16_t+0x60>

0800dccc <ucdr_serialize_endian_uint16_t>:
 800dccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dcd0:	4604      	mov	r4, r0
 800dcd2:	b083      	sub	sp, #12
 800dcd4:	460d      	mov	r5, r1
 800dcd6:	2102      	movs	r1, #2
 800dcd8:	f8ad 2006 	strh.w	r2, [sp, #6]
 800dcdc:	f001 fa38 	bl	800f150 <ucdr_buffer_alignment>
 800dce0:	4601      	mov	r1, r0
 800dce2:	4620      	mov	r0, r4
 800dce4:	f894 8015 	ldrb.w	r8, [r4, #21]
 800dce8:	f001 fa7a 	bl	800f1e0 <ucdr_advance_buffer>
 800dcec:	2102      	movs	r1, #2
 800dcee:	4620      	mov	r0, r4
 800dcf0:	f001 f9ce 	bl	800f090 <ucdr_check_buffer_available_for>
 800dcf4:	bb70      	cbnz	r0, 800dd54 <ucdr_serialize_endian_uint16_t+0x88>
 800dcf6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800dcfa:	42be      	cmp	r6, r7
 800dcfc:	d925      	bls.n	800dd4a <ucdr_serialize_endian_uint16_t+0x7e>
 800dcfe:	6923      	ldr	r3, [r4, #16]
 800dd00:	4620      	mov	r0, r4
 800dd02:	60a6      	str	r6, [r4, #8]
 800dd04:	1bf6      	subs	r6, r6, r7
 800dd06:	4433      	add	r3, r6
 800dd08:	f1c6 0902 	rsb	r9, r6, #2
 800dd0c:	6123      	str	r3, [r4, #16]
 800dd0e:	4649      	mov	r1, r9
 800dd10:	f001 f9ca 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800dd14:	2800      	cmp	r0, #0
 800dd16:	d039      	beq.n	800dd8c <ucdr_serialize_endian_uint16_t+0xc0>
 800dd18:	2d01      	cmp	r5, #1
 800dd1a:	d04a      	beq.n	800ddb2 <ucdr_serialize_endian_uint16_t+0xe6>
 800dd1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dd20:	703b      	strb	r3, [r7, #0]
 800dd22:	2e00      	cmp	r6, #0
 800dd24:	d040      	beq.n	800dda8 <ucdr_serialize_endian_uint16_t+0xdc>
 800dd26:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dd2a:	707b      	strb	r3, [r7, #1]
 800dd2c:	6923      	ldr	r3, [r4, #16]
 800dd2e:	2102      	movs	r1, #2
 800dd30:	68a2      	ldr	r2, [r4, #8]
 800dd32:	7da0      	ldrb	r0, [r4, #22]
 800dd34:	3302      	adds	r3, #2
 800dd36:	444a      	add	r2, r9
 800dd38:	7561      	strb	r1, [r4, #21]
 800dd3a:	1b9b      	subs	r3, r3, r6
 800dd3c:	f080 0001 	eor.w	r0, r0, #1
 800dd40:	60a2      	str	r2, [r4, #8]
 800dd42:	6123      	str	r3, [r4, #16]
 800dd44:	b003      	add	sp, #12
 800dd46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd4a:	2102      	movs	r1, #2
 800dd4c:	4620      	mov	r0, r4
 800dd4e:	f001 f9ab 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800dd52:	b188      	cbz	r0, 800dd78 <ucdr_serialize_endian_uint16_t+0xac>
 800dd54:	2d01      	cmp	r5, #1
 800dd56:	68a3      	ldr	r3, [r4, #8]
 800dd58:	d014      	beq.n	800dd84 <ucdr_serialize_endian_uint16_t+0xb8>
 800dd5a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800dd5e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dd62:	7019      	strb	r1, [r3, #0]
 800dd64:	68a3      	ldr	r3, [r4, #8]
 800dd66:	705a      	strb	r2, [r3, #1]
 800dd68:	2102      	movs	r1, #2
 800dd6a:	68a2      	ldr	r2, [r4, #8]
 800dd6c:	6923      	ldr	r3, [r4, #16]
 800dd6e:	440a      	add	r2, r1
 800dd70:	7561      	strb	r1, [r4, #21]
 800dd72:	440b      	add	r3, r1
 800dd74:	60a2      	str	r2, [r4, #8]
 800dd76:	6123      	str	r3, [r4, #16]
 800dd78:	7da0      	ldrb	r0, [r4, #22]
 800dd7a:	f080 0001 	eor.w	r0, r0, #1
 800dd7e:	b003      	add	sp, #12
 800dd80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd84:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800dd88:	801a      	strh	r2, [r3, #0]
 800dd8a:	e7ed      	b.n	800dd68 <ucdr_serialize_endian_uint16_t+0x9c>
 800dd8c:	68a2      	ldr	r2, [r4, #8]
 800dd8e:	6923      	ldr	r3, [r4, #16]
 800dd90:	7da0      	ldrb	r0, [r4, #22]
 800dd92:	1b92      	subs	r2, r2, r6
 800dd94:	1b9b      	subs	r3, r3, r6
 800dd96:	f884 8015 	strb.w	r8, [r4, #21]
 800dd9a:	f080 0001 	eor.w	r0, r0, #1
 800dd9e:	60a2      	str	r2, [r4, #8]
 800dda0:	6123      	str	r3, [r4, #16]
 800dda2:	b003      	add	sp, #12
 800dda4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dda8:	68a3      	ldr	r3, [r4, #8]
 800ddaa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ddae:	701a      	strb	r2, [r3, #0]
 800ddb0:	e7bc      	b.n	800dd2c <ucdr_serialize_endian_uint16_t+0x60>
 800ddb2:	f10d 0506 	add.w	r5, sp, #6
 800ddb6:	4632      	mov	r2, r6
 800ddb8:	4638      	mov	r0, r7
 800ddba:	4629      	mov	r1, r5
 800ddbc:	f008 fd99 	bl	80168f2 <memcpy>
 800ddc0:	464a      	mov	r2, r9
 800ddc2:	19a9      	adds	r1, r5, r6
 800ddc4:	68a0      	ldr	r0, [r4, #8]
 800ddc6:	f008 fd94 	bl	80168f2 <memcpy>
 800ddca:	e7af      	b.n	800dd2c <ucdr_serialize_endian_uint16_t+0x60>

0800ddcc <ucdr_deserialize_uint16_t>:
 800ddcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddd0:	4604      	mov	r4, r0
 800ddd2:	460d      	mov	r5, r1
 800ddd4:	2102      	movs	r1, #2
 800ddd6:	f001 f9bb 	bl	800f150 <ucdr_buffer_alignment>
 800ddda:	4601      	mov	r1, r0
 800dddc:	4620      	mov	r0, r4
 800ddde:	f894 8015 	ldrb.w	r8, [r4, #21]
 800dde2:	f001 f9fd 	bl	800f1e0 <ucdr_advance_buffer>
 800dde6:	2102      	movs	r1, #2
 800dde8:	4620      	mov	r0, r4
 800ddea:	f001 f951 	bl	800f090 <ucdr_check_buffer_available_for>
 800ddee:	bb60      	cbnz	r0, 800de4a <ucdr_deserialize_uint16_t+0x7e>
 800ddf0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ddf4:	42be      	cmp	r6, r7
 800ddf6:	d923      	bls.n	800de40 <ucdr_deserialize_uint16_t+0x74>
 800ddf8:	6923      	ldr	r3, [r4, #16]
 800ddfa:	4620      	mov	r0, r4
 800ddfc:	60a6      	str	r6, [r4, #8]
 800ddfe:	1bf6      	subs	r6, r6, r7
 800de00:	4433      	add	r3, r6
 800de02:	f1c6 0902 	rsb	r9, r6, #2
 800de06:	6123      	str	r3, [r4, #16]
 800de08:	4649      	mov	r1, r9
 800de0a:	f001 f94d 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800de0e:	2800      	cmp	r0, #0
 800de10:	d034      	beq.n	800de7c <ucdr_deserialize_uint16_t+0xb0>
 800de12:	7d23      	ldrb	r3, [r4, #20]
 800de14:	2b01      	cmp	r3, #1
 800de16:	d042      	beq.n	800de9e <ucdr_deserialize_uint16_t+0xd2>
 800de18:	787b      	ldrb	r3, [r7, #1]
 800de1a:	702b      	strb	r3, [r5, #0]
 800de1c:	2e00      	cmp	r6, #0
 800de1e:	d03a      	beq.n	800de96 <ucdr_deserialize_uint16_t+0xca>
 800de20:	783b      	ldrb	r3, [r7, #0]
 800de22:	706b      	strb	r3, [r5, #1]
 800de24:	6923      	ldr	r3, [r4, #16]
 800de26:	2102      	movs	r1, #2
 800de28:	68a2      	ldr	r2, [r4, #8]
 800de2a:	3302      	adds	r3, #2
 800de2c:	7da0      	ldrb	r0, [r4, #22]
 800de2e:	444a      	add	r2, r9
 800de30:	7561      	strb	r1, [r4, #21]
 800de32:	1b9b      	subs	r3, r3, r6
 800de34:	f080 0001 	eor.w	r0, r0, #1
 800de38:	60a2      	str	r2, [r4, #8]
 800de3a:	6123      	str	r3, [r4, #16]
 800de3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de40:	2102      	movs	r1, #2
 800de42:	4620      	mov	r0, r4
 800de44:	f001 f930 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800de48:	b180      	cbz	r0, 800de6c <ucdr_deserialize_uint16_t+0xa0>
 800de4a:	7d23      	ldrb	r3, [r4, #20]
 800de4c:	2b01      	cmp	r3, #1
 800de4e:	68a3      	ldr	r3, [r4, #8]
 800de50:	d011      	beq.n	800de76 <ucdr_deserialize_uint16_t+0xaa>
 800de52:	785b      	ldrb	r3, [r3, #1]
 800de54:	702b      	strb	r3, [r5, #0]
 800de56:	68a3      	ldr	r3, [r4, #8]
 800de58:	781b      	ldrb	r3, [r3, #0]
 800de5a:	706b      	strb	r3, [r5, #1]
 800de5c:	2102      	movs	r1, #2
 800de5e:	68a2      	ldr	r2, [r4, #8]
 800de60:	6923      	ldr	r3, [r4, #16]
 800de62:	440a      	add	r2, r1
 800de64:	7561      	strb	r1, [r4, #21]
 800de66:	440b      	add	r3, r1
 800de68:	60a2      	str	r2, [r4, #8]
 800de6a:	6123      	str	r3, [r4, #16]
 800de6c:	7da0      	ldrb	r0, [r4, #22]
 800de6e:	f080 0001 	eor.w	r0, r0, #1
 800de72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de76:	881b      	ldrh	r3, [r3, #0]
 800de78:	802b      	strh	r3, [r5, #0]
 800de7a:	e7ef      	b.n	800de5c <ucdr_deserialize_uint16_t+0x90>
 800de7c:	68a2      	ldr	r2, [r4, #8]
 800de7e:	6923      	ldr	r3, [r4, #16]
 800de80:	1b92      	subs	r2, r2, r6
 800de82:	7da0      	ldrb	r0, [r4, #22]
 800de84:	1b9b      	subs	r3, r3, r6
 800de86:	f884 8015 	strb.w	r8, [r4, #21]
 800de8a:	f080 0001 	eor.w	r0, r0, #1
 800de8e:	60a2      	str	r2, [r4, #8]
 800de90:	6123      	str	r3, [r4, #16]
 800de92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de96:	68a3      	ldr	r3, [r4, #8]
 800de98:	781b      	ldrb	r3, [r3, #0]
 800de9a:	706b      	strb	r3, [r5, #1]
 800de9c:	e7c2      	b.n	800de24 <ucdr_deserialize_uint16_t+0x58>
 800de9e:	4639      	mov	r1, r7
 800dea0:	4632      	mov	r2, r6
 800dea2:	4628      	mov	r0, r5
 800dea4:	f008 fd25 	bl	80168f2 <memcpy>
 800dea8:	464a      	mov	r2, r9
 800deaa:	19a8      	adds	r0, r5, r6
 800deac:	68a1      	ldr	r1, [r4, #8]
 800deae:	f008 fd20 	bl	80168f2 <memcpy>
 800deb2:	e7b7      	b.n	800de24 <ucdr_deserialize_uint16_t+0x58>

0800deb4 <ucdr_deserialize_endian_uint16_t>:
 800deb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800deb8:	4604      	mov	r4, r0
 800deba:	460e      	mov	r6, r1
 800debc:	2102      	movs	r1, #2
 800debe:	4615      	mov	r5, r2
 800dec0:	f001 f946 	bl	800f150 <ucdr_buffer_alignment>
 800dec4:	4601      	mov	r1, r0
 800dec6:	4620      	mov	r0, r4
 800dec8:	f894 8015 	ldrb.w	r8, [r4, #21]
 800decc:	f001 f988 	bl	800f1e0 <ucdr_advance_buffer>
 800ded0:	2102      	movs	r1, #2
 800ded2:	4620      	mov	r0, r4
 800ded4:	f001 f8dc 	bl	800f090 <ucdr_check_buffer_available_for>
 800ded8:	bb70      	cbnz	r0, 800df38 <ucdr_deserialize_endian_uint16_t+0x84>
 800deda:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 800dede:	454f      	cmp	r7, r9
 800dee0:	d925      	bls.n	800df2e <ucdr_deserialize_endian_uint16_t+0x7a>
 800dee2:	6923      	ldr	r3, [r4, #16]
 800dee4:	4620      	mov	r0, r4
 800dee6:	60a7      	str	r7, [r4, #8]
 800dee8:	eba7 0709 	sub.w	r7, r7, r9
 800deec:	443b      	add	r3, r7
 800deee:	f1c7 0a02 	rsb	sl, r7, #2
 800def2:	6123      	str	r3, [r4, #16]
 800def4:	4651      	mov	r1, sl
 800def6:	f001 f8d7 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800defa:	2800      	cmp	r0, #0
 800defc:	d034      	beq.n	800df68 <ucdr_deserialize_endian_uint16_t+0xb4>
 800defe:	2e01      	cmp	r6, #1
 800df00:	d043      	beq.n	800df8a <ucdr_deserialize_endian_uint16_t+0xd6>
 800df02:	f899 3001 	ldrb.w	r3, [r9, #1]
 800df06:	702b      	strb	r3, [r5, #0]
 800df08:	2f00      	cmp	r7, #0
 800df0a:	d03a      	beq.n	800df82 <ucdr_deserialize_endian_uint16_t+0xce>
 800df0c:	f899 3000 	ldrb.w	r3, [r9]
 800df10:	706b      	strb	r3, [r5, #1]
 800df12:	6923      	ldr	r3, [r4, #16]
 800df14:	2102      	movs	r1, #2
 800df16:	68a2      	ldr	r2, [r4, #8]
 800df18:	3302      	adds	r3, #2
 800df1a:	7da0      	ldrb	r0, [r4, #22]
 800df1c:	4452      	add	r2, sl
 800df1e:	7561      	strb	r1, [r4, #21]
 800df20:	1bdb      	subs	r3, r3, r7
 800df22:	f080 0001 	eor.w	r0, r0, #1
 800df26:	60a2      	str	r2, [r4, #8]
 800df28:	6123      	str	r3, [r4, #16]
 800df2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df2e:	2102      	movs	r1, #2
 800df30:	4620      	mov	r0, r4
 800df32:	f001 f8b9 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800df36:	b178      	cbz	r0, 800df58 <ucdr_deserialize_endian_uint16_t+0xa4>
 800df38:	2e01      	cmp	r6, #1
 800df3a:	68a3      	ldr	r3, [r4, #8]
 800df3c:	d011      	beq.n	800df62 <ucdr_deserialize_endian_uint16_t+0xae>
 800df3e:	785b      	ldrb	r3, [r3, #1]
 800df40:	702b      	strb	r3, [r5, #0]
 800df42:	68a3      	ldr	r3, [r4, #8]
 800df44:	781b      	ldrb	r3, [r3, #0]
 800df46:	706b      	strb	r3, [r5, #1]
 800df48:	2102      	movs	r1, #2
 800df4a:	68a2      	ldr	r2, [r4, #8]
 800df4c:	6923      	ldr	r3, [r4, #16]
 800df4e:	440a      	add	r2, r1
 800df50:	7561      	strb	r1, [r4, #21]
 800df52:	440b      	add	r3, r1
 800df54:	60a2      	str	r2, [r4, #8]
 800df56:	6123      	str	r3, [r4, #16]
 800df58:	7da0      	ldrb	r0, [r4, #22]
 800df5a:	f080 0001 	eor.w	r0, r0, #1
 800df5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df62:	881b      	ldrh	r3, [r3, #0]
 800df64:	802b      	strh	r3, [r5, #0]
 800df66:	e7ef      	b.n	800df48 <ucdr_deserialize_endian_uint16_t+0x94>
 800df68:	68a2      	ldr	r2, [r4, #8]
 800df6a:	6923      	ldr	r3, [r4, #16]
 800df6c:	1bd2      	subs	r2, r2, r7
 800df6e:	7da0      	ldrb	r0, [r4, #22]
 800df70:	1bdb      	subs	r3, r3, r7
 800df72:	f884 8015 	strb.w	r8, [r4, #21]
 800df76:	f080 0001 	eor.w	r0, r0, #1
 800df7a:	60a2      	str	r2, [r4, #8]
 800df7c:	6123      	str	r3, [r4, #16]
 800df7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df82:	68a3      	ldr	r3, [r4, #8]
 800df84:	781b      	ldrb	r3, [r3, #0]
 800df86:	706b      	strb	r3, [r5, #1]
 800df88:	e7c3      	b.n	800df12 <ucdr_deserialize_endian_uint16_t+0x5e>
 800df8a:	4649      	mov	r1, r9
 800df8c:	463a      	mov	r2, r7
 800df8e:	4628      	mov	r0, r5
 800df90:	f008 fcaf 	bl	80168f2 <memcpy>
 800df94:	4652      	mov	r2, sl
 800df96:	19e8      	adds	r0, r5, r7
 800df98:	68a1      	ldr	r1, [r4, #8]
 800df9a:	f008 fcaa 	bl	80168f2 <memcpy>
 800df9e:	e7b8      	b.n	800df12 <ucdr_deserialize_endian_uint16_t+0x5e>

0800dfa0 <ucdr_serialize_uint32_t>:
 800dfa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfa4:	b082      	sub	sp, #8
 800dfa6:	4604      	mov	r4, r0
 800dfa8:	9101      	str	r1, [sp, #4]
 800dfaa:	2104      	movs	r1, #4
 800dfac:	f001 f8d0 	bl	800f150 <ucdr_buffer_alignment>
 800dfb0:	4601      	mov	r1, r0
 800dfb2:	4620      	mov	r0, r4
 800dfb4:	7d67      	ldrb	r7, [r4, #21]
 800dfb6:	f001 f913 	bl	800f1e0 <ucdr_advance_buffer>
 800dfba:	2104      	movs	r1, #4
 800dfbc:	4620      	mov	r0, r4
 800dfbe:	f001 f867 	bl	800f090 <ucdr_check_buffer_available_for>
 800dfc2:	2800      	cmp	r0, #0
 800dfc4:	d139      	bne.n	800e03a <ucdr_serialize_uint32_t+0x9a>
 800dfc6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800dfca:	42ab      	cmp	r3, r5
 800dfcc:	d930      	bls.n	800e030 <ucdr_serialize_uint32_t+0x90>
 800dfce:	1b5e      	subs	r6, r3, r5
 800dfd0:	60a3      	str	r3, [r4, #8]
 800dfd2:	6923      	ldr	r3, [r4, #16]
 800dfd4:	4620      	mov	r0, r4
 800dfd6:	f1c6 0804 	rsb	r8, r6, #4
 800dfda:	4433      	add	r3, r6
 800dfdc:	4641      	mov	r1, r8
 800dfde:	6123      	str	r3, [r4, #16]
 800dfe0:	f001 f862 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800dfe4:	2800      	cmp	r0, #0
 800dfe6:	d04c      	beq.n	800e082 <ucdr_serialize_uint32_t+0xe2>
 800dfe8:	7d23      	ldrb	r3, [r4, #20]
 800dfea:	2b01      	cmp	r3, #1
 800dfec:	d063      	beq.n	800e0b6 <ucdr_serialize_uint32_t+0x116>
 800dfee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dff2:	702b      	strb	r3, [r5, #0]
 800dff4:	2e00      	cmp	r6, #0
 800dff6:	d051      	beq.n	800e09c <ucdr_serialize_uint32_t+0xfc>
 800dff8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dffc:	2e01      	cmp	r6, #1
 800dffe:	706b      	strb	r3, [r5, #1]
 800e000:	d050      	beq.n	800e0a4 <ucdr_serialize_uint32_t+0x104>
 800e002:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e006:	2e02      	cmp	r6, #2
 800e008:	70ab      	strb	r3, [r5, #2]
 800e00a:	d04f      	beq.n	800e0ac <ucdr_serialize_uint32_t+0x10c>
 800e00c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e010:	70eb      	strb	r3, [r5, #3]
 800e012:	6923      	ldr	r3, [r4, #16]
 800e014:	2104      	movs	r1, #4
 800e016:	68a2      	ldr	r2, [r4, #8]
 800e018:	3304      	adds	r3, #4
 800e01a:	7da0      	ldrb	r0, [r4, #22]
 800e01c:	4442      	add	r2, r8
 800e01e:	7561      	strb	r1, [r4, #21]
 800e020:	1b9e      	subs	r6, r3, r6
 800e022:	f080 0001 	eor.w	r0, r0, #1
 800e026:	60a2      	str	r2, [r4, #8]
 800e028:	6126      	str	r6, [r4, #16]
 800e02a:	b002      	add	sp, #8
 800e02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e030:	2104      	movs	r1, #4
 800e032:	4620      	mov	r0, r4
 800e034:	f001 f838 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800e038:	b1d0      	cbz	r0, 800e070 <ucdr_serialize_uint32_t+0xd0>
 800e03a:	7d23      	ldrb	r3, [r4, #20]
 800e03c:	2b01      	cmp	r3, #1
 800e03e:	68a3      	ldr	r3, [r4, #8]
 800e040:	d01c      	beq.n	800e07c <ucdr_serialize_uint32_t+0xdc>
 800e042:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800e046:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e04a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800e04e:	7018      	strb	r0, [r3, #0]
 800e050:	68a3      	ldr	r3, [r4, #8]
 800e052:	705a      	strb	r2, [r3, #1]
 800e054:	68a3      	ldr	r3, [r4, #8]
 800e056:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e05a:	7099      	strb	r1, [r3, #2]
 800e05c:	68a3      	ldr	r3, [r4, #8]
 800e05e:	70da      	strb	r2, [r3, #3]
 800e060:	2104      	movs	r1, #4
 800e062:	68a2      	ldr	r2, [r4, #8]
 800e064:	6923      	ldr	r3, [r4, #16]
 800e066:	440a      	add	r2, r1
 800e068:	7561      	strb	r1, [r4, #21]
 800e06a:	440b      	add	r3, r1
 800e06c:	60a2      	str	r2, [r4, #8]
 800e06e:	6123      	str	r3, [r4, #16]
 800e070:	7da0      	ldrb	r0, [r4, #22]
 800e072:	f080 0001 	eor.w	r0, r0, #1
 800e076:	b002      	add	sp, #8
 800e078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e07c:	9a01      	ldr	r2, [sp, #4]
 800e07e:	601a      	str	r2, [r3, #0]
 800e080:	e7ee      	b.n	800e060 <ucdr_serialize_uint32_t+0xc0>
 800e082:	68a2      	ldr	r2, [r4, #8]
 800e084:	6923      	ldr	r3, [r4, #16]
 800e086:	7da0      	ldrb	r0, [r4, #22]
 800e088:	1b92      	subs	r2, r2, r6
 800e08a:	1b9b      	subs	r3, r3, r6
 800e08c:	7567      	strb	r7, [r4, #21]
 800e08e:	f080 0001 	eor.w	r0, r0, #1
 800e092:	60a2      	str	r2, [r4, #8]
 800e094:	6123      	str	r3, [r4, #16]
 800e096:	b002      	add	sp, #8
 800e098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e09c:	68a3      	ldr	r3, [r4, #8]
 800e09e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e0a2:	701a      	strb	r2, [r3, #0]
 800e0a4:	68a3      	ldr	r3, [r4, #8]
 800e0a6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e0aa:	701a      	strb	r2, [r3, #0]
 800e0ac:	68a3      	ldr	r3, [r4, #8]
 800e0ae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e0b2:	701a      	strb	r2, [r3, #0]
 800e0b4:	e7ad      	b.n	800e012 <ucdr_serialize_uint32_t+0x72>
 800e0b6:	4628      	mov	r0, r5
 800e0b8:	ad01      	add	r5, sp, #4
 800e0ba:	4632      	mov	r2, r6
 800e0bc:	4629      	mov	r1, r5
 800e0be:	f008 fc18 	bl	80168f2 <memcpy>
 800e0c2:	4642      	mov	r2, r8
 800e0c4:	19a9      	adds	r1, r5, r6
 800e0c6:	68a0      	ldr	r0, [r4, #8]
 800e0c8:	f008 fc13 	bl	80168f2 <memcpy>
 800e0cc:	e7a1      	b.n	800e012 <ucdr_serialize_uint32_t+0x72>
 800e0ce:	bf00      	nop

0800e0d0 <ucdr_serialize_endian_uint32_t>:
 800e0d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e0d4:	4604      	mov	r4, r0
 800e0d6:	b083      	sub	sp, #12
 800e0d8:	460d      	mov	r5, r1
 800e0da:	2104      	movs	r1, #4
 800e0dc:	9201      	str	r2, [sp, #4]
 800e0de:	f001 f837 	bl	800f150 <ucdr_buffer_alignment>
 800e0e2:	4601      	mov	r1, r0
 800e0e4:	4620      	mov	r0, r4
 800e0e6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e0ea:	f001 f879 	bl	800f1e0 <ucdr_advance_buffer>
 800e0ee:	2104      	movs	r1, #4
 800e0f0:	4620      	mov	r0, r4
 800e0f2:	f000 ffcd 	bl	800f090 <ucdr_check_buffer_available_for>
 800e0f6:	2800      	cmp	r0, #0
 800e0f8:	d138      	bne.n	800e16c <ucdr_serialize_endian_uint32_t+0x9c>
 800e0fa:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e0fe:	42b7      	cmp	r7, r6
 800e100:	d92f      	bls.n	800e162 <ucdr_serialize_endian_uint32_t+0x92>
 800e102:	6923      	ldr	r3, [r4, #16]
 800e104:	4620      	mov	r0, r4
 800e106:	60a7      	str	r7, [r4, #8]
 800e108:	1bbf      	subs	r7, r7, r6
 800e10a:	443b      	add	r3, r7
 800e10c:	f1c7 0904 	rsb	r9, r7, #4
 800e110:	6123      	str	r3, [r4, #16]
 800e112:	4649      	mov	r1, r9
 800e114:	f000 ffc8 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800e118:	2800      	cmp	r0, #0
 800e11a:	d04a      	beq.n	800e1b2 <ucdr_serialize_endian_uint32_t+0xe2>
 800e11c:	2d01      	cmp	r5, #1
 800e11e:	d063      	beq.n	800e1e8 <ucdr_serialize_endian_uint32_t+0x118>
 800e120:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e124:	7033      	strb	r3, [r6, #0]
 800e126:	2f00      	cmp	r7, #0
 800e128:	d051      	beq.n	800e1ce <ucdr_serialize_endian_uint32_t+0xfe>
 800e12a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e12e:	2f01      	cmp	r7, #1
 800e130:	7073      	strb	r3, [r6, #1]
 800e132:	d050      	beq.n	800e1d6 <ucdr_serialize_endian_uint32_t+0x106>
 800e134:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e138:	2f02      	cmp	r7, #2
 800e13a:	70b3      	strb	r3, [r6, #2]
 800e13c:	d04f      	beq.n	800e1de <ucdr_serialize_endian_uint32_t+0x10e>
 800e13e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e142:	70f3      	strb	r3, [r6, #3]
 800e144:	6923      	ldr	r3, [r4, #16]
 800e146:	2104      	movs	r1, #4
 800e148:	68a2      	ldr	r2, [r4, #8]
 800e14a:	7da0      	ldrb	r0, [r4, #22]
 800e14c:	3304      	adds	r3, #4
 800e14e:	444a      	add	r2, r9
 800e150:	7561      	strb	r1, [r4, #21]
 800e152:	1bdb      	subs	r3, r3, r7
 800e154:	f080 0001 	eor.w	r0, r0, #1
 800e158:	60a2      	str	r2, [r4, #8]
 800e15a:	6123      	str	r3, [r4, #16]
 800e15c:	b003      	add	sp, #12
 800e15e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e162:	2104      	movs	r1, #4
 800e164:	4620      	mov	r0, r4
 800e166:	f000 ff9f 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800e16a:	b1c8      	cbz	r0, 800e1a0 <ucdr_serialize_endian_uint32_t+0xd0>
 800e16c:	2d01      	cmp	r5, #1
 800e16e:	68a3      	ldr	r3, [r4, #8]
 800e170:	d01c      	beq.n	800e1ac <ucdr_serialize_endian_uint32_t+0xdc>
 800e172:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800e176:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e17a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800e17e:	7018      	strb	r0, [r3, #0]
 800e180:	68a3      	ldr	r3, [r4, #8]
 800e182:	705a      	strb	r2, [r3, #1]
 800e184:	68a3      	ldr	r3, [r4, #8]
 800e186:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e18a:	7099      	strb	r1, [r3, #2]
 800e18c:	68a3      	ldr	r3, [r4, #8]
 800e18e:	70da      	strb	r2, [r3, #3]
 800e190:	2104      	movs	r1, #4
 800e192:	68a2      	ldr	r2, [r4, #8]
 800e194:	6923      	ldr	r3, [r4, #16]
 800e196:	440a      	add	r2, r1
 800e198:	7561      	strb	r1, [r4, #21]
 800e19a:	440b      	add	r3, r1
 800e19c:	60a2      	str	r2, [r4, #8]
 800e19e:	6123      	str	r3, [r4, #16]
 800e1a0:	7da0      	ldrb	r0, [r4, #22]
 800e1a2:	f080 0001 	eor.w	r0, r0, #1
 800e1a6:	b003      	add	sp, #12
 800e1a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1ac:	9a01      	ldr	r2, [sp, #4]
 800e1ae:	601a      	str	r2, [r3, #0]
 800e1b0:	e7ee      	b.n	800e190 <ucdr_serialize_endian_uint32_t+0xc0>
 800e1b2:	68a2      	ldr	r2, [r4, #8]
 800e1b4:	6923      	ldr	r3, [r4, #16]
 800e1b6:	7da0      	ldrb	r0, [r4, #22]
 800e1b8:	1bd2      	subs	r2, r2, r7
 800e1ba:	1bdb      	subs	r3, r3, r7
 800e1bc:	f884 8015 	strb.w	r8, [r4, #21]
 800e1c0:	f080 0001 	eor.w	r0, r0, #1
 800e1c4:	60a2      	str	r2, [r4, #8]
 800e1c6:	6123      	str	r3, [r4, #16]
 800e1c8:	b003      	add	sp, #12
 800e1ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1ce:	68a3      	ldr	r3, [r4, #8]
 800e1d0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e1d4:	701a      	strb	r2, [r3, #0]
 800e1d6:	68a3      	ldr	r3, [r4, #8]
 800e1d8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e1dc:	701a      	strb	r2, [r3, #0]
 800e1de:	68a3      	ldr	r3, [r4, #8]
 800e1e0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e1e4:	701a      	strb	r2, [r3, #0]
 800e1e6:	e7ad      	b.n	800e144 <ucdr_serialize_endian_uint32_t+0x74>
 800e1e8:	ad01      	add	r5, sp, #4
 800e1ea:	463a      	mov	r2, r7
 800e1ec:	4630      	mov	r0, r6
 800e1ee:	4629      	mov	r1, r5
 800e1f0:	f008 fb7f 	bl	80168f2 <memcpy>
 800e1f4:	464a      	mov	r2, r9
 800e1f6:	19e9      	adds	r1, r5, r7
 800e1f8:	68a0      	ldr	r0, [r4, #8]
 800e1fa:	f008 fb7a 	bl	80168f2 <memcpy>
 800e1fe:	e7a1      	b.n	800e144 <ucdr_serialize_endian_uint32_t+0x74>

0800e200 <ucdr_deserialize_uint32_t>:
 800e200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e204:	4604      	mov	r4, r0
 800e206:	460d      	mov	r5, r1
 800e208:	2104      	movs	r1, #4
 800e20a:	f000 ffa1 	bl	800f150 <ucdr_buffer_alignment>
 800e20e:	4601      	mov	r1, r0
 800e210:	4620      	mov	r0, r4
 800e212:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e216:	f000 ffe3 	bl	800f1e0 <ucdr_advance_buffer>
 800e21a:	2104      	movs	r1, #4
 800e21c:	4620      	mov	r0, r4
 800e21e:	f000 ff37 	bl	800f090 <ucdr_check_buffer_available_for>
 800e222:	2800      	cmp	r0, #0
 800e224:	d138      	bne.n	800e298 <ucdr_deserialize_uint32_t+0x98>
 800e226:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e22a:	42b7      	cmp	r7, r6
 800e22c:	d92f      	bls.n	800e28e <ucdr_deserialize_uint32_t+0x8e>
 800e22e:	6923      	ldr	r3, [r4, #16]
 800e230:	4620      	mov	r0, r4
 800e232:	60a7      	str	r7, [r4, #8]
 800e234:	1bbf      	subs	r7, r7, r6
 800e236:	443b      	add	r3, r7
 800e238:	f1c7 0904 	rsb	r9, r7, #4
 800e23c:	6123      	str	r3, [r4, #16]
 800e23e:	4649      	mov	r1, r9
 800e240:	f000 ff32 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800e244:	2800      	cmp	r0, #0
 800e246:	d046      	beq.n	800e2d6 <ucdr_deserialize_uint32_t+0xd6>
 800e248:	7d23      	ldrb	r3, [r4, #20]
 800e24a:	2b01      	cmp	r3, #1
 800e24c:	d05c      	beq.n	800e308 <ucdr_deserialize_uint32_t+0x108>
 800e24e:	78f3      	ldrb	r3, [r6, #3]
 800e250:	702b      	strb	r3, [r5, #0]
 800e252:	2f00      	cmp	r7, #0
 800e254:	d04c      	beq.n	800e2f0 <ucdr_deserialize_uint32_t+0xf0>
 800e256:	78b3      	ldrb	r3, [r6, #2]
 800e258:	2f01      	cmp	r7, #1
 800e25a:	706b      	strb	r3, [r5, #1]
 800e25c:	f105 0302 	add.w	r3, r5, #2
 800e260:	d04a      	beq.n	800e2f8 <ucdr_deserialize_uint32_t+0xf8>
 800e262:	7873      	ldrb	r3, [r6, #1]
 800e264:	2f02      	cmp	r7, #2
 800e266:	70ab      	strb	r3, [r5, #2]
 800e268:	f105 0303 	add.w	r3, r5, #3
 800e26c:	d048      	beq.n	800e300 <ucdr_deserialize_uint32_t+0x100>
 800e26e:	7833      	ldrb	r3, [r6, #0]
 800e270:	70eb      	strb	r3, [r5, #3]
 800e272:	6923      	ldr	r3, [r4, #16]
 800e274:	2104      	movs	r1, #4
 800e276:	68a2      	ldr	r2, [r4, #8]
 800e278:	3304      	adds	r3, #4
 800e27a:	7da0      	ldrb	r0, [r4, #22]
 800e27c:	444a      	add	r2, r9
 800e27e:	7561      	strb	r1, [r4, #21]
 800e280:	1bdb      	subs	r3, r3, r7
 800e282:	f080 0001 	eor.w	r0, r0, #1
 800e286:	60a2      	str	r2, [r4, #8]
 800e288:	6123      	str	r3, [r4, #16]
 800e28a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e28e:	2104      	movs	r1, #4
 800e290:	4620      	mov	r0, r4
 800e292:	f000 ff09 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800e296:	b1b0      	cbz	r0, 800e2c6 <ucdr_deserialize_uint32_t+0xc6>
 800e298:	7d23      	ldrb	r3, [r4, #20]
 800e29a:	2b01      	cmp	r3, #1
 800e29c:	68a3      	ldr	r3, [r4, #8]
 800e29e:	d017      	beq.n	800e2d0 <ucdr_deserialize_uint32_t+0xd0>
 800e2a0:	78db      	ldrb	r3, [r3, #3]
 800e2a2:	702b      	strb	r3, [r5, #0]
 800e2a4:	68a3      	ldr	r3, [r4, #8]
 800e2a6:	789b      	ldrb	r3, [r3, #2]
 800e2a8:	706b      	strb	r3, [r5, #1]
 800e2aa:	68a3      	ldr	r3, [r4, #8]
 800e2ac:	785b      	ldrb	r3, [r3, #1]
 800e2ae:	70ab      	strb	r3, [r5, #2]
 800e2b0:	68a3      	ldr	r3, [r4, #8]
 800e2b2:	781b      	ldrb	r3, [r3, #0]
 800e2b4:	70eb      	strb	r3, [r5, #3]
 800e2b6:	2104      	movs	r1, #4
 800e2b8:	68a2      	ldr	r2, [r4, #8]
 800e2ba:	6923      	ldr	r3, [r4, #16]
 800e2bc:	440a      	add	r2, r1
 800e2be:	7561      	strb	r1, [r4, #21]
 800e2c0:	440b      	add	r3, r1
 800e2c2:	60a2      	str	r2, [r4, #8]
 800e2c4:	6123      	str	r3, [r4, #16]
 800e2c6:	7da0      	ldrb	r0, [r4, #22]
 800e2c8:	f080 0001 	eor.w	r0, r0, #1
 800e2cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	602b      	str	r3, [r5, #0]
 800e2d4:	e7ef      	b.n	800e2b6 <ucdr_deserialize_uint32_t+0xb6>
 800e2d6:	68a2      	ldr	r2, [r4, #8]
 800e2d8:	6923      	ldr	r3, [r4, #16]
 800e2da:	1bd2      	subs	r2, r2, r7
 800e2dc:	7da0      	ldrb	r0, [r4, #22]
 800e2de:	1bdb      	subs	r3, r3, r7
 800e2e0:	f884 8015 	strb.w	r8, [r4, #21]
 800e2e4:	f080 0001 	eor.w	r0, r0, #1
 800e2e8:	60a2      	str	r2, [r4, #8]
 800e2ea:	6123      	str	r3, [r4, #16]
 800e2ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2f0:	68a3      	ldr	r3, [r4, #8]
 800e2f2:	789b      	ldrb	r3, [r3, #2]
 800e2f4:	706b      	strb	r3, [r5, #1]
 800e2f6:	1cab      	adds	r3, r5, #2
 800e2f8:	68a2      	ldr	r2, [r4, #8]
 800e2fa:	7852      	ldrb	r2, [r2, #1]
 800e2fc:	f803 2b01 	strb.w	r2, [r3], #1
 800e300:	68a2      	ldr	r2, [r4, #8]
 800e302:	7812      	ldrb	r2, [r2, #0]
 800e304:	701a      	strb	r2, [r3, #0]
 800e306:	e7b4      	b.n	800e272 <ucdr_deserialize_uint32_t+0x72>
 800e308:	4631      	mov	r1, r6
 800e30a:	463a      	mov	r2, r7
 800e30c:	4628      	mov	r0, r5
 800e30e:	f008 faf0 	bl	80168f2 <memcpy>
 800e312:	464a      	mov	r2, r9
 800e314:	19e8      	adds	r0, r5, r7
 800e316:	68a1      	ldr	r1, [r4, #8]
 800e318:	f008 faeb 	bl	80168f2 <memcpy>
 800e31c:	e7a9      	b.n	800e272 <ucdr_deserialize_uint32_t+0x72>
 800e31e:	bf00      	nop

0800e320 <ucdr_deserialize_endian_uint32_t>:
 800e320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e324:	4604      	mov	r4, r0
 800e326:	460e      	mov	r6, r1
 800e328:	2104      	movs	r1, #4
 800e32a:	4615      	mov	r5, r2
 800e32c:	f000 ff10 	bl	800f150 <ucdr_buffer_alignment>
 800e330:	4601      	mov	r1, r0
 800e332:	4620      	mov	r0, r4
 800e334:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e338:	f000 ff52 	bl	800f1e0 <ucdr_advance_buffer>
 800e33c:	2104      	movs	r1, #4
 800e33e:	4620      	mov	r0, r4
 800e340:	f000 fea6 	bl	800f090 <ucdr_check_buffer_available_for>
 800e344:	2800      	cmp	r0, #0
 800e346:	d13c      	bne.n	800e3c2 <ucdr_deserialize_endian_uint32_t+0xa2>
 800e348:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800e34c:	42bb      	cmp	r3, r7
 800e34e:	d933      	bls.n	800e3b8 <ucdr_deserialize_endian_uint32_t+0x98>
 800e350:	eba3 0907 	sub.w	r9, r3, r7
 800e354:	60a3      	str	r3, [r4, #8]
 800e356:	6923      	ldr	r3, [r4, #16]
 800e358:	4620      	mov	r0, r4
 800e35a:	f1c9 0a04 	rsb	sl, r9, #4
 800e35e:	444b      	add	r3, r9
 800e360:	4651      	mov	r1, sl
 800e362:	6123      	str	r3, [r4, #16]
 800e364:	f000 fea0 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800e368:	2800      	cmp	r0, #0
 800e36a:	d048      	beq.n	800e3fe <ucdr_deserialize_endian_uint32_t+0xde>
 800e36c:	2e01      	cmp	r6, #1
 800e36e:	d061      	beq.n	800e434 <ucdr_deserialize_endian_uint32_t+0x114>
 800e370:	78fb      	ldrb	r3, [r7, #3]
 800e372:	702b      	strb	r3, [r5, #0]
 800e374:	f1b9 0f00 	cmp.w	r9, #0
 800e378:	d050      	beq.n	800e41c <ucdr_deserialize_endian_uint32_t+0xfc>
 800e37a:	78bb      	ldrb	r3, [r7, #2]
 800e37c:	f1b9 0f01 	cmp.w	r9, #1
 800e380:	706b      	strb	r3, [r5, #1]
 800e382:	f105 0302 	add.w	r3, r5, #2
 800e386:	d04d      	beq.n	800e424 <ucdr_deserialize_endian_uint32_t+0x104>
 800e388:	787b      	ldrb	r3, [r7, #1]
 800e38a:	f1b9 0f02 	cmp.w	r9, #2
 800e38e:	70ab      	strb	r3, [r5, #2]
 800e390:	f105 0303 	add.w	r3, r5, #3
 800e394:	d04a      	beq.n	800e42c <ucdr_deserialize_endian_uint32_t+0x10c>
 800e396:	783b      	ldrb	r3, [r7, #0]
 800e398:	70eb      	strb	r3, [r5, #3]
 800e39a:	6923      	ldr	r3, [r4, #16]
 800e39c:	2104      	movs	r1, #4
 800e39e:	68a2      	ldr	r2, [r4, #8]
 800e3a0:	3304      	adds	r3, #4
 800e3a2:	7da0      	ldrb	r0, [r4, #22]
 800e3a4:	4452      	add	r2, sl
 800e3a6:	7561      	strb	r1, [r4, #21]
 800e3a8:	eba3 0309 	sub.w	r3, r3, r9
 800e3ac:	f080 0001 	eor.w	r0, r0, #1
 800e3b0:	60a2      	str	r2, [r4, #8]
 800e3b2:	6123      	str	r3, [r4, #16]
 800e3b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3b8:	2104      	movs	r1, #4
 800e3ba:	4620      	mov	r0, r4
 800e3bc:	f000 fe74 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800e3c0:	b1a8      	cbz	r0, 800e3ee <ucdr_deserialize_endian_uint32_t+0xce>
 800e3c2:	2e01      	cmp	r6, #1
 800e3c4:	68a3      	ldr	r3, [r4, #8]
 800e3c6:	d017      	beq.n	800e3f8 <ucdr_deserialize_endian_uint32_t+0xd8>
 800e3c8:	78db      	ldrb	r3, [r3, #3]
 800e3ca:	702b      	strb	r3, [r5, #0]
 800e3cc:	68a3      	ldr	r3, [r4, #8]
 800e3ce:	789b      	ldrb	r3, [r3, #2]
 800e3d0:	706b      	strb	r3, [r5, #1]
 800e3d2:	68a3      	ldr	r3, [r4, #8]
 800e3d4:	785b      	ldrb	r3, [r3, #1]
 800e3d6:	70ab      	strb	r3, [r5, #2]
 800e3d8:	68a3      	ldr	r3, [r4, #8]
 800e3da:	781b      	ldrb	r3, [r3, #0]
 800e3dc:	70eb      	strb	r3, [r5, #3]
 800e3de:	2104      	movs	r1, #4
 800e3e0:	68a2      	ldr	r2, [r4, #8]
 800e3e2:	6923      	ldr	r3, [r4, #16]
 800e3e4:	440a      	add	r2, r1
 800e3e6:	7561      	strb	r1, [r4, #21]
 800e3e8:	440b      	add	r3, r1
 800e3ea:	60a2      	str	r2, [r4, #8]
 800e3ec:	6123      	str	r3, [r4, #16]
 800e3ee:	7da0      	ldrb	r0, [r4, #22]
 800e3f0:	f080 0001 	eor.w	r0, r0, #1
 800e3f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	602b      	str	r3, [r5, #0]
 800e3fc:	e7ef      	b.n	800e3de <ucdr_deserialize_endian_uint32_t+0xbe>
 800e3fe:	68a2      	ldr	r2, [r4, #8]
 800e400:	6923      	ldr	r3, [r4, #16]
 800e402:	eba2 0209 	sub.w	r2, r2, r9
 800e406:	7da0      	ldrb	r0, [r4, #22]
 800e408:	eba3 0309 	sub.w	r3, r3, r9
 800e40c:	f884 8015 	strb.w	r8, [r4, #21]
 800e410:	f080 0001 	eor.w	r0, r0, #1
 800e414:	60a2      	str	r2, [r4, #8]
 800e416:	6123      	str	r3, [r4, #16]
 800e418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e41c:	68a3      	ldr	r3, [r4, #8]
 800e41e:	789b      	ldrb	r3, [r3, #2]
 800e420:	706b      	strb	r3, [r5, #1]
 800e422:	1cab      	adds	r3, r5, #2
 800e424:	68a2      	ldr	r2, [r4, #8]
 800e426:	7852      	ldrb	r2, [r2, #1]
 800e428:	f803 2b01 	strb.w	r2, [r3], #1
 800e42c:	68a2      	ldr	r2, [r4, #8]
 800e42e:	7812      	ldrb	r2, [r2, #0]
 800e430:	701a      	strb	r2, [r3, #0]
 800e432:	e7b2      	b.n	800e39a <ucdr_deserialize_endian_uint32_t+0x7a>
 800e434:	4639      	mov	r1, r7
 800e436:	464a      	mov	r2, r9
 800e438:	4628      	mov	r0, r5
 800e43a:	f008 fa5a 	bl	80168f2 <memcpy>
 800e43e:	4652      	mov	r2, sl
 800e440:	eb05 0009 	add.w	r0, r5, r9
 800e444:	68a1      	ldr	r1, [r4, #8]
 800e446:	f008 fa54 	bl	80168f2 <memcpy>
 800e44a:	e7a6      	b.n	800e39a <ucdr_deserialize_endian_uint32_t+0x7a>

0800e44c <ucdr_serialize_uint64_t>:
 800e44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e450:	4604      	mov	r4, r0
 800e452:	b082      	sub	sp, #8
 800e454:	2108      	movs	r1, #8
 800e456:	e9cd 2300 	strd	r2, r3, [sp]
 800e45a:	f000 fe79 	bl	800f150 <ucdr_buffer_alignment>
 800e45e:	4601      	mov	r1, r0
 800e460:	4620      	mov	r0, r4
 800e462:	7d67      	ldrb	r7, [r4, #21]
 800e464:	f000 febc 	bl	800f1e0 <ucdr_advance_buffer>
 800e468:	2108      	movs	r1, #8
 800e46a:	4620      	mov	r0, r4
 800e46c:	f000 fe10 	bl	800f090 <ucdr_check_buffer_available_for>
 800e470:	2800      	cmp	r0, #0
 800e472:	d14e      	bne.n	800e512 <ucdr_serialize_uint64_t+0xc6>
 800e474:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e478:	42ab      	cmp	r3, r5
 800e47a:	d945      	bls.n	800e508 <ucdr_serialize_uint64_t+0xbc>
 800e47c:	1b5e      	subs	r6, r3, r5
 800e47e:	60a3      	str	r3, [r4, #8]
 800e480:	6923      	ldr	r3, [r4, #16]
 800e482:	4620      	mov	r0, r4
 800e484:	f1c6 0808 	rsb	r8, r6, #8
 800e488:	4433      	add	r3, r6
 800e48a:	4641      	mov	r1, r8
 800e48c:	6123      	str	r3, [r4, #16]
 800e48e:	f000 fe0b 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800e492:	2800      	cmp	r0, #0
 800e494:	d074      	beq.n	800e580 <ucdr_serialize_uint64_t+0x134>
 800e496:	7d23      	ldrb	r3, [r4, #20]
 800e498:	2b01      	cmp	r3, #1
 800e49a:	f000 809b 	beq.w	800e5d4 <ucdr_serialize_uint64_t+0x188>
 800e49e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e4a2:	702b      	strb	r3, [r5, #0]
 800e4a4:	2e00      	cmp	r6, #0
 800e4a6:	d078      	beq.n	800e59a <ucdr_serialize_uint64_t+0x14e>
 800e4a8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e4ac:	2e01      	cmp	r6, #1
 800e4ae:	706b      	strb	r3, [r5, #1]
 800e4b0:	d077      	beq.n	800e5a2 <ucdr_serialize_uint64_t+0x156>
 800e4b2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e4b6:	2e02      	cmp	r6, #2
 800e4b8:	70ab      	strb	r3, [r5, #2]
 800e4ba:	d076      	beq.n	800e5aa <ucdr_serialize_uint64_t+0x15e>
 800e4bc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e4c0:	2e03      	cmp	r6, #3
 800e4c2:	70eb      	strb	r3, [r5, #3]
 800e4c4:	d075      	beq.n	800e5b2 <ucdr_serialize_uint64_t+0x166>
 800e4c6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e4ca:	2e04      	cmp	r6, #4
 800e4cc:	712b      	strb	r3, [r5, #4]
 800e4ce:	d074      	beq.n	800e5ba <ucdr_serialize_uint64_t+0x16e>
 800e4d0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800e4d4:	2e05      	cmp	r6, #5
 800e4d6:	716b      	strb	r3, [r5, #5]
 800e4d8:	d073      	beq.n	800e5c2 <ucdr_serialize_uint64_t+0x176>
 800e4da:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800e4de:	2e06      	cmp	r6, #6
 800e4e0:	71ab      	strb	r3, [r5, #6]
 800e4e2:	d072      	beq.n	800e5ca <ucdr_serialize_uint64_t+0x17e>
 800e4e4:	f89d 3000 	ldrb.w	r3, [sp]
 800e4e8:	71eb      	strb	r3, [r5, #7]
 800e4ea:	6923      	ldr	r3, [r4, #16]
 800e4ec:	2108      	movs	r1, #8
 800e4ee:	68a2      	ldr	r2, [r4, #8]
 800e4f0:	3308      	adds	r3, #8
 800e4f2:	7da0      	ldrb	r0, [r4, #22]
 800e4f4:	4442      	add	r2, r8
 800e4f6:	7561      	strb	r1, [r4, #21]
 800e4f8:	1b9e      	subs	r6, r3, r6
 800e4fa:	f080 0001 	eor.w	r0, r0, #1
 800e4fe:	60a2      	str	r2, [r4, #8]
 800e500:	6126      	str	r6, [r4, #16]
 800e502:	b002      	add	sp, #8
 800e504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e508:	2108      	movs	r1, #8
 800e50a:	4620      	mov	r0, r4
 800e50c:	f000 fdcc 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800e510:	b350      	cbz	r0, 800e568 <ucdr_serialize_uint64_t+0x11c>
 800e512:	7d23      	ldrb	r3, [r4, #20]
 800e514:	2b01      	cmp	r3, #1
 800e516:	d02d      	beq.n	800e574 <ucdr_serialize_uint64_t+0x128>
 800e518:	68a3      	ldr	r3, [r4, #8]
 800e51a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800e51e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e522:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800e526:	7018      	strb	r0, [r3, #0]
 800e528:	68a3      	ldr	r3, [r4, #8]
 800e52a:	705a      	strb	r2, [r3, #1]
 800e52c:	68a3      	ldr	r3, [r4, #8]
 800e52e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e532:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800e536:	7099      	strb	r1, [r3, #2]
 800e538:	68a3      	ldr	r3, [r4, #8]
 800e53a:	70da      	strb	r2, [r3, #3]
 800e53c:	68a3      	ldr	r3, [r4, #8]
 800e53e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e542:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800e546:	7118      	strb	r0, [r3, #4]
 800e548:	68a3      	ldr	r3, [r4, #8]
 800e54a:	715a      	strb	r2, [r3, #5]
 800e54c:	68a3      	ldr	r3, [r4, #8]
 800e54e:	f89d 2000 	ldrb.w	r2, [sp]
 800e552:	7199      	strb	r1, [r3, #6]
 800e554:	68a3      	ldr	r3, [r4, #8]
 800e556:	71da      	strb	r2, [r3, #7]
 800e558:	2108      	movs	r1, #8
 800e55a:	68a2      	ldr	r2, [r4, #8]
 800e55c:	6923      	ldr	r3, [r4, #16]
 800e55e:	440a      	add	r2, r1
 800e560:	7561      	strb	r1, [r4, #21]
 800e562:	440b      	add	r3, r1
 800e564:	60a2      	str	r2, [r4, #8]
 800e566:	6123      	str	r3, [r4, #16]
 800e568:	7da0      	ldrb	r0, [r4, #22]
 800e56a:	f080 0001 	eor.w	r0, r0, #1
 800e56e:	b002      	add	sp, #8
 800e570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e574:	466b      	mov	r3, sp
 800e576:	68a2      	ldr	r2, [r4, #8]
 800e578:	cb03      	ldmia	r3!, {r0, r1}
 800e57a:	6010      	str	r0, [r2, #0]
 800e57c:	6051      	str	r1, [r2, #4]
 800e57e:	e7eb      	b.n	800e558 <ucdr_serialize_uint64_t+0x10c>
 800e580:	68a2      	ldr	r2, [r4, #8]
 800e582:	6923      	ldr	r3, [r4, #16]
 800e584:	7da0      	ldrb	r0, [r4, #22]
 800e586:	1b92      	subs	r2, r2, r6
 800e588:	1b9b      	subs	r3, r3, r6
 800e58a:	7567      	strb	r7, [r4, #21]
 800e58c:	f080 0001 	eor.w	r0, r0, #1
 800e590:	60a2      	str	r2, [r4, #8]
 800e592:	6123      	str	r3, [r4, #16]
 800e594:	b002      	add	sp, #8
 800e596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e59a:	68a3      	ldr	r3, [r4, #8]
 800e59c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e5a0:	701a      	strb	r2, [r3, #0]
 800e5a2:	68a3      	ldr	r3, [r4, #8]
 800e5a4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e5a8:	701a      	strb	r2, [r3, #0]
 800e5aa:	68a3      	ldr	r3, [r4, #8]
 800e5ac:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e5b0:	701a      	strb	r2, [r3, #0]
 800e5b2:	68a3      	ldr	r3, [r4, #8]
 800e5b4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e5b8:	701a      	strb	r2, [r3, #0]
 800e5ba:	68a3      	ldr	r3, [r4, #8]
 800e5bc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e5c0:	701a      	strb	r2, [r3, #0]
 800e5c2:	68a3      	ldr	r3, [r4, #8]
 800e5c4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e5c8:	701a      	strb	r2, [r3, #0]
 800e5ca:	68a3      	ldr	r3, [r4, #8]
 800e5cc:	f89d 2000 	ldrb.w	r2, [sp]
 800e5d0:	701a      	strb	r2, [r3, #0]
 800e5d2:	e78a      	b.n	800e4ea <ucdr_serialize_uint64_t+0x9e>
 800e5d4:	4628      	mov	r0, r5
 800e5d6:	466d      	mov	r5, sp
 800e5d8:	4632      	mov	r2, r6
 800e5da:	4629      	mov	r1, r5
 800e5dc:	f008 f989 	bl	80168f2 <memcpy>
 800e5e0:	4642      	mov	r2, r8
 800e5e2:	19a9      	adds	r1, r5, r6
 800e5e4:	68a0      	ldr	r0, [r4, #8]
 800e5e6:	f008 f984 	bl	80168f2 <memcpy>
 800e5ea:	e77e      	b.n	800e4ea <ucdr_serialize_uint64_t+0x9e>

0800e5ec <ucdr_serialize_int16_t>:
 800e5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5f0:	460b      	mov	r3, r1
 800e5f2:	b082      	sub	sp, #8
 800e5f4:	4604      	mov	r4, r0
 800e5f6:	2102      	movs	r1, #2
 800e5f8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e5fc:	f000 fda8 	bl	800f150 <ucdr_buffer_alignment>
 800e600:	4601      	mov	r1, r0
 800e602:	4620      	mov	r0, r4
 800e604:	7d67      	ldrb	r7, [r4, #21]
 800e606:	f000 fdeb 	bl	800f1e0 <ucdr_advance_buffer>
 800e60a:	2102      	movs	r1, #2
 800e60c:	4620      	mov	r0, r4
 800e60e:	f000 fd3f 	bl	800f090 <ucdr_check_buffer_available_for>
 800e612:	bb78      	cbnz	r0, 800e674 <ucdr_serialize_int16_t+0x88>
 800e614:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e618:	42ab      	cmp	r3, r5
 800e61a:	d926      	bls.n	800e66a <ucdr_serialize_int16_t+0x7e>
 800e61c:	1b5e      	subs	r6, r3, r5
 800e61e:	60a3      	str	r3, [r4, #8]
 800e620:	6923      	ldr	r3, [r4, #16]
 800e622:	4620      	mov	r0, r4
 800e624:	f1c6 0802 	rsb	r8, r6, #2
 800e628:	4433      	add	r3, r6
 800e62a:	4641      	mov	r1, r8
 800e62c:	6123      	str	r3, [r4, #16]
 800e62e:	f000 fd3b 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800e632:	2800      	cmp	r0, #0
 800e634:	d03b      	beq.n	800e6ae <ucdr_serialize_int16_t+0xc2>
 800e636:	7d23      	ldrb	r3, [r4, #20]
 800e638:	2b01      	cmp	r3, #1
 800e63a:	d04a      	beq.n	800e6d2 <ucdr_serialize_int16_t+0xe6>
 800e63c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e640:	702b      	strb	r3, [r5, #0]
 800e642:	2e00      	cmp	r6, #0
 800e644:	d040      	beq.n	800e6c8 <ucdr_serialize_int16_t+0xdc>
 800e646:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e64a:	706b      	strb	r3, [r5, #1]
 800e64c:	6923      	ldr	r3, [r4, #16]
 800e64e:	2102      	movs	r1, #2
 800e650:	68a2      	ldr	r2, [r4, #8]
 800e652:	3302      	adds	r3, #2
 800e654:	7da0      	ldrb	r0, [r4, #22]
 800e656:	4442      	add	r2, r8
 800e658:	7561      	strb	r1, [r4, #21]
 800e65a:	1b9e      	subs	r6, r3, r6
 800e65c:	f080 0001 	eor.w	r0, r0, #1
 800e660:	60a2      	str	r2, [r4, #8]
 800e662:	6126      	str	r6, [r4, #16]
 800e664:	b002      	add	sp, #8
 800e666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e66a:	2102      	movs	r1, #2
 800e66c:	4620      	mov	r0, r4
 800e66e:	f000 fd1b 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800e672:	b190      	cbz	r0, 800e69a <ucdr_serialize_int16_t+0xae>
 800e674:	7d23      	ldrb	r3, [r4, #20]
 800e676:	2b01      	cmp	r3, #1
 800e678:	68a3      	ldr	r3, [r4, #8]
 800e67a:	d014      	beq.n	800e6a6 <ucdr_serialize_int16_t+0xba>
 800e67c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e680:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e684:	7019      	strb	r1, [r3, #0]
 800e686:	68a3      	ldr	r3, [r4, #8]
 800e688:	705a      	strb	r2, [r3, #1]
 800e68a:	2102      	movs	r1, #2
 800e68c:	68a2      	ldr	r2, [r4, #8]
 800e68e:	6923      	ldr	r3, [r4, #16]
 800e690:	440a      	add	r2, r1
 800e692:	7561      	strb	r1, [r4, #21]
 800e694:	440b      	add	r3, r1
 800e696:	60a2      	str	r2, [r4, #8]
 800e698:	6123      	str	r3, [r4, #16]
 800e69a:	7da0      	ldrb	r0, [r4, #22]
 800e69c:	f080 0001 	eor.w	r0, r0, #1
 800e6a0:	b002      	add	sp, #8
 800e6a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6a6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e6aa:	801a      	strh	r2, [r3, #0]
 800e6ac:	e7ed      	b.n	800e68a <ucdr_serialize_int16_t+0x9e>
 800e6ae:	68a2      	ldr	r2, [r4, #8]
 800e6b0:	6923      	ldr	r3, [r4, #16]
 800e6b2:	7da0      	ldrb	r0, [r4, #22]
 800e6b4:	1b92      	subs	r2, r2, r6
 800e6b6:	1b9b      	subs	r3, r3, r6
 800e6b8:	7567      	strb	r7, [r4, #21]
 800e6ba:	f080 0001 	eor.w	r0, r0, #1
 800e6be:	60a2      	str	r2, [r4, #8]
 800e6c0:	6123      	str	r3, [r4, #16]
 800e6c2:	b002      	add	sp, #8
 800e6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6c8:	68a3      	ldr	r3, [r4, #8]
 800e6ca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e6ce:	701a      	strb	r2, [r3, #0]
 800e6d0:	e7bc      	b.n	800e64c <ucdr_serialize_int16_t+0x60>
 800e6d2:	4628      	mov	r0, r5
 800e6d4:	f10d 0506 	add.w	r5, sp, #6
 800e6d8:	4632      	mov	r2, r6
 800e6da:	4629      	mov	r1, r5
 800e6dc:	f008 f909 	bl	80168f2 <memcpy>
 800e6e0:	4642      	mov	r2, r8
 800e6e2:	19a9      	adds	r1, r5, r6
 800e6e4:	68a0      	ldr	r0, [r4, #8]
 800e6e6:	f008 f904 	bl	80168f2 <memcpy>
 800e6ea:	e7af      	b.n	800e64c <ucdr_serialize_int16_t+0x60>

0800e6ec <ucdr_deserialize_int16_t>:
 800e6ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6f0:	4604      	mov	r4, r0
 800e6f2:	460d      	mov	r5, r1
 800e6f4:	2102      	movs	r1, #2
 800e6f6:	f000 fd2b 	bl	800f150 <ucdr_buffer_alignment>
 800e6fa:	4601      	mov	r1, r0
 800e6fc:	4620      	mov	r0, r4
 800e6fe:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e702:	f000 fd6d 	bl	800f1e0 <ucdr_advance_buffer>
 800e706:	2102      	movs	r1, #2
 800e708:	4620      	mov	r0, r4
 800e70a:	f000 fcc1 	bl	800f090 <ucdr_check_buffer_available_for>
 800e70e:	bb60      	cbnz	r0, 800e76a <ucdr_deserialize_int16_t+0x7e>
 800e710:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800e714:	42be      	cmp	r6, r7
 800e716:	d923      	bls.n	800e760 <ucdr_deserialize_int16_t+0x74>
 800e718:	6923      	ldr	r3, [r4, #16]
 800e71a:	4620      	mov	r0, r4
 800e71c:	60a6      	str	r6, [r4, #8]
 800e71e:	1bf6      	subs	r6, r6, r7
 800e720:	4433      	add	r3, r6
 800e722:	f1c6 0902 	rsb	r9, r6, #2
 800e726:	6123      	str	r3, [r4, #16]
 800e728:	4649      	mov	r1, r9
 800e72a:	f000 fcbd 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800e72e:	2800      	cmp	r0, #0
 800e730:	d034      	beq.n	800e79c <ucdr_deserialize_int16_t+0xb0>
 800e732:	7d23      	ldrb	r3, [r4, #20]
 800e734:	2b01      	cmp	r3, #1
 800e736:	d042      	beq.n	800e7be <ucdr_deserialize_int16_t+0xd2>
 800e738:	787b      	ldrb	r3, [r7, #1]
 800e73a:	702b      	strb	r3, [r5, #0]
 800e73c:	2e00      	cmp	r6, #0
 800e73e:	d03a      	beq.n	800e7b6 <ucdr_deserialize_int16_t+0xca>
 800e740:	783b      	ldrb	r3, [r7, #0]
 800e742:	706b      	strb	r3, [r5, #1]
 800e744:	6923      	ldr	r3, [r4, #16]
 800e746:	2102      	movs	r1, #2
 800e748:	68a2      	ldr	r2, [r4, #8]
 800e74a:	3302      	adds	r3, #2
 800e74c:	7da0      	ldrb	r0, [r4, #22]
 800e74e:	444a      	add	r2, r9
 800e750:	7561      	strb	r1, [r4, #21]
 800e752:	1b9b      	subs	r3, r3, r6
 800e754:	f080 0001 	eor.w	r0, r0, #1
 800e758:	60a2      	str	r2, [r4, #8]
 800e75a:	6123      	str	r3, [r4, #16]
 800e75c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e760:	2102      	movs	r1, #2
 800e762:	4620      	mov	r0, r4
 800e764:	f000 fca0 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800e768:	b180      	cbz	r0, 800e78c <ucdr_deserialize_int16_t+0xa0>
 800e76a:	7d23      	ldrb	r3, [r4, #20]
 800e76c:	2b01      	cmp	r3, #1
 800e76e:	68a3      	ldr	r3, [r4, #8]
 800e770:	d011      	beq.n	800e796 <ucdr_deserialize_int16_t+0xaa>
 800e772:	785b      	ldrb	r3, [r3, #1]
 800e774:	702b      	strb	r3, [r5, #0]
 800e776:	68a3      	ldr	r3, [r4, #8]
 800e778:	781b      	ldrb	r3, [r3, #0]
 800e77a:	706b      	strb	r3, [r5, #1]
 800e77c:	2102      	movs	r1, #2
 800e77e:	68a2      	ldr	r2, [r4, #8]
 800e780:	6923      	ldr	r3, [r4, #16]
 800e782:	440a      	add	r2, r1
 800e784:	7561      	strb	r1, [r4, #21]
 800e786:	440b      	add	r3, r1
 800e788:	60a2      	str	r2, [r4, #8]
 800e78a:	6123      	str	r3, [r4, #16]
 800e78c:	7da0      	ldrb	r0, [r4, #22]
 800e78e:	f080 0001 	eor.w	r0, r0, #1
 800e792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e796:	881b      	ldrh	r3, [r3, #0]
 800e798:	802b      	strh	r3, [r5, #0]
 800e79a:	e7ef      	b.n	800e77c <ucdr_deserialize_int16_t+0x90>
 800e79c:	68a2      	ldr	r2, [r4, #8]
 800e79e:	6923      	ldr	r3, [r4, #16]
 800e7a0:	1b92      	subs	r2, r2, r6
 800e7a2:	7da0      	ldrb	r0, [r4, #22]
 800e7a4:	1b9b      	subs	r3, r3, r6
 800e7a6:	f884 8015 	strb.w	r8, [r4, #21]
 800e7aa:	f080 0001 	eor.w	r0, r0, #1
 800e7ae:	60a2      	str	r2, [r4, #8]
 800e7b0:	6123      	str	r3, [r4, #16]
 800e7b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7b6:	68a3      	ldr	r3, [r4, #8]
 800e7b8:	781b      	ldrb	r3, [r3, #0]
 800e7ba:	706b      	strb	r3, [r5, #1]
 800e7bc:	e7c2      	b.n	800e744 <ucdr_deserialize_int16_t+0x58>
 800e7be:	4639      	mov	r1, r7
 800e7c0:	4632      	mov	r2, r6
 800e7c2:	4628      	mov	r0, r5
 800e7c4:	f008 f895 	bl	80168f2 <memcpy>
 800e7c8:	464a      	mov	r2, r9
 800e7ca:	19a8      	adds	r0, r5, r6
 800e7cc:	68a1      	ldr	r1, [r4, #8]
 800e7ce:	f008 f890 	bl	80168f2 <memcpy>
 800e7d2:	e7b7      	b.n	800e744 <ucdr_deserialize_int16_t+0x58>

0800e7d4 <ucdr_serialize_int32_t>:
 800e7d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7d8:	b082      	sub	sp, #8
 800e7da:	4604      	mov	r4, r0
 800e7dc:	9101      	str	r1, [sp, #4]
 800e7de:	2104      	movs	r1, #4
 800e7e0:	f000 fcb6 	bl	800f150 <ucdr_buffer_alignment>
 800e7e4:	4601      	mov	r1, r0
 800e7e6:	4620      	mov	r0, r4
 800e7e8:	7d67      	ldrb	r7, [r4, #21]
 800e7ea:	f000 fcf9 	bl	800f1e0 <ucdr_advance_buffer>
 800e7ee:	2104      	movs	r1, #4
 800e7f0:	4620      	mov	r0, r4
 800e7f2:	f000 fc4d 	bl	800f090 <ucdr_check_buffer_available_for>
 800e7f6:	2800      	cmp	r0, #0
 800e7f8:	d139      	bne.n	800e86e <ucdr_serialize_int32_t+0x9a>
 800e7fa:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e7fe:	42ab      	cmp	r3, r5
 800e800:	d930      	bls.n	800e864 <ucdr_serialize_int32_t+0x90>
 800e802:	1b5e      	subs	r6, r3, r5
 800e804:	60a3      	str	r3, [r4, #8]
 800e806:	6923      	ldr	r3, [r4, #16]
 800e808:	4620      	mov	r0, r4
 800e80a:	f1c6 0804 	rsb	r8, r6, #4
 800e80e:	4433      	add	r3, r6
 800e810:	4641      	mov	r1, r8
 800e812:	6123      	str	r3, [r4, #16]
 800e814:	f000 fc48 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800e818:	2800      	cmp	r0, #0
 800e81a:	d04c      	beq.n	800e8b6 <ucdr_serialize_int32_t+0xe2>
 800e81c:	7d23      	ldrb	r3, [r4, #20]
 800e81e:	2b01      	cmp	r3, #1
 800e820:	d063      	beq.n	800e8ea <ucdr_serialize_int32_t+0x116>
 800e822:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e826:	702b      	strb	r3, [r5, #0]
 800e828:	2e00      	cmp	r6, #0
 800e82a:	d051      	beq.n	800e8d0 <ucdr_serialize_int32_t+0xfc>
 800e82c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e830:	2e01      	cmp	r6, #1
 800e832:	706b      	strb	r3, [r5, #1]
 800e834:	d050      	beq.n	800e8d8 <ucdr_serialize_int32_t+0x104>
 800e836:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e83a:	2e02      	cmp	r6, #2
 800e83c:	70ab      	strb	r3, [r5, #2]
 800e83e:	d04f      	beq.n	800e8e0 <ucdr_serialize_int32_t+0x10c>
 800e840:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e844:	70eb      	strb	r3, [r5, #3]
 800e846:	6923      	ldr	r3, [r4, #16]
 800e848:	2104      	movs	r1, #4
 800e84a:	68a2      	ldr	r2, [r4, #8]
 800e84c:	3304      	adds	r3, #4
 800e84e:	7da0      	ldrb	r0, [r4, #22]
 800e850:	4442      	add	r2, r8
 800e852:	7561      	strb	r1, [r4, #21]
 800e854:	1b9e      	subs	r6, r3, r6
 800e856:	f080 0001 	eor.w	r0, r0, #1
 800e85a:	60a2      	str	r2, [r4, #8]
 800e85c:	6126      	str	r6, [r4, #16]
 800e85e:	b002      	add	sp, #8
 800e860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e864:	2104      	movs	r1, #4
 800e866:	4620      	mov	r0, r4
 800e868:	f000 fc1e 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800e86c:	b1d0      	cbz	r0, 800e8a4 <ucdr_serialize_int32_t+0xd0>
 800e86e:	7d23      	ldrb	r3, [r4, #20]
 800e870:	2b01      	cmp	r3, #1
 800e872:	68a3      	ldr	r3, [r4, #8]
 800e874:	d01c      	beq.n	800e8b0 <ucdr_serialize_int32_t+0xdc>
 800e876:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800e87a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e87e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800e882:	7018      	strb	r0, [r3, #0]
 800e884:	68a3      	ldr	r3, [r4, #8]
 800e886:	705a      	strb	r2, [r3, #1]
 800e888:	68a3      	ldr	r3, [r4, #8]
 800e88a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e88e:	7099      	strb	r1, [r3, #2]
 800e890:	68a3      	ldr	r3, [r4, #8]
 800e892:	70da      	strb	r2, [r3, #3]
 800e894:	2104      	movs	r1, #4
 800e896:	68a2      	ldr	r2, [r4, #8]
 800e898:	6923      	ldr	r3, [r4, #16]
 800e89a:	440a      	add	r2, r1
 800e89c:	7561      	strb	r1, [r4, #21]
 800e89e:	440b      	add	r3, r1
 800e8a0:	60a2      	str	r2, [r4, #8]
 800e8a2:	6123      	str	r3, [r4, #16]
 800e8a4:	7da0      	ldrb	r0, [r4, #22]
 800e8a6:	f080 0001 	eor.w	r0, r0, #1
 800e8aa:	b002      	add	sp, #8
 800e8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8b0:	9a01      	ldr	r2, [sp, #4]
 800e8b2:	601a      	str	r2, [r3, #0]
 800e8b4:	e7ee      	b.n	800e894 <ucdr_serialize_int32_t+0xc0>
 800e8b6:	68a2      	ldr	r2, [r4, #8]
 800e8b8:	6923      	ldr	r3, [r4, #16]
 800e8ba:	7da0      	ldrb	r0, [r4, #22]
 800e8bc:	1b92      	subs	r2, r2, r6
 800e8be:	1b9b      	subs	r3, r3, r6
 800e8c0:	7567      	strb	r7, [r4, #21]
 800e8c2:	f080 0001 	eor.w	r0, r0, #1
 800e8c6:	60a2      	str	r2, [r4, #8]
 800e8c8:	6123      	str	r3, [r4, #16]
 800e8ca:	b002      	add	sp, #8
 800e8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8d0:	68a3      	ldr	r3, [r4, #8]
 800e8d2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e8d6:	701a      	strb	r2, [r3, #0]
 800e8d8:	68a3      	ldr	r3, [r4, #8]
 800e8da:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e8de:	701a      	strb	r2, [r3, #0]
 800e8e0:	68a3      	ldr	r3, [r4, #8]
 800e8e2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e8e6:	701a      	strb	r2, [r3, #0]
 800e8e8:	e7ad      	b.n	800e846 <ucdr_serialize_int32_t+0x72>
 800e8ea:	4628      	mov	r0, r5
 800e8ec:	ad01      	add	r5, sp, #4
 800e8ee:	4632      	mov	r2, r6
 800e8f0:	4629      	mov	r1, r5
 800e8f2:	f007 fffe 	bl	80168f2 <memcpy>
 800e8f6:	4642      	mov	r2, r8
 800e8f8:	19a9      	adds	r1, r5, r6
 800e8fa:	68a0      	ldr	r0, [r4, #8]
 800e8fc:	f007 fff9 	bl	80168f2 <memcpy>
 800e900:	e7a1      	b.n	800e846 <ucdr_serialize_int32_t+0x72>
 800e902:	bf00      	nop

0800e904 <ucdr_deserialize_int32_t>:
 800e904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e908:	4604      	mov	r4, r0
 800e90a:	460d      	mov	r5, r1
 800e90c:	2104      	movs	r1, #4
 800e90e:	f000 fc1f 	bl	800f150 <ucdr_buffer_alignment>
 800e912:	4601      	mov	r1, r0
 800e914:	4620      	mov	r0, r4
 800e916:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e91a:	f000 fc61 	bl	800f1e0 <ucdr_advance_buffer>
 800e91e:	2104      	movs	r1, #4
 800e920:	4620      	mov	r0, r4
 800e922:	f000 fbb5 	bl	800f090 <ucdr_check_buffer_available_for>
 800e926:	2800      	cmp	r0, #0
 800e928:	d138      	bne.n	800e99c <ucdr_deserialize_int32_t+0x98>
 800e92a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e92e:	42b7      	cmp	r7, r6
 800e930:	d92f      	bls.n	800e992 <ucdr_deserialize_int32_t+0x8e>
 800e932:	6923      	ldr	r3, [r4, #16]
 800e934:	4620      	mov	r0, r4
 800e936:	60a7      	str	r7, [r4, #8]
 800e938:	1bbf      	subs	r7, r7, r6
 800e93a:	443b      	add	r3, r7
 800e93c:	f1c7 0904 	rsb	r9, r7, #4
 800e940:	6123      	str	r3, [r4, #16]
 800e942:	4649      	mov	r1, r9
 800e944:	f000 fbb0 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800e948:	2800      	cmp	r0, #0
 800e94a:	d046      	beq.n	800e9da <ucdr_deserialize_int32_t+0xd6>
 800e94c:	7d23      	ldrb	r3, [r4, #20]
 800e94e:	2b01      	cmp	r3, #1
 800e950:	d05c      	beq.n	800ea0c <ucdr_deserialize_int32_t+0x108>
 800e952:	78f3      	ldrb	r3, [r6, #3]
 800e954:	702b      	strb	r3, [r5, #0]
 800e956:	2f00      	cmp	r7, #0
 800e958:	d04c      	beq.n	800e9f4 <ucdr_deserialize_int32_t+0xf0>
 800e95a:	78b3      	ldrb	r3, [r6, #2]
 800e95c:	2f01      	cmp	r7, #1
 800e95e:	706b      	strb	r3, [r5, #1]
 800e960:	f105 0302 	add.w	r3, r5, #2
 800e964:	d04a      	beq.n	800e9fc <ucdr_deserialize_int32_t+0xf8>
 800e966:	7873      	ldrb	r3, [r6, #1]
 800e968:	2f02      	cmp	r7, #2
 800e96a:	70ab      	strb	r3, [r5, #2]
 800e96c:	f105 0303 	add.w	r3, r5, #3
 800e970:	d048      	beq.n	800ea04 <ucdr_deserialize_int32_t+0x100>
 800e972:	7833      	ldrb	r3, [r6, #0]
 800e974:	70eb      	strb	r3, [r5, #3]
 800e976:	6923      	ldr	r3, [r4, #16]
 800e978:	2104      	movs	r1, #4
 800e97a:	68a2      	ldr	r2, [r4, #8]
 800e97c:	3304      	adds	r3, #4
 800e97e:	7da0      	ldrb	r0, [r4, #22]
 800e980:	444a      	add	r2, r9
 800e982:	7561      	strb	r1, [r4, #21]
 800e984:	1bdb      	subs	r3, r3, r7
 800e986:	f080 0001 	eor.w	r0, r0, #1
 800e98a:	60a2      	str	r2, [r4, #8]
 800e98c:	6123      	str	r3, [r4, #16]
 800e98e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e992:	2104      	movs	r1, #4
 800e994:	4620      	mov	r0, r4
 800e996:	f000 fb87 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800e99a:	b1b0      	cbz	r0, 800e9ca <ucdr_deserialize_int32_t+0xc6>
 800e99c:	7d23      	ldrb	r3, [r4, #20]
 800e99e:	2b01      	cmp	r3, #1
 800e9a0:	68a3      	ldr	r3, [r4, #8]
 800e9a2:	d017      	beq.n	800e9d4 <ucdr_deserialize_int32_t+0xd0>
 800e9a4:	78db      	ldrb	r3, [r3, #3]
 800e9a6:	702b      	strb	r3, [r5, #0]
 800e9a8:	68a3      	ldr	r3, [r4, #8]
 800e9aa:	789b      	ldrb	r3, [r3, #2]
 800e9ac:	706b      	strb	r3, [r5, #1]
 800e9ae:	68a3      	ldr	r3, [r4, #8]
 800e9b0:	785b      	ldrb	r3, [r3, #1]
 800e9b2:	70ab      	strb	r3, [r5, #2]
 800e9b4:	68a3      	ldr	r3, [r4, #8]
 800e9b6:	781b      	ldrb	r3, [r3, #0]
 800e9b8:	70eb      	strb	r3, [r5, #3]
 800e9ba:	2104      	movs	r1, #4
 800e9bc:	68a2      	ldr	r2, [r4, #8]
 800e9be:	6923      	ldr	r3, [r4, #16]
 800e9c0:	440a      	add	r2, r1
 800e9c2:	7561      	strb	r1, [r4, #21]
 800e9c4:	440b      	add	r3, r1
 800e9c6:	60a2      	str	r2, [r4, #8]
 800e9c8:	6123      	str	r3, [r4, #16]
 800e9ca:	7da0      	ldrb	r0, [r4, #22]
 800e9cc:	f080 0001 	eor.w	r0, r0, #1
 800e9d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	602b      	str	r3, [r5, #0]
 800e9d8:	e7ef      	b.n	800e9ba <ucdr_deserialize_int32_t+0xb6>
 800e9da:	68a2      	ldr	r2, [r4, #8]
 800e9dc:	6923      	ldr	r3, [r4, #16]
 800e9de:	1bd2      	subs	r2, r2, r7
 800e9e0:	7da0      	ldrb	r0, [r4, #22]
 800e9e2:	1bdb      	subs	r3, r3, r7
 800e9e4:	f884 8015 	strb.w	r8, [r4, #21]
 800e9e8:	f080 0001 	eor.w	r0, r0, #1
 800e9ec:	60a2      	str	r2, [r4, #8]
 800e9ee:	6123      	str	r3, [r4, #16]
 800e9f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9f4:	68a3      	ldr	r3, [r4, #8]
 800e9f6:	789b      	ldrb	r3, [r3, #2]
 800e9f8:	706b      	strb	r3, [r5, #1]
 800e9fa:	1cab      	adds	r3, r5, #2
 800e9fc:	68a2      	ldr	r2, [r4, #8]
 800e9fe:	7852      	ldrb	r2, [r2, #1]
 800ea00:	f803 2b01 	strb.w	r2, [r3], #1
 800ea04:	68a2      	ldr	r2, [r4, #8]
 800ea06:	7812      	ldrb	r2, [r2, #0]
 800ea08:	701a      	strb	r2, [r3, #0]
 800ea0a:	e7b4      	b.n	800e976 <ucdr_deserialize_int32_t+0x72>
 800ea0c:	4631      	mov	r1, r6
 800ea0e:	463a      	mov	r2, r7
 800ea10:	4628      	mov	r0, r5
 800ea12:	f007 ff6e 	bl	80168f2 <memcpy>
 800ea16:	464a      	mov	r2, r9
 800ea18:	19e8      	adds	r0, r5, r7
 800ea1a:	68a1      	ldr	r1, [r4, #8]
 800ea1c:	f007 ff69 	bl	80168f2 <memcpy>
 800ea20:	e7a9      	b.n	800e976 <ucdr_deserialize_int32_t+0x72>
 800ea22:	bf00      	nop

0800ea24 <ucdr_serialize_double>:
 800ea24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea28:	4604      	mov	r4, r0
 800ea2a:	b082      	sub	sp, #8
 800ea2c:	2108      	movs	r1, #8
 800ea2e:	ed8d 0b00 	vstr	d0, [sp]
 800ea32:	f000 fb8d 	bl	800f150 <ucdr_buffer_alignment>
 800ea36:	4601      	mov	r1, r0
 800ea38:	4620      	mov	r0, r4
 800ea3a:	7d67      	ldrb	r7, [r4, #21]
 800ea3c:	f000 fbd0 	bl	800f1e0 <ucdr_advance_buffer>
 800ea40:	2108      	movs	r1, #8
 800ea42:	4620      	mov	r0, r4
 800ea44:	f000 fb24 	bl	800f090 <ucdr_check_buffer_available_for>
 800ea48:	2800      	cmp	r0, #0
 800ea4a:	d14e      	bne.n	800eaea <ucdr_serialize_double+0xc6>
 800ea4c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ea50:	42ab      	cmp	r3, r5
 800ea52:	d945      	bls.n	800eae0 <ucdr_serialize_double+0xbc>
 800ea54:	1b5e      	subs	r6, r3, r5
 800ea56:	60a3      	str	r3, [r4, #8]
 800ea58:	6923      	ldr	r3, [r4, #16]
 800ea5a:	4620      	mov	r0, r4
 800ea5c:	f1c6 0808 	rsb	r8, r6, #8
 800ea60:	4433      	add	r3, r6
 800ea62:	4641      	mov	r1, r8
 800ea64:	6123      	str	r3, [r4, #16]
 800ea66:	f000 fb1f 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800ea6a:	2800      	cmp	r0, #0
 800ea6c:	d074      	beq.n	800eb58 <ucdr_serialize_double+0x134>
 800ea6e:	7d23      	ldrb	r3, [r4, #20]
 800ea70:	2b01      	cmp	r3, #1
 800ea72:	f000 809b 	beq.w	800ebac <ucdr_serialize_double+0x188>
 800ea76:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ea7a:	702b      	strb	r3, [r5, #0]
 800ea7c:	2e00      	cmp	r6, #0
 800ea7e:	d078      	beq.n	800eb72 <ucdr_serialize_double+0x14e>
 800ea80:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ea84:	2e01      	cmp	r6, #1
 800ea86:	706b      	strb	r3, [r5, #1]
 800ea88:	d077      	beq.n	800eb7a <ucdr_serialize_double+0x156>
 800ea8a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ea8e:	2e02      	cmp	r6, #2
 800ea90:	70ab      	strb	r3, [r5, #2]
 800ea92:	d076      	beq.n	800eb82 <ucdr_serialize_double+0x15e>
 800ea94:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ea98:	2e03      	cmp	r6, #3
 800ea9a:	70eb      	strb	r3, [r5, #3]
 800ea9c:	d075      	beq.n	800eb8a <ucdr_serialize_double+0x166>
 800ea9e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800eaa2:	2e04      	cmp	r6, #4
 800eaa4:	712b      	strb	r3, [r5, #4]
 800eaa6:	d074      	beq.n	800eb92 <ucdr_serialize_double+0x16e>
 800eaa8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800eaac:	2e05      	cmp	r6, #5
 800eaae:	716b      	strb	r3, [r5, #5]
 800eab0:	d073      	beq.n	800eb9a <ucdr_serialize_double+0x176>
 800eab2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800eab6:	2e06      	cmp	r6, #6
 800eab8:	71ab      	strb	r3, [r5, #6]
 800eaba:	d072      	beq.n	800eba2 <ucdr_serialize_double+0x17e>
 800eabc:	f89d 3000 	ldrb.w	r3, [sp]
 800eac0:	71eb      	strb	r3, [r5, #7]
 800eac2:	6923      	ldr	r3, [r4, #16]
 800eac4:	2108      	movs	r1, #8
 800eac6:	68a2      	ldr	r2, [r4, #8]
 800eac8:	3308      	adds	r3, #8
 800eaca:	7da0      	ldrb	r0, [r4, #22]
 800eacc:	4442      	add	r2, r8
 800eace:	7561      	strb	r1, [r4, #21]
 800ead0:	1b9e      	subs	r6, r3, r6
 800ead2:	f080 0001 	eor.w	r0, r0, #1
 800ead6:	60a2      	str	r2, [r4, #8]
 800ead8:	6126      	str	r6, [r4, #16]
 800eada:	b002      	add	sp, #8
 800eadc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eae0:	2108      	movs	r1, #8
 800eae2:	4620      	mov	r0, r4
 800eae4:	f000 fae0 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800eae8:	b350      	cbz	r0, 800eb40 <ucdr_serialize_double+0x11c>
 800eaea:	7d23      	ldrb	r3, [r4, #20]
 800eaec:	2b01      	cmp	r3, #1
 800eaee:	d02d      	beq.n	800eb4c <ucdr_serialize_double+0x128>
 800eaf0:	68a3      	ldr	r3, [r4, #8]
 800eaf2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800eaf6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eafa:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800eafe:	7018      	strb	r0, [r3, #0]
 800eb00:	68a3      	ldr	r3, [r4, #8]
 800eb02:	705a      	strb	r2, [r3, #1]
 800eb04:	68a3      	ldr	r3, [r4, #8]
 800eb06:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800eb0a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800eb0e:	7099      	strb	r1, [r3, #2]
 800eb10:	68a3      	ldr	r3, [r4, #8]
 800eb12:	70da      	strb	r2, [r3, #3]
 800eb14:	68a3      	ldr	r3, [r4, #8]
 800eb16:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800eb1a:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800eb1e:	7118      	strb	r0, [r3, #4]
 800eb20:	68a3      	ldr	r3, [r4, #8]
 800eb22:	715a      	strb	r2, [r3, #5]
 800eb24:	68a3      	ldr	r3, [r4, #8]
 800eb26:	f89d 2000 	ldrb.w	r2, [sp]
 800eb2a:	7199      	strb	r1, [r3, #6]
 800eb2c:	68a3      	ldr	r3, [r4, #8]
 800eb2e:	71da      	strb	r2, [r3, #7]
 800eb30:	2108      	movs	r1, #8
 800eb32:	68a2      	ldr	r2, [r4, #8]
 800eb34:	6923      	ldr	r3, [r4, #16]
 800eb36:	440a      	add	r2, r1
 800eb38:	7561      	strb	r1, [r4, #21]
 800eb3a:	440b      	add	r3, r1
 800eb3c:	60a2      	str	r2, [r4, #8]
 800eb3e:	6123      	str	r3, [r4, #16]
 800eb40:	7da0      	ldrb	r0, [r4, #22]
 800eb42:	f080 0001 	eor.w	r0, r0, #1
 800eb46:	b002      	add	sp, #8
 800eb48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb4c:	466b      	mov	r3, sp
 800eb4e:	68a2      	ldr	r2, [r4, #8]
 800eb50:	cb03      	ldmia	r3!, {r0, r1}
 800eb52:	6010      	str	r0, [r2, #0]
 800eb54:	6051      	str	r1, [r2, #4]
 800eb56:	e7eb      	b.n	800eb30 <ucdr_serialize_double+0x10c>
 800eb58:	68a2      	ldr	r2, [r4, #8]
 800eb5a:	6923      	ldr	r3, [r4, #16]
 800eb5c:	7da0      	ldrb	r0, [r4, #22]
 800eb5e:	1b92      	subs	r2, r2, r6
 800eb60:	1b9b      	subs	r3, r3, r6
 800eb62:	7567      	strb	r7, [r4, #21]
 800eb64:	f080 0001 	eor.w	r0, r0, #1
 800eb68:	60a2      	str	r2, [r4, #8]
 800eb6a:	6123      	str	r3, [r4, #16]
 800eb6c:	b002      	add	sp, #8
 800eb6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb72:	68a3      	ldr	r3, [r4, #8]
 800eb74:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eb78:	701a      	strb	r2, [r3, #0]
 800eb7a:	68a3      	ldr	r3, [r4, #8]
 800eb7c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800eb80:	701a      	strb	r2, [r3, #0]
 800eb82:	68a3      	ldr	r3, [r4, #8]
 800eb84:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800eb88:	701a      	strb	r2, [r3, #0]
 800eb8a:	68a3      	ldr	r3, [r4, #8]
 800eb8c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800eb90:	701a      	strb	r2, [r3, #0]
 800eb92:	68a3      	ldr	r3, [r4, #8]
 800eb94:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800eb98:	701a      	strb	r2, [r3, #0]
 800eb9a:	68a3      	ldr	r3, [r4, #8]
 800eb9c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800eba0:	701a      	strb	r2, [r3, #0]
 800eba2:	68a3      	ldr	r3, [r4, #8]
 800eba4:	f89d 2000 	ldrb.w	r2, [sp]
 800eba8:	701a      	strb	r2, [r3, #0]
 800ebaa:	e78a      	b.n	800eac2 <ucdr_serialize_double+0x9e>
 800ebac:	4628      	mov	r0, r5
 800ebae:	466d      	mov	r5, sp
 800ebb0:	4632      	mov	r2, r6
 800ebb2:	4629      	mov	r1, r5
 800ebb4:	f007 fe9d 	bl	80168f2 <memcpy>
 800ebb8:	4642      	mov	r2, r8
 800ebba:	19a9      	adds	r1, r5, r6
 800ebbc:	68a0      	ldr	r0, [r4, #8]
 800ebbe:	f007 fe98 	bl	80168f2 <memcpy>
 800ebc2:	e77e      	b.n	800eac2 <ucdr_serialize_double+0x9e>

0800ebc4 <ucdr_serialize_endian_double>:
 800ebc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ebc8:	4604      	mov	r4, r0
 800ebca:	b083      	sub	sp, #12
 800ebcc:	460e      	mov	r6, r1
 800ebce:	2108      	movs	r1, #8
 800ebd0:	ed8d 0b00 	vstr	d0, [sp]
 800ebd4:	f000 fabc 	bl	800f150 <ucdr_buffer_alignment>
 800ebd8:	4601      	mov	r1, r0
 800ebda:	4620      	mov	r0, r4
 800ebdc:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ebe0:	f000 fafe 	bl	800f1e0 <ucdr_advance_buffer>
 800ebe4:	2108      	movs	r1, #8
 800ebe6:	4620      	mov	r0, r4
 800ebe8:	f000 fa52 	bl	800f090 <ucdr_check_buffer_available_for>
 800ebec:	2800      	cmp	r0, #0
 800ebee:	d14d      	bne.n	800ec8c <ucdr_serialize_endian_double+0xc8>
 800ebf0:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800ebf4:	42bd      	cmp	r5, r7
 800ebf6:	d944      	bls.n	800ec82 <ucdr_serialize_endian_double+0xbe>
 800ebf8:	6923      	ldr	r3, [r4, #16]
 800ebfa:	4620      	mov	r0, r4
 800ebfc:	60a5      	str	r5, [r4, #8]
 800ebfe:	1bed      	subs	r5, r5, r7
 800ec00:	442b      	add	r3, r5
 800ec02:	f1c5 0908 	rsb	r9, r5, #8
 800ec06:	6123      	str	r3, [r4, #16]
 800ec08:	4649      	mov	r1, r9
 800ec0a:	f000 fa4d 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800ec0e:	2800      	cmp	r0, #0
 800ec10:	d072      	beq.n	800ecf8 <ucdr_serialize_endian_double+0x134>
 800ec12:	2e01      	cmp	r6, #1
 800ec14:	f000 809b 	beq.w	800ed4e <ucdr_serialize_endian_double+0x18a>
 800ec18:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ec1c:	703b      	strb	r3, [r7, #0]
 800ec1e:	2d00      	cmp	r5, #0
 800ec20:	d078      	beq.n	800ed14 <ucdr_serialize_endian_double+0x150>
 800ec22:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ec26:	2d01      	cmp	r5, #1
 800ec28:	707b      	strb	r3, [r7, #1]
 800ec2a:	d077      	beq.n	800ed1c <ucdr_serialize_endian_double+0x158>
 800ec2c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ec30:	2d02      	cmp	r5, #2
 800ec32:	70bb      	strb	r3, [r7, #2]
 800ec34:	d076      	beq.n	800ed24 <ucdr_serialize_endian_double+0x160>
 800ec36:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ec3a:	2d03      	cmp	r5, #3
 800ec3c:	70fb      	strb	r3, [r7, #3]
 800ec3e:	d075      	beq.n	800ed2c <ucdr_serialize_endian_double+0x168>
 800ec40:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ec44:	2d04      	cmp	r5, #4
 800ec46:	713b      	strb	r3, [r7, #4]
 800ec48:	d074      	beq.n	800ed34 <ucdr_serialize_endian_double+0x170>
 800ec4a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800ec4e:	2d05      	cmp	r5, #5
 800ec50:	717b      	strb	r3, [r7, #5]
 800ec52:	d073      	beq.n	800ed3c <ucdr_serialize_endian_double+0x178>
 800ec54:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800ec58:	2d06      	cmp	r5, #6
 800ec5a:	71bb      	strb	r3, [r7, #6]
 800ec5c:	d072      	beq.n	800ed44 <ucdr_serialize_endian_double+0x180>
 800ec5e:	f89d 3000 	ldrb.w	r3, [sp]
 800ec62:	71fb      	strb	r3, [r7, #7]
 800ec64:	6923      	ldr	r3, [r4, #16]
 800ec66:	2108      	movs	r1, #8
 800ec68:	68a2      	ldr	r2, [r4, #8]
 800ec6a:	3308      	adds	r3, #8
 800ec6c:	7da0      	ldrb	r0, [r4, #22]
 800ec6e:	444a      	add	r2, r9
 800ec70:	7561      	strb	r1, [r4, #21]
 800ec72:	1b5d      	subs	r5, r3, r5
 800ec74:	f080 0001 	eor.w	r0, r0, #1
 800ec78:	60a2      	str	r2, [r4, #8]
 800ec7a:	6125      	str	r5, [r4, #16]
 800ec7c:	b003      	add	sp, #12
 800ec7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec82:	2108      	movs	r1, #8
 800ec84:	4620      	mov	r0, r4
 800ec86:	f000 fa0f 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800ec8a:	b348      	cbz	r0, 800ece0 <ucdr_serialize_endian_double+0x11c>
 800ec8c:	2e01      	cmp	r6, #1
 800ec8e:	d02d      	beq.n	800ecec <ucdr_serialize_endian_double+0x128>
 800ec90:	68a3      	ldr	r3, [r4, #8]
 800ec92:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800ec96:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ec9a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800ec9e:	7018      	strb	r0, [r3, #0]
 800eca0:	68a3      	ldr	r3, [r4, #8]
 800eca2:	705a      	strb	r2, [r3, #1]
 800eca4:	68a3      	ldr	r3, [r4, #8]
 800eca6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ecaa:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800ecae:	7099      	strb	r1, [r3, #2]
 800ecb0:	68a3      	ldr	r3, [r4, #8]
 800ecb2:	70da      	strb	r2, [r3, #3]
 800ecb4:	68a3      	ldr	r3, [r4, #8]
 800ecb6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ecba:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800ecbe:	7118      	strb	r0, [r3, #4]
 800ecc0:	68a3      	ldr	r3, [r4, #8]
 800ecc2:	715a      	strb	r2, [r3, #5]
 800ecc4:	68a3      	ldr	r3, [r4, #8]
 800ecc6:	f89d 2000 	ldrb.w	r2, [sp]
 800ecca:	7199      	strb	r1, [r3, #6]
 800eccc:	68a3      	ldr	r3, [r4, #8]
 800ecce:	71da      	strb	r2, [r3, #7]
 800ecd0:	2108      	movs	r1, #8
 800ecd2:	68a2      	ldr	r2, [r4, #8]
 800ecd4:	6923      	ldr	r3, [r4, #16]
 800ecd6:	440a      	add	r2, r1
 800ecd8:	7561      	strb	r1, [r4, #21]
 800ecda:	440b      	add	r3, r1
 800ecdc:	60a2      	str	r2, [r4, #8]
 800ecde:	6123      	str	r3, [r4, #16]
 800ece0:	7da0      	ldrb	r0, [r4, #22]
 800ece2:	f080 0001 	eor.w	r0, r0, #1
 800ece6:	b003      	add	sp, #12
 800ece8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ecec:	466b      	mov	r3, sp
 800ecee:	68a2      	ldr	r2, [r4, #8]
 800ecf0:	cb03      	ldmia	r3!, {r0, r1}
 800ecf2:	6010      	str	r0, [r2, #0]
 800ecf4:	6051      	str	r1, [r2, #4]
 800ecf6:	e7eb      	b.n	800ecd0 <ucdr_serialize_endian_double+0x10c>
 800ecf8:	68a2      	ldr	r2, [r4, #8]
 800ecfa:	6923      	ldr	r3, [r4, #16]
 800ecfc:	7da0      	ldrb	r0, [r4, #22]
 800ecfe:	1b52      	subs	r2, r2, r5
 800ed00:	1b5b      	subs	r3, r3, r5
 800ed02:	f884 8015 	strb.w	r8, [r4, #21]
 800ed06:	f080 0001 	eor.w	r0, r0, #1
 800ed0a:	60a2      	str	r2, [r4, #8]
 800ed0c:	6123      	str	r3, [r4, #16]
 800ed0e:	b003      	add	sp, #12
 800ed10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed14:	68a3      	ldr	r3, [r4, #8]
 800ed16:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ed1a:	701a      	strb	r2, [r3, #0]
 800ed1c:	68a3      	ldr	r3, [r4, #8]
 800ed1e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ed22:	701a      	strb	r2, [r3, #0]
 800ed24:	68a3      	ldr	r3, [r4, #8]
 800ed26:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ed2a:	701a      	strb	r2, [r3, #0]
 800ed2c:	68a3      	ldr	r3, [r4, #8]
 800ed2e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ed32:	701a      	strb	r2, [r3, #0]
 800ed34:	68a3      	ldr	r3, [r4, #8]
 800ed36:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ed3a:	701a      	strb	r2, [r3, #0]
 800ed3c:	68a3      	ldr	r3, [r4, #8]
 800ed3e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ed42:	701a      	strb	r2, [r3, #0]
 800ed44:	68a3      	ldr	r3, [r4, #8]
 800ed46:	f89d 2000 	ldrb.w	r2, [sp]
 800ed4a:	701a      	strb	r2, [r3, #0]
 800ed4c:	e78a      	b.n	800ec64 <ucdr_serialize_endian_double+0xa0>
 800ed4e:	466e      	mov	r6, sp
 800ed50:	462a      	mov	r2, r5
 800ed52:	4638      	mov	r0, r7
 800ed54:	4631      	mov	r1, r6
 800ed56:	f007 fdcc 	bl	80168f2 <memcpy>
 800ed5a:	464a      	mov	r2, r9
 800ed5c:	1971      	adds	r1, r6, r5
 800ed5e:	68a0      	ldr	r0, [r4, #8]
 800ed60:	f007 fdc7 	bl	80168f2 <memcpy>
 800ed64:	e77e      	b.n	800ec64 <ucdr_serialize_endian_double+0xa0>
 800ed66:	bf00      	nop

0800ed68 <ucdr_deserialize_double>:
 800ed68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed6c:	4604      	mov	r4, r0
 800ed6e:	460d      	mov	r5, r1
 800ed70:	2108      	movs	r1, #8
 800ed72:	f000 f9ed 	bl	800f150 <ucdr_buffer_alignment>
 800ed76:	4601      	mov	r1, r0
 800ed78:	4620      	mov	r0, r4
 800ed7a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ed7e:	f000 fa2f 	bl	800f1e0 <ucdr_advance_buffer>
 800ed82:	2108      	movs	r1, #8
 800ed84:	4620      	mov	r0, r4
 800ed86:	f000 f983 	bl	800f090 <ucdr_check_buffer_available_for>
 800ed8a:	2800      	cmp	r0, #0
 800ed8c:	d151      	bne.n	800ee32 <ucdr_deserialize_double+0xca>
 800ed8e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ed92:	42be      	cmp	r6, r7
 800ed94:	d948      	bls.n	800ee28 <ucdr_deserialize_double+0xc0>
 800ed96:	6923      	ldr	r3, [r4, #16]
 800ed98:	4620      	mov	r0, r4
 800ed9a:	60a6      	str	r6, [r4, #8]
 800ed9c:	1bf6      	subs	r6, r6, r7
 800ed9e:	4433      	add	r3, r6
 800eda0:	f1c6 0908 	rsb	r9, r6, #8
 800eda4:	6123      	str	r3, [r4, #16]
 800eda6:	4649      	mov	r1, r9
 800eda8:	f000 f97e 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800edac:	2800      	cmp	r0, #0
 800edae:	d06d      	beq.n	800ee8c <ucdr_deserialize_double+0x124>
 800edb0:	7d23      	ldrb	r3, [r4, #20]
 800edb2:	2b01      	cmp	r3, #1
 800edb4:	f000 8093 	beq.w	800eede <ucdr_deserialize_double+0x176>
 800edb8:	79fb      	ldrb	r3, [r7, #7]
 800edba:	702b      	strb	r3, [r5, #0]
 800edbc:	2e00      	cmp	r6, #0
 800edbe:	d072      	beq.n	800eea6 <ucdr_deserialize_double+0x13e>
 800edc0:	79bb      	ldrb	r3, [r7, #6]
 800edc2:	2e01      	cmp	r6, #1
 800edc4:	706b      	strb	r3, [r5, #1]
 800edc6:	f105 0302 	add.w	r3, r5, #2
 800edca:	d070      	beq.n	800eeae <ucdr_deserialize_double+0x146>
 800edcc:	797b      	ldrb	r3, [r7, #5]
 800edce:	2e02      	cmp	r6, #2
 800edd0:	70ab      	strb	r3, [r5, #2]
 800edd2:	f105 0303 	add.w	r3, r5, #3
 800edd6:	d06e      	beq.n	800eeb6 <ucdr_deserialize_double+0x14e>
 800edd8:	793b      	ldrb	r3, [r7, #4]
 800edda:	2e03      	cmp	r6, #3
 800eddc:	70eb      	strb	r3, [r5, #3]
 800edde:	f105 0304 	add.w	r3, r5, #4
 800ede2:	d06c      	beq.n	800eebe <ucdr_deserialize_double+0x156>
 800ede4:	78fb      	ldrb	r3, [r7, #3]
 800ede6:	2e04      	cmp	r6, #4
 800ede8:	712b      	strb	r3, [r5, #4]
 800edea:	f105 0305 	add.w	r3, r5, #5
 800edee:	d06a      	beq.n	800eec6 <ucdr_deserialize_double+0x15e>
 800edf0:	78bb      	ldrb	r3, [r7, #2]
 800edf2:	2e05      	cmp	r6, #5
 800edf4:	716b      	strb	r3, [r5, #5]
 800edf6:	f105 0306 	add.w	r3, r5, #6
 800edfa:	d068      	beq.n	800eece <ucdr_deserialize_double+0x166>
 800edfc:	787b      	ldrb	r3, [r7, #1]
 800edfe:	2e06      	cmp	r6, #6
 800ee00:	71ab      	strb	r3, [r5, #6]
 800ee02:	f105 0307 	add.w	r3, r5, #7
 800ee06:	d066      	beq.n	800eed6 <ucdr_deserialize_double+0x16e>
 800ee08:	783b      	ldrb	r3, [r7, #0]
 800ee0a:	71eb      	strb	r3, [r5, #7]
 800ee0c:	6923      	ldr	r3, [r4, #16]
 800ee0e:	2108      	movs	r1, #8
 800ee10:	68a2      	ldr	r2, [r4, #8]
 800ee12:	3308      	adds	r3, #8
 800ee14:	7da0      	ldrb	r0, [r4, #22]
 800ee16:	444a      	add	r2, r9
 800ee18:	7561      	strb	r1, [r4, #21]
 800ee1a:	1b9e      	subs	r6, r3, r6
 800ee1c:	f080 0001 	eor.w	r0, r0, #1
 800ee20:	60a2      	str	r2, [r4, #8]
 800ee22:	6126      	str	r6, [r4, #16]
 800ee24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee28:	2108      	movs	r1, #8
 800ee2a:	4620      	mov	r0, r4
 800ee2c:	f000 f93c 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800ee30:	b310      	cbz	r0, 800ee78 <ucdr_deserialize_double+0x110>
 800ee32:	7d23      	ldrb	r3, [r4, #20]
 800ee34:	2b01      	cmp	r3, #1
 800ee36:	68a3      	ldr	r3, [r4, #8]
 800ee38:	d023      	beq.n	800ee82 <ucdr_deserialize_double+0x11a>
 800ee3a:	79db      	ldrb	r3, [r3, #7]
 800ee3c:	702b      	strb	r3, [r5, #0]
 800ee3e:	68a3      	ldr	r3, [r4, #8]
 800ee40:	799b      	ldrb	r3, [r3, #6]
 800ee42:	706b      	strb	r3, [r5, #1]
 800ee44:	68a3      	ldr	r3, [r4, #8]
 800ee46:	795b      	ldrb	r3, [r3, #5]
 800ee48:	70ab      	strb	r3, [r5, #2]
 800ee4a:	68a3      	ldr	r3, [r4, #8]
 800ee4c:	791b      	ldrb	r3, [r3, #4]
 800ee4e:	70eb      	strb	r3, [r5, #3]
 800ee50:	68a3      	ldr	r3, [r4, #8]
 800ee52:	78db      	ldrb	r3, [r3, #3]
 800ee54:	712b      	strb	r3, [r5, #4]
 800ee56:	68a3      	ldr	r3, [r4, #8]
 800ee58:	789b      	ldrb	r3, [r3, #2]
 800ee5a:	716b      	strb	r3, [r5, #5]
 800ee5c:	68a3      	ldr	r3, [r4, #8]
 800ee5e:	785b      	ldrb	r3, [r3, #1]
 800ee60:	71ab      	strb	r3, [r5, #6]
 800ee62:	68a3      	ldr	r3, [r4, #8]
 800ee64:	781b      	ldrb	r3, [r3, #0]
 800ee66:	71eb      	strb	r3, [r5, #7]
 800ee68:	2108      	movs	r1, #8
 800ee6a:	68a2      	ldr	r2, [r4, #8]
 800ee6c:	6923      	ldr	r3, [r4, #16]
 800ee6e:	440a      	add	r2, r1
 800ee70:	7561      	strb	r1, [r4, #21]
 800ee72:	440b      	add	r3, r1
 800ee74:	60a2      	str	r2, [r4, #8]
 800ee76:	6123      	str	r3, [r4, #16]
 800ee78:	7da0      	ldrb	r0, [r4, #22]
 800ee7a:	f080 0001 	eor.w	r0, r0, #1
 800ee7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee82:	681a      	ldr	r2, [r3, #0]
 800ee84:	685b      	ldr	r3, [r3, #4]
 800ee86:	602a      	str	r2, [r5, #0]
 800ee88:	606b      	str	r3, [r5, #4]
 800ee8a:	e7ed      	b.n	800ee68 <ucdr_deserialize_double+0x100>
 800ee8c:	68a2      	ldr	r2, [r4, #8]
 800ee8e:	6923      	ldr	r3, [r4, #16]
 800ee90:	1b92      	subs	r2, r2, r6
 800ee92:	7da0      	ldrb	r0, [r4, #22]
 800ee94:	1b9b      	subs	r3, r3, r6
 800ee96:	f884 8015 	strb.w	r8, [r4, #21]
 800ee9a:	f080 0001 	eor.w	r0, r0, #1
 800ee9e:	60a2      	str	r2, [r4, #8]
 800eea0:	6123      	str	r3, [r4, #16]
 800eea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eea6:	68a3      	ldr	r3, [r4, #8]
 800eea8:	799b      	ldrb	r3, [r3, #6]
 800eeaa:	706b      	strb	r3, [r5, #1]
 800eeac:	1cab      	adds	r3, r5, #2
 800eeae:	68a2      	ldr	r2, [r4, #8]
 800eeb0:	7952      	ldrb	r2, [r2, #5]
 800eeb2:	f803 2b01 	strb.w	r2, [r3], #1
 800eeb6:	68a2      	ldr	r2, [r4, #8]
 800eeb8:	7912      	ldrb	r2, [r2, #4]
 800eeba:	f803 2b01 	strb.w	r2, [r3], #1
 800eebe:	68a2      	ldr	r2, [r4, #8]
 800eec0:	78d2      	ldrb	r2, [r2, #3]
 800eec2:	f803 2b01 	strb.w	r2, [r3], #1
 800eec6:	68a2      	ldr	r2, [r4, #8]
 800eec8:	7892      	ldrb	r2, [r2, #2]
 800eeca:	f803 2b01 	strb.w	r2, [r3], #1
 800eece:	68a2      	ldr	r2, [r4, #8]
 800eed0:	7852      	ldrb	r2, [r2, #1]
 800eed2:	f803 2b01 	strb.w	r2, [r3], #1
 800eed6:	68a2      	ldr	r2, [r4, #8]
 800eed8:	7812      	ldrb	r2, [r2, #0]
 800eeda:	701a      	strb	r2, [r3, #0]
 800eedc:	e796      	b.n	800ee0c <ucdr_deserialize_double+0xa4>
 800eede:	4639      	mov	r1, r7
 800eee0:	4632      	mov	r2, r6
 800eee2:	4628      	mov	r0, r5
 800eee4:	f007 fd05 	bl	80168f2 <memcpy>
 800eee8:	464a      	mov	r2, r9
 800eeea:	19a8      	adds	r0, r5, r6
 800eeec:	68a1      	ldr	r1, [r4, #8]
 800eeee:	f007 fd00 	bl	80168f2 <memcpy>
 800eef2:	e78b      	b.n	800ee0c <ucdr_deserialize_double+0xa4>

0800eef4 <ucdr_deserialize_endian_double>:
 800eef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eef8:	4604      	mov	r4, r0
 800eefa:	460f      	mov	r7, r1
 800eefc:	2108      	movs	r1, #8
 800eefe:	4615      	mov	r5, r2
 800ef00:	f000 f926 	bl	800f150 <ucdr_buffer_alignment>
 800ef04:	4601      	mov	r1, r0
 800ef06:	4620      	mov	r0, r4
 800ef08:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ef0c:	f000 f968 	bl	800f1e0 <ucdr_advance_buffer>
 800ef10:	2108      	movs	r1, #8
 800ef12:	4620      	mov	r0, r4
 800ef14:	f000 f8bc 	bl	800f090 <ucdr_check_buffer_available_for>
 800ef18:	2800      	cmp	r0, #0
 800ef1a:	d159      	bne.n	800efd0 <ucdr_deserialize_endian_double+0xdc>
 800ef1c:	e9d4 6901 	ldrd	r6, r9, [r4, #4]
 800ef20:	454e      	cmp	r6, r9
 800ef22:	d950      	bls.n	800efc6 <ucdr_deserialize_endian_double+0xd2>
 800ef24:	6923      	ldr	r3, [r4, #16]
 800ef26:	4620      	mov	r0, r4
 800ef28:	60a6      	str	r6, [r4, #8]
 800ef2a:	eba6 0609 	sub.w	r6, r6, r9
 800ef2e:	4433      	add	r3, r6
 800ef30:	f1c6 0a08 	rsb	sl, r6, #8
 800ef34:	6123      	str	r3, [r4, #16]
 800ef36:	4651      	mov	r1, sl
 800ef38:	f000 f8b6 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800ef3c:	2800      	cmp	r0, #0
 800ef3e:	d073      	beq.n	800f028 <ucdr_deserialize_endian_double+0x134>
 800ef40:	2f01      	cmp	r7, #1
 800ef42:	f000 809a 	beq.w	800f07a <ucdr_deserialize_endian_double+0x186>
 800ef46:	f899 3007 	ldrb.w	r3, [r9, #7]
 800ef4a:	702b      	strb	r3, [r5, #0]
 800ef4c:	2e00      	cmp	r6, #0
 800ef4e:	d078      	beq.n	800f042 <ucdr_deserialize_endian_double+0x14e>
 800ef50:	f899 3006 	ldrb.w	r3, [r9, #6]
 800ef54:	2e01      	cmp	r6, #1
 800ef56:	706b      	strb	r3, [r5, #1]
 800ef58:	f105 0302 	add.w	r3, r5, #2
 800ef5c:	d075      	beq.n	800f04a <ucdr_deserialize_endian_double+0x156>
 800ef5e:	f899 3005 	ldrb.w	r3, [r9, #5]
 800ef62:	2e02      	cmp	r6, #2
 800ef64:	70ab      	strb	r3, [r5, #2]
 800ef66:	f105 0303 	add.w	r3, r5, #3
 800ef6a:	d072      	beq.n	800f052 <ucdr_deserialize_endian_double+0x15e>
 800ef6c:	f899 3004 	ldrb.w	r3, [r9, #4]
 800ef70:	2e03      	cmp	r6, #3
 800ef72:	70eb      	strb	r3, [r5, #3]
 800ef74:	f105 0304 	add.w	r3, r5, #4
 800ef78:	d06f      	beq.n	800f05a <ucdr_deserialize_endian_double+0x166>
 800ef7a:	f899 3003 	ldrb.w	r3, [r9, #3]
 800ef7e:	2e04      	cmp	r6, #4
 800ef80:	712b      	strb	r3, [r5, #4]
 800ef82:	f105 0305 	add.w	r3, r5, #5
 800ef86:	d06c      	beq.n	800f062 <ucdr_deserialize_endian_double+0x16e>
 800ef88:	f899 3002 	ldrb.w	r3, [r9, #2]
 800ef8c:	2e05      	cmp	r6, #5
 800ef8e:	716b      	strb	r3, [r5, #5]
 800ef90:	f105 0306 	add.w	r3, r5, #6
 800ef94:	d069      	beq.n	800f06a <ucdr_deserialize_endian_double+0x176>
 800ef96:	f899 3001 	ldrb.w	r3, [r9, #1]
 800ef9a:	2e06      	cmp	r6, #6
 800ef9c:	71ab      	strb	r3, [r5, #6]
 800ef9e:	f105 0307 	add.w	r3, r5, #7
 800efa2:	d066      	beq.n	800f072 <ucdr_deserialize_endian_double+0x17e>
 800efa4:	f899 3000 	ldrb.w	r3, [r9]
 800efa8:	71eb      	strb	r3, [r5, #7]
 800efaa:	6923      	ldr	r3, [r4, #16]
 800efac:	2108      	movs	r1, #8
 800efae:	68a2      	ldr	r2, [r4, #8]
 800efb0:	3308      	adds	r3, #8
 800efb2:	7da0      	ldrb	r0, [r4, #22]
 800efb4:	4452      	add	r2, sl
 800efb6:	7561      	strb	r1, [r4, #21]
 800efb8:	1b9e      	subs	r6, r3, r6
 800efba:	f080 0001 	eor.w	r0, r0, #1
 800efbe:	60a2      	str	r2, [r4, #8]
 800efc0:	6126      	str	r6, [r4, #16]
 800efc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efc6:	2108      	movs	r1, #8
 800efc8:	4620      	mov	r0, r4
 800efca:	f000 f86d 	bl	800f0a8 <ucdr_check_final_buffer_behavior>
 800efce:	b308      	cbz	r0, 800f014 <ucdr_deserialize_endian_double+0x120>
 800efd0:	2f01      	cmp	r7, #1
 800efd2:	68a3      	ldr	r3, [r4, #8]
 800efd4:	d023      	beq.n	800f01e <ucdr_deserialize_endian_double+0x12a>
 800efd6:	79db      	ldrb	r3, [r3, #7]
 800efd8:	702b      	strb	r3, [r5, #0]
 800efda:	68a3      	ldr	r3, [r4, #8]
 800efdc:	799b      	ldrb	r3, [r3, #6]
 800efde:	706b      	strb	r3, [r5, #1]
 800efe0:	68a3      	ldr	r3, [r4, #8]
 800efe2:	795b      	ldrb	r3, [r3, #5]
 800efe4:	70ab      	strb	r3, [r5, #2]
 800efe6:	68a3      	ldr	r3, [r4, #8]
 800efe8:	791b      	ldrb	r3, [r3, #4]
 800efea:	70eb      	strb	r3, [r5, #3]
 800efec:	68a3      	ldr	r3, [r4, #8]
 800efee:	78db      	ldrb	r3, [r3, #3]
 800eff0:	712b      	strb	r3, [r5, #4]
 800eff2:	68a3      	ldr	r3, [r4, #8]
 800eff4:	789b      	ldrb	r3, [r3, #2]
 800eff6:	716b      	strb	r3, [r5, #5]
 800eff8:	68a3      	ldr	r3, [r4, #8]
 800effa:	785b      	ldrb	r3, [r3, #1]
 800effc:	71ab      	strb	r3, [r5, #6]
 800effe:	68a3      	ldr	r3, [r4, #8]
 800f000:	781b      	ldrb	r3, [r3, #0]
 800f002:	71eb      	strb	r3, [r5, #7]
 800f004:	2108      	movs	r1, #8
 800f006:	68a2      	ldr	r2, [r4, #8]
 800f008:	6923      	ldr	r3, [r4, #16]
 800f00a:	440a      	add	r2, r1
 800f00c:	7561      	strb	r1, [r4, #21]
 800f00e:	440b      	add	r3, r1
 800f010:	60a2      	str	r2, [r4, #8]
 800f012:	6123      	str	r3, [r4, #16]
 800f014:	7da0      	ldrb	r0, [r4, #22]
 800f016:	f080 0001 	eor.w	r0, r0, #1
 800f01a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f01e:	681a      	ldr	r2, [r3, #0]
 800f020:	685b      	ldr	r3, [r3, #4]
 800f022:	602a      	str	r2, [r5, #0]
 800f024:	606b      	str	r3, [r5, #4]
 800f026:	e7ed      	b.n	800f004 <ucdr_deserialize_endian_double+0x110>
 800f028:	68a2      	ldr	r2, [r4, #8]
 800f02a:	6923      	ldr	r3, [r4, #16]
 800f02c:	1b92      	subs	r2, r2, r6
 800f02e:	7da0      	ldrb	r0, [r4, #22]
 800f030:	1b9b      	subs	r3, r3, r6
 800f032:	f884 8015 	strb.w	r8, [r4, #21]
 800f036:	f080 0001 	eor.w	r0, r0, #1
 800f03a:	60a2      	str	r2, [r4, #8]
 800f03c:	6123      	str	r3, [r4, #16]
 800f03e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f042:	68a3      	ldr	r3, [r4, #8]
 800f044:	799b      	ldrb	r3, [r3, #6]
 800f046:	706b      	strb	r3, [r5, #1]
 800f048:	1cab      	adds	r3, r5, #2
 800f04a:	68a2      	ldr	r2, [r4, #8]
 800f04c:	7952      	ldrb	r2, [r2, #5]
 800f04e:	f803 2b01 	strb.w	r2, [r3], #1
 800f052:	68a2      	ldr	r2, [r4, #8]
 800f054:	7912      	ldrb	r2, [r2, #4]
 800f056:	f803 2b01 	strb.w	r2, [r3], #1
 800f05a:	68a2      	ldr	r2, [r4, #8]
 800f05c:	78d2      	ldrb	r2, [r2, #3]
 800f05e:	f803 2b01 	strb.w	r2, [r3], #1
 800f062:	68a2      	ldr	r2, [r4, #8]
 800f064:	7892      	ldrb	r2, [r2, #2]
 800f066:	f803 2b01 	strb.w	r2, [r3], #1
 800f06a:	68a2      	ldr	r2, [r4, #8]
 800f06c:	7852      	ldrb	r2, [r2, #1]
 800f06e:	f803 2b01 	strb.w	r2, [r3], #1
 800f072:	68a2      	ldr	r2, [r4, #8]
 800f074:	7812      	ldrb	r2, [r2, #0]
 800f076:	701a      	strb	r2, [r3, #0]
 800f078:	e797      	b.n	800efaa <ucdr_deserialize_endian_double+0xb6>
 800f07a:	4649      	mov	r1, r9
 800f07c:	4632      	mov	r2, r6
 800f07e:	4628      	mov	r0, r5
 800f080:	f007 fc37 	bl	80168f2 <memcpy>
 800f084:	4652      	mov	r2, sl
 800f086:	19a8      	adds	r0, r5, r6
 800f088:	68a1      	ldr	r1, [r4, #8]
 800f08a:	f007 fc32 	bl	80168f2 <memcpy>
 800f08e:	e78c      	b.n	800efaa <ucdr_deserialize_endian_double+0xb6>

0800f090 <ucdr_check_buffer_available_for>:
 800f090:	7d83      	ldrb	r3, [r0, #22]
 800f092:	b93b      	cbnz	r3, 800f0a4 <ucdr_check_buffer_available_for+0x14>
 800f094:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800f098:	4419      	add	r1, r3
 800f09a:	4288      	cmp	r0, r1
 800f09c:	bf34      	ite	cc
 800f09e:	2000      	movcc	r0, #0
 800f0a0:	2001      	movcs	r0, #1
 800f0a2:	4770      	bx	lr
 800f0a4:	2000      	movs	r0, #0
 800f0a6:	4770      	bx	lr

0800f0a8 <ucdr_check_final_buffer_behavior>:
 800f0a8:	7d83      	ldrb	r3, [r0, #22]
 800f0aa:	b943      	cbnz	r3, 800f0be <ucdr_check_final_buffer_behavior+0x16>
 800f0ac:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800f0b0:	b510      	push	{r4, lr}
 800f0b2:	4291      	cmp	r1, r2
 800f0b4:	4604      	mov	r4, r0
 800f0b6:	d205      	bcs.n	800f0c4 <ucdr_check_final_buffer_behavior+0x1c>
 800f0b8:	2301      	movs	r3, #1
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	bd10      	pop	{r4, pc}
 800f0be:	2300      	movs	r3, #0
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	4770      	bx	lr
 800f0c4:	6982      	ldr	r2, [r0, #24]
 800f0c6:	b13a      	cbz	r2, 800f0d8 <ucdr_check_final_buffer_behavior+0x30>
 800f0c8:	69c1      	ldr	r1, [r0, #28]
 800f0ca:	4790      	blx	r2
 800f0cc:	f080 0301 	eor.w	r3, r0, #1
 800f0d0:	75a0      	strb	r0, [r4, #22]
 800f0d2:	b2db      	uxtb	r3, r3
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	bd10      	pop	{r4, pc}
 800f0d8:	2001      	movs	r0, #1
 800f0da:	75a0      	strb	r0, [r4, #22]
 800f0dc:	e7fa      	b.n	800f0d4 <ucdr_check_final_buffer_behavior+0x2c>
 800f0de:	bf00      	nop

0800f0e0 <ucdr_set_on_full_buffer_callback>:
 800f0e0:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800f0e4:	4770      	bx	lr
 800f0e6:	bf00      	nop

0800f0e8 <ucdr_init_buffer_origin_offset_endian>:
 800f0e8:	b410      	push	{r4}
 800f0ea:	9c01      	ldr	r4, [sp, #4]
 800f0ec:	440a      	add	r2, r1
 800f0ee:	6001      	str	r1, [r0, #0]
 800f0f0:	6042      	str	r2, [r0, #4]
 800f0f2:	190a      	adds	r2, r1, r4
 800f0f4:	441c      	add	r4, r3
 800f0f6:	6082      	str	r2, [r0, #8]
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800f0fe:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800f102:	7542      	strb	r2, [r0, #21]
 800f104:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f108:	7582      	strb	r2, [r0, #22]
 800f10a:	7503      	strb	r3, [r0, #20]
 800f10c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800f110:	4770      	bx	lr
 800f112:	bf00      	nop

0800f114 <ucdr_init_buffer_origin_offset>:
 800f114:	b510      	push	{r4, lr}
 800f116:	b082      	sub	sp, #8
 800f118:	9c04      	ldr	r4, [sp, #16]
 800f11a:	9400      	str	r4, [sp, #0]
 800f11c:	2401      	movs	r4, #1
 800f11e:	9401      	str	r4, [sp, #4]
 800f120:	f7ff ffe2 	bl	800f0e8 <ucdr_init_buffer_origin_offset_endian>
 800f124:	b002      	add	sp, #8
 800f126:	bd10      	pop	{r4, pc}

0800f128 <ucdr_init_buffer_origin>:
 800f128:	b510      	push	{r4, lr}
 800f12a:	2400      	movs	r4, #0
 800f12c:	b082      	sub	sp, #8
 800f12e:	9400      	str	r4, [sp, #0]
 800f130:	f7ff fff0 	bl	800f114 <ucdr_init_buffer_origin_offset>
 800f134:	b002      	add	sp, #8
 800f136:	bd10      	pop	{r4, pc}

0800f138 <ucdr_init_buffer>:
 800f138:	2300      	movs	r3, #0
 800f13a:	f7ff bff5 	b.w	800f128 <ucdr_init_buffer_origin>
 800f13e:	bf00      	nop

0800f140 <ucdr_alignment>:
 800f140:	fbb0 f2f1 	udiv	r2, r0, r1
 800f144:	fb02 0011 	mls	r0, r2, r1, r0
 800f148:	1e4b      	subs	r3, r1, #1
 800f14a:	1a08      	subs	r0, r1, r0
 800f14c:	4018      	ands	r0, r3
 800f14e:	4770      	bx	lr

0800f150 <ucdr_buffer_alignment>:
 800f150:	7d43      	ldrb	r3, [r0, #21]
 800f152:	428b      	cmp	r3, r1
 800f154:	d209      	bcs.n	800f16a <ucdr_buffer_alignment+0x1a>
 800f156:	6903      	ldr	r3, [r0, #16]
 800f158:	1e4a      	subs	r2, r1, #1
 800f15a:	fbb3 f0f1 	udiv	r0, r3, r1
 800f15e:	fb01 3010 	mls	r0, r1, r0, r3
 800f162:	1a09      	subs	r1, r1, r0
 800f164:	ea01 0002 	and.w	r0, r1, r2
 800f168:	4770      	bx	lr
 800f16a:	2000      	movs	r0, #0
 800f16c:	4770      	bx	lr
 800f16e:	bf00      	nop

0800f170 <ucdr_align_to>:
 800f170:	b538      	push	{r3, r4, r5, lr}
 800f172:	4604      	mov	r4, r0
 800f174:	460d      	mov	r5, r1
 800f176:	f7ff ffeb 	bl	800f150 <ucdr_buffer_alignment>
 800f17a:	68a3      	ldr	r3, [r4, #8]
 800f17c:	7565      	strb	r5, [r4, #21]
 800f17e:	181a      	adds	r2, r3, r0
 800f180:	6923      	ldr	r3, [r4, #16]
 800f182:	4418      	add	r0, r3
 800f184:	6863      	ldr	r3, [r4, #4]
 800f186:	4293      	cmp	r3, r2
 800f188:	6120      	str	r0, [r4, #16]
 800f18a:	bf28      	it	cs
 800f18c:	4613      	movcs	r3, r2
 800f18e:	60a3      	str	r3, [r4, #8]
 800f190:	bd38      	pop	{r3, r4, r5, pc}
 800f192:	bf00      	nop

0800f194 <ucdr_buffer_length>:
 800f194:	6882      	ldr	r2, [r0, #8]
 800f196:	6800      	ldr	r0, [r0, #0]
 800f198:	1a10      	subs	r0, r2, r0
 800f19a:	4770      	bx	lr

0800f19c <ucdr_buffer_remaining>:
 800f19c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800f1a0:	1a10      	subs	r0, r2, r0
 800f1a2:	4770      	bx	lr

0800f1a4 <ucdr_check_final_buffer_behavior_array>:
 800f1a4:	b538      	push	{r3, r4, r5, lr}
 800f1a6:	7d83      	ldrb	r3, [r0, #22]
 800f1a8:	b9a3      	cbnz	r3, 800f1d4 <ucdr_check_final_buffer_behavior_array+0x30>
 800f1aa:	4604      	mov	r4, r0
 800f1ac:	460d      	mov	r5, r1
 800f1ae:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800f1b2:	429a      	cmp	r2, r3
 800f1b4:	d300      	bcc.n	800f1b8 <ucdr_check_final_buffer_behavior_array+0x14>
 800f1b6:	b931      	cbnz	r1, 800f1c6 <ucdr_check_final_buffer_behavior_array+0x22>
 800f1b8:	4620      	mov	r0, r4
 800f1ba:	f7ff ffef 	bl	800f19c <ucdr_buffer_remaining>
 800f1be:	42a8      	cmp	r0, r5
 800f1c0:	bf28      	it	cs
 800f1c2:	4628      	movcs	r0, r5
 800f1c4:	bd38      	pop	{r3, r4, r5, pc}
 800f1c6:	6983      	ldr	r3, [r0, #24]
 800f1c8:	b133      	cbz	r3, 800f1d8 <ucdr_check_final_buffer_behavior_array+0x34>
 800f1ca:	69c1      	ldr	r1, [r0, #28]
 800f1cc:	4798      	blx	r3
 800f1ce:	75a0      	strb	r0, [r4, #22]
 800f1d0:	2800      	cmp	r0, #0
 800f1d2:	d0f1      	beq.n	800f1b8 <ucdr_check_final_buffer_behavior_array+0x14>
 800f1d4:	2000      	movs	r0, #0
 800f1d6:	bd38      	pop	{r3, r4, r5, pc}
 800f1d8:	2301      	movs	r3, #1
 800f1da:	7583      	strb	r3, [r0, #22]
 800f1dc:	e7fa      	b.n	800f1d4 <ucdr_check_final_buffer_behavior_array+0x30>
 800f1de:	bf00      	nop

0800f1e0 <ucdr_advance_buffer>:
 800f1e0:	b538      	push	{r3, r4, r5, lr}
 800f1e2:	4604      	mov	r4, r0
 800f1e4:	460d      	mov	r5, r1
 800f1e6:	f7ff ff53 	bl	800f090 <ucdr_check_buffer_available_for>
 800f1ea:	b178      	cbz	r0, 800f20c <ucdr_advance_buffer+0x2c>
 800f1ec:	6923      	ldr	r3, [r4, #16]
 800f1ee:	68a2      	ldr	r2, [r4, #8]
 800f1f0:	442b      	add	r3, r5
 800f1f2:	442a      	add	r2, r5
 800f1f4:	6123      	str	r3, [r4, #16]
 800f1f6:	2301      	movs	r3, #1
 800f1f8:	60a2      	str	r2, [r4, #8]
 800f1fa:	7563      	strb	r3, [r4, #21]
 800f1fc:	bd38      	pop	{r3, r4, r5, pc}
 800f1fe:	68a2      	ldr	r2, [r4, #8]
 800f200:	1a2d      	subs	r5, r5, r0
 800f202:	6923      	ldr	r3, [r4, #16]
 800f204:	4402      	add	r2, r0
 800f206:	4418      	add	r0, r3
 800f208:	60a2      	str	r2, [r4, #8]
 800f20a:	6120      	str	r0, [r4, #16]
 800f20c:	4629      	mov	r1, r5
 800f20e:	2201      	movs	r2, #1
 800f210:	4620      	mov	r0, r4
 800f212:	f7ff ffc7 	bl	800f1a4 <ucdr_check_final_buffer_behavior_array>
 800f216:	2800      	cmp	r0, #0
 800f218:	d1f1      	bne.n	800f1fe <ucdr_advance_buffer+0x1e>
 800f21a:	2301      	movs	r3, #1
 800f21c:	7563      	strb	r3, [r4, #21]
 800f21e:	bd38      	pop	{r3, r4, r5, pc}

0800f220 <ucdr_serialize_sequence_char>:
 800f220:	b570      	push	{r4, r5, r6, lr}
 800f222:	4615      	mov	r5, r2
 800f224:	460e      	mov	r6, r1
 800f226:	7d01      	ldrb	r1, [r0, #20]
 800f228:	4604      	mov	r4, r0
 800f22a:	f7fe ff51 	bl	800e0d0 <ucdr_serialize_endian_uint32_t>
 800f22e:	b90d      	cbnz	r5, 800f234 <ucdr_serialize_sequence_char+0x14>
 800f230:	2001      	movs	r0, #1
 800f232:	bd70      	pop	{r4, r5, r6, pc}
 800f234:	462b      	mov	r3, r5
 800f236:	4632      	mov	r2, r6
 800f238:	7d21      	ldrb	r1, [r4, #20]
 800f23a:	4620      	mov	r0, r4
 800f23c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f240:	f7fe ba90 	b.w	800d764 <ucdr_serialize_endian_array_char>

0800f244 <ucdr_deserialize_sequence_char>:
 800f244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f248:	461d      	mov	r5, r3
 800f24a:	4616      	mov	r6, r2
 800f24c:	460f      	mov	r7, r1
 800f24e:	461a      	mov	r2, r3
 800f250:	7d01      	ldrb	r1, [r0, #20]
 800f252:	4604      	mov	r4, r0
 800f254:	f7ff f864 	bl	800e320 <ucdr_deserialize_endian_uint32_t>
 800f258:	682b      	ldr	r3, [r5, #0]
 800f25a:	429e      	cmp	r6, r3
 800f25c:	d201      	bcs.n	800f262 <ucdr_deserialize_sequence_char+0x1e>
 800f25e:	2201      	movs	r2, #1
 800f260:	75a2      	strb	r2, [r4, #22]
 800f262:	b913      	cbnz	r3, 800f26a <ucdr_deserialize_sequence_char+0x26>
 800f264:	2001      	movs	r0, #1
 800f266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f26a:	463a      	mov	r2, r7
 800f26c:	7d21      	ldrb	r1, [r4, #20]
 800f26e:	4620      	mov	r0, r4
 800f270:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f274:	f7fe baa8 	b.w	800d7c8 <ucdr_deserialize_endian_array_char>

0800f278 <ucdr_serialize_sequence_uint8_t>:
 800f278:	b570      	push	{r4, r5, r6, lr}
 800f27a:	4615      	mov	r5, r2
 800f27c:	460e      	mov	r6, r1
 800f27e:	7d01      	ldrb	r1, [r0, #20]
 800f280:	4604      	mov	r4, r0
 800f282:	f7fe ff25 	bl	800e0d0 <ucdr_serialize_endian_uint32_t>
 800f286:	b90d      	cbnz	r5, 800f28c <ucdr_serialize_sequence_uint8_t+0x14>
 800f288:	2001      	movs	r0, #1
 800f28a:	bd70      	pop	{r4, r5, r6, pc}
 800f28c:	462b      	mov	r3, r5
 800f28e:	4632      	mov	r2, r6
 800f290:	7d21      	ldrb	r1, [r4, #20]
 800f292:	4620      	mov	r0, r4
 800f294:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f298:	f7fe bafc 	b.w	800d894 <ucdr_serialize_endian_array_uint8_t>

0800f29c <ucdr_deserialize_sequence_uint8_t>:
 800f29c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2a0:	461d      	mov	r5, r3
 800f2a2:	4616      	mov	r6, r2
 800f2a4:	460f      	mov	r7, r1
 800f2a6:	461a      	mov	r2, r3
 800f2a8:	7d01      	ldrb	r1, [r0, #20]
 800f2aa:	4604      	mov	r4, r0
 800f2ac:	f7ff f838 	bl	800e320 <ucdr_deserialize_endian_uint32_t>
 800f2b0:	682b      	ldr	r3, [r5, #0]
 800f2b2:	429e      	cmp	r6, r3
 800f2b4:	d201      	bcs.n	800f2ba <ucdr_deserialize_sequence_uint8_t+0x1e>
 800f2b6:	2201      	movs	r2, #1
 800f2b8:	75a2      	strb	r2, [r4, #22]
 800f2ba:	b913      	cbnz	r3, 800f2c2 <ucdr_deserialize_sequence_uint8_t+0x26>
 800f2bc:	2001      	movs	r0, #1
 800f2be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2c2:	463a      	mov	r2, r7
 800f2c4:	7d21      	ldrb	r1, [r4, #20]
 800f2c6:	4620      	mov	r0, r4
 800f2c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2cc:	f7fe bb48 	b.w	800d960 <ucdr_deserialize_endian_array_uint8_t>

0800f2d0 <uxr_buffer_delete_entity>:
 800f2d0:	b510      	push	{r4, lr}
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	b08e      	sub	sp, #56	@ 0x38
 800f2d6:	4604      	mov	r4, r0
 800f2d8:	9103      	str	r1, [sp, #12]
 800f2da:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f2de:	2303      	movs	r3, #3
 800f2e0:	2204      	movs	r2, #4
 800f2e2:	9300      	str	r3, [sp, #0]
 800f2e4:	ab06      	add	r3, sp, #24
 800f2e6:	f001 f87f 	bl	80103e8 <uxr_prepare_stream_to_write_submessage>
 800f2ea:	b918      	cbnz	r0, 800f2f4 <uxr_buffer_delete_entity+0x24>
 800f2ec:	4604      	mov	r4, r0
 800f2ee:	4620      	mov	r0, r4
 800f2f0:	b00e      	add	sp, #56	@ 0x38
 800f2f2:	bd10      	pop	{r4, pc}
 800f2f4:	9902      	ldr	r1, [sp, #8]
 800f2f6:	aa05      	add	r2, sp, #20
 800f2f8:	4620      	mov	r0, r4
 800f2fa:	f001 f9b1 	bl	8010660 <uxr_init_base_object_request>
 800f2fe:	4604      	mov	r4, r0
 800f300:	a905      	add	r1, sp, #20
 800f302:	a806      	add	r0, sp, #24
 800f304:	f002 fb1a 	bl	801193c <uxr_serialize_DELETE_Payload>
 800f308:	4620      	mov	r0, r4
 800f30a:	b00e      	add	sp, #56	@ 0x38
 800f30c:	bd10      	pop	{r4, pc}
 800f30e:	bf00      	nop

0800f310 <uxr_common_create_entity>:
 800f310:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800f314:	b510      	push	{r4, lr}
 800f316:	f1bc 0f01 	cmp.w	ip, #1
 800f31a:	b08c      	sub	sp, #48	@ 0x30
 800f31c:	4604      	mov	r4, r0
 800f31e:	9202      	str	r2, [sp, #8]
 800f320:	bf0c      	ite	eq
 800f322:	f003 0201 	andeq.w	r2, r3, #1
 800f326:	2200      	movne	r2, #0
 800f328:	330e      	adds	r3, #14
 800f32a:	9103      	str	r1, [sp, #12]
 800f32c:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800f330:	441a      	add	r2, r3
 800f332:	ab04      	add	r3, sp, #16
 800f334:	9101      	str	r1, [sp, #4]
 800f336:	2101      	movs	r1, #1
 800f338:	b292      	uxth	r2, r2
 800f33a:	9100      	str	r1, [sp, #0]
 800f33c:	9903      	ldr	r1, [sp, #12]
 800f33e:	f001 f853 	bl	80103e8 <uxr_prepare_stream_to_write_submessage>
 800f342:	b918      	cbnz	r0, 800f34c <uxr_common_create_entity+0x3c>
 800f344:	4604      	mov	r4, r0
 800f346:	4620      	mov	r0, r4
 800f348:	b00c      	add	sp, #48	@ 0x30
 800f34a:	bd10      	pop	{r4, pc}
 800f34c:	9902      	ldr	r1, [sp, #8]
 800f34e:	4620      	mov	r0, r4
 800f350:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f352:	f001 f985 	bl	8010660 <uxr_init_base_object_request>
 800f356:	4604      	mov	r4, r0
 800f358:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f35a:	a804      	add	r0, sp, #16
 800f35c:	f002 fa48 	bl	80117f0 <uxr_serialize_CREATE_Payload>
 800f360:	4620      	mov	r0, r4
 800f362:	b00c      	add	sp, #48	@ 0x30
 800f364:	bd10      	pop	{r4, pc}
 800f366:	bf00      	nop

0800f368 <uxr_buffer_create_participant_bin>:
 800f368:	b570      	push	{r4, r5, r6, lr}
 800f36a:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800f36e:	4605      	mov	r5, r0
 800f370:	ac11      	add	r4, sp, #68	@ 0x44
 800f372:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800f376:	2303      	movs	r3, #3
 800f378:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800f37c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800f380:	7223      	strb	r3, [r4, #8]
 800f382:	2300      	movs	r3, #0
 800f384:	2201      	movs	r2, #1
 800f386:	f88d 3014 	strb.w	r3, [sp, #20]
 800f38a:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800f38c:	7122      	strb	r2, [r4, #4]
 800f38e:	b1cb      	cbz	r3, 800f3c4 <uxr_buffer_create_participant_bin+0x5c>
 800f390:	f88d 201c 	strb.w	r2, [sp, #28]
 800f394:	9308      	str	r3, [sp, #32]
 800f396:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f39a:	a915      	add	r1, sp, #84	@ 0x54
 800f39c:	a809      	add	r0, sp, #36	@ 0x24
 800f39e:	f7ff fecb 	bl	800f138 <ucdr_init_buffer>
 800f3a2:	a905      	add	r1, sp, #20
 800f3a4:	a809      	add	r0, sp, #36	@ 0x24
 800f3a6:	f001 fef9 	bl	801119c <uxr_serialize_OBJK_DomainParticipant_Binary>
 800f3aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f3ac:	9600      	str	r6, [sp, #0]
 800f3ae:	4628      	mov	r0, r5
 800f3b0:	9401      	str	r4, [sp, #4]
 800f3b2:	60e3      	str	r3, [r4, #12]
 800f3b4:	b29b      	uxth	r3, r3
 800f3b6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f3ba:	f7ff ffa9 	bl	800f310 <uxr_common_create_entity>
 800f3be:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800f3c2:	bd70      	pop	{r4, r5, r6, pc}
 800f3c4:	f88d 301c 	strb.w	r3, [sp, #28]
 800f3c8:	e7e5      	b.n	800f396 <uxr_buffer_create_participant_bin+0x2e>
 800f3ca:	bf00      	nop

0800f3cc <uxr_buffer_create_topic_bin>:
 800f3cc:	b570      	push	{r4, r5, r6, lr}
 800f3ce:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800f3d2:	4605      	mov	r5, r0
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	9105      	str	r1, [sp, #20]
 800f3d8:	a997      	add	r1, sp, #604	@ 0x25c
 800f3da:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800f3de:	ac13      	add	r4, sp, #76	@ 0x4c
 800f3e0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f3e4:	2302      	movs	r3, #2
 800f3e6:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800f3ea:	f000 f8ed 	bl	800f5c8 <uxr_object_id_to_raw>
 800f3ee:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800f3f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f3f4:	a917      	add	r1, sp, #92	@ 0x5c
 800f3f6:	a80b      	add	r0, sp, #44	@ 0x2c
 800f3f8:	9306      	str	r3, [sp, #24]
 800f3fa:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800f3fc:	930a      	str	r3, [sp, #40]	@ 0x28
 800f3fe:	2303      	movs	r3, #3
 800f400:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800f404:	2301      	movs	r3, #1
 800f406:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800f40a:	2300      	movs	r3, #0
 800f40c:	f88d 301c 	strb.w	r3, [sp, #28]
 800f410:	f7ff fe92 	bl	800f138 <ucdr_init_buffer>
 800f414:	a906      	add	r1, sp, #24
 800f416:	a80b      	add	r0, sp, #44	@ 0x2c
 800f418:	f001 fee2 	bl	80111e0 <uxr_serialize_OBJK_Topic_Binary>
 800f41c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f41e:	4628      	mov	r0, r5
 800f420:	9600      	str	r6, [sp, #0]
 800f422:	9316      	str	r3, [sp, #88]	@ 0x58
 800f424:	b29b      	uxth	r3, r3
 800f426:	9401      	str	r4, [sp, #4]
 800f428:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f42c:	f7ff ff70 	bl	800f310 <uxr_common_create_entity>
 800f430:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800f434:	bd70      	pop	{r4, r5, r6, pc}
 800f436:	bf00      	nop

0800f438 <uxr_buffer_create_publisher_bin>:
 800f438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f43a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800f43e:	2603      	movs	r6, #3
 800f440:	4605      	mov	r5, r0
 800f442:	4618      	mov	r0, r3
 800f444:	9105      	str	r1, [sp, #20]
 800f446:	a992      	add	r1, sp, #584	@ 0x248
 800f448:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800f44c:	ac0e      	add	r4, sp, #56	@ 0x38
 800f44e:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800f452:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f456:	f000 f8b7 	bl	800f5c8 <uxr_object_id_to_raw>
 800f45a:	2300      	movs	r3, #0
 800f45c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f460:	a912      	add	r1, sp, #72	@ 0x48
 800f462:	a806      	add	r0, sp, #24
 800f464:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800f468:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800f46c:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800f470:	f7ff fe62 	bl	800f138 <ucdr_init_buffer>
 800f474:	a993      	add	r1, sp, #588	@ 0x24c
 800f476:	a806      	add	r0, sp, #24
 800f478:	f001 ff66 	bl	8011348 <uxr_serialize_OBJK_Publisher_Binary>
 800f47c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f47e:	4628      	mov	r0, r5
 800f480:	9700      	str	r7, [sp, #0]
 800f482:	9311      	str	r3, [sp, #68]	@ 0x44
 800f484:	b29b      	uxth	r3, r3
 800f486:	9401      	str	r4, [sp, #4]
 800f488:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f48c:	f7ff ff40 	bl	800f310 <uxr_common_create_entity>
 800f490:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800f494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f496:	bf00      	nop

0800f498 <uxr_buffer_create_datawriter_bin>:
 800f498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f49c:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800f4a0:	4606      	mov	r6, r0
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	2703      	movs	r7, #3
 800f4a6:	ac1d      	add	r4, sp, #116	@ 0x74
 800f4a8:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800f4ac:	9105      	str	r1, [sp, #20]
 800f4ae:	a9a1      	add	r1, sp, #644	@ 0x284
 800f4b0:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800f4b4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f4b8:	2305      	movs	r3, #5
 800f4ba:	7123      	strb	r3, [r4, #4]
 800f4bc:	f000 f884 	bl	800f5c8 <uxr_object_id_to_raw>
 800f4c0:	a90e      	add	r1, sp, #56	@ 0x38
 800f4c2:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800f4c4:	7227      	strb	r7, [r4, #8]
 800f4c6:	f000 f87f 	bl	800f5c8 <uxr_object_id_to_raw>
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800f4d0:	3d00      	subs	r5, #0
 800f4d2:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800f4d6:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800f4da:	bf18      	it	ne
 800f4dc:	2501      	movne	r5, #1
 800f4de:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800f4e2:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800f4e6:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800f4ea:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f4ee:	2301      	movs	r3, #1
 800f4f0:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800f4f4:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800f4f8:	bb8a      	cbnz	r2, 800f55e <uxr_buffer_create_datawriter_bin+0xc6>
 800f4fa:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800f4fe:	f04f 0c13 	mov.w	ip, #19
 800f502:	250b      	movs	r5, #11
 800f504:	2221      	movs	r2, #33	@ 0x21
 800f506:	2111      	movs	r1, #17
 800f508:	2009      	movs	r0, #9
 800f50a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f50e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800f512:	b923      	cbnz	r3, 800f51e <uxr_buffer_create_datawriter_bin+0x86>
 800f514:	4672      	mov	r2, lr
 800f516:	4661      	mov	r1, ip
 800f518:	4628      	mov	r0, r5
 800f51a:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800f51e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800f522:	2b01      	cmp	r3, #1
 800f524:	d025      	beq.n	800f572 <uxr_buffer_create_datawriter_bin+0xda>
 800f526:	2b03      	cmp	r3, #3
 800f528:	d029      	beq.n	800f57e <uxr_buffer_create_datawriter_bin+0xe6>
 800f52a:	b32b      	cbz	r3, 800f578 <uxr_buffer_create_datawriter_bin+0xe0>
 800f52c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f530:	a921      	add	r1, sp, #132	@ 0x84
 800f532:	a806      	add	r0, sp, #24
 800f534:	f7ff fe00 	bl	800f138 <ucdr_init_buffer>
 800f538:	a90e      	add	r1, sp, #56	@ 0x38
 800f53a:	a806      	add	r0, sp, #24
 800f53c:	f001 ff7a 	bl	8011434 <uxr_serialize_OBJK_DataWriter_Binary>
 800f540:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f542:	f8cd 8000 	str.w	r8, [sp]
 800f546:	4630      	mov	r0, r6
 800f548:	9401      	str	r4, [sp, #4]
 800f54a:	60e3      	str	r3, [r4, #12]
 800f54c:	b29b      	uxth	r3, r3
 800f54e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f552:	f7ff fedd 	bl	800f310 <uxr_common_create_entity>
 800f556:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800f55a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f55e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800f562:	f04f 0c12 	mov.w	ip, #18
 800f566:	250a      	movs	r5, #10
 800f568:	2220      	movs	r2, #32
 800f56a:	2110      	movs	r1, #16
 800f56c:	2008      	movs	r0, #8
 800f56e:	2702      	movs	r7, #2
 800f570:	e7cd      	b.n	800f50e <uxr_buffer_create_datawriter_bin+0x76>
 800f572:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800f576:	e7d9      	b.n	800f52c <uxr_buffer_create_datawriter_bin+0x94>
 800f578:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800f57c:	e7d6      	b.n	800f52c <uxr_buffer_create_datawriter_bin+0x94>
 800f57e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800f582:	e7d3      	b.n	800f52c <uxr_buffer_create_datawriter_bin+0x94>

0800f584 <uxr_object_id>:
 800f584:	b082      	sub	sp, #8
 800f586:	2300      	movs	r3, #0
 800f588:	f88d 1006 	strb.w	r1, [sp, #6]
 800f58c:	f360 030f 	bfi	r3, r0, #0, #16
 800f590:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f594:	f362 431f 	bfi	r3, r2, #16, #16
 800f598:	4618      	mov	r0, r3
 800f59a:	b002      	add	sp, #8
 800f59c:	4770      	bx	lr
 800f59e:	bf00      	nop

0800f5a0 <uxr_object_id_from_raw>:
 800f5a0:	7843      	ldrb	r3, [r0, #1]
 800f5a2:	b082      	sub	sp, #8
 800f5a4:	7801      	ldrb	r1, [r0, #0]
 800f5a6:	2000      	movs	r0, #0
 800f5a8:	091a      	lsrs	r2, r3, #4
 800f5aa:	f003 030f 	and.w	r3, r3, #15
 800f5ae:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800f5b2:	f88d 3006 	strb.w	r3, [sp, #6]
 800f5b6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800f5ba:	f362 000f 	bfi	r0, r2, #0, #16
 800f5be:	f363 401f 	bfi	r0, r3, #16, #16
 800f5c2:	b002      	add	sp, #8
 800f5c4:	4770      	bx	lr
 800f5c6:	bf00      	nop

0800f5c8 <uxr_object_id_to_raw>:
 800f5c8:	4602      	mov	r2, r0
 800f5ca:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800f5ce:	b082      	sub	sp, #8
 800f5d0:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800f5d4:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800f5d8:	f881 c000 	strb.w	ip, [r1]
 800f5dc:	7048      	strb	r0, [r1, #1]
 800f5de:	b002      	add	sp, #8
 800f5e0:	4770      	bx	lr
 800f5e2:	bf00      	nop

0800f5e4 <on_get_fragmentation_info>:
 800f5e4:	b500      	push	{lr}
 800f5e6:	b08b      	sub	sp, #44	@ 0x2c
 800f5e8:	4601      	mov	r1, r0
 800f5ea:	2204      	movs	r2, #4
 800f5ec:	a802      	add	r0, sp, #8
 800f5ee:	f7ff fda3 	bl	800f138 <ucdr_init_buffer>
 800f5f2:	f10d 0305 	add.w	r3, sp, #5
 800f5f6:	f10d 0206 	add.w	r2, sp, #6
 800f5fa:	a901      	add	r1, sp, #4
 800f5fc:	a802      	add	r0, sp, #8
 800f5fe:	f001 f9b9 	bl	8010974 <uxr_read_submessage_header>
 800f602:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f606:	2b0d      	cmp	r3, #13
 800f608:	d003      	beq.n	800f612 <on_get_fragmentation_info+0x2e>
 800f60a:	2000      	movs	r0, #0
 800f60c:	b00b      	add	sp, #44	@ 0x2c
 800f60e:	f85d fb04 	ldr.w	pc, [sp], #4
 800f612:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f616:	f013 0f02 	tst.w	r3, #2
 800f61a:	bf14      	ite	ne
 800f61c:	2002      	movne	r0, #2
 800f61e:	2001      	moveq	r0, #1
 800f620:	b00b      	add	sp, #44	@ 0x2c
 800f622:	f85d fb04 	ldr.w	pc, [sp], #4
 800f626:	bf00      	nop

0800f628 <read_submessage_get_info>:
 800f628:	b570      	push	{r4, r5, r6, lr}
 800f62a:	2500      	movs	r5, #0
 800f62c:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800f630:	460e      	mov	r6, r1
 800f632:	4604      	mov	r4, r0
 800f634:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800f638:	4629      	mov	r1, r5
 800f63a:	a810      	add	r0, sp, #64	@ 0x40
 800f63c:	9503      	str	r5, [sp, #12]
 800f63e:	9504      	str	r5, [sp, #16]
 800f640:	f007 f88e 	bl	8016760 <memset>
 800f644:	a903      	add	r1, sp, #12
 800f646:	4630      	mov	r0, r6
 800f648:	f002 f962 	bl	8011910 <uxr_deserialize_GET_INFO_Payload>
 800f64c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800f650:	4620      	mov	r0, r4
 800f652:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f656:	f000 fffb 	bl	8010650 <uxr_session_header_offset>
 800f65a:	462b      	mov	r3, r5
 800f65c:	220c      	movs	r2, #12
 800f65e:	a905      	add	r1, sp, #20
 800f660:	9000      	str	r0, [sp, #0]
 800f662:	a808      	add	r0, sp, #32
 800f664:	f7ff fd56 	bl	800f114 <ucdr_init_buffer_origin_offset>
 800f668:	a910      	add	r1, sp, #64	@ 0x40
 800f66a:	a808      	add	r0, sp, #32
 800f66c:	f002 f9c4 	bl	80119f8 <uxr_serialize_INFO_Payload>
 800f670:	9b08      	ldr	r3, [sp, #32]
 800f672:	462a      	mov	r2, r5
 800f674:	4629      	mov	r1, r5
 800f676:	4620      	mov	r0, r4
 800f678:	f000 ff96 	bl	80105a8 <uxr_stamp_session_header>
 800f67c:	a808      	add	r0, sp, #32
 800f67e:	f7ff fd89 	bl	800f194 <ucdr_buffer_length>
 800f682:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f684:	4602      	mov	r2, r0
 800f686:	a905      	add	r1, sp, #20
 800f688:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f68c:	47a0      	blx	r4
 800f68e:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800f692:	bd70      	pop	{r4, r5, r6, pc}

0800f694 <write_submessage_acknack.isra.0>:
 800f694:	b570      	push	{r4, r5, r6, lr}
 800f696:	b092      	sub	sp, #72	@ 0x48
 800f698:	4605      	mov	r5, r0
 800f69a:	460e      	mov	r6, r1
 800f69c:	4614      	mov	r4, r2
 800f69e:	f000 ffd7 	bl	8010650 <uxr_session_header_offset>
 800f6a2:	a905      	add	r1, sp, #20
 800f6a4:	9000      	str	r0, [sp, #0]
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	a80a      	add	r0, sp, #40	@ 0x28
 800f6aa:	2211      	movs	r2, #17
 800f6ac:	f7ff fd32 	bl	800f114 <ucdr_init_buffer_origin_offset>
 800f6b0:	2218      	movs	r2, #24
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	210a      	movs	r1, #10
 800f6b6:	fb02 5404 	mla	r4, r2, r4, r5
 800f6ba:	a80a      	add	r0, sp, #40	@ 0x28
 800f6bc:	2205      	movs	r2, #5
 800f6be:	3450      	adds	r4, #80	@ 0x50
 800f6c0:	f001 f93e 	bl	8010940 <uxr_buffer_submessage_header>
 800f6c4:	a903      	add	r1, sp, #12
 800f6c6:	4620      	mov	r0, r4
 800f6c8:	f004 fd6e 	bl	80141a8 <uxr_compute_acknack>
 800f6cc:	ba40      	rev16	r0, r0
 800f6ce:	a903      	add	r1, sp, #12
 800f6d0:	f88d 6010 	strb.w	r6, [sp, #16]
 800f6d4:	f8ad 000e 	strh.w	r0, [sp, #14]
 800f6d8:	a80a      	add	r0, sp, #40	@ 0x28
 800f6da:	f002 f9ff 	bl	8011adc <uxr_serialize_ACKNACK_Payload>
 800f6de:	2200      	movs	r2, #0
 800f6e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f6e2:	4628      	mov	r0, r5
 800f6e4:	4611      	mov	r1, r2
 800f6e6:	f000 ff5f 	bl	80105a8 <uxr_stamp_session_header>
 800f6ea:	a80a      	add	r0, sp, #40	@ 0x28
 800f6ec:	f7ff fd52 	bl	800f194 <ucdr_buffer_length>
 800f6f0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800f6f2:	4602      	mov	r2, r0
 800f6f4:	a905      	add	r1, sp, #20
 800f6f6:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f6fa:	47a0      	blx	r4
 800f6fc:	b012      	add	sp, #72	@ 0x48
 800f6fe:	bd70      	pop	{r4, r5, r6, pc}

0800f700 <uxr_init_session>:
 800f700:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800f738 <uxr_init_session+0x38>
 800f704:	2300      	movs	r3, #0
 800f706:	b510      	push	{r4, lr}
 800f708:	4604      	mov	r4, r0
 800f70a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800f70e:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800f712:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800f716:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800f71a:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800f71e:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800f722:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800f726:	2181      	movs	r1, #129	@ 0x81
 800f728:	f000 fea2 	bl	8010470 <uxr_init_session_info>
 800f72c:	f104 0008 	add.w	r0, r4, #8
 800f730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f734:	f001 b820 	b.w	8010778 <uxr_init_stream_storage>
	...

0800f740 <uxr_set_status_callback>:
 800f740:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800f744:	4770      	bx	lr
 800f746:	bf00      	nop

0800f748 <uxr_set_topic_callback>:
 800f748:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800f74c:	4770      	bx	lr
 800f74e:	bf00      	nop

0800f750 <uxr_set_request_callback>:
 800f750:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800f754:	4770      	bx	lr
 800f756:	bf00      	nop

0800f758 <uxr_set_reply_callback>:
 800f758:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800f75c:	4770      	bx	lr
 800f75e:	bf00      	nop

0800f760 <uxr_create_output_best_effort_stream>:
 800f760:	b510      	push	{r4, lr}
 800f762:	4604      	mov	r4, r0
 800f764:	b084      	sub	sp, #16
 800f766:	e9cd 2100 	strd	r2, r1, [sp]
 800f76a:	f000 ff71 	bl	8010650 <uxr_session_header_offset>
 800f76e:	4603      	mov	r3, r0
 800f770:	f104 0008 	add.w	r0, r4, #8
 800f774:	e9dd 2100 	ldrd	r2, r1, [sp]
 800f778:	b004      	add	sp, #16
 800f77a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f77e:	f001 b841 	b.w	8010804 <uxr_add_output_best_effort_buffer>
 800f782:	bf00      	nop

0800f784 <uxr_create_output_reliable_stream>:
 800f784:	b530      	push	{r4, r5, lr}
 800f786:	b089      	sub	sp, #36	@ 0x24
 800f788:	4604      	mov	r4, r0
 800f78a:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800f78e:	9303      	str	r3, [sp, #12]
 800f790:	f000 ff5e 	bl	8010650 <uxr_session_header_offset>
 800f794:	4605      	mov	r5, r0
 800f796:	9905      	ldr	r1, [sp, #20]
 800f798:	f104 0008 	add.w	r0, r4, #8
 800f79c:	9500      	str	r5, [sp, #0]
 800f79e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800f7a2:	f001 f843 	bl	801082c <uxr_add_output_reliable_buffer>
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	fa5f fc80 	uxtb.w	ip, r0
 800f7ac:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800f7b0:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800f7b4:	0e03      	lsrs	r3, r0, #24
 800f7b6:	f36c 0207 	bfi	r2, ip, #0, #8
 800f7ba:	f364 220f 	bfi	r2, r4, #8, #8
 800f7be:	f361 4217 	bfi	r2, r1, #16, #8
 800f7c2:	f363 621f 	bfi	r2, r3, #24, #8
 800f7c6:	4610      	mov	r0, r2
 800f7c8:	b009      	add	sp, #36	@ 0x24
 800f7ca:	bd30      	pop	{r4, r5, pc}

0800f7cc <uxr_create_input_best_effort_stream>:
 800f7cc:	b082      	sub	sp, #8
 800f7ce:	3008      	adds	r0, #8
 800f7d0:	b002      	add	sp, #8
 800f7d2:	f001 b845 	b.w	8010860 <uxr_add_input_best_effort_buffer>
 800f7d6:	bf00      	nop

0800f7d8 <uxr_create_input_reliable_stream>:
 800f7d8:	b510      	push	{r4, lr}
 800f7da:	4c0c      	ldr	r4, [pc, #48]	@ (800f80c <uxr_create_input_reliable_stream+0x34>)
 800f7dc:	b084      	sub	sp, #16
 800f7de:	3008      	adds	r0, #8
 800f7e0:	9400      	str	r4, [sp, #0]
 800f7e2:	f001 f853 	bl	801088c <uxr_add_input_reliable_buffer>
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	fa5f fe80 	uxtb.w	lr, r0
 800f7ec:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 800f7f0:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800f7f4:	0e03      	lsrs	r3, r0, #24
 800f7f6:	f36e 0207 	bfi	r2, lr, #0, #8
 800f7fa:	f36c 220f 	bfi	r2, ip, #8, #8
 800f7fe:	f361 4217 	bfi	r2, r1, #16, #8
 800f802:	f363 621f 	bfi	r2, r3, #24, #8
 800f806:	4610      	mov	r0, r2
 800f808:	b004      	add	sp, #16
 800f80a:	bd10      	pop	{r4, pc}
 800f80c:	0800f5e5 	.word	0x0800f5e5

0800f810 <uxr_epoch_millis>:
 800f810:	b510      	push	{r4, lr}
 800f812:	4604      	mov	r4, r0
 800f814:	f001 f8f6 	bl	8010a04 <uxr_nanos>
 800f818:	4a05      	ldr	r2, [pc, #20]	@ (800f830 <uxr_epoch_millis+0x20>)
 800f81a:	e9d4 3426 	ldrd	r3, r4, [r4, #152]	@ 0x98
 800f81e:	1ac0      	subs	r0, r0, r3
 800f820:	f04f 0300 	mov.w	r3, #0
 800f824:	eb61 0104 	sbc.w	r1, r1, r4
 800f828:	f7f0 fd72 	bl	8000310 <__aeabi_ldivmod>
 800f82c:	bd10      	pop	{r4, pc}
 800f82e:	bf00      	nop
 800f830:	000f4240 	.word	0x000f4240

0800f834 <uxr_epoch_nanos>:
 800f834:	b510      	push	{r4, lr}
 800f836:	4604      	mov	r4, r0
 800f838:	f001 f8e4 	bl	8010a04 <uxr_nanos>
 800f83c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800f840:	1ac0      	subs	r0, r0, r3
 800f842:	eb61 0102 	sbc.w	r1, r1, r2
 800f846:	bd10      	pop	{r4, pc}

0800f848 <uxr_flash_output_streams>:
 800f848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f84c:	7e03      	ldrb	r3, [r0, #24]
 800f84e:	b084      	sub	sp, #16
 800f850:	4604      	mov	r4, r0
 800f852:	b1fb      	cbz	r3, 800f894 <uxr_flash_output_streams+0x4c>
 800f854:	f04f 0900 	mov.w	r9, #0
 800f858:	f10d 0802 	add.w	r8, sp, #2
 800f85c:	af03      	add	r7, sp, #12
 800f85e:	ae02      	add	r6, sp, #8
 800f860:	4648      	mov	r0, r9
 800f862:	2201      	movs	r2, #1
 800f864:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800f868:	4611      	mov	r1, r2
 800f86a:	3508      	adds	r5, #8
 800f86c:	f000 ff2a 	bl	80106c4 <uxr_stream_id>
 800f870:	4684      	mov	ip, r0
 800f872:	4643      	mov	r3, r8
 800f874:	463a      	mov	r2, r7
 800f876:	4631      	mov	r1, r6
 800f878:	4628      	mov	r0, r5
 800f87a:	f8cd c004 	str.w	ip, [sp, #4]
 800f87e:	f004 fd1d 	bl	80142bc <uxr_prepare_best_effort_buffer_to_send>
 800f882:	2800      	cmp	r0, #0
 800f884:	d13d      	bne.n	800f902 <uxr_flash_output_streams+0xba>
 800f886:	f109 0901 	add.w	r9, r9, #1
 800f88a:	7e23      	ldrb	r3, [r4, #24]
 800f88c:	fa5f f089 	uxtb.w	r0, r9
 800f890:	4283      	cmp	r3, r0
 800f892:	d8e6      	bhi.n	800f862 <uxr_flash_output_streams+0x1a>
 800f894:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800f898:	b383      	cbz	r3, 800f8fc <uxr_flash_output_streams+0xb4>
 800f89a:	f04f 0900 	mov.w	r9, #0
 800f89e:	f10d 0802 	add.w	r8, sp, #2
 800f8a2:	af03      	add	r7, sp, #12
 800f8a4:	ae02      	add	r6, sp, #8
 800f8a6:	4648      	mov	r0, r9
 800f8a8:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800f8ac:	2201      	movs	r2, #1
 800f8ae:	2102      	movs	r1, #2
 800f8b0:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800f8b4:	f000 ff06 	bl	80106c4 <uxr_stream_id>
 800f8b8:	9001      	str	r0, [sp, #4]
 800f8ba:	3520      	adds	r5, #32
 800f8bc:	e00c      	b.n	800f8d8 <uxr_flash_output_streams+0x90>
 800f8be:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800f8c2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800f8c6:	9b02      	ldr	r3, [sp, #8]
 800f8c8:	f000 fe6e 	bl	80105a8 <uxr_stamp_session_header>
 800f8cc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f8ce:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800f8d2:	e9d3 0a00 	ldrd	r0, sl, [r3]
 800f8d6:	47d0      	blx	sl
 800f8d8:	4643      	mov	r3, r8
 800f8da:	463a      	mov	r2, r7
 800f8dc:	4631      	mov	r1, r6
 800f8de:	4628      	mov	r0, r5
 800f8e0:	f004 ff0e 	bl	8014700 <uxr_prepare_next_reliable_buffer_to_send>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	4620      	mov	r0, r4
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d1e8      	bne.n	800f8be <uxr_flash_output_streams+0x76>
 800f8ec:	f109 0901 	add.w	r9, r9, #1
 800f8f0:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800f8f4:	fa5f f089 	uxtb.w	r0, r9
 800f8f8:	4283      	cmp	r3, r0
 800f8fa:	d8d5      	bhi.n	800f8a8 <uxr_flash_output_streams+0x60>
 800f8fc:	b004      	add	sp, #16
 800f8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f902:	9b02      	ldr	r3, [sp, #8]
 800f904:	4620      	mov	r0, r4
 800f906:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800f90a:	f109 0901 	add.w	r9, r9, #1
 800f90e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800f912:	f000 fe49 	bl	80105a8 <uxr_stamp_session_header>
 800f916:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f918:	9a03      	ldr	r2, [sp, #12]
 800f91a:	685d      	ldr	r5, [r3, #4]
 800f91c:	6818      	ldr	r0, [r3, #0]
 800f91e:	9902      	ldr	r1, [sp, #8]
 800f920:	47a8      	blx	r5
 800f922:	7e23      	ldrb	r3, [r4, #24]
 800f924:	fa5f f089 	uxtb.w	r0, r9
 800f928:	4283      	cmp	r3, r0
 800f92a:	d89a      	bhi.n	800f862 <uxr_flash_output_streams+0x1a>
 800f92c:	e7b2      	b.n	800f894 <uxr_flash_output_streams+0x4c>
 800f92e:	bf00      	nop

0800f930 <read_submessage_info>:
 800f930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f934:	460d      	mov	r5, r1
 800f936:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800f93a:	4606      	mov	r6, r0
 800f93c:	4669      	mov	r1, sp
 800f93e:	4628      	mov	r0, r5
 800f940:	f001 fef8 	bl	8011734 <uxr_deserialize_BaseObjectReply>
 800f944:	4604      	mov	r4, r0
 800f946:	a902      	add	r1, sp, #8
 800f948:	4628      	mov	r0, r5
 800f94a:	f89d 7005 	ldrb.w	r7, [sp, #5]
 800f94e:	f7fe f8f9 	bl	800db44 <ucdr_deserialize_bool>
 800f952:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800f956:	4004      	ands	r4, r0
 800f958:	b2e4      	uxtb	r4, r4
 800f95a:	b95b      	cbnz	r3, 800f974 <read_submessage_info+0x44>
 800f95c:	a987      	add	r1, sp, #540	@ 0x21c
 800f95e:	4628      	mov	r0, r5
 800f960:	f7fe f8f0 	bl	800db44 <ucdr_deserialize_bool>
 800f964:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800f968:	4680      	mov	r8, r0
 800f96a:	b94b      	cbnz	r3, 800f980 <read_submessage_info+0x50>
 800f96c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800f970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f974:	a903      	add	r1, sp, #12
 800f976:	4628      	mov	r0, r5
 800f978:	f001 fd88 	bl	801148c <uxr_deserialize_ObjectVariant>
 800f97c:	4004      	ands	r4, r0
 800f97e:	e7ed      	b.n	800f95c <read_submessage_info+0x2c>
 800f980:	a988      	add	r1, sp, #544	@ 0x220
 800f982:	4628      	mov	r0, r5
 800f984:	f7fe f90c 	bl	800dba0 <ucdr_deserialize_uint8_t>
 800f988:	ea14 0f08 	tst.w	r4, r8
 800f98c:	d0ee      	beq.n	800f96c <read_submessage_info+0x3c>
 800f98e:	2800      	cmp	r0, #0
 800f990:	d0ec      	beq.n	800f96c <read_submessage_info+0x3c>
 800f992:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800f996:	2b0d      	cmp	r3, #13
 800f998:	d1e8      	bne.n	800f96c <read_submessage_info+0x3c>
 800f99a:	a98a      	add	r1, sp, #552	@ 0x228
 800f99c:	4628      	mov	r0, r5
 800f99e:	f7fe fea5 	bl	800e6ec <ucdr_deserialize_int16_t>
 800f9a2:	b138      	cbz	r0, 800f9b4 <read_submessage_info+0x84>
 800f9a4:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	dd06      	ble.n	800f9ba <read_submessage_info+0x8a>
 800f9ac:	2f00      	cmp	r7, #0
 800f9ae:	bf14      	ite	ne
 800f9b0:	2001      	movne	r0, #1
 800f9b2:	2002      	moveq	r0, #2
 800f9b4:	f886 00b5 	strb.w	r0, [r6, #181]	@ 0xb5
 800f9b8:	e7d8      	b.n	800f96c <read_submessage_info+0x3c>
 800f9ba:	2000      	movs	r0, #0
 800f9bc:	e7fa      	b.n	800f9b4 <read_submessage_info+0x84>
 800f9be:	bf00      	nop

0800f9c0 <read_submessage_list>:
 800f9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9c4:	4604      	mov	r4, r0
 800f9c6:	b097      	sub	sp, #92	@ 0x5c
 800f9c8:	460d      	mov	r5, r1
 800f9ca:	4ec1      	ldr	r6, [pc, #772]	@ (800fcd0 <read_submessage_list+0x310>)
 800f9cc:	9209      	str	r2, [sp, #36]	@ 0x24
 800f9ce:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800f9d2:	aa0c      	add	r2, sp, #48	@ 0x30
 800f9d4:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800f9d8:	4628      	mov	r0, r5
 800f9da:	f000 ffcb 	bl	8010974 <uxr_read_submessage_header>
 800f9de:	2800      	cmp	r0, #0
 800f9e0:	f000 8142 	beq.w	800fc68 <read_submessage_list+0x2a8>
 800f9e4:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800f9e8:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800f9ec:	3b02      	subs	r3, #2
 800f9ee:	2b0d      	cmp	r3, #13
 800f9f0:	d8ed      	bhi.n	800f9ce <read_submessage_list+0xe>
 800f9f2:	a101      	add	r1, pc, #4	@ (adr r1, 800f9f8 <read_submessage_list+0x38>)
 800f9f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f9f8:	0800fc5f 	.word	0x0800fc5f
 800f9fc:	0800f9cf 	.word	0x0800f9cf
 800fa00:	0800fc4f 	.word	0x0800fc4f
 800fa04:	0800fbed 	.word	0x0800fbed
 800fa08:	0800fbe3 	.word	0x0800fbe3
 800fa0c:	0800f9cf 	.word	0x0800f9cf
 800fa10:	0800f9cf 	.word	0x0800f9cf
 800fa14:	0800fb39 	.word	0x0800fb39
 800fa18:	0800facb 	.word	0x0800facb
 800fa1c:	0800fa8b 	.word	0x0800fa8b
 800fa20:	0800f9cf 	.word	0x0800f9cf
 800fa24:	0800f9cf 	.word	0x0800f9cf
 800fa28:	0800f9cf 	.word	0x0800f9cf
 800fa2c:	0800fa31 	.word	0x0800fa31
 800fa30:	a910      	add	r1, sp, #64	@ 0x40
 800fa32:	4628      	mov	r0, r5
 800fa34:	f002 f8a6 	bl	8011b84 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800fa38:	f8d4 8090 	ldr.w	r8, [r4, #144]	@ 0x90
 800fa3c:	f1b8 0f00 	cmp.w	r8, #0
 800fa40:	f000 811a 	beq.w	800fc78 <read_submessage_list+0x2b8>
 800fa44:	f000 ffde 	bl	8010a04 <uxr_nanos>
 800fa48:	4602      	mov	r2, r0
 800fa4a:	460b      	mov	r3, r1
 800fa4c:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 800fa50:	2100      	movs	r1, #0
 800fa52:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 800fa54:	9006      	str	r0, [sp, #24]
 800fa56:	468c      	mov	ip, r1
 800fa58:	9815      	ldr	r0, [sp, #84]	@ 0x54
 800fa5a:	fbc7 0c06 	smlal	r0, ip, r7, r6
 800fa5e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800fa60:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 800fa64:	468c      	mov	ip, r1
 800fa66:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800fa68:	fbc7 0c06 	smlal	r0, ip, r7, r6
 800fa6c:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 800fa70:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	@ 0x48
 800fa74:	fbc7 0106 	smlal	r0, r1, r7, r6
 800fa78:	e9cd 0100 	strd	r0, r1, [sp]
 800fa7c:	4620      	mov	r0, r4
 800fa7e:	47c0      	blx	r8
 800fa80:	f04f 0301 	mov.w	r3, #1
 800fa84:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 800fa88:	e7a1      	b.n	800f9ce <read_submessage_list+0xe>
 800fa8a:	a910      	add	r1, sp, #64	@ 0x40
 800fa8c:	4628      	mov	r0, r5
 800fa8e:	f002 f865 	bl	8011b5c <uxr_deserialize_HEARTBEAT_Payload>
 800fa92:	2100      	movs	r1, #0
 800fa94:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800fa98:	f000 fe42 	bl	8010720 <uxr_stream_id_from_raw>
 800fa9c:	f3c0 2807 	ubfx	r8, r0, #8, #8
 800faa0:	900f      	str	r0, [sp, #60]	@ 0x3c
 800faa2:	f104 0008 	add.w	r0, r4, #8
 800faa6:	4641      	mov	r1, r8
 800faa8:	f000 ff28 	bl	80108fc <uxr_get_input_reliable_stream>
 800faac:	2800      	cmp	r0, #0
 800faae:	d08e      	beq.n	800f9ce <read_submessage_list+0xe>
 800fab0:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800fab4:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800fab8:	f004 fb6a 	bl	8014190 <uxr_process_heartbeat>
 800fabc:	4642      	mov	r2, r8
 800fabe:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800fac2:	4620      	mov	r0, r4
 800fac4:	f7ff fde6 	bl	800f694 <write_submessage_acknack.isra.0>
 800fac8:	e781      	b.n	800f9ce <read_submessage_list+0xe>
 800faca:	a910      	add	r1, sp, #64	@ 0x40
 800facc:	4628      	mov	r0, r5
 800face:	f002 f81d 	bl	8011b0c <uxr_deserialize_ACKNACK_Payload>
 800fad2:	2100      	movs	r1, #0
 800fad4:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800fad8:	f000 fe22 	bl	8010720 <uxr_stream_id_from_raw>
 800fadc:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800fae0:	900d      	str	r0, [sp, #52]	@ 0x34
 800fae2:	f104 0008 	add.w	r0, r4, #8
 800fae6:	f000 fef3 	bl	80108d0 <uxr_get_output_reliable_stream>
 800faea:	4680      	mov	r8, r0
 800faec:	2800      	cmp	r0, #0
 800faee:	f43f af6e 	beq.w	800f9ce <read_submessage_list+0xe>
 800faf2:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800faf6:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800fafa:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800fafe:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800fb02:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800fb06:	b289      	uxth	r1, r1
 800fb08:	f004 fea2 	bl	8014850 <uxr_process_acknack>
 800fb0c:	4640      	mov	r0, r8
 800fb0e:	f004 fe63 	bl	80147d8 <uxr_begin_output_nack_buffer_it>
 800fb12:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800fb16:	e005      	b.n	800fb24 <read_submessage_list+0x164>
 800fb18:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fb1a:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	@ 0x38
 800fb1e:	e9d3 0900 	ldrd	r0, r9, [r3]
 800fb22:	47c8      	blx	r9
 800fb24:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800fb28:	aa0f      	add	r2, sp, #60	@ 0x3c
 800fb2a:	4651      	mov	r1, sl
 800fb2c:	4640      	mov	r0, r8
 800fb2e:	f004 fe55 	bl	80147dc <uxr_next_reliable_nack_buffer_to_send>
 800fb32:	2800      	cmp	r0, #0
 800fb34:	d1f0      	bne.n	800fb18 <read_submessage_list+0x158>
 800fb36:	e74a      	b.n	800f9ce <read_submessage_list+0xe>
 800fb38:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800fb3c:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800fb40:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 800fb44:	4628      	mov	r0, r5
 800fb46:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800fb4a:	4651      	mov	r1, sl
 800fb4c:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800fb50:	f1a8 0804 	sub.w	r8, r8, #4
 800fb54:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800fb58:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800fb5c:	fa1f f888 	uxth.w	r8, r8
 800fb60:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800fb64:	f009 090e 	and.w	r9, r9, #14
 800fb68:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800fb6c:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800fb70:	f001 fd2e 	bl	80115d0 <uxr_deserialize_BaseObjectRequest>
 800fb74:	4650      	mov	r0, sl
 800fb76:	a90f      	add	r1, sp, #60	@ 0x3c
 800fb78:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800fb7c:	f000 fd90 	bl	80106a0 <uxr_parse_base_object_request>
 800fb80:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800fb82:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800fb86:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800fb8a:	9110      	str	r1, [sp, #64]	@ 0x40
 800fb8c:	f1bb 0f00 	cmp.w	fp, #0
 800fb90:	d006      	beq.n	800fba0 <read_submessage_list+0x1e0>
 800fb92:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800fb96:	4652      	mov	r2, sl
 800fb98:	4620      	mov	r0, r4
 800fb9a:	9300      	str	r3, [sp, #0]
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	47d8      	blx	fp
 800fba0:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800fba2:	b182      	cbz	r2, 800fbc6 <read_submessage_list+0x206>
 800fba4:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 800fba6:	f04f 0c00 	mov.w	ip, #0
 800fbaa:	3902      	subs	r1, #2
 800fbac:	e003      	b.n	800fbb6 <read_submessage_list+0x1f6>
 800fbae:	f10c 0c01 	add.w	ip, ip, #1
 800fbb2:	4594      	cmp	ip, r2
 800fbb4:	d007      	beq.n	800fbc6 <read_submessage_list+0x206>
 800fbb6:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 800fbba:	4553      	cmp	r3, sl
 800fbbc:	d1f7      	bne.n	800fbae <read_submessage_list+0x1ee>
 800fbbe:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	f803 200c 	strb.w	r2, [r3, ip]
 800fbc6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800fbca:	464b      	mov	r3, r9
 800fbcc:	4642      	mov	r2, r8
 800fbce:	4620      	mov	r0, r4
 800fbd0:	9102      	str	r1, [sp, #8]
 800fbd2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800fbd4:	9101      	str	r1, [sp, #4]
 800fbd6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800fbd8:	9100      	str	r1, [sp, #0]
 800fbda:	4629      	mov	r1, r5
 800fbdc:	f004 fec0 	bl	8014960 <read_submessage_format>
 800fbe0:	e6f5      	b.n	800f9ce <read_submessage_list+0xe>
 800fbe2:	4629      	mov	r1, r5
 800fbe4:	4620      	mov	r0, r4
 800fbe6:	f7ff fea3 	bl	800f930 <read_submessage_info>
 800fbea:	e6f0      	b.n	800f9ce <read_submessage_list+0xe>
 800fbec:	2a00      	cmp	r2, #0
 800fbee:	d03e      	beq.n	800fc6e <read_submessage_list+0x2ae>
 800fbf0:	a910      	add	r1, sp, #64	@ 0x40
 800fbf2:	4628      	mov	r0, r5
 800fbf4:	f001 fee2 	bl	80119bc <uxr_deserialize_STATUS_Payload>
 800fbf8:	a90e      	add	r1, sp, #56	@ 0x38
 800fbfa:	aa0d      	add	r2, sp, #52	@ 0x34
 800fbfc:	a810      	add	r0, sp, #64	@ 0x40
 800fbfe:	f000 fd4f 	bl	80106a0 <uxr_parse_base_object_request>
 800fc02:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800fc04:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800fc08:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800fc0c:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 800fc10:	910f      	str	r1, [sp, #60]	@ 0x3c
 800fc12:	f1ba 0f00 	cmp.w	sl, #0
 800fc16:	d006      	beq.n	800fc26 <read_submessage_list+0x266>
 800fc18:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800fc1c:	4642      	mov	r2, r8
 800fc1e:	4620      	mov	r0, r4
 800fc20:	9300      	str	r3, [sp, #0]
 800fc22:	464b      	mov	r3, r9
 800fc24:	47d0      	blx	sl
 800fc26:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800fc28:	2a00      	cmp	r2, #0
 800fc2a:	f43f aed0 	beq.w	800f9ce <read_submessage_list+0xe>
 800fc2e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800fc30:	2100      	movs	r1, #0
 800fc32:	3802      	subs	r0, #2
 800fc34:	e003      	b.n	800fc3e <read_submessage_list+0x27e>
 800fc36:	3101      	adds	r1, #1
 800fc38:	4291      	cmp	r1, r2
 800fc3a:	f43f aec8 	beq.w	800f9ce <read_submessage_list+0xe>
 800fc3e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800fc42:	4543      	cmp	r3, r8
 800fc44:	d1f7      	bne.n	800fc36 <read_submessage_list+0x276>
 800fc46:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800fc48:	f803 9001 	strb.w	r9, [r3, r1]
 800fc4c:	e6bf      	b.n	800f9ce <read_submessage_list+0xe>
 800fc4e:	2a00      	cmp	r2, #0
 800fc50:	f47f aebd 	bne.w	800f9ce <read_submessage_list+0xe>
 800fc54:	4629      	mov	r1, r5
 800fc56:	4620      	mov	r0, r4
 800fc58:	f000 fc66 	bl	8010528 <uxr_read_create_session_status>
 800fc5c:	e6b7      	b.n	800f9ce <read_submessage_list+0xe>
 800fc5e:	4629      	mov	r1, r5
 800fc60:	4620      	mov	r0, r4
 800fc62:	f7ff fce1 	bl	800f628 <read_submessage_get_info>
 800fc66:	e6b2      	b.n	800f9ce <read_submessage_list+0xe>
 800fc68:	b017      	add	sp, #92	@ 0x5c
 800fc6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc6e:	4629      	mov	r1, r5
 800fc70:	4620      	mov	r0, r4
 800fc72:	f000 fc67 	bl	8010544 <uxr_read_delete_session_status>
 800fc76:	e6aa      	b.n	800f9ce <read_submessage_list+0xe>
 800fc78:	f000 fec4 	bl	8010a04 <uxr_nanos>
 800fc7c:	4642      	mov	r2, r8
 800fc7e:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 800fc80:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800fc82:	fbc7 3206 	smlal	r3, r2, r7, r6
 800fc86:	1818      	adds	r0, r3, r0
 800fc88:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800fc8a:	eb42 0101 	adc.w	r1, r2, r1
 800fc8e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fc90:	4642      	mov	r2, r8
 800fc92:	fbc7 3206 	smlal	r3, r2, r7, r6
 800fc96:	469c      	mov	ip, r3
 800fc98:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	@ 0x40
 800fc9c:	fbc3 7806 	smlal	r7, r8, r3, r6
 800fca0:	4643      	mov	r3, r8
 800fca2:	eb1c 0c07 	adds.w	ip, ip, r7
 800fca6:	eb42 0203 	adc.w	r2, r2, r3
 800fcaa:	ebb0 030c 	subs.w	r3, r0, ip
 800fcae:	eb61 0202 	sbc.w	r2, r1, r2
 800fcb2:	2a00      	cmp	r2, #0
 800fcb4:	db08      	blt.n	800fcc8 <read_submessage_list+0x308>
 800fcb6:	085b      	lsrs	r3, r3, #1
 800fcb8:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 800fcbc:	1052      	asrs	r2, r2, #1
 800fcbe:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 800fcc2:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 800fcc6:	e6db      	b.n	800fa80 <read_submessage_list+0xc0>
 800fcc8:	3301      	adds	r3, #1
 800fcca:	f142 0200 	adc.w	r2, r2, #0
 800fcce:	e7f2      	b.n	800fcb6 <read_submessage_list+0x2f6>
 800fcd0:	3b9aca00 	.word	0x3b9aca00

0800fcd4 <listen_message_reliably>:
 800fcd4:	1e0b      	subs	r3, r1, #0
 800fcd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcda:	bfb8      	it	lt
 800fcdc:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800fce0:	b09d      	sub	sp, #116	@ 0x74
 800fce2:	4680      	mov	r8, r0
 800fce4:	9305      	str	r3, [sp, #20]
 800fce6:	f000 fe71 	bl	80109cc <uxr_millis>
 800fcea:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800fcee:	4681      	mov	r9, r0
 800fcf0:	2a00      	cmp	r2, #0
 800fcf2:	f000 809a 	beq.w	800fe2a <listen_message_reliably+0x156>
 800fcf6:	2600      	movs	r6, #0
 800fcf8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800fcfc:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800fd00:	460f      	mov	r7, r1
 800fd02:	4630      	mov	r0, r6
 800fd04:	9303      	str	r3, [sp, #12]
 800fd06:	e00e      	b.n	800fd26 <listen_message_reliably+0x52>
 800fd08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fd0a:	3601      	adds	r6, #1
 800fd0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fd0e:	455a      	cmp	r2, fp
 800fd10:	9903      	ldr	r1, [sp, #12]
 800fd12:	b2f0      	uxtb	r0, r6
 800fd14:	eb73 0101 	sbcs.w	r1, r3, r1
 800fd18:	da01      	bge.n	800fd1e <listen_message_reliably+0x4a>
 800fd1a:	4693      	mov	fp, r2
 800fd1c:	9303      	str	r3, [sp, #12]
 800fd1e:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800fd22:	4283      	cmp	r3, r0
 800fd24:	d95f      	bls.n	800fde6 <listen_message_reliably+0x112>
 800fd26:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800fd2a:	2102      	movs	r1, #2
 800fd2c:	2201      	movs	r2, #1
 800fd2e:	00e4      	lsls	r4, r4, #3
 800fd30:	f000 fcc8 	bl	80106c4 <uxr_stream_id>
 800fd34:	4601      	mov	r1, r0
 800fd36:	f104 0520 	add.w	r5, r4, #32
 800fd3a:	463b      	mov	r3, r7
 800fd3c:	464a      	mov	r2, r9
 800fd3e:	9109      	str	r1, [sp, #36]	@ 0x24
 800fd40:	4445      	add	r5, r8
 800fd42:	4628      	mov	r0, r5
 800fd44:	f004 fd1c 	bl	8014780 <uxr_update_output_stream_heartbeat_timestamp>
 800fd48:	eb08 0304 	add.w	r3, r8, r4
 800fd4c:	2800      	cmp	r0, #0
 800fd4e:	d0db      	beq.n	800fd08 <listen_message_reliably+0x34>
 800fd50:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800fd54:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800fd58:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800fd5c:	4640      	mov	r0, r8
 800fd5e:	3501      	adds	r5, #1
 800fd60:	4444      	add	r4, r8
 800fd62:	9304      	str	r3, [sp, #16]
 800fd64:	f000 fc74 	bl	8010650 <uxr_session_header_offset>
 800fd68:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	2211      	movs	r2, #17
 800fd70:	a90c      	add	r1, sp, #48	@ 0x30
 800fd72:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800fd76:	9000      	str	r0, [sp, #0]
 800fd78:	4650      	mov	r0, sl
 800fd7a:	3601      	adds	r6, #1
 800fd7c:	f7ff f9ca 	bl	800f114 <ucdr_init_buffer_origin_offset>
 800fd80:	2300      	movs	r3, #0
 800fd82:	2205      	movs	r2, #5
 800fd84:	210b      	movs	r1, #11
 800fd86:	4650      	mov	r0, sl
 800fd88:	f000 fdda 	bl	8010940 <uxr_buffer_submessage_header>
 800fd8c:	2101      	movs	r1, #1
 800fd8e:	8968      	ldrh	r0, [r5, #10]
 800fd90:	f004 feb0 	bl	8014af4 <uxr_seq_num_add>
 800fd94:	892b      	ldrh	r3, [r5, #8]
 800fd96:	4602      	mov	r2, r0
 800fd98:	a90a      	add	r1, sp, #40	@ 0x28
 800fd9a:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800fd9e:	4650      	mov	r0, sl
 800fda0:	9b04      	ldr	r3, [sp, #16]
 800fda2:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800fda6:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800fdaa:	f001 fec3 	bl	8011b34 <uxr_serialize_HEARTBEAT_Payload>
 800fdae:	2200      	movs	r2, #0
 800fdb0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fdb2:	4640      	mov	r0, r8
 800fdb4:	4611      	mov	r1, r2
 800fdb6:	f000 fbf7 	bl	80105a8 <uxr_stamp_session_header>
 800fdba:	4650      	mov	r0, sl
 800fdbc:	f7ff f9ea 	bl	800f194 <ucdr_buffer_length>
 800fdc0:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800fdc4:	4602      	mov	r2, r0
 800fdc6:	a90c      	add	r1, sp, #48	@ 0x30
 800fdc8:	e9d3 0500 	ldrd	r0, r5, [r3]
 800fdcc:	47a8      	blx	r5
 800fdce:	9903      	ldr	r1, [sp, #12]
 800fdd0:	b2f0      	uxtb	r0, r6
 800fdd2:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800fdd6:	455a      	cmp	r2, fp
 800fdd8:	eb73 0101 	sbcs.w	r1, r3, r1
 800fddc:	db9d      	blt.n	800fd1a <listen_message_reliably+0x46>
 800fdde:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800fde2:	4283      	cmp	r3, r0
 800fde4:	d89f      	bhi.n	800fd26 <listen_message_reliably+0x52>
 800fde6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800fdea:	9a03      	ldr	r2, [sp, #12]
 800fdec:	429a      	cmp	r2, r3
 800fdee:	bf08      	it	eq
 800fdf0:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800fdf4:	d019      	beq.n	800fe2a <listen_message_reliably+0x156>
 800fdf6:	ebab 0309 	sub.w	r3, fp, r9
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	9d05      	ldr	r5, [sp, #20]
 800fdfe:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 800fe02:	aa08      	add	r2, sp, #32
 800fe04:	bf08      	it	eq
 800fe06:	2301      	moveq	r3, #1
 800fe08:	a907      	add	r1, sp, #28
 800fe0a:	6884      	ldr	r4, [r0, #8]
 800fe0c:	429d      	cmp	r5, r3
 800fe0e:	6800      	ldr	r0, [r0, #0]
 800fe10:	bfa8      	it	ge
 800fe12:	461d      	movge	r5, r3
 800fe14:	462b      	mov	r3, r5
 800fe16:	47a0      	blx	r4
 800fe18:	b948      	cbnz	r0, 800fe2e <listen_message_reliably+0x15a>
 800fe1a:	9b05      	ldr	r3, [sp, #20]
 800fe1c:	1b5b      	subs	r3, r3, r5
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	9305      	str	r3, [sp, #20]
 800fe22:	f73f af60 	bgt.w	800fce6 <listen_message_reliably+0x12>
 800fe26:	4604      	mov	r4, r0
 800fe28:	e012      	b.n	800fe50 <listen_message_reliably+0x17c>
 800fe2a:	9b05      	ldr	r3, [sp, #20]
 800fe2c:	e7e5      	b.n	800fdfa <listen_message_reliably+0x126>
 800fe2e:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800fe32:	4604      	mov	r4, r0
 800fe34:	2500      	movs	r5, #0
 800fe36:	a80c      	add	r0, sp, #48	@ 0x30
 800fe38:	f7ff f97e 	bl	800f138 <ucdr_init_buffer>
 800fe3c:	f10d 031a 	add.w	r3, sp, #26
 800fe40:	aa06      	add	r2, sp, #24
 800fe42:	a90c      	add	r1, sp, #48	@ 0x30
 800fe44:	4640      	mov	r0, r8
 800fe46:	f88d 5018 	strb.w	r5, [sp, #24]
 800fe4a:	f000 fbc1 	bl	80105d0 <uxr_read_session_header>
 800fe4e:	b918      	cbnz	r0, 800fe58 <listen_message_reliably+0x184>
 800fe50:	4620      	mov	r0, r4
 800fe52:	b01d      	add	sp, #116	@ 0x74
 800fe54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe58:	4629      	mov	r1, r5
 800fe5a:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800fe5e:	f000 fc5f 	bl	8010720 <uxr_stream_id_from_raw>
 800fe62:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800fe66:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800fe6a:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800fe6e:	2e01      	cmp	r6, #1
 800fe70:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800fe74:	d04b      	beq.n	800ff0e <listen_message_reliably+0x23a>
 800fe76:	2e02      	cmp	r6, #2
 800fe78:	d00f      	beq.n	800fe9a <listen_message_reliably+0x1c6>
 800fe7a:	2e00      	cmp	r6, #0
 800fe7c:	d1e8      	bne.n	800fe50 <listen_message_reliably+0x17c>
 800fe7e:	4631      	mov	r1, r6
 800fe80:	4630      	mov	r0, r6
 800fe82:	f000 fc4d 	bl	8010720 <uxr_stream_id_from_raw>
 800fe86:	4602      	mov	r2, r0
 800fe88:	a90c      	add	r1, sp, #48	@ 0x30
 800fe8a:	4640      	mov	r0, r8
 800fe8c:	920a      	str	r2, [sp, #40]	@ 0x28
 800fe8e:	f7ff fd97 	bl	800f9c0 <read_submessage_list>
 800fe92:	4620      	mov	r0, r4
 800fe94:	b01d      	add	sp, #116	@ 0x74
 800fe96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe9a:	4629      	mov	r1, r5
 800fe9c:	f108 0008 	add.w	r0, r8, #8
 800fea0:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800fea4:	f000 fd2a 	bl	80108fc <uxr_get_input_reliable_stream>
 800fea8:	4607      	mov	r7, r0
 800feaa:	b338      	cbz	r0, 800fefc <listen_message_reliably+0x228>
 800feac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800feae:	a80c      	add	r0, sp, #48	@ 0x30
 800feb0:	9203      	str	r2, [sp, #12]
 800feb2:	f7ff f973 	bl	800f19c <ucdr_buffer_remaining>
 800feb6:	4603      	mov	r3, r0
 800feb8:	f10d 0019 	add.w	r0, sp, #25
 800febc:	9a03      	ldr	r2, [sp, #12]
 800febe:	4651      	mov	r1, sl
 800fec0:	9000      	str	r0, [sp, #0]
 800fec2:	4638      	mov	r0, r7
 800fec4:	f004 f868 	bl	8013f98 <uxr_receive_reliable_message>
 800fec8:	b1c0      	cbz	r0, 800fefc <listen_message_reliably+0x228>
 800feca:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800fece:	b393      	cbz	r3, 800ff36 <listen_message_reliably+0x262>
 800fed0:	ae14      	add	r6, sp, #80	@ 0x50
 800fed2:	f04f 0a02 	mov.w	sl, #2
 800fed6:	e00a      	b.n	800feee <listen_message_reliably+0x21a>
 800fed8:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800fedc:	4631      	mov	r1, r6
 800fede:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 800fee2:	4640      	mov	r0, r8
 800fee4:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800fee8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800feea:	f7ff fd69 	bl	800f9c0 <read_submessage_list>
 800feee:	2204      	movs	r2, #4
 800fef0:	4631      	mov	r1, r6
 800fef2:	4638      	mov	r0, r7
 800fef4:	f004 f8d2 	bl	801409c <uxr_next_input_reliable_buffer_available>
 800fef8:	2800      	cmp	r0, #0
 800fefa:	d1ed      	bne.n	800fed8 <listen_message_reliably+0x204>
 800fefc:	4640      	mov	r0, r8
 800fefe:	462a      	mov	r2, r5
 800ff00:	4649      	mov	r1, r9
 800ff02:	f7ff fbc7 	bl	800f694 <write_submessage_acknack.isra.0>
 800ff06:	4620      	mov	r0, r4
 800ff08:	b01d      	add	sp, #116	@ 0x74
 800ff0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff0e:	4629      	mov	r1, r5
 800ff10:	f108 0008 	add.w	r0, r8, #8
 800ff14:	f000 fce8 	bl	80108e8 <uxr_get_input_best_effort_stream>
 800ff18:	2800      	cmp	r0, #0
 800ff1a:	d099      	beq.n	800fe50 <listen_message_reliably+0x17c>
 800ff1c:	4651      	mov	r1, sl
 800ff1e:	f003 ffb1 	bl	8013e84 <uxr_receive_best_effort_message>
 800ff22:	2800      	cmp	r0, #0
 800ff24:	d094      	beq.n	800fe50 <listen_message_reliably+0x17c>
 800ff26:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800ff2a:	a90c      	add	r1, sp, #48	@ 0x30
 800ff2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ff2e:	4640      	mov	r0, r8
 800ff30:	f7ff fd46 	bl	800f9c0 <read_submessage_list>
 800ff34:	e78c      	b.n	800fe50 <listen_message_reliably+0x17c>
 800ff36:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800ff3a:	a90c      	add	r1, sp, #48	@ 0x30
 800ff3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ff3e:	4640      	mov	r0, r8
 800ff40:	f7ff fd3e 	bl	800f9c0 <read_submessage_list>
 800ff44:	e7c4      	b.n	800fed0 <listen_message_reliably+0x1fc>
 800ff46:	bf00      	nop

0800ff48 <uxr_run_session_until_confirm_delivery>:
 800ff48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff4c:	4606      	mov	r6, r0
 800ff4e:	460d      	mov	r5, r1
 800ff50:	f000 fd3c 	bl	80109cc <uxr_millis>
 800ff54:	4607      	mov	r7, r0
 800ff56:	4630      	mov	r0, r6
 800ff58:	f106 0808 	add.w	r8, r6, #8
 800ff5c:	f7ff fc74 	bl	800f848 <uxr_flash_output_streams>
 800ff60:	2d00      	cmp	r5, #0
 800ff62:	db10      	blt.n	800ff86 <uxr_run_session_until_confirm_delivery+0x3e>
 800ff64:	462c      	mov	r4, r5
 800ff66:	e006      	b.n	800ff76 <uxr_run_session_until_confirm_delivery+0x2e>
 800ff68:	f7ff feb4 	bl	800fcd4 <listen_message_reliably>
 800ff6c:	f000 fd2e 	bl	80109cc <uxr_millis>
 800ff70:	1bc3      	subs	r3, r0, r7
 800ff72:	1aec      	subs	r4, r5, r3
 800ff74:	d407      	bmi.n	800ff86 <uxr_run_session_until_confirm_delivery+0x3e>
 800ff76:	4640      	mov	r0, r8
 800ff78:	f000 fccc 	bl	8010914 <uxr_output_streams_confirmed>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	4621      	mov	r1, r4
 800ff80:	4630      	mov	r0, r6
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d0f0      	beq.n	800ff68 <uxr_run_session_until_confirm_delivery+0x20>
 800ff86:	4640      	mov	r0, r8
 800ff88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff8c:	f000 bcc2 	b.w	8010914 <uxr_output_streams_confirmed>

0800ff90 <uxr_run_session_until_all_status>:
 800ff90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff94:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 800ff98:	4606      	mov	r6, r0
 800ff9a:	4688      	mov	r8, r1
 800ff9c:	4692      	mov	sl, r2
 800ff9e:	461f      	mov	r7, r3
 800ffa0:	f7ff fc52 	bl	800f848 <uxr_flash_output_streams>
 800ffa4:	f1bb 0f00 	cmp.w	fp, #0
 800ffa8:	d004      	beq.n	800ffb4 <uxr_run_session_until_all_status+0x24>
 800ffaa:	465a      	mov	r2, fp
 800ffac:	21ff      	movs	r1, #255	@ 0xff
 800ffae:	4638      	mov	r0, r7
 800ffb0:	f006 fbd6 	bl	8016760 <memset>
 800ffb4:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 800ffb8:	1e7d      	subs	r5, r7, #1
 800ffba:	e9c6 a71d 	strd	sl, r7, [r6, #116]	@ 0x74
 800ffbe:	f000 fd05 	bl	80109cc <uxr_millis>
 800ffc2:	4641      	mov	r1, r8
 800ffc4:	4681      	mov	r9, r0
 800ffc6:	4630      	mov	r0, r6
 800ffc8:	f7ff fe84 	bl	800fcd4 <listen_message_reliably>
 800ffcc:	f000 fcfe 	bl	80109cc <uxr_millis>
 800ffd0:	eba0 0009 	sub.w	r0, r0, r9
 800ffd4:	eba8 0100 	sub.w	r1, r8, r0
 800ffd8:	f1bb 0f00 	cmp.w	fp, #0
 800ffdc:	d029      	beq.n	8010032 <uxr_run_session_until_all_status+0xa2>
 800ffde:	46ae      	mov	lr, r5
 800ffe0:	f04f 0c00 	mov.w	ip, #0
 800ffe4:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 800ffe8:	2cff      	cmp	r4, #255	@ 0xff
 800ffea:	d015      	beq.n	8010018 <uxr_run_session_until_all_status+0x88>
 800ffec:	f10c 0c01 	add.w	ip, ip, #1
 800fff0:	45e3      	cmp	fp, ip
 800fff2:	d8f7      	bhi.n	800ffe4 <uxr_run_session_until_all_status+0x54>
 800fff4:	2300      	movs	r3, #0
 800fff6:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800fff8:	e000      	b.n	800fffc <uxr_run_session_until_all_status+0x6c>
 800fffa:	b158      	cbz	r0, 8010014 <uxr_run_session_until_all_status+0x84>
 800fffc:	462b      	mov	r3, r5
 800fffe:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8010002:	3302      	adds	r3, #2
 8010004:	2801      	cmp	r0, #1
 8010006:	eba3 0307 	sub.w	r3, r3, r7
 801000a:	bf8c      	ite	hi
 801000c:	2000      	movhi	r0, #0
 801000e:	2001      	movls	r0, #1
 8010010:	459b      	cmp	fp, r3
 8010012:	d8f2      	bhi.n	800fffa <uxr_run_session_until_all_status+0x6a>
 8010014:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010018:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 801001c:	f10c 0c01 	add.w	ip, ip, #1
 8010020:	45dc      	cmp	ip, fp
 8010022:	d201      	bcs.n	8010028 <uxr_run_session_until_all_status+0x98>
 8010024:	2b00      	cmp	r3, #0
 8010026:	d0dd      	beq.n	800ffe4 <uxr_run_session_until_all_status+0x54>
 8010028:	2900      	cmp	r1, #0
 801002a:	dde3      	ble.n	800fff4 <uxr_run_session_until_all_status+0x64>
 801002c:	2b00      	cmp	r3, #0
 801002e:	d1ca      	bne.n	800ffc6 <uxr_run_session_until_all_status+0x36>
 8010030:	e7e0      	b.n	800fff4 <uxr_run_session_until_all_status+0x64>
 8010032:	2001      	movs	r0, #1
 8010034:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8010038:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801003c <wait_session_status>:
 801003c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010040:	4604      	mov	r4, r0
 8010042:	b09d      	sub	sp, #116	@ 0x74
 8010044:	20ff      	movs	r0, #255	@ 0xff
 8010046:	9303      	str	r3, [sp, #12]
 8010048:	7160      	strb	r0, [r4, #5]
 801004a:	2b00      	cmp	r3, #0
 801004c:	f000 80b6 	beq.w	80101bc <wait_session_status+0x180>
 8010050:	4689      	mov	r9, r1
 8010052:	4692      	mov	sl, r2
 8010054:	f04f 0b00 	mov.w	fp, #0
 8010058:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801005a:	4652      	mov	r2, sl
 801005c:	4649      	mov	r1, r9
 801005e:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010062:	47a8      	blx	r5
 8010064:	f000 fcb2 	bl	80109cc <uxr_millis>
 8010068:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801006c:	4605      	mov	r5, r0
 801006e:	e009      	b.n	8010084 <wait_session_status+0x48>
 8010070:	f000 fcac 	bl	80109cc <uxr_millis>
 8010074:	1b40      	subs	r0, r0, r5
 8010076:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801007a:	2b00      	cmp	r3, #0
 801007c:	dd40      	ble.n	8010100 <wait_session_status+0xc4>
 801007e:	7960      	ldrb	r0, [r4, #5]
 8010080:	28ff      	cmp	r0, #255	@ 0xff
 8010082:	d145      	bne.n	8010110 <wait_session_status+0xd4>
 8010084:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8010086:	a908      	add	r1, sp, #32
 8010088:	6896      	ldr	r6, [r2, #8]
 801008a:	6810      	ldr	r0, [r2, #0]
 801008c:	aa09      	add	r2, sp, #36	@ 0x24
 801008e:	47b0      	blx	r6
 8010090:	2800      	cmp	r0, #0
 8010092:	d0ed      	beq.n	8010070 <wait_session_status+0x34>
 8010094:	a80c      	add	r0, sp, #48	@ 0x30
 8010096:	2600      	movs	r6, #0
 8010098:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801009c:	f7ff f84c 	bl	800f138 <ucdr_init_buffer>
 80100a0:	f10d 031e 	add.w	r3, sp, #30
 80100a4:	aa07      	add	r2, sp, #28
 80100a6:	a90c      	add	r1, sp, #48	@ 0x30
 80100a8:	4620      	mov	r0, r4
 80100aa:	f88d 601c 	strb.w	r6, [sp, #28]
 80100ae:	f000 fa8f 	bl	80105d0 <uxr_read_session_header>
 80100b2:	2800      	cmp	r0, #0
 80100b4:	d0dc      	beq.n	8010070 <wait_session_status+0x34>
 80100b6:	4631      	mov	r1, r6
 80100b8:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80100bc:	f000 fb30 	bl	8010720 <uxr_stream_id_from_raw>
 80100c0:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80100c4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80100c8:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80100cc:	2f01      	cmp	r7, #1
 80100ce:	9302      	str	r3, [sp, #8]
 80100d0:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 80100d4:	d05c      	beq.n	8010190 <wait_session_status+0x154>
 80100d6:	2f02      	cmp	r7, #2
 80100d8:	d020      	beq.n	801011c <wait_session_status+0xe0>
 80100da:	2f00      	cmp	r7, #0
 80100dc:	d1c8      	bne.n	8010070 <wait_session_status+0x34>
 80100de:	4639      	mov	r1, r7
 80100e0:	4638      	mov	r0, r7
 80100e2:	f000 fb1d 	bl	8010720 <uxr_stream_id_from_raw>
 80100e6:	a90c      	add	r1, sp, #48	@ 0x30
 80100e8:	4602      	mov	r2, r0
 80100ea:	900b      	str	r0, [sp, #44]	@ 0x2c
 80100ec:	4620      	mov	r0, r4
 80100ee:	f7ff fc67 	bl	800f9c0 <read_submessage_list>
 80100f2:	f000 fc6b 	bl	80109cc <uxr_millis>
 80100f6:	1b40      	subs	r0, r0, r5
 80100f8:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	dcbe      	bgt.n	801007e <wait_session_status+0x42>
 8010100:	f10b 0b01 	add.w	fp, fp, #1
 8010104:	9b03      	ldr	r3, [sp, #12]
 8010106:	7960      	ldrb	r0, [r4, #5]
 8010108:	455b      	cmp	r3, fp
 801010a:	d001      	beq.n	8010110 <wait_session_status+0xd4>
 801010c:	28ff      	cmp	r0, #255	@ 0xff
 801010e:	d0a3      	beq.n	8010058 <wait_session_status+0x1c>
 8010110:	38ff      	subs	r0, #255	@ 0xff
 8010112:	bf18      	it	ne
 8010114:	2001      	movne	r0, #1
 8010116:	b01d      	add	sp, #116	@ 0x74
 8010118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801011c:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8010120:	4631      	mov	r1, r6
 8010122:	f104 0008 	add.w	r0, r4, #8
 8010126:	9304      	str	r3, [sp, #16]
 8010128:	f000 fbe8 	bl	80108fc <uxr_get_input_reliable_stream>
 801012c:	4680      	mov	r8, r0
 801012e:	b348      	cbz	r0, 8010184 <wait_session_status+0x148>
 8010130:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010132:	a80c      	add	r0, sp, #48	@ 0x30
 8010134:	9205      	str	r2, [sp, #20]
 8010136:	f7ff f831 	bl	800f19c <ucdr_buffer_remaining>
 801013a:	4603      	mov	r3, r0
 801013c:	f10d 001d 	add.w	r0, sp, #29
 8010140:	9a05      	ldr	r2, [sp, #20]
 8010142:	9000      	str	r0, [sp, #0]
 8010144:	4640      	mov	r0, r8
 8010146:	9902      	ldr	r1, [sp, #8]
 8010148:	f003 ff26 	bl	8013f98 <uxr_receive_reliable_message>
 801014c:	b1d0      	cbz	r0, 8010184 <wait_session_status+0x148>
 801014e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d03a      	beq.n	80101cc <wait_session_status+0x190>
 8010156:	9f04      	ldr	r7, [sp, #16]
 8010158:	e00a      	b.n	8010170 <wait_session_status+0x134>
 801015a:	f04f 0302 	mov.w	r3, #2
 801015e:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8010162:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8010166:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 801016a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801016c:	f7ff fc28 	bl	800f9c0 <read_submessage_list>
 8010170:	a914      	add	r1, sp, #80	@ 0x50
 8010172:	2204      	movs	r2, #4
 8010174:	4640      	mov	r0, r8
 8010176:	f003 ff91 	bl	801409c <uxr_next_input_reliable_buffer_available>
 801017a:	4603      	mov	r3, r0
 801017c:	a914      	add	r1, sp, #80	@ 0x50
 801017e:	4620      	mov	r0, r4
 8010180:	2b00      	cmp	r3, #0
 8010182:	d1ea      	bne.n	801015a <wait_session_status+0x11e>
 8010184:	4632      	mov	r2, r6
 8010186:	9904      	ldr	r1, [sp, #16]
 8010188:	4620      	mov	r0, r4
 801018a:	f7ff fa83 	bl	800f694 <write_submessage_acknack.isra.0>
 801018e:	e76f      	b.n	8010070 <wait_session_status+0x34>
 8010190:	4631      	mov	r1, r6
 8010192:	f104 0008 	add.w	r0, r4, #8
 8010196:	f000 fba7 	bl	80108e8 <uxr_get_input_best_effort_stream>
 801019a:	2800      	cmp	r0, #0
 801019c:	f43f af68 	beq.w	8010070 <wait_session_status+0x34>
 80101a0:	9902      	ldr	r1, [sp, #8]
 80101a2:	f003 fe6f 	bl	8013e84 <uxr_receive_best_effort_message>
 80101a6:	2800      	cmp	r0, #0
 80101a8:	f43f af62 	beq.w	8010070 <wait_session_status+0x34>
 80101ac:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80101b0:	a90c      	add	r1, sp, #48	@ 0x30
 80101b2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80101b4:	4620      	mov	r0, r4
 80101b6:	f7ff fc03 	bl	800f9c0 <read_submessage_list>
 80101ba:	e759      	b.n	8010070 <wait_session_status+0x34>
 80101bc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80101be:	e9d3 0400 	ldrd	r0, r4, [r3]
 80101c2:	47a0      	blx	r4
 80101c4:	2001      	movs	r0, #1
 80101c6:	b01d      	add	sp, #116	@ 0x74
 80101c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101cc:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80101d0:	a90c      	add	r1, sp, #48	@ 0x30
 80101d2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80101d4:	4620      	mov	r0, r4
 80101d6:	f7ff fbf3 	bl	800f9c0 <read_submessage_list>
 80101da:	e7bc      	b.n	8010156 <wait_session_status+0x11a>

080101dc <uxr_delete_session_retries>:
 80101dc:	b530      	push	{r4, r5, lr}
 80101de:	b08f      	sub	sp, #60	@ 0x3c
 80101e0:	4604      	mov	r4, r0
 80101e2:	460d      	mov	r5, r1
 80101e4:	f000 fa34 	bl	8010650 <uxr_session_header_offset>
 80101e8:	2300      	movs	r3, #0
 80101ea:	2210      	movs	r2, #16
 80101ec:	a902      	add	r1, sp, #8
 80101ee:	9000      	str	r0, [sp, #0]
 80101f0:	a806      	add	r0, sp, #24
 80101f2:	f7fe ff8f 	bl	800f114 <ucdr_init_buffer_origin_offset>
 80101f6:	a906      	add	r1, sp, #24
 80101f8:	4620      	mov	r0, r4
 80101fa:	f000 f979 	bl	80104f0 <uxr_buffer_delete_session>
 80101fe:	2200      	movs	r2, #0
 8010200:	9b06      	ldr	r3, [sp, #24]
 8010202:	4620      	mov	r0, r4
 8010204:	4611      	mov	r1, r2
 8010206:	f000 f9cf 	bl	80105a8 <uxr_stamp_session_header>
 801020a:	a806      	add	r0, sp, #24
 801020c:	f7fe ffc2 	bl	800f194 <ucdr_buffer_length>
 8010210:	462b      	mov	r3, r5
 8010212:	4602      	mov	r2, r0
 8010214:	a902      	add	r1, sp, #8
 8010216:	4620      	mov	r0, r4
 8010218:	f7ff ff10 	bl	801003c <wait_session_status>
 801021c:	b118      	cbz	r0, 8010226 <uxr_delete_session_retries+0x4a>
 801021e:	7960      	ldrb	r0, [r4, #5]
 8010220:	fab0 f080 	clz	r0, r0
 8010224:	0940      	lsrs	r0, r0, #5
 8010226:	b00f      	add	sp, #60	@ 0x3c
 8010228:	bd30      	pop	{r4, r5, pc}
 801022a:	bf00      	nop

0801022c <uxr_create_session>:
 801022c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010230:	f100 0b08 	add.w	fp, r0, #8
 8010234:	4604      	mov	r4, r0
 8010236:	b0ab      	sub	sp, #172	@ 0xac
 8010238:	4658      	mov	r0, fp
 801023a:	465e      	mov	r6, fp
 801023c:	f000 faa6 	bl	801078c <uxr_reset_stream_storage>
 8010240:	4620      	mov	r0, r4
 8010242:	f000 fa05 	bl	8010650 <uxr_session_header_offset>
 8010246:	2300      	movs	r3, #0
 8010248:	221c      	movs	r2, #28
 801024a:	a90b      	add	r1, sp, #44	@ 0x2c
 801024c:	9000      	str	r0, [sp, #0]
 801024e:	a812      	add	r0, sp, #72	@ 0x48
 8010250:	f7fe ff60 	bl	800f114 <ucdr_init_buffer_origin_offset>
 8010254:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010256:	a912      	add	r1, sp, #72	@ 0x48
 8010258:	4620      	mov	r0, r4
 801025a:	8a1a      	ldrh	r2, [r3, #16]
 801025c:	3a04      	subs	r2, #4
 801025e:	b292      	uxth	r2, r2
 8010260:	f000 f91c 	bl	801049c <uxr_buffer_create_session>
 8010264:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010266:	4620      	mov	r0, r4
 8010268:	f000 f98a 	bl	8010580 <uxr_stamp_create_session_header>
 801026c:	a812      	add	r0, sp, #72	@ 0x48
 801026e:	f7fe ff91 	bl	800f194 <ucdr_buffer_length>
 8010272:	23ff      	movs	r3, #255	@ 0xff
 8010274:	4681      	mov	r9, r0
 8010276:	7163      	strb	r3, [r4, #5]
 8010278:	230a      	movs	r3, #10
 801027a:	9303      	str	r3, [sp, #12]
 801027c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801027e:	464a      	mov	r2, r9
 8010280:	a90b      	add	r1, sp, #44	@ 0x2c
 8010282:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010286:	47a8      	blx	r5
 8010288:	f000 fba0 	bl	80109cc <uxr_millis>
 801028c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010290:	4605      	mov	r5, r0
 8010292:	e009      	b.n	80102a8 <uxr_create_session+0x7c>
 8010294:	f000 fb9a 	bl	80109cc <uxr_millis>
 8010298:	1b40      	subs	r0, r0, r5
 801029a:	7962      	ldrb	r2, [r4, #5]
 801029c:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	dd38      	ble.n	8010316 <uxr_create_session+0xea>
 80102a4:	2aff      	cmp	r2, #255	@ 0xff
 80102a6:	d13c      	bne.n	8010322 <uxr_create_session+0xf6>
 80102a8:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80102aa:	a907      	add	r1, sp, #28
 80102ac:	6897      	ldr	r7, [r2, #8]
 80102ae:	6810      	ldr	r0, [r2, #0]
 80102b0:	aa08      	add	r2, sp, #32
 80102b2:	47b8      	blx	r7
 80102b4:	2800      	cmp	r0, #0
 80102b6:	d0ed      	beq.n	8010294 <uxr_create_session+0x68>
 80102b8:	a81a      	add	r0, sp, #104	@ 0x68
 80102ba:	2700      	movs	r7, #0
 80102bc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80102c0:	f7fe ff3a 	bl	800f138 <ucdr_init_buffer>
 80102c4:	f10d 031a 	add.w	r3, sp, #26
 80102c8:	aa06      	add	r2, sp, #24
 80102ca:	a91a      	add	r1, sp, #104	@ 0x68
 80102cc:	4620      	mov	r0, r4
 80102ce:	f88d 7018 	strb.w	r7, [sp, #24]
 80102d2:	f000 f97d 	bl	80105d0 <uxr_read_session_header>
 80102d6:	2800      	cmp	r0, #0
 80102d8:	d0dc      	beq.n	8010294 <uxr_create_session+0x68>
 80102da:	4639      	mov	r1, r7
 80102dc:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80102e0:	f000 fa1e 	bl	8010720 <uxr_stream_id_from_raw>
 80102e4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80102e8:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 80102ec:	f3c0 2807 	ubfx	r8, r0, #8, #8
 80102f0:	2f01      	cmp	r7, #1
 80102f2:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80102f6:	d053      	beq.n	80103a0 <uxr_create_session+0x174>
 80102f8:	2f02      	cmp	r7, #2
 80102fa:	d018      	beq.n	801032e <uxr_create_session+0x102>
 80102fc:	2f00      	cmp	r7, #0
 80102fe:	d1c9      	bne.n	8010294 <uxr_create_session+0x68>
 8010300:	4639      	mov	r1, r7
 8010302:	4638      	mov	r0, r7
 8010304:	f000 fa0c 	bl	8010720 <uxr_stream_id_from_raw>
 8010308:	a91a      	add	r1, sp, #104	@ 0x68
 801030a:	4602      	mov	r2, r0
 801030c:	900a      	str	r0, [sp, #40]	@ 0x28
 801030e:	4620      	mov	r0, r4
 8010310:	f7ff fb56 	bl	800f9c0 <read_submessage_list>
 8010314:	e7be      	b.n	8010294 <uxr_create_session+0x68>
 8010316:	9b03      	ldr	r3, [sp, #12]
 8010318:	3b01      	subs	r3, #1
 801031a:	9303      	str	r3, [sp, #12]
 801031c:	d001      	beq.n	8010322 <uxr_create_session+0xf6>
 801031e:	2aff      	cmp	r2, #255	@ 0xff
 8010320:	d0ac      	beq.n	801027c <uxr_create_session+0x50>
 8010322:	2a00      	cmp	r2, #0
 8010324:	d051      	beq.n	80103ca <uxr_create_session+0x19e>
 8010326:	2000      	movs	r0, #0
 8010328:	b02b      	add	sp, #172	@ 0xac
 801032a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801032e:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8010332:	4641      	mov	r1, r8
 8010334:	4630      	mov	r0, r6
 8010336:	9304      	str	r3, [sp, #16]
 8010338:	f000 fae0 	bl	80108fc <uxr_get_input_reliable_stream>
 801033c:	4682      	mov	sl, r0
 801033e:	b348      	cbz	r0, 8010394 <uxr_create_session+0x168>
 8010340:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010342:	a81a      	add	r0, sp, #104	@ 0x68
 8010344:	9205      	str	r2, [sp, #20]
 8010346:	f7fe ff29 	bl	800f19c <ucdr_buffer_remaining>
 801034a:	4603      	mov	r3, r0
 801034c:	f10d 0019 	add.w	r0, sp, #25
 8010350:	9a05      	ldr	r2, [sp, #20]
 8010352:	4659      	mov	r1, fp
 8010354:	9000      	str	r0, [sp, #0]
 8010356:	4650      	mov	r0, sl
 8010358:	f003 fe1e 	bl	8013f98 <uxr_receive_reliable_message>
 801035c:	b1d0      	cbz	r0, 8010394 <uxr_create_session+0x168>
 801035e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d038      	beq.n	80103d8 <uxr_create_session+0x1ac>
 8010366:	9f04      	ldr	r7, [sp, #16]
 8010368:	e00a      	b.n	8010380 <uxr_create_session+0x154>
 801036a:	f04f 0302 	mov.w	r3, #2
 801036e:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 8010372:	f88d 8029 	strb.w	r8, [sp, #41]	@ 0x29
 8010376:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801037a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801037c:	f7ff fb20 	bl	800f9c0 <read_submessage_list>
 8010380:	a922      	add	r1, sp, #136	@ 0x88
 8010382:	2204      	movs	r2, #4
 8010384:	4650      	mov	r0, sl
 8010386:	f003 fe89 	bl	801409c <uxr_next_input_reliable_buffer_available>
 801038a:	4603      	mov	r3, r0
 801038c:	a922      	add	r1, sp, #136	@ 0x88
 801038e:	4620      	mov	r0, r4
 8010390:	2b00      	cmp	r3, #0
 8010392:	d1ea      	bne.n	801036a <uxr_create_session+0x13e>
 8010394:	4642      	mov	r2, r8
 8010396:	9904      	ldr	r1, [sp, #16]
 8010398:	4620      	mov	r0, r4
 801039a:	f7ff f97b 	bl	800f694 <write_submessage_acknack.isra.0>
 801039e:	e779      	b.n	8010294 <uxr_create_session+0x68>
 80103a0:	4641      	mov	r1, r8
 80103a2:	4630      	mov	r0, r6
 80103a4:	f000 faa0 	bl	80108e8 <uxr_get_input_best_effort_stream>
 80103a8:	2800      	cmp	r0, #0
 80103aa:	f43f af73 	beq.w	8010294 <uxr_create_session+0x68>
 80103ae:	4659      	mov	r1, fp
 80103b0:	f003 fd68 	bl	8013e84 <uxr_receive_best_effort_message>
 80103b4:	2800      	cmp	r0, #0
 80103b6:	f43f af6d 	beq.w	8010294 <uxr_create_session+0x68>
 80103ba:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 80103be:	a91a      	add	r1, sp, #104	@ 0x68
 80103c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80103c2:	4620      	mov	r0, r4
 80103c4:	f7ff fafc 	bl	800f9c0 <read_submessage_list>
 80103c8:	e764      	b.n	8010294 <uxr_create_session+0x68>
 80103ca:	4630      	mov	r0, r6
 80103cc:	f000 f9de 	bl	801078c <uxr_reset_stream_storage>
 80103d0:	2001      	movs	r0, #1
 80103d2:	b02b      	add	sp, #172	@ 0xac
 80103d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103d8:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 80103dc:	a91a      	add	r1, sp, #104	@ 0x68
 80103de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80103e0:	4620      	mov	r0, r4
 80103e2:	f7ff faed 	bl	800f9c0 <read_submessage_list>
 80103e6:	e7be      	b.n	8010366 <uxr_create_session+0x13a>

080103e8 <uxr_prepare_stream_to_write_submessage>:
 80103e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103ec:	b082      	sub	sp, #8
 80103ee:	4604      	mov	r4, r0
 80103f0:	4610      	mov	r0, r2
 80103f2:	4615      	mov	r5, r2
 80103f4:	461e      	mov	r6, r3
 80103f6:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 80103fa:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 80103fe:	f105 0904 	add.w	r9, r5, #4
 8010402:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8010406:	9101      	str	r1, [sp, #4]
 8010408:	f000 fada 	bl	80109c0 <uxr_submessage_padding>
 801040c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010410:	4481      	add	r9, r0
 8010412:	2b01      	cmp	r3, #1
 8010414:	d01d      	beq.n	8010452 <uxr_prepare_stream_to_write_submessage+0x6a>
 8010416:	2b02      	cmp	r3, #2
 8010418:	d116      	bne.n	8010448 <uxr_prepare_stream_to_write_submessage+0x60>
 801041a:	f104 0008 	add.w	r0, r4, #8
 801041e:	4651      	mov	r1, sl
 8010420:	f000 fa56 	bl	80108d0 <uxr_get_output_reliable_stream>
 8010424:	4604      	mov	r4, r0
 8010426:	b158      	cbz	r0, 8010440 <uxr_prepare_stream_to_write_submessage+0x58>
 8010428:	4649      	mov	r1, r9
 801042a:	4632      	mov	r2, r6
 801042c:	f003 fffa 	bl	8014424 <uxr_prepare_reliable_buffer_to_write>
 8010430:	4604      	mov	r4, r0
 8010432:	b12c      	cbz	r4, 8010440 <uxr_prepare_stream_to_write_submessage+0x58>
 8010434:	4643      	mov	r3, r8
 8010436:	b2aa      	uxth	r2, r5
 8010438:	4639      	mov	r1, r7
 801043a:	4630      	mov	r0, r6
 801043c:	f000 fa80 	bl	8010940 <uxr_buffer_submessage_header>
 8010440:	4620      	mov	r0, r4
 8010442:	b002      	add	sp, #8
 8010444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010448:	2400      	movs	r4, #0
 801044a:	4620      	mov	r0, r4
 801044c:	b002      	add	sp, #8
 801044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010452:	f104 0008 	add.w	r0, r4, #8
 8010456:	4651      	mov	r1, sl
 8010458:	f000 fa32 	bl	80108c0 <uxr_get_output_best_effort_stream>
 801045c:	4604      	mov	r4, r0
 801045e:	2800      	cmp	r0, #0
 8010460:	d0ee      	beq.n	8010440 <uxr_prepare_stream_to_write_submessage+0x58>
 8010462:	4649      	mov	r1, r9
 8010464:	4632      	mov	r2, r6
 8010466:	f003 ff09 	bl	801427c <uxr_prepare_best_effort_buffer_to_write>
 801046a:	4604      	mov	r4, r0
 801046c:	e7e1      	b.n	8010432 <uxr_prepare_stream_to_write_submessage+0x4a>
 801046e:	bf00      	nop

08010470 <uxr_init_session_info>:
 8010470:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8010474:	23ff      	movs	r3, #255	@ 0xff
 8010476:	7102      	strb	r2, [r0, #4]
 8010478:	f880 c001 	strb.w	ip, [r0, #1]
 801047c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8010480:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8010484:	7001      	strb	r1, [r0, #0]
 8010486:	f880 c002 	strb.w	ip, [r0, #2]
 801048a:	7143      	strb	r3, [r0, #5]
 801048c:	70c2      	strb	r2, [r0, #3]
 801048e:	b500      	push	{lr}
 8010490:	f04f 0e09 	mov.w	lr, #9
 8010494:	f8a0 e006 	strh.w	lr, [r0, #6]
 8010498:	f85d fb04 	ldr.w	pc, [sp], #4

0801049c <uxr_buffer_create_session>:
 801049c:	b530      	push	{r4, r5, lr}
 801049e:	2300      	movs	r3, #0
 80104a0:	b089      	sub	sp, #36	@ 0x24
 80104a2:	4d12      	ldr	r5, [pc, #72]	@ (80104ec <uxr_buffer_create_session+0x50>)
 80104a4:	460c      	mov	r4, r1
 80104a6:	9307      	str	r3, [sp, #28]
 80104a8:	4619      	mov	r1, r3
 80104aa:	f8ad 201c 	strh.w	r2, [sp, #28]
 80104ae:	2201      	movs	r2, #1
 80104b0:	9301      	str	r3, [sp, #4]
 80104b2:	80c2      	strh	r2, [r0, #6]
 80104b4:	f88d 2004 	strb.w	r2, [sp, #4]
 80104b8:	682a      	ldr	r2, [r5, #0]
 80104ba:	9303      	str	r3, [sp, #12]
 80104bc:	9200      	str	r2, [sp, #0]
 80104be:	88aa      	ldrh	r2, [r5, #4]
 80104c0:	9306      	str	r3, [sp, #24]
 80104c2:	f8ad 2006 	strh.w	r2, [sp, #6]
 80104c6:	f8d0 2001 	ldr.w	r2, [r0, #1]
 80104ca:	9202      	str	r2, [sp, #8]
 80104cc:	7802      	ldrb	r2, [r0, #0]
 80104ce:	4620      	mov	r0, r4
 80104d0:	f88d 200c 	strb.w	r2, [sp, #12]
 80104d4:	2210      	movs	r2, #16
 80104d6:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80104da:	f000 fa31 	bl	8010940 <uxr_buffer_submessage_header>
 80104de:	4669      	mov	r1, sp
 80104e0:	4620      	mov	r0, r4
 80104e2:	f001 f983 	bl	80117ec <uxr_serialize_CREATE_CLIENT_Payload>
 80104e6:	b009      	add	sp, #36	@ 0x24
 80104e8:	bd30      	pop	{r4, r5, pc}
 80104ea:	bf00      	nop
 80104ec:	0801763c 	.word	0x0801763c

080104f0 <uxr_buffer_delete_session>:
 80104f0:	4a0c      	ldr	r2, [pc, #48]	@ (8010524 <uxr_buffer_delete_session+0x34>)
 80104f2:	2302      	movs	r3, #2
 80104f4:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 80104f8:	b510      	push	{r4, lr}
 80104fa:	460c      	mov	r4, r1
 80104fc:	b082      	sub	sp, #8
 80104fe:	8911      	ldrh	r1, [r2, #8]
 8010500:	2204      	movs	r2, #4
 8010502:	80c3      	strh	r3, [r0, #6]
 8010504:	2300      	movs	r3, #0
 8010506:	f8ad 1006 	strh.w	r1, [sp, #6]
 801050a:	4620      	mov	r0, r4
 801050c:	2103      	movs	r1, #3
 801050e:	f8ad c004 	strh.w	ip, [sp, #4]
 8010512:	f000 fa15 	bl	8010940 <uxr_buffer_submessage_header>
 8010516:	a901      	add	r1, sp, #4
 8010518:	4620      	mov	r0, r4
 801051a:	f001 fa0f 	bl	801193c <uxr_serialize_DELETE_Payload>
 801051e:	b002      	add	sp, #8
 8010520:	bd10      	pop	{r4, pc}
 8010522:	bf00      	nop
 8010524:	0801763c 	.word	0x0801763c

08010528 <uxr_read_create_session_status>:
 8010528:	b510      	push	{r4, lr}
 801052a:	460b      	mov	r3, r1
 801052c:	b088      	sub	sp, #32
 801052e:	4604      	mov	r4, r0
 8010530:	a901      	add	r1, sp, #4
 8010532:	4618      	mov	r0, r3
 8010534:	f001 fa12 	bl	801195c <uxr_deserialize_STATUS_AGENT_Payload>
 8010538:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801053c:	7163      	strb	r3, [r4, #5]
 801053e:	b008      	add	sp, #32
 8010540:	bd10      	pop	{r4, pc}
 8010542:	bf00      	nop

08010544 <uxr_read_delete_session_status>:
 8010544:	b510      	push	{r4, lr}
 8010546:	b084      	sub	sp, #16
 8010548:	4604      	mov	r4, r0
 801054a:	4608      	mov	r0, r1
 801054c:	a902      	add	r1, sp, #8
 801054e:	f001 fa35 	bl	80119bc <uxr_deserialize_STATUS_Payload>
 8010552:	88e3      	ldrh	r3, [r4, #6]
 8010554:	2b02      	cmp	r3, #2
 8010556:	d001      	beq.n	801055c <uxr_read_delete_session_status+0x18>
 8010558:	b004      	add	sp, #16
 801055a:	bd10      	pop	{r4, pc}
 801055c:	f10d 000a 	add.w	r0, sp, #10
 8010560:	f7ff f81e 	bl	800f5a0 <uxr_object_id_from_raw>
 8010564:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8010568:	f89d 3009 	ldrb.w	r3, [sp, #9]
 801056c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010570:	b29b      	uxth	r3, r3
 8010572:	2b02      	cmp	r3, #2
 8010574:	d1f0      	bne.n	8010558 <uxr_read_delete_session_status+0x14>
 8010576:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801057a:	7163      	strb	r3, [r4, #5]
 801057c:	e7ec      	b.n	8010558 <uxr_read_delete_session_status+0x14>
 801057e:	bf00      	nop

08010580 <uxr_stamp_create_session_header>:
 8010580:	b510      	push	{r4, lr}
 8010582:	2208      	movs	r2, #8
 8010584:	b08a      	sub	sp, #40	@ 0x28
 8010586:	4604      	mov	r4, r0
 8010588:	eb0d 0002 	add.w	r0, sp, r2
 801058c:	f7fe fdd4 	bl	800f138 <ucdr_init_buffer>
 8010590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010594:	2300      	movs	r3, #0
 8010596:	a802      	add	r0, sp, #8
 8010598:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 801059c:	9400      	str	r4, [sp, #0]
 801059e:	461a      	mov	r2, r3
 80105a0:	f000 fbca 	bl	8010d38 <uxr_serialize_message_header>
 80105a4:	b00a      	add	sp, #40	@ 0x28
 80105a6:	bd10      	pop	{r4, pc}

080105a8 <uxr_stamp_session_header>:
 80105a8:	b530      	push	{r4, r5, lr}
 80105aa:	b08d      	sub	sp, #52	@ 0x34
 80105ac:	4604      	mov	r4, r0
 80105ae:	460d      	mov	r5, r1
 80105b0:	4619      	mov	r1, r3
 80105b2:	a804      	add	r0, sp, #16
 80105b4:	9203      	str	r2, [sp, #12]
 80105b6:	2208      	movs	r2, #8
 80105b8:	f7fe fdbe 	bl	800f138 <ucdr_init_buffer>
 80105bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105c0:	9b03      	ldr	r3, [sp, #12]
 80105c2:	462a      	mov	r2, r5
 80105c4:	a804      	add	r0, sp, #16
 80105c6:	9400      	str	r4, [sp, #0]
 80105c8:	f000 fbb6 	bl	8010d38 <uxr_serialize_message_header>
 80105cc:	b00d      	add	sp, #52	@ 0x34
 80105ce:	bd30      	pop	{r4, r5, pc}

080105d0 <uxr_read_session_header>:
 80105d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105d4:	4607      	mov	r7, r0
 80105d6:	b084      	sub	sp, #16
 80105d8:	4608      	mov	r0, r1
 80105da:	460c      	mov	r4, r1
 80105dc:	4615      	mov	r5, r2
 80105de:	461e      	mov	r6, r3
 80105e0:	f7fe fddc 	bl	800f19c <ucdr_buffer_remaining>
 80105e4:	2808      	cmp	r0, #8
 80105e6:	d803      	bhi.n	80105f0 <uxr_read_session_header+0x20>
 80105e8:	2000      	movs	r0, #0
 80105ea:	b004      	add	sp, #16
 80105ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105f0:	f10d 080c 	add.w	r8, sp, #12
 80105f4:	4633      	mov	r3, r6
 80105f6:	462a      	mov	r2, r5
 80105f8:	4620      	mov	r0, r4
 80105fa:	f10d 010b 	add.w	r1, sp, #11
 80105fe:	f8cd 8000 	str.w	r8, [sp]
 8010602:	f000 fbb7 	bl	8010d74 <uxr_deserialize_message_header>
 8010606:	783a      	ldrb	r2, [r7, #0]
 8010608:	f89d 300b 	ldrb.w	r3, [sp, #11]
 801060c:	4293      	cmp	r3, r2
 801060e:	d1eb      	bne.n	80105e8 <uxr_read_session_header+0x18>
 8010610:	061b      	lsls	r3, r3, #24
 8010612:	d41b      	bmi.n	801064c <uxr_read_session_header+0x7c>
 8010614:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8010618:	787b      	ldrb	r3, [r7, #1]
 801061a:	429a      	cmp	r2, r3
 801061c:	d003      	beq.n	8010626 <uxr_read_session_header+0x56>
 801061e:	2001      	movs	r0, #1
 8010620:	f080 0001 	eor.w	r0, r0, #1
 8010624:	e7e1      	b.n	80105ea <uxr_read_session_header+0x1a>
 8010626:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801062a:	1cb8      	adds	r0, r7, #2
 801062c:	78bb      	ldrb	r3, [r7, #2]
 801062e:	429a      	cmp	r2, r3
 8010630:	d1f5      	bne.n	801061e <uxr_read_session_header+0x4e>
 8010632:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8010636:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801063a:	429a      	cmp	r2, r3
 801063c:	d1ef      	bne.n	801061e <uxr_read_session_header+0x4e>
 801063e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8010642:	7843      	ldrb	r3, [r0, #1]
 8010644:	429a      	cmp	r2, r3
 8010646:	d1ea      	bne.n	801061e <uxr_read_session_header+0x4e>
 8010648:	2000      	movs	r0, #0
 801064a:	e7e9      	b.n	8010620 <uxr_read_session_header+0x50>
 801064c:	2001      	movs	r0, #1
 801064e:	e7cc      	b.n	80105ea <uxr_read_session_header+0x1a>

08010650 <uxr_session_header_offset>:
 8010650:	f990 3000 	ldrsb.w	r3, [r0]
 8010654:	2b00      	cmp	r3, #0
 8010656:	bfac      	ite	ge
 8010658:	2008      	movge	r0, #8
 801065a:	2004      	movlt	r0, #4
 801065c:	4770      	bx	lr
 801065e:	bf00      	nop

08010660 <uxr_init_base_object_request>:
 8010660:	b510      	push	{r4, lr}
 8010662:	b082      	sub	sp, #8
 8010664:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8010668:	9101      	str	r1, [sp, #4]
 801066a:	88c3      	ldrh	r3, [r0, #6]
 801066c:	f1a3 010a 	sub.w	r1, r3, #10
 8010670:	b289      	uxth	r1, r1
 8010672:	42a1      	cmp	r1, r4
 8010674:	d80f      	bhi.n	8010696 <uxr_init_base_object_request+0x36>
 8010676:	3301      	adds	r3, #1
 8010678:	b29c      	uxth	r4, r3
 801067a:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 801067e:	b2db      	uxtb	r3, r3
 8010680:	80c4      	strh	r4, [r0, #6]
 8010682:	1c91      	adds	r1, r2, #2
 8010684:	9801      	ldr	r0, [sp, #4]
 8010686:	f882 c000 	strb.w	ip, [r2]
 801068a:	7053      	strb	r3, [r2, #1]
 801068c:	f7fe ff9c 	bl	800f5c8 <uxr_object_id_to_raw>
 8010690:	4620      	mov	r0, r4
 8010692:	b002      	add	sp, #8
 8010694:	bd10      	pop	{r4, pc}
 8010696:	230a      	movs	r3, #10
 8010698:	f04f 0c00 	mov.w	ip, #0
 801069c:	461c      	mov	r4, r3
 801069e:	e7ef      	b.n	8010680 <uxr_init_base_object_request+0x20>

080106a0 <uxr_parse_base_object_request>:
 80106a0:	b570      	push	{r4, r5, r6, lr}
 80106a2:	4604      	mov	r4, r0
 80106a4:	3002      	adds	r0, #2
 80106a6:	460d      	mov	r5, r1
 80106a8:	4616      	mov	r6, r2
 80106aa:	f7fe ff79 	bl	800f5a0 <uxr_object_id_from_raw>
 80106ae:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80106b2:	8028      	strh	r0, [r5, #0]
 80106b4:	806b      	strh	r3, [r5, #2]
 80106b6:	7822      	ldrb	r2, [r4, #0]
 80106b8:	7863      	ldrb	r3, [r4, #1]
 80106ba:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80106be:	8033      	strh	r3, [r6, #0]
 80106c0:	bd70      	pop	{r4, r5, r6, pc}
 80106c2:	bf00      	nop

080106c4 <uxr_stream_id>:
 80106c4:	2901      	cmp	r1, #1
 80106c6:	4684      	mov	ip, r0
 80106c8:	b500      	push	{lr}
 80106ca:	b083      	sub	sp, #12
 80106cc:	d01f      	beq.n	801070e <uxr_stream_id+0x4a>
 80106ce:	2902      	cmp	r1, #2
 80106d0:	f04f 0e00 	mov.w	lr, #0
 80106d4:	d020      	beq.n	8010718 <uxr_stream_id+0x54>
 80106d6:	2300      	movs	r3, #0
 80106d8:	2000      	movs	r0, #0
 80106da:	f36e 0307 	bfi	r3, lr, #0, #8
 80106de:	f36c 230f 	bfi	r3, ip, #8, #8
 80106e2:	f361 4317 	bfi	r3, r1, #16, #8
 80106e6:	f362 631f 	bfi	r3, r2, #24, #8
 80106ea:	fa5f fc83 	uxtb.w	ip, r3
 80106ee:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80106f2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80106f6:	0e1b      	lsrs	r3, r3, #24
 80106f8:	f36c 0007 	bfi	r0, ip, #0, #8
 80106fc:	f361 200f 	bfi	r0, r1, #8, #8
 8010700:	f362 4017 	bfi	r0, r2, #16, #8
 8010704:	f363 601f 	bfi	r0, r3, #24, #8
 8010708:	b003      	add	sp, #12
 801070a:	f85d fb04 	ldr.w	pc, [sp], #4
 801070e:	f100 0e01 	add.w	lr, r0, #1
 8010712:	fa5f fe8e 	uxtb.w	lr, lr
 8010716:	e7de      	b.n	80106d6 <uxr_stream_id+0x12>
 8010718:	f080 0e80 	eor.w	lr, r0, #128	@ 0x80
 801071c:	e7db      	b.n	80106d6 <uxr_stream_id+0x12>
 801071e:	bf00      	nop

08010720 <uxr_stream_id_from_raw>:
 8010720:	b082      	sub	sp, #8
 8010722:	b130      	cbz	r0, 8010732 <uxr_stream_id_from_raw+0x12>
 8010724:	0603      	lsls	r3, r0, #24
 8010726:	d421      	bmi.n	801076c <uxr_stream_id_from_raw+0x4c>
 8010728:	1e42      	subs	r2, r0, #1
 801072a:	f04f 0c01 	mov.w	ip, #1
 801072e:	b2d2      	uxtb	r2, r2
 8010730:	e001      	b.n	8010736 <uxr_stream_id_from_raw+0x16>
 8010732:	4684      	mov	ip, r0
 8010734:	4602      	mov	r2, r0
 8010736:	2300      	movs	r3, #0
 8010738:	f360 0307 	bfi	r3, r0, #0, #8
 801073c:	2000      	movs	r0, #0
 801073e:	f362 230f 	bfi	r3, r2, #8, #8
 8010742:	f36c 4317 	bfi	r3, ip, #16, #8
 8010746:	f361 631f 	bfi	r3, r1, #24, #8
 801074a:	fa5f fc83 	uxtb.w	ip, r3
 801074e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8010752:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010756:	0e1b      	lsrs	r3, r3, #24
 8010758:	f36c 0007 	bfi	r0, ip, #0, #8
 801075c:	f361 200f 	bfi	r0, r1, #8, #8
 8010760:	f362 4017 	bfi	r0, r2, #16, #8
 8010764:	f363 601f 	bfi	r0, r3, #24, #8
 8010768:	b002      	add	sp, #8
 801076a:	4770      	bx	lr
 801076c:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8010770:	f04f 0c02 	mov.w	ip, #2
 8010774:	e7df      	b.n	8010736 <uxr_stream_id_from_raw+0x16>
 8010776:	bf00      	nop

08010778 <uxr_init_stream_storage>:
 8010778:	2300      	movs	r3, #0
 801077a:	7403      	strb	r3, [r0, #16]
 801077c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8010780:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8010784:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8010788:	4770      	bx	lr
 801078a:	bf00      	nop

0801078c <uxr_reset_stream_storage>:
 801078c:	b570      	push	{r4, r5, r6, lr}
 801078e:	7c03      	ldrb	r3, [r0, #16]
 8010790:	4604      	mov	r4, r0
 8010792:	b14b      	cbz	r3, 80107a8 <uxr_reset_stream_storage+0x1c>
 8010794:	4606      	mov	r6, r0
 8010796:	2500      	movs	r5, #0
 8010798:	4630      	mov	r0, r6
 801079a:	3501      	adds	r5, #1
 801079c:	f003 fd68 	bl	8014270 <uxr_reset_output_best_effort_stream>
 80107a0:	7c23      	ldrb	r3, [r4, #16]
 80107a2:	3610      	adds	r6, #16
 80107a4:	42ab      	cmp	r3, r5
 80107a6:	d8f7      	bhi.n	8010798 <uxr_reset_stream_storage+0xc>
 80107a8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80107ac:	b15b      	cbz	r3, 80107c6 <uxr_reset_stream_storage+0x3a>
 80107ae:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80107b2:	2500      	movs	r5, #0
 80107b4:	4630      	mov	r0, r6
 80107b6:	3501      	adds	r5, #1
 80107b8:	f003 fb60 	bl	8013e7c <uxr_reset_input_best_effort_stream>
 80107bc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80107c0:	3602      	adds	r6, #2
 80107c2:	42ab      	cmp	r3, r5
 80107c4:	d8f6      	bhi.n	80107b4 <uxr_reset_stream_storage+0x28>
 80107c6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80107ca:	b15b      	cbz	r3, 80107e4 <uxr_reset_stream_storage+0x58>
 80107cc:	f104 0618 	add.w	r6, r4, #24
 80107d0:	2500      	movs	r5, #0
 80107d2:	4630      	mov	r0, r6
 80107d4:	3501      	adds	r5, #1
 80107d6:	f003 fdf7 	bl	80143c8 <uxr_reset_output_reliable_stream>
 80107da:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80107de:	3628      	adds	r6, #40	@ 0x28
 80107e0:	42ab      	cmp	r3, r5
 80107e2:	d8f6      	bhi.n	80107d2 <uxr_reset_stream_storage+0x46>
 80107e4:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80107e8:	b15b      	cbz	r3, 8010802 <uxr_reset_stream_storage+0x76>
 80107ea:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80107ee:	2500      	movs	r5, #0
 80107f0:	4630      	mov	r0, r6
 80107f2:	3501      	adds	r5, #1
 80107f4:	f003 fbae 	bl	8013f54 <uxr_reset_input_reliable_stream>
 80107f8:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80107fc:	3618      	adds	r6, #24
 80107fe:	42ab      	cmp	r3, r5
 8010800:	d8f6      	bhi.n	80107f0 <uxr_reset_stream_storage+0x64>
 8010802:	bd70      	pop	{r4, r5, r6, pc}

08010804 <uxr_add_output_best_effort_buffer>:
 8010804:	b510      	push	{r4, lr}
 8010806:	7c04      	ldrb	r4, [r0, #16]
 8010808:	b082      	sub	sp, #8
 801080a:	f104 0c01 	add.w	ip, r4, #1
 801080e:	f880 c010 	strb.w	ip, [r0, #16]
 8010812:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8010816:	f003 fd21 	bl	801425c <uxr_init_output_best_effort_stream>
 801081a:	2201      	movs	r2, #1
 801081c:	4620      	mov	r0, r4
 801081e:	4611      	mov	r1, r2
 8010820:	b002      	add	sp, #8
 8010822:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010826:	f7ff bf4d 	b.w	80106c4 <uxr_stream_id>
 801082a:	bf00      	nop

0801082c <uxr_add_output_reliable_buffer>:
 801082c:	b510      	push	{r4, lr}
 801082e:	b084      	sub	sp, #16
 8010830:	4684      	mov	ip, r0
 8010832:	2028      	movs	r0, #40	@ 0x28
 8010834:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8010838:	9400      	str	r4, [sp, #0]
 801083a:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 801083e:	fb00 c004 	mla	r0, r0, r4, ip
 8010842:	f104 0e01 	add.w	lr, r4, #1
 8010846:	3018      	adds	r0, #24
 8010848:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 801084c:	f003 fd86 	bl	801435c <uxr_init_output_reliable_stream>
 8010850:	2201      	movs	r2, #1
 8010852:	2102      	movs	r1, #2
 8010854:	4620      	mov	r0, r4
 8010856:	b004      	add	sp, #16
 8010858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801085c:	f7ff bf32 	b.w	80106c4 <uxr_stream_id>

08010860 <uxr_add_input_best_effort_buffer>:
 8010860:	b510      	push	{r4, lr}
 8010862:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8010866:	b082      	sub	sp, #8
 8010868:	1c62      	adds	r2, r4, #1
 801086a:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 801086e:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8010872:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8010876:	f003 fafd 	bl	8013e74 <uxr_init_input_best_effort_stream>
 801087a:	2200      	movs	r2, #0
 801087c:	2101      	movs	r1, #1
 801087e:	4620      	mov	r0, r4
 8010880:	b002      	add	sp, #8
 8010882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010886:	f7ff bf1d 	b.w	80106c4 <uxr_stream_id>
 801088a:	bf00      	nop

0801088c <uxr_add_input_reliable_buffer>:
 801088c:	b510      	push	{r4, lr}
 801088e:	b084      	sub	sp, #16
 8010890:	4684      	mov	ip, r0
 8010892:	2018      	movs	r0, #24
 8010894:	9c06      	ldr	r4, [sp, #24]
 8010896:	9400      	str	r4, [sp, #0]
 8010898:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 801089c:	fb00 c004 	mla	r0, r0, r4, ip
 80108a0:	f104 0e01 	add.w	lr, r4, #1
 80108a4:	3048      	adds	r0, #72	@ 0x48
 80108a6:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 80108aa:	f003 fb2d 	bl	8013f08 <uxr_init_input_reliable_stream>
 80108ae:	2200      	movs	r2, #0
 80108b0:	2102      	movs	r1, #2
 80108b2:	4620      	mov	r0, r4
 80108b4:	b004      	add	sp, #16
 80108b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108ba:	f7ff bf03 	b.w	80106c4 <uxr_stream_id>
 80108be:	bf00      	nop

080108c0 <uxr_get_output_best_effort_stream>:
 80108c0:	7c03      	ldrb	r3, [r0, #16]
 80108c2:	428b      	cmp	r3, r1
 80108c4:	bf8c      	ite	hi
 80108c6:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80108ca:	2000      	movls	r0, #0
 80108cc:	4770      	bx	lr
 80108ce:	bf00      	nop

080108d0 <uxr_get_output_reliable_stream>:
 80108d0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80108d4:	428b      	cmp	r3, r1
 80108d6:	d904      	bls.n	80108e2 <uxr_get_output_reliable_stream+0x12>
 80108d8:	2328      	movs	r3, #40	@ 0x28
 80108da:	fb03 0001 	mla	r0, r3, r1, r0
 80108de:	3018      	adds	r0, #24
 80108e0:	4770      	bx	lr
 80108e2:	2000      	movs	r0, #0
 80108e4:	4770      	bx	lr
 80108e6:	bf00      	nop

080108e8 <uxr_get_input_best_effort_stream>:
 80108e8:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80108ec:	428b      	cmp	r3, r1
 80108ee:	d903      	bls.n	80108f8 <uxr_get_input_best_effort_stream+0x10>
 80108f0:	3121      	adds	r1, #33	@ 0x21
 80108f2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80108f6:	4770      	bx	lr
 80108f8:	2000      	movs	r0, #0
 80108fa:	4770      	bx	lr

080108fc <uxr_get_input_reliable_stream>:
 80108fc:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8010900:	428b      	cmp	r3, r1
 8010902:	d904      	bls.n	801090e <uxr_get_input_reliable_stream+0x12>
 8010904:	2318      	movs	r3, #24
 8010906:	fb03 0001 	mla	r0, r3, r1, r0
 801090a:	3048      	adds	r0, #72	@ 0x48
 801090c:	4770      	bx	lr
 801090e:	2000      	movs	r0, #0
 8010910:	4770      	bx	lr
 8010912:	bf00      	nop

08010914 <uxr_output_streams_confirmed>:
 8010914:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010918:	b183      	cbz	r3, 801093c <uxr_output_streams_confirmed+0x28>
 801091a:	b570      	push	{r4, r5, r6, lr}
 801091c:	4606      	mov	r6, r0
 801091e:	f100 0518 	add.w	r5, r0, #24
 8010922:	2400      	movs	r4, #0
 8010924:	e000      	b.n	8010928 <uxr_output_streams_confirmed+0x14>
 8010926:	b140      	cbz	r0, 801093a <uxr_output_streams_confirmed+0x26>
 8010928:	4628      	mov	r0, r5
 801092a:	3401      	adds	r4, #1
 801092c:	f003 ffc0 	bl	80148b0 <uxr_is_output_up_to_date>
 8010930:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8010934:	3528      	adds	r5, #40	@ 0x28
 8010936:	42a3      	cmp	r3, r4
 8010938:	d8f5      	bhi.n	8010926 <uxr_output_streams_confirmed+0x12>
 801093a:	bd70      	pop	{r4, r5, r6, pc}
 801093c:	2001      	movs	r0, #1
 801093e:	4770      	bx	lr

08010940 <uxr_buffer_submessage_header>:
 8010940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010942:	460e      	mov	r6, r1
 8010944:	2104      	movs	r1, #4
 8010946:	4604      	mov	r4, r0
 8010948:	4615      	mov	r5, r2
 801094a:	461f      	mov	r7, r3
 801094c:	f7fe fc10 	bl	800f170 <ucdr_align_to>
 8010950:	2301      	movs	r3, #1
 8010952:	4631      	mov	r1, r6
 8010954:	4620      	mov	r0, r4
 8010956:	ea47 0203 	orr.w	r2, r7, r3
 801095a:	7523      	strb	r3, [r4, #20]
 801095c:	462b      	mov	r3, r5
 801095e:	f000 fa29 	bl	8010db4 <uxr_serialize_submessage_header>
 8010962:	4620      	mov	r0, r4
 8010964:	f7fe fc1a 	bl	800f19c <ucdr_buffer_remaining>
 8010968:	42a8      	cmp	r0, r5
 801096a:	bf34      	ite	cc
 801096c:	2000      	movcc	r0, #0
 801096e:	2001      	movcs	r0, #1
 8010970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010972:	bf00      	nop

08010974 <uxr_read_submessage_header>:
 8010974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010978:	4604      	mov	r4, r0
 801097a:	460d      	mov	r5, r1
 801097c:	2104      	movs	r1, #4
 801097e:	4616      	mov	r6, r2
 8010980:	4698      	mov	r8, r3
 8010982:	f7fe fbf5 	bl	800f170 <ucdr_align_to>
 8010986:	4620      	mov	r0, r4
 8010988:	f7fe fc08 	bl	800f19c <ucdr_buffer_remaining>
 801098c:	2803      	cmp	r0, #3
 801098e:	bf8c      	ite	hi
 8010990:	2701      	movhi	r7, #1
 8010992:	2700      	movls	r7, #0
 8010994:	d802      	bhi.n	801099c <uxr_read_submessage_header+0x28>
 8010996:	4638      	mov	r0, r7
 8010998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801099c:	4633      	mov	r3, r6
 801099e:	4642      	mov	r2, r8
 80109a0:	4620      	mov	r0, r4
 80109a2:	4629      	mov	r1, r5
 80109a4:	f000 fa1a 	bl	8010ddc <uxr_deserialize_submessage_header>
 80109a8:	f898 3000 	ldrb.w	r3, [r8]
 80109ac:	4638      	mov	r0, r7
 80109ae:	f003 0201 	and.w	r2, r3, #1
 80109b2:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80109b6:	f888 3000 	strb.w	r3, [r8]
 80109ba:	7522      	strb	r2, [r4, #20]
 80109bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080109c0 <uxr_submessage_padding>:
 80109c0:	f010 0003 	ands.w	r0, r0, #3
 80109c4:	bf18      	it	ne
 80109c6:	f1c0 0004 	rsbne	r0, r0, #4
 80109ca:	4770      	bx	lr

080109cc <uxr_millis>:
 80109cc:	b510      	push	{r4, lr}
 80109ce:	b084      	sub	sp, #16
 80109d0:	2001      	movs	r0, #1
 80109d2:	4669      	mov	r1, sp
 80109d4:	f7f1 fef0 	bl	80027b8 <clock_gettime>
 80109d8:	4908      	ldr	r1, [pc, #32]	@ (80109fc <uxr_millis+0x30>)
 80109da:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80109de:	fba0 0301 	umull	r0, r3, r0, r1
 80109e2:	1900      	adds	r0, r0, r4
 80109e4:	fb01 3102 	mla	r1, r1, r2, r3
 80109e8:	4a05      	ldr	r2, [pc, #20]	@ (8010a00 <uxr_millis+0x34>)
 80109ea:	f04f 0300 	mov.w	r3, #0
 80109ee:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80109f2:	f7ef fc8d 	bl	8000310 <__aeabi_ldivmod>
 80109f6:	b004      	add	sp, #16
 80109f8:	bd10      	pop	{r4, pc}
 80109fa:	bf00      	nop
 80109fc:	3b9aca00 	.word	0x3b9aca00
 8010a00:	000f4240 	.word	0x000f4240

08010a04 <uxr_nanos>:
 8010a04:	b510      	push	{r4, lr}
 8010a06:	b084      	sub	sp, #16
 8010a08:	2001      	movs	r0, #1
 8010a0a:	4669      	mov	r1, sp
 8010a0c:	f7f1 fed4 	bl	80027b8 <clock_gettime>
 8010a10:	4a06      	ldr	r2, [pc, #24]	@ (8010a2c <uxr_nanos+0x28>)
 8010a12:	9800      	ldr	r0, [sp, #0]
 8010a14:	9902      	ldr	r1, [sp, #8]
 8010a16:	fba0 0302 	umull	r0, r3, r0, r2
 8010a1a:	9c01      	ldr	r4, [sp, #4]
 8010a1c:	1840      	adds	r0, r0, r1
 8010a1e:	fb02 3304 	mla	r3, r2, r4, r3
 8010a22:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8010a26:	b004      	add	sp, #16
 8010a28:	bd10      	pop	{r4, pc}
 8010a2a:	bf00      	nop
 8010a2c:	3b9aca00 	.word	0x3b9aca00

08010a30 <on_full_output_buffer_fragmented>:
 8010a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a34:	460c      	mov	r4, r1
 8010a36:	b08a      	sub	sp, #40	@ 0x28
 8010a38:	4606      	mov	r6, r0
 8010a3a:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8010a3e:	f104 0008 	add.w	r0, r4, #8
 8010a42:	f7ff ff45 	bl	80108d0 <uxr_get_output_reliable_stream>
 8010a46:	4605      	mov	r5, r0
 8010a48:	f003 ff3c 	bl	80148c4 <get_available_free_slots>
 8010a4c:	b968      	cbnz	r0, 8010a6a <on_full_output_buffer_fragmented+0x3a>
 8010a4e:	4620      	mov	r0, r4
 8010a50:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8010a54:	4798      	blx	r3
 8010a56:	b918      	cbnz	r0, 8010a60 <on_full_output_buffer_fragmented+0x30>
 8010a58:	2001      	movs	r0, #1
 8010a5a:	b00a      	add	sp, #40	@ 0x28
 8010a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a60:	4628      	mov	r0, r5
 8010a62:	f003 ff2f 	bl	80148c4 <get_available_free_slots>
 8010a66:	2800      	cmp	r0, #0
 8010a68:	d0f6      	beq.n	8010a58 <on_full_output_buffer_fragmented+0x28>
 8010a6a:	8929      	ldrh	r1, [r5, #8]
 8010a6c:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8010a70:	89eb      	ldrh	r3, [r5, #14]
 8010a72:	7b28      	ldrb	r0, [r5, #12]
 8010a74:	686f      	ldr	r7, [r5, #4]
 8010a76:	1a12      	subs	r2, r2, r0
 8010a78:	fbb3 f0f1 	udiv	r0, r3, r1
 8010a7c:	fbb7 f7f1 	udiv	r7, r7, r1
 8010a80:	fb01 3110 	mls	r1, r1, r0, r3
 8010a84:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8010a88:	b289      	uxth	r1, r1
 8010a8a:	fb07 f101 	mul.w	r1, r7, r1
 8010a8e:	3f04      	subs	r7, #4
 8010a90:	443a      	add	r2, r7
 8010a92:	3104      	adds	r1, #4
 8010a94:	fa1f f882 	uxth.w	r8, r2
 8010a98:	463a      	mov	r2, r7
 8010a9a:	eba3 0308 	sub.w	r3, r3, r8
 8010a9e:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8010aa2:	682b      	ldr	r3, [r5, #0]
 8010aa4:	4419      	add	r1, r3
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8010aac:	9000      	str	r0, [sp, #0]
 8010aae:	a802      	add	r0, sp, #8
 8010ab0:	f7fe fb30 	bl	800f114 <ucdr_init_buffer_origin_offset>
 8010ab4:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8010ab8:	f102 0308 	add.w	r3, r2, #8
 8010abc:	42bb      	cmp	r3, r7
 8010abe:	d927      	bls.n	8010b10 <on_full_output_buffer_fragmented+0xe0>
 8010ac0:	4642      	mov	r2, r8
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	210d      	movs	r1, #13
 8010ac6:	a802      	add	r0, sp, #8
 8010ac8:	f7ff ff3a 	bl	8010940 <uxr_buffer_submessage_header>
 8010acc:	8929      	ldrh	r1, [r5, #8]
 8010ace:	89eb      	ldrh	r3, [r5, #14]
 8010ad0:	686a      	ldr	r2, [r5, #4]
 8010ad2:	fbb3 f0f1 	udiv	r0, r3, r1
 8010ad6:	fbb2 f2f1 	udiv	r2, r2, r1
 8010ada:	fb01 3310 	mls	r3, r1, r0, r3
 8010ade:	b29b      	uxth	r3, r3
 8010ae0:	fb02 f303 	mul.w	r3, r2, r3
 8010ae4:	682a      	ldr	r2, [r5, #0]
 8010ae6:	50d7      	str	r7, [r2, r3]
 8010ae8:	2101      	movs	r1, #1
 8010aea:	89e8      	ldrh	r0, [r5, #14]
 8010aec:	f004 f802 	bl	8014af4 <uxr_seq_num_add>
 8010af0:	9904      	ldr	r1, [sp, #16]
 8010af2:	9a03      	ldr	r2, [sp, #12]
 8010af4:	81e8      	strh	r0, [r5, #14]
 8010af6:	4630      	mov	r0, r6
 8010af8:	1a52      	subs	r2, r2, r1
 8010afa:	f7fe fb1d 	bl	800f138 <ucdr_init_buffer>
 8010afe:	4630      	mov	r0, r6
 8010b00:	4622      	mov	r2, r4
 8010b02:	490f      	ldr	r1, [pc, #60]	@ (8010b40 <on_full_output_buffer_fragmented+0x110>)
 8010b04:	f7fe faec 	bl	800f0e0 <ucdr_set_on_full_buffer_callback>
 8010b08:	2000      	movs	r0, #0
 8010b0a:	b00a      	add	sp, #40	@ 0x28
 8010b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b10:	b292      	uxth	r2, r2
 8010b12:	2302      	movs	r3, #2
 8010b14:	210d      	movs	r1, #13
 8010b16:	a802      	add	r0, sp, #8
 8010b18:	f7ff ff12 	bl	8010940 <uxr_buffer_submessage_header>
 8010b1c:	8928      	ldrh	r0, [r5, #8]
 8010b1e:	89eb      	ldrh	r3, [r5, #14]
 8010b20:	6869      	ldr	r1, [r5, #4]
 8010b22:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8010b26:	fbb3 f7f0 	udiv	r7, r3, r0
 8010b2a:	fbb1 f1f0 	udiv	r1, r1, r0
 8010b2e:	fb00 3317 	mls	r3, r0, r7, r3
 8010b32:	3208      	adds	r2, #8
 8010b34:	b29b      	uxth	r3, r3
 8010b36:	fb01 f303 	mul.w	r3, r1, r3
 8010b3a:	6829      	ldr	r1, [r5, #0]
 8010b3c:	50ca      	str	r2, [r1, r3]
 8010b3e:	e7d3      	b.n	8010ae8 <on_full_output_buffer_fragmented+0xb8>
 8010b40:	08010a31 	.word	0x08010a31

08010b44 <uxr_prepare_output_stream>:
 8010b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b46:	b087      	sub	sp, #28
 8010b48:	2707      	movs	r7, #7
 8010b4a:	2500      	movs	r5, #0
 8010b4c:	461c      	mov	r4, r3
 8010b4e:	4606      	mov	r6, r0
 8010b50:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010b54:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010b56:	e9cd 7500 	strd	r7, r5, [sp]
 8010b5a:	3204      	adds	r2, #4
 8010b5c:	f7ff fc44 	bl	80103e8 <uxr_prepare_stream_to_write_submessage>
 8010b60:	f080 0201 	eor.w	r2, r0, #1
 8010b64:	b2d2      	uxtb	r2, r2
 8010b66:	75a2      	strb	r2, [r4, #22]
 8010b68:	b112      	cbz	r2, 8010b70 <uxr_prepare_output_stream+0x2c>
 8010b6a:	4628      	mov	r0, r5
 8010b6c:	b007      	add	sp, #28
 8010b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b70:	aa05      	add	r2, sp, #20
 8010b72:	9902      	ldr	r1, [sp, #8]
 8010b74:	4630      	mov	r0, r6
 8010b76:	f7ff fd73 	bl	8010660 <uxr_init_base_object_request>
 8010b7a:	a905      	add	r1, sp, #20
 8010b7c:	4605      	mov	r5, r0
 8010b7e:	4620      	mov	r0, r4
 8010b80:	f000 ff9c 	bl	8011abc <uxr_serialize_WRITE_DATA_Payload_Data>
 8010b84:	69a6      	ldr	r6, [r4, #24]
 8010b86:	69e7      	ldr	r7, [r4, #28]
 8010b88:	4620      	mov	r0, r4
 8010b8a:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8010b8e:	1a52      	subs	r2, r2, r1
 8010b90:	f7fe fad2 	bl	800f138 <ucdr_init_buffer>
 8010b94:	4620      	mov	r0, r4
 8010b96:	463a      	mov	r2, r7
 8010b98:	4631      	mov	r1, r6
 8010b9a:	f7fe faa1 	bl	800f0e0 <ucdr_set_on_full_buffer_callback>
 8010b9e:	4628      	mov	r0, r5
 8010ba0:	b007      	add	sp, #28
 8010ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010ba4 <uxr_prepare_output_stream_fragmented>:
 8010ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ba8:	b091      	sub	sp, #68	@ 0x44
 8010baa:	4605      	mov	r5, r0
 8010bac:	3008      	adds	r0, #8
 8010bae:	461e      	mov	r6, r3
 8010bb0:	9105      	str	r1, [sp, #20]
 8010bb2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8010bb6:	9204      	str	r2, [sp, #16]
 8010bb8:	f7ff fe8a 	bl	80108d0 <uxr_get_output_reliable_stream>
 8010bbc:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8010bc0:	2b01      	cmp	r3, #1
 8010bc2:	f000 8093 	beq.w	8010cec <uxr_prepare_output_stream_fragmented+0x148>
 8010bc6:	4604      	mov	r4, r0
 8010bc8:	2800      	cmp	r0, #0
 8010bca:	f000 808f 	beq.w	8010cec <uxr_prepare_output_stream_fragmented+0x148>
 8010bce:	f003 fe79 	bl	80148c4 <get_available_free_slots>
 8010bd2:	2800      	cmp	r0, #0
 8010bd4:	f000 8085 	beq.w	8010ce2 <uxr_prepare_output_stream_fragmented+0x13e>
 8010bd8:	8923      	ldrh	r3, [r4, #8]
 8010bda:	89e7      	ldrh	r7, [r4, #14]
 8010bdc:	6862      	ldr	r2, [r4, #4]
 8010bde:	fbb7 f9f3 	udiv	r9, r7, r3
 8010be2:	fbb2 f2f3 	udiv	r2, r2, r3
 8010be6:	fb03 7919 	mls	r9, r3, r9, r7
 8010bea:	6823      	ldr	r3, [r4, #0]
 8010bec:	f1a2 0b04 	sub.w	fp, r2, #4
 8010bf0:	9203      	str	r2, [sp, #12]
 8010bf2:	fa1f f989 	uxth.w	r9, r9
 8010bf6:	fb02 f909 	mul.w	r9, r2, r9
 8010bfa:	f109 0904 	add.w	r9, r9, #4
 8010bfe:	4499      	add	r9, r3
 8010c00:	7b23      	ldrb	r3, [r4, #12]
 8010c02:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8010c06:	4543      	cmp	r3, r8
 8010c08:	d37c      	bcc.n	8010d04 <uxr_prepare_output_stream_fragmented+0x160>
 8010c0a:	f1ab 0a04 	sub.w	sl, fp, #4
 8010c0e:	465a      	mov	r2, fp
 8010c10:	4649      	mov	r1, r9
 8010c12:	a808      	add	r0, sp, #32
 8010c14:	ebaa 0a03 	sub.w	sl, sl, r3
 8010c18:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010c1a:	f8cd 8000 	str.w	r8, [sp]
 8010c1e:	3308      	adds	r3, #8
 8010c20:	fa1f fa8a 	uxth.w	sl, sl
 8010c24:	9302      	str	r3, [sp, #8]
 8010c26:	2300      	movs	r3, #0
 8010c28:	f7fe fa74 	bl	800f114 <ucdr_init_buffer_origin_offset>
 8010c2c:	9b02      	ldr	r3, [sp, #8]
 8010c2e:	4652      	mov	r2, sl
 8010c30:	210d      	movs	r1, #13
 8010c32:	455b      	cmp	r3, fp
 8010c34:	bf34      	ite	cc
 8010c36:	2302      	movcc	r3, #2
 8010c38:	2300      	movcs	r3, #0
 8010c3a:	a808      	add	r0, sp, #32
 8010c3c:	f7ff fe80 	bl	8010940 <uxr_buffer_submessage_header>
 8010c40:	8921      	ldrh	r1, [r4, #8]
 8010c42:	6863      	ldr	r3, [r4, #4]
 8010c44:	4638      	mov	r0, r7
 8010c46:	fbb7 f2f1 	udiv	r2, r7, r1
 8010c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8010c4e:	fb01 7212 	mls	r2, r1, r2, r7
 8010c52:	2101      	movs	r1, #1
 8010c54:	b292      	uxth	r2, r2
 8010c56:	fb02 f303 	mul.w	r3, r2, r3
 8010c5a:	6822      	ldr	r2, [r4, #0]
 8010c5c:	f842 b003 	str.w	fp, [r2, r3]
 8010c60:	f003 ff48 	bl	8014af4 <uxr_seq_num_add>
 8010c64:	9b03      	ldr	r3, [sp, #12]
 8010c66:	f108 0104 	add.w	r1, r8, #4
 8010c6a:	4607      	mov	r7, r0
 8010c6c:	f1a3 0208 	sub.w	r2, r3, #8
 8010c70:	4630      	mov	r0, r6
 8010c72:	4449      	add	r1, r9
 8010c74:	eba2 0208 	sub.w	r2, r2, r8
 8010c78:	f7fe fa5e 	bl	800f138 <ucdr_init_buffer>
 8010c7c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010c7e:	2107      	movs	r1, #7
 8010c80:	81e7      	strh	r7, [r4, #14]
 8010c82:	1d1a      	adds	r2, r3, #4
 8010c84:	2300      	movs	r3, #0
 8010c86:	4630      	mov	r0, r6
 8010c88:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8010c8c:	bf28      	it	cs
 8010c8e:	461a      	movcs	r2, r3
 8010c90:	b292      	uxth	r2, r2
 8010c92:	f7ff fe55 	bl	8010940 <uxr_buffer_submessage_header>
 8010c96:	aa07      	add	r2, sp, #28
 8010c98:	9904      	ldr	r1, [sp, #16]
 8010c9a:	4628      	mov	r0, r5
 8010c9c:	f7ff fce0 	bl	8010660 <uxr_init_base_object_request>
 8010ca0:	4604      	mov	r4, r0
 8010ca2:	b320      	cbz	r0, 8010cee <uxr_prepare_output_stream_fragmented+0x14a>
 8010ca4:	a907      	add	r1, sp, #28
 8010ca6:	4630      	mov	r0, r6
 8010ca8:	f000 ff08 	bl	8011abc <uxr_serialize_WRITE_DATA_Payload_Data>
 8010cac:	4630      	mov	r0, r6
 8010cae:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8010cb2:	1a52      	subs	r2, r2, r1
 8010cb4:	f7fe fa40 	bl	800f138 <ucdr_init_buffer>
 8010cb8:	9b05      	ldr	r3, [sp, #20]
 8010cba:	9a02      	ldr	r2, [sp, #8]
 8010cbc:	4630      	mov	r0, r6
 8010cbe:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8010cc2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010cc4:	f8c5 20c4 	str.w	r2, [r5, #196]	@ 0xc4
 8010cc8:	462a      	mov	r2, r5
 8010cca:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8010cce:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8010cd0:	4918      	ldr	r1, [pc, #96]	@ (8010d34 <uxr_prepare_output_stream_fragmented+0x190>)
 8010cd2:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8010cd6:	f7fe fa03 	bl	800f0e0 <ucdr_set_on_full_buffer_callback>
 8010cda:	4620      	mov	r0, r4
 8010cdc:	b011      	add	sp, #68	@ 0x44
 8010cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ce2:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8010ce4:	4628      	mov	r0, r5
 8010ce6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010ce8:	4798      	blx	r3
 8010cea:	b920      	cbnz	r0, 8010cf6 <uxr_prepare_output_stream_fragmented+0x152>
 8010cec:	2400      	movs	r4, #0
 8010cee:	4620      	mov	r0, r4
 8010cf0:	b011      	add	sp, #68	@ 0x44
 8010cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cf6:	4620      	mov	r0, r4
 8010cf8:	f003 fde4 	bl	80148c4 <get_available_free_slots>
 8010cfc:	2800      	cmp	r0, #0
 8010cfe:	f47f af6b 	bne.w	8010bd8 <uxr_prepare_output_stream_fragmented+0x34>
 8010d02:	e7f3      	b.n	8010cec <uxr_prepare_output_stream_fragmented+0x148>
 8010d04:	4638      	mov	r0, r7
 8010d06:	2101      	movs	r1, #1
 8010d08:	f003 fef4 	bl	8014af4 <uxr_seq_num_add>
 8010d0c:	8922      	ldrh	r2, [r4, #8]
 8010d0e:	6863      	ldr	r3, [r4, #4]
 8010d10:	4607      	mov	r7, r0
 8010d12:	fbb3 f9f2 	udiv	r9, r3, r2
 8010d16:	fbb0 f3f2 	udiv	r3, r0, r2
 8010d1a:	fb02 0313 	mls	r3, r2, r3, r0
 8010d1e:	b29b      	uxth	r3, r3
 8010d20:	fb03 f909 	mul.w	r9, r3, r9
 8010d24:	6823      	ldr	r3, [r4, #0]
 8010d26:	f109 0904 	add.w	r9, r9, #4
 8010d2a:	4499      	add	r9, r3
 8010d2c:	7b23      	ldrb	r3, [r4, #12]
 8010d2e:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8010d32:	e76a      	b.n	8010c0a <uxr_prepare_output_stream_fragmented+0x66>
 8010d34:	08010a31 	.word	0x08010a31

08010d38 <uxr_serialize_message_header>:
 8010d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d3a:	4616      	mov	r6, r2
 8010d3c:	b083      	sub	sp, #12
 8010d3e:	4604      	mov	r4, r0
 8010d40:	460d      	mov	r5, r1
 8010d42:	9301      	str	r3, [sp, #4]
 8010d44:	9f08      	ldr	r7, [sp, #32]
 8010d46:	f7fc ff15 	bl	800db74 <ucdr_serialize_uint8_t>
 8010d4a:	4631      	mov	r1, r6
 8010d4c:	4620      	mov	r0, r4
 8010d4e:	f7fc ff11 	bl	800db74 <ucdr_serialize_uint8_t>
 8010d52:	9a01      	ldr	r2, [sp, #4]
 8010d54:	2101      	movs	r1, #1
 8010d56:	4620      	mov	r0, r4
 8010d58:	f7fc ffb8 	bl	800dccc <ucdr_serialize_endian_uint16_t>
 8010d5c:	062b      	lsls	r3, r5, #24
 8010d5e:	d501      	bpl.n	8010d64 <uxr_serialize_message_header+0x2c>
 8010d60:	b003      	add	sp, #12
 8010d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d64:	2204      	movs	r2, #4
 8010d66:	4639      	mov	r1, r7
 8010d68:	4620      	mov	r0, r4
 8010d6a:	b003      	add	sp, #12
 8010d6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010d70:	f7fc bd5e 	b.w	800d830 <ucdr_serialize_array_uint8_t>

08010d74 <uxr_deserialize_message_header>:
 8010d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d76:	4616      	mov	r6, r2
 8010d78:	b083      	sub	sp, #12
 8010d7a:	4604      	mov	r4, r0
 8010d7c:	460d      	mov	r5, r1
 8010d7e:	9301      	str	r3, [sp, #4]
 8010d80:	9f08      	ldr	r7, [sp, #32]
 8010d82:	f7fc ff0d 	bl	800dba0 <ucdr_deserialize_uint8_t>
 8010d86:	4631      	mov	r1, r6
 8010d88:	4620      	mov	r0, r4
 8010d8a:	f7fc ff09 	bl	800dba0 <ucdr_deserialize_uint8_t>
 8010d8e:	9a01      	ldr	r2, [sp, #4]
 8010d90:	2101      	movs	r1, #1
 8010d92:	4620      	mov	r0, r4
 8010d94:	f7fd f88e 	bl	800deb4 <ucdr_deserialize_endian_uint16_t>
 8010d98:	f995 3000 	ldrsb.w	r3, [r5]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	da01      	bge.n	8010da4 <uxr_deserialize_message_header+0x30>
 8010da0:	b003      	add	sp, #12
 8010da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010da4:	2204      	movs	r2, #4
 8010da6:	4639      	mov	r1, r7
 8010da8:	4620      	mov	r0, r4
 8010daa:	b003      	add	sp, #12
 8010dac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010db0:	f7fc bda2 	b.w	800d8f8 <ucdr_deserialize_array_uint8_t>

08010db4 <uxr_serialize_submessage_header>:
 8010db4:	b530      	push	{r4, r5, lr}
 8010db6:	4615      	mov	r5, r2
 8010db8:	b083      	sub	sp, #12
 8010dba:	4604      	mov	r4, r0
 8010dbc:	9301      	str	r3, [sp, #4]
 8010dbe:	f7fc fed9 	bl	800db74 <ucdr_serialize_uint8_t>
 8010dc2:	4629      	mov	r1, r5
 8010dc4:	4620      	mov	r0, r4
 8010dc6:	f7fc fed5 	bl	800db74 <ucdr_serialize_uint8_t>
 8010dca:	9a01      	ldr	r2, [sp, #4]
 8010dcc:	2101      	movs	r1, #1
 8010dce:	4620      	mov	r0, r4
 8010dd0:	b003      	add	sp, #12
 8010dd2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010dd6:	f7fc bf79 	b.w	800dccc <ucdr_serialize_endian_uint16_t>
 8010dda:	bf00      	nop

08010ddc <uxr_deserialize_submessage_header>:
 8010ddc:	b530      	push	{r4, r5, lr}
 8010dde:	4615      	mov	r5, r2
 8010de0:	b083      	sub	sp, #12
 8010de2:	4604      	mov	r4, r0
 8010de4:	9301      	str	r3, [sp, #4]
 8010de6:	f7fc fedb 	bl	800dba0 <ucdr_deserialize_uint8_t>
 8010dea:	4629      	mov	r1, r5
 8010dec:	4620      	mov	r0, r4
 8010dee:	f7fc fed7 	bl	800dba0 <ucdr_deserialize_uint8_t>
 8010df2:	9a01      	ldr	r2, [sp, #4]
 8010df4:	2101      	movs	r1, #1
 8010df6:	4620      	mov	r0, r4
 8010df8:	b003      	add	sp, #12
 8010dfa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010dfe:	f7fd b859 	b.w	800deb4 <ucdr_deserialize_endian_uint16_t>
 8010e02:	bf00      	nop

08010e04 <uxr_serialize_CLIENT_Representation>:
 8010e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e08:	2204      	movs	r2, #4
 8010e0a:	460e      	mov	r6, r1
 8010e0c:	4605      	mov	r5, r0
 8010e0e:	f7fc fd0f 	bl	800d830 <ucdr_serialize_array_uint8_t>
 8010e12:	4607      	mov	r7, r0
 8010e14:	2202      	movs	r2, #2
 8010e16:	1d31      	adds	r1, r6, #4
 8010e18:	4628      	mov	r0, r5
 8010e1a:	f7fc fd09 	bl	800d830 <ucdr_serialize_array_uint8_t>
 8010e1e:	4038      	ands	r0, r7
 8010e20:	2202      	movs	r2, #2
 8010e22:	1db1      	adds	r1, r6, #6
 8010e24:	b2c7      	uxtb	r7, r0
 8010e26:	4628      	mov	r0, r5
 8010e28:	f7fc fd02 	bl	800d830 <ucdr_serialize_array_uint8_t>
 8010e2c:	2204      	movs	r2, #4
 8010e2e:	4007      	ands	r7, r0
 8010e30:	f106 0108 	add.w	r1, r6, #8
 8010e34:	4628      	mov	r0, r5
 8010e36:	f7fc fcfb 	bl	800d830 <ucdr_serialize_array_uint8_t>
 8010e3a:	4007      	ands	r7, r0
 8010e3c:	7b31      	ldrb	r1, [r6, #12]
 8010e3e:	4628      	mov	r0, r5
 8010e40:	f7fc fe98 	bl	800db74 <ucdr_serialize_uint8_t>
 8010e44:	7b71      	ldrb	r1, [r6, #13]
 8010e46:	4007      	ands	r7, r0
 8010e48:	4628      	mov	r0, r5
 8010e4a:	f7fc fe65 	bl	800db18 <ucdr_serialize_bool>
 8010e4e:	7b73      	ldrb	r3, [r6, #13]
 8010e50:	ea07 0800 	and.w	r8, r7, r0
 8010e54:	b93b      	cbnz	r3, 8010e66 <uxr_serialize_CLIENT_Representation+0x62>
 8010e56:	8bb1      	ldrh	r1, [r6, #28]
 8010e58:	4628      	mov	r0, r5
 8010e5a:	f7fc feb7 	bl	800dbcc <ucdr_serialize_uint16_t>
 8010e5e:	ea08 0000 	and.w	r0, r8, r0
 8010e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e66:	6931      	ldr	r1, [r6, #16]
 8010e68:	4628      	mov	r0, r5
 8010e6a:	f7fd f899 	bl	800dfa0 <ucdr_serialize_uint32_t>
 8010e6e:	6933      	ldr	r3, [r6, #16]
 8010e70:	b1e3      	cbz	r3, 8010eac <uxr_serialize_CLIENT_Representation+0xa8>
 8010e72:	b1c0      	cbz	r0, 8010ea6 <uxr_serialize_CLIENT_Representation+0xa2>
 8010e74:	4637      	mov	r7, r6
 8010e76:	f04f 0900 	mov.w	r9, #0
 8010e7a:	e000      	b.n	8010e7e <uxr_serialize_CLIENT_Representation+0x7a>
 8010e7c:	b19c      	cbz	r4, 8010ea6 <uxr_serialize_CLIENT_Representation+0xa2>
 8010e7e:	6979      	ldr	r1, [r7, #20]
 8010e80:	4628      	mov	r0, r5
 8010e82:	f002 ff21 	bl	8013cc8 <ucdr_serialize_string>
 8010e86:	69b9      	ldr	r1, [r7, #24]
 8010e88:	4604      	mov	r4, r0
 8010e8a:	4628      	mov	r0, r5
 8010e8c:	f002 ff1c 	bl	8013cc8 <ucdr_serialize_string>
 8010e90:	f109 0901 	add.w	r9, r9, #1
 8010e94:	6933      	ldr	r3, [r6, #16]
 8010e96:	4004      	ands	r4, r0
 8010e98:	3708      	adds	r7, #8
 8010e9a:	4599      	cmp	r9, r3
 8010e9c:	b2e4      	uxtb	r4, r4
 8010e9e:	d3ed      	bcc.n	8010e7c <uxr_serialize_CLIENT_Representation+0x78>
 8010ea0:	ea08 0804 	and.w	r8, r8, r4
 8010ea4:	e7d7      	b.n	8010e56 <uxr_serialize_CLIENT_Representation+0x52>
 8010ea6:	f04f 0800 	mov.w	r8, #0
 8010eaa:	e7d4      	b.n	8010e56 <uxr_serialize_CLIENT_Representation+0x52>
 8010eac:	ea08 0800 	and.w	r8, r8, r0
 8010eb0:	e7d1      	b.n	8010e56 <uxr_serialize_CLIENT_Representation+0x52>
 8010eb2:	bf00      	nop

08010eb4 <uxr_deserialize_CLIENT_Representation>:
 8010eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010eb8:	2204      	movs	r2, #4
 8010eba:	460c      	mov	r4, r1
 8010ebc:	4605      	mov	r5, r0
 8010ebe:	f7fc fd1b 	bl	800d8f8 <ucdr_deserialize_array_uint8_t>
 8010ec2:	4607      	mov	r7, r0
 8010ec4:	2202      	movs	r2, #2
 8010ec6:	1d21      	adds	r1, r4, #4
 8010ec8:	4628      	mov	r0, r5
 8010eca:	f7fc fd15 	bl	800d8f8 <ucdr_deserialize_array_uint8_t>
 8010ece:	4038      	ands	r0, r7
 8010ed0:	2202      	movs	r2, #2
 8010ed2:	1da1      	adds	r1, r4, #6
 8010ed4:	b2c6      	uxtb	r6, r0
 8010ed6:	4628      	mov	r0, r5
 8010ed8:	f7fc fd0e 	bl	800d8f8 <ucdr_deserialize_array_uint8_t>
 8010edc:	2204      	movs	r2, #4
 8010ede:	4006      	ands	r6, r0
 8010ee0:	f104 0108 	add.w	r1, r4, #8
 8010ee4:	4628      	mov	r0, r5
 8010ee6:	f7fc fd07 	bl	800d8f8 <ucdr_deserialize_array_uint8_t>
 8010eea:	4006      	ands	r6, r0
 8010eec:	f104 010c 	add.w	r1, r4, #12
 8010ef0:	4628      	mov	r0, r5
 8010ef2:	f7fc fe55 	bl	800dba0 <ucdr_deserialize_uint8_t>
 8010ef6:	f104 010d 	add.w	r1, r4, #13
 8010efa:	ea06 0700 	and.w	r7, r6, r0
 8010efe:	4628      	mov	r0, r5
 8010f00:	f7fc fe20 	bl	800db44 <ucdr_deserialize_bool>
 8010f04:	7b63      	ldrb	r3, [r4, #13]
 8010f06:	4007      	ands	r7, r0
 8010f08:	b93b      	cbnz	r3, 8010f1a <uxr_deserialize_CLIENT_Representation+0x66>
 8010f0a:	f104 011c 	add.w	r1, r4, #28
 8010f0e:	4628      	mov	r0, r5
 8010f10:	f7fc ff5c 	bl	800ddcc <ucdr_deserialize_uint16_t>
 8010f14:	4038      	ands	r0, r7
 8010f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f1a:	f104 0110 	add.w	r1, r4, #16
 8010f1e:	4628      	mov	r0, r5
 8010f20:	f7fd f96e 	bl	800e200 <ucdr_deserialize_uint32_t>
 8010f24:	6923      	ldr	r3, [r4, #16]
 8010f26:	2b01      	cmp	r3, #1
 8010f28:	d903      	bls.n	8010f32 <uxr_deserialize_CLIENT_Representation+0x7e>
 8010f2a:	2301      	movs	r3, #1
 8010f2c:	2700      	movs	r7, #0
 8010f2e:	75ab      	strb	r3, [r5, #22]
 8010f30:	e7eb      	b.n	8010f0a <uxr_deserialize_CLIENT_Representation+0x56>
 8010f32:	b30b      	cbz	r3, 8010f78 <uxr_deserialize_CLIENT_Representation+0xc4>
 8010f34:	b1f0      	cbz	r0, 8010f74 <uxr_deserialize_CLIENT_Representation+0xc0>
 8010f36:	46a0      	mov	r8, r4
 8010f38:	f04f 0900 	mov.w	r9, #0
 8010f3c:	e000      	b.n	8010f40 <uxr_deserialize_CLIENT_Representation+0x8c>
 8010f3e:	b1ce      	cbz	r6, 8010f74 <uxr_deserialize_CLIENT_Representation+0xc0>
 8010f40:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8010f44:	f108 0808 	add.w	r8, r8, #8
 8010f48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010f4c:	4628      	mov	r0, r5
 8010f4e:	f002 fecb 	bl	8013ce8 <ucdr_deserialize_string>
 8010f52:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010f56:	4606      	mov	r6, r0
 8010f58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010f5c:	4628      	mov	r0, r5
 8010f5e:	f109 0901 	add.w	r9, r9, #1
 8010f62:	f002 fec1 	bl	8013ce8 <ucdr_deserialize_string>
 8010f66:	6923      	ldr	r3, [r4, #16]
 8010f68:	4006      	ands	r6, r0
 8010f6a:	4599      	cmp	r9, r3
 8010f6c:	b2f6      	uxtb	r6, r6
 8010f6e:	d3e6      	bcc.n	8010f3e <uxr_deserialize_CLIENT_Representation+0x8a>
 8010f70:	4037      	ands	r7, r6
 8010f72:	e7ca      	b.n	8010f0a <uxr_deserialize_CLIENT_Representation+0x56>
 8010f74:	2700      	movs	r7, #0
 8010f76:	e7c8      	b.n	8010f0a <uxr_deserialize_CLIENT_Representation+0x56>
 8010f78:	4007      	ands	r7, r0
 8010f7a:	e7c6      	b.n	8010f0a <uxr_deserialize_CLIENT_Representation+0x56>

08010f7c <uxr_serialize_AGENT_Representation>:
 8010f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f80:	2204      	movs	r2, #4
 8010f82:	460f      	mov	r7, r1
 8010f84:	4605      	mov	r5, r0
 8010f86:	f7fc fc53 	bl	800d830 <ucdr_serialize_array_uint8_t>
 8010f8a:	4604      	mov	r4, r0
 8010f8c:	2202      	movs	r2, #2
 8010f8e:	1d39      	adds	r1, r7, #4
 8010f90:	4628      	mov	r0, r5
 8010f92:	f7fc fc4d 	bl	800d830 <ucdr_serialize_array_uint8_t>
 8010f96:	4020      	ands	r0, r4
 8010f98:	2202      	movs	r2, #2
 8010f9a:	1db9      	adds	r1, r7, #6
 8010f9c:	b2c4      	uxtb	r4, r0
 8010f9e:	4628      	mov	r0, r5
 8010fa0:	f7fc fc46 	bl	800d830 <ucdr_serialize_array_uint8_t>
 8010fa4:	7a39      	ldrb	r1, [r7, #8]
 8010fa6:	4004      	ands	r4, r0
 8010fa8:	4628      	mov	r0, r5
 8010faa:	f7fc fdb5 	bl	800db18 <ucdr_serialize_bool>
 8010fae:	7a3b      	ldrb	r3, [r7, #8]
 8010fb0:	ea00 0804 	and.w	r8, r0, r4
 8010fb4:	b913      	cbnz	r3, 8010fbc <uxr_serialize_AGENT_Representation+0x40>
 8010fb6:	4640      	mov	r0, r8
 8010fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fbc:	68f9      	ldr	r1, [r7, #12]
 8010fbe:	4628      	mov	r0, r5
 8010fc0:	f7fc ffee 	bl	800dfa0 <ucdr_serialize_uint32_t>
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	b303      	cbz	r3, 801100a <uxr_serialize_AGENT_Representation+0x8e>
 8010fc8:	b1d0      	cbz	r0, 8011000 <uxr_serialize_AGENT_Representation+0x84>
 8010fca:	463e      	mov	r6, r7
 8010fcc:	f04f 0900 	mov.w	r9, #0
 8010fd0:	e000      	b.n	8010fd4 <uxr_serialize_AGENT_Representation+0x58>
 8010fd2:	b1ac      	cbz	r4, 8011000 <uxr_serialize_AGENT_Representation+0x84>
 8010fd4:	6931      	ldr	r1, [r6, #16]
 8010fd6:	4628      	mov	r0, r5
 8010fd8:	f002 fe76 	bl	8013cc8 <ucdr_serialize_string>
 8010fdc:	6971      	ldr	r1, [r6, #20]
 8010fde:	4604      	mov	r4, r0
 8010fe0:	4628      	mov	r0, r5
 8010fe2:	f002 fe71 	bl	8013cc8 <ucdr_serialize_string>
 8010fe6:	f109 0901 	add.w	r9, r9, #1
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	4004      	ands	r4, r0
 8010fee:	3608      	adds	r6, #8
 8010ff0:	4599      	cmp	r9, r3
 8010ff2:	b2e4      	uxtb	r4, r4
 8010ff4:	d3ed      	bcc.n	8010fd2 <uxr_serialize_AGENT_Representation+0x56>
 8010ff6:	ea08 0804 	and.w	r8, r8, r4
 8010ffa:	4640      	mov	r0, r8
 8010ffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011000:	f04f 0800 	mov.w	r8, #0
 8011004:	4640      	mov	r0, r8
 8011006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801100a:	ea08 0800 	and.w	r8, r8, r0
 801100e:	e7d2      	b.n	8010fb6 <uxr_serialize_AGENT_Representation+0x3a>

08011010 <uxr_serialize_DATAWRITER_Representation>:
 8011010:	b570      	push	{r4, r5, r6, lr}
 8011012:	460d      	mov	r5, r1
 8011014:	7809      	ldrb	r1, [r1, #0]
 8011016:	4606      	mov	r6, r0
 8011018:	f7fc fdac 	bl	800db74 <ucdr_serialize_uint8_t>
 801101c:	4604      	mov	r4, r0
 801101e:	b130      	cbz	r0, 801102e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8011020:	782b      	ldrb	r3, [r5, #0]
 8011022:	2b02      	cmp	r3, #2
 8011024:	d00c      	beq.n	8011040 <uxr_serialize_DATAWRITER_Representation+0x30>
 8011026:	2b03      	cmp	r3, #3
 8011028:	d010      	beq.n	801104c <uxr_serialize_DATAWRITER_Representation+0x3c>
 801102a:	2b01      	cmp	r3, #1
 801102c:	d008      	beq.n	8011040 <uxr_serialize_DATAWRITER_Representation+0x30>
 801102e:	2202      	movs	r2, #2
 8011030:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8011034:	4630      	mov	r0, r6
 8011036:	f7fc fbfb 	bl	800d830 <ucdr_serialize_array_uint8_t>
 801103a:	4020      	ands	r0, r4
 801103c:	b2c0      	uxtb	r0, r0
 801103e:	bd70      	pop	{r4, r5, r6, pc}
 8011040:	6869      	ldr	r1, [r5, #4]
 8011042:	4630      	mov	r0, r6
 8011044:	f002 fe40 	bl	8013cc8 <ucdr_serialize_string>
 8011048:	4604      	mov	r4, r0
 801104a:	e7f0      	b.n	801102e <uxr_serialize_DATAWRITER_Representation+0x1e>
 801104c:	4629      	mov	r1, r5
 801104e:	4630      	mov	r0, r6
 8011050:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8011054:	3104      	adds	r1, #4
 8011056:	f7fe f90f 	bl	800f278 <ucdr_serialize_sequence_uint8_t>
 801105a:	4604      	mov	r4, r0
 801105c:	e7e7      	b.n	801102e <uxr_serialize_DATAWRITER_Representation+0x1e>
 801105e:	bf00      	nop

08011060 <uxr_serialize_ObjectVariant.part.0>:
 8011060:	b570      	push	{r4, r5, r6, lr}
 8011062:	780b      	ldrb	r3, [r1, #0]
 8011064:	460c      	mov	r4, r1
 8011066:	4605      	mov	r5, r0
 8011068:	3b01      	subs	r3, #1
 801106a:	2b0d      	cmp	r3, #13
 801106c:	d854      	bhi.n	8011118 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801106e:	e8df f003 	tbb	[pc, r3]
 8011072:	0730      	.short	0x0730
 8011074:	07071b1b 	.word	0x07071b1b
 8011078:	0c530707 	.word	0x0c530707
 801107c:	494e0c0c 	.word	0x494e0c0c
 8011080:	3104      	adds	r1, #4
 8011082:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011086:	f7ff bfc3 	b.w	8011010 <uxr_serialize_DATAWRITER_Representation>
 801108a:	7909      	ldrb	r1, [r1, #4]
 801108c:	f7fc fd72 	bl	800db74 <ucdr_serialize_uint8_t>
 8011090:	b1e8      	cbz	r0, 80110ce <uxr_serialize_ObjectVariant.part.0+0x6e>
 8011092:	7923      	ldrb	r3, [r4, #4]
 8011094:	2b01      	cmp	r3, #1
 8011096:	d001      	beq.n	801109c <uxr_serialize_ObjectVariant.part.0+0x3c>
 8011098:	2b02      	cmp	r3, #2
 801109a:	d13d      	bne.n	8011118 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801109c:	68a1      	ldr	r1, [r4, #8]
 801109e:	4628      	mov	r0, r5
 80110a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80110a4:	f002 be10 	b.w	8013cc8 <ucdr_serialize_string>
 80110a8:	7909      	ldrb	r1, [r1, #4]
 80110aa:	f7fc fd63 	bl	800db74 <ucdr_serialize_uint8_t>
 80110ae:	4606      	mov	r6, r0
 80110b0:	b120      	cbz	r0, 80110bc <uxr_serialize_ObjectVariant.part.0+0x5c>
 80110b2:	7923      	ldrb	r3, [r4, #4]
 80110b4:	2b02      	cmp	r3, #2
 80110b6:	d039      	beq.n	801112c <uxr_serialize_ObjectVariant.part.0+0xcc>
 80110b8:	2b03      	cmp	r3, #3
 80110ba:	d02f      	beq.n	801111c <uxr_serialize_ObjectVariant.part.0+0xbc>
 80110bc:	2202      	movs	r2, #2
 80110be:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 80110c2:	4628      	mov	r0, r5
 80110c4:	f7fc fbb4 	bl	800d830 <ucdr_serialize_array_uint8_t>
 80110c8:	4030      	ands	r0, r6
 80110ca:	b2c0      	uxtb	r0, r0
 80110cc:	bd70      	pop	{r4, r5, r6, pc}
 80110ce:	2000      	movs	r0, #0
 80110d0:	bd70      	pop	{r4, r5, r6, pc}
 80110d2:	7909      	ldrb	r1, [r1, #4]
 80110d4:	f7fc fd4e 	bl	800db74 <ucdr_serialize_uint8_t>
 80110d8:	4606      	mov	r6, r0
 80110da:	b158      	cbz	r0, 80110f4 <uxr_serialize_ObjectVariant.part.0+0x94>
 80110dc:	7923      	ldrb	r3, [r4, #4]
 80110de:	2b02      	cmp	r3, #2
 80110e0:	d003      	beq.n	80110ea <uxr_serialize_ObjectVariant.part.0+0x8a>
 80110e2:	2b03      	cmp	r3, #3
 80110e4:	d028      	beq.n	8011138 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80110e6:	2b01      	cmp	r3, #1
 80110e8:	d104      	bne.n	80110f4 <uxr_serialize_ObjectVariant.part.0+0x94>
 80110ea:	68a1      	ldr	r1, [r4, #8]
 80110ec:	4628      	mov	r0, r5
 80110ee:	f002 fdeb 	bl	8013cc8 <ucdr_serialize_string>
 80110f2:	4606      	mov	r6, r0
 80110f4:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80110f8:	4628      	mov	r0, r5
 80110fa:	f7fd fa77 	bl	800e5ec <ucdr_serialize_int16_t>
 80110fe:	4030      	ands	r0, r6
 8011100:	b2c0      	uxtb	r0, r0
 8011102:	bd70      	pop	{r4, r5, r6, pc}
 8011104:	3104      	adds	r1, #4
 8011106:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801110a:	f7ff be7b 	b.w	8010e04 <uxr_serialize_CLIENT_Representation>
 801110e:	3104      	adds	r1, #4
 8011110:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011114:	f7ff bf32 	b.w	8010f7c <uxr_serialize_AGENT_Representation>
 8011118:	2001      	movs	r0, #1
 801111a:	bd70      	pop	{r4, r5, r6, pc}
 801111c:	68a2      	ldr	r2, [r4, #8]
 801111e:	f104 010c 	add.w	r1, r4, #12
 8011122:	4628      	mov	r0, r5
 8011124:	f7fe f8a8 	bl	800f278 <ucdr_serialize_sequence_uint8_t>
 8011128:	4606      	mov	r6, r0
 801112a:	e7c7      	b.n	80110bc <uxr_serialize_ObjectVariant.part.0+0x5c>
 801112c:	68a1      	ldr	r1, [r4, #8]
 801112e:	4628      	mov	r0, r5
 8011130:	f002 fdca 	bl	8013cc8 <ucdr_serialize_string>
 8011134:	4606      	mov	r6, r0
 8011136:	e7c1      	b.n	80110bc <uxr_serialize_ObjectVariant.part.0+0x5c>
 8011138:	68a2      	ldr	r2, [r4, #8]
 801113a:	f104 010c 	add.w	r1, r4, #12
 801113e:	4628      	mov	r0, r5
 8011140:	f7fe f89a 	bl	800f278 <ucdr_serialize_sequence_uint8_t>
 8011144:	4606      	mov	r6, r0
 8011146:	e7d5      	b.n	80110f4 <uxr_serialize_ObjectVariant.part.0+0x94>

08011148 <uxr_deserialize_DATAWRITER_Representation>:
 8011148:	b570      	push	{r4, r5, r6, lr}
 801114a:	4606      	mov	r6, r0
 801114c:	460d      	mov	r5, r1
 801114e:	f7fc fd27 	bl	800dba0 <ucdr_deserialize_uint8_t>
 8011152:	4604      	mov	r4, r0
 8011154:	b130      	cbz	r0, 8011164 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8011156:	782b      	ldrb	r3, [r5, #0]
 8011158:	2b02      	cmp	r3, #2
 801115a:	d00c      	beq.n	8011176 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801115c:	2b03      	cmp	r3, #3
 801115e:	d012      	beq.n	8011186 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8011160:	2b01      	cmp	r3, #1
 8011162:	d008      	beq.n	8011176 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8011164:	2202      	movs	r2, #2
 8011166:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801116a:	4630      	mov	r0, r6
 801116c:	f7fc fbc4 	bl	800d8f8 <ucdr_deserialize_array_uint8_t>
 8011170:	4020      	ands	r0, r4
 8011172:	b2c0      	uxtb	r0, r0
 8011174:	bd70      	pop	{r4, r5, r6, pc}
 8011176:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801117a:	6869      	ldr	r1, [r5, #4]
 801117c:	4630      	mov	r0, r6
 801117e:	f002 fdb3 	bl	8013ce8 <ucdr_deserialize_string>
 8011182:	4604      	mov	r4, r0
 8011184:	e7ee      	b.n	8011164 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8011186:	1d2b      	adds	r3, r5, #4
 8011188:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801118c:	f105 0108 	add.w	r1, r5, #8
 8011190:	4630      	mov	r0, r6
 8011192:	f7fe f883 	bl	800f29c <ucdr_deserialize_sequence_uint8_t>
 8011196:	4604      	mov	r4, r0
 8011198:	e7e4      	b.n	8011164 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801119a:	bf00      	nop

0801119c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801119c:	b570      	push	{r4, r5, r6, lr}
 801119e:	460d      	mov	r5, r1
 80111a0:	7809      	ldrb	r1, [r1, #0]
 80111a2:	4606      	mov	r6, r0
 80111a4:	f7fc fcb8 	bl	800db18 <ucdr_serialize_bool>
 80111a8:	782b      	ldrb	r3, [r5, #0]
 80111aa:	4604      	mov	r4, r0
 80111ac:	b94b      	cbnz	r3, 80111c2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 80111ae:	7a29      	ldrb	r1, [r5, #8]
 80111b0:	4630      	mov	r0, r6
 80111b2:	f7fc fcb1 	bl	800db18 <ucdr_serialize_bool>
 80111b6:	7a2b      	ldrb	r3, [r5, #8]
 80111b8:	4004      	ands	r4, r0
 80111ba:	b2e4      	uxtb	r4, r4
 80111bc:	b943      	cbnz	r3, 80111d0 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 80111be:	4620      	mov	r0, r4
 80111c0:	bd70      	pop	{r4, r5, r6, pc}
 80111c2:	6869      	ldr	r1, [r5, #4]
 80111c4:	4630      	mov	r0, r6
 80111c6:	f002 fd7f 	bl	8013cc8 <ucdr_serialize_string>
 80111ca:	4004      	ands	r4, r0
 80111cc:	b2e4      	uxtb	r4, r4
 80111ce:	e7ee      	b.n	80111ae <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80111d0:	68e9      	ldr	r1, [r5, #12]
 80111d2:	4630      	mov	r0, r6
 80111d4:	f002 fd78 	bl	8013cc8 <ucdr_serialize_string>
 80111d8:	4004      	ands	r4, r0
 80111da:	4620      	mov	r0, r4
 80111dc:	bd70      	pop	{r4, r5, r6, pc}
 80111de:	bf00      	nop

080111e0 <uxr_serialize_OBJK_Topic_Binary>:
 80111e0:	b570      	push	{r4, r5, r6, lr}
 80111e2:	460d      	mov	r5, r1
 80111e4:	4606      	mov	r6, r0
 80111e6:	6809      	ldr	r1, [r1, #0]
 80111e8:	f002 fd6e 	bl	8013cc8 <ucdr_serialize_string>
 80111ec:	4604      	mov	r4, r0
 80111ee:	7929      	ldrb	r1, [r5, #4]
 80111f0:	4630      	mov	r0, r6
 80111f2:	f7fc fc91 	bl	800db18 <ucdr_serialize_bool>
 80111f6:	792b      	ldrb	r3, [r5, #4]
 80111f8:	4004      	ands	r4, r0
 80111fa:	b2e4      	uxtb	r4, r4
 80111fc:	b943      	cbnz	r3, 8011210 <uxr_serialize_OBJK_Topic_Binary+0x30>
 80111fe:	7b29      	ldrb	r1, [r5, #12]
 8011200:	4630      	mov	r0, r6
 8011202:	f7fc fc89 	bl	800db18 <ucdr_serialize_bool>
 8011206:	7b2b      	ldrb	r3, [r5, #12]
 8011208:	4004      	ands	r4, r0
 801120a:	b93b      	cbnz	r3, 801121c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 801120c:	4620      	mov	r0, r4
 801120e:	bd70      	pop	{r4, r5, r6, pc}
 8011210:	68a9      	ldr	r1, [r5, #8]
 8011212:	4630      	mov	r0, r6
 8011214:	f002 fd58 	bl	8013cc8 <ucdr_serialize_string>
 8011218:	4004      	ands	r4, r0
 801121a:	e7f0      	b.n	80111fe <uxr_serialize_OBJK_Topic_Binary+0x1e>
 801121c:	6929      	ldr	r1, [r5, #16]
 801121e:	4630      	mov	r0, r6
 8011220:	f002 fd52 	bl	8013cc8 <ucdr_serialize_string>
 8011224:	4004      	ands	r4, r0
 8011226:	b2e4      	uxtb	r4, r4
 8011228:	4620      	mov	r0, r4
 801122a:	bd70      	pop	{r4, r5, r6, pc}

0801122c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 801122c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011230:	460c      	mov	r4, r1
 8011232:	7809      	ldrb	r1, [r1, #0]
 8011234:	4606      	mov	r6, r0
 8011236:	f7fc fc6f 	bl	800db18 <ucdr_serialize_bool>
 801123a:	7823      	ldrb	r3, [r4, #0]
 801123c:	4605      	mov	r5, r0
 801123e:	b96b      	cbnz	r3, 801125c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8011240:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8011244:	4630      	mov	r0, r6
 8011246:	f7fc fc67 	bl	800db18 <ucdr_serialize_bool>
 801124a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801124e:	4005      	ands	r5, r0
 8011250:	b2ed      	uxtb	r5, r5
 8011252:	2b00      	cmp	r3, #0
 8011254:	d169      	bne.n	801132a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8011256:	4628      	mov	r0, r5
 8011258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801125c:	6861      	ldr	r1, [r4, #4]
 801125e:	4630      	mov	r0, r6
 8011260:	f7fc fe9e 	bl	800dfa0 <ucdr_serialize_uint32_t>
 8011264:	6863      	ldr	r3, [r4, #4]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d06b      	beq.n	8011342 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801126a:	2800      	cmp	r0, #0
 801126c:	d067      	beq.n	801133e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801126e:	68a1      	ldr	r1, [r4, #8]
 8011270:	4630      	mov	r0, r6
 8011272:	f002 fd29 	bl	8013cc8 <ucdr_serialize_string>
 8011276:	6863      	ldr	r3, [r4, #4]
 8011278:	2b01      	cmp	r3, #1
 801127a:	d953      	bls.n	8011324 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801127c:	2800      	cmp	r0, #0
 801127e:	d05e      	beq.n	801133e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011280:	68e1      	ldr	r1, [r4, #12]
 8011282:	4630      	mov	r0, r6
 8011284:	f002 fd20 	bl	8013cc8 <ucdr_serialize_string>
 8011288:	6863      	ldr	r3, [r4, #4]
 801128a:	2b02      	cmp	r3, #2
 801128c:	d94a      	bls.n	8011324 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801128e:	2800      	cmp	r0, #0
 8011290:	d055      	beq.n	801133e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011292:	6921      	ldr	r1, [r4, #16]
 8011294:	4630      	mov	r0, r6
 8011296:	f002 fd17 	bl	8013cc8 <ucdr_serialize_string>
 801129a:	6863      	ldr	r3, [r4, #4]
 801129c:	2b03      	cmp	r3, #3
 801129e:	d941      	bls.n	8011324 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80112a0:	2800      	cmp	r0, #0
 80112a2:	d04c      	beq.n	801133e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80112a4:	6961      	ldr	r1, [r4, #20]
 80112a6:	4630      	mov	r0, r6
 80112a8:	f002 fd0e 	bl	8013cc8 <ucdr_serialize_string>
 80112ac:	6863      	ldr	r3, [r4, #4]
 80112ae:	2b04      	cmp	r3, #4
 80112b0:	d938      	bls.n	8011324 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80112b2:	2800      	cmp	r0, #0
 80112b4:	d043      	beq.n	801133e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80112b6:	69a1      	ldr	r1, [r4, #24]
 80112b8:	4630      	mov	r0, r6
 80112ba:	f002 fd05 	bl	8013cc8 <ucdr_serialize_string>
 80112be:	6863      	ldr	r3, [r4, #4]
 80112c0:	2b05      	cmp	r3, #5
 80112c2:	d92f      	bls.n	8011324 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80112c4:	2800      	cmp	r0, #0
 80112c6:	d03a      	beq.n	801133e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80112c8:	69e1      	ldr	r1, [r4, #28]
 80112ca:	4630      	mov	r0, r6
 80112cc:	f002 fcfc 	bl	8013cc8 <ucdr_serialize_string>
 80112d0:	6863      	ldr	r3, [r4, #4]
 80112d2:	2b06      	cmp	r3, #6
 80112d4:	d926      	bls.n	8011324 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80112d6:	b390      	cbz	r0, 801133e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80112d8:	6a21      	ldr	r1, [r4, #32]
 80112da:	4630      	mov	r0, r6
 80112dc:	f002 fcf4 	bl	8013cc8 <ucdr_serialize_string>
 80112e0:	6863      	ldr	r3, [r4, #4]
 80112e2:	2b07      	cmp	r3, #7
 80112e4:	d91e      	bls.n	8011324 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80112e6:	b350      	cbz	r0, 801133e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80112e8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80112ea:	4630      	mov	r0, r6
 80112ec:	f002 fcec 	bl	8013cc8 <ucdr_serialize_string>
 80112f0:	6863      	ldr	r3, [r4, #4]
 80112f2:	2b08      	cmp	r3, #8
 80112f4:	d916      	bls.n	8011324 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80112f6:	b310      	cbz	r0, 801133e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80112f8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80112fa:	4630      	mov	r0, r6
 80112fc:	f002 fce4 	bl	8013cc8 <ucdr_serialize_string>
 8011300:	6863      	ldr	r3, [r4, #4]
 8011302:	2b09      	cmp	r3, #9
 8011304:	d90e      	bls.n	8011324 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011306:	b1d0      	cbz	r0, 801133e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011308:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 801130c:	2709      	movs	r7, #9
 801130e:	e000      	b.n	8011312 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8011310:	b1a8      	cbz	r0, 801133e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011312:	f858 1b04 	ldr.w	r1, [r8], #4
 8011316:	4630      	mov	r0, r6
 8011318:	f002 fcd6 	bl	8013cc8 <ucdr_serialize_string>
 801131c:	3701      	adds	r7, #1
 801131e:	6862      	ldr	r2, [r4, #4]
 8011320:	4297      	cmp	r7, r2
 8011322:	d3f5      	bcc.n	8011310 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8011324:	4005      	ands	r5, r0
 8011326:	b2ed      	uxtb	r5, r5
 8011328:	e78a      	b.n	8011240 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801132a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801132c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8011330:	4630      	mov	r0, r6
 8011332:	f7fd ffa1 	bl	800f278 <ucdr_serialize_sequence_uint8_t>
 8011336:	4005      	ands	r5, r0
 8011338:	4628      	mov	r0, r5
 801133a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801133e:	2500      	movs	r5, #0
 8011340:	e77e      	b.n	8011240 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8011342:	4028      	ands	r0, r5
 8011344:	b2c5      	uxtb	r5, r0
 8011346:	e77b      	b.n	8011240 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08011348 <uxr_serialize_OBJK_Publisher_Binary>:
 8011348:	b570      	push	{r4, r5, r6, lr}
 801134a:	460d      	mov	r5, r1
 801134c:	7809      	ldrb	r1, [r1, #0]
 801134e:	4606      	mov	r6, r0
 8011350:	f7fc fbe2 	bl	800db18 <ucdr_serialize_bool>
 8011354:	782b      	ldrb	r3, [r5, #0]
 8011356:	4604      	mov	r4, r0
 8011358:	b94b      	cbnz	r3, 801136e <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801135a:	7a29      	ldrb	r1, [r5, #8]
 801135c:	4630      	mov	r0, r6
 801135e:	f7fc fbdb 	bl	800db18 <ucdr_serialize_bool>
 8011362:	7a2b      	ldrb	r3, [r5, #8]
 8011364:	4004      	ands	r4, r0
 8011366:	b2e4      	uxtb	r4, r4
 8011368:	b943      	cbnz	r3, 801137c <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801136a:	4620      	mov	r0, r4
 801136c:	bd70      	pop	{r4, r5, r6, pc}
 801136e:	6869      	ldr	r1, [r5, #4]
 8011370:	4630      	mov	r0, r6
 8011372:	f002 fca9 	bl	8013cc8 <ucdr_serialize_string>
 8011376:	4004      	ands	r4, r0
 8011378:	b2e4      	uxtb	r4, r4
 801137a:	e7ee      	b.n	801135a <uxr_serialize_OBJK_Publisher_Binary+0x12>
 801137c:	f105 010c 	add.w	r1, r5, #12
 8011380:	4630      	mov	r0, r6
 8011382:	f7ff ff53 	bl	801122c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8011386:	4004      	ands	r4, r0
 8011388:	4620      	mov	r0, r4
 801138a:	bd70      	pop	{r4, r5, r6, pc}

0801138c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801138c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8011390:	4688      	mov	r8, r1
 8011392:	4681      	mov	r9, r0
 8011394:	8809      	ldrh	r1, [r1, #0]
 8011396:	f7fc fc19 	bl	800dbcc <ucdr_serialize_uint16_t>
 801139a:	4606      	mov	r6, r0
 801139c:	f898 1002 	ldrb.w	r1, [r8, #2]
 80113a0:	4648      	mov	r0, r9
 80113a2:	f7fc fbb9 	bl	800db18 <ucdr_serialize_bool>
 80113a6:	f898 3002 	ldrb.w	r3, [r8, #2]
 80113aa:	4006      	ands	r6, r0
 80113ac:	b2f5      	uxtb	r5, r6
 80113ae:	b9eb      	cbnz	r3, 80113ec <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 80113b0:	f898 1006 	ldrb.w	r1, [r8, #6]
 80113b4:	4648      	mov	r0, r9
 80113b6:	f7fc fbaf 	bl	800db18 <ucdr_serialize_bool>
 80113ba:	f898 3006 	ldrb.w	r3, [r8, #6]
 80113be:	4005      	ands	r5, r0
 80113c0:	bb7b      	cbnz	r3, 8011422 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80113c2:	f898 100c 	ldrb.w	r1, [r8, #12]
 80113c6:	4648      	mov	r0, r9
 80113c8:	f7fc fba6 	bl	800db18 <ucdr_serialize_bool>
 80113cc:	f898 300c 	ldrb.w	r3, [r8, #12]
 80113d0:	4005      	ands	r5, r0
 80113d2:	b9f3      	cbnz	r3, 8011412 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80113d4:	f898 1014 	ldrb.w	r1, [r8, #20]
 80113d8:	4648      	mov	r0, r9
 80113da:	f7fc fb9d 	bl	800db18 <ucdr_serialize_bool>
 80113de:	f898 3014 	ldrb.w	r3, [r8, #20]
 80113e2:	4005      	ands	r5, r0
 80113e4:	b94b      	cbnz	r3, 80113fa <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80113e6:	4628      	mov	r0, r5
 80113e8:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80113ec:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80113f0:	4648      	mov	r0, r9
 80113f2:	f7fc fbeb 	bl	800dbcc <ucdr_serialize_uint16_t>
 80113f6:	4005      	ands	r5, r0
 80113f8:	e7da      	b.n	80113b0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80113fa:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80113fe:	f108 011c 	add.w	r1, r8, #28
 8011402:	4648      	mov	r0, r9
 8011404:	f7fd ff38 	bl	800f278 <ucdr_serialize_sequence_uint8_t>
 8011408:	4028      	ands	r0, r5
 801140a:	b2c5      	uxtb	r5, r0
 801140c:	4628      	mov	r0, r5
 801140e:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8011412:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011416:	4648      	mov	r0, r9
 8011418:	f7fc fdc2 	bl	800dfa0 <ucdr_serialize_uint32_t>
 801141c:	4028      	ands	r0, r5
 801141e:	b2c5      	uxtb	r5, r0
 8011420:	e7d8      	b.n	80113d4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8011422:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8011426:	4648      	mov	r0, r9
 8011428:	f7fc fdba 	bl	800dfa0 <ucdr_serialize_uint32_t>
 801142c:	4028      	ands	r0, r5
 801142e:	b2c5      	uxtb	r5, r0
 8011430:	e7c7      	b.n	80113c2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8011432:	bf00      	nop

08011434 <uxr_serialize_OBJK_DataWriter_Binary>:
 8011434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011436:	2202      	movs	r2, #2
 8011438:	460d      	mov	r5, r1
 801143a:	4606      	mov	r6, r0
 801143c:	f7fc f9f8 	bl	800d830 <ucdr_serialize_array_uint8_t>
 8011440:	4604      	mov	r4, r0
 8011442:	78a9      	ldrb	r1, [r5, #2]
 8011444:	4630      	mov	r0, r6
 8011446:	f7fc fb67 	bl	800db18 <ucdr_serialize_bool>
 801144a:	78ab      	ldrb	r3, [r5, #2]
 801144c:	4004      	ands	r4, r0
 801144e:	b2e4      	uxtb	r4, r4
 8011450:	b90b      	cbnz	r3, 8011456 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8011452:	4620      	mov	r0, r4
 8011454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011456:	f105 0108 	add.w	r1, r5, #8
 801145a:	4630      	mov	r0, r6
 801145c:	f7ff ff96 	bl	801138c <uxr_serialize_OBJK_Endpoint_QosBinary>
 8011460:	4607      	mov	r7, r0
 8011462:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8011466:	4630      	mov	r0, r6
 8011468:	f7fc fb56 	bl	800db18 <ucdr_serialize_bool>
 801146c:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8011470:	4038      	ands	r0, r7
 8011472:	b2c7      	uxtb	r7, r0
 8011474:	b913      	cbnz	r3, 801147c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8011476:	403c      	ands	r4, r7
 8011478:	4620      	mov	r0, r4
 801147a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801147c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8011480:	4630      	mov	r0, r6
 8011482:	f7fc ffe3 	bl	800e44c <ucdr_serialize_uint64_t>
 8011486:	4007      	ands	r7, r0
 8011488:	e7f5      	b.n	8011476 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801148a:	bf00      	nop

0801148c <uxr_deserialize_ObjectVariant>:
 801148c:	b570      	push	{r4, r5, r6, lr}
 801148e:	4605      	mov	r5, r0
 8011490:	460e      	mov	r6, r1
 8011492:	f7fc fb85 	bl	800dba0 <ucdr_deserialize_uint8_t>
 8011496:	b168      	cbz	r0, 80114b4 <uxr_deserialize_ObjectVariant+0x28>
 8011498:	7833      	ldrb	r3, [r6, #0]
 801149a:	4604      	mov	r4, r0
 801149c:	3b01      	subs	r3, #1
 801149e:	2b0d      	cmp	r3, #13
 80114a0:	d809      	bhi.n	80114b6 <uxr_deserialize_ObjectVariant+0x2a>
 80114a2:	e8df f003 	tbb	[pc, r3]
 80114a6:	0a41      	.short	0x0a41
 80114a8:	0a0a2323 	.word	0x0a0a2323
 80114ac:	10080a0a 	.word	0x10080a0a
 80114b0:	565c1010 	.word	0x565c1010
 80114b4:	2400      	movs	r4, #0
 80114b6:	4620      	mov	r0, r4
 80114b8:	bd70      	pop	{r4, r5, r6, pc}
 80114ba:	1d31      	adds	r1, r6, #4
 80114bc:	4628      	mov	r0, r5
 80114be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80114c2:	f7ff be41 	b.w	8011148 <uxr_deserialize_DATAWRITER_Representation>
 80114c6:	1d31      	adds	r1, r6, #4
 80114c8:	4628      	mov	r0, r5
 80114ca:	f7fc fb69 	bl	800dba0 <ucdr_deserialize_uint8_t>
 80114ce:	2800      	cmp	r0, #0
 80114d0:	d0f0      	beq.n	80114b4 <uxr_deserialize_ObjectVariant+0x28>
 80114d2:	7933      	ldrb	r3, [r6, #4]
 80114d4:	2b01      	cmp	r3, #1
 80114d6:	d001      	beq.n	80114dc <uxr_deserialize_ObjectVariant+0x50>
 80114d8:	2b02      	cmp	r3, #2
 80114da:	d1ec      	bne.n	80114b6 <uxr_deserialize_ObjectVariant+0x2a>
 80114dc:	68b1      	ldr	r1, [r6, #8]
 80114de:	4628      	mov	r0, r5
 80114e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80114e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80114e8:	f002 bbfe 	b.w	8013ce8 <ucdr_deserialize_string>
 80114ec:	1d31      	adds	r1, r6, #4
 80114ee:	4628      	mov	r0, r5
 80114f0:	f7fc fb56 	bl	800dba0 <ucdr_deserialize_uint8_t>
 80114f4:	4604      	mov	r4, r0
 80114f6:	b170      	cbz	r0, 8011516 <uxr_deserialize_ObjectVariant+0x8a>
 80114f8:	7933      	ldrb	r3, [r6, #4]
 80114fa:	2b02      	cmp	r3, #2
 80114fc:	d04c      	beq.n	8011598 <uxr_deserialize_ObjectVariant+0x10c>
 80114fe:	2b03      	cmp	r3, #3
 8011500:	d109      	bne.n	8011516 <uxr_deserialize_ObjectVariant+0x8a>
 8011502:	f106 0308 	add.w	r3, r6, #8
 8011506:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801150a:	f106 010c 	add.w	r1, r6, #12
 801150e:	4628      	mov	r0, r5
 8011510:	f7fd fec4 	bl	800f29c <ucdr_deserialize_sequence_uint8_t>
 8011514:	4604      	mov	r4, r0
 8011516:	2202      	movs	r2, #2
 8011518:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801151c:	4628      	mov	r0, r5
 801151e:	f7fc f9eb 	bl	800d8f8 <ucdr_deserialize_array_uint8_t>
 8011522:	4020      	ands	r0, r4
 8011524:	b2c4      	uxtb	r4, r0
 8011526:	e7c6      	b.n	80114b6 <uxr_deserialize_ObjectVariant+0x2a>
 8011528:	1d31      	adds	r1, r6, #4
 801152a:	4628      	mov	r0, r5
 801152c:	f7fc fb38 	bl	800dba0 <ucdr_deserialize_uint8_t>
 8011530:	4604      	mov	r4, r0
 8011532:	b130      	cbz	r0, 8011542 <uxr_deserialize_ObjectVariant+0xb6>
 8011534:	7933      	ldrb	r3, [r6, #4]
 8011536:	2b02      	cmp	r3, #2
 8011538:	d036      	beq.n	80115a8 <uxr_deserialize_ObjectVariant+0x11c>
 801153a:	2b03      	cmp	r3, #3
 801153c:	d03c      	beq.n	80115b8 <uxr_deserialize_ObjectVariant+0x12c>
 801153e:	2b01      	cmp	r3, #1
 8011540:	d032      	beq.n	80115a8 <uxr_deserialize_ObjectVariant+0x11c>
 8011542:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8011546:	4628      	mov	r0, r5
 8011548:	f7fd f8d0 	bl	800e6ec <ucdr_deserialize_int16_t>
 801154c:	4020      	ands	r0, r4
 801154e:	b2c4      	uxtb	r4, r0
 8011550:	e7b1      	b.n	80114b6 <uxr_deserialize_ObjectVariant+0x2a>
 8011552:	1d31      	adds	r1, r6, #4
 8011554:	4628      	mov	r0, r5
 8011556:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801155a:	f7ff bcab 	b.w	8010eb4 <uxr_deserialize_CLIENT_Representation>
 801155e:	2204      	movs	r2, #4
 8011560:	4628      	mov	r0, r5
 8011562:	18b1      	adds	r1, r6, r2
 8011564:	f7fc f9c8 	bl	800d8f8 <ucdr_deserialize_array_uint8_t>
 8011568:	4604      	mov	r4, r0
 801156a:	2202      	movs	r2, #2
 801156c:	f106 0108 	add.w	r1, r6, #8
 8011570:	4628      	mov	r0, r5
 8011572:	f7fc f9c1 	bl	800d8f8 <ucdr_deserialize_array_uint8_t>
 8011576:	4004      	ands	r4, r0
 8011578:	2202      	movs	r2, #2
 801157a:	f106 010a 	add.w	r1, r6, #10
 801157e:	4628      	mov	r0, r5
 8011580:	b2e4      	uxtb	r4, r4
 8011582:	f7fc f9b9 	bl	800d8f8 <ucdr_deserialize_array_uint8_t>
 8011586:	4603      	mov	r3, r0
 8011588:	f106 010c 	add.w	r1, r6, #12
 801158c:	4628      	mov	r0, r5
 801158e:	401c      	ands	r4, r3
 8011590:	f7fc fad8 	bl	800db44 <ucdr_deserialize_bool>
 8011594:	4004      	ands	r4, r0
 8011596:	e78e      	b.n	80114b6 <uxr_deserialize_ObjectVariant+0x2a>
 8011598:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801159c:	68b1      	ldr	r1, [r6, #8]
 801159e:	4628      	mov	r0, r5
 80115a0:	f002 fba2 	bl	8013ce8 <ucdr_deserialize_string>
 80115a4:	4604      	mov	r4, r0
 80115a6:	e7b6      	b.n	8011516 <uxr_deserialize_ObjectVariant+0x8a>
 80115a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80115ac:	68b1      	ldr	r1, [r6, #8]
 80115ae:	4628      	mov	r0, r5
 80115b0:	f002 fb9a 	bl	8013ce8 <ucdr_deserialize_string>
 80115b4:	4604      	mov	r4, r0
 80115b6:	e7c4      	b.n	8011542 <uxr_deserialize_ObjectVariant+0xb6>
 80115b8:	f106 0308 	add.w	r3, r6, #8
 80115bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80115c0:	f106 010c 	add.w	r1, r6, #12
 80115c4:	4628      	mov	r0, r5
 80115c6:	f7fd fe69 	bl	800f29c <ucdr_deserialize_sequence_uint8_t>
 80115ca:	4604      	mov	r4, r0
 80115cc:	e7b9      	b.n	8011542 <uxr_deserialize_ObjectVariant+0xb6>
 80115ce:	bf00      	nop

080115d0 <uxr_deserialize_BaseObjectRequest>:
 80115d0:	b570      	push	{r4, r5, r6, lr}
 80115d2:	2202      	movs	r2, #2
 80115d4:	4605      	mov	r5, r0
 80115d6:	460e      	mov	r6, r1
 80115d8:	f7fc f98e 	bl	800d8f8 <ucdr_deserialize_array_uint8_t>
 80115dc:	2202      	movs	r2, #2
 80115de:	4604      	mov	r4, r0
 80115e0:	4628      	mov	r0, r5
 80115e2:	18b1      	adds	r1, r6, r2
 80115e4:	f7fc f988 	bl	800d8f8 <ucdr_deserialize_array_uint8_t>
 80115e8:	4020      	ands	r0, r4
 80115ea:	b2c0      	uxtb	r0, r0
 80115ec:	bd70      	pop	{r4, r5, r6, pc}
 80115ee:	bf00      	nop

080115f0 <uxr_serialize_ActivityInfoVariant>:
 80115f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115f4:	460e      	mov	r6, r1
 80115f6:	7809      	ldrb	r1, [r1, #0]
 80115f8:	4680      	mov	r8, r0
 80115fa:	f7fc fabb 	bl	800db74 <ucdr_serialize_uint8_t>
 80115fe:	4607      	mov	r7, r0
 8011600:	b138      	cbz	r0, 8011612 <uxr_serialize_ActivityInfoVariant+0x22>
 8011602:	7833      	ldrb	r3, [r6, #0]
 8011604:	2b06      	cmp	r3, #6
 8011606:	f000 8081 	beq.w	801170c <uxr_serialize_ActivityInfoVariant+0x11c>
 801160a:	2b0d      	cmp	r3, #13
 801160c:	d014      	beq.n	8011638 <uxr_serialize_ActivityInfoVariant+0x48>
 801160e:	2b05      	cmp	r3, #5
 8011610:	d002      	beq.n	8011618 <uxr_serialize_ActivityInfoVariant+0x28>
 8011612:	4638      	mov	r0, r7
 8011614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011618:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801161c:	4640      	mov	r0, r8
 801161e:	f7fc ffe5 	bl	800e5ec <ucdr_serialize_int16_t>
 8011622:	4607      	mov	r7, r0
 8011624:	4640      	mov	r0, r8
 8011626:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 801162a:	f7fc ff0f 	bl	800e44c <ucdr_serialize_uint64_t>
 801162e:	4038      	ands	r0, r7
 8011630:	b2c7      	uxtb	r7, r0
 8011632:	4638      	mov	r0, r7
 8011634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011638:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801163c:	4640      	mov	r0, r8
 801163e:	f7fc ffd5 	bl	800e5ec <ucdr_serialize_int16_t>
 8011642:	68f1      	ldr	r1, [r6, #12]
 8011644:	4607      	mov	r7, r0
 8011646:	4640      	mov	r0, r8
 8011648:	f7fc fcaa 	bl	800dfa0 <ucdr_serialize_uint32_t>
 801164c:	68f3      	ldr	r3, [r6, #12]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d0ed      	beq.n	801162e <uxr_serialize_ActivityInfoVariant+0x3e>
 8011652:	b318      	cbz	r0, 801169c <uxr_serialize_ActivityInfoVariant+0xac>
 8011654:	f106 090c 	add.w	r9, r6, #12
 8011658:	2400      	movs	r4, #0
 801165a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801165e:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8011662:	7c29      	ldrb	r1, [r5, #16]
 8011664:	4640      	mov	r0, r8
 8011666:	f7fc fa85 	bl	800db74 <ucdr_serialize_uint8_t>
 801166a:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801166e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8011672:	2800      	cmp	r0, #0
 8011674:	d051      	beq.n	801171a <uxr_serialize_ActivityInfoVariant+0x12a>
 8011676:	7c2b      	ldrb	r3, [r5, #16]
 8011678:	00c9      	lsls	r1, r1, #3
 801167a:	2b03      	cmp	r3, #3
 801167c:	d854      	bhi.n	8011728 <uxr_serialize_ActivityInfoVariant+0x138>
 801167e:	e8df f003 	tbb	[pc, r3]
 8011682:	2133      	.short	0x2133
 8011684:	020f      	.short	0x020f
 8011686:	4449      	add	r1, r9
 8011688:	4640      	mov	r0, r8
 801168a:	6889      	ldr	r1, [r1, #8]
 801168c:	f002 fb1c 	bl	8013cc8 <ucdr_serialize_string>
 8011690:	3401      	adds	r4, #1
 8011692:	68f2      	ldr	r2, [r6, #12]
 8011694:	4294      	cmp	r4, r2
 8011696:	d244      	bcs.n	8011722 <uxr_serialize_ActivityInfoVariant+0x132>
 8011698:	2800      	cmp	r0, #0
 801169a:	d1de      	bne.n	801165a <uxr_serialize_ActivityInfoVariant+0x6a>
 801169c:	2700      	movs	r7, #0
 801169e:	e7b8      	b.n	8011612 <uxr_serialize_ActivityInfoVariant+0x22>
 80116a0:	3108      	adds	r1, #8
 80116a2:	44a2      	add	sl, r4
 80116a4:	2210      	movs	r2, #16
 80116a6:	4640      	mov	r0, r8
 80116a8:	4449      	add	r1, r9
 80116aa:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80116ae:	f7fc f8bf 	bl	800d830 <ucdr_serialize_array_uint8_t>
 80116b2:	4605      	mov	r5, r0
 80116b4:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 80116b8:	4640      	mov	r0, r8
 80116ba:	f7fc fc71 	bl	800dfa0 <ucdr_serialize_uint32_t>
 80116be:	4028      	ands	r0, r5
 80116c0:	b2c0      	uxtb	r0, r0
 80116c2:	e7e5      	b.n	8011690 <uxr_serialize_ActivityInfoVariant+0xa0>
 80116c4:	3108      	adds	r1, #8
 80116c6:	44a2      	add	sl, r4
 80116c8:	2204      	movs	r2, #4
 80116ca:	4640      	mov	r0, r8
 80116cc:	4449      	add	r1, r9
 80116ce:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80116d2:	f7fc f8ad 	bl	800d830 <ucdr_serialize_array_uint8_t>
 80116d6:	4605      	mov	r5, r0
 80116d8:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 80116dc:	4640      	mov	r0, r8
 80116de:	f7fc fa75 	bl	800dbcc <ucdr_serialize_uint16_t>
 80116e2:	4028      	ands	r0, r5
 80116e4:	b2c0      	uxtb	r0, r0
 80116e6:	e7d3      	b.n	8011690 <uxr_serialize_ActivityInfoVariant+0xa0>
 80116e8:	3108      	adds	r1, #8
 80116ea:	44a2      	add	sl, r4
 80116ec:	2202      	movs	r2, #2
 80116ee:	4640      	mov	r0, r8
 80116f0:	4449      	add	r1, r9
 80116f2:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80116f6:	f7fc f89b 	bl	800d830 <ucdr_serialize_array_uint8_t>
 80116fa:	4605      	mov	r5, r0
 80116fc:	f89a 1016 	ldrb.w	r1, [sl, #22]
 8011700:	4640      	mov	r0, r8
 8011702:	f7fc fa37 	bl	800db74 <ucdr_serialize_uint8_t>
 8011706:	4028      	ands	r0, r5
 8011708:	b2c0      	uxtb	r0, r0
 801170a:	e7c1      	b.n	8011690 <uxr_serialize_ActivityInfoVariant+0xa0>
 801170c:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8011710:	4640      	mov	r0, r8
 8011712:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011716:	f7fc bf69 	b.w	800e5ec <ucdr_serialize_int16_t>
 801171a:	3401      	adds	r4, #1
 801171c:	68f2      	ldr	r2, [r6, #12]
 801171e:	42a2      	cmp	r2, r4
 8011720:	d8bc      	bhi.n	801169c <uxr_serialize_ActivityInfoVariant+0xac>
 8011722:	4007      	ands	r7, r0
 8011724:	b2ff      	uxtb	r7, r7
 8011726:	e774      	b.n	8011612 <uxr_serialize_ActivityInfoVariant+0x22>
 8011728:	3401      	adds	r4, #1
 801172a:	68f3      	ldr	r3, [r6, #12]
 801172c:	3518      	adds	r5, #24
 801172e:	429c      	cmp	r4, r3
 8011730:	d397      	bcc.n	8011662 <uxr_serialize_ActivityInfoVariant+0x72>
 8011732:	e76e      	b.n	8011612 <uxr_serialize_ActivityInfoVariant+0x22>

08011734 <uxr_deserialize_BaseObjectReply>:
 8011734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011738:	2202      	movs	r2, #2
 801173a:	4606      	mov	r6, r0
 801173c:	460f      	mov	r7, r1
 801173e:	f7fc f8db 	bl	800d8f8 <ucdr_deserialize_array_uint8_t>
 8011742:	2202      	movs	r2, #2
 8011744:	4605      	mov	r5, r0
 8011746:	4630      	mov	r0, r6
 8011748:	18b9      	adds	r1, r7, r2
 801174a:	f7fc f8d5 	bl	800d8f8 <ucdr_deserialize_array_uint8_t>
 801174e:	4680      	mov	r8, r0
 8011750:	1d39      	adds	r1, r7, #4
 8011752:	4630      	mov	r0, r6
 8011754:	f7fc fa24 	bl	800dba0 <ucdr_deserialize_uint8_t>
 8011758:	ea05 0508 	and.w	r5, r5, r8
 801175c:	4604      	mov	r4, r0
 801175e:	1d79      	adds	r1, r7, #5
 8011760:	4630      	mov	r0, r6
 8011762:	402c      	ands	r4, r5
 8011764:	f7fc fa1c 	bl	800dba0 <ucdr_deserialize_uint8_t>
 8011768:	4020      	ands	r0, r4
 801176a:	b2c0      	uxtb	r0, r0
 801176c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011770 <uxr_serialize_ReadSpecification>:
 8011770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011772:	460e      	mov	r6, r1
 8011774:	4607      	mov	r7, r0
 8011776:	7809      	ldrb	r1, [r1, #0]
 8011778:	f7fc f9fc 	bl	800db74 <ucdr_serialize_uint8_t>
 801177c:	4604      	mov	r4, r0
 801177e:	7871      	ldrb	r1, [r6, #1]
 8011780:	4638      	mov	r0, r7
 8011782:	f7fc f9f7 	bl	800db74 <ucdr_serialize_uint8_t>
 8011786:	4004      	ands	r4, r0
 8011788:	78b1      	ldrb	r1, [r6, #2]
 801178a:	4638      	mov	r0, r7
 801178c:	f7fc f9c4 	bl	800db18 <ucdr_serialize_bool>
 8011790:	78b3      	ldrb	r3, [r6, #2]
 8011792:	b2e4      	uxtb	r4, r4
 8011794:	4004      	ands	r4, r0
 8011796:	b943      	cbnz	r3, 80117aa <uxr_serialize_ReadSpecification+0x3a>
 8011798:	7a31      	ldrb	r1, [r6, #8]
 801179a:	4638      	mov	r0, r7
 801179c:	f7fc f9bc 	bl	800db18 <ucdr_serialize_bool>
 80117a0:	7a33      	ldrb	r3, [r6, #8]
 80117a2:	4004      	ands	r4, r0
 80117a4:	b93b      	cbnz	r3, 80117b6 <uxr_serialize_ReadSpecification+0x46>
 80117a6:	4620      	mov	r0, r4
 80117a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117aa:	6871      	ldr	r1, [r6, #4]
 80117ac:	4638      	mov	r0, r7
 80117ae:	f002 fa8b 	bl	8013cc8 <ucdr_serialize_string>
 80117b2:	4004      	ands	r4, r0
 80117b4:	e7f0      	b.n	8011798 <uxr_serialize_ReadSpecification+0x28>
 80117b6:	8971      	ldrh	r1, [r6, #10]
 80117b8:	4638      	mov	r0, r7
 80117ba:	f7fc fa07 	bl	800dbcc <ucdr_serialize_uint16_t>
 80117be:	4605      	mov	r5, r0
 80117c0:	89b1      	ldrh	r1, [r6, #12]
 80117c2:	4638      	mov	r0, r7
 80117c4:	f7fc fa02 	bl	800dbcc <ucdr_serialize_uint16_t>
 80117c8:	4005      	ands	r5, r0
 80117ca:	89f1      	ldrh	r1, [r6, #14]
 80117cc:	4638      	mov	r0, r7
 80117ce:	b2ed      	uxtb	r5, r5
 80117d0:	f7fc f9fc 	bl	800dbcc <ucdr_serialize_uint16_t>
 80117d4:	8a31      	ldrh	r1, [r6, #16]
 80117d6:	4025      	ands	r5, r4
 80117d8:	4604      	mov	r4, r0
 80117da:	4638      	mov	r0, r7
 80117dc:	4025      	ands	r5, r4
 80117de:	f7fc f9f5 	bl	800dbcc <ucdr_serialize_uint16_t>
 80117e2:	ea00 0405 	and.w	r4, r0, r5
 80117e6:	4620      	mov	r0, r4
 80117e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117ea:	bf00      	nop

080117ec <uxr_serialize_CREATE_CLIENT_Payload>:
 80117ec:	f7ff bb0a 	b.w	8010e04 <uxr_serialize_CLIENT_Representation>

080117f0 <uxr_serialize_CREATE_Payload>:
 80117f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117f2:	2202      	movs	r2, #2
 80117f4:	4607      	mov	r7, r0
 80117f6:	460e      	mov	r6, r1
 80117f8:	f7fc f81a 	bl	800d830 <ucdr_serialize_array_uint8_t>
 80117fc:	2202      	movs	r2, #2
 80117fe:	4605      	mov	r5, r0
 8011800:	4638      	mov	r0, r7
 8011802:	18b1      	adds	r1, r6, r2
 8011804:	f7fc f814 	bl	800d830 <ucdr_serialize_array_uint8_t>
 8011808:	7931      	ldrb	r1, [r6, #4]
 801180a:	4604      	mov	r4, r0
 801180c:	4638      	mov	r0, r7
 801180e:	f7fc f9b1 	bl	800db74 <ucdr_serialize_uint8_t>
 8011812:	b170      	cbz	r0, 8011832 <uxr_serialize_CREATE_Payload+0x42>
 8011814:	7933      	ldrb	r3, [r6, #4]
 8011816:	402c      	ands	r4, r5
 8011818:	3b01      	subs	r3, #1
 801181a:	b2e4      	uxtb	r4, r4
 801181c:	2b0d      	cmp	r3, #13
 801181e:	d809      	bhi.n	8011834 <uxr_serialize_CREATE_Payload+0x44>
 8011820:	e8df f003 	tbb	[pc, r3]
 8011824:	23230a4c 	.word	0x23230a4c
 8011828:	0a0a0a0a 	.word	0x0a0a0a0a
 801182c:	12121208 	.word	0x12121208
 8011830:	3e45      	.short	0x3e45
 8011832:	2400      	movs	r4, #0
 8011834:	4620      	mov	r0, r4
 8011836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011838:	f106 0108 	add.w	r1, r6, #8
 801183c:	4638      	mov	r0, r7
 801183e:	f7ff fbe7 	bl	8011010 <uxr_serialize_DATAWRITER_Representation>
 8011842:	4004      	ands	r4, r0
 8011844:	4620      	mov	r0, r4
 8011846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011848:	7a31      	ldrb	r1, [r6, #8]
 801184a:	4638      	mov	r0, r7
 801184c:	f7fc f992 	bl	800db74 <ucdr_serialize_uint8_t>
 8011850:	2800      	cmp	r0, #0
 8011852:	d0ee      	beq.n	8011832 <uxr_serialize_CREATE_Payload+0x42>
 8011854:	7a33      	ldrb	r3, [r6, #8]
 8011856:	2b01      	cmp	r3, #1
 8011858:	d001      	beq.n	801185e <uxr_serialize_CREATE_Payload+0x6e>
 801185a:	2b02      	cmp	r3, #2
 801185c:	d1ea      	bne.n	8011834 <uxr_serialize_CREATE_Payload+0x44>
 801185e:	68f1      	ldr	r1, [r6, #12]
 8011860:	4638      	mov	r0, r7
 8011862:	f002 fa31 	bl	8013cc8 <ucdr_serialize_string>
 8011866:	4004      	ands	r4, r0
 8011868:	e7e4      	b.n	8011834 <uxr_serialize_CREATE_Payload+0x44>
 801186a:	7a31      	ldrb	r1, [r6, #8]
 801186c:	4638      	mov	r0, r7
 801186e:	f7fc f981 	bl	800db74 <ucdr_serialize_uint8_t>
 8011872:	4605      	mov	r5, r0
 8011874:	b158      	cbz	r0, 801188e <uxr_serialize_CREATE_Payload+0x9e>
 8011876:	7a33      	ldrb	r3, [r6, #8]
 8011878:	2b02      	cmp	r3, #2
 801187a:	d034      	beq.n	80118e6 <uxr_serialize_CREATE_Payload+0xf6>
 801187c:	2b03      	cmp	r3, #3
 801187e:	d106      	bne.n	801188e <uxr_serialize_CREATE_Payload+0x9e>
 8011880:	68f2      	ldr	r2, [r6, #12]
 8011882:	f106 0110 	add.w	r1, r6, #16
 8011886:	4638      	mov	r0, r7
 8011888:	f7fd fcf6 	bl	800f278 <ucdr_serialize_sequence_uint8_t>
 801188c:	4605      	mov	r5, r0
 801188e:	2202      	movs	r2, #2
 8011890:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8011894:	4638      	mov	r0, r7
 8011896:	f7fb ffcb 	bl	800d830 <ucdr_serialize_array_uint8_t>
 801189a:	4028      	ands	r0, r5
 801189c:	4004      	ands	r4, r0
 801189e:	e7c9      	b.n	8011834 <uxr_serialize_CREATE_Payload+0x44>
 80118a0:	f106 0108 	add.w	r1, r6, #8
 80118a4:	4638      	mov	r0, r7
 80118a6:	f7ff faad 	bl	8010e04 <uxr_serialize_CLIENT_Representation>
 80118aa:	4004      	ands	r4, r0
 80118ac:	e7c2      	b.n	8011834 <uxr_serialize_CREATE_Payload+0x44>
 80118ae:	f106 0108 	add.w	r1, r6, #8
 80118b2:	4638      	mov	r0, r7
 80118b4:	f7ff fb62 	bl	8010f7c <uxr_serialize_AGENT_Representation>
 80118b8:	4004      	ands	r4, r0
 80118ba:	e7bb      	b.n	8011834 <uxr_serialize_CREATE_Payload+0x44>
 80118bc:	7a31      	ldrb	r1, [r6, #8]
 80118be:	4638      	mov	r0, r7
 80118c0:	f7fc f958 	bl	800db74 <ucdr_serialize_uint8_t>
 80118c4:	4605      	mov	r5, r0
 80118c6:	b130      	cbz	r0, 80118d6 <uxr_serialize_CREATE_Payload+0xe6>
 80118c8:	7a33      	ldrb	r3, [r6, #8]
 80118ca:	2b02      	cmp	r3, #2
 80118cc:	d011      	beq.n	80118f2 <uxr_serialize_CREATE_Payload+0x102>
 80118ce:	2b03      	cmp	r3, #3
 80118d0:	d015      	beq.n	80118fe <uxr_serialize_CREATE_Payload+0x10e>
 80118d2:	2b01      	cmp	r3, #1
 80118d4:	d00d      	beq.n	80118f2 <uxr_serialize_CREATE_Payload+0x102>
 80118d6:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 80118da:	4638      	mov	r0, r7
 80118dc:	f7fc fe86 	bl	800e5ec <ucdr_serialize_int16_t>
 80118e0:	4028      	ands	r0, r5
 80118e2:	4004      	ands	r4, r0
 80118e4:	e7a6      	b.n	8011834 <uxr_serialize_CREATE_Payload+0x44>
 80118e6:	68f1      	ldr	r1, [r6, #12]
 80118e8:	4638      	mov	r0, r7
 80118ea:	f002 f9ed 	bl	8013cc8 <ucdr_serialize_string>
 80118ee:	4605      	mov	r5, r0
 80118f0:	e7cd      	b.n	801188e <uxr_serialize_CREATE_Payload+0x9e>
 80118f2:	68f1      	ldr	r1, [r6, #12]
 80118f4:	4638      	mov	r0, r7
 80118f6:	f002 f9e7 	bl	8013cc8 <ucdr_serialize_string>
 80118fa:	4605      	mov	r5, r0
 80118fc:	e7eb      	b.n	80118d6 <uxr_serialize_CREATE_Payload+0xe6>
 80118fe:	68f2      	ldr	r2, [r6, #12]
 8011900:	f106 0110 	add.w	r1, r6, #16
 8011904:	4638      	mov	r0, r7
 8011906:	f7fd fcb7 	bl	800f278 <ucdr_serialize_sequence_uint8_t>
 801190a:	4605      	mov	r5, r0
 801190c:	e7e3      	b.n	80118d6 <uxr_serialize_CREATE_Payload+0xe6>
 801190e:	bf00      	nop

08011910 <uxr_deserialize_GET_INFO_Payload>:
 8011910:	b570      	push	{r4, r5, r6, lr}
 8011912:	2202      	movs	r2, #2
 8011914:	4605      	mov	r5, r0
 8011916:	460e      	mov	r6, r1
 8011918:	f7fb ffee 	bl	800d8f8 <ucdr_deserialize_array_uint8_t>
 801191c:	2202      	movs	r2, #2
 801191e:	4604      	mov	r4, r0
 8011920:	4628      	mov	r0, r5
 8011922:	18b1      	adds	r1, r6, r2
 8011924:	f7fb ffe8 	bl	800d8f8 <ucdr_deserialize_array_uint8_t>
 8011928:	4603      	mov	r3, r0
 801192a:	1d31      	adds	r1, r6, #4
 801192c:	4628      	mov	r0, r5
 801192e:	401c      	ands	r4, r3
 8011930:	f7fc fc66 	bl	800e200 <ucdr_deserialize_uint32_t>
 8011934:	b2e4      	uxtb	r4, r4
 8011936:	4020      	ands	r0, r4
 8011938:	bd70      	pop	{r4, r5, r6, pc}
 801193a:	bf00      	nop

0801193c <uxr_serialize_DELETE_Payload>:
 801193c:	b570      	push	{r4, r5, r6, lr}
 801193e:	2202      	movs	r2, #2
 8011940:	4605      	mov	r5, r0
 8011942:	460e      	mov	r6, r1
 8011944:	f7fb ff74 	bl	800d830 <ucdr_serialize_array_uint8_t>
 8011948:	2202      	movs	r2, #2
 801194a:	4604      	mov	r4, r0
 801194c:	4628      	mov	r0, r5
 801194e:	18b1      	adds	r1, r6, r2
 8011950:	f7fb ff6e 	bl	800d830 <ucdr_serialize_array_uint8_t>
 8011954:	4020      	ands	r0, r4
 8011956:	b2c0      	uxtb	r0, r0
 8011958:	bd70      	pop	{r4, r5, r6, pc}
 801195a:	bf00      	nop

0801195c <uxr_deserialize_STATUS_AGENT_Payload>:
 801195c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011960:	460e      	mov	r6, r1
 8011962:	4605      	mov	r5, r0
 8011964:	f7fc f91c 	bl	800dba0 <ucdr_deserialize_uint8_t>
 8011968:	4604      	mov	r4, r0
 801196a:	1c71      	adds	r1, r6, #1
 801196c:	4628      	mov	r0, r5
 801196e:	f7fc f917 	bl	800dba0 <ucdr_deserialize_uint8_t>
 8011972:	2204      	movs	r2, #4
 8011974:	4681      	mov	r9, r0
 8011976:	4628      	mov	r0, r5
 8011978:	18b1      	adds	r1, r6, r2
 801197a:	f7fb ffbd 	bl	800d8f8 <ucdr_deserialize_array_uint8_t>
 801197e:	f106 0108 	add.w	r1, r6, #8
 8011982:	4680      	mov	r8, r0
 8011984:	2202      	movs	r2, #2
 8011986:	4628      	mov	r0, r5
 8011988:	f7fb ffb6 	bl	800d8f8 <ucdr_deserialize_array_uint8_t>
 801198c:	ea04 0309 	and.w	r3, r4, r9
 8011990:	4607      	mov	r7, r0
 8011992:	2202      	movs	r2, #2
 8011994:	b2db      	uxtb	r3, r3
 8011996:	f106 010a 	add.w	r1, r6, #10
 801199a:	4628      	mov	r0, r5
 801199c:	ea03 0408 	and.w	r4, r3, r8
 80119a0:	f7fb ffaa 	bl	800d8f8 <ucdr_deserialize_array_uint8_t>
 80119a4:	4603      	mov	r3, r0
 80119a6:	4628      	mov	r0, r5
 80119a8:	403c      	ands	r4, r7
 80119aa:	f106 010c 	add.w	r1, r6, #12
 80119ae:	461d      	mov	r5, r3
 80119b0:	f7fc f8c8 	bl	800db44 <ucdr_deserialize_bool>
 80119b4:	4025      	ands	r5, r4
 80119b6:	4028      	ands	r0, r5
 80119b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080119bc <uxr_deserialize_STATUS_Payload>:
 80119bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119c0:	2202      	movs	r2, #2
 80119c2:	4606      	mov	r6, r0
 80119c4:	460f      	mov	r7, r1
 80119c6:	f7fb ff97 	bl	800d8f8 <ucdr_deserialize_array_uint8_t>
 80119ca:	2202      	movs	r2, #2
 80119cc:	4605      	mov	r5, r0
 80119ce:	4630      	mov	r0, r6
 80119d0:	18b9      	adds	r1, r7, r2
 80119d2:	f7fb ff91 	bl	800d8f8 <ucdr_deserialize_array_uint8_t>
 80119d6:	4680      	mov	r8, r0
 80119d8:	1d39      	adds	r1, r7, #4
 80119da:	4630      	mov	r0, r6
 80119dc:	f7fc f8e0 	bl	800dba0 <ucdr_deserialize_uint8_t>
 80119e0:	ea05 0508 	and.w	r5, r5, r8
 80119e4:	4604      	mov	r4, r0
 80119e6:	1d79      	adds	r1, r7, #5
 80119e8:	4630      	mov	r0, r6
 80119ea:	402c      	ands	r4, r5
 80119ec:	f7fc f8d8 	bl	800dba0 <ucdr_deserialize_uint8_t>
 80119f0:	4020      	ands	r0, r4
 80119f2:	b2c0      	uxtb	r0, r0
 80119f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080119f8 <uxr_serialize_INFO_Payload>:
 80119f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119fc:	2202      	movs	r2, #2
 80119fe:	460c      	mov	r4, r1
 8011a00:	4605      	mov	r5, r0
 8011a02:	f7fb ff15 	bl	800d830 <ucdr_serialize_array_uint8_t>
 8011a06:	2202      	movs	r2, #2
 8011a08:	4680      	mov	r8, r0
 8011a0a:	4628      	mov	r0, r5
 8011a0c:	18a1      	adds	r1, r4, r2
 8011a0e:	f7fb ff0f 	bl	800d830 <ucdr_serialize_array_uint8_t>
 8011a12:	4607      	mov	r7, r0
 8011a14:	7921      	ldrb	r1, [r4, #4]
 8011a16:	4628      	mov	r0, r5
 8011a18:	f7fc f8ac 	bl	800db74 <ucdr_serialize_uint8_t>
 8011a1c:	ea08 0807 	and.w	r8, r8, r7
 8011a20:	4606      	mov	r6, r0
 8011a22:	7961      	ldrb	r1, [r4, #5]
 8011a24:	4628      	mov	r0, r5
 8011a26:	ea06 0608 	and.w	r6, r6, r8
 8011a2a:	f7fc f8a3 	bl	800db74 <ucdr_serialize_uint8_t>
 8011a2e:	7a21      	ldrb	r1, [r4, #8]
 8011a30:	4030      	ands	r0, r6
 8011a32:	b2c7      	uxtb	r7, r0
 8011a34:	4628      	mov	r0, r5
 8011a36:	f7fc f86f 	bl	800db18 <ucdr_serialize_bool>
 8011a3a:	7a23      	ldrb	r3, [r4, #8]
 8011a3c:	4606      	mov	r6, r0
 8011a3e:	b96b      	cbnz	r3, 8011a5c <uxr_serialize_INFO_Payload+0x64>
 8011a40:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8011a44:	4628      	mov	r0, r5
 8011a46:	f7fc f867 	bl	800db18 <ucdr_serialize_bool>
 8011a4a:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8011a4e:	4030      	ands	r0, r6
 8011a50:	b2c6      	uxtb	r6, r0
 8011a52:	b983      	cbnz	r3, 8011a76 <uxr_serialize_INFO_Payload+0x7e>
 8011a54:	ea06 0007 	and.w	r0, r6, r7
 8011a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a5c:	7b21      	ldrb	r1, [r4, #12]
 8011a5e:	4628      	mov	r0, r5
 8011a60:	f7fc f888 	bl	800db74 <ucdr_serialize_uint8_t>
 8011a64:	b188      	cbz	r0, 8011a8a <uxr_serialize_INFO_Payload+0x92>
 8011a66:	f104 010c 	add.w	r1, r4, #12
 8011a6a:	4628      	mov	r0, r5
 8011a6c:	f7ff faf8 	bl	8011060 <uxr_serialize_ObjectVariant.part.0>
 8011a70:	4030      	ands	r0, r6
 8011a72:	b2c6      	uxtb	r6, r0
 8011a74:	e7e4      	b.n	8011a40 <uxr_serialize_INFO_Payload+0x48>
 8011a76:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8011a7a:	4628      	mov	r0, r5
 8011a7c:	f7ff fdb8 	bl	80115f0 <uxr_serialize_ActivityInfoVariant>
 8011a80:	4006      	ands	r6, r0
 8011a82:	ea06 0007 	and.w	r0, r6, r7
 8011a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a8a:	4606      	mov	r6, r0
 8011a8c:	e7d8      	b.n	8011a40 <uxr_serialize_INFO_Payload+0x48>
 8011a8e:	bf00      	nop

08011a90 <uxr_serialize_READ_DATA_Payload>:
 8011a90:	b570      	push	{r4, r5, r6, lr}
 8011a92:	2202      	movs	r2, #2
 8011a94:	4605      	mov	r5, r0
 8011a96:	460e      	mov	r6, r1
 8011a98:	f7fb feca 	bl	800d830 <ucdr_serialize_array_uint8_t>
 8011a9c:	2202      	movs	r2, #2
 8011a9e:	4604      	mov	r4, r0
 8011aa0:	4628      	mov	r0, r5
 8011aa2:	18b1      	adds	r1, r6, r2
 8011aa4:	f7fb fec4 	bl	800d830 <ucdr_serialize_array_uint8_t>
 8011aa8:	4603      	mov	r3, r0
 8011aaa:	1d31      	adds	r1, r6, #4
 8011aac:	4628      	mov	r0, r5
 8011aae:	401c      	ands	r4, r3
 8011ab0:	f7ff fe5e 	bl	8011770 <uxr_serialize_ReadSpecification>
 8011ab4:	b2e4      	uxtb	r4, r4
 8011ab6:	4020      	ands	r0, r4
 8011ab8:	bd70      	pop	{r4, r5, r6, pc}
 8011aba:	bf00      	nop

08011abc <uxr_serialize_WRITE_DATA_Payload_Data>:
 8011abc:	b570      	push	{r4, r5, r6, lr}
 8011abe:	2202      	movs	r2, #2
 8011ac0:	4605      	mov	r5, r0
 8011ac2:	460e      	mov	r6, r1
 8011ac4:	f7fb feb4 	bl	800d830 <ucdr_serialize_array_uint8_t>
 8011ac8:	2202      	movs	r2, #2
 8011aca:	4604      	mov	r4, r0
 8011acc:	4628      	mov	r0, r5
 8011ace:	18b1      	adds	r1, r6, r2
 8011ad0:	f7fb feae 	bl	800d830 <ucdr_serialize_array_uint8_t>
 8011ad4:	4020      	ands	r0, r4
 8011ad6:	b2c0      	uxtb	r0, r0
 8011ad8:	bd70      	pop	{r4, r5, r6, pc}
 8011ada:	bf00      	nop

08011adc <uxr_serialize_ACKNACK_Payload>:
 8011adc:	b570      	push	{r4, r5, r6, lr}
 8011ade:	460c      	mov	r4, r1
 8011ae0:	4605      	mov	r5, r0
 8011ae2:	460e      	mov	r6, r1
 8011ae4:	f834 1b02 	ldrh.w	r1, [r4], #2
 8011ae8:	f7fc f870 	bl	800dbcc <ucdr_serialize_uint16_t>
 8011aec:	2202      	movs	r2, #2
 8011aee:	4621      	mov	r1, r4
 8011af0:	4604      	mov	r4, r0
 8011af2:	4628      	mov	r0, r5
 8011af4:	f7fb fe9c 	bl	800d830 <ucdr_serialize_array_uint8_t>
 8011af8:	4603      	mov	r3, r0
 8011afa:	7931      	ldrb	r1, [r6, #4]
 8011afc:	4628      	mov	r0, r5
 8011afe:	401c      	ands	r4, r3
 8011b00:	f7fc f838 	bl	800db74 <ucdr_serialize_uint8_t>
 8011b04:	b2e4      	uxtb	r4, r4
 8011b06:	4020      	ands	r0, r4
 8011b08:	bd70      	pop	{r4, r5, r6, pc}
 8011b0a:	bf00      	nop

08011b0c <uxr_deserialize_ACKNACK_Payload>:
 8011b0c:	b570      	push	{r4, r5, r6, lr}
 8011b0e:	460e      	mov	r6, r1
 8011b10:	4605      	mov	r5, r0
 8011b12:	f7fc f95b 	bl	800ddcc <ucdr_deserialize_uint16_t>
 8011b16:	2202      	movs	r2, #2
 8011b18:	4604      	mov	r4, r0
 8011b1a:	4628      	mov	r0, r5
 8011b1c:	18b1      	adds	r1, r6, r2
 8011b1e:	f7fb feeb 	bl	800d8f8 <ucdr_deserialize_array_uint8_t>
 8011b22:	4603      	mov	r3, r0
 8011b24:	1d31      	adds	r1, r6, #4
 8011b26:	4628      	mov	r0, r5
 8011b28:	401c      	ands	r4, r3
 8011b2a:	f7fc f839 	bl	800dba0 <ucdr_deserialize_uint8_t>
 8011b2e:	b2e4      	uxtb	r4, r4
 8011b30:	4020      	ands	r0, r4
 8011b32:	bd70      	pop	{r4, r5, r6, pc}

08011b34 <uxr_serialize_HEARTBEAT_Payload>:
 8011b34:	b570      	push	{r4, r5, r6, lr}
 8011b36:	460d      	mov	r5, r1
 8011b38:	4606      	mov	r6, r0
 8011b3a:	8809      	ldrh	r1, [r1, #0]
 8011b3c:	f7fc f846 	bl	800dbcc <ucdr_serialize_uint16_t>
 8011b40:	8869      	ldrh	r1, [r5, #2]
 8011b42:	4604      	mov	r4, r0
 8011b44:	4630      	mov	r0, r6
 8011b46:	f7fc f841 	bl	800dbcc <ucdr_serialize_uint16_t>
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	7929      	ldrb	r1, [r5, #4]
 8011b4e:	4630      	mov	r0, r6
 8011b50:	401c      	ands	r4, r3
 8011b52:	f7fc f80f 	bl	800db74 <ucdr_serialize_uint8_t>
 8011b56:	b2e4      	uxtb	r4, r4
 8011b58:	4020      	ands	r0, r4
 8011b5a:	bd70      	pop	{r4, r5, r6, pc}

08011b5c <uxr_deserialize_HEARTBEAT_Payload>:
 8011b5c:	b570      	push	{r4, r5, r6, lr}
 8011b5e:	460e      	mov	r6, r1
 8011b60:	4605      	mov	r5, r0
 8011b62:	f7fc f933 	bl	800ddcc <ucdr_deserialize_uint16_t>
 8011b66:	4604      	mov	r4, r0
 8011b68:	1cb1      	adds	r1, r6, #2
 8011b6a:	4628      	mov	r0, r5
 8011b6c:	f7fc f92e 	bl	800ddcc <ucdr_deserialize_uint16_t>
 8011b70:	4603      	mov	r3, r0
 8011b72:	1d31      	adds	r1, r6, #4
 8011b74:	4628      	mov	r0, r5
 8011b76:	401c      	ands	r4, r3
 8011b78:	f7fc f812 	bl	800dba0 <ucdr_deserialize_uint8_t>
 8011b7c:	b2e4      	uxtb	r4, r4
 8011b7e:	4020      	ands	r0, r4
 8011b80:	bd70      	pop	{r4, r5, r6, pc}
 8011b82:	bf00      	nop

08011b84 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8011b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b88:	460e      	mov	r6, r1
 8011b8a:	4605      	mov	r5, r0
 8011b8c:	f7fc feba 	bl	800e904 <ucdr_deserialize_int32_t>
 8011b90:	4607      	mov	r7, r0
 8011b92:	1d31      	adds	r1, r6, #4
 8011b94:	4628      	mov	r0, r5
 8011b96:	f7fc fb33 	bl	800e200 <ucdr_deserialize_uint32_t>
 8011b9a:	4680      	mov	r8, r0
 8011b9c:	f106 0108 	add.w	r1, r6, #8
 8011ba0:	4628      	mov	r0, r5
 8011ba2:	f7fc feaf 	bl	800e904 <ucdr_deserialize_int32_t>
 8011ba6:	ea07 0708 	and.w	r7, r7, r8
 8011baa:	4604      	mov	r4, r0
 8011bac:	f106 010c 	add.w	r1, r6, #12
 8011bb0:	4628      	mov	r0, r5
 8011bb2:	403c      	ands	r4, r7
 8011bb4:	f7fc fb24 	bl	800e200 <ucdr_deserialize_uint32_t>
 8011bb8:	f106 0110 	add.w	r1, r6, #16
 8011bbc:	4004      	ands	r4, r0
 8011bbe:	4628      	mov	r0, r5
 8011bc0:	f7fc fea0 	bl	800e904 <ucdr_deserialize_int32_t>
 8011bc4:	4603      	mov	r3, r0
 8011bc6:	b2e4      	uxtb	r4, r4
 8011bc8:	4628      	mov	r0, r5
 8011bca:	461d      	mov	r5, r3
 8011bcc:	f106 0114 	add.w	r1, r6, #20
 8011bd0:	f7fc fb16 	bl	800e200 <ucdr_deserialize_uint32_t>
 8011bd4:	402c      	ands	r4, r5
 8011bd6:	4020      	ands	r0, r4
 8011bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011bdc <uxr_deserialize_SampleIdentity>:
 8011bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011be0:	4604      	mov	r4, r0
 8011be2:	460d      	mov	r5, r1
 8011be4:	220c      	movs	r2, #12
 8011be6:	f7fb fe87 	bl	800d8f8 <ucdr_deserialize_array_uint8_t>
 8011bea:	2203      	movs	r2, #3
 8011bec:	f105 010c 	add.w	r1, r5, #12
 8011bf0:	4607      	mov	r7, r0
 8011bf2:	4620      	mov	r0, r4
 8011bf4:	f7fb fe80 	bl	800d8f8 <ucdr_deserialize_array_uint8_t>
 8011bf8:	f105 010f 	add.w	r1, r5, #15
 8011bfc:	4680      	mov	r8, r0
 8011bfe:	4620      	mov	r0, r4
 8011c00:	f7fb ffce 	bl	800dba0 <ucdr_deserialize_uint8_t>
 8011c04:	f105 0110 	add.w	r1, r5, #16
 8011c08:	4606      	mov	r6, r0
 8011c0a:	4620      	mov	r0, r4
 8011c0c:	f7fc fe7a 	bl	800e904 <ucdr_deserialize_int32_t>
 8011c10:	ea07 0708 	and.w	r7, r7, r8
 8011c14:	4603      	mov	r3, r0
 8011c16:	4620      	mov	r0, r4
 8011c18:	403e      	ands	r6, r7
 8011c1a:	f105 0114 	add.w	r1, r5, #20
 8011c1e:	461c      	mov	r4, r3
 8011c20:	f7fc faee 	bl	800e200 <ucdr_deserialize_uint32_t>
 8011c24:	4034      	ands	r4, r6
 8011c26:	4020      	ands	r0, r4
 8011c28:	b2c0      	uxtb	r0, r0
 8011c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c2e:	bf00      	nop

08011c30 <rcl_convert_rmw_ret_to_rcl_ret>:
 8011c30:	280b      	cmp	r0, #11
 8011c32:	dc0d      	bgt.n	8011c50 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8011c34:	2800      	cmp	r0, #0
 8011c36:	db09      	blt.n	8011c4c <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8011c38:	280b      	cmp	r0, #11
 8011c3a:	d807      	bhi.n	8011c4c <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8011c3c:	e8df f000 	tbb	[pc, r0]
 8011c40:	07060607 	.word	0x07060607
 8011c44:	06060606 	.word	0x06060606
 8011c48:	07070606 	.word	0x07070606
 8011c4c:	2001      	movs	r0, #1
 8011c4e:	4770      	bx	lr
 8011c50:	28cb      	cmp	r0, #203	@ 0xcb
 8011c52:	bf18      	it	ne
 8011c54:	2001      	movne	r0, #1
 8011c56:	4770      	bx	lr

08011c58 <rcl_get_zero_initialized_context>:
 8011c58:	4a03      	ldr	r2, [pc, #12]	@ (8011c68 <rcl_get_zero_initialized_context+0x10>)
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011c60:	e883 0003 	stmia.w	r3, {r0, r1}
 8011c64:	4618      	mov	r0, r3
 8011c66:	4770      	bx	lr
 8011c68:	08017f84 	.word	0x08017f84

08011c6c <rcl_context_is_valid>:
 8011c6c:	b118      	cbz	r0, 8011c76 <rcl_context_is_valid+0xa>
 8011c6e:	6840      	ldr	r0, [r0, #4]
 8011c70:	3800      	subs	r0, #0
 8011c72:	bf18      	it	ne
 8011c74:	2001      	movne	r0, #1
 8011c76:	4770      	bx	lr

08011c78 <__cleanup_context>:
 8011c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c7c:	4606      	mov	r6, r0
 8011c7e:	2300      	movs	r3, #0
 8011c80:	6800      	ldr	r0, [r0, #0]
 8011c82:	6073      	str	r3, [r6, #4]
 8011c84:	2800      	cmp	r0, #0
 8011c86:	d049      	beq.n	8011d1c <__cleanup_context+0xa4>
 8011c88:	6947      	ldr	r7, [r0, #20]
 8011c8a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8011c8e:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8011c92:	b137      	cbz	r7, 8011ca2 <__cleanup_context+0x2a>
 8011c94:	3014      	adds	r0, #20
 8011c96:	f000 f9a7 	bl	8011fe8 <rcl_init_options_fini>
 8011c9a:	4607      	mov	r7, r0
 8011c9c:	2800      	cmp	r0, #0
 8011c9e:	d144      	bne.n	8011d2a <__cleanup_context+0xb2>
 8011ca0:	6830      	ldr	r0, [r6, #0]
 8011ca2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011ca4:	b143      	cbz	r3, 8011cb8 <__cleanup_context+0x40>
 8011ca6:	3028      	adds	r0, #40	@ 0x28
 8011ca8:	f001 fcb0 	bl	801360c <rmw_context_fini>
 8011cac:	b118      	cbz	r0, 8011cb6 <__cleanup_context+0x3e>
 8011cae:	2f00      	cmp	r7, #0
 8011cb0:	d03e      	beq.n	8011d30 <__cleanup_context+0xb8>
 8011cb2:	f7fa fc79 	bl	800c5a8 <rcutils_reset_error>
 8011cb6:	6830      	ldr	r0, [r6, #0]
 8011cb8:	6a03      	ldr	r3, [r0, #32]
 8011cba:	b1db      	cbz	r3, 8011cf4 <__cleanup_context+0x7c>
 8011cbc:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8011cc0:	2a01      	cmp	r2, #1
 8011cc2:	f17c 0100 	sbcs.w	r1, ip, #0
 8011cc6:	db11      	blt.n	8011cec <__cleanup_context+0x74>
 8011cc8:	2400      	movs	r4, #0
 8011cca:	4625      	mov	r5, r4
 8011ccc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011cd0:	4649      	mov	r1, r9
 8011cd2:	b1b8      	cbz	r0, 8011d04 <__cleanup_context+0x8c>
 8011cd4:	47c0      	blx	r8
 8011cd6:	6833      	ldr	r3, [r6, #0]
 8011cd8:	3401      	adds	r4, #1
 8011cda:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8011cde:	f145 0500 	adc.w	r5, r5, #0
 8011ce2:	6a1b      	ldr	r3, [r3, #32]
 8011ce4:	4294      	cmp	r4, r2
 8011ce6:	eb75 010c 	sbcs.w	r1, r5, ip
 8011cea:	dbef      	blt.n	8011ccc <__cleanup_context+0x54>
 8011cec:	4618      	mov	r0, r3
 8011cee:	4649      	mov	r1, r9
 8011cf0:	47c0      	blx	r8
 8011cf2:	6830      	ldr	r0, [r6, #0]
 8011cf4:	4649      	mov	r1, r9
 8011cf6:	47c0      	blx	r8
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	4638      	mov	r0, r7
 8011cfc:	e9c6 3300 	strd	r3, r3, [r6]
 8011d00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d04:	3401      	adds	r4, #1
 8011d06:	f145 0500 	adc.w	r5, r5, #0
 8011d0a:	4294      	cmp	r4, r2
 8011d0c:	eb75 010c 	sbcs.w	r1, r5, ip
 8011d10:	dbdc      	blt.n	8011ccc <__cleanup_context+0x54>
 8011d12:	4618      	mov	r0, r3
 8011d14:	4649      	mov	r1, r9
 8011d16:	47c0      	blx	r8
 8011d18:	6830      	ldr	r0, [r6, #0]
 8011d1a:	e7eb      	b.n	8011cf4 <__cleanup_context+0x7c>
 8011d1c:	4607      	mov	r7, r0
 8011d1e:	2300      	movs	r3, #0
 8011d20:	4638      	mov	r0, r7
 8011d22:	e9c6 3300 	strd	r3, r3, [r6]
 8011d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d2a:	f7fa fc3d 	bl	800c5a8 <rcutils_reset_error>
 8011d2e:	e7b7      	b.n	8011ca0 <__cleanup_context+0x28>
 8011d30:	f7ff ff7e 	bl	8011c30 <rcl_convert_rmw_ret_to_rcl_ret>
 8011d34:	4607      	mov	r7, r0
 8011d36:	e7bc      	b.n	8011cb2 <__cleanup_context+0x3a>

08011d38 <rcl_init>:
 8011d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d3c:	1e05      	subs	r5, r0, #0
 8011d3e:	b09c      	sub	sp, #112	@ 0x70
 8011d40:	460e      	mov	r6, r1
 8011d42:	4690      	mov	r8, r2
 8011d44:	461f      	mov	r7, r3
 8011d46:	f340 809c 	ble.w	8011e82 <rcl_init+0x14a>
 8011d4a:	2900      	cmp	r1, #0
 8011d4c:	f000 809c 	beq.w	8011e88 <rcl_init+0x150>
 8011d50:	f1a1 0e04 	sub.w	lr, r1, #4
 8011d54:	f04f 0c00 	mov.w	ip, #0
 8011d58:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8011d5c:	f10c 0c01 	add.w	ip, ip, #1
 8011d60:	2c00      	cmp	r4, #0
 8011d62:	f000 8091 	beq.w	8011e88 <rcl_init+0x150>
 8011d66:	4565      	cmp	r5, ip
 8011d68:	d1f6      	bne.n	8011d58 <rcl_init+0x20>
 8011d6a:	f1b8 0f00 	cmp.w	r8, #0
 8011d6e:	f000 808b 	beq.w	8011e88 <rcl_init+0x150>
 8011d72:	f8d8 4000 	ldr.w	r4, [r8]
 8011d76:	2c00      	cmp	r4, #0
 8011d78:	f000 8086 	beq.w	8011e88 <rcl_init+0x150>
 8011d7c:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 8011d80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011d82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011d86:	6823      	ldr	r3, [r4, #0]
 8011d88:	a817      	add	r0, sp, #92	@ 0x5c
 8011d8a:	f8cc 3000 	str.w	r3, [ip]
 8011d8e:	f7fa fbe7 	bl	800c560 <rcutils_allocator_is_valid>
 8011d92:	f080 0001 	eor.w	r0, r0, #1
 8011d96:	b2c0      	uxtb	r0, r0
 8011d98:	2800      	cmp	r0, #0
 8011d9a:	d175      	bne.n	8011e88 <rcl_init+0x150>
 8011d9c:	2f00      	cmp	r7, #0
 8011d9e:	d073      	beq.n	8011e88 <rcl_init+0x150>
 8011da0:	683b      	ldr	r3, [r7, #0]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d175      	bne.n	8011e92 <rcl_init+0x15a>
 8011da6:	2178      	movs	r1, #120	@ 0x78
 8011da8:	2001      	movs	r0, #1
 8011daa:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 8011dae:	4798      	blx	r3
 8011db0:	4604      	mov	r4, r0
 8011db2:	6038      	str	r0, [r7, #0]
 8011db4:	2800      	cmp	r0, #0
 8011db6:	f000 80a0 	beq.w	8011efa <rcl_init+0x1c2>
 8011dba:	a802      	add	r0, sp, #8
 8011dbc:	f001 f830 	bl	8012e20 <rmw_get_zero_initialized_context>
 8011dc0:	a902      	add	r1, sp, #8
 8011dc2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8011dc6:	2250      	movs	r2, #80	@ 0x50
 8011dc8:	f004 fd93 	bl	80168f2 <memcpy>
 8011dcc:	ac17      	add	r4, sp, #92	@ 0x5c
 8011dce:	f8d7 e000 	ldr.w	lr, [r7]
 8011dd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011dd4:	46f4      	mov	ip, lr
 8011dd6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011dda:	6823      	ldr	r3, [r4, #0]
 8011ddc:	f10e 0114 	add.w	r1, lr, #20
 8011de0:	4640      	mov	r0, r8
 8011de2:	f8cc 3000 	str.w	r3, [ip]
 8011de6:	f000 f929 	bl	801203c <rcl_init_options_copy>
 8011dea:	4604      	mov	r4, r0
 8011dec:	2800      	cmp	r0, #0
 8011dee:	d144      	bne.n	8011e7a <rcl_init+0x142>
 8011df0:	f8d7 9000 	ldr.w	r9, [r7]
 8011df4:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8011df8:	f8c9 0020 	str.w	r0, [r9, #32]
 8011dfc:	f8c9 5018 	str.w	r5, [r9, #24]
 8011e00:	f8c9 801c 	str.w	r8, [r9, #28]
 8011e04:	2d00      	cmp	r5, #0
 8011e06:	d04b      	beq.n	8011ea0 <rcl_init+0x168>
 8011e08:	2e00      	cmp	r6, #0
 8011e0a:	d049      	beq.n	8011ea0 <rcl_init+0x168>
 8011e0c:	2104      	movs	r1, #4
 8011e0e:	4628      	mov	r0, r5
 8011e10:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 8011e14:	4798      	blx	r3
 8011e16:	f8c9 0020 	str.w	r0, [r9, #32]
 8011e1a:	f8d7 9000 	ldr.w	r9, [r7]
 8011e1e:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8011e22:	46ca      	mov	sl, r9
 8011e24:	b343      	cbz	r3, 8011e78 <rcl_init+0x140>
 8011e26:	2d01      	cmp	r5, #1
 8011e28:	f178 0300 	sbcs.w	r3, r8, #0
 8011e2c:	db38      	blt.n	8011ea0 <rcl_init+0x168>
 8011e2e:	2400      	movs	r4, #0
 8011e30:	3e04      	subs	r6, #4
 8011e32:	46a1      	mov	r9, r4
 8011e34:	e00b      	b.n	8011e4e <rcl_init+0x116>
 8011e36:	6831      	ldr	r1, [r6, #0]
 8011e38:	f004 fd5b 	bl	80168f2 <memcpy>
 8011e3c:	3401      	adds	r4, #1
 8011e3e:	f149 0900 	adc.w	r9, r9, #0
 8011e42:	45c8      	cmp	r8, r9
 8011e44:	bf08      	it	eq
 8011e46:	42a5      	cmpeq	r5, r4
 8011e48:	d028      	beq.n	8011e9c <rcl_init+0x164>
 8011e4a:	f8d7 a000 	ldr.w	sl, [r7]
 8011e4e:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8011e52:	f7ee f9ff 	bl	8000254 <strlen>
 8011e56:	1c42      	adds	r2, r0, #1
 8011e58:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011e5a:	4610      	mov	r0, r2
 8011e5c:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8011e5e:	f8da a020 	ldr.w	sl, [sl, #32]
 8011e62:	9201      	str	r2, [sp, #4]
 8011e64:	4798      	blx	r3
 8011e66:	683b      	ldr	r3, [r7, #0]
 8011e68:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8011e6c:	6a1b      	ldr	r3, [r3, #32]
 8011e6e:	9a01      	ldr	r2, [sp, #4]
 8011e70:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011e74:	2800      	cmp	r0, #0
 8011e76:	d1de      	bne.n	8011e36 <rcl_init+0xfe>
 8011e78:	240a      	movs	r4, #10
 8011e7a:	4638      	mov	r0, r7
 8011e7c:	f7ff fefc 	bl	8011c78 <__cleanup_context>
 8011e80:	e003      	b.n	8011e8a <rcl_init+0x152>
 8011e82:	2900      	cmp	r1, #0
 8011e84:	f43f af71 	beq.w	8011d6a <rcl_init+0x32>
 8011e88:	240b      	movs	r4, #11
 8011e8a:	4620      	mov	r0, r4
 8011e8c:	b01c      	add	sp, #112	@ 0x70
 8011e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e92:	2464      	movs	r4, #100	@ 0x64
 8011e94:	4620      	mov	r0, r4
 8011e96:	b01c      	add	sp, #112	@ 0x70
 8011e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e9c:	f8d7 9000 	ldr.w	r9, [r7]
 8011ea0:	491c      	ldr	r1, [pc, #112]	@ (8011f14 <rcl_init+0x1dc>)
 8011ea2:	680b      	ldr	r3, [r1, #0]
 8011ea4:	3301      	adds	r3, #1
 8011ea6:	d023      	beq.n	8011ef0 <rcl_init+0x1b8>
 8011ea8:	461a      	mov	r2, r3
 8011eaa:	2400      	movs	r4, #0
 8011eac:	600b      	str	r3, [r1, #0]
 8011eae:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8011eb2:	607b      	str	r3, [r7, #4]
 8011eb4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8011eb6:	6182      	str	r2, [r0, #24]
 8011eb8:	3301      	adds	r3, #1
 8011eba:	61c4      	str	r4, [r0, #28]
 8011ebc:	d01f      	beq.n	8011efe <rcl_init+0x1c6>
 8011ebe:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8011ec2:	b94b      	cbnz	r3, 8011ed8 <rcl_init+0x1a0>
 8011ec4:	3030      	adds	r0, #48	@ 0x30
 8011ec6:	f000 f927 	bl	8012118 <rcl_get_localhost_only>
 8011eca:	4604      	mov	r4, r0
 8011ecc:	2800      	cmp	r0, #0
 8011ece:	d1d4      	bne.n	8011e7a <rcl_init+0x142>
 8011ed0:	f8d7 9000 	ldr.w	r9, [r7]
 8011ed4:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8011ed8:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 8011edc:	3018      	adds	r0, #24
 8011ede:	f001 fa5f 	bl	80133a0 <rmw_init>
 8011ee2:	4604      	mov	r4, r0
 8011ee4:	2800      	cmp	r0, #0
 8011ee6:	d0d0      	beq.n	8011e8a <rcl_init+0x152>
 8011ee8:	f7ff fea2 	bl	8011c30 <rcl_convert_rmw_ret_to_rcl_ret>
 8011eec:	4604      	mov	r4, r0
 8011eee:	e7c4      	b.n	8011e7a <rcl_init+0x142>
 8011ef0:	2201      	movs	r2, #1
 8011ef2:	461c      	mov	r4, r3
 8011ef4:	600a      	str	r2, [r1, #0]
 8011ef6:	4613      	mov	r3, r2
 8011ef8:	e7d9      	b.n	8011eae <rcl_init+0x176>
 8011efa:	240a      	movs	r4, #10
 8011efc:	e7c5      	b.n	8011e8a <rcl_init+0x152>
 8011efe:	3024      	adds	r0, #36	@ 0x24
 8011f00:	f003 fa94 	bl	801542c <rcl_get_default_domain_id>
 8011f04:	4604      	mov	r4, r0
 8011f06:	2800      	cmp	r0, #0
 8011f08:	d1b7      	bne.n	8011e7a <rcl_init+0x142>
 8011f0a:	f8d7 9000 	ldr.w	r9, [r7]
 8011f0e:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8011f12:	e7d4      	b.n	8011ebe <rcl_init+0x186>
 8011f14:	2000ea24 	.word	0x2000ea24

08011f18 <rcl_get_zero_initialized_init_options>:
 8011f18:	2000      	movs	r0, #0
 8011f1a:	4770      	bx	lr

08011f1c <rcl_init_options_init>:
 8011f1c:	b084      	sub	sp, #16
 8011f1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f20:	b097      	sub	sp, #92	@ 0x5c
 8011f22:	ae1d      	add	r6, sp, #116	@ 0x74
 8011f24:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8011f28:	2800      	cmp	r0, #0
 8011f2a:	d058      	beq.n	8011fde <rcl_init_options_init+0xc2>
 8011f2c:	6803      	ldr	r3, [r0, #0]
 8011f2e:	4605      	mov	r5, r0
 8011f30:	b133      	cbz	r3, 8011f40 <rcl_init_options_init+0x24>
 8011f32:	2464      	movs	r4, #100	@ 0x64
 8011f34:	4620      	mov	r0, r4
 8011f36:	b017      	add	sp, #92	@ 0x5c
 8011f38:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011f3c:	b004      	add	sp, #16
 8011f3e:	4770      	bx	lr
 8011f40:	4630      	mov	r0, r6
 8011f42:	f7fa fb0d 	bl	800c560 <rcutils_allocator_is_valid>
 8011f46:	2800      	cmp	r0, #0
 8011f48:	d049      	beq.n	8011fde <rcl_init_options_init+0xc2>
 8011f4a:	46b4      	mov	ip, r6
 8011f4c:	ac11      	add	r4, sp, #68	@ 0x44
 8011f4e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011f52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011f54:	f8dc 3000 	ldr.w	r3, [ip]
 8011f58:	2050      	movs	r0, #80	@ 0x50
 8011f5a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8011f5c:	6023      	str	r3, [r4, #0]
 8011f5e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011f60:	4798      	blx	r3
 8011f62:	4604      	mov	r4, r0
 8011f64:	6028      	str	r0, [r5, #0]
 8011f66:	2800      	cmp	r0, #0
 8011f68:	d03b      	beq.n	8011fe2 <rcl_init_options_init+0xc6>
 8011f6a:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8011f6e:	4686      	mov	lr, r0
 8011f70:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011f74:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011f78:	f8dc 3000 	ldr.w	r3, [ip]
 8011f7c:	a802      	add	r0, sp, #8
 8011f7e:	f8ce 3000 	str.w	r3, [lr]
 8011f82:	f000 ff61 	bl	8012e48 <rmw_get_zero_initialized_init_options>
 8011f86:	f10d 0e08 	add.w	lr, sp, #8
 8011f8a:	f104 0c18 	add.w	ip, r4, #24
 8011f8e:	682f      	ldr	r7, [r5, #0]
 8011f90:	ac20      	add	r4, sp, #128	@ 0x80
 8011f92:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011f96:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011f9a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011f9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011fa2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011fa6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011faa:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011fae:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011fb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8011fb6:	e88d 0003 	stmia.w	sp, {r0, r1}
 8011fba:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8011fbe:	f107 0018 	add.w	r0, r7, #24
 8011fc2:	f001 f8cd 	bl	8013160 <rmw_init_options_init>
 8011fc6:	4604      	mov	r4, r0
 8011fc8:	2800      	cmp	r0, #0
 8011fca:	d0b3      	beq.n	8011f34 <rcl_init_options_init+0x18>
 8011fcc:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8011fce:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8011fd0:	6828      	ldr	r0, [r5, #0]
 8011fd2:	4798      	blx	r3
 8011fd4:	4620      	mov	r0, r4
 8011fd6:	f7ff fe2b 	bl	8011c30 <rcl_convert_rmw_ret_to_rcl_ret>
 8011fda:	4604      	mov	r4, r0
 8011fdc:	e7aa      	b.n	8011f34 <rcl_init_options_init+0x18>
 8011fde:	240b      	movs	r4, #11
 8011fe0:	e7a8      	b.n	8011f34 <rcl_init_options_init+0x18>
 8011fe2:	240a      	movs	r4, #10
 8011fe4:	e7a6      	b.n	8011f34 <rcl_init_options_init+0x18>
 8011fe6:	bf00      	nop

08011fe8 <rcl_init_options_fini>:
 8011fe8:	b530      	push	{r4, r5, lr}
 8011fea:	b087      	sub	sp, #28
 8011fec:	b1f0      	cbz	r0, 801202c <rcl_init_options_fini+0x44>
 8011fee:	6803      	ldr	r3, [r0, #0]
 8011ff0:	4604      	mov	r4, r0
 8011ff2:	b1db      	cbz	r3, 801202c <rcl_init_options_fini+0x44>
 8011ff4:	469c      	mov	ip, r3
 8011ff6:	f10d 0e04 	add.w	lr, sp, #4
 8011ffa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011ffe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012002:	f8dc 3000 	ldr.w	r3, [ip]
 8012006:	a801      	add	r0, sp, #4
 8012008:	f8ce 3000 	str.w	r3, [lr]
 801200c:	f7fa faa8 	bl	800c560 <rcutils_allocator_is_valid>
 8012010:	b160      	cbz	r0, 801202c <rcl_init_options_fini+0x44>
 8012012:	6820      	ldr	r0, [r4, #0]
 8012014:	3018      	adds	r0, #24
 8012016:	f001 f97b 	bl	8013310 <rmw_init_options_fini>
 801201a:	4605      	mov	r5, r0
 801201c:	b950      	cbnz	r0, 8012034 <rcl_init_options_fini+0x4c>
 801201e:	6820      	ldr	r0, [r4, #0]
 8012020:	9b02      	ldr	r3, [sp, #8]
 8012022:	9905      	ldr	r1, [sp, #20]
 8012024:	4798      	blx	r3
 8012026:	4628      	mov	r0, r5
 8012028:	b007      	add	sp, #28
 801202a:	bd30      	pop	{r4, r5, pc}
 801202c:	250b      	movs	r5, #11
 801202e:	4628      	mov	r0, r5
 8012030:	b007      	add	sp, #28
 8012032:	bd30      	pop	{r4, r5, pc}
 8012034:	f7ff fdfc 	bl	8011c30 <rcl_convert_rmw_ret_to_rcl_ret>
 8012038:	4605      	mov	r5, r0
 801203a:	e7f8      	b.n	801202e <rcl_init_options_fini+0x46>

0801203c <rcl_init_options_copy>:
 801203c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012040:	b094      	sub	sp, #80	@ 0x50
 8012042:	2800      	cmp	r0, #0
 8012044:	d05b      	beq.n	80120fe <rcl_init_options_copy+0xc2>
 8012046:	4604      	mov	r4, r0
 8012048:	6800      	ldr	r0, [r0, #0]
 801204a:	2800      	cmp	r0, #0
 801204c:	d057      	beq.n	80120fe <rcl_init_options_copy+0xc2>
 801204e:	460e      	mov	r6, r1
 8012050:	f7fa fa86 	bl	800c560 <rcutils_allocator_is_valid>
 8012054:	2e00      	cmp	r6, #0
 8012056:	d052      	beq.n	80120fe <rcl_init_options_copy+0xc2>
 8012058:	f080 0001 	eor.w	r0, r0, #1
 801205c:	b2c0      	uxtb	r0, r0
 801205e:	2800      	cmp	r0, #0
 8012060:	d14d      	bne.n	80120fe <rcl_init_options_copy+0xc2>
 8012062:	6833      	ldr	r3, [r6, #0]
 8012064:	b123      	cbz	r3, 8012070 <rcl_init_options_copy+0x34>
 8012066:	2464      	movs	r4, #100	@ 0x64
 8012068:	4620      	mov	r0, r4
 801206a:	b014      	add	sp, #80	@ 0x50
 801206c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012070:	6827      	ldr	r7, [r4, #0]
 8012072:	ad0f      	add	r5, sp, #60	@ 0x3c
 8012074:	46bc      	mov	ip, r7
 8012076:	f8d7 8000 	ldr.w	r8, [r7]
 801207a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801207e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012080:	f8dc 3000 	ldr.w	r3, [ip]
 8012084:	2050      	movs	r0, #80	@ 0x50
 8012086:	4619      	mov	r1, r3
 8012088:	602b      	str	r3, [r5, #0]
 801208a:	47c0      	blx	r8
 801208c:	4605      	mov	r5, r0
 801208e:	6030      	str	r0, [r6, #0]
 8012090:	b3d0      	cbz	r0, 8012108 <rcl_init_options_copy+0xcc>
 8012092:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8012096:	4686      	mov	lr, r0
 8012098:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801209c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80120a0:	f8dc 3000 	ldr.w	r3, [ip]
 80120a4:	4668      	mov	r0, sp
 80120a6:	f8ce 3000 	str.w	r3, [lr]
 80120aa:	f000 fecd 	bl	8012e48 <rmw_get_zero_initialized_init_options>
 80120ae:	46ee      	mov	lr, sp
 80120b0:	f105 0c18 	add.w	ip, r5, #24
 80120b4:	6824      	ldr	r4, [r4, #0]
 80120b6:	6835      	ldr	r5, [r6, #0]
 80120b8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80120bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80120c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80120c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80120c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80120cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80120d0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80120d4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80120d8:	f104 0018 	add.w	r0, r4, #24
 80120dc:	f105 0118 	add.w	r1, r5, #24
 80120e0:	f001 f8a0 	bl	8013224 <rmw_init_options_copy>
 80120e4:	4604      	mov	r4, r0
 80120e6:	2800      	cmp	r0, #0
 80120e8:	d0be      	beq.n	8012068 <rcl_init_options_copy+0x2c>
 80120ea:	f7fa fa47 	bl	800c57c <rcutils_get_error_string>
 80120ee:	f7fa fa5b 	bl	800c5a8 <rcutils_reset_error>
 80120f2:	4630      	mov	r0, r6
 80120f4:	f7ff ff78 	bl	8011fe8 <rcl_init_options_fini>
 80120f8:	b140      	cbz	r0, 801210c <rcl_init_options_copy+0xd0>
 80120fa:	4604      	mov	r4, r0
 80120fc:	e7b4      	b.n	8012068 <rcl_init_options_copy+0x2c>
 80120fe:	240b      	movs	r4, #11
 8012100:	4620      	mov	r0, r4
 8012102:	b014      	add	sp, #80	@ 0x50
 8012104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012108:	240a      	movs	r4, #10
 801210a:	e7ad      	b.n	8012068 <rcl_init_options_copy+0x2c>
 801210c:	4620      	mov	r0, r4
 801210e:	b014      	add	sp, #80	@ 0x50
 8012110:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012114:	f7ff bd8c 	b.w	8011c30 <rcl_convert_rmw_ret_to_rcl_ret>

08012118 <rcl_get_localhost_only>:
 8012118:	b510      	push	{r4, lr}
 801211a:	2300      	movs	r3, #0
 801211c:	b082      	sub	sp, #8
 801211e:	9301      	str	r3, [sp, #4]
 8012120:	b1b8      	cbz	r0, 8012152 <rcl_get_localhost_only+0x3a>
 8012122:	4604      	mov	r4, r0
 8012124:	a901      	add	r1, sp, #4
 8012126:	480c      	ldr	r0, [pc, #48]	@ (8012158 <rcl_get_localhost_only+0x40>)
 8012128:	f000 fb70 	bl	801280c <rcutils_get_env>
 801212c:	b110      	cbz	r0, 8012134 <rcl_get_localhost_only+0x1c>
 801212e:	2001      	movs	r0, #1
 8012130:	b002      	add	sp, #8
 8012132:	bd10      	pop	{r4, pc}
 8012134:	9b01      	ldr	r3, [sp, #4]
 8012136:	b113      	cbz	r3, 801213e <rcl_get_localhost_only+0x26>
 8012138:	781a      	ldrb	r2, [r3, #0]
 801213a:	2a31      	cmp	r2, #49	@ 0x31
 801213c:	d004      	beq.n	8012148 <rcl_get_localhost_only+0x30>
 801213e:	2302      	movs	r3, #2
 8012140:	2000      	movs	r0, #0
 8012142:	7023      	strb	r3, [r4, #0]
 8012144:	b002      	add	sp, #8
 8012146:	bd10      	pop	{r4, pc}
 8012148:	785b      	ldrb	r3, [r3, #1]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d1f7      	bne.n	801213e <rcl_get_localhost_only+0x26>
 801214e:	2301      	movs	r3, #1
 8012150:	e7f6      	b.n	8012140 <rcl_get_localhost_only+0x28>
 8012152:	200b      	movs	r0, #11
 8012154:	b002      	add	sp, #8
 8012156:	bd10      	pop	{r4, pc}
 8012158:	08017a34 	.word	0x08017a34

0801215c <rcl_get_zero_initialized_node>:
 801215c:	4a03      	ldr	r2, [pc, #12]	@ (801216c <rcl_get_zero_initialized_node+0x10>)
 801215e:	4603      	mov	r3, r0
 8012160:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012164:	e883 0003 	stmia.w	r3, {r0, r1}
 8012168:	4618      	mov	r0, r3
 801216a:	4770      	bx	lr
 801216c:	08017f8c 	.word	0x08017f8c

08012170 <rcl_node_init>:
 8012170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012174:	b0a9      	sub	sp, #164	@ 0xa4
 8012176:	4604      	mov	r4, r0
 8012178:	460e      	mov	r6, r1
 801217a:	4615      	mov	r5, r2
 801217c:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8012180:	a823      	add	r0, sp, #140	@ 0x8c
 8012182:	461f      	mov	r7, r3
 8012184:	f003 fb78 	bl	8015878 <rcl_guard_condition_get_default_options>
 8012188:	f1b8 0f00 	cmp.w	r8, #0
 801218c:	f000 80f3 	beq.w	8012376 <rcl_node_init+0x206>
 8012190:	4640      	mov	r0, r8
 8012192:	f7fa f9e5 	bl	800c560 <rcutils_allocator_is_valid>
 8012196:	2d00      	cmp	r5, #0
 8012198:	bf18      	it	ne
 801219a:	2c00      	cmpne	r4, #0
 801219c:	f080 0001 	eor.w	r0, r0, #1
 80121a0:	bf0c      	ite	eq
 80121a2:	f04f 0c01 	moveq.w	ip, #1
 80121a6:	f04f 0c00 	movne.w	ip, #0
 80121aa:	2e00      	cmp	r6, #0
 80121ac:	bf08      	it	eq
 80121ae:	f04c 0c01 	orreq.w	ip, ip, #1
 80121b2:	ea4c 0c00 	orr.w	ip, ip, r0
 80121b6:	f01c 09ff 	ands.w	r9, ip, #255	@ 0xff
 80121ba:	f040 80dc 	bne.w	8012376 <rcl_node_init+0x206>
 80121be:	f8d4 a004 	ldr.w	sl, [r4, #4]
 80121c2:	f1ba 0f00 	cmp.w	sl, #0
 80121c6:	f040 80fc 	bne.w	80123c2 <rcl_node_init+0x252>
 80121ca:	2f00      	cmp	r7, #0
 80121cc:	f000 80d3 	beq.w	8012376 <rcl_node_init+0x206>
 80121d0:	4638      	mov	r0, r7
 80121d2:	f7ff fd4b 	bl	8011c6c <rcl_context_is_valid>
 80121d6:	4683      	mov	fp, r0
 80121d8:	2800      	cmp	r0, #0
 80121da:	f000 80d2 	beq.w	8012382 <rcl_node_init+0x212>
 80121de:	4652      	mov	r2, sl
 80121e0:	4630      	mov	r0, r6
 80121e2:	a922      	add	r1, sp, #136	@ 0x88
 80121e4:	f8cd a088 	str.w	sl, [sp, #136]	@ 0x88
 80121e8:	f000 ff30 	bl	801304c <rmw_validate_node_name>
 80121ec:	4682      	mov	sl, r0
 80121ee:	2800      	cmp	r0, #0
 80121f0:	f040 80c3 	bne.w	801237a <rcl_node_init+0x20a>
 80121f4:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80121f6:	2800      	cmp	r0, #0
 80121f8:	f040 80f1 	bne.w	80123de <rcl_node_init+0x26e>
 80121fc:	4628      	mov	r0, r5
 80121fe:	f7ee f829 	bl	8000254 <strlen>
 8012202:	2800      	cmp	r0, #0
 8012204:	f040 80c0 	bne.w	8012388 <rcl_node_init+0x218>
 8012208:	4d79      	ldr	r5, [pc, #484]	@ (80123f0 <rcl_node_init+0x280>)
 801220a:	a922      	add	r1, sp, #136	@ 0x88
 801220c:	2200      	movs	r2, #0
 801220e:	4628      	mov	r0, r5
 8012210:	f000 fefe 	bl	8013010 <rmw_validate_namespace>
 8012214:	4682      	mov	sl, r0
 8012216:	2800      	cmp	r0, #0
 8012218:	f040 80af 	bne.w	801237a <rcl_node_init+0x20a>
 801221c:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801221e:	2800      	cmp	r0, #0
 8012220:	f040 80d5 	bne.w	80123ce <rcl_node_init+0x25e>
 8012224:	f8d8 3000 	ldr.w	r3, [r8]
 8012228:	2078      	movs	r0, #120	@ 0x78
 801222a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801222e:	4798      	blx	r3
 8012230:	4682      	mov	sl, r0
 8012232:	6060      	str	r0, [r4, #4]
 8012234:	2800      	cmp	r0, #0
 8012236:	f000 80cf 	beq.w	80123d8 <rcl_node_init+0x268>
 801223a:	2200      	movs	r2, #0
 801223c:	2300      	movs	r3, #0
 801223e:	a808      	add	r0, sp, #32
 8012240:	e9ca 231a 	strd	r2, r3, [sl, #104]	@ 0x68
 8012244:	e9ca 231c 	strd	r2, r3, [sl, #112]	@ 0x70
 8012248:	f000 f902 	bl	8012450 <rcl_node_get_default_options>
 801224c:	a908      	add	r1, sp, #32
 801224e:	4650      	mov	r0, sl
 8012250:	2268      	movs	r2, #104	@ 0x68
 8012252:	f004 fb4e 	bl	80168f2 <memcpy>
 8012256:	6861      	ldr	r1, [r4, #4]
 8012258:	4640      	mov	r0, r8
 801225a:	6027      	str	r7, [r4, #0]
 801225c:	f000 f906 	bl	801246c <rcl_node_options_copy>
 8012260:	2800      	cmp	r0, #0
 8012262:	d158      	bne.n	8012316 <rcl_node_init+0x1a6>
 8012264:	4628      	mov	r0, r5
 8012266:	f7ed fff5 	bl	8000254 <strlen>
 801226a:	4428      	add	r0, r5
 801226c:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8012270:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8012274:	2b2f      	cmp	r3, #47	@ 0x2f
 8012276:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801227a:	9300      	str	r3, [sp, #0]
 801227c:	bf0c      	ite	eq
 801227e:	4b5d      	ldreq	r3, [pc, #372]	@ (80123f4 <rcl_node_init+0x284>)
 8012280:	4b5d      	ldrne	r3, [pc, #372]	@ (80123f8 <rcl_node_init+0x288>)
 8012282:	9302      	str	r3, [sp, #8]
 8012284:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012288:	9301      	str	r3, [sp, #4]
 801228a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801228e:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8012292:	f000 fad3 	bl	801283c <rcutils_format_string_limit>
 8012296:	6823      	ldr	r3, [r4, #0]
 8012298:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 801229c:	4631      	mov	r1, r6
 801229e:	6818      	ldr	r0, [r3, #0]
 80122a0:	462a      	mov	r2, r5
 80122a2:	6866      	ldr	r6, [r4, #4]
 80122a4:	3028      	adds	r0, #40	@ 0x28
 80122a6:	f001 fad5 	bl	8013854 <rmw_create_node>
 80122aa:	6863      	ldr	r3, [r4, #4]
 80122ac:	66b0      	str	r0, [r6, #104]	@ 0x68
 80122ae:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80122b0:	2800      	cmp	r0, #0
 80122b2:	d032      	beq.n	801231a <rcl_node_init+0x1aa>
 80122b4:	f001 fb5e 	bl	8013974 <rmw_node_get_graph_guard_condition>
 80122b8:	4682      	mov	sl, r0
 80122ba:	b360      	cbz	r0, 8012316 <rcl_node_init+0x1a6>
 80122bc:	f8d8 3000 	ldr.w	r3, [r8]
 80122c0:	2008      	movs	r0, #8
 80122c2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80122c6:	6866      	ldr	r6, [r4, #4]
 80122c8:	4798      	blx	r3
 80122ca:	6863      	ldr	r3, [r4, #4]
 80122cc:	66f0      	str	r0, [r6, #108]	@ 0x6c
 80122ce:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 80122d2:	f1bb 0f00 	cmp.w	fp, #0
 80122d6:	d020      	beq.n	801231a <rcl_node_init+0x1aa>
 80122d8:	a806      	add	r0, sp, #24
 80122da:	ae23      	add	r6, sp, #140	@ 0x8c
 80122dc:	f003 fa40 	bl	8015760 <rcl_get_zero_initialized_guard_condition>
 80122e0:	a806      	add	r0, sp, #24
 80122e2:	6863      	ldr	r3, [r4, #4]
 80122e4:	46c4      	mov	ip, r8
 80122e6:	c803      	ldmia	r0, {r0, r1}
 80122e8:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 80122ec:	e88b 0003 	stmia.w	fp, {r0, r1}
 80122f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80122f4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80122f6:	f8dc 3000 	ldr.w	r3, [ip]
 80122fa:	6033      	str	r3, [r6, #0]
 80122fc:	ab28      	add	r3, sp, #160	@ 0xa0
 80122fe:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8012302:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8012306:	4651      	mov	r1, sl
 8012308:	463a      	mov	r2, r7
 801230a:	4670      	mov	r0, lr
 801230c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801230e:	f003 fa31 	bl	8015774 <rcl_guard_condition_init_from_rmw>
 8012312:	4682      	mov	sl, r0
 8012314:	b328      	cbz	r0, 8012362 <rcl_node_init+0x1f2>
 8012316:	6863      	ldr	r3, [r4, #4]
 8012318:	b1f3      	cbz	r3, 8012358 <rcl_node_init+0x1e8>
 801231a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801231c:	b128      	cbz	r0, 801232a <rcl_node_init+0x1ba>
 801231e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012322:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012326:	4798      	blx	r3
 8012328:	6863      	ldr	r3, [r4, #4]
 801232a:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801232c:	b110      	cbz	r0, 8012334 <rcl_node_init+0x1c4>
 801232e:	f001 faa3 	bl	8013878 <rmw_destroy_node>
 8012332:	6863      	ldr	r3, [r4, #4]
 8012334:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8012336:	b148      	cbz	r0, 801234c <rcl_node_init+0x1dc>
 8012338:	f003 fa78 	bl	801582c <rcl_guard_condition_fini>
 801233c:	6863      	ldr	r3, [r4, #4]
 801233e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012342:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8012344:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012348:	4798      	blx	r3
 801234a:	6863      	ldr	r3, [r4, #4]
 801234c:	4618      	mov	r0, r3
 801234e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012352:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012356:	4798      	blx	r3
 8012358:	2300      	movs	r3, #0
 801235a:	f04f 0a01 	mov.w	sl, #1
 801235e:	e9c4 3300 	strd	r3, r3, [r4]
 8012362:	f1b9 0f00 	cmp.w	r9, #0
 8012366:	d008      	beq.n	801237a <rcl_node_init+0x20a>
 8012368:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801236c:	4628      	mov	r0, r5
 801236e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012372:	4798      	blx	r3
 8012374:	e001      	b.n	801237a <rcl_node_init+0x20a>
 8012376:	f04f 0a0b 	mov.w	sl, #11
 801237a:	4650      	mov	r0, sl
 801237c:	b029      	add	sp, #164	@ 0xa4
 801237e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012382:	f04f 0a65 	mov.w	sl, #101	@ 0x65
 8012386:	e7f8      	b.n	801237a <rcl_node_init+0x20a>
 8012388:	782b      	ldrb	r3, [r5, #0]
 801238a:	2b2f      	cmp	r3, #47	@ 0x2f
 801238c:	f43f af3d 	beq.w	801220a <rcl_node_init+0x9a>
 8012390:	9503      	str	r5, [sp, #12]
 8012392:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012396:	9300      	str	r3, [sp, #0]
 8012398:	4b18      	ldr	r3, [pc, #96]	@ (80123fc <rcl_node_init+0x28c>)
 801239a:	9302      	str	r3, [sp, #8]
 801239c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80123a0:	9301      	str	r3, [sp, #4]
 80123a2:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80123a6:	f000 fa49 	bl	801283c <rcutils_format_string_limit>
 80123aa:	4605      	mov	r5, r0
 80123ac:	b1e0      	cbz	r0, 80123e8 <rcl_node_init+0x278>
 80123ae:	2200      	movs	r2, #0
 80123b0:	a922      	add	r1, sp, #136	@ 0x88
 80123b2:	9222      	str	r2, [sp, #136]	@ 0x88
 80123b4:	f000 fe2c 	bl	8013010 <rmw_validate_namespace>
 80123b8:	4682      	mov	sl, r0
 80123ba:	2800      	cmp	r0, #0
 80123bc:	d1d4      	bne.n	8012368 <rcl_node_init+0x1f8>
 80123be:	46d9      	mov	r9, fp
 80123c0:	e72c      	b.n	801221c <rcl_node_init+0xac>
 80123c2:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 80123c6:	4650      	mov	r0, sl
 80123c8:	b029      	add	sp, #164	@ 0xa4
 80123ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123ce:	f04f 0aca 	mov.w	sl, #202	@ 0xca
 80123d2:	f000 fe2f 	bl	8013034 <rmw_namespace_validation_result_string>
 80123d6:	e7c4      	b.n	8012362 <rcl_node_init+0x1f2>
 80123d8:	f04f 0a0a 	mov.w	sl, #10
 80123dc:	e7c1      	b.n	8012362 <rcl_node_init+0x1f2>
 80123de:	f04f 0ac9 	mov.w	sl, #201	@ 0xc9
 80123e2:	f000 fe87 	bl	80130f4 <rmw_node_name_validation_result_string>
 80123e6:	e7c8      	b.n	801237a <rcl_node_init+0x20a>
 80123e8:	f04f 0a0a 	mov.w	sl, #10
 80123ec:	e7c5      	b.n	801237a <rcl_node_init+0x20a>
 80123ee:	bf00      	nop
 80123f0:	08017a4c 	.word	0x08017a4c
 80123f4:	080177c0 	.word	0x080177c0
 80123f8:	08017a54 	.word	0x08017a54
 80123fc:	08017a50 	.word	0x08017a50

08012400 <rcl_node_is_valid>:
 8012400:	b130      	cbz	r0, 8012410 <rcl_node_is_valid+0x10>
 8012402:	6843      	ldr	r3, [r0, #4]
 8012404:	b123      	cbz	r3, 8012410 <rcl_node_is_valid+0x10>
 8012406:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012408:	b113      	cbz	r3, 8012410 <rcl_node_is_valid+0x10>
 801240a:	6800      	ldr	r0, [r0, #0]
 801240c:	f7ff bc2e 	b.w	8011c6c <rcl_context_is_valid>
 8012410:	2000      	movs	r0, #0
 8012412:	4770      	bx	lr

08012414 <rcl_node_get_name>:
 8012414:	b120      	cbz	r0, 8012420 <rcl_node_get_name+0xc>
 8012416:	6840      	ldr	r0, [r0, #4]
 8012418:	b110      	cbz	r0, 8012420 <rcl_node_get_name+0xc>
 801241a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801241c:	b100      	cbz	r0, 8012420 <rcl_node_get_name+0xc>
 801241e:	6880      	ldr	r0, [r0, #8]
 8012420:	4770      	bx	lr
 8012422:	bf00      	nop

08012424 <rcl_node_get_namespace>:
 8012424:	b120      	cbz	r0, 8012430 <rcl_node_get_namespace+0xc>
 8012426:	6840      	ldr	r0, [r0, #4]
 8012428:	b110      	cbz	r0, 8012430 <rcl_node_get_namespace+0xc>
 801242a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801242c:	b100      	cbz	r0, 8012430 <rcl_node_get_namespace+0xc>
 801242e:	68c0      	ldr	r0, [r0, #12]
 8012430:	4770      	bx	lr
 8012432:	bf00      	nop

08012434 <rcl_node_get_options>:
 8012434:	b128      	cbz	r0, 8012442 <rcl_node_get_options+0xe>
 8012436:	6840      	ldr	r0, [r0, #4]
 8012438:	b118      	cbz	r0, 8012442 <rcl_node_get_options+0xe>
 801243a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801243c:	2b00      	cmp	r3, #0
 801243e:	bf08      	it	eq
 8012440:	2000      	moveq	r0, #0
 8012442:	4770      	bx	lr

08012444 <rcl_node_get_rmw_handle>:
 8012444:	b110      	cbz	r0, 801244c <rcl_node_get_rmw_handle+0x8>
 8012446:	6840      	ldr	r0, [r0, #4]
 8012448:	b100      	cbz	r0, 801244c <rcl_node_get_rmw_handle+0x8>
 801244a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801244c:	4770      	bx	lr
 801244e:	bf00      	nop

08012450 <rcl_node_get_default_options>:
 8012450:	b510      	push	{r4, lr}
 8012452:	4604      	mov	r4, r0
 8012454:	2268      	movs	r2, #104	@ 0x68
 8012456:	2100      	movs	r1, #0
 8012458:	f004 f982 	bl	8016760 <memset>
 801245c:	4620      	mov	r0, r4
 801245e:	f7fa f871 	bl	800c544 <rcutils_get_default_allocator>
 8012462:	2301      	movs	r3, #1
 8012464:	4620      	mov	r0, r4
 8012466:	7523      	strb	r3, [r4, #20]
 8012468:	bd10      	pop	{r4, pc}
 801246a:	bf00      	nop

0801246c <rcl_node_options_copy>:
 801246c:	2800      	cmp	r0, #0
 801246e:	bf18      	it	ne
 8012470:	4288      	cmpne	r0, r1
 8012472:	d01b      	beq.n	80124ac <rcl_node_options_copy+0x40>
 8012474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012476:	fab1 f681 	clz	r6, r1
 801247a:	460c      	mov	r4, r1
 801247c:	0976      	lsrs	r6, r6, #5
 801247e:	b199      	cbz	r1, 80124a8 <rcl_node_options_copy+0x3c>
 8012480:	4605      	mov	r5, r0
 8012482:	8a87      	ldrh	r7, [r0, #20]
 8012484:	4684      	mov	ip, r0
 8012486:	468e      	mov	lr, r1
 8012488:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801248a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801248e:	682b      	ldr	r3, [r5, #0]
 8012490:	2250      	movs	r2, #80	@ 0x50
 8012492:	f10c 0118 	add.w	r1, ip, #24
 8012496:	f104 0018 	add.w	r0, r4, #24
 801249a:	f8ce 3000 	str.w	r3, [lr]
 801249e:	82a7      	strh	r7, [r4, #20]
 80124a0:	f004 fa27 	bl	80168f2 <memcpy>
 80124a4:	4630      	mov	r0, r6
 80124a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80124a8:	200b      	movs	r0, #11
 80124aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80124ac:	200b      	movs	r0, #11
 80124ae:	4770      	bx	lr

080124b0 <rcl_node_resolve_name>:
 80124b0:	b082      	sub	sp, #8
 80124b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124b6:	b091      	sub	sp, #68	@ 0x44
 80124b8:	ac1a      	add	r4, sp, #104	@ 0x68
 80124ba:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 80124be:	e884 000c 	stmia.w	r4, {r2, r3}
 80124c2:	2800      	cmp	r0, #0
 80124c4:	d03d      	beq.n	8012542 <rcl_node_resolve_name+0x92>
 80124c6:	460c      	mov	r4, r1
 80124c8:	4605      	mov	r5, r0
 80124ca:	f7ff ffb3 	bl	8012434 <rcl_node_get_options>
 80124ce:	2800      	cmp	r0, #0
 80124d0:	d03a      	beq.n	8012548 <rcl_node_resolve_name+0x98>
 80124d2:	4628      	mov	r0, r5
 80124d4:	f7ff ff9e 	bl	8012414 <rcl_node_get_name>
 80124d8:	4606      	mov	r6, r0
 80124da:	4628      	mov	r0, r5
 80124dc:	ad0b      	add	r5, sp, #44	@ 0x2c
 80124de:	f7ff ffa1 	bl	8012424 <rcl_node_get_namespace>
 80124e2:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 80124e6:	4607      	mov	r7, r0
 80124e8:	46ac      	mov	ip, r5
 80124ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80124ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80124f2:	f8de 3000 	ldr.w	r3, [lr]
 80124f6:	f8cc 3000 	str.w	r3, [ip]
 80124fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80124fc:	b30b      	cbz	r3, 8012542 <rcl_node_resolve_name+0x92>
 80124fe:	4689      	mov	r9, r1
 8012500:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 8012504:	f000 fb12 	bl	8012b2c <rcutils_get_zero_initialized_string_map>
 8012508:	ab10      	add	r3, sp, #64	@ 0x40
 801250a:	9008      	str	r0, [sp, #32]
 801250c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8012510:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012514:	2100      	movs	r1, #0
 8012516:	a808      	add	r0, sp, #32
 8012518:	e895 000c 	ldmia.w	r5, {r2, r3}
 801251c:	f000 fb7c 	bl	8012c18 <rcutils_string_map_init>
 8012520:	4683      	mov	fp, r0
 8012522:	b1a0      	cbz	r0, 801254e <rcl_node_resolve_name+0x9e>
 8012524:	f7fa f82a 	bl	800c57c <rcutils_get_error_string>
 8012528:	f7fa f83e 	bl	800c5a8 <rcutils_reset_error>
 801252c:	f1bb 0f0a 	cmp.w	fp, #10
 8012530:	bf18      	it	ne
 8012532:	f04f 0b01 	movne.w	fp, #1
 8012536:	4658      	mov	r0, fp
 8012538:	b011      	add	sp, #68	@ 0x44
 801253a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801253e:	b002      	add	sp, #8
 8012540:	4770      	bx	lr
 8012542:	f04f 0b0b 	mov.w	fp, #11
 8012546:	e7f6      	b.n	8012536 <rcl_node_resolve_name+0x86>
 8012548:	f04f 0b01 	mov.w	fp, #1
 801254c:	e7f3      	b.n	8012536 <rcl_node_resolve_name+0x86>
 801254e:	9009      	str	r0, [sp, #36]	@ 0x24
 8012550:	9007      	str	r0, [sp, #28]
 8012552:	a808      	add	r0, sp, #32
 8012554:	f003 f8fe 	bl	8015754 <rcl_get_default_topic_name_substitutions>
 8012558:	4683      	mov	fp, r0
 801255a:	b180      	cbz	r0, 801257e <rcl_node_resolve_name+0xce>
 801255c:	280a      	cmp	r0, #10
 801255e:	a808      	add	r0, sp, #32
 8012560:	bf18      	it	ne
 8012562:	f04f 0b01 	movne.w	fp, #1
 8012566:	f000 fb97 	bl	8012c98 <rcutils_string_map_fini>
 801256a:	4604      	mov	r4, r0
 801256c:	2800      	cmp	r0, #0
 801256e:	d15b      	bne.n	8012628 <rcl_node_resolve_name+0x178>
 8012570:	4651      	mov	r1, sl
 8012572:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012574:	47c8      	blx	r9
 8012576:	4651      	mov	r1, sl
 8012578:	4620      	mov	r0, r4
 801257a:	47c8      	blx	r9
 801257c:	e7db      	b.n	8012536 <rcl_node_resolve_name+0x86>
 801257e:	ab09      	add	r3, sp, #36	@ 0x24
 8012580:	46ec      	mov	ip, sp
 8012582:	9305      	str	r3, [sp, #20]
 8012584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012586:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801258a:	682b      	ldr	r3, [r5, #0]
 801258c:	463a      	mov	r2, r7
 801258e:	4631      	mov	r1, r6
 8012590:	4620      	mov	r0, r4
 8012592:	f8cc 3000 	str.w	r3, [ip]
 8012596:	ab08      	add	r3, sp, #32
 8012598:	f002 ff7c 	bl	8015494 <rcl_expand_topic_name>
 801259c:	4683      	mov	fp, r0
 801259e:	b9d8      	cbnz	r0, 80125d8 <rcl_node_resolve_name+0x128>
 80125a0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80125a2:	4602      	mov	r2, r0
 80125a4:	9009      	str	r0, [sp, #36]	@ 0x24
 80125a6:	a90a      	add	r1, sp, #40	@ 0x28
 80125a8:	4620      	mov	r0, r4
 80125aa:	f000 fc61 	bl	8012e70 <rmw_validate_full_topic_name>
 80125ae:	bb50      	cbnz	r0, 8012606 <rcl_node_resolve_name+0x156>
 80125b0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80125b2:	2d00      	cmp	r5, #0
 80125b4:	d140      	bne.n	8012638 <rcl_node_resolve_name+0x188>
 80125b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80125b8:	a808      	add	r0, sp, #32
 80125ba:	601c      	str	r4, [r3, #0]
 80125bc:	f000 fb6c 	bl	8012c98 <rcutils_string_map_fini>
 80125c0:	4683      	mov	fp, r0
 80125c2:	2800      	cmp	r0, #0
 80125c4:	d043      	beq.n	801264e <rcl_node_resolve_name+0x19e>
 80125c6:	f7f9 ffd9 	bl	800c57c <rcutils_get_error_string>
 80125ca:	46a8      	mov	r8, r5
 80125cc:	f04f 0b01 	mov.w	fp, #1
 80125d0:	462c      	mov	r4, r5
 80125d2:	f7f9 ffe9 	bl	800c5a8 <rcutils_reset_error>
 80125d6:	e00a      	b.n	80125ee <rcl_node_resolve_name+0x13e>
 80125d8:	2867      	cmp	r0, #103	@ 0x67
 80125da:	bf14      	ite	ne
 80125dc:	f04f 0800 	movne.w	r8, #0
 80125e0:	f008 0801 	andeq.w	r8, r8, #1
 80125e4:	9c07      	ldr	r4, [sp, #28]
 80125e6:	a808      	add	r0, sp, #32
 80125e8:	f000 fb56 	bl	8012c98 <rcutils_string_map_fini>
 80125ec:	bb50      	cbnz	r0, 8012644 <rcl_node_resolve_name+0x194>
 80125ee:	4651      	mov	r1, sl
 80125f0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80125f2:	47c8      	blx	r9
 80125f4:	4651      	mov	r1, sl
 80125f6:	4620      	mov	r0, r4
 80125f8:	47c8      	blx	r9
 80125fa:	f1b8 0f00 	cmp.w	r8, #0
 80125fe:	bf18      	it	ne
 8012600:	f04f 0b68 	movne.w	fp, #104	@ 0x68
 8012604:	e797      	b.n	8012536 <rcl_node_resolve_name+0x86>
 8012606:	f7f9 ffb9 	bl	800c57c <rcutils_get_error_string>
 801260a:	f7f9 ffcd 	bl	800c5a8 <rcutils_reset_error>
 801260e:	a808      	add	r0, sp, #32
 8012610:	f000 fb42 	bl	8012c98 <rcutils_string_map_fini>
 8012614:	b998      	cbnz	r0, 801263e <rcl_node_resolve_name+0x18e>
 8012616:	4651      	mov	r1, sl
 8012618:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801261a:	47c8      	blx	r9
 801261c:	4651      	mov	r1, sl
 801261e:	4620      	mov	r0, r4
 8012620:	f04f 0b01 	mov.w	fp, #1
 8012624:	47c8      	blx	r9
 8012626:	e786      	b.n	8012536 <rcl_node_resolve_name+0x86>
 8012628:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801262c:	f7f9 ffa6 	bl	800c57c <rcutils_get_error_string>
 8012630:	f7f9 ffba 	bl	800c5a8 <rcutils_reset_error>
 8012634:	4644      	mov	r4, r8
 8012636:	e7da      	b.n	80125ee <rcl_node_resolve_name+0x13e>
 8012638:	f04f 0b67 	mov.w	fp, #103	@ 0x67
 801263c:	e7d3      	b.n	80125e6 <rcl_node_resolve_name+0x136>
 801263e:	46d8      	mov	r8, fp
 8012640:	f04f 0b01 	mov.w	fp, #1
 8012644:	f7f9 ff9a 	bl	800c57c <rcutils_get_error_string>
 8012648:	f7f9 ffae 	bl	800c5a8 <rcutils_reset_error>
 801264c:	e7cf      	b.n	80125ee <rcl_node_resolve_name+0x13e>
 801264e:	4651      	mov	r1, sl
 8012650:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012652:	47c8      	blx	r9
 8012654:	4651      	mov	r1, sl
 8012656:	4658      	mov	r0, fp
 8012658:	47c8      	blx	r9
 801265a:	e76c      	b.n	8012536 <rcl_node_resolve_name+0x86>

0801265c <rcl_get_system_time>:
 801265c:	4608      	mov	r0, r1
 801265e:	f000 bb93 	b.w	8012d88 <rcutils_system_time_now>
 8012662:	bf00      	nop

08012664 <rcl_get_steady_time>:
 8012664:	4608      	mov	r0, r1
 8012666:	f000 bbb5 	b.w	8012dd4 <rcutils_steady_time_now>
 801266a:	bf00      	nop

0801266c <rcl_get_ros_time>:
 801266c:	7a03      	ldrb	r3, [r0, #8]
 801266e:	b510      	push	{r4, lr}
 8012670:	460c      	mov	r4, r1
 8012672:	b143      	cbz	r3, 8012686 <rcl_get_ros_time+0x1a>
 8012674:	2105      	movs	r1, #5
 8012676:	f000 f893 	bl	80127a0 <__atomic_load_8>
 801267a:	4602      	mov	r2, r0
 801267c:	460b      	mov	r3, r1
 801267e:	2000      	movs	r0, #0
 8012680:	e9c4 2300 	strd	r2, r3, [r4]
 8012684:	bd10      	pop	{r4, pc}
 8012686:	4608      	mov	r0, r1
 8012688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801268c:	f000 bb7c 	b.w	8012d88 <rcutils_system_time_now>

08012690 <rcl_clock_init>:
 8012690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012692:	4605      	mov	r5, r0
 8012694:	4610      	mov	r0, r2
 8012696:	4614      	mov	r4, r2
 8012698:	460e      	mov	r6, r1
 801269a:	f7f9 ff61 	bl	800c560 <rcutils_allocator_is_valid>
 801269e:	b128      	cbz	r0, 80126ac <rcl_clock_init+0x1c>
 80126a0:	2d03      	cmp	r5, #3
 80126a2:	d803      	bhi.n	80126ac <rcl_clock_init+0x1c>
 80126a4:	e8df f005 	tbb	[pc, r5]
 80126a8:	0659301f 	.word	0x0659301f
 80126ac:	f04f 0c0b 	mov.w	ip, #11
 80126b0:	4660      	mov	r0, ip
 80126b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126b4:	2c00      	cmp	r4, #0
 80126b6:	d0f9      	beq.n	80126ac <rcl_clock_init+0x1c>
 80126b8:	fab6 f386 	clz	r3, r6
 80126bc:	095b      	lsrs	r3, r3, #5
 80126be:	2e00      	cmp	r6, #0
 80126c0:	d0f4      	beq.n	80126ac <rcl_clock_init+0x1c>
 80126c2:	6133      	str	r3, [r6, #16]
 80126c4:	469c      	mov	ip, r3
 80126c6:	f106 0514 	add.w	r5, r6, #20
 80126ca:	4f32      	ldr	r7, [pc, #200]	@ (8012794 <rcl_clock_init+0x104>)
 80126cc:	f04f 0e03 	mov.w	lr, #3
 80126d0:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80126d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80126d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80126d8:	6823      	ldr	r3, [r4, #0]
 80126da:	4660      	mov	r0, ip
 80126dc:	602b      	str	r3, [r5, #0]
 80126de:	60f7      	str	r7, [r6, #12]
 80126e0:	f886 e000 	strb.w	lr, [r6]
 80126e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126e6:	2e00      	cmp	r6, #0
 80126e8:	d0e0      	beq.n	80126ac <rcl_clock_init+0x1c>
 80126ea:	2300      	movs	r3, #0
 80126ec:	f106 0514 	add.w	r5, r6, #20
 80126f0:	7033      	strb	r3, [r6, #0]
 80126f2:	469c      	mov	ip, r3
 80126f4:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80126f8:	e9c6 3303 	strd	r3, r3, [r6, #12]
 80126fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80126fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012700:	6823      	ldr	r3, [r4, #0]
 8012702:	4660      	mov	r0, ip
 8012704:	602b      	str	r3, [r5, #0]
 8012706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012708:	2c00      	cmp	r4, #0
 801270a:	d0cf      	beq.n	80126ac <rcl_clock_init+0x1c>
 801270c:	fab6 f586 	clz	r5, r6
 8012710:	096d      	lsrs	r5, r5, #5
 8012712:	2e00      	cmp	r6, #0
 8012714:	d0ca      	beq.n	80126ac <rcl_clock_init+0x1c>
 8012716:	46a6      	mov	lr, r4
 8012718:	7035      	strb	r5, [r6, #0]
 801271a:	f106 0c14 	add.w	ip, r6, #20
 801271e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012722:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8012726:	e9c6 5503 	strd	r5, r5, [r6, #12]
 801272a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801272e:	f8de 3000 	ldr.w	r3, [lr]
 8012732:	2010      	movs	r0, #16
 8012734:	f8cc 3000 	str.w	r3, [ip]
 8012738:	6823      	ldr	r3, [r4, #0]
 801273a:	6921      	ldr	r1, [r4, #16]
 801273c:	4798      	blx	r3
 801273e:	6130      	str	r0, [r6, #16]
 8012740:	b320      	cbz	r0, 801278c <rcl_clock_init+0xfc>
 8012742:	2200      	movs	r2, #0
 8012744:	2300      	movs	r3, #0
 8012746:	46ac      	mov	ip, r5
 8012748:	7205      	strb	r5, [r0, #8]
 801274a:	e9c0 2300 	strd	r2, r3, [r0]
 801274e:	4a12      	ldr	r2, [pc, #72]	@ (8012798 <rcl_clock_init+0x108>)
 8012750:	2301      	movs	r3, #1
 8012752:	4660      	mov	r0, ip
 8012754:	60f2      	str	r2, [r6, #12]
 8012756:	7033      	strb	r3, [r6, #0]
 8012758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801275a:	2c00      	cmp	r4, #0
 801275c:	d0a6      	beq.n	80126ac <rcl_clock_init+0x1c>
 801275e:	fab6 f386 	clz	r3, r6
 8012762:	095b      	lsrs	r3, r3, #5
 8012764:	2e00      	cmp	r6, #0
 8012766:	d0a1      	beq.n	80126ac <rcl_clock_init+0x1c>
 8012768:	6133      	str	r3, [r6, #16]
 801276a:	469c      	mov	ip, r3
 801276c:	f106 0514 	add.w	r5, r6, #20
 8012770:	f8df e028 	ldr.w	lr, [pc, #40]	@ 801279c <rcl_clock_init+0x10c>
 8012774:	2702      	movs	r7, #2
 8012776:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801277a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801277c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801277e:	6823      	ldr	r3, [r4, #0]
 8012780:	4660      	mov	r0, ip
 8012782:	602b      	str	r3, [r5, #0]
 8012784:	f8c6 e00c 	str.w	lr, [r6, #12]
 8012788:	7037      	strb	r7, [r6, #0]
 801278a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801278c:	f04f 0c0a 	mov.w	ip, #10
 8012790:	e78e      	b.n	80126b0 <rcl_clock_init+0x20>
 8012792:	bf00      	nop
 8012794:	08012665 	.word	0x08012665
 8012798:	0801266d 	.word	0x0801266d
 801279c:	0801265d 	.word	0x0801265d

080127a0 <__atomic_load_8>:
 80127a0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80127a4:	4a16      	ldr	r2, [pc, #88]	@ (8012800 <__atomic_load_8+0x60>)
 80127a6:	4b17      	ldr	r3, [pc, #92]	@ (8012804 <__atomic_load_8+0x64>)
 80127a8:	f04f 0c01 	mov.w	ip, #1
 80127ac:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80127b0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80127b4:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80127b8:	fb02 f101 	mul.w	r1, r2, r1
 80127bc:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80127c0:	fba3 2301 	umull	r2, r3, r3, r1
 80127c4:	091b      	lsrs	r3, r3, #4
 80127c6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80127ca:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80127ce:	b4d0      	push	{r4, r6, r7}
 80127d0:	1ac9      	subs	r1, r1, r3
 80127d2:	4c0d      	ldr	r4, [pc, #52]	@ (8012808 <__atomic_load_8+0x68>)
 80127d4:	1862      	adds	r2, r4, r1
 80127d6:	e8d2 3f4f 	ldrexb	r3, [r2]
 80127da:	e8c2 cf46 	strexb	r6, ip, [r2]
 80127de:	2e00      	cmp	r6, #0
 80127e0:	d1f9      	bne.n	80127d6 <__atomic_load_8+0x36>
 80127e2:	b2db      	uxtb	r3, r3
 80127e4:	f3bf 8f5b 	dmb	ish
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d1f4      	bne.n	80127d6 <__atomic_load_8+0x36>
 80127ec:	e9d0 6700 	ldrd	r6, r7, [r0]
 80127f0:	f3bf 8f5b 	dmb	ish
 80127f4:	5463      	strb	r3, [r4, r1]
 80127f6:	4630      	mov	r0, r6
 80127f8:	4639      	mov	r1, r7
 80127fa:	bcd0      	pop	{r4, r6, r7}
 80127fc:	4770      	bx	lr
 80127fe:	bf00      	nop
 8012800:	27d4eb2d 	.word	0x27d4eb2d
 8012804:	b21642c9 	.word	0xb21642c9
 8012808:	2000ea28 	.word	0x2000ea28

0801280c <rcutils_get_env>:
 801280c:	b168      	cbz	r0, 801282a <rcutils_get_env+0x1e>
 801280e:	b510      	push	{r4, lr}
 8012810:	460c      	mov	r4, r1
 8012812:	b129      	cbz	r1, 8012820 <rcutils_get_env+0x14>
 8012814:	f003 faf2 	bl	8015dfc <getenv>
 8012818:	b120      	cbz	r0, 8012824 <rcutils_get_env+0x18>
 801281a:	6020      	str	r0, [r4, #0]
 801281c:	2000      	movs	r0, #0
 801281e:	bd10      	pop	{r4, pc}
 8012820:	4803      	ldr	r0, [pc, #12]	@ (8012830 <rcutils_get_env+0x24>)
 8012822:	bd10      	pop	{r4, pc}
 8012824:	4b03      	ldr	r3, [pc, #12]	@ (8012834 <rcutils_get_env+0x28>)
 8012826:	6023      	str	r3, [r4, #0]
 8012828:	bd10      	pop	{r4, pc}
 801282a:	4803      	ldr	r0, [pc, #12]	@ (8012838 <rcutils_get_env+0x2c>)
 801282c:	4770      	bx	lr
 801282e:	bf00      	nop
 8012830:	08017a78 	.word	0x08017a78
 8012834:	08017e28 	.word	0x08017e28
 8012838:	08017a5c 	.word	0x08017a5c

0801283c <rcutils_format_string_limit>:
 801283c:	b40f      	push	{r0, r1, r2, r3}
 801283e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012840:	b083      	sub	sp, #12
 8012842:	ac08      	add	r4, sp, #32
 8012844:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8012846:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801284a:	b326      	cbz	r6, 8012896 <rcutils_format_string_limit+0x5a>
 801284c:	a808      	add	r0, sp, #32
 801284e:	f7f9 fe87 	bl	800c560 <rcutils_allocator_is_valid>
 8012852:	b300      	cbz	r0, 8012896 <rcutils_format_string_limit+0x5a>
 8012854:	2100      	movs	r1, #0
 8012856:	ab0f      	add	r3, sp, #60	@ 0x3c
 8012858:	4632      	mov	r2, r6
 801285a:	4608      	mov	r0, r1
 801285c:	e9cd 3300 	strd	r3, r3, [sp]
 8012860:	f000 f906 	bl	8012a70 <rcutils_vsnprintf>
 8012864:	1c43      	adds	r3, r0, #1
 8012866:	4605      	mov	r5, r0
 8012868:	d015      	beq.n	8012896 <rcutils_format_string_limit+0x5a>
 801286a:	1c47      	adds	r7, r0, #1
 801286c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801286e:	429f      	cmp	r7, r3
 8012870:	d901      	bls.n	8012876 <rcutils_format_string_limit+0x3a>
 8012872:	1e5d      	subs	r5, r3, #1
 8012874:	461f      	mov	r7, r3
 8012876:	9b08      	ldr	r3, [sp, #32]
 8012878:	4638      	mov	r0, r7
 801287a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801287c:	4798      	blx	r3
 801287e:	4604      	mov	r4, r0
 8012880:	b148      	cbz	r0, 8012896 <rcutils_format_string_limit+0x5a>
 8012882:	4632      	mov	r2, r6
 8012884:	4639      	mov	r1, r7
 8012886:	9b01      	ldr	r3, [sp, #4]
 8012888:	f000 f8f2 	bl	8012a70 <rcutils_vsnprintf>
 801288c:	2800      	cmp	r0, #0
 801288e:	db09      	blt.n	80128a4 <rcutils_format_string_limit+0x68>
 8012890:	2300      	movs	r3, #0
 8012892:	5563      	strb	r3, [r4, r5]
 8012894:	e000      	b.n	8012898 <rcutils_format_string_limit+0x5c>
 8012896:	2400      	movs	r4, #0
 8012898:	4620      	mov	r0, r4
 801289a:	b003      	add	sp, #12
 801289c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80128a0:	b004      	add	sp, #16
 80128a2:	4770      	bx	lr
 80128a4:	4620      	mov	r0, r4
 80128a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128a8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80128aa:	2400      	movs	r4, #0
 80128ac:	4798      	blx	r3
 80128ae:	e7f3      	b.n	8012898 <rcutils_format_string_limit+0x5c>

080128b0 <rcutils_repl_str>:
 80128b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128b4:	ed2d 8b02 	vpush	{d8}
 80128b8:	b087      	sub	sp, #28
 80128ba:	2600      	movs	r6, #0
 80128bc:	4680      	mov	r8, r0
 80128be:	468a      	mov	sl, r1
 80128c0:	9000      	str	r0, [sp, #0]
 80128c2:	4608      	mov	r0, r1
 80128c4:	ee08 2a10 	vmov	s16, r2
 80128c8:	4699      	mov	r9, r3
 80128ca:	2510      	movs	r5, #16
 80128cc:	f7ed fcc2 	bl	8000254 <strlen>
 80128d0:	4637      	mov	r7, r6
 80128d2:	46b3      	mov	fp, r6
 80128d4:	9001      	str	r0, [sp, #4]
 80128d6:	e01e      	b.n	8012916 <rcutils_repl_str+0x66>
 80128d8:	f10b 0b01 	add.w	fp, fp, #1
 80128dc:	9b01      	ldr	r3, [sp, #4]
 80128de:	455e      	cmp	r6, fp
 80128e0:	eb04 0803 	add.w	r8, r4, r3
 80128e4:	d211      	bcs.n	801290a <rcutils_repl_str+0x5a>
 80128e6:	442e      	add	r6, r5
 80128e8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80128ec:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80128f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80128f4:	00b1      	lsls	r1, r6, #2
 80128f6:	4798      	blx	r3
 80128f8:	2800      	cmp	r0, #0
 80128fa:	f000 8088 	beq.w	8012a0e <rcutils_repl_str+0x15e>
 80128fe:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8012902:	4607      	mov	r7, r0
 8012904:	bf28      	it	cs
 8012906:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 801290a:	9a00      	ldr	r2, [sp, #0]
 801290c:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8012910:	1aa4      	subs	r4, r4, r2
 8012912:	f843 4c04 	str.w	r4, [r3, #-4]
 8012916:	4651      	mov	r1, sl
 8012918:	4640      	mov	r0, r8
 801291a:	f003 ff48 	bl	80167ae <strstr>
 801291e:	4604      	mov	r4, r0
 8012920:	4638      	mov	r0, r7
 8012922:	2c00      	cmp	r4, #0
 8012924:	d1d8      	bne.n	80128d8 <rcutils_repl_str+0x28>
 8012926:	4640      	mov	r0, r8
 8012928:	f7ed fc94 	bl	8000254 <strlen>
 801292c:	9b00      	ldr	r3, [sp, #0]
 801292e:	eba8 0803 	sub.w	r8, r8, r3
 8012932:	eb08 0400 	add.w	r4, r8, r0
 8012936:	9402      	str	r4, [sp, #8]
 8012938:	f1bb 0f00 	cmp.w	fp, #0
 801293c:	d045      	beq.n	80129ca <rcutils_repl_str+0x11a>
 801293e:	ee18 0a10 	vmov	r0, s16
 8012942:	f7ed fc87 	bl	8000254 <strlen>
 8012946:	9a01      	ldr	r2, [sp, #4]
 8012948:	4606      	mov	r6, r0
 801294a:	f8d9 3000 	ldr.w	r3, [r9]
 801294e:	1a82      	subs	r2, r0, r2
 8012950:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8012954:	fb0b 4202 	mla	r2, fp, r2, r4
 8012958:	1c50      	adds	r0, r2, #1
 801295a:	9205      	str	r2, [sp, #20]
 801295c:	4798      	blx	r3
 801295e:	4682      	mov	sl, r0
 8012960:	2800      	cmp	r0, #0
 8012962:	d054      	beq.n	8012a0e <rcutils_repl_str+0x15e>
 8012964:	683a      	ldr	r2, [r7, #0]
 8012966:	463d      	mov	r5, r7
 8012968:	9900      	ldr	r1, [sp, #0]
 801296a:	2401      	movs	r4, #1
 801296c:	f003 ffc1 	bl	80168f2 <memcpy>
 8012970:	683b      	ldr	r3, [r7, #0]
 8012972:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 8012976:	eb0a 0803 	add.w	r8, sl, r3
 801297a:	ee18 7a10 	vmov	r7, s16
 801297e:	f8dd a000 	ldr.w	sl, [sp]
 8012982:	f8cd 9000 	str.w	r9, [sp]
 8012986:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801298a:	4632      	mov	r2, r6
 801298c:	4639      	mov	r1, r7
 801298e:	4640      	mov	r0, r8
 8012990:	44b0      	add	r8, r6
 8012992:	f003 ffae 	bl	80168f2 <memcpy>
 8012996:	f855 2b04 	ldr.w	r2, [r5], #4
 801299a:	45a3      	cmp	fp, r4
 801299c:	444a      	add	r2, r9
 801299e:	eb0a 0102 	add.w	r1, sl, r2
 80129a2:	d02a      	beq.n	80129fa <rcutils_repl_str+0x14a>
 80129a4:	6828      	ldr	r0, [r5, #0]
 80129a6:	1a82      	subs	r2, r0, r2
 80129a8:	4640      	mov	r0, r8
 80129aa:	4490      	add	r8, r2
 80129ac:	f003 ffa1 	bl	80168f2 <memcpy>
 80129b0:	1c62      	adds	r2, r4, #1
 80129b2:	45a3      	cmp	fp, r4
 80129b4:	4614      	mov	r4, r2
 80129b6:	d8e8      	bhi.n	801298a <rcutils_repl_str+0xda>
 80129b8:	f8dd 9000 	ldr.w	r9, [sp]
 80129bc:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 80129c0:	2300      	movs	r3, #0
 80129c2:	9a05      	ldr	r2, [sp, #20]
 80129c4:	f80a 3002 	strb.w	r3, [sl, r2]
 80129c8:	e00b      	b.n	80129e2 <rcutils_repl_str+0x132>
 80129ca:	4620      	mov	r0, r4
 80129cc:	f8d9 3000 	ldr.w	r3, [r9]
 80129d0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80129d4:	3001      	adds	r0, #1
 80129d6:	4798      	blx	r3
 80129d8:	4682      	mov	sl, r0
 80129da:	b110      	cbz	r0, 80129e2 <rcutils_repl_str+0x132>
 80129dc:	9900      	ldr	r1, [sp, #0]
 80129de:	f003 ff80 	bl	80168e2 <strcpy>
 80129e2:	4638      	mov	r0, r7
 80129e4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80129e8:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80129ec:	4798      	blx	r3
 80129ee:	4650      	mov	r0, sl
 80129f0:	b007      	add	sp, #28
 80129f2:	ecbd 8b02 	vpop	{d8}
 80129f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129fa:	9b02      	ldr	r3, [sp, #8]
 80129fc:	4640      	mov	r0, r8
 80129fe:	f8dd 9000 	ldr.w	r9, [sp]
 8012a02:	1a9a      	subs	r2, r3, r2
 8012a04:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8012a08:	f003 ff73 	bl	80168f2 <memcpy>
 8012a0c:	e7d8      	b.n	80129c0 <rcutils_repl_str+0x110>
 8012a0e:	f04f 0a00 	mov.w	sl, #0
 8012a12:	e7e6      	b.n	80129e2 <rcutils_repl_str+0x132>

08012a14 <rcutils_snprintf>:
 8012a14:	b40c      	push	{r2, r3}
 8012a16:	b530      	push	{r4, r5, lr}
 8012a18:	b083      	sub	sp, #12
 8012a1a:	ab06      	add	r3, sp, #24
 8012a1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a20:	9301      	str	r3, [sp, #4]
 8012a22:	b1e2      	cbz	r2, 8012a5e <rcutils_snprintf+0x4a>
 8012a24:	fab0 f480 	clz	r4, r0
 8012a28:	fab1 f581 	clz	r5, r1
 8012a2c:	ea50 0c01 	orrs.w	ip, r0, r1
 8012a30:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8012a34:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8012a38:	d008      	beq.n	8012a4c <rcutils_snprintf+0x38>
 8012a3a:	b984      	cbnz	r4, 8012a5e <rcutils_snprintf+0x4a>
 8012a3c:	b97d      	cbnz	r5, 8012a5e <rcutils_snprintf+0x4a>
 8012a3e:	f003 fdd3 	bl	80165e8 <vsniprintf>
 8012a42:	b003      	add	sp, #12
 8012a44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012a48:	b002      	add	sp, #8
 8012a4a:	4770      	bx	lr
 8012a4c:	4661      	mov	r1, ip
 8012a4e:	4660      	mov	r0, ip
 8012a50:	f003 fdca 	bl	80165e8 <vsniprintf>
 8012a54:	b003      	add	sp, #12
 8012a56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012a5a:	b002      	add	sp, #8
 8012a5c:	4770      	bx	lr
 8012a5e:	f003 ff13 	bl	8016888 <__errno>
 8012a62:	2216      	movs	r2, #22
 8012a64:	4603      	mov	r3, r0
 8012a66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012a6a:	601a      	str	r2, [r3, #0]
 8012a6c:	e7e9      	b.n	8012a42 <rcutils_snprintf+0x2e>
 8012a6e:	bf00      	nop

08012a70 <rcutils_vsnprintf>:
 8012a70:	b570      	push	{r4, r5, r6, lr}
 8012a72:	b1b2      	cbz	r2, 8012aa2 <rcutils_vsnprintf+0x32>
 8012a74:	fab0 f480 	clz	r4, r0
 8012a78:	fab1 f581 	clz	r5, r1
 8012a7c:	ea50 0c01 	orrs.w	ip, r0, r1
 8012a80:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8012a84:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8012a88:	d005      	beq.n	8012a96 <rcutils_vsnprintf+0x26>
 8012a8a:	b954      	cbnz	r4, 8012aa2 <rcutils_vsnprintf+0x32>
 8012a8c:	b94d      	cbnz	r5, 8012aa2 <rcutils_vsnprintf+0x32>
 8012a8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012a92:	f003 bda9 	b.w	80165e8 <vsniprintf>
 8012a96:	4661      	mov	r1, ip
 8012a98:	4660      	mov	r0, ip
 8012a9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012a9e:	f003 bda3 	b.w	80165e8 <vsniprintf>
 8012aa2:	f003 fef1 	bl	8016888 <__errno>
 8012aa6:	2316      	movs	r3, #22
 8012aa8:	6003      	str	r3, [r0, #0]
 8012aaa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012aae:	bd70      	pop	{r4, r5, r6, pc}

08012ab0 <rcutils_strdup>:
 8012ab0:	b084      	sub	sp, #16
 8012ab2:	b570      	push	{r4, r5, r6, lr}
 8012ab4:	b082      	sub	sp, #8
 8012ab6:	4605      	mov	r5, r0
 8012ab8:	ac07      	add	r4, sp, #28
 8012aba:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8012abe:	b1b0      	cbz	r0, 8012aee <rcutils_strdup+0x3e>
 8012ac0:	f7ed fbc8 	bl	8000254 <strlen>
 8012ac4:	1c42      	adds	r2, r0, #1
 8012ac6:	9b07      	ldr	r3, [sp, #28]
 8012ac8:	4606      	mov	r6, r0
 8012aca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012acc:	4610      	mov	r0, r2
 8012ace:	9201      	str	r2, [sp, #4]
 8012ad0:	4798      	blx	r3
 8012ad2:	4604      	mov	r4, r0
 8012ad4:	b128      	cbz	r0, 8012ae2 <rcutils_strdup+0x32>
 8012ad6:	9a01      	ldr	r2, [sp, #4]
 8012ad8:	4629      	mov	r1, r5
 8012ada:	f003 ff0a 	bl	80168f2 <memcpy>
 8012ade:	2300      	movs	r3, #0
 8012ae0:	55a3      	strb	r3, [r4, r6]
 8012ae2:	4620      	mov	r0, r4
 8012ae4:	b002      	add	sp, #8
 8012ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012aea:	b004      	add	sp, #16
 8012aec:	4770      	bx	lr
 8012aee:	4604      	mov	r4, r0
 8012af0:	e7f7      	b.n	8012ae2 <rcutils_strdup+0x32>
 8012af2:	bf00      	nop

08012af4 <rcutils_strndup>:
 8012af4:	b082      	sub	sp, #8
 8012af6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012af8:	ac06      	add	r4, sp, #24
 8012afa:	4605      	mov	r5, r0
 8012afc:	e884 000c 	stmia.w	r4, {r2, r3}
 8012b00:	b188      	cbz	r0, 8012b26 <rcutils_strndup+0x32>
 8012b02:	1c4f      	adds	r7, r1, #1
 8012b04:	460e      	mov	r6, r1
 8012b06:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012b08:	4638      	mov	r0, r7
 8012b0a:	4790      	blx	r2
 8012b0c:	4604      	mov	r4, r0
 8012b0e:	b128      	cbz	r0, 8012b1c <rcutils_strndup+0x28>
 8012b10:	463a      	mov	r2, r7
 8012b12:	4629      	mov	r1, r5
 8012b14:	f003 feed 	bl	80168f2 <memcpy>
 8012b18:	2300      	movs	r3, #0
 8012b1a:	55a3      	strb	r3, [r4, r6]
 8012b1c:	4620      	mov	r0, r4
 8012b1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012b22:	b002      	add	sp, #8
 8012b24:	4770      	bx	lr
 8012b26:	4604      	mov	r4, r0
 8012b28:	e7f8      	b.n	8012b1c <rcutils_strndup+0x28>
 8012b2a:	bf00      	nop

08012b2c <rcutils_get_zero_initialized_string_map>:
 8012b2c:	2000      	movs	r0, #0
 8012b2e:	4b01      	ldr	r3, [pc, #4]	@ (8012b34 <rcutils_get_zero_initialized_string_map+0x8>)
 8012b30:	6018      	str	r0, [r3, #0]
 8012b32:	4770      	bx	lr
 8012b34:	2000ea40 	.word	0x2000ea40

08012b38 <rcutils_string_map_reserve>:
 8012b38:	2800      	cmp	r0, #0
 8012b3a:	d05e      	beq.n	8012bfa <rcutils_string_map_reserve+0xc2>
 8012b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b40:	460c      	mov	r4, r1
 8012b42:	6801      	ldr	r1, [r0, #0]
 8012b44:	b082      	sub	sp, #8
 8012b46:	4605      	mov	r5, r0
 8012b48:	b129      	cbz	r1, 8012b56 <rcutils_string_map_reserve+0x1e>
 8012b4a:	68cb      	ldr	r3, [r1, #12]
 8012b4c:	42a3      	cmp	r3, r4
 8012b4e:	d906      	bls.n	8012b5e <rcutils_string_map_reserve+0x26>
 8012b50:	461c      	mov	r4, r3
 8012b52:	2900      	cmp	r1, #0
 8012b54:	d1f9      	bne.n	8012b4a <rcutils_string_map_reserve+0x12>
 8012b56:	201f      	movs	r0, #31
 8012b58:	b002      	add	sp, #8
 8012b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b5e:	688b      	ldr	r3, [r1, #8]
 8012b60:	42a3      	cmp	r3, r4
 8012b62:	d046      	beq.n	8012bf2 <rcutils_string_map_reserve+0xba>
 8012b64:	6a0e      	ldr	r6, [r1, #32]
 8012b66:	2c00      	cmp	r4, #0
 8012b68:	d033      	beq.n	8012bd2 <rcutils_string_map_reserve+0x9a>
 8012b6a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8012b6e:	d242      	bcs.n	8012bf6 <rcutils_string_map_reserve+0xbe>
 8012b70:	00a7      	lsls	r7, r4, #2
 8012b72:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8012b76:	6808      	ldr	r0, [r1, #0]
 8012b78:	4632      	mov	r2, r6
 8012b7a:	4639      	mov	r1, r7
 8012b7c:	47c0      	blx	r8
 8012b7e:	2800      	cmp	r0, #0
 8012b80:	d039      	beq.n	8012bf6 <rcutils_string_map_reserve+0xbe>
 8012b82:	682b      	ldr	r3, [r5, #0]
 8012b84:	4632      	mov	r2, r6
 8012b86:	4639      	mov	r1, r7
 8012b88:	6018      	str	r0, [r3, #0]
 8012b8a:	6858      	ldr	r0, [r3, #4]
 8012b8c:	47c0      	blx	r8
 8012b8e:	2800      	cmp	r0, #0
 8012b90:	d031      	beq.n	8012bf6 <rcutils_string_map_reserve+0xbe>
 8012b92:	682d      	ldr	r5, [r5, #0]
 8012b94:	68ab      	ldr	r3, [r5, #8]
 8012b96:	6068      	str	r0, [r5, #4]
 8012b98:	42a3      	cmp	r3, r4
 8012b9a:	d225      	bcs.n	8012be8 <rcutils_string_map_reserve+0xb0>
 8012b9c:	682a      	ldr	r2, [r5, #0]
 8012b9e:	eb00 0c07 	add.w	ip, r0, r7
 8012ba2:	0099      	lsls	r1, r3, #2
 8012ba4:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8012ba8:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8012bac:	45e6      	cmp	lr, ip
 8012bae:	d203      	bcs.n	8012bb8 <rcutils_string_map_reserve+0x80>
 8012bb0:	eb02 0c07 	add.w	ip, r2, r7
 8012bb4:	4566      	cmp	r6, ip
 8012bb6:	d322      	bcc.n	8012bfe <rcutils_string_map_reserve+0xc6>
 8012bb8:	1ae3      	subs	r3, r4, r3
 8012bba:	4670      	mov	r0, lr
 8012bbc:	2100      	movs	r1, #0
 8012bbe:	009a      	lsls	r2, r3, #2
 8012bc0:	9201      	str	r2, [sp, #4]
 8012bc2:	f003 fdcd 	bl	8016760 <memset>
 8012bc6:	9a01      	ldr	r2, [sp, #4]
 8012bc8:	2100      	movs	r1, #0
 8012bca:	4630      	mov	r0, r6
 8012bcc:	f003 fdc8 	bl	8016760 <memset>
 8012bd0:	e00a      	b.n	8012be8 <rcutils_string_map_reserve+0xb0>
 8012bd2:	694f      	ldr	r7, [r1, #20]
 8012bd4:	6808      	ldr	r0, [r1, #0]
 8012bd6:	4631      	mov	r1, r6
 8012bd8:	47b8      	blx	r7
 8012bda:	682b      	ldr	r3, [r5, #0]
 8012bdc:	4631      	mov	r1, r6
 8012bde:	6858      	ldr	r0, [r3, #4]
 8012be0:	601c      	str	r4, [r3, #0]
 8012be2:	47b8      	blx	r7
 8012be4:	682d      	ldr	r5, [r5, #0]
 8012be6:	606c      	str	r4, [r5, #4]
 8012be8:	2000      	movs	r0, #0
 8012bea:	60ac      	str	r4, [r5, #8]
 8012bec:	b002      	add	sp, #8
 8012bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bf2:	2000      	movs	r0, #0
 8012bf4:	e7b0      	b.n	8012b58 <rcutils_string_map_reserve+0x20>
 8012bf6:	200a      	movs	r0, #10
 8012bf8:	e7ae      	b.n	8012b58 <rcutils_string_map_reserve+0x20>
 8012bfa:	200b      	movs	r0, #11
 8012bfc:	4770      	bx	lr
 8012bfe:	1f0b      	subs	r3, r1, #4
 8012c00:	4418      	add	r0, r3
 8012c02:	4413      	add	r3, r2
 8012c04:	3a04      	subs	r2, #4
 8012c06:	4417      	add	r7, r2
 8012c08:	2200      	movs	r2, #0
 8012c0a:	f843 2f04 	str.w	r2, [r3, #4]!
 8012c0e:	42bb      	cmp	r3, r7
 8012c10:	f840 2f04 	str.w	r2, [r0, #4]!
 8012c14:	d1f9      	bne.n	8012c0a <rcutils_string_map_reserve+0xd2>
 8012c16:	e7e7      	b.n	8012be8 <rcutils_string_map_reserve+0xb0>

08012c18 <rcutils_string_map_init>:
 8012c18:	b082      	sub	sp, #8
 8012c1a:	b570      	push	{r4, r5, r6, lr}
 8012c1c:	ac04      	add	r4, sp, #16
 8012c1e:	e884 000c 	stmia.w	r4, {r2, r3}
 8012c22:	b380      	cbz	r0, 8012c86 <rcutils_string_map_init+0x6e>
 8012c24:	6806      	ldr	r6, [r0, #0]
 8012c26:	4604      	mov	r4, r0
 8012c28:	b12e      	cbz	r6, 8012c36 <rcutils_string_map_init+0x1e>
 8012c2a:	251e      	movs	r5, #30
 8012c2c:	4628      	mov	r0, r5
 8012c2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012c32:	b002      	add	sp, #8
 8012c34:	4770      	bx	lr
 8012c36:	a804      	add	r0, sp, #16
 8012c38:	460d      	mov	r5, r1
 8012c3a:	f7f9 fc91 	bl	800c560 <rcutils_allocator_is_valid>
 8012c3e:	b310      	cbz	r0, 8012c86 <rcutils_string_map_init+0x6e>
 8012c40:	9b04      	ldr	r3, [sp, #16]
 8012c42:	2024      	movs	r0, #36	@ 0x24
 8012c44:	9908      	ldr	r1, [sp, #32]
 8012c46:	4798      	blx	r3
 8012c48:	6020      	str	r0, [r4, #0]
 8012c4a:	b310      	cbz	r0, 8012c92 <rcutils_string_map_init+0x7a>
 8012c4c:	f10d 0e10 	add.w	lr, sp, #16
 8012c50:	f100 0c10 	add.w	ip, r0, #16
 8012c54:	e9c0 6600 	strd	r6, r6, [r0]
 8012c58:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8012c5c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012c60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012c64:	f8de 3000 	ldr.w	r3, [lr]
 8012c68:	4629      	mov	r1, r5
 8012c6a:	4620      	mov	r0, r4
 8012c6c:	f8cc 3000 	str.w	r3, [ip]
 8012c70:	f7ff ff62 	bl	8012b38 <rcutils_string_map_reserve>
 8012c74:	4605      	mov	r5, r0
 8012c76:	2800      	cmp	r0, #0
 8012c78:	d0d8      	beq.n	8012c2c <rcutils_string_map_init+0x14>
 8012c7a:	9b05      	ldr	r3, [sp, #20]
 8012c7c:	9908      	ldr	r1, [sp, #32]
 8012c7e:	6820      	ldr	r0, [r4, #0]
 8012c80:	4798      	blx	r3
 8012c82:	6026      	str	r6, [r4, #0]
 8012c84:	e7d2      	b.n	8012c2c <rcutils_string_map_init+0x14>
 8012c86:	250b      	movs	r5, #11
 8012c88:	4628      	mov	r0, r5
 8012c8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012c8e:	b002      	add	sp, #8
 8012c90:	4770      	bx	lr
 8012c92:	250a      	movs	r5, #10
 8012c94:	e7ca      	b.n	8012c2c <rcutils_string_map_init+0x14>
 8012c96:	bf00      	nop

08012c98 <rcutils_string_map_fini>:
 8012c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c9c:	b082      	sub	sp, #8
 8012c9e:	2800      	cmp	r0, #0
 8012ca0:	d03a      	beq.n	8012d18 <rcutils_string_map_fini+0x80>
 8012ca2:	6804      	ldr	r4, [r0, #0]
 8012ca4:	4606      	mov	r6, r0
 8012ca6:	2c00      	cmp	r4, #0
 8012ca8:	d032      	beq.n	8012d10 <rcutils_string_map_fini+0x78>
 8012caa:	68a3      	ldr	r3, [r4, #8]
 8012cac:	b32b      	cbz	r3, 8012cfa <rcutils_string_map_fini+0x62>
 8012cae:	2500      	movs	r5, #0
 8012cb0:	6822      	ldr	r2, [r4, #0]
 8012cb2:	462f      	mov	r7, r5
 8012cb4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012cb8:	b1e0      	cbz	r0, 8012cf4 <rcutils_string_map_fini+0x5c>
 8012cba:	6a21      	ldr	r1, [r4, #32]
 8012cbc:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8012cc0:	9101      	str	r1, [sp, #4]
 8012cc2:	47c0      	blx	r8
 8012cc4:	9901      	ldr	r1, [sp, #4]
 8012cc6:	e9d4 3200 	ldrd	r3, r2, [r4]
 8012cca:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 8012cce:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012cd2:	47c0      	blx	r8
 8012cd4:	68e3      	ldr	r3, [r4, #12]
 8012cd6:	6862      	ldr	r2, [r4, #4]
 8012cd8:	3b01      	subs	r3, #1
 8012cda:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8012cde:	3501      	adds	r5, #1
 8012ce0:	60e3      	str	r3, [r4, #12]
 8012ce2:	6834      	ldr	r4, [r6, #0]
 8012ce4:	68a3      	ldr	r3, [r4, #8]
 8012ce6:	429d      	cmp	r5, r3
 8012ce8:	d207      	bcs.n	8012cfa <rcutils_string_map_fini+0x62>
 8012cea:	6822      	ldr	r2, [r4, #0]
 8012cec:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012cf0:	2800      	cmp	r0, #0
 8012cf2:	d1e2      	bne.n	8012cba <rcutils_string_map_fini+0x22>
 8012cf4:	3501      	adds	r5, #1
 8012cf6:	429d      	cmp	r5, r3
 8012cf8:	d3dc      	bcc.n	8012cb4 <rcutils_string_map_fini+0x1c>
 8012cfa:	2100      	movs	r1, #0
 8012cfc:	4630      	mov	r0, r6
 8012cfe:	f7ff ff1b 	bl	8012b38 <rcutils_string_map_reserve>
 8012d02:	4604      	mov	r4, r0
 8012d04:	b920      	cbnz	r0, 8012d10 <rcutils_string_map_fini+0x78>
 8012d06:	6830      	ldr	r0, [r6, #0]
 8012d08:	6943      	ldr	r3, [r0, #20]
 8012d0a:	6a01      	ldr	r1, [r0, #32]
 8012d0c:	4798      	blx	r3
 8012d0e:	6034      	str	r4, [r6, #0]
 8012d10:	4620      	mov	r0, r4
 8012d12:	b002      	add	sp, #8
 8012d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d18:	240b      	movs	r4, #11
 8012d1a:	4620      	mov	r0, r4
 8012d1c:	b002      	add	sp, #8
 8012d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d22:	bf00      	nop

08012d24 <rcutils_string_map_getn>:
 8012d24:	b378      	cbz	r0, 8012d86 <rcutils_string_map_getn+0x62>
 8012d26:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d2a:	f8d0 b000 	ldr.w	fp, [r0]
 8012d2e:	f1bb 0f00 	cmp.w	fp, #0
 8012d32:	d01f      	beq.n	8012d74 <rcutils_string_map_getn+0x50>
 8012d34:	fab1 f481 	clz	r4, r1
 8012d38:	4688      	mov	r8, r1
 8012d3a:	0964      	lsrs	r4, r4, #5
 8012d3c:	b1d1      	cbz	r1, 8012d74 <rcutils_string_map_getn+0x50>
 8012d3e:	f8db 7008 	ldr.w	r7, [fp, #8]
 8012d42:	f8db 6000 	ldr.w	r6, [fp]
 8012d46:	b1af      	cbz	r7, 8012d74 <rcutils_string_map_getn+0x50>
 8012d48:	4691      	mov	r9, r2
 8012d4a:	3e04      	subs	r6, #4
 8012d4c:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8012d50:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8012d54:	3401      	adds	r4, #1
 8012d56:	4628      	mov	r0, r5
 8012d58:	b155      	cbz	r5, 8012d70 <rcutils_string_map_getn+0x4c>
 8012d5a:	f7ed fa7b 	bl	8000254 <strlen>
 8012d5e:	4602      	mov	r2, r0
 8012d60:	4629      	mov	r1, r5
 8012d62:	4640      	mov	r0, r8
 8012d64:	454a      	cmp	r2, r9
 8012d66:	bf38      	it	cc
 8012d68:	464a      	movcc	r2, r9
 8012d6a:	f003 fd0e 	bl	801678a <strncmp>
 8012d6e:	b120      	cbz	r0, 8012d7a <rcutils_string_map_getn+0x56>
 8012d70:	42a7      	cmp	r7, r4
 8012d72:	d1eb      	bne.n	8012d4c <rcutils_string_map_getn+0x28>
 8012d74:	2000      	movs	r0, #0
 8012d76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d7a:	f8db 3004 	ldr.w	r3, [fp, #4]
 8012d7e:	f853 000a 	ldr.w	r0, [r3, sl]
 8012d82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d86:	4770      	bx	lr

08012d88 <rcutils_system_time_now>:
 8012d88:	b300      	cbz	r0, 8012dcc <rcutils_system_time_now+0x44>
 8012d8a:	b570      	push	{r4, r5, r6, lr}
 8012d8c:	b084      	sub	sp, #16
 8012d8e:	4604      	mov	r4, r0
 8012d90:	2001      	movs	r0, #1
 8012d92:	4669      	mov	r1, sp
 8012d94:	f7ef fd10 	bl	80027b8 <clock_gettime>
 8012d98:	e9dd 3100 	ldrd	r3, r1, [sp]
 8012d9c:	2900      	cmp	r1, #0
 8012d9e:	db12      	blt.n	8012dc6 <rcutils_system_time_now+0x3e>
 8012da0:	ea53 0201 	orrs.w	r2, r3, r1
 8012da4:	9d02      	ldr	r5, [sp, #8]
 8012da6:	d101      	bne.n	8012dac <rcutils_system_time_now+0x24>
 8012da8:	2d00      	cmp	r5, #0
 8012daa:	db0c      	blt.n	8012dc6 <rcutils_system_time_now+0x3e>
 8012dac:	4e08      	ldr	r6, [pc, #32]	@ (8012dd0 <rcutils_system_time_now+0x48>)
 8012dae:	2000      	movs	r0, #0
 8012db0:	fba3 3206 	umull	r3, r2, r3, r6
 8012db4:	195b      	adds	r3, r3, r5
 8012db6:	fb06 2201 	mla	r2, r6, r1, r2
 8012dba:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8012dbe:	e9c4 3200 	strd	r3, r2, [r4]
 8012dc2:	b004      	add	sp, #16
 8012dc4:	bd70      	pop	{r4, r5, r6, pc}
 8012dc6:	2002      	movs	r0, #2
 8012dc8:	b004      	add	sp, #16
 8012dca:	bd70      	pop	{r4, r5, r6, pc}
 8012dcc:	200b      	movs	r0, #11
 8012dce:	4770      	bx	lr
 8012dd0:	3b9aca00 	.word	0x3b9aca00

08012dd4 <rcutils_steady_time_now>:
 8012dd4:	b300      	cbz	r0, 8012e18 <rcutils_steady_time_now+0x44>
 8012dd6:	b570      	push	{r4, r5, r6, lr}
 8012dd8:	b084      	sub	sp, #16
 8012dda:	4604      	mov	r4, r0
 8012ddc:	2000      	movs	r0, #0
 8012dde:	4669      	mov	r1, sp
 8012de0:	f7ef fcea 	bl	80027b8 <clock_gettime>
 8012de4:	e9dd 3100 	ldrd	r3, r1, [sp]
 8012de8:	2900      	cmp	r1, #0
 8012dea:	db12      	blt.n	8012e12 <rcutils_steady_time_now+0x3e>
 8012dec:	ea53 0201 	orrs.w	r2, r3, r1
 8012df0:	9d02      	ldr	r5, [sp, #8]
 8012df2:	d101      	bne.n	8012df8 <rcutils_steady_time_now+0x24>
 8012df4:	2d00      	cmp	r5, #0
 8012df6:	db0c      	blt.n	8012e12 <rcutils_steady_time_now+0x3e>
 8012df8:	4e08      	ldr	r6, [pc, #32]	@ (8012e1c <rcutils_steady_time_now+0x48>)
 8012dfa:	2000      	movs	r0, #0
 8012dfc:	fba3 3206 	umull	r3, r2, r3, r6
 8012e00:	195b      	adds	r3, r3, r5
 8012e02:	fb06 2201 	mla	r2, r6, r1, r2
 8012e06:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8012e0a:	e9c4 3200 	strd	r3, r2, [r4]
 8012e0e:	b004      	add	sp, #16
 8012e10:	bd70      	pop	{r4, r5, r6, pc}
 8012e12:	2002      	movs	r0, #2
 8012e14:	b004      	add	sp, #16
 8012e16:	bd70      	pop	{r4, r5, r6, pc}
 8012e18:	200b      	movs	r0, #11
 8012e1a:	4770      	bx	lr
 8012e1c:	3b9aca00 	.word	0x3b9aca00

08012e20 <rmw_get_zero_initialized_context>:
 8012e20:	b510      	push	{r4, lr}
 8012e22:	4604      	mov	r4, r0
 8012e24:	3010      	adds	r0, #16
 8012e26:	f000 f80f 	bl	8012e48 <rmw_get_zero_initialized_init_options>
 8012e2a:	2300      	movs	r3, #0
 8012e2c:	4620      	mov	r0, r4
 8012e2e:	60a3      	str	r3, [r4, #8]
 8012e30:	64a3      	str	r3, [r4, #72]	@ 0x48
 8012e32:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8012e34:	ed9f 7b02 	vldr	d7, [pc, #8]	@ 8012e40 <rmw_get_zero_initialized_context+0x20>
 8012e38:	ed84 7b00 	vstr	d7, [r4]
 8012e3c:	bd10      	pop	{r4, pc}
 8012e3e:	bf00      	nop
	...

08012e48 <rmw_get_zero_initialized_init_options>:
 8012e48:	b510      	push	{r4, lr}
 8012e4a:	4604      	mov	r4, r0
 8012e4c:	2238      	movs	r2, #56	@ 0x38
 8012e4e:	2100      	movs	r1, #0
 8012e50:	f003 fc86 	bl	8016760 <memset>
 8012e54:	f104 0010 	add.w	r0, r4, #16
 8012e58:	f000 f806 	bl	8012e68 <rmw_get_default_security_options>
 8012e5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012e60:	4620      	mov	r0, r4
 8012e62:	60e3      	str	r3, [r4, #12]
 8012e64:	bd10      	pop	{r4, pc}
 8012e66:	bf00      	nop

08012e68 <rmw_get_default_security_options>:
 8012e68:	2200      	movs	r2, #0
 8012e6a:	7002      	strb	r2, [r0, #0]
 8012e6c:	6042      	str	r2, [r0, #4]
 8012e6e:	4770      	bx	lr

08012e70 <rmw_validate_full_topic_name>:
 8012e70:	2800      	cmp	r0, #0
 8012e72:	d05d      	beq.n	8012f30 <rmw_validate_full_topic_name+0xc0>
 8012e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e78:	460d      	mov	r5, r1
 8012e7a:	2900      	cmp	r1, #0
 8012e7c:	d05a      	beq.n	8012f34 <rmw_validate_full_topic_name+0xc4>
 8012e7e:	4604      	mov	r4, r0
 8012e80:	4616      	mov	r6, r2
 8012e82:	f7ed f9e7 	bl	8000254 <strlen>
 8012e86:	b150      	cbz	r0, 8012e9e <rmw_validate_full_topic_name+0x2e>
 8012e88:	7823      	ldrb	r3, [r4, #0]
 8012e8a:	2b2f      	cmp	r3, #47	@ 0x2f
 8012e8c:	d00e      	beq.n	8012eac <rmw_validate_full_topic_name+0x3c>
 8012e8e:	2302      	movs	r3, #2
 8012e90:	602b      	str	r3, [r5, #0]
 8012e92:	b146      	cbz	r6, 8012ea6 <rmw_validate_full_topic_name+0x36>
 8012e94:	2300      	movs	r3, #0
 8012e96:	4618      	mov	r0, r3
 8012e98:	6033      	str	r3, [r6, #0]
 8012e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e9e:	2301      	movs	r3, #1
 8012ea0:	602b      	str	r3, [r5, #0]
 8012ea2:	2e00      	cmp	r6, #0
 8012ea4:	d1f6      	bne.n	8012e94 <rmw_validate_full_topic_name+0x24>
 8012ea6:	2000      	movs	r0, #0
 8012ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012eac:	1e43      	subs	r3, r0, #1
 8012eae:	5ce2      	ldrb	r2, [r4, r3]
 8012eb0:	2a2f      	cmp	r2, #47	@ 0x2f
 8012eb2:	d041      	beq.n	8012f38 <rmw_validate_full_topic_name+0xc8>
 8012eb4:	1e62      	subs	r2, r4, #1
 8012eb6:	f1c4 0e01 	rsb	lr, r4, #1
 8012eba:	eb02 0800 	add.w	r8, r2, r0
 8012ebe:	eb0e 0702 	add.w	r7, lr, r2
 8012ec2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8012ec6:	f023 0120 	bic.w	r1, r3, #32
 8012eca:	f1a3 0c2f 	sub.w	ip, r3, #47	@ 0x2f
 8012ece:	3941      	subs	r1, #65	@ 0x41
 8012ed0:	2919      	cmp	r1, #25
 8012ed2:	d90f      	bls.n	8012ef4 <rmw_validate_full_topic_name+0x84>
 8012ed4:	f1bc 0f0a 	cmp.w	ip, #10
 8012ed8:	d90c      	bls.n	8012ef4 <rmw_validate_full_topic_name+0x84>
 8012eda:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
 8012ede:	fab3 f383 	clz	r3, r3
 8012ee2:	095b      	lsrs	r3, r3, #5
 8012ee4:	b933      	cbnz	r3, 8012ef4 <rmw_validate_full_topic_name+0x84>
 8012ee6:	2204      	movs	r2, #4
 8012ee8:	602a      	str	r2, [r5, #0]
 8012eea:	2e00      	cmp	r6, #0
 8012eec:	d0db      	beq.n	8012ea6 <rmw_validate_full_topic_name+0x36>
 8012eee:	4618      	mov	r0, r3
 8012ef0:	6037      	str	r7, [r6, #0]
 8012ef2:	e7d2      	b.n	8012e9a <rmw_validate_full_topic_name+0x2a>
 8012ef4:	4542      	cmp	r2, r8
 8012ef6:	d1e2      	bne.n	8012ebe <rmw_validate_full_topic_name+0x4e>
 8012ef8:	2301      	movs	r3, #1
 8012efa:	4f1a      	ldr	r7, [pc, #104]	@ (8012f64 <rmw_validate_full_topic_name+0xf4>)
 8012efc:	e004      	b.n	8012f08 <rmw_validate_full_topic_name+0x98>
 8012efe:	4298      	cmp	r0, r3
 8012f00:	f104 0401 	add.w	r4, r4, #1
 8012f04:	4613      	mov	r3, r2
 8012f06:	d91c      	bls.n	8012f42 <rmw_validate_full_topic_name+0xd2>
 8012f08:	4298      	cmp	r0, r3
 8012f0a:	f103 0201 	add.w	r2, r3, #1
 8012f0e:	d0f6      	beq.n	8012efe <rmw_validate_full_topic_name+0x8e>
 8012f10:	7821      	ldrb	r1, [r4, #0]
 8012f12:	292f      	cmp	r1, #47	@ 0x2f
 8012f14:	d1f3      	bne.n	8012efe <rmw_validate_full_topic_name+0x8e>
 8012f16:	7861      	ldrb	r1, [r4, #1]
 8012f18:	292f      	cmp	r1, #47	@ 0x2f
 8012f1a:	d01e      	beq.n	8012f5a <rmw_validate_full_topic_name+0xea>
 8012f1c:	5dc9      	ldrb	r1, [r1, r7]
 8012f1e:	0749      	lsls	r1, r1, #29
 8012f20:	d5ed      	bpl.n	8012efe <rmw_validate_full_topic_name+0x8e>
 8012f22:	2206      	movs	r2, #6
 8012f24:	602a      	str	r2, [r5, #0]
 8012f26:	2e00      	cmp	r6, #0
 8012f28:	d0bd      	beq.n	8012ea6 <rmw_validate_full_topic_name+0x36>
 8012f2a:	2000      	movs	r0, #0
 8012f2c:	6033      	str	r3, [r6, #0]
 8012f2e:	e7b4      	b.n	8012e9a <rmw_validate_full_topic_name+0x2a>
 8012f30:	200b      	movs	r0, #11
 8012f32:	4770      	bx	lr
 8012f34:	200b      	movs	r0, #11
 8012f36:	e7b0      	b.n	8012e9a <rmw_validate_full_topic_name+0x2a>
 8012f38:	2203      	movs	r2, #3
 8012f3a:	602a      	str	r2, [r5, #0]
 8012f3c:	2e00      	cmp	r6, #0
 8012f3e:	d1f4      	bne.n	8012f2a <rmw_validate_full_topic_name+0xba>
 8012f40:	e7b1      	b.n	8012ea6 <rmw_validate_full_topic_name+0x36>
 8012f42:	28f7      	cmp	r0, #247	@ 0xf7
 8012f44:	d803      	bhi.n	8012f4e <rmw_validate_full_topic_name+0xde>
 8012f46:	2300      	movs	r3, #0
 8012f48:	4618      	mov	r0, r3
 8012f4a:	602b      	str	r3, [r5, #0]
 8012f4c:	e7a5      	b.n	8012e9a <rmw_validate_full_topic_name+0x2a>
 8012f4e:	2307      	movs	r3, #7
 8012f50:	602b      	str	r3, [r5, #0]
 8012f52:	2e00      	cmp	r6, #0
 8012f54:	d0a7      	beq.n	8012ea6 <rmw_validate_full_topic_name+0x36>
 8012f56:	23f6      	movs	r3, #246	@ 0xf6
 8012f58:	e7e7      	b.n	8012f2a <rmw_validate_full_topic_name+0xba>
 8012f5a:	2205      	movs	r2, #5
 8012f5c:	602a      	str	r2, [r5, #0]
 8012f5e:	2e00      	cmp	r6, #0
 8012f60:	d1e3      	bne.n	8012f2a <rmw_validate_full_topic_name+0xba>
 8012f62:	e7a0      	b.n	8012ea6 <rmw_validate_full_topic_name+0x36>
 8012f64:	080182b3 	.word	0x080182b3

08012f68 <rmw_validate_namespace_with_size>:
 8012f68:	2800      	cmp	r0, #0
 8012f6a:	d043      	beq.n	8012ff4 <rmw_validate_namespace_with_size+0x8c>
 8012f6c:	b570      	push	{r4, r5, r6, lr}
 8012f6e:	4614      	mov	r4, r2
 8012f70:	b0c2      	sub	sp, #264	@ 0x108
 8012f72:	b32a      	cbz	r2, 8012fc0 <rmw_validate_namespace_with_size+0x58>
 8012f74:	2901      	cmp	r1, #1
 8012f76:	460d      	mov	r5, r1
 8012f78:	461e      	mov	r6, r3
 8012f7a:	d102      	bne.n	8012f82 <rmw_validate_namespace_with_size+0x1a>
 8012f7c:	7803      	ldrb	r3, [r0, #0]
 8012f7e:	2b2f      	cmp	r3, #47	@ 0x2f
 8012f80:	d012      	beq.n	8012fa8 <rmw_validate_namespace_with_size+0x40>
 8012f82:	aa01      	add	r2, sp, #4
 8012f84:	4669      	mov	r1, sp
 8012f86:	f7ff ff73 	bl	8012e70 <rmw_validate_full_topic_name>
 8012f8a:	b980      	cbnz	r0, 8012fae <rmw_validate_namespace_with_size+0x46>
 8012f8c:	9a00      	ldr	r2, [sp, #0]
 8012f8e:	b14a      	cbz	r2, 8012fa4 <rmw_validate_namespace_with_size+0x3c>
 8012f90:	2a07      	cmp	r2, #7
 8012f92:	d007      	beq.n	8012fa4 <rmw_validate_namespace_with_size+0x3c>
 8012f94:	1e53      	subs	r3, r2, #1
 8012f96:	2b05      	cmp	r3, #5
 8012f98:	d82e      	bhi.n	8012ff8 <rmw_validate_namespace_with_size+0x90>
 8012f9a:	e8df f003 	tbb	[pc, r3]
 8012f9e:	1f1c      	.short	0x1f1c
 8012fa0:	14282522 	.word	0x14282522
 8012fa4:	2df5      	cmp	r5, #245	@ 0xf5
 8012fa6:	d804      	bhi.n	8012fb2 <rmw_validate_namespace_with_size+0x4a>
 8012fa8:	2300      	movs	r3, #0
 8012faa:	4618      	mov	r0, r3
 8012fac:	6023      	str	r3, [r4, #0]
 8012fae:	b042      	add	sp, #264	@ 0x108
 8012fb0:	bd70      	pop	{r4, r5, r6, pc}
 8012fb2:	2307      	movs	r3, #7
 8012fb4:	6023      	str	r3, [r4, #0]
 8012fb6:	2e00      	cmp	r6, #0
 8012fb8:	d0f9      	beq.n	8012fae <rmw_validate_namespace_with_size+0x46>
 8012fba:	23f4      	movs	r3, #244	@ 0xf4
 8012fbc:	6033      	str	r3, [r6, #0]
 8012fbe:	e7f6      	b.n	8012fae <rmw_validate_namespace_with_size+0x46>
 8012fc0:	200b      	movs	r0, #11
 8012fc2:	b042      	add	sp, #264	@ 0x108
 8012fc4:	bd70      	pop	{r4, r5, r6, pc}
 8012fc6:	2306      	movs	r3, #6
 8012fc8:	6023      	str	r3, [r4, #0]
 8012fca:	2e00      	cmp	r6, #0
 8012fcc:	d0ef      	beq.n	8012fae <rmw_validate_namespace_with_size+0x46>
 8012fce:	9b01      	ldr	r3, [sp, #4]
 8012fd0:	6033      	str	r3, [r6, #0]
 8012fd2:	b042      	add	sp, #264	@ 0x108
 8012fd4:	bd70      	pop	{r4, r5, r6, pc}
 8012fd6:	2301      	movs	r3, #1
 8012fd8:	6023      	str	r3, [r4, #0]
 8012fda:	e7f6      	b.n	8012fca <rmw_validate_namespace_with_size+0x62>
 8012fdc:	2302      	movs	r3, #2
 8012fde:	6023      	str	r3, [r4, #0]
 8012fe0:	e7f3      	b.n	8012fca <rmw_validate_namespace_with_size+0x62>
 8012fe2:	2303      	movs	r3, #3
 8012fe4:	6023      	str	r3, [r4, #0]
 8012fe6:	e7f0      	b.n	8012fca <rmw_validate_namespace_with_size+0x62>
 8012fe8:	2304      	movs	r3, #4
 8012fea:	6023      	str	r3, [r4, #0]
 8012fec:	e7ed      	b.n	8012fca <rmw_validate_namespace_with_size+0x62>
 8012fee:	2305      	movs	r3, #5
 8012ff0:	6023      	str	r3, [r4, #0]
 8012ff2:	e7ea      	b.n	8012fca <rmw_validate_namespace_with_size+0x62>
 8012ff4:	200b      	movs	r0, #11
 8012ff6:	4770      	bx	lr
 8012ff8:	4613      	mov	r3, r2
 8012ffa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012ffe:	4a03      	ldr	r2, [pc, #12]	@ (801300c <rmw_validate_namespace_with_size+0xa4>)
 8013000:	a802      	add	r0, sp, #8
 8013002:	f7ff fd07 	bl	8012a14 <rcutils_snprintf>
 8013006:	2001      	movs	r0, #1
 8013008:	e7d1      	b.n	8012fae <rmw_validate_namespace_with_size+0x46>
 801300a:	bf00      	nop
 801300c:	08017a94 	.word	0x08017a94

08013010 <rmw_validate_namespace>:
 8013010:	b168      	cbz	r0, 801302e <rmw_validate_namespace+0x1e>
 8013012:	b570      	push	{r4, r5, r6, lr}
 8013014:	460d      	mov	r5, r1
 8013016:	4616      	mov	r6, r2
 8013018:	4604      	mov	r4, r0
 801301a:	f7ed f91b 	bl	8000254 <strlen>
 801301e:	4633      	mov	r3, r6
 8013020:	4601      	mov	r1, r0
 8013022:	462a      	mov	r2, r5
 8013024:	4620      	mov	r0, r4
 8013026:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801302a:	f7ff bf9d 	b.w	8012f68 <rmw_validate_namespace_with_size>
 801302e:	200b      	movs	r0, #11
 8013030:	4770      	bx	lr
 8013032:	bf00      	nop

08013034 <rmw_namespace_validation_result_string>:
 8013034:	2807      	cmp	r0, #7
 8013036:	d803      	bhi.n	8013040 <rmw_namespace_validation_result_string+0xc>
 8013038:	4b02      	ldr	r3, [pc, #8]	@ (8013044 <rmw_namespace_validation_result_string+0x10>)
 801303a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801303e:	4770      	bx	lr
 8013040:	4801      	ldr	r0, [pc, #4]	@ (8013048 <rmw_namespace_validation_result_string+0x14>)
 8013042:	4770      	bx	lr
 8013044:	08017f94 	.word	0x08017f94
 8013048:	08017ae4 	.word	0x08017ae4

0801304c <rmw_validate_node_name>:
 801304c:	2800      	cmp	r0, #0
 801304e:	d042      	beq.n	80130d6 <rmw_validate_node_name+0x8a>
 8013050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013054:	460d      	mov	r5, r1
 8013056:	2900      	cmp	r1, #0
 8013058:	d03f      	beq.n	80130da <rmw_validate_node_name+0x8e>
 801305a:	4604      	mov	r4, r0
 801305c:	4616      	mov	r6, r2
 801305e:	f7ed f8f9 	bl	8000254 <strlen>
 8013062:	b310      	cbz	r0, 80130aa <rmw_validate_node_name+0x5e>
 8013064:	1e63      	subs	r3, r4, #1
 8013066:	f1c4 0101 	rsb	r1, r4, #1
 801306a:	eb03 0800 	add.w	r8, r3, r0
 801306e:	18cf      	adds	r7, r1, r3
 8013070:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8013074:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8013078:	f02e 0c20 	bic.w	ip, lr, #32
 801307c:	2a09      	cmp	r2, #9
 801307e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8013082:	d905      	bls.n	8013090 <rmw_validate_node_name+0x44>
 8013084:	f1bc 0f19 	cmp.w	ip, #25
 8013088:	d902      	bls.n	8013090 <rmw_validate_node_name+0x44>
 801308a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 801308e:	d114      	bne.n	80130ba <rmw_validate_node_name+0x6e>
 8013090:	4598      	cmp	r8, r3
 8013092:	d1ec      	bne.n	801306e <rmw_validate_node_name+0x22>
 8013094:	7822      	ldrb	r2, [r4, #0]
 8013096:	4b16      	ldr	r3, [pc, #88]	@ (80130f0 <rmw_validate_node_name+0xa4>)
 8013098:	5cd3      	ldrb	r3, [r2, r3]
 801309a:	f013 0304 	ands.w	r3, r3, #4
 801309e:	d113      	bne.n	80130c8 <rmw_validate_node_name+0x7c>
 80130a0:	28ff      	cmp	r0, #255	@ 0xff
 80130a2:	d81c      	bhi.n	80130de <rmw_validate_node_name+0x92>
 80130a4:	4618      	mov	r0, r3
 80130a6:	602b      	str	r3, [r5, #0]
 80130a8:	e00c      	b.n	80130c4 <rmw_validate_node_name+0x78>
 80130aa:	2301      	movs	r3, #1
 80130ac:	602b      	str	r3, [r5, #0]
 80130ae:	b17e      	cbz	r6, 80130d0 <rmw_validate_node_name+0x84>
 80130b0:	2300      	movs	r3, #0
 80130b2:	4618      	mov	r0, r3
 80130b4:	6033      	str	r3, [r6, #0]
 80130b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130ba:	2302      	movs	r3, #2
 80130bc:	602b      	str	r3, [r5, #0]
 80130be:	b13e      	cbz	r6, 80130d0 <rmw_validate_node_name+0x84>
 80130c0:	2000      	movs	r0, #0
 80130c2:	6037      	str	r7, [r6, #0]
 80130c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130c8:	2303      	movs	r3, #3
 80130ca:	602b      	str	r3, [r5, #0]
 80130cc:	2e00      	cmp	r6, #0
 80130ce:	d1ef      	bne.n	80130b0 <rmw_validate_node_name+0x64>
 80130d0:	2000      	movs	r0, #0
 80130d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130d6:	200b      	movs	r0, #11
 80130d8:	4770      	bx	lr
 80130da:	200b      	movs	r0, #11
 80130dc:	e7f2      	b.n	80130c4 <rmw_validate_node_name+0x78>
 80130de:	2204      	movs	r2, #4
 80130e0:	602a      	str	r2, [r5, #0]
 80130e2:	2e00      	cmp	r6, #0
 80130e4:	d0f4      	beq.n	80130d0 <rmw_validate_node_name+0x84>
 80130e6:	22fe      	movs	r2, #254	@ 0xfe
 80130e8:	4618      	mov	r0, r3
 80130ea:	6032      	str	r2, [r6, #0]
 80130ec:	e7ea      	b.n	80130c4 <rmw_validate_node_name+0x78>
 80130ee:	bf00      	nop
 80130f0:	080182b3 	.word	0x080182b3

080130f4 <rmw_node_name_validation_result_string>:
 80130f4:	2804      	cmp	r0, #4
 80130f6:	d803      	bhi.n	8013100 <rmw_node_name_validation_result_string+0xc>
 80130f8:	4b02      	ldr	r3, [pc, #8]	@ (8013104 <rmw_node_name_validation_result_string+0x10>)
 80130fa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80130fe:	4770      	bx	lr
 8013100:	4801      	ldr	r0, [pc, #4]	@ (8013108 <rmw_node_name_validation_result_string+0x14>)
 8013102:	4770      	bx	lr
 8013104:	08017fb4 	.word	0x08017fb4
 8013108:	08017c8c 	.word	0x08017c8c

0801310c <get_memory>:
 801310c:	4603      	mov	r3, r0
 801310e:	6840      	ldr	r0, [r0, #4]
 8013110:	b158      	cbz	r0, 801312a <get_memory+0x1e>
 8013112:	6842      	ldr	r2, [r0, #4]
 8013114:	605a      	str	r2, [r3, #4]
 8013116:	b10a      	cbz	r2, 801311c <get_memory+0x10>
 8013118:	2100      	movs	r1, #0
 801311a:	6011      	str	r1, [r2, #0]
 801311c:	681a      	ldr	r2, [r3, #0]
 801311e:	6042      	str	r2, [r0, #4]
 8013120:	b102      	cbz	r2, 8013124 <get_memory+0x18>
 8013122:	6010      	str	r0, [r2, #0]
 8013124:	2200      	movs	r2, #0
 8013126:	6002      	str	r2, [r0, #0]
 8013128:	6018      	str	r0, [r3, #0]
 801312a:	4770      	bx	lr

0801312c <put_memory>:
 801312c:	680b      	ldr	r3, [r1, #0]
 801312e:	b10b      	cbz	r3, 8013134 <put_memory+0x8>
 8013130:	684a      	ldr	r2, [r1, #4]
 8013132:	605a      	str	r2, [r3, #4]
 8013134:	684a      	ldr	r2, [r1, #4]
 8013136:	b102      	cbz	r2, 801313a <put_memory+0xe>
 8013138:	6013      	str	r3, [r2, #0]
 801313a:	6803      	ldr	r3, [r0, #0]
 801313c:	428b      	cmp	r3, r1
 801313e:	6843      	ldr	r3, [r0, #4]
 8013140:	bf08      	it	eq
 8013142:	6002      	streq	r2, [r0, #0]
 8013144:	604b      	str	r3, [r1, #4]
 8013146:	b103      	cbz	r3, 801314a <put_memory+0x1e>
 8013148:	6019      	str	r1, [r3, #0]
 801314a:	2300      	movs	r3, #0
 801314c:	600b      	str	r3, [r1, #0]
 801314e:	6041      	str	r1, [r0, #4]
 8013150:	4770      	bx	lr
 8013152:	bf00      	nop

08013154 <rmw_get_implementation_identifier>:
 8013154:	4b01      	ldr	r3, [pc, #4]	@ (801315c <rmw_get_implementation_identifier+0x8>)
 8013156:	6818      	ldr	r0, [r3, #0]
 8013158:	4770      	bx	lr
 801315a:	bf00      	nop
 801315c:	08017fc8 	.word	0x08017fc8

08013160 <rmw_init_options_init>:
 8013160:	b084      	sub	sp, #16
 8013162:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013164:	b083      	sub	sp, #12
 8013166:	ad09      	add	r5, sp, #36	@ 0x24
 8013168:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 801316c:	b130      	cbz	r0, 801317c <rmw_init_options_init+0x1c>
 801316e:	4604      	mov	r4, r0
 8013170:	4628      	mov	r0, r5
 8013172:	f7f9 f9f5 	bl	800c560 <rcutils_allocator_is_valid>
 8013176:	b108      	cbz	r0, 801317c <rmw_init_options_init+0x1c>
 8013178:	68a6      	ldr	r6, [r4, #8]
 801317a:	b12e      	cbz	r6, 8013188 <rmw_init_options_init+0x28>
 801317c:	200b      	movs	r0, #11
 801317e:	b003      	add	sp, #12
 8013180:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013184:	b004      	add	sp, #16
 8013186:	4770      	bx	lr
 8013188:	2200      	movs	r2, #0
 801318a:	2300      	movs	r3, #0
 801318c:	f104 0c20 	add.w	ip, r4, #32
 8013190:	466f      	mov	r7, sp
 8013192:	e9c4 2300 	strd	r2, r3, [r4]
 8013196:	4b1f      	ldr	r3, [pc, #124]	@ (8013214 <rmw_init_options_init+0xb4>)
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	60a3      	str	r3, [r4, #8]
 801319c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801319e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80131a2:	682b      	ldr	r3, [r5, #0]
 80131a4:	4638      	mov	r0, r7
 80131a6:	f8cc 3000 	str.w	r3, [ip]
 80131aa:	61e6      	str	r6, [r4, #28]
 80131ac:	60e6      	str	r6, [r4, #12]
 80131ae:	f7ff fe5b 	bl	8012e68 <rmw_get_default_security_options>
 80131b2:	f104 0310 	add.w	r3, r4, #16
 80131b6:	2203      	movs	r2, #3
 80131b8:	e897 0003 	ldmia.w	r7, {r0, r1}
 80131bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80131c0:	4815      	ldr	r0, [pc, #84]	@ (8013218 <rmw_init_options_init+0xb8>)
 80131c2:	4916      	ldr	r1, [pc, #88]	@ (801321c <rmw_init_options_init+0xbc>)
 80131c4:	7626      	strb	r6, [r4, #24]
 80131c6:	f7f9 fcf1 	bl	800cbac <rmw_uxrce_init_init_options_impl_memory>
 80131ca:	4813      	ldr	r0, [pc, #76]	@ (8013218 <rmw_init_options_init+0xb8>)
 80131cc:	f7ff ff9e 	bl	801310c <get_memory>
 80131d0:	b1f0      	cbz	r0, 8013210 <rmw_init_options_init+0xb0>
 80131d2:	4a13      	ldr	r2, [pc, #76]	@ (8013220 <rmw_init_options_init+0xc0>)
 80131d4:	6883      	ldr	r3, [r0, #8]
 80131d6:	6851      	ldr	r1, [r2, #4]
 80131d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80131da:	7810      	ldrb	r0, [r2, #0]
 80131dc:	6159      	str	r1, [r3, #20]
 80131de:	68d1      	ldr	r1, [r2, #12]
 80131e0:	7418      	strb	r0, [r3, #16]
 80131e2:	61d9      	str	r1, [r3, #28]
 80131e4:	6911      	ldr	r1, [r2, #16]
 80131e6:	6219      	str	r1, [r3, #32]
 80131e8:	6951      	ldr	r1, [r2, #20]
 80131ea:	6892      	ldr	r2, [r2, #8]
 80131ec:	6259      	str	r1, [r3, #36]	@ 0x24
 80131ee:	619a      	str	r2, [r3, #24]
 80131f0:	f7fd fc08 	bl	8010a04 <uxr_nanos>
 80131f4:	f002 ff08 	bl	8016008 <srand>
 80131f8:	f002 ff34 	bl	8016064 <rand>
 80131fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80131fe:	6298      	str	r0, [r3, #40]	@ 0x28
 8013200:	2800      	cmp	r0, #0
 8013202:	d0f9      	beq.n	80131f8 <rmw_init_options_init+0x98>
 8013204:	2000      	movs	r0, #0
 8013206:	b003      	add	sp, #12
 8013208:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801320c:	b004      	add	sp, #16
 801320e:	4770      	bx	lr
 8013210:	2001      	movs	r0, #1
 8013212:	e7b4      	b.n	801317e <rmw_init_options_init+0x1e>
 8013214:	08017fc8 	.word	0x08017fc8
 8013218:	2000e994 	.word	0x2000e994
 801321c:	2000a230 	.word	0x2000a230
 8013220:	2000a0bc 	.word	0x2000a0bc

08013224 <rmw_init_options_copy>:
 8013224:	b570      	push	{r4, r5, r6, lr}
 8013226:	b088      	sub	sp, #32
 8013228:	b160      	cbz	r0, 8013244 <rmw_init_options_copy+0x20>
 801322a:	460d      	mov	r5, r1
 801322c:	b151      	cbz	r1, 8013244 <rmw_init_options_copy+0x20>
 801322e:	4604      	mov	r4, r0
 8013230:	6880      	ldr	r0, [r0, #8]
 8013232:	b128      	cbz	r0, 8013240 <rmw_init_options_copy+0x1c>
 8013234:	4b34      	ldr	r3, [pc, #208]	@ (8013308 <rmw_init_options_copy+0xe4>)
 8013236:	6819      	ldr	r1, [r3, #0]
 8013238:	f7ed f802 	bl	8000240 <strcmp>
 801323c:	2800      	cmp	r0, #0
 801323e:	d157      	bne.n	80132f0 <rmw_init_options_copy+0xcc>
 8013240:	68ab      	ldr	r3, [r5, #8]
 8013242:	b11b      	cbz	r3, 801324c <rmw_init_options_copy+0x28>
 8013244:	240b      	movs	r4, #11
 8013246:	4620      	mov	r0, r4
 8013248:	b008      	add	sp, #32
 801324a:	bd70      	pop	{r4, r5, r6, pc}
 801324c:	4623      	mov	r3, r4
 801324e:	462a      	mov	r2, r5
 8013250:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8013254:	f8d3 e000 	ldr.w	lr, [r3]
 8013258:	3310      	adds	r3, #16
 801325a:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 801325e:	3210      	adds	r2, #16
 8013260:	f853 0c08 	ldr.w	r0, [r3, #-8]
 8013264:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8013268:	42b3      	cmp	r3, r6
 801326a:	f842 ec10 	str.w	lr, [r2, #-16]
 801326e:	f842 cc0c 	str.w	ip, [r2, #-12]
 8013272:	f842 0c08 	str.w	r0, [r2, #-8]
 8013276:	f842 1c04 	str.w	r1, [r2, #-4]
 801327a:	d1eb      	bne.n	8013254 <rmw_init_options_copy+0x30>
 801327c:	6819      	ldr	r1, [r3, #0]
 801327e:	f104 0e20 	add.w	lr, r4, #32
 8013282:	685b      	ldr	r3, [r3, #4]
 8013284:	f10d 0c0c 	add.w	ip, sp, #12
 8013288:	6011      	str	r1, [r2, #0]
 801328a:	6053      	str	r3, [r2, #4]
 801328c:	4666      	mov	r6, ip
 801328e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013292:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013296:	f8de 3000 	ldr.w	r3, [lr]
 801329a:	4630      	mov	r0, r6
 801329c:	f8cc 3000 	str.w	r3, [ip]
 80132a0:	f7f9 f95e 	bl	800c560 <rcutils_allocator_is_valid>
 80132a4:	2800      	cmp	r0, #0
 80132a6:	d0cd      	beq.n	8013244 <rmw_init_options_copy+0x20>
 80132a8:	ab08      	add	r3, sp, #32
 80132aa:	e913 0003 	ldmdb	r3, {r0, r1}
 80132ae:	e88d 0003 	stmia.w	sp, {r0, r1}
 80132b2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80132b6:	69e0      	ldr	r0, [r4, #28]
 80132b8:	f7ff fbfa 	bl	8012ab0 <rcutils_strdup>
 80132bc:	61e8      	str	r0, [r5, #28]
 80132be:	69e3      	ldr	r3, [r4, #28]
 80132c0:	b103      	cbz	r3, 80132c4 <rmw_init_options_copy+0xa0>
 80132c2:	b1f8      	cbz	r0, 8013304 <rmw_init_options_copy+0xe0>
 80132c4:	4811      	ldr	r0, [pc, #68]	@ (801330c <rmw_init_options_copy+0xe8>)
 80132c6:	f7ff ff21 	bl	801310c <get_memory>
 80132ca:	b1a8      	cbz	r0, 80132f8 <rmw_init_options_copy+0xd4>
 80132cc:	6883      	ldr	r3, [r0, #8]
 80132ce:	636b      	str	r3, [r5, #52]	@ 0x34
 80132d0:	f103 0510 	add.w	r5, r3, #16
 80132d4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80132d6:	2400      	movs	r4, #0
 80132d8:	f102 0c10 	add.w	ip, r2, #16
 80132dc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80132e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80132e2:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80132e6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80132ea:	4620      	mov	r0, r4
 80132ec:	b008      	add	sp, #32
 80132ee:	bd70      	pop	{r4, r5, r6, pc}
 80132f0:	240c      	movs	r4, #12
 80132f2:	4620      	mov	r0, r4
 80132f4:	b008      	add	sp, #32
 80132f6:	bd70      	pop	{r4, r5, r6, pc}
 80132f8:	9b04      	ldr	r3, [sp, #16]
 80132fa:	2401      	movs	r4, #1
 80132fc:	9907      	ldr	r1, [sp, #28]
 80132fe:	69e8      	ldr	r0, [r5, #28]
 8013300:	4798      	blx	r3
 8013302:	e7a0      	b.n	8013246 <rmw_init_options_copy+0x22>
 8013304:	240a      	movs	r4, #10
 8013306:	e79e      	b.n	8013246 <rmw_init_options_copy+0x22>
 8013308:	08017fc8 	.word	0x08017fc8
 801330c:	2000e994 	.word	0x2000e994

08013310 <rmw_init_options_fini>:
 8013310:	b510      	push	{r4, lr}
 8013312:	b08e      	sub	sp, #56	@ 0x38
 8013314:	2800      	cmp	r0, #0
 8013316:	d035      	beq.n	8013384 <rmw_init_options_fini+0x74>
 8013318:	4604      	mov	r4, r0
 801331a:	3020      	adds	r0, #32
 801331c:	f7f9 f920 	bl	800c560 <rcutils_allocator_is_valid>
 8013320:	b380      	cbz	r0, 8013384 <rmw_init_options_fini+0x74>
 8013322:	68a0      	ldr	r0, [r4, #8]
 8013324:	b120      	cbz	r0, 8013330 <rmw_init_options_fini+0x20>
 8013326:	4b1c      	ldr	r3, [pc, #112]	@ (8013398 <rmw_init_options_fini+0x88>)
 8013328:	6819      	ldr	r1, [r3, #0]
 801332a:	f7ec ff89 	bl	8000240 <strcmp>
 801332e:	bb88      	cbnz	r0, 8013394 <rmw_init_options_fini+0x84>
 8013330:	4b1a      	ldr	r3, [pc, #104]	@ (801339c <rmw_init_options_fini+0x8c>)
 8013332:	6819      	ldr	r1, [r3, #0]
 8013334:	b351      	cbz	r1, 801338c <rmw_init_options_fini+0x7c>
 8013336:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8013338:	e001      	b.n	801333e <rmw_init_options_fini+0x2e>
 801333a:	6849      	ldr	r1, [r1, #4]
 801333c:	b331      	cbz	r1, 801338c <rmw_init_options_fini+0x7c>
 801333e:	688b      	ldr	r3, [r1, #8]
 8013340:	429a      	cmp	r2, r3
 8013342:	d1fa      	bne.n	801333a <rmw_init_options_fini+0x2a>
 8013344:	4815      	ldr	r0, [pc, #84]	@ (801339c <rmw_init_options_fini+0x8c>)
 8013346:	f7ff fef1 	bl	801312c <put_memory>
 801334a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801334c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801334e:	69e0      	ldr	r0, [r4, #28]
 8013350:	4798      	blx	r3
 8013352:	4668      	mov	r0, sp
 8013354:	f7ff fd78 	bl	8012e48 <rmw_get_zero_initialized_init_options>
 8013358:	46ee      	mov	lr, sp
 801335a:	46a4      	mov	ip, r4
 801335c:	2400      	movs	r4, #0
 801335e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013362:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013366:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801336a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801336e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013372:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013376:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801337a:	e88c 0003 	stmia.w	ip, {r0, r1}
 801337e:	4620      	mov	r0, r4
 8013380:	b00e      	add	sp, #56	@ 0x38
 8013382:	bd10      	pop	{r4, pc}
 8013384:	240b      	movs	r4, #11
 8013386:	4620      	mov	r0, r4
 8013388:	b00e      	add	sp, #56	@ 0x38
 801338a:	bd10      	pop	{r4, pc}
 801338c:	2401      	movs	r4, #1
 801338e:	4620      	mov	r0, r4
 8013390:	b00e      	add	sp, #56	@ 0x38
 8013392:	bd10      	pop	{r4, pc}
 8013394:	240c      	movs	r4, #12
 8013396:	e7f2      	b.n	801337e <rmw_init_options_fini+0x6e>
 8013398:	08017fc8 	.word	0x08017fc8
 801339c:	2000e994 	.word	0x2000e994

080133a0 <rmw_init>:
 80133a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80133a4:	b083      	sub	sp, #12
 80133a6:	2800      	cmp	r0, #0
 80133a8:	f000 80d3 	beq.w	8013552 <rmw_init+0x1b2>
 80133ac:	460e      	mov	r6, r1
 80133ae:	2900      	cmp	r1, #0
 80133b0:	f000 80cf 	beq.w	8013552 <rmw_init+0x1b2>
 80133b4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80133b6:	4605      	mov	r5, r0
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	f000 80ca 	beq.w	8013552 <rmw_init+0x1b2>
 80133be:	4b78      	ldr	r3, [pc, #480]	@ (80135a0 <rmw_init+0x200>)
 80133c0:	6880      	ldr	r0, [r0, #8]
 80133c2:	681f      	ldr	r7, [r3, #0]
 80133c4:	b128      	cbz	r0, 80133d2 <rmw_init+0x32>
 80133c6:	4639      	mov	r1, r7
 80133c8:	f7ec ff3a 	bl	8000240 <strcmp>
 80133cc:	2800      	cmp	r0, #0
 80133ce:	f040 80ca 	bne.w	8013566 <rmw_init+0x1c6>
 80133d2:	4c74      	ldr	r4, [pc, #464]	@ (80135a4 <rmw_init+0x204>)
 80133d4:	f04f 0800 	mov.w	r8, #0
 80133d8:	4973      	ldr	r1, [pc, #460]	@ (80135a8 <rmw_init+0x208>)
 80133da:	4874      	ldr	r0, [pc, #464]	@ (80135ac <rmw_init+0x20c>)
 80133dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80133e0:	60b7      	str	r7, [r6, #8]
 80133e2:	e9c6 2300 	strd	r2, r3, [r6]
 80133e6:	68eb      	ldr	r3, [r5, #12]
 80133e8:	2201      	movs	r2, #1
 80133ea:	64b3      	str	r3, [r6, #72]	@ 0x48
 80133ec:	f7f9 fb7e 	bl	800caec <rmw_uxrce_init_session_memory>
 80133f0:	4620      	mov	r0, r4
 80133f2:	2204      	movs	r2, #4
 80133f4:	496e      	ldr	r1, [pc, #440]	@ (80135b0 <rmw_init+0x210>)
 80133f6:	f7f9 fbb9 	bl	800cb6c <rmw_uxrce_init_static_input_buffer_memory>
 80133fa:	486c      	ldr	r0, [pc, #432]	@ (80135ac <rmw_init+0x20c>)
 80133fc:	f884 800d 	strb.w	r8, [r4, #13]
 8013400:	f7ff fe84 	bl	801310c <get_memory>
 8013404:	2800      	cmp	r0, #0
 8013406:	f000 80a9 	beq.w	801355c <rmw_init+0x1bc>
 801340a:	6884      	ldr	r4, [r0, #8]
 801340c:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 801340e:	f104 0910 	add.w	r9, r4, #16
 8013412:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8013414:	f890 c010 	ldrb.w	ip, [r0, #16]
 8013418:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 801341c:	9101      	str	r1, [sp, #4]
 801341e:	4661      	mov	r1, ip
 8013420:	6a00      	ldr	r0, [r0, #32]
 8013422:	9000      	str	r0, [sp, #0]
 8013424:	4648      	mov	r0, r9
 8013426:	f000 fce3 	bl	8013df0 <uxr_set_custom_transport_callbacks>
 801342a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801342e:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8013432:	4960      	ldr	r1, [pc, #384]	@ (80135b4 <rmw_init+0x214>)
 8013434:	4860      	ldr	r0, [pc, #384]	@ (80135b8 <rmw_init+0x218>)
 8013436:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 801343a:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 801343e:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8013442:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8013446:	2201      	movs	r2, #1
 8013448:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 801344c:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8013450:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8013454:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8013458:	64f4      	str	r4, [r6, #76]	@ 0x4c
 801345a:	f7f9 fb27 	bl	800caac <rmw_uxrce_init_node_memory>
 801345e:	2205      	movs	r2, #5
 8013460:	4956      	ldr	r1, [pc, #344]	@ (80135bc <rmw_init+0x21c>)
 8013462:	4857      	ldr	r0, [pc, #348]	@ (80135c0 <rmw_init+0x220>)
 8013464:	f7f9 fb02 	bl	800ca6c <rmw_uxrce_init_subscription_memory>
 8013468:	220a      	movs	r2, #10
 801346a:	4956      	ldr	r1, [pc, #344]	@ (80135c4 <rmw_init+0x224>)
 801346c:	4856      	ldr	r0, [pc, #344]	@ (80135c8 <rmw_init+0x228>)
 801346e:	f7f9 fadd 	bl	800ca2c <rmw_uxrce_init_publisher_memory>
 8013472:	2201      	movs	r2, #1
 8013474:	4955      	ldr	r1, [pc, #340]	@ (80135cc <rmw_init+0x22c>)
 8013476:	4856      	ldr	r0, [pc, #344]	@ (80135d0 <rmw_init+0x230>)
 8013478:	f7f9 fa98 	bl	800c9ac <rmw_uxrce_init_service_memory>
 801347c:	2201      	movs	r2, #1
 801347e:	4955      	ldr	r1, [pc, #340]	@ (80135d4 <rmw_init+0x234>)
 8013480:	4855      	ldr	r0, [pc, #340]	@ (80135d8 <rmw_init+0x238>)
 8013482:	f7f9 fab3 	bl	800c9ec <rmw_uxrce_init_client_memory>
 8013486:	220f      	movs	r2, #15
 8013488:	4954      	ldr	r1, [pc, #336]	@ (80135dc <rmw_init+0x23c>)
 801348a:	4855      	ldr	r0, [pc, #340]	@ (80135e0 <rmw_init+0x240>)
 801348c:	f7f9 fb4e 	bl	800cb2c <rmw_uxrce_init_topic_memory>
 8013490:	2203      	movs	r2, #3
 8013492:	4954      	ldr	r1, [pc, #336]	@ (80135e4 <rmw_init+0x244>)
 8013494:	4854      	ldr	r0, [pc, #336]	@ (80135e8 <rmw_init+0x248>)
 8013496:	f7f9 fb89 	bl	800cbac <rmw_uxrce_init_init_options_impl_memory>
 801349a:	2204      	movs	r2, #4
 801349c:	4953      	ldr	r1, [pc, #332]	@ (80135ec <rmw_init+0x24c>)
 801349e:	4854      	ldr	r0, [pc, #336]	@ (80135f0 <rmw_init+0x250>)
 80134a0:	f7f9 fba4 	bl	800cbec <rmw_uxrce_init_wait_set_memory>
 80134a4:	4953      	ldr	r1, [pc, #332]	@ (80135f4 <rmw_init+0x254>)
 80134a6:	4854      	ldr	r0, [pc, #336]	@ (80135f8 <rmw_init+0x258>)
 80134a8:	2204      	movs	r2, #4
 80134aa:	f7f9 fbbf 	bl	800cc2c <rmw_uxrce_init_guard_condition_memory>
 80134ae:	4642      	mov	r2, r8
 80134b0:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80134b2:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 80134b4:	f000 fb0a 	bl	8013acc <rmw_uxrce_transport_init>
 80134b8:	4607      	mov	r7, r0
 80134ba:	2800      	cmp	r0, #0
 80134bc:	d158      	bne.n	8013570 <rmw_init+0x1d0>
 80134be:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80134c0:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 80134c4:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 80134c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80134ca:	4628      	mov	r0, r5
 80134cc:	f7fc f918 	bl	800f700 <uxr_init_session>
 80134d0:	4622      	mov	r2, r4
 80134d2:	494a      	ldr	r1, [pc, #296]	@ (80135fc <rmw_init+0x25c>)
 80134d4:	4628      	mov	r0, r5
 80134d6:	f7fc f937 	bl	800f748 <uxr_set_topic_callback>
 80134da:	463a      	mov	r2, r7
 80134dc:	4948      	ldr	r1, [pc, #288]	@ (8013600 <rmw_init+0x260>)
 80134de:	4628      	mov	r0, r5
 80134e0:	f7fc f92e 	bl	800f740 <uxr_set_status_callback>
 80134e4:	463a      	mov	r2, r7
 80134e6:	4947      	ldr	r1, [pc, #284]	@ (8013604 <rmw_init+0x264>)
 80134e8:	4628      	mov	r0, r5
 80134ea:	f7fc f931 	bl	800f750 <uxr_set_request_callback>
 80134ee:	463a      	mov	r2, r7
 80134f0:	4945      	ldr	r1, [pc, #276]	@ (8013608 <rmw_init+0x268>)
 80134f2:	4628      	mov	r0, r5
 80134f4:	f7fc f930 	bl	800f758 <uxr_set_reply_callback>
 80134f8:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80134fc:	2304      	movs	r3, #4
 80134fe:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8013502:	0092      	lsls	r2, r2, #2
 8013504:	4628      	mov	r0, r5
 8013506:	f7fc f967 	bl	800f7d8 <uxr_create_input_reliable_stream>
 801350a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801350e:	2304      	movs	r3, #4
 8013510:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8013514:	0092      	lsls	r2, r2, #2
 8013516:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 801351a:	4628      	mov	r0, r5
 801351c:	f7fc f932 	bl	800f784 <uxr_create_output_reliable_stream>
 8013520:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8013524:	4628      	mov	r0, r5
 8013526:	f7fc f951 	bl	800f7cc <uxr_create_input_best_effort_stream>
 801352a:	f241 3194 	movw	r1, #5012	@ 0x1394
 801352e:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8013532:	4628      	mov	r0, r5
 8013534:	4421      	add	r1, r4
 8013536:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801353a:	f7fc f911 	bl	800f760 <uxr_create_output_best_effort_stream>
 801353e:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8013542:	4628      	mov	r0, r5
 8013544:	f7fc fe72 	bl	801022c <uxr_create_session>
 8013548:	b1f8      	cbz	r0, 801358a <rmw_init+0x1ea>
 801354a:	4638      	mov	r0, r7
 801354c:	b003      	add	sp, #12
 801354e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013552:	270b      	movs	r7, #11
 8013554:	4638      	mov	r0, r7
 8013556:	b003      	add	sp, #12
 8013558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801355c:	2701      	movs	r7, #1
 801355e:	4638      	mov	r0, r7
 8013560:	b003      	add	sp, #12
 8013562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013566:	270c      	movs	r7, #12
 8013568:	4638      	mov	r0, r7
 801356a:	b003      	add	sp, #12
 801356c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013570:	4648      	mov	r0, r9
 8013572:	f000 fc7b 	bl	8013e6c <uxr_close_custom_transport>
 8013576:	4621      	mov	r1, r4
 8013578:	480c      	ldr	r0, [pc, #48]	@ (80135ac <rmw_init+0x20c>)
 801357a:	f7ff fdd7 	bl	801312c <put_memory>
 801357e:	4638      	mov	r0, r7
 8013580:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8013584:	b003      	add	sp, #12
 8013586:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801358a:	4648      	mov	r0, r9
 801358c:	f000 fc6e 	bl	8013e6c <uxr_close_custom_transport>
 8013590:	4621      	mov	r1, r4
 8013592:	4806      	ldr	r0, [pc, #24]	@ (80135ac <rmw_init+0x20c>)
 8013594:	f7ff fdca 	bl	801312c <put_memory>
 8013598:	64f7      	str	r7, [r6, #76]	@ 0x4c
 801359a:	2701      	movs	r7, #1
 801359c:	e7d5      	b.n	801354a <rmw_init+0x1aa>
 801359e:	bf00      	nop
 80135a0:	08017fc8 	.word	0x08017fc8
 80135a4:	2000e9e4 	.word	0x2000e9e4
 80135a8:	2000ac90 	.word	0x2000ac90
 80135ac:	2000e9d4 	.word	0x2000e9d4
 80135b0:	2000c238 	.word	0x2000c238
 80135b4:	2000a2b4 	.word	0x2000a2b4
 80135b8:	2000e9a4 	.word	0x2000e9a4
 80135bc:	2000e338 	.word	0x2000e338
 80135c0:	2000e9f4 	.word	0x2000e9f4
 80135c4:	2000a358 	.word	0x2000a358
 80135c8:	2000e9b4 	.word	0x2000e9b4
 80135cc:	2000abc8 	.word	0x2000abc8
 80135d0:	2000e9c4 	.word	0x2000e9c4
 80135d4:	2000a0e8 	.word	0x2000a0e8
 80135d8:	2000a0d8 	.word	0x2000a0d8
 80135dc:	2000e770 	.word	0x2000e770
 80135e0:	2000ea04 	.word	0x2000ea04
 80135e4:	2000a230 	.word	0x2000a230
 80135e8:	2000e994 	.word	0x2000e994
 80135ec:	2000e914 	.word	0x2000e914
 80135f0:	2000ea14 	.word	0x2000ea14
 80135f4:	2000a1b0 	.word	0x2000a1b0
 80135f8:	2000e984 	.word	0x2000e984
 80135fc:	08015a41 	.word	0x08015a41
 8013600:	08015a39 	.word	0x08015a39
 8013604:	08015ad9 	.word	0x08015ad9
 8013608:	08015b75 	.word	0x08015b75

0801360c <rmw_context_fini>:
 801360c:	4b17      	ldr	r3, [pc, #92]	@ (801366c <rmw_context_fini+0x60>)
 801360e:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8013610:	b570      	push	{r4, r5, r6, lr}
 8013612:	681c      	ldr	r4, [r3, #0]
 8013614:	4605      	mov	r5, r0
 8013616:	b334      	cbz	r4, 8013666 <rmw_context_fini+0x5a>
 8013618:	2600      	movs	r6, #0
 801361a:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801361e:	6902      	ldr	r2, [r0, #16]
 8013620:	428a      	cmp	r2, r1
 8013622:	d018      	beq.n	8013656 <rmw_context_fini+0x4a>
 8013624:	2c00      	cmp	r4, #0
 8013626:	d1f8      	bne.n	801361a <rmw_context_fini+0xe>
 8013628:	b189      	cbz	r1, 801364e <rmw_context_fini+0x42>
 801362a:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 801362e:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8013632:	789b      	ldrb	r3, [r3, #2]
 8013634:	2b01      	cmp	r3, #1
 8013636:	bf14      	ite	ne
 8013638:	210a      	movne	r1, #10
 801363a:	2100      	moveq	r1, #0
 801363c:	f7fc fdce 	bl	80101dc <uxr_delete_session_retries>
 8013640:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8013642:	f7f9 fb13 	bl	800cc6c <rmw_uxrce_fini_session_memory>
 8013646:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8013648:	3010      	adds	r0, #16
 801364a:	f000 fc0f 	bl	8013e6c <uxr_close_custom_transport>
 801364e:	2300      	movs	r3, #0
 8013650:	4630      	mov	r0, r6
 8013652:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8013654:	bd70      	pop	{r4, r5, r6, pc}
 8013656:	3018      	adds	r0, #24
 8013658:	f000 f90e 	bl	8013878 <rmw_destroy_node>
 801365c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801365e:	4606      	mov	r6, r0
 8013660:	2c00      	cmp	r4, #0
 8013662:	d1da      	bne.n	801361a <rmw_context_fini+0xe>
 8013664:	e7e0      	b.n	8013628 <rmw_context_fini+0x1c>
 8013666:	4626      	mov	r6, r4
 8013668:	e7de      	b.n	8013628 <rmw_context_fini+0x1c>
 801366a:	bf00      	nop
 801366c:	2000e9a4 	.word	0x2000e9a4

08013670 <create_topic>:
 8013670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013674:	4605      	mov	r5, r0
 8013676:	b084      	sub	sp, #16
 8013678:	4822      	ldr	r0, [pc, #136]	@ (8013704 <create_topic+0x94>)
 801367a:	460f      	mov	r7, r1
 801367c:	4616      	mov	r6, r2
 801367e:	f7ff fd45 	bl	801310c <get_memory>
 8013682:	4604      	mov	r4, r0
 8013684:	2800      	cmp	r0, #0
 8013686:	d039      	beq.n	80136fc <create_topic+0x8c>
 8013688:	692b      	ldr	r3, [r5, #16]
 801368a:	2102      	movs	r1, #2
 801368c:	6884      	ldr	r4, [r0, #8]
 801368e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013692:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 801370c <create_topic+0x9c>
 8013696:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801369a:	1c42      	adds	r2, r0, #1
 801369c:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80136a0:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 80136a4:	f7fb ff6e 	bl	800f584 <uxr_object_id>
 80136a8:	223c      	movs	r2, #60	@ 0x3c
 80136aa:	6120      	str	r0, [r4, #16]
 80136ac:	4641      	mov	r1, r8
 80136ae:	4638      	mov	r0, r7
 80136b0:	f7f9 fc1a 	bl	800cee8 <generate_topic_name>
 80136b4:	b1f0      	cbz	r0, 80136f4 <create_topic+0x84>
 80136b6:	4f14      	ldr	r7, [pc, #80]	@ (8013708 <create_topic+0x98>)
 80136b8:	4630      	mov	r0, r6
 80136ba:	2264      	movs	r2, #100	@ 0x64
 80136bc:	4639      	mov	r1, r7
 80136be:	f7f9 fbe5 	bl	800ce8c <generate_type_name>
 80136c2:	b1b8      	cbz	r0, 80136f4 <create_topic+0x84>
 80136c4:	6928      	ldr	r0, [r5, #16]
 80136c6:	2106      	movs	r1, #6
 80136c8:	696b      	ldr	r3, [r5, #20]
 80136ca:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80136ce:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80136d2:	f8cd 8000 	str.w	r8, [sp]
 80136d6:	e9cd 7101 	strd	r7, r1, [sp, #4]
 80136da:	6811      	ldr	r1, [r2, #0]
 80136dc:	6922      	ldr	r2, [r4, #16]
 80136de:	f7fb fe75 	bl	800f3cc <uxr_buffer_create_topic_bin>
 80136e2:	4602      	mov	r2, r0
 80136e4:	6928      	ldr	r0, [r5, #16]
 80136e6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80136ea:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80136ee:	f7f9 fb99 	bl	800ce24 <run_xrce_session>
 80136f2:	b918      	cbnz	r0, 80136fc <create_topic+0x8c>
 80136f4:	4620      	mov	r0, r4
 80136f6:	2400      	movs	r4, #0
 80136f8:	f7f9 fb2e 	bl	800cd58 <rmw_uxrce_fini_topic_memory>
 80136fc:	4620      	mov	r0, r4
 80136fe:	b004      	add	sp, #16
 8013700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013704:	2000ea04 	.word	0x2000ea04
 8013708:	2000ea80 	.word	0x2000ea80
 801370c:	2000ea44 	.word	0x2000ea44

08013710 <destroy_topic>:
 8013710:	b538      	push	{r3, r4, r5, lr}
 8013712:	6985      	ldr	r5, [r0, #24]
 8013714:	b1dd      	cbz	r5, 801374e <destroy_topic+0x3e>
 8013716:	4604      	mov	r4, r0
 8013718:	6928      	ldr	r0, [r5, #16]
 801371a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801371e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013722:	6922      	ldr	r2, [r4, #16]
 8013724:	6819      	ldr	r1, [r3, #0]
 8013726:	f7fb fdd3 	bl	800f2d0 <uxr_buffer_delete_entity>
 801372a:	4602      	mov	r2, r0
 801372c:	6928      	ldr	r0, [r5, #16]
 801372e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013732:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013736:	f7f9 fb75 	bl	800ce24 <run_xrce_session>
 801373a:	4603      	mov	r3, r0
 801373c:	4620      	mov	r0, r4
 801373e:	2b00      	cmp	r3, #0
 8013740:	bf14      	ite	ne
 8013742:	2400      	movne	r4, #0
 8013744:	2402      	moveq	r4, #2
 8013746:	f7f9 fb07 	bl	800cd58 <rmw_uxrce_fini_topic_memory>
 801374a:	4620      	mov	r0, r4
 801374c:	bd38      	pop	{r3, r4, r5, pc}
 801374e:	2401      	movs	r4, #1
 8013750:	4620      	mov	r0, r4
 8013752:	bd38      	pop	{r3, r4, r5, pc}

08013754 <create_node>:
 8013754:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013758:	b083      	sub	sp, #12
 801375a:	2b00      	cmp	r3, #0
 801375c:	d064      	beq.n	8013828 <create_node+0xd4>
 801375e:	4606      	mov	r6, r0
 8013760:	4838      	ldr	r0, [pc, #224]	@ (8013844 <create_node+0xf0>)
 8013762:	460f      	mov	r7, r1
 8013764:	4690      	mov	r8, r2
 8013766:	461d      	mov	r5, r3
 8013768:	f7ff fcd0 	bl	801310c <get_memory>
 801376c:	2800      	cmp	r0, #0
 801376e:	d05b      	beq.n	8013828 <create_node+0xd4>
 8013770:	6884      	ldr	r4, [r0, #8]
 8013772:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8013774:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8013778:	f104 0518 	add.w	r5, r4, #24
 801377c:	6123      	str	r3, [r4, #16]
 801377e:	f7ff fce9 	bl	8013154 <rmw_get_implementation_identifier>
 8013782:	f8c4 9020 	str.w	r9, [r4, #32]
 8013786:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801378a:	4630      	mov	r0, r6
 801378c:	f7ec fd62 	bl	8000254 <strlen>
 8013790:	1c42      	adds	r2, r0, #1
 8013792:	2a3c      	cmp	r2, #60	@ 0x3c
 8013794:	d840      	bhi.n	8013818 <create_node+0xc4>
 8013796:	4648      	mov	r0, r9
 8013798:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 801379c:	4631      	mov	r1, r6
 801379e:	f003 f8a8 	bl	80168f2 <memcpy>
 80137a2:	4638      	mov	r0, r7
 80137a4:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 80137a8:	f7ec fd54 	bl	8000254 <strlen>
 80137ac:	1c42      	adds	r2, r0, #1
 80137ae:	2a3c      	cmp	r2, #60	@ 0x3c
 80137b0:	d832      	bhi.n	8013818 <create_node+0xc4>
 80137b2:	4639      	mov	r1, r7
 80137b4:	4648      	mov	r0, r9
 80137b6:	f003 f89c 	bl	80168f2 <memcpy>
 80137ba:	6923      	ldr	r3, [r4, #16]
 80137bc:	2101      	movs	r1, #1
 80137be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80137c2:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 80137c6:	1842      	adds	r2, r0, r1
 80137c8:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 80137cc:	f7fb feda 	bl	800f584 <uxr_object_id>
 80137d0:	6160      	str	r0, [r4, #20]
 80137d2:	783b      	ldrb	r3, [r7, #0]
 80137d4:	2b2f      	cmp	r3, #47	@ 0x2f
 80137d6:	d12c      	bne.n	8013832 <create_node+0xde>
 80137d8:	787b      	ldrb	r3, [r7, #1]
 80137da:	bb53      	cbnz	r3, 8013832 <create_node+0xde>
 80137dc:	4633      	mov	r3, r6
 80137de:	4a1a      	ldr	r2, [pc, #104]	@ (8013848 <create_node+0xf4>)
 80137e0:	213c      	movs	r1, #60	@ 0x3c
 80137e2:	481a      	ldr	r0, [pc, #104]	@ (801384c <create_node+0xf8>)
 80137e4:	f002 fe58 	bl	8016498 <sniprintf>
 80137e8:	6920      	ldr	r0, [r4, #16]
 80137ea:	2106      	movs	r1, #6
 80137ec:	fa1f f388 	uxth.w	r3, r8
 80137f0:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80137f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80137f8:	9101      	str	r1, [sp, #4]
 80137fa:	4914      	ldr	r1, [pc, #80]	@ (801384c <create_node+0xf8>)
 80137fc:	9100      	str	r1, [sp, #0]
 80137fe:	6811      	ldr	r1, [r2, #0]
 8013800:	6962      	ldr	r2, [r4, #20]
 8013802:	f7fb fdb1 	bl	800f368 <uxr_buffer_create_participant_bin>
 8013806:	4602      	mov	r2, r0
 8013808:	6920      	ldr	r0, [r4, #16]
 801380a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801380e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8013812:	f7f9 fb07 	bl	800ce24 <run_xrce_session>
 8013816:	b918      	cbnz	r0, 8013820 <create_node+0xcc>
 8013818:	4628      	mov	r0, r5
 801381a:	2500      	movs	r5, #0
 801381c:	f7f9 fa2c 	bl	800cc78 <rmw_uxrce_fini_node_memory>
 8013820:	4628      	mov	r0, r5
 8013822:	b003      	add	sp, #12
 8013824:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013828:	2500      	movs	r5, #0
 801382a:	4628      	mov	r0, r5
 801382c:	b003      	add	sp, #12
 801382e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013832:	463b      	mov	r3, r7
 8013834:	4a06      	ldr	r2, [pc, #24]	@ (8013850 <create_node+0xfc>)
 8013836:	213c      	movs	r1, #60	@ 0x3c
 8013838:	9600      	str	r6, [sp, #0]
 801383a:	4804      	ldr	r0, [pc, #16]	@ (801384c <create_node+0xf8>)
 801383c:	f002 fe2c 	bl	8016498 <sniprintf>
 8013840:	e7d2      	b.n	80137e8 <create_node+0x94>
 8013842:	bf00      	nop
 8013844:	2000e9a4 	.word	0x2000e9a4
 8013848:	080177b4 	.word	0x080177b4
 801384c:	2000eae4 	.word	0x2000eae4
 8013850:	08017a54 	.word	0x08017a54

08013854 <rmw_create_node>:
 8013854:	468c      	mov	ip, r1
 8013856:	4611      	mov	r1, r2
 8013858:	f1bc 0f00 	cmp.w	ip, #0
 801385c:	d00a      	beq.n	8013874 <rmw_create_node+0x20>
 801385e:	f89c 3000 	ldrb.w	r3, [ip]
 8013862:	b13b      	cbz	r3, 8013874 <rmw_create_node+0x20>
 8013864:	b132      	cbz	r2, 8013874 <rmw_create_node+0x20>
 8013866:	7813      	ldrb	r3, [r2, #0]
 8013868:	b123      	cbz	r3, 8013874 <rmw_create_node+0x20>
 801386a:	4603      	mov	r3, r0
 801386c:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 801386e:	4660      	mov	r0, ip
 8013870:	f7ff bf70 	b.w	8013754 <create_node>
 8013874:	2000      	movs	r0, #0
 8013876:	4770      	bx	lr

08013878 <rmw_destroy_node>:
 8013878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801387a:	b328      	cbz	r0, 80138c8 <rmw_destroy_node+0x50>
 801387c:	4607      	mov	r7, r0
 801387e:	6800      	ldr	r0, [r0, #0]
 8013880:	b120      	cbz	r0, 801388c <rmw_destroy_node+0x14>
 8013882:	4b37      	ldr	r3, [pc, #220]	@ (8013960 <rmw_destroy_node+0xe8>)
 8013884:	6819      	ldr	r1, [r3, #0]
 8013886:	f7ec fcdb 	bl	8000240 <strcmp>
 801388a:	b9e8      	cbnz	r0, 80138c8 <rmw_destroy_node+0x50>
 801388c:	687d      	ldr	r5, [r7, #4]
 801388e:	b1dd      	cbz	r5, 80138c8 <rmw_destroy_node+0x50>
 8013890:	4b34      	ldr	r3, [pc, #208]	@ (8013964 <rmw_destroy_node+0xec>)
 8013892:	681c      	ldr	r4, [r3, #0]
 8013894:	2c00      	cmp	r4, #0
 8013896:	d060      	beq.n	801395a <rmw_destroy_node+0xe2>
 8013898:	2600      	movs	r6, #0
 801389a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801389e:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 80138a2:	429d      	cmp	r5, r3
 80138a4:	d013      	beq.n	80138ce <rmw_destroy_node+0x56>
 80138a6:	2c00      	cmp	r4, #0
 80138a8:	d1f7      	bne.n	801389a <rmw_destroy_node+0x22>
 80138aa:	4b2f      	ldr	r3, [pc, #188]	@ (8013968 <rmw_destroy_node+0xf0>)
 80138ac:	681c      	ldr	r4, [r3, #0]
 80138ae:	b1c4      	cbz	r4, 80138e2 <rmw_destroy_node+0x6a>
 80138b0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80138b4:	6a0b      	ldr	r3, [r1, #32]
 80138b6:	429d      	cmp	r5, r3
 80138b8:	d1f9      	bne.n	80138ae <rmw_destroy_node+0x36>
 80138ba:	317c      	adds	r1, #124	@ 0x7c
 80138bc:	4638      	mov	r0, r7
 80138be:	f000 f8a3 	bl	8013a08 <rmw_destroy_subscription>
 80138c2:	2801      	cmp	r0, #1
 80138c4:	4606      	mov	r6, r0
 80138c6:	d1f2      	bne.n	80138ae <rmw_destroy_node+0x36>
 80138c8:	2601      	movs	r6, #1
 80138ca:	4630      	mov	r0, r6
 80138cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138ce:	3184      	adds	r1, #132	@ 0x84
 80138d0:	4638      	mov	r0, r7
 80138d2:	f7f8 fffb 	bl	800c8cc <rmw_destroy_publisher>
 80138d6:	2801      	cmp	r0, #1
 80138d8:	4606      	mov	r6, r0
 80138da:	d0f5      	beq.n	80138c8 <rmw_destroy_node+0x50>
 80138dc:	2c00      	cmp	r4, #0
 80138de:	d1dc      	bne.n	801389a <rmw_destroy_node+0x22>
 80138e0:	e7e3      	b.n	80138aa <rmw_destroy_node+0x32>
 80138e2:	4b22      	ldr	r3, [pc, #136]	@ (801396c <rmw_destroy_node+0xf4>)
 80138e4:	681c      	ldr	r4, [r3, #0]
 80138e6:	b16c      	cbz	r4, 8013904 <rmw_destroy_node+0x8c>
 80138e8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80138ec:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80138ee:	429d      	cmp	r5, r3
 80138f0:	d1f9      	bne.n	80138e6 <rmw_destroy_node+0x6e>
 80138f2:	317c      	adds	r1, #124	@ 0x7c
 80138f4:	4638      	mov	r0, r7
 80138f6:	f000 f843 	bl	8013980 <rmw_destroy_service>
 80138fa:	2801      	cmp	r0, #1
 80138fc:	4606      	mov	r6, r0
 80138fe:	d0e3      	beq.n	80138c8 <rmw_destroy_node+0x50>
 8013900:	2c00      	cmp	r4, #0
 8013902:	d1f1      	bne.n	80138e8 <rmw_destroy_node+0x70>
 8013904:	4b1a      	ldr	r3, [pc, #104]	@ (8013970 <rmw_destroy_node+0xf8>)
 8013906:	681c      	ldr	r4, [r3, #0]
 8013908:	b16c      	cbz	r4, 8013926 <rmw_destroy_node+0xae>
 801390a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801390e:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8013910:	429d      	cmp	r5, r3
 8013912:	d1f9      	bne.n	8013908 <rmw_destroy_node+0x90>
 8013914:	317c      	adds	r1, #124	@ 0x7c
 8013916:	4638      	mov	r0, r7
 8013918:	f002 f976 	bl	8015c08 <rmw_destroy_client>
 801391c:	2801      	cmp	r0, #1
 801391e:	4606      	mov	r6, r0
 8013920:	d0d2      	beq.n	80138c8 <rmw_destroy_node+0x50>
 8013922:	2c00      	cmp	r4, #0
 8013924:	d1f1      	bne.n	801390a <rmw_destroy_node+0x92>
 8013926:	6928      	ldr	r0, [r5, #16]
 8013928:	696a      	ldr	r2, [r5, #20]
 801392a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801392e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013932:	6819      	ldr	r1, [r3, #0]
 8013934:	f7fb fccc 	bl	800f2d0 <uxr_buffer_delete_entity>
 8013938:	4602      	mov	r2, r0
 801393a:	6928      	ldr	r0, [r5, #16]
 801393c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013940:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013944:	f7f9 fa6e 	bl	800ce24 <run_xrce_session>
 8013948:	4603      	mov	r3, r0
 801394a:	4638      	mov	r0, r7
 801394c:	2b00      	cmp	r3, #0
 801394e:	bf08      	it	eq
 8013950:	2602      	moveq	r6, #2
 8013952:	f7f9 f991 	bl	800cc78 <rmw_uxrce_fini_node_memory>
 8013956:	4630      	mov	r0, r6
 8013958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801395a:	4626      	mov	r6, r4
 801395c:	e7a5      	b.n	80138aa <rmw_destroy_node+0x32>
 801395e:	bf00      	nop
 8013960:	08017fc8 	.word	0x08017fc8
 8013964:	2000e9b4 	.word	0x2000e9b4
 8013968:	2000e9f4 	.word	0x2000e9f4
 801396c:	2000e9c4 	.word	0x2000e9c4
 8013970:	2000a0d8 	.word	0x2000a0d8

08013974 <rmw_node_get_graph_guard_condition>:
 8013974:	6843      	ldr	r3, [r0, #4]
 8013976:	6918      	ldr	r0, [r3, #16]
 8013978:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 801397c:	4770      	bx	lr
 801397e:	bf00      	nop

08013980 <rmw_destroy_service>:
 8013980:	b570      	push	{r4, r5, r6, lr}
 8013982:	b128      	cbz	r0, 8013990 <rmw_destroy_service+0x10>
 8013984:	4604      	mov	r4, r0
 8013986:	6800      	ldr	r0, [r0, #0]
 8013988:	460d      	mov	r5, r1
 801398a:	f7f9 fac5 	bl	800cf18 <is_uxrce_rmw_identifier_valid>
 801398e:	b910      	cbnz	r0, 8013996 <rmw_destroy_service+0x16>
 8013990:	2401      	movs	r4, #1
 8013992:	4620      	mov	r0, r4
 8013994:	bd70      	pop	{r4, r5, r6, pc}
 8013996:	6863      	ldr	r3, [r4, #4]
 8013998:	2b00      	cmp	r3, #0
 801399a:	d0f9      	beq.n	8013990 <rmw_destroy_service+0x10>
 801399c:	2d00      	cmp	r5, #0
 801399e:	d0f7      	beq.n	8013990 <rmw_destroy_service+0x10>
 80139a0:	6828      	ldr	r0, [r5, #0]
 80139a2:	f7f9 fab9 	bl	800cf18 <is_uxrce_rmw_identifier_valid>
 80139a6:	2800      	cmp	r0, #0
 80139a8:	d0f2      	beq.n	8013990 <rmw_destroy_service+0x10>
 80139aa:	686e      	ldr	r6, [r5, #4]
 80139ac:	2e00      	cmp	r6, #0
 80139ae:	d0ef      	beq.n	8013990 <rmw_destroy_service+0x10>
 80139b0:	6864      	ldr	r4, [r4, #4]
 80139b2:	6932      	ldr	r2, [r6, #16]
 80139b4:	6920      	ldr	r0, [r4, #16]
 80139b6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80139ba:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80139be:	6819      	ldr	r1, [r3, #0]
 80139c0:	f000 ffa2 	bl	8014908 <uxr_buffer_cancel_data>
 80139c4:	4602      	mov	r2, r0
 80139c6:	6920      	ldr	r0, [r4, #16]
 80139c8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80139cc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80139d0:	f7f9 fa28 	bl	800ce24 <run_xrce_session>
 80139d4:	6920      	ldr	r0, [r4, #16]
 80139d6:	6932      	ldr	r2, [r6, #16]
 80139d8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80139dc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80139e0:	6819      	ldr	r1, [r3, #0]
 80139e2:	f7fb fc75 	bl	800f2d0 <uxr_buffer_delete_entity>
 80139e6:	4602      	mov	r2, r0
 80139e8:	6920      	ldr	r0, [r4, #16]
 80139ea:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80139ee:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80139f2:	f7f9 fa17 	bl	800ce24 <run_xrce_session>
 80139f6:	4603      	mov	r3, r0
 80139f8:	4628      	mov	r0, r5
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	bf14      	ite	ne
 80139fe:	2400      	movne	r4, #0
 8013a00:	2402      	moveq	r4, #2
 8013a02:	f7f9 f97d 	bl	800cd00 <rmw_uxrce_fini_service_memory>
 8013a06:	e7c4      	b.n	8013992 <rmw_destroy_service+0x12>

08013a08 <rmw_destroy_subscription>:
 8013a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a0c:	b128      	cbz	r0, 8013a1a <rmw_destroy_subscription+0x12>
 8013a0e:	4604      	mov	r4, r0
 8013a10:	6800      	ldr	r0, [r0, #0]
 8013a12:	460d      	mov	r5, r1
 8013a14:	f7f9 fa80 	bl	800cf18 <is_uxrce_rmw_identifier_valid>
 8013a18:	b918      	cbnz	r0, 8013a22 <rmw_destroy_subscription+0x1a>
 8013a1a:	2401      	movs	r4, #1
 8013a1c:	4620      	mov	r0, r4
 8013a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a22:	6863      	ldr	r3, [r4, #4]
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d0f8      	beq.n	8013a1a <rmw_destroy_subscription+0x12>
 8013a28:	fab5 f485 	clz	r4, r5
 8013a2c:	0964      	lsrs	r4, r4, #5
 8013a2e:	2d00      	cmp	r5, #0
 8013a30:	d0f3      	beq.n	8013a1a <rmw_destroy_subscription+0x12>
 8013a32:	6828      	ldr	r0, [r5, #0]
 8013a34:	f7f9 fa70 	bl	800cf18 <is_uxrce_rmw_identifier_valid>
 8013a38:	2800      	cmp	r0, #0
 8013a3a:	d0ee      	beq.n	8013a1a <rmw_destroy_subscription+0x12>
 8013a3c:	686e      	ldr	r6, [r5, #4]
 8013a3e:	2e00      	cmp	r6, #0
 8013a40:	d0eb      	beq.n	8013a1a <rmw_destroy_subscription+0x12>
 8013a42:	6a37      	ldr	r7, [r6, #32]
 8013a44:	6972      	ldr	r2, [r6, #20]
 8013a46:	6938      	ldr	r0, [r7, #16]
 8013a48:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013a4c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013a50:	6819      	ldr	r1, [r3, #0]
 8013a52:	f000 ff59 	bl	8014908 <uxr_buffer_cancel_data>
 8013a56:	4602      	mov	r2, r0
 8013a58:	6938      	ldr	r0, [r7, #16]
 8013a5a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013a5e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013a62:	f7f9 f9df 	bl	800ce24 <run_xrce_session>
 8013a66:	69f0      	ldr	r0, [r6, #28]
 8013a68:	f7ff fe52 	bl	8013710 <destroy_topic>
 8013a6c:	6a33      	ldr	r3, [r6, #32]
 8013a6e:	6972      	ldr	r2, [r6, #20]
 8013a70:	6918      	ldr	r0, [r3, #16]
 8013a72:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013a76:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013a7a:	6819      	ldr	r1, [r3, #0]
 8013a7c:	f7fb fc28 	bl	800f2d0 <uxr_buffer_delete_entity>
 8013a80:	6a33      	ldr	r3, [r6, #32]
 8013a82:	4680      	mov	r8, r0
 8013a84:	6932      	ldr	r2, [r6, #16]
 8013a86:	6918      	ldr	r0, [r3, #16]
 8013a88:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013a8c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013a90:	6819      	ldr	r1, [r3, #0]
 8013a92:	f7fb fc1d 	bl	800f2d0 <uxr_buffer_delete_entity>
 8013a96:	4606      	mov	r6, r0
 8013a98:	6938      	ldr	r0, [r7, #16]
 8013a9a:	4642      	mov	r2, r8
 8013a9c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013aa0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013aa4:	f7f9 f9be 	bl	800ce24 <run_xrce_session>
 8013aa8:	693f      	ldr	r7, [r7, #16]
 8013aaa:	4632      	mov	r2, r6
 8013aac:	4606      	mov	r6, r0
 8013aae:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8013ab2:	4638      	mov	r0, r7
 8013ab4:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8013ab8:	f7f9 f9b4 	bl	800ce24 <run_xrce_session>
 8013abc:	b126      	cbz	r6, 8013ac8 <rmw_destroy_subscription+0xc0>
 8013abe:	b118      	cbz	r0, 8013ac8 <rmw_destroy_subscription+0xc0>
 8013ac0:	4628      	mov	r0, r5
 8013ac2:	f7f9 f907 	bl	800ccd4 <rmw_uxrce_fini_subscription_memory>
 8013ac6:	e7a9      	b.n	8013a1c <rmw_destroy_subscription+0x14>
 8013ac8:	2402      	movs	r4, #2
 8013aca:	e7f9      	b.n	8013ac0 <rmw_destroy_subscription+0xb8>

08013acc <rmw_uxrce_transport_init>:
 8013acc:	b508      	push	{r3, lr}
 8013ace:	b108      	cbz	r0, 8013ad4 <rmw_uxrce_transport_init+0x8>
 8013ad0:	f100 0210 	add.w	r2, r0, #16
 8013ad4:	b139      	cbz	r1, 8013ae6 <rmw_uxrce_transport_init+0x1a>
 8013ad6:	6949      	ldr	r1, [r1, #20]
 8013ad8:	4610      	mov	r0, r2
 8013ada:	f000 f993 	bl	8013e04 <uxr_init_custom_transport>
 8013ade:	f080 0001 	eor.w	r0, r0, #1
 8013ae2:	b2c0      	uxtb	r0, r0
 8013ae4:	bd08      	pop	{r3, pc}
 8013ae6:	4b04      	ldr	r3, [pc, #16]	@ (8013af8 <rmw_uxrce_transport_init+0x2c>)
 8013ae8:	4610      	mov	r0, r2
 8013aea:	6859      	ldr	r1, [r3, #4]
 8013aec:	f000 f98a 	bl	8013e04 <uxr_init_custom_transport>
 8013af0:	f080 0001 	eor.w	r0, r0, #1
 8013af4:	b2c0      	uxtb	r0, r0
 8013af6:	bd08      	pop	{r3, pc}
 8013af8:	2000a0bc 	.word	0x2000a0bc

08013afc <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8013afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b00:	6805      	ldr	r5, [r0, #0]
 8013b02:	4604      	mov	r4, r0
 8013b04:	460e      	mov	r6, r1
 8013b06:	4628      	mov	r0, r5
 8013b08:	f7ec fb9a 	bl	8000240 <strcmp>
 8013b0c:	b1c8      	cbz	r0, 8013b42 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8013b0e:	4b11      	ldr	r3, [pc, #68]	@ (8013b54 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	429d      	cmp	r5, r3
 8013b14:	d112      	bne.n	8013b3c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8013b16:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8013b1a:	f8d8 4000 	ldr.w	r4, [r8]
 8013b1e:	b16c      	cbz	r4, 8013b3c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8013b20:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8013b24:	2700      	movs	r7, #0
 8013b26:	3d04      	subs	r5, #4
 8013b28:	4631      	mov	r1, r6
 8013b2a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8013b2e:	f7ec fb87 	bl	8000240 <strcmp>
 8013b32:	00bb      	lsls	r3, r7, #2
 8013b34:	b140      	cbz	r0, 8013b48 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8013b36:	3701      	adds	r7, #1
 8013b38:	42bc      	cmp	r4, r7
 8013b3a:	d1f5      	bne.n	8013b28 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8013b3c:	2000      	movs	r0, #0
 8013b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b42:	4620      	mov	r0, r4
 8013b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b48:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013b4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013b50:	58d3      	ldr	r3, [r2, r3]
 8013b52:	4718      	bx	r3
 8013b54:	20000584 	.word	0x20000584

08013b58 <sensor_msgs__msg__Imu__init>:
 8013b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b5c:	4605      	mov	r5, r0
 8013b5e:	b3c0      	cbz	r0, 8013bd2 <sensor_msgs__msg__Imu__init+0x7a>
 8013b60:	f000 f864 	bl	8013c2c <std_msgs__msg__Header__init>
 8013b64:	4604      	mov	r4, r0
 8013b66:	b310      	cbz	r0, 8013bae <sensor_msgs__msg__Imu__init+0x56>
 8013b68:	f105 0618 	add.w	r6, r5, #24
 8013b6c:	4630      	mov	r0, r6
 8013b6e:	f000 f893 	bl	8013c98 <geometry_msgs__msg__Quaternion__init>
 8013b72:	4604      	mov	r4, r0
 8013b74:	2800      	cmp	r0, #0
 8013b76:	d040      	beq.n	8013bfa <sensor_msgs__msg__Imu__init+0xa2>
 8013b78:	f105 0780 	add.w	r7, r5, #128	@ 0x80
 8013b7c:	4638      	mov	r0, r7
 8013b7e:	f000 f89d 	bl	8013cbc <geometry_msgs__msg__Vector3__init>
 8013b82:	4604      	mov	r4, r0
 8013b84:	b348      	cbz	r0, 8013bda <sensor_msgs__msg__Imu__init+0x82>
 8013b86:	f105 08e0 	add.w	r8, r5, #224	@ 0xe0
 8013b8a:	4640      	mov	r0, r8
 8013b8c:	f000 f896 	bl	8013cbc <geometry_msgs__msg__Vector3__init>
 8013b90:	4604      	mov	r4, r0
 8013b92:	b9d8      	cbnz	r0, 8013bcc <sensor_msgs__msg__Imu__init+0x74>
 8013b94:	4628      	mov	r0, r5
 8013b96:	f000 f86d 	bl	8013c74 <std_msgs__msg__Header__fini>
 8013b9a:	4630      	mov	r0, r6
 8013b9c:	f000 f88c 	bl	8013cb8 <geometry_msgs__msg__Quaternion__fini>
 8013ba0:	4638      	mov	r0, r7
 8013ba2:	f000 f88f 	bl	8013cc4 <geometry_msgs__msg__Vector3__fini>
 8013ba6:	4640      	mov	r0, r8
 8013ba8:	f000 f88c 	bl	8013cc4 <geometry_msgs__msg__Vector3__fini>
 8013bac:	e00e      	b.n	8013bcc <sensor_msgs__msg__Imu__init+0x74>
 8013bae:	4628      	mov	r0, r5
 8013bb0:	f000 f860 	bl	8013c74 <std_msgs__msg__Header__fini>
 8013bb4:	f105 0018 	add.w	r0, r5, #24
 8013bb8:	f000 f87e 	bl	8013cb8 <geometry_msgs__msg__Quaternion__fini>
 8013bbc:	f105 0080 	add.w	r0, r5, #128	@ 0x80
 8013bc0:	f000 f880 	bl	8013cc4 <geometry_msgs__msg__Vector3__fini>
 8013bc4:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 8013bc8:	f000 f87c 	bl	8013cc4 <geometry_msgs__msg__Vector3__fini>
 8013bcc:	4620      	mov	r0, r4
 8013bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bd2:	4604      	mov	r4, r0
 8013bd4:	4620      	mov	r0, r4
 8013bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bda:	4628      	mov	r0, r5
 8013bdc:	f000 f84a 	bl	8013c74 <std_msgs__msg__Header__fini>
 8013be0:	4630      	mov	r0, r6
 8013be2:	f000 f869 	bl	8013cb8 <geometry_msgs__msg__Quaternion__fini>
 8013be6:	4638      	mov	r0, r7
 8013be8:	f000 f86c 	bl	8013cc4 <geometry_msgs__msg__Vector3__fini>
 8013bec:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 8013bf0:	f000 f868 	bl	8013cc4 <geometry_msgs__msg__Vector3__fini>
 8013bf4:	4620      	mov	r0, r4
 8013bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bfa:	4628      	mov	r0, r5
 8013bfc:	f000 f83a 	bl	8013c74 <std_msgs__msg__Header__fini>
 8013c00:	4630      	mov	r0, r6
 8013c02:	e7d9      	b.n	8013bb8 <sensor_msgs__msg__Imu__init+0x60>

08013c04 <sensor_msgs__msg__Imu__fini>:
 8013c04:	b188      	cbz	r0, 8013c2a <sensor_msgs__msg__Imu__fini+0x26>
 8013c06:	b510      	push	{r4, lr}
 8013c08:	4604      	mov	r4, r0
 8013c0a:	f000 f833 	bl	8013c74 <std_msgs__msg__Header__fini>
 8013c0e:	f104 0018 	add.w	r0, r4, #24
 8013c12:	f000 f851 	bl	8013cb8 <geometry_msgs__msg__Quaternion__fini>
 8013c16:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 8013c1a:	f000 f853 	bl	8013cc4 <geometry_msgs__msg__Vector3__fini>
 8013c1e:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 8013c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c26:	f000 b84d 	b.w	8013cc4 <geometry_msgs__msg__Vector3__fini>
 8013c2a:	4770      	bx	lr

08013c2c <std_msgs__msg__Header__init>:
 8013c2c:	b570      	push	{r4, r5, r6, lr}
 8013c2e:	4605      	mov	r5, r0
 8013c30:	b1a8      	cbz	r0, 8013c5e <std_msgs__msg__Header__init+0x32>
 8013c32:	f000 f82b 	bl	8013c8c <builtin_interfaces__msg__Time__init>
 8013c36:	4604      	mov	r4, r0
 8013c38:	b140      	cbz	r0, 8013c4c <std_msgs__msg__Header__init+0x20>
 8013c3a:	f105 0608 	add.w	r6, r5, #8
 8013c3e:	4630      	mov	r0, r6
 8013c40:	f002 f850 	bl	8015ce4 <rosidl_runtime_c__String__init>
 8013c44:	4604      	mov	r4, r0
 8013c46:	b168      	cbz	r0, 8013c64 <std_msgs__msg__Header__init+0x38>
 8013c48:	4620      	mov	r0, r4
 8013c4a:	bd70      	pop	{r4, r5, r6, pc}
 8013c4c:	4628      	mov	r0, r5
 8013c4e:	f000 f821 	bl	8013c94 <builtin_interfaces__msg__Time__fini>
 8013c52:	f105 0008 	add.w	r0, r5, #8
 8013c56:	f002 f85b 	bl	8015d10 <rosidl_runtime_c__String__fini>
 8013c5a:	4620      	mov	r0, r4
 8013c5c:	bd70      	pop	{r4, r5, r6, pc}
 8013c5e:	4604      	mov	r4, r0
 8013c60:	4620      	mov	r0, r4
 8013c62:	bd70      	pop	{r4, r5, r6, pc}
 8013c64:	4628      	mov	r0, r5
 8013c66:	f000 f815 	bl	8013c94 <builtin_interfaces__msg__Time__fini>
 8013c6a:	4630      	mov	r0, r6
 8013c6c:	f002 f850 	bl	8015d10 <rosidl_runtime_c__String__fini>
 8013c70:	e7ea      	b.n	8013c48 <std_msgs__msg__Header__init+0x1c>
 8013c72:	bf00      	nop

08013c74 <std_msgs__msg__Header__fini>:
 8013c74:	b148      	cbz	r0, 8013c8a <std_msgs__msg__Header__fini+0x16>
 8013c76:	b510      	push	{r4, lr}
 8013c78:	4604      	mov	r4, r0
 8013c7a:	f000 f80b 	bl	8013c94 <builtin_interfaces__msg__Time__fini>
 8013c7e:	f104 0008 	add.w	r0, r4, #8
 8013c82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c86:	f002 b843 	b.w	8015d10 <rosidl_runtime_c__String__fini>
 8013c8a:	4770      	bx	lr

08013c8c <builtin_interfaces__msg__Time__init>:
 8013c8c:	3800      	subs	r0, #0
 8013c8e:	bf18      	it	ne
 8013c90:	2001      	movne	r0, #1
 8013c92:	4770      	bx	lr

08013c94 <builtin_interfaces__msg__Time__fini>:
 8013c94:	4770      	bx	lr
 8013c96:	bf00      	nop

08013c98 <geometry_msgs__msg__Quaternion__init>:
 8013c98:	b160      	cbz	r0, 8013cb4 <geometry_msgs__msg__Quaternion__init+0x1c>
 8013c9a:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8013c9e:	2200      	movs	r2, #0
 8013ca0:	2300      	movs	r3, #0
 8013ca2:	ed80 7b06 	vstr	d7, [r0, #24]
 8013ca6:	e9c0 2300 	strd	r2, r3, [r0]
 8013caa:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8013cae:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8013cb2:	2001      	movs	r0, #1
 8013cb4:	4770      	bx	lr
 8013cb6:	bf00      	nop

08013cb8 <geometry_msgs__msg__Quaternion__fini>:
 8013cb8:	4770      	bx	lr
 8013cba:	bf00      	nop

08013cbc <geometry_msgs__msg__Vector3__init>:
 8013cbc:	3800      	subs	r0, #0
 8013cbe:	bf18      	it	ne
 8013cc0:	2001      	movne	r0, #1
 8013cc2:	4770      	bx	lr

08013cc4 <geometry_msgs__msg__Vector3__fini>:
 8013cc4:	4770      	bx	lr
 8013cc6:	bf00      	nop

08013cc8 <ucdr_serialize_string>:
 8013cc8:	b510      	push	{r4, lr}
 8013cca:	b082      	sub	sp, #8
 8013ccc:	4604      	mov	r4, r0
 8013cce:	4608      	mov	r0, r1
 8013cd0:	9101      	str	r1, [sp, #4]
 8013cd2:	f7ec fabf 	bl	8000254 <strlen>
 8013cd6:	4602      	mov	r2, r0
 8013cd8:	9901      	ldr	r1, [sp, #4]
 8013cda:	4620      	mov	r0, r4
 8013cdc:	3201      	adds	r2, #1
 8013cde:	b002      	add	sp, #8
 8013ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ce4:	f7fb ba9c 	b.w	800f220 <ucdr_serialize_sequence_char>

08013ce8 <ucdr_deserialize_string>:
 8013ce8:	b500      	push	{lr}
 8013cea:	b083      	sub	sp, #12
 8013cec:	ab01      	add	r3, sp, #4
 8013cee:	f7fb faa9 	bl	800f244 <ucdr_deserialize_sequence_char>
 8013cf2:	b003      	add	sp, #12
 8013cf4:	f85d fb04 	ldr.w	pc, [sp], #4

08013cf8 <get_custom_error>:
 8013cf8:	4b01      	ldr	r3, [pc, #4]	@ (8013d00 <get_custom_error+0x8>)
 8013cfa:	7818      	ldrb	r0, [r3, #0]
 8013cfc:	4770      	bx	lr
 8013cfe:	bf00      	nop
 8013d00:	2000eb20 	.word	0x2000eb20

08013d04 <recv_custom_msg>:
 8013d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d08:	4693      	mov	fp, r2
 8013d0a:	b089      	sub	sp, #36	@ 0x24
 8013d0c:	2200      	movs	r2, #0
 8013d0e:	4604      	mov	r4, r0
 8013d10:	468a      	mov	sl, r1
 8013d12:	9305      	str	r3, [sp, #20]
 8013d14:	f88d 201e 	strb.w	r2, [sp, #30]
 8013d18:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8013d1c:	b322      	cbz	r2, 8013d68 <recv_custom_msg+0x64>
 8013d1e:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8013d22:	f10d 081f 	add.w	r8, sp, #31
 8013d26:	af05      	add	r7, sp, #20
 8013d28:	f10d 061e 	add.w	r6, sp, #30
 8013d2c:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8013d30:	e002      	b.n	8013d38 <recv_custom_msg+0x34>
 8013d32:	9b05      	ldr	r3, [sp, #20]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	dd0f      	ble.n	8013d58 <recv_custom_msg+0x54>
 8013d38:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8013d3c:	4623      	mov	r3, r4
 8013d3e:	4622      	mov	r2, r4
 8013d40:	4648      	mov	r0, r9
 8013d42:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8013d46:	e9cd 5600 	strd	r5, r6, [sp]
 8013d4a:	f001 f8d7 	bl	8014efc <uxr_read_framed_msg>
 8013d4e:	2800      	cmp	r0, #0
 8013d50:	d0ef      	beq.n	8013d32 <recv_custom_msg+0x2e>
 8013d52:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8013d56:	b1b3      	cbz	r3, 8013d86 <recv_custom_msg+0x82>
 8013d58:	4b0f      	ldr	r3, [pc, #60]	@ (8013d98 <recv_custom_msg+0x94>)
 8013d5a:	2000      	movs	r0, #0
 8013d5c:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8013d60:	701a      	strb	r2, [r3, #0]
 8013d62:	b009      	add	sp, #36	@ 0x24
 8013d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d68:	f10d 021f 	add.w	r2, sp, #31
 8013d6c:	4601      	mov	r1, r0
 8013d6e:	9200      	str	r2, [sp, #0]
 8013d70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013d74:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8013d78:	47a8      	blx	r5
 8013d7a:	2800      	cmp	r0, #0
 8013d7c:	d0ec      	beq.n	8013d58 <recv_custom_msg+0x54>
 8013d7e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d1e8      	bne.n	8013d58 <recv_custom_msg+0x54>
 8013d86:	f8cb 0000 	str.w	r0, [fp]
 8013d8a:	2001      	movs	r0, #1
 8013d8c:	f8ca 4000 	str.w	r4, [sl]
 8013d90:	b009      	add	sp, #36	@ 0x24
 8013d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d96:	bf00      	nop
 8013d98:	2000eb20 	.word	0x2000eb20

08013d9c <send_custom_msg>:
 8013d9c:	b530      	push	{r4, r5, lr}
 8013d9e:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8013da2:	b087      	sub	sp, #28
 8013da4:	4614      	mov	r4, r2
 8013da6:	b995      	cbnz	r5, 8013dce <send_custom_msg+0x32>
 8013da8:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 8013dac:	f10d 0317 	add.w	r3, sp, #23
 8013db0:	47a8      	blx	r5
 8013db2:	1e03      	subs	r3, r0, #0
 8013db4:	bf18      	it	ne
 8013db6:	2301      	movne	r3, #1
 8013db8:	42a0      	cmp	r0, r4
 8013dba:	bf18      	it	ne
 8013dbc:	2300      	movne	r3, #0
 8013dbe:	b91b      	cbnz	r3, 8013dc8 <send_custom_msg+0x2c>
 8013dc0:	4a0a      	ldr	r2, [pc, #40]	@ (8013dec <send_custom_msg+0x50>)
 8013dc2:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8013dc6:	7011      	strb	r1, [r2, #0]
 8013dc8:	4618      	mov	r0, r3
 8013dca:	b007      	add	sp, #28
 8013dcc:	bd30      	pop	{r4, r5, pc}
 8013dce:	460b      	mov	r3, r1
 8013dd0:	2200      	movs	r2, #0
 8013dd2:	f10d 0117 	add.w	r1, sp, #23
 8013dd6:	9400      	str	r4, [sp, #0]
 8013dd8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8013ddc:	4602      	mov	r2, r0
 8013dde:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8013de2:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8013de6:	f000 feab 	bl	8014b40 <uxr_write_framed_msg>
 8013dea:	e7e2      	b.n	8013db2 <send_custom_msg+0x16>
 8013dec:	2000eb20 	.word	0x2000eb20

08013df0 <uxr_set_custom_transport_callbacks>:
 8013df0:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8013df4:	9901      	ldr	r1, [sp, #4]
 8013df6:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8013dfa:	9b00      	ldr	r3, [sp, #0]
 8013dfc:	e9c0 319c 	strd	r3, r1, [r0, #624]	@ 0x270
 8013e00:	4770      	bx	lr
 8013e02:	bf00      	nop

08013e04 <uxr_init_custom_transport>:
 8013e04:	b538      	push	{r3, r4, r5, lr}
 8013e06:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8013e0a:	b303      	cbz	r3, 8013e4e <uxr_init_custom_transport+0x4a>
 8013e0c:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8013e10:	4604      	mov	r4, r0
 8013e12:	b1e2      	cbz	r2, 8013e4e <uxr_init_custom_transport+0x4a>
 8013e14:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8013e18:	b1ca      	cbz	r2, 8013e4e <uxr_init_custom_transport+0x4a>
 8013e1a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8013e1e:	b1b2      	cbz	r2, 8013e4e <uxr_init_custom_transport+0x4a>
 8013e20:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8013e24:	4798      	blx	r3
 8013e26:	4605      	mov	r5, r0
 8013e28:	b188      	cbz	r0, 8013e4e <uxr_init_custom_transport+0x4a>
 8013e2a:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8013e2e:	b98b      	cbnz	r3, 8013e54 <uxr_init_custom_transport+0x50>
 8013e30:	4b0b      	ldr	r3, [pc, #44]	@ (8013e60 <uxr_init_custom_transport+0x5c>)
 8013e32:	4628      	mov	r0, r5
 8013e34:	490b      	ldr	r1, [pc, #44]	@ (8013e64 <uxr_init_custom_transport+0x60>)
 8013e36:	4a0c      	ldr	r2, [pc, #48]	@ (8013e68 <uxr_init_custom_transport+0x64>)
 8013e38:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8013e3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013e40:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8013e44:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8013e48:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8013e4c:	bd38      	pop	{r3, r4, r5, pc}
 8013e4e:	2500      	movs	r5, #0
 8013e50:	4628      	mov	r0, r5
 8013e52:	bd38      	pop	{r3, r4, r5, pc}
 8013e54:	2100      	movs	r1, #0
 8013e56:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8013e5a:	f000 fe6b 	bl	8014b34 <uxr_init_framing_io>
 8013e5e:	e7e7      	b.n	8013e30 <uxr_init_custom_transport+0x2c>
 8013e60:	08013d05 	.word	0x08013d05
 8013e64:	08013d9d 	.word	0x08013d9d
 8013e68:	08013cf9 	.word	0x08013cf9

08013e6c <uxr_close_custom_transport>:
 8013e6c:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8013e70:	4718      	bx	r3
 8013e72:	bf00      	nop

08013e74 <uxr_init_input_best_effort_stream>:
 8013e74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013e78:	8003      	strh	r3, [r0, #0]
 8013e7a:	4770      	bx	lr

08013e7c <uxr_reset_input_best_effort_stream>:
 8013e7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013e80:	8003      	strh	r3, [r0, #0]
 8013e82:	4770      	bx	lr

08013e84 <uxr_receive_best_effort_message>:
 8013e84:	b538      	push	{r3, r4, r5, lr}
 8013e86:	4604      	mov	r4, r0
 8013e88:	8800      	ldrh	r0, [r0, #0]
 8013e8a:	460d      	mov	r5, r1
 8013e8c:	f000 fe3a 	bl	8014b04 <uxr_seq_num_cmp>
 8013e90:	4603      	mov	r3, r0
 8013e92:	0fc0      	lsrs	r0, r0, #31
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	bfb8      	it	lt
 8013e98:	8025      	strhlt	r5, [r4, #0]
 8013e9a:	bd38      	pop	{r3, r4, r5, pc}

08013e9c <on_full_input_buffer>:
 8013e9c:	b570      	push	{r4, r5, r6, lr}
 8013e9e:	460c      	mov	r4, r1
 8013ea0:	4605      	mov	r5, r0
 8013ea2:	8908      	ldrh	r0, [r1, #8]
 8013ea4:	682b      	ldr	r3, [r5, #0]
 8013ea6:	7d26      	ldrb	r6, [r4, #20]
 8013ea8:	e9d1 1200 	ldrd	r1, r2, [r1]
 8013eac:	fbb2 f2f0 	udiv	r2, r2, r0
 8013eb0:	eba3 0c01 	sub.w	ip, r3, r1
 8013eb4:	fbbc fcf2 	udiv	ip, ip, r2
 8013eb8:	f10c 0c01 	add.w	ip, ip, #1
 8013ebc:	fa1f f38c 	uxth.w	r3, ip
 8013ec0:	fbb3 fcf0 	udiv	ip, r3, r0
 8013ec4:	fb00 331c 	mls	r3, r0, ip, r3
 8013ec8:	b29b      	uxth	r3, r3
 8013eca:	fb02 f303 	mul.w	r3, r2, r3
 8013ece:	1d18      	adds	r0, r3, #4
 8013ed0:	4408      	add	r0, r1
 8013ed2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8013ed6:	b116      	cbz	r6, 8013ede <on_full_input_buffer+0x42>
 8013ed8:	2600      	movs	r6, #0
 8013eda:	f840 6c04 	str.w	r6, [r0, #-4]
 8013ede:	2a03      	cmp	r2, #3
 8013ee0:	d801      	bhi.n	8013ee6 <on_full_input_buffer+0x4a>
 8013ee2:	2001      	movs	r0, #1
 8013ee4:	bd70      	pop	{r4, r5, r6, pc}
 8013ee6:	3308      	adds	r3, #8
 8013ee8:	4628      	mov	r0, r5
 8013eea:	3a04      	subs	r2, #4
 8013eec:	4419      	add	r1, r3
 8013eee:	692b      	ldr	r3, [r5, #16]
 8013ef0:	f7fb f91a 	bl	800f128 <ucdr_init_buffer_origin>
 8013ef4:	4628      	mov	r0, r5
 8013ef6:	4622      	mov	r2, r4
 8013ef8:	4902      	ldr	r1, [pc, #8]	@ (8013f04 <on_full_input_buffer+0x68>)
 8013efa:	f7fb f8f1 	bl	800f0e0 <ucdr_set_on_full_buffer_callback>
 8013efe:	2000      	movs	r0, #0
 8013f00:	bd70      	pop	{r4, r5, r6, pc}
 8013f02:	bf00      	nop
 8013f04:	08013e9d 	.word	0x08013e9d

08013f08 <uxr_init_input_reliable_stream>:
 8013f08:	b510      	push	{r4, lr}
 8013f0a:	e9c0 1200 	strd	r1, r2, [r0]
 8013f0e:	2400      	movs	r4, #0
 8013f10:	9a02      	ldr	r2, [sp, #8]
 8013f12:	8103      	strh	r3, [r0, #8]
 8013f14:	6102      	str	r2, [r0, #16]
 8013f16:	7504      	strb	r4, [r0, #20]
 8013f18:	b1c3      	cbz	r3, 8013f4c <uxr_init_input_reliable_stream+0x44>
 8013f1a:	600c      	str	r4, [r1, #0]
 8013f1c:	8901      	ldrh	r1, [r0, #8]
 8013f1e:	2901      	cmp	r1, #1
 8013f20:	d914      	bls.n	8013f4c <uxr_init_input_reliable_stream+0x44>
 8013f22:	f04f 0c01 	mov.w	ip, #1
 8013f26:	6843      	ldr	r3, [r0, #4]
 8013f28:	f10c 0e01 	add.w	lr, ip, #1
 8013f2c:	fbbc f2f1 	udiv	r2, ip, r1
 8013f30:	fbb3 f3f1 	udiv	r3, r3, r1
 8013f34:	fb01 c212 	mls	r2, r1, r2, ip
 8013f38:	fa1f fc8e 	uxth.w	ip, lr
 8013f3c:	b292      	uxth	r2, r2
 8013f3e:	fb02 f303 	mul.w	r3, r2, r3
 8013f42:	6802      	ldr	r2, [r0, #0]
 8013f44:	50d4      	str	r4, [r2, r3]
 8013f46:	8901      	ldrh	r1, [r0, #8]
 8013f48:	4561      	cmp	r1, ip
 8013f4a:	d8ec      	bhi.n	8013f26 <uxr_init_input_reliable_stream+0x1e>
 8013f4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013f50:	60c3      	str	r3, [r0, #12]
 8013f52:	bd10      	pop	{r4, pc}

08013f54 <uxr_reset_input_reliable_stream>:
 8013f54:	8901      	ldrh	r1, [r0, #8]
 8013f56:	b1d9      	cbz	r1, 8013f90 <uxr_reset_input_reliable_stream+0x3c>
 8013f58:	b510      	push	{r4, lr}
 8013f5a:	f04f 0e00 	mov.w	lr, #0
 8013f5e:	46f4      	mov	ip, lr
 8013f60:	4674      	mov	r4, lr
 8013f62:	6843      	ldr	r3, [r0, #4]
 8013f64:	f10e 0e01 	add.w	lr, lr, #1
 8013f68:	fbbc f2f1 	udiv	r2, ip, r1
 8013f6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8013f70:	fb01 c212 	mls	r2, r1, r2, ip
 8013f74:	fa1f fc8e 	uxth.w	ip, lr
 8013f78:	b292      	uxth	r2, r2
 8013f7a:	fb02 f303 	mul.w	r3, r2, r3
 8013f7e:	6802      	ldr	r2, [r0, #0]
 8013f80:	50d4      	str	r4, [r2, r3]
 8013f82:	8901      	ldrh	r1, [r0, #8]
 8013f84:	4561      	cmp	r1, ip
 8013f86:	d8ec      	bhi.n	8013f62 <uxr_reset_input_reliable_stream+0xe>
 8013f88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013f8c:	60c3      	str	r3, [r0, #12]
 8013f8e:	bd10      	pop	{r4, pc}
 8013f90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013f94:	60c3      	str	r3, [r0, #12]
 8013f96:	4770      	bx	lr

08013f98 <uxr_receive_reliable_message>:
 8013f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f9c:	4604      	mov	r4, r0
 8013f9e:	460d      	mov	r5, r1
 8013fa0:	8901      	ldrh	r1, [r0, #8]
 8013fa2:	4617      	mov	r7, r2
 8013fa4:	8980      	ldrh	r0, [r0, #12]
 8013fa6:	4698      	mov	r8, r3
 8013fa8:	f000 fda4 	bl	8014af4 <uxr_seq_num_add>
 8013fac:	4629      	mov	r1, r5
 8013fae:	4606      	mov	r6, r0
 8013fb0:	89a0      	ldrh	r0, [r4, #12]
 8013fb2:	f000 fda7 	bl	8014b04 <uxr_seq_num_cmp>
 8013fb6:	2800      	cmp	r0, #0
 8013fb8:	db0a      	blt.n	8013fd0 <uxr_receive_reliable_message+0x38>
 8013fba:	2600      	movs	r6, #0
 8013fbc:	4629      	mov	r1, r5
 8013fbe:	89e0      	ldrh	r0, [r4, #14]
 8013fc0:	f000 fda0 	bl	8014b04 <uxr_seq_num_cmp>
 8013fc4:	2800      	cmp	r0, #0
 8013fc6:	da00      	bge.n	8013fca <uxr_receive_reliable_message+0x32>
 8013fc8:	81e5      	strh	r5, [r4, #14]
 8013fca:	4630      	mov	r0, r6
 8013fcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013fd0:	4630      	mov	r0, r6
 8013fd2:	4629      	mov	r1, r5
 8013fd4:	f000 fd96 	bl	8014b04 <uxr_seq_num_cmp>
 8013fd8:	2800      	cmp	r0, #0
 8013fda:	dbee      	blt.n	8013fba <uxr_receive_reliable_message+0x22>
 8013fdc:	6923      	ldr	r3, [r4, #16]
 8013fde:	4638      	mov	r0, r7
 8013fe0:	4798      	blx	r3
 8013fe2:	4681      	mov	r9, r0
 8013fe4:	2101      	movs	r1, #1
 8013fe6:	89a0      	ldrh	r0, [r4, #12]
 8013fe8:	f000 fd84 	bl	8014af4 <uxr_seq_num_add>
 8013fec:	f1b9 0f00 	cmp.w	r9, #0
 8013ff0:	bf08      	it	eq
 8013ff2:	4285      	cmpeq	r5, r0
 8013ff4:	bf0c      	ite	eq
 8013ff6:	2601      	moveq	r6, #1
 8013ff8:	2600      	movne	r6, #0
 8013ffa:	d104      	bne.n	8014006 <uxr_receive_reliable_message+0x6e>
 8013ffc:	2300      	movs	r3, #0
 8013ffe:	9a08      	ldr	r2, [sp, #32]
 8014000:	81a0      	strh	r0, [r4, #12]
 8014002:	7013      	strb	r3, [r2, #0]
 8014004:	e7da      	b.n	8013fbc <uxr_receive_reliable_message+0x24>
 8014006:	8922      	ldrh	r2, [r4, #8]
 8014008:	6863      	ldr	r3, [r4, #4]
 801400a:	fbb5 f0f2 	udiv	r0, r5, r2
 801400e:	fbb3 f3f2 	udiv	r3, r3, r2
 8014012:	fb02 5010 	mls	r0, r2, r0, r5
 8014016:	b280      	uxth	r0, r0
 8014018:	fb03 f000 	mul.w	r0, r3, r0
 801401c:	6823      	ldr	r3, [r4, #0]
 801401e:	3004      	adds	r0, #4
 8014020:	4418      	add	r0, r3
 8014022:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d1c7      	bne.n	8013fba <uxr_receive_reliable_message+0x22>
 801402a:	4639      	mov	r1, r7
 801402c:	4642      	mov	r2, r8
 801402e:	f002 fc60 	bl	80168f2 <memcpy>
 8014032:	8921      	ldrh	r1, [r4, #8]
 8014034:	6863      	ldr	r3, [r4, #4]
 8014036:	fbb5 f2f1 	udiv	r2, r5, r1
 801403a:	fbb3 f3f1 	udiv	r3, r3, r1
 801403e:	fb01 5212 	mls	r2, r1, r2, r5
 8014042:	b292      	uxth	r2, r2
 8014044:	fb02 f303 	mul.w	r3, r2, r3
 8014048:	6822      	ldr	r2, [r4, #0]
 801404a:	f842 8003 	str.w	r8, [r2, r3]
 801404e:	2301      	movs	r3, #1
 8014050:	9a08      	ldr	r2, [sp, #32]
 8014052:	7013      	strb	r3, [r2, #0]
 8014054:	f1b9 0f00 	cmp.w	r9, #0
 8014058:	d0af      	beq.n	8013fba <uxr_receive_reliable_message+0x22>
 801405a:	89a6      	ldrh	r6, [r4, #12]
 801405c:	2101      	movs	r1, #1
 801405e:	4630      	mov	r0, r6
 8014060:	f000 fd48 	bl	8014af4 <uxr_seq_num_add>
 8014064:	8921      	ldrh	r1, [r4, #8]
 8014066:	6863      	ldr	r3, [r4, #4]
 8014068:	4606      	mov	r6, r0
 801406a:	fbb0 f2f1 	udiv	r2, r0, r1
 801406e:	fbb3 f3f1 	udiv	r3, r3, r1
 8014072:	fb01 0212 	mls	r2, r1, r2, r0
 8014076:	6820      	ldr	r0, [r4, #0]
 8014078:	b292      	uxth	r2, r2
 801407a:	fb02 f303 	mul.w	r3, r2, r3
 801407e:	3304      	adds	r3, #4
 8014080:	4418      	add	r0, r3
 8014082:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d097      	beq.n	8013fba <uxr_receive_reliable_message+0x22>
 801408a:	6923      	ldr	r3, [r4, #16]
 801408c:	4798      	blx	r3
 801408e:	2802      	cmp	r0, #2
 8014090:	d002      	beq.n	8014098 <uxr_receive_reliable_message+0x100>
 8014092:	2801      	cmp	r0, #1
 8014094:	d0e2      	beq.n	801405c <uxr_receive_reliable_message+0xc4>
 8014096:	e790      	b.n	8013fba <uxr_receive_reliable_message+0x22>
 8014098:	2601      	movs	r6, #1
 801409a:	e78f      	b.n	8013fbc <uxr_receive_reliable_message+0x24>

0801409c <uxr_next_input_reliable_buffer_available>:
 801409c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80140a0:	4604      	mov	r4, r0
 80140a2:	460f      	mov	r7, r1
 80140a4:	8980      	ldrh	r0, [r0, #12]
 80140a6:	2101      	movs	r1, #1
 80140a8:	4690      	mov	r8, r2
 80140aa:	f000 fd23 	bl	8014af4 <uxr_seq_num_add>
 80140ae:	8922      	ldrh	r2, [r4, #8]
 80140b0:	6866      	ldr	r6, [r4, #4]
 80140b2:	fbb0 f3f2 	udiv	r3, r0, r2
 80140b6:	fbb6 f6f2 	udiv	r6, r6, r2
 80140ba:	fb02 0313 	mls	r3, r2, r3, r0
 80140be:	b29b      	uxth	r3, r3
 80140c0:	fb03 f606 	mul.w	r6, r3, r6
 80140c4:	6823      	ldr	r3, [r4, #0]
 80140c6:	3604      	adds	r6, #4
 80140c8:	441e      	add	r6, r3
 80140ca:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80140ce:	f1b9 0f00 	cmp.w	r9, #0
 80140d2:	d023      	beq.n	801411c <uxr_next_input_reliable_buffer_available+0x80>
 80140d4:	4605      	mov	r5, r0
 80140d6:	6923      	ldr	r3, [r4, #16]
 80140d8:	4630      	mov	r0, r6
 80140da:	4798      	blx	r3
 80140dc:	4682      	mov	sl, r0
 80140de:	b300      	cbz	r0, 8014122 <uxr_next_input_reliable_buffer_available+0x86>
 80140e0:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80140e4:	2101      	movs	r1, #1
 80140e6:	4650      	mov	r0, sl
 80140e8:	f000 fd04 	bl	8014af4 <uxr_seq_num_add>
 80140ec:	8921      	ldrh	r1, [r4, #8]
 80140ee:	4682      	mov	sl, r0
 80140f0:	6863      	ldr	r3, [r4, #4]
 80140f2:	6820      	ldr	r0, [r4, #0]
 80140f4:	fbba f2f1 	udiv	r2, sl, r1
 80140f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80140fc:	fb01 a212 	mls	r2, r1, r2, sl
 8014100:	b292      	uxth	r2, r2
 8014102:	fb02 f303 	mul.w	r3, r2, r3
 8014106:	3304      	adds	r3, #4
 8014108:	4418      	add	r0, r3
 801410a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801410e:	b12b      	cbz	r3, 801411c <uxr_next_input_reliable_buffer_available+0x80>
 8014110:	6923      	ldr	r3, [r4, #16]
 8014112:	4798      	blx	r3
 8014114:	2802      	cmp	r0, #2
 8014116:	d01b      	beq.n	8014150 <uxr_next_input_reliable_buffer_available+0xb4>
 8014118:	2801      	cmp	r0, #1
 801411a:	d0e3      	beq.n	80140e4 <uxr_next_input_reliable_buffer_available+0x48>
 801411c:	2000      	movs	r0, #0
 801411e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014122:	464a      	mov	r2, r9
 8014124:	4631      	mov	r1, r6
 8014126:	4638      	mov	r0, r7
 8014128:	f7fb f806 	bl	800f138 <ucdr_init_buffer>
 801412c:	8921      	ldrh	r1, [r4, #8]
 801412e:	6863      	ldr	r3, [r4, #4]
 8014130:	2001      	movs	r0, #1
 8014132:	fbb5 f2f1 	udiv	r2, r5, r1
 8014136:	fbb3 f3f1 	udiv	r3, r3, r1
 801413a:	fb01 5212 	mls	r2, r1, r2, r5
 801413e:	b292      	uxth	r2, r2
 8014140:	fb02 f303 	mul.w	r3, r2, r3
 8014144:	6822      	ldr	r2, [r4, #0]
 8014146:	f842 a003 	str.w	sl, [r2, r3]
 801414a:	81a5      	strh	r5, [r4, #12]
 801414c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014150:	8920      	ldrh	r0, [r4, #8]
 8014152:	eb06 0108 	add.w	r1, r6, r8
 8014156:	6863      	ldr	r3, [r4, #4]
 8014158:	eba9 0208 	sub.w	r2, r9, r8
 801415c:	fbb5 f6f0 	udiv	r6, r5, r0
 8014160:	fbb3 f3f0 	udiv	r3, r3, r0
 8014164:	fb00 5516 	mls	r5, r0, r6, r5
 8014168:	2000      	movs	r0, #0
 801416a:	b2ad      	uxth	r5, r5
 801416c:	fb03 f505 	mul.w	r5, r3, r5
 8014170:	6823      	ldr	r3, [r4, #0]
 8014172:	5158      	str	r0, [r3, r5]
 8014174:	4638      	mov	r0, r7
 8014176:	f7fa ffdf 	bl	800f138 <ucdr_init_buffer>
 801417a:	4638      	mov	r0, r7
 801417c:	4622      	mov	r2, r4
 801417e:	4903      	ldr	r1, [pc, #12]	@ (801418c <uxr_next_input_reliable_buffer_available+0xf0>)
 8014180:	f7fa ffae 	bl	800f0e0 <ucdr_set_on_full_buffer_callback>
 8014184:	2001      	movs	r0, #1
 8014186:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801418a:	e7c8      	b.n	801411e <uxr_next_input_reliable_buffer_available+0x82>
 801418c:	08013e9d 	.word	0x08013e9d

08014190 <uxr_process_heartbeat>:
 8014190:	b538      	push	{r3, r4, r5, lr}
 8014192:	4611      	mov	r1, r2
 8014194:	4604      	mov	r4, r0
 8014196:	89c0      	ldrh	r0, [r0, #14]
 8014198:	4615      	mov	r5, r2
 801419a:	f000 fcb3 	bl	8014b04 <uxr_seq_num_cmp>
 801419e:	2800      	cmp	r0, #0
 80141a0:	bfb8      	it	lt
 80141a2:	81e5      	strhlt	r5, [r4, #14]
 80141a4:	bd38      	pop	{r3, r4, r5, pc}
 80141a6:	bf00      	nop

080141a8 <uxr_compute_acknack>:
 80141a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80141ac:	8903      	ldrh	r3, [r0, #8]
 80141ae:	4604      	mov	r4, r0
 80141b0:	460f      	mov	r7, r1
 80141b2:	8985      	ldrh	r5, [r0, #12]
 80141b4:	b1db      	cbz	r3, 80141ee <uxr_compute_acknack+0x46>
 80141b6:	4628      	mov	r0, r5
 80141b8:	2601      	movs	r6, #1
 80141ba:	e004      	b.n	80141c6 <uxr_compute_acknack+0x1e>
 80141bc:	4566      	cmp	r6, ip
 80141be:	f106 0601 	add.w	r6, r6, #1
 80141c2:	d214      	bcs.n	80141ee <uxr_compute_acknack+0x46>
 80141c4:	89a0      	ldrh	r0, [r4, #12]
 80141c6:	b2b1      	uxth	r1, r6
 80141c8:	f000 fc94 	bl	8014af4 <uxr_seq_num_add>
 80141cc:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80141d0:	fbb0 f2fc 	udiv	r2, r0, ip
 80141d4:	e9d4 1300 	ldrd	r1, r3, [r4]
 80141d8:	fb0c 0212 	mls	r2, ip, r2, r0
 80141dc:	fbb3 f3fc 	udiv	r3, r3, ip
 80141e0:	b292      	uxth	r2, r2
 80141e2:	fb02 f303 	mul.w	r3, r2, r3
 80141e6:	58cb      	ldr	r3, [r1, r3]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d1e7      	bne.n	80141bc <uxr_compute_acknack+0x14>
 80141ec:	4605      	mov	r5, r0
 80141ee:	803d      	strh	r5, [r7, #0]
 80141f0:	2101      	movs	r1, #1
 80141f2:	89e6      	ldrh	r6, [r4, #14]
 80141f4:	4628      	mov	r0, r5
 80141f6:	f000 fc81 	bl	8014afc <uxr_seq_num_sub>
 80141fa:	4601      	mov	r1, r0
 80141fc:	4630      	mov	r0, r6
 80141fe:	f000 fc7d 	bl	8014afc <uxr_seq_num_sub>
 8014202:	4606      	mov	r6, r0
 8014204:	b328      	cbz	r0, 8014252 <uxr_compute_acknack+0xaa>
 8014206:	f04f 0900 	mov.w	r9, #0
 801420a:	f04f 0801 	mov.w	r8, #1
 801420e:	464d      	mov	r5, r9
 8014210:	fa1f f189 	uxth.w	r1, r9
 8014214:	8838      	ldrh	r0, [r7, #0]
 8014216:	f000 fc6d 	bl	8014af4 <uxr_seq_num_add>
 801421a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801421e:	6861      	ldr	r1, [r4, #4]
 8014220:	fa08 fe09 	lsl.w	lr, r8, r9
 8014224:	6822      	ldr	r2, [r4, #0]
 8014226:	f109 0901 	add.w	r9, r9, #1
 801422a:	ea4e 0e05 	orr.w	lr, lr, r5
 801422e:	fbb0 f3fc 	udiv	r3, r0, ip
 8014232:	fbb1 f1fc 	udiv	r1, r1, ip
 8014236:	fb03 001c 	mls	r0, r3, ip, r0
 801423a:	b283      	uxth	r3, r0
 801423c:	fb01 f303 	mul.w	r3, r1, r3
 8014240:	58d3      	ldr	r3, [r2, r3]
 8014242:	b90b      	cbnz	r3, 8014248 <uxr_compute_acknack+0xa0>
 8014244:	fa1f f58e 	uxth.w	r5, lr
 8014248:	454e      	cmp	r6, r9
 801424a:	d1e1      	bne.n	8014210 <uxr_compute_acknack+0x68>
 801424c:	4628      	mov	r0, r5
 801424e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014252:	4605      	mov	r5, r0
 8014254:	4628      	mov	r0, r5
 8014256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801425a:	bf00      	nop

0801425c <uxr_init_output_best_effort_stream>:
 801425c:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8014260:	6001      	str	r1, [r0, #0]
 8014262:	7303      	strb	r3, [r0, #12]
 8014264:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8014268:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801426c:	4770      	bx	lr
 801426e:	bf00      	nop

08014270 <uxr_reset_output_best_effort_stream>:
 8014270:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014274:	7b03      	ldrb	r3, [r0, #12]
 8014276:	81c2      	strh	r2, [r0, #14]
 8014278:	6043      	str	r3, [r0, #4]
 801427a:	4770      	bx	lr

0801427c <uxr_prepare_best_effort_buffer_to_write>:
 801427c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801427e:	4604      	mov	r4, r0
 8014280:	b083      	sub	sp, #12
 8014282:	6840      	ldr	r0, [r0, #4]
 8014284:	460d      	mov	r5, r1
 8014286:	4616      	mov	r6, r2
 8014288:	f7fc fb9a 	bl	80109c0 <uxr_submessage_padding>
 801428c:	6863      	ldr	r3, [r4, #4]
 801428e:	4418      	add	r0, r3
 8014290:	68a3      	ldr	r3, [r4, #8]
 8014292:	1942      	adds	r2, r0, r5
 8014294:	4293      	cmp	r3, r2
 8014296:	bf2c      	ite	cs
 8014298:	2701      	movcs	r7, #1
 801429a:	2700      	movcc	r7, #0
 801429c:	d202      	bcs.n	80142a4 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801429e:	4638      	mov	r0, r7
 80142a0:	b003      	add	sp, #12
 80142a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142a4:	9000      	str	r0, [sp, #0]
 80142a6:	2300      	movs	r3, #0
 80142a8:	4630      	mov	r0, r6
 80142aa:	6821      	ldr	r1, [r4, #0]
 80142ac:	f7fa ff32 	bl	800f114 <ucdr_init_buffer_origin_offset>
 80142b0:	6861      	ldr	r1, [r4, #4]
 80142b2:	4638      	mov	r0, r7
 80142b4:	4429      	add	r1, r5
 80142b6:	6061      	str	r1, [r4, #4]
 80142b8:	b003      	add	sp, #12
 80142ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080142bc <uxr_prepare_best_effort_buffer_to_send>:
 80142bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142c0:	4604      	mov	r4, r0
 80142c2:	461d      	mov	r5, r3
 80142c4:	6840      	ldr	r0, [r0, #4]
 80142c6:	7b23      	ldrb	r3, [r4, #12]
 80142c8:	4298      	cmp	r0, r3
 80142ca:	bf8c      	ite	hi
 80142cc:	2601      	movhi	r6, #1
 80142ce:	2600      	movls	r6, #0
 80142d0:	d802      	bhi.n	80142d8 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80142d2:	4630      	mov	r0, r6
 80142d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142d8:	4688      	mov	r8, r1
 80142da:	89e0      	ldrh	r0, [r4, #14]
 80142dc:	2101      	movs	r1, #1
 80142de:	4617      	mov	r7, r2
 80142e0:	f000 fc08 	bl	8014af4 <uxr_seq_num_add>
 80142e4:	6823      	ldr	r3, [r4, #0]
 80142e6:	81e0      	strh	r0, [r4, #14]
 80142e8:	8028      	strh	r0, [r5, #0]
 80142ea:	4630      	mov	r0, r6
 80142ec:	f8c8 3000 	str.w	r3, [r8]
 80142f0:	6863      	ldr	r3, [r4, #4]
 80142f2:	603b      	str	r3, [r7, #0]
 80142f4:	7b23      	ldrb	r3, [r4, #12]
 80142f6:	6063      	str	r3, [r4, #4]
 80142f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080142fc <on_full_output_buffer>:
 80142fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142fe:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8014302:	460c      	mov	r4, r1
 8014304:	6803      	ldr	r3, [r0, #0]
 8014306:	4605      	mov	r5, r0
 8014308:	7b26      	ldrb	r6, [r4, #12]
 801430a:	e9d1 1200 	ldrd	r1, r2, [r1]
 801430e:	fbb2 f2fc 	udiv	r2, r2, ip
 8014312:	eba3 0e01 	sub.w	lr, r3, r1
 8014316:	6903      	ldr	r3, [r0, #16]
 8014318:	fbbe fef2 	udiv	lr, lr, r2
 801431c:	f10e 0e01 	add.w	lr, lr, #1
 8014320:	fa1f fe8e 	uxth.w	lr, lr
 8014324:	fbbe f7fc 	udiv	r7, lr, ip
 8014328:	fb0c ec17 	mls	ip, ip, r7, lr
 801432c:	fa1f fc8c 	uxth.w	ip, ip
 8014330:	fb02 fc0c 	mul.w	ip, r2, ip
 8014334:	f851 200c 	ldr.w	r2, [r1, ip]
 8014338:	44b4      	add	ip, r6
 801433a:	1b92      	subs	r2, r2, r6
 801433c:	f10c 0c08 	add.w	ip, ip, #8
 8014340:	3a04      	subs	r2, #4
 8014342:	4461      	add	r1, ip
 8014344:	f7fa fef0 	bl	800f128 <ucdr_init_buffer_origin>
 8014348:	4628      	mov	r0, r5
 801434a:	4622      	mov	r2, r4
 801434c:	4902      	ldr	r1, [pc, #8]	@ (8014358 <on_full_output_buffer+0x5c>)
 801434e:	f7fa fec7 	bl	800f0e0 <ucdr_set_on_full_buffer_callback>
 8014352:	2000      	movs	r0, #0
 8014354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014356:	bf00      	nop
 8014358:	080142fd 	.word	0x080142fd

0801435c <uxr_init_output_reliable_stream>:
 801435c:	b530      	push	{r4, r5, lr}
 801435e:	f89d 400c 	ldrb.w	r4, [sp, #12]
 8014362:	8103      	strh	r3, [r0, #8]
 8014364:	7304      	strb	r4, [r0, #12]
 8014366:	e9c0 1200 	strd	r1, r2, [r0]
 801436a:	b1e3      	cbz	r3, 80143a6 <uxr_init_output_reliable_stream+0x4a>
 801436c:	600c      	str	r4, [r1, #0]
 801436e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014372:	f1bc 0f01 	cmp.w	ip, #1
 8014376:	d916      	bls.n	80143a6 <uxr_init_output_reliable_stream+0x4a>
 8014378:	f04f 0e01 	mov.w	lr, #1
 801437c:	6843      	ldr	r3, [r0, #4]
 801437e:	f10e 0501 	add.w	r5, lr, #1
 8014382:	7b04      	ldrb	r4, [r0, #12]
 8014384:	6801      	ldr	r1, [r0, #0]
 8014386:	fbbe f2fc 	udiv	r2, lr, ip
 801438a:	fbb3 f3fc 	udiv	r3, r3, ip
 801438e:	fb0c e212 	mls	r2, ip, r2, lr
 8014392:	fa1f fe85 	uxth.w	lr, r5
 8014396:	b292      	uxth	r2, r2
 8014398:	fb02 f303 	mul.w	r3, r2, r3
 801439c:	50cc      	str	r4, [r1, r3]
 801439e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80143a2:	45f4      	cmp	ip, lr
 80143a4:	d8ea      	bhi.n	801437c <uxr_init_output_reliable_stream+0x20>
 80143a6:	4b07      	ldr	r3, [pc, #28]	@ (80143c4 <uxr_init_output_reliable_stream+0x68>)
 80143a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80143ac:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80143b0:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 80143b4:	f8c0 300e 	str.w	r3, [r0, #14]
 80143b8:	2300      	movs	r3, #0
 80143ba:	8242      	strh	r2, [r0, #18]
 80143bc:	8403      	strh	r3, [r0, #32]
 80143be:	e9c0 4506 	strd	r4, r5, [r0, #24]
 80143c2:	bd30      	pop	{r4, r5, pc}
 80143c4:	ffff0000 	.word	0xffff0000

080143c8 <uxr_reset_output_reliable_stream>:
 80143c8:	8901      	ldrh	r1, [r0, #8]
 80143ca:	b510      	push	{r4, lr}
 80143cc:	b1b1      	cbz	r1, 80143fc <uxr_reset_output_reliable_stream+0x34>
 80143ce:	f04f 0e00 	mov.w	lr, #0
 80143d2:	46f4      	mov	ip, lr
 80143d4:	6843      	ldr	r3, [r0, #4]
 80143d6:	f10e 0e01 	add.w	lr, lr, #1
 80143da:	7b04      	ldrb	r4, [r0, #12]
 80143dc:	fbbc f2f1 	udiv	r2, ip, r1
 80143e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80143e4:	fb01 c212 	mls	r2, r1, r2, ip
 80143e8:	fa1f fc8e 	uxth.w	ip, lr
 80143ec:	b292      	uxth	r2, r2
 80143ee:	fb02 f303 	mul.w	r3, r2, r3
 80143f2:	6802      	ldr	r2, [r0, #0]
 80143f4:	50d4      	str	r4, [r2, r3]
 80143f6:	8901      	ldrh	r1, [r0, #8]
 80143f8:	4561      	cmp	r1, ip
 80143fa:	d8eb      	bhi.n	80143d4 <uxr_reset_output_reliable_stream+0xc>
 80143fc:	4b08      	ldr	r3, [pc, #32]	@ (8014420 <uxr_reset_output_reliable_stream+0x58>)
 80143fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014402:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 8014418 <uxr_reset_output_reliable_stream+0x50>
 8014406:	f8c0 300e 	str.w	r3, [r0, #14]
 801440a:	2300      	movs	r3, #0
 801440c:	8242      	strh	r2, [r0, #18]
 801440e:	8403      	strh	r3, [r0, #32]
 8014410:	ed80 7b06 	vstr	d7, [r0, #24]
 8014414:	bd10      	pop	{r4, pc}
 8014416:	bf00      	nop
 8014418:	ffffffff 	.word	0xffffffff
 801441c:	7fffffff 	.word	0x7fffffff
 8014420:	ffff0000 	.word	0xffff0000

08014424 <uxr_prepare_reliable_buffer_to_write>:
 8014424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014428:	4604      	mov	r4, r0
 801442a:	b091      	sub	sp, #68	@ 0x44
 801442c:	8900      	ldrh	r0, [r0, #8]
 801442e:	468b      	mov	fp, r1
 8014430:	89e6      	ldrh	r6, [r4, #14]
 8014432:	9204      	str	r2, [sp, #16]
 8014434:	6865      	ldr	r5, [r4, #4]
 8014436:	6823      	ldr	r3, [r4, #0]
 8014438:	f894 900c 	ldrb.w	r9, [r4, #12]
 801443c:	fbb6 f2f0 	udiv	r2, r6, r0
 8014440:	fbb5 f5f0 	udiv	r5, r5, r0
 8014444:	fb00 6212 	mls	r2, r0, r2, r6
 8014448:	1f2f      	subs	r7, r5, #4
 801444a:	b292      	uxth	r2, r2
 801444c:	fb05 3202 	mla	r2, r5, r2, r3
 8014450:	1d11      	adds	r1, r2, #4
 8014452:	f8d2 8000 	ldr.w	r8, [r2]
 8014456:	9103      	str	r1, [sp, #12]
 8014458:	2800      	cmp	r0, #0
 801445a:	f000 814a 	beq.w	80146f2 <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801445e:	f04f 0c00 	mov.w	ip, #0
 8014462:	46e2      	mov	sl, ip
 8014464:	4661      	mov	r1, ip
 8014466:	f10c 0c01 	add.w	ip, ip, #1
 801446a:	fbb1 f2f0 	udiv	r2, r1, r0
 801446e:	fb00 1212 	mls	r2, r0, r2, r1
 8014472:	fa1f f18c 	uxth.w	r1, ip
 8014476:	b292      	uxth	r2, r2
 8014478:	fb05 f202 	mul.w	r2, r5, r2
 801447c:	589a      	ldr	r2, [r3, r2]
 801447e:	454a      	cmp	r2, r9
 8014480:	d103      	bne.n	801448a <uxr_prepare_reliable_buffer_to_write+0x66>
 8014482:	f10a 0a01 	add.w	sl, sl, #1
 8014486:	fa1f fa8a 	uxth.w	sl, sl
 801448a:	4281      	cmp	r1, r0
 801448c:	d3eb      	bcc.n	8014466 <uxr_prepare_reliable_buffer_to_write+0x42>
 801448e:	4640      	mov	r0, r8
 8014490:	2104      	movs	r1, #4
 8014492:	f8cd a014 	str.w	sl, [sp, #20]
 8014496:	f7fa fe53 	bl	800f140 <ucdr_alignment>
 801449a:	4480      	add	r8, r0
 801449c:	eb08 020b 	add.w	r2, r8, fp
 80144a0:	42ba      	cmp	r2, r7
 80144a2:	f240 80ca 	bls.w	801463a <uxr_prepare_reliable_buffer_to_write+0x216>
 80144a6:	7b22      	ldrb	r2, [r4, #12]
 80144a8:	445a      	add	r2, fp
 80144aa:	42ba      	cmp	r2, r7
 80144ac:	f240 80b2 	bls.w	8014614 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 80144b0:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 80144b4:	b2bb      	uxth	r3, r7
 80144b6:	eba2 0209 	sub.w	r2, r2, r9
 80144ba:	441a      	add	r2, r3
 80144bc:	b292      	uxth	r2, r2
 80144be:	fb0a f902 	mul.w	r9, sl, r2
 80144c2:	9205      	str	r2, [sp, #20]
 80144c4:	45d9      	cmp	r9, fp
 80144c6:	9206      	str	r2, [sp, #24]
 80144c8:	f0c0 80b3 	bcc.w	8014632 <uxr_prepare_reliable_buffer_to_write+0x20e>
 80144cc:	f108 0204 	add.w	r2, r8, #4
 80144d0:	42ba      	cmp	r2, r7
 80144d2:	f080 80da 	bcs.w	801468a <uxr_prepare_reliable_buffer_to_write+0x266>
 80144d6:	f1a3 0904 	sub.w	r9, r3, #4
 80144da:	9b05      	ldr	r3, [sp, #20]
 80144dc:	eba9 0908 	sub.w	r9, r9, r8
 80144e0:	fa1f f989 	uxth.w	r9, r9
 80144e4:	ebab 0b09 	sub.w	fp, fp, r9
 80144e8:	fbbb f2f3 	udiv	r2, fp, r3
 80144ec:	fb03 b312 	mls	r3, r3, r2, fp
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	f040 80c4 	bne.w	801467e <uxr_prepare_reliable_buffer_to_write+0x25a>
 80144f6:	b293      	uxth	r3, r2
 80144f8:	4553      	cmp	r3, sl
 80144fa:	f200 809a 	bhi.w	8014632 <uxr_prepare_reliable_buffer_to_write+0x20e>
 80144fe:	2b00      	cmp	r3, #0
 8014500:	f000 80f9 	beq.w	80146f6 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8014504:	f8cd 801c 	str.w	r8, [sp, #28]
 8014508:	f04f 0a00 	mov.w	sl, #0
 801450c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8014510:	f10d 0b20 	add.w	fp, sp, #32
 8014514:	9505      	str	r5, [sp, #20]
 8014516:	461d      	mov	r5, r3
 8014518:	e000      	b.n	801451c <uxr_prepare_reliable_buffer_to_write+0xf8>
 801451a:	46c1      	mov	r9, r8
 801451c:	8922      	ldrh	r2, [r4, #8]
 801451e:	4658      	mov	r0, fp
 8014520:	6863      	ldr	r3, [r4, #4]
 8014522:	f10a 0a01 	add.w	sl, sl, #1
 8014526:	fbb6 f1f2 	udiv	r1, r6, r2
 801452a:	fbb3 f3f2 	udiv	r3, r3, r2
 801452e:	fb02 6111 	mls	r1, r2, r1, r6
 8014532:	463a      	mov	r2, r7
 8014534:	b289      	uxth	r1, r1
 8014536:	fb03 f101 	mul.w	r1, r3, r1
 801453a:	6823      	ldr	r3, [r4, #0]
 801453c:	3104      	adds	r1, #4
 801453e:	4419      	add	r1, r3
 8014540:	2300      	movs	r3, #0
 8014542:	f851 cc04 	ldr.w	ip, [r1, #-4]
 8014546:	f8cd c000 	str.w	ip, [sp]
 801454a:	f7fa fde3 	bl	800f114 <ucdr_init_buffer_origin_offset>
 801454e:	464a      	mov	r2, r9
 8014550:	2300      	movs	r3, #0
 8014552:	210d      	movs	r1, #13
 8014554:	4658      	mov	r0, fp
 8014556:	f7fc f9f3 	bl	8010940 <uxr_buffer_submessage_header>
 801455a:	8921      	ldrh	r1, [r4, #8]
 801455c:	6863      	ldr	r3, [r4, #4]
 801455e:	4630      	mov	r0, r6
 8014560:	fbb6 f2f1 	udiv	r2, r6, r1
 8014564:	fbb3 f3f1 	udiv	r3, r3, r1
 8014568:	fb01 6212 	mls	r2, r1, r2, r6
 801456c:	2101      	movs	r1, #1
 801456e:	b292      	uxth	r2, r2
 8014570:	fb02 f303 	mul.w	r3, r2, r3
 8014574:	6822      	ldr	r2, [r4, #0]
 8014576:	50d7      	str	r7, [r2, r3]
 8014578:	f000 fabc 	bl	8014af4 <uxr_seq_num_add>
 801457c:	4606      	mov	r6, r0
 801457e:	fa1f f38a 	uxth.w	r3, sl
 8014582:	429d      	cmp	r5, r3
 8014584:	d8c9      	bhi.n	801451a <uxr_prepare_reliable_buffer_to_write+0xf6>
 8014586:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801458a:	9d05      	ldr	r5, [sp, #20]
 801458c:	8920      	ldrh	r0, [r4, #8]
 801458e:	463a      	mov	r2, r7
 8014590:	6863      	ldr	r3, [r4, #4]
 8014592:	fbb6 f1f0 	udiv	r1, r6, r0
 8014596:	fbb3 f3f0 	udiv	r3, r3, r0
 801459a:	fb00 6111 	mls	r1, r0, r1, r6
 801459e:	4658      	mov	r0, fp
 80145a0:	b289      	uxth	r1, r1
 80145a2:	fb01 f303 	mul.w	r3, r1, r3
 80145a6:	6821      	ldr	r1, [r4, #0]
 80145a8:	3304      	adds	r3, #4
 80145aa:	4419      	add	r1, r3
 80145ac:	2300      	movs	r3, #0
 80145ae:	f851 7c04 	ldr.w	r7, [r1, #-4]
 80145b2:	9700      	str	r7, [sp, #0]
 80145b4:	f7fa fdae 	bl	800f114 <ucdr_init_buffer_origin_offset>
 80145b8:	9f06      	ldr	r7, [sp, #24]
 80145ba:	4658      	mov	r0, fp
 80145bc:	2302      	movs	r3, #2
 80145be:	b2ba      	uxth	r2, r7
 80145c0:	210d      	movs	r1, #13
 80145c2:	f7fc f9bd 	bl	8010940 <uxr_buffer_submessage_header>
 80145c6:	f108 0104 	add.w	r1, r8, #4
 80145ca:	9b03      	ldr	r3, [sp, #12]
 80145cc:	f1a5 0208 	sub.w	r2, r5, #8
 80145d0:	8925      	ldrh	r5, [r4, #8]
 80145d2:	440b      	add	r3, r1
 80145d4:	eba2 0208 	sub.w	r2, r2, r8
 80145d8:	fbb6 f0f5 	udiv	r0, r6, r5
 80145dc:	4619      	mov	r1, r3
 80145de:	6863      	ldr	r3, [r4, #4]
 80145e0:	fb05 6010 	mls	r0, r5, r0, r6
 80145e4:	fbb3 f3f5 	udiv	r3, r3, r5
 80145e8:	b280      	uxth	r0, r0
 80145ea:	6825      	ldr	r5, [r4, #0]
 80145ec:	fb00 f303 	mul.w	r3, r0, r3
 80145f0:	7b20      	ldrb	r0, [r4, #12]
 80145f2:	3004      	adds	r0, #4
 80145f4:	4438      	add	r0, r7
 80145f6:	50e8      	str	r0, [r5, r3]
 80145f8:	9d04      	ldr	r5, [sp, #16]
 80145fa:	4628      	mov	r0, r5
 80145fc:	f7fa fd9c 	bl	800f138 <ucdr_init_buffer>
 8014600:	4628      	mov	r0, r5
 8014602:	4622      	mov	r2, r4
 8014604:	493d      	ldr	r1, [pc, #244]	@ (80146fc <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8014606:	f7fa fd6b 	bl	800f0e0 <ucdr_set_on_full_buffer_callback>
 801460a:	2001      	movs	r0, #1
 801460c:	81e6      	strh	r6, [r4, #14]
 801460e:	b011      	add	sp, #68	@ 0x44
 8014610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014614:	2101      	movs	r1, #1
 8014616:	89e0      	ldrh	r0, [r4, #14]
 8014618:	f000 fa6c 	bl	8014af4 <uxr_seq_num_add>
 801461c:	4605      	mov	r5, r0
 801461e:	8921      	ldrh	r1, [r4, #8]
 8014620:	8a60      	ldrh	r0, [r4, #18]
 8014622:	f000 fa67 	bl	8014af4 <uxr_seq_num_add>
 8014626:	4601      	mov	r1, r0
 8014628:	4628      	mov	r0, r5
 801462a:	f000 fa6b 	bl	8014b04 <uxr_seq_num_cmp>
 801462e:	2800      	cmp	r0, #0
 8014630:	dd44      	ble.n	80146bc <uxr_prepare_reliable_buffer_to_write+0x298>
 8014632:	2000      	movs	r0, #0
 8014634:	b011      	add	sp, #68	@ 0x44
 8014636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801463a:	8921      	ldrh	r1, [r4, #8]
 801463c:	8a60      	ldrh	r0, [r4, #18]
 801463e:	9205      	str	r2, [sp, #20]
 8014640:	f000 fa58 	bl	8014af4 <uxr_seq_num_add>
 8014644:	4601      	mov	r1, r0
 8014646:	4630      	mov	r0, r6
 8014648:	f000 fa5c 	bl	8014b04 <uxr_seq_num_cmp>
 801464c:	2800      	cmp	r0, #0
 801464e:	9a05      	ldr	r2, [sp, #20]
 8014650:	dcef      	bgt.n	8014632 <uxr_prepare_reliable_buffer_to_write+0x20e>
 8014652:	8925      	ldrh	r5, [r4, #8]
 8014654:	e9d4 7300 	ldrd	r7, r3, [r4]
 8014658:	fbb6 f4f5 	udiv	r4, r6, r5
 801465c:	fbb3 f3f5 	udiv	r3, r3, r5
 8014660:	fb05 6414 	mls	r4, r5, r4, r6
 8014664:	b2a4      	uxth	r4, r4
 8014666:	fb04 f303 	mul.w	r3, r4, r3
 801466a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801466e:	50fa      	str	r2, [r7, r3]
 8014670:	2300      	movs	r3, #0
 8014672:	f8cd 8000 	str.w	r8, [sp]
 8014676:	f7fa fd4d 	bl	800f114 <ucdr_init_buffer_origin_offset>
 801467a:	2001      	movs	r0, #1
 801467c:	e7da      	b.n	8014634 <uxr_prepare_reliable_buffer_to_write+0x210>
 801467e:	3201      	adds	r2, #1
 8014680:	9306      	str	r3, [sp, #24]
 8014682:	b293      	uxth	r3, r2
 8014684:	4553      	cmp	r3, sl
 8014686:	d8d4      	bhi.n	8014632 <uxr_prepare_reliable_buffer_to_write+0x20e>
 8014688:	e739      	b.n	80144fe <uxr_prepare_reliable_buffer_to_write+0xda>
 801468a:	4630      	mov	r0, r6
 801468c:	2101      	movs	r1, #1
 801468e:	9307      	str	r3, [sp, #28]
 8014690:	f000 fa30 	bl	8014af4 <uxr_seq_num_add>
 8014694:	4606      	mov	r6, r0
 8014696:	8920      	ldrh	r0, [r4, #8]
 8014698:	6862      	ldr	r2, [r4, #4]
 801469a:	fbb6 f1f0 	udiv	r1, r6, r0
 801469e:	fbb2 f2f0 	udiv	r2, r2, r0
 80146a2:	fb00 6111 	mls	r1, r0, r1, r6
 80146a6:	b289      	uxth	r1, r1
 80146a8:	fb01 f202 	mul.w	r2, r1, r2
 80146ac:	6821      	ldr	r1, [r4, #0]
 80146ae:	3204      	adds	r2, #4
 80146b0:	188b      	adds	r3, r1, r2
 80146b2:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80146b6:	9303      	str	r3, [sp, #12]
 80146b8:	9b07      	ldr	r3, [sp, #28]
 80146ba:	e70c      	b.n	80144d6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 80146bc:	8921      	ldrh	r1, [r4, #8]
 80146be:	6863      	ldr	r3, [r4, #4]
 80146c0:	9804      	ldr	r0, [sp, #16]
 80146c2:	fbb5 f2f1 	udiv	r2, r5, r1
 80146c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80146ca:	fb01 5212 	mls	r2, r1, r2, r5
 80146ce:	6821      	ldr	r1, [r4, #0]
 80146d0:	b292      	uxth	r2, r2
 80146d2:	fb02 f303 	mul.w	r3, r2, r3
 80146d6:	7b22      	ldrb	r2, [r4, #12]
 80146d8:	3304      	adds	r3, #4
 80146da:	445a      	add	r2, fp
 80146dc:	4419      	add	r1, r3
 80146de:	f841 2c04 	str.w	r2, [r1, #-4]
 80146e2:	7b23      	ldrb	r3, [r4, #12]
 80146e4:	9300      	str	r3, [sp, #0]
 80146e6:	2300      	movs	r3, #0
 80146e8:	f7fa fd14 	bl	800f114 <ucdr_init_buffer_origin_offset>
 80146ec:	2001      	movs	r0, #1
 80146ee:	81e5      	strh	r5, [r4, #14]
 80146f0:	e7a0      	b.n	8014634 <uxr_prepare_reliable_buffer_to_write+0x210>
 80146f2:	4682      	mov	sl, r0
 80146f4:	e6cb      	b.n	801448e <uxr_prepare_reliable_buffer_to_write+0x6a>
 80146f6:	f10d 0b20 	add.w	fp, sp, #32
 80146fa:	e747      	b.n	801458c <uxr_prepare_reliable_buffer_to_write+0x168>
 80146fc:	080142fd 	.word	0x080142fd

08014700 <uxr_prepare_next_reliable_buffer_to_send>:
 8014700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014702:	4604      	mov	r4, r0
 8014704:	461d      	mov	r5, r3
 8014706:	460f      	mov	r7, r1
 8014708:	8a00      	ldrh	r0, [r0, #16]
 801470a:	2101      	movs	r1, #1
 801470c:	4616      	mov	r6, r2
 801470e:	f000 f9f1 	bl	8014af4 <uxr_seq_num_add>
 8014712:	8028      	strh	r0, [r5, #0]
 8014714:	8922      	ldrh	r2, [r4, #8]
 8014716:	6863      	ldr	r3, [r4, #4]
 8014718:	fbb0 f1f2 	udiv	r1, r0, r2
 801471c:	fbb3 f3f2 	udiv	r3, r3, r2
 8014720:	fb02 0c11 	mls	ip, r2, r1, r0
 8014724:	89e1      	ldrh	r1, [r4, #14]
 8014726:	fa1f fc8c 	uxth.w	ip, ip
 801472a:	fb0c fc03 	mul.w	ip, ip, r3
 801472e:	6823      	ldr	r3, [r4, #0]
 8014730:	f10c 0c04 	add.w	ip, ip, #4
 8014734:	4463      	add	r3, ip
 8014736:	603b      	str	r3, [r7, #0]
 8014738:	6823      	ldr	r3, [r4, #0]
 801473a:	449c      	add	ip, r3
 801473c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8014740:	6033      	str	r3, [r6, #0]
 8014742:	f000 f9df 	bl	8014b04 <uxr_seq_num_cmp>
 8014746:	2800      	cmp	r0, #0
 8014748:	dd01      	ble.n	801474e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801474a:	2000      	movs	r0, #0
 801474c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801474e:	7b23      	ldrb	r3, [r4, #12]
 8014750:	6832      	ldr	r2, [r6, #0]
 8014752:	429a      	cmp	r2, r3
 8014754:	d9f9      	bls.n	801474a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8014756:	8a61      	ldrh	r1, [r4, #18]
 8014758:	8a20      	ldrh	r0, [r4, #16]
 801475a:	f000 f9cf 	bl	8014afc <uxr_seq_num_sub>
 801475e:	8923      	ldrh	r3, [r4, #8]
 8014760:	4283      	cmp	r3, r0
 8014762:	d0f2      	beq.n	801474a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8014764:	8828      	ldrh	r0, [r5, #0]
 8014766:	89e3      	ldrh	r3, [r4, #14]
 8014768:	8220      	strh	r0, [r4, #16]
 801476a:	4298      	cmp	r0, r3
 801476c:	d001      	beq.n	8014772 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801476e:	2001      	movs	r0, #1
 8014770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014772:	2101      	movs	r1, #1
 8014774:	f000 f9be 	bl	8014af4 <uxr_seq_num_add>
 8014778:	4603      	mov	r3, r0
 801477a:	2001      	movs	r0, #1
 801477c:	81e3      	strh	r3, [r4, #14]
 801477e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014780 <uxr_update_output_stream_heartbeat_timestamp>:
 8014780:	b570      	push	{r4, r5, r6, lr}
 8014782:	8a01      	ldrh	r1, [r0, #16]
 8014784:	4604      	mov	r4, r0
 8014786:	8a40      	ldrh	r0, [r0, #18]
 8014788:	4615      	mov	r5, r2
 801478a:	461e      	mov	r6, r3
 801478c:	f000 f9ba 	bl	8014b04 <uxr_seq_num_cmp>
 8014790:	2800      	cmp	r0, #0
 8014792:	db07      	blt.n	80147a4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8014794:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014798:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801479c:	2000      	movs	r0, #0
 801479e:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80147a2:	bd70      	pop	{r4, r5, r6, pc}
 80147a4:	f894 0020 	ldrb.w	r0, [r4, #32]
 80147a8:	b940      	cbnz	r0, 80147bc <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80147aa:	2301      	movs	r3, #1
 80147ac:	f884 3020 	strb.w	r3, [r4, #32]
 80147b0:	3564      	adds	r5, #100	@ 0x64
 80147b2:	f146 0600 	adc.w	r6, r6, #0
 80147b6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80147ba:	bd70      	pop	{r4, r5, r6, pc}
 80147bc:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80147c0:	4295      	cmp	r5, r2
 80147c2:	eb76 0303 	sbcs.w	r3, r6, r3
 80147c6:	db04      	blt.n	80147d2 <uxr_update_output_stream_heartbeat_timestamp+0x52>
 80147c8:	1c43      	adds	r3, r0, #1
 80147ca:	2001      	movs	r0, #1
 80147cc:	f884 3020 	strb.w	r3, [r4, #32]
 80147d0:	e7ee      	b.n	80147b0 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 80147d2:	2000      	movs	r0, #0
 80147d4:	e7ec      	b.n	80147b0 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 80147d6:	bf00      	nop

080147d8 <uxr_begin_output_nack_buffer_it>:
 80147d8:	8a40      	ldrh	r0, [r0, #18]
 80147da:	4770      	bx	lr

080147dc <uxr_next_reliable_nack_buffer_to_send>:
 80147dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147e0:	f890 7021 	ldrb.w	r7, [r0, #33]	@ 0x21
 80147e4:	b197      	cbz	r7, 801480c <uxr_next_reliable_nack_buffer_to_send+0x30>
 80147e6:	4680      	mov	r8, r0
 80147e8:	460d      	mov	r5, r1
 80147ea:	4616      	mov	r6, r2
 80147ec:	461c      	mov	r4, r3
 80147ee:	8818      	ldrh	r0, [r3, #0]
 80147f0:	2101      	movs	r1, #1
 80147f2:	f000 f97f 	bl	8014af4 <uxr_seq_num_add>
 80147f6:	8020      	strh	r0, [r4, #0]
 80147f8:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 80147fc:	f000 f982 	bl	8014b04 <uxr_seq_num_cmp>
 8014800:	2800      	cmp	r0, #0
 8014802:	dd06      	ble.n	8014812 <uxr_next_reliable_nack_buffer_to_send+0x36>
 8014804:	2300      	movs	r3, #0
 8014806:	461f      	mov	r7, r3
 8014808:	f888 3021 	strb.w	r3, [r8, #33]	@ 0x21
 801480c:	4638      	mov	r0, r7
 801480e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014812:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8014816:	8820      	ldrh	r0, [r4, #0]
 8014818:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801481c:	fbb0 f3f2 	udiv	r3, r0, r2
 8014820:	fbb1 fcf2 	udiv	ip, r1, r2
 8014824:	fb02 0313 	mls	r3, r2, r3, r0
 8014828:	b29b      	uxth	r3, r3
 801482a:	fb03 fc0c 	mul.w	ip, r3, ip
 801482e:	f8d8 3000 	ldr.w	r3, [r8]
 8014832:	f10c 0c04 	add.w	ip, ip, #4
 8014836:	4463      	add	r3, ip
 8014838:	602b      	str	r3, [r5, #0]
 801483a:	f8d8 3000 	ldr.w	r3, [r8]
 801483e:	4463      	add	r3, ip
 8014840:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8014844:	6033      	str	r3, [r6, #0]
 8014846:	f898 200c 	ldrb.w	r2, [r8, #12]
 801484a:	429a      	cmp	r2, r3
 801484c:	d0d0      	beq.n	80147f0 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801484e:	e7dd      	b.n	801480c <uxr_next_reliable_nack_buffer_to_send+0x30>

08014850 <uxr_process_acknack>:
 8014850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014852:	4604      	mov	r4, r0
 8014854:	460e      	mov	r6, r1
 8014856:	4610      	mov	r0, r2
 8014858:	2101      	movs	r1, #1
 801485a:	f000 f94f 	bl	8014afc <uxr_seq_num_sub>
 801485e:	8a61      	ldrh	r1, [r4, #18]
 8014860:	f000 f94c 	bl	8014afc <uxr_seq_num_sub>
 8014864:	b1c8      	cbz	r0, 801489a <uxr_process_acknack+0x4a>
 8014866:	4605      	mov	r5, r0
 8014868:	2700      	movs	r7, #0
 801486a:	2101      	movs	r1, #1
 801486c:	8a60      	ldrh	r0, [r4, #18]
 801486e:	f000 f941 	bl	8014af4 <uxr_seq_num_add>
 8014872:	8923      	ldrh	r3, [r4, #8]
 8014874:	6862      	ldr	r2, [r4, #4]
 8014876:	3701      	adds	r7, #1
 8014878:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801487c:	6821      	ldr	r1, [r4, #0]
 801487e:	42bd      	cmp	r5, r7
 8014880:	8260      	strh	r0, [r4, #18]
 8014882:	fbb0 fef3 	udiv	lr, r0, r3
 8014886:	fbb2 f2f3 	udiv	r2, r2, r3
 801488a:	fb03 031e 	mls	r3, r3, lr, r0
 801488e:	b29b      	uxth	r3, r3
 8014890:	fb02 f303 	mul.w	r3, r2, r3
 8014894:	f841 c003 	str.w	ip, [r1, r3]
 8014898:	d1e7      	bne.n	801486a <uxr_process_acknack+0x1a>
 801489a:	3e00      	subs	r6, #0
 801489c:	f04f 0300 	mov.w	r3, #0
 80148a0:	bf18      	it	ne
 80148a2:	2601      	movne	r6, #1
 80148a4:	f884 3020 	strb.w	r3, [r4, #32]
 80148a8:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 80148ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148ae:	bf00      	nop

080148b0 <uxr_is_output_up_to_date>:
 80148b0:	8a01      	ldrh	r1, [r0, #16]
 80148b2:	8a40      	ldrh	r0, [r0, #18]
 80148b4:	b508      	push	{r3, lr}
 80148b6:	f000 f925 	bl	8014b04 <uxr_seq_num_cmp>
 80148ba:	fab0 f080 	clz	r0, r0
 80148be:	0940      	lsrs	r0, r0, #5
 80148c0:	bd08      	pop	{r3, pc}
 80148c2:	bf00      	nop

080148c4 <get_available_free_slots>:
 80148c4:	8901      	ldrh	r1, [r0, #8]
 80148c6:	b1e1      	cbz	r1, 8014902 <get_available_free_slots+0x3e>
 80148c8:	6843      	ldr	r3, [r0, #4]
 80148ca:	f04f 0c00 	mov.w	ip, #0
 80148ce:	b530      	push	{r4, r5, lr}
 80148d0:	fbb3 fef1 	udiv	lr, r3, r1
 80148d4:	6805      	ldr	r5, [r0, #0]
 80148d6:	4662      	mov	r2, ip
 80148d8:	7b04      	ldrb	r4, [r0, #12]
 80148da:	4660      	mov	r0, ip
 80148dc:	f10c 0c01 	add.w	ip, ip, #1
 80148e0:	fbb2 f3f1 	udiv	r3, r2, r1
 80148e4:	fb01 2313 	mls	r3, r1, r3, r2
 80148e8:	fa1f f28c 	uxth.w	r2, ip
 80148ec:	b29b      	uxth	r3, r3
 80148ee:	fb0e f303 	mul.w	r3, lr, r3
 80148f2:	58eb      	ldr	r3, [r5, r3]
 80148f4:	429c      	cmp	r4, r3
 80148f6:	d101      	bne.n	80148fc <get_available_free_slots+0x38>
 80148f8:	3001      	adds	r0, #1
 80148fa:	b280      	uxth	r0, r0
 80148fc:	428a      	cmp	r2, r1
 80148fe:	d3ed      	bcc.n	80148dc <get_available_free_slots+0x18>
 8014900:	bd30      	pop	{r4, r5, pc}
 8014902:	4608      	mov	r0, r1
 8014904:	4770      	bx	lr
 8014906:	bf00      	nop

08014908 <uxr_buffer_cancel_data>:
 8014908:	b510      	push	{r4, lr}
 801490a:	2300      	movs	r3, #0
 801490c:	b094      	sub	sp, #80	@ 0x50
 801490e:	4604      	mov	r4, r0
 8014910:	9205      	str	r2, [sp, #20]
 8014912:	9301      	str	r3, [sp, #4]
 8014914:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014918:	f88d 301e 	strb.w	r3, [sp, #30]
 801491c:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8014920:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8014924:	2308      	movs	r3, #8
 8014926:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801492a:	2201      	movs	r2, #1
 801492c:	9300      	str	r3, [sp, #0]
 801492e:	ab0c      	add	r3, sp, #48	@ 0x30
 8014930:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8014934:	2210      	movs	r2, #16
 8014936:	f7fb fd57 	bl	80103e8 <uxr_prepare_stream_to_write_submessage>
 801493a:	b918      	cbnz	r0, 8014944 <uxr_buffer_cancel_data+0x3c>
 801493c:	4604      	mov	r4, r0
 801493e:	4620      	mov	r0, r4
 8014940:	b014      	add	sp, #80	@ 0x50
 8014942:	bd10      	pop	{r4, pc}
 8014944:	9905      	ldr	r1, [sp, #20]
 8014946:	aa06      	add	r2, sp, #24
 8014948:	4620      	mov	r0, r4
 801494a:	f7fb fe89 	bl	8010660 <uxr_init_base_object_request>
 801494e:	4604      	mov	r4, r0
 8014950:	a906      	add	r1, sp, #24
 8014952:	a80c      	add	r0, sp, #48	@ 0x30
 8014954:	f7fd f89c 	bl	8011a90 <uxr_serialize_READ_DATA_Payload>
 8014958:	4620      	mov	r0, r4
 801495a:	b014      	add	sp, #80	@ 0x50
 801495c:	bd10      	pop	{r4, pc}
 801495e:	bf00      	nop

08014960 <read_submessage_format>:
 8014960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014964:	b095      	sub	sp, #84	@ 0x54
 8014966:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 801496a:	b113      	cbz	r3, 8014972 <read_submessage_format+0x12>
 801496c:	b015      	add	sp, #84	@ 0x54
 801496e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014972:	4606      	mov	r6, r0
 8014974:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8014976:	460c      	mov	r4, r1
 8014978:	4615      	mov	r5, r2
 801497a:	9004      	str	r0, [sp, #16]
 801497c:	4699      	mov	r9, r3
 801497e:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8014980:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8014984:	9005      	str	r0, [sp, #20]
 8014986:	a80c      	add	r0, sp, #48	@ 0x30
 8014988:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801498c:	1a52      	subs	r2, r2, r1
 801498e:	f7fa fbd3 	bl	800f138 <ucdr_init_buffer>
 8014992:	a80c      	add	r0, sp, #48	@ 0x30
 8014994:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8014998:	f7fa fba2 	bl	800f0e0 <ucdr_set_on_full_buffer_callback>
 801499c:	69e2      	ldr	r2, [r4, #28]
 801499e:	b19a      	cbz	r2, 80149c8 <read_submessage_format+0x68>
 80149a0:	f1b8 0f07 	cmp.w	r8, #7
 80149a4:	f882 9014 	strb.w	r9, [r2, #20]
 80149a8:	d040      	beq.n	8014a2c <read_submessage_format+0xcc>
 80149aa:	f1b8 0f08 	cmp.w	r8, #8
 80149ae:	d02e      	beq.n	8014a0e <read_submessage_format+0xae>
 80149b0:	f1b8 0f06 	cmp.w	r8, #6
 80149b4:	d011      	beq.n	80149da <read_submessage_format+0x7a>
 80149b6:	2301      	movs	r3, #1
 80149b8:	7513      	strb	r3, [r2, #20]
 80149ba:	4629      	mov	r1, r5
 80149bc:	4620      	mov	r0, r4
 80149be:	f7fa fc0f 	bl	800f1e0 <ucdr_advance_buffer>
 80149c2:	b015      	add	sp, #84	@ 0x54
 80149c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80149c8:	f1b8 0f07 	cmp.w	r8, #7
 80149cc:	d02e      	beq.n	8014a2c <read_submessage_format+0xcc>
 80149ce:	f1b8 0f08 	cmp.w	r8, #8
 80149d2:	d01c      	beq.n	8014a0e <read_submessage_format+0xae>
 80149d4:	f1b8 0f06 	cmp.w	r8, #6
 80149d8:	d1ef      	bne.n	80149ba <read_submessage_format+0x5a>
 80149da:	f8d6 8088 	ldr.w	r8, [r6, #136]	@ 0x88
 80149de:	f1b8 0f00 	cmp.w	r8, #0
 80149e2:	d011      	beq.n	8014a08 <read_submessage_format+0xa8>
 80149e4:	ab0c      	add	r3, sp, #48	@ 0x30
 80149e6:	9501      	str	r5, [sp, #4]
 80149e8:	463a      	mov	r2, r7
 80149ea:	4630      	mov	r0, r6
 80149ec:	9300      	str	r3, [sp, #0]
 80149ee:	2306      	movs	r3, #6
 80149f0:	f88d 3016 	strb.w	r3, [sp, #22]
 80149f4:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 80149f8:	9302      	str	r3, [sp, #8]
 80149fa:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80149fe:	47c0      	blx	r8
 8014a00:	2301      	movs	r3, #1
 8014a02:	69e2      	ldr	r2, [r4, #28]
 8014a04:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8014a08:	2a00      	cmp	r2, #0
 8014a0a:	d1d4      	bne.n	80149b6 <read_submessage_format+0x56>
 8014a0c:	e7d5      	b.n	80149ba <read_submessage_format+0x5a>
 8014a0e:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d0f8      	beq.n	8014a08 <read_submessage_format+0xa8>
 8014a16:	a80c      	add	r0, sp, #48	@ 0x30
 8014a18:	a906      	add	r1, sp, #24
 8014a1a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8014a1e:	f7fd f8dd 	bl	8011bdc <uxr_deserialize_SampleIdentity>
 8014a22:	b9a0      	cbnz	r0, 8014a4e <read_submessage_format+0xee>
 8014a24:	69e2      	ldr	r2, [r4, #28]
 8014a26:	2a00      	cmp	r2, #0
 8014a28:	d1c5      	bne.n	80149b6 <read_submessage_format+0x56>
 8014a2a:	e7c6      	b.n	80149ba <read_submessage_format+0x5a>
 8014a2c:	f8d6 30ac 	ldr.w	r3, [r6, #172]	@ 0xac
 8014a30:	b13b      	cbz	r3, 8014a42 <read_submessage_format+0xe2>
 8014a32:	a906      	add	r1, sp, #24
 8014a34:	a80c      	add	r0, sp, #48	@ 0x30
 8014a36:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8014a3a:	f7fc fdc9 	bl	80115d0 <uxr_deserialize_BaseObjectRequest>
 8014a3e:	bb60      	cbnz	r0, 8014a9a <read_submessage_format+0x13a>
 8014a40:	69e2      	ldr	r2, [r4, #28]
 8014a42:	68a3      	ldr	r3, [r4, #8]
 8014a44:	442b      	add	r3, r5
 8014a46:	60a3      	str	r3, [r4, #8]
 8014a48:	2a00      	cmp	r2, #0
 8014a4a:	d1b4      	bne.n	80149b6 <read_submessage_format+0x56>
 8014a4c:	e7b5      	b.n	80149ba <read_submessage_format+0x5a>
 8014a4e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014a50:	a80c      	add	r0, sp, #48	@ 0x30
 8014a52:	eba8 0803 	sub.w	r8, r8, r3
 8014a56:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8014a5a:	44a8      	add	r8, r5
 8014a5c:	1a52      	subs	r2, r2, r1
 8014a5e:	f7fa fb6b 	bl	800f138 <ucdr_init_buffer>
 8014a62:	a80c      	add	r0, sp, #48	@ 0x30
 8014a64:	fa1f f888 	uxth.w	r8, r8
 8014a68:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8014a6c:	f7fa fb38 	bl	800f0e0 <ucdr_set_on_full_buffer_callback>
 8014a70:	ab0c      	add	r3, sp, #48	@ 0x30
 8014a72:	2108      	movs	r1, #8
 8014a74:	f8cd 8004 	str.w	r8, [sp, #4]
 8014a78:	9300      	str	r3, [sp, #0]
 8014a7a:	463a      	mov	r2, r7
 8014a7c:	f88d 1016 	strb.w	r1, [sp, #22]
 8014a80:	ab06      	add	r3, sp, #24
 8014a82:	f8d6 10a8 	ldr.w	r1, [r6, #168]	@ 0xa8
 8014a86:	4630      	mov	r0, r6
 8014a88:	9102      	str	r1, [sp, #8]
 8014a8a:	9905      	ldr	r1, [sp, #20]
 8014a8c:	f8d6 70a4 	ldr.w	r7, [r6, #164]	@ 0xa4
 8014a90:	47b8      	blx	r7
 8014a92:	2301      	movs	r3, #1
 8014a94:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8014a98:	e7c4      	b.n	8014a24 <read_submessage_format+0xc4>
 8014a9a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8014a9e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014aa0:	a80c      	add	r0, sp, #48	@ 0x30
 8014aa2:	1a52      	subs	r2, r2, r1
 8014aa4:	eba8 0803 	sub.w	r8, r8, r3
 8014aa8:	f7fa fb46 	bl	800f138 <ucdr_init_buffer>
 8014aac:	a80c      	add	r0, sp, #48	@ 0x30
 8014aae:	44a8      	add	r8, r5
 8014ab0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8014ab4:	f7fa fb14 	bl	800f0e0 <ucdr_set_on_full_buffer_callback>
 8014ab8:	ab0c      	add	r3, sp, #48	@ 0x30
 8014aba:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8014abe:	fa1f f888 	uxth.w	r8, r8
 8014ac2:	9300      	str	r3, [sp, #0]
 8014ac4:	463a      	mov	r2, r7
 8014ac6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8014aca:	4630      	mov	r0, r6
 8014acc:	f8cd 8004 	str.w	r8, [sp, #4]
 8014ad0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8014ad4:	2107      	movs	r1, #7
 8014ad6:	f88d 1016 	strb.w	r1, [sp, #22]
 8014ada:	b29b      	uxth	r3, r3
 8014adc:	f8d6 10b0 	ldr.w	r1, [r6, #176]	@ 0xb0
 8014ae0:	9102      	str	r1, [sp, #8]
 8014ae2:	9905      	ldr	r1, [sp, #20]
 8014ae4:	f8d6 70ac 	ldr.w	r7, [r6, #172]	@ 0xac
 8014ae8:	47b8      	blx	r7
 8014aea:	2301      	movs	r3, #1
 8014aec:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8014af0:	e7a6      	b.n	8014a40 <read_submessage_format+0xe0>
 8014af2:	bf00      	nop

08014af4 <uxr_seq_num_add>:
 8014af4:	4408      	add	r0, r1
 8014af6:	b280      	uxth	r0, r0
 8014af8:	4770      	bx	lr
 8014afa:	bf00      	nop

08014afc <uxr_seq_num_sub>:
 8014afc:	1a40      	subs	r0, r0, r1
 8014afe:	b280      	uxth	r0, r0
 8014b00:	4770      	bx	lr
 8014b02:	bf00      	nop

08014b04 <uxr_seq_num_cmp>:
 8014b04:	4288      	cmp	r0, r1
 8014b06:	d011      	beq.n	8014b2c <uxr_seq_num_cmp+0x28>
 8014b08:	d309      	bcc.n	8014b1e <uxr_seq_num_cmp+0x1a>
 8014b0a:	4288      	cmp	r0, r1
 8014b0c:	d910      	bls.n	8014b30 <uxr_seq_num_cmp+0x2c>
 8014b0e:	1a40      	subs	r0, r0, r1
 8014b10:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8014b14:	bfd4      	ite	le
 8014b16:	2001      	movle	r0, #1
 8014b18:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8014b1c:	4770      	bx	lr
 8014b1e:	1a0b      	subs	r3, r1, r0
 8014b20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014b24:	daf1      	bge.n	8014b0a <uxr_seq_num_cmp+0x6>
 8014b26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014b2a:	4770      	bx	lr
 8014b2c:	2000      	movs	r0, #0
 8014b2e:	4770      	bx	lr
 8014b30:	2001      	movs	r0, #1
 8014b32:	4770      	bx	lr

08014b34 <uxr_init_framing_io>:
 8014b34:	2300      	movs	r3, #0
 8014b36:	7041      	strb	r1, [r0, #1]
 8014b38:	7003      	strb	r3, [r0, #0]
 8014b3a:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8014b3c:	4770      	bx	lr
 8014b3e:	bf00      	nop

08014b40 <uxr_write_framed_msg>:
 8014b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b44:	4617      	mov	r7, r2
 8014b46:	7842      	ldrb	r2, [r0, #1]
 8014b48:	460e      	mov	r6, r1
 8014b4a:	b083      	sub	sp, #12
 8014b4c:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8014b50:	469b      	mov	fp, r3
 8014b52:	237e      	movs	r3, #126	@ 0x7e
 8014b54:	4604      	mov	r4, r0
 8014b56:	2901      	cmp	r1, #1
 8014b58:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8014b5c:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8014b60:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8014b64:	f240 8115 	bls.w	8014d92 <uxr_write_framed_msg+0x252>
 8014b68:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8014b6c:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8014b70:	2202      	movs	r2, #2
 8014b72:	2901      	cmp	r1, #1
 8014b74:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014b78:	d952      	bls.n	8014c20 <uxr_write_framed_msg+0xe0>
 8014b7a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014b7c:	2103      	movs	r1, #3
 8014b7e:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8014b82:	b2dd      	uxtb	r5, r3
 8014b84:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8014b88:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8014b8c:	2a01      	cmp	r2, #1
 8014b8e:	d95c      	bls.n	8014c4a <uxr_write_framed_msg+0x10a>
 8014b90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014b92:	1862      	adds	r2, r4, r1
 8014b94:	3101      	adds	r1, #1
 8014b96:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8014b9a:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 8014b9e:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8014ba2:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 8014ba6:	2a01      	cmp	r2, #1
 8014ba8:	d961      	bls.n	8014c6e <uxr_write_framed_msg+0x12e>
 8014baa:	1c4a      	adds	r2, r1, #1
 8014bac:	4421      	add	r1, r4
 8014bae:	b2d2      	uxtb	r2, r2
 8014bb0:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8014bb4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d06a      	beq.n	8014c92 <uxr_write_framed_msg+0x152>
 8014bbc:	f04f 0800 	mov.w	r8, #0
 8014bc0:	46c1      	mov	r9, r8
 8014bc2:	e016      	b.n	8014bf2 <uxr_write_framed_msg+0xb2>
 8014bc4:	2a29      	cmp	r2, #41	@ 0x29
 8014bc6:	d868      	bhi.n	8014c9a <uxr_write_framed_msg+0x15a>
 8014bc8:	18a0      	adds	r0, r4, r2
 8014bca:	3201      	adds	r2, #1
 8014bcc:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8014bd0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014bd4:	ea88 0101 	eor.w	r1, r8, r1
 8014bd8:	4b7d      	ldr	r3, [pc, #500]	@ (8014dd0 <uxr_write_framed_msg+0x290>)
 8014bda:	f109 0901 	add.w	r9, r9, #1
 8014bde:	b2c9      	uxtb	r1, r1
 8014be0:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8014be4:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8014be8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014bea:	454b      	cmp	r3, r9
 8014bec:	d969      	bls.n	8014cc2 <uxr_write_framed_msg+0x182>
 8014bee:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014bf2:	f81b 1009 	ldrb.w	r1, [fp, r9]
 8014bf6:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8014bfa:	2801      	cmp	r0, #1
 8014bfc:	d8e2      	bhi.n	8014bc4 <uxr_write_framed_msg+0x84>
 8014bfe:	1c50      	adds	r0, r2, #1
 8014c00:	b2c0      	uxtb	r0, r0
 8014c02:	2829      	cmp	r0, #41	@ 0x29
 8014c04:	d849      	bhi.n	8014c9a <uxr_write_framed_msg+0x15a>
 8014c06:	18a0      	adds	r0, r4, r2
 8014c08:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8014c0c:	3202      	adds	r2, #2
 8014c0e:	f081 0520 	eor.w	r5, r1, #32
 8014c12:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8014c16:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8014c1a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014c1e:	e7d9      	b.n	8014bd4 <uxr_write_framed_msg+0x94>
 8014c20:	2104      	movs	r1, #4
 8014c22:	f04f 0c03 	mov.w	ip, #3
 8014c26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014c28:	4422      	add	r2, r4
 8014c2a:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8014c2e:	44a4      	add	ip, r4
 8014c30:	b2dd      	uxtb	r5, r3
 8014c32:	f080 0020 	eor.w	r0, r0, #32
 8014c36:	f882 e038 	strb.w	lr, [r2, #56]	@ 0x38
 8014c3a:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8014c3e:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8014c42:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8014c46:	2a01      	cmp	r2, #1
 8014c48:	d8a2      	bhi.n	8014b90 <uxr_write_framed_msg+0x50>
 8014c4a:	1862      	adds	r2, r4, r1
 8014c4c:	207d      	movs	r0, #125	@ 0x7d
 8014c4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014c50:	f085 0520 	eor.w	r5, r5, #32
 8014c54:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 8014c58:	3102      	adds	r1, #2
 8014c5a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8014c5e:	f882 5039 	strb.w	r5, [r2, #57]	@ 0x39
 8014c62:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8014c66:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 8014c6a:	2a01      	cmp	r2, #1
 8014c6c:	d89d      	bhi.n	8014baa <uxr_write_framed_msg+0x6a>
 8014c6e:	1c4d      	adds	r5, r1, #1
 8014c70:	1c8a      	adds	r2, r1, #2
 8014c72:	f080 0020 	eor.w	r0, r0, #32
 8014c76:	4421      	add	r1, r4
 8014c78:	fa54 f585 	uxtab	r5, r4, r5
 8014c7c:	b2d2      	uxtb	r2, r2
 8014c7e:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8014c82:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 8014c86:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 8014c8a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d194      	bne.n	8014bbc <uxr_write_framed_msg+0x7c>
 8014c92:	4619      	mov	r1, r3
 8014c94:	f8ad 3004 	strh.w	r3, [sp, #4]
 8014c98:	e019      	b.n	8014cce <uxr_write_framed_msg+0x18e>
 8014c9a:	2500      	movs	r5, #0
 8014c9c:	e000      	b.n	8014ca0 <uxr_write_framed_msg+0x160>
 8014c9e:	b160      	cbz	r0, 8014cba <uxr_write_framed_msg+0x17a>
 8014ca0:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8014ca4:	1b52      	subs	r2, r2, r5
 8014ca6:	4653      	mov	r3, sl
 8014ca8:	4638      	mov	r0, r7
 8014caa:	4421      	add	r1, r4
 8014cac:	47b0      	blx	r6
 8014cae:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014cb2:	4405      	add	r5, r0
 8014cb4:	4295      	cmp	r5, r2
 8014cb6:	d3f2      	bcc.n	8014c9e <uxr_write_framed_msg+0x15e>
 8014cb8:	d066      	beq.n	8014d88 <uxr_write_framed_msg+0x248>
 8014cba:	2000      	movs	r0, #0
 8014cbc:	b003      	add	sp, #12
 8014cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cc2:	fa5f f188 	uxtb.w	r1, r8
 8014cc6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014cca:	f8ad 8004 	strh.w	r8, [sp, #4]
 8014cce:	f04f 0900 	mov.w	r9, #0
 8014cd2:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 8014cd6:	46c8      	mov	r8, r9
 8014cd8:	e013      	b.n	8014d02 <uxr_write_framed_msg+0x1c2>
 8014cda:	2a29      	cmp	r2, #41	@ 0x29
 8014cdc:	d824      	bhi.n	8014d28 <uxr_write_framed_msg+0x1e8>
 8014cde:	18a3      	adds	r3, r4, r2
 8014ce0:	3201      	adds	r2, #1
 8014ce2:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 8014ce6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014cea:	f109 0901 	add.w	r9, r9, #1
 8014cee:	f1b9 0f02 	cmp.w	r9, #2
 8014cf2:	d02d      	beq.n	8014d50 <uxr_write_framed_msg+0x210>
 8014cf4:	f109 0308 	add.w	r3, r9, #8
 8014cf8:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014cfc:	446b      	add	r3, sp
 8014cfe:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8014d02:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 8014d06:	2b01      	cmp	r3, #1
 8014d08:	d8e7      	bhi.n	8014cda <uxr_write_framed_msg+0x19a>
 8014d0a:	1c53      	adds	r3, r2, #1
 8014d0c:	b2db      	uxtb	r3, r3
 8014d0e:	2b29      	cmp	r3, #41	@ 0x29
 8014d10:	d80a      	bhi.n	8014d28 <uxr_write_framed_msg+0x1e8>
 8014d12:	18a3      	adds	r3, r4, r2
 8014d14:	f081 0120 	eor.w	r1, r1, #32
 8014d18:	3202      	adds	r2, #2
 8014d1a:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 8014d1e:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 8014d22:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014d26:	e7e0      	b.n	8014cea <uxr_write_framed_msg+0x1aa>
 8014d28:	2500      	movs	r5, #0
 8014d2a:	e001      	b.n	8014d30 <uxr_write_framed_msg+0x1f0>
 8014d2c:	2800      	cmp	r0, #0
 8014d2e:	d0c4      	beq.n	8014cba <uxr_write_framed_msg+0x17a>
 8014d30:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8014d34:	1b52      	subs	r2, r2, r5
 8014d36:	4653      	mov	r3, sl
 8014d38:	4638      	mov	r0, r7
 8014d3a:	4421      	add	r1, r4
 8014d3c:	47b0      	blx	r6
 8014d3e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014d42:	4405      	add	r5, r0
 8014d44:	4295      	cmp	r5, r2
 8014d46:	d3f1      	bcc.n	8014d2c <uxr_write_framed_msg+0x1ec>
 8014d48:	d1b7      	bne.n	8014cba <uxr_write_framed_msg+0x17a>
 8014d4a:	f884 8062 	strb.w	r8, [r4, #98]	@ 0x62
 8014d4e:	e7d1      	b.n	8014cf4 <uxr_write_framed_msg+0x1b4>
 8014d50:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014d54:	b19a      	cbz	r2, 8014d7e <uxr_write_framed_msg+0x23e>
 8014d56:	2500      	movs	r5, #0
 8014d58:	e001      	b.n	8014d5e <uxr_write_framed_msg+0x21e>
 8014d5a:	2800      	cmp	r0, #0
 8014d5c:	d0ad      	beq.n	8014cba <uxr_write_framed_msg+0x17a>
 8014d5e:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8014d62:	1b52      	subs	r2, r2, r5
 8014d64:	4653      	mov	r3, sl
 8014d66:	4638      	mov	r0, r7
 8014d68:	4421      	add	r1, r4
 8014d6a:	47b0      	blx	r6
 8014d6c:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014d70:	4405      	add	r5, r0
 8014d72:	4295      	cmp	r5, r2
 8014d74:	d3f1      	bcc.n	8014d5a <uxr_write_framed_msg+0x21a>
 8014d76:	d1a0      	bne.n	8014cba <uxr_write_framed_msg+0x17a>
 8014d78:	2300      	movs	r3, #0
 8014d7a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8014d7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014d80:	b298      	uxth	r0, r3
 8014d82:	b003      	add	sp, #12
 8014d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d88:	f04f 0300 	mov.w	r3, #0
 8014d8c:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8014d90:	e72a      	b.n	8014be8 <uxr_write_framed_msg+0xa8>
 8014d92:	217d      	movs	r1, #125	@ 0x7d
 8014d94:	f082 0220 	eor.w	r2, r2, #32
 8014d98:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8014d9c:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8014da0:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8014da4:	2203      	movs	r2, #3
 8014da6:	2901      	cmp	r1, #1
 8014da8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014dac:	d803      	bhi.n	8014db6 <uxr_write_framed_msg+0x276>
 8014dae:	2105      	movs	r1, #5
 8014db0:	f04f 0c04 	mov.w	ip, #4
 8014db4:	e737      	b.n	8014c26 <uxr_write_framed_msg+0xe6>
 8014db6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014db8:	2104      	movs	r1, #4
 8014dba:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8014dbe:	b2dd      	uxtb	r5, r3
 8014dc0:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8014dc4:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8014dc8:	2a01      	cmp	r2, #1
 8014dca:	f63f aee1 	bhi.w	8014b90 <uxr_write_framed_msg+0x50>
 8014dce:	e73c      	b.n	8014c4a <uxr_write_framed_msg+0x10a>
 8014dd0:	08017fcc 	.word	0x08017fcc

08014dd4 <uxr_framing_read_transport>:
 8014dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dd8:	4604      	mov	r4, r0
 8014dda:	b085      	sub	sp, #20
 8014ddc:	4692      	mov	sl, r2
 8014dde:	4689      	mov	r9, r1
 8014de0:	461d      	mov	r5, r3
 8014de2:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8014de4:	f7fb fdf2 	bl	80109cc <uxr_millis>
 8014de8:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8014dec:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 8014df0:	4680      	mov	r8, r0
 8014df2:	42ba      	cmp	r2, r7
 8014df4:	d05f      	beq.n	8014eb6 <uxr_framing_read_transport+0xe2>
 8014df6:	d817      	bhi.n	8014e28 <uxr_framing_read_transport+0x54>
 8014df8:	3f01      	subs	r7, #1
 8014dfa:	1aba      	subs	r2, r7, r2
 8014dfc:	2700      	movs	r7, #0
 8014dfe:	b2d2      	uxtb	r2, r2
 8014e00:	42b2      	cmp	r2, r6
 8014e02:	d81a      	bhi.n	8014e3a <uxr_framing_read_transport+0x66>
 8014e04:	19d3      	adds	r3, r2, r7
 8014e06:	42b3      	cmp	r3, r6
 8014e08:	d852      	bhi.n	8014eb0 <uxr_framing_read_transport+0xdc>
 8014e0a:	b9d2      	cbnz	r2, 8014e42 <uxr_framing_read_transport+0x6e>
 8014e0c:	2600      	movs	r6, #0
 8014e0e:	f7fb fddd 	bl	80109cc <uxr_millis>
 8014e12:	682b      	ldr	r3, [r5, #0]
 8014e14:	eba0 0008 	sub.w	r0, r0, r8
 8014e18:	1a1b      	subs	r3, r3, r0
 8014e1a:	4630      	mov	r0, r6
 8014e1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014e20:	602b      	str	r3, [r5, #0]
 8014e22:	b005      	add	sp, #20
 8014e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e28:	2f00      	cmp	r7, #0
 8014e2a:	d060      	beq.n	8014eee <uxr_framing_read_transport+0x11a>
 8014e2c:	f1c2 022a 	rsb	r2, r2, #42	@ 0x2a
 8014e30:	3f01      	subs	r7, #1
 8014e32:	b2d2      	uxtb	r2, r2
 8014e34:	b2ff      	uxtb	r7, r7
 8014e36:	42b2      	cmp	r2, r6
 8014e38:	d9e4      	bls.n	8014e04 <uxr_framing_read_transport+0x30>
 8014e3a:	b2f2      	uxtb	r2, r6
 8014e3c:	2700      	movs	r7, #0
 8014e3e:	2a00      	cmp	r2, #0
 8014e40:	d0e4      	beq.n	8014e0c <uxr_framing_read_transport+0x38>
 8014e42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014e44:	4650      	mov	r0, sl
 8014e46:	9203      	str	r2, [sp, #12]
 8014e48:	9300      	str	r3, [sp, #0]
 8014e4a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014e4e:	682b      	ldr	r3, [r5, #0]
 8014e50:	3102      	adds	r1, #2
 8014e52:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 8014ef8 <uxr_framing_read_transport+0x124>
 8014e56:	4421      	add	r1, r4
 8014e58:	47c8      	blx	r9
 8014e5a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014e5e:	4606      	mov	r6, r0
 8014e60:	4403      	add	r3, r0
 8014e62:	0859      	lsrs	r1, r3, #1
 8014e64:	fbab 2101 	umull	r2, r1, fp, r1
 8014e68:	222a      	movs	r2, #42	@ 0x2a
 8014e6a:	0889      	lsrs	r1, r1, #2
 8014e6c:	fb02 3111 	mls	r1, r2, r1, r3
 8014e70:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8014e74:	2800      	cmp	r0, #0
 8014e76:	d0c9      	beq.n	8014e0c <uxr_framing_read_transport+0x38>
 8014e78:	9a03      	ldr	r2, [sp, #12]
 8014e7a:	4290      	cmp	r0, r2
 8014e7c:	d1c7      	bne.n	8014e0e <uxr_framing_read_transport+0x3a>
 8014e7e:	2f00      	cmp	r7, #0
 8014e80:	d0c5      	beq.n	8014e0e <uxr_framing_read_transport+0x3a>
 8014e82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014e84:	3102      	adds	r1, #2
 8014e86:	463a      	mov	r2, r7
 8014e88:	4650      	mov	r0, sl
 8014e8a:	4421      	add	r1, r4
 8014e8c:	9300      	str	r3, [sp, #0]
 8014e8e:	2300      	movs	r3, #0
 8014e90:	47c8      	blx	r9
 8014e92:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8014e96:	4406      	add	r6, r0
 8014e98:	1813      	adds	r3, r2, r0
 8014e9a:	085a      	lsrs	r2, r3, #1
 8014e9c:	fbab 1b02 	umull	r1, fp, fp, r2
 8014ea0:	222a      	movs	r2, #42	@ 0x2a
 8014ea2:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 8014ea6:	fb02 331b 	mls	r3, r2, fp, r3
 8014eaa:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8014eae:	e7ae      	b.n	8014e0e <uxr_framing_read_transport+0x3a>
 8014eb0:	1ab6      	subs	r6, r6, r2
 8014eb2:	b2f7      	uxtb	r7, r6
 8014eb4:	e7a9      	b.n	8014e0a <uxr_framing_read_transport+0x36>
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	2e28      	cmp	r6, #40	@ 0x28
 8014eba:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8014ebc:	d9bd      	bls.n	8014e3a <uxr_framing_read_transport+0x66>
 8014ebe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014ec0:	2229      	movs	r2, #41	@ 0x29
 8014ec2:	1ca1      	adds	r1, r4, #2
 8014ec4:	4650      	mov	r0, sl
 8014ec6:	9300      	str	r3, [sp, #0]
 8014ec8:	682b      	ldr	r3, [r5, #0]
 8014eca:	47c8      	blx	r9
 8014ecc:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014ed0:	4606      	mov	r6, r0
 8014ed2:	212a      	movs	r1, #42	@ 0x2a
 8014ed4:	4403      	add	r3, r0
 8014ed6:	4808      	ldr	r0, [pc, #32]	@ (8014ef8 <uxr_framing_read_transport+0x124>)
 8014ed8:	085a      	lsrs	r2, r3, #1
 8014eda:	fba0 0202 	umull	r0, r2, r0, r2
 8014ede:	0892      	lsrs	r2, r2, #2
 8014ee0:	fb01 3312 	mls	r3, r1, r2, r3
 8014ee4:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8014ee8:	2e00      	cmp	r6, #0
 8014eea:	d08f      	beq.n	8014e0c <uxr_framing_read_transport+0x38>
 8014eec:	e78f      	b.n	8014e0e <uxr_framing_read_transport+0x3a>
 8014eee:	f1c2 0229 	rsb	r2, r2, #41	@ 0x29
 8014ef2:	b2d2      	uxtb	r2, r2
 8014ef4:	e784      	b.n	8014e00 <uxr_framing_read_transport+0x2c>
 8014ef6:	bf00      	nop
 8014ef8:	30c30c31 	.word	0x30c30c31

08014efc <uxr_read_framed_msg>:
 8014efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f00:	461e      	mov	r6, r3
 8014f02:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8014f06:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8014f0a:	b083      	sub	sp, #12
 8014f0c:	4604      	mov	r4, r0
 8014f0e:	4688      	mov	r8, r1
 8014f10:	429d      	cmp	r5, r3
 8014f12:	4691      	mov	r9, r2
 8014f14:	f000 818c 	beq.w	8015230 <uxr_read_framed_msg+0x334>
 8014f18:	7823      	ldrb	r3, [r4, #0]
 8014f1a:	4dc3      	ldr	r5, [pc, #780]	@ (8015228 <uxr_read_framed_msg+0x32c>)
 8014f1c:	4fc3      	ldr	r7, [pc, #780]	@ (801522c <uxr_read_framed_msg+0x330>)
 8014f1e:	2b07      	cmp	r3, #7
 8014f20:	d8fd      	bhi.n	8014f1e <uxr_read_framed_msg+0x22>
 8014f22:	e8df f013 	tbh	[pc, r3, lsl #1]
 8014f26:	011c      	.short	0x011c
 8014f28:	00d900fb 	.word	0x00d900fb
 8014f2c:	008f00ba 	.word	0x008f00ba
 8014f30:	00320051 	.word	0x00320051
 8014f34:	0008      	.short	0x0008
 8014f36:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014f3a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014f3e:	4299      	cmp	r1, r3
 8014f40:	f000 814d 	beq.w	80151de <uxr_read_framed_msg+0x2e2>
 8014f44:	18e2      	adds	r2, r4, r3
 8014f46:	7892      	ldrb	r2, [r2, #2]
 8014f48:	2a7d      	cmp	r2, #125	@ 0x7d
 8014f4a:	f000 81b8 	beq.w	80152be <uxr_read_framed_msg+0x3c2>
 8014f4e:	3301      	adds	r3, #1
 8014f50:	212a      	movs	r1, #42	@ 0x2a
 8014f52:	2a7e      	cmp	r2, #126	@ 0x7e
 8014f54:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8014f58:	fba5 c000 	umull	ip, r0, r5, r0
 8014f5c:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8014f60:	fb01 3310 	mls	r3, r1, r0, r3
 8014f64:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014f68:	f000 8257 	beq.w	801541a <uxr_read_framed_msg+0x51e>
 8014f6c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8014f6e:	2000      	movs	r0, #0
 8014f70:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8014f72:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8014f76:	7020      	strb	r0, [r4, #0]
 8014f78:	b29b      	uxth	r3, r3
 8014f7a:	4299      	cmp	r1, r3
 8014f7c:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8014f7e:	f000 8178 	beq.w	8015272 <uxr_read_framed_msg+0x376>
 8014f82:	2000      	movs	r0, #0
 8014f84:	b003      	add	sp, #12
 8014f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f8a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8014f8e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014f92:	4298      	cmp	r0, r3
 8014f94:	f000 8132 	beq.w	80151fc <uxr_read_framed_msg+0x300>
 8014f98:	18e2      	adds	r2, r4, r3
 8014f9a:	7891      	ldrb	r1, [r2, #2]
 8014f9c:	297d      	cmp	r1, #125	@ 0x7d
 8014f9e:	f000 8170 	beq.w	8015282 <uxr_read_framed_msg+0x386>
 8014fa2:	3301      	adds	r3, #1
 8014fa4:	202a      	movs	r0, #42	@ 0x2a
 8014fa6:	297e      	cmp	r1, #126	@ 0x7e
 8014fa8:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8014fac:	fba5 c202 	umull	ip, r2, r5, r2
 8014fb0:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8014fb4:	fb00 3312 	mls	r3, r0, r2, r3
 8014fb8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014fbc:	f000 821d 	beq.w	80153fa <uxr_read_framed_msg+0x4fe>
 8014fc0:	2307      	movs	r3, #7
 8014fc2:	86a1      	strh	r1, [r4, #52]	@ 0x34
 8014fc4:	7023      	strb	r3, [r4, #0]
 8014fc6:	e7aa      	b.n	8014f1e <uxr_read_framed_msg+0x22>
 8014fc8:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8014fca:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8014fce:	459e      	cmp	lr, r3
 8014fd0:	d827      	bhi.n	8015022 <uxr_read_framed_msg+0x126>
 8014fd2:	e032      	b.n	801503a <uxr_read_framed_msg+0x13e>
 8014fd4:	fba5 b101 	umull	fp, r1, r5, r1
 8014fd8:	f89c c002 	ldrb.w	ip, [ip, #2]
 8014fdc:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8014fe0:	0889      	lsrs	r1, r1, #2
 8014fe2:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8014fe6:	fb0b 0111 	mls	r1, fp, r1, r0
 8014fea:	f000 80d4 	beq.w	8015196 <uxr_read_framed_msg+0x29a>
 8014fee:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8014ff2:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 8014ff6:	f000 80cb 	beq.w	8015190 <uxr_read_framed_msg+0x294>
 8014ffa:	f806 c003 	strb.w	ip, [r6, r3]
 8014ffe:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8015000:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8015002:	ea80 010c 	eor.w	r1, r0, ip
 8015006:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801500a:	3301      	adds	r3, #1
 801500c:	b2c9      	uxtb	r1, r1
 801500e:	b29b      	uxth	r3, r3
 8015010:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8015014:	4573      	cmp	r3, lr
 8015016:	8663      	strh	r3, [r4, #50]	@ 0x32
 8015018:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 801501c:	86e2      	strh	r2, [r4, #54]	@ 0x36
 801501e:	f080 811d 	bcs.w	801525c <uxr_read_framed_msg+0x360>
 8015022:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8015026:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801502a:	1c50      	adds	r0, r2, #1
 801502c:	eb04 0c02 	add.w	ip, r4, r2
 8015030:	4592      	cmp	sl, r2
 8015032:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8015036:	d1cd      	bne.n	8014fd4 <uxr_read_framed_msg+0xd8>
 8015038:	459e      	cmp	lr, r3
 801503a:	f040 8114 	bne.w	8015266 <uxr_read_framed_msg+0x36a>
 801503e:	2306      	movs	r3, #6
 8015040:	7023      	strb	r3, [r4, #0]
 8015042:	e76c      	b.n	8014f1e <uxr_read_framed_msg+0x22>
 8015044:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8015048:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801504c:	4298      	cmp	r0, r3
 801504e:	f000 80c6 	beq.w	80151de <uxr_read_framed_msg+0x2e2>
 8015052:	18e2      	adds	r2, r4, r3
 8015054:	7891      	ldrb	r1, [r2, #2]
 8015056:	297d      	cmp	r1, #125	@ 0x7d
 8015058:	f000 8193 	beq.w	8015382 <uxr_read_framed_msg+0x486>
 801505c:	3301      	adds	r3, #1
 801505e:	202a      	movs	r0, #42	@ 0x2a
 8015060:	297e      	cmp	r1, #126	@ 0x7e
 8015062:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8015066:	fba5 c202 	umull	ip, r2, r5, r2
 801506a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801506e:	fb00 3312 	mls	r3, r0, r2, r3
 8015072:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015076:	f000 81d0 	beq.w	801541a <uxr_read_framed_msg+0x51e>
 801507a:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801507c:	2000      	movs	r0, #0
 801507e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8015082:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015084:	8660      	strh	r0, [r4, #50]	@ 0x32
 8015086:	b29b      	uxth	r3, r3
 8015088:	86e0      	strh	r0, [r4, #54]	@ 0x36
 801508a:	428b      	cmp	r3, r1
 801508c:	8623      	strh	r3, [r4, #48]	@ 0x30
 801508e:	f240 80e2 	bls.w	8015256 <uxr_read_framed_msg+0x35a>
 8015092:	7020      	strb	r0, [r4, #0]
 8015094:	b003      	add	sp, #12
 8015096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801509a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801509e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80150a2:	4298      	cmp	r0, r3
 80150a4:	f000 80aa 	beq.w	80151fc <uxr_read_framed_msg+0x300>
 80150a8:	18e2      	adds	r2, r4, r3
 80150aa:	7891      	ldrb	r1, [r2, #2]
 80150ac:	297d      	cmp	r1, #125	@ 0x7d
 80150ae:	f000 8186 	beq.w	80153be <uxr_read_framed_msg+0x4c2>
 80150b2:	3301      	adds	r3, #1
 80150b4:	202a      	movs	r0, #42	@ 0x2a
 80150b6:	297e      	cmp	r1, #126	@ 0x7e
 80150b8:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80150bc:	fba5 c202 	umull	ip, r2, r5, r2
 80150c0:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80150c4:	fb00 3312 	mls	r3, r0, r2, r3
 80150c8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80150cc:	f000 8195 	beq.w	80153fa <uxr_read_framed_msg+0x4fe>
 80150d0:	2304      	movs	r3, #4
 80150d2:	8621      	strh	r1, [r4, #48]	@ 0x30
 80150d4:	7023      	strb	r3, [r4, #0]
 80150d6:	e722      	b.n	8014f1e <uxr_read_framed_msg+0x22>
 80150d8:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80150dc:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80150e0:	4290      	cmp	r0, r2
 80150e2:	f000 80b4 	beq.w	801524e <uxr_read_framed_msg+0x352>
 80150e6:	18a3      	adds	r3, r4, r2
 80150e8:	7899      	ldrb	r1, [r3, #2]
 80150ea:	297d      	cmp	r1, #125	@ 0x7d
 80150ec:	f000 8107 	beq.w	80152fe <uxr_read_framed_msg+0x402>
 80150f0:	3201      	adds	r2, #1
 80150f2:	232a      	movs	r3, #42	@ 0x2a
 80150f4:	297e      	cmp	r1, #126	@ 0x7e
 80150f6:	ea4f 0052 	mov.w	r0, r2, lsr #1
 80150fa:	fba5 c000 	umull	ip, r0, r5, r0
 80150fe:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8015102:	fb03 2210 	mls	r2, r3, r0, r2
 8015106:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801510a:	f000 818a 	beq.w	8015422 <uxr_read_framed_msg+0x526>
 801510e:	7863      	ldrb	r3, [r4, #1]
 8015110:	428b      	cmp	r3, r1
 8015112:	bf0c      	ite	eq
 8015114:	2303      	moveq	r3, #3
 8015116:	2300      	movne	r3, #0
 8015118:	7023      	strb	r3, [r4, #0]
 801511a:	e700      	b.n	8014f1e <uxr_read_framed_msg+0x22>
 801511c:	2300      	movs	r3, #0
 801511e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015122:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 8015126:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801512a:	4299      	cmp	r1, r3
 801512c:	d06a      	beq.n	8015204 <uxr_read_framed_msg+0x308>
 801512e:	18e2      	adds	r2, r4, r3
 8015130:	7890      	ldrb	r0, [r2, #2]
 8015132:	287d      	cmp	r0, #125	@ 0x7d
 8015134:	f000 8100 	beq.w	8015338 <uxr_read_framed_msg+0x43c>
 8015138:	3301      	adds	r3, #1
 801513a:	212a      	movs	r1, #42	@ 0x2a
 801513c:	287e      	cmp	r0, #126	@ 0x7e
 801513e:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8015142:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8015146:	fba5 c202 	umull	ip, r2, r5, r2
 801514a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801514e:	fb01 3312 	mls	r3, r1, r2, r3
 8015152:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015156:	d055      	beq.n	8015204 <uxr_read_framed_msg+0x308>
 8015158:	2302      	movs	r3, #2
 801515a:	7023      	strb	r3, [r4, #0]
 801515c:	e6df      	b.n	8014f1e <uxr_read_framed_msg+0x22>
 801515e:	f894 c02c 	ldrb.w	ip, [r4, #44]	@ 0x2c
 8015162:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8015166:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801516a:	1c5a      	adds	r2, r3, #1
 801516c:	459c      	cmp	ip, r3
 801516e:	eb04 0103 	add.w	r1, r4, r3
 8015172:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8015176:	f43f af04 	beq.w	8014f82 <uxr_read_framed_msg+0x86>
 801517a:	fba5 0303 	umull	r0, r3, r5, r3
 801517e:	7889      	ldrb	r1, [r1, #2]
 8015180:	089b      	lsrs	r3, r3, #2
 8015182:	297e      	cmp	r1, #126	@ 0x7e
 8015184:	fb0e 2313 	mls	r3, lr, r3, r2
 8015188:	b2db      	uxtb	r3, r3
 801518a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801518e:	d1ec      	bne.n	801516a <uxr_read_framed_msg+0x26e>
 8015190:	2301      	movs	r3, #1
 8015192:	7023      	strb	r3, [r4, #0]
 8015194:	e6c3      	b.n	8014f1e <uxr_read_framed_msg+0x22>
 8015196:	1c50      	adds	r0, r2, #1
 8015198:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 801519c:	3202      	adds	r2, #2
 801519e:	0841      	lsrs	r1, r0, #1
 80151a0:	fba5 c101 	umull	ip, r1, r5, r1
 80151a4:	0889      	lsrs	r1, r1, #2
 80151a6:	fb0b 0111 	mls	r1, fp, r1, r0
 80151aa:	1860      	adds	r0, r4, r1
 80151ac:	b2c9      	uxtb	r1, r1
 80151ae:	458a      	cmp	sl, r1
 80151b0:	f43f af42 	beq.w	8015038 <uxr_read_framed_msg+0x13c>
 80151b4:	0851      	lsrs	r1, r2, #1
 80151b6:	7880      	ldrb	r0, [r0, #2]
 80151b8:	fba5 a101 	umull	sl, r1, r5, r1
 80151bc:	287e      	cmp	r0, #126	@ 0x7e
 80151be:	f080 0c20 	eor.w	ip, r0, #32
 80151c2:	ea4f 0191 	mov.w	r1, r1, lsr #2
 80151c6:	fb0b 2211 	mls	r2, fp, r1, r2
 80151ca:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80151ce:	f47f af14 	bne.w	8014ffa <uxr_read_framed_msg+0xfe>
 80151d2:	459e      	cmp	lr, r3
 80151d4:	f43f af33 	beq.w	801503e <uxr_read_framed_msg+0x142>
 80151d8:	2301      	movs	r3, #1
 80151da:	7023      	strb	r3, [r4, #0]
 80151dc:	e69f      	b.n	8014f1e <uxr_read_framed_msg+0x22>
 80151de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80151e0:	9300      	str	r3, [sp, #0]
 80151e2:	2301      	movs	r3, #1
 80151e4:	9301      	str	r3, [sp, #4]
 80151e6:	464a      	mov	r2, r9
 80151e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80151ea:	4641      	mov	r1, r8
 80151ec:	4620      	mov	r0, r4
 80151ee:	f7ff fdf1 	bl	8014dd4 <uxr_framing_read_transport>
 80151f2:	2800      	cmp	r0, #0
 80151f4:	f43f aec5 	beq.w	8014f82 <uxr_read_framed_msg+0x86>
 80151f8:	7823      	ldrb	r3, [r4, #0]
 80151fa:	e690      	b.n	8014f1e <uxr_read_framed_msg+0x22>
 80151fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80151fe:	9300      	str	r3, [sp, #0]
 8015200:	2302      	movs	r3, #2
 8015202:	e7ef      	b.n	80151e4 <uxr_read_framed_msg+0x2e8>
 8015204:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015206:	464a      	mov	r2, r9
 8015208:	4641      	mov	r1, r8
 801520a:	4620      	mov	r0, r4
 801520c:	9300      	str	r3, [sp, #0]
 801520e:	2304      	movs	r3, #4
 8015210:	9301      	str	r3, [sp, #4]
 8015212:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015214:	f7ff fdde 	bl	8014dd4 <uxr_framing_read_transport>
 8015218:	2800      	cmp	r0, #0
 801521a:	d1ed      	bne.n	80151f8 <uxr_read_framed_msg+0x2fc>
 801521c:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8015220:	2b7e      	cmp	r3, #126	@ 0x7e
 8015222:	d0e9      	beq.n	80151f8 <uxr_read_framed_msg+0x2fc>
 8015224:	e6ad      	b.n	8014f82 <uxr_read_framed_msg+0x86>
 8015226:	bf00      	nop
 8015228:	30c30c31 	.word	0x30c30c31
 801522c:	08017fcc 	.word	0x08017fcc
 8015230:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015232:	9300      	str	r3, [sp, #0]
 8015234:	2305      	movs	r3, #5
 8015236:	9301      	str	r3, [sp, #4]
 8015238:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801523a:	f7ff fdcb 	bl	8014dd4 <uxr_framing_read_transport>
 801523e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8015242:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8015246:	429a      	cmp	r2, r3
 8015248:	f43f ae9b 	beq.w	8014f82 <uxr_read_framed_msg+0x86>
 801524c:	e664      	b.n	8014f18 <uxr_read_framed_msg+0x1c>
 801524e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015250:	9300      	str	r3, [sp, #0]
 8015252:	2303      	movs	r3, #3
 8015254:	e7c6      	b.n	80151e4 <uxr_read_framed_msg+0x2e8>
 8015256:	2305      	movs	r3, #5
 8015258:	7023      	strb	r3, [r4, #0]
 801525a:	e660      	b.n	8014f1e <uxr_read_framed_msg+0x22>
 801525c:	f43f aeef 	beq.w	801503e <uxr_read_framed_msg+0x142>
 8015260:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8015264:	d094      	beq.n	8015190 <uxr_read_framed_msg+0x294>
 8015266:	ebae 0303 	sub.w	r3, lr, r3
 801526a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801526c:	3302      	adds	r3, #2
 801526e:	9200      	str	r2, [sp, #0]
 8015270:	e7b8      	b.n	80151e4 <uxr_read_framed_msg+0x2e8>
 8015272:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8015276:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015278:	7013      	strb	r3, [r2, #0]
 801527a:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801527c:	b003      	add	sp, #12
 801527e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015282:	1c59      	adds	r1, r3, #1
 8015284:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8015288:	084a      	lsrs	r2, r1, #1
 801528a:	fba5 e202 	umull	lr, r2, r5, r2
 801528e:	0892      	lsrs	r2, r2, #2
 8015290:	fb0c 1212 	mls	r2, ip, r2, r1
 8015294:	b2d1      	uxtb	r1, r2
 8015296:	4288      	cmp	r0, r1
 8015298:	d0b0      	beq.n	80151fc <uxr_read_framed_msg+0x300>
 801529a:	3302      	adds	r3, #2
 801529c:	4422      	add	r2, r4
 801529e:	7891      	ldrb	r1, [r2, #2]
 80152a0:	085a      	lsrs	r2, r3, #1
 80152a2:	fba5 0202 	umull	r0, r2, r5, r2
 80152a6:	297e      	cmp	r1, #126	@ 0x7e
 80152a8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80152ac:	fb0c 3312 	mls	r3, ip, r2, r3
 80152b0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80152b4:	f000 80a1 	beq.w	80153fa <uxr_read_framed_msg+0x4fe>
 80152b8:	f081 0120 	eor.w	r1, r1, #32
 80152bc:	e680      	b.n	8014fc0 <uxr_read_framed_msg+0xc4>
 80152be:	f103 0c01 	add.w	ip, r3, #1
 80152c2:	202a      	movs	r0, #42	@ 0x2a
 80152c4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80152c8:	fba5 e202 	umull	lr, r2, r5, r2
 80152cc:	0892      	lsrs	r2, r2, #2
 80152ce:	fb00 c212 	mls	r2, r0, r2, ip
 80152d2:	fa5f fc82 	uxtb.w	ip, r2
 80152d6:	4561      	cmp	r1, ip
 80152d8:	d081      	beq.n	80151de <uxr_read_framed_msg+0x2e2>
 80152da:	3302      	adds	r3, #2
 80152dc:	4422      	add	r2, r4
 80152de:	0859      	lsrs	r1, r3, #1
 80152e0:	7892      	ldrb	r2, [r2, #2]
 80152e2:	fba5 c101 	umull	ip, r1, r5, r1
 80152e6:	2a7e      	cmp	r2, #126	@ 0x7e
 80152e8:	ea4f 0191 	mov.w	r1, r1, lsr #2
 80152ec:	fb00 3311 	mls	r3, r0, r1, r3
 80152f0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80152f4:	f000 8091 	beq.w	801541a <uxr_read_framed_msg+0x51e>
 80152f8:	f082 0220 	eor.w	r2, r2, #32
 80152fc:	e636      	b.n	8014f6c <uxr_read_framed_msg+0x70>
 80152fe:	1c51      	adds	r1, r2, #1
 8015300:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8015304:	084b      	lsrs	r3, r1, #1
 8015306:	fba5 e303 	umull	lr, r3, r5, r3
 801530a:	089b      	lsrs	r3, r3, #2
 801530c:	fb0c 1313 	mls	r3, ip, r3, r1
 8015310:	b2d9      	uxtb	r1, r3
 8015312:	4288      	cmp	r0, r1
 8015314:	d09b      	beq.n	801524e <uxr_read_framed_msg+0x352>
 8015316:	3202      	adds	r2, #2
 8015318:	4423      	add	r3, r4
 801531a:	0850      	lsrs	r0, r2, #1
 801531c:	789b      	ldrb	r3, [r3, #2]
 801531e:	fba5 1000 	umull	r1, r0, r5, r0
 8015322:	2b7e      	cmp	r3, #126	@ 0x7e
 8015324:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8015328:	fb0c 2210 	mls	r2, ip, r0, r2
 801532c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8015330:	d077      	beq.n	8015422 <uxr_read_framed_msg+0x526>
 8015332:	f083 0120 	eor.w	r1, r3, #32
 8015336:	e6ea      	b.n	801510e <uxr_read_framed_msg+0x212>
 8015338:	f103 0c01 	add.w	ip, r3, #1
 801533c:	202a      	movs	r0, #42	@ 0x2a
 801533e:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015342:	fba5 e202 	umull	lr, r2, r5, r2
 8015346:	0892      	lsrs	r2, r2, #2
 8015348:	fb00 c212 	mls	r2, r0, r2, ip
 801534c:	fa5f fc82 	uxtb.w	ip, r2
 8015350:	4561      	cmp	r1, ip
 8015352:	f43f af57 	beq.w	8015204 <uxr_read_framed_msg+0x308>
 8015356:	3302      	adds	r3, #2
 8015358:	4422      	add	r2, r4
 801535a:	7891      	ldrb	r1, [r2, #2]
 801535c:	085a      	lsrs	r2, r3, #1
 801535e:	fba5 c202 	umull	ip, r2, r5, r2
 8015362:	297e      	cmp	r1, #126	@ 0x7e
 8015364:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8015368:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801536c:	fb00 3312 	mls	r3, r0, r2, r3
 8015370:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015374:	f43f af46 	beq.w	8015204 <uxr_read_framed_msg+0x308>
 8015378:	f081 0120 	eor.w	r1, r1, #32
 801537c:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8015380:	e6ea      	b.n	8015158 <uxr_read_framed_msg+0x25c>
 8015382:	1c59      	adds	r1, r3, #1
 8015384:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8015388:	084a      	lsrs	r2, r1, #1
 801538a:	fba5 e202 	umull	lr, r2, r5, r2
 801538e:	0892      	lsrs	r2, r2, #2
 8015390:	fb0c 1212 	mls	r2, ip, r2, r1
 8015394:	b2d1      	uxtb	r1, r2
 8015396:	4288      	cmp	r0, r1
 8015398:	f43f af21 	beq.w	80151de <uxr_read_framed_msg+0x2e2>
 801539c:	3302      	adds	r3, #2
 801539e:	4422      	add	r2, r4
 80153a0:	7891      	ldrb	r1, [r2, #2]
 80153a2:	085a      	lsrs	r2, r3, #1
 80153a4:	fba5 0202 	umull	r0, r2, r5, r2
 80153a8:	297e      	cmp	r1, #126	@ 0x7e
 80153aa:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80153ae:	fb0c 3312 	mls	r3, ip, r2, r3
 80153b2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80153b6:	d030      	beq.n	801541a <uxr_read_framed_msg+0x51e>
 80153b8:	f081 0120 	eor.w	r1, r1, #32
 80153bc:	e65d      	b.n	801507a <uxr_read_framed_msg+0x17e>
 80153be:	1c59      	adds	r1, r3, #1
 80153c0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80153c4:	084a      	lsrs	r2, r1, #1
 80153c6:	fba5 e202 	umull	lr, r2, r5, r2
 80153ca:	0892      	lsrs	r2, r2, #2
 80153cc:	fb0c 1212 	mls	r2, ip, r2, r1
 80153d0:	b2d1      	uxtb	r1, r2
 80153d2:	4288      	cmp	r0, r1
 80153d4:	f43f af12 	beq.w	80151fc <uxr_read_framed_msg+0x300>
 80153d8:	3302      	adds	r3, #2
 80153da:	4422      	add	r2, r4
 80153dc:	7891      	ldrb	r1, [r2, #2]
 80153de:	085a      	lsrs	r2, r3, #1
 80153e0:	fba5 0202 	umull	r0, r2, r5, r2
 80153e4:	297e      	cmp	r1, #126	@ 0x7e
 80153e6:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80153ea:	fb0c 3312 	mls	r3, ip, r2, r3
 80153ee:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80153f2:	d002      	beq.n	80153fa <uxr_read_framed_msg+0x4fe>
 80153f4:	f081 0120 	eor.w	r1, r1, #32
 80153f8:	e66a      	b.n	80150d0 <uxr_read_framed_msg+0x1d4>
 80153fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80153fc:	9300      	str	r3, [sp, #0]
 80153fe:	2302      	movs	r3, #2
 8015400:	9301      	str	r3, [sp, #4]
 8015402:	464a      	mov	r2, r9
 8015404:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015406:	4641      	mov	r1, r8
 8015408:	4620      	mov	r0, r4
 801540a:	f7ff fce3 	bl	8014dd4 <uxr_framing_read_transport>
 801540e:	2800      	cmp	r0, #0
 8015410:	f47f aef2 	bne.w	80151f8 <uxr_read_framed_msg+0x2fc>
 8015414:	2301      	movs	r3, #1
 8015416:	7023      	strb	r3, [r4, #0]
 8015418:	e581      	b.n	8014f1e <uxr_read_framed_msg+0x22>
 801541a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801541c:	9300      	str	r3, [sp, #0]
 801541e:	2301      	movs	r3, #1
 8015420:	e7ee      	b.n	8015400 <uxr_read_framed_msg+0x504>
 8015422:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015424:	9300      	str	r3, [sp, #0]
 8015426:	2303      	movs	r3, #3
 8015428:	e7ea      	b.n	8015400 <uxr_read_framed_msg+0x504>
 801542a:	bf00      	nop

0801542c <rcl_get_default_domain_id>:
 801542c:	b530      	push	{r4, r5, lr}
 801542e:	2300      	movs	r3, #0
 8015430:	b083      	sub	sp, #12
 8015432:	9300      	str	r3, [sp, #0]
 8015434:	b1d0      	cbz	r0, 801546c <rcl_get_default_domain_id+0x40>
 8015436:	4604      	mov	r4, r0
 8015438:	4669      	mov	r1, sp
 801543a:	4815      	ldr	r0, [pc, #84]	@ (8015490 <rcl_get_default_domain_id+0x64>)
 801543c:	f7fd f9e6 	bl	801280c <rcutils_get_env>
 8015440:	4602      	mov	r2, r0
 8015442:	b110      	cbz	r0, 801544a <rcl_get_default_domain_id+0x1e>
 8015444:	2001      	movs	r0, #1
 8015446:	b003      	add	sp, #12
 8015448:	bd30      	pop	{r4, r5, pc}
 801544a:	9b00      	ldr	r3, [sp, #0]
 801544c:	b18b      	cbz	r3, 8015472 <rcl_get_default_domain_id+0x46>
 801544e:	7818      	ldrb	r0, [r3, #0]
 8015450:	2800      	cmp	r0, #0
 8015452:	d0f8      	beq.n	8015446 <rcl_get_default_domain_id+0x1a>
 8015454:	a901      	add	r1, sp, #4
 8015456:	4618      	mov	r0, r3
 8015458:	9201      	str	r2, [sp, #4]
 801545a:	f000 fee5 	bl	8016228 <strtoul>
 801545e:	4605      	mov	r5, r0
 8015460:	b150      	cbz	r0, 8015478 <rcl_get_default_domain_id+0x4c>
 8015462:	1c43      	adds	r3, r0, #1
 8015464:	d00d      	beq.n	8015482 <rcl_get_default_domain_id+0x56>
 8015466:	2000      	movs	r0, #0
 8015468:	6025      	str	r5, [r4, #0]
 801546a:	e7ec      	b.n	8015446 <rcl_get_default_domain_id+0x1a>
 801546c:	200b      	movs	r0, #11
 801546e:	b003      	add	sp, #12
 8015470:	bd30      	pop	{r4, r5, pc}
 8015472:	4618      	mov	r0, r3
 8015474:	b003      	add	sp, #12
 8015476:	bd30      	pop	{r4, r5, pc}
 8015478:	9b01      	ldr	r3, [sp, #4]
 801547a:	781b      	ldrb	r3, [r3, #0]
 801547c:	2b00      	cmp	r3, #0
 801547e:	d0f2      	beq.n	8015466 <rcl_get_default_domain_id+0x3a>
 8015480:	e7e0      	b.n	8015444 <rcl_get_default_domain_id+0x18>
 8015482:	f001 fa01 	bl	8016888 <__errno>
 8015486:	6803      	ldr	r3, [r0, #0]
 8015488:	2b22      	cmp	r3, #34	@ 0x22
 801548a:	d1ec      	bne.n	8015466 <rcl_get_default_domain_id+0x3a>
 801548c:	e7da      	b.n	8015444 <rcl_get_default_domain_id+0x18>
 801548e:	bf00      	nop
 8015490:	08017da8 	.word	0x08017da8

08015494 <rcl_expand_topic_name>:
 8015494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015498:	b08d      	sub	sp, #52	@ 0x34
 801549a:	4698      	mov	r8, r3
 801549c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801549e:	9207      	str	r2, [sp, #28]
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	bf18      	it	ne
 80154a4:	f1b8 0f00 	cmpne.w	r8, #0
 80154a8:	bf0c      	ite	eq
 80154aa:	2301      	moveq	r3, #1
 80154ac:	2300      	movne	r3, #0
 80154ae:	2a00      	cmp	r2, #0
 80154b0:	bf08      	it	eq
 80154b2:	f043 0301 	orreq.w	r3, r3, #1
 80154b6:	2900      	cmp	r1, #0
 80154b8:	bf08      	it	eq
 80154ba:	f043 0301 	orreq.w	r3, r3, #1
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d13d      	bne.n	801553e <rcl_expand_topic_name+0xaa>
 80154c2:	fab0 f280 	clz	r2, r0
 80154c6:	4604      	mov	r4, r0
 80154c8:	0952      	lsrs	r2, r2, #5
 80154ca:	2800      	cmp	r0, #0
 80154cc:	d037      	beq.n	801553e <rcl_expand_topic_name+0xaa>
 80154ce:	460f      	mov	r7, r1
 80154d0:	a90b      	add	r1, sp, #44	@ 0x2c
 80154d2:	f000 f9ed 	bl	80158b0 <rcl_validate_topic_name>
 80154d6:	4605      	mov	r5, r0
 80154d8:	bb68      	cbnz	r0, 8015536 <rcl_expand_topic_name+0xa2>
 80154da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d137      	bne.n	8015550 <rcl_expand_topic_name+0xbc>
 80154e0:	4602      	mov	r2, r0
 80154e2:	a90b      	add	r1, sp, #44	@ 0x2c
 80154e4:	4638      	mov	r0, r7
 80154e6:	f7fd fdb1 	bl	801304c <rmw_validate_node_name>
 80154ea:	bb68      	cbnz	r0, 8015548 <rcl_expand_topic_name+0xb4>
 80154ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d133      	bne.n	801555a <rcl_expand_topic_name+0xc6>
 80154f2:	462a      	mov	r2, r5
 80154f4:	a90b      	add	r1, sp, #44	@ 0x2c
 80154f6:	9807      	ldr	r0, [sp, #28]
 80154f8:	f7fd fd8a 	bl	8013010 <rmw_validate_namespace>
 80154fc:	bb20      	cbnz	r0, 8015548 <rcl_expand_topic_name+0xb4>
 80154fe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8015500:	2d00      	cmp	r5, #0
 8015502:	f040 80a2 	bne.w	801564a <rcl_expand_topic_name+0x1b6>
 8015506:	217b      	movs	r1, #123	@ 0x7b
 8015508:	4620      	mov	r0, r4
 801550a:	f001 f931 	bl	8016770 <strchr>
 801550e:	7823      	ldrb	r3, [r4, #0]
 8015510:	4681      	mov	r9, r0
 8015512:	bb20      	cbnz	r0, 801555e <rcl_expand_topic_name+0xca>
 8015514:	2b2f      	cmp	r3, #47	@ 0x2f
 8015516:	d122      	bne.n	801555e <rcl_expand_topic_name+0xca>
 8015518:	ab19      	add	r3, sp, #100	@ 0x64
 801551a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801551e:	ab16      	add	r3, sp, #88	@ 0x58
 8015520:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015524:	4620      	mov	r0, r4
 8015526:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015528:	f7fd fac2 	bl	8012ab0 <rcutils_strdup>
 801552c:	2800      	cmp	r0, #0
 801552e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8015530:	bf08      	it	eq
 8015532:	250a      	moveq	r5, #10
 8015534:	6018      	str	r0, [r3, #0]
 8015536:	4628      	mov	r0, r5
 8015538:	b00d      	add	sp, #52	@ 0x34
 801553a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801553e:	250b      	movs	r5, #11
 8015540:	4628      	mov	r0, r5
 8015542:	b00d      	add	sp, #52	@ 0x34
 8015544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015548:	f7fc fb72 	bl	8011c30 <rcl_convert_rmw_ret_to_rcl_ret>
 801554c:	4605      	mov	r5, r0
 801554e:	e7f2      	b.n	8015536 <rcl_expand_topic_name+0xa2>
 8015550:	2567      	movs	r5, #103	@ 0x67
 8015552:	4628      	mov	r0, r5
 8015554:	b00d      	add	sp, #52	@ 0x34
 8015556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801555a:	25c9      	movs	r5, #201	@ 0xc9
 801555c:	e7eb      	b.n	8015536 <rcl_expand_topic_name+0xa2>
 801555e:	2b7e      	cmp	r3, #126	@ 0x7e
 8015560:	d075      	beq.n	801564e <rcl_expand_topic_name+0x1ba>
 8015562:	f1b9 0f00 	cmp.w	r9, #0
 8015566:	f000 80c2 	beq.w	80156ee <rcl_expand_topic_name+0x25a>
 801556a:	2300      	movs	r3, #0
 801556c:	46a2      	mov	sl, r4
 801556e:	461e      	mov	r6, r3
 8015570:	9508      	str	r5, [sp, #32]
 8015572:	4655      	mov	r5, sl
 8015574:	9409      	str	r4, [sp, #36]	@ 0x24
 8015576:	46b2      	mov	sl, r6
 8015578:	464c      	mov	r4, r9
 801557a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801557e:	2c00      	cmp	r4, #0
 8015580:	f000 80ae 	beq.w	80156e0 <rcl_expand_topic_name+0x24c>
 8015584:	217d      	movs	r1, #125	@ 0x7d
 8015586:	4628      	mov	r0, r5
 8015588:	f001 f8f2 	bl	8016770 <strchr>
 801558c:	eba0 0904 	sub.w	r9, r0, r4
 8015590:	4621      	mov	r1, r4
 8015592:	4869      	ldr	r0, [pc, #420]	@ (8015738 <rcl_expand_topic_name+0x2a4>)
 8015594:	f109 0601 	add.w	r6, r9, #1
 8015598:	4632      	mov	r2, r6
 801559a:	f001 f8f6 	bl	801678a <strncmp>
 801559e:	2800      	cmp	r0, #0
 80155a0:	d051      	beq.n	8015646 <rcl_expand_topic_name+0x1b2>
 80155a2:	4632      	mov	r2, r6
 80155a4:	4621      	mov	r1, r4
 80155a6:	4865      	ldr	r0, [pc, #404]	@ (801573c <rcl_expand_topic_name+0x2a8>)
 80155a8:	f001 f8ef 	bl	801678a <strncmp>
 80155ac:	b128      	cbz	r0, 80155ba <rcl_expand_topic_name+0x126>
 80155ae:	4632      	mov	r2, r6
 80155b0:	4621      	mov	r1, r4
 80155b2:	4863      	ldr	r0, [pc, #396]	@ (8015740 <rcl_expand_topic_name+0x2ac>)
 80155b4:	f001 f8e9 	bl	801678a <strncmp>
 80155b8:	bb38      	cbnz	r0, 801560a <rcl_expand_topic_name+0x176>
 80155ba:	46d9      	mov	r9, fp
 80155bc:	ab18      	add	r3, sp, #96	@ 0x60
 80155be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80155c2:	ab16      	add	r3, sp, #88	@ 0x58
 80155c4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80155c8:	4620      	mov	r0, r4
 80155ca:	4631      	mov	r1, r6
 80155cc:	cb0c      	ldmia	r3, {r2, r3}
 80155ce:	f7fd fa91 	bl	8012af4 <rcutils_strndup>
 80155d2:	4604      	mov	r4, r0
 80155d4:	2800      	cmp	r0, #0
 80155d6:	f000 80a3 	beq.w	8015720 <rcl_expand_topic_name+0x28c>
 80155da:	464a      	mov	r2, r9
 80155dc:	4628      	mov	r0, r5
 80155de:	ab16      	add	r3, sp, #88	@ 0x58
 80155e0:	4621      	mov	r1, r4
 80155e2:	f7fd f965 	bl	80128b0 <rcutils_repl_str>
 80155e6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80155e8:	4605      	mov	r5, r0
 80155ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80155ec:	4620      	mov	r0, r4
 80155ee:	4798      	blx	r3
 80155f0:	4650      	mov	r0, sl
 80155f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80155f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80155f6:	4798      	blx	r3
 80155f8:	2d00      	cmp	r5, #0
 80155fa:	d06c      	beq.n	80156d6 <rcl_expand_topic_name+0x242>
 80155fc:	217b      	movs	r1, #123	@ 0x7b
 80155fe:	4628      	mov	r0, r5
 8015600:	f001 f8b6 	bl	8016770 <strchr>
 8015604:	46aa      	mov	sl, r5
 8015606:	4604      	mov	r4, r0
 8015608:	e7b9      	b.n	801557e <rcl_expand_topic_name+0xea>
 801560a:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801560e:	1c61      	adds	r1, r4, #1
 8015610:	4640      	mov	r0, r8
 8015612:	f7fd fb87 	bl	8012d24 <rcutils_string_map_getn>
 8015616:	4681      	mov	r9, r0
 8015618:	2800      	cmp	r0, #0
 801561a:	d1cf      	bne.n	80155bc <rcl_expand_topic_name+0x128>
 801561c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801561e:	aa18      	add	r2, sp, #96	@ 0x60
 8015620:	2569      	movs	r5, #105	@ 0x69
 8015622:	6018      	str	r0, [r3, #0]
 8015624:	ab16      	add	r3, sp, #88	@ 0x58
 8015626:	ca07      	ldmia	r2, {r0, r1, r2}
 8015628:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801562c:	4631      	mov	r1, r6
 801562e:	4620      	mov	r0, r4
 8015630:	cb0c      	ldmia	r3, {r2, r3}
 8015632:	f7fd fa5f 	bl	8012af4 <rcutils_strndup>
 8015636:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015638:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801563a:	4798      	blx	r3
 801563c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801563e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015640:	4650      	mov	r0, sl
 8015642:	4798      	blx	r3
 8015644:	e777      	b.n	8015536 <rcl_expand_topic_name+0xa2>
 8015646:	46b9      	mov	r9, r7
 8015648:	e7b8      	b.n	80155bc <rcl_expand_topic_name+0x128>
 801564a:	25ca      	movs	r5, #202	@ 0xca
 801564c:	e773      	b.n	8015536 <rcl_expand_topic_name+0xa2>
 801564e:	9e07      	ldr	r6, [sp, #28]
 8015650:	4630      	mov	r0, r6
 8015652:	f7ea fdff 	bl	8000254 <strlen>
 8015656:	4a3b      	ldr	r2, [pc, #236]	@ (8015744 <rcl_expand_topic_name+0x2b0>)
 8015658:	4b3b      	ldr	r3, [pc, #236]	@ (8015748 <rcl_expand_topic_name+0x2b4>)
 801565a:	9603      	str	r6, [sp, #12]
 801565c:	2801      	cmp	r0, #1
 801565e:	bf18      	it	ne
 8015660:	4613      	movne	r3, r2
 8015662:	9704      	str	r7, [sp, #16]
 8015664:	9302      	str	r3, [sp, #8]
 8015666:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8015668:	9300      	str	r3, [sp, #0]
 801566a:	1c63      	adds	r3, r4, #1
 801566c:	9305      	str	r3, [sp, #20]
 801566e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015672:	9301      	str	r3, [sp, #4]
 8015674:	ab16      	add	r3, sp, #88	@ 0x58
 8015676:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015678:	f7fd f8e0 	bl	801283c <rcutils_format_string_limit>
 801567c:	4606      	mov	r6, r0
 801567e:	b350      	cbz	r0, 80156d6 <rcl_expand_topic_name+0x242>
 8015680:	f1b9 0f00 	cmp.w	r9, #0
 8015684:	d005      	beq.n	8015692 <rcl_expand_topic_name+0x1fe>
 8015686:	217b      	movs	r1, #123	@ 0x7b
 8015688:	46b2      	mov	sl, r6
 801568a:	f001 f871 	bl	8016770 <strchr>
 801568e:	4681      	mov	r9, r0
 8015690:	e76e      	b.n	8015570 <rcl_expand_topic_name+0xdc>
 8015692:	7833      	ldrb	r3, [r6, #0]
 8015694:	2b2f      	cmp	r3, #47	@ 0x2f
 8015696:	d01b      	beq.n	80156d0 <rcl_expand_topic_name+0x23c>
 8015698:	9c07      	ldr	r4, [sp, #28]
 801569a:	4620      	mov	r0, r4
 801569c:	f7ea fdda 	bl	8000254 <strlen>
 80156a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80156a4:	4a29      	ldr	r2, [pc, #164]	@ (801574c <rcl_expand_topic_name+0x2b8>)
 80156a6:	9301      	str	r3, [sp, #4]
 80156a8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80156aa:	9604      	str	r6, [sp, #16]
 80156ac:	9300      	str	r3, [sp, #0]
 80156ae:	4b28      	ldr	r3, [pc, #160]	@ (8015750 <rcl_expand_topic_name+0x2bc>)
 80156b0:	9403      	str	r4, [sp, #12]
 80156b2:	2801      	cmp	r0, #1
 80156b4:	bf18      	it	ne
 80156b6:	4613      	movne	r3, r2
 80156b8:	9302      	str	r3, [sp, #8]
 80156ba:	ab16      	add	r3, sp, #88	@ 0x58
 80156bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80156be:	f7fd f8bd 	bl	801283c <rcutils_format_string_limit>
 80156c2:	4603      	mov	r3, r0
 80156c4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80156c6:	4630      	mov	r0, r6
 80156c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80156ca:	461e      	mov	r6, r3
 80156cc:	4790      	blx	r2
 80156ce:	b116      	cbz	r6, 80156d6 <rcl_expand_topic_name+0x242>
 80156d0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80156d2:	601e      	str	r6, [r3, #0]
 80156d4:	e72f      	b.n	8015536 <rcl_expand_topic_name+0xa2>
 80156d6:	2300      	movs	r3, #0
 80156d8:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80156da:	250a      	movs	r5, #10
 80156dc:	6013      	str	r3, [r2, #0]
 80156de:	e72a      	b.n	8015536 <rcl_expand_topic_name+0xa2>
 80156e0:	4653      	mov	r3, sl
 80156e2:	4656      	mov	r6, sl
 80156e4:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d1d2      	bne.n	8015692 <rcl_expand_topic_name+0x1fe>
 80156ec:	7823      	ldrb	r3, [r4, #0]
 80156ee:	2b2f      	cmp	r3, #47	@ 0x2f
 80156f0:	d01e      	beq.n	8015730 <rcl_expand_topic_name+0x29c>
 80156f2:	9e07      	ldr	r6, [sp, #28]
 80156f4:	4630      	mov	r0, r6
 80156f6:	f7ea fdad 	bl	8000254 <strlen>
 80156fa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80156fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015700:	9603      	str	r6, [sp, #12]
 8015702:	9404      	str	r4, [sp, #16]
 8015704:	e9cd 2300 	strd	r2, r3, [sp]
 8015708:	4a10      	ldr	r2, [pc, #64]	@ (801574c <rcl_expand_topic_name+0x2b8>)
 801570a:	4b11      	ldr	r3, [pc, #68]	@ (8015750 <rcl_expand_topic_name+0x2bc>)
 801570c:	2801      	cmp	r0, #1
 801570e:	bf18      	it	ne
 8015710:	4613      	movne	r3, r2
 8015712:	9302      	str	r3, [sp, #8]
 8015714:	ab16      	add	r3, sp, #88	@ 0x58
 8015716:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015718:	f7fd f890 	bl	801283c <rcutils_format_string_limit>
 801571c:	4606      	mov	r6, r0
 801571e:	e7d6      	b.n	80156ce <rcl_expand_topic_name+0x23a>
 8015720:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	@ 0x68
 8015724:	4650      	mov	r0, sl
 8015726:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015728:	6014      	str	r4, [r2, #0]
 801572a:	250a      	movs	r5, #10
 801572c:	4798      	blx	r3
 801572e:	e702      	b.n	8015536 <rcl_expand_topic_name+0xa2>
 8015730:	2300      	movs	r3, #0
 8015732:	461e      	mov	r6, r3
 8015734:	e7cc      	b.n	80156d0 <rcl_expand_topic_name+0x23c>
 8015736:	bf00      	nop
 8015738:	08017dc0 	.word	0x08017dc0
 801573c:	08017dc8 	.word	0x08017dc8
 8015740:	08017dd0 	.word	0x08017dd0
 8015744:	08017db8 	.word	0x08017db8
 8015748:	080177b0 	.word	0x080177b0
 801574c:	08017a54 	.word	0x08017a54
 8015750:	080177c0 	.word	0x080177c0

08015754 <rcl_get_default_topic_name_substitutions>:
 8015754:	2800      	cmp	r0, #0
 8015756:	bf0c      	ite	eq
 8015758:	200b      	moveq	r0, #11
 801575a:	2000      	movne	r0, #0
 801575c:	4770      	bx	lr
 801575e:	bf00      	nop

08015760 <rcl_get_zero_initialized_guard_condition>:
 8015760:	4a03      	ldr	r2, [pc, #12]	@ (8015770 <rcl_get_zero_initialized_guard_condition+0x10>)
 8015762:	4603      	mov	r3, r0
 8015764:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015768:	e883 0003 	stmia.w	r3, {r0, r1}
 801576c:	4618      	mov	r0, r3
 801576e:	4770      	bx	lr
 8015770:	080181cc 	.word	0x080181cc

08015774 <rcl_guard_condition_init_from_rmw>:
 8015774:	b082      	sub	sp, #8
 8015776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801577a:	b086      	sub	sp, #24
 801577c:	4604      	mov	r4, r0
 801577e:	460e      	mov	r6, r1
 8015780:	4615      	mov	r5, r2
 8015782:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8015786:	f10d 0e04 	add.w	lr, sp, #4
 801578a:	f84c 3f04 	str.w	r3, [ip, #4]!
 801578e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015792:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015796:	f8dc 3000 	ldr.w	r3, [ip]
 801579a:	a801      	add	r0, sp, #4
 801579c:	f8ce 3000 	str.w	r3, [lr]
 80157a0:	f7f6 fede 	bl	800c560 <rcutils_allocator_is_valid>
 80157a4:	f080 0301 	eor.w	r3, r0, #1
 80157a8:	b2db      	uxtb	r3, r3
 80157aa:	bb3b      	cbnz	r3, 80157fc <rcl_guard_condition_init_from_rmw+0x88>
 80157ac:	b334      	cbz	r4, 80157fc <rcl_guard_condition_init_from_rmw+0x88>
 80157ae:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80157b2:	f1b8 0f00 	cmp.w	r8, #0
 80157b6:	d11a      	bne.n	80157ee <rcl_guard_condition_init_from_rmw+0x7a>
 80157b8:	b305      	cbz	r5, 80157fc <rcl_guard_condition_init_from_rmw+0x88>
 80157ba:	4628      	mov	r0, r5
 80157bc:	f7fc fa56 	bl	8011c6c <rcl_context_is_valid>
 80157c0:	b1f0      	cbz	r0, 8015800 <rcl_guard_condition_init_from_rmw+0x8c>
 80157c2:	9b01      	ldr	r3, [sp, #4]
 80157c4:	201c      	movs	r0, #28
 80157c6:	9905      	ldr	r1, [sp, #20]
 80157c8:	4798      	blx	r3
 80157ca:	4607      	mov	r7, r0
 80157cc:	6060      	str	r0, [r4, #4]
 80157ce:	b320      	cbz	r0, 801581a <rcl_guard_condition_init_from_rmw+0xa6>
 80157d0:	b1c6      	cbz	r6, 8015804 <rcl_guard_condition_init_from_rmw+0x90>
 80157d2:	6006      	str	r6, [r0, #0]
 80157d4:	f880 8004 	strb.w	r8, [r0, #4]
 80157d8:	ac01      	add	r4, sp, #4
 80157da:	f107 0c08 	add.w	ip, r7, #8
 80157de:	2500      	movs	r5, #0
 80157e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80157e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80157e6:	6823      	ldr	r3, [r4, #0]
 80157e8:	f8cc 3000 	str.w	r3, [ip]
 80157ec:	e000      	b.n	80157f0 <rcl_guard_condition_init_from_rmw+0x7c>
 80157ee:	2564      	movs	r5, #100	@ 0x64
 80157f0:	4628      	mov	r0, r5
 80157f2:	b006      	add	sp, #24
 80157f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80157f8:	b002      	add	sp, #8
 80157fa:	4770      	bx	lr
 80157fc:	250b      	movs	r5, #11
 80157fe:	e7f7      	b.n	80157f0 <rcl_guard_condition_init_from_rmw+0x7c>
 8015800:	2565      	movs	r5, #101	@ 0x65
 8015802:	e7f5      	b.n	80157f0 <rcl_guard_condition_init_from_rmw+0x7c>
 8015804:	6828      	ldr	r0, [r5, #0]
 8015806:	3028      	adds	r0, #40	@ 0x28
 8015808:	f000 fa42 	bl	8015c90 <rmw_create_guard_condition>
 801580c:	6038      	str	r0, [r7, #0]
 801580e:	6867      	ldr	r7, [r4, #4]
 8015810:	683e      	ldr	r6, [r7, #0]
 8015812:	b126      	cbz	r6, 801581e <rcl_guard_condition_init_from_rmw+0xaa>
 8015814:	2301      	movs	r3, #1
 8015816:	713b      	strb	r3, [r7, #4]
 8015818:	e7de      	b.n	80157d8 <rcl_guard_condition_init_from_rmw+0x64>
 801581a:	250a      	movs	r5, #10
 801581c:	e7e8      	b.n	80157f0 <rcl_guard_condition_init_from_rmw+0x7c>
 801581e:	9b02      	ldr	r3, [sp, #8]
 8015820:	4638      	mov	r0, r7
 8015822:	9905      	ldr	r1, [sp, #20]
 8015824:	2501      	movs	r5, #1
 8015826:	4798      	blx	r3
 8015828:	6066      	str	r6, [r4, #4]
 801582a:	e7e1      	b.n	80157f0 <rcl_guard_condition_init_from_rmw+0x7c>

0801582c <rcl_guard_condition_fini>:
 801582c:	b570      	push	{r4, r5, r6, lr}
 801582e:	b082      	sub	sp, #8
 8015830:	b1f0      	cbz	r0, 8015870 <rcl_guard_condition_fini+0x44>
 8015832:	6843      	ldr	r3, [r0, #4]
 8015834:	4604      	mov	r4, r0
 8015836:	b163      	cbz	r3, 8015852 <rcl_guard_condition_fini+0x26>
 8015838:	6818      	ldr	r0, [r3, #0]
 801583a:	68de      	ldr	r6, [r3, #12]
 801583c:	6999      	ldr	r1, [r3, #24]
 801583e:	b160      	cbz	r0, 801585a <rcl_guard_condition_fini+0x2e>
 8015840:	791d      	ldrb	r5, [r3, #4]
 8015842:	b965      	cbnz	r5, 801585e <rcl_guard_condition_fini+0x32>
 8015844:	4618      	mov	r0, r3
 8015846:	47b0      	blx	r6
 8015848:	2300      	movs	r3, #0
 801584a:	4628      	mov	r0, r5
 801584c:	6063      	str	r3, [r4, #4]
 801584e:	b002      	add	sp, #8
 8015850:	bd70      	pop	{r4, r5, r6, pc}
 8015852:	461d      	mov	r5, r3
 8015854:	4628      	mov	r0, r5
 8015856:	b002      	add	sp, #8
 8015858:	bd70      	pop	{r4, r5, r6, pc}
 801585a:	4605      	mov	r5, r0
 801585c:	e7f2      	b.n	8015844 <rcl_guard_condition_fini+0x18>
 801585e:	9101      	str	r1, [sp, #4]
 8015860:	f000 fa2c 	bl	8015cbc <rmw_destroy_guard_condition>
 8015864:	1e05      	subs	r5, r0, #0
 8015866:	6863      	ldr	r3, [r4, #4]
 8015868:	9901      	ldr	r1, [sp, #4]
 801586a:	bf18      	it	ne
 801586c:	2501      	movne	r5, #1
 801586e:	e7e9      	b.n	8015844 <rcl_guard_condition_fini+0x18>
 8015870:	250b      	movs	r5, #11
 8015872:	4628      	mov	r0, r5
 8015874:	b002      	add	sp, #8
 8015876:	bd70      	pop	{r4, r5, r6, pc}

08015878 <rcl_guard_condition_get_default_options>:
 8015878:	b5f0      	push	{r4, r5, r6, r7, lr}
 801587a:	b087      	sub	sp, #28
 801587c:	4606      	mov	r6, r0
 801587e:	4c0b      	ldr	r4, [pc, #44]	@ (80158ac <rcl_guard_condition_get_default_options+0x34>)
 8015880:	4668      	mov	r0, sp
 8015882:	f7f6 fe5f 	bl	800c544 <rcutils_get_default_allocator>
 8015886:	46ee      	mov	lr, sp
 8015888:	46a4      	mov	ip, r4
 801588a:	4625      	mov	r5, r4
 801588c:	4634      	mov	r4, r6
 801588e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015892:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015896:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015898:	f8de 7000 	ldr.w	r7, [lr]
 801589c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801589e:	4630      	mov	r0, r6
 80158a0:	f8cc 7000 	str.w	r7, [ip]
 80158a4:	6027      	str	r7, [r4, #0]
 80158a6:	b007      	add	sp, #28
 80158a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80158aa:	bf00      	nop
 80158ac:	2000eb24 	.word	0x2000eb24

080158b0 <rcl_validate_topic_name>:
 80158b0:	2800      	cmp	r0, #0
 80158b2:	f000 8089 	beq.w	80159c8 <rcl_validate_topic_name+0x118>
 80158b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80158ba:	460e      	mov	r6, r1
 80158bc:	2900      	cmp	r1, #0
 80158be:	f000 8085 	beq.w	80159cc <rcl_validate_topic_name+0x11c>
 80158c2:	4604      	mov	r4, r0
 80158c4:	4617      	mov	r7, r2
 80158c6:	f7ea fcc5 	bl	8000254 <strlen>
 80158ca:	b1b0      	cbz	r0, 80158fa <rcl_validate_topic_name+0x4a>
 80158cc:	f894 e000 	ldrb.w	lr, [r4]
 80158d0:	f8df c160 	ldr.w	ip, [pc, #352]	@ 8015a34 <rcl_validate_topic_name+0x184>
 80158d4:	f81c 300e 	ldrb.w	r3, [ip, lr]
 80158d8:	f013 0304 	ands.w	r3, r3, #4
 80158dc:	d139      	bne.n	8015952 <rcl_validate_topic_name+0xa2>
 80158de:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 80158e2:	f814 2008 	ldrb.w	r2, [r4, r8]
 80158e6:	2a2f      	cmp	r2, #47	@ 0x2f
 80158e8:	d10f      	bne.n	801590a <rcl_validate_topic_name+0x5a>
 80158ea:	2202      	movs	r2, #2
 80158ec:	6032      	str	r2, [r6, #0]
 80158ee:	b3a7      	cbz	r7, 801595a <rcl_validate_topic_name+0xaa>
 80158f0:	4618      	mov	r0, r3
 80158f2:	f8c7 8000 	str.w	r8, [r7]
 80158f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158fa:	2301      	movs	r3, #1
 80158fc:	6033      	str	r3, [r6, #0]
 80158fe:	b367      	cbz	r7, 801595a <rcl_validate_topic_name+0xaa>
 8015900:	2300      	movs	r3, #0
 8015902:	4618      	mov	r0, r3
 8015904:	603b      	str	r3, [r7, #0]
 8015906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801590a:	f104 3aff 	add.w	sl, r4, #4294967295	@ 0xffffffff
 801590e:	461d      	mov	r5, r3
 8015910:	4619      	mov	r1, r3
 8015912:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8015916:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
 801591a:	f1b9 0f09 	cmp.w	r9, #9
 801591e:	d91f      	bls.n	8015960 <rcl_validate_topic_name+0xb0>
 8015920:	f022 0920 	bic.w	r9, r2, #32
 8015924:	f1a9 0941 	sub.w	r9, r9, #65	@ 0x41
 8015928:	f1b9 0f19 	cmp.w	r9, #25
 801592c:	d918      	bls.n	8015960 <rcl_validate_topic_name+0xb0>
 801592e:	2a5f      	cmp	r2, #95	@ 0x5f
 8015930:	d024      	beq.n	801597c <rcl_validate_topic_name+0xcc>
 8015932:	2a2f      	cmp	r2, #47	@ 0x2f
 8015934:	d058      	beq.n	80159e8 <rcl_validate_topic_name+0x138>
 8015936:	2a7e      	cmp	r2, #126	@ 0x7e
 8015938:	d04a      	beq.n	80159d0 <rcl_validate_topic_name+0x120>
 801593a:	2a7b      	cmp	r2, #123	@ 0x7b
 801593c:	d05b      	beq.n	80159f6 <rcl_validate_topic_name+0x146>
 801593e:	2a7d      	cmp	r2, #125	@ 0x7d
 8015940:	d169      	bne.n	8015a16 <rcl_validate_topic_name+0x166>
 8015942:	2d00      	cmp	r5, #0
 8015944:	d15c      	bne.n	8015a00 <rcl_validate_topic_name+0x150>
 8015946:	2305      	movs	r3, #5
 8015948:	6033      	str	r3, [r6, #0]
 801594a:	b137      	cbz	r7, 801595a <rcl_validate_topic_name+0xaa>
 801594c:	2000      	movs	r0, #0
 801594e:	6039      	str	r1, [r7, #0]
 8015950:	e7d9      	b.n	8015906 <rcl_validate_topic_name+0x56>
 8015952:	2304      	movs	r3, #4
 8015954:	6033      	str	r3, [r6, #0]
 8015956:	2f00      	cmp	r7, #0
 8015958:	d1d2      	bne.n	8015900 <rcl_validate_topic_name+0x50>
 801595a:	2000      	movs	r0, #0
 801595c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015960:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8015964:	0752      	lsls	r2, r2, #29
 8015966:	d509      	bpl.n	801597c <rcl_validate_topic_name+0xcc>
 8015968:	2900      	cmp	r1, #0
 801596a:	bf0c      	ite	eq
 801596c:	2200      	moveq	r2, #0
 801596e:	f005 0201 	andne.w	r2, r5, #1
 8015972:	b11a      	cbz	r2, 801597c <rcl_validate_topic_name+0xcc>
 8015974:	1e4d      	subs	r5, r1, #1
 8015976:	429d      	cmp	r5, r3
 8015978:	d031      	beq.n	80159de <rcl_validate_topic_name+0x12e>
 801597a:	4615      	mov	r5, r2
 801597c:	3101      	adds	r1, #1
 801597e:	4288      	cmp	r0, r1
 8015980:	d1c7      	bne.n	8015912 <rcl_validate_topic_name+0x62>
 8015982:	2d00      	cmp	r5, #0
 8015984:	d142      	bne.n	8015a0c <rcl_validate_topic_name+0x15c>
 8015986:	4628      	mov	r0, r5
 8015988:	2301      	movs	r3, #1
 801598a:	e00c      	b.n	80159a6 <rcl_validate_topic_name+0xf6>
 801598c:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8015990:	d101      	bne.n	8015996 <rcl_validate_topic_name+0xe6>
 8015992:	2801      	cmp	r0, #1
 8015994:	d047      	beq.n	8015a26 <rcl_validate_topic_name+0x176>
 8015996:	1c5a      	adds	r2, r3, #1
 8015998:	428b      	cmp	r3, r1
 801599a:	f100 0001 	add.w	r0, r0, #1
 801599e:	f104 0401 	add.w	r4, r4, #1
 80159a2:	4613      	mov	r3, r2
 80159a4:	d22e      	bcs.n	8015a04 <rcl_validate_topic_name+0x154>
 80159a6:	4580      	cmp	r8, r0
 80159a8:	d0f5      	beq.n	8015996 <rcl_validate_topic_name+0xe6>
 80159aa:	7822      	ldrb	r2, [r4, #0]
 80159ac:	2a2f      	cmp	r2, #47	@ 0x2f
 80159ae:	d1ed      	bne.n	801598c <rcl_validate_topic_name+0xdc>
 80159b0:	7862      	ldrb	r2, [r4, #1]
 80159b2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80159b6:	0752      	lsls	r2, r2, #29
 80159b8:	d5ed      	bpl.n	8015996 <rcl_validate_topic_name+0xe6>
 80159ba:	2204      	movs	r2, #4
 80159bc:	6032      	str	r2, [r6, #0]
 80159be:	2f00      	cmp	r7, #0
 80159c0:	d0cb      	beq.n	801595a <rcl_validate_topic_name+0xaa>
 80159c2:	2000      	movs	r0, #0
 80159c4:	603b      	str	r3, [r7, #0]
 80159c6:	e79e      	b.n	8015906 <rcl_validate_topic_name+0x56>
 80159c8:	200b      	movs	r0, #11
 80159ca:	4770      	bx	lr
 80159cc:	200b      	movs	r0, #11
 80159ce:	e79a      	b.n	8015906 <rcl_validate_topic_name+0x56>
 80159d0:	2900      	cmp	r1, #0
 80159d2:	d0d3      	beq.n	801597c <rcl_validate_topic_name+0xcc>
 80159d4:	2306      	movs	r3, #6
 80159d6:	6033      	str	r3, [r6, #0]
 80159d8:	2f00      	cmp	r7, #0
 80159da:	d1b7      	bne.n	801594c <rcl_validate_topic_name+0x9c>
 80159dc:	e7bd      	b.n	801595a <rcl_validate_topic_name+0xaa>
 80159de:	2309      	movs	r3, #9
 80159e0:	6033      	str	r3, [r6, #0]
 80159e2:	2f00      	cmp	r7, #0
 80159e4:	d1b2      	bne.n	801594c <rcl_validate_topic_name+0x9c>
 80159e6:	e7b8      	b.n	801595a <rcl_validate_topic_name+0xaa>
 80159e8:	2d00      	cmp	r5, #0
 80159ea:	d0c7      	beq.n	801597c <rcl_validate_topic_name+0xcc>
 80159ec:	2308      	movs	r3, #8
 80159ee:	6033      	str	r3, [r6, #0]
 80159f0:	2f00      	cmp	r7, #0
 80159f2:	d1ab      	bne.n	801594c <rcl_validate_topic_name+0x9c>
 80159f4:	e7b1      	b.n	801595a <rcl_validate_topic_name+0xaa>
 80159f6:	2d00      	cmp	r5, #0
 80159f8:	d1f8      	bne.n	80159ec <rcl_validate_topic_name+0x13c>
 80159fa:	460b      	mov	r3, r1
 80159fc:	2501      	movs	r5, #1
 80159fe:	e7bd      	b.n	801597c <rcl_validate_topic_name+0xcc>
 8015a00:	2500      	movs	r5, #0
 8015a02:	e7bb      	b.n	801597c <rcl_validate_topic_name+0xcc>
 8015a04:	2300      	movs	r3, #0
 8015a06:	4618      	mov	r0, r3
 8015a08:	6033      	str	r3, [r6, #0]
 8015a0a:	e77c      	b.n	8015906 <rcl_validate_topic_name+0x56>
 8015a0c:	2205      	movs	r2, #5
 8015a0e:	6032      	str	r2, [r6, #0]
 8015a10:	2f00      	cmp	r7, #0
 8015a12:	d1d6      	bne.n	80159c2 <rcl_validate_topic_name+0x112>
 8015a14:	e7a1      	b.n	801595a <rcl_validate_topic_name+0xaa>
 8015a16:	2d00      	cmp	r5, #0
 8015a18:	bf14      	ite	ne
 8015a1a:	2308      	movne	r3, #8
 8015a1c:	2303      	moveq	r3, #3
 8015a1e:	6033      	str	r3, [r6, #0]
 8015a20:	2f00      	cmp	r7, #0
 8015a22:	d193      	bne.n	801594c <rcl_validate_topic_name+0x9c>
 8015a24:	e799      	b.n	801595a <rcl_validate_topic_name+0xaa>
 8015a26:	2307      	movs	r3, #7
 8015a28:	6033      	str	r3, [r6, #0]
 8015a2a:	2f00      	cmp	r7, #0
 8015a2c:	d095      	beq.n	801595a <rcl_validate_topic_name+0xaa>
 8015a2e:	2301      	movs	r3, #1
 8015a30:	e7c7      	b.n	80159c2 <rcl_validate_topic_name+0x112>
 8015a32:	bf00      	nop
 8015a34:	080182b3 	.word	0x080182b3

08015a38 <on_status>:
 8015a38:	b082      	sub	sp, #8
 8015a3a:	b002      	add	sp, #8
 8015a3c:	4770      	bx	lr
 8015a3e:	bf00      	nop

08015a40 <on_topic>:
 8015a40:	4a23      	ldr	r2, [pc, #140]	@ (8015ad0 <on_topic+0x90>)
 8015a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a46:	6812      	ldr	r2, [r2, #0]
 8015a48:	b094      	sub	sp, #80	@ 0x50
 8015a4a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8015a4c:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8015a50:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015a52:	9312      	str	r3, [sp, #72]	@ 0x48
 8015a54:	b3c2      	cbz	r2, 8015ac8 <on_topic+0x88>
 8015a56:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8015a5a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8015a5e:	e001      	b.n	8015a64 <on_topic+0x24>
 8015a60:	6852      	ldr	r2, [r2, #4]
 8015a62:	b38a      	cbz	r2, 8015ac8 <on_topic+0x88>
 8015a64:	6894      	ldr	r4, [r2, #8]
 8015a66:	8aa3      	ldrh	r3, [r4, #20]
 8015a68:	428b      	cmp	r3, r1
 8015a6a:	d1f9      	bne.n	8015a60 <on_topic+0x20>
 8015a6c:	7da3      	ldrb	r3, [r4, #22]
 8015a6e:	4283      	cmp	r3, r0
 8015a70:	d1f6      	bne.n	8015a60 <on_topic+0x20>
 8015a72:	2248      	movs	r2, #72	@ 0x48
 8015a74:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8015a78:	4668      	mov	r0, sp
 8015a7a:	f000 ff3a 	bl	80168f2 <memcpy>
 8015a7e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8015a82:	4620      	mov	r0, r4
 8015a84:	cb0c      	ldmia	r3, {r2, r3}
 8015a86:	f7f7 f973 	bl	800cd70 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015a8a:	4607      	mov	r7, r0
 8015a8c:	b1e0      	cbz	r0, 8015ac8 <on_topic+0x88>
 8015a8e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8015a92:	462a      	mov	r2, r5
 8015a94:	4630      	mov	r0, r6
 8015a96:	f108 0110 	add.w	r1, r8, #16
 8015a9a:	f7f7 ff2d 	bl	800d8f8 <ucdr_deserialize_array_uint8_t>
 8015a9e:	b930      	cbnz	r0, 8015aae <on_topic+0x6e>
 8015aa0:	4639      	mov	r1, r7
 8015aa2:	480c      	ldr	r0, [pc, #48]	@ (8015ad4 <on_topic+0x94>)
 8015aa4:	b014      	add	sp, #80	@ 0x50
 8015aa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015aaa:	f7fd bb3f 	b.w	801312c <put_memory>
 8015aae:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8015ab2:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 8015ab6:	f7f6 ff6b 	bl	800c990 <rmw_uros_epoch_nanos>
 8015aba:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8015abe:	2305      	movs	r3, #5
 8015ac0:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015ac4:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8015ac8:	b014      	add	sp, #80	@ 0x50
 8015aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ace:	bf00      	nop
 8015ad0:	2000e9f4 	.word	0x2000e9f4
 8015ad4:	2000e9e4 	.word	0x2000e9e4

08015ad8 <on_request>:
 8015ad8:	4824      	ldr	r0, [pc, #144]	@ (8015b6c <on_request+0x94>)
 8015ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ade:	6800      	ldr	r0, [r0, #0]
 8015ae0:	b094      	sub	sp, #80	@ 0x50
 8015ae2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8015ae4:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 8015ae8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015aea:	2800      	cmp	r0, #0
 8015aec:	d03b      	beq.n	8015b66 <on_request+0x8e>
 8015aee:	461d      	mov	r5, r3
 8015af0:	e001      	b.n	8015af6 <on_request+0x1e>
 8015af2:	6840      	ldr	r0, [r0, #4]
 8015af4:	b3b8      	cbz	r0, 8015b66 <on_request+0x8e>
 8015af6:	6884      	ldr	r4, [r0, #8]
 8015af8:	8b21      	ldrh	r1, [r4, #24]
 8015afa:	4291      	cmp	r1, r2
 8015afc:	d1f9      	bne.n	8015af2 <on_request+0x1a>
 8015afe:	2248      	movs	r2, #72	@ 0x48
 8015b00:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8015b04:	4668      	mov	r0, sp
 8015b06:	f000 fef4 	bl	80168f2 <memcpy>
 8015b0a:	f104 0320 	add.w	r3, r4, #32
 8015b0e:	4620      	mov	r0, r4
 8015b10:	cb0c      	ldmia	r3, {r2, r3}
 8015b12:	f7f7 f92d 	bl	800cd70 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015b16:	4680      	mov	r8, r0
 8015b18:	b328      	cbz	r0, 8015b66 <on_request+0x8e>
 8015b1a:	4630      	mov	r0, r6
 8015b1c:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8015b20:	463a      	mov	r2, r7
 8015b22:	f106 0110 	add.w	r1, r6, #16
 8015b26:	f7f7 fee7 	bl	800d8f8 <ucdr_deserialize_array_uint8_t>
 8015b2a:	b930      	cbnz	r0, 8015b3a <on_request+0x62>
 8015b2c:	4641      	mov	r1, r8
 8015b2e:	4810      	ldr	r0, [pc, #64]	@ (8015b70 <on_request+0x98>)
 8015b30:	b014      	add	sp, #80	@ 0x50
 8015b32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015b36:	f7fd baf9 	b.w	801312c <put_memory>
 8015b3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015b3c:	f606 0c28 	addw	ip, r6, #2088	@ 0x828
 8015b40:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 8015b44:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 8015b48:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015b4c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015b50:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015b54:	f7f6 ff1c 	bl	800c990 <rmw_uros_epoch_nanos>
 8015b58:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 8015b5c:	2303      	movs	r3, #3
 8015b5e:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015b62:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 8015b66:	b014      	add	sp, #80	@ 0x50
 8015b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b6c:	2000e9c4 	.word	0x2000e9c4
 8015b70:	2000e9e4 	.word	0x2000e9e4

08015b74 <on_reply>:
 8015b74:	4822      	ldr	r0, [pc, #136]	@ (8015c00 <on_reply+0x8c>)
 8015b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b7a:	6800      	ldr	r0, [r0, #0]
 8015b7c:	b094      	sub	sp, #80	@ 0x50
 8015b7e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8015b80:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 8015b84:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015b86:	b3b8      	cbz	r0, 8015bf8 <on_reply+0x84>
 8015b88:	461d      	mov	r5, r3
 8015b8a:	e001      	b.n	8015b90 <on_reply+0x1c>
 8015b8c:	6840      	ldr	r0, [r0, #4]
 8015b8e:	b398      	cbz	r0, 8015bf8 <on_reply+0x84>
 8015b90:	6884      	ldr	r4, [r0, #8]
 8015b92:	8b21      	ldrh	r1, [r4, #24]
 8015b94:	4291      	cmp	r1, r2
 8015b96:	d1f9      	bne.n	8015b8c <on_reply+0x18>
 8015b98:	2248      	movs	r2, #72	@ 0x48
 8015b9a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8015b9e:	4668      	mov	r0, sp
 8015ba0:	f000 fea7 	bl	80168f2 <memcpy>
 8015ba4:	f104 0320 	add.w	r3, r4, #32
 8015ba8:	4620      	mov	r0, r4
 8015baa:	cb0c      	ldmia	r3, {r2, r3}
 8015bac:	f7f7 f8e0 	bl	800cd70 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015bb0:	4680      	mov	r8, r0
 8015bb2:	b308      	cbz	r0, 8015bf8 <on_reply+0x84>
 8015bb4:	4630      	mov	r0, r6
 8015bb6:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8015bba:	463a      	mov	r2, r7
 8015bbc:	f106 0110 	add.w	r1, r6, #16
 8015bc0:	f7f7 fe9a 	bl	800d8f8 <ucdr_deserialize_array_uint8_t>
 8015bc4:	b930      	cbnz	r0, 8015bd4 <on_reply+0x60>
 8015bc6:	4641      	mov	r1, r8
 8015bc8:	480e      	ldr	r0, [pc, #56]	@ (8015c04 <on_reply+0x90>)
 8015bca:	b014      	add	sp, #80	@ 0x50
 8015bcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015bd0:	f7fd baac 	b.w	801312c <put_memory>
 8015bd4:	2200      	movs	r2, #0
 8015bd6:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 8015bda:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 8015bde:	f8c6 282c 	str.w	r2, [r6, #2092]	@ 0x82c
 8015be2:	f8c6 5828 	str.w	r5, [r6, #2088]	@ 0x828
 8015be6:	f7f6 fed3 	bl	800c990 <rmw_uros_epoch_nanos>
 8015bea:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 8015bee:	2304      	movs	r3, #4
 8015bf0:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015bf4:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 8015bf8:	b014      	add	sp, #80	@ 0x50
 8015bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015bfe:	bf00      	nop
 8015c00:	2000a0d8 	.word	0x2000a0d8
 8015c04:	2000e9e4 	.word	0x2000e9e4

08015c08 <rmw_destroy_client>:
 8015c08:	b570      	push	{r4, r5, r6, lr}
 8015c0a:	b128      	cbz	r0, 8015c18 <rmw_destroy_client+0x10>
 8015c0c:	4604      	mov	r4, r0
 8015c0e:	6800      	ldr	r0, [r0, #0]
 8015c10:	460d      	mov	r5, r1
 8015c12:	f7f7 f981 	bl	800cf18 <is_uxrce_rmw_identifier_valid>
 8015c16:	b910      	cbnz	r0, 8015c1e <rmw_destroy_client+0x16>
 8015c18:	2401      	movs	r4, #1
 8015c1a:	4620      	mov	r0, r4
 8015c1c:	bd70      	pop	{r4, r5, r6, pc}
 8015c1e:	6863      	ldr	r3, [r4, #4]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d0f9      	beq.n	8015c18 <rmw_destroy_client+0x10>
 8015c24:	2d00      	cmp	r5, #0
 8015c26:	d0f7      	beq.n	8015c18 <rmw_destroy_client+0x10>
 8015c28:	6828      	ldr	r0, [r5, #0]
 8015c2a:	f7f7 f975 	bl	800cf18 <is_uxrce_rmw_identifier_valid>
 8015c2e:	2800      	cmp	r0, #0
 8015c30:	d0f2      	beq.n	8015c18 <rmw_destroy_client+0x10>
 8015c32:	686e      	ldr	r6, [r5, #4]
 8015c34:	2e00      	cmp	r6, #0
 8015c36:	d0ef      	beq.n	8015c18 <rmw_destroy_client+0x10>
 8015c38:	6864      	ldr	r4, [r4, #4]
 8015c3a:	6932      	ldr	r2, [r6, #16]
 8015c3c:	6920      	ldr	r0, [r4, #16]
 8015c3e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015c42:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015c46:	6819      	ldr	r1, [r3, #0]
 8015c48:	f7fe fe5e 	bl	8014908 <uxr_buffer_cancel_data>
 8015c4c:	4602      	mov	r2, r0
 8015c4e:	6920      	ldr	r0, [r4, #16]
 8015c50:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015c54:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015c58:	f7f7 f8e4 	bl	800ce24 <run_xrce_session>
 8015c5c:	6920      	ldr	r0, [r4, #16]
 8015c5e:	6932      	ldr	r2, [r6, #16]
 8015c60:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015c64:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015c68:	6819      	ldr	r1, [r3, #0]
 8015c6a:	f7f9 fb31 	bl	800f2d0 <uxr_buffer_delete_entity>
 8015c6e:	4602      	mov	r2, r0
 8015c70:	6920      	ldr	r0, [r4, #16]
 8015c72:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015c76:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015c7a:	f7f7 f8d3 	bl	800ce24 <run_xrce_session>
 8015c7e:	4603      	mov	r3, r0
 8015c80:	4628      	mov	r0, r5
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	bf14      	ite	ne
 8015c86:	2400      	movne	r4, #0
 8015c88:	2402      	moveq	r4, #2
 8015c8a:	f7f7 f84f 	bl	800cd2c <rmw_uxrce_fini_client_memory>
 8015c8e:	e7c4      	b.n	8015c1a <rmw_destroy_client+0x12>

08015c90 <rmw_create_guard_condition>:
 8015c90:	b538      	push	{r3, r4, r5, lr}
 8015c92:	4605      	mov	r5, r0
 8015c94:	4808      	ldr	r0, [pc, #32]	@ (8015cb8 <rmw_create_guard_condition+0x28>)
 8015c96:	f7fd fa39 	bl	801310c <get_memory>
 8015c9a:	4603      	mov	r3, r0
 8015c9c:	b148      	cbz	r0, 8015cb2 <rmw_create_guard_condition+0x22>
 8015c9e:	6884      	ldr	r4, [r0, #8]
 8015ca0:	2300      	movs	r3, #0
 8015ca2:	61e5      	str	r5, [r4, #28]
 8015ca4:	7423      	strb	r3, [r4, #16]
 8015ca6:	f7fd fa55 	bl	8013154 <rmw_get_implementation_identifier>
 8015caa:	f104 0314 	add.w	r3, r4, #20
 8015cae:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8015cb2:	4618      	mov	r0, r3
 8015cb4:	bd38      	pop	{r3, r4, r5, pc}
 8015cb6:	bf00      	nop
 8015cb8:	2000e984 	.word	0x2000e984

08015cbc <rmw_destroy_guard_condition>:
 8015cbc:	b508      	push	{r3, lr}
 8015cbe:	4b08      	ldr	r3, [pc, #32]	@ (8015ce0 <rmw_destroy_guard_condition+0x24>)
 8015cc0:	6819      	ldr	r1, [r3, #0]
 8015cc2:	b911      	cbnz	r1, 8015cca <rmw_destroy_guard_condition+0xe>
 8015cc4:	e00a      	b.n	8015cdc <rmw_destroy_guard_condition+0x20>
 8015cc6:	6849      	ldr	r1, [r1, #4]
 8015cc8:	b141      	cbz	r1, 8015cdc <rmw_destroy_guard_condition+0x20>
 8015cca:	688b      	ldr	r3, [r1, #8]
 8015ccc:	3314      	adds	r3, #20
 8015cce:	4298      	cmp	r0, r3
 8015cd0:	d1f9      	bne.n	8015cc6 <rmw_destroy_guard_condition+0xa>
 8015cd2:	4803      	ldr	r0, [pc, #12]	@ (8015ce0 <rmw_destroy_guard_condition+0x24>)
 8015cd4:	f7fd fa2a 	bl	801312c <put_memory>
 8015cd8:	2000      	movs	r0, #0
 8015cda:	bd08      	pop	{r3, pc}
 8015cdc:	2001      	movs	r0, #1
 8015cde:	bd08      	pop	{r3, pc}
 8015ce0:	2000e984 	.word	0x2000e984

08015ce4 <rosidl_runtime_c__String__init>:
 8015ce4:	b510      	push	{r4, lr}
 8015ce6:	4604      	mov	r4, r0
 8015ce8:	b086      	sub	sp, #24
 8015cea:	b170      	cbz	r0, 8015d0a <rosidl_runtime_c__String__init+0x26>
 8015cec:	a801      	add	r0, sp, #4
 8015cee:	f7f6 fc29 	bl	800c544 <rcutils_get_default_allocator>
 8015cf2:	9b01      	ldr	r3, [sp, #4]
 8015cf4:	9905      	ldr	r1, [sp, #20]
 8015cf6:	2001      	movs	r0, #1
 8015cf8:	4798      	blx	r3
 8015cfa:	6020      	str	r0, [r4, #0]
 8015cfc:	b128      	cbz	r0, 8015d0a <rosidl_runtime_c__String__init+0x26>
 8015cfe:	2100      	movs	r1, #0
 8015d00:	2201      	movs	r2, #1
 8015d02:	7001      	strb	r1, [r0, #0]
 8015d04:	4610      	mov	r0, r2
 8015d06:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8015d0a:	b006      	add	sp, #24
 8015d0c:	bd10      	pop	{r4, pc}
 8015d0e:	bf00      	nop

08015d10 <rosidl_runtime_c__String__fini>:
 8015d10:	b320      	cbz	r0, 8015d5c <rosidl_runtime_c__String__fini+0x4c>
 8015d12:	6803      	ldr	r3, [r0, #0]
 8015d14:	b510      	push	{r4, lr}
 8015d16:	4604      	mov	r4, r0
 8015d18:	b086      	sub	sp, #24
 8015d1a:	b173      	cbz	r3, 8015d3a <rosidl_runtime_c__String__fini+0x2a>
 8015d1c:	6883      	ldr	r3, [r0, #8]
 8015d1e:	b1f3      	cbz	r3, 8015d5e <rosidl_runtime_c__String__fini+0x4e>
 8015d20:	a801      	add	r0, sp, #4
 8015d22:	f7f6 fc0f 	bl	800c544 <rcutils_get_default_allocator>
 8015d26:	9b02      	ldr	r3, [sp, #8]
 8015d28:	9905      	ldr	r1, [sp, #20]
 8015d2a:	6820      	ldr	r0, [r4, #0]
 8015d2c:	4798      	blx	r3
 8015d2e:	2300      	movs	r3, #0
 8015d30:	e9c4 3300 	strd	r3, r3, [r4]
 8015d34:	60a3      	str	r3, [r4, #8]
 8015d36:	b006      	add	sp, #24
 8015d38:	bd10      	pop	{r4, pc}
 8015d3a:	6843      	ldr	r3, [r0, #4]
 8015d3c:	b9db      	cbnz	r3, 8015d76 <rosidl_runtime_c__String__fini+0x66>
 8015d3e:	6883      	ldr	r3, [r0, #8]
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d0f8      	beq.n	8015d36 <rosidl_runtime_c__String__fini+0x26>
 8015d44:	4b12      	ldr	r3, [pc, #72]	@ (8015d90 <rosidl_runtime_c__String__fini+0x80>)
 8015d46:	2251      	movs	r2, #81	@ 0x51
 8015d48:	2101      	movs	r1, #1
 8015d4a:	4812      	ldr	r0, [pc, #72]	@ (8015d94 <rosidl_runtime_c__String__fini+0x84>)
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	68db      	ldr	r3, [r3, #12]
 8015d50:	f000 fb82 	bl	8016458 <fwrite>
 8015d54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015d58:	f000 f83e 	bl	8015dd8 <exit>
 8015d5c:	4770      	bx	lr
 8015d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8015d90 <rosidl_runtime_c__String__fini+0x80>)
 8015d60:	224c      	movs	r2, #76	@ 0x4c
 8015d62:	2101      	movs	r1, #1
 8015d64:	480c      	ldr	r0, [pc, #48]	@ (8015d98 <rosidl_runtime_c__String__fini+0x88>)
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	68db      	ldr	r3, [r3, #12]
 8015d6a:	f000 fb75 	bl	8016458 <fwrite>
 8015d6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015d72:	f000 f831 	bl	8015dd8 <exit>
 8015d76:	4b06      	ldr	r3, [pc, #24]	@ (8015d90 <rosidl_runtime_c__String__fini+0x80>)
 8015d78:	224e      	movs	r2, #78	@ 0x4e
 8015d7a:	2101      	movs	r1, #1
 8015d7c:	4807      	ldr	r0, [pc, #28]	@ (8015d9c <rosidl_runtime_c__String__fini+0x8c>)
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	68db      	ldr	r3, [r3, #12]
 8015d82:	f000 fb69 	bl	8016458 <fwrite>
 8015d86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015d8a:	f000 f825 	bl	8015dd8 <exit>
 8015d8e:	bf00      	nop
 8015d90:	20000598 	.word	0x20000598
 8015d94:	08017e7c 	.word	0x08017e7c
 8015d98:	08017ddc 	.word	0x08017ddc
 8015d9c:	08017e2c 	.word	0x08017e2c

08015da0 <calloc>:
 8015da0:	4b02      	ldr	r3, [pc, #8]	@ (8015dac <calloc+0xc>)
 8015da2:	460a      	mov	r2, r1
 8015da4:	4601      	mov	r1, r0
 8015da6:	6818      	ldr	r0, [r3, #0]
 8015da8:	f000 b802 	b.w	8015db0 <_calloc_r>
 8015dac:	20000598 	.word	0x20000598

08015db0 <_calloc_r>:
 8015db0:	b570      	push	{r4, r5, r6, lr}
 8015db2:	fba1 5402 	umull	r5, r4, r1, r2
 8015db6:	b934      	cbnz	r4, 8015dc6 <_calloc_r+0x16>
 8015db8:	4629      	mov	r1, r5
 8015dba:	f000 f899 	bl	8015ef0 <_malloc_r>
 8015dbe:	4606      	mov	r6, r0
 8015dc0:	b928      	cbnz	r0, 8015dce <_calloc_r+0x1e>
 8015dc2:	4630      	mov	r0, r6
 8015dc4:	bd70      	pop	{r4, r5, r6, pc}
 8015dc6:	220c      	movs	r2, #12
 8015dc8:	6002      	str	r2, [r0, #0]
 8015dca:	2600      	movs	r6, #0
 8015dcc:	e7f9      	b.n	8015dc2 <_calloc_r+0x12>
 8015dce:	462a      	mov	r2, r5
 8015dd0:	4621      	mov	r1, r4
 8015dd2:	f000 fcc5 	bl	8016760 <memset>
 8015dd6:	e7f4      	b.n	8015dc2 <_calloc_r+0x12>

08015dd8 <exit>:
 8015dd8:	b508      	push	{r3, lr}
 8015dda:	4b06      	ldr	r3, [pc, #24]	@ (8015df4 <exit+0x1c>)
 8015ddc:	4604      	mov	r4, r0
 8015dde:	b113      	cbz	r3, 8015de6 <exit+0xe>
 8015de0:	2100      	movs	r1, #0
 8015de2:	f3af 8000 	nop.w
 8015de6:	4b04      	ldr	r3, [pc, #16]	@ (8015df8 <exit+0x20>)
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	b103      	cbz	r3, 8015dee <exit+0x16>
 8015dec:	4798      	blx	r3
 8015dee:	4620      	mov	r0, r4
 8015df0:	f7ed f8a4 	bl	8002f3c <_exit>
 8015df4:	00000000 	.word	0x00000000
 8015df8:	2000ec78 	.word	0x2000ec78

08015dfc <getenv>:
 8015dfc:	b507      	push	{r0, r1, r2, lr}
 8015dfe:	4b04      	ldr	r3, [pc, #16]	@ (8015e10 <getenv+0x14>)
 8015e00:	4601      	mov	r1, r0
 8015e02:	aa01      	add	r2, sp, #4
 8015e04:	6818      	ldr	r0, [r3, #0]
 8015e06:	f000 f805 	bl	8015e14 <_findenv_r>
 8015e0a:	b003      	add	sp, #12
 8015e0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8015e10:	20000598 	.word	0x20000598

08015e14 <_findenv_r>:
 8015e14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e18:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8015e88 <_findenv_r+0x74>
 8015e1c:	4606      	mov	r6, r0
 8015e1e:	4689      	mov	r9, r1
 8015e20:	4617      	mov	r7, r2
 8015e22:	f000 fd93 	bl	801694c <__env_lock>
 8015e26:	f8da 4000 	ldr.w	r4, [sl]
 8015e2a:	b134      	cbz	r4, 8015e3a <_findenv_r+0x26>
 8015e2c:	464b      	mov	r3, r9
 8015e2e:	4698      	mov	r8, r3
 8015e30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015e34:	b13a      	cbz	r2, 8015e46 <_findenv_r+0x32>
 8015e36:	2a3d      	cmp	r2, #61	@ 0x3d
 8015e38:	d1f9      	bne.n	8015e2e <_findenv_r+0x1a>
 8015e3a:	4630      	mov	r0, r6
 8015e3c:	f000 fd8c 	bl	8016958 <__env_unlock>
 8015e40:	2000      	movs	r0, #0
 8015e42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e46:	eba8 0809 	sub.w	r8, r8, r9
 8015e4a:	46a3      	mov	fp, r4
 8015e4c:	f854 0b04 	ldr.w	r0, [r4], #4
 8015e50:	2800      	cmp	r0, #0
 8015e52:	d0f2      	beq.n	8015e3a <_findenv_r+0x26>
 8015e54:	4642      	mov	r2, r8
 8015e56:	4649      	mov	r1, r9
 8015e58:	f000 fc97 	bl	801678a <strncmp>
 8015e5c:	2800      	cmp	r0, #0
 8015e5e:	d1f4      	bne.n	8015e4a <_findenv_r+0x36>
 8015e60:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8015e64:	eb03 0508 	add.w	r5, r3, r8
 8015e68:	f813 3008 	ldrb.w	r3, [r3, r8]
 8015e6c:	2b3d      	cmp	r3, #61	@ 0x3d
 8015e6e:	d1ec      	bne.n	8015e4a <_findenv_r+0x36>
 8015e70:	f8da 3000 	ldr.w	r3, [sl]
 8015e74:	ebab 0303 	sub.w	r3, fp, r3
 8015e78:	109b      	asrs	r3, r3, #2
 8015e7a:	4630      	mov	r0, r6
 8015e7c:	603b      	str	r3, [r7, #0]
 8015e7e:	f000 fd6b 	bl	8016958 <__env_unlock>
 8015e82:	1c68      	adds	r0, r5, #1
 8015e84:	e7dd      	b.n	8015e42 <_findenv_r+0x2e>
 8015e86:	bf00      	nop
 8015e88:	2000000c 	.word	0x2000000c

08015e8c <malloc>:
 8015e8c:	4b02      	ldr	r3, [pc, #8]	@ (8015e98 <malloc+0xc>)
 8015e8e:	4601      	mov	r1, r0
 8015e90:	6818      	ldr	r0, [r3, #0]
 8015e92:	f000 b82d 	b.w	8015ef0 <_malloc_r>
 8015e96:	bf00      	nop
 8015e98:	20000598 	.word	0x20000598

08015e9c <free>:
 8015e9c:	4b02      	ldr	r3, [pc, #8]	@ (8015ea8 <free+0xc>)
 8015e9e:	4601      	mov	r1, r0
 8015ea0:	6818      	ldr	r0, [r3, #0]
 8015ea2:	f000 bd5f 	b.w	8016964 <_free_r>
 8015ea6:	bf00      	nop
 8015ea8:	20000598 	.word	0x20000598

08015eac <sbrk_aligned>:
 8015eac:	b570      	push	{r4, r5, r6, lr}
 8015eae:	4e0f      	ldr	r6, [pc, #60]	@ (8015eec <sbrk_aligned+0x40>)
 8015eb0:	460c      	mov	r4, r1
 8015eb2:	6831      	ldr	r1, [r6, #0]
 8015eb4:	4605      	mov	r5, r0
 8015eb6:	b911      	cbnz	r1, 8015ebe <sbrk_aligned+0x12>
 8015eb8:	f000 fcc4 	bl	8016844 <_sbrk_r>
 8015ebc:	6030      	str	r0, [r6, #0]
 8015ebe:	4621      	mov	r1, r4
 8015ec0:	4628      	mov	r0, r5
 8015ec2:	f000 fcbf 	bl	8016844 <_sbrk_r>
 8015ec6:	1c43      	adds	r3, r0, #1
 8015ec8:	d103      	bne.n	8015ed2 <sbrk_aligned+0x26>
 8015eca:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8015ece:	4620      	mov	r0, r4
 8015ed0:	bd70      	pop	{r4, r5, r6, pc}
 8015ed2:	1cc4      	adds	r4, r0, #3
 8015ed4:	f024 0403 	bic.w	r4, r4, #3
 8015ed8:	42a0      	cmp	r0, r4
 8015eda:	d0f8      	beq.n	8015ece <sbrk_aligned+0x22>
 8015edc:	1a21      	subs	r1, r4, r0
 8015ede:	4628      	mov	r0, r5
 8015ee0:	f000 fcb0 	bl	8016844 <_sbrk_r>
 8015ee4:	3001      	adds	r0, #1
 8015ee6:	d1f2      	bne.n	8015ece <sbrk_aligned+0x22>
 8015ee8:	e7ef      	b.n	8015eca <sbrk_aligned+0x1e>
 8015eea:	bf00      	nop
 8015eec:	2000eb38 	.word	0x2000eb38

08015ef0 <_malloc_r>:
 8015ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ef4:	1ccd      	adds	r5, r1, #3
 8015ef6:	f025 0503 	bic.w	r5, r5, #3
 8015efa:	3508      	adds	r5, #8
 8015efc:	2d0c      	cmp	r5, #12
 8015efe:	bf38      	it	cc
 8015f00:	250c      	movcc	r5, #12
 8015f02:	2d00      	cmp	r5, #0
 8015f04:	4606      	mov	r6, r0
 8015f06:	db01      	blt.n	8015f0c <_malloc_r+0x1c>
 8015f08:	42a9      	cmp	r1, r5
 8015f0a:	d904      	bls.n	8015f16 <_malloc_r+0x26>
 8015f0c:	230c      	movs	r3, #12
 8015f0e:	6033      	str	r3, [r6, #0]
 8015f10:	2000      	movs	r0, #0
 8015f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015fec <_malloc_r+0xfc>
 8015f1a:	f000 f869 	bl	8015ff0 <__malloc_lock>
 8015f1e:	f8d8 3000 	ldr.w	r3, [r8]
 8015f22:	461c      	mov	r4, r3
 8015f24:	bb44      	cbnz	r4, 8015f78 <_malloc_r+0x88>
 8015f26:	4629      	mov	r1, r5
 8015f28:	4630      	mov	r0, r6
 8015f2a:	f7ff ffbf 	bl	8015eac <sbrk_aligned>
 8015f2e:	1c43      	adds	r3, r0, #1
 8015f30:	4604      	mov	r4, r0
 8015f32:	d158      	bne.n	8015fe6 <_malloc_r+0xf6>
 8015f34:	f8d8 4000 	ldr.w	r4, [r8]
 8015f38:	4627      	mov	r7, r4
 8015f3a:	2f00      	cmp	r7, #0
 8015f3c:	d143      	bne.n	8015fc6 <_malloc_r+0xd6>
 8015f3e:	2c00      	cmp	r4, #0
 8015f40:	d04b      	beq.n	8015fda <_malloc_r+0xea>
 8015f42:	6823      	ldr	r3, [r4, #0]
 8015f44:	4639      	mov	r1, r7
 8015f46:	4630      	mov	r0, r6
 8015f48:	eb04 0903 	add.w	r9, r4, r3
 8015f4c:	f000 fc7a 	bl	8016844 <_sbrk_r>
 8015f50:	4581      	cmp	r9, r0
 8015f52:	d142      	bne.n	8015fda <_malloc_r+0xea>
 8015f54:	6821      	ldr	r1, [r4, #0]
 8015f56:	1a6d      	subs	r5, r5, r1
 8015f58:	4629      	mov	r1, r5
 8015f5a:	4630      	mov	r0, r6
 8015f5c:	f7ff ffa6 	bl	8015eac <sbrk_aligned>
 8015f60:	3001      	adds	r0, #1
 8015f62:	d03a      	beq.n	8015fda <_malloc_r+0xea>
 8015f64:	6823      	ldr	r3, [r4, #0]
 8015f66:	442b      	add	r3, r5
 8015f68:	6023      	str	r3, [r4, #0]
 8015f6a:	f8d8 3000 	ldr.w	r3, [r8]
 8015f6e:	685a      	ldr	r2, [r3, #4]
 8015f70:	bb62      	cbnz	r2, 8015fcc <_malloc_r+0xdc>
 8015f72:	f8c8 7000 	str.w	r7, [r8]
 8015f76:	e00f      	b.n	8015f98 <_malloc_r+0xa8>
 8015f78:	6822      	ldr	r2, [r4, #0]
 8015f7a:	1b52      	subs	r2, r2, r5
 8015f7c:	d420      	bmi.n	8015fc0 <_malloc_r+0xd0>
 8015f7e:	2a0b      	cmp	r2, #11
 8015f80:	d917      	bls.n	8015fb2 <_malloc_r+0xc2>
 8015f82:	1961      	adds	r1, r4, r5
 8015f84:	42a3      	cmp	r3, r4
 8015f86:	6025      	str	r5, [r4, #0]
 8015f88:	bf18      	it	ne
 8015f8a:	6059      	strne	r1, [r3, #4]
 8015f8c:	6863      	ldr	r3, [r4, #4]
 8015f8e:	bf08      	it	eq
 8015f90:	f8c8 1000 	streq.w	r1, [r8]
 8015f94:	5162      	str	r2, [r4, r5]
 8015f96:	604b      	str	r3, [r1, #4]
 8015f98:	4630      	mov	r0, r6
 8015f9a:	f000 f82f 	bl	8015ffc <__malloc_unlock>
 8015f9e:	f104 000b 	add.w	r0, r4, #11
 8015fa2:	1d23      	adds	r3, r4, #4
 8015fa4:	f020 0007 	bic.w	r0, r0, #7
 8015fa8:	1ac2      	subs	r2, r0, r3
 8015faa:	bf1c      	itt	ne
 8015fac:	1a1b      	subne	r3, r3, r0
 8015fae:	50a3      	strne	r3, [r4, r2]
 8015fb0:	e7af      	b.n	8015f12 <_malloc_r+0x22>
 8015fb2:	6862      	ldr	r2, [r4, #4]
 8015fb4:	42a3      	cmp	r3, r4
 8015fb6:	bf0c      	ite	eq
 8015fb8:	f8c8 2000 	streq.w	r2, [r8]
 8015fbc:	605a      	strne	r2, [r3, #4]
 8015fbe:	e7eb      	b.n	8015f98 <_malloc_r+0xa8>
 8015fc0:	4623      	mov	r3, r4
 8015fc2:	6864      	ldr	r4, [r4, #4]
 8015fc4:	e7ae      	b.n	8015f24 <_malloc_r+0x34>
 8015fc6:	463c      	mov	r4, r7
 8015fc8:	687f      	ldr	r7, [r7, #4]
 8015fca:	e7b6      	b.n	8015f3a <_malloc_r+0x4a>
 8015fcc:	461a      	mov	r2, r3
 8015fce:	685b      	ldr	r3, [r3, #4]
 8015fd0:	42a3      	cmp	r3, r4
 8015fd2:	d1fb      	bne.n	8015fcc <_malloc_r+0xdc>
 8015fd4:	2300      	movs	r3, #0
 8015fd6:	6053      	str	r3, [r2, #4]
 8015fd8:	e7de      	b.n	8015f98 <_malloc_r+0xa8>
 8015fda:	230c      	movs	r3, #12
 8015fdc:	6033      	str	r3, [r6, #0]
 8015fde:	4630      	mov	r0, r6
 8015fe0:	f000 f80c 	bl	8015ffc <__malloc_unlock>
 8015fe4:	e794      	b.n	8015f10 <_malloc_r+0x20>
 8015fe6:	6005      	str	r5, [r0, #0]
 8015fe8:	e7d6      	b.n	8015f98 <_malloc_r+0xa8>
 8015fea:	bf00      	nop
 8015fec:	2000eb3c 	.word	0x2000eb3c

08015ff0 <__malloc_lock>:
 8015ff0:	4801      	ldr	r0, [pc, #4]	@ (8015ff8 <__malloc_lock+0x8>)
 8015ff2:	f000 bc74 	b.w	80168de <__retarget_lock_acquire_recursive>
 8015ff6:	bf00      	nop
 8015ff8:	2000ec81 	.word	0x2000ec81

08015ffc <__malloc_unlock>:
 8015ffc:	4801      	ldr	r0, [pc, #4]	@ (8016004 <__malloc_unlock+0x8>)
 8015ffe:	f000 bc6f 	b.w	80168e0 <__retarget_lock_release_recursive>
 8016002:	bf00      	nop
 8016004:	2000ec81 	.word	0x2000ec81

08016008 <srand>:
 8016008:	b538      	push	{r3, r4, r5, lr}
 801600a:	4b10      	ldr	r3, [pc, #64]	@ (801604c <srand+0x44>)
 801600c:	681d      	ldr	r5, [r3, #0]
 801600e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016010:	4604      	mov	r4, r0
 8016012:	b9b3      	cbnz	r3, 8016042 <srand+0x3a>
 8016014:	2018      	movs	r0, #24
 8016016:	f7ff ff39 	bl	8015e8c <malloc>
 801601a:	4602      	mov	r2, r0
 801601c:	6328      	str	r0, [r5, #48]	@ 0x30
 801601e:	b920      	cbnz	r0, 801602a <srand+0x22>
 8016020:	4b0b      	ldr	r3, [pc, #44]	@ (8016050 <srand+0x48>)
 8016022:	480c      	ldr	r0, [pc, #48]	@ (8016054 <srand+0x4c>)
 8016024:	2146      	movs	r1, #70	@ 0x46
 8016026:	f000 fc73 	bl	8016910 <__assert_func>
 801602a:	490b      	ldr	r1, [pc, #44]	@ (8016058 <srand+0x50>)
 801602c:	4b0b      	ldr	r3, [pc, #44]	@ (801605c <srand+0x54>)
 801602e:	e9c0 1300 	strd	r1, r3, [r0]
 8016032:	4b0b      	ldr	r3, [pc, #44]	@ (8016060 <srand+0x58>)
 8016034:	6083      	str	r3, [r0, #8]
 8016036:	230b      	movs	r3, #11
 8016038:	8183      	strh	r3, [r0, #12]
 801603a:	2100      	movs	r1, #0
 801603c:	2001      	movs	r0, #1
 801603e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016042:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016044:	2200      	movs	r2, #0
 8016046:	611c      	str	r4, [r3, #16]
 8016048:	615a      	str	r2, [r3, #20]
 801604a:	bd38      	pop	{r3, r4, r5, pc}
 801604c:	20000598 	.word	0x20000598
 8016050:	080181d4 	.word	0x080181d4
 8016054:	080181eb 	.word	0x080181eb
 8016058:	abcd330e 	.word	0xabcd330e
 801605c:	e66d1234 	.word	0xe66d1234
 8016060:	0005deec 	.word	0x0005deec

08016064 <rand>:
 8016064:	4b16      	ldr	r3, [pc, #88]	@ (80160c0 <rand+0x5c>)
 8016066:	b510      	push	{r4, lr}
 8016068:	681c      	ldr	r4, [r3, #0]
 801606a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801606c:	b9b3      	cbnz	r3, 801609c <rand+0x38>
 801606e:	2018      	movs	r0, #24
 8016070:	f7ff ff0c 	bl	8015e8c <malloc>
 8016074:	4602      	mov	r2, r0
 8016076:	6320      	str	r0, [r4, #48]	@ 0x30
 8016078:	b920      	cbnz	r0, 8016084 <rand+0x20>
 801607a:	4b12      	ldr	r3, [pc, #72]	@ (80160c4 <rand+0x60>)
 801607c:	4812      	ldr	r0, [pc, #72]	@ (80160c8 <rand+0x64>)
 801607e:	2152      	movs	r1, #82	@ 0x52
 8016080:	f000 fc46 	bl	8016910 <__assert_func>
 8016084:	4911      	ldr	r1, [pc, #68]	@ (80160cc <rand+0x68>)
 8016086:	4b12      	ldr	r3, [pc, #72]	@ (80160d0 <rand+0x6c>)
 8016088:	e9c0 1300 	strd	r1, r3, [r0]
 801608c:	4b11      	ldr	r3, [pc, #68]	@ (80160d4 <rand+0x70>)
 801608e:	6083      	str	r3, [r0, #8]
 8016090:	230b      	movs	r3, #11
 8016092:	8183      	strh	r3, [r0, #12]
 8016094:	2100      	movs	r1, #0
 8016096:	2001      	movs	r0, #1
 8016098:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801609c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801609e:	480e      	ldr	r0, [pc, #56]	@ (80160d8 <rand+0x74>)
 80160a0:	690b      	ldr	r3, [r1, #16]
 80160a2:	694c      	ldr	r4, [r1, #20]
 80160a4:	4a0d      	ldr	r2, [pc, #52]	@ (80160dc <rand+0x78>)
 80160a6:	4358      	muls	r0, r3
 80160a8:	fb02 0004 	mla	r0, r2, r4, r0
 80160ac:	fba3 3202 	umull	r3, r2, r3, r2
 80160b0:	3301      	adds	r3, #1
 80160b2:	eb40 0002 	adc.w	r0, r0, r2
 80160b6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80160ba:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80160be:	bd10      	pop	{r4, pc}
 80160c0:	20000598 	.word	0x20000598
 80160c4:	080181d4 	.word	0x080181d4
 80160c8:	080181eb 	.word	0x080181eb
 80160cc:	abcd330e 	.word	0xabcd330e
 80160d0:	e66d1234 	.word	0xe66d1234
 80160d4:	0005deec 	.word	0x0005deec
 80160d8:	5851f42d 	.word	0x5851f42d
 80160dc:	4c957f2d 	.word	0x4c957f2d

080160e0 <realloc>:
 80160e0:	4b02      	ldr	r3, [pc, #8]	@ (80160ec <realloc+0xc>)
 80160e2:	460a      	mov	r2, r1
 80160e4:	4601      	mov	r1, r0
 80160e6:	6818      	ldr	r0, [r3, #0]
 80160e8:	f000 b802 	b.w	80160f0 <_realloc_r>
 80160ec:	20000598 	.word	0x20000598

080160f0 <_realloc_r>:
 80160f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160f4:	4607      	mov	r7, r0
 80160f6:	4614      	mov	r4, r2
 80160f8:	460d      	mov	r5, r1
 80160fa:	b921      	cbnz	r1, 8016106 <_realloc_r+0x16>
 80160fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016100:	4611      	mov	r1, r2
 8016102:	f7ff bef5 	b.w	8015ef0 <_malloc_r>
 8016106:	b92a      	cbnz	r2, 8016114 <_realloc_r+0x24>
 8016108:	f000 fc2c 	bl	8016964 <_free_r>
 801610c:	4625      	mov	r5, r4
 801610e:	4628      	mov	r0, r5
 8016110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016114:	f000 fc70 	bl	80169f8 <_malloc_usable_size_r>
 8016118:	4284      	cmp	r4, r0
 801611a:	4606      	mov	r6, r0
 801611c:	d802      	bhi.n	8016124 <_realloc_r+0x34>
 801611e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016122:	d8f4      	bhi.n	801610e <_realloc_r+0x1e>
 8016124:	4621      	mov	r1, r4
 8016126:	4638      	mov	r0, r7
 8016128:	f7ff fee2 	bl	8015ef0 <_malloc_r>
 801612c:	4680      	mov	r8, r0
 801612e:	b908      	cbnz	r0, 8016134 <_realloc_r+0x44>
 8016130:	4645      	mov	r5, r8
 8016132:	e7ec      	b.n	801610e <_realloc_r+0x1e>
 8016134:	42b4      	cmp	r4, r6
 8016136:	4622      	mov	r2, r4
 8016138:	4629      	mov	r1, r5
 801613a:	bf28      	it	cs
 801613c:	4632      	movcs	r2, r6
 801613e:	f000 fbd8 	bl	80168f2 <memcpy>
 8016142:	4629      	mov	r1, r5
 8016144:	4638      	mov	r0, r7
 8016146:	f000 fc0d 	bl	8016964 <_free_r>
 801614a:	e7f1      	b.n	8016130 <_realloc_r+0x40>

0801614c <_strtoul_l.isra.0>:
 801614c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016150:	4e34      	ldr	r6, [pc, #208]	@ (8016224 <_strtoul_l.isra.0+0xd8>)
 8016152:	4686      	mov	lr, r0
 8016154:	460d      	mov	r5, r1
 8016156:	4628      	mov	r0, r5
 8016158:	f815 4b01 	ldrb.w	r4, [r5], #1
 801615c:	5d37      	ldrb	r7, [r6, r4]
 801615e:	f017 0708 	ands.w	r7, r7, #8
 8016162:	d1f8      	bne.n	8016156 <_strtoul_l.isra.0+0xa>
 8016164:	2c2d      	cmp	r4, #45	@ 0x2d
 8016166:	d110      	bne.n	801618a <_strtoul_l.isra.0+0x3e>
 8016168:	782c      	ldrb	r4, [r5, #0]
 801616a:	2701      	movs	r7, #1
 801616c:	1c85      	adds	r5, r0, #2
 801616e:	f033 0010 	bics.w	r0, r3, #16
 8016172:	d115      	bne.n	80161a0 <_strtoul_l.isra.0+0x54>
 8016174:	2c30      	cmp	r4, #48	@ 0x30
 8016176:	d10d      	bne.n	8016194 <_strtoul_l.isra.0+0x48>
 8016178:	7828      	ldrb	r0, [r5, #0]
 801617a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801617e:	2858      	cmp	r0, #88	@ 0x58
 8016180:	d108      	bne.n	8016194 <_strtoul_l.isra.0+0x48>
 8016182:	786c      	ldrb	r4, [r5, #1]
 8016184:	3502      	adds	r5, #2
 8016186:	2310      	movs	r3, #16
 8016188:	e00a      	b.n	80161a0 <_strtoul_l.isra.0+0x54>
 801618a:	2c2b      	cmp	r4, #43	@ 0x2b
 801618c:	bf04      	itt	eq
 801618e:	782c      	ldrbeq	r4, [r5, #0]
 8016190:	1c85      	addeq	r5, r0, #2
 8016192:	e7ec      	b.n	801616e <_strtoul_l.isra.0+0x22>
 8016194:	2b00      	cmp	r3, #0
 8016196:	d1f6      	bne.n	8016186 <_strtoul_l.isra.0+0x3a>
 8016198:	2c30      	cmp	r4, #48	@ 0x30
 801619a:	bf14      	ite	ne
 801619c:	230a      	movne	r3, #10
 801619e:	2308      	moveq	r3, #8
 80161a0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80161a4:	2600      	movs	r6, #0
 80161a6:	fbb8 f8f3 	udiv	r8, r8, r3
 80161aa:	fb03 f908 	mul.w	r9, r3, r8
 80161ae:	ea6f 0909 	mvn.w	r9, r9
 80161b2:	4630      	mov	r0, r6
 80161b4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80161b8:	f1bc 0f09 	cmp.w	ip, #9
 80161bc:	d810      	bhi.n	80161e0 <_strtoul_l.isra.0+0x94>
 80161be:	4664      	mov	r4, ip
 80161c0:	42a3      	cmp	r3, r4
 80161c2:	dd1e      	ble.n	8016202 <_strtoul_l.isra.0+0xb6>
 80161c4:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80161c8:	d007      	beq.n	80161da <_strtoul_l.isra.0+0x8e>
 80161ca:	4580      	cmp	r8, r0
 80161cc:	d316      	bcc.n	80161fc <_strtoul_l.isra.0+0xb0>
 80161ce:	d101      	bne.n	80161d4 <_strtoul_l.isra.0+0x88>
 80161d0:	45a1      	cmp	r9, r4
 80161d2:	db13      	blt.n	80161fc <_strtoul_l.isra.0+0xb0>
 80161d4:	fb00 4003 	mla	r0, r0, r3, r4
 80161d8:	2601      	movs	r6, #1
 80161da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80161de:	e7e9      	b.n	80161b4 <_strtoul_l.isra.0+0x68>
 80161e0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80161e4:	f1bc 0f19 	cmp.w	ip, #25
 80161e8:	d801      	bhi.n	80161ee <_strtoul_l.isra.0+0xa2>
 80161ea:	3c37      	subs	r4, #55	@ 0x37
 80161ec:	e7e8      	b.n	80161c0 <_strtoul_l.isra.0+0x74>
 80161ee:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80161f2:	f1bc 0f19 	cmp.w	ip, #25
 80161f6:	d804      	bhi.n	8016202 <_strtoul_l.isra.0+0xb6>
 80161f8:	3c57      	subs	r4, #87	@ 0x57
 80161fa:	e7e1      	b.n	80161c0 <_strtoul_l.isra.0+0x74>
 80161fc:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8016200:	e7eb      	b.n	80161da <_strtoul_l.isra.0+0x8e>
 8016202:	1c73      	adds	r3, r6, #1
 8016204:	d106      	bne.n	8016214 <_strtoul_l.isra.0+0xc8>
 8016206:	2322      	movs	r3, #34	@ 0x22
 8016208:	f8ce 3000 	str.w	r3, [lr]
 801620c:	4630      	mov	r0, r6
 801620e:	b932      	cbnz	r2, 801621e <_strtoul_l.isra.0+0xd2>
 8016210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016214:	b107      	cbz	r7, 8016218 <_strtoul_l.isra.0+0xcc>
 8016216:	4240      	negs	r0, r0
 8016218:	2a00      	cmp	r2, #0
 801621a:	d0f9      	beq.n	8016210 <_strtoul_l.isra.0+0xc4>
 801621c:	b106      	cbz	r6, 8016220 <_strtoul_l.isra.0+0xd4>
 801621e:	1e69      	subs	r1, r5, #1
 8016220:	6011      	str	r1, [r2, #0]
 8016222:	e7f5      	b.n	8016210 <_strtoul_l.isra.0+0xc4>
 8016224:	080182b3 	.word	0x080182b3

08016228 <strtoul>:
 8016228:	4613      	mov	r3, r2
 801622a:	460a      	mov	r2, r1
 801622c:	4601      	mov	r1, r0
 801622e:	4802      	ldr	r0, [pc, #8]	@ (8016238 <strtoul+0x10>)
 8016230:	6800      	ldr	r0, [r0, #0]
 8016232:	f7ff bf8b 	b.w	801614c <_strtoul_l.isra.0>
 8016236:	bf00      	nop
 8016238:	20000598 	.word	0x20000598

0801623c <std>:
 801623c:	2300      	movs	r3, #0
 801623e:	b510      	push	{r4, lr}
 8016240:	4604      	mov	r4, r0
 8016242:	e9c0 3300 	strd	r3, r3, [r0]
 8016246:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801624a:	6083      	str	r3, [r0, #8]
 801624c:	8181      	strh	r1, [r0, #12]
 801624e:	6643      	str	r3, [r0, #100]	@ 0x64
 8016250:	81c2      	strh	r2, [r0, #14]
 8016252:	6183      	str	r3, [r0, #24]
 8016254:	4619      	mov	r1, r3
 8016256:	2208      	movs	r2, #8
 8016258:	305c      	adds	r0, #92	@ 0x5c
 801625a:	f000 fa81 	bl	8016760 <memset>
 801625e:	4b0d      	ldr	r3, [pc, #52]	@ (8016294 <std+0x58>)
 8016260:	6263      	str	r3, [r4, #36]	@ 0x24
 8016262:	4b0d      	ldr	r3, [pc, #52]	@ (8016298 <std+0x5c>)
 8016264:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016266:	4b0d      	ldr	r3, [pc, #52]	@ (801629c <std+0x60>)
 8016268:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801626a:	4b0d      	ldr	r3, [pc, #52]	@ (80162a0 <std+0x64>)
 801626c:	6323      	str	r3, [r4, #48]	@ 0x30
 801626e:	4b0d      	ldr	r3, [pc, #52]	@ (80162a4 <std+0x68>)
 8016270:	6224      	str	r4, [r4, #32]
 8016272:	429c      	cmp	r4, r3
 8016274:	d006      	beq.n	8016284 <std+0x48>
 8016276:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801627a:	4294      	cmp	r4, r2
 801627c:	d002      	beq.n	8016284 <std+0x48>
 801627e:	33d0      	adds	r3, #208	@ 0xd0
 8016280:	429c      	cmp	r4, r3
 8016282:	d105      	bne.n	8016290 <std+0x54>
 8016284:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801628c:	f000 bb26 	b.w	80168dc <__retarget_lock_init_recursive>
 8016290:	bd10      	pop	{r4, pc}
 8016292:	bf00      	nop
 8016294:	08016505 	.word	0x08016505
 8016298:	08016527 	.word	0x08016527
 801629c:	0801655f 	.word	0x0801655f
 80162a0:	08016583 	.word	0x08016583
 80162a4:	2000eb40 	.word	0x2000eb40

080162a8 <stdio_exit_handler>:
 80162a8:	4a02      	ldr	r2, [pc, #8]	@ (80162b4 <stdio_exit_handler+0xc>)
 80162aa:	4903      	ldr	r1, [pc, #12]	@ (80162b8 <stdio_exit_handler+0x10>)
 80162ac:	4803      	ldr	r0, [pc, #12]	@ (80162bc <stdio_exit_handler+0x14>)
 80162ae:	f000 b869 	b.w	8016384 <_fwalk_sglue>
 80162b2:	bf00      	nop
 80162b4:	2000058c 	.word	0x2000058c
 80162b8:	0801735d 	.word	0x0801735d
 80162bc:	2000059c 	.word	0x2000059c

080162c0 <cleanup_stdio>:
 80162c0:	6841      	ldr	r1, [r0, #4]
 80162c2:	4b0c      	ldr	r3, [pc, #48]	@ (80162f4 <cleanup_stdio+0x34>)
 80162c4:	4299      	cmp	r1, r3
 80162c6:	b510      	push	{r4, lr}
 80162c8:	4604      	mov	r4, r0
 80162ca:	d001      	beq.n	80162d0 <cleanup_stdio+0x10>
 80162cc:	f001 f846 	bl	801735c <_fflush_r>
 80162d0:	68a1      	ldr	r1, [r4, #8]
 80162d2:	4b09      	ldr	r3, [pc, #36]	@ (80162f8 <cleanup_stdio+0x38>)
 80162d4:	4299      	cmp	r1, r3
 80162d6:	d002      	beq.n	80162de <cleanup_stdio+0x1e>
 80162d8:	4620      	mov	r0, r4
 80162da:	f001 f83f 	bl	801735c <_fflush_r>
 80162de:	68e1      	ldr	r1, [r4, #12]
 80162e0:	4b06      	ldr	r3, [pc, #24]	@ (80162fc <cleanup_stdio+0x3c>)
 80162e2:	4299      	cmp	r1, r3
 80162e4:	d004      	beq.n	80162f0 <cleanup_stdio+0x30>
 80162e6:	4620      	mov	r0, r4
 80162e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80162ec:	f001 b836 	b.w	801735c <_fflush_r>
 80162f0:	bd10      	pop	{r4, pc}
 80162f2:	bf00      	nop
 80162f4:	2000eb40 	.word	0x2000eb40
 80162f8:	2000eba8 	.word	0x2000eba8
 80162fc:	2000ec10 	.word	0x2000ec10

08016300 <global_stdio_init.part.0>:
 8016300:	b510      	push	{r4, lr}
 8016302:	4b0b      	ldr	r3, [pc, #44]	@ (8016330 <global_stdio_init.part.0+0x30>)
 8016304:	4c0b      	ldr	r4, [pc, #44]	@ (8016334 <global_stdio_init.part.0+0x34>)
 8016306:	4a0c      	ldr	r2, [pc, #48]	@ (8016338 <global_stdio_init.part.0+0x38>)
 8016308:	601a      	str	r2, [r3, #0]
 801630a:	4620      	mov	r0, r4
 801630c:	2200      	movs	r2, #0
 801630e:	2104      	movs	r1, #4
 8016310:	f7ff ff94 	bl	801623c <std>
 8016314:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016318:	2201      	movs	r2, #1
 801631a:	2109      	movs	r1, #9
 801631c:	f7ff ff8e 	bl	801623c <std>
 8016320:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016324:	2202      	movs	r2, #2
 8016326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801632a:	2112      	movs	r1, #18
 801632c:	f7ff bf86 	b.w	801623c <std>
 8016330:	2000ec78 	.word	0x2000ec78
 8016334:	2000eb40 	.word	0x2000eb40
 8016338:	080162a9 	.word	0x080162a9

0801633c <__sfp_lock_acquire>:
 801633c:	4801      	ldr	r0, [pc, #4]	@ (8016344 <__sfp_lock_acquire+0x8>)
 801633e:	f000 bace 	b.w	80168de <__retarget_lock_acquire_recursive>
 8016342:	bf00      	nop
 8016344:	2000ec82 	.word	0x2000ec82

08016348 <__sfp_lock_release>:
 8016348:	4801      	ldr	r0, [pc, #4]	@ (8016350 <__sfp_lock_release+0x8>)
 801634a:	f000 bac9 	b.w	80168e0 <__retarget_lock_release_recursive>
 801634e:	bf00      	nop
 8016350:	2000ec82 	.word	0x2000ec82

08016354 <__sinit>:
 8016354:	b510      	push	{r4, lr}
 8016356:	4604      	mov	r4, r0
 8016358:	f7ff fff0 	bl	801633c <__sfp_lock_acquire>
 801635c:	6a23      	ldr	r3, [r4, #32]
 801635e:	b11b      	cbz	r3, 8016368 <__sinit+0x14>
 8016360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016364:	f7ff bff0 	b.w	8016348 <__sfp_lock_release>
 8016368:	4b04      	ldr	r3, [pc, #16]	@ (801637c <__sinit+0x28>)
 801636a:	6223      	str	r3, [r4, #32]
 801636c:	4b04      	ldr	r3, [pc, #16]	@ (8016380 <__sinit+0x2c>)
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	2b00      	cmp	r3, #0
 8016372:	d1f5      	bne.n	8016360 <__sinit+0xc>
 8016374:	f7ff ffc4 	bl	8016300 <global_stdio_init.part.0>
 8016378:	e7f2      	b.n	8016360 <__sinit+0xc>
 801637a:	bf00      	nop
 801637c:	080162c1 	.word	0x080162c1
 8016380:	2000ec78 	.word	0x2000ec78

08016384 <_fwalk_sglue>:
 8016384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016388:	4607      	mov	r7, r0
 801638a:	4688      	mov	r8, r1
 801638c:	4614      	mov	r4, r2
 801638e:	2600      	movs	r6, #0
 8016390:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016394:	f1b9 0901 	subs.w	r9, r9, #1
 8016398:	d505      	bpl.n	80163a6 <_fwalk_sglue+0x22>
 801639a:	6824      	ldr	r4, [r4, #0]
 801639c:	2c00      	cmp	r4, #0
 801639e:	d1f7      	bne.n	8016390 <_fwalk_sglue+0xc>
 80163a0:	4630      	mov	r0, r6
 80163a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80163a6:	89ab      	ldrh	r3, [r5, #12]
 80163a8:	2b01      	cmp	r3, #1
 80163aa:	d907      	bls.n	80163bc <_fwalk_sglue+0x38>
 80163ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80163b0:	3301      	adds	r3, #1
 80163b2:	d003      	beq.n	80163bc <_fwalk_sglue+0x38>
 80163b4:	4629      	mov	r1, r5
 80163b6:	4638      	mov	r0, r7
 80163b8:	47c0      	blx	r8
 80163ba:	4306      	orrs	r6, r0
 80163bc:	3568      	adds	r5, #104	@ 0x68
 80163be:	e7e9      	b.n	8016394 <_fwalk_sglue+0x10>

080163c0 <_fwrite_r>:
 80163c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163c4:	9c08      	ldr	r4, [sp, #32]
 80163c6:	468a      	mov	sl, r1
 80163c8:	4690      	mov	r8, r2
 80163ca:	fb02 f903 	mul.w	r9, r2, r3
 80163ce:	4606      	mov	r6, r0
 80163d0:	b118      	cbz	r0, 80163da <_fwrite_r+0x1a>
 80163d2:	6a03      	ldr	r3, [r0, #32]
 80163d4:	b90b      	cbnz	r3, 80163da <_fwrite_r+0x1a>
 80163d6:	f7ff ffbd 	bl	8016354 <__sinit>
 80163da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80163dc:	07dd      	lsls	r5, r3, #31
 80163de:	d405      	bmi.n	80163ec <_fwrite_r+0x2c>
 80163e0:	89a3      	ldrh	r3, [r4, #12]
 80163e2:	0598      	lsls	r0, r3, #22
 80163e4:	d402      	bmi.n	80163ec <_fwrite_r+0x2c>
 80163e6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80163e8:	f000 fa79 	bl	80168de <__retarget_lock_acquire_recursive>
 80163ec:	89a3      	ldrh	r3, [r4, #12]
 80163ee:	0719      	lsls	r1, r3, #28
 80163f0:	d516      	bpl.n	8016420 <_fwrite_r+0x60>
 80163f2:	6923      	ldr	r3, [r4, #16]
 80163f4:	b1a3      	cbz	r3, 8016420 <_fwrite_r+0x60>
 80163f6:	2500      	movs	r5, #0
 80163f8:	454d      	cmp	r5, r9
 80163fa:	d01f      	beq.n	801643c <_fwrite_r+0x7c>
 80163fc:	68a7      	ldr	r7, [r4, #8]
 80163fe:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8016402:	3f01      	subs	r7, #1
 8016404:	2f00      	cmp	r7, #0
 8016406:	60a7      	str	r7, [r4, #8]
 8016408:	da04      	bge.n	8016414 <_fwrite_r+0x54>
 801640a:	69a3      	ldr	r3, [r4, #24]
 801640c:	429f      	cmp	r7, r3
 801640e:	db0f      	blt.n	8016430 <_fwrite_r+0x70>
 8016410:	290a      	cmp	r1, #10
 8016412:	d00d      	beq.n	8016430 <_fwrite_r+0x70>
 8016414:	6823      	ldr	r3, [r4, #0]
 8016416:	1c5a      	adds	r2, r3, #1
 8016418:	6022      	str	r2, [r4, #0]
 801641a:	7019      	strb	r1, [r3, #0]
 801641c:	3501      	adds	r5, #1
 801641e:	e7eb      	b.n	80163f8 <_fwrite_r+0x38>
 8016420:	4621      	mov	r1, r4
 8016422:	4630      	mov	r0, r6
 8016424:	f000 f92c 	bl	8016680 <__swsetup_r>
 8016428:	2800      	cmp	r0, #0
 801642a:	d0e4      	beq.n	80163f6 <_fwrite_r+0x36>
 801642c:	2500      	movs	r5, #0
 801642e:	e005      	b.n	801643c <_fwrite_r+0x7c>
 8016430:	4622      	mov	r2, r4
 8016432:	4630      	mov	r0, r6
 8016434:	f000 f8e6 	bl	8016604 <__swbuf_r>
 8016438:	3001      	adds	r0, #1
 801643a:	d1ef      	bne.n	801641c <_fwrite_r+0x5c>
 801643c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801643e:	07da      	lsls	r2, r3, #31
 8016440:	d405      	bmi.n	801644e <_fwrite_r+0x8e>
 8016442:	89a3      	ldrh	r3, [r4, #12]
 8016444:	059b      	lsls	r3, r3, #22
 8016446:	d402      	bmi.n	801644e <_fwrite_r+0x8e>
 8016448:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801644a:	f000 fa49 	bl	80168e0 <__retarget_lock_release_recursive>
 801644e:	fbb5 f0f8 	udiv	r0, r5, r8
 8016452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08016458 <fwrite>:
 8016458:	b507      	push	{r0, r1, r2, lr}
 801645a:	9300      	str	r3, [sp, #0]
 801645c:	4613      	mov	r3, r2
 801645e:	460a      	mov	r2, r1
 8016460:	4601      	mov	r1, r0
 8016462:	4803      	ldr	r0, [pc, #12]	@ (8016470 <fwrite+0x18>)
 8016464:	6800      	ldr	r0, [r0, #0]
 8016466:	f7ff ffab 	bl	80163c0 <_fwrite_r>
 801646a:	b003      	add	sp, #12
 801646c:	f85d fb04 	ldr.w	pc, [sp], #4
 8016470:	20000598 	.word	0x20000598

08016474 <iprintf>:
 8016474:	b40f      	push	{r0, r1, r2, r3}
 8016476:	b507      	push	{r0, r1, r2, lr}
 8016478:	4906      	ldr	r1, [pc, #24]	@ (8016494 <iprintf+0x20>)
 801647a:	ab04      	add	r3, sp, #16
 801647c:	6808      	ldr	r0, [r1, #0]
 801647e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016482:	6881      	ldr	r1, [r0, #8]
 8016484:	9301      	str	r3, [sp, #4]
 8016486:	f000 fc41 	bl	8016d0c <_vfiprintf_r>
 801648a:	b003      	add	sp, #12
 801648c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016490:	b004      	add	sp, #16
 8016492:	4770      	bx	lr
 8016494:	20000598 	.word	0x20000598

08016498 <sniprintf>:
 8016498:	b40c      	push	{r2, r3}
 801649a:	b530      	push	{r4, r5, lr}
 801649c:	4b18      	ldr	r3, [pc, #96]	@ (8016500 <sniprintf+0x68>)
 801649e:	1e0c      	subs	r4, r1, #0
 80164a0:	681d      	ldr	r5, [r3, #0]
 80164a2:	b09d      	sub	sp, #116	@ 0x74
 80164a4:	da08      	bge.n	80164b8 <sniprintf+0x20>
 80164a6:	238b      	movs	r3, #139	@ 0x8b
 80164a8:	602b      	str	r3, [r5, #0]
 80164aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80164ae:	b01d      	add	sp, #116	@ 0x74
 80164b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80164b4:	b002      	add	sp, #8
 80164b6:	4770      	bx	lr
 80164b8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80164bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80164c0:	f04f 0300 	mov.w	r3, #0
 80164c4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80164c6:	bf14      	ite	ne
 80164c8:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80164cc:	4623      	moveq	r3, r4
 80164ce:	9304      	str	r3, [sp, #16]
 80164d0:	9307      	str	r3, [sp, #28]
 80164d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80164d6:	9002      	str	r0, [sp, #8]
 80164d8:	9006      	str	r0, [sp, #24]
 80164da:	f8ad 3016 	strh.w	r3, [sp, #22]
 80164de:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80164e0:	ab21      	add	r3, sp, #132	@ 0x84
 80164e2:	a902      	add	r1, sp, #8
 80164e4:	4628      	mov	r0, r5
 80164e6:	9301      	str	r3, [sp, #4]
 80164e8:	f000 faea 	bl	8016ac0 <_svfiprintf_r>
 80164ec:	1c43      	adds	r3, r0, #1
 80164ee:	bfbc      	itt	lt
 80164f0:	238b      	movlt	r3, #139	@ 0x8b
 80164f2:	602b      	strlt	r3, [r5, #0]
 80164f4:	2c00      	cmp	r4, #0
 80164f6:	d0da      	beq.n	80164ae <sniprintf+0x16>
 80164f8:	9b02      	ldr	r3, [sp, #8]
 80164fa:	2200      	movs	r2, #0
 80164fc:	701a      	strb	r2, [r3, #0]
 80164fe:	e7d6      	b.n	80164ae <sniprintf+0x16>
 8016500:	20000598 	.word	0x20000598

08016504 <__sread>:
 8016504:	b510      	push	{r4, lr}
 8016506:	460c      	mov	r4, r1
 8016508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801650c:	f000 f988 	bl	8016820 <_read_r>
 8016510:	2800      	cmp	r0, #0
 8016512:	bfab      	itete	ge
 8016514:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016516:	89a3      	ldrhlt	r3, [r4, #12]
 8016518:	181b      	addge	r3, r3, r0
 801651a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801651e:	bfac      	ite	ge
 8016520:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016522:	81a3      	strhlt	r3, [r4, #12]
 8016524:	bd10      	pop	{r4, pc}

08016526 <__swrite>:
 8016526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801652a:	461f      	mov	r7, r3
 801652c:	898b      	ldrh	r3, [r1, #12]
 801652e:	05db      	lsls	r3, r3, #23
 8016530:	4605      	mov	r5, r0
 8016532:	460c      	mov	r4, r1
 8016534:	4616      	mov	r6, r2
 8016536:	d505      	bpl.n	8016544 <__swrite+0x1e>
 8016538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801653c:	2302      	movs	r3, #2
 801653e:	2200      	movs	r2, #0
 8016540:	f000 f95c 	bl	80167fc <_lseek_r>
 8016544:	89a3      	ldrh	r3, [r4, #12]
 8016546:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801654a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801654e:	81a3      	strh	r3, [r4, #12]
 8016550:	4632      	mov	r2, r6
 8016552:	463b      	mov	r3, r7
 8016554:	4628      	mov	r0, r5
 8016556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801655a:	f000 b983 	b.w	8016864 <_write_r>

0801655e <__sseek>:
 801655e:	b510      	push	{r4, lr}
 8016560:	460c      	mov	r4, r1
 8016562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016566:	f000 f949 	bl	80167fc <_lseek_r>
 801656a:	1c43      	adds	r3, r0, #1
 801656c:	89a3      	ldrh	r3, [r4, #12]
 801656e:	bf15      	itete	ne
 8016570:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016572:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016576:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801657a:	81a3      	strheq	r3, [r4, #12]
 801657c:	bf18      	it	ne
 801657e:	81a3      	strhne	r3, [r4, #12]
 8016580:	bd10      	pop	{r4, pc}

08016582 <__sclose>:
 8016582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016586:	f000 b929 	b.w	80167dc <_close_r>

0801658a <_vsniprintf_r>:
 801658a:	b530      	push	{r4, r5, lr}
 801658c:	4614      	mov	r4, r2
 801658e:	2c00      	cmp	r4, #0
 8016590:	b09b      	sub	sp, #108	@ 0x6c
 8016592:	4605      	mov	r5, r0
 8016594:	461a      	mov	r2, r3
 8016596:	da05      	bge.n	80165a4 <_vsniprintf_r+0x1a>
 8016598:	238b      	movs	r3, #139	@ 0x8b
 801659a:	6003      	str	r3, [r0, #0]
 801659c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80165a0:	b01b      	add	sp, #108	@ 0x6c
 80165a2:	bd30      	pop	{r4, r5, pc}
 80165a4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80165a8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80165ac:	f04f 0300 	mov.w	r3, #0
 80165b0:	9319      	str	r3, [sp, #100]	@ 0x64
 80165b2:	bf14      	ite	ne
 80165b4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80165b8:	4623      	moveq	r3, r4
 80165ba:	9302      	str	r3, [sp, #8]
 80165bc:	9305      	str	r3, [sp, #20]
 80165be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80165c2:	9100      	str	r1, [sp, #0]
 80165c4:	9104      	str	r1, [sp, #16]
 80165c6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80165ca:	4669      	mov	r1, sp
 80165cc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80165ce:	f000 fa77 	bl	8016ac0 <_svfiprintf_r>
 80165d2:	1c43      	adds	r3, r0, #1
 80165d4:	bfbc      	itt	lt
 80165d6:	238b      	movlt	r3, #139	@ 0x8b
 80165d8:	602b      	strlt	r3, [r5, #0]
 80165da:	2c00      	cmp	r4, #0
 80165dc:	d0e0      	beq.n	80165a0 <_vsniprintf_r+0x16>
 80165de:	9b00      	ldr	r3, [sp, #0]
 80165e0:	2200      	movs	r2, #0
 80165e2:	701a      	strb	r2, [r3, #0]
 80165e4:	e7dc      	b.n	80165a0 <_vsniprintf_r+0x16>
	...

080165e8 <vsniprintf>:
 80165e8:	b507      	push	{r0, r1, r2, lr}
 80165ea:	9300      	str	r3, [sp, #0]
 80165ec:	4613      	mov	r3, r2
 80165ee:	460a      	mov	r2, r1
 80165f0:	4601      	mov	r1, r0
 80165f2:	4803      	ldr	r0, [pc, #12]	@ (8016600 <vsniprintf+0x18>)
 80165f4:	6800      	ldr	r0, [r0, #0]
 80165f6:	f7ff ffc8 	bl	801658a <_vsniprintf_r>
 80165fa:	b003      	add	sp, #12
 80165fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8016600:	20000598 	.word	0x20000598

08016604 <__swbuf_r>:
 8016604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016606:	460e      	mov	r6, r1
 8016608:	4614      	mov	r4, r2
 801660a:	4605      	mov	r5, r0
 801660c:	b118      	cbz	r0, 8016616 <__swbuf_r+0x12>
 801660e:	6a03      	ldr	r3, [r0, #32]
 8016610:	b90b      	cbnz	r3, 8016616 <__swbuf_r+0x12>
 8016612:	f7ff fe9f 	bl	8016354 <__sinit>
 8016616:	69a3      	ldr	r3, [r4, #24]
 8016618:	60a3      	str	r3, [r4, #8]
 801661a:	89a3      	ldrh	r3, [r4, #12]
 801661c:	071a      	lsls	r2, r3, #28
 801661e:	d501      	bpl.n	8016624 <__swbuf_r+0x20>
 8016620:	6923      	ldr	r3, [r4, #16]
 8016622:	b943      	cbnz	r3, 8016636 <__swbuf_r+0x32>
 8016624:	4621      	mov	r1, r4
 8016626:	4628      	mov	r0, r5
 8016628:	f000 f82a 	bl	8016680 <__swsetup_r>
 801662c:	b118      	cbz	r0, 8016636 <__swbuf_r+0x32>
 801662e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8016632:	4638      	mov	r0, r7
 8016634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016636:	6823      	ldr	r3, [r4, #0]
 8016638:	6922      	ldr	r2, [r4, #16]
 801663a:	1a98      	subs	r0, r3, r2
 801663c:	6963      	ldr	r3, [r4, #20]
 801663e:	b2f6      	uxtb	r6, r6
 8016640:	4283      	cmp	r3, r0
 8016642:	4637      	mov	r7, r6
 8016644:	dc05      	bgt.n	8016652 <__swbuf_r+0x4e>
 8016646:	4621      	mov	r1, r4
 8016648:	4628      	mov	r0, r5
 801664a:	f000 fe87 	bl	801735c <_fflush_r>
 801664e:	2800      	cmp	r0, #0
 8016650:	d1ed      	bne.n	801662e <__swbuf_r+0x2a>
 8016652:	68a3      	ldr	r3, [r4, #8]
 8016654:	3b01      	subs	r3, #1
 8016656:	60a3      	str	r3, [r4, #8]
 8016658:	6823      	ldr	r3, [r4, #0]
 801665a:	1c5a      	adds	r2, r3, #1
 801665c:	6022      	str	r2, [r4, #0]
 801665e:	701e      	strb	r6, [r3, #0]
 8016660:	6962      	ldr	r2, [r4, #20]
 8016662:	1c43      	adds	r3, r0, #1
 8016664:	429a      	cmp	r2, r3
 8016666:	d004      	beq.n	8016672 <__swbuf_r+0x6e>
 8016668:	89a3      	ldrh	r3, [r4, #12]
 801666a:	07db      	lsls	r3, r3, #31
 801666c:	d5e1      	bpl.n	8016632 <__swbuf_r+0x2e>
 801666e:	2e0a      	cmp	r6, #10
 8016670:	d1df      	bne.n	8016632 <__swbuf_r+0x2e>
 8016672:	4621      	mov	r1, r4
 8016674:	4628      	mov	r0, r5
 8016676:	f000 fe71 	bl	801735c <_fflush_r>
 801667a:	2800      	cmp	r0, #0
 801667c:	d0d9      	beq.n	8016632 <__swbuf_r+0x2e>
 801667e:	e7d6      	b.n	801662e <__swbuf_r+0x2a>

08016680 <__swsetup_r>:
 8016680:	b538      	push	{r3, r4, r5, lr}
 8016682:	4b29      	ldr	r3, [pc, #164]	@ (8016728 <__swsetup_r+0xa8>)
 8016684:	4605      	mov	r5, r0
 8016686:	6818      	ldr	r0, [r3, #0]
 8016688:	460c      	mov	r4, r1
 801668a:	b118      	cbz	r0, 8016694 <__swsetup_r+0x14>
 801668c:	6a03      	ldr	r3, [r0, #32]
 801668e:	b90b      	cbnz	r3, 8016694 <__swsetup_r+0x14>
 8016690:	f7ff fe60 	bl	8016354 <__sinit>
 8016694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016698:	0719      	lsls	r1, r3, #28
 801669a:	d422      	bmi.n	80166e2 <__swsetup_r+0x62>
 801669c:	06da      	lsls	r2, r3, #27
 801669e:	d407      	bmi.n	80166b0 <__swsetup_r+0x30>
 80166a0:	2209      	movs	r2, #9
 80166a2:	602a      	str	r2, [r5, #0]
 80166a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80166a8:	81a3      	strh	r3, [r4, #12]
 80166aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80166ae:	e033      	b.n	8016718 <__swsetup_r+0x98>
 80166b0:	0758      	lsls	r0, r3, #29
 80166b2:	d512      	bpl.n	80166da <__swsetup_r+0x5a>
 80166b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80166b6:	b141      	cbz	r1, 80166ca <__swsetup_r+0x4a>
 80166b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80166bc:	4299      	cmp	r1, r3
 80166be:	d002      	beq.n	80166c6 <__swsetup_r+0x46>
 80166c0:	4628      	mov	r0, r5
 80166c2:	f000 f94f 	bl	8016964 <_free_r>
 80166c6:	2300      	movs	r3, #0
 80166c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80166ca:	89a3      	ldrh	r3, [r4, #12]
 80166cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80166d0:	81a3      	strh	r3, [r4, #12]
 80166d2:	2300      	movs	r3, #0
 80166d4:	6063      	str	r3, [r4, #4]
 80166d6:	6923      	ldr	r3, [r4, #16]
 80166d8:	6023      	str	r3, [r4, #0]
 80166da:	89a3      	ldrh	r3, [r4, #12]
 80166dc:	f043 0308 	orr.w	r3, r3, #8
 80166e0:	81a3      	strh	r3, [r4, #12]
 80166e2:	6923      	ldr	r3, [r4, #16]
 80166e4:	b94b      	cbnz	r3, 80166fa <__swsetup_r+0x7a>
 80166e6:	89a3      	ldrh	r3, [r4, #12]
 80166e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80166ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80166f0:	d003      	beq.n	80166fa <__swsetup_r+0x7a>
 80166f2:	4621      	mov	r1, r4
 80166f4:	4628      	mov	r0, r5
 80166f6:	f000 fe91 	bl	801741c <__smakebuf_r>
 80166fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80166fe:	f013 0201 	ands.w	r2, r3, #1
 8016702:	d00a      	beq.n	801671a <__swsetup_r+0x9a>
 8016704:	2200      	movs	r2, #0
 8016706:	60a2      	str	r2, [r4, #8]
 8016708:	6962      	ldr	r2, [r4, #20]
 801670a:	4252      	negs	r2, r2
 801670c:	61a2      	str	r2, [r4, #24]
 801670e:	6922      	ldr	r2, [r4, #16]
 8016710:	b942      	cbnz	r2, 8016724 <__swsetup_r+0xa4>
 8016712:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016716:	d1c5      	bne.n	80166a4 <__swsetup_r+0x24>
 8016718:	bd38      	pop	{r3, r4, r5, pc}
 801671a:	0799      	lsls	r1, r3, #30
 801671c:	bf58      	it	pl
 801671e:	6962      	ldrpl	r2, [r4, #20]
 8016720:	60a2      	str	r2, [r4, #8]
 8016722:	e7f4      	b.n	801670e <__swsetup_r+0x8e>
 8016724:	2000      	movs	r0, #0
 8016726:	e7f7      	b.n	8016718 <__swsetup_r+0x98>
 8016728:	20000598 	.word	0x20000598

0801672c <memmove>:
 801672c:	4288      	cmp	r0, r1
 801672e:	b510      	push	{r4, lr}
 8016730:	eb01 0402 	add.w	r4, r1, r2
 8016734:	d902      	bls.n	801673c <memmove+0x10>
 8016736:	4284      	cmp	r4, r0
 8016738:	4623      	mov	r3, r4
 801673a:	d807      	bhi.n	801674c <memmove+0x20>
 801673c:	1e43      	subs	r3, r0, #1
 801673e:	42a1      	cmp	r1, r4
 8016740:	d008      	beq.n	8016754 <memmove+0x28>
 8016742:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016746:	f803 2f01 	strb.w	r2, [r3, #1]!
 801674a:	e7f8      	b.n	801673e <memmove+0x12>
 801674c:	4402      	add	r2, r0
 801674e:	4601      	mov	r1, r0
 8016750:	428a      	cmp	r2, r1
 8016752:	d100      	bne.n	8016756 <memmove+0x2a>
 8016754:	bd10      	pop	{r4, pc}
 8016756:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801675a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801675e:	e7f7      	b.n	8016750 <memmove+0x24>

08016760 <memset>:
 8016760:	4402      	add	r2, r0
 8016762:	4603      	mov	r3, r0
 8016764:	4293      	cmp	r3, r2
 8016766:	d100      	bne.n	801676a <memset+0xa>
 8016768:	4770      	bx	lr
 801676a:	f803 1b01 	strb.w	r1, [r3], #1
 801676e:	e7f9      	b.n	8016764 <memset+0x4>

08016770 <strchr>:
 8016770:	b2c9      	uxtb	r1, r1
 8016772:	4603      	mov	r3, r0
 8016774:	4618      	mov	r0, r3
 8016776:	f813 2b01 	ldrb.w	r2, [r3], #1
 801677a:	b112      	cbz	r2, 8016782 <strchr+0x12>
 801677c:	428a      	cmp	r2, r1
 801677e:	d1f9      	bne.n	8016774 <strchr+0x4>
 8016780:	4770      	bx	lr
 8016782:	2900      	cmp	r1, #0
 8016784:	bf18      	it	ne
 8016786:	2000      	movne	r0, #0
 8016788:	4770      	bx	lr

0801678a <strncmp>:
 801678a:	b510      	push	{r4, lr}
 801678c:	b16a      	cbz	r2, 80167aa <strncmp+0x20>
 801678e:	3901      	subs	r1, #1
 8016790:	1884      	adds	r4, r0, r2
 8016792:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016796:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801679a:	429a      	cmp	r2, r3
 801679c:	d103      	bne.n	80167a6 <strncmp+0x1c>
 801679e:	42a0      	cmp	r0, r4
 80167a0:	d001      	beq.n	80167a6 <strncmp+0x1c>
 80167a2:	2a00      	cmp	r2, #0
 80167a4:	d1f5      	bne.n	8016792 <strncmp+0x8>
 80167a6:	1ad0      	subs	r0, r2, r3
 80167a8:	bd10      	pop	{r4, pc}
 80167aa:	4610      	mov	r0, r2
 80167ac:	e7fc      	b.n	80167a8 <strncmp+0x1e>

080167ae <strstr>:
 80167ae:	780a      	ldrb	r2, [r1, #0]
 80167b0:	b570      	push	{r4, r5, r6, lr}
 80167b2:	b96a      	cbnz	r2, 80167d0 <strstr+0x22>
 80167b4:	bd70      	pop	{r4, r5, r6, pc}
 80167b6:	429a      	cmp	r2, r3
 80167b8:	d109      	bne.n	80167ce <strstr+0x20>
 80167ba:	460c      	mov	r4, r1
 80167bc:	4605      	mov	r5, r0
 80167be:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d0f6      	beq.n	80167b4 <strstr+0x6>
 80167c6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80167ca:	429e      	cmp	r6, r3
 80167cc:	d0f7      	beq.n	80167be <strstr+0x10>
 80167ce:	3001      	adds	r0, #1
 80167d0:	7803      	ldrb	r3, [r0, #0]
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d1ef      	bne.n	80167b6 <strstr+0x8>
 80167d6:	4618      	mov	r0, r3
 80167d8:	e7ec      	b.n	80167b4 <strstr+0x6>
	...

080167dc <_close_r>:
 80167dc:	b538      	push	{r3, r4, r5, lr}
 80167de:	4d06      	ldr	r5, [pc, #24]	@ (80167f8 <_close_r+0x1c>)
 80167e0:	2300      	movs	r3, #0
 80167e2:	4604      	mov	r4, r0
 80167e4:	4608      	mov	r0, r1
 80167e6:	602b      	str	r3, [r5, #0]
 80167e8:	f7ec fbec 	bl	8002fc4 <_close>
 80167ec:	1c43      	adds	r3, r0, #1
 80167ee:	d102      	bne.n	80167f6 <_close_r+0x1a>
 80167f0:	682b      	ldr	r3, [r5, #0]
 80167f2:	b103      	cbz	r3, 80167f6 <_close_r+0x1a>
 80167f4:	6023      	str	r3, [r4, #0]
 80167f6:	bd38      	pop	{r3, r4, r5, pc}
 80167f8:	2000ec7c 	.word	0x2000ec7c

080167fc <_lseek_r>:
 80167fc:	b538      	push	{r3, r4, r5, lr}
 80167fe:	4d07      	ldr	r5, [pc, #28]	@ (801681c <_lseek_r+0x20>)
 8016800:	4604      	mov	r4, r0
 8016802:	4608      	mov	r0, r1
 8016804:	4611      	mov	r1, r2
 8016806:	2200      	movs	r2, #0
 8016808:	602a      	str	r2, [r5, #0]
 801680a:	461a      	mov	r2, r3
 801680c:	f7ec fc01 	bl	8003012 <_lseek>
 8016810:	1c43      	adds	r3, r0, #1
 8016812:	d102      	bne.n	801681a <_lseek_r+0x1e>
 8016814:	682b      	ldr	r3, [r5, #0]
 8016816:	b103      	cbz	r3, 801681a <_lseek_r+0x1e>
 8016818:	6023      	str	r3, [r4, #0]
 801681a:	bd38      	pop	{r3, r4, r5, pc}
 801681c:	2000ec7c 	.word	0x2000ec7c

08016820 <_read_r>:
 8016820:	b538      	push	{r3, r4, r5, lr}
 8016822:	4d07      	ldr	r5, [pc, #28]	@ (8016840 <_read_r+0x20>)
 8016824:	4604      	mov	r4, r0
 8016826:	4608      	mov	r0, r1
 8016828:	4611      	mov	r1, r2
 801682a:	2200      	movs	r2, #0
 801682c:	602a      	str	r2, [r5, #0]
 801682e:	461a      	mov	r2, r3
 8016830:	f7ec fb8f 	bl	8002f52 <_read>
 8016834:	1c43      	adds	r3, r0, #1
 8016836:	d102      	bne.n	801683e <_read_r+0x1e>
 8016838:	682b      	ldr	r3, [r5, #0]
 801683a:	b103      	cbz	r3, 801683e <_read_r+0x1e>
 801683c:	6023      	str	r3, [r4, #0]
 801683e:	bd38      	pop	{r3, r4, r5, pc}
 8016840:	2000ec7c 	.word	0x2000ec7c

08016844 <_sbrk_r>:
 8016844:	b538      	push	{r3, r4, r5, lr}
 8016846:	4d06      	ldr	r5, [pc, #24]	@ (8016860 <_sbrk_r+0x1c>)
 8016848:	2300      	movs	r3, #0
 801684a:	4604      	mov	r4, r0
 801684c:	4608      	mov	r0, r1
 801684e:	602b      	str	r3, [r5, #0]
 8016850:	f7ec fbec 	bl	800302c <_sbrk>
 8016854:	1c43      	adds	r3, r0, #1
 8016856:	d102      	bne.n	801685e <_sbrk_r+0x1a>
 8016858:	682b      	ldr	r3, [r5, #0]
 801685a:	b103      	cbz	r3, 801685e <_sbrk_r+0x1a>
 801685c:	6023      	str	r3, [r4, #0]
 801685e:	bd38      	pop	{r3, r4, r5, pc}
 8016860:	2000ec7c 	.word	0x2000ec7c

08016864 <_write_r>:
 8016864:	b538      	push	{r3, r4, r5, lr}
 8016866:	4d07      	ldr	r5, [pc, #28]	@ (8016884 <_write_r+0x20>)
 8016868:	4604      	mov	r4, r0
 801686a:	4608      	mov	r0, r1
 801686c:	4611      	mov	r1, r2
 801686e:	2200      	movs	r2, #0
 8016870:	602a      	str	r2, [r5, #0]
 8016872:	461a      	mov	r2, r3
 8016874:	f7ec fb8a 	bl	8002f8c <_write>
 8016878:	1c43      	adds	r3, r0, #1
 801687a:	d102      	bne.n	8016882 <_write_r+0x1e>
 801687c:	682b      	ldr	r3, [r5, #0]
 801687e:	b103      	cbz	r3, 8016882 <_write_r+0x1e>
 8016880:	6023      	str	r3, [r4, #0]
 8016882:	bd38      	pop	{r3, r4, r5, pc}
 8016884:	2000ec7c 	.word	0x2000ec7c

08016888 <__errno>:
 8016888:	4b01      	ldr	r3, [pc, #4]	@ (8016890 <__errno+0x8>)
 801688a:	6818      	ldr	r0, [r3, #0]
 801688c:	4770      	bx	lr
 801688e:	bf00      	nop
 8016890:	20000598 	.word	0x20000598

08016894 <__libc_init_array>:
 8016894:	b570      	push	{r4, r5, r6, lr}
 8016896:	4d0d      	ldr	r5, [pc, #52]	@ (80168cc <__libc_init_array+0x38>)
 8016898:	4c0d      	ldr	r4, [pc, #52]	@ (80168d0 <__libc_init_array+0x3c>)
 801689a:	1b64      	subs	r4, r4, r5
 801689c:	10a4      	asrs	r4, r4, #2
 801689e:	2600      	movs	r6, #0
 80168a0:	42a6      	cmp	r6, r4
 80168a2:	d109      	bne.n	80168b8 <__libc_init_array+0x24>
 80168a4:	4d0b      	ldr	r5, [pc, #44]	@ (80168d4 <__libc_init_array+0x40>)
 80168a6:	4c0c      	ldr	r4, [pc, #48]	@ (80168d8 <__libc_init_array+0x44>)
 80168a8:	f000 fe62 	bl	8017570 <_init>
 80168ac:	1b64      	subs	r4, r4, r5
 80168ae:	10a4      	asrs	r4, r4, #2
 80168b0:	2600      	movs	r6, #0
 80168b2:	42a6      	cmp	r6, r4
 80168b4:	d105      	bne.n	80168c2 <__libc_init_array+0x2e>
 80168b6:	bd70      	pop	{r4, r5, r6, pc}
 80168b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80168bc:	4798      	blx	r3
 80168be:	3601      	adds	r6, #1
 80168c0:	e7ee      	b.n	80168a0 <__libc_init_array+0xc>
 80168c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80168c6:	4798      	blx	r3
 80168c8:	3601      	adds	r6, #1
 80168ca:	e7f2      	b.n	80168b2 <__libc_init_array+0x1e>
 80168cc:	080183bc 	.word	0x080183bc
 80168d0:	080183bc 	.word	0x080183bc
 80168d4:	080183bc 	.word	0x080183bc
 80168d8:	080183c4 	.word	0x080183c4

080168dc <__retarget_lock_init_recursive>:
 80168dc:	4770      	bx	lr

080168de <__retarget_lock_acquire_recursive>:
 80168de:	4770      	bx	lr

080168e0 <__retarget_lock_release_recursive>:
 80168e0:	4770      	bx	lr

080168e2 <strcpy>:
 80168e2:	4603      	mov	r3, r0
 80168e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80168e8:	f803 2b01 	strb.w	r2, [r3], #1
 80168ec:	2a00      	cmp	r2, #0
 80168ee:	d1f9      	bne.n	80168e4 <strcpy+0x2>
 80168f0:	4770      	bx	lr

080168f2 <memcpy>:
 80168f2:	440a      	add	r2, r1
 80168f4:	4291      	cmp	r1, r2
 80168f6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80168fa:	d100      	bne.n	80168fe <memcpy+0xc>
 80168fc:	4770      	bx	lr
 80168fe:	b510      	push	{r4, lr}
 8016900:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016904:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016908:	4291      	cmp	r1, r2
 801690a:	d1f9      	bne.n	8016900 <memcpy+0xe>
 801690c:	bd10      	pop	{r4, pc}
	...

08016910 <__assert_func>:
 8016910:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016912:	4614      	mov	r4, r2
 8016914:	461a      	mov	r2, r3
 8016916:	4b09      	ldr	r3, [pc, #36]	@ (801693c <__assert_func+0x2c>)
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	4605      	mov	r5, r0
 801691c:	68d8      	ldr	r0, [r3, #12]
 801691e:	b14c      	cbz	r4, 8016934 <__assert_func+0x24>
 8016920:	4b07      	ldr	r3, [pc, #28]	@ (8016940 <__assert_func+0x30>)
 8016922:	9100      	str	r1, [sp, #0]
 8016924:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016928:	4906      	ldr	r1, [pc, #24]	@ (8016944 <__assert_func+0x34>)
 801692a:	462b      	mov	r3, r5
 801692c:	f000 fd3e 	bl	80173ac <fiprintf>
 8016930:	f000 fdd2 	bl	80174d8 <abort>
 8016934:	4b04      	ldr	r3, [pc, #16]	@ (8016948 <__assert_func+0x38>)
 8016936:	461c      	mov	r4, r3
 8016938:	e7f3      	b.n	8016922 <__assert_func+0x12>
 801693a:	bf00      	nop
 801693c:	20000598 	.word	0x20000598
 8016940:	08018243 	.word	0x08018243
 8016944:	08018250 	.word	0x08018250
 8016948:	0801827e 	.word	0x0801827e

0801694c <__env_lock>:
 801694c:	4801      	ldr	r0, [pc, #4]	@ (8016954 <__env_lock+0x8>)
 801694e:	f7ff bfc6 	b.w	80168de <__retarget_lock_acquire_recursive>
 8016952:	bf00      	nop
 8016954:	2000ec80 	.word	0x2000ec80

08016958 <__env_unlock>:
 8016958:	4801      	ldr	r0, [pc, #4]	@ (8016960 <__env_unlock+0x8>)
 801695a:	f7ff bfc1 	b.w	80168e0 <__retarget_lock_release_recursive>
 801695e:	bf00      	nop
 8016960:	2000ec80 	.word	0x2000ec80

08016964 <_free_r>:
 8016964:	b538      	push	{r3, r4, r5, lr}
 8016966:	4605      	mov	r5, r0
 8016968:	2900      	cmp	r1, #0
 801696a:	d041      	beq.n	80169f0 <_free_r+0x8c>
 801696c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016970:	1f0c      	subs	r4, r1, #4
 8016972:	2b00      	cmp	r3, #0
 8016974:	bfb8      	it	lt
 8016976:	18e4      	addlt	r4, r4, r3
 8016978:	f7ff fb3a 	bl	8015ff0 <__malloc_lock>
 801697c:	4a1d      	ldr	r2, [pc, #116]	@ (80169f4 <_free_r+0x90>)
 801697e:	6813      	ldr	r3, [r2, #0]
 8016980:	b933      	cbnz	r3, 8016990 <_free_r+0x2c>
 8016982:	6063      	str	r3, [r4, #4]
 8016984:	6014      	str	r4, [r2, #0]
 8016986:	4628      	mov	r0, r5
 8016988:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801698c:	f7ff bb36 	b.w	8015ffc <__malloc_unlock>
 8016990:	42a3      	cmp	r3, r4
 8016992:	d908      	bls.n	80169a6 <_free_r+0x42>
 8016994:	6820      	ldr	r0, [r4, #0]
 8016996:	1821      	adds	r1, r4, r0
 8016998:	428b      	cmp	r3, r1
 801699a:	bf01      	itttt	eq
 801699c:	6819      	ldreq	r1, [r3, #0]
 801699e:	685b      	ldreq	r3, [r3, #4]
 80169a0:	1809      	addeq	r1, r1, r0
 80169a2:	6021      	streq	r1, [r4, #0]
 80169a4:	e7ed      	b.n	8016982 <_free_r+0x1e>
 80169a6:	461a      	mov	r2, r3
 80169a8:	685b      	ldr	r3, [r3, #4]
 80169aa:	b10b      	cbz	r3, 80169b0 <_free_r+0x4c>
 80169ac:	42a3      	cmp	r3, r4
 80169ae:	d9fa      	bls.n	80169a6 <_free_r+0x42>
 80169b0:	6811      	ldr	r1, [r2, #0]
 80169b2:	1850      	adds	r0, r2, r1
 80169b4:	42a0      	cmp	r0, r4
 80169b6:	d10b      	bne.n	80169d0 <_free_r+0x6c>
 80169b8:	6820      	ldr	r0, [r4, #0]
 80169ba:	4401      	add	r1, r0
 80169bc:	1850      	adds	r0, r2, r1
 80169be:	4283      	cmp	r3, r0
 80169c0:	6011      	str	r1, [r2, #0]
 80169c2:	d1e0      	bne.n	8016986 <_free_r+0x22>
 80169c4:	6818      	ldr	r0, [r3, #0]
 80169c6:	685b      	ldr	r3, [r3, #4]
 80169c8:	6053      	str	r3, [r2, #4]
 80169ca:	4408      	add	r0, r1
 80169cc:	6010      	str	r0, [r2, #0]
 80169ce:	e7da      	b.n	8016986 <_free_r+0x22>
 80169d0:	d902      	bls.n	80169d8 <_free_r+0x74>
 80169d2:	230c      	movs	r3, #12
 80169d4:	602b      	str	r3, [r5, #0]
 80169d6:	e7d6      	b.n	8016986 <_free_r+0x22>
 80169d8:	6820      	ldr	r0, [r4, #0]
 80169da:	1821      	adds	r1, r4, r0
 80169dc:	428b      	cmp	r3, r1
 80169de:	bf04      	itt	eq
 80169e0:	6819      	ldreq	r1, [r3, #0]
 80169e2:	685b      	ldreq	r3, [r3, #4]
 80169e4:	6063      	str	r3, [r4, #4]
 80169e6:	bf04      	itt	eq
 80169e8:	1809      	addeq	r1, r1, r0
 80169ea:	6021      	streq	r1, [r4, #0]
 80169ec:	6054      	str	r4, [r2, #4]
 80169ee:	e7ca      	b.n	8016986 <_free_r+0x22>
 80169f0:	bd38      	pop	{r3, r4, r5, pc}
 80169f2:	bf00      	nop
 80169f4:	2000eb3c 	.word	0x2000eb3c

080169f8 <_malloc_usable_size_r>:
 80169f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80169fc:	1f18      	subs	r0, r3, #4
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	bfbc      	itt	lt
 8016a02:	580b      	ldrlt	r3, [r1, r0]
 8016a04:	18c0      	addlt	r0, r0, r3
 8016a06:	4770      	bx	lr

08016a08 <__ssputs_r>:
 8016a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a0c:	688e      	ldr	r6, [r1, #8]
 8016a0e:	461f      	mov	r7, r3
 8016a10:	42be      	cmp	r6, r7
 8016a12:	680b      	ldr	r3, [r1, #0]
 8016a14:	4682      	mov	sl, r0
 8016a16:	460c      	mov	r4, r1
 8016a18:	4690      	mov	r8, r2
 8016a1a:	d82d      	bhi.n	8016a78 <__ssputs_r+0x70>
 8016a1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016a20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016a24:	d026      	beq.n	8016a74 <__ssputs_r+0x6c>
 8016a26:	6965      	ldr	r5, [r4, #20]
 8016a28:	6909      	ldr	r1, [r1, #16]
 8016a2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016a2e:	eba3 0901 	sub.w	r9, r3, r1
 8016a32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016a36:	1c7b      	adds	r3, r7, #1
 8016a38:	444b      	add	r3, r9
 8016a3a:	106d      	asrs	r5, r5, #1
 8016a3c:	429d      	cmp	r5, r3
 8016a3e:	bf38      	it	cc
 8016a40:	461d      	movcc	r5, r3
 8016a42:	0553      	lsls	r3, r2, #21
 8016a44:	d527      	bpl.n	8016a96 <__ssputs_r+0x8e>
 8016a46:	4629      	mov	r1, r5
 8016a48:	f7ff fa52 	bl	8015ef0 <_malloc_r>
 8016a4c:	4606      	mov	r6, r0
 8016a4e:	b360      	cbz	r0, 8016aaa <__ssputs_r+0xa2>
 8016a50:	6921      	ldr	r1, [r4, #16]
 8016a52:	464a      	mov	r2, r9
 8016a54:	f7ff ff4d 	bl	80168f2 <memcpy>
 8016a58:	89a3      	ldrh	r3, [r4, #12]
 8016a5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016a5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016a62:	81a3      	strh	r3, [r4, #12]
 8016a64:	6126      	str	r6, [r4, #16]
 8016a66:	6165      	str	r5, [r4, #20]
 8016a68:	444e      	add	r6, r9
 8016a6a:	eba5 0509 	sub.w	r5, r5, r9
 8016a6e:	6026      	str	r6, [r4, #0]
 8016a70:	60a5      	str	r5, [r4, #8]
 8016a72:	463e      	mov	r6, r7
 8016a74:	42be      	cmp	r6, r7
 8016a76:	d900      	bls.n	8016a7a <__ssputs_r+0x72>
 8016a78:	463e      	mov	r6, r7
 8016a7a:	6820      	ldr	r0, [r4, #0]
 8016a7c:	4632      	mov	r2, r6
 8016a7e:	4641      	mov	r1, r8
 8016a80:	f7ff fe54 	bl	801672c <memmove>
 8016a84:	68a3      	ldr	r3, [r4, #8]
 8016a86:	1b9b      	subs	r3, r3, r6
 8016a88:	60a3      	str	r3, [r4, #8]
 8016a8a:	6823      	ldr	r3, [r4, #0]
 8016a8c:	4433      	add	r3, r6
 8016a8e:	6023      	str	r3, [r4, #0]
 8016a90:	2000      	movs	r0, #0
 8016a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a96:	462a      	mov	r2, r5
 8016a98:	f7ff fb2a 	bl	80160f0 <_realloc_r>
 8016a9c:	4606      	mov	r6, r0
 8016a9e:	2800      	cmp	r0, #0
 8016aa0:	d1e0      	bne.n	8016a64 <__ssputs_r+0x5c>
 8016aa2:	6921      	ldr	r1, [r4, #16]
 8016aa4:	4650      	mov	r0, sl
 8016aa6:	f7ff ff5d 	bl	8016964 <_free_r>
 8016aaa:	230c      	movs	r3, #12
 8016aac:	f8ca 3000 	str.w	r3, [sl]
 8016ab0:	89a3      	ldrh	r3, [r4, #12]
 8016ab2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016ab6:	81a3      	strh	r3, [r4, #12]
 8016ab8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016abc:	e7e9      	b.n	8016a92 <__ssputs_r+0x8a>
	...

08016ac0 <_svfiprintf_r>:
 8016ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ac4:	4698      	mov	r8, r3
 8016ac6:	898b      	ldrh	r3, [r1, #12]
 8016ac8:	061b      	lsls	r3, r3, #24
 8016aca:	b09d      	sub	sp, #116	@ 0x74
 8016acc:	4607      	mov	r7, r0
 8016ace:	460d      	mov	r5, r1
 8016ad0:	4614      	mov	r4, r2
 8016ad2:	d510      	bpl.n	8016af6 <_svfiprintf_r+0x36>
 8016ad4:	690b      	ldr	r3, [r1, #16]
 8016ad6:	b973      	cbnz	r3, 8016af6 <_svfiprintf_r+0x36>
 8016ad8:	2140      	movs	r1, #64	@ 0x40
 8016ada:	f7ff fa09 	bl	8015ef0 <_malloc_r>
 8016ade:	6028      	str	r0, [r5, #0]
 8016ae0:	6128      	str	r0, [r5, #16]
 8016ae2:	b930      	cbnz	r0, 8016af2 <_svfiprintf_r+0x32>
 8016ae4:	230c      	movs	r3, #12
 8016ae6:	603b      	str	r3, [r7, #0]
 8016ae8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016aec:	b01d      	add	sp, #116	@ 0x74
 8016aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016af2:	2340      	movs	r3, #64	@ 0x40
 8016af4:	616b      	str	r3, [r5, #20]
 8016af6:	2300      	movs	r3, #0
 8016af8:	9309      	str	r3, [sp, #36]	@ 0x24
 8016afa:	2320      	movs	r3, #32
 8016afc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016b00:	f8cd 800c 	str.w	r8, [sp, #12]
 8016b04:	2330      	movs	r3, #48	@ 0x30
 8016b06:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016ca4 <_svfiprintf_r+0x1e4>
 8016b0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016b0e:	f04f 0901 	mov.w	r9, #1
 8016b12:	4623      	mov	r3, r4
 8016b14:	469a      	mov	sl, r3
 8016b16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016b1a:	b10a      	cbz	r2, 8016b20 <_svfiprintf_r+0x60>
 8016b1c:	2a25      	cmp	r2, #37	@ 0x25
 8016b1e:	d1f9      	bne.n	8016b14 <_svfiprintf_r+0x54>
 8016b20:	ebba 0b04 	subs.w	fp, sl, r4
 8016b24:	d00b      	beq.n	8016b3e <_svfiprintf_r+0x7e>
 8016b26:	465b      	mov	r3, fp
 8016b28:	4622      	mov	r2, r4
 8016b2a:	4629      	mov	r1, r5
 8016b2c:	4638      	mov	r0, r7
 8016b2e:	f7ff ff6b 	bl	8016a08 <__ssputs_r>
 8016b32:	3001      	adds	r0, #1
 8016b34:	f000 80a7 	beq.w	8016c86 <_svfiprintf_r+0x1c6>
 8016b38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016b3a:	445a      	add	r2, fp
 8016b3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8016b3e:	f89a 3000 	ldrb.w	r3, [sl]
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	f000 809f 	beq.w	8016c86 <_svfiprintf_r+0x1c6>
 8016b48:	2300      	movs	r3, #0
 8016b4a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016b4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016b52:	f10a 0a01 	add.w	sl, sl, #1
 8016b56:	9304      	str	r3, [sp, #16]
 8016b58:	9307      	str	r3, [sp, #28]
 8016b5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016b5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8016b60:	4654      	mov	r4, sl
 8016b62:	2205      	movs	r2, #5
 8016b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b68:	484e      	ldr	r0, [pc, #312]	@ (8016ca4 <_svfiprintf_r+0x1e4>)
 8016b6a:	f7e9 fb81 	bl	8000270 <memchr>
 8016b6e:	9a04      	ldr	r2, [sp, #16]
 8016b70:	b9d8      	cbnz	r0, 8016baa <_svfiprintf_r+0xea>
 8016b72:	06d0      	lsls	r0, r2, #27
 8016b74:	bf44      	itt	mi
 8016b76:	2320      	movmi	r3, #32
 8016b78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016b7c:	0711      	lsls	r1, r2, #28
 8016b7e:	bf44      	itt	mi
 8016b80:	232b      	movmi	r3, #43	@ 0x2b
 8016b82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016b86:	f89a 3000 	ldrb.w	r3, [sl]
 8016b8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8016b8c:	d015      	beq.n	8016bba <_svfiprintf_r+0xfa>
 8016b8e:	9a07      	ldr	r2, [sp, #28]
 8016b90:	4654      	mov	r4, sl
 8016b92:	2000      	movs	r0, #0
 8016b94:	f04f 0c0a 	mov.w	ip, #10
 8016b98:	4621      	mov	r1, r4
 8016b9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016b9e:	3b30      	subs	r3, #48	@ 0x30
 8016ba0:	2b09      	cmp	r3, #9
 8016ba2:	d94b      	bls.n	8016c3c <_svfiprintf_r+0x17c>
 8016ba4:	b1b0      	cbz	r0, 8016bd4 <_svfiprintf_r+0x114>
 8016ba6:	9207      	str	r2, [sp, #28]
 8016ba8:	e014      	b.n	8016bd4 <_svfiprintf_r+0x114>
 8016baa:	eba0 0308 	sub.w	r3, r0, r8
 8016bae:	fa09 f303 	lsl.w	r3, r9, r3
 8016bb2:	4313      	orrs	r3, r2
 8016bb4:	9304      	str	r3, [sp, #16]
 8016bb6:	46a2      	mov	sl, r4
 8016bb8:	e7d2      	b.n	8016b60 <_svfiprintf_r+0xa0>
 8016bba:	9b03      	ldr	r3, [sp, #12]
 8016bbc:	1d19      	adds	r1, r3, #4
 8016bbe:	681b      	ldr	r3, [r3, #0]
 8016bc0:	9103      	str	r1, [sp, #12]
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	bfbb      	ittet	lt
 8016bc6:	425b      	neglt	r3, r3
 8016bc8:	f042 0202 	orrlt.w	r2, r2, #2
 8016bcc:	9307      	strge	r3, [sp, #28]
 8016bce:	9307      	strlt	r3, [sp, #28]
 8016bd0:	bfb8      	it	lt
 8016bd2:	9204      	strlt	r2, [sp, #16]
 8016bd4:	7823      	ldrb	r3, [r4, #0]
 8016bd6:	2b2e      	cmp	r3, #46	@ 0x2e
 8016bd8:	d10a      	bne.n	8016bf0 <_svfiprintf_r+0x130>
 8016bda:	7863      	ldrb	r3, [r4, #1]
 8016bdc:	2b2a      	cmp	r3, #42	@ 0x2a
 8016bde:	d132      	bne.n	8016c46 <_svfiprintf_r+0x186>
 8016be0:	9b03      	ldr	r3, [sp, #12]
 8016be2:	1d1a      	adds	r2, r3, #4
 8016be4:	681b      	ldr	r3, [r3, #0]
 8016be6:	9203      	str	r2, [sp, #12]
 8016be8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016bec:	3402      	adds	r4, #2
 8016bee:	9305      	str	r3, [sp, #20]
 8016bf0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016cb4 <_svfiprintf_r+0x1f4>
 8016bf4:	7821      	ldrb	r1, [r4, #0]
 8016bf6:	2203      	movs	r2, #3
 8016bf8:	4650      	mov	r0, sl
 8016bfa:	f7e9 fb39 	bl	8000270 <memchr>
 8016bfe:	b138      	cbz	r0, 8016c10 <_svfiprintf_r+0x150>
 8016c00:	9b04      	ldr	r3, [sp, #16]
 8016c02:	eba0 000a 	sub.w	r0, r0, sl
 8016c06:	2240      	movs	r2, #64	@ 0x40
 8016c08:	4082      	lsls	r2, r0
 8016c0a:	4313      	orrs	r3, r2
 8016c0c:	3401      	adds	r4, #1
 8016c0e:	9304      	str	r3, [sp, #16]
 8016c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c14:	4824      	ldr	r0, [pc, #144]	@ (8016ca8 <_svfiprintf_r+0x1e8>)
 8016c16:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016c1a:	2206      	movs	r2, #6
 8016c1c:	f7e9 fb28 	bl	8000270 <memchr>
 8016c20:	2800      	cmp	r0, #0
 8016c22:	d036      	beq.n	8016c92 <_svfiprintf_r+0x1d2>
 8016c24:	4b21      	ldr	r3, [pc, #132]	@ (8016cac <_svfiprintf_r+0x1ec>)
 8016c26:	bb1b      	cbnz	r3, 8016c70 <_svfiprintf_r+0x1b0>
 8016c28:	9b03      	ldr	r3, [sp, #12]
 8016c2a:	3307      	adds	r3, #7
 8016c2c:	f023 0307 	bic.w	r3, r3, #7
 8016c30:	3308      	adds	r3, #8
 8016c32:	9303      	str	r3, [sp, #12]
 8016c34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016c36:	4433      	add	r3, r6
 8016c38:	9309      	str	r3, [sp, #36]	@ 0x24
 8016c3a:	e76a      	b.n	8016b12 <_svfiprintf_r+0x52>
 8016c3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8016c40:	460c      	mov	r4, r1
 8016c42:	2001      	movs	r0, #1
 8016c44:	e7a8      	b.n	8016b98 <_svfiprintf_r+0xd8>
 8016c46:	2300      	movs	r3, #0
 8016c48:	3401      	adds	r4, #1
 8016c4a:	9305      	str	r3, [sp, #20]
 8016c4c:	4619      	mov	r1, r3
 8016c4e:	f04f 0c0a 	mov.w	ip, #10
 8016c52:	4620      	mov	r0, r4
 8016c54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016c58:	3a30      	subs	r2, #48	@ 0x30
 8016c5a:	2a09      	cmp	r2, #9
 8016c5c:	d903      	bls.n	8016c66 <_svfiprintf_r+0x1a6>
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d0c6      	beq.n	8016bf0 <_svfiprintf_r+0x130>
 8016c62:	9105      	str	r1, [sp, #20]
 8016c64:	e7c4      	b.n	8016bf0 <_svfiprintf_r+0x130>
 8016c66:	fb0c 2101 	mla	r1, ip, r1, r2
 8016c6a:	4604      	mov	r4, r0
 8016c6c:	2301      	movs	r3, #1
 8016c6e:	e7f0      	b.n	8016c52 <_svfiprintf_r+0x192>
 8016c70:	ab03      	add	r3, sp, #12
 8016c72:	9300      	str	r3, [sp, #0]
 8016c74:	462a      	mov	r2, r5
 8016c76:	4b0e      	ldr	r3, [pc, #56]	@ (8016cb0 <_svfiprintf_r+0x1f0>)
 8016c78:	a904      	add	r1, sp, #16
 8016c7a:	4638      	mov	r0, r7
 8016c7c:	f3af 8000 	nop.w
 8016c80:	1c42      	adds	r2, r0, #1
 8016c82:	4606      	mov	r6, r0
 8016c84:	d1d6      	bne.n	8016c34 <_svfiprintf_r+0x174>
 8016c86:	89ab      	ldrh	r3, [r5, #12]
 8016c88:	065b      	lsls	r3, r3, #25
 8016c8a:	f53f af2d 	bmi.w	8016ae8 <_svfiprintf_r+0x28>
 8016c8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016c90:	e72c      	b.n	8016aec <_svfiprintf_r+0x2c>
 8016c92:	ab03      	add	r3, sp, #12
 8016c94:	9300      	str	r3, [sp, #0]
 8016c96:	462a      	mov	r2, r5
 8016c98:	4b05      	ldr	r3, [pc, #20]	@ (8016cb0 <_svfiprintf_r+0x1f0>)
 8016c9a:	a904      	add	r1, sp, #16
 8016c9c:	4638      	mov	r0, r7
 8016c9e:	f000 f9bb 	bl	8017018 <_printf_i>
 8016ca2:	e7ed      	b.n	8016c80 <_svfiprintf_r+0x1c0>
 8016ca4:	0801827f 	.word	0x0801827f
 8016ca8:	08018289 	.word	0x08018289
 8016cac:	00000000 	.word	0x00000000
 8016cb0:	08016a09 	.word	0x08016a09
 8016cb4:	08018285 	.word	0x08018285

08016cb8 <__sfputc_r>:
 8016cb8:	6893      	ldr	r3, [r2, #8]
 8016cba:	3b01      	subs	r3, #1
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	b410      	push	{r4}
 8016cc0:	6093      	str	r3, [r2, #8]
 8016cc2:	da08      	bge.n	8016cd6 <__sfputc_r+0x1e>
 8016cc4:	6994      	ldr	r4, [r2, #24]
 8016cc6:	42a3      	cmp	r3, r4
 8016cc8:	db01      	blt.n	8016cce <__sfputc_r+0x16>
 8016cca:	290a      	cmp	r1, #10
 8016ccc:	d103      	bne.n	8016cd6 <__sfputc_r+0x1e>
 8016cce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016cd2:	f7ff bc97 	b.w	8016604 <__swbuf_r>
 8016cd6:	6813      	ldr	r3, [r2, #0]
 8016cd8:	1c58      	adds	r0, r3, #1
 8016cda:	6010      	str	r0, [r2, #0]
 8016cdc:	7019      	strb	r1, [r3, #0]
 8016cde:	4608      	mov	r0, r1
 8016ce0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016ce4:	4770      	bx	lr

08016ce6 <__sfputs_r>:
 8016ce6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ce8:	4606      	mov	r6, r0
 8016cea:	460f      	mov	r7, r1
 8016cec:	4614      	mov	r4, r2
 8016cee:	18d5      	adds	r5, r2, r3
 8016cf0:	42ac      	cmp	r4, r5
 8016cf2:	d101      	bne.n	8016cf8 <__sfputs_r+0x12>
 8016cf4:	2000      	movs	r0, #0
 8016cf6:	e007      	b.n	8016d08 <__sfputs_r+0x22>
 8016cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016cfc:	463a      	mov	r2, r7
 8016cfe:	4630      	mov	r0, r6
 8016d00:	f7ff ffda 	bl	8016cb8 <__sfputc_r>
 8016d04:	1c43      	adds	r3, r0, #1
 8016d06:	d1f3      	bne.n	8016cf0 <__sfputs_r+0xa>
 8016d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016d0c <_vfiprintf_r>:
 8016d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d10:	460d      	mov	r5, r1
 8016d12:	b09d      	sub	sp, #116	@ 0x74
 8016d14:	4614      	mov	r4, r2
 8016d16:	4698      	mov	r8, r3
 8016d18:	4606      	mov	r6, r0
 8016d1a:	b118      	cbz	r0, 8016d24 <_vfiprintf_r+0x18>
 8016d1c:	6a03      	ldr	r3, [r0, #32]
 8016d1e:	b90b      	cbnz	r3, 8016d24 <_vfiprintf_r+0x18>
 8016d20:	f7ff fb18 	bl	8016354 <__sinit>
 8016d24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016d26:	07d9      	lsls	r1, r3, #31
 8016d28:	d405      	bmi.n	8016d36 <_vfiprintf_r+0x2a>
 8016d2a:	89ab      	ldrh	r3, [r5, #12]
 8016d2c:	059a      	lsls	r2, r3, #22
 8016d2e:	d402      	bmi.n	8016d36 <_vfiprintf_r+0x2a>
 8016d30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016d32:	f7ff fdd4 	bl	80168de <__retarget_lock_acquire_recursive>
 8016d36:	89ab      	ldrh	r3, [r5, #12]
 8016d38:	071b      	lsls	r3, r3, #28
 8016d3a:	d501      	bpl.n	8016d40 <_vfiprintf_r+0x34>
 8016d3c:	692b      	ldr	r3, [r5, #16]
 8016d3e:	b99b      	cbnz	r3, 8016d68 <_vfiprintf_r+0x5c>
 8016d40:	4629      	mov	r1, r5
 8016d42:	4630      	mov	r0, r6
 8016d44:	f7ff fc9c 	bl	8016680 <__swsetup_r>
 8016d48:	b170      	cbz	r0, 8016d68 <_vfiprintf_r+0x5c>
 8016d4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016d4c:	07dc      	lsls	r4, r3, #31
 8016d4e:	d504      	bpl.n	8016d5a <_vfiprintf_r+0x4e>
 8016d50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016d54:	b01d      	add	sp, #116	@ 0x74
 8016d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d5a:	89ab      	ldrh	r3, [r5, #12]
 8016d5c:	0598      	lsls	r0, r3, #22
 8016d5e:	d4f7      	bmi.n	8016d50 <_vfiprintf_r+0x44>
 8016d60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016d62:	f7ff fdbd 	bl	80168e0 <__retarget_lock_release_recursive>
 8016d66:	e7f3      	b.n	8016d50 <_vfiprintf_r+0x44>
 8016d68:	2300      	movs	r3, #0
 8016d6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8016d6c:	2320      	movs	r3, #32
 8016d6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016d72:	f8cd 800c 	str.w	r8, [sp, #12]
 8016d76:	2330      	movs	r3, #48	@ 0x30
 8016d78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016f28 <_vfiprintf_r+0x21c>
 8016d7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016d80:	f04f 0901 	mov.w	r9, #1
 8016d84:	4623      	mov	r3, r4
 8016d86:	469a      	mov	sl, r3
 8016d88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016d8c:	b10a      	cbz	r2, 8016d92 <_vfiprintf_r+0x86>
 8016d8e:	2a25      	cmp	r2, #37	@ 0x25
 8016d90:	d1f9      	bne.n	8016d86 <_vfiprintf_r+0x7a>
 8016d92:	ebba 0b04 	subs.w	fp, sl, r4
 8016d96:	d00b      	beq.n	8016db0 <_vfiprintf_r+0xa4>
 8016d98:	465b      	mov	r3, fp
 8016d9a:	4622      	mov	r2, r4
 8016d9c:	4629      	mov	r1, r5
 8016d9e:	4630      	mov	r0, r6
 8016da0:	f7ff ffa1 	bl	8016ce6 <__sfputs_r>
 8016da4:	3001      	adds	r0, #1
 8016da6:	f000 80a7 	beq.w	8016ef8 <_vfiprintf_r+0x1ec>
 8016daa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016dac:	445a      	add	r2, fp
 8016dae:	9209      	str	r2, [sp, #36]	@ 0x24
 8016db0:	f89a 3000 	ldrb.w	r3, [sl]
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	f000 809f 	beq.w	8016ef8 <_vfiprintf_r+0x1ec>
 8016dba:	2300      	movs	r3, #0
 8016dbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016dc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016dc4:	f10a 0a01 	add.w	sl, sl, #1
 8016dc8:	9304      	str	r3, [sp, #16]
 8016dca:	9307      	str	r3, [sp, #28]
 8016dcc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016dd0:	931a      	str	r3, [sp, #104]	@ 0x68
 8016dd2:	4654      	mov	r4, sl
 8016dd4:	2205      	movs	r2, #5
 8016dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016dda:	4853      	ldr	r0, [pc, #332]	@ (8016f28 <_vfiprintf_r+0x21c>)
 8016ddc:	f7e9 fa48 	bl	8000270 <memchr>
 8016de0:	9a04      	ldr	r2, [sp, #16]
 8016de2:	b9d8      	cbnz	r0, 8016e1c <_vfiprintf_r+0x110>
 8016de4:	06d1      	lsls	r1, r2, #27
 8016de6:	bf44      	itt	mi
 8016de8:	2320      	movmi	r3, #32
 8016dea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016dee:	0713      	lsls	r3, r2, #28
 8016df0:	bf44      	itt	mi
 8016df2:	232b      	movmi	r3, #43	@ 0x2b
 8016df4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016df8:	f89a 3000 	ldrb.w	r3, [sl]
 8016dfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8016dfe:	d015      	beq.n	8016e2c <_vfiprintf_r+0x120>
 8016e00:	9a07      	ldr	r2, [sp, #28]
 8016e02:	4654      	mov	r4, sl
 8016e04:	2000      	movs	r0, #0
 8016e06:	f04f 0c0a 	mov.w	ip, #10
 8016e0a:	4621      	mov	r1, r4
 8016e0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016e10:	3b30      	subs	r3, #48	@ 0x30
 8016e12:	2b09      	cmp	r3, #9
 8016e14:	d94b      	bls.n	8016eae <_vfiprintf_r+0x1a2>
 8016e16:	b1b0      	cbz	r0, 8016e46 <_vfiprintf_r+0x13a>
 8016e18:	9207      	str	r2, [sp, #28]
 8016e1a:	e014      	b.n	8016e46 <_vfiprintf_r+0x13a>
 8016e1c:	eba0 0308 	sub.w	r3, r0, r8
 8016e20:	fa09 f303 	lsl.w	r3, r9, r3
 8016e24:	4313      	orrs	r3, r2
 8016e26:	9304      	str	r3, [sp, #16]
 8016e28:	46a2      	mov	sl, r4
 8016e2a:	e7d2      	b.n	8016dd2 <_vfiprintf_r+0xc6>
 8016e2c:	9b03      	ldr	r3, [sp, #12]
 8016e2e:	1d19      	adds	r1, r3, #4
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	9103      	str	r1, [sp, #12]
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	bfbb      	ittet	lt
 8016e38:	425b      	neglt	r3, r3
 8016e3a:	f042 0202 	orrlt.w	r2, r2, #2
 8016e3e:	9307      	strge	r3, [sp, #28]
 8016e40:	9307      	strlt	r3, [sp, #28]
 8016e42:	bfb8      	it	lt
 8016e44:	9204      	strlt	r2, [sp, #16]
 8016e46:	7823      	ldrb	r3, [r4, #0]
 8016e48:	2b2e      	cmp	r3, #46	@ 0x2e
 8016e4a:	d10a      	bne.n	8016e62 <_vfiprintf_r+0x156>
 8016e4c:	7863      	ldrb	r3, [r4, #1]
 8016e4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8016e50:	d132      	bne.n	8016eb8 <_vfiprintf_r+0x1ac>
 8016e52:	9b03      	ldr	r3, [sp, #12]
 8016e54:	1d1a      	adds	r2, r3, #4
 8016e56:	681b      	ldr	r3, [r3, #0]
 8016e58:	9203      	str	r2, [sp, #12]
 8016e5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016e5e:	3402      	adds	r4, #2
 8016e60:	9305      	str	r3, [sp, #20]
 8016e62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016f38 <_vfiprintf_r+0x22c>
 8016e66:	7821      	ldrb	r1, [r4, #0]
 8016e68:	2203      	movs	r2, #3
 8016e6a:	4650      	mov	r0, sl
 8016e6c:	f7e9 fa00 	bl	8000270 <memchr>
 8016e70:	b138      	cbz	r0, 8016e82 <_vfiprintf_r+0x176>
 8016e72:	9b04      	ldr	r3, [sp, #16]
 8016e74:	eba0 000a 	sub.w	r0, r0, sl
 8016e78:	2240      	movs	r2, #64	@ 0x40
 8016e7a:	4082      	lsls	r2, r0
 8016e7c:	4313      	orrs	r3, r2
 8016e7e:	3401      	adds	r4, #1
 8016e80:	9304      	str	r3, [sp, #16]
 8016e82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016e86:	4829      	ldr	r0, [pc, #164]	@ (8016f2c <_vfiprintf_r+0x220>)
 8016e88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016e8c:	2206      	movs	r2, #6
 8016e8e:	f7e9 f9ef 	bl	8000270 <memchr>
 8016e92:	2800      	cmp	r0, #0
 8016e94:	d03f      	beq.n	8016f16 <_vfiprintf_r+0x20a>
 8016e96:	4b26      	ldr	r3, [pc, #152]	@ (8016f30 <_vfiprintf_r+0x224>)
 8016e98:	bb1b      	cbnz	r3, 8016ee2 <_vfiprintf_r+0x1d6>
 8016e9a:	9b03      	ldr	r3, [sp, #12]
 8016e9c:	3307      	adds	r3, #7
 8016e9e:	f023 0307 	bic.w	r3, r3, #7
 8016ea2:	3308      	adds	r3, #8
 8016ea4:	9303      	str	r3, [sp, #12]
 8016ea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016ea8:	443b      	add	r3, r7
 8016eaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8016eac:	e76a      	b.n	8016d84 <_vfiprintf_r+0x78>
 8016eae:	fb0c 3202 	mla	r2, ip, r2, r3
 8016eb2:	460c      	mov	r4, r1
 8016eb4:	2001      	movs	r0, #1
 8016eb6:	e7a8      	b.n	8016e0a <_vfiprintf_r+0xfe>
 8016eb8:	2300      	movs	r3, #0
 8016eba:	3401      	adds	r4, #1
 8016ebc:	9305      	str	r3, [sp, #20]
 8016ebe:	4619      	mov	r1, r3
 8016ec0:	f04f 0c0a 	mov.w	ip, #10
 8016ec4:	4620      	mov	r0, r4
 8016ec6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016eca:	3a30      	subs	r2, #48	@ 0x30
 8016ecc:	2a09      	cmp	r2, #9
 8016ece:	d903      	bls.n	8016ed8 <_vfiprintf_r+0x1cc>
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d0c6      	beq.n	8016e62 <_vfiprintf_r+0x156>
 8016ed4:	9105      	str	r1, [sp, #20]
 8016ed6:	e7c4      	b.n	8016e62 <_vfiprintf_r+0x156>
 8016ed8:	fb0c 2101 	mla	r1, ip, r1, r2
 8016edc:	4604      	mov	r4, r0
 8016ede:	2301      	movs	r3, #1
 8016ee0:	e7f0      	b.n	8016ec4 <_vfiprintf_r+0x1b8>
 8016ee2:	ab03      	add	r3, sp, #12
 8016ee4:	9300      	str	r3, [sp, #0]
 8016ee6:	462a      	mov	r2, r5
 8016ee8:	4b12      	ldr	r3, [pc, #72]	@ (8016f34 <_vfiprintf_r+0x228>)
 8016eea:	a904      	add	r1, sp, #16
 8016eec:	4630      	mov	r0, r6
 8016eee:	f3af 8000 	nop.w
 8016ef2:	4607      	mov	r7, r0
 8016ef4:	1c78      	adds	r0, r7, #1
 8016ef6:	d1d6      	bne.n	8016ea6 <_vfiprintf_r+0x19a>
 8016ef8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016efa:	07d9      	lsls	r1, r3, #31
 8016efc:	d405      	bmi.n	8016f0a <_vfiprintf_r+0x1fe>
 8016efe:	89ab      	ldrh	r3, [r5, #12]
 8016f00:	059a      	lsls	r2, r3, #22
 8016f02:	d402      	bmi.n	8016f0a <_vfiprintf_r+0x1fe>
 8016f04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016f06:	f7ff fceb 	bl	80168e0 <__retarget_lock_release_recursive>
 8016f0a:	89ab      	ldrh	r3, [r5, #12]
 8016f0c:	065b      	lsls	r3, r3, #25
 8016f0e:	f53f af1f 	bmi.w	8016d50 <_vfiprintf_r+0x44>
 8016f12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016f14:	e71e      	b.n	8016d54 <_vfiprintf_r+0x48>
 8016f16:	ab03      	add	r3, sp, #12
 8016f18:	9300      	str	r3, [sp, #0]
 8016f1a:	462a      	mov	r2, r5
 8016f1c:	4b05      	ldr	r3, [pc, #20]	@ (8016f34 <_vfiprintf_r+0x228>)
 8016f1e:	a904      	add	r1, sp, #16
 8016f20:	4630      	mov	r0, r6
 8016f22:	f000 f879 	bl	8017018 <_printf_i>
 8016f26:	e7e4      	b.n	8016ef2 <_vfiprintf_r+0x1e6>
 8016f28:	0801827f 	.word	0x0801827f
 8016f2c:	08018289 	.word	0x08018289
 8016f30:	00000000 	.word	0x00000000
 8016f34:	08016ce7 	.word	0x08016ce7
 8016f38:	08018285 	.word	0x08018285

08016f3c <_printf_common>:
 8016f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f40:	4616      	mov	r6, r2
 8016f42:	4698      	mov	r8, r3
 8016f44:	688a      	ldr	r2, [r1, #8]
 8016f46:	690b      	ldr	r3, [r1, #16]
 8016f48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016f4c:	4293      	cmp	r3, r2
 8016f4e:	bfb8      	it	lt
 8016f50:	4613      	movlt	r3, r2
 8016f52:	6033      	str	r3, [r6, #0]
 8016f54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016f58:	4607      	mov	r7, r0
 8016f5a:	460c      	mov	r4, r1
 8016f5c:	b10a      	cbz	r2, 8016f62 <_printf_common+0x26>
 8016f5e:	3301      	adds	r3, #1
 8016f60:	6033      	str	r3, [r6, #0]
 8016f62:	6823      	ldr	r3, [r4, #0]
 8016f64:	0699      	lsls	r1, r3, #26
 8016f66:	bf42      	ittt	mi
 8016f68:	6833      	ldrmi	r3, [r6, #0]
 8016f6a:	3302      	addmi	r3, #2
 8016f6c:	6033      	strmi	r3, [r6, #0]
 8016f6e:	6825      	ldr	r5, [r4, #0]
 8016f70:	f015 0506 	ands.w	r5, r5, #6
 8016f74:	d106      	bne.n	8016f84 <_printf_common+0x48>
 8016f76:	f104 0a19 	add.w	sl, r4, #25
 8016f7a:	68e3      	ldr	r3, [r4, #12]
 8016f7c:	6832      	ldr	r2, [r6, #0]
 8016f7e:	1a9b      	subs	r3, r3, r2
 8016f80:	42ab      	cmp	r3, r5
 8016f82:	dc26      	bgt.n	8016fd2 <_printf_common+0x96>
 8016f84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016f88:	6822      	ldr	r2, [r4, #0]
 8016f8a:	3b00      	subs	r3, #0
 8016f8c:	bf18      	it	ne
 8016f8e:	2301      	movne	r3, #1
 8016f90:	0692      	lsls	r2, r2, #26
 8016f92:	d42b      	bmi.n	8016fec <_printf_common+0xb0>
 8016f94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016f98:	4641      	mov	r1, r8
 8016f9a:	4638      	mov	r0, r7
 8016f9c:	47c8      	blx	r9
 8016f9e:	3001      	adds	r0, #1
 8016fa0:	d01e      	beq.n	8016fe0 <_printf_common+0xa4>
 8016fa2:	6823      	ldr	r3, [r4, #0]
 8016fa4:	6922      	ldr	r2, [r4, #16]
 8016fa6:	f003 0306 	and.w	r3, r3, #6
 8016faa:	2b04      	cmp	r3, #4
 8016fac:	bf02      	ittt	eq
 8016fae:	68e5      	ldreq	r5, [r4, #12]
 8016fb0:	6833      	ldreq	r3, [r6, #0]
 8016fb2:	1aed      	subeq	r5, r5, r3
 8016fb4:	68a3      	ldr	r3, [r4, #8]
 8016fb6:	bf0c      	ite	eq
 8016fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016fbc:	2500      	movne	r5, #0
 8016fbe:	4293      	cmp	r3, r2
 8016fc0:	bfc4      	itt	gt
 8016fc2:	1a9b      	subgt	r3, r3, r2
 8016fc4:	18ed      	addgt	r5, r5, r3
 8016fc6:	2600      	movs	r6, #0
 8016fc8:	341a      	adds	r4, #26
 8016fca:	42b5      	cmp	r5, r6
 8016fcc:	d11a      	bne.n	8017004 <_printf_common+0xc8>
 8016fce:	2000      	movs	r0, #0
 8016fd0:	e008      	b.n	8016fe4 <_printf_common+0xa8>
 8016fd2:	2301      	movs	r3, #1
 8016fd4:	4652      	mov	r2, sl
 8016fd6:	4641      	mov	r1, r8
 8016fd8:	4638      	mov	r0, r7
 8016fda:	47c8      	blx	r9
 8016fdc:	3001      	adds	r0, #1
 8016fde:	d103      	bne.n	8016fe8 <_printf_common+0xac>
 8016fe0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016fe8:	3501      	adds	r5, #1
 8016fea:	e7c6      	b.n	8016f7a <_printf_common+0x3e>
 8016fec:	18e1      	adds	r1, r4, r3
 8016fee:	1c5a      	adds	r2, r3, #1
 8016ff0:	2030      	movs	r0, #48	@ 0x30
 8016ff2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016ff6:	4422      	add	r2, r4
 8016ff8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016ffc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017000:	3302      	adds	r3, #2
 8017002:	e7c7      	b.n	8016f94 <_printf_common+0x58>
 8017004:	2301      	movs	r3, #1
 8017006:	4622      	mov	r2, r4
 8017008:	4641      	mov	r1, r8
 801700a:	4638      	mov	r0, r7
 801700c:	47c8      	blx	r9
 801700e:	3001      	adds	r0, #1
 8017010:	d0e6      	beq.n	8016fe0 <_printf_common+0xa4>
 8017012:	3601      	adds	r6, #1
 8017014:	e7d9      	b.n	8016fca <_printf_common+0x8e>
	...

08017018 <_printf_i>:
 8017018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801701c:	7e0f      	ldrb	r7, [r1, #24]
 801701e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017020:	2f78      	cmp	r7, #120	@ 0x78
 8017022:	4691      	mov	r9, r2
 8017024:	4680      	mov	r8, r0
 8017026:	460c      	mov	r4, r1
 8017028:	469a      	mov	sl, r3
 801702a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801702e:	d807      	bhi.n	8017040 <_printf_i+0x28>
 8017030:	2f62      	cmp	r7, #98	@ 0x62
 8017032:	d80a      	bhi.n	801704a <_printf_i+0x32>
 8017034:	2f00      	cmp	r7, #0
 8017036:	f000 80d1 	beq.w	80171dc <_printf_i+0x1c4>
 801703a:	2f58      	cmp	r7, #88	@ 0x58
 801703c:	f000 80b8 	beq.w	80171b0 <_printf_i+0x198>
 8017040:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017044:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017048:	e03a      	b.n	80170c0 <_printf_i+0xa8>
 801704a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801704e:	2b15      	cmp	r3, #21
 8017050:	d8f6      	bhi.n	8017040 <_printf_i+0x28>
 8017052:	a101      	add	r1, pc, #4	@ (adr r1, 8017058 <_printf_i+0x40>)
 8017054:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017058:	080170b1 	.word	0x080170b1
 801705c:	080170c5 	.word	0x080170c5
 8017060:	08017041 	.word	0x08017041
 8017064:	08017041 	.word	0x08017041
 8017068:	08017041 	.word	0x08017041
 801706c:	08017041 	.word	0x08017041
 8017070:	080170c5 	.word	0x080170c5
 8017074:	08017041 	.word	0x08017041
 8017078:	08017041 	.word	0x08017041
 801707c:	08017041 	.word	0x08017041
 8017080:	08017041 	.word	0x08017041
 8017084:	080171c3 	.word	0x080171c3
 8017088:	080170ef 	.word	0x080170ef
 801708c:	0801717d 	.word	0x0801717d
 8017090:	08017041 	.word	0x08017041
 8017094:	08017041 	.word	0x08017041
 8017098:	080171e5 	.word	0x080171e5
 801709c:	08017041 	.word	0x08017041
 80170a0:	080170ef 	.word	0x080170ef
 80170a4:	08017041 	.word	0x08017041
 80170a8:	08017041 	.word	0x08017041
 80170ac:	08017185 	.word	0x08017185
 80170b0:	6833      	ldr	r3, [r6, #0]
 80170b2:	1d1a      	adds	r2, r3, #4
 80170b4:	681b      	ldr	r3, [r3, #0]
 80170b6:	6032      	str	r2, [r6, #0]
 80170b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80170bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80170c0:	2301      	movs	r3, #1
 80170c2:	e09c      	b.n	80171fe <_printf_i+0x1e6>
 80170c4:	6833      	ldr	r3, [r6, #0]
 80170c6:	6820      	ldr	r0, [r4, #0]
 80170c8:	1d19      	adds	r1, r3, #4
 80170ca:	6031      	str	r1, [r6, #0]
 80170cc:	0606      	lsls	r6, r0, #24
 80170ce:	d501      	bpl.n	80170d4 <_printf_i+0xbc>
 80170d0:	681d      	ldr	r5, [r3, #0]
 80170d2:	e003      	b.n	80170dc <_printf_i+0xc4>
 80170d4:	0645      	lsls	r5, r0, #25
 80170d6:	d5fb      	bpl.n	80170d0 <_printf_i+0xb8>
 80170d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80170dc:	2d00      	cmp	r5, #0
 80170de:	da03      	bge.n	80170e8 <_printf_i+0xd0>
 80170e0:	232d      	movs	r3, #45	@ 0x2d
 80170e2:	426d      	negs	r5, r5
 80170e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80170e8:	4858      	ldr	r0, [pc, #352]	@ (801724c <_printf_i+0x234>)
 80170ea:	230a      	movs	r3, #10
 80170ec:	e011      	b.n	8017112 <_printf_i+0xfa>
 80170ee:	6821      	ldr	r1, [r4, #0]
 80170f0:	6833      	ldr	r3, [r6, #0]
 80170f2:	0608      	lsls	r0, r1, #24
 80170f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80170f8:	d402      	bmi.n	8017100 <_printf_i+0xe8>
 80170fa:	0649      	lsls	r1, r1, #25
 80170fc:	bf48      	it	mi
 80170fe:	b2ad      	uxthmi	r5, r5
 8017100:	2f6f      	cmp	r7, #111	@ 0x6f
 8017102:	4852      	ldr	r0, [pc, #328]	@ (801724c <_printf_i+0x234>)
 8017104:	6033      	str	r3, [r6, #0]
 8017106:	bf14      	ite	ne
 8017108:	230a      	movne	r3, #10
 801710a:	2308      	moveq	r3, #8
 801710c:	2100      	movs	r1, #0
 801710e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017112:	6866      	ldr	r6, [r4, #4]
 8017114:	60a6      	str	r6, [r4, #8]
 8017116:	2e00      	cmp	r6, #0
 8017118:	db05      	blt.n	8017126 <_printf_i+0x10e>
 801711a:	6821      	ldr	r1, [r4, #0]
 801711c:	432e      	orrs	r6, r5
 801711e:	f021 0104 	bic.w	r1, r1, #4
 8017122:	6021      	str	r1, [r4, #0]
 8017124:	d04b      	beq.n	80171be <_printf_i+0x1a6>
 8017126:	4616      	mov	r6, r2
 8017128:	fbb5 f1f3 	udiv	r1, r5, r3
 801712c:	fb03 5711 	mls	r7, r3, r1, r5
 8017130:	5dc7      	ldrb	r7, [r0, r7]
 8017132:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017136:	462f      	mov	r7, r5
 8017138:	42bb      	cmp	r3, r7
 801713a:	460d      	mov	r5, r1
 801713c:	d9f4      	bls.n	8017128 <_printf_i+0x110>
 801713e:	2b08      	cmp	r3, #8
 8017140:	d10b      	bne.n	801715a <_printf_i+0x142>
 8017142:	6823      	ldr	r3, [r4, #0]
 8017144:	07df      	lsls	r7, r3, #31
 8017146:	d508      	bpl.n	801715a <_printf_i+0x142>
 8017148:	6923      	ldr	r3, [r4, #16]
 801714a:	6861      	ldr	r1, [r4, #4]
 801714c:	4299      	cmp	r1, r3
 801714e:	bfde      	ittt	le
 8017150:	2330      	movle	r3, #48	@ 0x30
 8017152:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017156:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801715a:	1b92      	subs	r2, r2, r6
 801715c:	6122      	str	r2, [r4, #16]
 801715e:	f8cd a000 	str.w	sl, [sp]
 8017162:	464b      	mov	r3, r9
 8017164:	aa03      	add	r2, sp, #12
 8017166:	4621      	mov	r1, r4
 8017168:	4640      	mov	r0, r8
 801716a:	f7ff fee7 	bl	8016f3c <_printf_common>
 801716e:	3001      	adds	r0, #1
 8017170:	d14a      	bne.n	8017208 <_printf_i+0x1f0>
 8017172:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017176:	b004      	add	sp, #16
 8017178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801717c:	6823      	ldr	r3, [r4, #0]
 801717e:	f043 0320 	orr.w	r3, r3, #32
 8017182:	6023      	str	r3, [r4, #0]
 8017184:	4832      	ldr	r0, [pc, #200]	@ (8017250 <_printf_i+0x238>)
 8017186:	2778      	movs	r7, #120	@ 0x78
 8017188:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801718c:	6823      	ldr	r3, [r4, #0]
 801718e:	6831      	ldr	r1, [r6, #0]
 8017190:	061f      	lsls	r7, r3, #24
 8017192:	f851 5b04 	ldr.w	r5, [r1], #4
 8017196:	d402      	bmi.n	801719e <_printf_i+0x186>
 8017198:	065f      	lsls	r7, r3, #25
 801719a:	bf48      	it	mi
 801719c:	b2ad      	uxthmi	r5, r5
 801719e:	6031      	str	r1, [r6, #0]
 80171a0:	07d9      	lsls	r1, r3, #31
 80171a2:	bf44      	itt	mi
 80171a4:	f043 0320 	orrmi.w	r3, r3, #32
 80171a8:	6023      	strmi	r3, [r4, #0]
 80171aa:	b11d      	cbz	r5, 80171b4 <_printf_i+0x19c>
 80171ac:	2310      	movs	r3, #16
 80171ae:	e7ad      	b.n	801710c <_printf_i+0xf4>
 80171b0:	4826      	ldr	r0, [pc, #152]	@ (801724c <_printf_i+0x234>)
 80171b2:	e7e9      	b.n	8017188 <_printf_i+0x170>
 80171b4:	6823      	ldr	r3, [r4, #0]
 80171b6:	f023 0320 	bic.w	r3, r3, #32
 80171ba:	6023      	str	r3, [r4, #0]
 80171bc:	e7f6      	b.n	80171ac <_printf_i+0x194>
 80171be:	4616      	mov	r6, r2
 80171c0:	e7bd      	b.n	801713e <_printf_i+0x126>
 80171c2:	6833      	ldr	r3, [r6, #0]
 80171c4:	6825      	ldr	r5, [r4, #0]
 80171c6:	6961      	ldr	r1, [r4, #20]
 80171c8:	1d18      	adds	r0, r3, #4
 80171ca:	6030      	str	r0, [r6, #0]
 80171cc:	062e      	lsls	r6, r5, #24
 80171ce:	681b      	ldr	r3, [r3, #0]
 80171d0:	d501      	bpl.n	80171d6 <_printf_i+0x1be>
 80171d2:	6019      	str	r1, [r3, #0]
 80171d4:	e002      	b.n	80171dc <_printf_i+0x1c4>
 80171d6:	0668      	lsls	r0, r5, #25
 80171d8:	d5fb      	bpl.n	80171d2 <_printf_i+0x1ba>
 80171da:	8019      	strh	r1, [r3, #0]
 80171dc:	2300      	movs	r3, #0
 80171de:	6123      	str	r3, [r4, #16]
 80171e0:	4616      	mov	r6, r2
 80171e2:	e7bc      	b.n	801715e <_printf_i+0x146>
 80171e4:	6833      	ldr	r3, [r6, #0]
 80171e6:	1d1a      	adds	r2, r3, #4
 80171e8:	6032      	str	r2, [r6, #0]
 80171ea:	681e      	ldr	r6, [r3, #0]
 80171ec:	6862      	ldr	r2, [r4, #4]
 80171ee:	2100      	movs	r1, #0
 80171f0:	4630      	mov	r0, r6
 80171f2:	f7e9 f83d 	bl	8000270 <memchr>
 80171f6:	b108      	cbz	r0, 80171fc <_printf_i+0x1e4>
 80171f8:	1b80      	subs	r0, r0, r6
 80171fa:	6060      	str	r0, [r4, #4]
 80171fc:	6863      	ldr	r3, [r4, #4]
 80171fe:	6123      	str	r3, [r4, #16]
 8017200:	2300      	movs	r3, #0
 8017202:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017206:	e7aa      	b.n	801715e <_printf_i+0x146>
 8017208:	6923      	ldr	r3, [r4, #16]
 801720a:	4632      	mov	r2, r6
 801720c:	4649      	mov	r1, r9
 801720e:	4640      	mov	r0, r8
 8017210:	47d0      	blx	sl
 8017212:	3001      	adds	r0, #1
 8017214:	d0ad      	beq.n	8017172 <_printf_i+0x15a>
 8017216:	6823      	ldr	r3, [r4, #0]
 8017218:	079b      	lsls	r3, r3, #30
 801721a:	d413      	bmi.n	8017244 <_printf_i+0x22c>
 801721c:	68e0      	ldr	r0, [r4, #12]
 801721e:	9b03      	ldr	r3, [sp, #12]
 8017220:	4298      	cmp	r0, r3
 8017222:	bfb8      	it	lt
 8017224:	4618      	movlt	r0, r3
 8017226:	e7a6      	b.n	8017176 <_printf_i+0x15e>
 8017228:	2301      	movs	r3, #1
 801722a:	4632      	mov	r2, r6
 801722c:	4649      	mov	r1, r9
 801722e:	4640      	mov	r0, r8
 8017230:	47d0      	blx	sl
 8017232:	3001      	adds	r0, #1
 8017234:	d09d      	beq.n	8017172 <_printf_i+0x15a>
 8017236:	3501      	adds	r5, #1
 8017238:	68e3      	ldr	r3, [r4, #12]
 801723a:	9903      	ldr	r1, [sp, #12]
 801723c:	1a5b      	subs	r3, r3, r1
 801723e:	42ab      	cmp	r3, r5
 8017240:	dcf2      	bgt.n	8017228 <_printf_i+0x210>
 8017242:	e7eb      	b.n	801721c <_printf_i+0x204>
 8017244:	2500      	movs	r5, #0
 8017246:	f104 0619 	add.w	r6, r4, #25
 801724a:	e7f5      	b.n	8017238 <_printf_i+0x220>
 801724c:	08018290 	.word	0x08018290
 8017250:	080182a1 	.word	0x080182a1

08017254 <__sflush_r>:
 8017254:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801725c:	0716      	lsls	r6, r2, #28
 801725e:	4605      	mov	r5, r0
 8017260:	460c      	mov	r4, r1
 8017262:	d454      	bmi.n	801730e <__sflush_r+0xba>
 8017264:	684b      	ldr	r3, [r1, #4]
 8017266:	2b00      	cmp	r3, #0
 8017268:	dc02      	bgt.n	8017270 <__sflush_r+0x1c>
 801726a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801726c:	2b00      	cmp	r3, #0
 801726e:	dd48      	ble.n	8017302 <__sflush_r+0xae>
 8017270:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017272:	2e00      	cmp	r6, #0
 8017274:	d045      	beq.n	8017302 <__sflush_r+0xae>
 8017276:	2300      	movs	r3, #0
 8017278:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801727c:	682f      	ldr	r7, [r5, #0]
 801727e:	6a21      	ldr	r1, [r4, #32]
 8017280:	602b      	str	r3, [r5, #0]
 8017282:	d030      	beq.n	80172e6 <__sflush_r+0x92>
 8017284:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017286:	89a3      	ldrh	r3, [r4, #12]
 8017288:	0759      	lsls	r1, r3, #29
 801728a:	d505      	bpl.n	8017298 <__sflush_r+0x44>
 801728c:	6863      	ldr	r3, [r4, #4]
 801728e:	1ad2      	subs	r2, r2, r3
 8017290:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017292:	b10b      	cbz	r3, 8017298 <__sflush_r+0x44>
 8017294:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017296:	1ad2      	subs	r2, r2, r3
 8017298:	2300      	movs	r3, #0
 801729a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801729c:	6a21      	ldr	r1, [r4, #32]
 801729e:	4628      	mov	r0, r5
 80172a0:	47b0      	blx	r6
 80172a2:	1c43      	adds	r3, r0, #1
 80172a4:	89a3      	ldrh	r3, [r4, #12]
 80172a6:	d106      	bne.n	80172b6 <__sflush_r+0x62>
 80172a8:	6829      	ldr	r1, [r5, #0]
 80172aa:	291d      	cmp	r1, #29
 80172ac:	d82b      	bhi.n	8017306 <__sflush_r+0xb2>
 80172ae:	4a2a      	ldr	r2, [pc, #168]	@ (8017358 <__sflush_r+0x104>)
 80172b0:	40ca      	lsrs	r2, r1
 80172b2:	07d6      	lsls	r6, r2, #31
 80172b4:	d527      	bpl.n	8017306 <__sflush_r+0xb2>
 80172b6:	2200      	movs	r2, #0
 80172b8:	6062      	str	r2, [r4, #4]
 80172ba:	04d9      	lsls	r1, r3, #19
 80172bc:	6922      	ldr	r2, [r4, #16]
 80172be:	6022      	str	r2, [r4, #0]
 80172c0:	d504      	bpl.n	80172cc <__sflush_r+0x78>
 80172c2:	1c42      	adds	r2, r0, #1
 80172c4:	d101      	bne.n	80172ca <__sflush_r+0x76>
 80172c6:	682b      	ldr	r3, [r5, #0]
 80172c8:	b903      	cbnz	r3, 80172cc <__sflush_r+0x78>
 80172ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80172cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80172ce:	602f      	str	r7, [r5, #0]
 80172d0:	b1b9      	cbz	r1, 8017302 <__sflush_r+0xae>
 80172d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80172d6:	4299      	cmp	r1, r3
 80172d8:	d002      	beq.n	80172e0 <__sflush_r+0x8c>
 80172da:	4628      	mov	r0, r5
 80172dc:	f7ff fb42 	bl	8016964 <_free_r>
 80172e0:	2300      	movs	r3, #0
 80172e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80172e4:	e00d      	b.n	8017302 <__sflush_r+0xae>
 80172e6:	2301      	movs	r3, #1
 80172e8:	4628      	mov	r0, r5
 80172ea:	47b0      	blx	r6
 80172ec:	4602      	mov	r2, r0
 80172ee:	1c50      	adds	r0, r2, #1
 80172f0:	d1c9      	bne.n	8017286 <__sflush_r+0x32>
 80172f2:	682b      	ldr	r3, [r5, #0]
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d0c6      	beq.n	8017286 <__sflush_r+0x32>
 80172f8:	2b1d      	cmp	r3, #29
 80172fa:	d001      	beq.n	8017300 <__sflush_r+0xac>
 80172fc:	2b16      	cmp	r3, #22
 80172fe:	d11e      	bne.n	801733e <__sflush_r+0xea>
 8017300:	602f      	str	r7, [r5, #0]
 8017302:	2000      	movs	r0, #0
 8017304:	e022      	b.n	801734c <__sflush_r+0xf8>
 8017306:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801730a:	b21b      	sxth	r3, r3
 801730c:	e01b      	b.n	8017346 <__sflush_r+0xf2>
 801730e:	690f      	ldr	r7, [r1, #16]
 8017310:	2f00      	cmp	r7, #0
 8017312:	d0f6      	beq.n	8017302 <__sflush_r+0xae>
 8017314:	0793      	lsls	r3, r2, #30
 8017316:	680e      	ldr	r6, [r1, #0]
 8017318:	bf08      	it	eq
 801731a:	694b      	ldreq	r3, [r1, #20]
 801731c:	600f      	str	r7, [r1, #0]
 801731e:	bf18      	it	ne
 8017320:	2300      	movne	r3, #0
 8017322:	eba6 0807 	sub.w	r8, r6, r7
 8017326:	608b      	str	r3, [r1, #8]
 8017328:	f1b8 0f00 	cmp.w	r8, #0
 801732c:	dde9      	ble.n	8017302 <__sflush_r+0xae>
 801732e:	6a21      	ldr	r1, [r4, #32]
 8017330:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017332:	4643      	mov	r3, r8
 8017334:	463a      	mov	r2, r7
 8017336:	4628      	mov	r0, r5
 8017338:	47b0      	blx	r6
 801733a:	2800      	cmp	r0, #0
 801733c:	dc08      	bgt.n	8017350 <__sflush_r+0xfc>
 801733e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017342:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017346:	81a3      	strh	r3, [r4, #12]
 8017348:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801734c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017350:	4407      	add	r7, r0
 8017352:	eba8 0800 	sub.w	r8, r8, r0
 8017356:	e7e7      	b.n	8017328 <__sflush_r+0xd4>
 8017358:	20400001 	.word	0x20400001

0801735c <_fflush_r>:
 801735c:	b538      	push	{r3, r4, r5, lr}
 801735e:	690b      	ldr	r3, [r1, #16]
 8017360:	4605      	mov	r5, r0
 8017362:	460c      	mov	r4, r1
 8017364:	b913      	cbnz	r3, 801736c <_fflush_r+0x10>
 8017366:	2500      	movs	r5, #0
 8017368:	4628      	mov	r0, r5
 801736a:	bd38      	pop	{r3, r4, r5, pc}
 801736c:	b118      	cbz	r0, 8017376 <_fflush_r+0x1a>
 801736e:	6a03      	ldr	r3, [r0, #32]
 8017370:	b90b      	cbnz	r3, 8017376 <_fflush_r+0x1a>
 8017372:	f7fe ffef 	bl	8016354 <__sinit>
 8017376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801737a:	2b00      	cmp	r3, #0
 801737c:	d0f3      	beq.n	8017366 <_fflush_r+0xa>
 801737e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017380:	07d0      	lsls	r0, r2, #31
 8017382:	d404      	bmi.n	801738e <_fflush_r+0x32>
 8017384:	0599      	lsls	r1, r3, #22
 8017386:	d402      	bmi.n	801738e <_fflush_r+0x32>
 8017388:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801738a:	f7ff faa8 	bl	80168de <__retarget_lock_acquire_recursive>
 801738e:	4628      	mov	r0, r5
 8017390:	4621      	mov	r1, r4
 8017392:	f7ff ff5f 	bl	8017254 <__sflush_r>
 8017396:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017398:	07da      	lsls	r2, r3, #31
 801739a:	4605      	mov	r5, r0
 801739c:	d4e4      	bmi.n	8017368 <_fflush_r+0xc>
 801739e:	89a3      	ldrh	r3, [r4, #12]
 80173a0:	059b      	lsls	r3, r3, #22
 80173a2:	d4e1      	bmi.n	8017368 <_fflush_r+0xc>
 80173a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80173a6:	f7ff fa9b 	bl	80168e0 <__retarget_lock_release_recursive>
 80173aa:	e7dd      	b.n	8017368 <_fflush_r+0xc>

080173ac <fiprintf>:
 80173ac:	b40e      	push	{r1, r2, r3}
 80173ae:	b503      	push	{r0, r1, lr}
 80173b0:	4601      	mov	r1, r0
 80173b2:	ab03      	add	r3, sp, #12
 80173b4:	4805      	ldr	r0, [pc, #20]	@ (80173cc <fiprintf+0x20>)
 80173b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80173ba:	6800      	ldr	r0, [r0, #0]
 80173bc:	9301      	str	r3, [sp, #4]
 80173be:	f7ff fca5 	bl	8016d0c <_vfiprintf_r>
 80173c2:	b002      	add	sp, #8
 80173c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80173c8:	b003      	add	sp, #12
 80173ca:	4770      	bx	lr
 80173cc:	20000598 	.word	0x20000598

080173d0 <__swhatbuf_r>:
 80173d0:	b570      	push	{r4, r5, r6, lr}
 80173d2:	460c      	mov	r4, r1
 80173d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80173d8:	2900      	cmp	r1, #0
 80173da:	b096      	sub	sp, #88	@ 0x58
 80173dc:	4615      	mov	r5, r2
 80173de:	461e      	mov	r6, r3
 80173e0:	da0d      	bge.n	80173fe <__swhatbuf_r+0x2e>
 80173e2:	89a3      	ldrh	r3, [r4, #12]
 80173e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80173e8:	f04f 0100 	mov.w	r1, #0
 80173ec:	bf14      	ite	ne
 80173ee:	2340      	movne	r3, #64	@ 0x40
 80173f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80173f4:	2000      	movs	r0, #0
 80173f6:	6031      	str	r1, [r6, #0]
 80173f8:	602b      	str	r3, [r5, #0]
 80173fa:	b016      	add	sp, #88	@ 0x58
 80173fc:	bd70      	pop	{r4, r5, r6, pc}
 80173fe:	466a      	mov	r2, sp
 8017400:	f000 f848 	bl	8017494 <_fstat_r>
 8017404:	2800      	cmp	r0, #0
 8017406:	dbec      	blt.n	80173e2 <__swhatbuf_r+0x12>
 8017408:	9901      	ldr	r1, [sp, #4]
 801740a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801740e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017412:	4259      	negs	r1, r3
 8017414:	4159      	adcs	r1, r3
 8017416:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801741a:	e7eb      	b.n	80173f4 <__swhatbuf_r+0x24>

0801741c <__smakebuf_r>:
 801741c:	898b      	ldrh	r3, [r1, #12]
 801741e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017420:	079d      	lsls	r5, r3, #30
 8017422:	4606      	mov	r6, r0
 8017424:	460c      	mov	r4, r1
 8017426:	d507      	bpl.n	8017438 <__smakebuf_r+0x1c>
 8017428:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801742c:	6023      	str	r3, [r4, #0]
 801742e:	6123      	str	r3, [r4, #16]
 8017430:	2301      	movs	r3, #1
 8017432:	6163      	str	r3, [r4, #20]
 8017434:	b003      	add	sp, #12
 8017436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017438:	ab01      	add	r3, sp, #4
 801743a:	466a      	mov	r2, sp
 801743c:	f7ff ffc8 	bl	80173d0 <__swhatbuf_r>
 8017440:	9f00      	ldr	r7, [sp, #0]
 8017442:	4605      	mov	r5, r0
 8017444:	4639      	mov	r1, r7
 8017446:	4630      	mov	r0, r6
 8017448:	f7fe fd52 	bl	8015ef0 <_malloc_r>
 801744c:	b948      	cbnz	r0, 8017462 <__smakebuf_r+0x46>
 801744e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017452:	059a      	lsls	r2, r3, #22
 8017454:	d4ee      	bmi.n	8017434 <__smakebuf_r+0x18>
 8017456:	f023 0303 	bic.w	r3, r3, #3
 801745a:	f043 0302 	orr.w	r3, r3, #2
 801745e:	81a3      	strh	r3, [r4, #12]
 8017460:	e7e2      	b.n	8017428 <__smakebuf_r+0xc>
 8017462:	89a3      	ldrh	r3, [r4, #12]
 8017464:	6020      	str	r0, [r4, #0]
 8017466:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801746a:	81a3      	strh	r3, [r4, #12]
 801746c:	9b01      	ldr	r3, [sp, #4]
 801746e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017472:	b15b      	cbz	r3, 801748c <__smakebuf_r+0x70>
 8017474:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017478:	4630      	mov	r0, r6
 801747a:	f000 f81d 	bl	80174b8 <_isatty_r>
 801747e:	b128      	cbz	r0, 801748c <__smakebuf_r+0x70>
 8017480:	89a3      	ldrh	r3, [r4, #12]
 8017482:	f023 0303 	bic.w	r3, r3, #3
 8017486:	f043 0301 	orr.w	r3, r3, #1
 801748a:	81a3      	strh	r3, [r4, #12]
 801748c:	89a3      	ldrh	r3, [r4, #12]
 801748e:	431d      	orrs	r5, r3
 8017490:	81a5      	strh	r5, [r4, #12]
 8017492:	e7cf      	b.n	8017434 <__smakebuf_r+0x18>

08017494 <_fstat_r>:
 8017494:	b538      	push	{r3, r4, r5, lr}
 8017496:	4d07      	ldr	r5, [pc, #28]	@ (80174b4 <_fstat_r+0x20>)
 8017498:	2300      	movs	r3, #0
 801749a:	4604      	mov	r4, r0
 801749c:	4608      	mov	r0, r1
 801749e:	4611      	mov	r1, r2
 80174a0:	602b      	str	r3, [r5, #0]
 80174a2:	f7eb fd9b 	bl	8002fdc <_fstat>
 80174a6:	1c43      	adds	r3, r0, #1
 80174a8:	d102      	bne.n	80174b0 <_fstat_r+0x1c>
 80174aa:	682b      	ldr	r3, [r5, #0]
 80174ac:	b103      	cbz	r3, 80174b0 <_fstat_r+0x1c>
 80174ae:	6023      	str	r3, [r4, #0]
 80174b0:	bd38      	pop	{r3, r4, r5, pc}
 80174b2:	bf00      	nop
 80174b4:	2000ec7c 	.word	0x2000ec7c

080174b8 <_isatty_r>:
 80174b8:	b538      	push	{r3, r4, r5, lr}
 80174ba:	4d06      	ldr	r5, [pc, #24]	@ (80174d4 <_isatty_r+0x1c>)
 80174bc:	2300      	movs	r3, #0
 80174be:	4604      	mov	r4, r0
 80174c0:	4608      	mov	r0, r1
 80174c2:	602b      	str	r3, [r5, #0]
 80174c4:	f7eb fd9a 	bl	8002ffc <_isatty>
 80174c8:	1c43      	adds	r3, r0, #1
 80174ca:	d102      	bne.n	80174d2 <_isatty_r+0x1a>
 80174cc:	682b      	ldr	r3, [r5, #0]
 80174ce:	b103      	cbz	r3, 80174d2 <_isatty_r+0x1a>
 80174d0:	6023      	str	r3, [r4, #0]
 80174d2:	bd38      	pop	{r3, r4, r5, pc}
 80174d4:	2000ec7c 	.word	0x2000ec7c

080174d8 <abort>:
 80174d8:	b508      	push	{r3, lr}
 80174da:	2006      	movs	r0, #6
 80174dc:	f000 f82c 	bl	8017538 <raise>
 80174e0:	2001      	movs	r0, #1
 80174e2:	f7eb fd2b 	bl	8002f3c <_exit>

080174e6 <_raise_r>:
 80174e6:	291f      	cmp	r1, #31
 80174e8:	b538      	push	{r3, r4, r5, lr}
 80174ea:	4605      	mov	r5, r0
 80174ec:	460c      	mov	r4, r1
 80174ee:	d904      	bls.n	80174fa <_raise_r+0x14>
 80174f0:	2316      	movs	r3, #22
 80174f2:	6003      	str	r3, [r0, #0]
 80174f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80174f8:	bd38      	pop	{r3, r4, r5, pc}
 80174fa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80174fc:	b112      	cbz	r2, 8017504 <_raise_r+0x1e>
 80174fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017502:	b94b      	cbnz	r3, 8017518 <_raise_r+0x32>
 8017504:	4628      	mov	r0, r5
 8017506:	f000 f831 	bl	801756c <_getpid_r>
 801750a:	4622      	mov	r2, r4
 801750c:	4601      	mov	r1, r0
 801750e:	4628      	mov	r0, r5
 8017510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017514:	f000 b818 	b.w	8017548 <_kill_r>
 8017518:	2b01      	cmp	r3, #1
 801751a:	d00a      	beq.n	8017532 <_raise_r+0x4c>
 801751c:	1c59      	adds	r1, r3, #1
 801751e:	d103      	bne.n	8017528 <_raise_r+0x42>
 8017520:	2316      	movs	r3, #22
 8017522:	6003      	str	r3, [r0, #0]
 8017524:	2001      	movs	r0, #1
 8017526:	e7e7      	b.n	80174f8 <_raise_r+0x12>
 8017528:	2100      	movs	r1, #0
 801752a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801752e:	4620      	mov	r0, r4
 8017530:	4798      	blx	r3
 8017532:	2000      	movs	r0, #0
 8017534:	e7e0      	b.n	80174f8 <_raise_r+0x12>
	...

08017538 <raise>:
 8017538:	4b02      	ldr	r3, [pc, #8]	@ (8017544 <raise+0xc>)
 801753a:	4601      	mov	r1, r0
 801753c:	6818      	ldr	r0, [r3, #0]
 801753e:	f7ff bfd2 	b.w	80174e6 <_raise_r>
 8017542:	bf00      	nop
 8017544:	20000598 	.word	0x20000598

08017548 <_kill_r>:
 8017548:	b538      	push	{r3, r4, r5, lr}
 801754a:	4d07      	ldr	r5, [pc, #28]	@ (8017568 <_kill_r+0x20>)
 801754c:	2300      	movs	r3, #0
 801754e:	4604      	mov	r4, r0
 8017550:	4608      	mov	r0, r1
 8017552:	4611      	mov	r1, r2
 8017554:	602b      	str	r3, [r5, #0]
 8017556:	f7eb fce1 	bl	8002f1c <_kill>
 801755a:	1c43      	adds	r3, r0, #1
 801755c:	d102      	bne.n	8017564 <_kill_r+0x1c>
 801755e:	682b      	ldr	r3, [r5, #0]
 8017560:	b103      	cbz	r3, 8017564 <_kill_r+0x1c>
 8017562:	6023      	str	r3, [r4, #0]
 8017564:	bd38      	pop	{r3, r4, r5, pc}
 8017566:	bf00      	nop
 8017568:	2000ec7c 	.word	0x2000ec7c

0801756c <_getpid_r>:
 801756c:	f7eb bcce 	b.w	8002f0c <_getpid>

08017570 <_init>:
 8017570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017572:	bf00      	nop
 8017574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017576:	bc08      	pop	{r3}
 8017578:	469e      	mov	lr, r3
 801757a:	4770      	bx	lr

0801757c <_fini>:
 801757c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801757e:	bf00      	nop
 8017580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017582:	bc08      	pop	{r3}
 8017584:	469e      	mov	lr, r3
 8017586:	4770      	bx	lr
