
BAUROV-OTOPILOT-Drivers1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000177d0  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fc0  080179d0  080179d0  000189d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018990  08018990  0001a6f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08018990  08018990  00019990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018998  08018998  0001a6f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08018998  08018998  00019998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080189a4  080189a4  000199a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000006f4  20000000  080189a8  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e71c  200006f8  0801909c  0001a6f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000ee14  0801909c  0001ae14  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001a6f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026075  00000000  00000000  0001a722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005490  00000000  00000000  00040797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f38  00000000  00000000  00045c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001833  00000000  00000000  00047b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f529  00000000  00000000  00049393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027aa2  00000000  00000000  000788bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011747c  00000000  00000000  000a035e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001b77da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009018  00000000  00000000  001b7850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  001c0868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200006f8 	.word	0x200006f8
 800021c:	00000000 	.word	0x00000000
 8000220:	080179b8 	.word	0x080179b8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200006fc 	.word	0x200006fc
 800023c:	080179b8 	.word	0x080179b8

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800032e:	f000 b9d3 	b.w	80006d8 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003c4:	f000 b988 	b.w	80006d8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	468e      	mov	lr, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	4688      	mov	r8, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d962      	bls.n	80004bc <__udivmoddi4+0xdc>
 80003f6:	fab2 f682 	clz	r6, r2
 80003fa:	b14e      	cbz	r6, 8000410 <__udivmoddi4+0x30>
 80003fc:	f1c6 0320 	rsb	r3, r6, #32
 8000400:	fa01 f806 	lsl.w	r8, r1, r6
 8000404:	fa20 f303 	lsr.w	r3, r0, r3
 8000408:	40b7      	lsls	r7, r6
 800040a:	ea43 0808 	orr.w	r8, r3, r8
 800040e:	40b4      	lsls	r4, r6
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	fa1f fc87 	uxth.w	ip, r7
 8000418:	fbb8 f1fe 	udiv	r1, r8, lr
 800041c:	0c23      	lsrs	r3, r4, #16
 800041e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fb01 f20c 	mul.w	r2, r1, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d909      	bls.n	8000442 <__udivmoddi4+0x62>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000434:	f080 80ea 	bcs.w	800060c <__udivmoddi4+0x22c>
 8000438:	429a      	cmp	r2, r3
 800043a:	f240 80e7 	bls.w	800060c <__udivmoddi4+0x22c>
 800043e:	3902      	subs	r1, #2
 8000440:	443b      	add	r3, r7
 8000442:	1a9a      	subs	r2, r3, r2
 8000444:	b2a3      	uxth	r3, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000452:	fb00 fc0c 	mul.w	ip, r0, ip
 8000456:	459c      	cmp	ip, r3
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x8e>
 800045a:	18fb      	adds	r3, r7, r3
 800045c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000460:	f080 80d6 	bcs.w	8000610 <__udivmoddi4+0x230>
 8000464:	459c      	cmp	ip, r3
 8000466:	f240 80d3 	bls.w	8000610 <__udivmoddi4+0x230>
 800046a:	443b      	add	r3, r7
 800046c:	3802      	subs	r0, #2
 800046e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000472:	eba3 030c 	sub.w	r3, r3, ip
 8000476:	2100      	movs	r1, #0
 8000478:	b11d      	cbz	r5, 8000482 <__udivmoddi4+0xa2>
 800047a:	40f3      	lsrs	r3, r6
 800047c:	2200      	movs	r2, #0
 800047e:	e9c5 3200 	strd	r3, r2, [r5]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d905      	bls.n	8000496 <__udivmoddi4+0xb6>
 800048a:	b10d      	cbz	r5, 8000490 <__udivmoddi4+0xb0>
 800048c:	e9c5 0100 	strd	r0, r1, [r5]
 8000490:	2100      	movs	r1, #0
 8000492:	4608      	mov	r0, r1
 8000494:	e7f5      	b.n	8000482 <__udivmoddi4+0xa2>
 8000496:	fab3 f183 	clz	r1, r3
 800049a:	2900      	cmp	r1, #0
 800049c:	d146      	bne.n	800052c <__udivmoddi4+0x14c>
 800049e:	4573      	cmp	r3, lr
 80004a0:	d302      	bcc.n	80004a8 <__udivmoddi4+0xc8>
 80004a2:	4282      	cmp	r2, r0
 80004a4:	f200 8105 	bhi.w	80006b2 <__udivmoddi4+0x2d2>
 80004a8:	1a84      	subs	r4, r0, r2
 80004aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80004ae:	2001      	movs	r0, #1
 80004b0:	4690      	mov	r8, r2
 80004b2:	2d00      	cmp	r5, #0
 80004b4:	d0e5      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004b6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ba:	e7e2      	b.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	2a00      	cmp	r2, #0
 80004be:	f000 8090 	beq.w	80005e2 <__udivmoddi4+0x202>
 80004c2:	fab2 f682 	clz	r6, r2
 80004c6:	2e00      	cmp	r6, #0
 80004c8:	f040 80a4 	bne.w	8000614 <__udivmoddi4+0x234>
 80004cc:	1a8a      	subs	r2, r1, r2
 80004ce:	0c03      	lsrs	r3, r0, #16
 80004d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004d4:	b280      	uxth	r0, r0
 80004d6:	b2bc      	uxth	r4, r7
 80004d8:	2101      	movs	r1, #1
 80004da:	fbb2 fcfe 	udiv	ip, r2, lr
 80004de:	fb0e 221c 	mls	r2, lr, ip, r2
 80004e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004e6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ea:	429a      	cmp	r2, r3
 80004ec:	d907      	bls.n	80004fe <__udivmoddi4+0x11e>
 80004ee:	18fb      	adds	r3, r7, r3
 80004f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x11c>
 80004f6:	429a      	cmp	r2, r3
 80004f8:	f200 80e0 	bhi.w	80006bc <__udivmoddi4+0x2dc>
 80004fc:	46c4      	mov	ip, r8
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	fbb3 f2fe 	udiv	r2, r3, lr
 8000504:	fb0e 3312 	mls	r3, lr, r2, r3
 8000508:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800050c:	fb02 f404 	mul.w	r4, r2, r4
 8000510:	429c      	cmp	r4, r3
 8000512:	d907      	bls.n	8000524 <__udivmoddi4+0x144>
 8000514:	18fb      	adds	r3, r7, r3
 8000516:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800051a:	d202      	bcs.n	8000522 <__udivmoddi4+0x142>
 800051c:	429c      	cmp	r4, r3
 800051e:	f200 80ca 	bhi.w	80006b6 <__udivmoddi4+0x2d6>
 8000522:	4602      	mov	r2, r0
 8000524:	1b1b      	subs	r3, r3, r4
 8000526:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800052a:	e7a5      	b.n	8000478 <__udivmoddi4+0x98>
 800052c:	f1c1 0620 	rsb	r6, r1, #32
 8000530:	408b      	lsls	r3, r1
 8000532:	fa22 f706 	lsr.w	r7, r2, r6
 8000536:	431f      	orrs	r7, r3
 8000538:	fa0e f401 	lsl.w	r4, lr, r1
 800053c:	fa20 f306 	lsr.w	r3, r0, r6
 8000540:	fa2e fe06 	lsr.w	lr, lr, r6
 8000544:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000548:	4323      	orrs	r3, r4
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	fa1f fc87 	uxth.w	ip, r7
 8000552:	fbbe f0f9 	udiv	r0, lr, r9
 8000556:	0c1c      	lsrs	r4, r3, #16
 8000558:	fb09 ee10 	mls	lr, r9, r0, lr
 800055c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000560:	fb00 fe0c 	mul.w	lr, r0, ip
 8000564:	45a6      	cmp	lr, r4
 8000566:	fa02 f201 	lsl.w	r2, r2, r1
 800056a:	d909      	bls.n	8000580 <__udivmoddi4+0x1a0>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000572:	f080 809c 	bcs.w	80006ae <__udivmoddi4+0x2ce>
 8000576:	45a6      	cmp	lr, r4
 8000578:	f240 8099 	bls.w	80006ae <__udivmoddi4+0x2ce>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	eba4 040e 	sub.w	r4, r4, lr
 8000584:	fa1f fe83 	uxth.w	lr, r3
 8000588:	fbb4 f3f9 	udiv	r3, r4, r9
 800058c:	fb09 4413 	mls	r4, r9, r3, r4
 8000590:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000594:	fb03 fc0c 	mul.w	ip, r3, ip
 8000598:	45a4      	cmp	ip, r4
 800059a:	d908      	bls.n	80005ae <__udivmoddi4+0x1ce>
 800059c:	193c      	adds	r4, r7, r4
 800059e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80005a2:	f080 8082 	bcs.w	80006aa <__udivmoddi4+0x2ca>
 80005a6:	45a4      	cmp	ip, r4
 80005a8:	d97f      	bls.n	80006aa <__udivmoddi4+0x2ca>
 80005aa:	3b02      	subs	r3, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005b2:	eba4 040c 	sub.w	r4, r4, ip
 80005b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ba:	4564      	cmp	r4, ip
 80005bc:	4673      	mov	r3, lr
 80005be:	46e1      	mov	r9, ip
 80005c0:	d362      	bcc.n	8000688 <__udivmoddi4+0x2a8>
 80005c2:	d05f      	beq.n	8000684 <__udivmoddi4+0x2a4>
 80005c4:	b15d      	cbz	r5, 80005de <__udivmoddi4+0x1fe>
 80005c6:	ebb8 0203 	subs.w	r2, r8, r3
 80005ca:	eb64 0409 	sbc.w	r4, r4, r9
 80005ce:	fa04 f606 	lsl.w	r6, r4, r6
 80005d2:	fa22 f301 	lsr.w	r3, r2, r1
 80005d6:	431e      	orrs	r6, r3
 80005d8:	40cc      	lsrs	r4, r1
 80005da:	e9c5 6400 	strd	r6, r4, [r5]
 80005de:	2100      	movs	r1, #0
 80005e0:	e74f      	b.n	8000482 <__udivmoddi4+0xa2>
 80005e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005e6:	0c01      	lsrs	r1, r0, #16
 80005e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005ec:	b280      	uxth	r0, r0
 80005ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005f2:	463b      	mov	r3, r7
 80005f4:	4638      	mov	r0, r7
 80005f6:	463c      	mov	r4, r7
 80005f8:	46b8      	mov	r8, r7
 80005fa:	46be      	mov	lr, r7
 80005fc:	2620      	movs	r6, #32
 80005fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000602:	eba2 0208 	sub.w	r2, r2, r8
 8000606:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800060a:	e766      	b.n	80004da <__udivmoddi4+0xfa>
 800060c:	4601      	mov	r1, r0
 800060e:	e718      	b.n	8000442 <__udivmoddi4+0x62>
 8000610:	4610      	mov	r0, r2
 8000612:	e72c      	b.n	800046e <__udivmoddi4+0x8e>
 8000614:	f1c6 0220 	rsb	r2, r6, #32
 8000618:	fa2e f302 	lsr.w	r3, lr, r2
 800061c:	40b7      	lsls	r7, r6
 800061e:	40b1      	lsls	r1, r6
 8000620:	fa20 f202 	lsr.w	r2, r0, r2
 8000624:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000628:	430a      	orrs	r2, r1
 800062a:	fbb3 f8fe 	udiv	r8, r3, lr
 800062e:	b2bc      	uxth	r4, r7
 8000630:	fb0e 3318 	mls	r3, lr, r8, r3
 8000634:	0c11      	lsrs	r1, r2, #16
 8000636:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800063a:	fb08 f904 	mul.w	r9, r8, r4
 800063e:	40b0      	lsls	r0, r6
 8000640:	4589      	cmp	r9, r1
 8000642:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000646:	b280      	uxth	r0, r0
 8000648:	d93e      	bls.n	80006c8 <__udivmoddi4+0x2e8>
 800064a:	1879      	adds	r1, r7, r1
 800064c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000650:	d201      	bcs.n	8000656 <__udivmoddi4+0x276>
 8000652:	4589      	cmp	r9, r1
 8000654:	d81f      	bhi.n	8000696 <__udivmoddi4+0x2b6>
 8000656:	eba1 0109 	sub.w	r1, r1, r9
 800065a:	fbb1 f9fe 	udiv	r9, r1, lr
 800065e:	fb09 f804 	mul.w	r8, r9, r4
 8000662:	fb0e 1119 	mls	r1, lr, r9, r1
 8000666:	b292      	uxth	r2, r2
 8000668:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800066c:	4542      	cmp	r2, r8
 800066e:	d229      	bcs.n	80006c4 <__udivmoddi4+0x2e4>
 8000670:	18ba      	adds	r2, r7, r2
 8000672:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000676:	d2c4      	bcs.n	8000602 <__udivmoddi4+0x222>
 8000678:	4542      	cmp	r2, r8
 800067a:	d2c2      	bcs.n	8000602 <__udivmoddi4+0x222>
 800067c:	f1a9 0102 	sub.w	r1, r9, #2
 8000680:	443a      	add	r2, r7
 8000682:	e7be      	b.n	8000602 <__udivmoddi4+0x222>
 8000684:	45f0      	cmp	r8, lr
 8000686:	d29d      	bcs.n	80005c4 <__udivmoddi4+0x1e4>
 8000688:	ebbe 0302 	subs.w	r3, lr, r2
 800068c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000690:	3801      	subs	r0, #1
 8000692:	46e1      	mov	r9, ip
 8000694:	e796      	b.n	80005c4 <__udivmoddi4+0x1e4>
 8000696:	eba7 0909 	sub.w	r9, r7, r9
 800069a:	4449      	add	r1, r9
 800069c:	f1a8 0c02 	sub.w	ip, r8, #2
 80006a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a4:	fb09 f804 	mul.w	r8, r9, r4
 80006a8:	e7db      	b.n	8000662 <__udivmoddi4+0x282>
 80006aa:	4673      	mov	r3, lr
 80006ac:	e77f      	b.n	80005ae <__udivmoddi4+0x1ce>
 80006ae:	4650      	mov	r0, sl
 80006b0:	e766      	b.n	8000580 <__udivmoddi4+0x1a0>
 80006b2:	4608      	mov	r0, r1
 80006b4:	e6fd      	b.n	80004b2 <__udivmoddi4+0xd2>
 80006b6:	443b      	add	r3, r7
 80006b8:	3a02      	subs	r2, #2
 80006ba:	e733      	b.n	8000524 <__udivmoddi4+0x144>
 80006bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006c0:	443b      	add	r3, r7
 80006c2:	e71c      	b.n	80004fe <__udivmoddi4+0x11e>
 80006c4:	4649      	mov	r1, r9
 80006c6:	e79c      	b.n	8000602 <__udivmoddi4+0x222>
 80006c8:	eba1 0109 	sub.w	r1, r1, r9
 80006cc:	46c4      	mov	ip, r8
 80006ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80006d2:	fb09 f804 	mul.w	r8, r9, r4
 80006d6:	e7c4      	b.n	8000662 <__udivmoddi4+0x282>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <AVG_Filter_s16>:
MED_Filter_s16_TypeDef_T MED_IMU_ACC_X, MED_IMU_ACC_Y, MED_IMU_ACC_Z, MED_IMU_GYR_X, MED_IMU_GYR_Y, MED_IMU_GYR_Z, MED_IMU_MAG_X, MED_IMU_MAG_Y, MED_IMU_MAG_Z;

AVG_Filter_u32_TypeDef_T AVG_PressureSensor_1;
MED_Filter_u32_TypeDef_T MED_PressureSensor_1;

void AVG_Filter_s16(AVG_Filter_s16_TypeDef_T *handle, int16_t data){
 80006dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80006e0:	b086      	sub	sp, #24
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
 80006e6:	460b      	mov	r3, r1
 80006e8:	807b      	strh	r3, [r7, #2]
	int64_t sum = 0;
 80006ea:	f04f 0200 	mov.w	r2, #0
 80006ee:	f04f 0300 	mov.w	r3, #0
 80006f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	handle->AVG_FilterBuffer[handle->AVG_FilterCounter++] = data;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	899b      	ldrh	r3, [r3, #12]
 80006fa:	1c5a      	adds	r2, r3, #1
 80006fc:	b291      	uxth	r1, r2
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	8191      	strh	r1, [r2, #12]
 8000702:	4619      	mov	r1, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	887a      	ldrh	r2, [r7, #2]
 8000708:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	if(handle->AVG_FilterCounter == AVG_FilterBufferSize){
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	899b      	ldrh	r3, [r3, #12]
 8000710:	2b04      	cmp	r3, #4
 8000712:	d13e      	bne.n	8000792 <AVG_Filter_s16+0xb6>
		for(uint8_t i=0; i<AVG_FilterBufferSize; i++)
 8000714:	2300      	movs	r3, #0
 8000716:	73fb      	strb	r3, [r7, #15]
 8000718:	e012      	b.n	8000740 <AVG_Filter_s16+0x64>
			sum += handle->AVG_FilterBuffer[i];
 800071a:	7bfa      	ldrb	r2, [r7, #15]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000722:	b21b      	sxth	r3, r3
 8000724:	17da      	asrs	r2, r3, #31
 8000726:	461c      	mov	r4, r3
 8000728:	4615      	mov	r5, r2
 800072a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800072e:	eb12 0804 	adds.w	r8, r2, r4
 8000732:	eb43 0905 	adc.w	r9, r3, r5
 8000736:	e9c7 8904 	strd	r8, r9, [r7, #16]
		for(uint8_t i=0; i<AVG_FilterBufferSize; i++)
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	3301      	adds	r3, #1
 800073e:	73fb      	strb	r3, [r7, #15]
 8000740:	7bfb      	ldrb	r3, [r7, #15]
 8000742:	2b03      	cmp	r3, #3
 8000744:	d9e9      	bls.n	800071a <AVG_Filter_s16+0x3e>

		handle->AVG_FilteredData = (int16_t)(sum/AVG_FilterBufferSize);
 8000746:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800074a:	2b00      	cmp	r3, #0
 800074c:	da05      	bge.n	800075a <AVG_Filter_s16+0x7e>
 800074e:	f112 0a03 	adds.w	sl, r2, #3
 8000752:	f143 0b00 	adc.w	fp, r3, #0
 8000756:	4652      	mov	r2, sl
 8000758:	465b      	mov	r3, fp
 800075a:	f04f 0000 	mov.w	r0, #0
 800075e:	f04f 0100 	mov.w	r1, #0
 8000762:	0890      	lsrs	r0, r2, #2
 8000764:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8000768:	1099      	asrs	r1, r3, #2
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	b212      	sxth	r2, r2
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	811a      	strh	r2, [r3, #8]
		handle->AVG_FilteredPreData = handle->AVG_FilteredData;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	815a      	strh	r2, [r3, #10]
		handle->AVG_FilterCounter = 0;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2200      	movs	r2, #0
 8000782:	819a      	strh	r2, [r3, #12]
		memset(handle->AVG_FilterBuffer, 0, sizeof(handle->AVG_FilterBuffer));
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2208      	movs	r2, #8
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f016 fa0c 	bl	8016ba8 <memset>
	}else{
		handle->AVG_FilteredData=handle->AVG_FilteredPreData;
	}
}
 8000790:	e004      	b.n	800079c <AVG_Filter_s16+0xc0>
		handle->AVG_FilteredData=handle->AVG_FilteredPreData;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	811a      	strh	r2, [r3, #8]
}
 800079c:	bf00      	nop
 800079e:	3718      	adds	r7, #24
 80007a0:	46bd      	mov	sp, r7
 80007a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080007a6 <MED_Filter_SortArray_s16>:

static void MED_Filter_SortArray_s16(int16_t* arr, uint8_t size) {
 80007a6:	b480      	push	{r7}
 80007a8:	b085      	sub	sp, #20
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
 80007ae:	460b      	mov	r3, r1
 80007b0:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < size - 1; i++) {
 80007b2:	2300      	movs	r3, #0
 80007b4:	73fb      	strb	r3, [r7, #15]
 80007b6:	e032      	b.n	800081e <MED_Filter_SortArray_s16+0x78>
        for (uint8_t j = i + 1; j < size; j++) {
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	3301      	adds	r3, #1
 80007bc:	73bb      	strb	r3, [r7, #14]
 80007be:	e027      	b.n	8000810 <MED_Filter_SortArray_s16+0x6a>
            if (arr[j] < arr[i]) {
 80007c0:	7bbb      	ldrb	r3, [r7, #14]
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	4413      	add	r3, r2
 80007c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	6879      	ldr	r1, [r7, #4]
 80007d2:	440b      	add	r3, r1
 80007d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007d8:	429a      	cmp	r2, r3
 80007da:	da16      	bge.n	800080a <MED_Filter_SortArray_s16+0x64>
                int16_t tmp = arr[i];
 80007dc:	7bfb      	ldrb	r3, [r7, #15]
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	4413      	add	r3, r2
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	81bb      	strh	r3, [r7, #12]
                arr[i] = arr[j];
 80007e8:	7bbb      	ldrb	r3, [r7, #14]
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	441a      	add	r2, r3
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	6879      	ldr	r1, [r7, #4]
 80007f6:	440b      	add	r3, r1
 80007f8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80007fc:	801a      	strh	r2, [r3, #0]
                arr[j] = tmp;
 80007fe:	7bbb      	ldrb	r3, [r7, #14]
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	4413      	add	r3, r2
 8000806:	89ba      	ldrh	r2, [r7, #12]
 8000808:	801a      	strh	r2, [r3, #0]
        for (uint8_t j = i + 1; j < size; j++) {
 800080a:	7bbb      	ldrb	r3, [r7, #14]
 800080c:	3301      	adds	r3, #1
 800080e:	73bb      	strb	r3, [r7, #14]
 8000810:	7bba      	ldrb	r2, [r7, #14]
 8000812:	78fb      	ldrb	r3, [r7, #3]
 8000814:	429a      	cmp	r2, r3
 8000816:	d3d3      	bcc.n	80007c0 <MED_Filter_SortArray_s16+0x1a>
    for (uint8_t i = 0; i < size - 1; i++) {
 8000818:	7bfb      	ldrb	r3, [r7, #15]
 800081a:	3301      	adds	r3, #1
 800081c:	73fb      	strb	r3, [r7, #15]
 800081e:	7bfa      	ldrb	r2, [r7, #15]
 8000820:	78fb      	ldrb	r3, [r7, #3]
 8000822:	3b01      	subs	r3, #1
 8000824:	429a      	cmp	r2, r3
 8000826:	dbc7      	blt.n	80007b8 <MED_Filter_SortArray_s16+0x12>
            }
        }
    }
}
 8000828:	bf00      	nop
 800082a:	bf00      	nop
 800082c:	3714      	adds	r7, #20
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <MED_Filter_s16>:

void MED_Filter_s16(MED_Filter_s16_TypeDef_T *handle, int16_t data){
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
 800083e:	460b      	mov	r3, r1
 8000840:	807b      	strh	r3, [r7, #2]
	handle->MED_FilterBuffer[handle->MED_FilterCounter++] = data;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	89db      	ldrh	r3, [r3, #14]
 8000846:	1c5a      	adds	r2, r3, #1
 8000848:	b291      	uxth	r1, r2
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	81d1      	strh	r1, [r2, #14]
 800084e:	4619      	mov	r1, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	887a      	ldrh	r2, [r7, #2]
 8000854:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	if(handle->MED_FilterCounter == MED_FilterBufferSize){
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	89db      	ldrh	r3, [r3, #14]
 800085c:	2b05      	cmp	r3, #5
 800085e:	d118      	bne.n	8000892 <MED_Filter_s16+0x5c>
		MED_Filter_SortArray_s16(handle->MED_FilterBuffer, MED_FilterBufferSize);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2105      	movs	r1, #5
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff9e 	bl	80007a6 <MED_Filter_SortArray_s16>
		handle->MED_FilteredData = handle->MED_FilterBuffer[(MED_FilterBufferSize-1)/2];
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	815a      	strh	r2, [r3, #10]
		handle->MED_FilteredPreData = handle->MED_FilteredData;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	819a      	strh	r2, [r3, #12]
		handle->MED_FilterCounter = 0;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2200      	movs	r2, #0
 8000882:	81da      	strh	r2, [r3, #14]
		memset(handle->MED_FilterBuffer, 0, sizeof(handle->MED_FilterBuffer));
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	220a      	movs	r2, #10
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f016 f98c 	bl	8016ba8 <memset>
	}else{
		handle->MED_FilteredData=handle->MED_FilteredPreData;
	}
}
 8000890:	e004      	b.n	800089c <MED_Filter_s16+0x66>
		handle->MED_FilteredData=handle->MED_FilteredPreData;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	815a      	strh	r2, [r3, #10]
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <I2C_Init>:
 * GLOBAL FUNCTIONS
 *********************************************************/
/** Brief description which ends at this dot. Details follow
 *  here.
 */
void I2C_Init(void *handle, uint8_t I2CNo){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	460b      	mov	r3, r1
 80008ae:	70fb      	strb	r3, [r7, #3]
	I2C_HandleTypeDef_T *i2c;
	i2c = I2C_GetModule(I2CNo);
 80008b0:	78fb      	ldrb	r3, [r7, #3]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 f862 	bl	800097c <I2C_GetModule>
 80008b8:	60f8      	str	r0, [r7, #12]
    i2c->handle = handle;
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	601a      	str	r2, [r3, #0]
}
 80008c0:	bf00      	nop
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <I2C_ReadWrite_Poll>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
I2C_ReturnTypeDef_T I2C_ReadWrite_Poll(uint8_t I2CNo, uint8_t DevAddress, uint8_t *txBuff, uint8_t txLenght, uint8_t *rxBuff, uint8_t rxLenght){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b088      	sub	sp, #32
 80008cc:	af02      	add	r7, sp, #8
 80008ce:	603a      	str	r2, [r7, #0]
 80008d0:	461a      	mov	r2, r3
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
 80008d6:	460b      	mov	r3, r1
 80008d8:	71bb      	strb	r3, [r7, #6]
 80008da:	4613      	mov	r3, r2
 80008dc:	717b      	strb	r3, [r7, #5]
	I2C_HandleTypeDef_T *i2c;
	HAL_StatusTypeDef res;
	uint8_t txAddr, rxAddr;
	txAddr = DevAddress<<1;
 80008de:	79bb      	ldrb	r3, [r7, #6]
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	75fb      	strb	r3, [r7, #23]
	rxAddr = ((DevAddress<<1) | 0x01);
 80008e4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	b25b      	sxtb	r3, r3
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	b25b      	sxtb	r3, r3
 80008f2:	75bb      	strb	r3, [r7, #22]
	i2c = I2C_GetModule(I2CNo);
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 f840 	bl	800097c <I2C_GetModule>
 80008fc:	6138      	str	r0, [r7, #16]
	if(rxLenght == 0){
 80008fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000902:	2b00      	cmp	r3, #0
 8000904:	d113      	bne.n	800092e <I2C_ReadWrite_Poll+0x66>
		res = HAL_I2C_Master_Transmit(i2c->handle , txAddr, txBuff, txLenght,100);
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	6818      	ldr	r0, [r3, #0]
 800090a:	7dfb      	ldrb	r3, [r7, #23]
 800090c:	b299      	uxth	r1, r3
 800090e:	797b      	ldrb	r3, [r7, #5]
 8000910:	b29b      	uxth	r3, r3
 8000912:	2264      	movs	r2, #100	@ 0x64
 8000914:	9200      	str	r2, [sp, #0]
 8000916:	683a      	ldr	r2, [r7, #0]
 8000918:	f003 fdc2 	bl	80044a0 <HAL_I2C_Master_Transmit>
 800091c:	4603      	mov	r3, r0
 800091e:	73fb      	strb	r3, [r7, #15]
		return res == I2C_ERROR;
 8000920:	7bfb      	ldrb	r3, [r7, #15]
 8000922:	2b01      	cmp	r3, #1
 8000924:	bf0c      	ite	eq
 8000926:	2301      	moveq	r3, #1
 8000928:	2300      	movne	r3, #0
 800092a:	b2db      	uxtb	r3, r3
 800092c:	e021      	b.n	8000972 <I2C_ReadWrite_Poll+0xaa>
	}else{
		HAL_I2C_Master_Transmit(i2c->handle , txAddr, txBuff, txLenght,100);
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	6818      	ldr	r0, [r3, #0]
 8000932:	7dfb      	ldrb	r3, [r7, #23]
 8000934:	b299      	uxth	r1, r3
 8000936:	797b      	ldrb	r3, [r7, #5]
 8000938:	b29b      	uxth	r3, r3
 800093a:	2264      	movs	r2, #100	@ 0x64
 800093c:	9200      	str	r2, [sp, #0]
 800093e:	683a      	ldr	r2, [r7, #0]
 8000940:	f003 fdae 	bl	80044a0 <HAL_I2C_Master_Transmit>
		HAL_Delay(1);
 8000944:	2001      	movs	r0, #1
 8000946:	f001 fe25 	bl	8002594 <HAL_Delay>
		res = HAL_I2C_Master_Receive(i2c->handle, rxAddr, rxBuff, rxLenght,100);
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	6818      	ldr	r0, [r3, #0]
 800094e:	7dbb      	ldrb	r3, [r7, #22]
 8000950:	b299      	uxth	r1, r3
 8000952:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000956:	b29b      	uxth	r3, r3
 8000958:	2264      	movs	r2, #100	@ 0x64
 800095a:	9200      	str	r2, [sp, #0]
 800095c:	6a3a      	ldr	r2, [r7, #32]
 800095e:	f003 feb7 	bl	80046d0 <HAL_I2C_Master_Receive>
 8000962:	4603      	mov	r3, r0
 8000964:	73fb      	strb	r3, [r7, #15]
		return res == I2C_ERROR;
 8000966:	7bfb      	ldrb	r3, [r7, #15]
 8000968:	2b01      	cmp	r3, #1
 800096a:	bf0c      	ite	eq
 800096c:	2301      	moveq	r3, #1
 800096e:	2300      	movne	r3, #0
 8000970:	b2db      	uxtb	r3, r3
	}
}
 8000972:	4618      	mov	r0, r3
 8000974:	3718      	adds	r7, #24
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <I2C_GetModule>:
 * PRIVATE FUNCTIONS
 *********************************************************/
/** Brief description which ends at this dot. Details follow
 *  here.
 */
I2C_HandleTypeDef_T* I2C_GetModule(uint8_t I2CNo){
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
	switch(I2CNo){
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	2b03      	cmp	r3, #3
 800098a:	d00a      	beq.n	80009a2 <I2C_GetModule+0x26>
 800098c:	2b03      	cmp	r3, #3
 800098e:	dc0a      	bgt.n	80009a6 <I2C_GetModule+0x2a>
 8000990:	2b01      	cmp	r3, #1
 8000992:	d002      	beq.n	800099a <I2C_GetModule+0x1e>
 8000994:	2b02      	cmp	r3, #2
 8000996:	d002      	beq.n	800099e <I2C_GetModule+0x22>
 8000998:	e005      	b.n	80009a6 <I2C_GetModule+0x2a>
		case I2CNO_1 : return &I2C_1; break;
 800099a:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <I2C_GetModule+0x38>)
 800099c:	e004      	b.n	80009a8 <I2C_GetModule+0x2c>
		case I2CNO_2 : return &I2C_2; break;
 800099e:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <I2C_GetModule+0x3c>)
 80009a0:	e002      	b.n	80009a8 <I2C_GetModule+0x2c>
		case I2CNO_3 : return &I2C_3; break;
 80009a2:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <I2C_GetModule+0x40>)
 80009a4:	e000      	b.n	80009a8 <I2C_GetModule+0x2c>
		default : return NULL; break;
 80009a6:	2300      	movs	r3, #0
	}
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	20000834 	.word	0x20000834
 80009b8:	2000083c 	.word	0x2000083c
 80009bc:	20000844 	.word	0x20000844

080009c0 <IMU_Init>:
#include "IMU.h"
#include "Filters.h"

IMU_TypeDef_T IMU_1;

void IMU_Init(IMU_TypeDef_T *ImuHandle, uint8_t ImuSensorNo, uint8_t IMU_I2CNO, uint8_t IMU_I2CAdress, void* ResetGPIOPort, uint16_t ResetGPIOPin){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af02      	add	r7, sp, #8
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	4608      	mov	r0, r1
 80009ca:	4611      	mov	r1, r2
 80009cc:	461a      	mov	r2, r3
 80009ce:	4603      	mov	r3, r0
 80009d0:	70fb      	strb	r3, [r7, #3]
 80009d2:	460b      	mov	r3, r1
 80009d4:	70bb      	strb	r3, [r7, #2]
 80009d6:	4613      	mov	r3, r2
 80009d8:	707b      	strb	r3, [r7, #1]
	BNO055_Sensor_T *imuSensor;
	imuSensor = IMU_GetSensorHandle(ImuSensorNo);
 80009da:	78fb      	ldrb	r3, [r7, #3]
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 f9dd 	bl	8000d9c <IMU_GetSensorHandle>
 80009e2:	60f8      	str	r0, [r7, #12]

	BNO055_Init(imuSensor, IMU_I2CNO, IMU_I2CAdress, ResetGPIOPort, ResetGPIOPin);
 80009e4:	787a      	ldrb	r2, [r7, #1]
 80009e6:	78b9      	ldrb	r1, [r7, #2]
 80009e8:	8bbb      	ldrh	r3, [r7, #28]
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	69bb      	ldr	r3, [r7, #24]
 80009ee:	68f8      	ldr	r0, [r7, #12]
 80009f0:	f000 fb49 	bl	8001086 <BNO055_Init>

	ImuHandle->CalcConst.ACC_1MpS2_LSB = imuSensor->CalcConst.ACC_1MpS2_LSB;
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80009f8:	ee07 3a90 	vmov	s15, r3
 80009fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	ImuHandle->CalcConst.GYR_1RPS_LSB  = imuSensor->CalcConst.GYR_1RPS_LSB;
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8000a0a:	ee07 3a90 	vmov	s15, r3
 8000a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	ImuHandle->CalcConst.MAG_1uT_LSB   = imuSensor->CalcConst.MAG_1uT_LSB;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000a1c:	ee07 3a90 	vmov	s15, r3
 8000a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

	HAL_Delay(25);
 8000a2a:	2019      	movs	r0, #25
 8000a2c:	f001 fdb2 	bl	8002594 <HAL_Delay>
}
 8000a30:	bf00      	nop
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <IMU_Execute>:

void IMU_Execute(IMU_TypeDef_T *ImuHandle, uint8_t ImuSensorNo){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	460b      	mov	r3, r1
 8000a42:	70fb      	strb	r3, [r7, #3]
	BNO055_Sensor_T *imuSensor;

	imuSensor = IMU_GetSensorHandle(ImuSensorNo);
 8000a44:	78fb      	ldrb	r3, [r7, #3]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 f9a8 	bl	8000d9c <IMU_GetSensorHandle>
 8000a4c:	60f8      	str	r0, [r7, #12]

	BNO055_Get_SysError(imuSensor);
 8000a4e:	68f8      	ldr	r0, [r7, #12]
 8000a50:	f000 fffe 	bl	8001a50 <BNO055_Get_SysError>
	BNO055_Get_ACC_Data(imuSensor);
 8000a54:	68f8      	ldr	r0, [r7, #12]
 8000a56:	f000 fe2e 	bl	80016b6 <BNO055_Get_ACC_Data>
	BNO055_Get_MAG_Data(imuSensor);
 8000a5a:	68f8      	ldr	r0, [r7, #12]
 8000a5c:	f000 feb1 	bl	80017c2 <BNO055_Get_MAG_Data>
	BNO055_Get_GYR_Data(imuSensor);
 8000a60:	68f8      	ldr	r0, [r7, #12]
 8000a62:	f000 ff04 	bl	800186e <BNO055_Get_GYR_Data>

	IMU_PopulateData(ImuHandle, ImuSensorNo);
 8000a66:	78fb      	ldrb	r3, [r7, #3]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f000 f95a 	bl	8000d24 <IMU_PopulateData>

	MED_Filter_s16(&MED_IMU_ACC_X, ImuHandle->AllRawData.Accelerometer.X_Axis);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a76:	4619      	mov	r1, r3
 8000a78:	4898      	ldr	r0, [pc, #608]	@ (8000cdc <IMU_Execute+0x2a4>)
 8000a7a:	f7ff fedc 	bl	8000836 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_ACC_X, MED_IMU_ACC_X.MED_FilteredData);
 8000a7e:	4b97      	ldr	r3, [pc, #604]	@ (8000cdc <IMU_Execute+0x2a4>)
 8000a80:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000a84:	4619      	mov	r1, r3
 8000a86:	4896      	ldr	r0, [pc, #600]	@ (8000ce0 <IMU_Execute+0x2a8>)
 8000a88:	f7ff fe28 	bl	80006dc <AVG_Filter_s16>
	MED_Filter_s16(&MED_IMU_ACC_Y, ImuHandle->AllRawData.Accelerometer.Y_Axis);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a92:	4619      	mov	r1, r3
 8000a94:	4893      	ldr	r0, [pc, #588]	@ (8000ce4 <IMU_Execute+0x2ac>)
 8000a96:	f7ff fece 	bl	8000836 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_ACC_Y, MED_IMU_ACC_Y.MED_FilteredData);
 8000a9a:	4b92      	ldr	r3, [pc, #584]	@ (8000ce4 <IMU_Execute+0x2ac>)
 8000a9c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4891      	ldr	r0, [pc, #580]	@ (8000ce8 <IMU_Execute+0x2b0>)
 8000aa4:	f7ff fe1a 	bl	80006dc <AVG_Filter_s16>
	MED_Filter_s16(&MED_IMU_ACC_Z, ImuHandle->AllRawData.Accelerometer.Z_Axis);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000aae:	4619      	mov	r1, r3
 8000ab0:	488e      	ldr	r0, [pc, #568]	@ (8000cec <IMU_Execute+0x2b4>)
 8000ab2:	f7ff fec0 	bl	8000836 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_ACC_Z, MED_IMU_ACC_Z.MED_FilteredData);
 8000ab6:	4b8d      	ldr	r3, [pc, #564]	@ (8000cec <IMU_Execute+0x2b4>)
 8000ab8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000abc:	4619      	mov	r1, r3
 8000abe:	488c      	ldr	r0, [pc, #560]	@ (8000cf0 <IMU_Execute+0x2b8>)
 8000ac0:	f7ff fe0c 	bl	80006dc <AVG_Filter_s16>
	MED_Filter_s16(&MED_IMU_GYR_X, ImuHandle->AllRawData.Gyroscope.X_Axis);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000aca:	4619      	mov	r1, r3
 8000acc:	4889      	ldr	r0, [pc, #548]	@ (8000cf4 <IMU_Execute+0x2bc>)
 8000ace:	f7ff feb2 	bl	8000836 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_GYR_X, MED_IMU_GYR_X.MED_FilteredData);
 8000ad2:	4b88      	ldr	r3, [pc, #544]	@ (8000cf4 <IMU_Execute+0x2bc>)
 8000ad4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4887      	ldr	r0, [pc, #540]	@ (8000cf8 <IMU_Execute+0x2c0>)
 8000adc:	f7ff fdfe 	bl	80006dc <AVG_Filter_s16>
	MED_Filter_s16(&MED_IMU_GYR_Y, ImuHandle->AllRawData.Gyroscope.Y_Axis);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4884      	ldr	r0, [pc, #528]	@ (8000cfc <IMU_Execute+0x2c4>)
 8000aea:	f7ff fea4 	bl	8000836 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_GYR_Y, MED_IMU_GYR_Y.MED_FilteredData);
 8000aee:	4b83      	ldr	r3, [pc, #524]	@ (8000cfc <IMU_Execute+0x2c4>)
 8000af0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000af4:	4619      	mov	r1, r3
 8000af6:	4882      	ldr	r0, [pc, #520]	@ (8000d00 <IMU_Execute+0x2c8>)
 8000af8:	f7ff fdf0 	bl	80006dc <AVG_Filter_s16>
	MED_Filter_s16(&MED_IMU_GYR_Z, ImuHandle->AllRawData.Gyroscope.Z_Axis);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000b02:	4619      	mov	r1, r3
 8000b04:	487f      	ldr	r0, [pc, #508]	@ (8000d04 <IMU_Execute+0x2cc>)
 8000b06:	f7ff fe96 	bl	8000836 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_GYR_Z, MED_IMU_GYR_Z.MED_FilteredData);
 8000b0a:	4b7e      	ldr	r3, [pc, #504]	@ (8000d04 <IMU_Execute+0x2cc>)
 8000b0c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000b10:	4619      	mov	r1, r3
 8000b12:	487d      	ldr	r0, [pc, #500]	@ (8000d08 <IMU_Execute+0x2d0>)
 8000b14:	f7ff fde2 	bl	80006dc <AVG_Filter_s16>
	MED_Filter_s16(&MED_IMU_MAG_X, ImuHandle->AllRawData.Magnetometer.X_Axis);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000b1e:	4619      	mov	r1, r3
 8000b20:	487a      	ldr	r0, [pc, #488]	@ (8000d0c <IMU_Execute+0x2d4>)
 8000b22:	f7ff fe88 	bl	8000836 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_MAG_X, MED_IMU_MAG_X.MED_FilteredData);
 8000b26:	4b79      	ldr	r3, [pc, #484]	@ (8000d0c <IMU_Execute+0x2d4>)
 8000b28:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4878      	ldr	r0, [pc, #480]	@ (8000d10 <IMU_Execute+0x2d8>)
 8000b30:	f7ff fdd4 	bl	80006dc <AVG_Filter_s16>
	MED_Filter_s16(&MED_IMU_MAG_Y, ImuHandle->AllRawData.Magnetometer.Y_Axis);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4875      	ldr	r0, [pc, #468]	@ (8000d14 <IMU_Execute+0x2dc>)
 8000b3e:	f7ff fe7a 	bl	8000836 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_MAG_Y, MED_IMU_MAG_Y.MED_FilteredData);
 8000b42:	4b74      	ldr	r3, [pc, #464]	@ (8000d14 <IMU_Execute+0x2dc>)
 8000b44:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4873      	ldr	r0, [pc, #460]	@ (8000d18 <IMU_Execute+0x2e0>)
 8000b4c:	f7ff fdc6 	bl	80006dc <AVG_Filter_s16>
	MED_Filter_s16(&MED_IMU_MAG_Z, ImuHandle->AllRawData.Magnetometer.Z_Axis);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000b56:	4619      	mov	r1, r3
 8000b58:	4870      	ldr	r0, [pc, #448]	@ (8000d1c <IMU_Execute+0x2e4>)
 8000b5a:	f7ff fe6c 	bl	8000836 <MED_Filter_s16>
	AVG_Filter_s16(&AVG_IMU_MAG_Z, MED_IMU_MAG_Z.MED_FilteredData);
 8000b5e:	4b6f      	ldr	r3, [pc, #444]	@ (8000d1c <IMU_Execute+0x2e4>)
 8000b60:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000b64:	4619      	mov	r1, r3
 8000b66:	486e      	ldr	r0, [pc, #440]	@ (8000d20 <IMU_Execute+0x2e8>)
 8000b68:	f7ff fdb8 	bl	80006dc <AVG_Filter_s16>

	ImuHandle->FilteredData.Accelerometer.X_Axis = AVG_IMU_ACC_X.AVG_FilteredData;
 8000b6c:	4b5c      	ldr	r3, [pc, #368]	@ (8000ce0 <IMU_Execute+0x2a8>)
 8000b6e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	825a      	strh	r2, [r3, #18]
	ImuHandle->FilteredData.Accelerometer.Y_Axis = AVG_IMU_ACC_Y.AVG_FilteredData;
 8000b76:	4b5c      	ldr	r3, [pc, #368]	@ (8000ce8 <IMU_Execute+0x2b0>)
 8000b78:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	829a      	strh	r2, [r3, #20]
	ImuHandle->FilteredData.Accelerometer.Z_Axis = AVG_IMU_ACC_Z.AVG_FilteredData;
 8000b80:	4b5b      	ldr	r3, [pc, #364]	@ (8000cf0 <IMU_Execute+0x2b8>)
 8000b82:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	82da      	strh	r2, [r3, #22]
	ImuHandle->FilteredData.Gyroscope.X_Axis     = AVG_IMU_GYR_X.AVG_FilteredData;
 8000b8a:	4b5b      	ldr	r3, [pc, #364]	@ (8000cf8 <IMU_Execute+0x2c0>)
 8000b8c:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	831a      	strh	r2, [r3, #24]
	ImuHandle->FilteredData.Gyroscope.Y_Axis     = AVG_IMU_GYR_Y.AVG_FilteredData;
 8000b94:	4b5a      	ldr	r3, [pc, #360]	@ (8000d00 <IMU_Execute+0x2c8>)
 8000b96:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	835a      	strh	r2, [r3, #26]
	ImuHandle->FilteredData.Gyroscope.Z_Axis     = AVG_IMU_GYR_Z.AVG_FilteredData;
 8000b9e:	4b5a      	ldr	r3, [pc, #360]	@ (8000d08 <IMU_Execute+0x2d0>)
 8000ba0:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	839a      	strh	r2, [r3, #28]
	ImuHandle->FilteredData.Magnetometer.X_Axis  = AVG_IMU_MAG_X.AVG_FilteredData;
 8000ba8:	4b59      	ldr	r3, [pc, #356]	@ (8000d10 <IMU_Execute+0x2d8>)
 8000baa:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	83da      	strh	r2, [r3, #30]
	ImuHandle->FilteredData.Magnetometer.Y_Axis  = AVG_IMU_MAG_Y.AVG_FilteredData;
 8000bb2:	4b59      	ldr	r3, [pc, #356]	@ (8000d18 <IMU_Execute+0x2e0>)
 8000bb4:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	841a      	strh	r2, [r3, #32]
	ImuHandle->FilteredData.Magnetometer.Z_Axis  = AVG_IMU_MAG_Z.AVG_FilteredData;
 8000bbc:	4b58      	ldr	r3, [pc, #352]	@ (8000d20 <IMU_Execute+0x2e8>)
 8000bbe:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	845a      	strh	r2, [r3, #34]	@ 0x22

	ImuHandle->CalculatedData.Accelerometer.X_Axis = (float)(ImuHandle->FilteredData.Accelerometer.X_Axis / ImuHandle->CalcConst.ACC_1MpS2_LSB);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000bcc:	ee07 3a90 	vmov	s15, r3
 8000bd0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8000bda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	ImuHandle->CalculatedData.Accelerometer.Y_Axis = (float)(ImuHandle->FilteredData.Accelerometer.Y_Axis / ImuHandle->CalcConst.ACC_1MpS2_LSB);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000bea:	ee07 3a90 	vmov	s15, r3
 8000bee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8000bf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	ImuHandle->CalculatedData.Accelerometer.Z_Axis = (float)(ImuHandle->FilteredData.Accelerometer.Z_Axis / ImuHandle->CalcConst.ACC_1MpS2_LSB);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000c08:	ee07 3a90 	vmov	s15, r3
 8000c0c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8000c16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	ImuHandle->CalculatedData.Gyroscope.X_Axis     = (float)(ImuHandle->FilteredData.Gyroscope.X_Axis / ImuHandle->CalcConst.GYR_1RPS_LSB);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000c26:	ee07 3a90 	vmov	s15, r3
 8000c2a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8000c34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	ImuHandle->CalculatedData.Gyroscope.Y_Axis     = (float)(ImuHandle->FilteredData.Gyroscope.Y_Axis / ImuHandle->CalcConst.GYR_1RPS_LSB);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8000c44:	ee07 3a90 	vmov	s15, r3
 8000c48:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8000c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	ImuHandle->CalculatedData.Gyroscope.Z_Axis     = (float)(ImuHandle->FilteredData.Gyroscope.Z_Axis / ImuHandle->CalcConst.GYR_1RPS_LSB);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8000c62:	ee07 3a90 	vmov	s15, r3
 8000c66:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8000c70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	ImuHandle->CalculatedData.Magnetometer.X_Axis  = (float)((ImuHandle->FilteredData.Magnetometer.X_Axis / ImuHandle->CalcConst.MAG_1uT_LSB));
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000c80:	ee07 3a90 	vmov	s15, r3
 8000c84:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8000c8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	ImuHandle->CalculatedData.Magnetometer.Y_Axis  = (float)((ImuHandle->FilteredData.Magnetometer.Y_Axis / ImuHandle->CalcConst.MAG_1uT_LSB));
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000c9e:	ee07 3a90 	vmov	s15, r3
 8000ca2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8000cac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	ImuHandle->CalculatedData.Magnetometer.Z_Axis  = (float)((ImuHandle->FilteredData.Magnetometer.Z_Axis / ImuHandle->CalcConst.MAG_1uT_LSB));
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8000cbc:	ee07 3a90 	vmov	s15, r3
 8000cc0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8000cca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
}
 8000cd4:	bf00      	nop
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200007a4 	.word	0x200007a4
 8000ce0:	20000714 	.word	0x20000714
 8000ce4:	200007b4 	.word	0x200007b4
 8000ce8:	20000724 	.word	0x20000724
 8000cec:	200007c4 	.word	0x200007c4
 8000cf0:	20000734 	.word	0x20000734
 8000cf4:	200007d4 	.word	0x200007d4
 8000cf8:	20000744 	.word	0x20000744
 8000cfc:	200007e4 	.word	0x200007e4
 8000d00:	20000754 	.word	0x20000754
 8000d04:	200007f4 	.word	0x200007f4
 8000d08:	20000764 	.word	0x20000764
 8000d0c:	20000804 	.word	0x20000804
 8000d10:	20000774 	.word	0x20000774
 8000d14:	20000814 	.word	0x20000814
 8000d18:	20000784 	.word	0x20000784
 8000d1c:	20000824 	.word	0x20000824
 8000d20:	20000794 	.word	0x20000794

08000d24 <IMU_PopulateData>:

void IMU_PopulateData(IMU_TypeDef_T *ImuHandle, uint8_t ImuSensorNo){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	70fb      	strb	r3, [r7, #3]
	BNO055_Sensor_T *imuSensor;
	imuSensor = IMU_GetSensorHandle(ImuSensorNo);
 8000d30:	78fb      	ldrb	r3, [r7, #3]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 f832 	bl	8000d9c <IMU_GetSensorHandle>
 8000d38:	60f8      	str	r0, [r7, #12]

	ImuHandle->AllRawData.Accelerometer.X_Axis = (int16_t)imuSensor->ImuData.ACC_X;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	801a      	strh	r2, [r3, #0]
	ImuHandle->AllRawData.Accelerometer.Y_Axis = (int16_t)imuSensor->ImuData.ACC_Y;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	805a      	strh	r2, [r3, #2]
	ImuHandle->AllRawData.Accelerometer.Z_Axis = (int16_t)imuSensor->ImuData.ACC_Z;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	809a      	strh	r2, [r3, #4]
	ImuHandle->AllRawData.Gyroscope.X_Axis     = imuSensor->ImuData.GYR_X;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	80da      	strh	r2, [r3, #6]
	ImuHandle->AllRawData.Gyroscope.Y_Axis     = imuSensor->ImuData.GYR_Y;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	811a      	strh	r2, [r3, #8]
	ImuHandle->AllRawData.Gyroscope.Z_Axis     = imuSensor->ImuData.GYR_Z;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	815a      	strh	r2, [r3, #10]
	ImuHandle->AllRawData.Magnetometer.X_Axis  = imuSensor->ImuData.MAG_X;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	819a      	strh	r2, [r3, #12]
	ImuHandle->AllRawData.Magnetometer.Y_Axis  = imuSensor->ImuData.MAG_Y;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	81da      	strh	r2, [r3, #14]
	ImuHandle->AllRawData.Magnetometer.Z_Axis  = imuSensor->ImuData.MAG_Z;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	821a      	strh	r2, [r3, #16]
}
 8000d94:	bf00      	nop
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <IMU_GetSensorHandle>:

BNO055_Sensor_T* IMU_GetSensorHandle(uint8_t sensorNo){
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
	switch(sensorNo){
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	2b03      	cmp	r3, #3
 8000daa:	d00a      	beq.n	8000dc2 <IMU_GetSensorHandle+0x26>
 8000dac:	2b03      	cmp	r3, #3
 8000dae:	dc06      	bgt.n	8000dbe <IMU_GetSensorHandle+0x22>
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d002      	beq.n	8000dba <IMU_GetSensorHandle+0x1e>
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d006      	beq.n	8000dc6 <IMU_GetSensorHandle+0x2a>
 8000db8:	e001      	b.n	8000dbe <IMU_GetSensorHandle+0x22>
		case 1 : return &BNO055_Sensor_1;break;
 8000dba:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <IMU_GetSensorHandle+0x38>)
 8000dbc:	e004      	b.n	8000dc8 <IMU_GetSensorHandle+0x2c>
		case 2 : break;
		case 3 : break;
		default : return &BNO055_Sensor_1;
 8000dbe:	4b05      	ldr	r3, [pc, #20]	@ (8000dd4 <IMU_GetSensorHandle+0x38>)
 8000dc0:	e002      	b.n	8000dc8 <IMU_GetSensorHandle+0x2c>
		case 3 : break;
 8000dc2:	bf00      	nop
 8000dc4:	e000      	b.n	8000dc8 <IMU_GetSensorHandle+0x2c>
		case 2 : break;
 8000dc6:	bf00      	nop
	}
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	20000988 	.word	0x20000988

08000dd8 <PressureSensor_Init>:
#include "Filters.h"
#include "main.h"

PressureSensor_TypeDef_T PressureSensor_1;

void PressureSensor_Init(PressureSensor_TypeDef_T *handle, uint8_t PressureSensorNo, uint8_t I2C_No, uint8_t DevI2C_Address){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	4608      	mov	r0, r1
 8000de2:	4611      	mov	r1, r2
 8000de4:	461a      	mov	r2, r3
 8000de6:	4603      	mov	r3, r0
 8000de8:	70fb      	strb	r3, [r7, #3]
 8000dea:	460b      	mov	r3, r1
 8000dec:	70bb      	strb	r3, [r7, #2]
 8000dee:	4613      	mov	r3, r2
 8000df0:	707b      	strb	r3, [r7, #1]
	BAR30_Init(PressureSensorNo, I2C_No, DevI2C_Address);
 8000df2:	787a      	ldrb	r2, [r7, #1]
 8000df4:	78b9      	ldrb	r1, [r7, #2]
 8000df6:	78fb      	ldrb	r3, [r7, #3]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 f804 	bl	8000e06 <BAR30_Init>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <BAR30_Init>:
 * GLOBAL FUNCTIONS
 *********************************************************/
/** Brief description which ends at this dot. Details follow
 *  here.
 */
BAR30_ReturnTypeDef_T BAR30_Init(uint8_t BAR30_No, uint8_t i2cNo, uint8_t devI2CAddress){
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b086      	sub	sp, #24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	71fb      	strb	r3, [r7, #7]
 8000e10:	460b      	mov	r3, r1
 8000e12:	71bb      	strb	r3, [r7, #6]
 8000e14:	4613      	mov	r3, r2
 8000e16:	717b      	strb	r3, [r7, #5]
	BAR30_ReturnTypeDef_T res;
	BAR30_Sensor_T *bar;
	uint8_t i=0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	75fb      	strb	r3, [r7, #23]

	bar = BAR30_GetHandle(BAR30_No);
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 f876 	bl	8000f10 <BAR30_GetHandle>
 8000e24:	6138      	str	r0, [r7, #16]

	bar->devParam.I2C_No = i2cNo;
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	79ba      	ldrb	r2, [r7, #6]
 8000e2a:	701a      	strb	r2, [r3, #0]
	bar->devParam.DevAdress = devI2CAddress;
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	797a      	ldrb	r2, [r7, #5]
 8000e30:	705a      	strb	r2, [r3, #1]

	res = BAR30_Reset(bar);
 8000e32:	6938      	ldr	r0, [r7, #16]
 8000e34:	f000 f818 	bl	8000e68 <BAR30_Reset>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(25);
 8000e3c:	2019      	movs	r0, #25
 8000e3e:	f001 fba9 	bl	8002594 <HAL_Delay>

	while (BAR30_Get_PromValues(bar) == BAR30_ERROR){
 8000e42:	e004      	b.n	8000e4e <BAR30_Init+0x48>
		if(i++ > 10)
 8000e44:	7dfb      	ldrb	r3, [r7, #23]
 8000e46:	1c5a      	adds	r2, r3, #1
 8000e48:	75fa      	strb	r2, [r7, #23]
 8000e4a:	2b0a      	cmp	r3, #10
 8000e4c:	d806      	bhi.n	8000e5c <BAR30_Init+0x56>
	while (BAR30_Get_PromValues(bar) == BAR30_ERROR){
 8000e4e:	6938      	ldr	r0, [r7, #16]
 8000e50:	f000 f819 	bl	8000e86 <BAR30_Get_PromValues>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d0f4      	beq.n	8000e44 <BAR30_Init+0x3e>
 8000e5a:	e000      	b.n	8000e5e <BAR30_Init+0x58>
			break;
 8000e5c:	bf00      	nop
	}

	return res;
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <BAR30_Reset>:
 * PRIVATE FUNCTIONS
 *********************************************************/
/** Brief description which ends at this dot. Details follow
 *  here.
 */
BAR30_ReturnTypeDef_T BAR30_Reset(BAR30_Sensor_T *handle){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	return BAR30_SendReceive(handle, BAR30_COMMANDS_RESET, 0, 0);
 8000e70:	2300      	movs	r3, #0
 8000e72:	2200      	movs	r2, #0
 8000e74:	211e      	movs	r1, #30
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f000 f8c9 	bl	800100e <BAR30_SendReceive>
 8000e7c:	4603      	mov	r3, r0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <BAR30_Get_PromValues>:
}

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BAR30_ReturnTypeDef_T BAR30_Get_PromValues(BAR30_Sensor_T *handle){
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b084      	sub	sp, #16
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
	uint8_t RxBuff[2], crc = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	72fb      	strb	r3, [r7, #11]

	for(int i=0; i<7;i++){
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	e021      	b.n	8000edc <BAR30_Get_PromValues+0x56>
		if(!BAR30_SendReceive(handle, BAR30_COMMANDS_PROM_READ_1 + i*2, RxBuff, 2))
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	3350      	adds	r3, #80	@ 0x50
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	b2d9      	uxtb	r1, r3
 8000ea2:	f107 0208 	add.w	r2, r7, #8
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f000 f8b0 	bl	800100e <BAR30_SendReceive>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d10e      	bne.n	8000ed2 <BAR30_Get_PromValues+0x4c>
			handle->PromParameters.PromData[i]= RxBuff[1] | RxBuff[0]<<8;
 8000eb4:	7a7b      	ldrb	r3, [r7, #9]
 8000eb6:	b21a      	sxth	r2, r3
 8000eb8:	7a3b      	ldrb	r3, [r7, #8]
 8000eba:	b21b      	sxth	r3, r3
 8000ebc:	021b      	lsls	r3, r3, #8
 8000ebe:	b21b      	sxth	r3, r3
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	b21b      	sxth	r3, r3
 8000ec4:	b299      	uxth	r1, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	68fa      	ldr	r2, [r7, #12]
 8000eca:	3204      	adds	r2, #4
 8000ecc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8000ed0:	e001      	b.n	8000ed6 <BAR30_Get_PromValues+0x50>
		else
			return BAR30_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e017      	b.n	8000f06 <BAR30_Get_PromValues+0x80>
	for(int i=0; i<7;i++){
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2b06      	cmp	r3, #6
 8000ee0:	ddda      	ble.n	8000e98 <BAR30_Get_PromValues+0x12>
	}

	crc = handle->PromParameters.PromData[0]>>12;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	891b      	ldrh	r3, [r3, #8]
 8000ee6:	0b1b      	lsrs	r3, r3, #12
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	72fb      	strb	r3, [r7, #11]

	if(BAR30_CalculateCRC_4(handle->PromParameters.PromData) == crc)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3308      	adds	r3, #8
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f000 f82f 	bl	8000f54 <BAR30_CalculateCRC_4>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	461a      	mov	r2, r3
 8000efa:	7afb      	ldrb	r3, [r7, #11]
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d101      	bne.n	8000f04 <BAR30_Get_PromValues+0x7e>
		return BAR30_OK;
 8000f00:	2300      	movs	r3, #0
 8000f02:	e000      	b.n	8000f06 <BAR30_Get_PromValues+0x80>
	else
		return BAR30_ERROR;
 8000f04:	2301      	movs	r3, #1
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <BAR30_GetHandle>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BAR30_Sensor_T* BAR30_GetHandle(uint8_t Bar30_No){
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
	switch(Bar30_No){
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	2b03      	cmp	r3, #3
 8000f1e:	d00a      	beq.n	8000f36 <BAR30_GetHandle+0x26>
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	dc0a      	bgt.n	8000f3a <BAR30_GetHandle+0x2a>
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d002      	beq.n	8000f2e <BAR30_GetHandle+0x1e>
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d002      	beq.n	8000f32 <BAR30_GetHandle+0x22>
 8000f2c:	e005      	b.n	8000f3a <BAR30_GetHandle+0x2a>
		case 1  : return &BAR30_1;
 8000f2e:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <BAR30_GetHandle+0x38>)
 8000f30:	e004      	b.n	8000f3c <BAR30_GetHandle+0x2c>
		case 2  : return &BAR30_2;
 8000f32:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <BAR30_GetHandle+0x3c>)
 8000f34:	e002      	b.n	8000f3c <BAR30_GetHandle+0x2c>
		case 3  : return &BAR30_3;
 8000f36:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <BAR30_GetHandle+0x40>)
 8000f38:	e000      	b.n	8000f3c <BAR30_GetHandle+0x2c>
		default : return &BAR30_1;
 8000f3a:	4b03      	ldr	r3, [pc, #12]	@ (8000f48 <BAR30_GetHandle+0x38>)
	}
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	200008b0 	.word	0x200008b0
 8000f4c:	200008f8 	.word	0x200008f8
 8000f50:	20000940 	.word	0x20000940

08000f54 <BAR30_CalculateCRC_4>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
uint8_t BAR30_CalculateCRC_4(uint16_t *n_prom) // n_prom defined as 8x unsigned int (n_prom[8])
{
 8000f54:	b480      	push	{r7}
 8000f56:	b087      	sub	sp, #28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	int cnt; // simple counter
	unsigned int n_rem=0; // crc remainder
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	613b      	str	r3, [r7, #16]
	unsigned char n_bit;
	n_prom[0]=((n_prom[0]) & 0x0FFF); // CRC byte is replaced by 0
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	801a      	strh	r2, [r3, #0]
	n_prom[7]=0; // Subsidiary value, set to 0
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	330e      	adds	r3, #14
 8000f72:	2200      	movs	r2, #0
 8000f74:	801a      	strh	r2, [r3, #0]

	for (cnt = 0; cnt < 16; cnt++){ // choose LSB or MSB
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
 8000f7a:	e038      	b.n	8000fee <BAR30_CalculateCRC_4+0x9a>
		if (cnt%2==1)
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	bfb8      	it	lt
 8000f86:	425b      	neglt	r3, r3
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d10a      	bne.n	8000fa2 <BAR30_CalculateCRC_4+0x4e>
			n_rem ^= (unsigned short) ((n_prom[cnt>>1]) & 0x00FF);
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	105b      	asrs	r3, r3, #1
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4053      	eors	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	e00b      	b.n	8000fba <BAR30_CalculateCRC_4+0x66>
		else
			n_rem ^= (unsigned short) (n_prom[cnt>>1]>>8);
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	105b      	asrs	r3, r3, #1
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	4413      	add	r3, r2
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	0a1b      	lsrs	r3, r3, #8
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	4053      	eors	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]

		for (n_bit = 8; n_bit > 0; n_bit--){
 8000fba:	2308      	movs	r3, #8
 8000fbc:	73fb      	strb	r3, [r7, #15]
 8000fbe:	e010      	b.n	8000fe2 <BAR30_CalculateCRC_4+0x8e>
			if (n_rem & (0x8000))
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d005      	beq.n	8000fd6 <BAR30_CalculateCRC_4+0x82>
				n_rem = (n_rem << 1) ^ 0x3000;
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	e002      	b.n	8000fdc <BAR30_CalculateCRC_4+0x88>
			else
				n_rem = (n_rem << 1);
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	613b      	str	r3, [r7, #16]
		for (n_bit = 8; n_bit > 0; n_bit--){
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	73fb      	strb	r3, [r7, #15]
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d1eb      	bne.n	8000fc0 <BAR30_CalculateCRC_4+0x6c>
	for (cnt = 0; cnt < 16; cnt++){ // choose LSB or MSB
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	3301      	adds	r3, #1
 8000fec:	617b      	str	r3, [r7, #20]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	2b0f      	cmp	r3, #15
 8000ff2:	ddc3      	ble.n	8000f7c <BAR30_CalculateCRC_4+0x28>
		}
	}

	n_rem= ((n_rem >> 12) & 0x000F); // final 4-bit remainder is CRC code
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	0b1b      	lsrs	r3, r3, #12
 8000ff8:	f003 030f 	and.w	r3, r3, #15
 8000ffc:	613b      	str	r3, [r7, #16]
	return (n_rem ^ 0x00);
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	b2db      	uxtb	r3, r3
}
 8001002:	4618      	mov	r0, r3
 8001004:	371c      	adds	r7, #28
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <BAR30_SendReceive>:
}

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BAR30_ReturnTypeDef_T BAR30_SendReceive(BAR30_Sensor_T *handle, uint8_t Command, uint8_t *rxBuff, uint8_t rxLenght){
 800100e:	b590      	push	{r4, r7, lr}
 8001010:	b089      	sub	sp, #36	@ 0x24
 8001012:	af02      	add	r7, sp, #8
 8001014:	60f8      	str	r0, [r7, #12]
 8001016:	607a      	str	r2, [r7, #4]
 8001018:	461a      	mov	r2, r3
 800101a:	460b      	mov	r3, r1
 800101c:	72fb      	strb	r3, [r7, #11]
 800101e:	4613      	mov	r3, r2
 8001020:	72bb      	strb	r3, [r7, #10]
	uint8_t txBuff[1], txLenght;
	txBuff[0] = Command;
 8001022:	7afb      	ldrb	r3, [r7, #11]
 8001024:	753b      	strb	r3, [r7, #20]
	txLenght = 1;
 8001026:	2301      	movs	r3, #1
 8001028:	75fb      	strb	r3, [r7, #23]
	return BAR30_CommPorter_SendReceive(handle->devParam.I2C_No, handle->devParam.DevAdress, txBuff, txLenght, rxBuff, rxLenght);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	7818      	ldrb	r0, [r3, #0]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	7859      	ldrb	r1, [r3, #1]
 8001032:	7dfc      	ldrb	r4, [r7, #23]
 8001034:	f107 0214 	add.w	r2, r7, #20
 8001038:	7abb      	ldrb	r3, [r7, #10]
 800103a:	9301      	str	r3, [sp, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	4623      	mov	r3, r4
 8001042:	f000 f805 	bl	8001050 <BAR30_CommPorter_SendReceive>
 8001046:	4603      	mov	r3, r0
}
 8001048:	4618      	mov	r0, r3
 800104a:	371c      	adds	r7, #28
 800104c:	46bd      	mov	sp, r7
 800104e:	bd90      	pop	{r4, r7, pc}

08001050 <BAR30_CommPorter_SendReceive>:

#include <stdint.h>
#include "BAR30_CommPorter.h"
#include "I2C.h"

uint8_t BAR30_CommPorter_SendReceive(uint8_t I2CNo, uint8_t DevAddress, uint8_t *txBuff, uint8_t txLenght, uint8_t *rxBuff, uint8_t rxLenght){
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af02      	add	r7, sp, #8
 8001056:	603a      	str	r2, [r7, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
 800105e:	460b      	mov	r3, r1
 8001060:	71bb      	strb	r3, [r7, #6]
 8001062:	4613      	mov	r3, r2
 8001064:	717b      	strb	r3, [r7, #5]
	return I2C_ReadWrite_Poll(I2CNo, DevAddress, txBuff, txLenght, rxBuff, rxLenght);
 8001066:	797a      	ldrb	r2, [r7, #5]
 8001068:	79b9      	ldrb	r1, [r7, #6]
 800106a:	79f8      	ldrb	r0, [r7, #7]
 800106c:	7d3b      	ldrb	r3, [r7, #20]
 800106e:	9301      	str	r3, [sp, #4]
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	4613      	mov	r3, r2
 8001076:	683a      	ldr	r2, [r7, #0]
 8001078:	f7ff fc26 	bl	80008c8 <I2C_ReadWrite_Poll>
 800107c:	4603      	mov	r3, r0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <BNO055_Init>:
BNO055_Sensor_T BNO055_Sensor_1;

/** Brief description which ends at this dot. Details follow
 *  here.
 */
void BNO055_Init(BNO055_Sensor_T *handle, uint8_t I2C_No, uint8_t I2C_Adress, void* ResetGPIOPort, uint16_t ResetGPIOPin){
 8001086:	b580      	push	{r7, lr}
 8001088:	b084      	sub	sp, #16
 800108a:	af00      	add	r7, sp, #0
 800108c:	60f8      	str	r0, [r7, #12]
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	72fb      	strb	r3, [r7, #11]
 8001094:	4613      	mov	r3, r2
 8001096:	72bb      	strb	r3, [r7, #10]
	handle->I2C_No = I2C_No;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	7afa      	ldrb	r2, [r7, #11]
 800109c:	701a      	strb	r2, [r3, #0]
	handle->Chip_I2C_Address = I2C_Adress;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	7aba      	ldrb	r2, [r7, #10]
 80010a2:	705a      	strb	r2, [r3, #1]
	handle->ResetPort = ResetGPIOPort;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	605a      	str	r2, [r3, #4]
	handle->ResetPin = ResetGPIOPin;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	8b3a      	ldrh	r2, [r7, #24]
 80010ae:	811a      	strh	r2, [r3, #8]
	handle->CalcConst.ACC_1MpS2_LSB = 100;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2264      	movs	r2, #100	@ 0x64
 80010b4:	845a      	strh	r2, [r3, #34]	@ 0x22
	handle->CalcConst.GYR_1RPS_LSB = 900;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f44f 7261 	mov.w	r2, #900	@ 0x384
 80010bc:	84da      	strh	r2, [r3, #38]	@ 0x26
	handle->CalcConst.MAG_1uT_LSB = 16;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2210      	movs	r2, #16
 80010c2:	849a      	strh	r2, [r3, #36]	@ 0x24
	handle->CalcConst.ACCRange_G = 4;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2204      	movs	r2, #4
 80010c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	handle->CalcConst.GYRRange_DPS = 500;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80010d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

	BNO055_Reset(handle);
 80010d4:	68f8      	ldr	r0, [r7, #12]
 80010d6:	f000 f843 	bl	8001160 <BNO055_Reset>

	BNO055_Set_OperationMode(handle, BNO055_DATA_OPR_MODE_NDOF);
 80010da:	210c      	movs	r1, #12
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f000 f85e 	bl	800119e <BNO055_Set_OperationMode>
	HAL_Delay(25);
 80010e2:	2019      	movs	r0, #25
 80010e4:	f001 fa56 	bl	8002594 <HAL_Delay>
//    		BNO055_GetCalibrationData(handle);
//    		break;
//    	}
//    }

    BNO055_Set_OperationMode(handle, BNO055_DATA_OPR_MODE_OPR);
 80010e8:	2100      	movs	r1, #0
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	f000 f857 	bl	800119e <BNO055_Set_OperationMode>
    HAL_Delay(25);
 80010f0:	2019      	movs	r0, #25
 80010f2:	f001 fa4f 	bl	8002594 <HAL_Delay>

	BNO055_Set_PowerMode(handle, BNO055_DATA_PWR_MODE_NORMAL);
 80010f6:	2100      	movs	r1, #0
 80010f8:	68f8      	ldr	r0, [r7, #12]
 80010fa:	f000 f888 	bl	800120e <BNO055_Set_PowerMode>
//	BNO055_GetCalibrationData(handle);
	BNO055_Set_DataUnit(handle, BNO055_DATA_UNIT_ACC_mG | BNO055_DATA_UNIT_ORI_AND);
 80010fe:	2181      	movs	r1, #129	@ 0x81
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	f000 fc0a 	bl	800191a <BNO055_Set_DataUnit>

	BNO055_Get_DataUnit(handle);
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	f000 fc32 	bl	8001970 <BNO055_Get_DataUnit>

	BNO055_Set_ACC_Mode(handle, BNO055_DATA_ACC_RANGE_4G | BNO055_DATA_ACC_BW_62p5Hz |  BNO055_DATA_ACC_MODE_NORMAL);
 800110c:	210d      	movs	r1, #13
 800110e:	68f8      	ldr	r0, [r7, #12]
 8001110:	f000 f8b5 	bl	800127e <BNO055_Set_ACC_Mode>

	BNO055_Get_ACC_Mode(handle);
 8001114:	68f8      	ldr	r0, [r7, #12]
 8001116:	f000 f8ea 	bl	80012ee <BNO055_Get_ACC_Mode>

	BNO055_Set_MAG_Mode(handle, BNO055_DATA_MAG_BW_10Hz | BNO055_DATA_MAG_MODE_HIGHACCURACY | BNO055_DATA_MAG_PWRMODE_NORMAL);
 800111a:	211b      	movs	r1, #27
 800111c:	68f8      	ldr	r0, [r7, #12]
 800111e:	f000 f91c 	bl	800135a <BNO055_Set_MAG_Mode>

	BNO055_Set_GYR_Mode_1(handle, BNO055_DATA_GYR_RANGE_500DPS | BNO055_DATA_GYR_BW_12Hz);
 8001122:	212a      	movs	r1, #42	@ 0x2a
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f000 f950 	bl	80013ca <BNO055_Set_GYR_Mode_1>

	BNO055_Set_GYR_Mode_2(handle, BNO055_DATA_GYR_MODE_NORMAL);
 800112a:	2100      	movs	r1, #0
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	f000 f984 	bl	800143a <BNO055_Set_GYR_Mode_2>


	BNO055_Set_OperationMode(handle, BNO055_DATA_OPR_MODE_AMG);
 8001132:	2107      	movs	r1, #7
 8001134:	68f8      	ldr	r0, [r7, #12]
 8001136:	f000 f832 	bl	800119e <BNO055_Set_OperationMode>

	HAL_Delay(100);
 800113a:	2064      	movs	r0, #100	@ 0x64
 800113c:	f001 fa2a 	bl	8002594 <HAL_Delay>

	BNO055_Get_ChipID(handle);
 8001140:	68f8      	ldr	r0, [r7, #12]
 8001142:	f000 f9b2 	bl	80014aa <BNO055_Get_ChipID>
	BNO055_Get_ACC_ID(handle);
 8001146:	68f8      	ldr	r0, [r7, #12]
 8001148:	f000 f9f0 	bl	800152c <BNO055_Get_ACC_ID>
	BNO055_Get_GYR_ID(handle);
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f000 fa2e 	bl	80015ae <BNO055_Get_GYR_ID>
	BNO055_Get_MAG_ID(handle);
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f000 fa6d 	bl	8001632 <BNO055_Get_MAG_ID>
}
 8001158:	bf00      	nop
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <BNO055_Reset>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
void BNO055_Reset(BNO055_Sensor_T *handle){
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(handle->ResetPort, handle->ResetPin, RESET);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6858      	ldr	r0, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	891b      	ldrh	r3, [r3, #8]
 8001170:	2200      	movs	r2, #0
 8001172:	4619      	mov	r1, r3
 8001174:	f003 f8de 	bl	8004334 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001178:	2064      	movs	r0, #100	@ 0x64
 800117a:	f001 fa0b 	bl	8002594 <HAL_Delay>
	HAL_GPIO_WritePin(handle->ResetPort, handle->ResetPin, SET);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6858      	ldr	r0, [r3, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	891b      	ldrh	r3, [r3, #8]
 8001186:	2201      	movs	r2, #1
 8001188:	4619      	mov	r1, r3
 800118a:	f003 f8d3 	bl	8004334 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800118e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001192:	f001 f9ff 	bl	8002594 <HAL_Delay>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <BNO055_Set_OperationMode>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_OperationMode(BNO055_Sensor_T *handle, uint8_t mode){
 800119e:	b580      	push	{r7, lr}
 80011a0:	b086      	sub	sp, #24
 80011a2:	af02      	add	r7, sp, #8
 80011a4:	6078      	str	r0, [r7, #4]
 80011a6:	460b      	mov	r3, r1
 80011a8:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2], res;
	TxBuff[0] = BNO055_REG_ADDRESS_OPR_MODE;
 80011aa:	233d      	movs	r3, #61	@ 0x3d
 80011ac:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = mode;
 80011ae:	78fb      	ldrb	r3, [r7, #3]
 80011b0:	737b      	strb	r3, [r7, #13]

    if(!BNO055_Get_PageID(handle)){
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f000 fc0b 	bl	80019ce <BNO055_Get_PageID>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d121      	bne.n	8001202 <BNO055_Set_OperationMode+0x64>
    	if(!handle->PageID){
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d10a      	bne.n	80011de <BNO055_Set_OperationMode+0x40>
    		return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 80011c8:	f107 010c 	add.w	r1, r7, #12
 80011cc:	2300      	movs	r3, #0
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2300      	movs	r3, #0
 80011d2:	2202      	movs	r2, #2
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 fc59 	bl	8001a8c <BNO055_SendReceive>
 80011da:	4603      	mov	r3, r0
 80011dc:	e013      	b.n	8001206 <BNO055_Set_OperationMode+0x68>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0)){
 80011de:	2100      	movs	r1, #0
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f000 fc12 	bl	8001a0a <BNO055_Set_PageID>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d10c      	bne.n	8001206 <BNO055_Set_OperationMode+0x68>
    			return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 80011ec:	f107 010c 	add.w	r1, r7, #12
 80011f0:	2300      	movs	r3, #0
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2300      	movs	r3, #0
 80011f6:	2202      	movs	r2, #2
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f000 fc47 	bl	8001a8c <BNO055_SendReceive>
 80011fe:	4603      	mov	r3, r0
 8001200:	e001      	b.n	8001206 <BNO055_Set_OperationMode+0x68>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e7ff      	b.n	8001206 <BNO055_Set_OperationMode+0x68>
    }
}
 8001206:	4618      	mov	r0, r3
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <BNO055_Set_PowerMode>:
}

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_PowerMode(BNO055_Sensor_T *handle, uint8_t mode){
 800120e:	b580      	push	{r7, lr}
 8001210:	b086      	sub	sp, #24
 8001212:	af02      	add	r7, sp, #8
 8001214:	6078      	str	r0, [r7, #4]
 8001216:	460b      	mov	r3, r1
 8001218:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = BNO055_REG_ADDRESS_PWR_MODE;
 800121a:	233e      	movs	r3, #62	@ 0x3e
 800121c:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = mode;
 800121e:	78fb      	ldrb	r3, [r7, #3]
 8001220:	737b      	strb	r3, [r7, #13]

    if(!BNO055_Get_PageID(handle)){
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 fbd3 	bl	80019ce <BNO055_Get_PageID>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d121      	bne.n	8001272 <BNO055_Set_PowerMode+0x64>
    	if(!handle->PageID){
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001234:	2b00      	cmp	r3, #0
 8001236:	d10a      	bne.n	800124e <BNO055_Set_PowerMode+0x40>
    		return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8001238:	f107 010c 	add.w	r1, r7, #12
 800123c:	2300      	movs	r3, #0
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2300      	movs	r3, #0
 8001242:	2202      	movs	r2, #2
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f000 fc21 	bl	8001a8c <BNO055_SendReceive>
 800124a:	4603      	mov	r3, r0
 800124c:	e013      	b.n	8001276 <BNO055_Set_PowerMode+0x68>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0)){
 800124e:	2100      	movs	r1, #0
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f000 fbda 	bl	8001a0a <BNO055_Set_PageID>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d10c      	bne.n	8001276 <BNO055_Set_PowerMode+0x68>
    			return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 800125c:	f107 010c 	add.w	r1, r7, #12
 8001260:	2300      	movs	r3, #0
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2300      	movs	r3, #0
 8001266:	2202      	movs	r2, #2
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f000 fc0f 	bl	8001a8c <BNO055_SendReceive>
 800126e:	4603      	mov	r3, r0
 8001270:	e001      	b.n	8001276 <BNO055_Set_PowerMode+0x68>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e7ff      	b.n	8001276 <BNO055_Set_PowerMode+0x68>
    }
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <BNO055_Set_ACC_Mode>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_ACC_Mode(BNO055_Sensor_T *handle, uint8_t mode){
 800127e:	b580      	push	{r7, lr}
 8001280:	b086      	sub	sp, #24
 8001282:	af02      	add	r7, sp, #8
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	460b      	mov	r3, r1
 8001288:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = BNO055_REG_ADDRESS_ACC_CONFIG;
 800128a:	2308      	movs	r3, #8
 800128c:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = mode;
 800128e:	78fb      	ldrb	r3, [r7, #3]
 8001290:	737b      	strb	r3, [r7, #13]

    if(!BNO055_Get_PageID(handle)){
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f000 fb9b 	bl	80019ce <BNO055_Get_PageID>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d121      	bne.n	80012e2 <BNO055_Set_ACC_Mode+0x64>
    	if(handle->PageID){
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00a      	beq.n	80012be <BNO055_Set_ACC_Mode+0x40>
    		return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 80012a8:	f107 010c 	add.w	r1, r7, #12
 80012ac:	2300      	movs	r3, #0
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	2300      	movs	r3, #0
 80012b2:	2202      	movs	r2, #2
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 fbe9 	bl	8001a8c <BNO055_SendReceive>
 80012ba:	4603      	mov	r3, r0
 80012bc:	e013      	b.n	80012e6 <BNO055_Set_ACC_Mode+0x68>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_1)){
 80012be:	2101      	movs	r1, #1
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f000 fba2 	bl	8001a0a <BNO055_Set_PageID>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d10c      	bne.n	80012e6 <BNO055_Set_ACC_Mode+0x68>
    			return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 80012cc:	f107 010c 	add.w	r1, r7, #12
 80012d0:	2300      	movs	r3, #0
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2300      	movs	r3, #0
 80012d6:	2202      	movs	r2, #2
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f000 fbd7 	bl	8001a8c <BNO055_SendReceive>
 80012de:	4603      	mov	r3, r0
 80012e0:	e001      	b.n	80012e6 <BNO055_Set_ACC_Mode+0x68>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e7ff      	b.n	80012e6 <BNO055_Set_ACC_Mode+0x68>
    }
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <BNO055_Get_ACC_Mode>:


/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_ACC_Mode(BNO055_Sensor_T *handle){
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af02      	add	r7, sp, #8
 80012f4:	6078      	str	r0, [r7, #4]
	uint8_t TxBuff[1], RxBuff[1];
	TxBuff[0] = BNO055_REG_ADDRESS_ACC_CONFIG;
 80012f6:	2308      	movs	r3, #8
 80012f8:	733b      	strb	r3, [r7, #12]

    if(!BNO055_Get_PageID(handle)){
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 fb67 	bl	80019ce <BNO055_Get_PageID>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d123      	bne.n	800134e <BNO055_Get_ACC_Mode+0x60>
    	if(handle->PageID){
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800130c:	2b00      	cmp	r3, #0
 800130e:	d00b      	beq.n	8001328 <BNO055_Get_ACC_Mode+0x3a>
    		return BNO055_SendReceive(handle,TxBuff, 1, RxBuff, 1);
 8001310:	f107 0308 	add.w	r3, r7, #8
 8001314:	f107 010c 	add.w	r1, r7, #12
 8001318:	2201      	movs	r2, #1
 800131a:	9200      	str	r2, [sp, #0]
 800131c:	2201      	movs	r2, #1
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f000 fbb4 	bl	8001a8c <BNO055_SendReceive>
 8001324:	4603      	mov	r3, r0
 8001326:	e014      	b.n	8001352 <BNO055_Get_ACC_Mode+0x64>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_1)){
 8001328:	2101      	movs	r1, #1
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f000 fb6d 	bl	8001a0a <BNO055_Set_PageID>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d10d      	bne.n	8001352 <BNO055_Get_ACC_Mode+0x64>
    			return BNO055_SendReceive(handle,TxBuff, 1, RxBuff, 1);
 8001336:	f107 0308 	add.w	r3, r7, #8
 800133a:	f107 010c 	add.w	r1, r7, #12
 800133e:	2201      	movs	r2, #1
 8001340:	9200      	str	r2, [sp, #0]
 8001342:	2201      	movs	r2, #1
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 fba1 	bl	8001a8c <BNO055_SendReceive>
 800134a:	4603      	mov	r3, r0
 800134c:	e001      	b.n	8001352 <BNO055_Get_ACC_Mode+0x64>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e7ff      	b.n	8001352 <BNO055_Get_ACC_Mode+0x64>
    }
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <BNO055_Set_MAG_Mode>:


/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_MAG_Mode(BNO055_Sensor_T *handle, uint8_t mode){
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af02      	add	r7, sp, #8
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	460b      	mov	r3, r1
 8001364:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = BNO055_REG_ADDRESS_MAG_CONFIG;
 8001366:	2309      	movs	r3, #9
 8001368:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = mode;
 800136a:	78fb      	ldrb	r3, [r7, #3]
 800136c:	737b      	strb	r3, [r7, #13]

    if(!BNO055_Get_PageID(handle)){
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 fb2d 	bl	80019ce <BNO055_Get_PageID>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d121      	bne.n	80013be <BNO055_Set_MAG_Mode+0x64>
    	if(handle->PageID){
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001380:	2b00      	cmp	r3, #0
 8001382:	d00a      	beq.n	800139a <BNO055_Set_MAG_Mode+0x40>
    		return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8001384:	f107 010c 	add.w	r1, r7, #12
 8001388:	2300      	movs	r3, #0
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	2300      	movs	r3, #0
 800138e:	2202      	movs	r2, #2
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f000 fb7b 	bl	8001a8c <BNO055_SendReceive>
 8001396:	4603      	mov	r3, r0
 8001398:	e013      	b.n	80013c2 <BNO055_Set_MAG_Mode+0x68>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_1)){
 800139a:	2101      	movs	r1, #1
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 fb34 	bl	8001a0a <BNO055_Set_PageID>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d10c      	bne.n	80013c2 <BNO055_Set_MAG_Mode+0x68>
    			return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 80013a8:	f107 010c 	add.w	r1, r7, #12
 80013ac:	2300      	movs	r3, #0
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	2300      	movs	r3, #0
 80013b2:	2202      	movs	r2, #2
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f000 fb69 	bl	8001a8c <BNO055_SendReceive>
 80013ba:	4603      	mov	r3, r0
 80013bc:	e001      	b.n	80013c2 <BNO055_Set_MAG_Mode+0x68>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e7ff      	b.n	80013c2 <BNO055_Set_MAG_Mode+0x68>
    }
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <BNO055_Set_GYR_Mode_1>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_GYR_Mode_1(BNO055_Sensor_T *handle, uint8_t mode){
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b086      	sub	sp, #24
 80013ce:	af02      	add	r7, sp, #8
 80013d0:	6078      	str	r0, [r7, #4]
 80013d2:	460b      	mov	r3, r1
 80013d4:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = BNO055_REG_ADDRESS_GYR_CONFIG_1;
 80013d6:	230a      	movs	r3, #10
 80013d8:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = mode;
 80013da:	78fb      	ldrb	r3, [r7, #3]
 80013dc:	737b      	strb	r3, [r7, #13]

    if(!BNO055_Get_PageID(handle)){
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 faf5 	bl	80019ce <BNO055_Get_PageID>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d121      	bne.n	800142e <BNO055_Set_GYR_Mode_1+0x64>
    	if(handle->PageID){
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d00a      	beq.n	800140a <BNO055_Set_GYR_Mode_1+0x40>
    		return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 80013f4:	f107 010c 	add.w	r1, r7, #12
 80013f8:	2300      	movs	r3, #0
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	2300      	movs	r3, #0
 80013fe:	2202      	movs	r2, #2
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f000 fb43 	bl	8001a8c <BNO055_SendReceive>
 8001406:	4603      	mov	r3, r0
 8001408:	e013      	b.n	8001432 <BNO055_Set_GYR_Mode_1+0x68>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_1)){
 800140a:	2101      	movs	r1, #1
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f000 fafc 	bl	8001a0a <BNO055_Set_PageID>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d10c      	bne.n	8001432 <BNO055_Set_GYR_Mode_1+0x68>
    			return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8001418:	f107 010c 	add.w	r1, r7, #12
 800141c:	2300      	movs	r3, #0
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	2300      	movs	r3, #0
 8001422:	2202      	movs	r2, #2
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 fb31 	bl	8001a8c <BNO055_SendReceive>
 800142a:	4603      	mov	r3, r0
 800142c:	e001      	b.n	8001432 <BNO055_Set_GYR_Mode_1+0x68>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e7ff      	b.n	8001432 <BNO055_Set_GYR_Mode_1+0x68>
    }
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <BNO055_Set_GYR_Mode_2>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_GYR_Mode_2(BNO055_Sensor_T *handle, uint8_t mode){
 800143a:	b580      	push	{r7, lr}
 800143c:	b086      	sub	sp, #24
 800143e:	af02      	add	r7, sp, #8
 8001440:	6078      	str	r0, [r7, #4]
 8001442:	460b      	mov	r3, r1
 8001444:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = BNO055_REG_ADDRESS_GYR_CONFIG_2;
 8001446:	230b      	movs	r3, #11
 8001448:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = mode;
 800144a:	78fb      	ldrb	r3, [r7, #3]
 800144c:	737b      	strb	r3, [r7, #13]

    if(!BNO055_Get_PageID(handle)){
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 fabd 	bl	80019ce <BNO055_Get_PageID>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d121      	bne.n	800149e <BNO055_Set_GYR_Mode_2+0x64>
    	if(handle->PageID){
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00a      	beq.n	800147a <BNO055_Set_GYR_Mode_2+0x40>
    		return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8001464:	f107 010c 	add.w	r1, r7, #12
 8001468:	2300      	movs	r3, #0
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	2300      	movs	r3, #0
 800146e:	2202      	movs	r2, #2
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f000 fb0b 	bl	8001a8c <BNO055_SendReceive>
 8001476:	4603      	mov	r3, r0
 8001478:	e013      	b.n	80014a2 <BNO055_Set_GYR_Mode_2+0x68>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_1)){
 800147a:	2101      	movs	r1, #1
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f000 fac4 	bl	8001a0a <BNO055_Set_PageID>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d10c      	bne.n	80014a2 <BNO055_Set_GYR_Mode_2+0x68>
    			return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8001488:	f107 010c 	add.w	r1, r7, #12
 800148c:	2300      	movs	r3, #0
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	2300      	movs	r3, #0
 8001492:	2202      	movs	r2, #2
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 faf9 	bl	8001a8c <BNO055_SendReceive>
 800149a:	4603      	mov	r3, r0
 800149c:	e001      	b.n	80014a2 <BNO055_Set_GYR_Mode_2+0x68>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e7ff      	b.n	80014a2 <BNO055_Set_GYR_Mode_2+0x68>
    }
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <BNO055_Get_ChipID>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_ChipID(BNO055_Sensor_T *handle){
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b086      	sub	sp, #24
 80014ae:	af02      	add	r7, sp, #8
 80014b0:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[1];
	BNO055_ReturnTypeDef_T res= BNO055_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	73fb      	strb	r3, [r7, #15]
	Txbuff[0] = BNO055_REG_ADDRESS_CHIP_ID;
 80014b6:	2300      	movs	r3, #0
 80014b8:	733b      	strb	r3, [r7, #12]

    if(!BNO055_Get_PageID(handle)){
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 fa87 	bl	80019ce <BNO055_Get_PageID>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d125      	bne.n	8001512 <BNO055_Get_ChipID+0x68>
    	if(!handle->PageID){
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d10c      	bne.n	80014ea <BNO055_Get_ChipID+0x40>
    		res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 80014d0:	f107 0308 	add.w	r3, r7, #8
 80014d4:	f107 010c 	add.w	r1, r7, #12
 80014d8:	2201      	movs	r2, #1
 80014da:	9200      	str	r2, [sp, #0]
 80014dc:	2201      	movs	r2, #1
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f000 fad4 	bl	8001a8c <BNO055_SendReceive>
 80014e4:	4603      	mov	r3, r0
 80014e6:	73fb      	strb	r3, [r7, #15]
 80014e8:	e015      	b.n	8001516 <BNO055_Get_ChipID+0x6c>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0)){
 80014ea:	2100      	movs	r1, #0
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 fa8c 	bl	8001a0a <BNO055_Set_PageID>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d10e      	bne.n	8001516 <BNO055_Get_ChipID+0x6c>
    			res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 80014f8:	f107 0308 	add.w	r3, r7, #8
 80014fc:	f107 010c 	add.w	r1, r7, #12
 8001500:	2201      	movs	r2, #1
 8001502:	9200      	str	r2, [sp, #0]
 8001504:	2201      	movs	r2, #1
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 fac0 	bl	8001a8c <BNO055_SendReceive>
 800150c:	4603      	mov	r3, r0
 800150e:	73fb      	strb	r3, [r7, #15]
 8001510:	e001      	b.n	8001516 <BNO055_Get_ChipID+0x6c>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e006      	b.n	8001524 <BNO055_Get_ChipID+0x7a>
    }

    if(!res)
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d102      	bne.n	8001522 <BNO055_Get_ChipID+0x78>
     	handle->IDs.CHIP_ID = RxBuff[0];
 800151c:	7a3a      	ldrb	r2, [r7, #8]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	779a      	strb	r2, [r3, #30]

     return res;
 8001522:	7bfb      	ldrb	r3, [r7, #15]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <BNO055_Get_ACC_ID>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_ACC_ID(BNO055_Sensor_T *handle){
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af02      	add	r7, sp, #8
 8001532:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[1];
	BNO055_ReturnTypeDef_T res= BNO055_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	73fb      	strb	r3, [r7, #15]
	Txbuff[0] = BNO055_REG_ADDRESS_ACC_ID;
 8001538:	2301      	movs	r3, #1
 800153a:	733b      	strb	r3, [r7, #12]

    if(!BNO055_Get_PageID(handle)){
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f000 fa46 	bl	80019ce <BNO055_Get_PageID>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d125      	bne.n	8001594 <BNO055_Get_ACC_ID+0x68>
    	if(!handle->PageID){
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10c      	bne.n	800156c <BNO055_Get_ACC_ID+0x40>
    		res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 8001552:	f107 0308 	add.w	r3, r7, #8
 8001556:	f107 010c 	add.w	r1, r7, #12
 800155a:	2201      	movs	r2, #1
 800155c:	9200      	str	r2, [sp, #0]
 800155e:	2201      	movs	r2, #1
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f000 fa93 	bl	8001a8c <BNO055_SendReceive>
 8001566:	4603      	mov	r3, r0
 8001568:	73fb      	strb	r3, [r7, #15]
 800156a:	e015      	b.n	8001598 <BNO055_Get_ACC_ID+0x6c>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0)){
 800156c:	2100      	movs	r1, #0
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f000 fa4b 	bl	8001a0a <BNO055_Set_PageID>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10e      	bne.n	8001598 <BNO055_Get_ACC_ID+0x6c>
    			res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 800157a:	f107 0308 	add.w	r3, r7, #8
 800157e:	f107 010c 	add.w	r1, r7, #12
 8001582:	2201      	movs	r2, #1
 8001584:	9200      	str	r2, [sp, #0]
 8001586:	2201      	movs	r2, #1
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 fa7f 	bl	8001a8c <BNO055_SendReceive>
 800158e:	4603      	mov	r3, r0
 8001590:	73fb      	strb	r3, [r7, #15]
 8001592:	e001      	b.n	8001598 <BNO055_Get_ACC_ID+0x6c>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e006      	b.n	80015a6 <BNO055_Get_ACC_ID+0x7a>
    }

    if(!res)
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d102      	bne.n	80015a4 <BNO055_Get_ACC_ID+0x78>
     	handle->IDs.ACC_ID = RxBuff[0];
 800159e:	7a3a      	ldrb	r2, [r7, #8]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	77da      	strb	r2, [r3, #31]

     return res;
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <BNO055_Get_GYR_ID>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_GYR_ID(BNO055_Sensor_T *handle){
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b086      	sub	sp, #24
 80015b2:	af02      	add	r7, sp, #8
 80015b4:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[1];
	BNO055_ReturnTypeDef_T res= BNO055_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	73fb      	strb	r3, [r7, #15]
	Txbuff[0] = BNO055_REG_ADDRESS_GYR_ID;
 80015ba:	2303      	movs	r3, #3
 80015bc:	733b      	strb	r3, [r7, #12]

    if(!BNO055_Get_PageID(handle)){
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 fa05 	bl	80019ce <BNO055_Get_PageID>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d125      	bne.n	8001616 <BNO055_Get_GYR_ID+0x68>
    	if(!handle->PageID){
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d10c      	bne.n	80015ee <BNO055_Get_GYR_ID+0x40>
    		res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 80015d4:	f107 0308 	add.w	r3, r7, #8
 80015d8:	f107 010c 	add.w	r1, r7, #12
 80015dc:	2201      	movs	r2, #1
 80015de:	9200      	str	r2, [sp, #0]
 80015e0:	2201      	movs	r2, #1
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 fa52 	bl	8001a8c <BNO055_SendReceive>
 80015e8:	4603      	mov	r3, r0
 80015ea:	73fb      	strb	r3, [r7, #15]
 80015ec:	e015      	b.n	800161a <BNO055_Get_GYR_ID+0x6c>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0)){
 80015ee:	2100      	movs	r1, #0
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 fa0a 	bl	8001a0a <BNO055_Set_PageID>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d10e      	bne.n	800161a <BNO055_Get_GYR_ID+0x6c>
    			res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 80015fc:	f107 0308 	add.w	r3, r7, #8
 8001600:	f107 010c 	add.w	r1, r7, #12
 8001604:	2201      	movs	r2, #1
 8001606:	9200      	str	r2, [sp, #0]
 8001608:	2201      	movs	r2, #1
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 fa3e 	bl	8001a8c <BNO055_SendReceive>
 8001610:	4603      	mov	r3, r0
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	e001      	b.n	800161a <BNO055_Get_GYR_ID+0x6c>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e007      	b.n	800162a <BNO055_Get_GYR_ID+0x7c>
    }

    if(!res)
 800161a:	7bfb      	ldrb	r3, [r7, #15]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d103      	bne.n	8001628 <BNO055_Get_GYR_ID+0x7a>
    	handle->IDs.GYR_ID = RxBuff[0];
 8001620:	7a3a      	ldrb	r2, [r7, #8]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    return res;
 8001628:	7bfb      	ldrb	r3, [r7, #15]
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <BNO055_Get_MAG_ID>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_MAG_ID(BNO055_Sensor_T *handle){
 8001632:	b580      	push	{r7, lr}
 8001634:	b086      	sub	sp, #24
 8001636:	af02      	add	r7, sp, #8
 8001638:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[1];
	BNO055_ReturnTypeDef_T res= BNO055_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	73fb      	strb	r3, [r7, #15]
	Txbuff[0] = BNO055_REG_ADDRESS_MAG_ID;
 800163e:	2302      	movs	r3, #2
 8001640:	733b      	strb	r3, [r7, #12]

    if(!BNO055_Get_PageID(handle)){
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 f9c3 	bl	80019ce <BNO055_Get_PageID>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d125      	bne.n	800169a <BNO055_Get_MAG_ID+0x68>
    	if(!handle->PageID){
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001654:	2b00      	cmp	r3, #0
 8001656:	d10c      	bne.n	8001672 <BNO055_Get_MAG_ID+0x40>
    		res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 8001658:	f107 0308 	add.w	r3, r7, #8
 800165c:	f107 010c 	add.w	r1, r7, #12
 8001660:	2201      	movs	r2, #1
 8001662:	9200      	str	r2, [sp, #0]
 8001664:	2201      	movs	r2, #1
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 fa10 	bl	8001a8c <BNO055_SendReceive>
 800166c:	4603      	mov	r3, r0
 800166e:	73fb      	strb	r3, [r7, #15]
 8001670:	e015      	b.n	800169e <BNO055_Get_MAG_ID+0x6c>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0)){
 8001672:	2100      	movs	r1, #0
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f000 f9c8 	bl	8001a0a <BNO055_Set_PageID>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d10e      	bne.n	800169e <BNO055_Get_MAG_ID+0x6c>
    			res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 8001680:	f107 0308 	add.w	r3, r7, #8
 8001684:	f107 010c 	add.w	r1, r7, #12
 8001688:	2201      	movs	r2, #1
 800168a:	9200      	str	r2, [sp, #0]
 800168c:	2201      	movs	r2, #1
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 f9fc 	bl	8001a8c <BNO055_SendReceive>
 8001694:	4603      	mov	r3, r0
 8001696:	73fb      	strb	r3, [r7, #15]
 8001698:	e001      	b.n	800169e <BNO055_Get_MAG_ID+0x6c>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e007      	b.n	80016ae <BNO055_Get_MAG_ID+0x7c>
    }

    if(!res)
 800169e:	7bfb      	ldrb	r3, [r7, #15]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d103      	bne.n	80016ac <BNO055_Get_MAG_ID+0x7a>
        handle->IDs.MAG_ID = RxBuff[0];
 80016a4:	7a3a      	ldrb	r2, [r7, #8]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f883 2020 	strb.w	r2, [r3, #32]

    return res;
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <BNO055_Get_ACC_Data>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_ACC_Data(BNO055_Sensor_T *handle){
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b088      	sub	sp, #32
 80016ba:	af02      	add	r7, sp, #8
 80016bc:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[6];
	BNO055_ReturnTypeDef_T res = BNO055_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	75fb      	strb	r3, [r7, #23]
	Txbuff[0] = BNO055_REG_ADDRESS_ACC_X_DATA_LSB;
 80016c2:	2308      	movs	r3, #8
 80016c4:	753b      	strb	r3, [r7, #20]

	BNO055_Get_PageID(handle);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 f981 	bl	80019ce <BNO055_Get_PageID>
	if(!handle->PageID)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10c      	bne.n	80016f0 <BNO055_Get_ACC_Data+0x3a>
		res =BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 6);
 80016d6:	f107 030c 	add.w	r3, r7, #12
 80016da:	f107 0114 	add.w	r1, r7, #20
 80016de:	2206      	movs	r2, #6
 80016e0:	9200      	str	r2, [sp, #0]
 80016e2:	2201      	movs	r2, #1
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 f9d1 	bl	8001a8c <BNO055_SendReceive>
 80016ea:	4603      	mov	r3, r0
 80016ec:	75fb      	strb	r3, [r7, #23]
 80016ee:	e012      	b.n	8001716 <BNO055_Get_ACC_Data+0x60>
	else{
		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0))
 80016f0:	2100      	movs	r1, #0
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 f989 	bl	8001a0a <BNO055_Set_PageID>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10b      	bne.n	8001716 <BNO055_Get_ACC_Data+0x60>
			res =BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 6);
 80016fe:	f107 030c 	add.w	r3, r7, #12
 8001702:	f107 0114 	add.w	r1, r7, #20
 8001706:	2206      	movs	r2, #6
 8001708:	9200      	str	r2, [sp, #0]
 800170a:	2201      	movs	r2, #1
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f000 f9bd 	bl	8001a8c <BNO055_SendReceive>
 8001712:	4603      	mov	r3, r0
 8001714:	75fb      	strb	r3, [r7, #23]
	}
	if(!res){
 8001716:	7dfb      	ldrb	r3, [r7, #23]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d14d      	bne.n	80017b8 <BNO055_Get_ACC_Data+0x102>
		if(!(RxBuff[1]>>7)){
 800171c:	7b7b      	ldrb	r3, [r7, #13]
 800171e:	b25b      	sxtb	r3, r3
 8001720:	2b00      	cmp	r3, #0
 8001722:	db0b      	blt.n	800173c <BNO055_Get_ACC_Data+0x86>
			if( ((RxBuff[1]>>6)&(0x01)) ){
 8001724:	7b7b      	ldrb	r3, [r7, #13]
 8001726:	099b      	lsrs	r3, r3, #6
 8001728:	b2db      	uxtb	r3, r3
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d004      	beq.n	800173c <BNO055_Get_ACC_Data+0x86>
				RxBuff[1] |= 0x80;
 8001732:	7b7b      	ldrb	r3, [r7, #13]
 8001734:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001738:	b2db      	uxtb	r3, r3
 800173a:	737b      	strb	r3, [r7, #13]
			}
		}
		if(!(RxBuff[3]>>7)){
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	b25b      	sxtb	r3, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	db0b      	blt.n	800175c <BNO055_Get_ACC_Data+0xa6>
			if( ((RxBuff[3]>>6)&(0x01)) ){
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	099b      	lsrs	r3, r3, #6
 8001748:	b2db      	uxtb	r3, r3
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	d004      	beq.n	800175c <BNO055_Get_ACC_Data+0xa6>
				RxBuff[3] |= 0x80;
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001758:	b2db      	uxtb	r3, r3
 800175a:	73fb      	strb	r3, [r7, #15]
			}
		}
		if(!(RxBuff[5]>>7)){
 800175c:	7c7b      	ldrb	r3, [r7, #17]
 800175e:	b25b      	sxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	db0b      	blt.n	800177c <BNO055_Get_ACC_Data+0xc6>
			if( ((RxBuff[5]>>6)&(0x01)) ){
 8001764:	7c7b      	ldrb	r3, [r7, #17]
 8001766:	099b      	lsrs	r3, r3, #6
 8001768:	b2db      	uxtb	r3, r3
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b00      	cmp	r3, #0
 8001770:	d004      	beq.n	800177c <BNO055_Get_ACC_Data+0xc6>
				RxBuff[5] |= 0x80;
 8001772:	7c7b      	ldrb	r3, [r7, #17]
 8001774:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001778:	b2db      	uxtb	r3, r3
 800177a:	747b      	strb	r3, [r7, #17]
			}
		}
		handle->ImuData.ACC_X = (int16_t)((int16_t)(RxBuff[1]<<8) | RxBuff[0]);
 800177c:	7b7b      	ldrb	r3, [r7, #13]
 800177e:	b21b      	sxth	r3, r3
 8001780:	021b      	lsls	r3, r3, #8
 8001782:	b21a      	sxth	r2, r3
 8001784:	7b3b      	ldrb	r3, [r7, #12]
 8001786:	b21b      	sxth	r3, r3
 8001788:	4313      	orrs	r3, r2
 800178a:	b21a      	sxth	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	819a      	strh	r2, [r3, #12]
		handle->ImuData.ACC_Y = (int16_t)((int16_t)(RxBuff[3]<<8) | RxBuff[2]);
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	b21b      	sxth	r3, r3
 8001794:	021b      	lsls	r3, r3, #8
 8001796:	b21a      	sxth	r2, r3
 8001798:	7bbb      	ldrb	r3, [r7, #14]
 800179a:	b21b      	sxth	r3, r3
 800179c:	4313      	orrs	r3, r2
 800179e:	b21a      	sxth	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	81da      	strh	r2, [r3, #14]
		handle->ImuData.ACC_Z = (int16_t)((int16_t)(RxBuff[5]<<8) | RxBuff[4]);
 80017a4:	7c7b      	ldrb	r3, [r7, #17]
 80017a6:	b21b      	sxth	r3, r3
 80017a8:	021b      	lsls	r3, r3, #8
 80017aa:	b21a      	sxth	r2, r3
 80017ac:	7c3b      	ldrb	r3, [r7, #16]
 80017ae:	b21b      	sxth	r3, r3
 80017b0:	4313      	orrs	r3, r2
 80017b2:	b21a      	sxth	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	821a      	strh	r2, [r3, #16]
	}
	return res;
 80017b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <BNO055_Get_MAG_Data>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_MAG_Data(BNO055_Sensor_T *handle){
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b088      	sub	sp, #32
 80017c6:	af02      	add	r7, sp, #8
 80017c8:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[6];
	BNO055_ReturnTypeDef_T res = BNO055_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	75fb      	strb	r3, [r7, #23]
	Txbuff[0] = BNO055_REG_ADDRESS_MAG_X_DATA_LSB;
 80017ce:	230e      	movs	r3, #14
 80017d0:	753b      	strb	r3, [r7, #20]

	BNO055_Get_PageID(handle);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f8fb 	bl	80019ce <BNO055_Get_PageID>
	if(!handle->PageID)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10c      	bne.n	80017fc <BNO055_Get_MAG_Data+0x3a>
		res =BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 6);
 80017e2:	f107 030c 	add.w	r3, r7, #12
 80017e6:	f107 0114 	add.w	r1, r7, #20
 80017ea:	2206      	movs	r2, #6
 80017ec:	9200      	str	r2, [sp, #0]
 80017ee:	2201      	movs	r2, #1
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 f94b 	bl	8001a8c <BNO055_SendReceive>
 80017f6:	4603      	mov	r3, r0
 80017f8:	75fb      	strb	r3, [r7, #23]
 80017fa:	e012      	b.n	8001822 <BNO055_Get_MAG_Data+0x60>
	else{
		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0))
 80017fc:	2100      	movs	r1, #0
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 f903 	bl	8001a0a <BNO055_Set_PageID>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10b      	bne.n	8001822 <BNO055_Get_MAG_Data+0x60>
			res =BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 6);
 800180a:	f107 030c 	add.w	r3, r7, #12
 800180e:	f107 0114 	add.w	r1, r7, #20
 8001812:	2206      	movs	r2, #6
 8001814:	9200      	str	r2, [sp, #0]
 8001816:	2201      	movs	r2, #1
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 f937 	bl	8001a8c <BNO055_SendReceive>
 800181e:	4603      	mov	r3, r0
 8001820:	75fb      	strb	r3, [r7, #23]
	}

	if(!res){
 8001822:	7dfb      	ldrb	r3, [r7, #23]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d11d      	bne.n	8001864 <BNO055_Get_MAG_Data+0xa2>
		handle->ImuData.MAG_X = (RxBuff[0] | (RxBuff[1]<<8));
 8001828:	7b3b      	ldrb	r3, [r7, #12]
 800182a:	b21a      	sxth	r2, r3
 800182c:	7b7b      	ldrb	r3, [r7, #13]
 800182e:	b21b      	sxth	r3, r3
 8001830:	021b      	lsls	r3, r3, #8
 8001832:	b21b      	sxth	r3, r3
 8001834:	4313      	orrs	r3, r2
 8001836:	b21a      	sxth	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	831a      	strh	r2, [r3, #24]
		handle->ImuData.MAG_Y = (RxBuff[2] | (RxBuff[3]<<8));
 800183c:	7bbb      	ldrb	r3, [r7, #14]
 800183e:	b21a      	sxth	r2, r3
 8001840:	7bfb      	ldrb	r3, [r7, #15]
 8001842:	b21b      	sxth	r3, r3
 8001844:	021b      	lsls	r3, r3, #8
 8001846:	b21b      	sxth	r3, r3
 8001848:	4313      	orrs	r3, r2
 800184a:	b21a      	sxth	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	835a      	strh	r2, [r3, #26]
		handle->ImuData.MAG_Z = (RxBuff[4] | (RxBuff[5]<<8));
 8001850:	7c3b      	ldrb	r3, [r7, #16]
 8001852:	b21a      	sxth	r2, r3
 8001854:	7c7b      	ldrb	r3, [r7, #17]
 8001856:	b21b      	sxth	r3, r3
 8001858:	021b      	lsls	r3, r3, #8
 800185a:	b21b      	sxth	r3, r3
 800185c:	4313      	orrs	r3, r2
 800185e:	b21a      	sxth	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	839a      	strh	r2, [r3, #28]
	}
	return res;
 8001864:	7dfb      	ldrb	r3, [r7, #23]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <BNO055_Get_GYR_Data>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_GYR_Data(BNO055_Sensor_T *handle){
 800186e:	b580      	push	{r7, lr}
 8001870:	b088      	sub	sp, #32
 8001872:	af02      	add	r7, sp, #8
 8001874:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[6];
	BNO055_ReturnTypeDef_T res = BNO055_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	75fb      	strb	r3, [r7, #23]
	Txbuff[0] = BNO055_REG_ADDRESS_GYR_X_DATA_LSB;
 800187a:	2314      	movs	r3, #20
 800187c:	753b      	strb	r3, [r7, #20]

	BNO055_Get_PageID(handle);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 f8a5 	bl	80019ce <BNO055_Get_PageID>
	if(!handle->PageID)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800188a:	2b00      	cmp	r3, #0
 800188c:	d10c      	bne.n	80018a8 <BNO055_Get_GYR_Data+0x3a>
		res =BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 6);
 800188e:	f107 030c 	add.w	r3, r7, #12
 8001892:	f107 0114 	add.w	r1, r7, #20
 8001896:	2206      	movs	r2, #6
 8001898:	9200      	str	r2, [sp, #0]
 800189a:	2201      	movs	r2, #1
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 f8f5 	bl	8001a8c <BNO055_SendReceive>
 80018a2:	4603      	mov	r3, r0
 80018a4:	75fb      	strb	r3, [r7, #23]
 80018a6:	e012      	b.n	80018ce <BNO055_Get_GYR_Data+0x60>
	else{
		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0))
 80018a8:	2100      	movs	r1, #0
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 f8ad 	bl	8001a0a <BNO055_Set_PageID>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10b      	bne.n	80018ce <BNO055_Get_GYR_Data+0x60>
			res =BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 6);
 80018b6:	f107 030c 	add.w	r3, r7, #12
 80018ba:	f107 0114 	add.w	r1, r7, #20
 80018be:	2206      	movs	r2, #6
 80018c0:	9200      	str	r2, [sp, #0]
 80018c2:	2201      	movs	r2, #1
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 f8e1 	bl	8001a8c <BNO055_SendReceive>
 80018ca:	4603      	mov	r3, r0
 80018cc:	75fb      	strb	r3, [r7, #23]
		}

	if(!res){
 80018ce:	7dfb      	ldrb	r3, [r7, #23]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d11d      	bne.n	8001910 <BNO055_Get_GYR_Data+0xa2>
		handle->ImuData.GYR_X = (RxBuff[0] | (RxBuff[1]<<8));
 80018d4:	7b3b      	ldrb	r3, [r7, #12]
 80018d6:	b21a      	sxth	r2, r3
 80018d8:	7b7b      	ldrb	r3, [r7, #13]
 80018da:	b21b      	sxth	r3, r3
 80018dc:	021b      	lsls	r3, r3, #8
 80018de:	b21b      	sxth	r3, r3
 80018e0:	4313      	orrs	r3, r2
 80018e2:	b21a      	sxth	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	825a      	strh	r2, [r3, #18]
		handle->ImuData.GYR_Y = (RxBuff[2] | (RxBuff[3]<<8));
 80018e8:	7bbb      	ldrb	r3, [r7, #14]
 80018ea:	b21a      	sxth	r2, r3
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	b21b      	sxth	r3, r3
 80018f0:	021b      	lsls	r3, r3, #8
 80018f2:	b21b      	sxth	r3, r3
 80018f4:	4313      	orrs	r3, r2
 80018f6:	b21a      	sxth	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	829a      	strh	r2, [r3, #20]
		handle->ImuData.GYR_Z = (RxBuff[4] | (RxBuff[5]<<8));
 80018fc:	7c3b      	ldrb	r3, [r7, #16]
 80018fe:	b21a      	sxth	r2, r3
 8001900:	7c7b      	ldrb	r3, [r7, #17]
 8001902:	b21b      	sxth	r3, r3
 8001904:	021b      	lsls	r3, r3, #8
 8001906:	b21b      	sxth	r3, r3
 8001908:	4313      	orrs	r3, r2
 800190a:	b21a      	sxth	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	82da      	strh	r2, [r3, #22]
	}
		return res;
 8001910:	7dfb      	ldrb	r3, [r7, #23]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <BNO055_Set_DataUnit>:
}

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_DataUnit(BNO055_Sensor_T *handle, uint8_t data){
 800191a:	b580      	push	{r7, lr}
 800191c:	b086      	sub	sp, #24
 800191e:	af02      	add	r7, sp, #8
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	460b      	mov	r3, r1
 8001924:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = 0x3B;
 8001926:	233b      	movs	r3, #59	@ 0x3b
 8001928:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = data;
 800192a:	78fb      	ldrb	r3, [r7, #3]
 800192c:	737b      	strb	r3, [r7, #13]

	BNO055_Get_PageID(handle);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f84d 	bl	80019ce <BNO055_Get_PageID>
	if(handle->PageID){
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <BNO055_Set_DataUnit+0x2c>
		BNO055_Set_PageID(handle, BNO055_PAGE_ID_0);
 800193e:	2100      	movs	r1, #0
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 f862 	bl	8001a0a <BNO055_Set_PageID>
	}

	if(!handle->PageID){
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800194c:	2b00      	cmp	r3, #0
 800194e:	d10a      	bne.n	8001966 <BNO055_Set_DataUnit+0x4c>
		return BNO055_SendReceive(handle, TxBuff, 2, 0, 0);
 8001950:	f107 010c 	add.w	r1, r7, #12
 8001954:	2300      	movs	r3, #0
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	2300      	movs	r3, #0
 800195a:	2202      	movs	r2, #2
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 f895 	bl	8001a8c <BNO055_SendReceive>
 8001962:	4603      	mov	r3, r0
 8001964:	e000      	b.n	8001968 <BNO055_Set_DataUnit+0x4e>
	}
	return BNO055_ERROR;
 8001966:	2301      	movs	r3, #1
}
 8001968:	4618      	mov	r0, r3
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <BNO055_Get_DataUnit>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_DataUnit(BNO055_Sensor_T *handle){
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af02      	add	r7, sp, #8
 8001976:	6078      	str	r0, [r7, #4]
	uint8_t TxBuff[1], RxBuff[1];
	TxBuff[0] = 0x3B;
 8001978:	233b      	movs	r3, #59	@ 0x3b
 800197a:	733b      	strb	r3, [r7, #12]

	BNO055_Get_PageID(handle);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 f826 	bl	80019ce <BNO055_Get_PageID>
	if(handle->PageID){
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <BNO055_Get_DataUnit+0x24>
		BNO055_Set_PageID(handle, BNO055_PAGE_ID_0);
 800198c:	2100      	movs	r1, #0
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 f83b 	bl	8001a0a <BNO055_Set_PageID>
	}
	if(!handle->PageID){
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800199a:	2b00      	cmp	r3, #0
 800199c:	d112      	bne.n	80019c4 <BNO055_Get_DataUnit+0x54>
		if(!BNO055_SendReceive(handle, TxBuff, 1, RxBuff, 1)){
 800199e:	f107 0308 	add.w	r3, r7, #8
 80019a2:	f107 010c 	add.w	r1, r7, #12
 80019a6:	2201      	movs	r2, #1
 80019a8:	9200      	str	r2, [sp, #0]
 80019aa:	2201      	movs	r2, #1
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f000 f86d 	bl	8001a8c <BNO055_SendReceive>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d105      	bne.n	80019c4 <BNO055_Get_DataUnit+0x54>
			handle->UnitStat = RxBuff[0];
 80019b8:	7a3a      	ldrb	r2, [r7, #8]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			return BNO055_OK;
 80019c0:	2300      	movs	r3, #0
 80019c2:	e000      	b.n	80019c6 <BNO055_Get_DataUnit+0x56>
		}
	}
	return BNO055_ERROR;
 80019c4:	2301      	movs	r3, #1

}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <BNO055_Get_PageID>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_PageID(BNO055_Sensor_T *handle){
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b086      	sub	sp, #24
 80019d2:	af02      	add	r7, sp, #8
 80019d4:	6078      	str	r0, [r7, #4]
	uint8_t TxBuff[1], RxBuff[1];
	TxBuff[0] = 0x07;
 80019d6:	2307      	movs	r3, #7
 80019d8:	733b      	strb	r3, [r7, #12]
	if(BNO055_SendReceive(handle, TxBuff, 1, RxBuff, 1))
 80019da:	f107 0308 	add.w	r3, r7, #8
 80019de:	f107 010c 	add.w	r1, r7, #12
 80019e2:	2201      	movs	r2, #1
 80019e4:	9200      	str	r2, [sp, #0]
 80019e6:	2201      	movs	r2, #1
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f84f 	bl	8001a8c <BNO055_SendReceive>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <BNO055_Get_PageID+0x2a>
		return BNO055_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e004      	b.n	8001a02 <BNO055_Get_PageID+0x34>
	else
		handle->PageID = RxBuff[0];
 80019f8:	7a3a      	ldrb	r2, [r7, #8]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	return BNO055_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <BNO055_Set_PageID>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_PageID(BNO055_Sensor_T *handle, uint8_t PageID){
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b086      	sub	sp, #24
 8001a0e:	af02      	add	r7, sp, #8
 8001a10:	6078      	str	r0, [r7, #4]
 8001a12:	460b      	mov	r3, r1
 8001a14:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = 0x07;
 8001a16:	2307      	movs	r3, #7
 8001a18:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = PageID;
 8001a1a:	78fb      	ldrb	r3, [r7, #3]
 8001a1c:	737b      	strb	r3, [r7, #13]
	if(BNO055_SendReceive(handle, TxBuff, 2, 0, 0))
 8001a1e:	f107 010c 	add.w	r1, r7, #12
 8001a22:	2300      	movs	r3, #0
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	2300      	movs	r3, #0
 8001a28:	2202      	movs	r2, #2
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f82e 	bl	8001a8c <BNO055_SendReceive>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <BNO055_Set_PageID+0x30>
		return BNO055_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e006      	b.n	8001a48 <BNO055_Set_PageID+0x3e>
	else{
		HAL_Delay(5);
 8001a3a:	2005      	movs	r0, #5
 8001a3c:	f000 fdaa 	bl	8002594 <HAL_Delay>
		BNO055_Get_PageID(handle);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff ffc4 	bl	80019ce <BNO055_Get_PageID>
		return BNO055_OK;
 8001a46:	2300      	movs	r3, #0
	}
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <BNO055_Get_SysError>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_SysError(BNO055_Sensor_T *handle){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af02      	add	r7, sp, #8
 8001a56:	6078      	str	r0, [r7, #4]
	uint8_t TxBuff[1], RxBuff[1];
	TxBuff[0] = 0x3A;
 8001a58:	233a      	movs	r3, #58	@ 0x3a
 8001a5a:	733b      	strb	r3, [r7, #12]
	if(BNO055_SendReceive(handle, TxBuff, 1, RxBuff, 1))
 8001a5c:	f107 0308 	add.w	r3, r7, #8
 8001a60:	f107 010c 	add.w	r1, r7, #12
 8001a64:	2201      	movs	r2, #1
 8001a66:	9200      	str	r2, [sp, #0]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f80e 	bl	8001a8c <BNO055_SendReceive>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <BNO055_Get_SysError+0x2a>
		return BNO055_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e004      	b.n	8001a84 <BNO055_Get_SysError+0x34>
	else
		handle->SysError = RxBuff[0];
 8001a7a:	7a3a      	ldrb	r2, [r7, #8]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
	return BNO055_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <BNO055_SendReceive>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_SendReceive(BNO055_Sensor_T *handle, uint8_t *txBuff, uint8_t txLenght, uint8_t *rxBuff, uint8_t rxLenght){
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af02      	add	r7, sp, #8
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	603b      	str	r3, [r7, #0]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	71fb      	strb	r3, [r7, #7]
	return BNO055_CommPorter_SendReceive(handle->I2C_No, handle->Chip_I2C_Address, txBuff, txLenght, rxBuff, rxLenght);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	7818      	ldrb	r0, [r3, #0]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	7859      	ldrb	r1, [r3, #1]
 8001aa4:	79fa      	ldrb	r2, [r7, #7]
 8001aa6:	7e3b      	ldrb	r3, [r7, #24]
 8001aa8:	9301      	str	r3, [sp, #4]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	f000 f805 	bl	8001ac0 <BNO055_CommPorter_SendReceive>
 8001ab6:	4603      	mov	r3, r0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <BNO055_CommPorter_SendReceive>:
 */

#include <stdint.h>
#include "I2C.h"

uint8_t BNO055_CommPorter_SendReceive(uint8_t I2CNo, uint8_t DevAddress, uint8_t *txBuff, uint8_t txLenght, uint8_t *rxBuff, uint8_t rxLenght){
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af02      	add	r7, sp, #8
 8001ac6:	603a      	str	r2, [r7, #0]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
 8001ace:	460b      	mov	r3, r1
 8001ad0:	71bb      	strb	r3, [r7, #6]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	717b      	strb	r3, [r7, #5]
	return I2C_ReadWrite_Poll(I2CNo, DevAddress, txBuff, txLenght, rxBuff, rxLenght);
 8001ad6:	797a      	ldrb	r2, [r7, #5]
 8001ad8:	79b9      	ldrb	r1, [r7, #6]
 8001ada:	79f8      	ldrb	r0, [r7, #7]
 8001adc:	7d3b      	ldrb	r3, [r7, #20]
 8001ade:	9301      	str	r3, [sp, #4]
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	f7fe feee 	bl	80008c8 <I2C_ReadWrite_Poll>
 8001aec:	4603      	mov	r3, r0
//	return I2C_ReadWrite_IT(I2CNo, DevAddress, txBuff, txLenght, rxBuff, rxLenght);
//	return I2C_ReadWrite_DMA(I2CNo, DevAddress, txBuff, txLenght, rxBuff, rxLenght);
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08a      	sub	sp, #40	@ 0x28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001b04:	f008 fee8 	bl	800a8d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001b08:	4b5d      	ldr	r3, [pc, #372]	@ (8001c80 <pvPortMallocMicroROS+0x188>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001b10:	f000 f990 	bl	8001e34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001b14:	4b5b      	ldr	r3, [pc, #364]	@ (8001c84 <pvPortMallocMicroROS+0x18c>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f040 8094 	bne.w	8001c4a <pvPortMallocMicroROS+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d020      	beq.n	8001b6a <pvPortMallocMicroROS+0x72>
			{
				xWantedSize += xHeapStructSize;
 8001b28:	2208      	movs	r2, #8
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d017      	beq.n	8001b6a <pvPortMallocMicroROS+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f023 0307 	bic.w	r3, r3, #7
 8001b40:	3308      	adds	r3, #8
 8001b42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00d      	beq.n	8001b6a <pvPortMallocMicroROS+0x72>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b52:	b672      	cpsid	i
 8001b54:	f383 8811 	msr	BASEPRI, r3
 8001b58:	f3bf 8f6f 	isb	sy
 8001b5c:	f3bf 8f4f 	dsb	sy
 8001b60:	b662      	cpsie	i
 8001b62:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001b64:	bf00      	nop
 8001b66:	bf00      	nop
 8001b68:	e7fd      	b.n	8001b66 <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d06c      	beq.n	8001c4a <pvPortMallocMicroROS+0x152>
 8001b70:	4b45      	ldr	r3, [pc, #276]	@ (8001c88 <pvPortMallocMicroROS+0x190>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d867      	bhi.n	8001c4a <pvPortMallocMicroROS+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001b7a:	4b44      	ldr	r3, [pc, #272]	@ (8001c8c <pvPortMallocMicroROS+0x194>)
 8001b7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001b7e:	4b43      	ldr	r3, [pc, #268]	@ (8001c8c <pvPortMallocMicroROS+0x194>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001b84:	e004      	b.n	8001b90 <pvPortMallocMicroROS+0x98>
				{
					pxPreviousBlock = pxBlock;
 8001b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d903      	bls.n	8001ba2 <pvPortMallocMicroROS+0xaa>
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f1      	bne.n	8001b86 <pvPortMallocMicroROS+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001ba2:	4b37      	ldr	r3, [pc, #220]	@ (8001c80 <pvPortMallocMicroROS+0x188>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d04e      	beq.n	8001c4a <pvPortMallocMicroROS+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001bac:	6a3b      	ldr	r3, [r7, #32]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2208      	movs	r2, #8
 8001bb2:	4413      	add	r3, r2
 8001bb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	1ad2      	subs	r2, r2, r3
 8001bc6:	2308      	movs	r3, #8
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d922      	bls.n	8001c14 <pvPortMallocMicroROS+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00d      	beq.n	8001bfc <pvPortMallocMicroROS+0x104>
	__asm volatile
 8001be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001be4:	b672      	cpsid	i
 8001be6:	f383 8811 	msr	BASEPRI, r3
 8001bea:	f3bf 8f6f 	isb	sy
 8001bee:	f3bf 8f4f 	dsb	sy
 8001bf2:	b662      	cpsie	i
 8001bf4:	613b      	str	r3, [r7, #16]
}
 8001bf6:	bf00      	nop
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <pvPortMallocMicroROS+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	1ad2      	subs	r2, r2, r3
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001c0e:	69b8      	ldr	r0, [r7, #24]
 8001c10:	f000 f972 	bl	8001ef8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001c14:	4b1c      	ldr	r3, [pc, #112]	@ (8001c88 <pvPortMallocMicroROS+0x190>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	4a1a      	ldr	r2, [pc, #104]	@ (8001c88 <pvPortMallocMicroROS+0x190>)
 8001c20:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001c22:	4b19      	ldr	r3, [pc, #100]	@ (8001c88 <pvPortMallocMicroROS+0x190>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	4b1a      	ldr	r3, [pc, #104]	@ (8001c90 <pvPortMallocMicroROS+0x198>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d203      	bcs.n	8001c36 <pvPortMallocMicroROS+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001c2e:	4b16      	ldr	r3, [pc, #88]	@ (8001c88 <pvPortMallocMicroROS+0x190>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a17      	ldr	r2, [pc, #92]	@ (8001c90 <pvPortMallocMicroROS+0x198>)
 8001c34:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	4b12      	ldr	r3, [pc, #72]	@ (8001c84 <pvPortMallocMicroROS+0x18c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c42:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001c4a:	f008 fe53 	bl	800a8f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d00d      	beq.n	8001c74 <pvPortMallocMicroROS+0x17c>
	__asm volatile
 8001c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c5c:	b672      	cpsid	i
 8001c5e:	f383 8811 	msr	BASEPRI, r3
 8001c62:	f3bf 8f6f 	isb	sy
 8001c66:	f3bf 8f4f 	dsb	sy
 8001c6a:	b662      	cpsie	i
 8001c6c:	60fb      	str	r3, [r7, #12]
}
 8001c6e:	bf00      	nop
 8001c70:	bf00      	nop
 8001c72:	e7fd      	b.n	8001c70 <pvPortMallocMicroROS+0x178>
	return pvReturn;
 8001c74:	69fb      	ldr	r3, [r7, #28]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3728      	adds	r7, #40	@ 0x28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	200045d8 	.word	0x200045d8
 8001c84:	200045e4 	.word	0x200045e4
 8001c88:	200045dc 	.word	0x200045dc
 8001c8c:	200045d0 	.word	0x200045d0
 8001c90:	200045e0 	.word	0x200045e0

08001c94 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d04e      	beq.n	8001d44 <vPortFreeMicroROS+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001ca6:	2308      	movs	r3, #8
 8001ca8:	425b      	negs	r3, r3
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	4413      	add	r3, r2
 8001cae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	4b24      	ldr	r3, [pc, #144]	@ (8001d4c <vPortFreeMicroROS+0xb8>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10d      	bne.n	8001cde <vPortFreeMicroROS+0x4a>
	__asm volatile
 8001cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cc6:	b672      	cpsid	i
 8001cc8:	f383 8811 	msr	BASEPRI, r3
 8001ccc:	f3bf 8f6f 	isb	sy
 8001cd0:	f3bf 8f4f 	dsb	sy
 8001cd4:	b662      	cpsie	i
 8001cd6:	60fb      	str	r3, [r7, #12]
}
 8001cd8:	bf00      	nop
 8001cda:	bf00      	nop
 8001cdc:	e7fd      	b.n	8001cda <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00d      	beq.n	8001d02 <vPortFreeMicroROS+0x6e>
	__asm volatile
 8001ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cea:	b672      	cpsid	i
 8001cec:	f383 8811 	msr	BASEPRI, r3
 8001cf0:	f3bf 8f6f 	isb	sy
 8001cf4:	f3bf 8f4f 	dsb	sy
 8001cf8:	b662      	cpsie	i
 8001cfa:	60bb      	str	r3, [r7, #8]
}
 8001cfc:	bf00      	nop
 8001cfe:	bf00      	nop
 8001d00:	e7fd      	b.n	8001cfe <vPortFreeMicroROS+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	4b11      	ldr	r3, [pc, #68]	@ (8001d4c <vPortFreeMicroROS+0xb8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d019      	beq.n	8001d44 <vPortFreeMicroROS+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d115      	bne.n	8001d44 <vPortFreeMicroROS+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d4c <vPortFreeMicroROS+0xb8>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	401a      	ands	r2, r3
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001d28:	f008 fdd6 	bl	800a8d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	4b07      	ldr	r3, [pc, #28]	@ (8001d50 <vPortFreeMicroROS+0xbc>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4413      	add	r3, r2
 8001d36:	4a06      	ldr	r2, [pc, #24]	@ (8001d50 <vPortFreeMicroROS+0xbc>)
 8001d38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001d3a:	6938      	ldr	r0, [r7, #16]
 8001d3c:	f000 f8dc 	bl	8001ef8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001d40:	f008 fdd8 	bl	800a8f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001d44:	bf00      	nop
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	200045e4 	.word	0x200045e4
 8001d50:	200045dc 	.word	0x200045dc

08001d54 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001d54:	b480      	push	{r7}
 8001d56:	b087      	sub	sp, #28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001d60:	2308      	movs	r3, #8
 8001d62:	425b      	negs	r3, r3
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	4413      	add	r3, r2
 8001d68:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <getBlockSize+0x38>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	43db      	mvns	r3, r3
 8001d78:	4013      	ands	r3, r2
 8001d7a:	60fb      	str	r3, [r7, #12]

	return count;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	371c      	adds	r7, #28
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	200045e4 	.word	0x200045e4

08001d90 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001d9a:	f008 fd9d 	bl	800a8d8 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001d9e:	6838      	ldr	r0, [r7, #0]
 8001da0:	f7ff feaa 	bl	8001af8 <pvPortMallocMicroROS>
 8001da4:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d017      	beq.n	8001ddc <pvPortReallocMicroROS+0x4c>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d014      	beq.n	8001ddc <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7ff ffce 	bl	8001d54 <getBlockSize>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2208      	movs	r2, #8
 8001dbc:	1a9b      	subs	r3, r3, r2
 8001dbe:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d201      	bcs.n	8001dcc <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	68b8      	ldr	r0, [r7, #8]
 8001dd2:	f014 ffb2 	bl	8016d3a <memcpy>

		vPortFreeMicroROS(pv);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff ff5c 	bl	8001c94 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001ddc:	f008 fd8a 	bl	800a8f4 <xTaskResumeAll>

	return newmem;
 8001de0:	68bb      	ldr	r3, [r7, #8]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b086      	sub	sp, #24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001df4:	f008 fd70 	bl	800a8d8 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	fb02 f303 	mul.w	r3, r2, r3
 8001e00:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001e02:	6978      	ldr	r0, [r7, #20]
 8001e04:	f7ff fe78 	bl	8001af8 <pvPortMallocMicroROS>
 8001e08:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001e0e:	e004      	b.n	8001e1a <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	613a      	str	r2, [r7, #16]
 8001e16:	2200      	movs	r2, #0
 8001e18:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	1e5a      	subs	r2, r3, #1
 8001e1e:	617a      	str	r2, [r7, #20]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1f5      	bne.n	8001e10 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001e24:	f008 fd66 	bl	800a8f4 <xTaskResumeAll>
  	return mem;
 8001e28:	68fb      	ldr	r3, [r7, #12]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001e3a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8001e3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001e40:	4b27      	ldr	r3, [pc, #156]	@ (8001ee0 <prvHeapInit+0xac>)
 8001e42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00c      	beq.n	8001e68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	3307      	adds	r3, #7
 8001e52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f023 0307 	bic.w	r3, r3, #7
 8001e5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001e5c:	68ba      	ldr	r2, [r7, #8]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	4a1f      	ldr	r2, [pc, #124]	@ (8001ee0 <prvHeapInit+0xac>)
 8001e64:	4413      	add	r3, r2
 8001e66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001e6c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ee4 <prvHeapInit+0xb0>)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001e72:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee4 <prvHeapInit+0xb0>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001e80:	2208      	movs	r2, #8
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	1a9b      	subs	r3, r3, r2
 8001e86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f023 0307 	bic.w	r3, r3, #7
 8001e8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4a15      	ldr	r2, [pc, #84]	@ (8001ee8 <prvHeapInit+0xb4>)
 8001e94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001e96:	4b14      	ldr	r3, [pc, #80]	@ (8001ee8 <prvHeapInit+0xb4>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001e9e:	4b12      	ldr	r3, [pc, #72]	@ (8001ee8 <prvHeapInit+0xb4>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	1ad2      	subs	r2, r2, r3
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee8 <prvHeapInit+0xb4>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8001eec <prvHeapInit+0xb8>)
 8001ec2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	4a09      	ldr	r2, [pc, #36]	@ (8001ef0 <prvHeapInit+0xbc>)
 8001eca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001ecc:	4b09      	ldr	r3, [pc, #36]	@ (8001ef4 <prvHeapInit+0xc0>)
 8001ece:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001ed2:	601a      	str	r2, [r3, #0]
}
 8001ed4:	bf00      	nop
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	200009d0 	.word	0x200009d0
 8001ee4:	200045d0 	.word	0x200045d0
 8001ee8:	200045d8 	.word	0x200045d8
 8001eec:	200045e0 	.word	0x200045e0
 8001ef0:	200045dc 	.word	0x200045dc
 8001ef4:	200045e4 	.word	0x200045e4

08001ef8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001f00:	4b28      	ldr	r3, [pc, #160]	@ (8001fa4 <prvInsertBlockIntoFreeList+0xac>)
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	e002      	b.n	8001f0c <prvInsertBlockIntoFreeList+0x14>
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d8f7      	bhi.n	8001f06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	4413      	add	r3, r2
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d108      	bne.n	8001f3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	441a      	add	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	441a      	add	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d118      	bne.n	8001f80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	4b15      	ldr	r3, [pc, #84]	@ (8001fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d00d      	beq.n	8001f76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	441a      	add	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	e008      	b.n	8001f88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001f76:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	e003      	b.n	8001f88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d002      	beq.n	8001f96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001f96:	bf00      	nop
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	200045d0 	.word	0x200045d0
 8001fa8:	200045d8 	.word	0x200045d8

08001fac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fb0:	f001 faef 	bl	8003592 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fb4:	f000 f848 	bl	8002048 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fb8:	f000 fa4e 	bl	8002458 <MX_GPIO_Init>
  MX_DMA_Init();
 8001fbc:	f000 fa26 	bl	800240c <MX_DMA_Init>
  MX_I2C2_Init();
 8001fc0:	f000 f8b4 	bl	800212c <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8001fc4:	f000 f9f2 	bl	80023ac <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8001fc8:	f000 f8f4 	bl	80021b4 <MX_I2C3_Init>
  MX_SPI1_Init();
 8001fcc:	f000 f936 	bl	800223c <MX_SPI1_Init>
  MX_TIM3_Init();
 8001fd0:	f000 f972 	bl	80022b8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001fd4:	f006 ff76 	bl	8008ec4 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Microros_DataMutex */
  Microros_DataMutexHandle = osMutexNew(&Microros_DataMutex_attributes);
 8001fd8:	4810      	ldr	r0, [pc, #64]	@ (800201c <main+0x70>)
 8001fda:	f007 f8b1 	bl	8009140 <osMutexNew>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	4a0f      	ldr	r2, [pc, #60]	@ (8002020 <main+0x74>)
 8001fe2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Thread_MicroROS */
  Thread_MicroROSHandle = osThreadNew(TaskMicroROS, NULL, &Thread_MicroROS_attributes);
 8001fe4:	4a0f      	ldr	r2, [pc, #60]	@ (8002024 <main+0x78>)
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	480f      	ldr	r0, [pc, #60]	@ (8002028 <main+0x7c>)
 8001fea:	f006 ffd5 	bl	8008f98 <osThreadNew>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	4a0e      	ldr	r2, [pc, #56]	@ (800202c <main+0x80>)
 8001ff2:	6013      	str	r3, [r2, #0]

  /* creation of Thread_Sensors */
  Thread_SensorsHandle = osThreadNew(TaskSensors, NULL, &Thread_Sensors_attributes);
 8001ff4:	4a0e      	ldr	r2, [pc, #56]	@ (8002030 <main+0x84>)
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	480e      	ldr	r0, [pc, #56]	@ (8002034 <main+0x88>)
 8001ffa:	f006 ffcd 	bl	8008f98 <osThreadNew>
 8001ffe:	4603      	mov	r3, r0
 8002000:	4a0d      	ldr	r2, [pc, #52]	@ (8002038 <main+0x8c>)
 8002002:	6013      	str	r3, [r2, #0]

  /* creation of Thread_LedHandl */
  Thread_LedHandlHandle = osThreadNew(TaskLed, NULL, &Thread_LedHandl_attributes);
 8002004:	4a0d      	ldr	r2, [pc, #52]	@ (800203c <main+0x90>)
 8002006:	2100      	movs	r1, #0
 8002008:	480d      	ldr	r0, [pc, #52]	@ (8002040 <main+0x94>)
 800200a:	f006 ffc5 	bl	8008f98 <osThreadNew>
 800200e:	4603      	mov	r3, r0
 8002010:	4a0c      	ldr	r2, [pc, #48]	@ (8002044 <main+0x98>)
 8002012:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002014:	f006 ff8a 	bl	8008f2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002018:	bf00      	nop
 800201a:	e7fd      	b.n	8002018 <main+0x6c>
 800201c:	08017b3c 	.word	0x08017b3c
 8002020:	20004a08 	.word	0x20004a08
 8002024:	08017ad0 	.word	0x08017ad0
 8002028:	080025ad 	.word	0x080025ad
 800202c:	200049fc 	.word	0x200049fc
 8002030:	08017af4 	.word	0x08017af4
 8002034:	080027dd 	.word	0x080027dd
 8002038:	20004a00 	.word	0x20004a00
 800203c:	08017b18 	.word	0x08017b18
 8002040:	0800288d 	.word	0x0800288d
 8002044:	20004a04 	.word	0x20004a04

08002048 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b094      	sub	sp, #80	@ 0x50
 800204c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800204e:	f107 031c 	add.w	r3, r7, #28
 8002052:	2234      	movs	r2, #52	@ 0x34
 8002054:	2100      	movs	r1, #0
 8002056:	4618      	mov	r0, r3
 8002058:	f014 fda6 	bl	8016ba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800205c:	f107 0308 	add.w	r3, r7, #8
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800206c:	f002 ff64 	bl	8004f38 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002070:	4b2c      	ldr	r3, [pc, #176]	@ (8002124 <SystemClock_Config+0xdc>)
 8002072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002074:	4a2b      	ldr	r2, [pc, #172]	@ (8002124 <SystemClock_Config+0xdc>)
 8002076:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800207a:	6413      	str	r3, [r2, #64]	@ 0x40
 800207c:	4b29      	ldr	r3, [pc, #164]	@ (8002124 <SystemClock_Config+0xdc>)
 800207e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002080:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002084:	607b      	str	r3, [r7, #4]
 8002086:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002088:	4b27      	ldr	r3, [pc, #156]	@ (8002128 <SystemClock_Config+0xe0>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002090:	4a25      	ldr	r2, [pc, #148]	@ (8002128 <SystemClock_Config+0xe0>)
 8002092:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002096:	6013      	str	r3, [r2, #0]
 8002098:	4b23      	ldr	r3, [pc, #140]	@ (8002128 <SystemClock_Config+0xe0>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80020a0:	603b      	str	r3, [r7, #0]
 80020a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020a4:	2301      	movs	r3, #1
 80020a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020ae:	2302      	movs	r3, #2
 80020b0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80020b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80020b8:	2304      	movs	r3, #4
 80020ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80020bc:	2360      	movs	r3, #96	@ 0x60
 80020be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020c0:	2302      	movs	r3, #2
 80020c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80020c4:	2304      	movs	r3, #4
 80020c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80020c8:	2302      	movs	r3, #2
 80020ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020cc:	f107 031c 	add.w	r3, r7, #28
 80020d0:	4618      	mov	r0, r3
 80020d2:	f002 ff91 	bl	8004ff8 <HAL_RCC_OscConfig>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80020dc:	f000 fc10 	bl	8002900 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80020e0:	f002 ff3a 	bl	8004f58 <HAL_PWREx_EnableOverDrive>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80020ea:	f000 fc09 	bl	8002900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020ee:	230f      	movs	r3, #15
 80020f0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020f2:	2302      	movs	r3, #2
 80020f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020f6:	2300      	movs	r3, #0
 80020f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002100:	2300      	movs	r3, #0
 8002102:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002104:	f107 0308 	add.w	r3, r7, #8
 8002108:	2103      	movs	r1, #3
 800210a:	4618      	mov	r0, r3
 800210c:	f003 fa22 	bl	8005554 <HAL_RCC_ClockConfig>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8002116:	f000 fbf3 	bl	8002900 <Error_Handler>
  }
}
 800211a:	bf00      	nop
 800211c:	3750      	adds	r7, #80	@ 0x50
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40023800 	.word	0x40023800
 8002128:	40007000 	.word	0x40007000

0800212c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002130:	4b1d      	ldr	r3, [pc, #116]	@ (80021a8 <MX_I2C2_Init+0x7c>)
 8002132:	4a1e      	ldr	r2, [pc, #120]	@ (80021ac <MX_I2C2_Init+0x80>)
 8002134:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8002136:	4b1c      	ldr	r3, [pc, #112]	@ (80021a8 <MX_I2C2_Init+0x7c>)
 8002138:	4a1d      	ldr	r2, [pc, #116]	@ (80021b0 <MX_I2C2_Init+0x84>)
 800213a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800213c:	4b1a      	ldr	r3, [pc, #104]	@ (80021a8 <MX_I2C2_Init+0x7c>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002142:	4b19      	ldr	r3, [pc, #100]	@ (80021a8 <MX_I2C2_Init+0x7c>)
 8002144:	2201      	movs	r2, #1
 8002146:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002148:	4b17      	ldr	r3, [pc, #92]	@ (80021a8 <MX_I2C2_Init+0x7c>)
 800214a:	2200      	movs	r2, #0
 800214c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800214e:	4b16      	ldr	r3, [pc, #88]	@ (80021a8 <MX_I2C2_Init+0x7c>)
 8002150:	2200      	movs	r2, #0
 8002152:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002154:	4b14      	ldr	r3, [pc, #80]	@ (80021a8 <MX_I2C2_Init+0x7c>)
 8002156:	2200      	movs	r2, #0
 8002158:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800215a:	4b13      	ldr	r3, [pc, #76]	@ (80021a8 <MX_I2C2_Init+0x7c>)
 800215c:	2200      	movs	r2, #0
 800215e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002160:	4b11      	ldr	r3, [pc, #68]	@ (80021a8 <MX_I2C2_Init+0x7c>)
 8002162:	2200      	movs	r2, #0
 8002164:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002166:	4810      	ldr	r0, [pc, #64]	@ (80021a8 <MX_I2C2_Init+0x7c>)
 8002168:	f002 f8fe 	bl	8004368 <HAL_I2C_Init>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002172:	f000 fbc5 	bl	8002900 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002176:	2100      	movs	r1, #0
 8002178:	480b      	ldr	r0, [pc, #44]	@ (80021a8 <MX_I2C2_Init+0x7c>)
 800217a:	f002 fe45 	bl	8004e08 <HAL_I2CEx_ConfigAnalogFilter>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002184:	f000 fbbc 	bl	8002900 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002188:	2100      	movs	r1, #0
 800218a:	4807      	ldr	r0, [pc, #28]	@ (80021a8 <MX_I2C2_Init+0x7c>)
 800218c:	f002 fe87 	bl	8004e9e <HAL_I2CEx_ConfigDigitalFilter>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002196:	f000 fbb3 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */
  I2C_Init(&hi2c2, I2CNO_2);
 800219a:	2102      	movs	r1, #2
 800219c:	4802      	ldr	r0, [pc, #8]	@ (80021a8 <MX_I2C2_Init+0x7c>)
 800219e:	f7fe fb81 	bl	80008a4 <I2C_Init>
  /* USER CODE END I2C2_Init 2 */

}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	2000475c 	.word	0x2000475c
 80021ac:	40005800 	.word	0x40005800
 80021b0:	20303e5d 	.word	0x20303e5d

080021b4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80021b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002230 <MX_I2C3_Init+0x7c>)
 80021ba:	4a1e      	ldr	r2, [pc, #120]	@ (8002234 <MX_I2C3_Init+0x80>)
 80021bc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20303E5D;
 80021be:	4b1c      	ldr	r3, [pc, #112]	@ (8002230 <MX_I2C3_Init+0x7c>)
 80021c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002238 <MX_I2C3_Init+0x84>)
 80021c2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80021c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002230 <MX_I2C3_Init+0x7c>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021ca:	4b19      	ldr	r3, [pc, #100]	@ (8002230 <MX_I2C3_Init+0x7c>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021d0:	4b17      	ldr	r3, [pc, #92]	@ (8002230 <MX_I2C3_Init+0x7c>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80021d6:	4b16      	ldr	r3, [pc, #88]	@ (8002230 <MX_I2C3_Init+0x7c>)
 80021d8:	2200      	movs	r2, #0
 80021da:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80021dc:	4b14      	ldr	r3, [pc, #80]	@ (8002230 <MX_I2C3_Init+0x7c>)
 80021de:	2200      	movs	r2, #0
 80021e0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021e2:	4b13      	ldr	r3, [pc, #76]	@ (8002230 <MX_I2C3_Init+0x7c>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021e8:	4b11      	ldr	r3, [pc, #68]	@ (8002230 <MX_I2C3_Init+0x7c>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80021ee:	4810      	ldr	r0, [pc, #64]	@ (8002230 <MX_I2C3_Init+0x7c>)
 80021f0:	f002 f8ba 	bl	8004368 <HAL_I2C_Init>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80021fa:	f000 fb81 	bl	8002900 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021fe:	2100      	movs	r1, #0
 8002200:	480b      	ldr	r0, [pc, #44]	@ (8002230 <MX_I2C3_Init+0x7c>)
 8002202:	f002 fe01 	bl	8004e08 <HAL_I2CEx_ConfigAnalogFilter>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800220c:	f000 fb78 	bl	8002900 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002210:	2100      	movs	r1, #0
 8002212:	4807      	ldr	r0, [pc, #28]	@ (8002230 <MX_I2C3_Init+0x7c>)
 8002214:	f002 fe43 	bl	8004e9e <HAL_I2CEx_ConfigDigitalFilter>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800221e:	f000 fb6f 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */
  I2C_Init(&hi2c3, I2CNO_3);
 8002222:	2103      	movs	r1, #3
 8002224:	4802      	ldr	r0, [pc, #8]	@ (8002230 <MX_I2C3_Init+0x7c>)
 8002226:	f7fe fb3d 	bl	80008a4 <I2C_Init>
  /* USER CODE END I2C3_Init 2 */

}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	200047b0 	.word	0x200047b0
 8002234:	40005c00 	.word	0x40005c00
 8002238:	20303e5d 	.word	0x20303e5d

0800223c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002240:	4b1b      	ldr	r3, [pc, #108]	@ (80022b0 <MX_SPI1_Init+0x74>)
 8002242:	4a1c      	ldr	r2, [pc, #112]	@ (80022b4 <MX_SPI1_Init+0x78>)
 8002244:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002246:	4b1a      	ldr	r3, [pc, #104]	@ (80022b0 <MX_SPI1_Init+0x74>)
 8002248:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800224c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800224e:	4b18      	ldr	r3, [pc, #96]	@ (80022b0 <MX_SPI1_Init+0x74>)
 8002250:	2200      	movs	r2, #0
 8002252:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002254:	4b16      	ldr	r3, [pc, #88]	@ (80022b0 <MX_SPI1_Init+0x74>)
 8002256:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800225a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800225c:	4b14      	ldr	r3, [pc, #80]	@ (80022b0 <MX_SPI1_Init+0x74>)
 800225e:	2200      	movs	r2, #0
 8002260:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002262:	4b13      	ldr	r3, [pc, #76]	@ (80022b0 <MX_SPI1_Init+0x74>)
 8002264:	2200      	movs	r2, #0
 8002266:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002268:	4b11      	ldr	r3, [pc, #68]	@ (80022b0 <MX_SPI1_Init+0x74>)
 800226a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800226e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002270:	4b0f      	ldr	r3, [pc, #60]	@ (80022b0 <MX_SPI1_Init+0x74>)
 8002272:	2208      	movs	r2, #8
 8002274:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002276:	4b0e      	ldr	r3, [pc, #56]	@ (80022b0 <MX_SPI1_Init+0x74>)
 8002278:	2200      	movs	r2, #0
 800227a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800227c:	4b0c      	ldr	r3, [pc, #48]	@ (80022b0 <MX_SPI1_Init+0x74>)
 800227e:	2200      	movs	r2, #0
 8002280:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002282:	4b0b      	ldr	r3, [pc, #44]	@ (80022b0 <MX_SPI1_Init+0x74>)
 8002284:	2200      	movs	r2, #0
 8002286:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002288:	4b09      	ldr	r3, [pc, #36]	@ (80022b0 <MX_SPI1_Init+0x74>)
 800228a:	2207      	movs	r2, #7
 800228c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800228e:	4b08      	ldr	r3, [pc, #32]	@ (80022b0 <MX_SPI1_Init+0x74>)
 8002290:	2200      	movs	r2, #0
 8002292:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002294:	4b06      	ldr	r3, [pc, #24]	@ (80022b0 <MX_SPI1_Init+0x74>)
 8002296:	2208      	movs	r2, #8
 8002298:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800229a:	4805      	ldr	r0, [pc, #20]	@ (80022b0 <MX_SPI1_Init+0x74>)
 800229c:	f003 ffda 	bl	8006254 <HAL_SPI_Init>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80022a6:	f000 fb2b 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20004804 	.word	0x20004804
 80022b4:	40013000 	.word	0x40013000

080022b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b090      	sub	sp, #64	@ 0x40
 80022bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80022be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	605a      	str	r2, [r3, #4]
 80022c8:	609a      	str	r2, [r3, #8]
 80022ca:	60da      	str	r2, [r3, #12]
 80022cc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ce:	f107 0320 	add.w	r3, r7, #32
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022da:	1d3b      	adds	r3, r7, #4
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
 80022e6:	611a      	str	r2, [r3, #16]
 80022e8:	615a      	str	r2, [r3, #20]
 80022ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022ec:	4b2d      	ldr	r3, [pc, #180]	@ (80023a4 <MX_TIM3_Init+0xec>)
 80022ee:	4a2e      	ldr	r2, [pc, #184]	@ (80023a8 <MX_TIM3_Init+0xf0>)
 80022f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 80022f2:	4b2c      	ldr	r3, [pc, #176]	@ (80023a4 <MX_TIM3_Init+0xec>)
 80022f4:	2230      	movs	r2, #48	@ 0x30
 80022f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f8:	4b2a      	ldr	r3, [pc, #168]	@ (80023a4 <MX_TIM3_Init+0xec>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80022fe:	4b29      	ldr	r3, [pc, #164]	@ (80023a4 <MX_TIM3_Init+0xec>)
 8002300:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002304:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002306:	4b27      	ldr	r3, [pc, #156]	@ (80023a4 <MX_TIM3_Init+0xec>)
 8002308:	2200      	movs	r2, #0
 800230a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800230c:	4b25      	ldr	r3, [pc, #148]	@ (80023a4 <MX_TIM3_Init+0xec>)
 800230e:	2200      	movs	r2, #0
 8002310:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002312:	4824      	ldr	r0, [pc, #144]	@ (80023a4 <MX_TIM3_Init+0xec>)
 8002314:	f004 f969 	bl	80065ea <HAL_TIM_Base_Init>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800231e:	f000 faef 	bl	8002900 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002322:	4820      	ldr	r0, [pc, #128]	@ (80023a4 <MX_TIM3_Init+0xec>)
 8002324:	f004 fa30 	bl	8006788 <HAL_TIM_PWM_Init>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800232e:	f000 fae7 	bl	8002900 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8002332:	2307      	movs	r3, #7
 8002334:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002336:	2300      	movs	r3, #0
 8002338:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800233a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800233e:	4619      	mov	r1, r3
 8002340:	4818      	ldr	r0, [pc, #96]	@ (80023a4 <MX_TIM3_Init+0xec>)
 8002342:	f004 fc9d 	bl	8006c80 <HAL_TIM_SlaveConfigSynchro>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800234c:	f000 fad8 	bl	8002900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002350:	2300      	movs	r3, #0
 8002352:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002354:	2300      	movs	r3, #0
 8002356:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002358:	f107 0320 	add.w	r3, r7, #32
 800235c:	4619      	mov	r1, r3
 800235e:	4811      	ldr	r0, [pc, #68]	@ (80023a4 <MX_TIM3_Init+0xec>)
 8002360:	f005 f910 	bl	8007584 <HAL_TIMEx_MasterConfigSynchronization>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 800236a:	f000 fac9 	bl	8002900 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800236e:	2360      	movs	r3, #96	@ 0x60
 8002370:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800237e:	1d3b      	adds	r3, r7, #4
 8002380:	2204      	movs	r2, #4
 8002382:	4619      	mov	r1, r3
 8002384:	4807      	ldr	r0, [pc, #28]	@ (80023a4 <MX_TIM3_Init+0xec>)
 8002386:	f004 fb67 	bl	8006a58 <HAL_TIM_PWM_ConfigChannel>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8002390:	f000 fab6 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002394:	4803      	ldr	r0, [pc, #12]	@ (80023a4 <MX_TIM3_Init+0xec>)
 8002396:	f000 fd85 	bl	8002ea4 <HAL_TIM_MspPostInit>

}
 800239a:	bf00      	nop
 800239c:	3740      	adds	r7, #64	@ 0x40
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20004868 	.word	0x20004868
 80023a8:	40000400 	.word	0x40000400

080023ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023b0:	4b14      	ldr	r3, [pc, #80]	@ (8002404 <MX_USART2_UART_Init+0x58>)
 80023b2:	4a15      	ldr	r2, [pc, #84]	@ (8002408 <MX_USART2_UART_Init+0x5c>)
 80023b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023b6:	4b13      	ldr	r3, [pc, #76]	@ (8002404 <MX_USART2_UART_Init+0x58>)
 80023b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023be:	4b11      	ldr	r3, [pc, #68]	@ (8002404 <MX_USART2_UART_Init+0x58>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002404 <MX_USART2_UART_Init+0x58>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002404 <MX_USART2_UART_Init+0x58>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002404 <MX_USART2_UART_Init+0x58>)
 80023d2:	220c      	movs	r2, #12
 80023d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002404 <MX_USART2_UART_Init+0x58>)
 80023d8:	2200      	movs	r2, #0
 80023da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023dc:	4b09      	ldr	r3, [pc, #36]	@ (8002404 <MX_USART2_UART_Init+0x58>)
 80023de:	2200      	movs	r2, #0
 80023e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023e2:	4b08      	ldr	r3, [pc, #32]	@ (8002404 <MX_USART2_UART_Init+0x58>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023e8:	4b06      	ldr	r3, [pc, #24]	@ (8002404 <MX_USART2_UART_Init+0x58>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023ee:	4805      	ldr	r0, [pc, #20]	@ (8002404 <MX_USART2_UART_Init+0x58>)
 80023f0:	f005 f974 	bl	80076dc <HAL_UART_Init>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80023fa:	f000 fa81 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	200048b4 	.word	0x200048b4
 8002408:	40004400 	.word	0x40004400

0800240c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002412:	4b10      	ldr	r3, [pc, #64]	@ (8002454 <MX_DMA_Init+0x48>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002416:	4a0f      	ldr	r2, [pc, #60]	@ (8002454 <MX_DMA_Init+0x48>)
 8002418:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800241c:	6313      	str	r3, [r2, #48]	@ 0x30
 800241e:	4b0d      	ldr	r3, [pc, #52]	@ (8002454 <MX_DMA_Init+0x48>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002422:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002426:	607b      	str	r3, [r7, #4]
 8002428:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800242a:	2200      	movs	r2, #0
 800242c:	2105      	movs	r1, #5
 800242e:	2010      	movs	r0, #16
 8002430:	f001 f994 	bl	800375c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002434:	2010      	movs	r0, #16
 8002436:	f001 f9ad 	bl	8003794 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800243a:	2200      	movs	r2, #0
 800243c:	2105      	movs	r1, #5
 800243e:	2011      	movs	r0, #17
 8002440:	f001 f98c 	bl	800375c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002444:	2011      	movs	r0, #17
 8002446:	f001 f9a5 	bl	8003794 <HAL_NVIC_EnableIRQ>

}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40023800 	.word	0x40023800

08002458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08a      	sub	sp, #40	@ 0x28
 800245c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245e:	f107 0314 	add.w	r3, r7, #20
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	605a      	str	r2, [r3, #4]
 8002468:	609a      	str	r2, [r3, #8]
 800246a:	60da      	str	r2, [r3, #12]
 800246c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800246e:	4b44      	ldr	r3, [pc, #272]	@ (8002580 <MX_GPIO_Init+0x128>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002472:	4a43      	ldr	r2, [pc, #268]	@ (8002580 <MX_GPIO_Init+0x128>)
 8002474:	f043 0304 	orr.w	r3, r3, #4
 8002478:	6313      	str	r3, [r2, #48]	@ 0x30
 800247a:	4b41      	ldr	r3, [pc, #260]	@ (8002580 <MX_GPIO_Init+0x128>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247e:	f003 0304 	and.w	r3, r3, #4
 8002482:	613b      	str	r3, [r7, #16]
 8002484:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002486:	4b3e      	ldr	r3, [pc, #248]	@ (8002580 <MX_GPIO_Init+0x128>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248a:	4a3d      	ldr	r2, [pc, #244]	@ (8002580 <MX_GPIO_Init+0x128>)
 800248c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002490:	6313      	str	r3, [r2, #48]	@ 0x30
 8002492:	4b3b      	ldr	r3, [pc, #236]	@ (8002580 <MX_GPIO_Init+0x128>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800249e:	4b38      	ldr	r3, [pc, #224]	@ (8002580 <MX_GPIO_Init+0x128>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a2:	4a37      	ldr	r2, [pc, #220]	@ (8002580 <MX_GPIO_Init+0x128>)
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024aa:	4b35      	ldr	r3, [pc, #212]	@ (8002580 <MX_GPIO_Init+0x128>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	60bb      	str	r3, [r7, #8]
 80024b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b6:	4b32      	ldr	r3, [pc, #200]	@ (8002580 <MX_GPIO_Init+0x128>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ba:	4a31      	ldr	r2, [pc, #196]	@ (8002580 <MX_GPIO_Init+0x128>)
 80024bc:	f043 0302 	orr.w	r3, r3, #2
 80024c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002580 <MX_GPIO_Init+0x128>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	607b      	str	r3, [r7, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ce:	4b2c      	ldr	r3, [pc, #176]	@ (8002580 <MX_GPIO_Init+0x128>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d2:	4a2b      	ldr	r2, [pc, #172]	@ (8002580 <MX_GPIO_Init+0x128>)
 80024d4:	f043 0308 	orr.w	r3, r3, #8
 80024d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024da:	4b29      	ldr	r3, [pc, #164]	@ (8002580 <MX_GPIO_Init+0x128>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	603b      	str	r3, [r7, #0]
 80024e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80024e6:	2200      	movs	r2, #0
 80024e8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80024ec:	4825      	ldr	r0, [pc, #148]	@ (8002584 <MX_GPIO_Init+0x12c>)
 80024ee:	f001 ff21 	bl	8004334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80024f2:	2201      	movs	r2, #1
 80024f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80024f8:	4823      	ldr	r0, [pc, #140]	@ (8002588 <MX_GPIO_Init+0x130>)
 80024fa:	f001 ff1b 	bl	8004334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80024fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002504:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250a:	2300      	movs	r3, #0
 800250c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800250e:	f107 0314 	add.w	r3, r7, #20
 8002512:	4619      	mov	r1, r3
 8002514:	481d      	ldr	r0, [pc, #116]	@ (800258c <MX_GPIO_Init+0x134>)
 8002516:	f001 fd61 	bl	8003fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800251a:	f244 0381 	movw	r3, #16513	@ 0x4081
 800251e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002520:	2301      	movs	r3, #1
 8002522:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002528:	2300      	movs	r3, #0
 800252a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800252c:	f107 0314 	add.w	r3, r7, #20
 8002530:	4619      	mov	r1, r3
 8002532:	4814      	ldr	r0, [pc, #80]	@ (8002584 <MX_GPIO_Init+0x12c>)
 8002534:	f001 fd52 	bl	8003fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002538:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800253c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253e:	2302      	movs	r3, #2
 8002540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002546:	2303      	movs	r3, #3
 8002548:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800254a:	2307      	movs	r3, #7
 800254c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800254e:	f107 0314 	add.w	r3, r7, #20
 8002552:	4619      	mov	r1, r3
 8002554:	480e      	ldr	r0, [pc, #56]	@ (8002590 <MX_GPIO_Init+0x138>)
 8002556:	f001 fd41 	bl	8003fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800255a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800255e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002560:	2301      	movs	r3, #1
 8002562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	2300      	movs	r3, #0
 8002566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002568:	2300      	movs	r3, #0
 800256a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800256c:	f107 0314 	add.w	r3, r7, #20
 8002570:	4619      	mov	r1, r3
 8002572:	4805      	ldr	r0, [pc, #20]	@ (8002588 <MX_GPIO_Init+0x130>)
 8002574:	f001 fd32 	bl	8003fdc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002578:	bf00      	nop
 800257a:	3728      	adds	r7, #40	@ 0x28
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40023800 	.word	0x40023800
 8002584:	40020400 	.word	0x40020400
 8002588:	40020000 	.word	0x40020000
 800258c:	40020800 	.word	0x40020800
 8002590:	40020c00 	.word	0x40020c00

08002594 <HAL_Delay>:




void HAL_Delay(uint32_t Delay)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  osDelay(Delay);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f006 fda1 	bl	80090e4 <osDelay>
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <TaskMicroROS>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMicroROS */
void TaskMicroROS(void *argument)
{
 80025ac:	b5b0      	push	{r4, r5, r7, lr}
 80025ae:	b0a6      	sub	sp, #152	@ 0x98
 80025b0:	af02      	add	r7, sp, #8
 80025b2:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN 5 */
	// micro-ROS configuration
	rcl_ret_t IMU_ret;
	rcl_ret_t Pressure_ret;

	rmw_uros_set_custom_transport(
 80025b4:	4b72      	ldr	r3, [pc, #456]	@ (8002780 <TaskMicroROS+0x1d4>)
 80025b6:	9301      	str	r3, [sp, #4]
 80025b8:	4b72      	ldr	r3, [pc, #456]	@ (8002784 <TaskMicroROS+0x1d8>)
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	4b72      	ldr	r3, [pc, #456]	@ (8002788 <TaskMicroROS+0x1dc>)
 80025be:	4a73      	ldr	r2, [pc, #460]	@ (800278c <TaskMicroROS+0x1e0>)
 80025c0:	4973      	ldr	r1, [pc, #460]	@ (8002790 <TaskMicroROS+0x1e4>)
 80025c2:	2001      	movs	r0, #1
 80025c4:	f00a f970 	bl	800c8a8 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80025c8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80025cc:	4618      	mov	r0, r3
 80025ce:	f00a f8ed 	bl	800c7ac <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 80025d2:	4b70      	ldr	r3, [pc, #448]	@ (8002794 <TaskMicroROS+0x1e8>)
 80025d4:	673b      	str	r3, [r7, #112]	@ 0x70
	  freeRTOS_allocator.deallocate = microros_deallocate;
 80025d6:	4b70      	ldr	r3, [pc, #448]	@ (8002798 <TaskMicroROS+0x1ec>)
 80025d8:	677b      	str	r3, [r7, #116]	@ 0x74
	  freeRTOS_allocator.reallocate = microros_reallocate;
 80025da:	4b70      	ldr	r3, [pc, #448]	@ (800279c <TaskMicroROS+0x1f0>)
 80025dc:	67bb      	str	r3, [r7, #120]	@ 0x78
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80025de:	4b70      	ldr	r3, [pc, #448]	@ (80027a0 <TaskMicroROS+0x1f4>)
 80025e0:	67fb      	str	r3, [r7, #124]	@ 0x7c

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80025e2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80025e6:	4618      	mov	r0, r3
 80025e8:	f00a f8ee 	bl	800c7c8 <rcutils_set_default_allocator>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f083 0301 	eor.w	r3, r3, #1
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d004      	beq.n	8002602 <TaskMicroROS+0x56>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 80025f8:	f240 218b 	movw	r1, #651	@ 0x28b
 80025fc:	4869      	ldr	r0, [pc, #420]	@ (80027a4 <TaskMicroROS+0x1f8>)
 80025fe:	f014 f95d 	bl	80168bc <iprintf>
//	  std_msgs__msg__Int32 msg;
	  rclc_support_t support;
	  rcl_allocator_t allocator;
	  rcl_node_t node;
//
	  allocator = rcl_get_default_allocator();
 8002602:	463b      	mov	r3, r7
 8002604:	4618      	mov	r0, r3
 8002606:	f00a f8fd 	bl	800c804 <rcutils_get_default_allocator>
 800260a:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800260e:	463d      	mov	r5, r7
 8002610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002614:	682b      	ldr	r3, [r5, #0]
 8002616:	6023      	str	r3, [r4, #0]
//
//	  //create init_options
	  rcl_ret_t ret = rclc_support_init(&support, 0, NULL, &allocator);
 8002618:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800261c:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8002620:	2200      	movs	r2, #0
 8002622:	2100      	movs	r1, #0
 8002624:	f009 fff4 	bl	800c610 <rclc_support_init>
 8002628:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
	  if(ret != RCL_RET_OK){
 800262c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <TaskMicroROS+0x8e>
		  osDelay(10);
 8002634:	200a      	movs	r0, #10
 8002636:	f006 fd55 	bl	80090e4 <osDelay>

	  }
//	  // create node
	  rclc_node_init_default(&node, "cubemx_node", "", &support);
 800263a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800263e:	f107 0020 	add.w	r0, r7, #32
 8002642:	4a59      	ldr	r2, [pc, #356]	@ (80027a8 <TaskMicroROS+0x1fc>)
 8002644:	4959      	ldr	r1, [pc, #356]	@ (80027ac <TaskMicroROS+0x200>)
 8002646:	f00a f82d 	bl	800c6a4 <rclc_node_init_default>

	  rclc_publisher_init_best_effort(
 800264a:	f00a fdf7 	bl	800d23c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800264e:	4602      	mov	r2, r0
 8002650:	f107 0120 	add.w	r1, r7, #32
 8002654:	4b56      	ldr	r3, [pc, #344]	@ (80027b0 <TaskMicroROS+0x204>)
 8002656:	4857      	ldr	r0, [pc, #348]	@ (80027b4 <TaskMicroROS+0x208>)
 8002658:	f00a f866 	bl	800c728 <rclc_publisher_init_best_effort>
	      &imu_publisher,
	      &node,
	      ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu),
	      "imu_data");

	  rclc_publisher_init_best_effort(
 800265c:	f00a fdd6 	bl	800d20c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure>
 8002660:	4602      	mov	r2, r0
 8002662:	f107 0120 	add.w	r1, r7, #32
 8002666:	4b54      	ldr	r3, [pc, #336]	@ (80027b8 <TaskMicroROS+0x20c>)
 8002668:	4854      	ldr	r0, [pc, #336]	@ (80027bc <TaskMicroROS+0x210>)
 800266a:	f00a f85d 	bl	800c728 <rclc_publisher_init_best_effort>
	 	  &pressure_publisher,
	 	  &node,
	 	  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, FluidPressure),
	 	  "pressure_data");

	  memset(&imu_msg, 0, sizeof(imu_msg));
 800266e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002672:	2100      	movs	r1, #0
 8002674:	4852      	ldr	r0, [pc, #328]	@ (80027c0 <TaskMicroROS+0x214>)
 8002676:	f014 fa97 	bl	8016ba8 <memset>
	  memset(&pressure_msg, 0, sizeof(pressure_msg));
 800267a:	2228      	movs	r2, #40	@ 0x28
 800267c:	2100      	movs	r1, #0
 800267e:	4851      	ldr	r0, [pc, #324]	@ (80027c4 <TaskMicroROS+0x218>)
 8002680:	f014 fa92 	bl	8016ba8 <memset>


	  for(;;)
	  {

	    imu_msg.header.stamp.sec = rmw_uros_epoch_millis() / 1000;
 8002684:	f00a fad6 	bl	800cc34 <rmw_uros_epoch_millis>
 8002688:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800268c:	f04f 0300 	mov.w	r3, #0
 8002690:	f7fd fe3e 	bl	8000310 <__aeabi_ldivmod>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4b49      	ldr	r3, [pc, #292]	@ (80027c0 <TaskMicroROS+0x214>)
 800269a:	601a      	str	r2, [r3, #0]
	    imu_msg.header.stamp.nanosec = (rmw_uros_epoch_millis() % 1000) * 1000000;
 800269c:	f00a faca 	bl	800cc34 <rmw_uros_epoch_millis>
 80026a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80026a4:	f04f 0300 	mov.w	r3, #0
 80026a8:	f7fd fe32 	bl	8000310 <__aeabi_ldivmod>
 80026ac:	4b46      	ldr	r3, [pc, #280]	@ (80027c8 <TaskMicroROS+0x21c>)
 80026ae:	fb02 f303 	mul.w	r3, r2, r3
 80026b2:	4a43      	ldr	r2, [pc, #268]	@ (80027c0 <TaskMicroROS+0x214>)
 80026b4:	6053      	str	r3, [r2, #4]
	    imu_msg.header.frame_id.data = frame_id_imu;
 80026b6:	4b42      	ldr	r3, [pc, #264]	@ (80027c0 <TaskMicroROS+0x214>)
 80026b8:	4a44      	ldr	r2, [pc, #272]	@ (80027cc <TaskMicroROS+0x220>)
 80026ba:	609a      	str	r2, [r3, #8]
	    imu_msg.header.frame_id.size = strlen(frame_id_imu);
 80026bc:	4843      	ldr	r0, [pc, #268]	@ (80027cc <TaskMicroROS+0x220>)
 80026be:	f7fd fdc9 	bl	8000254 <strlen>
 80026c2:	4603      	mov	r3, r0
 80026c4:	4a3e      	ldr	r2, [pc, #248]	@ (80027c0 <TaskMicroROS+0x214>)
 80026c6:	60d3      	str	r3, [r2, #12]
	    imu_msg.header.frame_id.capacity = imu_msg.header.frame_id.size + 1;
 80026c8:	4b3d      	ldr	r3, [pc, #244]	@ (80027c0 <TaskMicroROS+0x214>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	3301      	adds	r3, #1
 80026ce:	4a3c      	ldr	r2, [pc, #240]	@ (80027c0 <TaskMicroROS+0x214>)
 80026d0:	6113      	str	r3, [r2, #16]

	    pressure_msg.header.stamp.sec = rmw_uros_epoch_millis() / 1000;
 80026d2:	f00a faaf 	bl	800cc34 <rmw_uros_epoch_millis>
 80026d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80026da:	f04f 0300 	mov.w	r3, #0
 80026de:	f7fd fe17 	bl	8000310 <__aeabi_ldivmod>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	4b37      	ldr	r3, [pc, #220]	@ (80027c4 <TaskMicroROS+0x218>)
 80026e8:	601a      	str	r2, [r3, #0]
	    pressure_msg.header.stamp.nanosec = (rmw_uros_epoch_millis() % 1000) * 1000000;
 80026ea:	f00a faa3 	bl	800cc34 <rmw_uros_epoch_millis>
 80026ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	f7fd fe0b 	bl	8000310 <__aeabi_ldivmod>
 80026fa:	4b33      	ldr	r3, [pc, #204]	@ (80027c8 <TaskMicroROS+0x21c>)
 80026fc:	fb02 f303 	mul.w	r3, r2, r3
 8002700:	4a30      	ldr	r2, [pc, #192]	@ (80027c4 <TaskMicroROS+0x218>)
 8002702:	6053      	str	r3, [r2, #4]
	    pressure_msg.header.frame_id.data = frame_id_pressure;
 8002704:	4b2f      	ldr	r3, [pc, #188]	@ (80027c4 <TaskMicroROS+0x218>)
 8002706:	4a32      	ldr	r2, [pc, #200]	@ (80027d0 <TaskMicroROS+0x224>)
 8002708:	609a      	str	r2, [r3, #8]
	    pressure_msg.header.frame_id.size = strlen(frame_id_pressure);
 800270a:	4831      	ldr	r0, [pc, #196]	@ (80027d0 <TaskMicroROS+0x224>)
 800270c:	f7fd fda2 	bl	8000254 <strlen>
 8002710:	4603      	mov	r3, r0
 8002712:	4a2c      	ldr	r2, [pc, #176]	@ (80027c4 <TaskMicroROS+0x218>)
 8002714:	60d3      	str	r3, [r2, #12]
	    pressure_msg.header.frame_id.capacity = pressure_msg.header.frame_id.size + 1;
 8002716:	4b2b      	ldr	r3, [pc, #172]	@ (80027c4 <TaskMicroROS+0x218>)
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	3301      	adds	r3, #1
 800271c:	4a29      	ldr	r2, [pc, #164]	@ (80027c4 <TaskMicroROS+0x218>)
 800271e:	6113      	str	r3, [r2, #16]

	    osMutexAcquire(microrosMsgMutexHandle, osWaitForever);
 8002720:	4b2c      	ldr	r3, [pc, #176]	@ (80027d4 <TaskMicroROS+0x228>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002728:	4618      	mov	r0, r3
 800272a:	f006 fda3 	bl	8009274 <osMutexAcquire>

	    IMU_ret = rcl_publish(&imu_publisher, &imu_msg, NULL);
 800272e:	2200      	movs	r2, #0
 8002730:	4923      	ldr	r1, [pc, #140]	@ (80027c0 <TaskMicroROS+0x214>)
 8002732:	4820      	ldr	r0, [pc, #128]	@ (80027b4 <TaskMicroROS+0x208>)
 8002734:	f009 ff48 	bl	800c5c8 <rcl_publish>
 8002738:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	    if (IMU_ret != RCL_RET_OK){
 800273c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002740:	2b00      	cmp	r3, #0
 8002742:	d004      	beq.n	800274e <TaskMicroROS+0x1a2>
	    	printf("Error publishing (line %d)\n", __LINE__);
 8002744:	f240 21c6 	movw	r1, #710	@ 0x2c6
 8002748:	4823      	ldr	r0, [pc, #140]	@ (80027d8 <TaskMicroROS+0x22c>)
 800274a:	f014 f8b7 	bl	80168bc <iprintf>
	    }

	    Pressure_ret = rcl_publish(&pressure_publisher, &pressure_msg, NULL);
 800274e:	2200      	movs	r2, #0
 8002750:	491c      	ldr	r1, [pc, #112]	@ (80027c4 <TaskMicroROS+0x218>)
 8002752:	481a      	ldr	r0, [pc, #104]	@ (80027bc <TaskMicroROS+0x210>)
 8002754:	f009 ff38 	bl	800c5c8 <rcl_publish>
 8002758:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	    if (Pressure_ret != RCL_RET_OK){
 800275c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002760:	2b00      	cmp	r3, #0
 8002762:	d004      	beq.n	800276e <TaskMicroROS+0x1c2>
	   	    printf("Error publishing (line %d)\n", __LINE__);
 8002764:	f240 21cb 	movw	r1, #715	@ 0x2cb
 8002768:	481b      	ldr	r0, [pc, #108]	@ (80027d8 <TaskMicroROS+0x22c>)
 800276a:	f014 f8a7 	bl	80168bc <iprintf>
	   	}

	    osMutexRelease(microrosMsgMutexHandle);
 800276e:	4b19      	ldr	r3, [pc, #100]	@ (80027d4 <TaskMicroROS+0x228>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f006 fddc 	bl	8009330 <osMutexRelease>

	    osDelay(20);
 8002778:	2014      	movs	r0, #20
 800277a:	f006 fcb3 	bl	80090e4 <osDelay>
	    imu_msg.header.stamp.sec = rmw_uros_epoch_millis() / 1000;
 800277e:	e781      	b.n	8002684 <TaskMicroROS+0xd8>
 8002780:	08003499 	.word	0x08003499
 8002784:	08003439 	.word	0x08003439
 8002788:	08003419 	.word	0x08003419
 800278c:	080033ed 	.word	0x080033ed
 8002790:	200048b4 	.word	0x200048b4
 8002794:	0800290d 	.word	0x0800290d
 8002798:	08002951 	.word	0x08002951
 800279c:	08002989 	.word	0x08002989
 80027a0:	080029f5 	.word	0x080029f5
 80027a4:	08017a3c 	.word	0x08017a3c
 80027a8:	08017a64 	.word	0x08017a64
 80027ac:	08017a68 	.word	0x08017a68
 80027b0:	08017a74 	.word	0x08017a74
 80027b4:	200045e8 	.word	0x200045e8
 80027b8:	08017a80 	.word	0x08017a80
 80027bc:	200045ec 	.word	0x200045ec
 80027c0:	200045f0 	.word	0x200045f0
 80027c4:	20004730 	.word	0x20004730
 80027c8:	000f4240 	.word	0x000f4240
 80027cc:	20000000 	.word	0x20000000
 80027d0:	2000000c 	.word	0x2000000c
 80027d4:	20004758 	.word	0x20004758
 80027d8:	08017a90 	.word	0x08017a90

080027dc <TaskSensors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskSensors */
void TaskSensors(void *argument)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af02      	add	r7, sp, #8
 80027e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskSensors */

	IMU_Init(&IMU_1, 1, I2CNO_2, BNO055_I2C_ADRESS, 0, 0);
 80027e4:	2300      	movs	r3, #0
 80027e6:	9301      	str	r3, [sp, #4]
 80027e8:	2300      	movs	r3, #0
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	2328      	movs	r3, #40	@ 0x28
 80027ee:	2202      	movs	r2, #2
 80027f0:	2101      	movs	r1, #1
 80027f2:	4821      	ldr	r0, [pc, #132]	@ (8002878 <TaskSensors+0x9c>)
 80027f4:	f7fe f8e4 	bl	80009c0 <IMU_Init>
	PressureSensor_Init(&PressureSensor_1, 1, I2CNO_3, 0x40);
 80027f8:	2340      	movs	r3, #64	@ 0x40
 80027fa:	2203      	movs	r2, #3
 80027fc:	2101      	movs	r1, #1
 80027fe:	481f      	ldr	r0, [pc, #124]	@ (800287c <TaskSensors+0xa0>)
 8002800:	f7fe faea 	bl	8000dd8 <PressureSensor_Init>
	osDelay(100);
 8002804:	2064      	movs	r0, #100	@ 0x64
 8002806:	f006 fc6d 	bl	80090e4 <osDelay>

  /* Infinite loop */
  for(;;)
  {

	IMU_Execute(&IMU_1, 1);
 800280a:	2101      	movs	r1, #1
 800280c:	481a      	ldr	r0, [pc, #104]	@ (8002878 <TaskSensors+0x9c>)
 800280e:	f7fe f913 	bl	8000a38 <IMU_Execute>
//	PressureSensor_Execute(&PressureSensor_1, 1);

	osMutexAcquire(microrosMsgMutexHandle, osWaitForever);
 8002812:	4b1b      	ldr	r3, [pc, #108]	@ (8002880 <TaskSensors+0xa4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800281a:	4618      	mov	r0, r3
 800281c:	f006 fd2a 	bl	8009274 <osMutexAcquire>

	imu_msg.linear_acceleration.x = IMU_1.CalculatedData.Accelerometer.X_Axis;
 8002820:	4b15      	ldr	r3, [pc, #84]	@ (8002878 <TaskSensors+0x9c>)
 8002822:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002826:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800282a:	4b16      	ldr	r3, [pc, #88]	@ (8002884 <TaskSensors+0xa8>)
 800282c:	ed83 7b38 	vstr	d7, [r3, #224]	@ 0xe0
	imu_msg.linear_acceleration.y = IMU_1.CalculatedData.Accelerometer.Y_Axis;
 8002830:	4b11      	ldr	r3, [pc, #68]	@ (8002878 <TaskSensors+0x9c>)
 8002832:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002836:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800283a:	4b12      	ldr	r3, [pc, #72]	@ (8002884 <TaskSensors+0xa8>)
 800283c:	ed83 7b3a 	vstr	d7, [r3, #232]	@ 0xe8
	imu_msg.linear_acceleration.z = IMU_1.CalculatedData.Accelerometer.Z_Axis;
 8002840:	4b0d      	ldr	r3, [pc, #52]	@ (8002878 <TaskSensors+0x9c>)
 8002842:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002846:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800284a:	4b0e      	ldr	r3, [pc, #56]	@ (8002884 <TaskSensors+0xa8>)
 800284c:	ed83 7b3c 	vstr	d7, [r3, #240]	@ 0xf0

	pressure_msg.fluid_pressure = PressureSensor_1.FilteredPressureDataPascal;
 8002850:	4b0a      	ldr	r3, [pc, #40]	@ (800287c <TaskSensors+0xa0>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	ee07 3a90 	vmov	s15, r3
 8002858:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800285c:	4b0a      	ldr	r3, [pc, #40]	@ (8002888 <TaskSensors+0xac>)
 800285e:	ed83 7b06 	vstr	d7, [r3, #24]

	osMutexRelease(microrosMsgMutexHandle);
 8002862:	4b07      	ldr	r3, [pc, #28]	@ (8002880 <TaskSensors+0xa4>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f006 fd62 	bl	8009330 <osMutexRelease>

	osDelay(10);
 800286c:	200a      	movs	r0, #10
 800286e:	f006 fc39 	bl	80090e4 <osDelay>
	IMU_Execute(&IMU_1, 1);
 8002872:	bf00      	nop
 8002874:	e7c9      	b.n	800280a <TaskSensors+0x2e>
 8002876:	bf00      	nop
 8002878:	2000084c 	.word	0x2000084c
 800287c:	200008a0 	.word	0x200008a0
 8002880:	20004758 	.word	0x20004758
 8002884:	200045f0 	.word	0x200045f0
 8002888:	20004730 	.word	0x20004730

0800288c <TaskLed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskLed */
void TaskLed(void *argument)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskLed */
	uint8_t Led1_cnt=0, Led2_cnt=0, Led3_cnt=0;
 8002894:	2300      	movs	r3, #0
 8002896:	73fb      	strb	r3, [r7, #15]
 8002898:	2300      	movs	r3, #0
 800289a:	73bb      	strb	r3, [r7, #14]
 800289c:	2300      	movs	r3, #0
 800289e:	737b      	strb	r3, [r7, #13]
  /* Infinite loop */
  for(;;)
  {

	  if(Led1_cnt == 0)
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d104      	bne.n	80028b0 <TaskLed+0x24>
		  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 80028a6:	2201      	movs	r2, #1
 80028a8:	2101      	movs	r1, #1
 80028aa:	480b      	ldr	r0, [pc, #44]	@ (80028d8 <TaskLed+0x4c>)
 80028ac:	f001 fd42 	bl	8004334 <HAL_GPIO_WritePin>

	  if(Led1_cnt==10)
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
 80028b2:	2b0a      	cmp	r3, #10
 80028b4:	d104      	bne.n	80028c0 <TaskLed+0x34>
		  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 80028b6:	2200      	movs	r2, #0
 80028b8:	2101      	movs	r1, #1
 80028ba:	4807      	ldr	r0, [pc, #28]	@ (80028d8 <TaskLed+0x4c>)
 80028bc:	f001 fd3a 	bl	8004334 <HAL_GPIO_WritePin>

	Led1_cnt++;
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	3301      	adds	r3, #1
 80028c4:	73fb      	strb	r3, [r7, #15]

	if(Led1_cnt==20)
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	2b14      	cmp	r3, #20
 80028ca:	d101      	bne.n	80028d0 <TaskLed+0x44>
		Led1_cnt = 0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	73fb      	strb	r3, [r7, #15]

    osDelay(50);
 80028d0:	2032      	movs	r0, #50	@ 0x32
 80028d2:	f006 fc07 	bl	80090e4 <osDelay>
	  if(Led1_cnt == 0)
 80028d6:	e7e3      	b.n	80028a0 <TaskLed+0x14>
 80028d8:	40020400 	.word	0x40020400

080028dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a04      	ldr	r2, [pc, #16]	@ (80028fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d101      	bne.n	80028f2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80028ee:	f000 fe5d 	bl	80035ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40010000 	.word	0x40010000

08002900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002904:	b672      	cpsid	i
}
 8002906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002908:	bf00      	nop
 800290a:	e7fd      	b.n	8002908 <Error_Handler+0x8>

0800290c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002916:	4b0c      	ldr	r3, [pc, #48]	@ (8002948 <microros_allocate+0x3c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4413      	add	r3, r2
 8002920:	461a      	mov	r2, r3
 8002922:	4b09      	ldr	r3, [pc, #36]	@ (8002948 <microros_allocate+0x3c>)
 8002924:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002926:	4b09      	ldr	r3, [pc, #36]	@ (800294c <microros_allocate+0x40>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4413      	add	r3, r2
 8002930:	461a      	mov	r2, r3
 8002932:	4b06      	ldr	r3, [pc, #24]	@ (800294c <microros_allocate+0x40>)
 8002934:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff f8de 	bl	8001af8 <pvPortMallocMicroROS>
 800293c:	4603      	mov	r3, r0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20004a0c 	.word	0x20004a0c
 800294c:	20004a10 	.word	0x20004a10

08002950 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00c      	beq.n	800297a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7ff f9f7 	bl	8001d54 <getBlockSize>
 8002966:	4603      	mov	r3, r0
 8002968:	4a06      	ldr	r2, [pc, #24]	@ (8002984 <microros_deallocate+0x34>)
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	461a      	mov	r2, r3
 8002970:	4b04      	ldr	r3, [pc, #16]	@ (8002984 <microros_deallocate+0x34>)
 8002972:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7ff f98d 	bl	8001c94 <vPortFreeMicroROS>
  }
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	20004a10 	.word	0x20004a10

08002988 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002994:	4b15      	ldr	r3, [pc, #84]	@ (80029ec <microros_reallocate+0x64>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	4413      	add	r3, r2
 800299e:	461a      	mov	r2, r3
 80029a0:	4b12      	ldr	r3, [pc, #72]	@ (80029ec <microros_reallocate+0x64>)
 80029a2:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80029a4:	4b12      	ldr	r3, [pc, #72]	@ (80029f0 <microros_reallocate+0x68>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	461a      	mov	r2, r3
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	4413      	add	r3, r2
 80029ae:	461a      	mov	r2, r3
 80029b0:	4b0f      	ldr	r3, [pc, #60]	@ (80029f0 <microros_reallocate+0x68>)
 80029b2:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d104      	bne.n	80029c4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80029ba:	68b8      	ldr	r0, [r7, #8]
 80029bc:	f7ff f89c 	bl	8001af8 <pvPortMallocMicroROS>
 80029c0:	4603      	mov	r3, r0
 80029c2:	e00e      	b.n	80029e2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f7ff f9c5 	bl	8001d54 <getBlockSize>
 80029ca:	4603      	mov	r3, r0
 80029cc:	4a08      	ldr	r2, [pc, #32]	@ (80029f0 <microros_reallocate+0x68>)
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	461a      	mov	r2, r3
 80029d4:	4b06      	ldr	r3, [pc, #24]	@ (80029f0 <microros_reallocate+0x68>)
 80029d6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80029d8:	68b9      	ldr	r1, [r7, #8]
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f7ff f9d8 	bl	8001d90 <pvPortReallocMicroROS>
 80029e0:	4603      	mov	r3, r0
  }
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20004a0c 	.word	0x20004a0c
 80029f0:	20004a10 	.word	0x20004a10

080029f4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	fb02 f303 	mul.w	r3, r2, r3
 8002a08:	4a0c      	ldr	r2, [pc, #48]	@ (8002a3c <microros_zero_allocate+0x48>)
 8002a0a:	6812      	ldr	r2, [r2, #0]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	461a      	mov	r2, r3
 8002a10:	4b0a      	ldr	r3, [pc, #40]	@ (8002a3c <microros_zero_allocate+0x48>)
 8002a12:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	fb02 f303 	mul.w	r3, r2, r3
 8002a1c:	4a08      	ldr	r2, [pc, #32]	@ (8002a40 <microros_zero_allocate+0x4c>)
 8002a1e:	6812      	ldr	r2, [r2, #0]
 8002a20:	4413      	add	r3, r2
 8002a22:	461a      	mov	r2, r3
 8002a24:	4b06      	ldr	r3, [pc, #24]	@ (8002a40 <microros_zero_allocate+0x4c>)
 8002a26:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002a28:	68b9      	ldr	r1, [r7, #8]
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f7ff f9dd 	bl	8001dea <pvPortCallocMicroROS>
 8002a30:	4603      	mov	r3, r0
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	20004a0c 	.word	0x20004a0c
 8002a40:	20004a10 	.word	0x20004a10
 8002a44:	00000000 	.word	0x00000000

08002a48 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002a48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a4c:	b086      	sub	sp, #24
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002a54:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002a5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a5e:	a320      	add	r3, pc, #128	@ (adr r3, 8002ae0 <UTILS_NanosecondsToTimespec+0x98>)
 8002a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a64:	f7fd fc54 	bl	8000310 <__aeabi_ldivmod>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002a72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a76:	a31a      	add	r3, pc, #104	@ (adr r3, 8002ae0 <UTILS_NanosecondsToTimespec+0x98>)
 8002a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7c:	f7fd fc48 	bl	8000310 <__aeabi_ldivmod>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	da20      	bge.n	8002ace <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	4a11      	ldr	r2, [pc, #68]	@ (8002ad8 <UTILS_NanosecondsToTimespec+0x90>)
 8002a92:	fb82 1203 	smull	r1, r2, r2, r3
 8002a96:	1712      	asrs	r2, r2, #28
 8002a98:	17db      	asrs	r3, r3, #31
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa6:	6979      	ldr	r1, [r7, #20]
 8002aa8:	17c8      	asrs	r0, r1, #31
 8002aaa:	460c      	mov	r4, r1
 8002aac:	4605      	mov	r5, r0
 8002aae:	ebb2 0804 	subs.w	r8, r2, r4
 8002ab2:	eb63 0905 	sbc.w	r9, r3, r5
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	4906      	ldr	r1, [pc, #24]	@ (8002adc <UTILS_NanosecondsToTimespec+0x94>)
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	441a      	add	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	609a      	str	r2, [r3, #8]
    }
}
 8002ace:	bf00      	nop
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002ad8:	44b82fa1 	.word	0x44b82fa1
 8002adc:	3b9aca00 	.word	0x3b9aca00
 8002ae0:	3b9aca00 	.word	0x3b9aca00
 8002ae4:	00000000 	.word	0x00000000

08002ae8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002aec:	b08e      	sub	sp, #56	@ 0x38
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6278      	str	r0, [r7, #36]	@ 0x24
 8002af2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002af4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002af8:	2300      	movs	r3, #0
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	f04f 0300 	mov.w	r3, #0
 8002b06:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002b0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f008 f978 	bl	800ae04 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b16:	17da      	asrs	r2, r3, #31
 8002b18:	61bb      	str	r3, [r7, #24]
 8002b1a:	61fa      	str	r2, [r7, #28]
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	69b9      	ldr	r1, [r7, #24]
 8002b26:	000b      	movs	r3, r1
 8002b28:	2200      	movs	r2, #0
 8002b2a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b30:	2200      	movs	r2, #0
 8002b32:	461c      	mov	r4, r3
 8002b34:	4615      	mov	r5, r2
 8002b36:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002b3a:	1911      	adds	r1, r2, r4
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	416b      	adcs	r3, r5
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002b46:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002b4a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	f04f 0400 	mov.w	r4, #0
 8002b56:	f04f 0500 	mov.w	r5, #0
 8002b5a:	015d      	lsls	r5, r3, #5
 8002b5c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002b60:	0154      	lsls	r4, r2, #5
 8002b62:	4622      	mov	r2, r4
 8002b64:	462b      	mov	r3, r5
 8002b66:	ebb2 0800 	subs.w	r8, r2, r0
 8002b6a:	eb63 0901 	sbc.w	r9, r3, r1
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	f04f 0300 	mov.w	r3, #0
 8002b76:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002b7a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002b7e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002b82:	4690      	mov	r8, r2
 8002b84:	4699      	mov	r9, r3
 8002b86:	eb18 0a00 	adds.w	sl, r8, r0
 8002b8a:	eb49 0b01 	adc.w	fp, r9, r1
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	f04f 0300 	mov.w	r3, #0
 8002b96:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b9a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b9e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ba2:	ebb2 040a 	subs.w	r4, r2, sl
 8002ba6:	603c      	str	r4, [r7, #0]
 8002ba8:	eb63 030b 	sbc.w	r3, r3, fp
 8002bac:	607b      	str	r3, [r7, #4]
 8002bae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bb2:	4623      	mov	r3, r4
 8002bb4:	181b      	adds	r3, r3, r0
 8002bb6:	613b      	str	r3, [r7, #16]
 8002bb8:	462b      	mov	r3, r5
 8002bba:	eb41 0303 	adc.w	r3, r1, r3
 8002bbe:	617b      	str	r3, [r7, #20]
 8002bc0:	6a3a      	ldr	r2, [r7, #32]
 8002bc2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002bc6:	f7ff ff3f 	bl	8002a48 <UTILS_NanosecondsToTimespec>

    return 0;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3738      	adds	r7, #56	@ 0x38
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002bd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002bde:	4b11      	ldr	r3, [pc, #68]	@ (8002c24 <HAL_MspInit+0x4c>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be2:	4a10      	ldr	r2, [pc, #64]	@ (8002c24 <HAL_MspInit+0x4c>)
 8002be4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002be8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bea:	4b0e      	ldr	r3, [pc, #56]	@ (8002c24 <HAL_MspInit+0x4c>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bf2:	607b      	str	r3, [r7, #4]
 8002bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8002c24 <HAL_MspInit+0x4c>)
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8002c24 <HAL_MspInit+0x4c>)
 8002bfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c00:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c02:	4b08      	ldr	r3, [pc, #32]	@ (8002c24 <HAL_MspInit+0x4c>)
 8002c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c0a:	603b      	str	r3, [r7, #0]
 8002c0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c0e:	2200      	movs	r2, #0
 8002c10:	210f      	movs	r1, #15
 8002c12:	f06f 0001 	mvn.w	r0, #1
 8002c16:	f000 fda1 	bl	800375c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40023800 	.word	0x40023800

08002c28 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b0b0      	sub	sp, #192	@ 0xc0
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c30:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	605a      	str	r2, [r3, #4]
 8002c3a:	609a      	str	r2, [r3, #8]
 8002c3c:	60da      	str	r2, [r3, #12]
 8002c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c40:	f107 031c 	add.w	r3, r7, #28
 8002c44:	2290      	movs	r2, #144	@ 0x90
 8002c46:	2100      	movs	r1, #0
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f013 ffad 	bl	8016ba8 <memset>
  if(hi2c->Instance==I2C2)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a55      	ldr	r2, [pc, #340]	@ (8002da8 <HAL_I2C_MspInit+0x180>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d13e      	bne.n	8002cd6 <HAL_I2C_MspInit+0xae>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002c58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c5c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c64:	f107 031c 	add.w	r3, r7, #28
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f002 fecb 	bl	8005a04 <HAL_RCCEx_PeriphCLKConfig>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8002c74:	f7ff fe44 	bl	8002900 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c78:	4b4c      	ldr	r3, [pc, #304]	@ (8002dac <HAL_I2C_MspInit+0x184>)
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7c:	4a4b      	ldr	r2, [pc, #300]	@ (8002dac <HAL_I2C_MspInit+0x184>)
 8002c7e:	f043 0302 	orr.w	r3, r3, #2
 8002c82:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c84:	4b49      	ldr	r3, [pc, #292]	@ (8002dac <HAL_I2C_MspInit+0x184>)
 8002c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	61bb      	str	r3, [r7, #24]
 8002c8e:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002c90:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002c94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c98:	2312      	movs	r3, #18
 8002c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002caa:	2304      	movs	r3, #4
 8002cac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	483e      	ldr	r0, [pc, #248]	@ (8002db0 <HAL_I2C_MspInit+0x188>)
 8002cb8:	f001 f990 	bl	8003fdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002cbc:	4b3b      	ldr	r3, [pc, #236]	@ (8002dac <HAL_I2C_MspInit+0x184>)
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc0:	4a3a      	ldr	r2, [pc, #232]	@ (8002dac <HAL_I2C_MspInit+0x184>)
 8002cc2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002cc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cc8:	4b38      	ldr	r3, [pc, #224]	@ (8002dac <HAL_I2C_MspInit+0x184>)
 8002cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ccc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002cd4:	e064      	b.n	8002da0 <HAL_I2C_MspInit+0x178>
  else if(hi2c->Instance==I2C3)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a36      	ldr	r2, [pc, #216]	@ (8002db4 <HAL_I2C_MspInit+0x18c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d15f      	bne.n	8002da0 <HAL_I2C_MspInit+0x178>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002ce0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ce4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cec:	f107 031c 	add.w	r3, r7, #28
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f002 fe87 	bl	8005a04 <HAL_RCCEx_PeriphCLKConfig>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8002cfc:	f7ff fe00 	bl	8002900 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d00:	4b2a      	ldr	r3, [pc, #168]	@ (8002dac <HAL_I2C_MspInit+0x184>)
 8002d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d04:	4a29      	ldr	r2, [pc, #164]	@ (8002dac <HAL_I2C_MspInit+0x184>)
 8002d06:	f043 0304 	orr.w	r3, r3, #4
 8002d0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d0c:	4b27      	ldr	r3, [pc, #156]	@ (8002dac <HAL_I2C_MspInit+0x184>)
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	613b      	str	r3, [r7, #16]
 8002d16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d18:	4b24      	ldr	r3, [pc, #144]	@ (8002dac <HAL_I2C_MspInit+0x184>)
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1c:	4a23      	ldr	r2, [pc, #140]	@ (8002dac <HAL_I2C_MspInit+0x184>)
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d24:	4b21      	ldr	r3, [pc, #132]	@ (8002dac <HAL_I2C_MspInit+0x184>)
 8002d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d38:	2312      	movs	r3, #18
 8002d3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d44:	2303      	movs	r3, #3
 8002d46:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d4a:	2304      	movs	r3, #4
 8002d4c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d50:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002d54:	4619      	mov	r1, r3
 8002d56:	4818      	ldr	r0, [pc, #96]	@ (8002db8 <HAL_I2C_MspInit+0x190>)
 8002d58:	f001 f940 	bl	8003fdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d64:	2312      	movs	r3, #18
 8002d66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d70:	2303      	movs	r3, #3
 8002d72:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d76:	2304      	movs	r3, #4
 8002d78:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d7c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002d80:	4619      	mov	r1, r3
 8002d82:	480e      	ldr	r0, [pc, #56]	@ (8002dbc <HAL_I2C_MspInit+0x194>)
 8002d84:	f001 f92a 	bl	8003fdc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002d88:	4b08      	ldr	r3, [pc, #32]	@ (8002dac <HAL_I2C_MspInit+0x184>)
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8c:	4a07      	ldr	r2, [pc, #28]	@ (8002dac <HAL_I2C_MspInit+0x184>)
 8002d8e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d92:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d94:	4b05      	ldr	r3, [pc, #20]	@ (8002dac <HAL_I2C_MspInit+0x184>)
 8002d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d9c:	60bb      	str	r3, [r7, #8]
 8002d9e:	68bb      	ldr	r3, [r7, #8]
}
 8002da0:	bf00      	nop
 8002da2:	37c0      	adds	r7, #192	@ 0xc0
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40005800 	.word	0x40005800
 8002dac:	40023800 	.word	0x40023800
 8002db0:	40020400 	.word	0x40020400
 8002db4:	40005c00 	.word	0x40005c00
 8002db8:	40020800 	.word	0x40020800
 8002dbc:	40020000 	.word	0x40020000

08002dc0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08a      	sub	sp, #40	@ 0x28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc8:	f107 0314 	add.w	r3, r7, #20
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	605a      	str	r2, [r3, #4]
 8002dd2:	609a      	str	r2, [r3, #8]
 8002dd4:	60da      	str	r2, [r3, #12]
 8002dd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a1b      	ldr	r2, [pc, #108]	@ (8002e4c <HAL_SPI_MspInit+0x8c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d12f      	bne.n	8002e42 <HAL_SPI_MspInit+0x82>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002de2:	4b1b      	ldr	r3, [pc, #108]	@ (8002e50 <HAL_SPI_MspInit+0x90>)
 8002de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de6:	4a1a      	ldr	r2, [pc, #104]	@ (8002e50 <HAL_SPI_MspInit+0x90>)
 8002de8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002dec:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dee:	4b18      	ldr	r3, [pc, #96]	@ (8002e50 <HAL_SPI_MspInit+0x90>)
 8002df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002df6:	613b      	str	r3, [r7, #16]
 8002df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dfa:	4b15      	ldr	r3, [pc, #84]	@ (8002e50 <HAL_SPI_MspInit+0x90>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfe:	4a14      	ldr	r2, [pc, #80]	@ (8002e50 <HAL_SPI_MspInit+0x90>)
 8002e00:	f043 0301 	orr.w	r3, r3, #1
 8002e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e06:	4b12      	ldr	r3, [pc, #72]	@ (8002e50 <HAL_SPI_MspInit+0x90>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002e12:	23e0      	movs	r3, #224	@ 0xe0
 8002e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e16:	2302      	movs	r3, #2
 8002e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e22:	2305      	movs	r3, #5
 8002e24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e26:	f107 0314 	add.w	r3, r7, #20
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4809      	ldr	r0, [pc, #36]	@ (8002e54 <HAL_SPI_MspInit+0x94>)
 8002e2e:	f001 f8d5 	bl	8003fdc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002e32:	2200      	movs	r2, #0
 8002e34:	2105      	movs	r1, #5
 8002e36:	2023      	movs	r0, #35	@ 0x23
 8002e38:	f000 fc90 	bl	800375c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002e3c:	2023      	movs	r0, #35	@ 0x23
 8002e3e:	f000 fca9 	bl	8003794 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002e42:	bf00      	nop
 8002e44:	3728      	adds	r7, #40	@ 0x28
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40013000 	.word	0x40013000
 8002e50:	40023800 	.word	0x40023800
 8002e54:	40020000 	.word	0x40020000

08002e58 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a0d      	ldr	r2, [pc, #52]	@ (8002e9c <HAL_TIM_Base_MspInit+0x44>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d113      	bne.n	8002e92 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea0 <HAL_TIM_Base_MspInit+0x48>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6e:	4a0c      	ldr	r2, [pc, #48]	@ (8002ea0 <HAL_TIM_Base_MspInit+0x48>)
 8002e70:	f043 0302 	orr.w	r3, r3, #2
 8002e74:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e76:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea0 <HAL_TIM_Base_MspInit+0x48>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002e82:	2200      	movs	r2, #0
 8002e84:	2105      	movs	r1, #5
 8002e86:	201d      	movs	r0, #29
 8002e88:	f000 fc68 	bl	800375c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002e8c:	201d      	movs	r0, #29
 8002e8e:	f000 fc81 	bl	8003794 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002e92:	bf00      	nop
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40000400 	.word	0x40000400
 8002ea0:	40023800 	.word	0x40023800

08002ea4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b088      	sub	sp, #32
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eac:	f107 030c 	add.w	r3, r7, #12
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	605a      	str	r2, [r3, #4]
 8002eb6:	609a      	str	r2, [r3, #8]
 8002eb8:	60da      	str	r2, [r3, #12]
 8002eba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a11      	ldr	r2, [pc, #68]	@ (8002f08 <HAL_TIM_MspPostInit+0x64>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d11b      	bne.n	8002efe <HAL_TIM_MspPostInit+0x5a>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ec6:	4b11      	ldr	r3, [pc, #68]	@ (8002f0c <HAL_TIM_MspPostInit+0x68>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eca:	4a10      	ldr	r2, [pc, #64]	@ (8002f0c <HAL_TIM_MspPostInit+0x68>)
 8002ecc:	f043 0304 	orr.w	r3, r3, #4
 8002ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8002f0c <HAL_TIM_MspPostInit+0x68>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed6:	f003 0304 	and.w	r3, r3, #4
 8002eda:	60bb      	str	r3, [r7, #8]
 8002edc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002ede:	2380      	movs	r3, #128	@ 0x80
 8002ee0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002eea:	2302      	movs	r3, #2
 8002eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ef2:	f107 030c 	add.w	r3, r7, #12
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	4805      	ldr	r0, [pc, #20]	@ (8002f10 <HAL_TIM_MspPostInit+0x6c>)
 8002efa:	f001 f86f 	bl	8003fdc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002efe:	bf00      	nop
 8002f00:	3720      	adds	r7, #32
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40000400 	.word	0x40000400
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	40020800 	.word	0x40020800

08002f14 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b0ae      	sub	sp, #184	@ 0xb8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f1c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	605a      	str	r2, [r3, #4]
 8002f26:	609a      	str	r2, [r3, #8]
 8002f28:	60da      	str	r2, [r3, #12]
 8002f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f2c:	f107 0314 	add.w	r3, r7, #20
 8002f30:	2290      	movs	r2, #144	@ 0x90
 8002f32:	2100      	movs	r1, #0
 8002f34:	4618      	mov	r0, r3
 8002f36:	f013 fe37 	bl	8016ba8 <memset>
  if(huart->Instance==USART2)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a54      	ldr	r2, [pc, #336]	@ (8003090 <HAL_UART_MspInit+0x17c>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	f040 80a1 	bne.w	8003088 <HAL_UART_MspInit+0x174>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002f46:	2380      	movs	r3, #128	@ 0x80
 8002f48:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f4e:	f107 0314 	add.w	r3, r7, #20
 8002f52:	4618      	mov	r0, r3
 8002f54:	f002 fd56 	bl	8005a04 <HAL_RCCEx_PeriphCLKConfig>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002f5e:	f7ff fccf 	bl	8002900 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f62:	4b4c      	ldr	r3, [pc, #304]	@ (8003094 <HAL_UART_MspInit+0x180>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f66:	4a4b      	ldr	r2, [pc, #300]	@ (8003094 <HAL_UART_MspInit+0x180>)
 8002f68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f6e:	4b49      	ldr	r3, [pc, #292]	@ (8003094 <HAL_UART_MspInit+0x180>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f76:	613b      	str	r3, [r7, #16]
 8002f78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f7a:	4b46      	ldr	r3, [pc, #280]	@ (8003094 <HAL_UART_MspInit+0x180>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7e:	4a45      	ldr	r2, [pc, #276]	@ (8003094 <HAL_UART_MspInit+0x180>)
 8002f80:	f043 0308 	orr.w	r3, r3, #8
 8002f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f86:	4b43      	ldr	r3, [pc, #268]	@ (8003094 <HAL_UART_MspInit+0x180>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002f92:	2360      	movs	r3, #96	@ 0x60
 8002f94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002faa:	2307      	movs	r3, #7
 8002fac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fb0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4838      	ldr	r0, [pc, #224]	@ (8003098 <HAL_UART_MspInit+0x184>)
 8002fb8:	f001 f810 	bl	8003fdc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002fbc:	4b37      	ldr	r3, [pc, #220]	@ (800309c <HAL_UART_MspInit+0x188>)
 8002fbe:	4a38      	ldr	r2, [pc, #224]	@ (80030a0 <HAL_UART_MspInit+0x18c>)
 8002fc0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002fc2:	4b36      	ldr	r3, [pc, #216]	@ (800309c <HAL_UART_MspInit+0x188>)
 8002fc4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002fc8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fca:	4b34      	ldr	r3, [pc, #208]	@ (800309c <HAL_UART_MspInit+0x188>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fd0:	4b32      	ldr	r3, [pc, #200]	@ (800309c <HAL_UART_MspInit+0x188>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fd6:	4b31      	ldr	r3, [pc, #196]	@ (800309c <HAL_UART_MspInit+0x188>)
 8002fd8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fdc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fde:	4b2f      	ldr	r3, [pc, #188]	@ (800309c <HAL_UART_MspInit+0x188>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fe4:	4b2d      	ldr	r3, [pc, #180]	@ (800309c <HAL_UART_MspInit+0x188>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002fea:	4b2c      	ldr	r3, [pc, #176]	@ (800309c <HAL_UART_MspInit+0x188>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002ff0:	4b2a      	ldr	r3, [pc, #168]	@ (800309c <HAL_UART_MspInit+0x188>)
 8002ff2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002ff6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ff8:	4b28      	ldr	r3, [pc, #160]	@ (800309c <HAL_UART_MspInit+0x188>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002ffe:	4827      	ldr	r0, [pc, #156]	@ (800309c <HAL_UART_MspInit+0x188>)
 8003000:	f000 fbd6 	bl	80037b0 <HAL_DMA_Init>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 800300a:	f7ff fc79 	bl	8002900 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a22      	ldr	r2, [pc, #136]	@ (800309c <HAL_UART_MspInit+0x188>)
 8003012:	675a      	str	r2, [r3, #116]	@ 0x74
 8003014:	4a21      	ldr	r2, [pc, #132]	@ (800309c <HAL_UART_MspInit+0x188>)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800301a:	4b22      	ldr	r3, [pc, #136]	@ (80030a4 <HAL_UART_MspInit+0x190>)
 800301c:	4a22      	ldr	r2, [pc, #136]	@ (80030a8 <HAL_UART_MspInit+0x194>)
 800301e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003020:	4b20      	ldr	r3, [pc, #128]	@ (80030a4 <HAL_UART_MspInit+0x190>)
 8003022:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003026:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003028:	4b1e      	ldr	r3, [pc, #120]	@ (80030a4 <HAL_UART_MspInit+0x190>)
 800302a:	2240      	movs	r2, #64	@ 0x40
 800302c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800302e:	4b1d      	ldr	r3, [pc, #116]	@ (80030a4 <HAL_UART_MspInit+0x190>)
 8003030:	2200      	movs	r2, #0
 8003032:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003034:	4b1b      	ldr	r3, [pc, #108]	@ (80030a4 <HAL_UART_MspInit+0x190>)
 8003036:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800303a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800303c:	4b19      	ldr	r3, [pc, #100]	@ (80030a4 <HAL_UART_MspInit+0x190>)
 800303e:	2200      	movs	r2, #0
 8003040:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003042:	4b18      	ldr	r3, [pc, #96]	@ (80030a4 <HAL_UART_MspInit+0x190>)
 8003044:	2200      	movs	r2, #0
 8003046:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003048:	4b16      	ldr	r3, [pc, #88]	@ (80030a4 <HAL_UART_MspInit+0x190>)
 800304a:	2200      	movs	r2, #0
 800304c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800304e:	4b15      	ldr	r3, [pc, #84]	@ (80030a4 <HAL_UART_MspInit+0x190>)
 8003050:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003054:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003056:	4b13      	ldr	r3, [pc, #76]	@ (80030a4 <HAL_UART_MspInit+0x190>)
 8003058:	2200      	movs	r2, #0
 800305a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800305c:	4811      	ldr	r0, [pc, #68]	@ (80030a4 <HAL_UART_MspInit+0x190>)
 800305e:	f000 fba7 	bl	80037b0 <HAL_DMA_Init>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <HAL_UART_MspInit+0x158>
    {
      Error_Handler();
 8003068:	f7ff fc4a 	bl	8002900 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a0d      	ldr	r2, [pc, #52]	@ (80030a4 <HAL_UART_MspInit+0x190>)
 8003070:	671a      	str	r2, [r3, #112]	@ 0x70
 8003072:	4a0c      	ldr	r2, [pc, #48]	@ (80030a4 <HAL_UART_MspInit+0x190>)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003078:	2200      	movs	r2, #0
 800307a:	2105      	movs	r1, #5
 800307c:	2026      	movs	r0, #38	@ 0x26
 800307e:	f000 fb6d 	bl	800375c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003082:	2026      	movs	r0, #38	@ 0x26
 8003084:	f000 fb86 	bl	8003794 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8003088:	bf00      	nop
 800308a:	37b8      	adds	r7, #184	@ 0xb8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40004400 	.word	0x40004400
 8003094:	40023800 	.word	0x40023800
 8003098:	40020c00 	.word	0x40020c00
 800309c:	2000493c 	.word	0x2000493c
 80030a0:	40026088 	.word	0x40026088
 80030a4:	2000499c 	.word	0x2000499c
 80030a8:	400260a0 	.word	0x400260a0

080030ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08c      	sub	sp, #48	@ 0x30
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80030b4:	2300      	movs	r3, #0
 80030b6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80030b8:	2300      	movs	r3, #0
 80030ba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80030bc:	4b2e      	ldr	r3, [pc, #184]	@ (8003178 <HAL_InitTick+0xcc>)
 80030be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c0:	4a2d      	ldr	r2, [pc, #180]	@ (8003178 <HAL_InitTick+0xcc>)
 80030c2:	f043 0301 	orr.w	r3, r3, #1
 80030c6:	6453      	str	r3, [r2, #68]	@ 0x44
 80030c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003178 <HAL_InitTick+0xcc>)
 80030ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	60bb      	str	r3, [r7, #8]
 80030d2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80030d4:	f107 020c 	add.w	r2, r7, #12
 80030d8:	f107 0310 	add.w	r3, r7, #16
 80030dc:	4611      	mov	r1, r2
 80030de:	4618      	mov	r0, r3
 80030e0:	f002 fc5e 	bl	80059a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80030e4:	f002 fc48 	bl	8005978 <HAL_RCC_GetPCLK2Freq>
 80030e8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80030ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ec:	4a23      	ldr	r2, [pc, #140]	@ (800317c <HAL_InitTick+0xd0>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	0c9b      	lsrs	r3, r3, #18
 80030f4:	3b01      	subs	r3, #1
 80030f6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80030f8:	4b21      	ldr	r3, [pc, #132]	@ (8003180 <HAL_InitTick+0xd4>)
 80030fa:	4a22      	ldr	r2, [pc, #136]	@ (8003184 <HAL_InitTick+0xd8>)
 80030fc:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80030fe:	4b20      	ldr	r3, [pc, #128]	@ (8003180 <HAL_InitTick+0xd4>)
 8003100:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003104:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003106:	4a1e      	ldr	r2, [pc, #120]	@ (8003180 <HAL_InitTick+0xd4>)
 8003108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800310c:	4b1c      	ldr	r3, [pc, #112]	@ (8003180 <HAL_InitTick+0xd4>)
 800310e:	2200      	movs	r2, #0
 8003110:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003112:	4b1b      	ldr	r3, [pc, #108]	@ (8003180 <HAL_InitTick+0xd4>)
 8003114:	2200      	movs	r2, #0
 8003116:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003118:	4b19      	ldr	r3, [pc, #100]	@ (8003180 <HAL_InitTick+0xd4>)
 800311a:	2200      	movs	r2, #0
 800311c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800311e:	4818      	ldr	r0, [pc, #96]	@ (8003180 <HAL_InitTick+0xd4>)
 8003120:	f003 fa63 	bl	80065ea <HAL_TIM_Base_Init>
 8003124:	4603      	mov	r3, r0
 8003126:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800312a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800312e:	2b00      	cmp	r3, #0
 8003130:	d11b      	bne.n	800316a <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003132:	4813      	ldr	r0, [pc, #76]	@ (8003180 <HAL_InitTick+0xd4>)
 8003134:	f003 fab0 	bl	8006698 <HAL_TIM_Base_Start_IT>
 8003138:	4603      	mov	r3, r0
 800313a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800313e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003142:	2b00      	cmp	r3, #0
 8003144:	d111      	bne.n	800316a <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003146:	2019      	movs	r0, #25
 8003148:	f000 fb24 	bl	8003794 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b0f      	cmp	r3, #15
 8003150:	d808      	bhi.n	8003164 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8003152:	2200      	movs	r2, #0
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	2019      	movs	r0, #25
 8003158:	f000 fb00 	bl	800375c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800315c:	4a0a      	ldr	r2, [pc, #40]	@ (8003188 <HAL_InitTick+0xdc>)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	e002      	b.n	800316a <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800316a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800316e:	4618      	mov	r0, r3
 8003170:	3730      	adds	r7, #48	@ 0x30
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40023800 	.word	0x40023800
 800317c:	431bde83 	.word	0x431bde83
 8003180:	20004a14 	.word	0x20004a14
 8003184:	40010000 	.word	0x40010000
 8003188:	20000024 	.word	0x20000024

0800318c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003190:	bf00      	nop
 8003192:	e7fd      	b.n	8003190 <NMI_Handler+0x4>

08003194 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003198:	bf00      	nop
 800319a:	e7fd      	b.n	8003198 <HardFault_Handler+0x4>

0800319c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031a0:	bf00      	nop
 80031a2:	e7fd      	b.n	80031a0 <MemManage_Handler+0x4>

080031a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031a8:	bf00      	nop
 80031aa:	e7fd      	b.n	80031a8 <BusFault_Handler+0x4>

080031ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031b0:	bf00      	nop
 80031b2:	e7fd      	b.n	80031b0 <UsageFault_Handler+0x4>

080031b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031b8:	bf00      	nop
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
	...

080031c4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80031c8:	4802      	ldr	r0, [pc, #8]	@ (80031d4 <DMA1_Stream5_IRQHandler+0x10>)
 80031ca:	f000 fc91 	bl	8003af0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80031ce:	bf00      	nop
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	2000493c 	.word	0x2000493c

080031d8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80031dc:	4802      	ldr	r0, [pc, #8]	@ (80031e8 <DMA1_Stream6_IRQHandler+0x10>)
 80031de:	f000 fc87 	bl	8003af0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80031e2:	bf00      	nop
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	2000499c 	.word	0x2000499c

080031ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80031f0:	4802      	ldr	r0, [pc, #8]	@ (80031fc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80031f2:	f003 fb2a 	bl	800684a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80031f6:	bf00      	nop
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	20004a14 	.word	0x20004a14

08003200 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003204:	4802      	ldr	r0, [pc, #8]	@ (8003210 <TIM3_IRQHandler+0x10>)
 8003206:	f003 fb20 	bl	800684a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800320a:	bf00      	nop
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20004868 	.word	0x20004868

08003214 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003218:	4802      	ldr	r0, [pc, #8]	@ (8003224 <SPI1_IRQHandler+0x10>)
 800321a:	f003 f8c7 	bl	80063ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800321e:	bf00      	nop
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20004804 	.word	0x20004804

08003228 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800322c:	4802      	ldr	r0, [pc, #8]	@ (8003238 <USART2_IRQHandler+0x10>)
 800322e:	f004 fbf5 	bl	8007a1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003232:	bf00      	nop
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	200048b4 	.word	0x200048b4

0800323c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  return 1;
 8003240:	2301      	movs	r3, #1
}
 8003242:	4618      	mov	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <_kill>:

int _kill(int pid, int sig)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003256:	f013 fd3b 	bl	8016cd0 <__errno>
 800325a:	4603      	mov	r3, r0
 800325c:	2216      	movs	r2, #22
 800325e:	601a      	str	r2, [r3, #0]
  return -1;
 8003260:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003264:	4618      	mov	r0, r3
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <_exit>:

void _exit (int status)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003274:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7ff ffe7 	bl	800324c <_kill>
  while (1) {}    /* Make sure we hang here */
 800327e:	bf00      	nop
 8003280:	e7fd      	b.n	800327e <_exit+0x12>

08003282 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b086      	sub	sp, #24
 8003286:	af00      	add	r7, sp, #0
 8003288:	60f8      	str	r0, [r7, #12]
 800328a:	60b9      	str	r1, [r7, #8]
 800328c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800328e:	2300      	movs	r3, #0
 8003290:	617b      	str	r3, [r7, #20]
 8003292:	e00a      	b.n	80032aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003294:	f3af 8000 	nop.w
 8003298:	4601      	mov	r1, r0
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	60ba      	str	r2, [r7, #8]
 80032a0:	b2ca      	uxtb	r2, r1
 80032a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	3301      	adds	r3, #1
 80032a8:	617b      	str	r3, [r7, #20]
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	dbf0      	blt.n	8003294 <_read+0x12>
  }

  return len;
 80032b2:	687b      	ldr	r3, [r7, #4]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3718      	adds	r7, #24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]
 80032cc:	e009      	b.n	80032e2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	60ba      	str	r2, [r7, #8]
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	3301      	adds	r3, #1
 80032e0:	617b      	str	r3, [r7, #20]
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	dbf1      	blt.n	80032ce <_write+0x12>
  }
  return len;
 80032ea:	687b      	ldr	r3, [r7, #4]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <_close>:

int _close(int file)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80032fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003300:	4618      	mov	r0, r3
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800331c:	605a      	str	r2, [r3, #4]
  return 0;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <_isatty>:

int _isatty(int file)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003334:	2301      	movs	r3, #1
}
 8003336:	4618      	mov	r0, r3
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003342:	b480      	push	{r7}
 8003344:	b085      	sub	sp, #20
 8003346:	af00      	add	r7, sp, #0
 8003348:	60f8      	str	r0, [r7, #12]
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003364:	4a14      	ldr	r2, [pc, #80]	@ (80033b8 <_sbrk+0x5c>)
 8003366:	4b15      	ldr	r3, [pc, #84]	@ (80033bc <_sbrk+0x60>)
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003370:	4b13      	ldr	r3, [pc, #76]	@ (80033c0 <_sbrk+0x64>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d102      	bne.n	800337e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003378:	4b11      	ldr	r3, [pc, #68]	@ (80033c0 <_sbrk+0x64>)
 800337a:	4a12      	ldr	r2, [pc, #72]	@ (80033c4 <_sbrk+0x68>)
 800337c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800337e:	4b10      	ldr	r3, [pc, #64]	@ (80033c0 <_sbrk+0x64>)
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4413      	add	r3, r2
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	429a      	cmp	r2, r3
 800338a:	d207      	bcs.n	800339c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800338c:	f013 fca0 	bl	8016cd0 <__errno>
 8003390:	4603      	mov	r3, r0
 8003392:	220c      	movs	r2, #12
 8003394:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003396:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800339a:	e009      	b.n	80033b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800339c:	4b08      	ldr	r3, [pc, #32]	@ (80033c0 <_sbrk+0x64>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033a2:	4b07      	ldr	r3, [pc, #28]	@ (80033c0 <_sbrk+0x64>)
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4413      	add	r3, r2
 80033aa:	4a05      	ldr	r2, [pc, #20]	@ (80033c0 <_sbrk+0x64>)
 80033ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033ae:	68fb      	ldr	r3, [r7, #12]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3718      	adds	r7, #24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	20080000 	.word	0x20080000
 80033bc:	00000400 	.word	0x00000400
 80033c0:	20004a64 	.word	0x20004a64
 80033c4:	2000ee18 	.word	0x2000ee18

080033c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033cc:	4b06      	ldr	r3, [pc, #24]	@ (80033e8 <SystemInit+0x20>)
 80033ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033d2:	4a05      	ldr	r2, [pc, #20]	@ (80033e8 <SystemInit+0x20>)
 80033d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80033d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033dc:	bf00      	nop
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	e000ed00 	.word	0xe000ed00

080033ec <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80033fa:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80033fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003400:	4904      	ldr	r1, [pc, #16]	@ (8003414 <cubemx_transport_open+0x28>)
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f004 fa34 	bl	8007870 <HAL_UART_Receive_DMA>
    return true;
 8003408:	2301      	movs	r3, #1
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	20004a68 	.word	0x20004a68

08003418 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8003426:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f004 fa65 	bl	80078f8 <HAL_UART_DMAStop>
    return true;
 800342e:	2301      	movs	r3, #1
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
 8003444:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800344c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003452:	2b20      	cmp	r3, #32
 8003454:	d11a      	bne.n	800348c <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	b29b      	uxth	r3, r3
 800345a:	461a      	mov	r2, r3
 800345c:	68b9      	ldr	r1, [r7, #8]
 800345e:	6978      	ldr	r0, [r7, #20]
 8003460:	f004 f98a 	bl	8007778 <HAL_UART_Transmit_DMA>
 8003464:	4603      	mov	r3, r0
 8003466:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8003468:	e002      	b.n	8003470 <cubemx_transport_write+0x38>
            osDelay(1);
 800346a:	2001      	movs	r0, #1
 800346c:	f005 fe3a 	bl	80090e4 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8003470:	7cfb      	ldrb	r3, [r7, #19]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d103      	bne.n	800347e <cubemx_transport_write+0x46>
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800347a:	2b20      	cmp	r3, #32
 800347c:	d1f5      	bne.n	800346a <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 800347e:	7cfb      	ldrb	r3, [r7, #19]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <cubemx_transport_write+0x50>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	e002      	b.n	800348e <cubemx_transport_write+0x56>
 8003488:	2300      	movs	r3, #0
 800348a:	e000      	b.n	800348e <cubemx_transport_write+0x56>
    }else{
        return 0;
 800348c:	2300      	movs	r3, #0
    }
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
	...

08003498 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8003498:	b580      	push	{r7, lr}
 800349a:	b088      	sub	sp, #32
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
 80034a4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80034ac:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80034ae:	2300      	movs	r3, #0
 80034b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80034b2:	b672      	cpsid	i
}
 80034b4:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80034c2:	4a1c      	ldr	r2, [pc, #112]	@ (8003534 <cubemx_transport_read+0x9c>)
 80034c4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80034c6:	b662      	cpsie	i
}
 80034c8:	bf00      	nop
        __enable_irq();
        ms_used++;
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	3301      	adds	r3, #1
 80034ce:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80034d0:	2001      	movs	r0, #1
 80034d2:	f005 fe07 	bl	80090e4 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80034d6:	4b18      	ldr	r3, [pc, #96]	@ (8003538 <cubemx_transport_read+0xa0>)
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	4b16      	ldr	r3, [pc, #88]	@ (8003534 <cubemx_transport_read+0x9c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d103      	bne.n	80034ea <cubemx_transport_read+0x52>
 80034e2:	69fa      	ldr	r2, [r7, #28]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	dbe3      	blt.n	80034b2 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80034ee:	e011      	b.n	8003514 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80034f0:	4b11      	ldr	r3, [pc, #68]	@ (8003538 <cubemx_transport_read+0xa0>)
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68b9      	ldr	r1, [r7, #8]
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	440b      	add	r3, r1
 80034fa:	4910      	ldr	r1, [pc, #64]	@ (800353c <cubemx_transport_read+0xa4>)
 80034fc:	5c8a      	ldrb	r2, [r1, r2]
 80034fe:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8003500:	4b0d      	ldr	r3, [pc, #52]	@ (8003538 <cubemx_transport_read+0xa0>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	3301      	adds	r3, #1
 8003506:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800350a:	4a0b      	ldr	r2, [pc, #44]	@ (8003538 <cubemx_transport_read+0xa0>)
 800350c:	6013      	str	r3, [r2, #0]
        wrote++;
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	3301      	adds	r3, #1
 8003512:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8003514:	4b08      	ldr	r3, [pc, #32]	@ (8003538 <cubemx_transport_read+0xa0>)
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	4b06      	ldr	r3, [pc, #24]	@ (8003534 <cubemx_transport_read+0x9c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	429a      	cmp	r2, r3
 800351e:	d003      	beq.n	8003528 <cubemx_transport_read+0x90>
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	429a      	cmp	r2, r3
 8003526:	d3e3      	bcc.n	80034f0 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8003528:	69bb      	ldr	r3, [r7, #24]
}
 800352a:	4618      	mov	r0, r3
 800352c:	3720      	adds	r7, #32
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	2000526c 	.word	0x2000526c
 8003538:	20005268 	.word	0x20005268
 800353c:	20004a68 	.word	0x20004a68

08003540 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003540:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003578 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003544:	f7ff ff40 	bl	80033c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003548:	480c      	ldr	r0, [pc, #48]	@ (800357c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800354a:	490d      	ldr	r1, [pc, #52]	@ (8003580 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800354c:	4a0d      	ldr	r2, [pc, #52]	@ (8003584 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800354e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003550:	e002      	b.n	8003558 <LoopCopyDataInit>

08003552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003556:	3304      	adds	r3, #4

08003558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800355a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800355c:	d3f9      	bcc.n	8003552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800355e:	4a0a      	ldr	r2, [pc, #40]	@ (8003588 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003560:	4c0a      	ldr	r4, [pc, #40]	@ (800358c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003564:	e001      	b.n	800356a <LoopFillZerobss>

08003566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003568:	3204      	adds	r2, #4

0800356a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800356a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800356c:	d3fb      	bcc.n	8003566 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800356e:	f013 fbb5 	bl	8016cdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003572:	f7fe fd1b 	bl	8001fac <main>
  bx  lr    
 8003576:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003578:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800357c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003580:	200006f4 	.word	0x200006f4
  ldr r2, =_sidata
 8003584:	080189a8 	.word	0x080189a8
  ldr r2, =_sbss
 8003588:	200006f8 	.word	0x200006f8
  ldr r4, =_ebss
 800358c:	2000ee14 	.word	0x2000ee14

08003590 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003590:	e7fe      	b.n	8003590 <ADC_IRQHandler>

08003592 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003596:	2003      	movs	r0, #3
 8003598:	f000 f8d5 	bl	8003746 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800359c:	200f      	movs	r0, #15
 800359e:	f7ff fd85 	bl	80030ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035a2:	f7ff fb19 	bl	8002bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035b0:	4b06      	ldr	r3, [pc, #24]	@ (80035cc <HAL_IncTick+0x20>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	461a      	mov	r2, r3
 80035b6:	4b06      	ldr	r3, [pc, #24]	@ (80035d0 <HAL_IncTick+0x24>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4413      	add	r3, r2
 80035bc:	4a04      	ldr	r2, [pc, #16]	@ (80035d0 <HAL_IncTick+0x24>)
 80035be:	6013      	str	r3, [r2, #0]
}
 80035c0:	bf00      	nop
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	20000028 	.word	0x20000028
 80035d0:	20005270 	.word	0x20005270

080035d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  return uwTick;
 80035d8:	4b03      	ldr	r3, [pc, #12]	@ (80035e8 <HAL_GetTick+0x14>)
 80035da:	681b      	ldr	r3, [r3, #0]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	20005270 	.word	0x20005270

080035ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035fc:	4b0b      	ldr	r3, [pc, #44]	@ (800362c <__NVIC_SetPriorityGrouping+0x40>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003608:	4013      	ands	r3, r2
 800360a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003614:	4b06      	ldr	r3, [pc, #24]	@ (8003630 <__NVIC_SetPriorityGrouping+0x44>)
 8003616:	4313      	orrs	r3, r2
 8003618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800361a:	4a04      	ldr	r2, [pc, #16]	@ (800362c <__NVIC_SetPriorityGrouping+0x40>)
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	60d3      	str	r3, [r2, #12]
}
 8003620:	bf00      	nop
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	e000ed00 	.word	0xe000ed00
 8003630:	05fa0000 	.word	0x05fa0000

08003634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003638:	4b04      	ldr	r3, [pc, #16]	@ (800364c <__NVIC_GetPriorityGrouping+0x18>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	0a1b      	lsrs	r3, r3, #8
 800363e:	f003 0307 	and.w	r3, r3, #7
}
 8003642:	4618      	mov	r0, r3
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	e000ed00 	.word	0xe000ed00

08003650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	4603      	mov	r3, r0
 8003658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800365a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365e:	2b00      	cmp	r3, #0
 8003660:	db0b      	blt.n	800367a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003662:	79fb      	ldrb	r3, [r7, #7]
 8003664:	f003 021f 	and.w	r2, r3, #31
 8003668:	4907      	ldr	r1, [pc, #28]	@ (8003688 <__NVIC_EnableIRQ+0x38>)
 800366a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366e:	095b      	lsrs	r3, r3, #5
 8003670:	2001      	movs	r0, #1
 8003672:	fa00 f202 	lsl.w	r2, r0, r2
 8003676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	e000e100 	.word	0xe000e100

0800368c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	4603      	mov	r3, r0
 8003694:	6039      	str	r1, [r7, #0]
 8003696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800369c:	2b00      	cmp	r3, #0
 800369e:	db0a      	blt.n	80036b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	490c      	ldr	r1, [pc, #48]	@ (80036d8 <__NVIC_SetPriority+0x4c>)
 80036a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036aa:	0112      	lsls	r2, r2, #4
 80036ac:	b2d2      	uxtb	r2, r2
 80036ae:	440b      	add	r3, r1
 80036b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036b4:	e00a      	b.n	80036cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	4908      	ldr	r1, [pc, #32]	@ (80036dc <__NVIC_SetPriority+0x50>)
 80036bc:	79fb      	ldrb	r3, [r7, #7]
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	3b04      	subs	r3, #4
 80036c4:	0112      	lsls	r2, r2, #4
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	440b      	add	r3, r1
 80036ca:	761a      	strb	r2, [r3, #24]
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	e000e100 	.word	0xe000e100
 80036dc:	e000ed00 	.word	0xe000ed00

080036e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b089      	sub	sp, #36	@ 0x24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f003 0307 	and.w	r3, r3, #7
 80036f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f1c3 0307 	rsb	r3, r3, #7
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	bf28      	it	cs
 80036fe:	2304      	movcs	r3, #4
 8003700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	3304      	adds	r3, #4
 8003706:	2b06      	cmp	r3, #6
 8003708:	d902      	bls.n	8003710 <NVIC_EncodePriority+0x30>
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	3b03      	subs	r3, #3
 800370e:	e000      	b.n	8003712 <NVIC_EncodePriority+0x32>
 8003710:	2300      	movs	r3, #0
 8003712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003714:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	fa02 f303 	lsl.w	r3, r2, r3
 800371e:	43da      	mvns	r2, r3
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	401a      	ands	r2, r3
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003728:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	fa01 f303 	lsl.w	r3, r1, r3
 8003732:	43d9      	mvns	r1, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003738:	4313      	orrs	r3, r2
         );
}
 800373a:	4618      	mov	r0, r3
 800373c:	3724      	adds	r7, #36	@ 0x24
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b082      	sub	sp, #8
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff ff4c 	bl	80035ec <__NVIC_SetPriorityGrouping>
}
 8003754:	bf00      	nop
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	4603      	mov	r3, r0
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
 8003768:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800376a:	2300      	movs	r3, #0
 800376c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800376e:	f7ff ff61 	bl	8003634 <__NVIC_GetPriorityGrouping>
 8003772:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	68b9      	ldr	r1, [r7, #8]
 8003778:	6978      	ldr	r0, [r7, #20]
 800377a:	f7ff ffb1 	bl	80036e0 <NVIC_EncodePriority>
 800377e:	4602      	mov	r2, r0
 8003780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003784:	4611      	mov	r1, r2
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff ff80 	bl	800368c <__NVIC_SetPriority>
}
 800378c:	bf00      	nop
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	4603      	mov	r3, r0
 800379c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800379e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7ff ff54 	bl	8003650 <__NVIC_EnableIRQ>
}
 80037a8:	bf00      	nop
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037b8:	2300      	movs	r3, #0
 80037ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037bc:	f7ff ff0a 	bl	80035d4 <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e099      	b.n	8003900 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0201 	bic.w	r2, r2, #1
 80037ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037ec:	e00f      	b.n	800380e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037ee:	f7ff fef1 	bl	80035d4 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b05      	cmp	r3, #5
 80037fa:	d908      	bls.n	800380e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2220      	movs	r2, #32
 8003800:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2203      	movs	r2, #3
 8003806:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e078      	b.n	8003900 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1e8      	bne.n	80037ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	4b38      	ldr	r3, [pc, #224]	@ (8003908 <HAL_DMA_Init+0x158>)
 8003828:	4013      	ands	r3, r2
 800382a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800383a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003846:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003852:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	4313      	orrs	r3, r2
 800385e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003864:	2b04      	cmp	r3, #4
 8003866:	d107      	bne.n	8003878 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003870:	4313      	orrs	r3, r2
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	4313      	orrs	r3, r2
 8003876:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f023 0307 	bic.w	r3, r3, #7
 800388e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	4313      	orrs	r3, r2
 8003898:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d117      	bne.n	80038d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00e      	beq.n	80038d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 fb15 	bl	8003ee4 <DMA_CheckFifoParam>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d008      	beq.n	80038d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2240      	movs	r2, #64	@ 0x40
 80038c4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80038ce:	2301      	movs	r3, #1
 80038d0:	e016      	b.n	8003900 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 facc 	bl	8003e78 <DMA_CalcBaseAndBitshift>
 80038e0:	4603      	mov	r3, r0
 80038e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e8:	223f      	movs	r2, #63	@ 0x3f
 80038ea:	409a      	lsls	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3718      	adds	r7, #24
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	e010803f 	.word	0xe010803f

0800390c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
 8003918:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003922:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800392a:	2b01      	cmp	r3, #1
 800392c:	d101      	bne.n	8003932 <HAL_DMA_Start_IT+0x26>
 800392e:	2302      	movs	r3, #2
 8003930:	e048      	b.n	80039c4 <HAL_DMA_Start_IT+0xb8>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b01      	cmp	r3, #1
 8003944:	d137      	bne.n	80039b6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2202      	movs	r2, #2
 800394a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	68b9      	ldr	r1, [r7, #8]
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 fa5e 	bl	8003e1c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003964:	223f      	movs	r2, #63	@ 0x3f
 8003966:	409a      	lsls	r2, r3
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0216 	orr.w	r2, r2, #22
 800397a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	695a      	ldr	r2, [r3, #20]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800398a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003990:	2b00      	cmp	r3, #0
 8003992:	d007      	beq.n	80039a4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0208 	orr.w	r2, r2, #8
 80039a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 0201 	orr.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	e005      	b.n	80039c2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80039be:	2302      	movs	r3, #2
 80039c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80039c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80039da:	f7ff fdfb 	bl	80035d4 <HAL_GetTick>
 80039de:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d008      	beq.n	80039fe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2280      	movs	r2, #128	@ 0x80
 80039f0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e052      	b.n	8003aa4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0216 	bic.w	r2, r2, #22
 8003a0c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	695a      	ldr	r2, [r3, #20]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a1c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d103      	bne.n	8003a2e <HAL_DMA_Abort+0x62>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d007      	beq.n	8003a3e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 0208 	bic.w	r2, r2, #8
 8003a3c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0201 	bic.w	r2, r2, #1
 8003a4c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a4e:	e013      	b.n	8003a78 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a50:	f7ff fdc0 	bl	80035d4 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b05      	cmp	r3, #5
 8003a5c:	d90c      	bls.n	8003a78 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2220      	movs	r2, #32
 8003a62:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2203      	movs	r2, #3
 8003a68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e015      	b.n	8003aa4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1e4      	bne.n	8003a50 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a8a:	223f      	movs	r2, #63	@ 0x3f
 8003a8c:	409a      	lsls	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d004      	beq.n	8003aca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2280      	movs	r2, #128	@ 0x80
 8003ac4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e00c      	b.n	8003ae4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2205      	movs	r2, #5
 8003ace:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0201 	bic.w	r2, r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003af8:	2300      	movs	r3, #0
 8003afa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003afc:	4b8e      	ldr	r3, [pc, #568]	@ (8003d38 <HAL_DMA_IRQHandler+0x248>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a8e      	ldr	r2, [pc, #568]	@ (8003d3c <HAL_DMA_IRQHandler+0x24c>)
 8003b02:	fba2 2303 	umull	r2, r3, r2, r3
 8003b06:	0a9b      	lsrs	r3, r3, #10
 8003b08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b1a:	2208      	movs	r2, #8
 8003b1c:	409a      	lsls	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	4013      	ands	r3, r2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d01a      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d013      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0204 	bic.w	r2, r2, #4
 8003b42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b48:	2208      	movs	r2, #8
 8003b4a:	409a      	lsls	r2, r3
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b54:	f043 0201 	orr.w	r2, r3, #1
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b60:	2201      	movs	r2, #1
 8003b62:	409a      	lsls	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	4013      	ands	r3, r2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d012      	beq.n	8003b92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00b      	beq.n	8003b92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b7e:	2201      	movs	r2, #1
 8003b80:	409a      	lsls	r2, r3
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b8a:	f043 0202 	orr.w	r2, r3, #2
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b96:	2204      	movs	r2, #4
 8003b98:	409a      	lsls	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d012      	beq.n	8003bc8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00b      	beq.n	8003bc8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bb4:	2204      	movs	r2, #4
 8003bb6:	409a      	lsls	r2, r3
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc0:	f043 0204 	orr.w	r2, r3, #4
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bcc:	2210      	movs	r2, #16
 8003bce:	409a      	lsls	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d043      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d03c      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bea:	2210      	movs	r2, #16
 8003bec:	409a      	lsls	r2, r3
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d018      	beq.n	8003c32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d108      	bne.n	8003c20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d024      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	4798      	blx	r3
 8003c1e:	e01f      	b.n	8003c60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d01b      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	4798      	blx	r3
 8003c30:	e016      	b.n	8003c60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d107      	bne.n	8003c50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 0208 	bic.w	r2, r2, #8
 8003c4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c64:	2220      	movs	r2, #32
 8003c66:	409a      	lsls	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 808f 	beq.w	8003d90 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0310 	and.w	r3, r3, #16
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 8087 	beq.w	8003d90 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c86:	2220      	movs	r2, #32
 8003c88:	409a      	lsls	r2, r3
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b05      	cmp	r3, #5
 8003c98:	d136      	bne.n	8003d08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 0216 	bic.w	r2, r2, #22
 8003ca8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695a      	ldr	r2, [r3, #20]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003cb8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d103      	bne.n	8003cca <HAL_DMA_IRQHandler+0x1da>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d007      	beq.n	8003cda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0208 	bic.w	r2, r2, #8
 8003cd8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cde:	223f      	movs	r2, #63	@ 0x3f
 8003ce0:	409a      	lsls	r2, r3
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d07e      	beq.n	8003dfc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	4798      	blx	r3
        }
        return;
 8003d06:	e079      	b.n	8003dfc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d01d      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10d      	bne.n	8003d40 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d031      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	4798      	blx	r3
 8003d34:	e02c      	b.n	8003d90 <HAL_DMA_IRQHandler+0x2a0>
 8003d36:	bf00      	nop
 8003d38:	20000020 	.word	0x20000020
 8003d3c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d023      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	4798      	blx	r3
 8003d50:	e01e      	b.n	8003d90 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10f      	bne.n	8003d80 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0210 	bic.w	r2, r2, #16
 8003d6e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d032      	beq.n	8003dfe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d022      	beq.n	8003dea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2205      	movs	r2, #5
 8003da8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0201 	bic.w	r2, r2, #1
 8003dba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	60bb      	str	r3, [r7, #8]
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d307      	bcc.n	8003dd8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1f2      	bne.n	8003dbc <HAL_DMA_IRQHandler+0x2cc>
 8003dd6:	e000      	b.n	8003dda <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003dd8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d005      	beq.n	8003dfe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	4798      	blx	r3
 8003dfa:	e000      	b.n	8003dfe <HAL_DMA_IRQHandler+0x30e>
        return;
 8003dfc:	bf00      	nop
    }
  }
}
 8003dfe:	3718      	adds	r7, #24
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
 8003e28:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003e38:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	2b40      	cmp	r3, #64	@ 0x40
 8003e48:	d108      	bne.n	8003e5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e5a:	e007      	b.n	8003e6c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	60da      	str	r2, [r3, #12]
}
 8003e6c:	bf00      	nop
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	3b10      	subs	r3, #16
 8003e88:	4a13      	ldr	r2, [pc, #76]	@ (8003ed8 <DMA_CalcBaseAndBitshift+0x60>)
 8003e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8e:	091b      	lsrs	r3, r3, #4
 8003e90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e92:	4a12      	ldr	r2, [pc, #72]	@ (8003edc <DMA_CalcBaseAndBitshift+0x64>)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4413      	add	r3, r2
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2b03      	cmp	r3, #3
 8003ea4:	d908      	bls.n	8003eb8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	4b0c      	ldr	r3, [pc, #48]	@ (8003ee0 <DMA_CalcBaseAndBitshift+0x68>)
 8003eae:	4013      	ands	r3, r2
 8003eb0:	1d1a      	adds	r2, r3, #4
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	659a      	str	r2, [r3, #88]	@ 0x58
 8003eb6:	e006      	b.n	8003ec6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	4b08      	ldr	r3, [pc, #32]	@ (8003ee0 <DMA_CalcBaseAndBitshift+0x68>)
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3714      	adds	r7, #20
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	aaaaaaab 	.word	0xaaaaaaab
 8003edc:	08017b64 	.word	0x08017b64
 8003ee0:	fffffc00 	.word	0xfffffc00

08003ee4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003eec:	2300      	movs	r3, #0
 8003eee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d11f      	bne.n	8003f3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	2b03      	cmp	r3, #3
 8003f02:	d856      	bhi.n	8003fb2 <DMA_CheckFifoParam+0xce>
 8003f04:	a201      	add	r2, pc, #4	@ (adr r2, 8003f0c <DMA_CheckFifoParam+0x28>)
 8003f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0a:	bf00      	nop
 8003f0c:	08003f1d 	.word	0x08003f1d
 8003f10:	08003f2f 	.word	0x08003f2f
 8003f14:	08003f1d 	.word	0x08003f1d
 8003f18:	08003fb3 	.word	0x08003fb3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d046      	beq.n	8003fb6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f2c:	e043      	b.n	8003fb6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f32:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003f36:	d140      	bne.n	8003fba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f3c:	e03d      	b.n	8003fba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f46:	d121      	bne.n	8003f8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	2b03      	cmp	r3, #3
 8003f4c:	d837      	bhi.n	8003fbe <DMA_CheckFifoParam+0xda>
 8003f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8003f54 <DMA_CheckFifoParam+0x70>)
 8003f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f54:	08003f65 	.word	0x08003f65
 8003f58:	08003f6b 	.word	0x08003f6b
 8003f5c:	08003f65 	.word	0x08003f65
 8003f60:	08003f7d 	.word	0x08003f7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	73fb      	strb	r3, [r7, #15]
      break;
 8003f68:	e030      	b.n	8003fcc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d025      	beq.n	8003fc2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f7a:	e022      	b.n	8003fc2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f80:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003f84:	d11f      	bne.n	8003fc6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f8a:	e01c      	b.n	8003fc6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d903      	bls.n	8003f9a <DMA_CheckFifoParam+0xb6>
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	2b03      	cmp	r3, #3
 8003f96:	d003      	beq.n	8003fa0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f98:	e018      	b.n	8003fcc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	73fb      	strb	r3, [r7, #15]
      break;
 8003f9e:	e015      	b.n	8003fcc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00e      	beq.n	8003fca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	73fb      	strb	r3, [r7, #15]
      break;
 8003fb0:	e00b      	b.n	8003fca <DMA_CheckFifoParam+0xe6>
      break;
 8003fb2:	bf00      	nop
 8003fb4:	e00a      	b.n	8003fcc <DMA_CheckFifoParam+0xe8>
      break;
 8003fb6:	bf00      	nop
 8003fb8:	e008      	b.n	8003fcc <DMA_CheckFifoParam+0xe8>
      break;
 8003fba:	bf00      	nop
 8003fbc:	e006      	b.n	8003fcc <DMA_CheckFifoParam+0xe8>
      break;
 8003fbe:	bf00      	nop
 8003fc0:	e004      	b.n	8003fcc <DMA_CheckFifoParam+0xe8>
      break;
 8003fc2:	bf00      	nop
 8003fc4:	e002      	b.n	8003fcc <DMA_CheckFifoParam+0xe8>
      break;   
 8003fc6:	bf00      	nop
 8003fc8:	e000      	b.n	8003fcc <DMA_CheckFifoParam+0xe8>
      break;
 8003fca:	bf00      	nop
    }
  } 
  
  return status; 
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop

08003fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b089      	sub	sp, #36	@ 0x24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003fea:	2300      	movs	r3, #0
 8003fec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61fb      	str	r3, [r7, #28]
 8003ffa:	e175      	b.n	80042e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	4013      	ands	r3, r2
 800400e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	429a      	cmp	r2, r3
 8004016:	f040 8164 	bne.w	80042e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	2b01      	cmp	r3, #1
 8004024:	d005      	beq.n	8004032 <HAL_GPIO_Init+0x56>
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f003 0303 	and.w	r3, r3, #3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d130      	bne.n	8004094 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	2203      	movs	r2, #3
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	43db      	mvns	r3, r3
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	4013      	ands	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	4313      	orrs	r3, r2
 800405a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004068:	2201      	movs	r2, #1
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	fa02 f303 	lsl.w	r3, r2, r3
 8004070:	43db      	mvns	r3, r3
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	4013      	ands	r3, r2
 8004076:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	091b      	lsrs	r3, r3, #4
 800407e:	f003 0201 	and.w	r2, r3, #1
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	4313      	orrs	r3, r2
 800408c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f003 0303 	and.w	r3, r3, #3
 800409c:	2b03      	cmp	r3, #3
 800409e:	d017      	beq.n	80040d0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	2203      	movs	r2, #3
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	43db      	mvns	r3, r3
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	4013      	ands	r3, r2
 80040b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	fa02 f303 	lsl.w	r3, r2, r3
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f003 0303 	and.w	r3, r3, #3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d123      	bne.n	8004124 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	08da      	lsrs	r2, r3, #3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3208      	adds	r2, #8
 80040e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	220f      	movs	r2, #15
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	43db      	mvns	r3, r3
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	4013      	ands	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	691a      	ldr	r2, [r3, #16]
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	4313      	orrs	r3, r2
 8004114:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	08da      	lsrs	r2, r3, #3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	3208      	adds	r2, #8
 800411e:	69b9      	ldr	r1, [r7, #24]
 8004120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	2203      	movs	r2, #3
 8004130:	fa02 f303 	lsl.w	r3, r2, r3
 8004134:	43db      	mvns	r3, r3
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	4013      	ands	r3, r2
 800413a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f003 0203 	and.w	r2, r3, #3
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	4313      	orrs	r3, r2
 8004150:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 80be 	beq.w	80042e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004166:	4b66      	ldr	r3, [pc, #408]	@ (8004300 <HAL_GPIO_Init+0x324>)
 8004168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800416a:	4a65      	ldr	r2, [pc, #404]	@ (8004300 <HAL_GPIO_Init+0x324>)
 800416c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004170:	6453      	str	r3, [r2, #68]	@ 0x44
 8004172:	4b63      	ldr	r3, [pc, #396]	@ (8004300 <HAL_GPIO_Init+0x324>)
 8004174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004176:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800417e:	4a61      	ldr	r2, [pc, #388]	@ (8004304 <HAL_GPIO_Init+0x328>)
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	089b      	lsrs	r3, r3, #2
 8004184:	3302      	adds	r3, #2
 8004186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800418a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	f003 0303 	and.w	r3, r3, #3
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	220f      	movs	r2, #15
 8004196:	fa02 f303 	lsl.w	r3, r2, r3
 800419a:	43db      	mvns	r3, r3
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	4013      	ands	r3, r2
 80041a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a58      	ldr	r2, [pc, #352]	@ (8004308 <HAL_GPIO_Init+0x32c>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d037      	beq.n	800421a <HAL_GPIO_Init+0x23e>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a57      	ldr	r2, [pc, #348]	@ (800430c <HAL_GPIO_Init+0x330>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d031      	beq.n	8004216 <HAL_GPIO_Init+0x23a>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a56      	ldr	r2, [pc, #344]	@ (8004310 <HAL_GPIO_Init+0x334>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d02b      	beq.n	8004212 <HAL_GPIO_Init+0x236>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a55      	ldr	r2, [pc, #340]	@ (8004314 <HAL_GPIO_Init+0x338>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d025      	beq.n	800420e <HAL_GPIO_Init+0x232>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a54      	ldr	r2, [pc, #336]	@ (8004318 <HAL_GPIO_Init+0x33c>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d01f      	beq.n	800420a <HAL_GPIO_Init+0x22e>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a53      	ldr	r2, [pc, #332]	@ (800431c <HAL_GPIO_Init+0x340>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d019      	beq.n	8004206 <HAL_GPIO_Init+0x22a>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a52      	ldr	r2, [pc, #328]	@ (8004320 <HAL_GPIO_Init+0x344>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d013      	beq.n	8004202 <HAL_GPIO_Init+0x226>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a51      	ldr	r2, [pc, #324]	@ (8004324 <HAL_GPIO_Init+0x348>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d00d      	beq.n	80041fe <HAL_GPIO_Init+0x222>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a50      	ldr	r2, [pc, #320]	@ (8004328 <HAL_GPIO_Init+0x34c>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d007      	beq.n	80041fa <HAL_GPIO_Init+0x21e>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a4f      	ldr	r2, [pc, #316]	@ (800432c <HAL_GPIO_Init+0x350>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d101      	bne.n	80041f6 <HAL_GPIO_Init+0x21a>
 80041f2:	2309      	movs	r3, #9
 80041f4:	e012      	b.n	800421c <HAL_GPIO_Init+0x240>
 80041f6:	230a      	movs	r3, #10
 80041f8:	e010      	b.n	800421c <HAL_GPIO_Init+0x240>
 80041fa:	2308      	movs	r3, #8
 80041fc:	e00e      	b.n	800421c <HAL_GPIO_Init+0x240>
 80041fe:	2307      	movs	r3, #7
 8004200:	e00c      	b.n	800421c <HAL_GPIO_Init+0x240>
 8004202:	2306      	movs	r3, #6
 8004204:	e00a      	b.n	800421c <HAL_GPIO_Init+0x240>
 8004206:	2305      	movs	r3, #5
 8004208:	e008      	b.n	800421c <HAL_GPIO_Init+0x240>
 800420a:	2304      	movs	r3, #4
 800420c:	e006      	b.n	800421c <HAL_GPIO_Init+0x240>
 800420e:	2303      	movs	r3, #3
 8004210:	e004      	b.n	800421c <HAL_GPIO_Init+0x240>
 8004212:	2302      	movs	r3, #2
 8004214:	e002      	b.n	800421c <HAL_GPIO_Init+0x240>
 8004216:	2301      	movs	r3, #1
 8004218:	e000      	b.n	800421c <HAL_GPIO_Init+0x240>
 800421a:	2300      	movs	r3, #0
 800421c:	69fa      	ldr	r2, [r7, #28]
 800421e:	f002 0203 	and.w	r2, r2, #3
 8004222:	0092      	lsls	r2, r2, #2
 8004224:	4093      	lsls	r3, r2
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	4313      	orrs	r3, r2
 800422a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800422c:	4935      	ldr	r1, [pc, #212]	@ (8004304 <HAL_GPIO_Init+0x328>)
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	089b      	lsrs	r3, r3, #2
 8004232:	3302      	adds	r3, #2
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800423a:	4b3d      	ldr	r3, [pc, #244]	@ (8004330 <HAL_GPIO_Init+0x354>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	43db      	mvns	r3, r3
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	4013      	ands	r3, r2
 8004248:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	4313      	orrs	r3, r2
 800425c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800425e:	4a34      	ldr	r2, [pc, #208]	@ (8004330 <HAL_GPIO_Init+0x354>)
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004264:	4b32      	ldr	r3, [pc, #200]	@ (8004330 <HAL_GPIO_Init+0x354>)
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	43db      	mvns	r3, r3
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	4013      	ands	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	4313      	orrs	r3, r2
 8004286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004288:	4a29      	ldr	r2, [pc, #164]	@ (8004330 <HAL_GPIO_Init+0x354>)
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800428e:	4b28      	ldr	r3, [pc, #160]	@ (8004330 <HAL_GPIO_Init+0x354>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	43db      	mvns	r3, r3
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	4013      	ands	r3, r2
 800429c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042b2:	4a1f      	ldr	r2, [pc, #124]	@ (8004330 <HAL_GPIO_Init+0x354>)
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042b8:	4b1d      	ldr	r3, [pc, #116]	@ (8004330 <HAL_GPIO_Init+0x354>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	43db      	mvns	r3, r3
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	4013      	ands	r3, r2
 80042c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	4313      	orrs	r3, r2
 80042da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042dc:	4a14      	ldr	r2, [pc, #80]	@ (8004330 <HAL_GPIO_Init+0x354>)
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	3301      	adds	r3, #1
 80042e6:	61fb      	str	r3, [r7, #28]
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	2b0f      	cmp	r3, #15
 80042ec:	f67f ae86 	bls.w	8003ffc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80042f0:	bf00      	nop
 80042f2:	bf00      	nop
 80042f4:	3724      	adds	r7, #36	@ 0x24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	40023800 	.word	0x40023800
 8004304:	40013800 	.word	0x40013800
 8004308:	40020000 	.word	0x40020000
 800430c:	40020400 	.word	0x40020400
 8004310:	40020800 	.word	0x40020800
 8004314:	40020c00 	.word	0x40020c00
 8004318:	40021000 	.word	0x40021000
 800431c:	40021400 	.word	0x40021400
 8004320:	40021800 	.word	0x40021800
 8004324:	40021c00 	.word	0x40021c00
 8004328:	40022000 	.word	0x40022000
 800432c:	40022400 	.word	0x40022400
 8004330:	40013c00 	.word	0x40013c00

08004334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	460b      	mov	r3, r1
 800433e:	807b      	strh	r3, [r7, #2]
 8004340:	4613      	mov	r3, r2
 8004342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004344:	787b      	ldrb	r3, [r7, #1]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800434a:	887a      	ldrh	r2, [r7, #2]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004350:	e003      	b.n	800435a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004352:	887b      	ldrh	r3, [r7, #2]
 8004354:	041a      	lsls	r2, r3, #16
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	619a      	str	r2, [r3, #24]
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
	...

08004368 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e08b      	b.n	8004492 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d106      	bne.n	8004394 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7fe fc4a 	bl	8002c28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2224      	movs	r2, #36	@ 0x24
 8004398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 0201 	bic.w	r2, r2, #1
 80043aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80043b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689a      	ldr	r2, [r3, #8]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80043c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d107      	bne.n	80043e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80043de:	609a      	str	r2, [r3, #8]
 80043e0:	e006      	b.n	80043f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689a      	ldr	r2, [r3, #8]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80043ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d108      	bne.n	800440a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004406:	605a      	str	r2, [r3, #4]
 8004408:	e007      	b.n	800441a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004418:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6859      	ldr	r1, [r3, #4]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	4b1d      	ldr	r3, [pc, #116]	@ (800449c <HAL_I2C_Init+0x134>)
 8004426:	430b      	orrs	r3, r1
 8004428:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004438:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691a      	ldr	r2, [r3, #16]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	69d9      	ldr	r1, [r3, #28]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a1a      	ldr	r2, [r3, #32]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f042 0201 	orr.w	r2, r2, #1
 8004472:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2220      	movs	r2, #32
 800447e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	02008000 	.word	0x02008000

080044a0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b088      	sub	sp, #32
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	607a      	str	r2, [r7, #4]
 80044aa:	461a      	mov	r2, r3
 80044ac:	460b      	mov	r3, r1
 80044ae:	817b      	strh	r3, [r7, #10]
 80044b0:	4613      	mov	r3, r2
 80044b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b20      	cmp	r3, #32
 80044be:	f040 80fd 	bne.w	80046bc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d101      	bne.n	80044d0 <HAL_I2C_Master_Transmit+0x30>
 80044cc:	2302      	movs	r3, #2
 80044ce:	e0f6      	b.n	80046be <HAL_I2C_Master_Transmit+0x21e>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80044d8:	f7ff f87c 	bl	80035d4 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	2319      	movs	r3, #25
 80044e4:	2201      	movs	r2, #1
 80044e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 fa0a 	bl	8004904 <I2C_WaitOnFlagUntilTimeout>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e0e1      	b.n	80046be <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2221      	movs	r2, #33	@ 0x21
 80044fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2210      	movs	r2, #16
 8004506:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	893a      	ldrh	r2, [r7, #8]
 800451a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004526:	b29b      	uxth	r3, r3
 8004528:	2bff      	cmp	r3, #255	@ 0xff
 800452a:	d906      	bls.n	800453a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	22ff      	movs	r2, #255	@ 0xff
 8004530:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004532:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004536:	617b      	str	r3, [r7, #20]
 8004538:	e007      	b.n	800454a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800453e:	b29a      	uxth	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004544:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004548:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800454e:	2b00      	cmp	r3, #0
 8004550:	d024      	beq.n	800459c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004556:	781a      	ldrb	r2, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004562:	1c5a      	adds	r2, r3, #1
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800456c:	b29b      	uxth	r3, r3
 800456e:	3b01      	subs	r3, #1
 8004570:	b29a      	uxth	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800457a:	3b01      	subs	r3, #1
 800457c:	b29a      	uxth	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004586:	b2db      	uxtb	r3, r3
 8004588:	3301      	adds	r3, #1
 800458a:	b2da      	uxtb	r2, r3
 800458c:	8979      	ldrh	r1, [r7, #10]
 800458e:	4b4e      	ldr	r3, [pc, #312]	@ (80046c8 <HAL_I2C_Master_Transmit+0x228>)
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f000 fc05 	bl	8004da4 <I2C_TransferConfig>
 800459a:	e066      	b.n	800466a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	8979      	ldrh	r1, [r7, #10]
 80045a4:	4b48      	ldr	r3, [pc, #288]	@ (80046c8 <HAL_I2C_Master_Transmit+0x228>)
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 fbfa 	bl	8004da4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80045b0:	e05b      	b.n	800466a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	6a39      	ldr	r1, [r7, #32]
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 f9fd 	bl	80049b6 <I2C_WaitOnTXISFlagUntilTimeout>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e07b      	b.n	80046be <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ca:	781a      	ldrb	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d6:	1c5a      	adds	r2, r3, #1
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	3b01      	subs	r3, #1
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ee:	3b01      	subs	r3, #1
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d034      	beq.n	800466a <HAL_I2C_Master_Transmit+0x1ca>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004604:	2b00      	cmp	r3, #0
 8004606:	d130      	bne.n	800466a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	2200      	movs	r2, #0
 8004610:	2180      	movs	r1, #128	@ 0x80
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 f976 	bl	8004904 <I2C_WaitOnFlagUntilTimeout>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e04d      	b.n	80046be <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004626:	b29b      	uxth	r3, r3
 8004628:	2bff      	cmp	r3, #255	@ 0xff
 800462a:	d90e      	bls.n	800464a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	22ff      	movs	r2, #255	@ 0xff
 8004630:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004636:	b2da      	uxtb	r2, r3
 8004638:	8979      	ldrh	r1, [r7, #10]
 800463a:	2300      	movs	r3, #0
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f000 fbae 	bl	8004da4 <I2C_TransferConfig>
 8004648:	e00f      	b.n	800466a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800464e:	b29a      	uxth	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004658:	b2da      	uxtb	r2, r3
 800465a:	8979      	ldrh	r1, [r7, #10]
 800465c:	2300      	movs	r3, #0
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 fb9d 	bl	8004da4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800466e:	b29b      	uxth	r3, r3
 8004670:	2b00      	cmp	r3, #0
 8004672:	d19e      	bne.n	80045b2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	6a39      	ldr	r1, [r7, #32]
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 f9e3 	bl	8004a44 <I2C_WaitOnSTOPFlagUntilTimeout>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e01a      	b.n	80046be <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2220      	movs	r2, #32
 800468e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6859      	ldr	r1, [r3, #4]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	4b0c      	ldr	r3, [pc, #48]	@ (80046cc <HAL_I2C_Master_Transmit+0x22c>)
 800469c:	400b      	ands	r3, r1
 800469e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2220      	movs	r2, #32
 80046a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80046b8:	2300      	movs	r3, #0
 80046ba:	e000      	b.n	80046be <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80046bc:	2302      	movs	r3, #2
  }
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	80002000 	.word	0x80002000
 80046cc:	fe00e800 	.word	0xfe00e800

080046d0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b088      	sub	sp, #32
 80046d4:	af02      	add	r7, sp, #8
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	607a      	str	r2, [r7, #4]
 80046da:	461a      	mov	r2, r3
 80046dc:	460b      	mov	r3, r1
 80046de:	817b      	strh	r3, [r7, #10]
 80046e0:	4613      	mov	r3, r2
 80046e2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b20      	cmp	r3, #32
 80046ee:	f040 80db 	bne.w	80048a8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d101      	bne.n	8004700 <HAL_I2C_Master_Receive+0x30>
 80046fc:	2302      	movs	r3, #2
 80046fe:	e0d4      	b.n	80048aa <HAL_I2C_Master_Receive+0x1da>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004708:	f7fe ff64 	bl	80035d4 <HAL_GetTick>
 800470c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	2319      	movs	r3, #25
 8004714:	2201      	movs	r2, #1
 8004716:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 f8f2 	bl	8004904 <I2C_WaitOnFlagUntilTimeout>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e0bf      	b.n	80048aa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2222      	movs	r2, #34	@ 0x22
 800472e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2210      	movs	r2, #16
 8004736:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	893a      	ldrh	r2, [r7, #8]
 800474a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004756:	b29b      	uxth	r3, r3
 8004758:	2bff      	cmp	r3, #255	@ 0xff
 800475a:	d90e      	bls.n	800477a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2201      	movs	r2, #1
 8004760:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004766:	b2da      	uxtb	r2, r3
 8004768:	8979      	ldrh	r1, [r7, #10]
 800476a:	4b52      	ldr	r3, [pc, #328]	@ (80048b4 <HAL_I2C_Master_Receive+0x1e4>)
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 fb16 	bl	8004da4 <I2C_TransferConfig>
 8004778:	e06d      	b.n	8004856 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800477e:	b29a      	uxth	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004788:	b2da      	uxtb	r2, r3
 800478a:	8979      	ldrh	r1, [r7, #10]
 800478c:	4b49      	ldr	r3, [pc, #292]	@ (80048b4 <HAL_I2C_Master_Receive+0x1e4>)
 800478e:	9300      	str	r3, [sp, #0]
 8004790:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 fb05 	bl	8004da4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800479a:	e05c      	b.n	8004856 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	6a39      	ldr	r1, [r7, #32]
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 f993 	bl	8004acc <I2C_WaitOnRXNEFlagUntilTimeout>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e07c      	b.n	80048aa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c2:	1c5a      	adds	r2, r3, #1
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047cc:	3b01      	subs	r3, #1
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d8:	b29b      	uxth	r3, r3
 80047da:	3b01      	subs	r3, #1
 80047dc:	b29a      	uxth	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d034      	beq.n	8004856 <HAL_I2C_Master_Receive+0x186>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d130      	bne.n	8004856 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	2200      	movs	r2, #0
 80047fc:	2180      	movs	r1, #128	@ 0x80
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 f880 	bl	8004904 <I2C_WaitOnFlagUntilTimeout>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e04d      	b.n	80048aa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004812:	b29b      	uxth	r3, r3
 8004814:	2bff      	cmp	r3, #255	@ 0xff
 8004816:	d90e      	bls.n	8004836 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	22ff      	movs	r2, #255	@ 0xff
 800481c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004822:	b2da      	uxtb	r2, r3
 8004824:	8979      	ldrh	r1, [r7, #10]
 8004826:	2300      	movs	r3, #0
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 fab8 	bl	8004da4 <I2C_TransferConfig>
 8004834:	e00f      	b.n	8004856 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800483a:	b29a      	uxth	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004844:	b2da      	uxtb	r2, r3
 8004846:	8979      	ldrh	r1, [r7, #10]
 8004848:	2300      	movs	r3, #0
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f000 faa7 	bl	8004da4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800485a:	b29b      	uxth	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	d19d      	bne.n	800479c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	6a39      	ldr	r1, [r7, #32]
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 f8ed 	bl	8004a44 <I2C_WaitOnSTOPFlagUntilTimeout>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e01a      	b.n	80048aa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2220      	movs	r2, #32
 800487a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6859      	ldr	r1, [r3, #4]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	4b0c      	ldr	r3, [pc, #48]	@ (80048b8 <HAL_I2C_Master_Receive+0x1e8>)
 8004888:	400b      	ands	r3, r1
 800488a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2220      	movs	r2, #32
 8004890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80048a4:	2300      	movs	r3, #0
 80048a6:	e000      	b.n	80048aa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80048a8:	2302      	movs	r3, #2
  }
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3718      	adds	r7, #24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	80002400 	.word	0x80002400
 80048b8:	fe00e800 	.word	0xfe00e800

080048bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d103      	bne.n	80048da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2200      	movs	r2, #0
 80048d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d007      	beq.n	80048f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699a      	ldr	r2, [r3, #24]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0201 	orr.w	r2, r2, #1
 80048f6:	619a      	str	r2, [r3, #24]
  }
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	603b      	str	r3, [r7, #0]
 8004910:	4613      	mov	r3, r2
 8004912:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004914:	e03b      	b.n	800498e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	6839      	ldr	r1, [r7, #0]
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f000 f962 	bl	8004be4 <I2C_IsErrorOccurred>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e041      	b.n	80049ae <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004930:	d02d      	beq.n	800498e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004932:	f7fe fe4f 	bl	80035d4 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	429a      	cmp	r2, r3
 8004940:	d302      	bcc.n	8004948 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d122      	bne.n	800498e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	699a      	ldr	r2, [r3, #24]
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	4013      	ands	r3, r2
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	429a      	cmp	r2, r3
 8004956:	bf0c      	ite	eq
 8004958:	2301      	moveq	r3, #1
 800495a:	2300      	movne	r3, #0
 800495c:	b2db      	uxtb	r3, r3
 800495e:	461a      	mov	r2, r3
 8004960:	79fb      	ldrb	r3, [r7, #7]
 8004962:	429a      	cmp	r2, r3
 8004964:	d113      	bne.n	800498e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800496a:	f043 0220 	orr.w	r2, r3, #32
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2220      	movs	r2, #32
 8004976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e00f      	b.n	80049ae <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	699a      	ldr	r2, [r3, #24]
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	4013      	ands	r3, r2
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	429a      	cmp	r2, r3
 800499c:	bf0c      	ite	eq
 800499e:	2301      	moveq	r3, #1
 80049a0:	2300      	movne	r3, #0
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	461a      	mov	r2, r3
 80049a6:	79fb      	ldrb	r3, [r7, #7]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d0b4      	beq.n	8004916 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b084      	sub	sp, #16
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	60f8      	str	r0, [r7, #12]
 80049be:	60b9      	str	r1, [r7, #8]
 80049c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049c2:	e033      	b.n	8004a2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	68b9      	ldr	r1, [r7, #8]
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 f90b 	bl	8004be4 <I2C_IsErrorOccurred>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e031      	b.n	8004a3c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049de:	d025      	beq.n	8004a2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e0:	f7fe fdf8 	bl	80035d4 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d302      	bcc.n	80049f6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d11a      	bne.n	8004a2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d013      	beq.n	8004a2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a08:	f043 0220 	orr.w	r2, r3, #32
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e007      	b.n	8004a3c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d1c4      	bne.n	80049c4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a50:	e02f      	b.n	8004ab2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	68b9      	ldr	r1, [r7, #8]
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f000 f8c4 	bl	8004be4 <I2C_IsErrorOccurred>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e02d      	b.n	8004ac2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a66:	f7fe fdb5 	bl	80035d4 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d302      	bcc.n	8004a7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d11a      	bne.n	8004ab2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	f003 0320 	and.w	r3, r3, #32
 8004a86:	2b20      	cmp	r3, #32
 8004a88:	d013      	beq.n	8004ab2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a8e:	f043 0220 	orr.w	r2, r3, #32
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e007      	b.n	8004ac2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	f003 0320 	and.w	r3, r3, #32
 8004abc:	2b20      	cmp	r3, #32
 8004abe:	d1c8      	bne.n	8004a52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
	...

08004acc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004adc:	e071      	b.n	8004bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	68b9      	ldr	r1, [r7, #8]
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 f87e 	bl	8004be4 <I2C_IsErrorOccurred>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	f003 0320 	and.w	r3, r3, #32
 8004afc:	2b20      	cmp	r3, #32
 8004afe:	d13b      	bne.n	8004b78 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8004b00:	7dfb      	ldrb	r3, [r7, #23]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d138      	bne.n	8004b78 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b04      	cmp	r3, #4
 8004b12:	d105      	bne.n	8004b20 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	f003 0310 	and.w	r3, r3, #16
 8004b2a:	2b10      	cmp	r3, #16
 8004b2c:	d121      	bne.n	8004b72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2210      	movs	r2, #16
 8004b34:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2204      	movs	r2, #4
 8004b3a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2220      	movs	r2, #32
 8004b42:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6859      	ldr	r1, [r3, #4]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	4b24      	ldr	r3, [pc, #144]	@ (8004be0 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8004b50:	400b      	ands	r3, r1
 8004b52:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2220      	movs	r2, #32
 8004b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	75fb      	strb	r3, [r7, #23]
 8004b70:	e002      	b.n	8004b78 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004b78:	f7fe fd2c 	bl	80035d4 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d302      	bcc.n	8004b8e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d119      	bne.n	8004bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8004b8e:	7dfb      	ldrb	r3, [r7, #23]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d116      	bne.n	8004bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	f003 0304 	and.w	r3, r3, #4
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	d00f      	beq.n	8004bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ba6:	f043 0220 	orr.w	r2, r3, #32
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b04      	cmp	r3, #4
 8004bce:	d002      	beq.n	8004bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8004bd0:	7dfb      	ldrb	r3, [r7, #23]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d083      	beq.n	8004ade <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8004bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3718      	adds	r7, #24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	fe00e800 	.word	0xfe00e800

08004be4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b08a      	sub	sp, #40	@ 0x28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	f003 0310 	and.w	r3, r3, #16
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d068      	beq.n	8004ce2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2210      	movs	r2, #16
 8004c16:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c18:	e049      	b.n	8004cae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c20:	d045      	beq.n	8004cae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004c22:	f7fe fcd7 	bl	80035d4 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d302      	bcc.n	8004c38 <I2C_IsErrorOccurred+0x54>
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d13a      	bne.n	8004cae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c4a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c5a:	d121      	bne.n	8004ca0 <I2C_IsErrorOccurred+0xbc>
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c62:	d01d      	beq.n	8004ca0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004c64:	7cfb      	ldrb	r3, [r7, #19]
 8004c66:	2b20      	cmp	r3, #32
 8004c68:	d01a      	beq.n	8004ca0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c78:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004c7a:	f7fe fcab 	bl	80035d4 <HAL_GetTick>
 8004c7e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c80:	e00e      	b.n	8004ca0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004c82:	f7fe fca7 	bl	80035d4 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b19      	cmp	r3, #25
 8004c8e:	d907      	bls.n	8004ca0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004c90:	6a3b      	ldr	r3, [r7, #32]
 8004c92:	f043 0320 	orr.w	r3, r3, #32
 8004c96:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004c9e:	e006      	b.n	8004cae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	f003 0320 	and.w	r3, r3, #32
 8004caa:	2b20      	cmp	r3, #32
 8004cac:	d1e9      	bne.n	8004c82 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	f003 0320 	and.w	r3, r3, #32
 8004cb8:	2b20      	cmp	r3, #32
 8004cba:	d003      	beq.n	8004cc4 <I2C_IsErrorOccurred+0xe0>
 8004cbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0aa      	beq.n	8004c1a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d103      	bne.n	8004cd4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	f043 0304 	orr.w	r3, r3, #4
 8004cda:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00b      	beq.n	8004d0c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004cf4:	6a3b      	ldr	r3, [r7, #32]
 8004cf6:	f043 0301 	orr.w	r3, r3, #1
 8004cfa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00b      	beq.n	8004d2e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	f043 0308 	orr.w	r3, r3, #8
 8004d1c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004d26:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00b      	beq.n	8004d50 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	f043 0302 	orr.w	r3, r3, #2
 8004d3e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004d50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d01c      	beq.n	8004d92 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f7ff fdaf 	bl	80048bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	6859      	ldr	r1, [r3, #4]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	4b0d      	ldr	r3, [pc, #52]	@ (8004da0 <I2C_IsErrorOccurred+0x1bc>)
 8004d6a:	400b      	ands	r3, r1
 8004d6c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	431a      	orrs	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004d92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3728      	adds	r7, #40	@ 0x28
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	fe00e800 	.word	0xfe00e800

08004da4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b087      	sub	sp, #28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	607b      	str	r3, [r7, #4]
 8004dae:	460b      	mov	r3, r1
 8004db0:	817b      	strh	r3, [r7, #10]
 8004db2:	4613      	mov	r3, r2
 8004db4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004db6:	897b      	ldrh	r3, [r7, #10]
 8004db8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004dbc:	7a7b      	ldrb	r3, [r7, #9]
 8004dbe:	041b      	lsls	r3, r3, #16
 8004dc0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004dc4:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004dd2:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	6a3b      	ldr	r3, [r7, #32]
 8004ddc:	0d5b      	lsrs	r3, r3, #21
 8004dde:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004de2:	4b08      	ldr	r3, [pc, #32]	@ (8004e04 <I2C_TransferConfig+0x60>)
 8004de4:	430b      	orrs	r3, r1
 8004de6:	43db      	mvns	r3, r3
 8004de8:	ea02 0103 	and.w	r1, r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004df6:	bf00      	nop
 8004df8:	371c      	adds	r7, #28
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	03ff63ff 	.word	0x03ff63ff

08004e08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b20      	cmp	r3, #32
 8004e1c:	d138      	bne.n	8004e90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d101      	bne.n	8004e2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e28:	2302      	movs	r3, #2
 8004e2a:	e032      	b.n	8004e92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2224      	movs	r2, #36	@ 0x24
 8004e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 0201 	bic.w	r2, r2, #1
 8004e4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004e5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6819      	ldr	r1, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f042 0201 	orr.w	r2, r2, #1
 8004e7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	e000      	b.n	8004e92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e90:	2302      	movs	r3, #2
  }
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b085      	sub	sp, #20
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
 8004ea6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b20      	cmp	r3, #32
 8004eb2:	d139      	bne.n	8004f28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d101      	bne.n	8004ec2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	e033      	b.n	8004f2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2224      	movs	r2, #36	@ 0x24
 8004ece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f022 0201 	bic.w	r2, r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004ef0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	021b      	lsls	r3, r3, #8
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 0201 	orr.w	r2, r2, #1
 8004f12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004f24:	2300      	movs	r3, #0
 8004f26:	e000      	b.n	8004f2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f28:	2302      	movs	r3, #2
  }
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
	...

08004f38 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f3c:	4b05      	ldr	r3, [pc, #20]	@ (8004f54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a04      	ldr	r2, [pc, #16]	@ (8004f54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004f42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f46:	6013      	str	r3, [r2, #0]
}
 8004f48:	bf00      	nop
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	40007000 	.word	0x40007000

08004f58 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004f62:	4b23      	ldr	r3, [pc, #140]	@ (8004ff0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f66:	4a22      	ldr	r2, [pc, #136]	@ (8004ff0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004f68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f6e:	4b20      	ldr	r3, [pc, #128]	@ (8004ff0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f76:	603b      	str	r3, [r7, #0]
 8004f78:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ff4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a1d      	ldr	r2, [pc, #116]	@ (8004ff4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f84:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f86:	f7fe fb25 	bl	80035d4 <HAL_GetTick>
 8004f8a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004f8c:	e009      	b.n	8004fa2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004f8e:	f7fe fb21 	bl	80035d4 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004f9c:	d901      	bls.n	8004fa2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e022      	b.n	8004fe8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004fa2:	4b14      	ldr	r3, [pc, #80]	@ (8004ff4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004faa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fae:	d1ee      	bne.n	8004f8e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004fb0:	4b10      	ldr	r3, [pc, #64]	@ (8004ff4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a0f      	ldr	r2, [pc, #60]	@ (8004ff4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004fb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fbc:	f7fe fb0a 	bl	80035d4 <HAL_GetTick>
 8004fc0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004fc2:	e009      	b.n	8004fd8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004fc4:	f7fe fb06 	bl	80035d4 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004fd2:	d901      	bls.n	8004fd8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e007      	b.n	8004fe8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004fd8:	4b06      	ldr	r3, [pc, #24]	@ (8004ff4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fe0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fe4:	d1ee      	bne.n	8004fc4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3708      	adds	r7, #8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	40023800 	.word	0x40023800
 8004ff4:	40007000 	.word	0x40007000

08004ff8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005000:	2300      	movs	r3, #0
 8005002:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e29b      	b.n	8005546 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 8087 	beq.w	800512a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800501c:	4b96      	ldr	r3, [pc, #600]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f003 030c 	and.w	r3, r3, #12
 8005024:	2b04      	cmp	r3, #4
 8005026:	d00c      	beq.n	8005042 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005028:	4b93      	ldr	r3, [pc, #588]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f003 030c 	and.w	r3, r3, #12
 8005030:	2b08      	cmp	r3, #8
 8005032:	d112      	bne.n	800505a <HAL_RCC_OscConfig+0x62>
 8005034:	4b90      	ldr	r3, [pc, #576]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800503c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005040:	d10b      	bne.n	800505a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005042:	4b8d      	ldr	r3, [pc, #564]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d06c      	beq.n	8005128 <HAL_RCC_OscConfig+0x130>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d168      	bne.n	8005128 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e275      	b.n	8005546 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005062:	d106      	bne.n	8005072 <HAL_RCC_OscConfig+0x7a>
 8005064:	4b84      	ldr	r3, [pc, #528]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a83      	ldr	r2, [pc, #524]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 800506a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800506e:	6013      	str	r3, [r2, #0]
 8005070:	e02e      	b.n	80050d0 <HAL_RCC_OscConfig+0xd8>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10c      	bne.n	8005094 <HAL_RCC_OscConfig+0x9c>
 800507a:	4b7f      	ldr	r3, [pc, #508]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a7e      	ldr	r2, [pc, #504]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 8005080:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005084:	6013      	str	r3, [r2, #0]
 8005086:	4b7c      	ldr	r3, [pc, #496]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a7b      	ldr	r2, [pc, #492]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 800508c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005090:	6013      	str	r3, [r2, #0]
 8005092:	e01d      	b.n	80050d0 <HAL_RCC_OscConfig+0xd8>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800509c:	d10c      	bne.n	80050b8 <HAL_RCC_OscConfig+0xc0>
 800509e:	4b76      	ldr	r3, [pc, #472]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a75      	ldr	r2, [pc, #468]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 80050a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050a8:	6013      	str	r3, [r2, #0]
 80050aa:	4b73      	ldr	r3, [pc, #460]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a72      	ldr	r2, [pc, #456]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 80050b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050b4:	6013      	str	r3, [r2, #0]
 80050b6:	e00b      	b.n	80050d0 <HAL_RCC_OscConfig+0xd8>
 80050b8:	4b6f      	ldr	r3, [pc, #444]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a6e      	ldr	r2, [pc, #440]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 80050be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050c2:	6013      	str	r3, [r2, #0]
 80050c4:	4b6c      	ldr	r3, [pc, #432]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a6b      	ldr	r2, [pc, #428]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 80050ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d013      	beq.n	8005100 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d8:	f7fe fa7c 	bl	80035d4 <HAL_GetTick>
 80050dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050de:	e008      	b.n	80050f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050e0:	f7fe fa78 	bl	80035d4 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b64      	cmp	r3, #100	@ 0x64
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e229      	b.n	8005546 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050f2:	4b61      	ldr	r3, [pc, #388]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d0f0      	beq.n	80050e0 <HAL_RCC_OscConfig+0xe8>
 80050fe:	e014      	b.n	800512a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005100:	f7fe fa68 	bl	80035d4 <HAL_GetTick>
 8005104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005106:	e008      	b.n	800511a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005108:	f7fe fa64 	bl	80035d4 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b64      	cmp	r3, #100	@ 0x64
 8005114:	d901      	bls.n	800511a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e215      	b.n	8005546 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800511a:	4b57      	ldr	r3, [pc, #348]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1f0      	bne.n	8005108 <HAL_RCC_OscConfig+0x110>
 8005126:	e000      	b.n	800512a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d069      	beq.n	800520a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005136:	4b50      	ldr	r3, [pc, #320]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f003 030c 	and.w	r3, r3, #12
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00b      	beq.n	800515a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005142:	4b4d      	ldr	r3, [pc, #308]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f003 030c 	and.w	r3, r3, #12
 800514a:	2b08      	cmp	r3, #8
 800514c:	d11c      	bne.n	8005188 <HAL_RCC_OscConfig+0x190>
 800514e:	4b4a      	ldr	r3, [pc, #296]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d116      	bne.n	8005188 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800515a:	4b47      	ldr	r3, [pc, #284]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d005      	beq.n	8005172 <HAL_RCC_OscConfig+0x17a>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d001      	beq.n	8005172 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e1e9      	b.n	8005546 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005172:	4b41      	ldr	r3, [pc, #260]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	493d      	ldr	r1, [pc, #244]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 8005182:	4313      	orrs	r3, r2
 8005184:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005186:	e040      	b.n	800520a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d023      	beq.n	80051d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005190:	4b39      	ldr	r3, [pc, #228]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a38      	ldr	r2, [pc, #224]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 8005196:	f043 0301 	orr.w	r3, r3, #1
 800519a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800519c:	f7fe fa1a 	bl	80035d4 <HAL_GetTick>
 80051a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051a2:	e008      	b.n	80051b6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051a4:	f7fe fa16 	bl	80035d4 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e1c7      	b.n	8005546 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051b6:	4b30      	ldr	r3, [pc, #192]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d0f0      	beq.n	80051a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051c2:	4b2d      	ldr	r3, [pc, #180]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	4929      	ldr	r1, [pc, #164]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	600b      	str	r3, [r1, #0]
 80051d6:	e018      	b.n	800520a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051d8:	4b27      	ldr	r3, [pc, #156]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a26      	ldr	r2, [pc, #152]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 80051de:	f023 0301 	bic.w	r3, r3, #1
 80051e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e4:	f7fe f9f6 	bl	80035d4 <HAL_GetTick>
 80051e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ea:	e008      	b.n	80051fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051ec:	f7fe f9f2 	bl	80035d4 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e1a3      	b.n	8005546 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1f0      	bne.n	80051ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0308 	and.w	r3, r3, #8
 8005212:	2b00      	cmp	r3, #0
 8005214:	d038      	beq.n	8005288 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d019      	beq.n	8005252 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800521e:	4b16      	ldr	r3, [pc, #88]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 8005220:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005222:	4a15      	ldr	r2, [pc, #84]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 8005224:	f043 0301 	orr.w	r3, r3, #1
 8005228:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800522a:	f7fe f9d3 	bl	80035d4 <HAL_GetTick>
 800522e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005230:	e008      	b.n	8005244 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005232:	f7fe f9cf 	bl	80035d4 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d901      	bls.n	8005244 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e180      	b.n	8005546 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005244:	4b0c      	ldr	r3, [pc, #48]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 8005246:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b00      	cmp	r3, #0
 800524e:	d0f0      	beq.n	8005232 <HAL_RCC_OscConfig+0x23a>
 8005250:	e01a      	b.n	8005288 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005252:	4b09      	ldr	r3, [pc, #36]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 8005254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005256:	4a08      	ldr	r2, [pc, #32]	@ (8005278 <HAL_RCC_OscConfig+0x280>)
 8005258:	f023 0301 	bic.w	r3, r3, #1
 800525c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800525e:	f7fe f9b9 	bl	80035d4 <HAL_GetTick>
 8005262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005264:	e00a      	b.n	800527c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005266:	f7fe f9b5 	bl	80035d4 <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	2b02      	cmp	r3, #2
 8005272:	d903      	bls.n	800527c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e166      	b.n	8005546 <HAL_RCC_OscConfig+0x54e>
 8005278:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800527c:	4b92      	ldr	r3, [pc, #584]	@ (80054c8 <HAL_RCC_OscConfig+0x4d0>)
 800527e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1ee      	bne.n	8005266 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0304 	and.w	r3, r3, #4
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 80a4 	beq.w	80053de <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005296:	4b8c      	ldr	r3, [pc, #560]	@ (80054c8 <HAL_RCC_OscConfig+0x4d0>)
 8005298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10d      	bne.n	80052be <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80052a2:	4b89      	ldr	r3, [pc, #548]	@ (80054c8 <HAL_RCC_OscConfig+0x4d0>)
 80052a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a6:	4a88      	ldr	r2, [pc, #544]	@ (80054c8 <HAL_RCC_OscConfig+0x4d0>)
 80052a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80052ae:	4b86      	ldr	r3, [pc, #536]	@ (80054c8 <HAL_RCC_OscConfig+0x4d0>)
 80052b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052b6:	60bb      	str	r3, [r7, #8]
 80052b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052ba:	2301      	movs	r3, #1
 80052bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052be:	4b83      	ldr	r3, [pc, #524]	@ (80054cc <HAL_RCC_OscConfig+0x4d4>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d118      	bne.n	80052fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80052ca:	4b80      	ldr	r3, [pc, #512]	@ (80054cc <HAL_RCC_OscConfig+0x4d4>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a7f      	ldr	r2, [pc, #508]	@ (80054cc <HAL_RCC_OscConfig+0x4d4>)
 80052d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052d6:	f7fe f97d 	bl	80035d4 <HAL_GetTick>
 80052da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052dc:	e008      	b.n	80052f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052de:	f7fe f979 	bl	80035d4 <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	2b64      	cmp	r3, #100	@ 0x64
 80052ea:	d901      	bls.n	80052f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e12a      	b.n	8005546 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052f0:	4b76      	ldr	r3, [pc, #472]	@ (80054cc <HAL_RCC_OscConfig+0x4d4>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d0f0      	beq.n	80052de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d106      	bne.n	8005312 <HAL_RCC_OscConfig+0x31a>
 8005304:	4b70      	ldr	r3, [pc, #448]	@ (80054c8 <HAL_RCC_OscConfig+0x4d0>)
 8005306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005308:	4a6f      	ldr	r2, [pc, #444]	@ (80054c8 <HAL_RCC_OscConfig+0x4d0>)
 800530a:	f043 0301 	orr.w	r3, r3, #1
 800530e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005310:	e02d      	b.n	800536e <HAL_RCC_OscConfig+0x376>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10c      	bne.n	8005334 <HAL_RCC_OscConfig+0x33c>
 800531a:	4b6b      	ldr	r3, [pc, #428]	@ (80054c8 <HAL_RCC_OscConfig+0x4d0>)
 800531c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800531e:	4a6a      	ldr	r2, [pc, #424]	@ (80054c8 <HAL_RCC_OscConfig+0x4d0>)
 8005320:	f023 0301 	bic.w	r3, r3, #1
 8005324:	6713      	str	r3, [r2, #112]	@ 0x70
 8005326:	4b68      	ldr	r3, [pc, #416]	@ (80054c8 <HAL_RCC_OscConfig+0x4d0>)
 8005328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800532a:	4a67      	ldr	r2, [pc, #412]	@ (80054c8 <HAL_RCC_OscConfig+0x4d0>)
 800532c:	f023 0304 	bic.w	r3, r3, #4
 8005330:	6713      	str	r3, [r2, #112]	@ 0x70
 8005332:	e01c      	b.n	800536e <HAL_RCC_OscConfig+0x376>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	2b05      	cmp	r3, #5
 800533a:	d10c      	bne.n	8005356 <HAL_RCC_OscConfig+0x35e>
 800533c:	4b62      	ldr	r3, [pc, #392]	@ (80054c8 <HAL_RCC_OscConfig+0x4d0>)
 800533e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005340:	4a61      	ldr	r2, [pc, #388]	@ (80054c8 <HAL_RCC_OscConfig+0x4d0>)
 8005342:	f043 0304 	orr.w	r3, r3, #4
 8005346:	6713      	str	r3, [r2, #112]	@ 0x70
 8005348:	4b5f      	ldr	r3, [pc, #380]	@ (80054c8 <HAL_RCC_OscConfig+0x4d0>)
 800534a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800534c:	4a5e      	ldr	r2, [pc, #376]	@ (80054c8 <HAL_RCC_OscConfig+0x4d0>)
 800534e:	f043 0301 	orr.w	r3, r3, #1
 8005352:	6713      	str	r3, [r2, #112]	@ 0x70
 8005354:	e00b      	b.n	800536e <HAL_RCC_OscConfig+0x376>
 8005356:	4b5c      	ldr	r3, [pc, #368]	@ (80054c8 <HAL_RCC_OscConfig+0x4d0>)
 8005358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800535a:	4a5b      	ldr	r2, [pc, #364]	@ (80054c8 <HAL_RCC_OscConfig+0x4d0>)
 800535c:	f023 0301 	bic.w	r3, r3, #1
 8005360:	6713      	str	r3, [r2, #112]	@ 0x70
 8005362:	4b59      	ldr	r3, [pc, #356]	@ (80054c8 <HAL_RCC_OscConfig+0x4d0>)
 8005364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005366:	4a58      	ldr	r2, [pc, #352]	@ (80054c8 <HAL_RCC_OscConfig+0x4d0>)
 8005368:	f023 0304 	bic.w	r3, r3, #4
 800536c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d015      	beq.n	80053a2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005376:	f7fe f92d 	bl	80035d4 <HAL_GetTick>
 800537a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800537c:	e00a      	b.n	8005394 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800537e:	f7fe f929 	bl	80035d4 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	f241 3288 	movw	r2, #5000	@ 0x1388
 800538c:	4293      	cmp	r3, r2
 800538e:	d901      	bls.n	8005394 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e0d8      	b.n	8005546 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005394:	4b4c      	ldr	r3, [pc, #304]	@ (80054c8 <HAL_RCC_OscConfig+0x4d0>)
 8005396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d0ee      	beq.n	800537e <HAL_RCC_OscConfig+0x386>
 80053a0:	e014      	b.n	80053cc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053a2:	f7fe f917 	bl	80035d4 <HAL_GetTick>
 80053a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053a8:	e00a      	b.n	80053c0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053aa:	f7fe f913 	bl	80035d4 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d901      	bls.n	80053c0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e0c2      	b.n	8005546 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053c0:	4b41      	ldr	r3, [pc, #260]	@ (80054c8 <HAL_RCC_OscConfig+0x4d0>)
 80053c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1ee      	bne.n	80053aa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053cc:	7dfb      	ldrb	r3, [r7, #23]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d105      	bne.n	80053de <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053d2:	4b3d      	ldr	r3, [pc, #244]	@ (80054c8 <HAL_RCC_OscConfig+0x4d0>)
 80053d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d6:	4a3c      	ldr	r2, [pc, #240]	@ (80054c8 <HAL_RCC_OscConfig+0x4d0>)
 80053d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053dc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f000 80ae 	beq.w	8005544 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053e8:	4b37      	ldr	r3, [pc, #220]	@ (80054c8 <HAL_RCC_OscConfig+0x4d0>)
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f003 030c 	and.w	r3, r3, #12
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	d06d      	beq.n	80054d0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d14b      	bne.n	8005494 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053fc:	4b32      	ldr	r3, [pc, #200]	@ (80054c8 <HAL_RCC_OscConfig+0x4d0>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a31      	ldr	r2, [pc, #196]	@ (80054c8 <HAL_RCC_OscConfig+0x4d0>)
 8005402:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005406:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005408:	f7fe f8e4 	bl	80035d4 <HAL_GetTick>
 800540c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800540e:	e008      	b.n	8005422 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005410:	f7fe f8e0 	bl	80035d4 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b02      	cmp	r3, #2
 800541c:	d901      	bls.n	8005422 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e091      	b.n	8005546 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005422:	4b29      	ldr	r3, [pc, #164]	@ (80054c8 <HAL_RCC_OscConfig+0x4d0>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1f0      	bne.n	8005410 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	69da      	ldr	r2, [r3, #28]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	431a      	orrs	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800543c:	019b      	lsls	r3, r3, #6
 800543e:	431a      	orrs	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005444:	085b      	lsrs	r3, r3, #1
 8005446:	3b01      	subs	r3, #1
 8005448:	041b      	lsls	r3, r3, #16
 800544a:	431a      	orrs	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005450:	061b      	lsls	r3, r3, #24
 8005452:	431a      	orrs	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005458:	071b      	lsls	r3, r3, #28
 800545a:	491b      	ldr	r1, [pc, #108]	@ (80054c8 <HAL_RCC_OscConfig+0x4d0>)
 800545c:	4313      	orrs	r3, r2
 800545e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005460:	4b19      	ldr	r3, [pc, #100]	@ (80054c8 <HAL_RCC_OscConfig+0x4d0>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a18      	ldr	r2, [pc, #96]	@ (80054c8 <HAL_RCC_OscConfig+0x4d0>)
 8005466:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800546a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800546c:	f7fe f8b2 	bl	80035d4 <HAL_GetTick>
 8005470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005472:	e008      	b.n	8005486 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005474:	f7fe f8ae 	bl	80035d4 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b02      	cmp	r3, #2
 8005480:	d901      	bls.n	8005486 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e05f      	b.n	8005546 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005486:	4b10      	ldr	r3, [pc, #64]	@ (80054c8 <HAL_RCC_OscConfig+0x4d0>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d0f0      	beq.n	8005474 <HAL_RCC_OscConfig+0x47c>
 8005492:	e057      	b.n	8005544 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005494:	4b0c      	ldr	r3, [pc, #48]	@ (80054c8 <HAL_RCC_OscConfig+0x4d0>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a0b      	ldr	r2, [pc, #44]	@ (80054c8 <HAL_RCC_OscConfig+0x4d0>)
 800549a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800549e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a0:	f7fe f898 	bl	80035d4 <HAL_GetTick>
 80054a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054a6:	e008      	b.n	80054ba <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054a8:	f7fe f894 	bl	80035d4 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d901      	bls.n	80054ba <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e045      	b.n	8005546 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ba:	4b03      	ldr	r3, [pc, #12]	@ (80054c8 <HAL_RCC_OscConfig+0x4d0>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1f0      	bne.n	80054a8 <HAL_RCC_OscConfig+0x4b0>
 80054c6:	e03d      	b.n	8005544 <HAL_RCC_OscConfig+0x54c>
 80054c8:	40023800 	.word	0x40023800
 80054cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80054d0:	4b1f      	ldr	r3, [pc, #124]	@ (8005550 <HAL_RCC_OscConfig+0x558>)
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d030      	beq.n	8005540 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d129      	bne.n	8005540 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d122      	bne.n	8005540 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005500:	4013      	ands	r3, r2
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005506:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005508:	4293      	cmp	r3, r2
 800550a:	d119      	bne.n	8005540 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005516:	085b      	lsrs	r3, r3, #1
 8005518:	3b01      	subs	r3, #1
 800551a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800551c:	429a      	cmp	r2, r3
 800551e:	d10f      	bne.n	8005540 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800552c:	429a      	cmp	r2, r3
 800552e:	d107      	bne.n	8005540 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800553a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800553c:	429a      	cmp	r2, r3
 800553e:	d001      	beq.n	8005544 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e000      	b.n	8005546 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3718      	adds	r7, #24
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	40023800 	.word	0x40023800

08005554 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800555e:	2300      	movs	r3, #0
 8005560:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d101      	bne.n	800556c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e0d0      	b.n	800570e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800556c:	4b6a      	ldr	r3, [pc, #424]	@ (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 030f 	and.w	r3, r3, #15
 8005574:	683a      	ldr	r2, [r7, #0]
 8005576:	429a      	cmp	r2, r3
 8005578:	d910      	bls.n	800559c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800557a:	4b67      	ldr	r3, [pc, #412]	@ (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f023 020f 	bic.w	r2, r3, #15
 8005582:	4965      	ldr	r1, [pc, #404]	@ (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	4313      	orrs	r3, r2
 8005588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800558a:	4b63      	ldr	r3, [pc, #396]	@ (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 030f 	and.w	r3, r3, #15
 8005592:	683a      	ldr	r2, [r7, #0]
 8005594:	429a      	cmp	r2, r3
 8005596:	d001      	beq.n	800559c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e0b8      	b.n	800570e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0302 	and.w	r3, r3, #2
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d020      	beq.n	80055ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0304 	and.w	r3, r3, #4
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d005      	beq.n	80055c0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055b4:	4b59      	ldr	r3, [pc, #356]	@ (800571c <HAL_RCC_ClockConfig+0x1c8>)
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	4a58      	ldr	r2, [pc, #352]	@ (800571c <HAL_RCC_ClockConfig+0x1c8>)
 80055ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80055be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0308 	and.w	r3, r3, #8
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d005      	beq.n	80055d8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055cc:	4b53      	ldr	r3, [pc, #332]	@ (800571c <HAL_RCC_ClockConfig+0x1c8>)
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	4a52      	ldr	r2, [pc, #328]	@ (800571c <HAL_RCC_ClockConfig+0x1c8>)
 80055d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80055d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055d8:	4b50      	ldr	r3, [pc, #320]	@ (800571c <HAL_RCC_ClockConfig+0x1c8>)
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	494d      	ldr	r1, [pc, #308]	@ (800571c <HAL_RCC_ClockConfig+0x1c8>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d040      	beq.n	8005678 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d107      	bne.n	800560e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055fe:	4b47      	ldr	r3, [pc, #284]	@ (800571c <HAL_RCC_ClockConfig+0x1c8>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d115      	bne.n	8005636 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e07f      	b.n	800570e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	2b02      	cmp	r3, #2
 8005614:	d107      	bne.n	8005626 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005616:	4b41      	ldr	r3, [pc, #260]	@ (800571c <HAL_RCC_ClockConfig+0x1c8>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d109      	bne.n	8005636 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e073      	b.n	800570e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005626:	4b3d      	ldr	r3, [pc, #244]	@ (800571c <HAL_RCC_ClockConfig+0x1c8>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e06b      	b.n	800570e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005636:	4b39      	ldr	r3, [pc, #228]	@ (800571c <HAL_RCC_ClockConfig+0x1c8>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f023 0203 	bic.w	r2, r3, #3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	4936      	ldr	r1, [pc, #216]	@ (800571c <HAL_RCC_ClockConfig+0x1c8>)
 8005644:	4313      	orrs	r3, r2
 8005646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005648:	f7fd ffc4 	bl	80035d4 <HAL_GetTick>
 800564c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800564e:	e00a      	b.n	8005666 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005650:	f7fd ffc0 	bl	80035d4 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800565e:	4293      	cmp	r3, r2
 8005660:	d901      	bls.n	8005666 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e053      	b.n	800570e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005666:	4b2d      	ldr	r3, [pc, #180]	@ (800571c <HAL_RCC_ClockConfig+0x1c8>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f003 020c 	and.w	r2, r3, #12
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	429a      	cmp	r2, r3
 8005676:	d1eb      	bne.n	8005650 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005678:	4b27      	ldr	r3, [pc, #156]	@ (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 030f 	and.w	r3, r3, #15
 8005680:	683a      	ldr	r2, [r7, #0]
 8005682:	429a      	cmp	r2, r3
 8005684:	d210      	bcs.n	80056a8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005686:	4b24      	ldr	r3, [pc, #144]	@ (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f023 020f 	bic.w	r2, r3, #15
 800568e:	4922      	ldr	r1, [pc, #136]	@ (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	4313      	orrs	r3, r2
 8005694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005696:	4b20      	ldr	r3, [pc, #128]	@ (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 030f 	and.w	r3, r3, #15
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d001      	beq.n	80056a8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e032      	b.n	800570e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0304 	and.w	r3, r3, #4
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d008      	beq.n	80056c6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056b4:	4b19      	ldr	r3, [pc, #100]	@ (800571c <HAL_RCC_ClockConfig+0x1c8>)
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	4916      	ldr	r1, [pc, #88]	@ (800571c <HAL_RCC_ClockConfig+0x1c8>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0308 	and.w	r3, r3, #8
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d009      	beq.n	80056e6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80056d2:	4b12      	ldr	r3, [pc, #72]	@ (800571c <HAL_RCC_ClockConfig+0x1c8>)
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	00db      	lsls	r3, r3, #3
 80056e0:	490e      	ldr	r1, [pc, #56]	@ (800571c <HAL_RCC_ClockConfig+0x1c8>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80056e6:	f000 f821 	bl	800572c <HAL_RCC_GetSysClockFreq>
 80056ea:	4602      	mov	r2, r0
 80056ec:	4b0b      	ldr	r3, [pc, #44]	@ (800571c <HAL_RCC_ClockConfig+0x1c8>)
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	091b      	lsrs	r3, r3, #4
 80056f2:	f003 030f 	and.w	r3, r3, #15
 80056f6:	490a      	ldr	r1, [pc, #40]	@ (8005720 <HAL_RCC_ClockConfig+0x1cc>)
 80056f8:	5ccb      	ldrb	r3, [r1, r3]
 80056fa:	fa22 f303 	lsr.w	r3, r2, r3
 80056fe:	4a09      	ldr	r2, [pc, #36]	@ (8005724 <HAL_RCC_ClockConfig+0x1d0>)
 8005700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005702:	4b09      	ldr	r3, [pc, #36]	@ (8005728 <HAL_RCC_ClockConfig+0x1d4>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4618      	mov	r0, r3
 8005708:	f7fd fcd0 	bl	80030ac <HAL_InitTick>

  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	40023c00 	.word	0x40023c00
 800571c:	40023800 	.word	0x40023800
 8005720:	08017b4c 	.word	0x08017b4c
 8005724:	20000020 	.word	0x20000020
 8005728:	20000024 	.word	0x20000024

0800572c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800572c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005730:	b094      	sub	sp, #80	@ 0x50
 8005732:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005734:	2300      	movs	r3, #0
 8005736:	647b      	str	r3, [r7, #68]	@ 0x44
 8005738:	2300      	movs	r3, #0
 800573a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800573c:	2300      	movs	r3, #0
 800573e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8005740:	2300      	movs	r3, #0
 8005742:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005744:	4b79      	ldr	r3, [pc, #484]	@ (800592c <HAL_RCC_GetSysClockFreq+0x200>)
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f003 030c 	and.w	r3, r3, #12
 800574c:	2b08      	cmp	r3, #8
 800574e:	d00d      	beq.n	800576c <HAL_RCC_GetSysClockFreq+0x40>
 8005750:	2b08      	cmp	r3, #8
 8005752:	f200 80e1 	bhi.w	8005918 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005756:	2b00      	cmp	r3, #0
 8005758:	d002      	beq.n	8005760 <HAL_RCC_GetSysClockFreq+0x34>
 800575a:	2b04      	cmp	r3, #4
 800575c:	d003      	beq.n	8005766 <HAL_RCC_GetSysClockFreq+0x3a>
 800575e:	e0db      	b.n	8005918 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005760:	4b73      	ldr	r3, [pc, #460]	@ (8005930 <HAL_RCC_GetSysClockFreq+0x204>)
 8005762:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005764:	e0db      	b.n	800591e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005766:	4b73      	ldr	r3, [pc, #460]	@ (8005934 <HAL_RCC_GetSysClockFreq+0x208>)
 8005768:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800576a:	e0d8      	b.n	800591e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800576c:	4b6f      	ldr	r3, [pc, #444]	@ (800592c <HAL_RCC_GetSysClockFreq+0x200>)
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005774:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005776:	4b6d      	ldr	r3, [pc, #436]	@ (800592c <HAL_RCC_GetSysClockFreq+0x200>)
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d063      	beq.n	800584a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005782:	4b6a      	ldr	r3, [pc, #424]	@ (800592c <HAL_RCC_GetSysClockFreq+0x200>)
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	099b      	lsrs	r3, r3, #6
 8005788:	2200      	movs	r2, #0
 800578a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800578c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800578e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005794:	633b      	str	r3, [r7, #48]	@ 0x30
 8005796:	2300      	movs	r3, #0
 8005798:	637b      	str	r3, [r7, #52]	@ 0x34
 800579a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800579e:	4622      	mov	r2, r4
 80057a0:	462b      	mov	r3, r5
 80057a2:	f04f 0000 	mov.w	r0, #0
 80057a6:	f04f 0100 	mov.w	r1, #0
 80057aa:	0159      	lsls	r1, r3, #5
 80057ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057b0:	0150      	lsls	r0, r2, #5
 80057b2:	4602      	mov	r2, r0
 80057b4:	460b      	mov	r3, r1
 80057b6:	4621      	mov	r1, r4
 80057b8:	1a51      	subs	r1, r2, r1
 80057ba:	6139      	str	r1, [r7, #16]
 80057bc:	4629      	mov	r1, r5
 80057be:	eb63 0301 	sbc.w	r3, r3, r1
 80057c2:	617b      	str	r3, [r7, #20]
 80057c4:	f04f 0200 	mov.w	r2, #0
 80057c8:	f04f 0300 	mov.w	r3, #0
 80057cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057d0:	4659      	mov	r1, fp
 80057d2:	018b      	lsls	r3, r1, #6
 80057d4:	4651      	mov	r1, sl
 80057d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80057da:	4651      	mov	r1, sl
 80057dc:	018a      	lsls	r2, r1, #6
 80057de:	4651      	mov	r1, sl
 80057e0:	ebb2 0801 	subs.w	r8, r2, r1
 80057e4:	4659      	mov	r1, fp
 80057e6:	eb63 0901 	sbc.w	r9, r3, r1
 80057ea:	f04f 0200 	mov.w	r2, #0
 80057ee:	f04f 0300 	mov.w	r3, #0
 80057f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057fe:	4690      	mov	r8, r2
 8005800:	4699      	mov	r9, r3
 8005802:	4623      	mov	r3, r4
 8005804:	eb18 0303 	adds.w	r3, r8, r3
 8005808:	60bb      	str	r3, [r7, #8]
 800580a:	462b      	mov	r3, r5
 800580c:	eb49 0303 	adc.w	r3, r9, r3
 8005810:	60fb      	str	r3, [r7, #12]
 8005812:	f04f 0200 	mov.w	r2, #0
 8005816:	f04f 0300 	mov.w	r3, #0
 800581a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800581e:	4629      	mov	r1, r5
 8005820:	024b      	lsls	r3, r1, #9
 8005822:	4621      	mov	r1, r4
 8005824:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005828:	4621      	mov	r1, r4
 800582a:	024a      	lsls	r2, r1, #9
 800582c:	4610      	mov	r0, r2
 800582e:	4619      	mov	r1, r3
 8005830:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005832:	2200      	movs	r2, #0
 8005834:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005836:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005838:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800583c:	f7fa fdb8 	bl	80003b0 <__aeabi_uldivmod>
 8005840:	4602      	mov	r2, r0
 8005842:	460b      	mov	r3, r1
 8005844:	4613      	mov	r3, r2
 8005846:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005848:	e058      	b.n	80058fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800584a:	4b38      	ldr	r3, [pc, #224]	@ (800592c <HAL_RCC_GetSysClockFreq+0x200>)
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	099b      	lsrs	r3, r3, #6
 8005850:	2200      	movs	r2, #0
 8005852:	4618      	mov	r0, r3
 8005854:	4611      	mov	r1, r2
 8005856:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800585a:	623b      	str	r3, [r7, #32]
 800585c:	2300      	movs	r3, #0
 800585e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005860:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005864:	4642      	mov	r2, r8
 8005866:	464b      	mov	r3, r9
 8005868:	f04f 0000 	mov.w	r0, #0
 800586c:	f04f 0100 	mov.w	r1, #0
 8005870:	0159      	lsls	r1, r3, #5
 8005872:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005876:	0150      	lsls	r0, r2, #5
 8005878:	4602      	mov	r2, r0
 800587a:	460b      	mov	r3, r1
 800587c:	4641      	mov	r1, r8
 800587e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005882:	4649      	mov	r1, r9
 8005884:	eb63 0b01 	sbc.w	fp, r3, r1
 8005888:	f04f 0200 	mov.w	r2, #0
 800588c:	f04f 0300 	mov.w	r3, #0
 8005890:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005894:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005898:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800589c:	ebb2 040a 	subs.w	r4, r2, sl
 80058a0:	eb63 050b 	sbc.w	r5, r3, fp
 80058a4:	f04f 0200 	mov.w	r2, #0
 80058a8:	f04f 0300 	mov.w	r3, #0
 80058ac:	00eb      	lsls	r3, r5, #3
 80058ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058b2:	00e2      	lsls	r2, r4, #3
 80058b4:	4614      	mov	r4, r2
 80058b6:	461d      	mov	r5, r3
 80058b8:	4643      	mov	r3, r8
 80058ba:	18e3      	adds	r3, r4, r3
 80058bc:	603b      	str	r3, [r7, #0]
 80058be:	464b      	mov	r3, r9
 80058c0:	eb45 0303 	adc.w	r3, r5, r3
 80058c4:	607b      	str	r3, [r7, #4]
 80058c6:	f04f 0200 	mov.w	r2, #0
 80058ca:	f04f 0300 	mov.w	r3, #0
 80058ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80058d2:	4629      	mov	r1, r5
 80058d4:	028b      	lsls	r3, r1, #10
 80058d6:	4621      	mov	r1, r4
 80058d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058dc:	4621      	mov	r1, r4
 80058de:	028a      	lsls	r2, r1, #10
 80058e0:	4610      	mov	r0, r2
 80058e2:	4619      	mov	r1, r3
 80058e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058e6:	2200      	movs	r2, #0
 80058e8:	61bb      	str	r3, [r7, #24]
 80058ea:	61fa      	str	r2, [r7, #28]
 80058ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058f0:	f7fa fd5e 	bl	80003b0 <__aeabi_uldivmod>
 80058f4:	4602      	mov	r2, r0
 80058f6:	460b      	mov	r3, r1
 80058f8:	4613      	mov	r3, r2
 80058fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80058fc:	4b0b      	ldr	r3, [pc, #44]	@ (800592c <HAL_RCC_GetSysClockFreq+0x200>)
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	0c1b      	lsrs	r3, r3, #16
 8005902:	f003 0303 	and.w	r3, r3, #3
 8005906:	3301      	adds	r3, #1
 8005908:	005b      	lsls	r3, r3, #1
 800590a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800590c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800590e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005910:	fbb2 f3f3 	udiv	r3, r2, r3
 8005914:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005916:	e002      	b.n	800591e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005918:	4b05      	ldr	r3, [pc, #20]	@ (8005930 <HAL_RCC_GetSysClockFreq+0x204>)
 800591a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800591c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800591e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005920:	4618      	mov	r0, r3
 8005922:	3750      	adds	r7, #80	@ 0x50
 8005924:	46bd      	mov	sp, r7
 8005926:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800592a:	bf00      	nop
 800592c:	40023800 	.word	0x40023800
 8005930:	00f42400 	.word	0x00f42400
 8005934:	007a1200 	.word	0x007a1200

08005938 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005938:	b480      	push	{r7}
 800593a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800593c:	4b03      	ldr	r3, [pc, #12]	@ (800594c <HAL_RCC_GetHCLKFreq+0x14>)
 800593e:	681b      	ldr	r3, [r3, #0]
}
 8005940:	4618      	mov	r0, r3
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	20000020 	.word	0x20000020

08005950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005954:	f7ff fff0 	bl	8005938 <HAL_RCC_GetHCLKFreq>
 8005958:	4602      	mov	r2, r0
 800595a:	4b05      	ldr	r3, [pc, #20]	@ (8005970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	0a9b      	lsrs	r3, r3, #10
 8005960:	f003 0307 	and.w	r3, r3, #7
 8005964:	4903      	ldr	r1, [pc, #12]	@ (8005974 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005966:	5ccb      	ldrb	r3, [r1, r3]
 8005968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800596c:	4618      	mov	r0, r3
 800596e:	bd80      	pop	{r7, pc}
 8005970:	40023800 	.word	0x40023800
 8005974:	08017b5c 	.word	0x08017b5c

08005978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800597c:	f7ff ffdc 	bl	8005938 <HAL_RCC_GetHCLKFreq>
 8005980:	4602      	mov	r2, r0
 8005982:	4b05      	ldr	r3, [pc, #20]	@ (8005998 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	0b5b      	lsrs	r3, r3, #13
 8005988:	f003 0307 	and.w	r3, r3, #7
 800598c:	4903      	ldr	r1, [pc, #12]	@ (800599c <HAL_RCC_GetPCLK2Freq+0x24>)
 800598e:	5ccb      	ldrb	r3, [r1, r3]
 8005990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005994:	4618      	mov	r0, r3
 8005996:	bd80      	pop	{r7, pc}
 8005998:	40023800 	.word	0x40023800
 800599c:	08017b5c 	.word	0x08017b5c

080059a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	220f      	movs	r2, #15
 80059ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80059b0:	4b12      	ldr	r3, [pc, #72]	@ (80059fc <HAL_RCC_GetClockConfig+0x5c>)
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f003 0203 	and.w	r2, r3, #3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80059bc:	4b0f      	ldr	r3, [pc, #60]	@ (80059fc <HAL_RCC_GetClockConfig+0x5c>)
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80059c8:	4b0c      	ldr	r3, [pc, #48]	@ (80059fc <HAL_RCC_GetClockConfig+0x5c>)
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80059d4:	4b09      	ldr	r3, [pc, #36]	@ (80059fc <HAL_RCC_GetClockConfig+0x5c>)
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	08db      	lsrs	r3, r3, #3
 80059da:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80059e2:	4b07      	ldr	r3, [pc, #28]	@ (8005a00 <HAL_RCC_GetClockConfig+0x60>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 020f 	and.w	r2, r3, #15
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	601a      	str	r2, [r3, #0]
}
 80059ee:	bf00      	nop
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	40023800 	.word	0x40023800
 8005a00:	40023c00 	.word	0x40023c00

08005a04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b088      	sub	sp, #32
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005a10:	2300      	movs	r3, #0
 8005a12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005a14:	2300      	movs	r3, #0
 8005a16:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d012      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a2c:	4b69      	ldr	r3, [pc, #420]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	4a68      	ldr	r2, [pc, #416]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a32:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005a36:	6093      	str	r3, [r2, #8]
 8005a38:	4b66      	ldr	r3, [pc, #408]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a40:	4964      	ldr	r1, [pc, #400]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d017      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a5e:	4b5d      	ldr	r3, [pc, #372]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a64:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a6c:	4959      	ldr	r1, [pc, #356]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a7c:	d101      	bne.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d017      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005a9a:	4b4e      	ldr	r3, [pc, #312]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005aa0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa8:	494a      	ldr	r1, [pc, #296]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ab8:	d101      	bne.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005aba:	2301      	movs	r3, #1
 8005abc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0320 	and.w	r3, r3, #32
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f000 808b 	beq.w	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ae8:	4b3a      	ldr	r3, [pc, #232]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aec:	4a39      	ldr	r2, [pc, #228]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005aee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005af2:	6413      	str	r3, [r2, #64]	@ 0x40
 8005af4:	4b37      	ldr	r3, [pc, #220]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005afc:	60bb      	str	r3, [r7, #8]
 8005afe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005b00:	4b35      	ldr	r3, [pc, #212]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a34      	ldr	r2, [pc, #208]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005b06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b0c:	f7fd fd62 	bl	80035d4 <HAL_GetTick>
 8005b10:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005b12:	e008      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b14:	f7fd fd5e 	bl	80035d4 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b64      	cmp	r3, #100	@ 0x64
 8005b20:	d901      	bls.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e38f      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005b26:	4b2c      	ldr	r3, [pc, #176]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d0f0      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b32:	4b28      	ldr	r3, [pc, #160]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b3a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d035      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d02e      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b50:	4b20      	ldr	r3, [pc, #128]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b58:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b5a:	4b1e      	ldr	r3, [pc, #120]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b5e:	4a1d      	ldr	r2, [pc, #116]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b64:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b66:	4b1b      	ldr	r3, [pc, #108]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b6a:	4a1a      	ldr	r2, [pc, #104]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b70:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005b72:	4a18      	ldr	r2, [pc, #96]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b78:	4b16      	ldr	r3, [pc, #88]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d114      	bne.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b84:	f7fd fd26 	bl	80035d4 <HAL_GetTick>
 8005b88:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b8a:	e00a      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b8c:	f7fd fd22 	bl	80035d4 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e351      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d0ee      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bba:	d111      	bne.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005bbc:	4b05      	ldr	r3, [pc, #20]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005bc8:	4b04      	ldr	r3, [pc, #16]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005bca:	400b      	ands	r3, r1
 8005bcc:	4901      	ldr	r1, [pc, #4]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	608b      	str	r3, [r1, #8]
 8005bd2:	e00b      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005bd4:	40023800 	.word	0x40023800
 8005bd8:	40007000 	.word	0x40007000
 8005bdc:	0ffffcff 	.word	0x0ffffcff
 8005be0:	4bac      	ldr	r3, [pc, #688]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	4aab      	ldr	r2, [pc, #684]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005be6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005bea:	6093      	str	r3, [r2, #8]
 8005bec:	4ba9      	ldr	r3, [pc, #676]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bf8:	49a6      	ldr	r1, [pc, #664]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0310 	and.w	r3, r3, #16
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d010      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c0a:	4ba2      	ldr	r3, [pc, #648]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c10:	4aa0      	ldr	r2, [pc, #640]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c16:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005c1a:	4b9e      	ldr	r3, [pc, #632]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c1c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c24:	499b      	ldr	r1, [pc, #620]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00a      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c38:	4b96      	ldr	r3, [pc, #600]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c3e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c46:	4993      	ldr	r1, [pc, #588]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00a      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c5a:	4b8e      	ldr	r3, [pc, #568]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c60:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c68:	498a      	ldr	r1, [pc, #552]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00a      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c7c:	4b85      	ldr	r3, [pc, #532]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c8a:	4982      	ldr	r1, [pc, #520]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00a      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c9e:	4b7d      	ldr	r3, [pc, #500]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ca4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cac:	4979      	ldr	r1, [pc, #484]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00a      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005cc0:	4b74      	ldr	r3, [pc, #464]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cc6:	f023 0203 	bic.w	r2, r3, #3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cce:	4971      	ldr	r1, [pc, #452]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00a      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ce2:	4b6c      	ldr	r3, [pc, #432]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ce8:	f023 020c 	bic.w	r2, r3, #12
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cf0:	4968      	ldr	r1, [pc, #416]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00a      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d04:	4b63      	ldr	r3, [pc, #396]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d0a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d12:	4960      	ldr	r1, [pc, #384]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00a      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d26:	4b5b      	ldr	r3, [pc, #364]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d2c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d34:	4957      	ldr	r1, [pc, #348]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00a      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d48:	4b52      	ldr	r3, [pc, #328]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d4e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d56:	494f      	ldr	r1, [pc, #316]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00a      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005d6a:	4b4a      	ldr	r3, [pc, #296]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d70:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d78:	4946      	ldr	r1, [pc, #280]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00a      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005d8c:	4b41      	ldr	r3, [pc, #260]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d92:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d9a:	493e      	ldr	r1, [pc, #248]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00a      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005dae:	4b39      	ldr	r3, [pc, #228]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005db4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dbc:	4935      	ldr	r1, [pc, #212]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00a      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005dd0:	4b30      	ldr	r3, [pc, #192]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dd6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005dde:	492d      	ldr	r1, [pc, #180]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d011      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005df2:	4b28      	ldr	r3, [pc, #160]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005df8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e00:	4924      	ldr	r1, [pc, #144]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e10:	d101      	bne.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005e12:	2301      	movs	r3, #1
 8005e14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0308 	and.w	r3, r3, #8
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d001      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005e22:	2301      	movs	r3, #1
 8005e24:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00a      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e32:	4b18      	ldr	r3, [pc, #96]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e38:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e40:	4914      	ldr	r1, [pc, #80]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00b      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005e54:	4b0f      	ldr	r3, [pc, #60]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e5a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e64:	490b      	ldr	r1, [pc, #44]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00f      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005e78:	4b06      	ldr	r3, [pc, #24]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e7e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e88:	4902      	ldr	r1, [pc, #8]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005e90:	e002      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005e92:	bf00      	nop
 8005e94:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00b      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005ea4:	4b8a      	ldr	r3, [pc, #552]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ea6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005eaa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eb4:	4986      	ldr	r1, [pc, #536]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00b      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005ec8:	4b81      	ldr	r3, [pc, #516]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005eca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ece:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ed8:	497d      	ldr	r1, [pc, #500]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d006      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 80d6 	beq.w	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005ef4:	4b76      	ldr	r3, [pc, #472]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a75      	ldr	r2, [pc, #468]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005efa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005efe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f00:	f7fd fb68 	bl	80035d4 <HAL_GetTick>
 8005f04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f06:	e008      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005f08:	f7fd fb64 	bl	80035d4 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	2b64      	cmp	r3, #100	@ 0x64
 8005f14:	d901      	bls.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e195      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f1a:	4b6d      	ldr	r3, [pc, #436]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1f0      	bne.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0301 	and.w	r3, r3, #1
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d021      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d11d      	bne.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005f3a:	4b65      	ldr	r3, [pc, #404]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f40:	0c1b      	lsrs	r3, r3, #16
 8005f42:	f003 0303 	and.w	r3, r3, #3
 8005f46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005f48:	4b61      	ldr	r3, [pc, #388]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f4e:	0e1b      	lsrs	r3, r3, #24
 8005f50:	f003 030f 	and.w	r3, r3, #15
 8005f54:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	019a      	lsls	r2, r3, #6
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	041b      	lsls	r3, r3, #16
 8005f60:	431a      	orrs	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	061b      	lsls	r3, r3, #24
 8005f66:	431a      	orrs	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	071b      	lsls	r3, r3, #28
 8005f6e:	4958      	ldr	r1, [pc, #352]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d004      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f8a:	d00a      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d02e      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005fa0:	d129      	bne.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005fa2:	4b4b      	ldr	r3, [pc, #300]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fa8:	0c1b      	lsrs	r3, r3, #16
 8005faa:	f003 0303 	and.w	r3, r3, #3
 8005fae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005fb0:	4b47      	ldr	r3, [pc, #284]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fb6:	0f1b      	lsrs	r3, r3, #28
 8005fb8:	f003 0307 	and.w	r3, r3, #7
 8005fbc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	019a      	lsls	r2, r3, #6
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	041b      	lsls	r3, r3, #16
 8005fc8:	431a      	orrs	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	061b      	lsls	r3, r3, #24
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	071b      	lsls	r3, r3, #28
 8005fd6:	493e      	ldr	r1, [pc, #248]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005fde:	4b3c      	ldr	r3, [pc, #240]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fe4:	f023 021f 	bic.w	r2, r3, #31
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fec:	3b01      	subs	r3, #1
 8005fee:	4938      	ldr	r1, [pc, #224]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d01d      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006002:	4b33      	ldr	r3, [pc, #204]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006004:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006008:	0e1b      	lsrs	r3, r3, #24
 800600a:	f003 030f 	and.w	r3, r3, #15
 800600e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006010:	4b2f      	ldr	r3, [pc, #188]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006012:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006016:	0f1b      	lsrs	r3, r3, #28
 8006018:	f003 0307 	and.w	r3, r3, #7
 800601c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	019a      	lsls	r2, r3, #6
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	041b      	lsls	r3, r3, #16
 800602a:	431a      	orrs	r2, r3
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	061b      	lsls	r3, r3, #24
 8006030:	431a      	orrs	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	071b      	lsls	r3, r3, #28
 8006036:	4926      	ldr	r1, [pc, #152]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006038:	4313      	orrs	r3, r2
 800603a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d011      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	019a      	lsls	r2, r3, #6
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	041b      	lsls	r3, r3, #16
 8006056:	431a      	orrs	r2, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	061b      	lsls	r3, r3, #24
 800605e:	431a      	orrs	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	071b      	lsls	r3, r3, #28
 8006066:	491a      	ldr	r1, [pc, #104]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006068:	4313      	orrs	r3, r2
 800606a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800606e:	4b18      	ldr	r3, [pc, #96]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a17      	ldr	r2, [pc, #92]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006074:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006078:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800607a:	f7fd faab 	bl	80035d4 <HAL_GetTick>
 800607e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006080:	e008      	b.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006082:	f7fd faa7 	bl	80035d4 <HAL_GetTick>
 8006086:	4602      	mov	r2, r0
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	2b64      	cmp	r3, #100	@ 0x64
 800608e:	d901      	bls.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e0d8      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006094:	4b0e      	ldr	r3, [pc, #56]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d0f0      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	f040 80ce 	bne.w	8006244 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80060a8:	4b09      	ldr	r3, [pc, #36]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a08      	ldr	r2, [pc, #32]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060b4:	f7fd fa8e 	bl	80035d4 <HAL_GetTick>
 80060b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80060ba:	e00b      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80060bc:	f7fd fa8a 	bl	80035d4 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b64      	cmp	r3, #100	@ 0x64
 80060c8:	d904      	bls.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e0bb      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80060ce:	bf00      	nop
 80060d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80060d4:	4b5e      	ldr	r3, [pc, #376]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060e0:	d0ec      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d009      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d02e      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006106:	2b00      	cmp	r3, #0
 8006108:	d12a      	bne.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800610a:	4b51      	ldr	r3, [pc, #324]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800610c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006110:	0c1b      	lsrs	r3, r3, #16
 8006112:	f003 0303 	and.w	r3, r3, #3
 8006116:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006118:	4b4d      	ldr	r3, [pc, #308]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800611a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800611e:	0f1b      	lsrs	r3, r3, #28
 8006120:	f003 0307 	and.w	r3, r3, #7
 8006124:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	019a      	lsls	r2, r3, #6
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	041b      	lsls	r3, r3, #16
 8006130:	431a      	orrs	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	061b      	lsls	r3, r3, #24
 8006138:	431a      	orrs	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	071b      	lsls	r3, r3, #28
 800613e:	4944      	ldr	r1, [pc, #272]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006140:	4313      	orrs	r3, r2
 8006142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006146:	4b42      	ldr	r3, [pc, #264]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006148:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800614c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006154:	3b01      	subs	r3, #1
 8006156:	021b      	lsls	r3, r3, #8
 8006158:	493d      	ldr	r1, [pc, #244]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800615a:	4313      	orrs	r3, r2
 800615c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d022      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006170:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006174:	d11d      	bne.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006176:	4b36      	ldr	r3, [pc, #216]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800617c:	0e1b      	lsrs	r3, r3, #24
 800617e:	f003 030f 	and.w	r3, r3, #15
 8006182:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006184:	4b32      	ldr	r3, [pc, #200]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800618a:	0f1b      	lsrs	r3, r3, #28
 800618c:	f003 0307 	and.w	r3, r3, #7
 8006190:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	019a      	lsls	r2, r3, #6
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	041b      	lsls	r3, r3, #16
 800619e:	431a      	orrs	r2, r3
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	061b      	lsls	r3, r3, #24
 80061a4:	431a      	orrs	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	071b      	lsls	r3, r3, #28
 80061aa:	4929      	ldr	r1, [pc, #164]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0308 	and.w	r3, r3, #8
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d028      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80061be:	4b24      	ldr	r3, [pc, #144]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80061c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061c4:	0e1b      	lsrs	r3, r3, #24
 80061c6:	f003 030f 	and.w	r3, r3, #15
 80061ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80061cc:	4b20      	ldr	r3, [pc, #128]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80061ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061d2:	0c1b      	lsrs	r3, r3, #16
 80061d4:	f003 0303 	and.w	r3, r3, #3
 80061d8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	019a      	lsls	r2, r3, #6
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	041b      	lsls	r3, r3, #16
 80061e4:	431a      	orrs	r2, r3
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	061b      	lsls	r3, r3, #24
 80061ea:	431a      	orrs	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	69db      	ldr	r3, [r3, #28]
 80061f0:	071b      	lsls	r3, r3, #28
 80061f2:	4917      	ldr	r1, [pc, #92]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80061fa:	4b15      	ldr	r3, [pc, #84]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80061fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006200:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006208:	4911      	ldr	r1, [pc, #68]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800620a:	4313      	orrs	r3, r2
 800620c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006210:	4b0f      	ldr	r3, [pc, #60]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a0e      	ldr	r2, [pc, #56]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006216:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800621a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800621c:	f7fd f9da 	bl	80035d4 <HAL_GetTick>
 8006220:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006222:	e008      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006224:	f7fd f9d6 	bl	80035d4 <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	2b64      	cmp	r3, #100	@ 0x64
 8006230:	d901      	bls.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e007      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006236:	4b06      	ldr	r3, [pc, #24]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800623e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006242:	d1ef      	bne.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3720      	adds	r7, #32
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	40023800 	.word	0x40023800

08006254 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e09d      	b.n	80063a2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800626a:	2b00      	cmp	r3, #0
 800626c:	d108      	bne.n	8006280 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006276:	d009      	beq.n	800628c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	61da      	str	r2, [r3, #28]
 800627e:	e005      	b.n	800628c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b00      	cmp	r3, #0
 800629c:	d106      	bne.n	80062ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7fc fd8a 	bl	8002dc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2202      	movs	r2, #2
 80062b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80062cc:	d902      	bls.n	80062d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80062ce:	2300      	movs	r3, #0
 80062d0:	60fb      	str	r3, [r7, #12]
 80062d2:	e002      	b.n	80062da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80062d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80062d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80062e2:	d007      	beq.n	80062f4 <HAL_SPI_Init+0xa0>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80062ec:	d002      	beq.n	80062f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006304:	431a      	orrs	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	f003 0302 	and.w	r3, r3, #2
 800630e:	431a      	orrs	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	f003 0301 	and.w	r3, r3, #1
 8006318:	431a      	orrs	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006322:	431a      	orrs	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800632c:	431a      	orrs	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006336:	ea42 0103 	orr.w	r1, r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800633e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	430a      	orrs	r2, r1
 8006348:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	0c1b      	lsrs	r3, r3, #16
 8006350:	f003 0204 	and.w	r2, r3, #4
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006358:	f003 0310 	and.w	r3, r3, #16
 800635c:	431a      	orrs	r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006362:	f003 0308 	and.w	r3, r3, #8
 8006366:	431a      	orrs	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006370:	ea42 0103 	orr.w	r1, r2, r3
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	69da      	ldr	r2, [r3, #28]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006390:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
	...

080063ac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b088      	sub	sp, #32
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	099b      	lsrs	r3, r3, #6
 80063c8:	f003 0301 	and.w	r3, r3, #1
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10f      	bne.n	80063f0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00a      	beq.n	80063f0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	099b      	lsrs	r3, r3, #6
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d004      	beq.n	80063f0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	4798      	blx	r3
    return;
 80063ee:	e0d7      	b.n	80065a0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	085b      	lsrs	r3, r3, #1
 80063f4:	f003 0301 	and.w	r3, r3, #1
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00a      	beq.n	8006412 <HAL_SPI_IRQHandler+0x66>
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	09db      	lsrs	r3, r3, #7
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	2b00      	cmp	r3, #0
 8006406:	d004      	beq.n	8006412 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	4798      	blx	r3
    return;
 8006410:	e0c6      	b.n	80065a0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	095b      	lsrs	r3, r3, #5
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10c      	bne.n	8006438 <HAL_SPI_IRQHandler+0x8c>
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	099b      	lsrs	r3, r3, #6
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	d106      	bne.n	8006438 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	0a1b      	lsrs	r3, r3, #8
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	2b00      	cmp	r3, #0
 8006434:	f000 80b4 	beq.w	80065a0 <HAL_SPI_IRQHandler+0x1f4>
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	095b      	lsrs	r3, r3, #5
 800643c:	f003 0301 	and.w	r3, r3, #1
 8006440:	2b00      	cmp	r3, #0
 8006442:	f000 80ad 	beq.w	80065a0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	099b      	lsrs	r3, r3, #6
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	2b00      	cmp	r3, #0
 8006450:	d023      	beq.n	800649a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b03      	cmp	r3, #3
 800645c:	d011      	beq.n	8006482 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006462:	f043 0204 	orr.w	r2, r3, #4
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800646a:	2300      	movs	r3, #0
 800646c:	617b      	str	r3, [r7, #20]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	617b      	str	r3, [r7, #20]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	617b      	str	r3, [r7, #20]
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	e00b      	b.n	800649a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006482:	2300      	movs	r3, #0
 8006484:	613b      	str	r3, [r7, #16]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	613b      	str	r3, [r7, #16]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	613b      	str	r3, [r7, #16]
 8006496:	693b      	ldr	r3, [r7, #16]
        return;
 8006498:	e082      	b.n	80065a0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	095b      	lsrs	r3, r3, #5
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d014      	beq.n	80064d0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064aa:	f043 0201 	orr.w	r2, r3, #1
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80064b2:	2300      	movs	r3, #0
 80064b4:	60fb      	str	r3, [r7, #12]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	60fb      	str	r3, [r7, #12]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	0a1b      	lsrs	r3, r3, #8
 80064d4:	f003 0301 	and.w	r3, r3, #1
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00c      	beq.n	80064f6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064e0:	f043 0208 	orr.w	r2, r3, #8
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80064e8:	2300      	movs	r3, #0
 80064ea:	60bb      	str	r3, [r7, #8]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	60bb      	str	r3, [r7, #8]
 80064f4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d04f      	beq.n	800659e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	685a      	ldr	r2, [r3, #4]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800650c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	f003 0302 	and.w	r3, r3, #2
 800651c:	2b00      	cmp	r3, #0
 800651e:	d104      	bne.n	800652a <HAL_SPI_IRQHandler+0x17e>
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	f003 0301 	and.w	r3, r3, #1
 8006526:	2b00      	cmp	r3, #0
 8006528:	d034      	beq.n	8006594 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	685a      	ldr	r2, [r3, #4]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f022 0203 	bic.w	r2, r2, #3
 8006538:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800653e:	2b00      	cmp	r3, #0
 8006540:	d011      	beq.n	8006566 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006546:	4a18      	ldr	r2, [pc, #96]	@ (80065a8 <HAL_SPI_IRQHandler+0x1fc>)
 8006548:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800654e:	4618      	mov	r0, r3
 8006550:	f7fd faac 	bl	8003aac <HAL_DMA_Abort_IT>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d005      	beq.n	8006566 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800655e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800656a:	2b00      	cmp	r3, #0
 800656c:	d016      	beq.n	800659c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006572:	4a0d      	ldr	r2, [pc, #52]	@ (80065a8 <HAL_SPI_IRQHandler+0x1fc>)
 8006574:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800657a:	4618      	mov	r0, r3
 800657c:	f7fd fa96 	bl	8003aac <HAL_DMA_Abort_IT>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00a      	beq.n	800659c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800658a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8006592:	e003      	b.n	800659c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 f809 	bl	80065ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800659a:	e000      	b.n	800659e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800659c:	bf00      	nop
    return;
 800659e:	bf00      	nop
  }
}
 80065a0:	3720      	adds	r7, #32
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	080065c1 	.word	0x080065c1

080065ac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065cc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f7ff ffe5 	bl	80065ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80065e2:	bf00      	nop
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b082      	sub	sp, #8
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d101      	bne.n	80065fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e049      	b.n	8006690 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006602:	b2db      	uxtb	r3, r3
 8006604:	2b00      	cmp	r3, #0
 8006606:	d106      	bne.n	8006616 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f7fc fc21 	bl	8002e58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2202      	movs	r2, #2
 800661a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	3304      	adds	r3, #4
 8006626:	4619      	mov	r1, r3
 8006628:	4610      	mov	r0, r2
 800662a:	f000 fb93 	bl	8006d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d001      	beq.n	80066b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e054      	b.n	800675a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2202      	movs	r2, #2
 80066b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68da      	ldr	r2, [r3, #12]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f042 0201 	orr.w	r2, r2, #1
 80066c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a26      	ldr	r2, [pc, #152]	@ (8006768 <HAL_TIM_Base_Start_IT+0xd0>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d022      	beq.n	8006718 <HAL_TIM_Base_Start_IT+0x80>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066da:	d01d      	beq.n	8006718 <HAL_TIM_Base_Start_IT+0x80>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a22      	ldr	r2, [pc, #136]	@ (800676c <HAL_TIM_Base_Start_IT+0xd4>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d018      	beq.n	8006718 <HAL_TIM_Base_Start_IT+0x80>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a21      	ldr	r2, [pc, #132]	@ (8006770 <HAL_TIM_Base_Start_IT+0xd8>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d013      	beq.n	8006718 <HAL_TIM_Base_Start_IT+0x80>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a1f      	ldr	r2, [pc, #124]	@ (8006774 <HAL_TIM_Base_Start_IT+0xdc>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d00e      	beq.n	8006718 <HAL_TIM_Base_Start_IT+0x80>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a1e      	ldr	r2, [pc, #120]	@ (8006778 <HAL_TIM_Base_Start_IT+0xe0>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d009      	beq.n	8006718 <HAL_TIM_Base_Start_IT+0x80>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a1c      	ldr	r2, [pc, #112]	@ (800677c <HAL_TIM_Base_Start_IT+0xe4>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d004      	beq.n	8006718 <HAL_TIM_Base_Start_IT+0x80>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a1b      	ldr	r2, [pc, #108]	@ (8006780 <HAL_TIM_Base_Start_IT+0xe8>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d115      	bne.n	8006744 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	689a      	ldr	r2, [r3, #8]
 800671e:	4b19      	ldr	r3, [pc, #100]	@ (8006784 <HAL_TIM_Base_Start_IT+0xec>)
 8006720:	4013      	ands	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2b06      	cmp	r3, #6
 8006728:	d015      	beq.n	8006756 <HAL_TIM_Base_Start_IT+0xbe>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006730:	d011      	beq.n	8006756 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f042 0201 	orr.w	r2, r2, #1
 8006740:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006742:	e008      	b.n	8006756 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f042 0201 	orr.w	r2, r2, #1
 8006752:	601a      	str	r2, [r3, #0]
 8006754:	e000      	b.n	8006758 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006756:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	40010000 	.word	0x40010000
 800676c:	40000400 	.word	0x40000400
 8006770:	40000800 	.word	0x40000800
 8006774:	40000c00 	.word	0x40000c00
 8006778:	40010400 	.word	0x40010400
 800677c:	40014000 	.word	0x40014000
 8006780:	40001800 	.word	0x40001800
 8006784:	00010007 	.word	0x00010007

08006788 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d101      	bne.n	800679a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e049      	b.n	800682e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d106      	bne.n	80067b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f841 	bl	8006836 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2202      	movs	r2, #2
 80067b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	3304      	adds	r3, #4
 80067c4:	4619      	mov	r1, r3
 80067c6:	4610      	mov	r0, r2
 80067c8:	f000 fac4 	bl	8006d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006836:	b480      	push	{r7}
 8006838:	b083      	sub	sp, #12
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800683e:	bf00      	nop
 8006840:	370c      	adds	r7, #12
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800684a:	b580      	push	{r7, lr}
 800684c:	b084      	sub	sp, #16
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	2b00      	cmp	r3, #0
 800686a:	d020      	beq.n	80068ae <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	2b00      	cmp	r3, #0
 8006874:	d01b      	beq.n	80068ae <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f06f 0202 	mvn.w	r2, #2
 800687e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	f003 0303 	and.w	r3, r3, #3
 8006890:	2b00      	cmp	r3, #0
 8006892:	d003      	beq.n	800689c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 fa3f 	bl	8006d18 <HAL_TIM_IC_CaptureCallback>
 800689a:	e005      	b.n	80068a8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 fa31 	bl	8006d04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 fa42 	bl	8006d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	f003 0304 	and.w	r3, r3, #4
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d020      	beq.n	80068fa <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f003 0304 	and.w	r3, r3, #4
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d01b      	beq.n	80068fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f06f 0204 	mvn.w	r2, #4
 80068ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2202      	movs	r2, #2
 80068d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d003      	beq.n	80068e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fa19 	bl	8006d18 <HAL_TIM_IC_CaptureCallback>
 80068e6:	e005      	b.n	80068f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fa0b 	bl	8006d04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 fa1c 	bl	8006d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	f003 0308 	and.w	r3, r3, #8
 8006900:	2b00      	cmp	r3, #0
 8006902:	d020      	beq.n	8006946 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f003 0308 	and.w	r3, r3, #8
 800690a:	2b00      	cmp	r3, #0
 800690c:	d01b      	beq.n	8006946 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f06f 0208 	mvn.w	r2, #8
 8006916:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2204      	movs	r2, #4
 800691c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	69db      	ldr	r3, [r3, #28]
 8006924:	f003 0303 	and.w	r3, r3, #3
 8006928:	2b00      	cmp	r3, #0
 800692a:	d003      	beq.n	8006934 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f9f3 	bl	8006d18 <HAL_TIM_IC_CaptureCallback>
 8006932:	e005      	b.n	8006940 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 f9e5 	bl	8006d04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f9f6 	bl	8006d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	f003 0310 	and.w	r3, r3, #16
 800694c:	2b00      	cmp	r3, #0
 800694e:	d020      	beq.n	8006992 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f003 0310 	and.w	r3, r3, #16
 8006956:	2b00      	cmp	r3, #0
 8006958:	d01b      	beq.n	8006992 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f06f 0210 	mvn.w	r2, #16
 8006962:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2208      	movs	r2, #8
 8006968:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	69db      	ldr	r3, [r3, #28]
 8006970:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006974:	2b00      	cmp	r3, #0
 8006976:	d003      	beq.n	8006980 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 f9cd 	bl	8006d18 <HAL_TIM_IC_CaptureCallback>
 800697e:	e005      	b.n	800698c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 f9bf 	bl	8006d04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f9d0 	bl	8006d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00c      	beq.n	80069b6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d007      	beq.n	80069b6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f06f 0201 	mvn.w	r2, #1
 80069ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f7fb ff93 	bl	80028dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d104      	bne.n	80069ca <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00c      	beq.n	80069e4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d007      	beq.n	80069e4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80069dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fe68 	bl	80076b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00c      	beq.n	8006a08 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d007      	beq.n	8006a08 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 fe60 	bl	80076c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00c      	beq.n	8006a2c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d007      	beq.n	8006a2c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f98a 	bl	8006d40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	f003 0320 	and.w	r3, r3, #32
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00c      	beq.n	8006a50 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f003 0320 	and.w	r3, r3, #32
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d007      	beq.n	8006a50 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f06f 0220 	mvn.w	r2, #32
 8006a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fe28 	bl	80076a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a50:	bf00      	nop
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b086      	sub	sp, #24
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a64:	2300      	movs	r3, #0
 8006a66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d101      	bne.n	8006a76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a72:	2302      	movs	r3, #2
 8006a74:	e0ff      	b.n	8006c76 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2b14      	cmp	r3, #20
 8006a82:	f200 80f0 	bhi.w	8006c66 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006a86:	a201      	add	r2, pc, #4	@ (adr r2, 8006a8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8c:	08006ae1 	.word	0x08006ae1
 8006a90:	08006c67 	.word	0x08006c67
 8006a94:	08006c67 	.word	0x08006c67
 8006a98:	08006c67 	.word	0x08006c67
 8006a9c:	08006b21 	.word	0x08006b21
 8006aa0:	08006c67 	.word	0x08006c67
 8006aa4:	08006c67 	.word	0x08006c67
 8006aa8:	08006c67 	.word	0x08006c67
 8006aac:	08006b63 	.word	0x08006b63
 8006ab0:	08006c67 	.word	0x08006c67
 8006ab4:	08006c67 	.word	0x08006c67
 8006ab8:	08006c67 	.word	0x08006c67
 8006abc:	08006ba3 	.word	0x08006ba3
 8006ac0:	08006c67 	.word	0x08006c67
 8006ac4:	08006c67 	.word	0x08006c67
 8006ac8:	08006c67 	.word	0x08006c67
 8006acc:	08006be5 	.word	0x08006be5
 8006ad0:	08006c67 	.word	0x08006c67
 8006ad4:	08006c67 	.word	0x08006c67
 8006ad8:	08006c67 	.word	0x08006c67
 8006adc:	08006c25 	.word	0x08006c25
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68b9      	ldr	r1, [r7, #8]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 f9da 	bl	8006ea0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	699a      	ldr	r2, [r3, #24]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f042 0208 	orr.w	r2, r2, #8
 8006afa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	699a      	ldr	r2, [r3, #24]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f022 0204 	bic.w	r2, r2, #4
 8006b0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6999      	ldr	r1, [r3, #24]
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	691a      	ldr	r2, [r3, #16]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	619a      	str	r2, [r3, #24]
      break;
 8006b1e:	e0a5      	b.n	8006c6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68b9      	ldr	r1, [r7, #8]
 8006b26:	4618      	mov	r0, r3
 8006b28:	f000 fa2c 	bl	8006f84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	699a      	ldr	r2, [r3, #24]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	699a      	ldr	r2, [r3, #24]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6999      	ldr	r1, [r3, #24]
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	021a      	lsls	r2, r3, #8
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	619a      	str	r2, [r3, #24]
      break;
 8006b60:	e084      	b.n	8006c6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68b9      	ldr	r1, [r7, #8]
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f000 fa83 	bl	8007074 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	69da      	ldr	r2, [r3, #28]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f042 0208 	orr.w	r2, r2, #8
 8006b7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	69da      	ldr	r2, [r3, #28]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f022 0204 	bic.w	r2, r2, #4
 8006b8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	69d9      	ldr	r1, [r3, #28]
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	691a      	ldr	r2, [r3, #16]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	430a      	orrs	r2, r1
 8006b9e:	61da      	str	r2, [r3, #28]
      break;
 8006ba0:	e064      	b.n	8006c6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68b9      	ldr	r1, [r7, #8]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f000 fad9 	bl	8007160 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	69da      	ldr	r2, [r3, #28]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	69da      	ldr	r2, [r3, #28]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	69d9      	ldr	r1, [r3, #28]
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	021a      	lsls	r2, r3, #8
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	61da      	str	r2, [r3, #28]
      break;
 8006be2:	e043      	b.n	8006c6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68b9      	ldr	r1, [r7, #8]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f000 fb10 	bl	8007210 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f042 0208 	orr.w	r2, r2, #8
 8006bfe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f022 0204 	bic.w	r2, r2, #4
 8006c0e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	691a      	ldr	r2, [r3, #16]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006c22:	e023      	b.n	8006c6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	68b9      	ldr	r1, [r7, #8]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f000 fb42 	bl	80072b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c3e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c4e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	021a      	lsls	r2, r3, #8
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	430a      	orrs	r2, r1
 8006c62:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006c64:	e002      	b.n	8006c6c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	75fb      	strb	r3, [r7, #23]
      break;
 8006c6a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3718      	adds	r7, #24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop

08006c80 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d101      	bne.n	8006c98 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006c94:	2302      	movs	r3, #2
 8006c96:	e031      	b.n	8006cfc <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006ca8:	6839      	ldr	r1, [r7, #0]
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fb56 	bl	800735c <TIM_SlaveTimer_SetConfig>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d009      	beq.n	8006cca <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e018      	b.n	8006cfc <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68da      	ldr	r2, [r3, #12]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cd8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68da      	ldr	r2, [r3, #12]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006ce8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3708      	adds	r7, #8
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d20:	bf00      	nop
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a43      	ldr	r2, [pc, #268]	@ (8006e74 <TIM_Base_SetConfig+0x120>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d013      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d72:	d00f      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a40      	ldr	r2, [pc, #256]	@ (8006e78 <TIM_Base_SetConfig+0x124>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d00b      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a3f      	ldr	r2, [pc, #252]	@ (8006e7c <TIM_Base_SetConfig+0x128>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d007      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a3e      	ldr	r2, [pc, #248]	@ (8006e80 <TIM_Base_SetConfig+0x12c>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d003      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a3d      	ldr	r2, [pc, #244]	@ (8006e84 <TIM_Base_SetConfig+0x130>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d108      	bne.n	8006da6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a32      	ldr	r2, [pc, #200]	@ (8006e74 <TIM_Base_SetConfig+0x120>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d02b      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006db4:	d027      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a2f      	ldr	r2, [pc, #188]	@ (8006e78 <TIM_Base_SetConfig+0x124>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d023      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a2e      	ldr	r2, [pc, #184]	@ (8006e7c <TIM_Base_SetConfig+0x128>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d01f      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a2d      	ldr	r2, [pc, #180]	@ (8006e80 <TIM_Base_SetConfig+0x12c>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d01b      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a2c      	ldr	r2, [pc, #176]	@ (8006e84 <TIM_Base_SetConfig+0x130>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d017      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a2b      	ldr	r2, [pc, #172]	@ (8006e88 <TIM_Base_SetConfig+0x134>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d013      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a2a      	ldr	r2, [pc, #168]	@ (8006e8c <TIM_Base_SetConfig+0x138>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d00f      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a29      	ldr	r2, [pc, #164]	@ (8006e90 <TIM_Base_SetConfig+0x13c>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d00b      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a28      	ldr	r2, [pc, #160]	@ (8006e94 <TIM_Base_SetConfig+0x140>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d007      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a27      	ldr	r2, [pc, #156]	@ (8006e98 <TIM_Base_SetConfig+0x144>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d003      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a26      	ldr	r2, [pc, #152]	@ (8006e9c <TIM_Base_SetConfig+0x148>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d108      	bne.n	8006e18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	689a      	ldr	r2, [r3, #8]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a0e      	ldr	r2, [pc, #56]	@ (8006e74 <TIM_Base_SetConfig+0x120>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d003      	beq.n	8006e46 <TIM_Base_SetConfig+0xf2>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a10      	ldr	r2, [pc, #64]	@ (8006e84 <TIM_Base_SetConfig+0x130>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d103      	bne.n	8006e4e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	691a      	ldr	r2, [r3, #16]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f043 0204 	orr.w	r2, r3, #4
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	601a      	str	r2, [r3, #0]
}
 8006e66:	bf00      	nop
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	40010000 	.word	0x40010000
 8006e78:	40000400 	.word	0x40000400
 8006e7c:	40000800 	.word	0x40000800
 8006e80:	40000c00 	.word	0x40000c00
 8006e84:	40010400 	.word	0x40010400
 8006e88:	40014000 	.word	0x40014000
 8006e8c:	40014400 	.word	0x40014400
 8006e90:	40014800 	.word	0x40014800
 8006e94:	40001800 	.word	0x40001800
 8006e98:	40001c00 	.word	0x40001c00
 8006e9c:	40002000 	.word	0x40002000

08006ea0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b087      	sub	sp, #28
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a1b      	ldr	r3, [r3, #32]
 8006eb4:	f023 0201 	bic.w	r2, r3, #1
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	4b2b      	ldr	r3, [pc, #172]	@ (8006f78 <TIM_OC1_SetConfig+0xd8>)
 8006ecc:	4013      	ands	r3, r2
 8006ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f023 0303 	bic.w	r3, r3, #3
 8006ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	f023 0302 	bic.w	r3, r3, #2
 8006ee8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a21      	ldr	r2, [pc, #132]	@ (8006f7c <TIM_OC1_SetConfig+0xdc>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d003      	beq.n	8006f04 <TIM_OC1_SetConfig+0x64>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a20      	ldr	r2, [pc, #128]	@ (8006f80 <TIM_OC1_SetConfig+0xe0>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d10c      	bne.n	8006f1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	f023 0308 	bic.w	r3, r3, #8
 8006f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	f023 0304 	bic.w	r3, r3, #4
 8006f1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a16      	ldr	r2, [pc, #88]	@ (8006f7c <TIM_OC1_SetConfig+0xdc>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d003      	beq.n	8006f2e <TIM_OC1_SetConfig+0x8e>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a15      	ldr	r2, [pc, #84]	@ (8006f80 <TIM_OC1_SetConfig+0xe0>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d111      	bne.n	8006f52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	693a      	ldr	r2, [r7, #16]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	685a      	ldr	r2, [r3, #4]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	621a      	str	r2, [r3, #32]
}
 8006f6c:	bf00      	nop
 8006f6e:	371c      	adds	r7, #28
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr
 8006f78:	fffeff8f 	.word	0xfffeff8f
 8006f7c:	40010000 	.word	0x40010000
 8006f80:	40010400 	.word	0x40010400

08006f84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b087      	sub	sp, #28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6a1b      	ldr	r3, [r3, #32]
 8006f98:	f023 0210 	bic.w	r2, r3, #16
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	4b2e      	ldr	r3, [pc, #184]	@ (8007068 <TIM_OC2_SetConfig+0xe4>)
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	021b      	lsls	r3, r3, #8
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	f023 0320 	bic.w	r3, r3, #32
 8006fce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	011b      	lsls	r3, r3, #4
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a23      	ldr	r2, [pc, #140]	@ (800706c <TIM_OC2_SetConfig+0xe8>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d003      	beq.n	8006fec <TIM_OC2_SetConfig+0x68>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a22      	ldr	r2, [pc, #136]	@ (8007070 <TIM_OC2_SetConfig+0xec>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d10d      	bne.n	8007008 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ff2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	011b      	lsls	r3, r3, #4
 8006ffa:	697a      	ldr	r2, [r7, #20]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007006:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a18      	ldr	r2, [pc, #96]	@ (800706c <TIM_OC2_SetConfig+0xe8>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d003      	beq.n	8007018 <TIM_OC2_SetConfig+0x94>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a17      	ldr	r2, [pc, #92]	@ (8007070 <TIM_OC2_SetConfig+0xec>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d113      	bne.n	8007040 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800701e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007026:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	695b      	ldr	r3, [r3, #20]
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	4313      	orrs	r3, r2
 8007032:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	693a      	ldr	r2, [r7, #16]
 800703c:	4313      	orrs	r3, r2
 800703e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	621a      	str	r2, [r3, #32]
}
 800705a:	bf00      	nop
 800705c:	371c      	adds	r7, #28
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	feff8fff 	.word	0xfeff8fff
 800706c:	40010000 	.word	0x40010000
 8007070:	40010400 	.word	0x40010400

08007074 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007074:	b480      	push	{r7}
 8007076:	b087      	sub	sp, #28
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a1b      	ldr	r3, [r3, #32]
 8007088:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	69db      	ldr	r3, [r3, #28]
 800709a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	4b2d      	ldr	r3, [pc, #180]	@ (8007154 <TIM_OC3_SetConfig+0xe0>)
 80070a0:	4013      	ands	r3, r2
 80070a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f023 0303 	bic.w	r3, r3, #3
 80070aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80070bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	021b      	lsls	r3, r3, #8
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a22      	ldr	r2, [pc, #136]	@ (8007158 <TIM_OC3_SetConfig+0xe4>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d003      	beq.n	80070da <TIM_OC3_SetConfig+0x66>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a21      	ldr	r2, [pc, #132]	@ (800715c <TIM_OC3_SetConfig+0xe8>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d10d      	bne.n	80070f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80070e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	021b      	lsls	r3, r3, #8
 80070e8:	697a      	ldr	r2, [r7, #20]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80070f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a17      	ldr	r2, [pc, #92]	@ (8007158 <TIM_OC3_SetConfig+0xe4>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d003      	beq.n	8007106 <TIM_OC3_SetConfig+0x92>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a16      	ldr	r2, [pc, #88]	@ (800715c <TIM_OC3_SetConfig+0xe8>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d113      	bne.n	800712e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800710c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007114:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	011b      	lsls	r3, r3, #4
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	4313      	orrs	r3, r2
 8007120:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	011b      	lsls	r3, r3, #4
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	4313      	orrs	r3, r2
 800712c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	685a      	ldr	r2, [r3, #4]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	621a      	str	r2, [r3, #32]
}
 8007148:	bf00      	nop
 800714a:	371c      	adds	r7, #28
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr
 8007154:	fffeff8f 	.word	0xfffeff8f
 8007158:	40010000 	.word	0x40010000
 800715c:	40010400 	.word	0x40010400

08007160 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007160:	b480      	push	{r7}
 8007162:	b087      	sub	sp, #28
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a1b      	ldr	r3, [r3, #32]
 8007174:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	69db      	ldr	r3, [r3, #28]
 8007186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	4b1e      	ldr	r3, [pc, #120]	@ (8007204 <TIM_OC4_SetConfig+0xa4>)
 800718c:	4013      	ands	r3, r2
 800718e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007196:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	021b      	lsls	r3, r3, #8
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80071aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	031b      	lsls	r3, r3, #12
 80071b2:	693a      	ldr	r2, [r7, #16]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a13      	ldr	r2, [pc, #76]	@ (8007208 <TIM_OC4_SetConfig+0xa8>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d003      	beq.n	80071c8 <TIM_OC4_SetConfig+0x68>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a12      	ldr	r2, [pc, #72]	@ (800720c <TIM_OC4_SetConfig+0xac>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d109      	bne.n	80071dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	695b      	ldr	r3, [r3, #20]
 80071d4:	019b      	lsls	r3, r3, #6
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	4313      	orrs	r3, r2
 80071da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	685a      	ldr	r2, [r3, #4]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	693a      	ldr	r2, [r7, #16]
 80071f4:	621a      	str	r2, [r3, #32]
}
 80071f6:	bf00      	nop
 80071f8:	371c      	adds	r7, #28
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	feff8fff 	.word	0xfeff8fff
 8007208:	40010000 	.word	0x40010000
 800720c:	40010400 	.word	0x40010400

08007210 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007210:	b480      	push	{r7}
 8007212:	b087      	sub	sp, #28
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a1b      	ldr	r3, [r3, #32]
 8007224:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	4b1b      	ldr	r3, [pc, #108]	@ (80072a8 <TIM_OC5_SetConfig+0x98>)
 800723c:	4013      	ands	r3, r2
 800723e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	4313      	orrs	r3, r2
 8007248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007250:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	041b      	lsls	r3, r3, #16
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	4313      	orrs	r3, r2
 800725c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4a12      	ldr	r2, [pc, #72]	@ (80072ac <TIM_OC5_SetConfig+0x9c>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d003      	beq.n	800726e <TIM_OC5_SetConfig+0x5e>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4a11      	ldr	r2, [pc, #68]	@ (80072b0 <TIM_OC5_SetConfig+0xa0>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d109      	bne.n	8007282 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007274:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	021b      	lsls	r3, r3, #8
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	4313      	orrs	r3, r2
 8007280:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	697a      	ldr	r2, [r7, #20]
 8007286:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	685a      	ldr	r2, [r3, #4]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	621a      	str	r2, [r3, #32]
}
 800729c:	bf00      	nop
 800729e:	371c      	adds	r7, #28
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr
 80072a8:	fffeff8f 	.word	0xfffeff8f
 80072ac:	40010000 	.word	0x40010000
 80072b0:	40010400 	.word	0x40010400

080072b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b087      	sub	sp, #28
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a1b      	ldr	r3, [r3, #32]
 80072c8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	4b1c      	ldr	r3, [pc, #112]	@ (8007350 <TIM_OC6_SetConfig+0x9c>)
 80072e0:	4013      	ands	r3, r2
 80072e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	021b      	lsls	r3, r3, #8
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80072f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	051b      	lsls	r3, r3, #20
 80072fe:	693a      	ldr	r2, [r7, #16]
 8007300:	4313      	orrs	r3, r2
 8007302:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a13      	ldr	r2, [pc, #76]	@ (8007354 <TIM_OC6_SetConfig+0xa0>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d003      	beq.n	8007314 <TIM_OC6_SetConfig+0x60>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a12      	ldr	r2, [pc, #72]	@ (8007358 <TIM_OC6_SetConfig+0xa4>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d109      	bne.n	8007328 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800731a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	695b      	ldr	r3, [r3, #20]
 8007320:	029b      	lsls	r3, r3, #10
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	4313      	orrs	r3, r2
 8007326:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685a      	ldr	r2, [r3, #4]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	693a      	ldr	r2, [r7, #16]
 8007340:	621a      	str	r2, [r3, #32]
}
 8007342:	bf00      	nop
 8007344:	371c      	adds	r7, #28
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	feff8fff 	.word	0xfeff8fff
 8007354:	40010000 	.word	0x40010000
 8007358:	40010400 	.word	0x40010400

0800735c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b086      	sub	sp, #24
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007366:	2300      	movs	r3, #0
 8007368:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007378:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	4313      	orrs	r3, r2
 8007382:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007384:	693a      	ldr	r2, [r7, #16]
 8007386:	4b3e      	ldr	r3, [pc, #248]	@ (8007480 <TIM_SlaveTimer_SetConfig+0x124>)
 8007388:	4013      	ands	r3, r2
 800738a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	4313      	orrs	r3, r2
 8007394:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	693a      	ldr	r2, [r7, #16]
 800739c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	2b70      	cmp	r3, #112	@ 0x70
 80073a4:	d01a      	beq.n	80073dc <TIM_SlaveTimer_SetConfig+0x80>
 80073a6:	2b70      	cmp	r3, #112	@ 0x70
 80073a8:	d860      	bhi.n	800746c <TIM_SlaveTimer_SetConfig+0x110>
 80073aa:	2b60      	cmp	r3, #96	@ 0x60
 80073ac:	d054      	beq.n	8007458 <TIM_SlaveTimer_SetConfig+0xfc>
 80073ae:	2b60      	cmp	r3, #96	@ 0x60
 80073b0:	d85c      	bhi.n	800746c <TIM_SlaveTimer_SetConfig+0x110>
 80073b2:	2b50      	cmp	r3, #80	@ 0x50
 80073b4:	d046      	beq.n	8007444 <TIM_SlaveTimer_SetConfig+0xe8>
 80073b6:	2b50      	cmp	r3, #80	@ 0x50
 80073b8:	d858      	bhi.n	800746c <TIM_SlaveTimer_SetConfig+0x110>
 80073ba:	2b40      	cmp	r3, #64	@ 0x40
 80073bc:	d019      	beq.n	80073f2 <TIM_SlaveTimer_SetConfig+0x96>
 80073be:	2b40      	cmp	r3, #64	@ 0x40
 80073c0:	d854      	bhi.n	800746c <TIM_SlaveTimer_SetConfig+0x110>
 80073c2:	2b30      	cmp	r3, #48	@ 0x30
 80073c4:	d055      	beq.n	8007472 <TIM_SlaveTimer_SetConfig+0x116>
 80073c6:	2b30      	cmp	r3, #48	@ 0x30
 80073c8:	d850      	bhi.n	800746c <TIM_SlaveTimer_SetConfig+0x110>
 80073ca:	2b20      	cmp	r3, #32
 80073cc:	d051      	beq.n	8007472 <TIM_SlaveTimer_SetConfig+0x116>
 80073ce:	2b20      	cmp	r3, #32
 80073d0:	d84c      	bhi.n	800746c <TIM_SlaveTimer_SetConfig+0x110>
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d04d      	beq.n	8007472 <TIM_SlaveTimer_SetConfig+0x116>
 80073d6:	2b10      	cmp	r3, #16
 80073d8:	d04b      	beq.n	8007472 <TIM_SlaveTimer_SetConfig+0x116>
 80073da:	e047      	b.n	800746c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80073ec:	f000 f8a9 	bl	8007542 <TIM_ETR_SetConfig>
      break;
 80073f0:	e040      	b.n	8007474 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2b05      	cmp	r3, #5
 80073f8:	d101      	bne.n	80073fe <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	e03b      	b.n	8007476 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	6a1b      	ldr	r3, [r3, #32]
 8007404:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	6a1a      	ldr	r2, [r3, #32]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f022 0201 	bic.w	r2, r2, #1
 8007414:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007424:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	011b      	lsls	r3, r3, #4
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	4313      	orrs	r3, r2
 8007430:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68ba      	ldr	r2, [r7, #8]
 8007438:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	621a      	str	r2, [r3, #32]
      break;
 8007442:	e017      	b.n	8007474 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007450:	461a      	mov	r2, r3
 8007452:	f000 f817 	bl	8007484 <TIM_TI1_ConfigInputStage>
      break;
 8007456:	e00d      	b.n	8007474 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007464:	461a      	mov	r2, r3
 8007466:	f000 f83c 	bl	80074e2 <TIM_TI2_ConfigInputStage>
      break;
 800746a:	e003      	b.n	8007474 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	75fb      	strb	r3, [r7, #23]
      break;
 8007470:	e000      	b.n	8007474 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8007472:	bf00      	nop
  }

  return status;
 8007474:	7dfb      	ldrb	r3, [r7, #23]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3718      	adds	r7, #24
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	fffefff8 	.word	0xfffefff8

08007484 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007484:	b480      	push	{r7}
 8007486:	b087      	sub	sp, #28
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6a1b      	ldr	r3, [r3, #32]
 8007494:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6a1b      	ldr	r3, [r3, #32]
 800749a:	f023 0201 	bic.w	r2, r3, #1
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80074ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	011b      	lsls	r3, r3, #4
 80074b4:	693a      	ldr	r2, [r7, #16]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	f023 030a 	bic.w	r3, r3, #10
 80074c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	697a      	ldr	r2, [r7, #20]
 80074d4:	621a      	str	r2, [r3, #32]
}
 80074d6:	bf00      	nop
 80074d8:	371c      	adds	r7, #28
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074e2:	b480      	push	{r7}
 80074e4:	b087      	sub	sp, #28
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	60f8      	str	r0, [r7, #12]
 80074ea:	60b9      	str	r1, [r7, #8]
 80074ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6a1b      	ldr	r3, [r3, #32]
 80074f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6a1b      	ldr	r3, [r3, #32]
 80074f8:	f023 0210 	bic.w	r2, r3, #16
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	699b      	ldr	r3, [r3, #24]
 8007504:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800750c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	031b      	lsls	r3, r3, #12
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	4313      	orrs	r3, r2
 8007516:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800751e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	011b      	lsls	r3, r3, #4
 8007524:	697a      	ldr	r2, [r7, #20]
 8007526:	4313      	orrs	r3, r2
 8007528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	693a      	ldr	r2, [r7, #16]
 800752e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	697a      	ldr	r2, [r7, #20]
 8007534:	621a      	str	r2, [r3, #32]
}
 8007536:	bf00      	nop
 8007538:	371c      	adds	r7, #28
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr

08007542 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007542:	b480      	push	{r7}
 8007544:	b087      	sub	sp, #28
 8007546:	af00      	add	r7, sp, #0
 8007548:	60f8      	str	r0, [r7, #12]
 800754a:	60b9      	str	r1, [r7, #8]
 800754c:	607a      	str	r2, [r7, #4]
 800754e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800755c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	021a      	lsls	r2, r3, #8
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	431a      	orrs	r2, r3
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	4313      	orrs	r3, r2
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	4313      	orrs	r3, r2
 800756e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	697a      	ldr	r2, [r7, #20]
 8007574:	609a      	str	r2, [r3, #8]
}
 8007576:	bf00      	nop
 8007578:	371c      	adds	r7, #28
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr
	...

08007584 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007594:	2b01      	cmp	r3, #1
 8007596:	d101      	bne.n	800759c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007598:	2302      	movs	r3, #2
 800759a:	e06d      	b.n	8007678 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2202      	movs	r2, #2
 80075a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a30      	ldr	r2, [pc, #192]	@ (8007684 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d004      	beq.n	80075d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a2f      	ldr	r2, [pc, #188]	@ (8007688 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d108      	bne.n	80075e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80075d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	4313      	orrs	r3, r2
 80075e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a20      	ldr	r2, [pc, #128]	@ (8007684 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d022      	beq.n	800764c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800760e:	d01d      	beq.n	800764c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a1d      	ldr	r2, [pc, #116]	@ (800768c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d018      	beq.n	800764c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a1c      	ldr	r2, [pc, #112]	@ (8007690 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d013      	beq.n	800764c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a1a      	ldr	r2, [pc, #104]	@ (8007694 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d00e      	beq.n	800764c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a15      	ldr	r2, [pc, #84]	@ (8007688 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d009      	beq.n	800764c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a16      	ldr	r2, [pc, #88]	@ (8007698 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d004      	beq.n	800764c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a15      	ldr	r2, [pc, #84]	@ (800769c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d10c      	bne.n	8007666 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007652:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	68ba      	ldr	r2, [r7, #8]
 800765a:	4313      	orrs	r3, r2
 800765c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68ba      	ldr	r2, [r7, #8]
 8007664:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3714      	adds	r7, #20
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	40010000 	.word	0x40010000
 8007688:	40010400 	.word	0x40010400
 800768c:	40000400 	.word	0x40000400
 8007690:	40000800 	.word	0x40000800
 8007694:	40000c00 	.word	0x40000c00
 8007698:	40014000 	.word	0x40014000
 800769c:	40001800 	.word	0x40001800

080076a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076bc:	bf00      	nop
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d101      	bne.n	80076ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e040      	b.n	8007770 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d106      	bne.n	8007704 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f7fb fc08 	bl	8002f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2224      	movs	r2, #36	@ 0x24
 8007708:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f022 0201 	bic.w	r2, r2, #1
 8007718:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800771e:	2b00      	cmp	r3, #0
 8007720:	d002      	beq.n	8007728 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 ff28 	bl	8008578 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 fcc1 	bl	80080b0 <UART_SetConfig>
 800772e:	4603      	mov	r3, r0
 8007730:	2b01      	cmp	r3, #1
 8007732:	d101      	bne.n	8007738 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e01b      	b.n	8007770 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	685a      	ldr	r2, [r3, #4]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007746:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	689a      	ldr	r2, [r3, #8]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007756:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f042 0201 	orr.w	r2, r2, #1
 8007766:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 ffa7 	bl	80086bc <UART_CheckIdleState>
 800776e:	4603      	mov	r3, r0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b08a      	sub	sp, #40	@ 0x28
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	4613      	mov	r3, r2
 8007784:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800778a:	2b20      	cmp	r3, #32
 800778c:	d165      	bne.n	800785a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d002      	beq.n	800779a <HAL_UART_Transmit_DMA+0x22>
 8007794:	88fb      	ldrh	r3, [r7, #6]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d101      	bne.n	800779e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e05e      	b.n	800785c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	88fa      	ldrh	r2, [r7, #6]
 80077a8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	88fa      	ldrh	r2, [r7, #6]
 80077b0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2221      	movs	r2, #33	@ 0x21
 80077c0:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d027      	beq.n	800781a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077ce:	4a25      	ldr	r2, [pc, #148]	@ (8007864 <HAL_UART_Transmit_DMA+0xec>)
 80077d0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077d6:	4a24      	ldr	r2, [pc, #144]	@ (8007868 <HAL_UART_Transmit_DMA+0xf0>)
 80077d8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077de:	4a23      	ldr	r2, [pc, #140]	@ (800786c <HAL_UART_Transmit_DMA+0xf4>)
 80077e0:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077e6:	2200      	movs	r2, #0
 80077e8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077f2:	4619      	mov	r1, r3
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	3328      	adds	r3, #40	@ 0x28
 80077fa:	461a      	mov	r2, r3
 80077fc:	88fb      	ldrh	r3, [r7, #6]
 80077fe:	f7fc f885 	bl	800390c <HAL_DMA_Start_IT>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d008      	beq.n	800781a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2210      	movs	r2, #16
 800780c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2220      	movs	r2, #32
 8007814:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e020      	b.n	800785c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2240      	movs	r2, #64	@ 0x40
 8007820:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	3308      	adds	r3, #8
 8007828:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	e853 3f00 	ldrex	r3, [r3]
 8007830:	613b      	str	r3, [r7, #16]
   return(result);
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007838:	627b      	str	r3, [r7, #36]	@ 0x24
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	3308      	adds	r3, #8
 8007840:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007842:	623a      	str	r2, [r7, #32]
 8007844:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007846:	69f9      	ldr	r1, [r7, #28]
 8007848:	6a3a      	ldr	r2, [r7, #32]
 800784a:	e841 2300 	strex	r3, r2, [r1]
 800784e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1e5      	bne.n	8007822 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8007856:	2300      	movs	r3, #0
 8007858:	e000      	b.n	800785c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800785a:	2302      	movs	r3, #2
  }
}
 800785c:	4618      	mov	r0, r3
 800785e:	3728      	adds	r7, #40	@ 0x28
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	08008b3d 	.word	0x08008b3d
 8007868:	08008bd3 	.word	0x08008bd3
 800786c:	08008dbf 	.word	0x08008dbf

08007870 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b08a      	sub	sp, #40	@ 0x28
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	4613      	mov	r3, r2
 800787c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007884:	2b20      	cmp	r3, #32
 8007886:	d132      	bne.n	80078ee <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d002      	beq.n	8007894 <HAL_UART_Receive_DMA+0x24>
 800788e:	88fb      	ldrh	r3, [r7, #6]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d101      	bne.n	8007898 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	e02b      	b.n	80078f0 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d018      	beq.n	80078de <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	e853 3f00 	ldrex	r3, [r3]
 80078b8:	613b      	str	r3, [r7, #16]
   return(result);
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80078c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	461a      	mov	r2, r3
 80078c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ca:	623b      	str	r3, [r7, #32]
 80078cc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ce:	69f9      	ldr	r1, [r7, #28]
 80078d0:	6a3a      	ldr	r2, [r7, #32]
 80078d2:	e841 2300 	strex	r3, r2, [r1]
 80078d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1e6      	bne.n	80078ac <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80078de:	88fb      	ldrh	r3, [r7, #6]
 80078e0:	461a      	mov	r2, r3
 80078e2:	68b9      	ldr	r1, [r7, #8]
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f000 ffff 	bl	80088e8 <UART_Start_Receive_DMA>
 80078ea:	4603      	mov	r3, r0
 80078ec:	e000      	b.n	80078f0 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 80078ee:	2302      	movs	r3, #2
  }
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3728      	adds	r7, #40	@ 0x28
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b090      	sub	sp, #64	@ 0x40
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007904:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800790c:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007918:	2b80      	cmp	r3, #128	@ 0x80
 800791a:	d139      	bne.n	8007990 <HAL_UART_DMAStop+0x98>
 800791c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800791e:	2b21      	cmp	r3, #33	@ 0x21
 8007920:	d136      	bne.n	8007990 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	3308      	adds	r3, #8
 8007928:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792a:	6a3b      	ldr	r3, [r7, #32]
 800792c:	e853 3f00 	ldrex	r3, [r3]
 8007930:	61fb      	str	r3, [r7, #28]
   return(result);
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007938:	637b      	str	r3, [r7, #52]	@ 0x34
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	3308      	adds	r3, #8
 8007940:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007942:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007944:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007946:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007948:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800794a:	e841 2300 	strex	r3, r2, [r1]
 800794e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1e5      	bne.n	8007922 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800795a:	2b00      	cmp	r3, #0
 800795c:	d015      	beq.n	800798a <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007962:	4618      	mov	r0, r3
 8007964:	f7fc f832 	bl	80039cc <HAL_DMA_Abort>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00d      	beq.n	800798a <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007972:	4618      	mov	r0, r3
 8007974:	f7fc fa46 	bl	8003e04 <HAL_DMA_GetError>
 8007978:	4603      	mov	r3, r0
 800797a:	2b20      	cmp	r3, #32
 800797c:	d105      	bne.n	800798a <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2210      	movs	r2, #16
 8007982:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007986:	2303      	movs	r3, #3
 8007988:	e044      	b.n	8007a14 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f001 f84c 	bl	8008a28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800799a:	2b40      	cmp	r3, #64	@ 0x40
 800799c:	d139      	bne.n	8007a12 <HAL_UART_DMAStop+0x11a>
 800799e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a0:	2b22      	cmp	r3, #34	@ 0x22
 80079a2:	d136      	bne.n	8007a12 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	3308      	adds	r3, #8
 80079aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	e853 3f00 	ldrex	r3, [r3]
 80079b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	3308      	adds	r3, #8
 80079c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079c4:	61ba      	str	r2, [r7, #24]
 80079c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c8:	6979      	ldr	r1, [r7, #20]
 80079ca:	69ba      	ldr	r2, [r7, #24]
 80079cc:	e841 2300 	strex	r3, r2, [r1]
 80079d0:	613b      	str	r3, [r7, #16]
   return(result);
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1e5      	bne.n	80079a4 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d015      	beq.n	8007a0c <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7fb fff1 	bl	80039cc <HAL_DMA_Abort>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00d      	beq.n	8007a0c <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fc fa05 	bl	8003e04 <HAL_DMA_GetError>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b20      	cmp	r3, #32
 80079fe:	d105      	bne.n	8007a0c <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2210      	movs	r2, #16
 8007a04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	e003      	b.n	8007a14 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f001 f831 	bl	8008a74 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3740      	adds	r7, #64	@ 0x40
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b0ba      	sub	sp, #232	@ 0xe8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	69db      	ldr	r3, [r3, #28]
 8007a2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007a42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007a46:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007a50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d115      	bne.n	8007a84 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a5c:	f003 0320 	and.w	r3, r3, #32
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00f      	beq.n	8007a84 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a68:	f003 0320 	and.w	r3, r3, #32
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d009      	beq.n	8007a84 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f000 82c6 	beq.w	8008006 <HAL_UART_IRQHandler+0x5ea>
      {
        huart->RxISR(huart);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	4798      	blx	r3
      }
      return;
 8007a82:	e2c0      	b.n	8008006 <HAL_UART_IRQHandler+0x5ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007a84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f000 8117 	beq.w	8007cbc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007a8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a92:	f003 0301 	and.w	r3, r3, #1
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d106      	bne.n	8007aa8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007a9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007a9e:	4b85      	ldr	r3, [pc, #532]	@ (8007cb4 <HAL_UART_IRQHandler+0x298>)
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f000 810a 	beq.w	8007cbc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007aac:	f003 0301 	and.w	r3, r3, #1
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d011      	beq.n	8007ad8 <HAL_UART_IRQHandler+0xbc>
 8007ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00b      	beq.n	8007ad8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ace:	f043 0201 	orr.w	r2, r3, #1
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007adc:	f003 0302 	and.w	r3, r3, #2
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d011      	beq.n	8007b08 <HAL_UART_IRQHandler+0xec>
 8007ae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ae8:	f003 0301 	and.w	r3, r3, #1
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00b      	beq.n	8007b08 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2202      	movs	r2, #2
 8007af6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007afe:	f043 0204 	orr.w	r2, r3, #4
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b0c:	f003 0304 	and.w	r3, r3, #4
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d011      	beq.n	8007b38 <HAL_UART_IRQHandler+0x11c>
 8007b14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b18:	f003 0301 	and.w	r3, r3, #1
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00b      	beq.n	8007b38 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2204      	movs	r2, #4
 8007b26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b2e:	f043 0202 	orr.w	r2, r3, #2
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b3c:	f003 0308 	and.w	r3, r3, #8
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d017      	beq.n	8007b74 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b48:	f003 0320 	and.w	r3, r3, #32
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d105      	bne.n	8007b5c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007b50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b54:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00b      	beq.n	8007b74 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2208      	movs	r2, #8
 8007b62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b6a:	f043 0208 	orr.w	r2, r3, #8
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d012      	beq.n	8007ba6 <HAL_UART_IRQHandler+0x18a>
 8007b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00c      	beq.n	8007ba6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007b94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b9c:	f043 0220 	orr.w	r2, r3, #32
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	f000 822c 	beq.w	800800a <HAL_UART_IRQHandler+0x5ee>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bb6:	f003 0320 	and.w	r3, r3, #32
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00d      	beq.n	8007bda <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007bbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bc2:	f003 0320 	and.w	r3, r3, #32
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d007      	beq.n	8007bda <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d003      	beq.n	8007bda <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007be0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bee:	2b40      	cmp	r3, #64	@ 0x40
 8007bf0:	d005      	beq.n	8007bfe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007bf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007bf6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d04f      	beq.n	8007c9e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 ff38 	bl	8008a74 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c0e:	2b40      	cmp	r3, #64	@ 0x40
 8007c10:	d141      	bne.n	8007c96 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	3308      	adds	r3, #8
 8007c18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007c20:	e853 3f00 	ldrex	r3, [r3]
 8007c24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007c28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007c2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	3308      	adds	r3, #8
 8007c3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007c3e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007c42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007c4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007c4e:	e841 2300 	strex	r3, r2, [r1]
 8007c52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007c56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d1d9      	bne.n	8007c12 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d013      	beq.n	8007c8e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c6a:	4a13      	ldr	r2, [pc, #76]	@ (8007cb8 <HAL_UART_IRQHandler+0x29c>)
 8007c6c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fb ff1a 	bl	8003aac <HAL_DMA_Abort_IT>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d017      	beq.n	8007cae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007c88:	4610      	mov	r0, r2
 8007c8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c8c:	e00f      	b.n	8007cae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 f9ee 	bl	8008070 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c94:	e00b      	b.n	8007cae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 f9ea 	bl	8008070 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c9c:	e007      	b.n	8007cae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f9e6 	bl	8008070 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007cac:	e1ad      	b.n	800800a <HAL_UART_IRQHandler+0x5ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cae:	bf00      	nop
    return;
 8007cb0:	e1ab      	b.n	800800a <HAL_UART_IRQHandler+0x5ee>
 8007cb2:	bf00      	nop
 8007cb4:	04000120 	.word	0x04000120
 8007cb8:	08008e3d 	.word	0x08008e3d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	f040 8166 	bne.w	8007f92 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cca:	f003 0310 	and.w	r3, r3, #16
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	f000 815f 	beq.w	8007f92 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cd8:	f003 0310 	and.w	r3, r3, #16
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f000 8158 	beq.w	8007f92 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2210      	movs	r2, #16
 8007ce8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cf4:	2b40      	cmp	r3, #64	@ 0x40
 8007cf6:	f040 80d0 	bne.w	8007e9a <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d06:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	f000 80ab 	beq.w	8007e66 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007d16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	f080 80a3 	bcs.w	8007e66 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007d26:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d2e:	69db      	ldr	r3, [r3, #28]
 8007d30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d34:	f000 8086 	beq.w	8007e44 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007d44:	e853 3f00 	ldrex	r3, [r3]
 8007d48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007d4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007d66:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007d6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007d72:	e841 2300 	strex	r3, r2, [r1]
 8007d76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007d7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d1da      	bne.n	8007d38 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	3308      	adds	r3, #8
 8007d88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007d8c:	e853 3f00 	ldrex	r3, [r3]
 8007d90:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007d92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d94:	f023 0301 	bic.w	r3, r3, #1
 8007d98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	3308      	adds	r3, #8
 8007da2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007da6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007daa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007dae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007db2:	e841 2300 	strex	r3, r2, [r1]
 8007db6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007db8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1e1      	bne.n	8007d82 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	3308      	adds	r3, #8
 8007dc4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007dc8:	e853 3f00 	ldrex	r3, [r3]
 8007dcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007dce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007dd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	3308      	adds	r3, #8
 8007dde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007de2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007de4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007de8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007dea:	e841 2300 	strex	r3, r2, [r1]
 8007dee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007df0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1e3      	bne.n	8007dbe <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2220      	movs	r2, #32
 8007dfa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e0c:	e853 3f00 	ldrex	r3, [r3]
 8007e10:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007e12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e14:	f023 0310 	bic.w	r3, r3, #16
 8007e18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	461a      	mov	r2, r3
 8007e22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e26:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e28:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007e2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e2e:	e841 2300 	strex	r3, r2, [r1]
 8007e32:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007e34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d1e4      	bne.n	8007e04 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7fb fdc4 	bl	80039cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2202      	movs	r2, #2
 8007e48:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	1ad3      	subs	r3, r2, r3
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f910 	bl	8008084 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007e64:	e0d3      	b.n	800800e <HAL_UART_IRQHandler+0x5f2>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007e6c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007e70:	429a      	cmp	r2, r3
 8007e72:	f040 80cc 	bne.w	800800e <HAL_UART_IRQHandler+0x5f2>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e7a:	69db      	ldr	r3, [r3, #28]
 8007e7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e80:	f040 80c5 	bne.w	800800e <HAL_UART_IRQHandler+0x5f2>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2202      	movs	r2, #2
 8007e88:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007e90:	4619      	mov	r1, r3
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f8f6 	bl	8008084 <HAL_UARTEx_RxEventCallback>
      return;
 8007e98:	e0b9      	b.n	800800e <HAL_UART_IRQHandler+0x5f2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	f000 80ab 	beq.w	8008012 <HAL_UART_IRQHandler+0x5f6>
          && (nb_rx_data > 0U))
 8007ebc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 80a6 	beq.w	8008012 <HAL_UART_IRQHandler+0x5f6>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ece:	e853 3f00 	ldrex	r3, [r3]
 8007ed2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ed6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007eda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007ee8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007eea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007eee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ef0:	e841 2300 	strex	r3, r2, [r1]
 8007ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ef6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d1e4      	bne.n	8007ec6 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	3308      	adds	r3, #8
 8007f02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f06:	e853 3f00 	ldrex	r3, [r3]
 8007f0a:	623b      	str	r3, [r7, #32]
   return(result);
 8007f0c:	6a3b      	ldr	r3, [r7, #32]
 8007f0e:	f023 0301 	bic.w	r3, r3, #1
 8007f12:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	3308      	adds	r3, #8
 8007f1c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007f20:	633a      	str	r2, [r7, #48]	@ 0x30
 8007f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f28:	e841 2300 	strex	r3, r2, [r1]
 8007f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d1e3      	bne.n	8007efc <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2220      	movs	r2, #32
 8007f38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	e853 3f00 	ldrex	r3, [r3]
 8007f54:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f023 0310 	bic.w	r3, r3, #16
 8007f5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	461a      	mov	r2, r3
 8007f66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007f6a:	61fb      	str	r3, [r7, #28]
 8007f6c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6e:	69b9      	ldr	r1, [r7, #24]
 8007f70:	69fa      	ldr	r2, [r7, #28]
 8007f72:	e841 2300 	strex	r3, r2, [r1]
 8007f76:	617b      	str	r3, [r7, #20]
   return(result);
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1e4      	bne.n	8007f48 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2202      	movs	r2, #2
 8007f82:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007f88:	4619      	mov	r1, r3
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 f87a 	bl	8008084 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007f90:	e03f      	b.n	8008012 <HAL_UART_IRQHandler+0x5f6>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00e      	beq.n	8007fbc <HAL_UART_IRQHandler+0x5a0>
 8007f9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d008      	beq.n	8007fbc <HAL_UART_IRQHandler+0x5a0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007fb2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f871 	bl	800809c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007fba:	e02d      	b.n	8008018 <HAL_UART_IRQHandler+0x5fc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d00e      	beq.n	8007fe6 <HAL_UART_IRQHandler+0x5ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d008      	beq.n	8007fe6 <HAL_UART_IRQHandler+0x5ca>
  {
    if (huart->TxISR != NULL)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d01c      	beq.n	8008016 <HAL_UART_IRQHandler+0x5fa>
    {
      huart->TxISR(huart);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	4798      	blx	r3
    }
    return;
 8007fe4:	e017      	b.n	8008016 <HAL_UART_IRQHandler+0x5fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d012      	beq.n	8008018 <HAL_UART_IRQHandler+0x5fc>
 8007ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00c      	beq.n	8008018 <HAL_UART_IRQHandler+0x5fc>
  {
    UART_EndTransmit_IT(huart);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 ff2e 	bl	8008e60 <UART_EndTransmit_IT>
    return;
 8008004:	e008      	b.n	8008018 <HAL_UART_IRQHandler+0x5fc>
      return;
 8008006:	bf00      	nop
 8008008:	e006      	b.n	8008018 <HAL_UART_IRQHandler+0x5fc>
    return;
 800800a:	bf00      	nop
 800800c:	e004      	b.n	8008018 <HAL_UART_IRQHandler+0x5fc>
      return;
 800800e:	bf00      	nop
 8008010:	e002      	b.n	8008018 <HAL_UART_IRQHandler+0x5fc>
      return;
 8008012:	bf00      	nop
 8008014:	e000      	b.n	8008018 <HAL_UART_IRQHandler+0x5fc>
    return;
 8008016:	bf00      	nop
  }

}
 8008018:	37e8      	adds	r7, #232	@ 0xe8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop

08008020 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008028:	bf00      	nop
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800803c:	bf00      	nop
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008064:	bf00      	nop
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	460b      	mov	r3, r1
 800808e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b088      	sub	sp, #32
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80080b8:	2300      	movs	r3, #0
 80080ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	689a      	ldr	r2, [r3, #8]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	691b      	ldr	r3, [r3, #16]
 80080c4:	431a      	orrs	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	695b      	ldr	r3, [r3, #20]
 80080ca:	431a      	orrs	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	69db      	ldr	r3, [r3, #28]
 80080d0:	4313      	orrs	r3, r2
 80080d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	4ba6      	ldr	r3, [pc, #664]	@ (8008374 <UART_SetConfig+0x2c4>)
 80080dc:	4013      	ands	r3, r2
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	6812      	ldr	r2, [r2, #0]
 80080e2:	6979      	ldr	r1, [r7, #20]
 80080e4:	430b      	orrs	r3, r1
 80080e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	68da      	ldr	r2, [r3, #12]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	430a      	orrs	r2, r1
 80080fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6a1b      	ldr	r3, [r3, #32]
 8008108:	697a      	ldr	r2, [r7, #20]
 800810a:	4313      	orrs	r3, r2
 800810c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	697a      	ldr	r2, [r7, #20]
 800811e:	430a      	orrs	r2, r1
 8008120:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a94      	ldr	r2, [pc, #592]	@ (8008378 <UART_SetConfig+0x2c8>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d120      	bne.n	800816e <UART_SetConfig+0xbe>
 800812c:	4b93      	ldr	r3, [pc, #588]	@ (800837c <UART_SetConfig+0x2cc>)
 800812e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008132:	f003 0303 	and.w	r3, r3, #3
 8008136:	2b03      	cmp	r3, #3
 8008138:	d816      	bhi.n	8008168 <UART_SetConfig+0xb8>
 800813a:	a201      	add	r2, pc, #4	@ (adr r2, 8008140 <UART_SetConfig+0x90>)
 800813c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008140:	08008151 	.word	0x08008151
 8008144:	0800815d 	.word	0x0800815d
 8008148:	08008157 	.word	0x08008157
 800814c:	08008163 	.word	0x08008163
 8008150:	2301      	movs	r3, #1
 8008152:	77fb      	strb	r3, [r7, #31]
 8008154:	e150      	b.n	80083f8 <UART_SetConfig+0x348>
 8008156:	2302      	movs	r3, #2
 8008158:	77fb      	strb	r3, [r7, #31]
 800815a:	e14d      	b.n	80083f8 <UART_SetConfig+0x348>
 800815c:	2304      	movs	r3, #4
 800815e:	77fb      	strb	r3, [r7, #31]
 8008160:	e14a      	b.n	80083f8 <UART_SetConfig+0x348>
 8008162:	2308      	movs	r3, #8
 8008164:	77fb      	strb	r3, [r7, #31]
 8008166:	e147      	b.n	80083f8 <UART_SetConfig+0x348>
 8008168:	2310      	movs	r3, #16
 800816a:	77fb      	strb	r3, [r7, #31]
 800816c:	e144      	b.n	80083f8 <UART_SetConfig+0x348>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a83      	ldr	r2, [pc, #524]	@ (8008380 <UART_SetConfig+0x2d0>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d132      	bne.n	80081de <UART_SetConfig+0x12e>
 8008178:	4b80      	ldr	r3, [pc, #512]	@ (800837c <UART_SetConfig+0x2cc>)
 800817a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800817e:	f003 030c 	and.w	r3, r3, #12
 8008182:	2b0c      	cmp	r3, #12
 8008184:	d828      	bhi.n	80081d8 <UART_SetConfig+0x128>
 8008186:	a201      	add	r2, pc, #4	@ (adr r2, 800818c <UART_SetConfig+0xdc>)
 8008188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800818c:	080081c1 	.word	0x080081c1
 8008190:	080081d9 	.word	0x080081d9
 8008194:	080081d9 	.word	0x080081d9
 8008198:	080081d9 	.word	0x080081d9
 800819c:	080081cd 	.word	0x080081cd
 80081a0:	080081d9 	.word	0x080081d9
 80081a4:	080081d9 	.word	0x080081d9
 80081a8:	080081d9 	.word	0x080081d9
 80081ac:	080081c7 	.word	0x080081c7
 80081b0:	080081d9 	.word	0x080081d9
 80081b4:	080081d9 	.word	0x080081d9
 80081b8:	080081d9 	.word	0x080081d9
 80081bc:	080081d3 	.word	0x080081d3
 80081c0:	2300      	movs	r3, #0
 80081c2:	77fb      	strb	r3, [r7, #31]
 80081c4:	e118      	b.n	80083f8 <UART_SetConfig+0x348>
 80081c6:	2302      	movs	r3, #2
 80081c8:	77fb      	strb	r3, [r7, #31]
 80081ca:	e115      	b.n	80083f8 <UART_SetConfig+0x348>
 80081cc:	2304      	movs	r3, #4
 80081ce:	77fb      	strb	r3, [r7, #31]
 80081d0:	e112      	b.n	80083f8 <UART_SetConfig+0x348>
 80081d2:	2308      	movs	r3, #8
 80081d4:	77fb      	strb	r3, [r7, #31]
 80081d6:	e10f      	b.n	80083f8 <UART_SetConfig+0x348>
 80081d8:	2310      	movs	r3, #16
 80081da:	77fb      	strb	r3, [r7, #31]
 80081dc:	e10c      	b.n	80083f8 <UART_SetConfig+0x348>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a68      	ldr	r2, [pc, #416]	@ (8008384 <UART_SetConfig+0x2d4>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d120      	bne.n	800822a <UART_SetConfig+0x17a>
 80081e8:	4b64      	ldr	r3, [pc, #400]	@ (800837c <UART_SetConfig+0x2cc>)
 80081ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081ee:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80081f2:	2b30      	cmp	r3, #48	@ 0x30
 80081f4:	d013      	beq.n	800821e <UART_SetConfig+0x16e>
 80081f6:	2b30      	cmp	r3, #48	@ 0x30
 80081f8:	d814      	bhi.n	8008224 <UART_SetConfig+0x174>
 80081fa:	2b20      	cmp	r3, #32
 80081fc:	d009      	beq.n	8008212 <UART_SetConfig+0x162>
 80081fe:	2b20      	cmp	r3, #32
 8008200:	d810      	bhi.n	8008224 <UART_SetConfig+0x174>
 8008202:	2b00      	cmp	r3, #0
 8008204:	d002      	beq.n	800820c <UART_SetConfig+0x15c>
 8008206:	2b10      	cmp	r3, #16
 8008208:	d006      	beq.n	8008218 <UART_SetConfig+0x168>
 800820a:	e00b      	b.n	8008224 <UART_SetConfig+0x174>
 800820c:	2300      	movs	r3, #0
 800820e:	77fb      	strb	r3, [r7, #31]
 8008210:	e0f2      	b.n	80083f8 <UART_SetConfig+0x348>
 8008212:	2302      	movs	r3, #2
 8008214:	77fb      	strb	r3, [r7, #31]
 8008216:	e0ef      	b.n	80083f8 <UART_SetConfig+0x348>
 8008218:	2304      	movs	r3, #4
 800821a:	77fb      	strb	r3, [r7, #31]
 800821c:	e0ec      	b.n	80083f8 <UART_SetConfig+0x348>
 800821e:	2308      	movs	r3, #8
 8008220:	77fb      	strb	r3, [r7, #31]
 8008222:	e0e9      	b.n	80083f8 <UART_SetConfig+0x348>
 8008224:	2310      	movs	r3, #16
 8008226:	77fb      	strb	r3, [r7, #31]
 8008228:	e0e6      	b.n	80083f8 <UART_SetConfig+0x348>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a56      	ldr	r2, [pc, #344]	@ (8008388 <UART_SetConfig+0x2d8>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d120      	bne.n	8008276 <UART_SetConfig+0x1c6>
 8008234:	4b51      	ldr	r3, [pc, #324]	@ (800837c <UART_SetConfig+0x2cc>)
 8008236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800823a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800823e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008240:	d013      	beq.n	800826a <UART_SetConfig+0x1ba>
 8008242:	2bc0      	cmp	r3, #192	@ 0xc0
 8008244:	d814      	bhi.n	8008270 <UART_SetConfig+0x1c0>
 8008246:	2b80      	cmp	r3, #128	@ 0x80
 8008248:	d009      	beq.n	800825e <UART_SetConfig+0x1ae>
 800824a:	2b80      	cmp	r3, #128	@ 0x80
 800824c:	d810      	bhi.n	8008270 <UART_SetConfig+0x1c0>
 800824e:	2b00      	cmp	r3, #0
 8008250:	d002      	beq.n	8008258 <UART_SetConfig+0x1a8>
 8008252:	2b40      	cmp	r3, #64	@ 0x40
 8008254:	d006      	beq.n	8008264 <UART_SetConfig+0x1b4>
 8008256:	e00b      	b.n	8008270 <UART_SetConfig+0x1c0>
 8008258:	2300      	movs	r3, #0
 800825a:	77fb      	strb	r3, [r7, #31]
 800825c:	e0cc      	b.n	80083f8 <UART_SetConfig+0x348>
 800825e:	2302      	movs	r3, #2
 8008260:	77fb      	strb	r3, [r7, #31]
 8008262:	e0c9      	b.n	80083f8 <UART_SetConfig+0x348>
 8008264:	2304      	movs	r3, #4
 8008266:	77fb      	strb	r3, [r7, #31]
 8008268:	e0c6      	b.n	80083f8 <UART_SetConfig+0x348>
 800826a:	2308      	movs	r3, #8
 800826c:	77fb      	strb	r3, [r7, #31]
 800826e:	e0c3      	b.n	80083f8 <UART_SetConfig+0x348>
 8008270:	2310      	movs	r3, #16
 8008272:	77fb      	strb	r3, [r7, #31]
 8008274:	e0c0      	b.n	80083f8 <UART_SetConfig+0x348>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a44      	ldr	r2, [pc, #272]	@ (800838c <UART_SetConfig+0x2dc>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d125      	bne.n	80082cc <UART_SetConfig+0x21c>
 8008280:	4b3e      	ldr	r3, [pc, #248]	@ (800837c <UART_SetConfig+0x2cc>)
 8008282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008286:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800828a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800828e:	d017      	beq.n	80082c0 <UART_SetConfig+0x210>
 8008290:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008294:	d817      	bhi.n	80082c6 <UART_SetConfig+0x216>
 8008296:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800829a:	d00b      	beq.n	80082b4 <UART_SetConfig+0x204>
 800829c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082a0:	d811      	bhi.n	80082c6 <UART_SetConfig+0x216>
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d003      	beq.n	80082ae <UART_SetConfig+0x1fe>
 80082a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082aa:	d006      	beq.n	80082ba <UART_SetConfig+0x20a>
 80082ac:	e00b      	b.n	80082c6 <UART_SetConfig+0x216>
 80082ae:	2300      	movs	r3, #0
 80082b0:	77fb      	strb	r3, [r7, #31]
 80082b2:	e0a1      	b.n	80083f8 <UART_SetConfig+0x348>
 80082b4:	2302      	movs	r3, #2
 80082b6:	77fb      	strb	r3, [r7, #31]
 80082b8:	e09e      	b.n	80083f8 <UART_SetConfig+0x348>
 80082ba:	2304      	movs	r3, #4
 80082bc:	77fb      	strb	r3, [r7, #31]
 80082be:	e09b      	b.n	80083f8 <UART_SetConfig+0x348>
 80082c0:	2308      	movs	r3, #8
 80082c2:	77fb      	strb	r3, [r7, #31]
 80082c4:	e098      	b.n	80083f8 <UART_SetConfig+0x348>
 80082c6:	2310      	movs	r3, #16
 80082c8:	77fb      	strb	r3, [r7, #31]
 80082ca:	e095      	b.n	80083f8 <UART_SetConfig+0x348>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a2f      	ldr	r2, [pc, #188]	@ (8008390 <UART_SetConfig+0x2e0>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d125      	bne.n	8008322 <UART_SetConfig+0x272>
 80082d6:	4b29      	ldr	r3, [pc, #164]	@ (800837c <UART_SetConfig+0x2cc>)
 80082d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80082e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80082e4:	d017      	beq.n	8008316 <UART_SetConfig+0x266>
 80082e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80082ea:	d817      	bhi.n	800831c <UART_SetConfig+0x26c>
 80082ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082f0:	d00b      	beq.n	800830a <UART_SetConfig+0x25a>
 80082f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082f6:	d811      	bhi.n	800831c <UART_SetConfig+0x26c>
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d003      	beq.n	8008304 <UART_SetConfig+0x254>
 80082fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008300:	d006      	beq.n	8008310 <UART_SetConfig+0x260>
 8008302:	e00b      	b.n	800831c <UART_SetConfig+0x26c>
 8008304:	2301      	movs	r3, #1
 8008306:	77fb      	strb	r3, [r7, #31]
 8008308:	e076      	b.n	80083f8 <UART_SetConfig+0x348>
 800830a:	2302      	movs	r3, #2
 800830c:	77fb      	strb	r3, [r7, #31]
 800830e:	e073      	b.n	80083f8 <UART_SetConfig+0x348>
 8008310:	2304      	movs	r3, #4
 8008312:	77fb      	strb	r3, [r7, #31]
 8008314:	e070      	b.n	80083f8 <UART_SetConfig+0x348>
 8008316:	2308      	movs	r3, #8
 8008318:	77fb      	strb	r3, [r7, #31]
 800831a:	e06d      	b.n	80083f8 <UART_SetConfig+0x348>
 800831c:	2310      	movs	r3, #16
 800831e:	77fb      	strb	r3, [r7, #31]
 8008320:	e06a      	b.n	80083f8 <UART_SetConfig+0x348>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a1b      	ldr	r2, [pc, #108]	@ (8008394 <UART_SetConfig+0x2e4>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d138      	bne.n	800839e <UART_SetConfig+0x2ee>
 800832c:	4b13      	ldr	r3, [pc, #76]	@ (800837c <UART_SetConfig+0x2cc>)
 800832e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008332:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008336:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800833a:	d017      	beq.n	800836c <UART_SetConfig+0x2bc>
 800833c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008340:	d82a      	bhi.n	8008398 <UART_SetConfig+0x2e8>
 8008342:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008346:	d00b      	beq.n	8008360 <UART_SetConfig+0x2b0>
 8008348:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800834c:	d824      	bhi.n	8008398 <UART_SetConfig+0x2e8>
 800834e:	2b00      	cmp	r3, #0
 8008350:	d003      	beq.n	800835a <UART_SetConfig+0x2aa>
 8008352:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008356:	d006      	beq.n	8008366 <UART_SetConfig+0x2b6>
 8008358:	e01e      	b.n	8008398 <UART_SetConfig+0x2e8>
 800835a:	2300      	movs	r3, #0
 800835c:	77fb      	strb	r3, [r7, #31]
 800835e:	e04b      	b.n	80083f8 <UART_SetConfig+0x348>
 8008360:	2302      	movs	r3, #2
 8008362:	77fb      	strb	r3, [r7, #31]
 8008364:	e048      	b.n	80083f8 <UART_SetConfig+0x348>
 8008366:	2304      	movs	r3, #4
 8008368:	77fb      	strb	r3, [r7, #31]
 800836a:	e045      	b.n	80083f8 <UART_SetConfig+0x348>
 800836c:	2308      	movs	r3, #8
 800836e:	77fb      	strb	r3, [r7, #31]
 8008370:	e042      	b.n	80083f8 <UART_SetConfig+0x348>
 8008372:	bf00      	nop
 8008374:	efff69f3 	.word	0xefff69f3
 8008378:	40011000 	.word	0x40011000
 800837c:	40023800 	.word	0x40023800
 8008380:	40004400 	.word	0x40004400
 8008384:	40004800 	.word	0x40004800
 8008388:	40004c00 	.word	0x40004c00
 800838c:	40005000 	.word	0x40005000
 8008390:	40011400 	.word	0x40011400
 8008394:	40007800 	.word	0x40007800
 8008398:	2310      	movs	r3, #16
 800839a:	77fb      	strb	r3, [r7, #31]
 800839c:	e02c      	b.n	80083f8 <UART_SetConfig+0x348>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a72      	ldr	r2, [pc, #456]	@ (800856c <UART_SetConfig+0x4bc>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d125      	bne.n	80083f4 <UART_SetConfig+0x344>
 80083a8:	4b71      	ldr	r3, [pc, #452]	@ (8008570 <UART_SetConfig+0x4c0>)
 80083aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083ae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80083b2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80083b6:	d017      	beq.n	80083e8 <UART_SetConfig+0x338>
 80083b8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80083bc:	d817      	bhi.n	80083ee <UART_SetConfig+0x33e>
 80083be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083c2:	d00b      	beq.n	80083dc <UART_SetConfig+0x32c>
 80083c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083c8:	d811      	bhi.n	80083ee <UART_SetConfig+0x33e>
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d003      	beq.n	80083d6 <UART_SetConfig+0x326>
 80083ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80083d2:	d006      	beq.n	80083e2 <UART_SetConfig+0x332>
 80083d4:	e00b      	b.n	80083ee <UART_SetConfig+0x33e>
 80083d6:	2300      	movs	r3, #0
 80083d8:	77fb      	strb	r3, [r7, #31]
 80083da:	e00d      	b.n	80083f8 <UART_SetConfig+0x348>
 80083dc:	2302      	movs	r3, #2
 80083de:	77fb      	strb	r3, [r7, #31]
 80083e0:	e00a      	b.n	80083f8 <UART_SetConfig+0x348>
 80083e2:	2304      	movs	r3, #4
 80083e4:	77fb      	strb	r3, [r7, #31]
 80083e6:	e007      	b.n	80083f8 <UART_SetConfig+0x348>
 80083e8:	2308      	movs	r3, #8
 80083ea:	77fb      	strb	r3, [r7, #31]
 80083ec:	e004      	b.n	80083f8 <UART_SetConfig+0x348>
 80083ee:	2310      	movs	r3, #16
 80083f0:	77fb      	strb	r3, [r7, #31]
 80083f2:	e001      	b.n	80083f8 <UART_SetConfig+0x348>
 80083f4:	2310      	movs	r3, #16
 80083f6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	69db      	ldr	r3, [r3, #28]
 80083fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008400:	d15b      	bne.n	80084ba <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008402:	7ffb      	ldrb	r3, [r7, #31]
 8008404:	2b08      	cmp	r3, #8
 8008406:	d828      	bhi.n	800845a <UART_SetConfig+0x3aa>
 8008408:	a201      	add	r2, pc, #4	@ (adr r2, 8008410 <UART_SetConfig+0x360>)
 800840a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800840e:	bf00      	nop
 8008410:	08008435 	.word	0x08008435
 8008414:	0800843d 	.word	0x0800843d
 8008418:	08008445 	.word	0x08008445
 800841c:	0800845b 	.word	0x0800845b
 8008420:	0800844b 	.word	0x0800844b
 8008424:	0800845b 	.word	0x0800845b
 8008428:	0800845b 	.word	0x0800845b
 800842c:	0800845b 	.word	0x0800845b
 8008430:	08008453 	.word	0x08008453
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008434:	f7fd fa8c 	bl	8005950 <HAL_RCC_GetPCLK1Freq>
 8008438:	61b8      	str	r0, [r7, #24]
        break;
 800843a:	e013      	b.n	8008464 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800843c:	f7fd fa9c 	bl	8005978 <HAL_RCC_GetPCLK2Freq>
 8008440:	61b8      	str	r0, [r7, #24]
        break;
 8008442:	e00f      	b.n	8008464 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008444:	4b4b      	ldr	r3, [pc, #300]	@ (8008574 <UART_SetConfig+0x4c4>)
 8008446:	61bb      	str	r3, [r7, #24]
        break;
 8008448:	e00c      	b.n	8008464 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800844a:	f7fd f96f 	bl	800572c <HAL_RCC_GetSysClockFreq>
 800844e:	61b8      	str	r0, [r7, #24]
        break;
 8008450:	e008      	b.n	8008464 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008452:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008456:	61bb      	str	r3, [r7, #24]
        break;
 8008458:	e004      	b.n	8008464 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800845a:	2300      	movs	r3, #0
 800845c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	77bb      	strb	r3, [r7, #30]
        break;
 8008462:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008464:	69bb      	ldr	r3, [r7, #24]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d074      	beq.n	8008554 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	005a      	lsls	r2, r3, #1
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	085b      	lsrs	r3, r3, #1
 8008474:	441a      	add	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	fbb2 f3f3 	udiv	r3, r2, r3
 800847e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	2b0f      	cmp	r3, #15
 8008484:	d916      	bls.n	80084b4 <UART_SetConfig+0x404>
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800848c:	d212      	bcs.n	80084b4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	b29b      	uxth	r3, r3
 8008492:	f023 030f 	bic.w	r3, r3, #15
 8008496:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	085b      	lsrs	r3, r3, #1
 800849c:	b29b      	uxth	r3, r3
 800849e:	f003 0307 	and.w	r3, r3, #7
 80084a2:	b29a      	uxth	r2, r3
 80084a4:	89fb      	ldrh	r3, [r7, #14]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	89fa      	ldrh	r2, [r7, #14]
 80084b0:	60da      	str	r2, [r3, #12]
 80084b2:	e04f      	b.n	8008554 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	77bb      	strb	r3, [r7, #30]
 80084b8:	e04c      	b.n	8008554 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80084ba:	7ffb      	ldrb	r3, [r7, #31]
 80084bc:	2b08      	cmp	r3, #8
 80084be:	d828      	bhi.n	8008512 <UART_SetConfig+0x462>
 80084c0:	a201      	add	r2, pc, #4	@ (adr r2, 80084c8 <UART_SetConfig+0x418>)
 80084c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c6:	bf00      	nop
 80084c8:	080084ed 	.word	0x080084ed
 80084cc:	080084f5 	.word	0x080084f5
 80084d0:	080084fd 	.word	0x080084fd
 80084d4:	08008513 	.word	0x08008513
 80084d8:	08008503 	.word	0x08008503
 80084dc:	08008513 	.word	0x08008513
 80084e0:	08008513 	.word	0x08008513
 80084e4:	08008513 	.word	0x08008513
 80084e8:	0800850b 	.word	0x0800850b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084ec:	f7fd fa30 	bl	8005950 <HAL_RCC_GetPCLK1Freq>
 80084f0:	61b8      	str	r0, [r7, #24]
        break;
 80084f2:	e013      	b.n	800851c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084f4:	f7fd fa40 	bl	8005978 <HAL_RCC_GetPCLK2Freq>
 80084f8:	61b8      	str	r0, [r7, #24]
        break;
 80084fa:	e00f      	b.n	800851c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084fc:	4b1d      	ldr	r3, [pc, #116]	@ (8008574 <UART_SetConfig+0x4c4>)
 80084fe:	61bb      	str	r3, [r7, #24]
        break;
 8008500:	e00c      	b.n	800851c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008502:	f7fd f913 	bl	800572c <HAL_RCC_GetSysClockFreq>
 8008506:	61b8      	str	r0, [r7, #24]
        break;
 8008508:	e008      	b.n	800851c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800850a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800850e:	61bb      	str	r3, [r7, #24]
        break;
 8008510:	e004      	b.n	800851c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008512:	2300      	movs	r3, #0
 8008514:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	77bb      	strb	r3, [r7, #30]
        break;
 800851a:	bf00      	nop
    }

    if (pclk != 0U)
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d018      	beq.n	8008554 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	085a      	lsrs	r2, r3, #1
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	441a      	add	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	fbb2 f3f3 	udiv	r3, r2, r3
 8008534:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	2b0f      	cmp	r3, #15
 800853a:	d909      	bls.n	8008550 <UART_SetConfig+0x4a0>
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008542:	d205      	bcs.n	8008550 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	b29a      	uxth	r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	60da      	str	r2, [r3, #12]
 800854e:	e001      	b.n	8008554 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008560:	7fbb      	ldrb	r3, [r7, #30]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3720      	adds	r7, #32
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	40007c00 	.word	0x40007c00
 8008570:	40023800 	.word	0x40023800
 8008574:	00f42400 	.word	0x00f42400

08008578 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008584:	f003 0308 	and.w	r3, r3, #8
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00a      	beq.n	80085a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	430a      	orrs	r2, r1
 80085a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085a6:	f003 0301 	and.w	r3, r3, #1
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00a      	beq.n	80085c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	430a      	orrs	r2, r1
 80085c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085c8:	f003 0302 	and.w	r3, r3, #2
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00a      	beq.n	80085e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	430a      	orrs	r2, r1
 80085e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ea:	f003 0304 	and.w	r3, r3, #4
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00a      	beq.n	8008608 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	430a      	orrs	r2, r1
 8008606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800860c:	f003 0310 	and.w	r3, r3, #16
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00a      	beq.n	800862a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	430a      	orrs	r2, r1
 8008628:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800862e:	f003 0320 	and.w	r3, r3, #32
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00a      	beq.n	800864c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	430a      	orrs	r2, r1
 800864a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008654:	2b00      	cmp	r3, #0
 8008656:	d01a      	beq.n	800868e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	430a      	orrs	r2, r1
 800866c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008672:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008676:	d10a      	bne.n	800868e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	430a      	orrs	r2, r1
 800868c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008696:	2b00      	cmp	r3, #0
 8008698:	d00a      	beq.n	80086b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	430a      	orrs	r2, r1
 80086ae:	605a      	str	r2, [r3, #4]
  }
}
 80086b0:	bf00      	nop
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b098      	sub	sp, #96	@ 0x60
 80086c0:	af02      	add	r7, sp, #8
 80086c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80086cc:	f7fa ff82 	bl	80035d4 <HAL_GetTick>
 80086d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 0308 	and.w	r3, r3, #8
 80086dc:	2b08      	cmp	r3, #8
 80086de:	d12e      	bne.n	800873e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80086e4:	9300      	str	r3, [sp, #0]
 80086e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086e8:	2200      	movs	r2, #0
 80086ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f88c 	bl	800880c <UART_WaitOnFlagUntilTimeout>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d021      	beq.n	800873e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008702:	e853 3f00 	ldrex	r3, [r3]
 8008706:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800870a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800870e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	461a      	mov	r2, r3
 8008716:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008718:	647b      	str	r3, [r7, #68]	@ 0x44
 800871a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800871c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800871e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008720:	e841 2300 	strex	r3, r2, [r1]
 8008724:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1e6      	bne.n	80086fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2220      	movs	r2, #32
 8008730:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800873a:	2303      	movs	r3, #3
 800873c:	e062      	b.n	8008804 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 0304 	and.w	r3, r3, #4
 8008748:	2b04      	cmp	r3, #4
 800874a:	d149      	bne.n	80087e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800874c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008750:	9300      	str	r3, [sp, #0]
 8008752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008754:	2200      	movs	r2, #0
 8008756:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 f856 	bl	800880c <UART_WaitOnFlagUntilTimeout>
 8008760:	4603      	mov	r3, r0
 8008762:	2b00      	cmp	r3, #0
 8008764:	d03c      	beq.n	80087e0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800876e:	e853 3f00 	ldrex	r3, [r3]
 8008772:	623b      	str	r3, [r7, #32]
   return(result);
 8008774:	6a3b      	ldr	r3, [r7, #32]
 8008776:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800877a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	461a      	mov	r2, r3
 8008782:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008784:	633b      	str	r3, [r7, #48]	@ 0x30
 8008786:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008788:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800878a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800878c:	e841 2300 	strex	r3, r2, [r1]
 8008790:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008794:	2b00      	cmp	r3, #0
 8008796:	d1e6      	bne.n	8008766 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	3308      	adds	r3, #8
 800879e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	e853 3f00 	ldrex	r3, [r3]
 80087a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f023 0301 	bic.w	r3, r3, #1
 80087ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	3308      	adds	r3, #8
 80087b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087b8:	61fa      	str	r2, [r7, #28]
 80087ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087bc:	69b9      	ldr	r1, [r7, #24]
 80087be:	69fa      	ldr	r2, [r7, #28]
 80087c0:	e841 2300 	strex	r3, r2, [r1]
 80087c4:	617b      	str	r3, [r7, #20]
   return(result);
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d1e5      	bne.n	8008798 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2220      	movs	r2, #32
 80087d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087dc:	2303      	movs	r3, #3
 80087de:	e011      	b.n	8008804 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2220      	movs	r2, #32
 80087e4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2220      	movs	r2, #32
 80087ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008802:	2300      	movs	r3, #0
}
 8008804:	4618      	mov	r0, r3
 8008806:	3758      	adds	r7, #88	@ 0x58
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	603b      	str	r3, [r7, #0]
 8008818:	4613      	mov	r3, r2
 800881a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800881c:	e04f      	b.n	80088be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008824:	d04b      	beq.n	80088be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008826:	f7fa fed5 	bl	80035d4 <HAL_GetTick>
 800882a:	4602      	mov	r2, r0
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	69ba      	ldr	r2, [r7, #24]
 8008832:	429a      	cmp	r2, r3
 8008834:	d302      	bcc.n	800883c <UART_WaitOnFlagUntilTimeout+0x30>
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d101      	bne.n	8008840 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800883c:	2303      	movs	r3, #3
 800883e:	e04e      	b.n	80088de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f003 0304 	and.w	r3, r3, #4
 800884a:	2b00      	cmp	r3, #0
 800884c:	d037      	beq.n	80088be <UART_WaitOnFlagUntilTimeout+0xb2>
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	2b80      	cmp	r3, #128	@ 0x80
 8008852:	d034      	beq.n	80088be <UART_WaitOnFlagUntilTimeout+0xb2>
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	2b40      	cmp	r3, #64	@ 0x40
 8008858:	d031      	beq.n	80088be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	69db      	ldr	r3, [r3, #28]
 8008860:	f003 0308 	and.w	r3, r3, #8
 8008864:	2b08      	cmp	r3, #8
 8008866:	d110      	bne.n	800888a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2208      	movs	r2, #8
 800886e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	f000 f8ff 	bl	8008a74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2208      	movs	r2, #8
 800887a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	e029      	b.n	80088de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	69db      	ldr	r3, [r3, #28]
 8008890:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008894:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008898:	d111      	bne.n	80088be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80088a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088a4:	68f8      	ldr	r0, [r7, #12]
 80088a6:	f000 f8e5 	bl	8008a74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2220      	movs	r2, #32
 80088ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80088ba:	2303      	movs	r3, #3
 80088bc:	e00f      	b.n	80088de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	69da      	ldr	r2, [r3, #28]
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	4013      	ands	r3, r2
 80088c8:	68ba      	ldr	r2, [r7, #8]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	bf0c      	ite	eq
 80088ce:	2301      	moveq	r3, #1
 80088d0:	2300      	movne	r3, #0
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	461a      	mov	r2, r3
 80088d6:	79fb      	ldrb	r3, [r7, #7]
 80088d8:	429a      	cmp	r2, r3
 80088da:	d0a0      	beq.n	800881e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088dc:	2300      	movs	r3, #0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
	...

080088e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b096      	sub	sp, #88	@ 0x58
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	60b9      	str	r1, [r7, #8]
 80088f2:	4613      	mov	r3, r2
 80088f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	68ba      	ldr	r2, [r7, #8]
 80088fa:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	88fa      	ldrh	r2, [r7, #6]
 8008900:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2200      	movs	r2, #0
 8008908:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2222      	movs	r2, #34	@ 0x22
 8008910:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008918:	2b00      	cmp	r3, #0
 800891a:	d028      	beq.n	800896e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008920:	4a3e      	ldr	r2, [pc, #248]	@ (8008a1c <UART_Start_Receive_DMA+0x134>)
 8008922:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008928:	4a3d      	ldr	r2, [pc, #244]	@ (8008a20 <UART_Start_Receive_DMA+0x138>)
 800892a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008930:	4a3c      	ldr	r2, [pc, #240]	@ (8008a24 <UART_Start_Receive_DMA+0x13c>)
 8008932:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008938:	2200      	movs	r2, #0
 800893a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	3324      	adds	r3, #36	@ 0x24
 8008946:	4619      	mov	r1, r3
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800894c:	461a      	mov	r2, r3
 800894e:	88fb      	ldrh	r3, [r7, #6]
 8008950:	f7fa ffdc 	bl	800390c <HAL_DMA_Start_IT>
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d009      	beq.n	800896e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2210      	movs	r2, #16
 800895e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2220      	movs	r2, #32
 8008966:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e051      	b.n	8008a12 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	691b      	ldr	r3, [r3, #16]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d018      	beq.n	80089a8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800897e:	e853 3f00 	ldrex	r3, [r3]
 8008982:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008986:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800898a:	657b      	str	r3, [r7, #84]	@ 0x54
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	461a      	mov	r2, r3
 8008992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008994:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008996:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008998:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800899a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800899c:	e841 2300 	strex	r3, r2, [r1]
 80089a0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80089a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d1e6      	bne.n	8008976 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	3308      	adds	r3, #8
 80089ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b2:	e853 3f00 	ldrex	r3, [r3]
 80089b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80089b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ba:	f043 0301 	orr.w	r3, r3, #1
 80089be:	653b      	str	r3, [r7, #80]	@ 0x50
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	3308      	adds	r3, #8
 80089c6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80089c8:	637a      	str	r2, [r7, #52]	@ 0x34
 80089ca:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80089ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80089d0:	e841 2300 	strex	r3, r2, [r1]
 80089d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80089d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d1e5      	bne.n	80089a8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	3308      	adds	r3, #8
 80089e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	e853 3f00 	ldrex	r3, [r3]
 80089ea:	613b      	str	r3, [r7, #16]
   return(result);
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	3308      	adds	r3, #8
 80089fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80089fc:	623a      	str	r2, [r7, #32]
 80089fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a00:	69f9      	ldr	r1, [r7, #28]
 8008a02:	6a3a      	ldr	r2, [r7, #32]
 8008a04:	e841 2300 	strex	r3, r2, [r1]
 8008a08:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d1e5      	bne.n	80089dc <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3758      	adds	r7, #88	@ 0x58
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	08008bef 	.word	0x08008bef
 8008a20:	08008d4d 	.word	0x08008d4d
 8008a24:	08008dbf 	.word	0x08008dbf

08008a28 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b089      	sub	sp, #36	@ 0x24
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	e853 3f00 	ldrex	r3, [r3]
 8008a3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008a44:	61fb      	str	r3, [r7, #28]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	61bb      	str	r3, [r7, #24]
 8008a50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a52:	6979      	ldr	r1, [r7, #20]
 8008a54:	69ba      	ldr	r2, [r7, #24]
 8008a56:	e841 2300 	strex	r3, r2, [r1]
 8008a5a:	613b      	str	r3, [r7, #16]
   return(result);
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1e6      	bne.n	8008a30 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2220      	movs	r2, #32
 8008a66:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8008a68:	bf00      	nop
 8008a6a:	3724      	adds	r7, #36	@ 0x24
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b095      	sub	sp, #84	@ 0x54
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a84:	e853 3f00 	ldrex	r3, [r3]
 8008a88:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	461a      	mov	r2, r3
 8008a98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008aa0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008aa2:	e841 2300 	strex	r3, r2, [r1]
 8008aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1e6      	bne.n	8008a7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	3308      	adds	r3, #8
 8008ab4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab6:	6a3b      	ldr	r3, [r7, #32]
 8008ab8:	e853 3f00 	ldrex	r3, [r3]
 8008abc:	61fb      	str	r3, [r7, #28]
   return(result);
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	f023 0301 	bic.w	r3, r3, #1
 8008ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	3308      	adds	r3, #8
 8008acc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ace:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ad4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ad6:	e841 2300 	strex	r3, r2, [r1]
 8008ada:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d1e5      	bne.n	8008aae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d118      	bne.n	8008b1c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	e853 3f00 	ldrex	r3, [r3]
 8008af6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	f023 0310 	bic.w	r3, r3, #16
 8008afe:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	461a      	mov	r2, r3
 8008b06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b08:	61bb      	str	r3, [r7, #24]
 8008b0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0c:	6979      	ldr	r1, [r7, #20]
 8008b0e:	69ba      	ldr	r2, [r7, #24]
 8008b10:	e841 2300 	strex	r3, r2, [r1]
 8008b14:	613b      	str	r3, [r7, #16]
   return(result);
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d1e6      	bne.n	8008aea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2220      	movs	r2, #32
 8008b20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008b30:	bf00      	nop
 8008b32:	3754      	adds	r7, #84	@ 0x54
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr

08008b3c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b090      	sub	sp, #64	@ 0x40
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b48:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	69db      	ldr	r3, [r3, #28]
 8008b4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b52:	d037      	beq.n	8008bc4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8008b54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b56:	2200      	movs	r2, #0
 8008b58:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	3308      	adds	r3, #8
 8008b62:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b66:	e853 3f00 	ldrex	r3, [r3]
 8008b6a:	623b      	str	r3, [r7, #32]
   return(result);
 8008b6c:	6a3b      	ldr	r3, [r7, #32]
 8008b6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	3308      	adds	r3, #8
 8008b7a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008b7c:	633a      	str	r2, [r7, #48]	@ 0x30
 8008b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b84:	e841 2300 	strex	r3, r2, [r1]
 8008b88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d1e5      	bne.n	8008b5c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	e853 3f00 	ldrex	r3, [r3]
 8008b9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ba4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	461a      	mov	r2, r3
 8008bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bae:	61fb      	str	r3, [r7, #28]
 8008bb0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb2:	69b9      	ldr	r1, [r7, #24]
 8008bb4:	69fa      	ldr	r2, [r7, #28]
 8008bb6:	e841 2300 	strex	r3, r2, [r1]
 8008bba:	617b      	str	r3, [r7, #20]
   return(result);
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d1e6      	bne.n	8008b90 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008bc2:	e002      	b.n	8008bca <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8008bc4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008bc6:	f7ff fa2b 	bl	8008020 <HAL_UART_TxCpltCallback>
}
 8008bca:	bf00      	nop
 8008bcc:	3740      	adds	r7, #64	@ 0x40
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b084      	sub	sp, #16
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bde:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008be0:	68f8      	ldr	r0, [r7, #12]
 8008be2:	f7ff fa27 	bl	8008034 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008be6:	bf00      	nop
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b09c      	sub	sp, #112	@ 0x70
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bfa:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	69db      	ldr	r3, [r3, #28]
 8008c00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c04:	d071      	beq.n	8008cea <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8008c06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c16:	e853 3f00 	ldrex	r3, [r3]
 8008c1a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008c1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c22:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	461a      	mov	r2, r3
 8008c2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c2c:	657b      	str	r3, [r7, #84]	@ 0x54
 8008c2e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c30:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008c32:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008c34:	e841 2300 	strex	r3, r2, [r1]
 8008c38:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008c3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d1e6      	bne.n	8008c0e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	3308      	adds	r3, #8
 8008c46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c4a:	e853 3f00 	ldrex	r3, [r3]
 8008c4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c52:	f023 0301 	bic.w	r3, r3, #1
 8008c56:	667b      	str	r3, [r7, #100]	@ 0x64
 8008c58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	3308      	adds	r3, #8
 8008c5e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008c60:	643a      	str	r2, [r7, #64]	@ 0x40
 8008c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c68:	e841 2300 	strex	r3, r2, [r1]
 8008c6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d1e5      	bne.n	8008c40 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	3308      	adds	r3, #8
 8008c7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7c:	6a3b      	ldr	r3, [r7, #32]
 8008c7e:	e853 3f00 	ldrex	r3, [r3]
 8008c82:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c84:	69fb      	ldr	r3, [r7, #28]
 8008c86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c8a:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	3308      	adds	r3, #8
 8008c92:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008c94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c9c:	e841 2300 	strex	r3, r2, [r1]
 8008ca0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d1e5      	bne.n	8008c74 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008ca8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008caa:	2220      	movs	r2, #32
 8008cac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d118      	bne.n	8008cea <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	e853 3f00 	ldrex	r3, [r3]
 8008cc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	f023 0310 	bic.w	r3, r3, #16
 8008ccc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008cce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008cd6:	61bb      	str	r3, [r7, #24]
 8008cd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cda:	6979      	ldr	r1, [r7, #20]
 8008cdc:	69ba      	ldr	r2, [r7, #24]
 8008cde:	e841 2300 	strex	r3, r2, [r1]
 8008ce2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d1e6      	bne.n	8008cb8 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cec:	2200      	movs	r2, #0
 8008cee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d122      	bne.n	8008d3e <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 8008cf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 8008d0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d0c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008d10:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d204      	bcs.n	8008d22 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8008d18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d1a:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8008d1e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008d22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d24:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008d28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	1ad3      	subs	r3, r2, r3
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	4619      	mov	r1, r3
 8008d36:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008d38:	f7ff f9a4 	bl	8008084 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d3c:	e002      	b.n	8008d44 <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 8008d3e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008d40:	f7ff f982 	bl	8008048 <HAL_UART_RxCpltCallback>
}
 8008d44:	bf00      	nop
 8008d46:	3770      	adds	r7, #112	@ 0x70
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d58:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d123      	bne.n	8008db0 <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008d6e:	085b      	lsrs	r3, r3, #1
 8008d70:	b29a      	uxth	r2, r3
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008d86:	897a      	ldrh	r2, [r7, #10]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d803      	bhi.n	8008d94 <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	897a      	ldrh	r2, [r7, #10]
 8008d90:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	1ad3      	subs	r3, r2, r3
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	4619      	mov	r1, r3
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	f7ff f96b 	bl	8008084 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008dae:	e002      	b.n	8008db6 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 8008db0:	68f8      	ldr	r0, [r7, #12]
 8008db2:	f7ff f953 	bl	800805c <HAL_UART_RxHalfCpltCallback>
}
 8008db6:	bf00      	nop
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b086      	sub	sp, #24
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dca:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008dd0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dd8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008de4:	2b80      	cmp	r3, #128	@ 0x80
 8008de6:	d109      	bne.n	8008dfc <UART_DMAError+0x3e>
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	2b21      	cmp	r3, #33	@ 0x21
 8008dec:	d106      	bne.n	8008dfc <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	2200      	movs	r2, #0
 8008df2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8008df6:	6978      	ldr	r0, [r7, #20]
 8008df8:	f7ff fe16 	bl	8008a28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e06:	2b40      	cmp	r3, #64	@ 0x40
 8008e08:	d109      	bne.n	8008e1e <UART_DMAError+0x60>
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2b22      	cmp	r3, #34	@ 0x22
 8008e0e:	d106      	bne.n	8008e1e <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	2200      	movs	r2, #0
 8008e14:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8008e18:	6978      	ldr	r0, [r7, #20]
 8008e1a:	f7ff fe2b 	bl	8008a74 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e24:	f043 0210 	orr.w	r2, r3, #16
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e2e:	6978      	ldr	r0, [r7, #20]
 8008e30:	f7ff f91e 	bl	8008070 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e34:	bf00      	nop
 8008e36:	3718      	adds	r7, #24
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e52:	68f8      	ldr	r0, [r7, #12]
 8008e54:	f7ff f90c 	bl	8008070 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e58:	bf00      	nop
 8008e5a:	3710      	adds	r7, #16
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b088      	sub	sp, #32
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	e853 3f00 	ldrex	r3, [r3]
 8008e74:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e7c:	61fb      	str	r3, [r7, #28]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	461a      	mov	r2, r3
 8008e84:	69fb      	ldr	r3, [r7, #28]
 8008e86:	61bb      	str	r3, [r7, #24]
 8008e88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8a:	6979      	ldr	r1, [r7, #20]
 8008e8c:	69ba      	ldr	r2, [r7, #24]
 8008e8e:	e841 2300 	strex	r3, r2, [r1]
 8008e92:	613b      	str	r3, [r7, #16]
   return(result);
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d1e6      	bne.n	8008e68 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2220      	movs	r2, #32
 8008e9e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f7ff f8ba 	bl	8008020 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008eac:	bf00      	nop
 8008eae:	3720      	adds	r7, #32
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008eb4:	b480      	push	{r7}
 8008eb6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008eb8:	bf00      	nop
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr
	...

08008ec4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008ec4:	b480      	push	{r7}
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008eca:	f3ef 8305 	mrs	r3, IPSR
 8008ece:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ed0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d10f      	bne.n	8008ef6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8008eda:	607b      	str	r3, [r7, #4]
  return(result);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d105      	bne.n	8008eee <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008ee2:	f3ef 8311 	mrs	r3, BASEPRI
 8008ee6:	603b      	str	r3, [r7, #0]
  return(result);
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d007      	beq.n	8008efe <osKernelInitialize+0x3a>
 8008eee:	4b0e      	ldr	r3, [pc, #56]	@ (8008f28 <osKernelInitialize+0x64>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2b02      	cmp	r3, #2
 8008ef4:	d103      	bne.n	8008efe <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008ef6:	f06f 0305 	mvn.w	r3, #5
 8008efa:	60fb      	str	r3, [r7, #12]
 8008efc:	e00c      	b.n	8008f18 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008efe:	4b0a      	ldr	r3, [pc, #40]	@ (8008f28 <osKernelInitialize+0x64>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d105      	bne.n	8008f12 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008f06:	4b08      	ldr	r3, [pc, #32]	@ (8008f28 <osKernelInitialize+0x64>)
 8008f08:	2201      	movs	r2, #1
 8008f0a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	60fb      	str	r3, [r7, #12]
 8008f10:	e002      	b.n	8008f18 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008f12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008f16:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008f18:	68fb      	ldr	r3, [r7, #12]
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3714      	adds	r7, #20
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr
 8008f26:	bf00      	nop
 8008f28:	20005274 	.word	0x20005274

08008f2c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f32:	f3ef 8305 	mrs	r3, IPSR
 8008f36:	60bb      	str	r3, [r7, #8]
  return(result);
 8008f38:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d10f      	bne.n	8008f5e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f3e:	f3ef 8310 	mrs	r3, PRIMASK
 8008f42:	607b      	str	r3, [r7, #4]
  return(result);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d105      	bne.n	8008f56 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f4a:	f3ef 8311 	mrs	r3, BASEPRI
 8008f4e:	603b      	str	r3, [r7, #0]
  return(result);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d007      	beq.n	8008f66 <osKernelStart+0x3a>
 8008f56:	4b0f      	ldr	r3, [pc, #60]	@ (8008f94 <osKernelStart+0x68>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2b02      	cmp	r3, #2
 8008f5c:	d103      	bne.n	8008f66 <osKernelStart+0x3a>
    stat = osErrorISR;
 8008f5e:	f06f 0305 	mvn.w	r3, #5
 8008f62:	60fb      	str	r3, [r7, #12]
 8008f64:	e010      	b.n	8008f88 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008f66:	4b0b      	ldr	r3, [pc, #44]	@ (8008f94 <osKernelStart+0x68>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d109      	bne.n	8008f82 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008f6e:	f7ff ffa1 	bl	8008eb4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008f72:	4b08      	ldr	r3, [pc, #32]	@ (8008f94 <osKernelStart+0x68>)
 8008f74:	2202      	movs	r2, #2
 8008f76:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008f78:	f001 fc42 	bl	800a800 <vTaskStartScheduler>
      stat = osOK;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	60fb      	str	r3, [r7, #12]
 8008f80:	e002      	b.n	8008f88 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8008f82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008f86:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008f88:	68fb      	ldr	r3, [r7, #12]
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3710      	adds	r7, #16
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	20005274 	.word	0x20005274

08008f98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b090      	sub	sp, #64	@ 0x40
 8008f9c:	af04      	add	r7, sp, #16
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fa8:	f3ef 8305 	mrs	r3, IPSR
 8008fac:	61fb      	str	r3, [r7, #28]
  return(result);
 8008fae:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	f040 8090 	bne.w	80090d6 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fb6:	f3ef 8310 	mrs	r3, PRIMASK
 8008fba:	61bb      	str	r3, [r7, #24]
  return(result);
 8008fbc:	69bb      	ldr	r3, [r7, #24]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d105      	bne.n	8008fce <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008fc2:	f3ef 8311 	mrs	r3, BASEPRI
 8008fc6:	617b      	str	r3, [r7, #20]
  return(result);
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d003      	beq.n	8008fd6 <osThreadNew+0x3e>
 8008fce:	4b44      	ldr	r3, [pc, #272]	@ (80090e0 <osThreadNew+0x148>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d07f      	beq.n	80090d6 <osThreadNew+0x13e>
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d07c      	beq.n	80090d6 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 8008fdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008fe2:	2318      	movs	r3, #24
 8008fe4:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8008fea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008fee:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d045      	beq.n	8009082 <osThreadNew+0xea>
      if (attr->name != NULL) {
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d002      	beq.n	8009004 <osThreadNew+0x6c>
        name = attr->name;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	699b      	ldr	r3, [r3, #24]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d002      	beq.n	8009012 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	699b      	ldr	r3, [r3, #24]
 8009010:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009014:	2b00      	cmp	r3, #0
 8009016:	d008      	beq.n	800902a <osThreadNew+0x92>
 8009018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800901a:	2b38      	cmp	r3, #56	@ 0x38
 800901c:	d805      	bhi.n	800902a <osThreadNew+0x92>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	f003 0301 	and.w	r3, r3, #1
 8009026:	2b00      	cmp	r3, #0
 8009028:	d001      	beq.n	800902e <osThreadNew+0x96>
        return (NULL);
 800902a:	2300      	movs	r3, #0
 800902c:	e054      	b.n	80090d8 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	695b      	ldr	r3, [r3, #20]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d003      	beq.n	800903e <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	695b      	ldr	r3, [r3, #20]
 800903a:	089b      	lsrs	r3, r3, #2
 800903c:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d00e      	beq.n	8009064 <osThreadNew+0xcc>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	2b5b      	cmp	r3, #91	@ 0x5b
 800904c:	d90a      	bls.n	8009064 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009052:	2b00      	cmp	r3, #0
 8009054:	d006      	beq.n	8009064 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	695b      	ldr	r3, [r3, #20]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d002      	beq.n	8009064 <osThreadNew+0xcc>
        mem = 1;
 800905e:	2301      	movs	r3, #1
 8009060:	623b      	str	r3, [r7, #32]
 8009062:	e010      	b.n	8009086 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d10c      	bne.n	8009086 <osThreadNew+0xee>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d108      	bne.n	8009086 <osThreadNew+0xee>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	691b      	ldr	r3, [r3, #16]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d104      	bne.n	8009086 <osThreadNew+0xee>
          mem = 0;
 800907c:	2300      	movs	r3, #0
 800907e:	623b      	str	r3, [r7, #32]
 8009080:	e001      	b.n	8009086 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 8009082:	2300      	movs	r3, #0
 8009084:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009086:	6a3b      	ldr	r3, [r7, #32]
 8009088:	2b01      	cmp	r3, #1
 800908a:	d110      	bne.n	80090ae <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009094:	9202      	str	r2, [sp, #8]
 8009096:	9301      	str	r3, [sp, #4]
 8009098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800909a:	9300      	str	r3, [sp, #0]
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80090a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80090a2:	68f8      	ldr	r0, [r7, #12]
 80090a4:	f001 f9c6 	bl	800a434 <xTaskCreateStatic>
 80090a8:	4603      	mov	r3, r0
 80090aa:	613b      	str	r3, [r7, #16]
 80090ac:	e013      	b.n	80090d6 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 80090ae:	6a3b      	ldr	r3, [r7, #32]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d110      	bne.n	80090d6 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80090b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090b6:	b29a      	uxth	r2, r3
 80090b8:	f107 0310 	add.w	r3, r7, #16
 80090bc:	9301      	str	r3, [sp, #4]
 80090be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c0:	9300      	str	r3, [sp, #0]
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80090c6:	68f8      	ldr	r0, [r7, #12]
 80090c8:	f001 fa1a 	bl	800a500 <xTaskCreate>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d001      	beq.n	80090d6 <osThreadNew+0x13e>
          hTask = NULL;
 80090d2:	2300      	movs	r3, #0
 80090d4:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80090d6:	693b      	ldr	r3, [r7, #16]
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3730      	adds	r7, #48	@ 0x30
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	20005274 	.word	0x20005274

080090e4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b086      	sub	sp, #24
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090ec:	f3ef 8305 	mrs	r3, IPSR
 80090f0:	613b      	str	r3, [r7, #16]
  return(result);
 80090f2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10f      	bne.n	8009118 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090f8:	f3ef 8310 	mrs	r3, PRIMASK
 80090fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d105      	bne.n	8009110 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009104:	f3ef 8311 	mrs	r3, BASEPRI
 8009108:	60bb      	str	r3, [r7, #8]
  return(result);
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d007      	beq.n	8009120 <osDelay+0x3c>
 8009110:	4b0a      	ldr	r3, [pc, #40]	@ (800913c <osDelay+0x58>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2b02      	cmp	r3, #2
 8009116:	d103      	bne.n	8009120 <osDelay+0x3c>
    stat = osErrorISR;
 8009118:	f06f 0305 	mvn.w	r3, #5
 800911c:	617b      	str	r3, [r7, #20]
 800911e:	e007      	b.n	8009130 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009120:	2300      	movs	r3, #0
 8009122:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d002      	beq.n	8009130 <osDelay+0x4c>
      vTaskDelay(ticks);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f001 fb30 	bl	800a790 <vTaskDelay>
    }
  }

  return (stat);
 8009130:	697b      	ldr	r3, [r7, #20]
}
 8009132:	4618      	mov	r0, r3
 8009134:	3718      	adds	r7, #24
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	20005274 	.word	0x20005274

08009140 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009140:	b580      	push	{r7, lr}
 8009142:	b08a      	sub	sp, #40	@ 0x28
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009148:	2300      	movs	r3, #0
 800914a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800914c:	f3ef 8305 	mrs	r3, IPSR
 8009150:	613b      	str	r3, [r7, #16]
  return(result);
 8009152:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8009154:	2b00      	cmp	r3, #0
 8009156:	f040 8085 	bne.w	8009264 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800915a:	f3ef 8310 	mrs	r3, PRIMASK
 800915e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d105      	bne.n	8009172 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009166:	f3ef 8311 	mrs	r3, BASEPRI
 800916a:	60bb      	str	r3, [r7, #8]
  return(result);
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d003      	beq.n	800917a <osMutexNew+0x3a>
 8009172:	4b3f      	ldr	r3, [pc, #252]	@ (8009270 <osMutexNew+0x130>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2b02      	cmp	r3, #2
 8009178:	d074      	beq.n	8009264 <osMutexNew+0x124>
    if (attr != NULL) {
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d003      	beq.n	8009188 <osMutexNew+0x48>
      type = attr->attr_bits;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	623b      	str	r3, [r7, #32]
 8009186:	e001      	b.n	800918c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8009188:	2300      	movs	r3, #0
 800918a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800918c:	6a3b      	ldr	r3, [r7, #32]
 800918e:	f003 0301 	and.w	r3, r3, #1
 8009192:	2b00      	cmp	r3, #0
 8009194:	d002      	beq.n	800919c <osMutexNew+0x5c>
      rmtx = 1U;
 8009196:	2301      	movs	r3, #1
 8009198:	61fb      	str	r3, [r7, #28]
 800919a:	e001      	b.n	80091a0 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800919c:	2300      	movs	r3, #0
 800919e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80091a0:	6a3b      	ldr	r3, [r7, #32]
 80091a2:	f003 0308 	and.w	r3, r3, #8
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d15c      	bne.n	8009264 <osMutexNew+0x124>
      mem = -1;
 80091aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80091ae:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d015      	beq.n	80091e2 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d006      	beq.n	80091cc <osMutexNew+0x8c>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	2b4f      	cmp	r3, #79	@ 0x4f
 80091c4:	d902      	bls.n	80091cc <osMutexNew+0x8c>
          mem = 1;
 80091c6:	2301      	movs	r3, #1
 80091c8:	61bb      	str	r3, [r7, #24]
 80091ca:	e00c      	b.n	80091e6 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d108      	bne.n	80091e6 <osMutexNew+0xa6>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d104      	bne.n	80091e6 <osMutexNew+0xa6>
            mem = 0;
 80091dc:	2300      	movs	r3, #0
 80091de:	61bb      	str	r3, [r7, #24]
 80091e0:	e001      	b.n	80091e6 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80091e2:	2300      	movs	r3, #0
 80091e4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80091e6:	69bb      	ldr	r3, [r7, #24]
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d112      	bne.n	8009212 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d007      	beq.n	8009202 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	4619      	mov	r1, r3
 80091f8:	2004      	movs	r0, #4
 80091fa:	f000 fb5c 	bl	80098b6 <xQueueCreateMutexStatic>
 80091fe:	6278      	str	r0, [r7, #36]	@ 0x24
 8009200:	e016      	b.n	8009230 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	4619      	mov	r1, r3
 8009208:	2001      	movs	r0, #1
 800920a:	f000 fb54 	bl	80098b6 <xQueueCreateMutexStatic>
 800920e:	6278      	str	r0, [r7, #36]	@ 0x24
 8009210:	e00e      	b.n	8009230 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d10b      	bne.n	8009230 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d004      	beq.n	8009228 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800921e:	2004      	movs	r0, #4
 8009220:	f000 fb31 	bl	8009886 <xQueueCreateMutex>
 8009224:	6278      	str	r0, [r7, #36]	@ 0x24
 8009226:	e003      	b.n	8009230 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8009228:	2001      	movs	r0, #1
 800922a:	f000 fb2c 	bl	8009886 <xQueueCreateMutex>
 800922e:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00c      	beq.n	8009250 <osMutexNew+0x110>
        if (attr != NULL) {
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d003      	beq.n	8009244 <osMutexNew+0x104>
          name = attr->name;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	617b      	str	r3, [r7, #20]
 8009242:	e001      	b.n	8009248 <osMutexNew+0x108>
        } else {
          name = NULL;
 8009244:	2300      	movs	r3, #0
 8009246:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8009248:	6979      	ldr	r1, [r7, #20]
 800924a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800924c:	f001 f894 	bl	800a378 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009252:	2b00      	cmp	r3, #0
 8009254:	d006      	beq.n	8009264 <osMutexNew+0x124>
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d003      	beq.n	8009264 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800925c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800925e:	f043 0301 	orr.w	r3, r3, #1
 8009262:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009266:	4618      	mov	r0, r3
 8009268:	3728      	adds	r7, #40	@ 0x28
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	20005274 	.word	0x20005274

08009274 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8009274:	b580      	push	{r7, lr}
 8009276:	b088      	sub	sp, #32
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f023 0301 	bic.w	r3, r3, #1
 8009284:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f003 0301 	and.w	r3, r3, #1
 800928c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800928e:	2300      	movs	r3, #0
 8009290:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009292:	f3ef 8305 	mrs	r3, IPSR
 8009296:	613b      	str	r3, [r7, #16]
  return(result);
 8009298:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800929a:	2b00      	cmp	r3, #0
 800929c:	d10f      	bne.n	80092be <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800929e:	f3ef 8310 	mrs	r3, PRIMASK
 80092a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d105      	bne.n	80092b6 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80092aa:	f3ef 8311 	mrs	r3, BASEPRI
 80092ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d007      	beq.n	80092c6 <osMutexAcquire+0x52>
 80092b6:	4b1d      	ldr	r3, [pc, #116]	@ (800932c <osMutexAcquire+0xb8>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	d103      	bne.n	80092c6 <osMutexAcquire+0x52>
    stat = osErrorISR;
 80092be:	f06f 0305 	mvn.w	r3, #5
 80092c2:	61fb      	str	r3, [r7, #28]
 80092c4:	e02c      	b.n	8009320 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d103      	bne.n	80092d4 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80092cc:	f06f 0303 	mvn.w	r3, #3
 80092d0:	61fb      	str	r3, [r7, #28]
 80092d2:	e025      	b.n	8009320 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d011      	beq.n	80092fe <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80092da:	6839      	ldr	r1, [r7, #0]
 80092dc:	69b8      	ldr	r0, [r7, #24]
 80092de:	f000 fb3c 	bl	800995a <xQueueTakeMutexRecursive>
 80092e2:	4603      	mov	r3, r0
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d01b      	beq.n	8009320 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d003      	beq.n	80092f6 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80092ee:	f06f 0301 	mvn.w	r3, #1
 80092f2:	61fb      	str	r3, [r7, #28]
 80092f4:	e014      	b.n	8009320 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80092f6:	f06f 0302 	mvn.w	r3, #2
 80092fa:	61fb      	str	r3, [r7, #28]
 80092fc:	e010      	b.n	8009320 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80092fe:	6839      	ldr	r1, [r7, #0]
 8009300:	69b8      	ldr	r0, [r7, #24]
 8009302:	f000 fdf9 	bl	8009ef8 <xQueueSemaphoreTake>
 8009306:	4603      	mov	r3, r0
 8009308:	2b01      	cmp	r3, #1
 800930a:	d009      	beq.n	8009320 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d003      	beq.n	800931a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8009312:	f06f 0301 	mvn.w	r3, #1
 8009316:	61fb      	str	r3, [r7, #28]
 8009318:	e002      	b.n	8009320 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800931a:	f06f 0302 	mvn.w	r3, #2
 800931e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009320:	69fb      	ldr	r3, [r7, #28]
}
 8009322:	4618      	mov	r0, r3
 8009324:	3720      	adds	r7, #32
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	20005274 	.word	0x20005274

08009330 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009330:	b580      	push	{r7, lr}
 8009332:	b088      	sub	sp, #32
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f023 0301 	bic.w	r3, r3, #1
 800933e:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f003 0301 	and.w	r3, r3, #1
 8009346:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8009348:	2300      	movs	r3, #0
 800934a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800934c:	f3ef 8305 	mrs	r3, IPSR
 8009350:	613b      	str	r3, [r7, #16]
  return(result);
 8009352:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8009354:	2b00      	cmp	r3, #0
 8009356:	d10f      	bne.n	8009378 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009358:	f3ef 8310 	mrs	r3, PRIMASK
 800935c:	60fb      	str	r3, [r7, #12]
  return(result);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d105      	bne.n	8009370 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009364:	f3ef 8311 	mrs	r3, BASEPRI
 8009368:	60bb      	str	r3, [r7, #8]
  return(result);
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d007      	beq.n	8009380 <osMutexRelease+0x50>
 8009370:	4b16      	ldr	r3, [pc, #88]	@ (80093cc <osMutexRelease+0x9c>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2b02      	cmp	r3, #2
 8009376:	d103      	bne.n	8009380 <osMutexRelease+0x50>
    stat = osErrorISR;
 8009378:	f06f 0305 	mvn.w	r3, #5
 800937c:	61fb      	str	r3, [r7, #28]
 800937e:	e01f      	b.n	80093c0 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8009380:	69bb      	ldr	r3, [r7, #24]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d103      	bne.n	800938e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8009386:	f06f 0303 	mvn.w	r3, #3
 800938a:	61fb      	str	r3, [r7, #28]
 800938c:	e018      	b.n	80093c0 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d009      	beq.n	80093a8 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8009394:	69b8      	ldr	r0, [r7, #24]
 8009396:	f000 faa9 	bl	80098ec <xQueueGiveMutexRecursive>
 800939a:	4603      	mov	r3, r0
 800939c:	2b01      	cmp	r3, #1
 800939e:	d00f      	beq.n	80093c0 <osMutexRelease+0x90>
        stat = osErrorResource;
 80093a0:	f06f 0302 	mvn.w	r3, #2
 80093a4:	61fb      	str	r3, [r7, #28]
 80093a6:	e00b      	b.n	80093c0 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80093a8:	2300      	movs	r3, #0
 80093aa:	2200      	movs	r2, #0
 80093ac:	2100      	movs	r1, #0
 80093ae:	69b8      	ldr	r0, [r7, #24]
 80093b0:	f000 fb0c 	bl	80099cc <xQueueGenericSend>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d002      	beq.n	80093c0 <osMutexRelease+0x90>
        stat = osErrorResource;
 80093ba:	f06f 0302 	mvn.w	r3, #2
 80093be:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80093c0:	69fb      	ldr	r3, [r7, #28]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3720      	adds	r7, #32
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	20005274 	.word	0x20005274

080093d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80093d0:	b480      	push	{r7}
 80093d2:	b085      	sub	sp, #20
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	4a07      	ldr	r2, [pc, #28]	@ (80093fc <vApplicationGetIdleTaskMemory+0x2c>)
 80093e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	4a06      	ldr	r2, [pc, #24]	@ (8009400 <vApplicationGetIdleTaskMemory+0x30>)
 80093e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80093ee:	601a      	str	r2, [r3, #0]
}
 80093f0:	bf00      	nop
 80093f2:	3714      	adds	r7, #20
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr
 80093fc:	20005278 	.word	0x20005278
 8009400:	200052d4 	.word	0x200052d4

08009404 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009404:	b480      	push	{r7}
 8009406:	b085      	sub	sp, #20
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	4a07      	ldr	r2, [pc, #28]	@ (8009430 <vApplicationGetTimerTaskMemory+0x2c>)
 8009414:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	4a06      	ldr	r2, [pc, #24]	@ (8009434 <vApplicationGetTimerTaskMemory+0x30>)
 800941a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009422:	601a      	str	r2, [r3, #0]
}
 8009424:	bf00      	nop
 8009426:	3714      	adds	r7, #20
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr
 8009430:	200056d4 	.word	0x200056d4
 8009434:	20005730 	.word	0x20005730

08009438 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009438:	b480      	push	{r7}
 800943a:	b083      	sub	sp, #12
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f103 0208 	add.w	r2, r3, #8
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009450:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f103 0208 	add.w	r2, r3, #8
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f103 0208 	add.w	r2, r3, #8
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800946c:	bf00      	nop
 800946e:	370c      	adds	r7, #12
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr

08009478 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009486:	bf00      	nop
 8009488:	370c      	adds	r7, #12
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr

08009492 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009492:	b480      	push	{r7}
 8009494:	b085      	sub	sp, #20
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
 800949a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	68fa      	ldr	r2, [r7, #12]
 80094a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	689a      	ldr	r2, [r3, #8]
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	683a      	ldr	r2, [r7, #0]
 80094b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	683a      	ldr	r2, [r7, #0]
 80094bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	687a      	ldr	r2, [r7, #4]
 80094c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	1c5a      	adds	r2, r3, #1
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	601a      	str	r2, [r3, #0]
}
 80094ce:	bf00      	nop
 80094d0:	3714      	adds	r7, #20
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr

080094da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80094da:	b480      	push	{r7}
 80094dc:	b085      	sub	sp, #20
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
 80094e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80094f0:	d103      	bne.n	80094fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	691b      	ldr	r3, [r3, #16]
 80094f6:	60fb      	str	r3, [r7, #12]
 80094f8:	e00c      	b.n	8009514 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	3308      	adds	r3, #8
 80094fe:	60fb      	str	r3, [r7, #12]
 8009500:	e002      	b.n	8009508 <vListInsert+0x2e>
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	60fb      	str	r3, [r7, #12]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	68ba      	ldr	r2, [r7, #8]
 8009510:	429a      	cmp	r2, r3
 8009512:	d2f6      	bcs.n	8009502 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	685a      	ldr	r2, [r3, #4]
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	683a      	ldr	r2, [r7, #0]
 8009522:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	68fa      	ldr	r2, [r7, #12]
 8009528:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	683a      	ldr	r2, [r7, #0]
 800952e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	1c5a      	adds	r2, r3, #1
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	601a      	str	r2, [r3, #0]
}
 8009540:	bf00      	nop
 8009542:	3714      	adds	r7, #20
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800954c:	b480      	push	{r7}
 800954e:	b085      	sub	sp, #20
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	691b      	ldr	r3, [r3, #16]
 8009558:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	6892      	ldr	r2, [r2, #8]
 8009562:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	6852      	ldr	r2, [r2, #4]
 800956c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	429a      	cmp	r2, r3
 8009576:	d103      	bne.n	8009580 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	689a      	ldr	r2, [r3, #8]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	1e5a      	subs	r2, r3, #1
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
}
 8009594:	4618      	mov	r0, r3
 8009596:	3714      	adds	r7, #20
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b084      	sub	sp, #16
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d10d      	bne.n	80095d0 <xQueueGenericReset+0x30>
	__asm volatile
 80095b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b8:	b672      	cpsid	i
 80095ba:	f383 8811 	msr	BASEPRI, r3
 80095be:	f3bf 8f6f 	isb	sy
 80095c2:	f3bf 8f4f 	dsb	sy
 80095c6:	b662      	cpsie	i
 80095c8:	60bb      	str	r3, [r7, #8]
}
 80095ca:	bf00      	nop
 80095cc:	bf00      	nop
 80095ce:	e7fd      	b.n	80095cc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80095d0:	f002 fc14 	bl	800bdfc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095dc:	68f9      	ldr	r1, [r7, #12]
 80095de:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80095e0:	fb01 f303 	mul.w	r3, r1, r3
 80095e4:	441a      	add	r2, r3
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2200      	movs	r2, #0
 80095ee:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009600:	3b01      	subs	r3, #1
 8009602:	68f9      	ldr	r1, [r7, #12]
 8009604:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009606:	fb01 f303 	mul.w	r3, r1, r3
 800960a:	441a      	add	r2, r3
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	22ff      	movs	r2, #255	@ 0xff
 8009614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	22ff      	movs	r2, #255	@ 0xff
 800961c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d114      	bne.n	8009650 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	691b      	ldr	r3, [r3, #16]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d01a      	beq.n	8009664 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	3310      	adds	r3, #16
 8009632:	4618      	mov	r0, r3
 8009634:	f001 fb80 	bl	800ad38 <xTaskRemoveFromEventList>
 8009638:	4603      	mov	r3, r0
 800963a:	2b00      	cmp	r3, #0
 800963c:	d012      	beq.n	8009664 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800963e:	4b0d      	ldr	r3, [pc, #52]	@ (8009674 <xQueueGenericReset+0xd4>)
 8009640:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009644:	601a      	str	r2, [r3, #0]
 8009646:	f3bf 8f4f 	dsb	sy
 800964a:	f3bf 8f6f 	isb	sy
 800964e:	e009      	b.n	8009664 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	3310      	adds	r3, #16
 8009654:	4618      	mov	r0, r3
 8009656:	f7ff feef 	bl	8009438 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	3324      	adds	r3, #36	@ 0x24
 800965e:	4618      	mov	r0, r3
 8009660:	f7ff feea 	bl	8009438 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009664:	f002 fc00 	bl	800be68 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009668:	2301      	movs	r3, #1
}
 800966a:	4618      	mov	r0, r3
 800966c:	3710      	adds	r7, #16
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	e000ed04 	.word	0xe000ed04

08009678 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009678:	b580      	push	{r7, lr}
 800967a:	b08e      	sub	sp, #56	@ 0x38
 800967c:	af02      	add	r7, sp, #8
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	607a      	str	r2, [r7, #4]
 8009684:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d10d      	bne.n	80096a8 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800968c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009690:	b672      	cpsid	i
 8009692:	f383 8811 	msr	BASEPRI, r3
 8009696:	f3bf 8f6f 	isb	sy
 800969a:	f3bf 8f4f 	dsb	sy
 800969e:	b662      	cpsie	i
 80096a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80096a2:	bf00      	nop
 80096a4:	bf00      	nop
 80096a6:	e7fd      	b.n	80096a4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d10d      	bne.n	80096ca <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80096ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096b2:	b672      	cpsid	i
 80096b4:	f383 8811 	msr	BASEPRI, r3
 80096b8:	f3bf 8f6f 	isb	sy
 80096bc:	f3bf 8f4f 	dsb	sy
 80096c0:	b662      	cpsie	i
 80096c2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80096c4:	bf00      	nop
 80096c6:	bf00      	nop
 80096c8:	e7fd      	b.n	80096c6 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d002      	beq.n	80096d6 <xQueueGenericCreateStatic+0x5e>
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d001      	beq.n	80096da <xQueueGenericCreateStatic+0x62>
 80096d6:	2301      	movs	r3, #1
 80096d8:	e000      	b.n	80096dc <xQueueGenericCreateStatic+0x64>
 80096da:	2300      	movs	r3, #0
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d10d      	bne.n	80096fc <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80096e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e4:	b672      	cpsid	i
 80096e6:	f383 8811 	msr	BASEPRI, r3
 80096ea:	f3bf 8f6f 	isb	sy
 80096ee:	f3bf 8f4f 	dsb	sy
 80096f2:	b662      	cpsie	i
 80096f4:	623b      	str	r3, [r7, #32]
}
 80096f6:	bf00      	nop
 80096f8:	bf00      	nop
 80096fa:	e7fd      	b.n	80096f8 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d102      	bne.n	8009708 <xQueueGenericCreateStatic+0x90>
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d101      	bne.n	800970c <xQueueGenericCreateStatic+0x94>
 8009708:	2301      	movs	r3, #1
 800970a:	e000      	b.n	800970e <xQueueGenericCreateStatic+0x96>
 800970c:	2300      	movs	r3, #0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d10d      	bne.n	800972e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8009712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009716:	b672      	cpsid	i
 8009718:	f383 8811 	msr	BASEPRI, r3
 800971c:	f3bf 8f6f 	isb	sy
 8009720:	f3bf 8f4f 	dsb	sy
 8009724:	b662      	cpsie	i
 8009726:	61fb      	str	r3, [r7, #28]
}
 8009728:	bf00      	nop
 800972a:	bf00      	nop
 800972c:	e7fd      	b.n	800972a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800972e:	2350      	movs	r3, #80	@ 0x50
 8009730:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	2b50      	cmp	r3, #80	@ 0x50
 8009736:	d00d      	beq.n	8009754 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8009738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800973c:	b672      	cpsid	i
 800973e:	f383 8811 	msr	BASEPRI, r3
 8009742:	f3bf 8f6f 	isb	sy
 8009746:	f3bf 8f4f 	dsb	sy
 800974a:	b662      	cpsie	i
 800974c:	61bb      	str	r3, [r7, #24]
}
 800974e:	bf00      	nop
 8009750:	bf00      	nop
 8009752:	e7fd      	b.n	8009750 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009754:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800975a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800975c:	2b00      	cmp	r3, #0
 800975e:	d00d      	beq.n	800977c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009762:	2201      	movs	r2, #1
 8009764:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009768:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800976c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800976e:	9300      	str	r3, [sp, #0]
 8009770:	4613      	mov	r3, r2
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	68b9      	ldr	r1, [r7, #8]
 8009776:	68f8      	ldr	r0, [r7, #12]
 8009778:	f000 f848 	bl	800980c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800977c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800977e:	4618      	mov	r0, r3
 8009780:	3730      	adds	r7, #48	@ 0x30
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009786:	b580      	push	{r7, lr}
 8009788:	b08a      	sub	sp, #40	@ 0x28
 800978a:	af02      	add	r7, sp, #8
 800978c:	60f8      	str	r0, [r7, #12]
 800978e:	60b9      	str	r1, [r7, #8]
 8009790:	4613      	mov	r3, r2
 8009792:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d10d      	bne.n	80097b6 <xQueueGenericCreate+0x30>
	__asm volatile
 800979a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800979e:	b672      	cpsid	i
 80097a0:	f383 8811 	msr	BASEPRI, r3
 80097a4:	f3bf 8f6f 	isb	sy
 80097a8:	f3bf 8f4f 	dsb	sy
 80097ac:	b662      	cpsie	i
 80097ae:	613b      	str	r3, [r7, #16]
}
 80097b0:	bf00      	nop
 80097b2:	bf00      	nop
 80097b4:	e7fd      	b.n	80097b2 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d102      	bne.n	80097c2 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80097bc:	2300      	movs	r3, #0
 80097be:	61fb      	str	r3, [r7, #28]
 80097c0:	e004      	b.n	80097cc <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	68ba      	ldr	r2, [r7, #8]
 80097c6:	fb02 f303 	mul.w	r3, r2, r3
 80097ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	3350      	adds	r3, #80	@ 0x50
 80097d0:	4618      	mov	r0, r3
 80097d2:	f002 fc41 	bl	800c058 <pvPortMalloc>
 80097d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80097d8:	69bb      	ldr	r3, [r7, #24]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d011      	beq.n	8009802 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80097de:	69bb      	ldr	r3, [r7, #24]
 80097e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	3350      	adds	r3, #80	@ 0x50
 80097e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80097e8:	69bb      	ldr	r3, [r7, #24]
 80097ea:	2200      	movs	r2, #0
 80097ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80097f0:	79fa      	ldrb	r2, [r7, #7]
 80097f2:	69bb      	ldr	r3, [r7, #24]
 80097f4:	9300      	str	r3, [sp, #0]
 80097f6:	4613      	mov	r3, r2
 80097f8:	697a      	ldr	r2, [r7, #20]
 80097fa:	68b9      	ldr	r1, [r7, #8]
 80097fc:	68f8      	ldr	r0, [r7, #12]
 80097fe:	f000 f805 	bl	800980c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009802:	69bb      	ldr	r3, [r7, #24]
	}
 8009804:	4618      	mov	r0, r3
 8009806:	3720      	adds	r7, #32
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	607a      	str	r2, [r7, #4]
 8009818:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d103      	bne.n	8009828 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009820:	69bb      	ldr	r3, [r7, #24]
 8009822:	69ba      	ldr	r2, [r7, #24]
 8009824:	601a      	str	r2, [r3, #0]
 8009826:	e002      	b.n	800982e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009828:	69bb      	ldr	r3, [r7, #24]
 800982a:	687a      	ldr	r2, [r7, #4]
 800982c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800982e:	69bb      	ldr	r3, [r7, #24]
 8009830:	68fa      	ldr	r2, [r7, #12]
 8009832:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009834:	69bb      	ldr	r3, [r7, #24]
 8009836:	68ba      	ldr	r2, [r7, #8]
 8009838:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800983a:	2101      	movs	r1, #1
 800983c:	69b8      	ldr	r0, [r7, #24]
 800983e:	f7ff feaf 	bl	80095a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	78fa      	ldrb	r2, [r7, #3]
 8009846:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800984a:	bf00      	nop
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009852:	b580      	push	{r7, lr}
 8009854:	b082      	sub	sp, #8
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00e      	beq.n	800987e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009872:	2300      	movs	r3, #0
 8009874:	2200      	movs	r2, #0
 8009876:	2100      	movs	r1, #0
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 f8a7 	bl	80099cc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800987e:	bf00      	nop
 8009880:	3708      	adds	r7, #8
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009886:	b580      	push	{r7, lr}
 8009888:	b086      	sub	sp, #24
 800988a:	af00      	add	r7, sp, #0
 800988c:	4603      	mov	r3, r0
 800988e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009890:	2301      	movs	r3, #1
 8009892:	617b      	str	r3, [r7, #20]
 8009894:	2300      	movs	r3, #0
 8009896:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009898:	79fb      	ldrb	r3, [r7, #7]
 800989a:	461a      	mov	r2, r3
 800989c:	6939      	ldr	r1, [r7, #16]
 800989e:	6978      	ldr	r0, [r7, #20]
 80098a0:	f7ff ff71 	bl	8009786 <xQueueGenericCreate>
 80098a4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80098a6:	68f8      	ldr	r0, [r7, #12]
 80098a8:	f7ff ffd3 	bl	8009852 <prvInitialiseMutex>

		return xNewQueue;
 80098ac:	68fb      	ldr	r3, [r7, #12]
	}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3718      	adds	r7, #24
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}

080098b6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80098b6:	b580      	push	{r7, lr}
 80098b8:	b088      	sub	sp, #32
 80098ba:	af02      	add	r7, sp, #8
 80098bc:	4603      	mov	r3, r0
 80098be:	6039      	str	r1, [r7, #0]
 80098c0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80098c2:	2301      	movs	r3, #1
 80098c4:	617b      	str	r3, [r7, #20]
 80098c6:	2300      	movs	r3, #0
 80098c8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80098ca:	79fb      	ldrb	r3, [r7, #7]
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	2200      	movs	r2, #0
 80098d2:	6939      	ldr	r1, [r7, #16]
 80098d4:	6978      	ldr	r0, [r7, #20]
 80098d6:	f7ff fecf 	bl	8009678 <xQueueGenericCreateStatic>
 80098da:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80098dc:	68f8      	ldr	r0, [r7, #12]
 80098de:	f7ff ffb8 	bl	8009852 <prvInitialiseMutex>

		return xNewQueue;
 80098e2:	68fb      	ldr	r3, [r7, #12]
	}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3718      	adds	r7, #24
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80098ec:	b590      	push	{r4, r7, lr}
 80098ee:	b087      	sub	sp, #28
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d10d      	bne.n	800991a <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 80098fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009902:	b672      	cpsid	i
 8009904:	f383 8811 	msr	BASEPRI, r3
 8009908:	f3bf 8f6f 	isb	sy
 800990c:	f3bf 8f4f 	dsb	sy
 8009910:	b662      	cpsie	i
 8009912:	60fb      	str	r3, [r7, #12]
}
 8009914:	bf00      	nop
 8009916:	bf00      	nop
 8009918:	e7fd      	b.n	8009916 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	689c      	ldr	r4, [r3, #8]
 800991e:	f001 fbfd 	bl	800b11c <xTaskGetCurrentTaskHandle>
 8009922:	4603      	mov	r3, r0
 8009924:	429c      	cmp	r4, r3
 8009926:	d111      	bne.n	800994c <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	1e5a      	subs	r2, r3, #1
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d105      	bne.n	8009946 <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800993a:	2300      	movs	r3, #0
 800993c:	2200      	movs	r2, #0
 800993e:	2100      	movs	r1, #0
 8009940:	6938      	ldr	r0, [r7, #16]
 8009942:	f000 f843 	bl	80099cc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009946:	2301      	movs	r3, #1
 8009948:	617b      	str	r3, [r7, #20]
 800994a:	e001      	b.n	8009950 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800994c:	2300      	movs	r3, #0
 800994e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009950:	697b      	ldr	r3, [r7, #20]
	}
 8009952:	4618      	mov	r0, r3
 8009954:	371c      	adds	r7, #28
 8009956:	46bd      	mov	sp, r7
 8009958:	bd90      	pop	{r4, r7, pc}

0800995a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800995a:	b590      	push	{r4, r7, lr}
 800995c:	b087      	sub	sp, #28
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
 8009962:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d10d      	bne.n	800998a <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 800996e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009972:	b672      	cpsid	i
 8009974:	f383 8811 	msr	BASEPRI, r3
 8009978:	f3bf 8f6f 	isb	sy
 800997c:	f3bf 8f4f 	dsb	sy
 8009980:	b662      	cpsie	i
 8009982:	60fb      	str	r3, [r7, #12]
}
 8009984:	bf00      	nop
 8009986:	bf00      	nop
 8009988:	e7fd      	b.n	8009986 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	689c      	ldr	r4, [r3, #8]
 800998e:	f001 fbc5 	bl	800b11c <xTaskGetCurrentTaskHandle>
 8009992:	4603      	mov	r3, r0
 8009994:	429c      	cmp	r4, r3
 8009996:	d107      	bne.n	80099a8 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	1c5a      	adds	r2, r3, #1
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80099a2:	2301      	movs	r3, #1
 80099a4:	617b      	str	r3, [r7, #20]
 80099a6:	e00c      	b.n	80099c2 <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80099a8:	6839      	ldr	r1, [r7, #0]
 80099aa:	6938      	ldr	r0, [r7, #16]
 80099ac:	f000 faa4 	bl	8009ef8 <xQueueSemaphoreTake>
 80099b0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d004      	beq.n	80099c2 <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	1c5a      	adds	r2, r3, #1
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80099c2:	697b      	ldr	r3, [r7, #20]
	}
 80099c4:	4618      	mov	r0, r3
 80099c6:	371c      	adds	r7, #28
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd90      	pop	{r4, r7, pc}

080099cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b08e      	sub	sp, #56	@ 0x38
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	60f8      	str	r0, [r7, #12]
 80099d4:	60b9      	str	r1, [r7, #8]
 80099d6:	607a      	str	r2, [r7, #4]
 80099d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80099da:	2300      	movs	r3, #0
 80099dc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80099e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d10d      	bne.n	8009a04 <xQueueGenericSend+0x38>
	__asm volatile
 80099e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ec:	b672      	cpsid	i
 80099ee:	f383 8811 	msr	BASEPRI, r3
 80099f2:	f3bf 8f6f 	isb	sy
 80099f6:	f3bf 8f4f 	dsb	sy
 80099fa:	b662      	cpsie	i
 80099fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80099fe:	bf00      	nop
 8009a00:	bf00      	nop
 8009a02:	e7fd      	b.n	8009a00 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d103      	bne.n	8009a12 <xQueueGenericSend+0x46>
 8009a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d101      	bne.n	8009a16 <xQueueGenericSend+0x4a>
 8009a12:	2301      	movs	r3, #1
 8009a14:	e000      	b.n	8009a18 <xQueueGenericSend+0x4c>
 8009a16:	2300      	movs	r3, #0
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d10d      	bne.n	8009a38 <xQueueGenericSend+0x6c>
	__asm volatile
 8009a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a20:	b672      	cpsid	i
 8009a22:	f383 8811 	msr	BASEPRI, r3
 8009a26:	f3bf 8f6f 	isb	sy
 8009a2a:	f3bf 8f4f 	dsb	sy
 8009a2e:	b662      	cpsie	i
 8009a30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009a32:	bf00      	nop
 8009a34:	bf00      	nop
 8009a36:	e7fd      	b.n	8009a34 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	d103      	bne.n	8009a46 <xQueueGenericSend+0x7a>
 8009a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d101      	bne.n	8009a4a <xQueueGenericSend+0x7e>
 8009a46:	2301      	movs	r3, #1
 8009a48:	e000      	b.n	8009a4c <xQueueGenericSend+0x80>
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d10d      	bne.n	8009a6c <xQueueGenericSend+0xa0>
	__asm volatile
 8009a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a54:	b672      	cpsid	i
 8009a56:	f383 8811 	msr	BASEPRI, r3
 8009a5a:	f3bf 8f6f 	isb	sy
 8009a5e:	f3bf 8f4f 	dsb	sy
 8009a62:	b662      	cpsie	i
 8009a64:	623b      	str	r3, [r7, #32]
}
 8009a66:	bf00      	nop
 8009a68:	bf00      	nop
 8009a6a:	e7fd      	b.n	8009a68 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a6c:	f001 fb66 	bl	800b13c <xTaskGetSchedulerState>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d102      	bne.n	8009a7c <xQueueGenericSend+0xb0>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d101      	bne.n	8009a80 <xQueueGenericSend+0xb4>
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	e000      	b.n	8009a82 <xQueueGenericSend+0xb6>
 8009a80:	2300      	movs	r3, #0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d10d      	bne.n	8009aa2 <xQueueGenericSend+0xd6>
	__asm volatile
 8009a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a8a:	b672      	cpsid	i
 8009a8c:	f383 8811 	msr	BASEPRI, r3
 8009a90:	f3bf 8f6f 	isb	sy
 8009a94:	f3bf 8f4f 	dsb	sy
 8009a98:	b662      	cpsie	i
 8009a9a:	61fb      	str	r3, [r7, #28]
}
 8009a9c:	bf00      	nop
 8009a9e:	bf00      	nop
 8009aa0:	e7fd      	b.n	8009a9e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009aa2:	f002 f9ab 	bl	800bdfc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aa8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d302      	bcc.n	8009ab8 <xQueueGenericSend+0xec>
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	2b02      	cmp	r3, #2
 8009ab6:	d129      	bne.n	8009b0c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009ab8:	683a      	ldr	r2, [r7, #0]
 8009aba:	68b9      	ldr	r1, [r7, #8]
 8009abc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009abe:	f000 fb4b 	bl	800a158 <prvCopyDataToQueue>
 8009ac2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d010      	beq.n	8009aee <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ace:	3324      	adds	r3, #36	@ 0x24
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f001 f931 	bl	800ad38 <xTaskRemoveFromEventList>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d013      	beq.n	8009b04 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009adc:	4b3f      	ldr	r3, [pc, #252]	@ (8009bdc <xQueueGenericSend+0x210>)
 8009ade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ae2:	601a      	str	r2, [r3, #0]
 8009ae4:	f3bf 8f4f 	dsb	sy
 8009ae8:	f3bf 8f6f 	isb	sy
 8009aec:	e00a      	b.n	8009b04 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d007      	beq.n	8009b04 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009af4:	4b39      	ldr	r3, [pc, #228]	@ (8009bdc <xQueueGenericSend+0x210>)
 8009af6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009afa:	601a      	str	r2, [r3, #0]
 8009afc:	f3bf 8f4f 	dsb	sy
 8009b00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009b04:	f002 f9b0 	bl	800be68 <vPortExitCritical>
				return pdPASS;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e063      	b.n	8009bd4 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d103      	bne.n	8009b1a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009b12:	f002 f9a9 	bl	800be68 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009b16:	2300      	movs	r3, #0
 8009b18:	e05c      	b.n	8009bd4 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d106      	bne.n	8009b2e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b20:	f107 0314 	add.w	r3, r7, #20
 8009b24:	4618      	mov	r0, r3
 8009b26:	f001 f997 	bl	800ae58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b2e:	f002 f99b 	bl	800be68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b32:	f000 fed1 	bl	800a8d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b36:	f002 f961 	bl	800bdfc <vPortEnterCritical>
 8009b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b40:	b25b      	sxtb	r3, r3
 8009b42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b46:	d103      	bne.n	8009b50 <xQueueGenericSend+0x184>
 8009b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b52:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009b56:	b25b      	sxtb	r3, r3
 8009b58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b5c:	d103      	bne.n	8009b66 <xQueueGenericSend+0x19a>
 8009b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b60:	2200      	movs	r2, #0
 8009b62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009b66:	f002 f97f 	bl	800be68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b6a:	1d3a      	adds	r2, r7, #4
 8009b6c:	f107 0314 	add.w	r3, r7, #20
 8009b70:	4611      	mov	r1, r2
 8009b72:	4618      	mov	r0, r3
 8009b74:	f001 f986 	bl	800ae84 <xTaskCheckForTimeOut>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d124      	bne.n	8009bc8 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009b7e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b80:	f000 fbe2 	bl	800a348 <prvIsQueueFull>
 8009b84:	4603      	mov	r3, r0
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d018      	beq.n	8009bbc <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b8c:	3310      	adds	r3, #16
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	4611      	mov	r1, r2
 8009b92:	4618      	mov	r0, r3
 8009b94:	f001 f87a 	bl	800ac8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009b98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b9a:	f000 fb6d 	bl	800a278 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009b9e:	f000 fea9 	bl	800a8f4 <xTaskResumeAll>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	f47f af7c 	bne.w	8009aa2 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8009baa:	4b0c      	ldr	r3, [pc, #48]	@ (8009bdc <xQueueGenericSend+0x210>)
 8009bac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bb0:	601a      	str	r2, [r3, #0]
 8009bb2:	f3bf 8f4f 	dsb	sy
 8009bb6:	f3bf 8f6f 	isb	sy
 8009bba:	e772      	b.n	8009aa2 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009bbc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009bbe:	f000 fb5b 	bl	800a278 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009bc2:	f000 fe97 	bl	800a8f4 <xTaskResumeAll>
 8009bc6:	e76c      	b.n	8009aa2 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009bc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009bca:	f000 fb55 	bl	800a278 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009bce:	f000 fe91 	bl	800a8f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009bd2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3738      	adds	r7, #56	@ 0x38
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}
 8009bdc:	e000ed04 	.word	0xe000ed04

08009be0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b08e      	sub	sp, #56	@ 0x38
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	60b9      	str	r1, [r7, #8]
 8009bea:	607a      	str	r2, [r7, #4]
 8009bec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d10d      	bne.n	8009c14 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8009bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bfc:	b672      	cpsid	i
 8009bfe:	f383 8811 	msr	BASEPRI, r3
 8009c02:	f3bf 8f6f 	isb	sy
 8009c06:	f3bf 8f4f 	dsb	sy
 8009c0a:	b662      	cpsie	i
 8009c0c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009c0e:	bf00      	nop
 8009c10:	bf00      	nop
 8009c12:	e7fd      	b.n	8009c10 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d103      	bne.n	8009c22 <xQueueGenericSendFromISR+0x42>
 8009c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d101      	bne.n	8009c26 <xQueueGenericSendFromISR+0x46>
 8009c22:	2301      	movs	r3, #1
 8009c24:	e000      	b.n	8009c28 <xQueueGenericSendFromISR+0x48>
 8009c26:	2300      	movs	r3, #0
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d10d      	bne.n	8009c48 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8009c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c30:	b672      	cpsid	i
 8009c32:	f383 8811 	msr	BASEPRI, r3
 8009c36:	f3bf 8f6f 	isb	sy
 8009c3a:	f3bf 8f4f 	dsb	sy
 8009c3e:	b662      	cpsie	i
 8009c40:	623b      	str	r3, [r7, #32]
}
 8009c42:	bf00      	nop
 8009c44:	bf00      	nop
 8009c46:	e7fd      	b.n	8009c44 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	2b02      	cmp	r3, #2
 8009c4c:	d103      	bne.n	8009c56 <xQueueGenericSendFromISR+0x76>
 8009c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	d101      	bne.n	8009c5a <xQueueGenericSendFromISR+0x7a>
 8009c56:	2301      	movs	r3, #1
 8009c58:	e000      	b.n	8009c5c <xQueueGenericSendFromISR+0x7c>
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d10d      	bne.n	8009c7c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8009c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c64:	b672      	cpsid	i
 8009c66:	f383 8811 	msr	BASEPRI, r3
 8009c6a:	f3bf 8f6f 	isb	sy
 8009c6e:	f3bf 8f4f 	dsb	sy
 8009c72:	b662      	cpsie	i
 8009c74:	61fb      	str	r3, [r7, #28]
}
 8009c76:	bf00      	nop
 8009c78:	bf00      	nop
 8009c7a:	e7fd      	b.n	8009c78 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c7c:	f002 f9a6 	bl	800bfcc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009c80:	f3ef 8211 	mrs	r2, BASEPRI
 8009c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c88:	b672      	cpsid	i
 8009c8a:	f383 8811 	msr	BASEPRI, r3
 8009c8e:	f3bf 8f6f 	isb	sy
 8009c92:	f3bf 8f4f 	dsb	sy
 8009c96:	b662      	cpsie	i
 8009c98:	61ba      	str	r2, [r7, #24]
 8009c9a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009c9c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ca2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d302      	bcc.n	8009cb2 <xQueueGenericSendFromISR+0xd2>
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	2b02      	cmp	r3, #2
 8009cb0:	d12c      	bne.n	8009d0c <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009cb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009cbc:	683a      	ldr	r2, [r7, #0]
 8009cbe:	68b9      	ldr	r1, [r7, #8]
 8009cc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009cc2:	f000 fa49 	bl	800a158 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009cc6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8009cca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009cce:	d112      	bne.n	8009cf6 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d016      	beq.n	8009d06 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cda:	3324      	adds	r3, #36	@ 0x24
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f001 f82b 	bl	800ad38 <xTaskRemoveFromEventList>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d00e      	beq.n	8009d06 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00b      	beq.n	8009d06 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	601a      	str	r2, [r3, #0]
 8009cf4:	e007      	b.n	8009d06 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009cf6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	b25a      	sxtb	r2, r3
 8009d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009d06:	2301      	movs	r3, #1
 8009d08:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8009d0a:	e001      	b.n	8009d10 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d12:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009d1a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3738      	adds	r7, #56	@ 0x38
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
	...

08009d28 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b08c      	sub	sp, #48	@ 0x30
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009d34:	2300      	movs	r3, #0
 8009d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d10d      	bne.n	8009d5e <xQueueReceive+0x36>
	__asm volatile
 8009d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d46:	b672      	cpsid	i
 8009d48:	f383 8811 	msr	BASEPRI, r3
 8009d4c:	f3bf 8f6f 	isb	sy
 8009d50:	f3bf 8f4f 	dsb	sy
 8009d54:	b662      	cpsie	i
 8009d56:	623b      	str	r3, [r7, #32]
}
 8009d58:	bf00      	nop
 8009d5a:	bf00      	nop
 8009d5c:	e7fd      	b.n	8009d5a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d103      	bne.n	8009d6c <xQueueReceive+0x44>
 8009d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d101      	bne.n	8009d70 <xQueueReceive+0x48>
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	e000      	b.n	8009d72 <xQueueReceive+0x4a>
 8009d70:	2300      	movs	r3, #0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d10d      	bne.n	8009d92 <xQueueReceive+0x6a>
	__asm volatile
 8009d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d7a:	b672      	cpsid	i
 8009d7c:	f383 8811 	msr	BASEPRI, r3
 8009d80:	f3bf 8f6f 	isb	sy
 8009d84:	f3bf 8f4f 	dsb	sy
 8009d88:	b662      	cpsie	i
 8009d8a:	61fb      	str	r3, [r7, #28]
}
 8009d8c:	bf00      	nop
 8009d8e:	bf00      	nop
 8009d90:	e7fd      	b.n	8009d8e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d92:	f001 f9d3 	bl	800b13c <xTaskGetSchedulerState>
 8009d96:	4603      	mov	r3, r0
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d102      	bne.n	8009da2 <xQueueReceive+0x7a>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d101      	bne.n	8009da6 <xQueueReceive+0x7e>
 8009da2:	2301      	movs	r3, #1
 8009da4:	e000      	b.n	8009da8 <xQueueReceive+0x80>
 8009da6:	2300      	movs	r3, #0
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d10d      	bne.n	8009dc8 <xQueueReceive+0xa0>
	__asm volatile
 8009dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009db0:	b672      	cpsid	i
 8009db2:	f383 8811 	msr	BASEPRI, r3
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	b662      	cpsie	i
 8009dc0:	61bb      	str	r3, [r7, #24]
}
 8009dc2:	bf00      	nop
 8009dc4:	bf00      	nop
 8009dc6:	e7fd      	b.n	8009dc4 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009dc8:	f002 f818 	bl	800bdfc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dd0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d01f      	beq.n	8009e18 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009dd8:	68b9      	ldr	r1, [r7, #8]
 8009dda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ddc:	f000 fa26 	bl	800a22c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de2:	1e5a      	subs	r2, r3, #1
 8009de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009de6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d00f      	beq.n	8009e10 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009df2:	3310      	adds	r3, #16
 8009df4:	4618      	mov	r0, r3
 8009df6:	f000 ff9f 	bl	800ad38 <xTaskRemoveFromEventList>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d007      	beq.n	8009e10 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009e00:	4b3c      	ldr	r3, [pc, #240]	@ (8009ef4 <xQueueReceive+0x1cc>)
 8009e02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e06:	601a      	str	r2, [r3, #0]
 8009e08:	f3bf 8f4f 	dsb	sy
 8009e0c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009e10:	f002 f82a 	bl	800be68 <vPortExitCritical>
				return pdPASS;
 8009e14:	2301      	movs	r3, #1
 8009e16:	e069      	b.n	8009eec <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d103      	bne.n	8009e26 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009e1e:	f002 f823 	bl	800be68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009e22:	2300      	movs	r3, #0
 8009e24:	e062      	b.n	8009eec <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d106      	bne.n	8009e3a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e2c:	f107 0310 	add.w	r3, r7, #16
 8009e30:	4618      	mov	r0, r3
 8009e32:	f001 f811 	bl	800ae58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e36:	2301      	movs	r3, #1
 8009e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e3a:	f002 f815 	bl	800be68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e3e:	f000 fd4b 	bl	800a8d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e42:	f001 ffdb 	bl	800bdfc <vPortEnterCritical>
 8009e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009e4c:	b25b      	sxtb	r3, r3
 8009e4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e52:	d103      	bne.n	8009e5c <xQueueReceive+0x134>
 8009e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e56:	2200      	movs	r2, #0
 8009e58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009e62:	b25b      	sxtb	r3, r3
 8009e64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e68:	d103      	bne.n	8009e72 <xQueueReceive+0x14a>
 8009e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009e72:	f001 fff9 	bl	800be68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e76:	1d3a      	adds	r2, r7, #4
 8009e78:	f107 0310 	add.w	r3, r7, #16
 8009e7c:	4611      	mov	r1, r2
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f001 f800 	bl	800ae84 <xTaskCheckForTimeOut>
 8009e84:	4603      	mov	r3, r0
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d123      	bne.n	8009ed2 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e8c:	f000 fa46 	bl	800a31c <prvIsQueueEmpty>
 8009e90:	4603      	mov	r3, r0
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d017      	beq.n	8009ec6 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e98:	3324      	adds	r3, #36	@ 0x24
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	4611      	mov	r1, r2
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f000 fef4 	bl	800ac8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009ea4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ea6:	f000 f9e7 	bl	800a278 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009eaa:	f000 fd23 	bl	800a8f4 <xTaskResumeAll>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d189      	bne.n	8009dc8 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8009eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8009ef4 <xQueueReceive+0x1cc>)
 8009eb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009eba:	601a      	str	r2, [r3, #0]
 8009ebc:	f3bf 8f4f 	dsb	sy
 8009ec0:	f3bf 8f6f 	isb	sy
 8009ec4:	e780      	b.n	8009dc8 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009ec6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ec8:	f000 f9d6 	bl	800a278 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009ecc:	f000 fd12 	bl	800a8f4 <xTaskResumeAll>
 8009ed0:	e77a      	b.n	8009dc8 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009ed2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ed4:	f000 f9d0 	bl	800a278 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009ed8:	f000 fd0c 	bl	800a8f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009edc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ede:	f000 fa1d 	bl	800a31c <prvIsQueueEmpty>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	f43f af6f 	beq.w	8009dc8 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009eea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3730      	adds	r7, #48	@ 0x30
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}
 8009ef4:	e000ed04 	.word	0xe000ed04

08009ef8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b08e      	sub	sp, #56	@ 0x38
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009f02:	2300      	movs	r3, #0
 8009f04:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d10d      	bne.n	8009f30 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8009f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f18:	b672      	cpsid	i
 8009f1a:	f383 8811 	msr	BASEPRI, r3
 8009f1e:	f3bf 8f6f 	isb	sy
 8009f22:	f3bf 8f4f 	dsb	sy
 8009f26:	b662      	cpsie	i
 8009f28:	623b      	str	r3, [r7, #32]
}
 8009f2a:	bf00      	nop
 8009f2c:	bf00      	nop
 8009f2e:	e7fd      	b.n	8009f2c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d00d      	beq.n	8009f54 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8009f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f3c:	b672      	cpsid	i
 8009f3e:	f383 8811 	msr	BASEPRI, r3
 8009f42:	f3bf 8f6f 	isb	sy
 8009f46:	f3bf 8f4f 	dsb	sy
 8009f4a:	b662      	cpsie	i
 8009f4c:	61fb      	str	r3, [r7, #28]
}
 8009f4e:	bf00      	nop
 8009f50:	bf00      	nop
 8009f52:	e7fd      	b.n	8009f50 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f54:	f001 f8f2 	bl	800b13c <xTaskGetSchedulerState>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d102      	bne.n	8009f64 <xQueueSemaphoreTake+0x6c>
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d101      	bne.n	8009f68 <xQueueSemaphoreTake+0x70>
 8009f64:	2301      	movs	r3, #1
 8009f66:	e000      	b.n	8009f6a <xQueueSemaphoreTake+0x72>
 8009f68:	2300      	movs	r3, #0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d10d      	bne.n	8009f8a <xQueueSemaphoreTake+0x92>
	__asm volatile
 8009f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f72:	b672      	cpsid	i
 8009f74:	f383 8811 	msr	BASEPRI, r3
 8009f78:	f3bf 8f6f 	isb	sy
 8009f7c:	f3bf 8f4f 	dsb	sy
 8009f80:	b662      	cpsie	i
 8009f82:	61bb      	str	r3, [r7, #24]
}
 8009f84:	bf00      	nop
 8009f86:	bf00      	nop
 8009f88:	e7fd      	b.n	8009f86 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f8a:	f001 ff37 	bl	800bdfc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f92:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d024      	beq.n	8009fe4 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f9c:	1e5a      	subs	r2, r3, #1
 8009f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fa0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d104      	bne.n	8009fb4 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009faa:	f001 fa49 	bl	800b440 <pvTaskIncrementMutexHeldCount>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fb2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fb6:	691b      	ldr	r3, [r3, #16]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d00f      	beq.n	8009fdc <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fbe:	3310      	adds	r3, #16
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f000 feb9 	bl	800ad38 <xTaskRemoveFromEventList>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d007      	beq.n	8009fdc <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009fcc:	4b55      	ldr	r3, [pc, #340]	@ (800a124 <xQueueSemaphoreTake+0x22c>)
 8009fce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fd2:	601a      	str	r2, [r3, #0]
 8009fd4:	f3bf 8f4f 	dsb	sy
 8009fd8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009fdc:	f001 ff44 	bl	800be68 <vPortExitCritical>
				return pdPASS;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	e09a      	b.n	800a11a <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d114      	bne.n	800a014 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d00d      	beq.n	800a00c <xQueueSemaphoreTake+0x114>
	__asm volatile
 8009ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ff4:	b672      	cpsid	i
 8009ff6:	f383 8811 	msr	BASEPRI, r3
 8009ffa:	f3bf 8f6f 	isb	sy
 8009ffe:	f3bf 8f4f 	dsb	sy
 800a002:	b662      	cpsie	i
 800a004:	617b      	str	r3, [r7, #20]
}
 800a006:	bf00      	nop
 800a008:	bf00      	nop
 800a00a:	e7fd      	b.n	800a008 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a00c:	f001 ff2c 	bl	800be68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a010:	2300      	movs	r3, #0
 800a012:	e082      	b.n	800a11a <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a016:	2b00      	cmp	r3, #0
 800a018:	d106      	bne.n	800a028 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a01a:	f107 030c 	add.w	r3, r7, #12
 800a01e:	4618      	mov	r0, r3
 800a020:	f000 ff1a 	bl	800ae58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a024:	2301      	movs	r3, #1
 800a026:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a028:	f001 ff1e 	bl	800be68 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a02c:	f000 fc54 	bl	800a8d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a030:	f001 fee4 	bl	800bdfc <vPortEnterCritical>
 800a034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a036:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a03a:	b25b      	sxtb	r3, r3
 800a03c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a040:	d103      	bne.n	800a04a <xQueueSemaphoreTake+0x152>
 800a042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a044:	2200      	movs	r2, #0
 800a046:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a04a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a04c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a050:	b25b      	sxtb	r3, r3
 800a052:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a056:	d103      	bne.n	800a060 <xQueueSemaphoreTake+0x168>
 800a058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a05a:	2200      	movs	r2, #0
 800a05c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a060:	f001 ff02 	bl	800be68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a064:	463a      	mov	r2, r7
 800a066:	f107 030c 	add.w	r3, r7, #12
 800a06a:	4611      	mov	r1, r2
 800a06c:	4618      	mov	r0, r3
 800a06e:	f000 ff09 	bl	800ae84 <xTaskCheckForTimeOut>
 800a072:	4603      	mov	r3, r0
 800a074:	2b00      	cmp	r3, #0
 800a076:	d132      	bne.n	800a0de <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a078:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a07a:	f000 f94f 	bl	800a31c <prvIsQueueEmpty>
 800a07e:	4603      	mov	r3, r0
 800a080:	2b00      	cmp	r3, #0
 800a082:	d026      	beq.n	800a0d2 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d109      	bne.n	800a0a0 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800a08c:	f001 feb6 	bl	800bdfc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	4618      	mov	r0, r3
 800a096:	f001 f86f 	bl	800b178 <xTaskPriorityInherit>
 800a09a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800a09c:	f001 fee4 	bl	800be68 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a0a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0a2:	3324      	adds	r3, #36	@ 0x24
 800a0a4:	683a      	ldr	r2, [r7, #0]
 800a0a6:	4611      	mov	r1, r2
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f000 fdef 	bl	800ac8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a0ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a0b0:	f000 f8e2 	bl	800a278 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a0b4:	f000 fc1e 	bl	800a8f4 <xTaskResumeAll>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	f47f af65 	bne.w	8009f8a <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800a0c0:	4b18      	ldr	r3, [pc, #96]	@ (800a124 <xQueueSemaphoreTake+0x22c>)
 800a0c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0c6:	601a      	str	r2, [r3, #0]
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	f3bf 8f6f 	isb	sy
 800a0d0:	e75b      	b.n	8009f8a <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a0d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a0d4:	f000 f8d0 	bl	800a278 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a0d8:	f000 fc0c 	bl	800a8f4 <xTaskResumeAll>
 800a0dc:	e755      	b.n	8009f8a <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a0de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a0e0:	f000 f8ca 	bl	800a278 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a0e4:	f000 fc06 	bl	800a8f4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a0e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a0ea:	f000 f917 	bl	800a31c <prvIsQueueEmpty>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	f43f af4a 	beq.w	8009f8a <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a0f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d00d      	beq.n	800a118 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800a0fc:	f001 fe7e 	bl	800bdfc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a100:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a102:	f000 f811 	bl	800a128 <prvGetDisinheritPriorityAfterTimeout>
 800a106:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a10e:	4618      	mov	r0, r3
 800a110:	f001 f90e 	bl	800b330 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a114:	f001 fea8 	bl	800be68 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a118:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3738      	adds	r7, #56	@ 0x38
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	e000ed04 	.word	0xe000ed04

0800a128 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a128:	b480      	push	{r7}
 800a12a:	b085      	sub	sp, #20
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a134:	2b00      	cmp	r3, #0
 800a136:	d006      	beq.n	800a146 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800a142:	60fb      	str	r3, [r7, #12]
 800a144:	e001      	b.n	800a14a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a146:	2300      	movs	r3, #0
 800a148:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a14a:	68fb      	ldr	r3, [r7, #12]
	}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3714      	adds	r7, #20
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr

0800a158 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b086      	sub	sp, #24
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	60b9      	str	r1, [r7, #8]
 800a162:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a164:	2300      	movs	r3, #0
 800a166:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a16c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a172:	2b00      	cmp	r3, #0
 800a174:	d10d      	bne.n	800a192 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d14d      	bne.n	800a21a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	4618      	mov	r0, r3
 800a184:	f001 f860 	bl	800b248 <xTaskPriorityDisinherit>
 800a188:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2200      	movs	r2, #0
 800a18e:	609a      	str	r2, [r3, #8]
 800a190:	e043      	b.n	800a21a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d119      	bne.n	800a1cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	6858      	ldr	r0, [r3, #4]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	68b9      	ldr	r1, [r7, #8]
 800a1a4:	f00c fdc9 	bl	8016d3a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	685a      	ldr	r2, [r3, #4]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1b0:	441a      	add	r2, r3
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	685a      	ldr	r2, [r3, #4]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	689b      	ldr	r3, [r3, #8]
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d32b      	bcc.n	800a21a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681a      	ldr	r2, [r3, #0]
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	605a      	str	r2, [r3, #4]
 800a1ca:	e026      	b.n	800a21a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	68d8      	ldr	r0, [r3, #12]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	68b9      	ldr	r1, [r7, #8]
 800a1d8:	f00c fdaf 	bl	8016d3a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	68da      	ldr	r2, [r3, #12]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1e4:	425b      	negs	r3, r3
 800a1e6:	441a      	add	r2, r3
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	68da      	ldr	r2, [r3, #12]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d207      	bcs.n	800a208 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	689a      	ldr	r2, [r3, #8]
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a200:	425b      	negs	r3, r3
 800a202:	441a      	add	r2, r3
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2b02      	cmp	r3, #2
 800a20c:	d105      	bne.n	800a21a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d002      	beq.n	800a21a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	3b01      	subs	r3, #1
 800a218:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	1c5a      	adds	r2, r3, #1
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a222:	697b      	ldr	r3, [r7, #20]
}
 800a224:	4618      	mov	r0, r3
 800a226:	3718      	adds	r7, #24
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b082      	sub	sp, #8
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d018      	beq.n	800a270 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	68da      	ldr	r2, [r3, #12]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a246:	441a      	add	r2, r3
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	68da      	ldr	r2, [r3, #12]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	429a      	cmp	r2, r3
 800a256:	d303      	bcc.n	800a260 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	68d9      	ldr	r1, [r3, #12]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a268:	461a      	mov	r2, r3
 800a26a:	6838      	ldr	r0, [r7, #0]
 800a26c:	f00c fd65 	bl	8016d3a <memcpy>
	}
}
 800a270:	bf00      	nop
 800a272:	3708      	adds	r7, #8
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a280:	f001 fdbc 	bl	800bdfc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a28a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a28c:	e011      	b.n	800a2b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a292:	2b00      	cmp	r3, #0
 800a294:	d012      	beq.n	800a2bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	3324      	adds	r3, #36	@ 0x24
 800a29a:	4618      	mov	r0, r3
 800a29c:	f000 fd4c 	bl	800ad38 <xTaskRemoveFromEventList>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d001      	beq.n	800a2aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a2a6:	f000 fe55 	bl	800af54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a2aa:	7bfb      	ldrb	r3, [r7, #15]
 800a2ac:	3b01      	subs	r3, #1
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a2b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	dce9      	bgt.n	800a28e <prvUnlockQueue+0x16>
 800a2ba:	e000      	b.n	800a2be <prvUnlockQueue+0x46>
					break;
 800a2bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	22ff      	movs	r2, #255	@ 0xff
 800a2c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a2c6:	f001 fdcf 	bl	800be68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a2ca:	f001 fd97 	bl	800bdfc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a2d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a2d6:	e011      	b.n	800a2fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	691b      	ldr	r3, [r3, #16]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d012      	beq.n	800a306 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	3310      	adds	r3, #16
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f000 fd27 	bl	800ad38 <xTaskRemoveFromEventList>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d001      	beq.n	800a2f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a2f0:	f000 fe30 	bl	800af54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a2f4:	7bbb      	ldrb	r3, [r7, #14]
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a2fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a300:	2b00      	cmp	r3, #0
 800a302:	dce9      	bgt.n	800a2d8 <prvUnlockQueue+0x60>
 800a304:	e000      	b.n	800a308 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a306:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	22ff      	movs	r2, #255	@ 0xff
 800a30c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a310:	f001 fdaa 	bl	800be68 <vPortExitCritical>
}
 800a314:	bf00      	nop
 800a316:	3710      	adds	r7, #16
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b084      	sub	sp, #16
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a324:	f001 fd6a 	bl	800bdfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d102      	bne.n	800a336 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a330:	2301      	movs	r3, #1
 800a332:	60fb      	str	r3, [r7, #12]
 800a334:	e001      	b.n	800a33a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a336:	2300      	movs	r3, #0
 800a338:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a33a:	f001 fd95 	bl	800be68 <vPortExitCritical>

	return xReturn;
 800a33e:	68fb      	ldr	r3, [r7, #12]
}
 800a340:	4618      	mov	r0, r3
 800a342:	3710      	adds	r7, #16
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}

0800a348 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a350:	f001 fd54 	bl	800bdfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d102      	bne.n	800a366 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a360:	2301      	movs	r3, #1
 800a362:	60fb      	str	r3, [r7, #12]
 800a364:	e001      	b.n	800a36a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a366:	2300      	movs	r3, #0
 800a368:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a36a:	f001 fd7d 	bl	800be68 <vPortExitCritical>

	return xReturn;
 800a36e:	68fb      	ldr	r3, [r7, #12]
}
 800a370:	4618      	mov	r0, r3
 800a372:	3710      	adds	r7, #16
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a382:	2300      	movs	r3, #0
 800a384:	60fb      	str	r3, [r7, #12]
 800a386:	e014      	b.n	800a3b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a388:	4a0f      	ldr	r2, [pc, #60]	@ (800a3c8 <vQueueAddToRegistry+0x50>)
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d10b      	bne.n	800a3ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a394:	490c      	ldr	r1, [pc, #48]	@ (800a3c8 <vQueueAddToRegistry+0x50>)
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	683a      	ldr	r2, [r7, #0]
 800a39a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a39e:	4a0a      	ldr	r2, [pc, #40]	@ (800a3c8 <vQueueAddToRegistry+0x50>)
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	00db      	lsls	r3, r3, #3
 800a3a4:	4413      	add	r3, r2
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a3aa:	e006      	b.n	800a3ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	60fb      	str	r3, [r7, #12]
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2b07      	cmp	r3, #7
 800a3b6:	d9e7      	bls.n	800a388 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a3b8:	bf00      	nop
 800a3ba:	bf00      	nop
 800a3bc:	3714      	adds	r7, #20
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr
 800a3c6:	bf00      	nop
 800a3c8:	20005f30 	.word	0x20005f30

0800a3cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b086      	sub	sp, #24
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	60b9      	str	r1, [r7, #8]
 800a3d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a3dc:	f001 fd0e 	bl	800bdfc <vPortEnterCritical>
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a3e6:	b25b      	sxtb	r3, r3
 800a3e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a3ec:	d103      	bne.n	800a3f6 <vQueueWaitForMessageRestricted+0x2a>
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3fc:	b25b      	sxtb	r3, r3
 800a3fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a402:	d103      	bne.n	800a40c <vQueueWaitForMessageRestricted+0x40>
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	2200      	movs	r2, #0
 800a408:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a40c:	f001 fd2c 	bl	800be68 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a414:	2b00      	cmp	r3, #0
 800a416:	d106      	bne.n	800a426 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	3324      	adds	r3, #36	@ 0x24
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	68b9      	ldr	r1, [r7, #8]
 800a420:	4618      	mov	r0, r3
 800a422:	f000 fc5b 	bl	800acdc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a426:	6978      	ldr	r0, [r7, #20]
 800a428:	f7ff ff26 	bl	800a278 <prvUnlockQueue>
	}
 800a42c:	bf00      	nop
 800a42e:	3718      	adds	r7, #24
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a434:	b580      	push	{r7, lr}
 800a436:	b08e      	sub	sp, #56	@ 0x38
 800a438:	af04      	add	r7, sp, #16
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	607a      	str	r2, [r7, #4]
 800a440:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a444:	2b00      	cmp	r3, #0
 800a446:	d10d      	bne.n	800a464 <xTaskCreateStatic+0x30>
	__asm volatile
 800a448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a44c:	b672      	cpsid	i
 800a44e:	f383 8811 	msr	BASEPRI, r3
 800a452:	f3bf 8f6f 	isb	sy
 800a456:	f3bf 8f4f 	dsb	sy
 800a45a:	b662      	cpsie	i
 800a45c:	623b      	str	r3, [r7, #32]
}
 800a45e:	bf00      	nop
 800a460:	bf00      	nop
 800a462:	e7fd      	b.n	800a460 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800a464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a466:	2b00      	cmp	r3, #0
 800a468:	d10d      	bne.n	800a486 <xTaskCreateStatic+0x52>
	__asm volatile
 800a46a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a46e:	b672      	cpsid	i
 800a470:	f383 8811 	msr	BASEPRI, r3
 800a474:	f3bf 8f6f 	isb	sy
 800a478:	f3bf 8f4f 	dsb	sy
 800a47c:	b662      	cpsie	i
 800a47e:	61fb      	str	r3, [r7, #28]
}
 800a480:	bf00      	nop
 800a482:	bf00      	nop
 800a484:	e7fd      	b.n	800a482 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a486:	235c      	movs	r3, #92	@ 0x5c
 800a488:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	2b5c      	cmp	r3, #92	@ 0x5c
 800a48e:	d00d      	beq.n	800a4ac <xTaskCreateStatic+0x78>
	__asm volatile
 800a490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a494:	b672      	cpsid	i
 800a496:	f383 8811 	msr	BASEPRI, r3
 800a49a:	f3bf 8f6f 	isb	sy
 800a49e:	f3bf 8f4f 	dsb	sy
 800a4a2:	b662      	cpsie	i
 800a4a4:	61bb      	str	r3, [r7, #24]
}
 800a4a6:	bf00      	nop
 800a4a8:	bf00      	nop
 800a4aa:	e7fd      	b.n	800a4a8 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a4ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a4ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d01e      	beq.n	800a4f2 <xTaskCreateStatic+0xbe>
 800a4b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d01b      	beq.n	800a4f2 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a4ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4bc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a4c2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c6:	2202      	movs	r2, #2
 800a4c8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	9303      	str	r3, [sp, #12]
 800a4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4d2:	9302      	str	r3, [sp, #8]
 800a4d4:	f107 0314 	add.w	r3, r7, #20
 800a4d8:	9301      	str	r3, [sp, #4]
 800a4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4dc:	9300      	str	r3, [sp, #0]
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	68b9      	ldr	r1, [r7, #8]
 800a4e4:	68f8      	ldr	r0, [r7, #12]
 800a4e6:	f000 f850 	bl	800a58a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a4ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a4ec:	f000 f8e0 	bl	800a6b0 <prvAddNewTaskToReadyList>
 800a4f0:	e001      	b.n	800a4f6 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a4f6:	697b      	ldr	r3, [r7, #20]
	}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3728      	adds	r7, #40	@ 0x28
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a500:	b580      	push	{r7, lr}
 800a502:	b08c      	sub	sp, #48	@ 0x30
 800a504:	af04      	add	r7, sp, #16
 800a506:	60f8      	str	r0, [r7, #12]
 800a508:	60b9      	str	r1, [r7, #8]
 800a50a:	603b      	str	r3, [r7, #0]
 800a50c:	4613      	mov	r3, r2
 800a50e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a510:	88fb      	ldrh	r3, [r7, #6]
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	4618      	mov	r0, r3
 800a516:	f001 fd9f 	bl	800c058 <pvPortMalloc>
 800a51a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d00e      	beq.n	800a540 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a522:	205c      	movs	r0, #92	@ 0x5c
 800a524:	f001 fd98 	bl	800c058 <pvPortMalloc>
 800a528:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a52a:	69fb      	ldr	r3, [r7, #28]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d003      	beq.n	800a538 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a530:	69fb      	ldr	r3, [r7, #28]
 800a532:	697a      	ldr	r2, [r7, #20]
 800a534:	631a      	str	r2, [r3, #48]	@ 0x30
 800a536:	e005      	b.n	800a544 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a538:	6978      	ldr	r0, [r7, #20]
 800a53a:	f001 fe5b 	bl	800c1f4 <vPortFree>
 800a53e:	e001      	b.n	800a544 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a540:	2300      	movs	r3, #0
 800a542:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a544:	69fb      	ldr	r3, [r7, #28]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d017      	beq.n	800a57a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a54a:	69fb      	ldr	r3, [r7, #28]
 800a54c:	2200      	movs	r2, #0
 800a54e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a552:	88fa      	ldrh	r2, [r7, #6]
 800a554:	2300      	movs	r3, #0
 800a556:	9303      	str	r3, [sp, #12]
 800a558:	69fb      	ldr	r3, [r7, #28]
 800a55a:	9302      	str	r3, [sp, #8]
 800a55c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a55e:	9301      	str	r3, [sp, #4]
 800a560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a562:	9300      	str	r3, [sp, #0]
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	68b9      	ldr	r1, [r7, #8]
 800a568:	68f8      	ldr	r0, [r7, #12]
 800a56a:	f000 f80e 	bl	800a58a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a56e:	69f8      	ldr	r0, [r7, #28]
 800a570:	f000 f89e 	bl	800a6b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a574:	2301      	movs	r3, #1
 800a576:	61bb      	str	r3, [r7, #24]
 800a578:	e002      	b.n	800a580 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a57a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a57e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a580:	69bb      	ldr	r3, [r7, #24]
	}
 800a582:	4618      	mov	r0, r3
 800a584:	3720      	adds	r7, #32
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}

0800a58a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b088      	sub	sp, #32
 800a58e:	af00      	add	r7, sp, #0
 800a590:	60f8      	str	r0, [r7, #12]
 800a592:	60b9      	str	r1, [r7, #8]
 800a594:	607a      	str	r2, [r7, #4]
 800a596:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a59a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	009b      	lsls	r3, r3, #2
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	21a5      	movs	r1, #165	@ 0xa5
 800a5a4:	f00c fb00 	bl	8016ba8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a5ac:	6879      	ldr	r1, [r7, #4]
 800a5ae:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800a5b2:	440b      	add	r3, r1
 800a5b4:	009b      	lsls	r3, r3, #2
 800a5b6:	4413      	add	r3, r2
 800a5b8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a5ba:	69bb      	ldr	r3, [r7, #24]
 800a5bc:	f023 0307 	bic.w	r3, r3, #7
 800a5c0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a5c2:	69bb      	ldr	r3, [r7, #24]
 800a5c4:	f003 0307 	and.w	r3, r3, #7
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d00d      	beq.n	800a5e8 <prvInitialiseNewTask+0x5e>
	__asm volatile
 800a5cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5d0:	b672      	cpsid	i
 800a5d2:	f383 8811 	msr	BASEPRI, r3
 800a5d6:	f3bf 8f6f 	isb	sy
 800a5da:	f3bf 8f4f 	dsb	sy
 800a5de:	b662      	cpsie	i
 800a5e0:	617b      	str	r3, [r7, #20]
}
 800a5e2:	bf00      	nop
 800a5e4:	bf00      	nop
 800a5e6:	e7fd      	b.n	800a5e4 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d01f      	beq.n	800a62e <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	61fb      	str	r3, [r7, #28]
 800a5f2:	e012      	b.n	800a61a <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a5f4:	68ba      	ldr	r2, [r7, #8]
 800a5f6:	69fb      	ldr	r3, [r7, #28]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	7819      	ldrb	r1, [r3, #0]
 800a5fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5fe:	69fb      	ldr	r3, [r7, #28]
 800a600:	4413      	add	r3, r2
 800a602:	3334      	adds	r3, #52	@ 0x34
 800a604:	460a      	mov	r2, r1
 800a606:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a608:	68ba      	ldr	r2, [r7, #8]
 800a60a:	69fb      	ldr	r3, [r7, #28]
 800a60c:	4413      	add	r3, r2
 800a60e:	781b      	ldrb	r3, [r3, #0]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d006      	beq.n	800a622 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a614:	69fb      	ldr	r3, [r7, #28]
 800a616:	3301      	adds	r3, #1
 800a618:	61fb      	str	r3, [r7, #28]
 800a61a:	69fb      	ldr	r3, [r7, #28]
 800a61c:	2b0f      	cmp	r3, #15
 800a61e:	d9e9      	bls.n	800a5f4 <prvInitialiseNewTask+0x6a>
 800a620:	e000      	b.n	800a624 <prvInitialiseNewTask+0x9a>
			{
				break;
 800a622:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a626:	2200      	movs	r2, #0
 800a628:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a62c:	e003      	b.n	800a636 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a62e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a630:	2200      	movs	r2, #0
 800a632:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a638:	2b37      	cmp	r3, #55	@ 0x37
 800a63a:	d901      	bls.n	800a640 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a63c:	2337      	movs	r3, #55	@ 0x37
 800a63e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a642:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a644:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a648:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a64a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a64c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a64e:	2200      	movs	r2, #0
 800a650:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a654:	3304      	adds	r3, #4
 800a656:	4618      	mov	r0, r3
 800a658:	f7fe ff0e 	bl	8009478 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a65c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a65e:	3318      	adds	r3, #24
 800a660:	4618      	mov	r0, r3
 800a662:	f7fe ff09 	bl	8009478 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a668:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a66a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a66c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a66e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a674:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a678:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a67a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a67c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a67e:	2200      	movs	r2, #0
 800a680:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a684:	2200      	movs	r2, #0
 800a686:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a68a:	683a      	ldr	r2, [r7, #0]
 800a68c:	68f9      	ldr	r1, [r7, #12]
 800a68e:	69b8      	ldr	r0, [r7, #24]
 800a690:	f001 faa6 	bl	800bbe0 <pxPortInitialiseStack>
 800a694:	4602      	mov	r2, r0
 800a696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a698:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a69a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d002      	beq.n	800a6a6 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a6a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6a6:	bf00      	nop
 800a6a8:	3720      	adds	r7, #32
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
	...

0800a6b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a6b8:	f001 fba0 	bl	800bdfc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a6bc:	4b2d      	ldr	r3, [pc, #180]	@ (800a774 <prvAddNewTaskToReadyList+0xc4>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	4a2c      	ldr	r2, [pc, #176]	@ (800a774 <prvAddNewTaskToReadyList+0xc4>)
 800a6c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a6c6:	4b2c      	ldr	r3, [pc, #176]	@ (800a778 <prvAddNewTaskToReadyList+0xc8>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d109      	bne.n	800a6e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a6ce:	4a2a      	ldr	r2, [pc, #168]	@ (800a778 <prvAddNewTaskToReadyList+0xc8>)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a6d4:	4b27      	ldr	r3, [pc, #156]	@ (800a774 <prvAddNewTaskToReadyList+0xc4>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d110      	bne.n	800a6fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a6dc:	f000 fc5e 	bl	800af9c <prvInitialiseTaskLists>
 800a6e0:	e00d      	b.n	800a6fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a6e2:	4b26      	ldr	r3, [pc, #152]	@ (800a77c <prvAddNewTaskToReadyList+0xcc>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d109      	bne.n	800a6fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a6ea:	4b23      	ldr	r3, [pc, #140]	@ (800a778 <prvAddNewTaskToReadyList+0xc8>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d802      	bhi.n	800a6fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a6f8:	4a1f      	ldr	r2, [pc, #124]	@ (800a778 <prvAddNewTaskToReadyList+0xc8>)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a6fe:	4b20      	ldr	r3, [pc, #128]	@ (800a780 <prvAddNewTaskToReadyList+0xd0>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	3301      	adds	r3, #1
 800a704:	4a1e      	ldr	r2, [pc, #120]	@ (800a780 <prvAddNewTaskToReadyList+0xd0>)
 800a706:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a708:	4b1d      	ldr	r3, [pc, #116]	@ (800a780 <prvAddNewTaskToReadyList+0xd0>)
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a714:	4b1b      	ldr	r3, [pc, #108]	@ (800a784 <prvAddNewTaskToReadyList+0xd4>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	429a      	cmp	r2, r3
 800a71a:	d903      	bls.n	800a724 <prvAddNewTaskToReadyList+0x74>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a720:	4a18      	ldr	r2, [pc, #96]	@ (800a784 <prvAddNewTaskToReadyList+0xd4>)
 800a722:	6013      	str	r3, [r2, #0]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a728:	4613      	mov	r3, r2
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	4413      	add	r3, r2
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	4a15      	ldr	r2, [pc, #84]	@ (800a788 <prvAddNewTaskToReadyList+0xd8>)
 800a732:	441a      	add	r2, r3
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	3304      	adds	r3, #4
 800a738:	4619      	mov	r1, r3
 800a73a:	4610      	mov	r0, r2
 800a73c:	f7fe fea9 	bl	8009492 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a740:	f001 fb92 	bl	800be68 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a744:	4b0d      	ldr	r3, [pc, #52]	@ (800a77c <prvAddNewTaskToReadyList+0xcc>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d00e      	beq.n	800a76a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a74c:	4b0a      	ldr	r3, [pc, #40]	@ (800a778 <prvAddNewTaskToReadyList+0xc8>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a756:	429a      	cmp	r2, r3
 800a758:	d207      	bcs.n	800a76a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a75a:	4b0c      	ldr	r3, [pc, #48]	@ (800a78c <prvAddNewTaskToReadyList+0xdc>)
 800a75c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a760:	601a      	str	r2, [r3, #0]
 800a762:	f3bf 8f4f 	dsb	sy
 800a766:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a76a:	bf00      	nop
 800a76c:	3708      	adds	r7, #8
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	20006444 	.word	0x20006444
 800a778:	20005f70 	.word	0x20005f70
 800a77c:	20006450 	.word	0x20006450
 800a780:	20006460 	.word	0x20006460
 800a784:	2000644c 	.word	0x2000644c
 800a788:	20005f74 	.word	0x20005f74
 800a78c:	e000ed04 	.word	0xe000ed04

0800a790 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a790:	b580      	push	{r7, lr}
 800a792:	b084      	sub	sp, #16
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a798:	2300      	movs	r3, #0
 800a79a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d01a      	beq.n	800a7d8 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a7a2:	4b15      	ldr	r3, [pc, #84]	@ (800a7f8 <vTaskDelay+0x68>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d00d      	beq.n	800a7c6 <vTaskDelay+0x36>
	__asm volatile
 800a7aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ae:	b672      	cpsid	i
 800a7b0:	f383 8811 	msr	BASEPRI, r3
 800a7b4:	f3bf 8f6f 	isb	sy
 800a7b8:	f3bf 8f4f 	dsb	sy
 800a7bc:	b662      	cpsie	i
 800a7be:	60bb      	str	r3, [r7, #8]
}
 800a7c0:	bf00      	nop
 800a7c2:	bf00      	nop
 800a7c4:	e7fd      	b.n	800a7c2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800a7c6:	f000 f887 	bl	800a8d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a7ca:	2100      	movs	r1, #0
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f000 fe4b 	bl	800b468 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a7d2:	f000 f88f 	bl	800a8f4 <xTaskResumeAll>
 800a7d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d107      	bne.n	800a7ee <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800a7de:	4b07      	ldr	r3, [pc, #28]	@ (800a7fc <vTaskDelay+0x6c>)
 800a7e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7e4:	601a      	str	r2, [r3, #0]
 800a7e6:	f3bf 8f4f 	dsb	sy
 800a7ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a7ee:	bf00      	nop
 800a7f0:	3710      	adds	r7, #16
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	2000646c 	.word	0x2000646c
 800a7fc:	e000ed04 	.word	0xe000ed04

0800a800 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b08a      	sub	sp, #40	@ 0x28
 800a804:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a806:	2300      	movs	r3, #0
 800a808:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a80a:	2300      	movs	r3, #0
 800a80c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a80e:	463a      	mov	r2, r7
 800a810:	1d39      	adds	r1, r7, #4
 800a812:	f107 0308 	add.w	r3, r7, #8
 800a816:	4618      	mov	r0, r3
 800a818:	f7fe fdda 	bl	80093d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a81c:	6839      	ldr	r1, [r7, #0]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	68ba      	ldr	r2, [r7, #8]
 800a822:	9202      	str	r2, [sp, #8]
 800a824:	9301      	str	r3, [sp, #4]
 800a826:	2300      	movs	r3, #0
 800a828:	9300      	str	r3, [sp, #0]
 800a82a:	2300      	movs	r3, #0
 800a82c:	460a      	mov	r2, r1
 800a82e:	4924      	ldr	r1, [pc, #144]	@ (800a8c0 <vTaskStartScheduler+0xc0>)
 800a830:	4824      	ldr	r0, [pc, #144]	@ (800a8c4 <vTaskStartScheduler+0xc4>)
 800a832:	f7ff fdff 	bl	800a434 <xTaskCreateStatic>
 800a836:	4603      	mov	r3, r0
 800a838:	4a23      	ldr	r2, [pc, #140]	@ (800a8c8 <vTaskStartScheduler+0xc8>)
 800a83a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a83c:	4b22      	ldr	r3, [pc, #136]	@ (800a8c8 <vTaskStartScheduler+0xc8>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d002      	beq.n	800a84a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a844:	2301      	movs	r3, #1
 800a846:	617b      	str	r3, [r7, #20]
 800a848:	e001      	b.n	800a84e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a84a:	2300      	movs	r3, #0
 800a84c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	2b01      	cmp	r3, #1
 800a852:	d102      	bne.n	800a85a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a854:	f000 fe5c 	bl	800b510 <xTimerCreateTimerTask>
 800a858:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d118      	bne.n	800a892 <vTaskStartScheduler+0x92>
	__asm volatile
 800a860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a864:	b672      	cpsid	i
 800a866:	f383 8811 	msr	BASEPRI, r3
 800a86a:	f3bf 8f6f 	isb	sy
 800a86e:	f3bf 8f4f 	dsb	sy
 800a872:	b662      	cpsie	i
 800a874:	613b      	str	r3, [r7, #16]
}
 800a876:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a878:	4b14      	ldr	r3, [pc, #80]	@ (800a8cc <vTaskStartScheduler+0xcc>)
 800a87a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a87e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a880:	4b13      	ldr	r3, [pc, #76]	@ (800a8d0 <vTaskStartScheduler+0xd0>)
 800a882:	2201      	movs	r2, #1
 800a884:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a886:	4b13      	ldr	r3, [pc, #76]	@ (800a8d4 <vTaskStartScheduler+0xd4>)
 800a888:	2200      	movs	r2, #0
 800a88a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a88c:	f001 fa38 	bl	800bd00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a890:	e011      	b.n	800a8b6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a898:	d10d      	bne.n	800a8b6 <vTaskStartScheduler+0xb6>
	__asm volatile
 800a89a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a89e:	b672      	cpsid	i
 800a8a0:	f383 8811 	msr	BASEPRI, r3
 800a8a4:	f3bf 8f6f 	isb	sy
 800a8a8:	f3bf 8f4f 	dsb	sy
 800a8ac:	b662      	cpsie	i
 800a8ae:	60fb      	str	r3, [r7, #12]
}
 800a8b0:	bf00      	nop
 800a8b2:	bf00      	nop
 800a8b4:	e7fd      	b.n	800a8b2 <vTaskStartScheduler+0xb2>
}
 800a8b6:	bf00      	nop
 800a8b8:	3718      	adds	r7, #24
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	08017aac 	.word	0x08017aac
 800a8c4:	0800af6d 	.word	0x0800af6d
 800a8c8:	20006468 	.word	0x20006468
 800a8cc:	20006464 	.word	0x20006464
 800a8d0:	20006450 	.word	0x20006450
 800a8d4:	20006448 	.word	0x20006448

0800a8d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a8d8:	b480      	push	{r7}
 800a8da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a8dc:	4b04      	ldr	r3, [pc, #16]	@ (800a8f0 <vTaskSuspendAll+0x18>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	4a03      	ldr	r2, [pc, #12]	@ (800a8f0 <vTaskSuspendAll+0x18>)
 800a8e4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a8e6:	bf00      	nop
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr
 800a8f0:	2000646c 	.word	0x2000646c

0800a8f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a8fe:	2300      	movs	r3, #0
 800a900:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a902:	4b43      	ldr	r3, [pc, #268]	@ (800aa10 <xTaskResumeAll+0x11c>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d10d      	bne.n	800a926 <xTaskResumeAll+0x32>
	__asm volatile
 800a90a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a90e:	b672      	cpsid	i
 800a910:	f383 8811 	msr	BASEPRI, r3
 800a914:	f3bf 8f6f 	isb	sy
 800a918:	f3bf 8f4f 	dsb	sy
 800a91c:	b662      	cpsie	i
 800a91e:	603b      	str	r3, [r7, #0]
}
 800a920:	bf00      	nop
 800a922:	bf00      	nop
 800a924:	e7fd      	b.n	800a922 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a926:	f001 fa69 	bl	800bdfc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a92a:	4b39      	ldr	r3, [pc, #228]	@ (800aa10 <xTaskResumeAll+0x11c>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	3b01      	subs	r3, #1
 800a930:	4a37      	ldr	r2, [pc, #220]	@ (800aa10 <xTaskResumeAll+0x11c>)
 800a932:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a934:	4b36      	ldr	r3, [pc, #216]	@ (800aa10 <xTaskResumeAll+0x11c>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d162      	bne.n	800aa02 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a93c:	4b35      	ldr	r3, [pc, #212]	@ (800aa14 <xTaskResumeAll+0x120>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d05e      	beq.n	800aa02 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a944:	e02f      	b.n	800a9a6 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a946:	4b34      	ldr	r3, [pc, #208]	@ (800aa18 <xTaskResumeAll+0x124>)
 800a948:	68db      	ldr	r3, [r3, #12]
 800a94a:	68db      	ldr	r3, [r3, #12]
 800a94c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	3318      	adds	r3, #24
 800a952:	4618      	mov	r0, r3
 800a954:	f7fe fdfa 	bl	800954c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	3304      	adds	r3, #4
 800a95c:	4618      	mov	r0, r3
 800a95e:	f7fe fdf5 	bl	800954c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a966:	4b2d      	ldr	r3, [pc, #180]	@ (800aa1c <xTaskResumeAll+0x128>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d903      	bls.n	800a976 <xTaskResumeAll+0x82>
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a972:	4a2a      	ldr	r2, [pc, #168]	@ (800aa1c <xTaskResumeAll+0x128>)
 800a974:	6013      	str	r3, [r2, #0]
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a97a:	4613      	mov	r3, r2
 800a97c:	009b      	lsls	r3, r3, #2
 800a97e:	4413      	add	r3, r2
 800a980:	009b      	lsls	r3, r3, #2
 800a982:	4a27      	ldr	r2, [pc, #156]	@ (800aa20 <xTaskResumeAll+0x12c>)
 800a984:	441a      	add	r2, r3
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	3304      	adds	r3, #4
 800a98a:	4619      	mov	r1, r3
 800a98c:	4610      	mov	r0, r2
 800a98e:	f7fe fd80 	bl	8009492 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a996:	4b23      	ldr	r3, [pc, #140]	@ (800aa24 <xTaskResumeAll+0x130>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a99c:	429a      	cmp	r2, r3
 800a99e:	d302      	bcc.n	800a9a6 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800a9a0:	4b21      	ldr	r3, [pc, #132]	@ (800aa28 <xTaskResumeAll+0x134>)
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a9a6:	4b1c      	ldr	r3, [pc, #112]	@ (800aa18 <xTaskResumeAll+0x124>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d1cb      	bne.n	800a946 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d001      	beq.n	800a9b8 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a9b4:	f000 fb92 	bl	800b0dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a9b8:	4b1c      	ldr	r3, [pc, #112]	@ (800aa2c <xTaskResumeAll+0x138>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d010      	beq.n	800a9e6 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a9c4:	f000 f846 	bl	800aa54 <xTaskIncrementTick>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d002      	beq.n	800a9d4 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800a9ce:	4b16      	ldr	r3, [pc, #88]	@ (800aa28 <xTaskResumeAll+0x134>)
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	3b01      	subs	r3, #1
 800a9d8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d1f1      	bne.n	800a9c4 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800a9e0:	4b12      	ldr	r3, [pc, #72]	@ (800aa2c <xTaskResumeAll+0x138>)
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a9e6:	4b10      	ldr	r3, [pc, #64]	@ (800aa28 <xTaskResumeAll+0x134>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d009      	beq.n	800aa02 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a9f2:	4b0f      	ldr	r3, [pc, #60]	@ (800aa30 <xTaskResumeAll+0x13c>)
 800a9f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9f8:	601a      	str	r2, [r3, #0]
 800a9fa:	f3bf 8f4f 	dsb	sy
 800a9fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa02:	f001 fa31 	bl	800be68 <vPortExitCritical>

	return xAlreadyYielded;
 800aa06:	68bb      	ldr	r3, [r7, #8]
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3710      	adds	r7, #16
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}
 800aa10:	2000646c 	.word	0x2000646c
 800aa14:	20006444 	.word	0x20006444
 800aa18:	20006404 	.word	0x20006404
 800aa1c:	2000644c 	.word	0x2000644c
 800aa20:	20005f74 	.word	0x20005f74
 800aa24:	20005f70 	.word	0x20005f70
 800aa28:	20006458 	.word	0x20006458
 800aa2c:	20006454 	.word	0x20006454
 800aa30:	e000ed04 	.word	0xe000ed04

0800aa34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aa34:	b480      	push	{r7}
 800aa36:	b083      	sub	sp, #12
 800aa38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aa3a:	4b05      	ldr	r3, [pc, #20]	@ (800aa50 <xTaskGetTickCount+0x1c>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aa40:	687b      	ldr	r3, [r7, #4]
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	370c      	adds	r7, #12
 800aa46:	46bd      	mov	sp, r7
 800aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4c:	4770      	bx	lr
 800aa4e:	bf00      	nop
 800aa50:	20006448 	.word	0x20006448

0800aa54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b086      	sub	sp, #24
 800aa58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa5e:	4b50      	ldr	r3, [pc, #320]	@ (800aba0 <xTaskIncrementTick+0x14c>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	f040 808c 	bne.w	800ab80 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aa68:	4b4e      	ldr	r3, [pc, #312]	@ (800aba4 <xTaskIncrementTick+0x150>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aa70:	4a4c      	ldr	r2, [pc, #304]	@ (800aba4 <xTaskIncrementTick+0x150>)
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d123      	bne.n	800aac4 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800aa7c:	4b4a      	ldr	r3, [pc, #296]	@ (800aba8 <xTaskIncrementTick+0x154>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d00d      	beq.n	800aaa2 <xTaskIncrementTick+0x4e>
	__asm volatile
 800aa86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa8a:	b672      	cpsid	i
 800aa8c:	f383 8811 	msr	BASEPRI, r3
 800aa90:	f3bf 8f6f 	isb	sy
 800aa94:	f3bf 8f4f 	dsb	sy
 800aa98:	b662      	cpsie	i
 800aa9a:	603b      	str	r3, [r7, #0]
}
 800aa9c:	bf00      	nop
 800aa9e:	bf00      	nop
 800aaa0:	e7fd      	b.n	800aa9e <xTaskIncrementTick+0x4a>
 800aaa2:	4b41      	ldr	r3, [pc, #260]	@ (800aba8 <xTaskIncrementTick+0x154>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	60fb      	str	r3, [r7, #12]
 800aaa8:	4b40      	ldr	r3, [pc, #256]	@ (800abac <xTaskIncrementTick+0x158>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	4a3e      	ldr	r2, [pc, #248]	@ (800aba8 <xTaskIncrementTick+0x154>)
 800aaae:	6013      	str	r3, [r2, #0]
 800aab0:	4a3e      	ldr	r2, [pc, #248]	@ (800abac <xTaskIncrementTick+0x158>)
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	6013      	str	r3, [r2, #0]
 800aab6:	4b3e      	ldr	r3, [pc, #248]	@ (800abb0 <xTaskIncrementTick+0x15c>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	3301      	adds	r3, #1
 800aabc:	4a3c      	ldr	r2, [pc, #240]	@ (800abb0 <xTaskIncrementTick+0x15c>)
 800aabe:	6013      	str	r3, [r2, #0]
 800aac0:	f000 fb0c 	bl	800b0dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aac4:	4b3b      	ldr	r3, [pc, #236]	@ (800abb4 <xTaskIncrementTick+0x160>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	693a      	ldr	r2, [r7, #16]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d349      	bcc.n	800ab62 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aace:	4b36      	ldr	r3, [pc, #216]	@ (800aba8 <xTaskIncrementTick+0x154>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d104      	bne.n	800aae2 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aad8:	4b36      	ldr	r3, [pc, #216]	@ (800abb4 <xTaskIncrementTick+0x160>)
 800aada:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aade:	601a      	str	r2, [r3, #0]
					break;
 800aae0:	e03f      	b.n	800ab62 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aae2:	4b31      	ldr	r3, [pc, #196]	@ (800aba8 <xTaskIncrementTick+0x154>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	68db      	ldr	r3, [r3, #12]
 800aae8:	68db      	ldr	r3, [r3, #12]
 800aaea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aaf2:	693a      	ldr	r2, [r7, #16]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	d203      	bcs.n	800ab02 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aafa:	4a2e      	ldr	r2, [pc, #184]	@ (800abb4 <xTaskIncrementTick+0x160>)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ab00:	e02f      	b.n	800ab62 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	3304      	adds	r3, #4
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7fe fd20 	bl	800954c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d004      	beq.n	800ab1e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	3318      	adds	r3, #24
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7fe fd17 	bl	800954c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab22:	4b25      	ldr	r3, [pc, #148]	@ (800abb8 <xTaskIncrementTick+0x164>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d903      	bls.n	800ab32 <xTaskIncrementTick+0xde>
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab2e:	4a22      	ldr	r2, [pc, #136]	@ (800abb8 <xTaskIncrementTick+0x164>)
 800ab30:	6013      	str	r3, [r2, #0]
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab36:	4613      	mov	r3, r2
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	4413      	add	r3, r2
 800ab3c:	009b      	lsls	r3, r3, #2
 800ab3e:	4a1f      	ldr	r2, [pc, #124]	@ (800abbc <xTaskIncrementTick+0x168>)
 800ab40:	441a      	add	r2, r3
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	3304      	adds	r3, #4
 800ab46:	4619      	mov	r1, r3
 800ab48:	4610      	mov	r0, r2
 800ab4a:	f7fe fca2 	bl	8009492 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab52:	4b1b      	ldr	r3, [pc, #108]	@ (800abc0 <xTaskIncrementTick+0x16c>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d3b8      	bcc.n	800aace <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab60:	e7b5      	b.n	800aace <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ab62:	4b17      	ldr	r3, [pc, #92]	@ (800abc0 <xTaskIncrementTick+0x16c>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab68:	4914      	ldr	r1, [pc, #80]	@ (800abbc <xTaskIncrementTick+0x168>)
 800ab6a:	4613      	mov	r3, r2
 800ab6c:	009b      	lsls	r3, r3, #2
 800ab6e:	4413      	add	r3, r2
 800ab70:	009b      	lsls	r3, r3, #2
 800ab72:	440b      	add	r3, r1
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d907      	bls.n	800ab8a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	617b      	str	r3, [r7, #20]
 800ab7e:	e004      	b.n	800ab8a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ab80:	4b10      	ldr	r3, [pc, #64]	@ (800abc4 <xTaskIncrementTick+0x170>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	3301      	adds	r3, #1
 800ab86:	4a0f      	ldr	r2, [pc, #60]	@ (800abc4 <xTaskIncrementTick+0x170>)
 800ab88:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ab8a:	4b0f      	ldr	r3, [pc, #60]	@ (800abc8 <xTaskIncrementTick+0x174>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d001      	beq.n	800ab96 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800ab92:	2301      	movs	r3, #1
 800ab94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ab96:	697b      	ldr	r3, [r7, #20]
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3718      	adds	r7, #24
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}
 800aba0:	2000646c 	.word	0x2000646c
 800aba4:	20006448 	.word	0x20006448
 800aba8:	200063fc 	.word	0x200063fc
 800abac:	20006400 	.word	0x20006400
 800abb0:	2000645c 	.word	0x2000645c
 800abb4:	20006464 	.word	0x20006464
 800abb8:	2000644c 	.word	0x2000644c
 800abbc:	20005f74 	.word	0x20005f74
 800abc0:	20005f70 	.word	0x20005f70
 800abc4:	20006454 	.word	0x20006454
 800abc8:	20006458 	.word	0x20006458

0800abcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800abcc:	b480      	push	{r7}
 800abce:	b085      	sub	sp, #20
 800abd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800abd2:	4b29      	ldr	r3, [pc, #164]	@ (800ac78 <vTaskSwitchContext+0xac>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d003      	beq.n	800abe2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800abda:	4b28      	ldr	r3, [pc, #160]	@ (800ac7c <vTaskSwitchContext+0xb0>)
 800abdc:	2201      	movs	r2, #1
 800abde:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800abe0:	e044      	b.n	800ac6c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800abe2:	4b26      	ldr	r3, [pc, #152]	@ (800ac7c <vTaskSwitchContext+0xb0>)
 800abe4:	2200      	movs	r2, #0
 800abe6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abe8:	4b25      	ldr	r3, [pc, #148]	@ (800ac80 <vTaskSwitchContext+0xb4>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	60fb      	str	r3, [r7, #12]
 800abee:	e013      	b.n	800ac18 <vTaskSwitchContext+0x4c>
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d10d      	bne.n	800ac12 <vTaskSwitchContext+0x46>
	__asm volatile
 800abf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abfa:	b672      	cpsid	i
 800abfc:	f383 8811 	msr	BASEPRI, r3
 800ac00:	f3bf 8f6f 	isb	sy
 800ac04:	f3bf 8f4f 	dsb	sy
 800ac08:	b662      	cpsie	i
 800ac0a:	607b      	str	r3, [r7, #4]
}
 800ac0c:	bf00      	nop
 800ac0e:	bf00      	nop
 800ac10:	e7fd      	b.n	800ac0e <vTaskSwitchContext+0x42>
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	3b01      	subs	r3, #1
 800ac16:	60fb      	str	r3, [r7, #12]
 800ac18:	491a      	ldr	r1, [pc, #104]	@ (800ac84 <vTaskSwitchContext+0xb8>)
 800ac1a:	68fa      	ldr	r2, [r7, #12]
 800ac1c:	4613      	mov	r3, r2
 800ac1e:	009b      	lsls	r3, r3, #2
 800ac20:	4413      	add	r3, r2
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	440b      	add	r3, r1
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d0e1      	beq.n	800abf0 <vTaskSwitchContext+0x24>
 800ac2c:	68fa      	ldr	r2, [r7, #12]
 800ac2e:	4613      	mov	r3, r2
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	4413      	add	r3, r2
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	4a13      	ldr	r2, [pc, #76]	@ (800ac84 <vTaskSwitchContext+0xb8>)
 800ac38:	4413      	add	r3, r2
 800ac3a:	60bb      	str	r3, [r7, #8]
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	685a      	ldr	r2, [r3, #4]
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	605a      	str	r2, [r3, #4]
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	685a      	ldr	r2, [r3, #4]
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	3308      	adds	r3, #8
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d104      	bne.n	800ac5c <vTaskSwitchContext+0x90>
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	685a      	ldr	r2, [r3, #4]
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	605a      	str	r2, [r3, #4]
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	4a09      	ldr	r2, [pc, #36]	@ (800ac88 <vTaskSwitchContext+0xbc>)
 800ac64:	6013      	str	r3, [r2, #0]
 800ac66:	4a06      	ldr	r2, [pc, #24]	@ (800ac80 <vTaskSwitchContext+0xb4>)
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	6013      	str	r3, [r2, #0]
}
 800ac6c:	bf00      	nop
 800ac6e:	3714      	adds	r7, #20
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr
 800ac78:	2000646c 	.word	0x2000646c
 800ac7c:	20006458 	.word	0x20006458
 800ac80:	2000644c 	.word	0x2000644c
 800ac84:	20005f74 	.word	0x20005f74
 800ac88:	20005f70 	.word	0x20005f70

0800ac8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b084      	sub	sp, #16
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d10d      	bne.n	800acb8 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800ac9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aca0:	b672      	cpsid	i
 800aca2:	f383 8811 	msr	BASEPRI, r3
 800aca6:	f3bf 8f6f 	isb	sy
 800acaa:	f3bf 8f4f 	dsb	sy
 800acae:	b662      	cpsie	i
 800acb0:	60fb      	str	r3, [r7, #12]
}
 800acb2:	bf00      	nop
 800acb4:	bf00      	nop
 800acb6:	e7fd      	b.n	800acb4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800acb8:	4b07      	ldr	r3, [pc, #28]	@ (800acd8 <vTaskPlaceOnEventList+0x4c>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	3318      	adds	r3, #24
 800acbe:	4619      	mov	r1, r3
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f7fe fc0a 	bl	80094da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800acc6:	2101      	movs	r1, #1
 800acc8:	6838      	ldr	r0, [r7, #0]
 800acca:	f000 fbcd 	bl	800b468 <prvAddCurrentTaskToDelayedList>
}
 800acce:	bf00      	nop
 800acd0:	3710      	adds	r7, #16
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	20005f70 	.word	0x20005f70

0800acdc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b086      	sub	sp, #24
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	60f8      	str	r0, [r7, #12]
 800ace4:	60b9      	str	r1, [r7, #8]
 800ace6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d10d      	bne.n	800ad0a <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800acee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acf2:	b672      	cpsid	i
 800acf4:	f383 8811 	msr	BASEPRI, r3
 800acf8:	f3bf 8f6f 	isb	sy
 800acfc:	f3bf 8f4f 	dsb	sy
 800ad00:	b662      	cpsie	i
 800ad02:	617b      	str	r3, [r7, #20]
}
 800ad04:	bf00      	nop
 800ad06:	bf00      	nop
 800ad08:	e7fd      	b.n	800ad06 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad0a:	4b0a      	ldr	r3, [pc, #40]	@ (800ad34 <vTaskPlaceOnEventListRestricted+0x58>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	3318      	adds	r3, #24
 800ad10:	4619      	mov	r1, r3
 800ad12:	68f8      	ldr	r0, [r7, #12]
 800ad14:	f7fe fbbd 	bl	8009492 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d002      	beq.n	800ad24 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800ad1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ad22:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ad24:	6879      	ldr	r1, [r7, #4]
 800ad26:	68b8      	ldr	r0, [r7, #8]
 800ad28:	f000 fb9e 	bl	800b468 <prvAddCurrentTaskToDelayedList>
	}
 800ad2c:	bf00      	nop
 800ad2e:	3718      	adds	r7, #24
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	20005f70 	.word	0x20005f70

0800ad38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b086      	sub	sp, #24
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d10d      	bne.n	800ad6a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800ad4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad52:	b672      	cpsid	i
 800ad54:	f383 8811 	msr	BASEPRI, r3
 800ad58:	f3bf 8f6f 	isb	sy
 800ad5c:	f3bf 8f4f 	dsb	sy
 800ad60:	b662      	cpsie	i
 800ad62:	60fb      	str	r3, [r7, #12]
}
 800ad64:	bf00      	nop
 800ad66:	bf00      	nop
 800ad68:	e7fd      	b.n	800ad66 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	3318      	adds	r3, #24
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7fe fbec 	bl	800954c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad74:	4b1d      	ldr	r3, [pc, #116]	@ (800adec <xTaskRemoveFromEventList+0xb4>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d11d      	bne.n	800adb8 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	3304      	adds	r3, #4
 800ad80:	4618      	mov	r0, r3
 800ad82:	f7fe fbe3 	bl	800954c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad8a:	4b19      	ldr	r3, [pc, #100]	@ (800adf0 <xTaskRemoveFromEventList+0xb8>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d903      	bls.n	800ad9a <xTaskRemoveFromEventList+0x62>
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad96:	4a16      	ldr	r2, [pc, #88]	@ (800adf0 <xTaskRemoveFromEventList+0xb8>)
 800ad98:	6013      	str	r3, [r2, #0]
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad9e:	4613      	mov	r3, r2
 800ada0:	009b      	lsls	r3, r3, #2
 800ada2:	4413      	add	r3, r2
 800ada4:	009b      	lsls	r3, r3, #2
 800ada6:	4a13      	ldr	r2, [pc, #76]	@ (800adf4 <xTaskRemoveFromEventList+0xbc>)
 800ada8:	441a      	add	r2, r3
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	3304      	adds	r3, #4
 800adae:	4619      	mov	r1, r3
 800adb0:	4610      	mov	r0, r2
 800adb2:	f7fe fb6e 	bl	8009492 <vListInsertEnd>
 800adb6:	e005      	b.n	800adc4 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	3318      	adds	r3, #24
 800adbc:	4619      	mov	r1, r3
 800adbe:	480e      	ldr	r0, [pc, #56]	@ (800adf8 <xTaskRemoveFromEventList+0xc0>)
 800adc0:	f7fe fb67 	bl	8009492 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adc8:	4b0c      	ldr	r3, [pc, #48]	@ (800adfc <xTaskRemoveFromEventList+0xc4>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adce:	429a      	cmp	r2, r3
 800add0:	d905      	bls.n	800adde <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800add2:	2301      	movs	r3, #1
 800add4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800add6:	4b0a      	ldr	r3, [pc, #40]	@ (800ae00 <xTaskRemoveFromEventList+0xc8>)
 800add8:	2201      	movs	r2, #1
 800adda:	601a      	str	r2, [r3, #0]
 800addc:	e001      	b.n	800ade2 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800adde:	2300      	movs	r3, #0
 800ade0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ade2:	697b      	ldr	r3, [r7, #20]
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3718      	adds	r7, #24
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}
 800adec:	2000646c 	.word	0x2000646c
 800adf0:	2000644c 	.word	0x2000644c
 800adf4:	20005f74 	.word	0x20005f74
 800adf8:	20006404 	.word	0x20006404
 800adfc:	20005f70 	.word	0x20005f70
 800ae00:	20006458 	.word	0x20006458

0800ae04 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d10d      	bne.n	800ae2e <vTaskSetTimeOutState+0x2a>
	__asm volatile
 800ae12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae16:	b672      	cpsid	i
 800ae18:	f383 8811 	msr	BASEPRI, r3
 800ae1c:	f3bf 8f6f 	isb	sy
 800ae20:	f3bf 8f4f 	dsb	sy
 800ae24:	b662      	cpsie	i
 800ae26:	60fb      	str	r3, [r7, #12]
}
 800ae28:	bf00      	nop
 800ae2a:	bf00      	nop
 800ae2c:	e7fd      	b.n	800ae2a <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 800ae2e:	f000 ffe5 	bl	800bdfc <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ae32:	4b07      	ldr	r3, [pc, #28]	@ (800ae50 <vTaskSetTimeOutState+0x4c>)
 800ae34:	681a      	ldr	r2, [r3, #0]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800ae3a:	4b06      	ldr	r3, [pc, #24]	@ (800ae54 <vTaskSetTimeOutState+0x50>)
 800ae3c:	681a      	ldr	r2, [r3, #0]
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800ae42:	f001 f811 	bl	800be68 <vPortExitCritical>
}
 800ae46:	bf00      	nop
 800ae48:	3710      	adds	r7, #16
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
 800ae4e:	bf00      	nop
 800ae50:	2000645c 	.word	0x2000645c
 800ae54:	20006448 	.word	0x20006448

0800ae58 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b083      	sub	sp, #12
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ae60:	4b06      	ldr	r3, [pc, #24]	@ (800ae7c <vTaskInternalSetTimeOutState+0x24>)
 800ae62:	681a      	ldr	r2, [r3, #0]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ae68:	4b05      	ldr	r3, [pc, #20]	@ (800ae80 <vTaskInternalSetTimeOutState+0x28>)
 800ae6a:	681a      	ldr	r2, [r3, #0]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	605a      	str	r2, [r3, #4]
}
 800ae70:	bf00      	nop
 800ae72:	370c      	adds	r7, #12
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr
 800ae7c:	2000645c 	.word	0x2000645c
 800ae80:	20006448 	.word	0x20006448

0800ae84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b088      	sub	sp, #32
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d10d      	bne.n	800aeb0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800ae94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae98:	b672      	cpsid	i
 800ae9a:	f383 8811 	msr	BASEPRI, r3
 800ae9e:	f3bf 8f6f 	isb	sy
 800aea2:	f3bf 8f4f 	dsb	sy
 800aea6:	b662      	cpsie	i
 800aea8:	613b      	str	r3, [r7, #16]
}
 800aeaa:	bf00      	nop
 800aeac:	bf00      	nop
 800aeae:	e7fd      	b.n	800aeac <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d10d      	bne.n	800aed2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800aeb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeba:	b672      	cpsid	i
 800aebc:	f383 8811 	msr	BASEPRI, r3
 800aec0:	f3bf 8f6f 	isb	sy
 800aec4:	f3bf 8f4f 	dsb	sy
 800aec8:	b662      	cpsie	i
 800aeca:	60fb      	str	r3, [r7, #12]
}
 800aecc:	bf00      	nop
 800aece:	bf00      	nop
 800aed0:	e7fd      	b.n	800aece <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800aed2:	f000 ff93 	bl	800bdfc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aed6:	4b1d      	ldr	r3, [pc, #116]	@ (800af4c <xTaskCheckForTimeOut+0xc8>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	69ba      	ldr	r2, [r7, #24]
 800aee2:	1ad3      	subs	r3, r2, r3
 800aee4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aeee:	d102      	bne.n	800aef6 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800aef0:	2300      	movs	r3, #0
 800aef2:	61fb      	str	r3, [r7, #28]
 800aef4:	e023      	b.n	800af3e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681a      	ldr	r2, [r3, #0]
 800aefa:	4b15      	ldr	r3, [pc, #84]	@ (800af50 <xTaskCheckForTimeOut+0xcc>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	429a      	cmp	r2, r3
 800af00:	d007      	beq.n	800af12 <xTaskCheckForTimeOut+0x8e>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	69ba      	ldr	r2, [r7, #24]
 800af08:	429a      	cmp	r2, r3
 800af0a:	d302      	bcc.n	800af12 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800af0c:	2301      	movs	r3, #1
 800af0e:	61fb      	str	r3, [r7, #28]
 800af10:	e015      	b.n	800af3e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	697a      	ldr	r2, [r7, #20]
 800af18:	429a      	cmp	r2, r3
 800af1a:	d20b      	bcs.n	800af34 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	1ad2      	subs	r2, r2, r3
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f7ff ff95 	bl	800ae58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800af2e:	2300      	movs	r3, #0
 800af30:	61fb      	str	r3, [r7, #28]
 800af32:	e004      	b.n	800af3e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	2200      	movs	r2, #0
 800af38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800af3a:	2301      	movs	r3, #1
 800af3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800af3e:	f000 ff93 	bl	800be68 <vPortExitCritical>

	return xReturn;
 800af42:	69fb      	ldr	r3, [r7, #28]
}
 800af44:	4618      	mov	r0, r3
 800af46:	3720      	adds	r7, #32
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}
 800af4c:	20006448 	.word	0x20006448
 800af50:	2000645c 	.word	0x2000645c

0800af54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800af54:	b480      	push	{r7}
 800af56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800af58:	4b03      	ldr	r3, [pc, #12]	@ (800af68 <vTaskMissedYield+0x14>)
 800af5a:	2201      	movs	r2, #1
 800af5c:	601a      	str	r2, [r3, #0]
}
 800af5e:	bf00      	nop
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr
 800af68:	20006458 	.word	0x20006458

0800af6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800af74:	f000 f852 	bl	800b01c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800af78:	4b06      	ldr	r3, [pc, #24]	@ (800af94 <prvIdleTask+0x28>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d9f9      	bls.n	800af74 <prvIdleTask+0x8>
			{
				taskYIELD();
 800af80:	4b05      	ldr	r3, [pc, #20]	@ (800af98 <prvIdleTask+0x2c>)
 800af82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af86:	601a      	str	r2, [r3, #0]
 800af88:	f3bf 8f4f 	dsb	sy
 800af8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800af90:	e7f0      	b.n	800af74 <prvIdleTask+0x8>
 800af92:	bf00      	nop
 800af94:	20005f74 	.word	0x20005f74
 800af98:	e000ed04 	.word	0xe000ed04

0800af9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b082      	sub	sp, #8
 800afa0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800afa2:	2300      	movs	r3, #0
 800afa4:	607b      	str	r3, [r7, #4]
 800afa6:	e00c      	b.n	800afc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	4613      	mov	r3, r2
 800afac:	009b      	lsls	r3, r3, #2
 800afae:	4413      	add	r3, r2
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	4a12      	ldr	r2, [pc, #72]	@ (800affc <prvInitialiseTaskLists+0x60>)
 800afb4:	4413      	add	r3, r2
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7fe fa3e 	bl	8009438 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	3301      	adds	r3, #1
 800afc0:	607b      	str	r3, [r7, #4]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2b37      	cmp	r3, #55	@ 0x37
 800afc6:	d9ef      	bls.n	800afa8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800afc8:	480d      	ldr	r0, [pc, #52]	@ (800b000 <prvInitialiseTaskLists+0x64>)
 800afca:	f7fe fa35 	bl	8009438 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800afce:	480d      	ldr	r0, [pc, #52]	@ (800b004 <prvInitialiseTaskLists+0x68>)
 800afd0:	f7fe fa32 	bl	8009438 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800afd4:	480c      	ldr	r0, [pc, #48]	@ (800b008 <prvInitialiseTaskLists+0x6c>)
 800afd6:	f7fe fa2f 	bl	8009438 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800afda:	480c      	ldr	r0, [pc, #48]	@ (800b00c <prvInitialiseTaskLists+0x70>)
 800afdc:	f7fe fa2c 	bl	8009438 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800afe0:	480b      	ldr	r0, [pc, #44]	@ (800b010 <prvInitialiseTaskLists+0x74>)
 800afe2:	f7fe fa29 	bl	8009438 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800afe6:	4b0b      	ldr	r3, [pc, #44]	@ (800b014 <prvInitialiseTaskLists+0x78>)
 800afe8:	4a05      	ldr	r2, [pc, #20]	@ (800b000 <prvInitialiseTaskLists+0x64>)
 800afea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800afec:	4b0a      	ldr	r3, [pc, #40]	@ (800b018 <prvInitialiseTaskLists+0x7c>)
 800afee:	4a05      	ldr	r2, [pc, #20]	@ (800b004 <prvInitialiseTaskLists+0x68>)
 800aff0:	601a      	str	r2, [r3, #0]
}
 800aff2:	bf00      	nop
 800aff4:	3708      	adds	r7, #8
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}
 800affa:	bf00      	nop
 800affc:	20005f74 	.word	0x20005f74
 800b000:	200063d4 	.word	0x200063d4
 800b004:	200063e8 	.word	0x200063e8
 800b008:	20006404 	.word	0x20006404
 800b00c:	20006418 	.word	0x20006418
 800b010:	20006430 	.word	0x20006430
 800b014:	200063fc 	.word	0x200063fc
 800b018:	20006400 	.word	0x20006400

0800b01c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b082      	sub	sp, #8
 800b020:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b022:	e019      	b.n	800b058 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b024:	f000 feea 	bl	800bdfc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b028:	4b10      	ldr	r3, [pc, #64]	@ (800b06c <prvCheckTasksWaitingTermination+0x50>)
 800b02a:	68db      	ldr	r3, [r3, #12]
 800b02c:	68db      	ldr	r3, [r3, #12]
 800b02e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	3304      	adds	r3, #4
 800b034:	4618      	mov	r0, r3
 800b036:	f7fe fa89 	bl	800954c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b03a:	4b0d      	ldr	r3, [pc, #52]	@ (800b070 <prvCheckTasksWaitingTermination+0x54>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	3b01      	subs	r3, #1
 800b040:	4a0b      	ldr	r2, [pc, #44]	@ (800b070 <prvCheckTasksWaitingTermination+0x54>)
 800b042:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b044:	4b0b      	ldr	r3, [pc, #44]	@ (800b074 <prvCheckTasksWaitingTermination+0x58>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	3b01      	subs	r3, #1
 800b04a:	4a0a      	ldr	r2, [pc, #40]	@ (800b074 <prvCheckTasksWaitingTermination+0x58>)
 800b04c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b04e:	f000 ff0b 	bl	800be68 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f000 f810 	bl	800b078 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b058:	4b06      	ldr	r3, [pc, #24]	@ (800b074 <prvCheckTasksWaitingTermination+0x58>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d1e1      	bne.n	800b024 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b060:	bf00      	nop
 800b062:	bf00      	nop
 800b064:	3708      	adds	r7, #8
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	20006418 	.word	0x20006418
 800b070:	20006444 	.word	0x20006444
 800b074:	2000642c 	.word	0x2000642c

0800b078 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b086:	2b00      	cmp	r3, #0
 800b088:	d108      	bne.n	800b09c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b08e:	4618      	mov	r0, r3
 800b090:	f001 f8b0 	bl	800c1f4 <vPortFree>
				vPortFree( pxTCB );
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f001 f8ad 	bl	800c1f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b09a:	e01b      	b.n	800b0d4 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d103      	bne.n	800b0ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f001 f8a4 	bl	800c1f4 <vPortFree>
	}
 800b0ac:	e012      	b.n	800b0d4 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b0b4:	2b02      	cmp	r3, #2
 800b0b6:	d00d      	beq.n	800b0d4 <prvDeleteTCB+0x5c>
	__asm volatile
 800b0b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0bc:	b672      	cpsid	i
 800b0be:	f383 8811 	msr	BASEPRI, r3
 800b0c2:	f3bf 8f6f 	isb	sy
 800b0c6:	f3bf 8f4f 	dsb	sy
 800b0ca:	b662      	cpsie	i
 800b0cc:	60fb      	str	r3, [r7, #12]
}
 800b0ce:	bf00      	nop
 800b0d0:	bf00      	nop
 800b0d2:	e7fd      	b.n	800b0d0 <prvDeleteTCB+0x58>
	}
 800b0d4:	bf00      	nop
 800b0d6:	3710      	adds	r7, #16
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}

0800b0dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b0dc:	b480      	push	{r7}
 800b0de:	b083      	sub	sp, #12
 800b0e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0e2:	4b0c      	ldr	r3, [pc, #48]	@ (800b114 <prvResetNextTaskUnblockTime+0x38>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d104      	bne.n	800b0f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b0ec:	4b0a      	ldr	r3, [pc, #40]	@ (800b118 <prvResetNextTaskUnblockTime+0x3c>)
 800b0ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b0f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b0f4:	e008      	b.n	800b108 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0f6:	4b07      	ldr	r3, [pc, #28]	@ (800b114 <prvResetNextTaskUnblockTime+0x38>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	68db      	ldr	r3, [r3, #12]
 800b0fc:	68db      	ldr	r3, [r3, #12]
 800b0fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	4a04      	ldr	r2, [pc, #16]	@ (800b118 <prvResetNextTaskUnblockTime+0x3c>)
 800b106:	6013      	str	r3, [r2, #0]
}
 800b108:	bf00      	nop
 800b10a:	370c      	adds	r7, #12
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr
 800b114:	200063fc 	.word	0x200063fc
 800b118:	20006464 	.word	0x20006464

0800b11c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b11c:	b480      	push	{r7}
 800b11e:	b083      	sub	sp, #12
 800b120:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b122:	4b05      	ldr	r3, [pc, #20]	@ (800b138 <xTaskGetCurrentTaskHandle+0x1c>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b128:	687b      	ldr	r3, [r7, #4]
	}
 800b12a:	4618      	mov	r0, r3
 800b12c:	370c      	adds	r7, #12
 800b12e:	46bd      	mov	sp, r7
 800b130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b134:	4770      	bx	lr
 800b136:	bf00      	nop
 800b138:	20005f70 	.word	0x20005f70

0800b13c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b13c:	b480      	push	{r7}
 800b13e:	b083      	sub	sp, #12
 800b140:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b142:	4b0b      	ldr	r3, [pc, #44]	@ (800b170 <xTaskGetSchedulerState+0x34>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d102      	bne.n	800b150 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b14a:	2301      	movs	r3, #1
 800b14c:	607b      	str	r3, [r7, #4]
 800b14e:	e008      	b.n	800b162 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b150:	4b08      	ldr	r3, [pc, #32]	@ (800b174 <xTaskGetSchedulerState+0x38>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d102      	bne.n	800b15e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b158:	2302      	movs	r3, #2
 800b15a:	607b      	str	r3, [r7, #4]
 800b15c:	e001      	b.n	800b162 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b15e:	2300      	movs	r3, #0
 800b160:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b162:	687b      	ldr	r3, [r7, #4]
	}
 800b164:	4618      	mov	r0, r3
 800b166:	370c      	adds	r7, #12
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr
 800b170:	20006450 	.word	0x20006450
 800b174:	2000646c 	.word	0x2000646c

0800b178 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b184:	2300      	movs	r3, #0
 800b186:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d051      	beq.n	800b232 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b192:	4b2a      	ldr	r3, [pc, #168]	@ (800b23c <xTaskPriorityInherit+0xc4>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b198:	429a      	cmp	r2, r3
 800b19a:	d241      	bcs.n	800b220 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	699b      	ldr	r3, [r3, #24]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	db06      	blt.n	800b1b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1a4:	4b25      	ldr	r3, [pc, #148]	@ (800b23c <xTaskPriorityInherit+0xc4>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1aa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	6959      	ldr	r1, [r3, #20]
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1ba:	4613      	mov	r3, r2
 800b1bc:	009b      	lsls	r3, r3, #2
 800b1be:	4413      	add	r3, r2
 800b1c0:	009b      	lsls	r3, r3, #2
 800b1c2:	4a1f      	ldr	r2, [pc, #124]	@ (800b240 <xTaskPriorityInherit+0xc8>)
 800b1c4:	4413      	add	r3, r2
 800b1c6:	4299      	cmp	r1, r3
 800b1c8:	d122      	bne.n	800b210 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	3304      	adds	r3, #4
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f7fe f9bc 	bl	800954c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b1d4:	4b19      	ldr	r3, [pc, #100]	@ (800b23c <xTaskPriorityInherit+0xc4>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1e2:	4b18      	ldr	r3, [pc, #96]	@ (800b244 <xTaskPriorityInherit+0xcc>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d903      	bls.n	800b1f2 <xTaskPriorityInherit+0x7a>
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1ee:	4a15      	ldr	r2, [pc, #84]	@ (800b244 <xTaskPriorityInherit+0xcc>)
 800b1f0:	6013      	str	r3, [r2, #0]
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1f6:	4613      	mov	r3, r2
 800b1f8:	009b      	lsls	r3, r3, #2
 800b1fa:	4413      	add	r3, r2
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	4a10      	ldr	r2, [pc, #64]	@ (800b240 <xTaskPriorityInherit+0xc8>)
 800b200:	441a      	add	r2, r3
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	3304      	adds	r3, #4
 800b206:	4619      	mov	r1, r3
 800b208:	4610      	mov	r0, r2
 800b20a:	f7fe f942 	bl	8009492 <vListInsertEnd>
 800b20e:	e004      	b.n	800b21a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b210:	4b0a      	ldr	r3, [pc, #40]	@ (800b23c <xTaskPriorityInherit+0xc4>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b21a:	2301      	movs	r3, #1
 800b21c:	60fb      	str	r3, [r7, #12]
 800b21e:	e008      	b.n	800b232 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b224:	4b05      	ldr	r3, [pc, #20]	@ (800b23c <xTaskPriorityInherit+0xc4>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d201      	bcs.n	800b232 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b22e:	2301      	movs	r3, #1
 800b230:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b232:	68fb      	ldr	r3, [r7, #12]
	}
 800b234:	4618      	mov	r0, r3
 800b236:	3710      	adds	r7, #16
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}
 800b23c:	20005f70 	.word	0x20005f70
 800b240:	20005f74 	.word	0x20005f74
 800b244:	2000644c 	.word	0x2000644c

0800b248 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b086      	sub	sp, #24
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b254:	2300      	movs	r3, #0
 800b256:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d05c      	beq.n	800b318 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b25e:	4b31      	ldr	r3, [pc, #196]	@ (800b324 <xTaskPriorityDisinherit+0xdc>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	693a      	ldr	r2, [r7, #16]
 800b264:	429a      	cmp	r2, r3
 800b266:	d00d      	beq.n	800b284 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800b268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b26c:	b672      	cpsid	i
 800b26e:	f383 8811 	msr	BASEPRI, r3
 800b272:	f3bf 8f6f 	isb	sy
 800b276:	f3bf 8f4f 	dsb	sy
 800b27a:	b662      	cpsie	i
 800b27c:	60fb      	str	r3, [r7, #12]
}
 800b27e:	bf00      	nop
 800b280:	bf00      	nop
 800b282:	e7fd      	b.n	800b280 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d10d      	bne.n	800b2a8 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800b28c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b290:	b672      	cpsid	i
 800b292:	f383 8811 	msr	BASEPRI, r3
 800b296:	f3bf 8f6f 	isb	sy
 800b29a:	f3bf 8f4f 	dsb	sy
 800b29e:	b662      	cpsie	i
 800b2a0:	60bb      	str	r3, [r7, #8]
}
 800b2a2:	bf00      	nop
 800b2a4:	bf00      	nop
 800b2a6:	e7fd      	b.n	800b2a4 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2ac:	1e5a      	subs	r2, r3, #1
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d02c      	beq.n	800b318 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d128      	bne.n	800b318 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	3304      	adds	r3, #4
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f7fe f93e 	bl	800954c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2dc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2e8:	4b0f      	ldr	r3, [pc, #60]	@ (800b328 <xTaskPriorityDisinherit+0xe0>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d903      	bls.n	800b2f8 <xTaskPriorityDisinherit+0xb0>
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2f4:	4a0c      	ldr	r2, [pc, #48]	@ (800b328 <xTaskPriorityDisinherit+0xe0>)
 800b2f6:	6013      	str	r3, [r2, #0]
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2fc:	4613      	mov	r3, r2
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	4413      	add	r3, r2
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	4a09      	ldr	r2, [pc, #36]	@ (800b32c <xTaskPriorityDisinherit+0xe4>)
 800b306:	441a      	add	r2, r3
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	3304      	adds	r3, #4
 800b30c:	4619      	mov	r1, r3
 800b30e:	4610      	mov	r0, r2
 800b310:	f7fe f8bf 	bl	8009492 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b314:	2301      	movs	r3, #1
 800b316:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b318:	697b      	ldr	r3, [r7, #20]
	}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3718      	adds	r7, #24
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
 800b322:	bf00      	nop
 800b324:	20005f70 	.word	0x20005f70
 800b328:	2000644c 	.word	0x2000644c
 800b32c:	20005f74 	.word	0x20005f74

0800b330 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b330:	b580      	push	{r7, lr}
 800b332:	b088      	sub	sp, #32
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b33e:	2301      	movs	r3, #1
 800b340:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d070      	beq.n	800b42a <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b348:	69bb      	ldr	r3, [r7, #24]
 800b34a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d10d      	bne.n	800b36c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800b350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b354:	b672      	cpsid	i
 800b356:	f383 8811 	msr	BASEPRI, r3
 800b35a:	f3bf 8f6f 	isb	sy
 800b35e:	f3bf 8f4f 	dsb	sy
 800b362:	b662      	cpsie	i
 800b364:	60fb      	str	r3, [r7, #12]
}
 800b366:	bf00      	nop
 800b368:	bf00      	nop
 800b36a:	e7fd      	b.n	800b368 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b36c:	69bb      	ldr	r3, [r7, #24]
 800b36e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b370:	683a      	ldr	r2, [r7, #0]
 800b372:	429a      	cmp	r2, r3
 800b374:	d902      	bls.n	800b37c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	61fb      	str	r3, [r7, #28]
 800b37a:	e002      	b.n	800b382 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b37c:	69bb      	ldr	r3, [r7, #24]
 800b37e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b380:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b386:	69fa      	ldr	r2, [r7, #28]
 800b388:	429a      	cmp	r2, r3
 800b38a:	d04e      	beq.n	800b42a <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b38c:	69bb      	ldr	r3, [r7, #24]
 800b38e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b390:	697a      	ldr	r2, [r7, #20]
 800b392:	429a      	cmp	r2, r3
 800b394:	d149      	bne.n	800b42a <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b396:	4b27      	ldr	r3, [pc, #156]	@ (800b434 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	69ba      	ldr	r2, [r7, #24]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d10d      	bne.n	800b3bc <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 800b3a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3a4:	b672      	cpsid	i
 800b3a6:	f383 8811 	msr	BASEPRI, r3
 800b3aa:	f3bf 8f6f 	isb	sy
 800b3ae:	f3bf 8f4f 	dsb	sy
 800b3b2:	b662      	cpsie	i
 800b3b4:	60bb      	str	r3, [r7, #8]
}
 800b3b6:	bf00      	nop
 800b3b8:	bf00      	nop
 800b3ba:	e7fd      	b.n	800b3b8 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b3bc:	69bb      	ldr	r3, [r7, #24]
 800b3be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3c0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b3c2:	69bb      	ldr	r3, [r7, #24]
 800b3c4:	69fa      	ldr	r2, [r7, #28]
 800b3c6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b3c8:	69bb      	ldr	r3, [r7, #24]
 800b3ca:	699b      	ldr	r3, [r3, #24]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	db04      	blt.n	800b3da <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b3d6:	69bb      	ldr	r3, [r7, #24]
 800b3d8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b3da:	69bb      	ldr	r3, [r7, #24]
 800b3dc:	6959      	ldr	r1, [r3, #20]
 800b3de:	693a      	ldr	r2, [r7, #16]
 800b3e0:	4613      	mov	r3, r2
 800b3e2:	009b      	lsls	r3, r3, #2
 800b3e4:	4413      	add	r3, r2
 800b3e6:	009b      	lsls	r3, r3, #2
 800b3e8:	4a13      	ldr	r2, [pc, #76]	@ (800b438 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800b3ea:	4413      	add	r3, r2
 800b3ec:	4299      	cmp	r1, r3
 800b3ee:	d11c      	bne.n	800b42a <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3f0:	69bb      	ldr	r3, [r7, #24]
 800b3f2:	3304      	adds	r3, #4
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f7fe f8a9 	bl	800954c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b3fa:	69bb      	ldr	r3, [r7, #24]
 800b3fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3fe:	4b0f      	ldr	r3, [pc, #60]	@ (800b43c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	429a      	cmp	r2, r3
 800b404:	d903      	bls.n	800b40e <vTaskPriorityDisinheritAfterTimeout+0xde>
 800b406:	69bb      	ldr	r3, [r7, #24]
 800b408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b40a:	4a0c      	ldr	r2, [pc, #48]	@ (800b43c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800b40c:	6013      	str	r3, [r2, #0]
 800b40e:	69bb      	ldr	r3, [r7, #24]
 800b410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b412:	4613      	mov	r3, r2
 800b414:	009b      	lsls	r3, r3, #2
 800b416:	4413      	add	r3, r2
 800b418:	009b      	lsls	r3, r3, #2
 800b41a:	4a07      	ldr	r2, [pc, #28]	@ (800b438 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800b41c:	441a      	add	r2, r3
 800b41e:	69bb      	ldr	r3, [r7, #24]
 800b420:	3304      	adds	r3, #4
 800b422:	4619      	mov	r1, r3
 800b424:	4610      	mov	r0, r2
 800b426:	f7fe f834 	bl	8009492 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b42a:	bf00      	nop
 800b42c:	3720      	adds	r7, #32
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}
 800b432:	bf00      	nop
 800b434:	20005f70 	.word	0x20005f70
 800b438:	20005f74 	.word	0x20005f74
 800b43c:	2000644c 	.word	0x2000644c

0800b440 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b440:	b480      	push	{r7}
 800b442:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b444:	4b07      	ldr	r3, [pc, #28]	@ (800b464 <pvTaskIncrementMutexHeldCount+0x24>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d004      	beq.n	800b456 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b44c:	4b05      	ldr	r3, [pc, #20]	@ (800b464 <pvTaskIncrementMutexHeldCount+0x24>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b452:	3201      	adds	r2, #1
 800b454:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800b456:	4b03      	ldr	r3, [pc, #12]	@ (800b464 <pvTaskIncrementMutexHeldCount+0x24>)
 800b458:	681b      	ldr	r3, [r3, #0]
	}
 800b45a:	4618      	mov	r0, r3
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr
 800b464:	20005f70 	.word	0x20005f70

0800b468 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b472:	4b21      	ldr	r3, [pc, #132]	@ (800b4f8 <prvAddCurrentTaskToDelayedList+0x90>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b478:	4b20      	ldr	r3, [pc, #128]	@ (800b4fc <prvAddCurrentTaskToDelayedList+0x94>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	3304      	adds	r3, #4
 800b47e:	4618      	mov	r0, r3
 800b480:	f7fe f864 	bl	800954c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b48a:	d10a      	bne.n	800b4a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d007      	beq.n	800b4a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b492:	4b1a      	ldr	r3, [pc, #104]	@ (800b4fc <prvAddCurrentTaskToDelayedList+0x94>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	3304      	adds	r3, #4
 800b498:	4619      	mov	r1, r3
 800b49a:	4819      	ldr	r0, [pc, #100]	@ (800b500 <prvAddCurrentTaskToDelayedList+0x98>)
 800b49c:	f7fd fff9 	bl	8009492 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b4a0:	e026      	b.n	800b4f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b4a2:	68fa      	ldr	r2, [r7, #12]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	4413      	add	r3, r2
 800b4a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b4aa:	4b14      	ldr	r3, [pc, #80]	@ (800b4fc <prvAddCurrentTaskToDelayedList+0x94>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	68ba      	ldr	r2, [r7, #8]
 800b4b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b4b2:	68ba      	ldr	r2, [r7, #8]
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d209      	bcs.n	800b4ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4ba:	4b12      	ldr	r3, [pc, #72]	@ (800b504 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b4bc:	681a      	ldr	r2, [r3, #0]
 800b4be:	4b0f      	ldr	r3, [pc, #60]	@ (800b4fc <prvAddCurrentTaskToDelayedList+0x94>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	3304      	adds	r3, #4
 800b4c4:	4619      	mov	r1, r3
 800b4c6:	4610      	mov	r0, r2
 800b4c8:	f7fe f807 	bl	80094da <vListInsert>
}
 800b4cc:	e010      	b.n	800b4f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4ce:	4b0e      	ldr	r3, [pc, #56]	@ (800b508 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b4d0:	681a      	ldr	r2, [r3, #0]
 800b4d2:	4b0a      	ldr	r3, [pc, #40]	@ (800b4fc <prvAddCurrentTaskToDelayedList+0x94>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	3304      	adds	r3, #4
 800b4d8:	4619      	mov	r1, r3
 800b4da:	4610      	mov	r0, r2
 800b4dc:	f7fd fffd 	bl	80094da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b4e0:	4b0a      	ldr	r3, [pc, #40]	@ (800b50c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	68ba      	ldr	r2, [r7, #8]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d202      	bcs.n	800b4f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b4ea:	4a08      	ldr	r2, [pc, #32]	@ (800b50c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	6013      	str	r3, [r2, #0]
}
 800b4f0:	bf00      	nop
 800b4f2:	3710      	adds	r7, #16
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	20006448 	.word	0x20006448
 800b4fc:	20005f70 	.word	0x20005f70
 800b500:	20006430 	.word	0x20006430
 800b504:	20006400 	.word	0x20006400
 800b508:	200063fc 	.word	0x200063fc
 800b50c:	20006464 	.word	0x20006464

0800b510 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b08a      	sub	sp, #40	@ 0x28
 800b514:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b516:	2300      	movs	r3, #0
 800b518:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b51a:	f000 fb21 	bl	800bb60 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b51e:	4b1e      	ldr	r3, [pc, #120]	@ (800b598 <xTimerCreateTimerTask+0x88>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d021      	beq.n	800b56a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b526:	2300      	movs	r3, #0
 800b528:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b52a:	2300      	movs	r3, #0
 800b52c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b52e:	1d3a      	adds	r2, r7, #4
 800b530:	f107 0108 	add.w	r1, r7, #8
 800b534:	f107 030c 	add.w	r3, r7, #12
 800b538:	4618      	mov	r0, r3
 800b53a:	f7fd ff63 	bl	8009404 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b53e:	6879      	ldr	r1, [r7, #4]
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	68fa      	ldr	r2, [r7, #12]
 800b544:	9202      	str	r2, [sp, #8]
 800b546:	9301      	str	r3, [sp, #4]
 800b548:	2302      	movs	r3, #2
 800b54a:	9300      	str	r3, [sp, #0]
 800b54c:	2300      	movs	r3, #0
 800b54e:	460a      	mov	r2, r1
 800b550:	4912      	ldr	r1, [pc, #72]	@ (800b59c <xTimerCreateTimerTask+0x8c>)
 800b552:	4813      	ldr	r0, [pc, #76]	@ (800b5a0 <xTimerCreateTimerTask+0x90>)
 800b554:	f7fe ff6e 	bl	800a434 <xTaskCreateStatic>
 800b558:	4603      	mov	r3, r0
 800b55a:	4a12      	ldr	r2, [pc, #72]	@ (800b5a4 <xTimerCreateTimerTask+0x94>)
 800b55c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b55e:	4b11      	ldr	r3, [pc, #68]	@ (800b5a4 <xTimerCreateTimerTask+0x94>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d001      	beq.n	800b56a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b566:	2301      	movs	r3, #1
 800b568:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d10d      	bne.n	800b58c <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800b570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b574:	b672      	cpsid	i
 800b576:	f383 8811 	msr	BASEPRI, r3
 800b57a:	f3bf 8f6f 	isb	sy
 800b57e:	f3bf 8f4f 	dsb	sy
 800b582:	b662      	cpsie	i
 800b584:	613b      	str	r3, [r7, #16]
}
 800b586:	bf00      	nop
 800b588:	bf00      	nop
 800b58a:	e7fd      	b.n	800b588 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800b58c:	697b      	ldr	r3, [r7, #20]
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3718      	adds	r7, #24
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	200064a0 	.word	0x200064a0
 800b59c:	08017ab4 	.word	0x08017ab4
 800b5a0:	0800b6e9 	.word	0x0800b6e9
 800b5a4:	200064a4 	.word	0x200064a4

0800b5a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b08a      	sub	sp, #40	@ 0x28
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	60b9      	str	r1, [r7, #8]
 800b5b2:	607a      	str	r2, [r7, #4]
 800b5b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d10d      	bne.n	800b5dc <xTimerGenericCommand+0x34>
	__asm volatile
 800b5c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5c4:	b672      	cpsid	i
 800b5c6:	f383 8811 	msr	BASEPRI, r3
 800b5ca:	f3bf 8f6f 	isb	sy
 800b5ce:	f3bf 8f4f 	dsb	sy
 800b5d2:	b662      	cpsie	i
 800b5d4:	623b      	str	r3, [r7, #32]
}
 800b5d6:	bf00      	nop
 800b5d8:	bf00      	nop
 800b5da:	e7fd      	b.n	800b5d8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b5dc:	4b19      	ldr	r3, [pc, #100]	@ (800b644 <xTimerGenericCommand+0x9c>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d02a      	beq.n	800b63a <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	2b05      	cmp	r3, #5
 800b5f4:	dc18      	bgt.n	800b628 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b5f6:	f7ff fda1 	bl	800b13c <xTaskGetSchedulerState>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	2b02      	cmp	r3, #2
 800b5fe:	d109      	bne.n	800b614 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b600:	4b10      	ldr	r3, [pc, #64]	@ (800b644 <xTimerGenericCommand+0x9c>)
 800b602:	6818      	ldr	r0, [r3, #0]
 800b604:	f107 0110 	add.w	r1, r7, #16
 800b608:	2300      	movs	r3, #0
 800b60a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b60c:	f7fe f9de 	bl	80099cc <xQueueGenericSend>
 800b610:	6278      	str	r0, [r7, #36]	@ 0x24
 800b612:	e012      	b.n	800b63a <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b614:	4b0b      	ldr	r3, [pc, #44]	@ (800b644 <xTimerGenericCommand+0x9c>)
 800b616:	6818      	ldr	r0, [r3, #0]
 800b618:	f107 0110 	add.w	r1, r7, #16
 800b61c:	2300      	movs	r3, #0
 800b61e:	2200      	movs	r2, #0
 800b620:	f7fe f9d4 	bl	80099cc <xQueueGenericSend>
 800b624:	6278      	str	r0, [r7, #36]	@ 0x24
 800b626:	e008      	b.n	800b63a <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b628:	4b06      	ldr	r3, [pc, #24]	@ (800b644 <xTimerGenericCommand+0x9c>)
 800b62a:	6818      	ldr	r0, [r3, #0]
 800b62c:	f107 0110 	add.w	r1, r7, #16
 800b630:	2300      	movs	r3, #0
 800b632:	683a      	ldr	r2, [r7, #0]
 800b634:	f7fe fad4 	bl	8009be0 <xQueueGenericSendFromISR>
 800b638:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3728      	adds	r7, #40	@ 0x28
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}
 800b644:	200064a0 	.word	0x200064a0

0800b648 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b088      	sub	sp, #32
 800b64c:	af02      	add	r7, sp, #8
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b652:	4b24      	ldr	r3, [pc, #144]	@ (800b6e4 <prvProcessExpiredTimer+0x9c>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	68db      	ldr	r3, [r3, #12]
 800b658:	68db      	ldr	r3, [r3, #12]
 800b65a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	3304      	adds	r3, #4
 800b660:	4618      	mov	r0, r3
 800b662:	f7fd ff73 	bl	800954c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b66c:	f003 0304 	and.w	r3, r3, #4
 800b670:	2b00      	cmp	r3, #0
 800b672:	d025      	beq.n	800b6c0 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	699a      	ldr	r2, [r3, #24]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	18d1      	adds	r1, r2, r3
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	683a      	ldr	r2, [r7, #0]
 800b680:	6978      	ldr	r0, [r7, #20]
 800b682:	f000 f8d7 	bl	800b834 <prvInsertTimerInActiveList>
 800b686:	4603      	mov	r3, r0
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d022      	beq.n	800b6d2 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b68c:	2300      	movs	r3, #0
 800b68e:	9300      	str	r3, [sp, #0]
 800b690:	2300      	movs	r3, #0
 800b692:	687a      	ldr	r2, [r7, #4]
 800b694:	2100      	movs	r1, #0
 800b696:	6978      	ldr	r0, [r7, #20]
 800b698:	f7ff ff86 	bl	800b5a8 <xTimerGenericCommand>
 800b69c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d116      	bne.n	800b6d2 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800b6a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6a8:	b672      	cpsid	i
 800b6aa:	f383 8811 	msr	BASEPRI, r3
 800b6ae:	f3bf 8f6f 	isb	sy
 800b6b2:	f3bf 8f4f 	dsb	sy
 800b6b6:	b662      	cpsie	i
 800b6b8:	60fb      	str	r3, [r7, #12]
}
 800b6ba:	bf00      	nop
 800b6bc:	bf00      	nop
 800b6be:	e7fd      	b.n	800b6bc <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b6c6:	f023 0301 	bic.w	r3, r3, #1
 800b6ca:	b2da      	uxtb	r2, r3
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	6a1b      	ldr	r3, [r3, #32]
 800b6d6:	6978      	ldr	r0, [r7, #20]
 800b6d8:	4798      	blx	r3
}
 800b6da:	bf00      	nop
 800b6dc:	3718      	adds	r7, #24
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}
 800b6e2:	bf00      	nop
 800b6e4:	20006498 	.word	0x20006498

0800b6e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b084      	sub	sp, #16
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b6f0:	f107 0308 	add.w	r3, r7, #8
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f000 f859 	bl	800b7ac <prvGetNextExpireTime>
 800b6fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	4619      	mov	r1, r3
 800b700:	68f8      	ldr	r0, [r7, #12]
 800b702:	f000 f805 	bl	800b710 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b706:	f000 f8d7 	bl	800b8b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b70a:	bf00      	nop
 800b70c:	e7f0      	b.n	800b6f0 <prvTimerTask+0x8>
	...

0800b710 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b084      	sub	sp, #16
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b71a:	f7ff f8dd 	bl	800a8d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b71e:	f107 0308 	add.w	r3, r7, #8
 800b722:	4618      	mov	r0, r3
 800b724:	f000 f866 	bl	800b7f4 <prvSampleTimeNow>
 800b728:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d130      	bne.n	800b792 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d10a      	bne.n	800b74c <prvProcessTimerOrBlockTask+0x3c>
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d806      	bhi.n	800b74c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b73e:	f7ff f8d9 	bl	800a8f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b742:	68f9      	ldr	r1, [r7, #12]
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f7ff ff7f 	bl	800b648 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b74a:	e024      	b.n	800b796 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d008      	beq.n	800b764 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b752:	4b13      	ldr	r3, [pc, #76]	@ (800b7a0 <prvProcessTimerOrBlockTask+0x90>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d101      	bne.n	800b760 <prvProcessTimerOrBlockTask+0x50>
 800b75c:	2301      	movs	r3, #1
 800b75e:	e000      	b.n	800b762 <prvProcessTimerOrBlockTask+0x52>
 800b760:	2300      	movs	r3, #0
 800b762:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b764:	4b0f      	ldr	r3, [pc, #60]	@ (800b7a4 <prvProcessTimerOrBlockTask+0x94>)
 800b766:	6818      	ldr	r0, [r3, #0]
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	1ad3      	subs	r3, r2, r3
 800b76e:	683a      	ldr	r2, [r7, #0]
 800b770:	4619      	mov	r1, r3
 800b772:	f7fe fe2b 	bl	800a3cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b776:	f7ff f8bd 	bl	800a8f4 <xTaskResumeAll>
 800b77a:	4603      	mov	r3, r0
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d10a      	bne.n	800b796 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b780:	4b09      	ldr	r3, [pc, #36]	@ (800b7a8 <prvProcessTimerOrBlockTask+0x98>)
 800b782:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b786:	601a      	str	r2, [r3, #0]
 800b788:	f3bf 8f4f 	dsb	sy
 800b78c:	f3bf 8f6f 	isb	sy
}
 800b790:	e001      	b.n	800b796 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b792:	f7ff f8af 	bl	800a8f4 <xTaskResumeAll>
}
 800b796:	bf00      	nop
 800b798:	3710      	adds	r7, #16
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}
 800b79e:	bf00      	nop
 800b7a0:	2000649c 	.word	0x2000649c
 800b7a4:	200064a0 	.word	0x200064a0
 800b7a8:	e000ed04 	.word	0xe000ed04

0800b7ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b085      	sub	sp, #20
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b7b4:	4b0e      	ldr	r3, [pc, #56]	@ (800b7f0 <prvGetNextExpireTime+0x44>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d101      	bne.n	800b7c2 <prvGetNextExpireTime+0x16>
 800b7be:	2201      	movs	r2, #1
 800b7c0:	e000      	b.n	800b7c4 <prvGetNextExpireTime+0x18>
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d105      	bne.n	800b7dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b7d0:	4b07      	ldr	r3, [pc, #28]	@ (800b7f0 <prvGetNextExpireTime+0x44>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	68db      	ldr	r3, [r3, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	60fb      	str	r3, [r7, #12]
 800b7da:	e001      	b.n	800b7e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3714      	adds	r7, #20
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr
 800b7ee:	bf00      	nop
 800b7f0:	20006498 	.word	0x20006498

0800b7f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b084      	sub	sp, #16
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b7fc:	f7ff f91a 	bl	800aa34 <xTaskGetTickCount>
 800b800:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b802:	4b0b      	ldr	r3, [pc, #44]	@ (800b830 <prvSampleTimeNow+0x3c>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	68fa      	ldr	r2, [r7, #12]
 800b808:	429a      	cmp	r2, r3
 800b80a:	d205      	bcs.n	800b818 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b80c:	f000 f940 	bl	800ba90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2201      	movs	r2, #1
 800b814:	601a      	str	r2, [r3, #0]
 800b816:	e002      	b.n	800b81e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2200      	movs	r2, #0
 800b81c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b81e:	4a04      	ldr	r2, [pc, #16]	@ (800b830 <prvSampleTimeNow+0x3c>)
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b824:	68fb      	ldr	r3, [r7, #12]
}
 800b826:	4618      	mov	r0, r3
 800b828:	3710      	adds	r7, #16
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
 800b82e:	bf00      	nop
 800b830:	200064a8 	.word	0x200064a8

0800b834 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b086      	sub	sp, #24
 800b838:	af00      	add	r7, sp, #0
 800b83a:	60f8      	str	r0, [r7, #12]
 800b83c:	60b9      	str	r1, [r7, #8]
 800b83e:	607a      	str	r2, [r7, #4]
 800b840:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b842:	2300      	movs	r3, #0
 800b844:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	68ba      	ldr	r2, [r7, #8]
 800b84a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	68fa      	ldr	r2, [r7, #12]
 800b850:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b852:	68ba      	ldr	r2, [r7, #8]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	429a      	cmp	r2, r3
 800b858:	d812      	bhi.n	800b880 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b85a:	687a      	ldr	r2, [r7, #4]
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	1ad2      	subs	r2, r2, r3
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	699b      	ldr	r3, [r3, #24]
 800b864:	429a      	cmp	r2, r3
 800b866:	d302      	bcc.n	800b86e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b868:	2301      	movs	r3, #1
 800b86a:	617b      	str	r3, [r7, #20]
 800b86c:	e01b      	b.n	800b8a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b86e:	4b10      	ldr	r3, [pc, #64]	@ (800b8b0 <prvInsertTimerInActiveList+0x7c>)
 800b870:	681a      	ldr	r2, [r3, #0]
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	3304      	adds	r3, #4
 800b876:	4619      	mov	r1, r3
 800b878:	4610      	mov	r0, r2
 800b87a:	f7fd fe2e 	bl	80094da <vListInsert>
 800b87e:	e012      	b.n	800b8a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b880:	687a      	ldr	r2, [r7, #4]
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	429a      	cmp	r2, r3
 800b886:	d206      	bcs.n	800b896 <prvInsertTimerInActiveList+0x62>
 800b888:	68ba      	ldr	r2, [r7, #8]
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d302      	bcc.n	800b896 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b890:	2301      	movs	r3, #1
 800b892:	617b      	str	r3, [r7, #20]
 800b894:	e007      	b.n	800b8a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b896:	4b07      	ldr	r3, [pc, #28]	@ (800b8b4 <prvInsertTimerInActiveList+0x80>)
 800b898:	681a      	ldr	r2, [r3, #0]
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	3304      	adds	r3, #4
 800b89e:	4619      	mov	r1, r3
 800b8a0:	4610      	mov	r0, r2
 800b8a2:	f7fd fe1a 	bl	80094da <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b8a6:	697b      	ldr	r3, [r7, #20]
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3718      	adds	r7, #24
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}
 800b8b0:	2000649c 	.word	0x2000649c
 800b8b4:	20006498 	.word	0x20006498

0800b8b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b08e      	sub	sp, #56	@ 0x38
 800b8bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b8be:	e0d4      	b.n	800ba6a <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	da1b      	bge.n	800b8fe <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b8c6:	1d3b      	adds	r3, r7, #4
 800b8c8:	3304      	adds	r3, #4
 800b8ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b8cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d10d      	bne.n	800b8ee <prvProcessReceivedCommands+0x36>
	__asm volatile
 800b8d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8d6:	b672      	cpsid	i
 800b8d8:	f383 8811 	msr	BASEPRI, r3
 800b8dc:	f3bf 8f6f 	isb	sy
 800b8e0:	f3bf 8f4f 	dsb	sy
 800b8e4:	b662      	cpsie	i
 800b8e6:	61fb      	str	r3, [r7, #28]
}
 800b8e8:	bf00      	nop
 800b8ea:	bf00      	nop
 800b8ec:	e7fd      	b.n	800b8ea <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b8ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b8f4:	6850      	ldr	r0, [r2, #4]
 800b8f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b8f8:	6892      	ldr	r2, [r2, #8]
 800b8fa:	4611      	mov	r1, r2
 800b8fc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2b00      	cmp	r3, #0
 800b902:	f2c0 80b2 	blt.w	800ba6a <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b90a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b90c:	695b      	ldr	r3, [r3, #20]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d004      	beq.n	800b91c <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b914:	3304      	adds	r3, #4
 800b916:	4618      	mov	r0, r3
 800b918:	f7fd fe18 	bl	800954c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b91c:	463b      	mov	r3, r7
 800b91e:	4618      	mov	r0, r3
 800b920:	f7ff ff68 	bl	800b7f4 <prvSampleTimeNow>
 800b924:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2b09      	cmp	r3, #9
 800b92a:	f200 809b 	bhi.w	800ba64 <prvProcessReceivedCommands+0x1ac>
 800b92e:	a201      	add	r2, pc, #4	@ (adr r2, 800b934 <prvProcessReceivedCommands+0x7c>)
 800b930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b934:	0800b95d 	.word	0x0800b95d
 800b938:	0800b95d 	.word	0x0800b95d
 800b93c:	0800b95d 	.word	0x0800b95d
 800b940:	0800b9d7 	.word	0x0800b9d7
 800b944:	0800b9eb 	.word	0x0800b9eb
 800b948:	0800ba3b 	.word	0x0800ba3b
 800b94c:	0800b95d 	.word	0x0800b95d
 800b950:	0800b95d 	.word	0x0800b95d
 800b954:	0800b9d7 	.word	0x0800b9d7
 800b958:	0800b9eb 	.word	0x0800b9eb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b95c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b95e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b962:	f043 0301 	orr.w	r3, r3, #1
 800b966:	b2da      	uxtb	r2, r3
 800b968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b96a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b96e:	68ba      	ldr	r2, [r7, #8]
 800b970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b972:	699b      	ldr	r3, [r3, #24]
 800b974:	18d1      	adds	r1, r2, r3
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b97a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b97c:	f7ff ff5a 	bl	800b834 <prvInsertTimerInActiveList>
 800b980:	4603      	mov	r3, r0
 800b982:	2b00      	cmp	r3, #0
 800b984:	d070      	beq.n	800ba68 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b988:	6a1b      	ldr	r3, [r3, #32]
 800b98a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b98c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b98e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b990:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b994:	f003 0304 	and.w	r3, r3, #4
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d065      	beq.n	800ba68 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b99c:	68ba      	ldr	r2, [r7, #8]
 800b99e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9a0:	699b      	ldr	r3, [r3, #24]
 800b9a2:	441a      	add	r2, r3
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	9300      	str	r3, [sp, #0]
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	2100      	movs	r1, #0
 800b9ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b9ae:	f7ff fdfb 	bl	800b5a8 <xTimerGenericCommand>
 800b9b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b9b4:	6a3b      	ldr	r3, [r7, #32]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d156      	bne.n	800ba68 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800b9ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9be:	b672      	cpsid	i
 800b9c0:	f383 8811 	msr	BASEPRI, r3
 800b9c4:	f3bf 8f6f 	isb	sy
 800b9c8:	f3bf 8f4f 	dsb	sy
 800b9cc:	b662      	cpsie	i
 800b9ce:	61bb      	str	r3, [r7, #24]
}
 800b9d0:	bf00      	nop
 800b9d2:	bf00      	nop
 800b9d4:	e7fd      	b.n	800b9d2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b9d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b9dc:	f023 0301 	bic.w	r3, r3, #1
 800b9e0:	b2da      	uxtb	r2, r3
 800b9e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b9e8:	e03f      	b.n	800ba6a <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b9ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b9f0:	f043 0301 	orr.w	r3, r3, #1
 800b9f4:	b2da      	uxtb	r2, r3
 800b9f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b9fc:	68ba      	ldr	r2, [r7, #8]
 800b9fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba00:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ba02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba04:	699b      	ldr	r3, [r3, #24]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d10d      	bne.n	800ba26 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800ba0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba0e:	b672      	cpsid	i
 800ba10:	f383 8811 	msr	BASEPRI, r3
 800ba14:	f3bf 8f6f 	isb	sy
 800ba18:	f3bf 8f4f 	dsb	sy
 800ba1c:	b662      	cpsie	i
 800ba1e:	617b      	str	r3, [r7, #20]
}
 800ba20:	bf00      	nop
 800ba22:	bf00      	nop
 800ba24:	e7fd      	b.n	800ba22 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ba26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba28:	699a      	ldr	r2, [r3, #24]
 800ba2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba2c:	18d1      	adds	r1, r2, r3
 800ba2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba34:	f7ff fefe 	bl	800b834 <prvInsertTimerInActiveList>
					break;
 800ba38:	e017      	b.n	800ba6a <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ba3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba40:	f003 0302 	and.w	r3, r3, #2
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d103      	bne.n	800ba50 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800ba48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba4a:	f000 fbd3 	bl	800c1f4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ba4e:	e00c      	b.n	800ba6a <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba56:	f023 0301 	bic.w	r3, r3, #1
 800ba5a:	b2da      	uxtb	r2, r3
 800ba5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ba62:	e002      	b.n	800ba6a <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800ba64:	bf00      	nop
 800ba66:	e000      	b.n	800ba6a <prvProcessReceivedCommands+0x1b2>
					break;
 800ba68:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba6a:	4b08      	ldr	r3, [pc, #32]	@ (800ba8c <prvProcessReceivedCommands+0x1d4>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	1d39      	adds	r1, r7, #4
 800ba70:	2200      	movs	r2, #0
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7fe f958 	bl	8009d28 <xQueueReceive>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	f47f af20 	bne.w	800b8c0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ba80:	bf00      	nop
 800ba82:	bf00      	nop
 800ba84:	3730      	adds	r7, #48	@ 0x30
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	200064a0 	.word	0x200064a0

0800ba90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b088      	sub	sp, #32
 800ba94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ba96:	e04b      	b.n	800bb30 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba98:	4b2f      	ldr	r3, [pc, #188]	@ (800bb58 <prvSwitchTimerLists+0xc8>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	68db      	ldr	r3, [r3, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800baa2:	4b2d      	ldr	r3, [pc, #180]	@ (800bb58 <prvSwitchTimerLists+0xc8>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	68db      	ldr	r3, [r3, #12]
 800baa8:	68db      	ldr	r3, [r3, #12]
 800baaa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	3304      	adds	r3, #4
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7fd fd4b 	bl	800954c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	6a1b      	ldr	r3, [r3, #32]
 800baba:	68f8      	ldr	r0, [r7, #12]
 800babc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bac4:	f003 0304 	and.w	r3, r3, #4
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d031      	beq.n	800bb30 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	699b      	ldr	r3, [r3, #24]
 800bad0:	693a      	ldr	r2, [r7, #16]
 800bad2:	4413      	add	r3, r2
 800bad4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bad6:	68ba      	ldr	r2, [r7, #8]
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	429a      	cmp	r2, r3
 800badc:	d90e      	bls.n	800bafc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	68ba      	ldr	r2, [r7, #8]
 800bae2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	68fa      	ldr	r2, [r7, #12]
 800bae8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800baea:	4b1b      	ldr	r3, [pc, #108]	@ (800bb58 <prvSwitchTimerLists+0xc8>)
 800baec:	681a      	ldr	r2, [r3, #0]
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	3304      	adds	r3, #4
 800baf2:	4619      	mov	r1, r3
 800baf4:	4610      	mov	r0, r2
 800baf6:	f7fd fcf0 	bl	80094da <vListInsert>
 800bafa:	e019      	b.n	800bb30 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bafc:	2300      	movs	r3, #0
 800bafe:	9300      	str	r3, [sp, #0]
 800bb00:	2300      	movs	r3, #0
 800bb02:	693a      	ldr	r2, [r7, #16]
 800bb04:	2100      	movs	r1, #0
 800bb06:	68f8      	ldr	r0, [r7, #12]
 800bb08:	f7ff fd4e 	bl	800b5a8 <xTimerGenericCommand>
 800bb0c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d10d      	bne.n	800bb30 <prvSwitchTimerLists+0xa0>
	__asm volatile
 800bb14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb18:	b672      	cpsid	i
 800bb1a:	f383 8811 	msr	BASEPRI, r3
 800bb1e:	f3bf 8f6f 	isb	sy
 800bb22:	f3bf 8f4f 	dsb	sy
 800bb26:	b662      	cpsie	i
 800bb28:	603b      	str	r3, [r7, #0]
}
 800bb2a:	bf00      	nop
 800bb2c:	bf00      	nop
 800bb2e:	e7fd      	b.n	800bb2c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bb30:	4b09      	ldr	r3, [pc, #36]	@ (800bb58 <prvSwitchTimerLists+0xc8>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d1ae      	bne.n	800ba98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bb3a:	4b07      	ldr	r3, [pc, #28]	@ (800bb58 <prvSwitchTimerLists+0xc8>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bb40:	4b06      	ldr	r3, [pc, #24]	@ (800bb5c <prvSwitchTimerLists+0xcc>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	4a04      	ldr	r2, [pc, #16]	@ (800bb58 <prvSwitchTimerLists+0xc8>)
 800bb46:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bb48:	4a04      	ldr	r2, [pc, #16]	@ (800bb5c <prvSwitchTimerLists+0xcc>)
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	6013      	str	r3, [r2, #0]
}
 800bb4e:	bf00      	nop
 800bb50:	3718      	adds	r7, #24
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	bf00      	nop
 800bb58:	20006498 	.word	0x20006498
 800bb5c:	2000649c 	.word	0x2000649c

0800bb60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b082      	sub	sp, #8
 800bb64:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bb66:	f000 f949 	bl	800bdfc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bb6a:	4b15      	ldr	r3, [pc, #84]	@ (800bbc0 <prvCheckForValidListAndQueue+0x60>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d120      	bne.n	800bbb4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bb72:	4814      	ldr	r0, [pc, #80]	@ (800bbc4 <prvCheckForValidListAndQueue+0x64>)
 800bb74:	f7fd fc60 	bl	8009438 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bb78:	4813      	ldr	r0, [pc, #76]	@ (800bbc8 <prvCheckForValidListAndQueue+0x68>)
 800bb7a:	f7fd fc5d 	bl	8009438 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bb7e:	4b13      	ldr	r3, [pc, #76]	@ (800bbcc <prvCheckForValidListAndQueue+0x6c>)
 800bb80:	4a10      	ldr	r2, [pc, #64]	@ (800bbc4 <prvCheckForValidListAndQueue+0x64>)
 800bb82:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bb84:	4b12      	ldr	r3, [pc, #72]	@ (800bbd0 <prvCheckForValidListAndQueue+0x70>)
 800bb86:	4a10      	ldr	r2, [pc, #64]	@ (800bbc8 <prvCheckForValidListAndQueue+0x68>)
 800bb88:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	9300      	str	r3, [sp, #0]
 800bb8e:	4b11      	ldr	r3, [pc, #68]	@ (800bbd4 <prvCheckForValidListAndQueue+0x74>)
 800bb90:	4a11      	ldr	r2, [pc, #68]	@ (800bbd8 <prvCheckForValidListAndQueue+0x78>)
 800bb92:	2110      	movs	r1, #16
 800bb94:	200a      	movs	r0, #10
 800bb96:	f7fd fd6f 	bl	8009678 <xQueueGenericCreateStatic>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	4a08      	ldr	r2, [pc, #32]	@ (800bbc0 <prvCheckForValidListAndQueue+0x60>)
 800bb9e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bba0:	4b07      	ldr	r3, [pc, #28]	@ (800bbc0 <prvCheckForValidListAndQueue+0x60>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d005      	beq.n	800bbb4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bba8:	4b05      	ldr	r3, [pc, #20]	@ (800bbc0 <prvCheckForValidListAndQueue+0x60>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	490b      	ldr	r1, [pc, #44]	@ (800bbdc <prvCheckForValidListAndQueue+0x7c>)
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7fe fbe2 	bl	800a378 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bbb4:	f000 f958 	bl	800be68 <vPortExitCritical>
}
 800bbb8:	bf00      	nop
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	bf00      	nop
 800bbc0:	200064a0 	.word	0x200064a0
 800bbc4:	20006470 	.word	0x20006470
 800bbc8:	20006484 	.word	0x20006484
 800bbcc:	20006498 	.word	0x20006498
 800bbd0:	2000649c 	.word	0x2000649c
 800bbd4:	2000654c 	.word	0x2000654c
 800bbd8:	200064ac 	.word	0x200064ac
 800bbdc:	08017abc 	.word	0x08017abc

0800bbe0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b085      	sub	sp, #20
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	60f8      	str	r0, [r7, #12]
 800bbe8:	60b9      	str	r1, [r7, #8]
 800bbea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	3b04      	subs	r3, #4
 800bbf0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bbf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	3b04      	subs	r3, #4
 800bbfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	f023 0201 	bic.w	r2, r3, #1
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	3b04      	subs	r3, #4
 800bc0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bc10:	4a0c      	ldr	r2, [pc, #48]	@ (800bc44 <pxPortInitialiseStack+0x64>)
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	3b14      	subs	r3, #20
 800bc1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bc1c:	687a      	ldr	r2, [r7, #4]
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	3b04      	subs	r3, #4
 800bc26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	f06f 0202 	mvn.w	r2, #2
 800bc2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	3b20      	subs	r3, #32
 800bc34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bc36:	68fb      	ldr	r3, [r7, #12]
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3714      	adds	r7, #20
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr
 800bc44:	0800bc49 	.word	0x0800bc49

0800bc48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b085      	sub	sp, #20
 800bc4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bc52:	4b15      	ldr	r3, [pc, #84]	@ (800bca8 <prvTaskExitError+0x60>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bc5a:	d00d      	beq.n	800bc78 <prvTaskExitError+0x30>
	__asm volatile
 800bc5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc60:	b672      	cpsid	i
 800bc62:	f383 8811 	msr	BASEPRI, r3
 800bc66:	f3bf 8f6f 	isb	sy
 800bc6a:	f3bf 8f4f 	dsb	sy
 800bc6e:	b662      	cpsie	i
 800bc70:	60fb      	str	r3, [r7, #12]
}
 800bc72:	bf00      	nop
 800bc74:	bf00      	nop
 800bc76:	e7fd      	b.n	800bc74 <prvTaskExitError+0x2c>
	__asm volatile
 800bc78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc7c:	b672      	cpsid	i
 800bc7e:	f383 8811 	msr	BASEPRI, r3
 800bc82:	f3bf 8f6f 	isb	sy
 800bc86:	f3bf 8f4f 	dsb	sy
 800bc8a:	b662      	cpsie	i
 800bc8c:	60bb      	str	r3, [r7, #8]
}
 800bc8e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bc90:	bf00      	nop
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d0fc      	beq.n	800bc92 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bc98:	bf00      	nop
 800bc9a:	bf00      	nop
 800bc9c:	3714      	adds	r7, #20
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr
 800bca6:	bf00      	nop
 800bca8:	2000002c 	.word	0x2000002c
 800bcac:	00000000 	.word	0x00000000

0800bcb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bcb0:	4b07      	ldr	r3, [pc, #28]	@ (800bcd0 <pxCurrentTCBConst2>)
 800bcb2:	6819      	ldr	r1, [r3, #0]
 800bcb4:	6808      	ldr	r0, [r1, #0]
 800bcb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcba:	f380 8809 	msr	PSP, r0
 800bcbe:	f3bf 8f6f 	isb	sy
 800bcc2:	f04f 0000 	mov.w	r0, #0
 800bcc6:	f380 8811 	msr	BASEPRI, r0
 800bcca:	4770      	bx	lr
 800bccc:	f3af 8000 	nop.w

0800bcd0 <pxCurrentTCBConst2>:
 800bcd0:	20005f70 	.word	0x20005f70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bcd4:	bf00      	nop
 800bcd6:	bf00      	nop

0800bcd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bcd8:	4808      	ldr	r0, [pc, #32]	@ (800bcfc <prvPortStartFirstTask+0x24>)
 800bcda:	6800      	ldr	r0, [r0, #0]
 800bcdc:	6800      	ldr	r0, [r0, #0]
 800bcde:	f380 8808 	msr	MSP, r0
 800bce2:	f04f 0000 	mov.w	r0, #0
 800bce6:	f380 8814 	msr	CONTROL, r0
 800bcea:	b662      	cpsie	i
 800bcec:	b661      	cpsie	f
 800bcee:	f3bf 8f4f 	dsb	sy
 800bcf2:	f3bf 8f6f 	isb	sy
 800bcf6:	df00      	svc	0
 800bcf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bcfa:	bf00      	nop
 800bcfc:	e000ed08 	.word	0xe000ed08

0800bd00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b084      	sub	sp, #16
 800bd04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bd06:	4b37      	ldr	r3, [pc, #220]	@ (800bde4 <xPortStartScheduler+0xe4>)
 800bd08:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	b2db      	uxtb	r3, r3
 800bd10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	22ff      	movs	r2, #255	@ 0xff
 800bd16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	b2db      	uxtb	r3, r3
 800bd1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bd20:	78fb      	ldrb	r3, [r7, #3]
 800bd22:	b2db      	uxtb	r3, r3
 800bd24:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bd28:	b2da      	uxtb	r2, r3
 800bd2a:	4b2f      	ldr	r3, [pc, #188]	@ (800bde8 <xPortStartScheduler+0xe8>)
 800bd2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bd2e:	4b2f      	ldr	r3, [pc, #188]	@ (800bdec <xPortStartScheduler+0xec>)
 800bd30:	2207      	movs	r2, #7
 800bd32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd34:	e009      	b.n	800bd4a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800bd36:	4b2d      	ldr	r3, [pc, #180]	@ (800bdec <xPortStartScheduler+0xec>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	3b01      	subs	r3, #1
 800bd3c:	4a2b      	ldr	r2, [pc, #172]	@ (800bdec <xPortStartScheduler+0xec>)
 800bd3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bd40:	78fb      	ldrb	r3, [r7, #3]
 800bd42:	b2db      	uxtb	r3, r3
 800bd44:	005b      	lsls	r3, r3, #1
 800bd46:	b2db      	uxtb	r3, r3
 800bd48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd4a:	78fb      	ldrb	r3, [r7, #3]
 800bd4c:	b2db      	uxtb	r3, r3
 800bd4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd52:	2b80      	cmp	r3, #128	@ 0x80
 800bd54:	d0ef      	beq.n	800bd36 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bd56:	4b25      	ldr	r3, [pc, #148]	@ (800bdec <xPortStartScheduler+0xec>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f1c3 0307 	rsb	r3, r3, #7
 800bd5e:	2b04      	cmp	r3, #4
 800bd60:	d00d      	beq.n	800bd7e <xPortStartScheduler+0x7e>
	__asm volatile
 800bd62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd66:	b672      	cpsid	i
 800bd68:	f383 8811 	msr	BASEPRI, r3
 800bd6c:	f3bf 8f6f 	isb	sy
 800bd70:	f3bf 8f4f 	dsb	sy
 800bd74:	b662      	cpsie	i
 800bd76:	60bb      	str	r3, [r7, #8]
}
 800bd78:	bf00      	nop
 800bd7a:	bf00      	nop
 800bd7c:	e7fd      	b.n	800bd7a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bd7e:	4b1b      	ldr	r3, [pc, #108]	@ (800bdec <xPortStartScheduler+0xec>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	021b      	lsls	r3, r3, #8
 800bd84:	4a19      	ldr	r2, [pc, #100]	@ (800bdec <xPortStartScheduler+0xec>)
 800bd86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bd88:	4b18      	ldr	r3, [pc, #96]	@ (800bdec <xPortStartScheduler+0xec>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bd90:	4a16      	ldr	r2, [pc, #88]	@ (800bdec <xPortStartScheduler+0xec>)
 800bd92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	b2da      	uxtb	r2, r3
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bd9c:	4b14      	ldr	r3, [pc, #80]	@ (800bdf0 <xPortStartScheduler+0xf0>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	4a13      	ldr	r2, [pc, #76]	@ (800bdf0 <xPortStartScheduler+0xf0>)
 800bda2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bda6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bda8:	4b11      	ldr	r3, [pc, #68]	@ (800bdf0 <xPortStartScheduler+0xf0>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4a10      	ldr	r2, [pc, #64]	@ (800bdf0 <xPortStartScheduler+0xf0>)
 800bdae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800bdb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bdb4:	f000 f8dc 	bl	800bf70 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bdb8:	4b0e      	ldr	r3, [pc, #56]	@ (800bdf4 <xPortStartScheduler+0xf4>)
 800bdba:	2200      	movs	r2, #0
 800bdbc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bdbe:	f000 f8fb 	bl	800bfb8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bdc2:	4b0d      	ldr	r3, [pc, #52]	@ (800bdf8 <xPortStartScheduler+0xf8>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	4a0c      	ldr	r2, [pc, #48]	@ (800bdf8 <xPortStartScheduler+0xf8>)
 800bdc8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800bdcc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bdce:	f7ff ff83 	bl	800bcd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bdd2:	f7fe fefb 	bl	800abcc <vTaskSwitchContext>
	prvTaskExitError();
 800bdd6:	f7ff ff37 	bl	800bc48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bdda:	2300      	movs	r3, #0
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3710      	adds	r7, #16
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}
 800bde4:	e000e400 	.word	0xe000e400
 800bde8:	2000659c 	.word	0x2000659c
 800bdec:	200065a0 	.word	0x200065a0
 800bdf0:	e000ed20 	.word	0xe000ed20
 800bdf4:	2000002c 	.word	0x2000002c
 800bdf8:	e000ef34 	.word	0xe000ef34

0800bdfc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b083      	sub	sp, #12
 800be00:	af00      	add	r7, sp, #0
	__asm volatile
 800be02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be06:	b672      	cpsid	i
 800be08:	f383 8811 	msr	BASEPRI, r3
 800be0c:	f3bf 8f6f 	isb	sy
 800be10:	f3bf 8f4f 	dsb	sy
 800be14:	b662      	cpsie	i
 800be16:	607b      	str	r3, [r7, #4]
}
 800be18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800be1a:	4b11      	ldr	r3, [pc, #68]	@ (800be60 <vPortEnterCritical+0x64>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	3301      	adds	r3, #1
 800be20:	4a0f      	ldr	r2, [pc, #60]	@ (800be60 <vPortEnterCritical+0x64>)
 800be22:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800be24:	4b0e      	ldr	r3, [pc, #56]	@ (800be60 <vPortEnterCritical+0x64>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d112      	bne.n	800be52 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800be2c:	4b0d      	ldr	r3, [pc, #52]	@ (800be64 <vPortEnterCritical+0x68>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	b2db      	uxtb	r3, r3
 800be32:	2b00      	cmp	r3, #0
 800be34:	d00d      	beq.n	800be52 <vPortEnterCritical+0x56>
	__asm volatile
 800be36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be3a:	b672      	cpsid	i
 800be3c:	f383 8811 	msr	BASEPRI, r3
 800be40:	f3bf 8f6f 	isb	sy
 800be44:	f3bf 8f4f 	dsb	sy
 800be48:	b662      	cpsie	i
 800be4a:	603b      	str	r3, [r7, #0]
}
 800be4c:	bf00      	nop
 800be4e:	bf00      	nop
 800be50:	e7fd      	b.n	800be4e <vPortEnterCritical+0x52>
	}
}
 800be52:	bf00      	nop
 800be54:	370c      	adds	r7, #12
 800be56:	46bd      	mov	sp, r7
 800be58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5c:	4770      	bx	lr
 800be5e:	bf00      	nop
 800be60:	2000002c 	.word	0x2000002c
 800be64:	e000ed04 	.word	0xe000ed04

0800be68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800be68:	b480      	push	{r7}
 800be6a:	b083      	sub	sp, #12
 800be6c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800be6e:	4b13      	ldr	r3, [pc, #76]	@ (800bebc <vPortExitCritical+0x54>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d10d      	bne.n	800be92 <vPortExitCritical+0x2a>
	__asm volatile
 800be76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be7a:	b672      	cpsid	i
 800be7c:	f383 8811 	msr	BASEPRI, r3
 800be80:	f3bf 8f6f 	isb	sy
 800be84:	f3bf 8f4f 	dsb	sy
 800be88:	b662      	cpsie	i
 800be8a:	607b      	str	r3, [r7, #4]
}
 800be8c:	bf00      	nop
 800be8e:	bf00      	nop
 800be90:	e7fd      	b.n	800be8e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800be92:	4b0a      	ldr	r3, [pc, #40]	@ (800bebc <vPortExitCritical+0x54>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	3b01      	subs	r3, #1
 800be98:	4a08      	ldr	r2, [pc, #32]	@ (800bebc <vPortExitCritical+0x54>)
 800be9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800be9c:	4b07      	ldr	r3, [pc, #28]	@ (800bebc <vPortExitCritical+0x54>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d105      	bne.n	800beb0 <vPortExitCritical+0x48>
 800bea4:	2300      	movs	r3, #0
 800bea6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	f383 8811 	msr	BASEPRI, r3
}
 800beae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800beb0:	bf00      	nop
 800beb2:	370c      	adds	r7, #12
 800beb4:	46bd      	mov	sp, r7
 800beb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beba:	4770      	bx	lr
 800bebc:	2000002c 	.word	0x2000002c

0800bec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bec0:	f3ef 8009 	mrs	r0, PSP
 800bec4:	f3bf 8f6f 	isb	sy
 800bec8:	4b15      	ldr	r3, [pc, #84]	@ (800bf20 <pxCurrentTCBConst>)
 800beca:	681a      	ldr	r2, [r3, #0]
 800becc:	f01e 0f10 	tst.w	lr, #16
 800bed0:	bf08      	it	eq
 800bed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beda:	6010      	str	r0, [r2, #0]
 800bedc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bee0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bee4:	b672      	cpsid	i
 800bee6:	f380 8811 	msr	BASEPRI, r0
 800beea:	f3bf 8f4f 	dsb	sy
 800beee:	f3bf 8f6f 	isb	sy
 800bef2:	b662      	cpsie	i
 800bef4:	f7fe fe6a 	bl	800abcc <vTaskSwitchContext>
 800bef8:	f04f 0000 	mov.w	r0, #0
 800befc:	f380 8811 	msr	BASEPRI, r0
 800bf00:	bc09      	pop	{r0, r3}
 800bf02:	6819      	ldr	r1, [r3, #0]
 800bf04:	6808      	ldr	r0, [r1, #0]
 800bf06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf0a:	f01e 0f10 	tst.w	lr, #16
 800bf0e:	bf08      	it	eq
 800bf10:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bf14:	f380 8809 	msr	PSP, r0
 800bf18:	f3bf 8f6f 	isb	sy
 800bf1c:	4770      	bx	lr
 800bf1e:	bf00      	nop

0800bf20 <pxCurrentTCBConst>:
 800bf20:	20005f70 	.word	0x20005f70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bf24:	bf00      	nop
 800bf26:	bf00      	nop

0800bf28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
	__asm volatile
 800bf2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf32:	b672      	cpsid	i
 800bf34:	f383 8811 	msr	BASEPRI, r3
 800bf38:	f3bf 8f6f 	isb	sy
 800bf3c:	f3bf 8f4f 	dsb	sy
 800bf40:	b662      	cpsie	i
 800bf42:	607b      	str	r3, [r7, #4]
}
 800bf44:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bf46:	f7fe fd85 	bl	800aa54 <xTaskIncrementTick>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d003      	beq.n	800bf58 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bf50:	4b06      	ldr	r3, [pc, #24]	@ (800bf6c <SysTick_Handler+0x44>)
 800bf52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf56:	601a      	str	r2, [r3, #0]
 800bf58:	2300      	movs	r3, #0
 800bf5a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	f383 8811 	msr	BASEPRI, r3
}
 800bf62:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bf64:	bf00      	nop
 800bf66:	3708      	adds	r7, #8
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}
 800bf6c:	e000ed04 	.word	0xe000ed04

0800bf70 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bf70:	b480      	push	{r7}
 800bf72:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bf74:	4b0b      	ldr	r3, [pc, #44]	@ (800bfa4 <vPortSetupTimerInterrupt+0x34>)
 800bf76:	2200      	movs	r2, #0
 800bf78:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bf7a:	4b0b      	ldr	r3, [pc, #44]	@ (800bfa8 <vPortSetupTimerInterrupt+0x38>)
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bf80:	4b0a      	ldr	r3, [pc, #40]	@ (800bfac <vPortSetupTimerInterrupt+0x3c>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	4a0a      	ldr	r2, [pc, #40]	@ (800bfb0 <vPortSetupTimerInterrupt+0x40>)
 800bf86:	fba2 2303 	umull	r2, r3, r2, r3
 800bf8a:	099b      	lsrs	r3, r3, #6
 800bf8c:	4a09      	ldr	r2, [pc, #36]	@ (800bfb4 <vPortSetupTimerInterrupt+0x44>)
 800bf8e:	3b01      	subs	r3, #1
 800bf90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bf92:	4b04      	ldr	r3, [pc, #16]	@ (800bfa4 <vPortSetupTimerInterrupt+0x34>)
 800bf94:	2207      	movs	r2, #7
 800bf96:	601a      	str	r2, [r3, #0]
}
 800bf98:	bf00      	nop
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr
 800bfa2:	bf00      	nop
 800bfa4:	e000e010 	.word	0xe000e010
 800bfa8:	e000e018 	.word	0xe000e018
 800bfac:	20000020 	.word	0x20000020
 800bfb0:	10624dd3 	.word	0x10624dd3
 800bfb4:	e000e014 	.word	0xe000e014

0800bfb8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bfb8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bfc8 <vPortEnableVFP+0x10>
 800bfbc:	6801      	ldr	r1, [r0, #0]
 800bfbe:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800bfc2:	6001      	str	r1, [r0, #0]
 800bfc4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bfc6:	bf00      	nop
 800bfc8:	e000ed88 	.word	0xe000ed88

0800bfcc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bfcc:	b480      	push	{r7}
 800bfce:	b085      	sub	sp, #20
 800bfd0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bfd2:	f3ef 8305 	mrs	r3, IPSR
 800bfd6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	2b0f      	cmp	r3, #15
 800bfdc:	d917      	bls.n	800c00e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bfde:	4a1a      	ldr	r2, [pc, #104]	@ (800c048 <vPortValidateInterruptPriority+0x7c>)
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	4413      	add	r3, r2
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bfe8:	4b18      	ldr	r3, [pc, #96]	@ (800c04c <vPortValidateInterruptPriority+0x80>)
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	7afa      	ldrb	r2, [r7, #11]
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d20d      	bcs.n	800c00e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800bff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bff6:	b672      	cpsid	i
 800bff8:	f383 8811 	msr	BASEPRI, r3
 800bffc:	f3bf 8f6f 	isb	sy
 800c000:	f3bf 8f4f 	dsb	sy
 800c004:	b662      	cpsie	i
 800c006:	607b      	str	r3, [r7, #4]
}
 800c008:	bf00      	nop
 800c00a:	bf00      	nop
 800c00c:	e7fd      	b.n	800c00a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c00e:	4b10      	ldr	r3, [pc, #64]	@ (800c050 <vPortValidateInterruptPriority+0x84>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c016:	4b0f      	ldr	r3, [pc, #60]	@ (800c054 <vPortValidateInterruptPriority+0x88>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d90d      	bls.n	800c03a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800c01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c022:	b672      	cpsid	i
 800c024:	f383 8811 	msr	BASEPRI, r3
 800c028:	f3bf 8f6f 	isb	sy
 800c02c:	f3bf 8f4f 	dsb	sy
 800c030:	b662      	cpsie	i
 800c032:	603b      	str	r3, [r7, #0]
}
 800c034:	bf00      	nop
 800c036:	bf00      	nop
 800c038:	e7fd      	b.n	800c036 <vPortValidateInterruptPriority+0x6a>
	}
 800c03a:	bf00      	nop
 800c03c:	3714      	adds	r7, #20
 800c03e:	46bd      	mov	sp, r7
 800c040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c044:	4770      	bx	lr
 800c046:	bf00      	nop
 800c048:	e000e3f0 	.word	0xe000e3f0
 800c04c:	2000659c 	.word	0x2000659c
 800c050:	e000ed0c 	.word	0xe000ed0c
 800c054:	200065a0 	.word	0x200065a0

0800c058 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b08a      	sub	sp, #40	@ 0x28
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c060:	2300      	movs	r3, #0
 800c062:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c064:	f7fe fc38 	bl	800a8d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c068:	4b5d      	ldr	r3, [pc, #372]	@ (800c1e0 <pvPortMalloc+0x188>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d101      	bne.n	800c074 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c070:	f000 f920 	bl	800c2b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c074:	4b5b      	ldr	r3, [pc, #364]	@ (800c1e4 <pvPortMalloc+0x18c>)
 800c076:	681a      	ldr	r2, [r3, #0]
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	4013      	ands	r3, r2
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	f040 8094 	bne.w	800c1aa <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d020      	beq.n	800c0ca <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800c088:	2208      	movs	r2, #8
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	4413      	add	r3, r2
 800c08e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f003 0307 	and.w	r3, r3, #7
 800c096:	2b00      	cmp	r3, #0
 800c098:	d017      	beq.n	800c0ca <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f023 0307 	bic.w	r3, r3, #7
 800c0a0:	3308      	adds	r3, #8
 800c0a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f003 0307 	and.w	r3, r3, #7
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d00d      	beq.n	800c0ca <pvPortMalloc+0x72>
	__asm volatile
 800c0ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0b2:	b672      	cpsid	i
 800c0b4:	f383 8811 	msr	BASEPRI, r3
 800c0b8:	f3bf 8f6f 	isb	sy
 800c0bc:	f3bf 8f4f 	dsb	sy
 800c0c0:	b662      	cpsie	i
 800c0c2:	617b      	str	r3, [r7, #20]
}
 800c0c4:	bf00      	nop
 800c0c6:	bf00      	nop
 800c0c8:	e7fd      	b.n	800c0c6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d06c      	beq.n	800c1aa <pvPortMalloc+0x152>
 800c0d0:	4b45      	ldr	r3, [pc, #276]	@ (800c1e8 <pvPortMalloc+0x190>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	687a      	ldr	r2, [r7, #4]
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d867      	bhi.n	800c1aa <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c0da:	4b44      	ldr	r3, [pc, #272]	@ (800c1ec <pvPortMalloc+0x194>)
 800c0dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c0de:	4b43      	ldr	r3, [pc, #268]	@ (800c1ec <pvPortMalloc+0x194>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c0e4:	e004      	b.n	800c0f0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800c0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c0f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	687a      	ldr	r2, [r7, #4]
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d903      	bls.n	800c102 <pvPortMalloc+0xaa>
 800c0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d1f1      	bne.n	800c0e6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c102:	4b37      	ldr	r3, [pc, #220]	@ (800c1e0 <pvPortMalloc+0x188>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c108:	429a      	cmp	r2, r3
 800c10a:	d04e      	beq.n	800c1aa <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c10c:	6a3b      	ldr	r3, [r7, #32]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	2208      	movs	r2, #8
 800c112:	4413      	add	r3, r2
 800c114:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c118:	681a      	ldr	r2, [r3, #0]
 800c11a:	6a3b      	ldr	r3, [r7, #32]
 800c11c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c120:	685a      	ldr	r2, [r3, #4]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	1ad2      	subs	r2, r2, r3
 800c126:	2308      	movs	r3, #8
 800c128:	005b      	lsls	r3, r3, #1
 800c12a:	429a      	cmp	r2, r3
 800c12c:	d922      	bls.n	800c174 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c12e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	4413      	add	r3, r2
 800c134:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c136:	69bb      	ldr	r3, [r7, #24]
 800c138:	f003 0307 	and.w	r3, r3, #7
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d00d      	beq.n	800c15c <pvPortMalloc+0x104>
	__asm volatile
 800c140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c144:	b672      	cpsid	i
 800c146:	f383 8811 	msr	BASEPRI, r3
 800c14a:	f3bf 8f6f 	isb	sy
 800c14e:	f3bf 8f4f 	dsb	sy
 800c152:	b662      	cpsie	i
 800c154:	613b      	str	r3, [r7, #16]
}
 800c156:	bf00      	nop
 800c158:	bf00      	nop
 800c15a:	e7fd      	b.n	800c158 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c15c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c15e:	685a      	ldr	r2, [r3, #4]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	1ad2      	subs	r2, r2, r3
 800c164:	69bb      	ldr	r3, [r7, #24]
 800c166:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c16a:	687a      	ldr	r2, [r7, #4]
 800c16c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c16e:	69b8      	ldr	r0, [r7, #24]
 800c170:	f000 f902 	bl	800c378 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c174:	4b1c      	ldr	r3, [pc, #112]	@ (800c1e8 <pvPortMalloc+0x190>)
 800c176:	681a      	ldr	r2, [r3, #0]
 800c178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c17a:	685b      	ldr	r3, [r3, #4]
 800c17c:	1ad3      	subs	r3, r2, r3
 800c17e:	4a1a      	ldr	r2, [pc, #104]	@ (800c1e8 <pvPortMalloc+0x190>)
 800c180:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c182:	4b19      	ldr	r3, [pc, #100]	@ (800c1e8 <pvPortMalloc+0x190>)
 800c184:	681a      	ldr	r2, [r3, #0]
 800c186:	4b1a      	ldr	r3, [pc, #104]	@ (800c1f0 <pvPortMalloc+0x198>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d203      	bcs.n	800c196 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c18e:	4b16      	ldr	r3, [pc, #88]	@ (800c1e8 <pvPortMalloc+0x190>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	4a17      	ldr	r2, [pc, #92]	@ (800c1f0 <pvPortMalloc+0x198>)
 800c194:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c198:	685a      	ldr	r2, [r3, #4]
 800c19a:	4b12      	ldr	r3, [pc, #72]	@ (800c1e4 <pvPortMalloc+0x18c>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	431a      	orrs	r2, r3
 800c1a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1a2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c1a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c1aa:	f7fe fba3 	bl	800a8f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1ae:	69fb      	ldr	r3, [r7, #28]
 800c1b0:	f003 0307 	and.w	r3, r3, #7
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d00d      	beq.n	800c1d4 <pvPortMalloc+0x17c>
	__asm volatile
 800c1b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1bc:	b672      	cpsid	i
 800c1be:	f383 8811 	msr	BASEPRI, r3
 800c1c2:	f3bf 8f6f 	isb	sy
 800c1c6:	f3bf 8f4f 	dsb	sy
 800c1ca:	b662      	cpsie	i
 800c1cc:	60fb      	str	r3, [r7, #12]
}
 800c1ce:	bf00      	nop
 800c1d0:	bf00      	nop
 800c1d2:	e7fd      	b.n	800c1d0 <pvPortMalloc+0x178>
	return pvReturn;
 800c1d4:	69fb      	ldr	r3, [r7, #28]
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	3728      	adds	r7, #40	@ 0x28
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}
 800c1de:	bf00      	nop
 800c1e0:	2000a1ac 	.word	0x2000a1ac
 800c1e4:	2000a1b8 	.word	0x2000a1b8
 800c1e8:	2000a1b0 	.word	0x2000a1b0
 800c1ec:	2000a1a4 	.word	0x2000a1a4
 800c1f0:	2000a1b4 	.word	0x2000a1b4

0800c1f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b086      	sub	sp, #24
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d04e      	beq.n	800c2a4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c206:	2308      	movs	r3, #8
 800c208:	425b      	negs	r3, r3
 800c20a:	697a      	ldr	r2, [r7, #20]
 800c20c:	4413      	add	r3, r2
 800c20e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	685a      	ldr	r2, [r3, #4]
 800c218:	4b24      	ldr	r3, [pc, #144]	@ (800c2ac <vPortFree+0xb8>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	4013      	ands	r3, r2
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d10d      	bne.n	800c23e <vPortFree+0x4a>
	__asm volatile
 800c222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c226:	b672      	cpsid	i
 800c228:	f383 8811 	msr	BASEPRI, r3
 800c22c:	f3bf 8f6f 	isb	sy
 800c230:	f3bf 8f4f 	dsb	sy
 800c234:	b662      	cpsie	i
 800c236:	60fb      	str	r3, [r7, #12]
}
 800c238:	bf00      	nop
 800c23a:	bf00      	nop
 800c23c:	e7fd      	b.n	800c23a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d00d      	beq.n	800c262 <vPortFree+0x6e>
	__asm volatile
 800c246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c24a:	b672      	cpsid	i
 800c24c:	f383 8811 	msr	BASEPRI, r3
 800c250:	f3bf 8f6f 	isb	sy
 800c254:	f3bf 8f4f 	dsb	sy
 800c258:	b662      	cpsie	i
 800c25a:	60bb      	str	r3, [r7, #8]
}
 800c25c:	bf00      	nop
 800c25e:	bf00      	nop
 800c260:	e7fd      	b.n	800c25e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	685a      	ldr	r2, [r3, #4]
 800c266:	4b11      	ldr	r3, [pc, #68]	@ (800c2ac <vPortFree+0xb8>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4013      	ands	r3, r2
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d019      	beq.n	800c2a4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d115      	bne.n	800c2a4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	685a      	ldr	r2, [r3, #4]
 800c27c:	4b0b      	ldr	r3, [pc, #44]	@ (800c2ac <vPortFree+0xb8>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	43db      	mvns	r3, r3
 800c282:	401a      	ands	r2, r3
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c288:	f7fe fb26 	bl	800a8d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	685a      	ldr	r2, [r3, #4]
 800c290:	4b07      	ldr	r3, [pc, #28]	@ (800c2b0 <vPortFree+0xbc>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	4413      	add	r3, r2
 800c296:	4a06      	ldr	r2, [pc, #24]	@ (800c2b0 <vPortFree+0xbc>)
 800c298:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c29a:	6938      	ldr	r0, [r7, #16]
 800c29c:	f000 f86c 	bl	800c378 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c2a0:	f7fe fb28 	bl	800a8f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c2a4:	bf00      	nop
 800c2a6:	3718      	adds	r7, #24
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}
 800c2ac:	2000a1b8 	.word	0x2000a1b8
 800c2b0:	2000a1b0 	.word	0x2000a1b0

0800c2b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b085      	sub	sp, #20
 800c2b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c2ba:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c2be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c2c0:	4b27      	ldr	r3, [pc, #156]	@ (800c360 <prvHeapInit+0xac>)
 800c2c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f003 0307 	and.w	r3, r3, #7
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d00c      	beq.n	800c2e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	3307      	adds	r3, #7
 800c2d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	f023 0307 	bic.w	r3, r3, #7
 800c2da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c2dc:	68ba      	ldr	r2, [r7, #8]
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	1ad3      	subs	r3, r2, r3
 800c2e2:	4a1f      	ldr	r2, [pc, #124]	@ (800c360 <prvHeapInit+0xac>)
 800c2e4:	4413      	add	r3, r2
 800c2e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c2ec:	4a1d      	ldr	r2, [pc, #116]	@ (800c364 <prvHeapInit+0xb0>)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c2f2:	4b1c      	ldr	r3, [pc, #112]	@ (800c364 <prvHeapInit+0xb0>)
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	68ba      	ldr	r2, [r7, #8]
 800c2fc:	4413      	add	r3, r2
 800c2fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c300:	2208      	movs	r2, #8
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	1a9b      	subs	r3, r3, r2
 800c306:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	f023 0307 	bic.w	r3, r3, #7
 800c30e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	4a15      	ldr	r2, [pc, #84]	@ (800c368 <prvHeapInit+0xb4>)
 800c314:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c316:	4b14      	ldr	r3, [pc, #80]	@ (800c368 <prvHeapInit+0xb4>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	2200      	movs	r2, #0
 800c31c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c31e:	4b12      	ldr	r3, [pc, #72]	@ (800c368 <prvHeapInit+0xb4>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	2200      	movs	r2, #0
 800c324:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	68fa      	ldr	r2, [r7, #12]
 800c32e:	1ad2      	subs	r2, r2, r3
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c334:	4b0c      	ldr	r3, [pc, #48]	@ (800c368 <prvHeapInit+0xb4>)
 800c336:	681a      	ldr	r2, [r3, #0]
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	685b      	ldr	r3, [r3, #4]
 800c340:	4a0a      	ldr	r2, [pc, #40]	@ (800c36c <prvHeapInit+0xb8>)
 800c342:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	685b      	ldr	r3, [r3, #4]
 800c348:	4a09      	ldr	r2, [pc, #36]	@ (800c370 <prvHeapInit+0xbc>)
 800c34a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c34c:	4b09      	ldr	r3, [pc, #36]	@ (800c374 <prvHeapInit+0xc0>)
 800c34e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c352:	601a      	str	r2, [r3, #0]
}
 800c354:	bf00      	nop
 800c356:	3714      	adds	r7, #20
 800c358:	46bd      	mov	sp, r7
 800c35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35e:	4770      	bx	lr
 800c360:	200065a4 	.word	0x200065a4
 800c364:	2000a1a4 	.word	0x2000a1a4
 800c368:	2000a1ac 	.word	0x2000a1ac
 800c36c:	2000a1b4 	.word	0x2000a1b4
 800c370:	2000a1b0 	.word	0x2000a1b0
 800c374:	2000a1b8 	.word	0x2000a1b8

0800c378 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c378:	b480      	push	{r7}
 800c37a:	b085      	sub	sp, #20
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c380:	4b28      	ldr	r3, [pc, #160]	@ (800c424 <prvInsertBlockIntoFreeList+0xac>)
 800c382:	60fb      	str	r3, [r7, #12]
 800c384:	e002      	b.n	800c38c <prvInsertBlockIntoFreeList+0x14>
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	60fb      	str	r3, [r7, #12]
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	687a      	ldr	r2, [r7, #4]
 800c392:	429a      	cmp	r2, r3
 800c394:	d8f7      	bhi.n	800c386 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	68ba      	ldr	r2, [r7, #8]
 800c3a0:	4413      	add	r3, r2
 800c3a2:	687a      	ldr	r2, [r7, #4]
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d108      	bne.n	800c3ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	685a      	ldr	r2, [r3, #4]
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	685b      	ldr	r3, [r3, #4]
 800c3b0:	441a      	add	r2, r3
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	685b      	ldr	r3, [r3, #4]
 800c3c2:	68ba      	ldr	r2, [r7, #8]
 800c3c4:	441a      	add	r2, r3
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d118      	bne.n	800c400 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681a      	ldr	r2, [r3, #0]
 800c3d2:	4b15      	ldr	r3, [pc, #84]	@ (800c428 <prvInsertBlockIntoFreeList+0xb0>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	429a      	cmp	r2, r3
 800c3d8:	d00d      	beq.n	800c3f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	685a      	ldr	r2, [r3, #4]
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	685b      	ldr	r3, [r3, #4]
 800c3e4:	441a      	add	r2, r3
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	681a      	ldr	r2, [r3, #0]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	601a      	str	r2, [r3, #0]
 800c3f4:	e008      	b.n	800c408 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c3f6:	4b0c      	ldr	r3, [pc, #48]	@ (800c428 <prvInsertBlockIntoFreeList+0xb0>)
 800c3f8:	681a      	ldr	r2, [r3, #0]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	601a      	str	r2, [r3, #0]
 800c3fe:	e003      	b.n	800c408 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	681a      	ldr	r2, [r3, #0]
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c408:	68fa      	ldr	r2, [r7, #12]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d002      	beq.n	800c416 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c416:	bf00      	nop
 800c418:	3714      	adds	r7, #20
 800c41a:	46bd      	mov	sp, r7
 800c41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c420:	4770      	bx	lr
 800c422:	bf00      	nop
 800c424:	2000a1a4 	.word	0x2000a1a4
 800c428:	2000a1ac 	.word	0x2000a1ac

0800c42c <rcl_get_zero_initialized_publisher>:
 800c42c:	4b01      	ldr	r3, [pc, #4]	@ (800c434 <rcl_get_zero_initialized_publisher+0x8>)
 800c42e:	6818      	ldr	r0, [r3, #0]
 800c430:	4770      	bx	lr
 800c432:	bf00      	nop
 800c434:	08017b6c 	.word	0x08017b6c

0800c438 <rcl_publisher_init>:
 800c438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c43c:	b088      	sub	sp, #32
 800c43e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800c440:	2e00      	cmp	r6, #0
 800c442:	d06b      	beq.n	800c51c <rcl_publisher_init+0xe4>
 800c444:	f106 0a50 	add.w	sl, r6, #80	@ 0x50
 800c448:	4605      	mov	r5, r0
 800c44a:	460f      	mov	r7, r1
 800c44c:	4690      	mov	r8, r2
 800c44e:	4650      	mov	r0, sl
 800c450:	4699      	mov	r9, r3
 800c452:	f000 f9e5 	bl	800c820 <rcutils_allocator_is_valid>
 800c456:	f080 0401 	eor.w	r4, r0, #1
 800c45a:	b2e4      	uxtb	r4, r4
 800c45c:	2c00      	cmp	r4, #0
 800c45e:	d15d      	bne.n	800c51c <rcl_publisher_init+0xe4>
 800c460:	2d00      	cmp	r5, #0
 800c462:	d05b      	beq.n	800c51c <rcl_publisher_init+0xe4>
 800c464:	682b      	ldr	r3, [r5, #0]
 800c466:	b123      	cbz	r3, 800c472 <rcl_publisher_init+0x3a>
 800c468:	2464      	movs	r4, #100	@ 0x64
 800c46a:	4620      	mov	r0, r4
 800c46c:	b008      	add	sp, #32
 800c46e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c472:	4638      	mov	r0, r7
 800c474:	f006 f9d0 	bl	8012818 <rcl_node_is_valid>
 800c478:	2800      	cmp	r0, #0
 800c47a:	d054      	beq.n	800c526 <rcl_publisher_init+0xee>
 800c47c:	f1b8 0f00 	cmp.w	r8, #0
 800c480:	d04c      	beq.n	800c51c <rcl_publisher_init+0xe4>
 800c482:	fab9 f389 	clz	r3, r9
 800c486:	095b      	lsrs	r3, r3, #5
 800c488:	f1b9 0f00 	cmp.w	r9, #0
 800c48c:	d046      	beq.n	800c51c <rcl_publisher_init+0xe4>
 800c48e:	aa07      	add	r2, sp, #28
 800c490:	9307      	str	r3, [sp, #28]
 800c492:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800c496:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800c49a:	9205      	str	r2, [sp, #20]
 800c49c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c4a0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c4a4:	4649      	mov	r1, r9
 800c4a6:	4638      	mov	r0, r7
 800c4a8:	e89a 000c 	ldmia.w	sl, {r2, r3}
 800c4ac:	f006 fa0c 	bl	80128c8 <rcl_node_resolve_name>
 800c4b0:	2800      	cmp	r0, #0
 800c4b2:	d14f      	bne.n	800c554 <rcl_publisher_init+0x11c>
 800c4b4:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 800c4b6:	20c8      	movs	r0, #200	@ 0xc8
 800c4b8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800c4ba:	4798      	blx	r3
 800c4bc:	6028      	str	r0, [r5, #0]
 800c4be:	2800      	cmp	r0, #0
 800c4c0:	d050      	beq.n	800c564 <rcl_publisher_init+0x12c>
 800c4c2:	4638      	mov	r0, r7
 800c4c4:	f006 f9ca 	bl	801285c <rcl_node_get_rmw_handle>
 800c4c8:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800c4cc:	4641      	mov	r1, r8
 800c4ce:	9a07      	ldr	r2, [sp, #28]
 800c4d0:	9300      	str	r3, [sp, #0]
 800c4d2:	4633      	mov	r3, r6
 800c4d4:	682c      	ldr	r4, [r5, #0]
 800c4d6:	f000 fa61 	bl	800c99c <rmw_create_publisher>
 800c4da:	682b      	ldr	r3, [r5, #0]
 800c4dc:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 800c4e0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c4e4:	b370      	cbz	r0, 800c544 <rcl_publisher_init+0x10c>
 800c4e6:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800c4ea:	f000 fb3b 	bl	800cb64 <rmw_publisher_get_actual_qos>
 800c4ee:	682b      	ldr	r3, [r5, #0]
 800c4f0:	4604      	mov	r4, r0
 800c4f2:	b9d0      	cbnz	r0, 800c52a <rcl_publisher_init+0xf2>
 800c4f4:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 800c4f8:	4631      	mov	r1, r6
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800c500:	2270      	movs	r2, #112	@ 0x70
 800c502:	f00a fc1a 	bl	8016d3a <memcpy>
 800c506:	683a      	ldr	r2, [r7, #0]
 800c508:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800c50c:	9807      	ldr	r0, [sp, #28]
 800c50e:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800c510:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800c512:	4798      	blx	r3
 800c514:	4620      	mov	r0, r4
 800c516:	b008      	add	sp, #32
 800c518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c51c:	240b      	movs	r4, #11
 800c51e:	4620      	mov	r0, r4
 800c520:	b008      	add	sp, #32
 800c522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c526:	24c8      	movs	r4, #200	@ 0xc8
 800c528:	e79f      	b.n	800c46a <rcl_publisher_init+0x32>
 800c52a:	b1cb      	cbz	r3, 800c560 <rcl_publisher_init+0x128>
 800c52c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c530:	b142      	cbz	r2, 800c544 <rcl_publisher_init+0x10c>
 800c532:	4638      	mov	r0, r7
 800c534:	f006 f992 	bl	801285c <rcl_node_get_rmw_handle>
 800c538:	682b      	ldr	r3, [r5, #0]
 800c53a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800c53e:	f000 fb25 	bl	800cb8c <rmw_destroy_publisher>
 800c542:	682b      	ldr	r3, [r5, #0]
 800c544:	4618      	mov	r0, r3
 800c546:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 800c548:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800c54a:	2401      	movs	r4, #1
 800c54c:	4790      	blx	r2
 800c54e:	2300      	movs	r3, #0
 800c550:	602b      	str	r3, [r5, #0]
 800c552:	e7db      	b.n	800c50c <rcl_publisher_init+0xd4>
 800c554:	2867      	cmp	r0, #103	@ 0x67
 800c556:	d007      	beq.n	800c568 <rcl_publisher_init+0x130>
 800c558:	2869      	cmp	r0, #105	@ 0x69
 800c55a:	d005      	beq.n	800c568 <rcl_publisher_init+0x130>
 800c55c:	280a      	cmp	r0, #10
 800c55e:	d001      	beq.n	800c564 <rcl_publisher_init+0x12c>
 800c560:	2401      	movs	r4, #1
 800c562:	e7d3      	b.n	800c50c <rcl_publisher_init+0xd4>
 800c564:	240a      	movs	r4, #10
 800c566:	e7d1      	b.n	800c50c <rcl_publisher_init+0xd4>
 800c568:	2467      	movs	r4, #103	@ 0x67
 800c56a:	e7cf      	b.n	800c50c <rcl_publisher_init+0xd4>

0800c56c <rcl_publisher_get_default_options>:
 800c56c:	b570      	push	{r4, r5, r6, lr}
 800c56e:	4d14      	ldr	r5, [pc, #80]	@ (800c5c0 <rcl_publisher_get_default_options+0x54>)
 800c570:	b088      	sub	sp, #32
 800c572:	4604      	mov	r4, r0
 800c574:	2250      	movs	r2, #80	@ 0x50
 800c576:	4913      	ldr	r1, [pc, #76]	@ (800c5c4 <rcl_publisher_get_default_options+0x58>)
 800c578:	4628      	mov	r0, r5
 800c57a:	f00a fbde 	bl	8016d3a <memcpy>
 800c57e:	a802      	add	r0, sp, #8
 800c580:	f000 f940 	bl	800c804 <rcutils_get_default_allocator>
 800c584:	f10d 0c08 	add.w	ip, sp, #8
 800c588:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800c58c:	466e      	mov	r6, sp
 800c58e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c592:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c596:	f8dc 3000 	ldr.w	r3, [ip]
 800c59a:	4630      	mov	r0, r6
 800c59c:	f8ce 3000 	str.w	r3, [lr]
 800c5a0:	f000 f97e 	bl	800c8a0 <rmw_get_default_publisher_options>
 800c5a4:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800c5a8:	2270      	movs	r2, #112	@ 0x70
 800c5aa:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c5ae:	e883 0003 	stmia.w	r3, {r0, r1}
 800c5b2:	4629      	mov	r1, r5
 800c5b4:	4620      	mov	r0, r4
 800c5b6:	f00a fbc0 	bl	8016d3a <memcpy>
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	b008      	add	sp, #32
 800c5be:	bd70      	pop	{r4, r5, r6, pc}
 800c5c0:	2000a1c0 	.word	0x2000a1c0
 800c5c4:	08017b70 	.word	0x08017b70

0800c5c8 <rcl_publish>:
 800c5c8:	b1f8      	cbz	r0, 800c60a <rcl_publish+0x42>
 800c5ca:	6803      	ldr	r3, [r0, #0]
 800c5cc:	b570      	push	{r4, r5, r6, lr}
 800c5ce:	4604      	mov	r4, r0
 800c5d0:	b1b3      	cbz	r3, 800c600 <rcl_publish+0x38>
 800c5d2:	4616      	mov	r6, r2
 800c5d4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c5d8:	b192      	cbz	r2, 800c600 <rcl_publish+0x38>
 800c5da:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c5de:	460d      	mov	r5, r1
 800c5e0:	f005 fd50 	bl	8012084 <rcl_context_is_valid>
 800c5e4:	b160      	cbz	r0, 800c600 <rcl_publish+0x38>
 800c5e6:	6823      	ldr	r3, [r4, #0]
 800c5e8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c5ec:	b140      	cbz	r0, 800c600 <rcl_publish+0x38>
 800c5ee:	b155      	cbz	r5, 800c606 <rcl_publish+0x3e>
 800c5f0:	4632      	mov	r2, r6
 800c5f2:	4629      	mov	r1, r5
 800c5f4:	f000 f972 	bl	800c8dc <rmw_publish>
 800c5f8:	3800      	subs	r0, #0
 800c5fa:	bf18      	it	ne
 800c5fc:	2001      	movne	r0, #1
 800c5fe:	bd70      	pop	{r4, r5, r6, pc}
 800c600:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c604:	bd70      	pop	{r4, r5, r6, pc}
 800c606:	200b      	movs	r0, #11
 800c608:	bd70      	pop	{r4, r5, r6, pc}
 800c60a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c60e:	4770      	bx	lr

0800c610 <rclc_support_init>:
 800c610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c614:	b086      	sub	sp, #24
 800c616:	b3bb      	cbz	r3, 800c688 <rclc_support_init+0x78>
 800c618:	4606      	mov	r6, r0
 800c61a:	b3a8      	cbz	r0, 800c688 <rclc_support_init+0x78>
 800c61c:	461c      	mov	r4, r3
 800c61e:	460f      	mov	r7, r1
 800c620:	4690      	mov	r8, r2
 800c622:	f005 fe85 	bl	8012330 <rcl_get_zero_initialized_init_options>
 800c626:	f104 050c 	add.w	r5, r4, #12
 800c62a:	9005      	str	r0, [sp, #20]
 800c62c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c630:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c634:	a805      	add	r0, sp, #20
 800c636:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800c63a:	f005 fe7b 	bl	8012334 <rcl_init_options_init>
 800c63e:	4605      	mov	r5, r0
 800c640:	b9e0      	cbnz	r0, 800c67c <rclc_support_init+0x6c>
 800c642:	ad02      	add	r5, sp, #8
 800c644:	4628      	mov	r0, r5
 800c646:	f005 fd13 	bl	8012070 <rcl_get_zero_initialized_context>
 800c64a:	4633      	mov	r3, r6
 800c64c:	aa05      	add	r2, sp, #20
 800c64e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c652:	e886 0003 	stmia.w	r6, {r0, r1}
 800c656:	4641      	mov	r1, r8
 800c658:	4638      	mov	r0, r7
 800c65a:	f005 fd79 	bl	8012150 <rcl_init>
 800c65e:	4605      	mov	r5, r0
 800c660:	b9b8      	cbnz	r0, 800c692 <rclc_support_init+0x82>
 800c662:	4622      	mov	r2, r4
 800c664:	f106 010c 	add.w	r1, r6, #12
 800c668:	2003      	movs	r0, #3
 800c66a:	60b4      	str	r4, [r6, #8]
 800c66c:	f006 fa1c 	bl	8012aa8 <rcl_clock_init>
 800c670:	4605      	mov	r5, r0
 800c672:	b970      	cbnz	r0, 800c692 <rclc_support_init+0x82>
 800c674:	a805      	add	r0, sp, #20
 800c676:	f005 fec3 	bl	8012400 <rcl_init_options_fini>
 800c67a:	b108      	cbz	r0, 800c680 <rclc_support_init+0x70>
 800c67c:	f000 f8f4 	bl	800c868 <rcutils_reset_error>
 800c680:	4628      	mov	r0, r5
 800c682:	b006      	add	sp, #24
 800c684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c688:	250b      	movs	r5, #11
 800c68a:	4628      	mov	r0, r5
 800c68c:	b006      	add	sp, #24
 800c68e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c692:	f000 f8e9 	bl	800c868 <rcutils_reset_error>
 800c696:	a805      	add	r0, sp, #20
 800c698:	f005 feb2 	bl	8012400 <rcl_init_options_fini>
 800c69c:	2800      	cmp	r0, #0
 800c69e:	d0ef      	beq.n	800c680 <rclc_support_init+0x70>
 800c6a0:	e7ec      	b.n	800c67c <rclc_support_init+0x6c>
 800c6a2:	bf00      	nop

0800c6a4 <rclc_node_init_default>:
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	bf18      	it	ne
 800c6a8:	2a00      	cmpne	r2, #0
 800c6aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c6ae:	4616      	mov	r6, r2
 800c6b0:	bf0c      	ite	eq
 800c6b2:	2201      	moveq	r2, #1
 800c6b4:	2200      	movne	r2, #0
 800c6b6:	b0a1      	sub	sp, #132	@ 0x84
 800c6b8:	2900      	cmp	r1, #0
 800c6ba:	bf08      	it	eq
 800c6bc:	f042 0201 	orreq.w	r2, r2, #1
 800c6c0:	bb22      	cbnz	r2, 800c70c <rclc_node_init_default+0x68>
 800c6c2:	4604      	mov	r4, r0
 800c6c4:	b310      	cbz	r0, 800c70c <rclc_node_init_default+0x68>
 800c6c6:	f10d 0810 	add.w	r8, sp, #16
 800c6ca:	461f      	mov	r7, r3
 800c6cc:	460d      	mov	r5, r1
 800c6ce:	f10d 0918 	add.w	r9, sp, #24
 800c6d2:	4640      	mov	r0, r8
 800c6d4:	f005 ff4e 	bl	8012574 <rcl_get_zero_initialized_node>
 800c6d8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800c6dc:	e884 0003 	stmia.w	r4, {r0, r1}
 800c6e0:	4648      	mov	r0, r9
 800c6e2:	f006 f8c1 	bl	8012868 <rcl_node_get_default_options>
 800c6e6:	4640      	mov	r0, r8
 800c6e8:	f005 ff44 	bl	8012574 <rcl_get_zero_initialized_node>
 800c6ec:	f8cd 9000 	str.w	r9, [sp]
 800c6f0:	463b      	mov	r3, r7
 800c6f2:	4632      	mov	r2, r6
 800c6f4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800c6f8:	e884 0003 	stmia.w	r4, {r0, r1}
 800c6fc:	4629      	mov	r1, r5
 800c6fe:	4620      	mov	r0, r4
 800c700:	f005 ff42 	bl	8012588 <rcl_node_init>
 800c704:	b930      	cbnz	r0, 800c714 <rclc_node_init_default+0x70>
 800c706:	b021      	add	sp, #132	@ 0x84
 800c708:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c70c:	200b      	movs	r0, #11
 800c70e:	b021      	add	sp, #132	@ 0x84
 800c710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c714:	9003      	str	r0, [sp, #12]
 800c716:	f000 f8a7 	bl	800c868 <rcutils_reset_error>
 800c71a:	f000 f8a5 	bl	800c868 <rcutils_reset_error>
 800c71e:	9803      	ldr	r0, [sp, #12]
 800c720:	b021      	add	sp, #132	@ 0x84
 800c722:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c726:	bf00      	nop

0800c728 <rclc_publisher_init_best_effort>:
 800c728:	2b00      	cmp	r3, #0
 800c72a:	bf18      	it	ne
 800c72c:	2a00      	cmpne	r2, #0
 800c72e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c732:	4616      	mov	r6, r2
 800c734:	bf0c      	ite	eq
 800c736:	2201      	moveq	r2, #1
 800c738:	2200      	movne	r2, #0
 800c73a:	b0a0      	sub	sp, #128	@ 0x80
 800c73c:	2900      	cmp	r1, #0
 800c73e:	bf08      	it	eq
 800c740:	f042 0201 	orreq.w	r2, r2, #1
 800c744:	bb1a      	cbnz	r2, 800c78e <rclc_publisher_init_best_effort+0x66>
 800c746:	4604      	mov	r4, r0
 800c748:	b308      	cbz	r0, 800c78e <rclc_publisher_init_best_effort+0x66>
 800c74a:	f10d 0810 	add.w	r8, sp, #16
 800c74e:	461f      	mov	r7, r3
 800c750:	460d      	mov	r5, r1
 800c752:	f7ff fe6b 	bl	800c42c <rcl_get_zero_initialized_publisher>
 800c756:	6020      	str	r0, [r4, #0]
 800c758:	4640      	mov	r0, r8
 800c75a:	f7ff ff07 	bl	800c56c <rcl_publisher_get_default_options>
 800c75e:	2250      	movs	r2, #80	@ 0x50
 800c760:	490d      	ldr	r1, [pc, #52]	@ (800c798 <rclc_publisher_init_best_effort+0x70>)
 800c762:	4640      	mov	r0, r8
 800c764:	f00a fae9 	bl	8016d3a <memcpy>
 800c768:	463b      	mov	r3, r7
 800c76a:	4632      	mov	r2, r6
 800c76c:	4629      	mov	r1, r5
 800c76e:	4620      	mov	r0, r4
 800c770:	f8cd 8000 	str.w	r8, [sp]
 800c774:	f7ff fe60 	bl	800c438 <rcl_publisher_init>
 800c778:	b910      	cbnz	r0, 800c780 <rclc_publisher_init_best_effort+0x58>
 800c77a:	b020      	add	sp, #128	@ 0x80
 800c77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c780:	9003      	str	r0, [sp, #12]
 800c782:	f000 f871 	bl	800c868 <rcutils_reset_error>
 800c786:	9803      	ldr	r0, [sp, #12]
 800c788:	b020      	add	sp, #128	@ 0x80
 800c78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c78e:	200b      	movs	r0, #11
 800c790:	b020      	add	sp, #128	@ 0x80
 800c792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c796:	bf00      	nop
 800c798:	08017bc0 	.word	0x08017bc0

0800c79c <__default_zero_allocate>:
 800c79c:	f009 bd24 	b.w	80161e8 <calloc>

0800c7a0 <__default_reallocate>:
 800c7a0:	f009 bec2 	b.w	8016528 <realloc>

0800c7a4 <__default_deallocate>:
 800c7a4:	f009 bd9e 	b.w	80162e4 <free>

0800c7a8 <__default_allocate>:
 800c7a8:	f009 bd94 	b.w	80162d4 <malloc>

0800c7ac <rcutils_get_zero_initialized_allocator>:
 800c7ac:	b510      	push	{r4, lr}
 800c7ae:	4c05      	ldr	r4, [pc, #20]	@ (800c7c4 <rcutils_get_zero_initialized_allocator+0x18>)
 800c7b0:	4686      	mov	lr, r0
 800c7b2:	4684      	mov	ip, r0
 800c7b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c7b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c7ba:	6823      	ldr	r3, [r4, #0]
 800c7bc:	4670      	mov	r0, lr
 800c7be:	f8cc 3000 	str.w	r3, [ip]
 800c7c2:	bd10      	pop	{r4, pc}
 800c7c4:	08017c10 	.word	0x08017c10

0800c7c8 <rcutils_set_default_allocator>:
 800c7c8:	b1a8      	cbz	r0, 800c7f6 <rcutils_set_default_allocator+0x2e>
 800c7ca:	6802      	ldr	r2, [r0, #0]
 800c7cc:	b1a2      	cbz	r2, 800c7f8 <rcutils_set_default_allocator+0x30>
 800c7ce:	6841      	ldr	r1, [r0, #4]
 800c7d0:	b1a1      	cbz	r1, 800c7fc <rcutils_set_default_allocator+0x34>
 800c7d2:	b410      	push	{r4}
 800c7d4:	68c4      	ldr	r4, [r0, #12]
 800c7d6:	b164      	cbz	r4, 800c7f2 <rcutils_set_default_allocator+0x2a>
 800c7d8:	6880      	ldr	r0, [r0, #8]
 800c7da:	b138      	cbz	r0, 800c7ec <rcutils_set_default_allocator+0x24>
 800c7dc:	4b08      	ldr	r3, [pc, #32]	@ (800c800 <rcutils_set_default_allocator+0x38>)
 800c7de:	601a      	str	r2, [r3, #0]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800c7e6:	2001      	movs	r0, #1
 800c7e8:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800c7ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7f0:	4770      	bx	lr
 800c7f2:	4620      	mov	r0, r4
 800c7f4:	e7fa      	b.n	800c7ec <rcutils_set_default_allocator+0x24>
 800c7f6:	4770      	bx	lr
 800c7f8:	4610      	mov	r0, r2
 800c7fa:	4770      	bx	lr
 800c7fc:	4608      	mov	r0, r1
 800c7fe:	4770      	bx	lr
 800c800:	20000030 	.word	0x20000030

0800c804 <rcutils_get_default_allocator>:
 800c804:	b510      	push	{r4, lr}
 800c806:	4c05      	ldr	r4, [pc, #20]	@ (800c81c <rcutils_get_default_allocator+0x18>)
 800c808:	4686      	mov	lr, r0
 800c80a:	4684      	mov	ip, r0
 800c80c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c80e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c812:	6823      	ldr	r3, [r4, #0]
 800c814:	4670      	mov	r0, lr
 800c816:	f8cc 3000 	str.w	r3, [ip]
 800c81a:	bd10      	pop	{r4, pc}
 800c81c:	20000030 	.word	0x20000030

0800c820 <rcutils_allocator_is_valid>:
 800c820:	b158      	cbz	r0, 800c83a <rcutils_allocator_is_valid+0x1a>
 800c822:	6803      	ldr	r3, [r0, #0]
 800c824:	b143      	cbz	r3, 800c838 <rcutils_allocator_is_valid+0x18>
 800c826:	6843      	ldr	r3, [r0, #4]
 800c828:	b133      	cbz	r3, 800c838 <rcutils_allocator_is_valid+0x18>
 800c82a:	68c3      	ldr	r3, [r0, #12]
 800c82c:	b123      	cbz	r3, 800c838 <rcutils_allocator_is_valid+0x18>
 800c82e:	6880      	ldr	r0, [r0, #8]
 800c830:	3800      	subs	r0, #0
 800c832:	bf18      	it	ne
 800c834:	2001      	movne	r0, #1
 800c836:	4770      	bx	lr
 800c838:	4618      	mov	r0, r3
 800c83a:	4770      	bx	lr

0800c83c <rcutils_get_error_string>:
 800c83c:	4b06      	ldr	r3, [pc, #24]	@ (800c858 <rcutils_get_error_string+0x1c>)
 800c83e:	781b      	ldrb	r3, [r3, #0]
 800c840:	b13b      	cbz	r3, 800c852 <rcutils_get_error_string+0x16>
 800c842:	4b06      	ldr	r3, [pc, #24]	@ (800c85c <rcutils_get_error_string+0x20>)
 800c844:	781a      	ldrb	r2, [r3, #0]
 800c846:	b90a      	cbnz	r2, 800c84c <rcutils_get_error_string+0x10>
 800c848:	2201      	movs	r2, #1
 800c84a:	701a      	strb	r2, [r3, #0]
 800c84c:	4b04      	ldr	r3, [pc, #16]	@ (800c860 <rcutils_get_error_string+0x24>)
 800c84e:	7818      	ldrb	r0, [r3, #0]
 800c850:	4770      	bx	lr
 800c852:	4b04      	ldr	r3, [pc, #16]	@ (800c864 <rcutils_get_error_string+0x28>)
 800c854:	7818      	ldrb	r0, [r3, #0]
 800c856:	4770      	bx	lr
 800c858:	2000a230 	.word	0x2000a230
 800c85c:	2000a249 	.word	0x2000a249
 800c860:	2000a248 	.word	0x2000a248
 800c864:	08017e40 	.word	0x08017e40

0800c868 <rcutils_reset_error>:
 800c868:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800c888 <rcutils_reset_error+0x20>
 800c86c:	2300      	movs	r3, #0
 800c86e:	4a08      	ldr	r2, [pc, #32]	@ (800c890 <rcutils_reset_error+0x28>)
 800c870:	4808      	ldr	r0, [pc, #32]	@ (800c894 <rcutils_reset_error+0x2c>)
 800c872:	8013      	strh	r3, [r2, #0]
 800c874:	4908      	ldr	r1, [pc, #32]	@ (800c898 <rcutils_reset_error+0x30>)
 800c876:	7003      	strb	r3, [r0, #0]
 800c878:	700b      	strb	r3, [r1, #0]
 800c87a:	ed82 7b02 	vstr	d7, [r2, #8]
 800c87e:	4a07      	ldr	r2, [pc, #28]	@ (800c89c <rcutils_reset_error+0x34>)
 800c880:	7013      	strb	r3, [r2, #0]
 800c882:	4770      	bx	lr
 800c884:	f3af 8000 	nop.w
	...
 800c890:	2000a238 	.word	0x2000a238
 800c894:	2000a249 	.word	0x2000a249
 800c898:	2000a248 	.word	0x2000a248
 800c89c:	2000a230 	.word	0x2000a230

0800c8a0 <rmw_get_default_publisher_options>:
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	6002      	str	r2, [r0, #0]
 800c8a4:	7102      	strb	r2, [r0, #4]
 800c8a6:	4770      	bx	lr

0800c8a8 <rmw_uros_set_custom_transport>:
 800c8a8:	b470      	push	{r4, r5, r6}
 800c8aa:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800c8ae:	b162      	cbz	r2, 800c8ca <rmw_uros_set_custom_transport+0x22>
 800c8b0:	b15b      	cbz	r3, 800c8ca <rmw_uros_set_custom_transport+0x22>
 800c8b2:	b155      	cbz	r5, 800c8ca <rmw_uros_set_custom_transport+0x22>
 800c8b4:	b14e      	cbz	r6, 800c8ca <rmw_uros_set_custom_transport+0x22>
 800c8b6:	4c06      	ldr	r4, [pc, #24]	@ (800c8d0 <rmw_uros_set_custom_transport+0x28>)
 800c8b8:	7020      	strb	r0, [r4, #0]
 800c8ba:	2000      	movs	r0, #0
 800c8bc:	6166      	str	r6, [r4, #20]
 800c8be:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800c8c2:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c8c6:	bc70      	pop	{r4, r5, r6}
 800c8c8:	4770      	bx	lr
 800c8ca:	200b      	movs	r0, #11
 800c8cc:	bc70      	pop	{r4, r5, r6}
 800c8ce:	4770      	bx	lr
 800c8d0:	2000a24c 	.word	0x2000a24c

0800c8d4 <flush_session>:
 800c8d4:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800c8d6:	f003 bd43 	b.w	8010360 <uxr_run_session_until_confirm_delivery>
 800c8da:	bf00      	nop

0800c8dc <rmw_publish>:
 800c8dc:	2800      	cmp	r0, #0
 800c8de:	d053      	beq.n	800c988 <rmw_publish+0xac>
 800c8e0:	b570      	push	{r4, r5, r6, lr}
 800c8e2:	460d      	mov	r5, r1
 800c8e4:	b08e      	sub	sp, #56	@ 0x38
 800c8e6:	2900      	cmp	r1, #0
 800c8e8:	d04b      	beq.n	800c982 <rmw_publish+0xa6>
 800c8ea:	4604      	mov	r4, r0
 800c8ec:	6800      	ldr	r0, [r0, #0]
 800c8ee:	f000 fc73 	bl	800d1d8 <is_uxrce_rmw_identifier_valid>
 800c8f2:	2800      	cmp	r0, #0
 800c8f4:	d045      	beq.n	800c982 <rmw_publish+0xa6>
 800c8f6:	6866      	ldr	r6, [r4, #4]
 800c8f8:	2e00      	cmp	r6, #0
 800c8fa:	d042      	beq.n	800c982 <rmw_publish+0xa6>
 800c8fc:	69b4      	ldr	r4, [r6, #24]
 800c8fe:	4628      	mov	r0, r5
 800c900:	6923      	ldr	r3, [r4, #16]
 800c902:	4798      	blx	r3
 800c904:	69f3      	ldr	r3, [r6, #28]
 800c906:	9005      	str	r0, [sp, #20]
 800c908:	b113      	cbz	r3, 800c910 <rmw_publish+0x34>
 800c90a:	a805      	add	r0, sp, #20
 800c90c:	4798      	blx	r3
 800c90e:	9805      	ldr	r0, [sp, #20]
 800c910:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800c914:	691b      	ldr	r3, [r3, #16]
 800c916:	9000      	str	r0, [sp, #0]
 800c918:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800c91c:	6972      	ldr	r2, [r6, #20]
 800c91e:	ab06      	add	r3, sp, #24
 800c920:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800c922:	f004 fb1b 	bl	8010f5c <uxr_prepare_output_stream>
 800c926:	b1d8      	cbz	r0, 800c960 <rmw_publish+0x84>
 800c928:	68a3      	ldr	r3, [r4, #8]
 800c92a:	a906      	add	r1, sp, #24
 800c92c:	4628      	mov	r0, r5
 800c92e:	4798      	blx	r3
 800c930:	6a33      	ldr	r3, [r6, #32]
 800c932:	4604      	mov	r4, r0
 800c934:	b10b      	cbz	r3, 800c93a <rmw_publish+0x5e>
 800c936:	a806      	add	r0, sp, #24
 800c938:	4798      	blx	r3
 800c93a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800c93e:	2b01      	cmp	r3, #1
 800c940:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800c944:	d022      	beq.n	800c98c <rmw_publish+0xb0>
 800c946:	6918      	ldr	r0, [r3, #16]
 800c948:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800c94a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c94e:	f003 fd07 	bl	8010360 <uxr_run_session_until_confirm_delivery>
 800c952:	4020      	ands	r0, r4
 800c954:	b2c4      	uxtb	r4, r0
 800c956:	f084 0001 	eor.w	r0, r4, #1
 800c95a:	b2c0      	uxtb	r0, r0
 800c95c:	b00e      	add	sp, #56	@ 0x38
 800c95e:	bd70      	pop	{r4, r5, r6, pc}
 800c960:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800c964:	6918      	ldr	r0, [r3, #16]
 800c966:	9b05      	ldr	r3, [sp, #20]
 800c968:	9602      	str	r6, [sp, #8]
 800c96a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c96e:	9300      	str	r3, [sp, #0]
 800c970:	4b09      	ldr	r3, [pc, #36]	@ (800c998 <rmw_publish+0xbc>)
 800c972:	9301      	str	r3, [sp, #4]
 800c974:	ab06      	add	r3, sp, #24
 800c976:	6972      	ldr	r2, [r6, #20]
 800c978:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800c97a:	f004 fb1f 	bl	8010fbc <uxr_prepare_output_stream_fragmented>
 800c97e:	2800      	cmp	r0, #0
 800c980:	d1d2      	bne.n	800c928 <rmw_publish+0x4c>
 800c982:	2001      	movs	r0, #1
 800c984:	b00e      	add	sp, #56	@ 0x38
 800c986:	bd70      	pop	{r4, r5, r6, pc}
 800c988:	2001      	movs	r0, #1
 800c98a:	4770      	bx	lr
 800c98c:	6918      	ldr	r0, [r3, #16]
 800c98e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c992:	f003 f965 	bl	800fc60 <uxr_flash_output_streams>
 800c996:	e7de      	b.n	800c956 <rmw_publish+0x7a>
 800c998:	0800c8d5 	.word	0x0800c8d5

0800c99c <rmw_create_publisher>:
 800c99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9a0:	b087      	sub	sp, #28
 800c9a2:	2800      	cmp	r0, #0
 800c9a4:	f000 80d2 	beq.w	800cb4c <rmw_create_publisher+0x1b0>
 800c9a8:	460e      	mov	r6, r1
 800c9aa:	2900      	cmp	r1, #0
 800c9ac:	f000 80ce 	beq.w	800cb4c <rmw_create_publisher+0x1b0>
 800c9b0:	4604      	mov	r4, r0
 800c9b2:	6800      	ldr	r0, [r0, #0]
 800c9b4:	4615      	mov	r5, r2
 800c9b6:	461f      	mov	r7, r3
 800c9b8:	f000 fc0e 	bl	800d1d8 <is_uxrce_rmw_identifier_valid>
 800c9bc:	f080 0001 	eor.w	r0, r0, #1
 800c9c0:	b2c0      	uxtb	r0, r0
 800c9c2:	2800      	cmp	r0, #0
 800c9c4:	f040 80c2 	bne.w	800cb4c <rmw_create_publisher+0x1b0>
 800c9c8:	2d00      	cmp	r5, #0
 800c9ca:	f000 80bf 	beq.w	800cb4c <rmw_create_publisher+0x1b0>
 800c9ce:	782b      	ldrb	r3, [r5, #0]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	f000 80bb 	beq.w	800cb4c <rmw_create_publisher+0x1b0>
 800c9d6:	2f00      	cmp	r7, #0
 800c9d8:	f000 80b8 	beq.w	800cb4c <rmw_create_publisher+0x1b0>
 800c9dc:	485e      	ldr	r0, [pc, #376]	@ (800cb58 <rmw_create_publisher+0x1bc>)
 800c9de:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c9e2:	f006 fd9f 	bl	8013524 <get_memory>
 800c9e6:	2800      	cmp	r0, #0
 800c9e8:	f000 80b0 	beq.w	800cb4c <rmw_create_publisher+0x1b0>
 800c9ec:	6884      	ldr	r4, [r0, #8]
 800c9ee:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800c9f2:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800c9f6:	f006 fdb9 	bl	801356c <rmw_get_implementation_identifier>
 800c9fa:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800c9fe:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800ca02:	4628      	mov	r0, r5
 800ca04:	f7f3 fc26 	bl	8000254 <strlen>
 800ca08:	3001      	adds	r0, #1
 800ca0a:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 800ca0e:	283c      	cmp	r0, #60	@ 0x3c
 800ca10:	f200 808f 	bhi.w	800cb32 <rmw_create_publisher+0x196>
 800ca14:	462b      	mov	r3, r5
 800ca16:	4a51      	ldr	r2, [pc, #324]	@ (800cb5c <rmw_create_publisher+0x1c0>)
 800ca18:	213c      	movs	r1, #60	@ 0x3c
 800ca1a:	4650      	mov	r0, sl
 800ca1c:	f009 ff60 	bl	80168e0 <sniprintf>
 800ca20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ca24:	4639      	mov	r1, r7
 800ca26:	2250      	movs	r2, #80	@ 0x50
 800ca28:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800ca2a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800ca2e:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800ca32:	f00a f982 	bl	8016d3a <memcpy>
 800ca36:	7a3b      	ldrb	r3, [r7, #8]
 800ca38:	4630      	mov	r0, r6
 800ca3a:	4949      	ldr	r1, [pc, #292]	@ (800cb60 <rmw_create_publisher+0x1c4>)
 800ca3c:	2b02      	cmp	r3, #2
 800ca3e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ca42:	bf0c      	ite	eq
 800ca44:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800ca48:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800ca4c:	67a3      	str	r3, [r4, #120]	@ 0x78
 800ca4e:	2300      	movs	r3, #0
 800ca50:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800ca54:	f000 fbce 	bl	800d1f4 <get_message_typesupport_handle>
 800ca58:	2800      	cmp	r0, #0
 800ca5a:	d06a      	beq.n	800cb32 <rmw_create_publisher+0x196>
 800ca5c:	6842      	ldr	r2, [r0, #4]
 800ca5e:	61a2      	str	r2, [r4, #24]
 800ca60:	2a00      	cmp	r2, #0
 800ca62:	d066      	beq.n	800cb32 <rmw_create_publisher+0x196>
 800ca64:	4629      	mov	r1, r5
 800ca66:	463b      	mov	r3, r7
 800ca68:	4648      	mov	r0, r9
 800ca6a:	f007 f80d 	bl	8013a88 <create_topic>
 800ca6e:	6260      	str	r0, [r4, #36]	@ 0x24
 800ca70:	2800      	cmp	r0, #0
 800ca72:	d062      	beq.n	800cb3a <rmw_create_publisher+0x19e>
 800ca74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ca78:	2103      	movs	r1, #3
 800ca7a:	2506      	movs	r5, #6
 800ca7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ca80:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800ca84:	1c42      	adds	r2, r0, #1
 800ca86:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800ca8a:	f002 ff87 	bl	800f99c <uxr_object_id>
 800ca8e:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800ca92:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ca96:	6120      	str	r0, [r4, #16]
 800ca98:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800ca9c:	6910      	ldr	r0, [r2, #16]
 800ca9e:	9500      	str	r5, [sp, #0]
 800caa0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800caa4:	6819      	ldr	r1, [r3, #0]
 800caa6:	6922      	ldr	r2, [r4, #16]
 800caa8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800caac:	f002 fed0 	bl	800f850 <uxr_buffer_create_publisher_bin>
 800cab0:	4602      	mov	r2, r0
 800cab2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800cab6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800caba:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800cabe:	f000 fb11 	bl	800d0e4 <run_xrce_session>
 800cac2:	b3b0      	cbz	r0, 800cb32 <rmw_create_publisher+0x196>
 800cac4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cac8:	2105      	movs	r1, #5
 800caca:	f10d 0a10 	add.w	sl, sp, #16
 800cace:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cad2:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800cad6:	1c42      	adds	r2, r0, #1
 800cad8:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800cadc:	f002 ff5e 	bl	800f99c <uxr_object_id>
 800cae0:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800cae4:	4639      	mov	r1, r7
 800cae6:	6160      	str	r0, [r4, #20]
 800cae8:	691e      	ldr	r6, [r3, #16]
 800caea:	4650      	mov	r0, sl
 800caec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800caf0:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800caf4:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800caf8:	f8d3 7384 	ldr.w	r7, [r3, #900]	@ 0x384
 800cafc:	f000 fb0e 	bl	800d11c <convert_qos_profile>
 800cb00:	9503      	str	r5, [sp, #12]
 800cb02:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800cb06:	9001      	str	r0, [sp, #4]
 800cb08:	4630      	mov	r0, r6
 800cb0a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800cb0e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800cb12:	9300      	str	r3, [sp, #0]
 800cb14:	6839      	ldr	r1, [r7, #0]
 800cb16:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800cb1a:	f002 fec9 	bl	800f8b0 <uxr_buffer_create_datawriter_bin>
 800cb1e:	4602      	mov	r2, r0
 800cb20:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800cb24:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800cb28:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800cb2c:	f000 fada 	bl	800d0e4 <run_xrce_session>
 800cb30:	b970      	cbnz	r0, 800cb50 <rmw_create_publisher+0x1b4>
 800cb32:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800cb34:	b108      	cbz	r0, 800cb3a <rmw_create_publisher+0x19e>
 800cb36:	f000 fa6f 	bl	800d018 <rmw_uxrce_fini_topic_memory>
 800cb3a:	4640      	mov	r0, r8
 800cb3c:	f04f 0800 	mov.w	r8, #0
 800cb40:	f000 fa12 	bl	800cf68 <rmw_uxrce_fini_publisher_memory>
 800cb44:	4640      	mov	r0, r8
 800cb46:	b007      	add	sp, #28
 800cb48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb4c:	f04f 0800 	mov.w	r8, #0
 800cb50:	4640      	mov	r0, r8
 800cb52:	b007      	add	sp, #28
 800cb54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb58:	2000eb44 	.word	0x2000eb44
 800cb5c:	08017c58 	.word	0x08017c58
 800cb60:	08017c24 	.word	0x08017c24

0800cb64 <rmw_publisher_get_actual_qos>:
 800cb64:	b178      	cbz	r0, 800cb86 <rmw_publisher_get_actual_qos+0x22>
 800cb66:	b510      	push	{r4, lr}
 800cb68:	fab1 f481 	clz	r4, r1
 800cb6c:	0964      	lsrs	r4, r4, #5
 800cb6e:	b141      	cbz	r1, 800cb82 <rmw_publisher_get_actual_qos+0x1e>
 800cb70:	6843      	ldr	r3, [r0, #4]
 800cb72:	2250      	movs	r2, #80	@ 0x50
 800cb74:	4608      	mov	r0, r1
 800cb76:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800cb7a:	f00a f8de 	bl	8016d3a <memcpy>
 800cb7e:	4620      	mov	r0, r4
 800cb80:	bd10      	pop	{r4, pc}
 800cb82:	200b      	movs	r0, #11
 800cb84:	bd10      	pop	{r4, pc}
 800cb86:	200b      	movs	r0, #11
 800cb88:	4770      	bx	lr
 800cb8a:	bf00      	nop

0800cb8c <rmw_destroy_publisher>:
 800cb8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb90:	b128      	cbz	r0, 800cb9e <rmw_destroy_publisher+0x12>
 800cb92:	4604      	mov	r4, r0
 800cb94:	6800      	ldr	r0, [r0, #0]
 800cb96:	460d      	mov	r5, r1
 800cb98:	f000 fb1e 	bl	800d1d8 <is_uxrce_rmw_identifier_valid>
 800cb9c:	b918      	cbnz	r0, 800cba6 <rmw_destroy_publisher+0x1a>
 800cb9e:	2401      	movs	r4, #1
 800cba0:	4620      	mov	r0, r4
 800cba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cba6:	6863      	ldr	r3, [r4, #4]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d0f8      	beq.n	800cb9e <rmw_destroy_publisher+0x12>
 800cbac:	fab5 f485 	clz	r4, r5
 800cbb0:	0964      	lsrs	r4, r4, #5
 800cbb2:	2d00      	cmp	r5, #0
 800cbb4:	d0f3      	beq.n	800cb9e <rmw_destroy_publisher+0x12>
 800cbb6:	6828      	ldr	r0, [r5, #0]
 800cbb8:	f000 fb0e 	bl	800d1d8 <is_uxrce_rmw_identifier_valid>
 800cbbc:	2800      	cmp	r0, #0
 800cbbe:	d0ee      	beq.n	800cb9e <rmw_destroy_publisher+0x12>
 800cbc0:	686e      	ldr	r6, [r5, #4]
 800cbc2:	2e00      	cmp	r6, #0
 800cbc4:	d0eb      	beq.n	800cb9e <rmw_destroy_publisher+0x12>
 800cbc6:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800cbc8:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 800cbcc:	f006 ffac 	bl	8013b28 <destroy_topic>
 800cbd0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800cbd4:	6972      	ldr	r2, [r6, #20]
 800cbd6:	6918      	ldr	r0, [r3, #16]
 800cbd8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800cbdc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cbe0:	6819      	ldr	r1, [r3, #0]
 800cbe2:	f002 fd81 	bl	800f6e8 <uxr_buffer_delete_entity>
 800cbe6:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800cbea:	4680      	mov	r8, r0
 800cbec:	6932      	ldr	r2, [r6, #16]
 800cbee:	6918      	ldr	r0, [r3, #16]
 800cbf0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800cbf4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cbf8:	6819      	ldr	r1, [r3, #0]
 800cbfa:	f002 fd75 	bl	800f6e8 <uxr_buffer_delete_entity>
 800cbfe:	4606      	mov	r6, r0
 800cc00:	6938      	ldr	r0, [r7, #16]
 800cc02:	4642      	mov	r2, r8
 800cc04:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800cc08:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800cc0c:	f000 fa6a 	bl	800d0e4 <run_xrce_session>
 800cc10:	693f      	ldr	r7, [r7, #16]
 800cc12:	4632      	mov	r2, r6
 800cc14:	4606      	mov	r6, r0
 800cc16:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800cc1a:	4638      	mov	r0, r7
 800cc1c:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800cc20:	f000 fa60 	bl	800d0e4 <run_xrce_session>
 800cc24:	b126      	cbz	r6, 800cc30 <rmw_destroy_publisher+0xa4>
 800cc26:	b118      	cbz	r0, 800cc30 <rmw_destroy_publisher+0xa4>
 800cc28:	4628      	mov	r0, r5
 800cc2a:	f000 f99d 	bl	800cf68 <rmw_uxrce_fini_publisher_memory>
 800cc2e:	e7b7      	b.n	800cba0 <rmw_destroy_publisher+0x14>
 800cc30:	2402      	movs	r4, #2
 800cc32:	e7f9      	b.n	800cc28 <rmw_destroy_publisher+0x9c>

0800cc34 <rmw_uros_epoch_millis>:
 800cc34:	4b05      	ldr	r3, [pc, #20]	@ (800cc4c <rmw_uros_epoch_millis+0x18>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	b123      	cbz	r3, 800cc44 <rmw_uros_epoch_millis+0x10>
 800cc3a:	6898      	ldr	r0, [r3, #8]
 800cc3c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cc40:	f002 bff2 	b.w	800fc28 <uxr_epoch_millis>
 800cc44:	2000      	movs	r0, #0
 800cc46:	2100      	movs	r1, #0
 800cc48:	4770      	bx	lr
 800cc4a:	bf00      	nop
 800cc4c:	2000eb64 	.word	0x2000eb64

0800cc50 <rmw_uros_epoch_nanos>:
 800cc50:	4b05      	ldr	r3, [pc, #20]	@ (800cc68 <rmw_uros_epoch_nanos+0x18>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	b123      	cbz	r3, 800cc60 <rmw_uros_epoch_nanos+0x10>
 800cc56:	6898      	ldr	r0, [r3, #8]
 800cc58:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cc5c:	f002 bff6 	b.w	800fc4c <uxr_epoch_nanos>
 800cc60:	2000      	movs	r0, #0
 800cc62:	2100      	movs	r1, #0
 800cc64:	4770      	bx	lr
 800cc66:	bf00      	nop
 800cc68:	2000eb64 	.word	0x2000eb64

0800cc6c <rmw_uxrce_init_service_memory>:
 800cc6c:	b1e2      	cbz	r2, 800cca8 <rmw_uxrce_init_service_memory+0x3c>
 800cc6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc72:	7b05      	ldrb	r5, [r0, #12]
 800cc74:	4606      	mov	r6, r0
 800cc76:	b9ad      	cbnz	r5, 800cca4 <rmw_uxrce_init_service_memory+0x38>
 800cc78:	23c8      	movs	r3, #200	@ 0xc8
 800cc7a:	4617      	mov	r7, r2
 800cc7c:	460c      	mov	r4, r1
 800cc7e:	46a8      	mov	r8, r5
 800cc80:	6083      	str	r3, [r0, #8]
 800cc82:	f240 1301 	movw	r3, #257	@ 0x101
 800cc86:	e9c0 5500 	strd	r5, r5, [r0]
 800cc8a:	8183      	strh	r3, [r0, #12]
 800cc8c:	3501      	adds	r5, #1
 800cc8e:	4621      	mov	r1, r4
 800cc90:	4630      	mov	r0, r6
 800cc92:	f006 fc57 	bl	8013544 <put_memory>
 800cc96:	42af      	cmp	r7, r5
 800cc98:	60a4      	str	r4, [r4, #8]
 800cc9a:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800cc9e:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800cca2:	d1f3      	bne.n	800cc8c <rmw_uxrce_init_service_memory+0x20>
 800cca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cca8:	4770      	bx	lr
 800ccaa:	bf00      	nop

0800ccac <rmw_uxrce_init_client_memory>:
 800ccac:	b1e2      	cbz	r2, 800cce8 <rmw_uxrce_init_client_memory+0x3c>
 800ccae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccb2:	7b05      	ldrb	r5, [r0, #12]
 800ccb4:	4606      	mov	r6, r0
 800ccb6:	b9ad      	cbnz	r5, 800cce4 <rmw_uxrce_init_client_memory+0x38>
 800ccb8:	23c8      	movs	r3, #200	@ 0xc8
 800ccba:	4617      	mov	r7, r2
 800ccbc:	460c      	mov	r4, r1
 800ccbe:	46a8      	mov	r8, r5
 800ccc0:	6083      	str	r3, [r0, #8]
 800ccc2:	f240 1301 	movw	r3, #257	@ 0x101
 800ccc6:	e9c0 5500 	strd	r5, r5, [r0]
 800ccca:	8183      	strh	r3, [r0, #12]
 800cccc:	3501      	adds	r5, #1
 800ccce:	4621      	mov	r1, r4
 800ccd0:	4630      	mov	r0, r6
 800ccd2:	f006 fc37 	bl	8013544 <put_memory>
 800ccd6:	42af      	cmp	r7, r5
 800ccd8:	60a4      	str	r4, [r4, #8]
 800ccda:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800ccde:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800cce2:	d1f3      	bne.n	800cccc <rmw_uxrce_init_client_memory+0x20>
 800cce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cce8:	4770      	bx	lr
 800ccea:	bf00      	nop

0800ccec <rmw_uxrce_init_publisher_memory>:
 800ccec:	b1e2      	cbz	r2, 800cd28 <rmw_uxrce_init_publisher_memory+0x3c>
 800ccee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccf2:	7b05      	ldrb	r5, [r0, #12]
 800ccf4:	4606      	mov	r6, r0
 800ccf6:	b9ad      	cbnz	r5, 800cd24 <rmw_uxrce_init_publisher_memory+0x38>
 800ccf8:	23d8      	movs	r3, #216	@ 0xd8
 800ccfa:	4617      	mov	r7, r2
 800ccfc:	460c      	mov	r4, r1
 800ccfe:	46a8      	mov	r8, r5
 800cd00:	6083      	str	r3, [r0, #8]
 800cd02:	f240 1301 	movw	r3, #257	@ 0x101
 800cd06:	e9c0 5500 	strd	r5, r5, [r0]
 800cd0a:	8183      	strh	r3, [r0, #12]
 800cd0c:	3501      	adds	r5, #1
 800cd0e:	4621      	mov	r1, r4
 800cd10:	4630      	mov	r0, r6
 800cd12:	f006 fc17 	bl	8013544 <put_memory>
 800cd16:	42af      	cmp	r7, r5
 800cd18:	60a4      	str	r4, [r4, #8]
 800cd1a:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800cd1e:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800cd22:	d1f3      	bne.n	800cd0c <rmw_uxrce_init_publisher_memory+0x20>
 800cd24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd28:	4770      	bx	lr
 800cd2a:	bf00      	nop

0800cd2c <rmw_uxrce_init_subscription_memory>:
 800cd2c:	b1e2      	cbz	r2, 800cd68 <rmw_uxrce_init_subscription_memory+0x3c>
 800cd2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd32:	7b05      	ldrb	r5, [r0, #12]
 800cd34:	4606      	mov	r6, r0
 800cd36:	b9ad      	cbnz	r5, 800cd64 <rmw_uxrce_init_subscription_memory+0x38>
 800cd38:	23d8      	movs	r3, #216	@ 0xd8
 800cd3a:	4617      	mov	r7, r2
 800cd3c:	460c      	mov	r4, r1
 800cd3e:	46a8      	mov	r8, r5
 800cd40:	6083      	str	r3, [r0, #8]
 800cd42:	f240 1301 	movw	r3, #257	@ 0x101
 800cd46:	e9c0 5500 	strd	r5, r5, [r0]
 800cd4a:	8183      	strh	r3, [r0, #12]
 800cd4c:	3501      	adds	r5, #1
 800cd4e:	4621      	mov	r1, r4
 800cd50:	4630      	mov	r0, r6
 800cd52:	f006 fbf7 	bl	8013544 <put_memory>
 800cd56:	42af      	cmp	r7, r5
 800cd58:	60a4      	str	r4, [r4, #8]
 800cd5a:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800cd5e:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800cd62:	d1f3      	bne.n	800cd4c <rmw_uxrce_init_subscription_memory+0x20>
 800cd64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd68:	4770      	bx	lr
 800cd6a:	bf00      	nop

0800cd6c <rmw_uxrce_init_node_memory>:
 800cd6c:	b1e2      	cbz	r2, 800cda8 <rmw_uxrce_init_node_memory+0x3c>
 800cd6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd72:	7b05      	ldrb	r5, [r0, #12]
 800cd74:	4606      	mov	r6, r0
 800cd76:	b9ad      	cbnz	r5, 800cda4 <rmw_uxrce_init_node_memory+0x38>
 800cd78:	23a4      	movs	r3, #164	@ 0xa4
 800cd7a:	4617      	mov	r7, r2
 800cd7c:	460c      	mov	r4, r1
 800cd7e:	46a8      	mov	r8, r5
 800cd80:	6083      	str	r3, [r0, #8]
 800cd82:	f240 1301 	movw	r3, #257	@ 0x101
 800cd86:	e9c0 5500 	strd	r5, r5, [r0]
 800cd8a:	8183      	strh	r3, [r0, #12]
 800cd8c:	3501      	adds	r5, #1
 800cd8e:	4621      	mov	r1, r4
 800cd90:	4630      	mov	r0, r6
 800cd92:	f006 fbd7 	bl	8013544 <put_memory>
 800cd96:	42af      	cmp	r7, r5
 800cd98:	60a4      	str	r4, [r4, #8]
 800cd9a:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800cd9e:	f804 8c98 	strb.w	r8, [r4, #-152]
 800cda2:	d1f3      	bne.n	800cd8c <rmw_uxrce_init_node_memory+0x20>
 800cda4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cda8:	4770      	bx	lr
 800cdaa:	bf00      	nop

0800cdac <rmw_uxrce_init_session_memory>:
 800cdac:	b1ea      	cbz	r2, 800cdea <rmw_uxrce_init_session_memory+0x3e>
 800cdae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdb2:	7b05      	ldrb	r5, [r0, #12]
 800cdb4:	4606      	mov	r6, r0
 800cdb6:	b9b5      	cbnz	r5, 800cde6 <rmw_uxrce_init_session_memory+0x3a>
 800cdb8:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800cdbc:	f240 1301 	movw	r3, #257	@ 0x101
 800cdc0:	4617      	mov	r7, r2
 800cdc2:	460c      	mov	r4, r1
 800cdc4:	46a9      	mov	r9, r5
 800cdc6:	f8c0 8008 	str.w	r8, [r0, #8]
 800cdca:	8183      	strh	r3, [r0, #12]
 800cdcc:	e9c0 5500 	strd	r5, r5, [r0]
 800cdd0:	3501      	adds	r5, #1
 800cdd2:	4621      	mov	r1, r4
 800cdd4:	4630      	mov	r0, r6
 800cdd6:	f006 fbb5 	bl	8013544 <put_memory>
 800cdda:	42af      	cmp	r7, r5
 800cddc:	60a4      	str	r4, [r4, #8]
 800cdde:	f884 900c 	strb.w	r9, [r4, #12]
 800cde2:	4444      	add	r4, r8
 800cde4:	d1f4      	bne.n	800cdd0 <rmw_uxrce_init_session_memory+0x24>
 800cde6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdea:	4770      	bx	lr

0800cdec <rmw_uxrce_init_topic_memory>:
 800cdec:	b1e2      	cbz	r2, 800ce28 <rmw_uxrce_init_topic_memory+0x3c>
 800cdee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdf2:	7b05      	ldrb	r5, [r0, #12]
 800cdf4:	4606      	mov	r6, r0
 800cdf6:	b9ad      	cbnz	r5, 800ce24 <rmw_uxrce_init_topic_memory+0x38>
 800cdf8:	231c      	movs	r3, #28
 800cdfa:	4617      	mov	r7, r2
 800cdfc:	460c      	mov	r4, r1
 800cdfe:	46a8      	mov	r8, r5
 800ce00:	6083      	str	r3, [r0, #8]
 800ce02:	f240 1301 	movw	r3, #257	@ 0x101
 800ce06:	e9c0 5500 	strd	r5, r5, [r0]
 800ce0a:	8183      	strh	r3, [r0, #12]
 800ce0c:	3501      	adds	r5, #1
 800ce0e:	4621      	mov	r1, r4
 800ce10:	4630      	mov	r0, r6
 800ce12:	f006 fb97 	bl	8013544 <put_memory>
 800ce16:	42af      	cmp	r7, r5
 800ce18:	60a4      	str	r4, [r4, #8]
 800ce1a:	f104 041c 	add.w	r4, r4, #28
 800ce1e:	f804 8c10 	strb.w	r8, [r4, #-16]
 800ce22:	d1f3      	bne.n	800ce0c <rmw_uxrce_init_topic_memory+0x20>
 800ce24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce28:	4770      	bx	lr
 800ce2a:	bf00      	nop

0800ce2c <rmw_uxrce_init_static_input_buffer_memory>:
 800ce2c:	b1ea      	cbz	r2, 800ce6a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800ce2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce32:	7b05      	ldrb	r5, [r0, #12]
 800ce34:	4606      	mov	r6, r0
 800ce36:	b9b5      	cbnz	r5, 800ce66 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800ce38:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800ce3c:	4617      	mov	r7, r2
 800ce3e:	460c      	mov	r4, r1
 800ce40:	46a8      	mov	r8, r5
 800ce42:	6083      	str	r3, [r0, #8]
 800ce44:	f240 1301 	movw	r3, #257	@ 0x101
 800ce48:	e9c0 5500 	strd	r5, r5, [r0]
 800ce4c:	8183      	strh	r3, [r0, #12]
 800ce4e:	3501      	adds	r5, #1
 800ce50:	4621      	mov	r1, r4
 800ce52:	4630      	mov	r0, r6
 800ce54:	f006 fb76 	bl	8013544 <put_memory>
 800ce58:	42af      	cmp	r7, r5
 800ce5a:	60a4      	str	r4, [r4, #8]
 800ce5c:	f884 800c 	strb.w	r8, [r4, #12]
 800ce60:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800ce64:	d1f3      	bne.n	800ce4e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800ce66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce6a:	4770      	bx	lr

0800ce6c <rmw_uxrce_init_init_options_impl_memory>:
 800ce6c:	b1e2      	cbz	r2, 800cea8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800ce6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce72:	7b05      	ldrb	r5, [r0, #12]
 800ce74:	4606      	mov	r6, r0
 800ce76:	b9ad      	cbnz	r5, 800cea4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800ce78:	232c      	movs	r3, #44	@ 0x2c
 800ce7a:	4617      	mov	r7, r2
 800ce7c:	460c      	mov	r4, r1
 800ce7e:	46a8      	mov	r8, r5
 800ce80:	6083      	str	r3, [r0, #8]
 800ce82:	f240 1301 	movw	r3, #257	@ 0x101
 800ce86:	e9c0 5500 	strd	r5, r5, [r0]
 800ce8a:	8183      	strh	r3, [r0, #12]
 800ce8c:	3501      	adds	r5, #1
 800ce8e:	4621      	mov	r1, r4
 800ce90:	4630      	mov	r0, r6
 800ce92:	f006 fb57 	bl	8013544 <put_memory>
 800ce96:	42af      	cmp	r7, r5
 800ce98:	60a4      	str	r4, [r4, #8]
 800ce9a:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800ce9e:	f804 8c20 	strb.w	r8, [r4, #-32]
 800cea2:	d1f3      	bne.n	800ce8c <rmw_uxrce_init_init_options_impl_memory+0x20>
 800cea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cea8:	4770      	bx	lr
 800ceaa:	bf00      	nop

0800ceac <rmw_uxrce_init_wait_set_memory>:
 800ceac:	b1e2      	cbz	r2, 800cee8 <rmw_uxrce_init_wait_set_memory+0x3c>
 800ceae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ceb2:	7b05      	ldrb	r5, [r0, #12]
 800ceb4:	4606      	mov	r6, r0
 800ceb6:	b9ad      	cbnz	r5, 800cee4 <rmw_uxrce_init_wait_set_memory+0x38>
 800ceb8:	231c      	movs	r3, #28
 800ceba:	4617      	mov	r7, r2
 800cebc:	460c      	mov	r4, r1
 800cebe:	46a8      	mov	r8, r5
 800cec0:	6083      	str	r3, [r0, #8]
 800cec2:	f240 1301 	movw	r3, #257	@ 0x101
 800cec6:	e9c0 5500 	strd	r5, r5, [r0]
 800ceca:	8183      	strh	r3, [r0, #12]
 800cecc:	3501      	adds	r5, #1
 800cece:	4621      	mov	r1, r4
 800ced0:	4630      	mov	r0, r6
 800ced2:	f006 fb37 	bl	8013544 <put_memory>
 800ced6:	42af      	cmp	r7, r5
 800ced8:	60a4      	str	r4, [r4, #8]
 800ceda:	f104 041c 	add.w	r4, r4, #28
 800cede:	f804 8c10 	strb.w	r8, [r4, #-16]
 800cee2:	d1f3      	bne.n	800cecc <rmw_uxrce_init_wait_set_memory+0x20>
 800cee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cee8:	4770      	bx	lr
 800ceea:	bf00      	nop

0800ceec <rmw_uxrce_init_guard_condition_memory>:
 800ceec:	b1e2      	cbz	r2, 800cf28 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800ceee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cef2:	7b05      	ldrb	r5, [r0, #12]
 800cef4:	4606      	mov	r6, r0
 800cef6:	b9ad      	cbnz	r5, 800cf24 <rmw_uxrce_init_guard_condition_memory+0x38>
 800cef8:	2320      	movs	r3, #32
 800cefa:	4617      	mov	r7, r2
 800cefc:	460c      	mov	r4, r1
 800cefe:	46a8      	mov	r8, r5
 800cf00:	6083      	str	r3, [r0, #8]
 800cf02:	f240 1301 	movw	r3, #257	@ 0x101
 800cf06:	e9c0 5500 	strd	r5, r5, [r0]
 800cf0a:	8183      	strh	r3, [r0, #12]
 800cf0c:	3501      	adds	r5, #1
 800cf0e:	4621      	mov	r1, r4
 800cf10:	4630      	mov	r0, r6
 800cf12:	f006 fb17 	bl	8013544 <put_memory>
 800cf16:	42af      	cmp	r7, r5
 800cf18:	60a4      	str	r4, [r4, #8]
 800cf1a:	f104 0420 	add.w	r4, r4, #32
 800cf1e:	f804 8c14 	strb.w	r8, [r4, #-20]
 800cf22:	d1f3      	bne.n	800cf0c <rmw_uxrce_init_guard_condition_memory+0x20>
 800cf24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf28:	4770      	bx	lr
 800cf2a:	bf00      	nop

0800cf2c <rmw_uxrce_fini_session_memory>:
 800cf2c:	4601      	mov	r1, r0
 800cf2e:	4801      	ldr	r0, [pc, #4]	@ (800cf34 <rmw_uxrce_fini_session_memory+0x8>)
 800cf30:	f006 bb08 	b.w	8013544 <put_memory>
 800cf34:	2000eb64 	.word	0x2000eb64

0800cf38 <rmw_uxrce_fini_node_memory>:
 800cf38:	b538      	push	{r3, r4, r5, lr}
 800cf3a:	4604      	mov	r4, r0
 800cf3c:	6800      	ldr	r0, [r0, #0]
 800cf3e:	b128      	cbz	r0, 800cf4c <rmw_uxrce_fini_node_memory+0x14>
 800cf40:	4b07      	ldr	r3, [pc, #28]	@ (800cf60 <rmw_uxrce_fini_node_memory+0x28>)
 800cf42:	6819      	ldr	r1, [r3, #0]
 800cf44:	f7f3 f97c 	bl	8000240 <strcmp>
 800cf48:	b940      	cbnz	r0, 800cf5c <rmw_uxrce_fini_node_memory+0x24>
 800cf4a:	6020      	str	r0, [r4, #0]
 800cf4c:	6861      	ldr	r1, [r4, #4]
 800cf4e:	b129      	cbz	r1, 800cf5c <rmw_uxrce_fini_node_memory+0x24>
 800cf50:	2500      	movs	r5, #0
 800cf52:	4804      	ldr	r0, [pc, #16]	@ (800cf64 <rmw_uxrce_fini_node_memory+0x2c>)
 800cf54:	610d      	str	r5, [r1, #16]
 800cf56:	f006 faf5 	bl	8013544 <put_memory>
 800cf5a:	6065      	str	r5, [r4, #4]
 800cf5c:	bd38      	pop	{r3, r4, r5, pc}
 800cf5e:	bf00      	nop
 800cf60:	080185a4 	.word	0x080185a4
 800cf64:	2000eb34 	.word	0x2000eb34

0800cf68 <rmw_uxrce_fini_publisher_memory>:
 800cf68:	b510      	push	{r4, lr}
 800cf6a:	4604      	mov	r4, r0
 800cf6c:	6800      	ldr	r0, [r0, #0]
 800cf6e:	b128      	cbz	r0, 800cf7c <rmw_uxrce_fini_publisher_memory+0x14>
 800cf70:	4b06      	ldr	r3, [pc, #24]	@ (800cf8c <rmw_uxrce_fini_publisher_memory+0x24>)
 800cf72:	6819      	ldr	r1, [r3, #0]
 800cf74:	f7f3 f964 	bl	8000240 <strcmp>
 800cf78:	b938      	cbnz	r0, 800cf8a <rmw_uxrce_fini_publisher_memory+0x22>
 800cf7a:	6020      	str	r0, [r4, #0]
 800cf7c:	6861      	ldr	r1, [r4, #4]
 800cf7e:	b121      	cbz	r1, 800cf8a <rmw_uxrce_fini_publisher_memory+0x22>
 800cf80:	4803      	ldr	r0, [pc, #12]	@ (800cf90 <rmw_uxrce_fini_publisher_memory+0x28>)
 800cf82:	f006 fadf 	bl	8013544 <put_memory>
 800cf86:	2300      	movs	r3, #0
 800cf88:	6063      	str	r3, [r4, #4]
 800cf8a:	bd10      	pop	{r4, pc}
 800cf8c:	080185a4 	.word	0x080185a4
 800cf90:	2000eb44 	.word	0x2000eb44

0800cf94 <rmw_uxrce_fini_subscription_memory>:
 800cf94:	b510      	push	{r4, lr}
 800cf96:	4604      	mov	r4, r0
 800cf98:	6800      	ldr	r0, [r0, #0]
 800cf9a:	b128      	cbz	r0, 800cfa8 <rmw_uxrce_fini_subscription_memory+0x14>
 800cf9c:	4b06      	ldr	r3, [pc, #24]	@ (800cfb8 <rmw_uxrce_fini_subscription_memory+0x24>)
 800cf9e:	6819      	ldr	r1, [r3, #0]
 800cfa0:	f7f3 f94e 	bl	8000240 <strcmp>
 800cfa4:	b938      	cbnz	r0, 800cfb6 <rmw_uxrce_fini_subscription_memory+0x22>
 800cfa6:	6020      	str	r0, [r4, #0]
 800cfa8:	6861      	ldr	r1, [r4, #4]
 800cfaa:	b121      	cbz	r1, 800cfb6 <rmw_uxrce_fini_subscription_memory+0x22>
 800cfac:	4803      	ldr	r0, [pc, #12]	@ (800cfbc <rmw_uxrce_fini_subscription_memory+0x28>)
 800cfae:	f006 fac9 	bl	8013544 <put_memory>
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	6063      	str	r3, [r4, #4]
 800cfb6:	bd10      	pop	{r4, pc}
 800cfb8:	080185a4 	.word	0x080185a4
 800cfbc:	2000eb84 	.word	0x2000eb84

0800cfc0 <rmw_uxrce_fini_service_memory>:
 800cfc0:	b510      	push	{r4, lr}
 800cfc2:	4604      	mov	r4, r0
 800cfc4:	6800      	ldr	r0, [r0, #0]
 800cfc6:	b128      	cbz	r0, 800cfd4 <rmw_uxrce_fini_service_memory+0x14>
 800cfc8:	4b06      	ldr	r3, [pc, #24]	@ (800cfe4 <rmw_uxrce_fini_service_memory+0x24>)
 800cfca:	6819      	ldr	r1, [r3, #0]
 800cfcc:	f7f3 f938 	bl	8000240 <strcmp>
 800cfd0:	b938      	cbnz	r0, 800cfe2 <rmw_uxrce_fini_service_memory+0x22>
 800cfd2:	6020      	str	r0, [r4, #0]
 800cfd4:	6861      	ldr	r1, [r4, #4]
 800cfd6:	b121      	cbz	r1, 800cfe2 <rmw_uxrce_fini_service_memory+0x22>
 800cfd8:	4803      	ldr	r0, [pc, #12]	@ (800cfe8 <rmw_uxrce_fini_service_memory+0x28>)
 800cfda:	f006 fab3 	bl	8013544 <put_memory>
 800cfde:	2300      	movs	r3, #0
 800cfe0:	6063      	str	r3, [r4, #4]
 800cfe2:	bd10      	pop	{r4, pc}
 800cfe4:	080185a4 	.word	0x080185a4
 800cfe8:	2000eb54 	.word	0x2000eb54

0800cfec <rmw_uxrce_fini_client_memory>:
 800cfec:	b510      	push	{r4, lr}
 800cfee:	4604      	mov	r4, r0
 800cff0:	6800      	ldr	r0, [r0, #0]
 800cff2:	b128      	cbz	r0, 800d000 <rmw_uxrce_fini_client_memory+0x14>
 800cff4:	4b06      	ldr	r3, [pc, #24]	@ (800d010 <rmw_uxrce_fini_client_memory+0x24>)
 800cff6:	6819      	ldr	r1, [r3, #0]
 800cff8:	f7f3 f922 	bl	8000240 <strcmp>
 800cffc:	b938      	cbnz	r0, 800d00e <rmw_uxrce_fini_client_memory+0x22>
 800cffe:	6020      	str	r0, [r4, #0]
 800d000:	6861      	ldr	r1, [r4, #4]
 800d002:	b121      	cbz	r1, 800d00e <rmw_uxrce_fini_client_memory+0x22>
 800d004:	4803      	ldr	r0, [pc, #12]	@ (800d014 <rmw_uxrce_fini_client_memory+0x28>)
 800d006:	f006 fa9d 	bl	8013544 <put_memory>
 800d00a:	2300      	movs	r3, #0
 800d00c:	6063      	str	r3, [r4, #4]
 800d00e:	bd10      	pop	{r4, pc}
 800d010:	080185a4 	.word	0x080185a4
 800d014:	2000a268 	.word	0x2000a268

0800d018 <rmw_uxrce_fini_topic_memory>:
 800d018:	b510      	push	{r4, lr}
 800d01a:	4604      	mov	r4, r0
 800d01c:	4803      	ldr	r0, [pc, #12]	@ (800d02c <rmw_uxrce_fini_topic_memory+0x14>)
 800d01e:	4621      	mov	r1, r4
 800d020:	f006 fa90 	bl	8013544 <put_memory>
 800d024:	2300      	movs	r3, #0
 800d026:	61a3      	str	r3, [r4, #24]
 800d028:	bd10      	pop	{r4, pc}
 800d02a:	bf00      	nop
 800d02c:	2000eb94 	.word	0x2000eb94

0800d030 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800d030:	b082      	sub	sp, #8
 800d032:	492b      	ldr	r1, [pc, #172]	@ (800d0e0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800d034:	b530      	push	{r4, r5, lr}
 800d036:	680d      	ldr	r5, [r1, #0]
 800d038:	ac03      	add	r4, sp, #12
 800d03a:	e884 000c 	stmia.w	r4, {r2, r3}
 800d03e:	461c      	mov	r4, r3
 800d040:	2d00      	cmp	r5, #0
 800d042:	d04b      	beq.n	800d0dc <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 800d044:	462b      	mov	r3, r5
 800d046:	2100      	movs	r1, #0
 800d048:	689a      	ldr	r2, [r3, #8]
 800d04a:	685b      	ldr	r3, [r3, #4]
 800d04c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800d050:	4290      	cmp	r0, r2
 800d052:	bf08      	it	eq
 800d054:	3101      	addeq	r1, #1
 800d056:	2b00      	cmp	r3, #0
 800d058:	d1f6      	bne.n	800d048 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800d05a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800d05e:	2b02      	cmp	r3, #2
 800d060:	d029      	beq.n	800d0b6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800d062:	d820      	bhi.n	800d0a6 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 800d064:	428c      	cmp	r4, r1
 800d066:	d828      	bhi.n	800d0ba <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800d068:	fab4 f284 	clz	r2, r4
 800d06c:	0952      	lsrs	r2, r2, #5
 800d06e:	b324      	cbz	r4, 800d0ba <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800d070:	b1dd      	cbz	r5, 800d0aa <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 800d072:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800d076:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800d07a:	e001      	b.n	800d080 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 800d07c:	686d      	ldr	r5, [r5, #4]
 800d07e:	b1ad      	cbz	r5, 800d0ac <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800d080:	68ab      	ldr	r3, [r5, #8]
 800d082:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 800d086:	4288      	cmp	r0, r1
 800d088:	d1f8      	bne.n	800d07c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800d08a:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 800d08e:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800d092:	4561      	cmp	r1, ip
 800d094:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800d098:	eb73 0e04 	sbcs.w	lr, r3, r4
 800d09c:	daee      	bge.n	800d07c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800d09e:	468c      	mov	ip, r1
 800d0a0:	461c      	mov	r4, r3
 800d0a2:	462a      	mov	r2, r5
 800d0a4:	e7ea      	b.n	800d07c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800d0a6:	2b03      	cmp	r3, #3
 800d0a8:	d0dc      	beq.n	800d064 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	4610      	mov	r0, r2
 800d0ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d0b2:	b002      	add	sp, #8
 800d0b4:	4770      	bx	lr
 800d0b6:	428c      	cmp	r4, r1
 800d0b8:	d905      	bls.n	800d0c6 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800d0ba:	4809      	ldr	r0, [pc, #36]	@ (800d0e0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800d0bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d0c0:	b002      	add	sp, #8
 800d0c2:	f006 ba2f 	b.w	8013524 <get_memory>
 800d0c6:	fab4 f284 	clz	r2, r4
 800d0ca:	0952      	lsrs	r2, r2, #5
 800d0cc:	2c00      	cmp	r4, #0
 800d0ce:	d1ed      	bne.n	800d0ac <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800d0d0:	4803      	ldr	r0, [pc, #12]	@ (800d0e0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800d0d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d0d6:	b002      	add	sp, #8
 800d0d8:	f006 ba24 	b.w	8013524 <get_memory>
 800d0dc:	4629      	mov	r1, r5
 800d0de:	e7bc      	b.n	800d05a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800d0e0:	2000eb74 	.word	0x2000eb74

0800d0e4 <run_xrce_session>:
 800d0e4:	b510      	push	{r4, lr}
 800d0e6:	788c      	ldrb	r4, [r1, #2]
 800d0e8:	b086      	sub	sp, #24
 800d0ea:	2c01      	cmp	r4, #1
 800d0ec:	f8ad 200e 	strh.w	r2, [sp, #14]
 800d0f0:	d00c      	beq.n	800d10c <run_xrce_session+0x28>
 800d0f2:	2401      	movs	r4, #1
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	f10d 020e 	add.w	r2, sp, #14
 800d0fa:	f10d 0317 	add.w	r3, sp, #23
 800d0fe:	9400      	str	r4, [sp, #0]
 800d100:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d104:	f003 f950 	bl	80103a8 <uxr_run_session_until_all_status>
 800d108:	b006      	add	sp, #24
 800d10a:	bd10      	pop	{r4, pc}
 800d10c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d110:	f002 fda6 	bl	800fc60 <uxr_flash_output_streams>
 800d114:	4620      	mov	r0, r4
 800d116:	b006      	add	sp, #24
 800d118:	bd10      	pop	{r4, pc}
 800d11a:	bf00      	nop

0800d11c <convert_qos_profile>:
 800d11c:	7a4a      	ldrb	r2, [r1, #9]
 800d11e:	f891 c008 	ldrb.w	ip, [r1, #8]
 800d122:	2a02      	cmp	r2, #2
 800d124:	bf18      	it	ne
 800d126:	2200      	movne	r2, #0
 800d128:	7002      	strb	r2, [r0, #0]
 800d12a:	f1ac 0202 	sub.w	r2, ip, #2
 800d12e:	fab2 f282 	clz	r2, r2
 800d132:	0952      	lsrs	r2, r2, #5
 800d134:	7042      	strb	r2, [r0, #1]
 800d136:	780a      	ldrb	r2, [r1, #0]
 800d138:	8889      	ldrh	r1, [r1, #4]
 800d13a:	f1a2 0202 	sub.w	r2, r2, #2
 800d13e:	8081      	strh	r1, [r0, #4]
 800d140:	fab2 f282 	clz	r2, r2
 800d144:	0952      	lsrs	r2, r2, #5
 800d146:	7082      	strb	r2, [r0, #2]
 800d148:	4770      	bx	lr
 800d14a:	bf00      	nop

0800d14c <generate_type_name>:
 800d14c:	2300      	movs	r3, #0
 800d14e:	b530      	push	{r4, r5, lr}
 800d150:	700b      	strb	r3, [r1, #0]
 800d152:	b087      	sub	sp, #28
 800d154:	6803      	ldr	r3, [r0, #0]
 800d156:	4614      	mov	r4, r2
 800d158:	b1bb      	cbz	r3, 800d18a <generate_type_name+0x3e>
 800d15a:	4a0e      	ldr	r2, [pc, #56]	@ (800d194 <generate_type_name+0x48>)
 800d15c:	4615      	mov	r5, r2
 800d15e:	9500      	str	r5, [sp, #0]
 800d160:	9203      	str	r2, [sp, #12]
 800d162:	4d0d      	ldr	r5, [pc, #52]	@ (800d198 <generate_type_name+0x4c>)
 800d164:	6842      	ldr	r2, [r0, #4]
 800d166:	4608      	mov	r0, r1
 800d168:	490c      	ldr	r1, [pc, #48]	@ (800d19c <generate_type_name+0x50>)
 800d16a:	9204      	str	r2, [sp, #16]
 800d16c:	9105      	str	r1, [sp, #20]
 800d16e:	9102      	str	r1, [sp, #8]
 800d170:	4621      	mov	r1, r4
 800d172:	4a0b      	ldr	r2, [pc, #44]	@ (800d1a0 <generate_type_name+0x54>)
 800d174:	9501      	str	r5, [sp, #4]
 800d176:	f009 fbb3 	bl	80168e0 <sniprintf>
 800d17a:	2800      	cmp	r0, #0
 800d17c:	bfa8      	it	ge
 800d17e:	4284      	cmpge	r4, r0
 800d180:	bfcc      	ite	gt
 800d182:	2001      	movgt	r0, #1
 800d184:	2000      	movle	r0, #0
 800d186:	b007      	add	sp, #28
 800d188:	bd30      	pop	{r4, r5, pc}
 800d18a:	4b06      	ldr	r3, [pc, #24]	@ (800d1a4 <generate_type_name+0x58>)
 800d18c:	4a01      	ldr	r2, [pc, #4]	@ (800d194 <generate_type_name+0x48>)
 800d18e:	461d      	mov	r5, r3
 800d190:	e7e5      	b.n	800d15e <generate_type_name+0x12>
 800d192:	bf00      	nop
 800d194:	08017c48 	.word	0x08017c48
 800d198:	08017c60 	.word	0x08017c60
 800d19c:	08017c5c 	.word	0x08017c5c
 800d1a0:	08017c4c 	.word	0x08017c4c
 800d1a4:	080183c4 	.word	0x080183c4

0800d1a8 <generate_topic_name>:
 800d1a8:	b530      	push	{r4, r5, lr}
 800d1aa:	4614      	mov	r4, r2
 800d1ac:	b083      	sub	sp, #12
 800d1ae:	4605      	mov	r5, r0
 800d1b0:	4b07      	ldr	r3, [pc, #28]	@ (800d1d0 <generate_topic_name+0x28>)
 800d1b2:	4a08      	ldr	r2, [pc, #32]	@ (800d1d4 <generate_topic_name+0x2c>)
 800d1b4:	4608      	mov	r0, r1
 800d1b6:	9500      	str	r5, [sp, #0]
 800d1b8:	4621      	mov	r1, r4
 800d1ba:	f009 fb91 	bl	80168e0 <sniprintf>
 800d1be:	2800      	cmp	r0, #0
 800d1c0:	bfa8      	it	ge
 800d1c2:	4284      	cmpge	r4, r0
 800d1c4:	bfcc      	ite	gt
 800d1c6:	2001      	movgt	r0, #1
 800d1c8:	2000      	movle	r0, #0
 800d1ca:	b003      	add	sp, #12
 800d1cc:	bd30      	pop	{r4, r5, pc}
 800d1ce:	bf00      	nop
 800d1d0:	0801846c 	.word	0x0801846c
 800d1d4:	08017c64 	.word	0x08017c64

0800d1d8 <is_uxrce_rmw_identifier_valid>:
 800d1d8:	b510      	push	{r4, lr}
 800d1da:	4604      	mov	r4, r0
 800d1dc:	b140      	cbz	r0, 800d1f0 <is_uxrce_rmw_identifier_valid+0x18>
 800d1de:	f006 f9c5 	bl	801356c <rmw_get_implementation_identifier>
 800d1e2:	4601      	mov	r1, r0
 800d1e4:	4620      	mov	r0, r4
 800d1e6:	f7f3 f82b 	bl	8000240 <strcmp>
 800d1ea:	fab0 f080 	clz	r0, r0
 800d1ee:	0940      	lsrs	r0, r0, #5
 800d1f0:	bd10      	pop	{r4, pc}
 800d1f2:	bf00      	nop

0800d1f4 <get_message_typesupport_handle>:
 800d1f4:	6883      	ldr	r3, [r0, #8]
 800d1f6:	4718      	bx	r3

0800d1f8 <get_message_typesupport_handle_function>:
 800d1f8:	b510      	push	{r4, lr}
 800d1fa:	4604      	mov	r4, r0
 800d1fc:	6800      	ldr	r0, [r0, #0]
 800d1fe:	f7f3 f81f 	bl	8000240 <strcmp>
 800d202:	2800      	cmp	r0, #0
 800d204:	bf0c      	ite	eq
 800d206:	4620      	moveq	r0, r4
 800d208:	2000      	movne	r0, #0
 800d20a:	bd10      	pop	{r4, pc}

0800d20c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure>:
 800d20c:	4b04      	ldr	r3, [pc, #16]	@ (800d220 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure+0x14>)
 800d20e:	681a      	ldr	r2, [r3, #0]
 800d210:	b10a      	cbz	r2, 800d216 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure+0xa>
 800d212:	4803      	ldr	r0, [pc, #12]	@ (800d220 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure+0x14>)
 800d214:	4770      	bx	lr
 800d216:	4a03      	ldr	r2, [pc, #12]	@ (800d224 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure+0x18>)
 800d218:	4801      	ldr	r0, [pc, #4]	@ (800d220 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure+0x14>)
 800d21a:	6812      	ldr	r2, [r2, #0]
 800d21c:	601a      	str	r2, [r3, #0]
 800d21e:	4770      	bx	lr
 800d220:	2000004c 	.word	0x2000004c
 800d224:	20000690 	.word	0x20000690

0800d228 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure>:
 800d228:	4a02      	ldr	r2, [pc, #8]	@ (800d234 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure+0xc>)
 800d22a:	4b03      	ldr	r3, [pc, #12]	@ (800d238 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure+0x10>)
 800d22c:	6812      	ldr	r2, [r2, #0]
 800d22e:	601a      	str	r2, [r3, #0]
 800d230:	4770      	bx	lr
 800d232:	bf00      	nop
 800d234:	20000690 	.word	0x20000690
 800d238:	2000004c 	.word	0x2000004c

0800d23c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800d23c:	4b04      	ldr	r3, [pc, #16]	@ (800d250 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800d23e:	681a      	ldr	r2, [r3, #0]
 800d240:	b10a      	cbz	r2, 800d246 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 800d242:	4803      	ldr	r0, [pc, #12]	@ (800d250 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800d244:	4770      	bx	lr
 800d246:	4a03      	ldr	r2, [pc, #12]	@ (800d254 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 800d248:	4801      	ldr	r0, [pc, #4]	@ (800d250 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800d24a:	6812      	ldr	r2, [r2, #0]
 800d24c:	601a      	str	r2, [r3, #0]
 800d24e:	4770      	bx	lr
 800d250:	20000060 	.word	0x20000060
 800d254:	20000690 	.word	0x20000690

0800d258 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800d258:	4a02      	ldr	r2, [pc, #8]	@ (800d264 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 800d25a:	4b03      	ldr	r3, [pc, #12]	@ (800d268 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 800d25c:	6812      	ldr	r2, [r2, #0]
 800d25e:	601a      	str	r2, [r3, #0]
 800d260:	4770      	bx	lr
 800d262:	bf00      	nop
 800d264:	20000690 	.word	0x20000690
 800d268:	20000060 	.word	0x20000060

0800d26c <sensor_msgs__msg__FluidPressure__rosidl_typesupport_introspection_c__FluidPressure_init_function>:
 800d26c:	f006 be80 	b.w	8013f70 <sensor_msgs__msg__FluidPressure__init>

0800d270 <sensor_msgs__msg__FluidPressure__rosidl_typesupport_introspection_c__FluidPressure_fini_function>:
 800d270:	f006 be90 	b.w	8013f94 <sensor_msgs__msg__FluidPressure__fini>

0800d274 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure>:
 800d274:	b508      	push	{r3, lr}
 800d276:	f000 f9fb 	bl	800d670 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800d27a:	4b06      	ldr	r3, [pc, #24]	@ (800d294 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure+0x20>)
 800d27c:	4906      	ldr	r1, [pc, #24]	@ (800d298 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure+0x24>)
 800d27e:	681a      	ldr	r2, [r3, #0]
 800d280:	60c8      	str	r0, [r1, #12]
 800d282:	b10a      	cbz	r2, 800d288 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure+0x14>
 800d284:	4803      	ldr	r0, [pc, #12]	@ (800d294 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure+0x20>)
 800d286:	bd08      	pop	{r3, pc}
 800d288:	4a04      	ldr	r2, [pc, #16]	@ (800d29c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure+0x28>)
 800d28a:	4802      	ldr	r0, [pc, #8]	@ (800d294 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure+0x20>)
 800d28c:	6812      	ldr	r2, [r2, #0]
 800d28e:	601a      	str	r2, [r3, #0]
 800d290:	bd08      	pop	{r3, pc}
 800d292:	bf00      	nop
 800d294:	20000120 	.word	0x20000120
 800d298:	2000006c 	.word	0x2000006c
 800d29c:	20000694 	.word	0x20000694

0800d2a0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 800d2a0:	2009      	movs	r0, #9
 800d2a2:	4770      	bx	lr

0800d2a4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 800d2a4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800d2a8:	4770      	bx	lr
 800d2aa:	bf00      	nop

0800d2ac <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 800d2ac:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800d2b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2b4:	e9c2 0100 	strd	r0, r1, [r2]
 800d2b8:	4770      	bx	lr
 800d2ba:	bf00      	nop

0800d2bc <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 800d2bc:	e9d2 2300 	ldrd	r2, r3, [r2]
 800d2c0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800d2c4:	e9c1 2300 	strd	r2, r3, [r1]
 800d2c8:	4770      	bx	lr
 800d2ca:	bf00      	nop

0800d2cc <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 800d2cc:	f006 be66 	b.w	8013f9c <sensor_msgs__msg__Imu__init>

0800d2d0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 800d2d0:	f006 beba 	b.w	8014048 <sensor_msgs__msg__Imu__fini>

0800d2d4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 800d2d4:	2009      	movs	r0, #9
 800d2d6:	4770      	bx	lr

0800d2d8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 800d2d8:	2009      	movs	r0, #9
 800d2da:	4770      	bx	lr

0800d2dc <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 800d2dc:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800d2e0:	4770      	bx	lr
 800d2e2:	bf00      	nop

0800d2e4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 800d2e4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800d2e8:	4770      	bx	lr
 800d2ea:	bf00      	nop

0800d2ec <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 800d2ec:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800d2f0:	4770      	bx	lr
 800d2f2:	bf00      	nop

0800d2f4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 800d2f4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800d2f8:	4770      	bx	lr
 800d2fa:	bf00      	nop

0800d2fc <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 800d2fc:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800d300:	4770      	bx	lr
 800d302:	bf00      	nop

0800d304 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 800d304:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800d308:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d30c:	e9c2 0100 	strd	r0, r1, [r2]
 800d310:	4770      	bx	lr
 800d312:	bf00      	nop

0800d314 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 800d314:	e9d2 2300 	ldrd	r2, r3, [r2]
 800d318:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800d31c:	e9c1 2300 	strd	r2, r3, [r1]
 800d320:	4770      	bx	lr
 800d322:	bf00      	nop

0800d324 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 800d324:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800d328:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d32c:	e9c2 0100 	strd	r0, r1, [r2]
 800d330:	4770      	bx	lr
 800d332:	bf00      	nop

0800d334 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 800d334:	e9d2 2300 	ldrd	r2, r3, [r2]
 800d338:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800d33c:	e9c1 2300 	strd	r2, r3, [r1]
 800d340:	4770      	bx	lr
 800d342:	bf00      	nop

0800d344 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800d344:	b510      	push	{r4, lr}
 800d346:	4c0c      	ldr	r4, [pc, #48]	@ (800d378 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 800d348:	f000 f992 	bl	800d670 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800d34c:	60e0      	str	r0, [r4, #12]
 800d34e:	f000 fab9 	bl	800d8c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800d352:	64a0      	str	r0, [r4, #72]	@ 0x48
 800d354:	f000 fac8 	bl	800d8e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d358:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800d35c:	f000 fac4 	bl	800d8e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d360:	4b06      	ldr	r3, [pc, #24]	@ (800d37c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800d362:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 800d366:	681a      	ldr	r2, [r3, #0]
 800d368:	b10a      	cbz	r2, 800d36e <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 800d36a:	4804      	ldr	r0, [pc, #16]	@ (800d37c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800d36c:	bd10      	pop	{r4, pc}
 800d36e:	4a04      	ldr	r2, [pc, #16]	@ (800d380 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 800d370:	4802      	ldr	r0, [pc, #8]	@ (800d37c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800d372:	6812      	ldr	r2, [r2, #0]
 800d374:	601a      	str	r2, [r3, #0]
 800d376:	bd10      	pop	{r4, pc}
 800d378:	2000012c 	.word	0x2000012c
 800d37c:	200002d0 	.word	0x200002d0
 800d380:	20000694 	.word	0x20000694

0800d384 <get_serialized_size_sensor_msgs__msg__FluidPressure>:
 800d384:	b538      	push	{r3, r4, r5, lr}
 800d386:	b188      	cbz	r0, 800d3ac <get_serialized_size_sensor_msgs__msg__FluidPressure+0x28>
 800d388:	460d      	mov	r5, r1
 800d38a:	f000 f995 	bl	800d6b8 <get_serialized_size_std_msgs__msg__Header>
 800d38e:	2108      	movs	r1, #8
 800d390:	182c      	adds	r4, r5, r0
 800d392:	f1c5 0508 	rsb	r5, r5, #8
 800d396:	4620      	mov	r0, r4
 800d398:	f002 f8de 	bl	800f558 <ucdr_alignment>
 800d39c:	2108      	movs	r1, #8
 800d39e:	4408      	add	r0, r1
 800d3a0:	4404      	add	r4, r0
 800d3a2:	4620      	mov	r0, r4
 800d3a4:	f002 f8d8 	bl	800f558 <ucdr_alignment>
 800d3a8:	4428      	add	r0, r5
 800d3aa:	4420      	add	r0, r4
 800d3ac:	bd38      	pop	{r3, r4, r5, pc}
 800d3ae:	bf00      	nop

0800d3b0 <_FluidPressure__cdr_deserialize>:
 800d3b0:	b538      	push	{r3, r4, r5, lr}
 800d3b2:	460c      	mov	r4, r1
 800d3b4:	b1a1      	cbz	r1, 800d3e0 <_FluidPressure__cdr_deserialize+0x30>
 800d3b6:	4605      	mov	r5, r0
 800d3b8:	f000 fa02 	bl	800d7c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	4621      	mov	r1, r4
 800d3c0:	4628      	mov	r0, r5
 800d3c2:	685b      	ldr	r3, [r3, #4]
 800d3c4:	68db      	ldr	r3, [r3, #12]
 800d3c6:	4798      	blx	r3
 800d3c8:	f104 0118 	add.w	r1, r4, #24
 800d3cc:	4628      	mov	r0, r5
 800d3ce:	f001 fed7 	bl	800f180 <ucdr_deserialize_double>
 800d3d2:	f104 0120 	add.w	r1, r4, #32
 800d3d6:	4628      	mov	r0, r5
 800d3d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3dc:	f001 bed0 	b.w	800f180 <ucdr_deserialize_double>
 800d3e0:	4608      	mov	r0, r1
 800d3e2:	bd38      	pop	{r3, r4, r5, pc}

0800d3e4 <_FluidPressure__cdr_serialize>:
 800d3e4:	b1b0      	cbz	r0, 800d414 <_FluidPressure__cdr_serialize+0x30>
 800d3e6:	b538      	push	{r3, r4, r5, lr}
 800d3e8:	4604      	mov	r4, r0
 800d3ea:	460d      	mov	r5, r1
 800d3ec:	f000 f9e8 	bl	800d7c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	4629      	mov	r1, r5
 800d3f4:	4620      	mov	r0, r4
 800d3f6:	685b      	ldr	r3, [r3, #4]
 800d3f8:	689b      	ldr	r3, [r3, #8]
 800d3fa:	4798      	blx	r3
 800d3fc:	4628      	mov	r0, r5
 800d3fe:	ed94 0b06 	vldr	d0, [r4, #24]
 800d402:	f001 fd1b 	bl	800ee3c <ucdr_serialize_double>
 800d406:	4628      	mov	r0, r5
 800d408:	ed94 0b08 	vldr	d0, [r4, #32]
 800d40c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d410:	f001 bd14 	b.w	800ee3c <ucdr_serialize_double>
 800d414:	4770      	bx	lr
 800d416:	bf00      	nop

0800d418 <_FluidPressure__get_serialized_size>:
 800d418:	b180      	cbz	r0, 800d43c <_FluidPressure__get_serialized_size+0x24>
 800d41a:	2100      	movs	r1, #0
 800d41c:	b510      	push	{r4, lr}
 800d41e:	f000 f94b 	bl	800d6b8 <get_serialized_size_std_msgs__msg__Header>
 800d422:	4604      	mov	r4, r0
 800d424:	2108      	movs	r1, #8
 800d426:	f002 f897 	bl	800f558 <ucdr_alignment>
 800d42a:	2108      	movs	r1, #8
 800d42c:	4420      	add	r0, r4
 800d42e:	1844      	adds	r4, r0, r1
 800d430:	4620      	mov	r0, r4
 800d432:	f002 f891 	bl	800f558 <ucdr_alignment>
 800d436:	3008      	adds	r0, #8
 800d438:	4420      	add	r0, r4
 800d43a:	bd10      	pop	{r4, pc}
 800d43c:	4770      	bx	lr
 800d43e:	bf00      	nop

0800d440 <_FluidPressure__max_serialized_size>:
 800d440:	b510      	push	{r4, lr}
 800d442:	b082      	sub	sp, #8
 800d444:	2301      	movs	r3, #1
 800d446:	2100      	movs	r1, #0
 800d448:	f10d 0007 	add.w	r0, sp, #7
 800d44c:	f88d 3007 	strb.w	r3, [sp, #7]
 800d450:	f000 f9ac 	bl	800d7ac <max_serialized_size_std_msgs__msg__Header>
 800d454:	4604      	mov	r4, r0
 800d456:	2108      	movs	r1, #8
 800d458:	f002 f87e 	bl	800f558 <ucdr_alignment>
 800d45c:	2108      	movs	r1, #8
 800d45e:	4420      	add	r0, r4
 800d460:	1844      	adds	r4, r0, r1
 800d462:	4620      	mov	r0, r4
 800d464:	f002 f878 	bl	800f558 <ucdr_alignment>
 800d468:	3008      	adds	r0, #8
 800d46a:	4420      	add	r0, r4
 800d46c:	b002      	add	sp, #8
 800d46e:	bd10      	pop	{r4, pc}

0800d470 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure>:
 800d470:	4800      	ldr	r0, [pc, #0]	@ (800d474 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure+0x4>)
 800d472:	4770      	bx	lr
 800d474:	200002dc 	.word	0x200002dc

0800d478 <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 800d478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d47c:	4680      	mov	r8, r0
 800d47e:	460f      	mov	r7, r1
 800d480:	f000 f91a 	bl	800d6b8 <get_serialized_size_std_msgs__msg__Header>
 800d484:	4604      	mov	r4, r0
 800d486:	f108 0018 	add.w	r0, r8, #24
 800d48a:	443c      	add	r4, r7
 800d48c:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800d490:	4621      	mov	r1, r4
 800d492:	f000 fa37 	bl	800d904 <get_serialized_size_geometry_msgs__msg__Quaternion>
 800d496:	4404      	add	r4, r0
 800d498:	2108      	movs	r1, #8
 800d49a:	4620      	mov	r0, r4
 800d49c:	f002 f85c 	bl	800f558 <ucdr_alignment>
 800d4a0:	4606      	mov	r6, r0
 800d4a2:	f108 0080 	add.w	r0, r8, #128	@ 0x80
 800d4a6:	3648      	adds	r6, #72	@ 0x48
 800d4a8:	4426      	add	r6, r4
 800d4aa:	4631      	mov	r1, r6
 800d4ac:	f000 fada 	bl	800da64 <get_serialized_size_geometry_msgs__msg__Vector3>
 800d4b0:	1835      	adds	r5, r6, r0
 800d4b2:	2108      	movs	r1, #8
 800d4b4:	4628      	mov	r0, r5
 800d4b6:	f002 f84f 	bl	800f558 <ucdr_alignment>
 800d4ba:	4604      	mov	r4, r0
 800d4bc:	f108 00e0 	add.w	r0, r8, #224	@ 0xe0
 800d4c0:	3448      	adds	r4, #72	@ 0x48
 800d4c2:	4425      	add	r5, r4
 800d4c4:	4629      	mov	r1, r5
 800d4c6:	f000 facd 	bl	800da64 <get_serialized_size_geometry_msgs__msg__Vector3>
 800d4ca:	4405      	add	r5, r0
 800d4cc:	2108      	movs	r1, #8
 800d4ce:	4628      	mov	r0, r5
 800d4d0:	f002 f842 	bl	800f558 <ucdr_alignment>
 800d4d4:	4438      	add	r0, r7
 800d4d6:	4428      	add	r0, r5
 800d4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d4dc <get_serialized_size_sensor_msgs__msg__Imu>:
 800d4dc:	b108      	cbz	r0, 800d4e2 <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 800d4de:	f7ff bfcb 	b.w	800d478 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800d4e2:	4770      	bx	lr

0800d4e4 <_Imu__get_serialized_size>:
 800d4e4:	b110      	cbz	r0, 800d4ec <_Imu__get_serialized_size+0x8>
 800d4e6:	2100      	movs	r1, #0
 800d4e8:	f7ff bfc6 	b.w	800d478 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800d4ec:	4770      	bx	lr
 800d4ee:	bf00      	nop

0800d4f0 <_Imu__cdr_deserialize>:
 800d4f0:	b538      	push	{r3, r4, r5, lr}
 800d4f2:	460c      	mov	r4, r1
 800d4f4:	2900      	cmp	r1, #0
 800d4f6:	d037      	beq.n	800d568 <_Imu__cdr_deserialize+0x78>
 800d4f8:	4605      	mov	r5, r0
 800d4fa:	f000 f961 	bl	800d7c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800d4fe:	4603      	mov	r3, r0
 800d500:	4621      	mov	r1, r4
 800d502:	4628      	mov	r0, r5
 800d504:	685b      	ldr	r3, [r3, #4]
 800d506:	68db      	ldr	r3, [r3, #12]
 800d508:	4798      	blx	r3
 800d50a:	f000 faa7 	bl	800da5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800d50e:	4603      	mov	r3, r0
 800d510:	f104 0118 	add.w	r1, r4, #24
 800d514:	4628      	mov	r0, r5
 800d516:	685b      	ldr	r3, [r3, #4]
 800d518:	68db      	ldr	r3, [r3, #12]
 800d51a:	4798      	blx	r3
 800d51c:	2209      	movs	r2, #9
 800d51e:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800d522:	4628      	mov	r0, r5
 800d524:	f000 fcb0 	bl	800de88 <ucdr_deserialize_array_double>
 800d528:	f000 fb24 	bl	800db74 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d52c:	4603      	mov	r3, r0
 800d52e:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 800d532:	4628      	mov	r0, r5
 800d534:	685b      	ldr	r3, [r3, #4]
 800d536:	68db      	ldr	r3, [r3, #12]
 800d538:	4798      	blx	r3
 800d53a:	2209      	movs	r2, #9
 800d53c:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800d540:	4628      	mov	r0, r5
 800d542:	f000 fca1 	bl	800de88 <ucdr_deserialize_array_double>
 800d546:	f000 fb15 	bl	800db74 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d54a:	4603      	mov	r3, r0
 800d54c:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 800d550:	4628      	mov	r0, r5
 800d552:	685b      	ldr	r3, [r3, #4]
 800d554:	68db      	ldr	r3, [r3, #12]
 800d556:	4798      	blx	r3
 800d558:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800d55c:	4628      	mov	r0, r5
 800d55e:	2209      	movs	r2, #9
 800d560:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d564:	f000 bc90 	b.w	800de88 <ucdr_deserialize_array_double>
 800d568:	4608      	mov	r0, r1
 800d56a:	bd38      	pop	{r3, r4, r5, pc}

0800d56c <_Imu__cdr_serialize>:
 800d56c:	2800      	cmp	r0, #0
 800d56e:	d039      	beq.n	800d5e4 <_Imu__cdr_serialize+0x78>
 800d570:	b538      	push	{r3, r4, r5, lr}
 800d572:	4604      	mov	r4, r0
 800d574:	460d      	mov	r5, r1
 800d576:	f000 f923 	bl	800d7c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800d57a:	4603      	mov	r3, r0
 800d57c:	4629      	mov	r1, r5
 800d57e:	4620      	mov	r0, r4
 800d580:	685b      	ldr	r3, [r3, #4]
 800d582:	689b      	ldr	r3, [r3, #8]
 800d584:	4798      	blx	r3
 800d586:	f000 fa69 	bl	800da5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800d58a:	4603      	mov	r3, r0
 800d58c:	4629      	mov	r1, r5
 800d58e:	f104 0018 	add.w	r0, r4, #24
 800d592:	685b      	ldr	r3, [r3, #4]
 800d594:	689b      	ldr	r3, [r3, #8]
 800d596:	4798      	blx	r3
 800d598:	2209      	movs	r2, #9
 800d59a:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800d59e:	4628      	mov	r0, r5
 800d5a0:	f000 fc1e 	bl	800dde0 <ucdr_serialize_array_double>
 800d5a4:	f000 fae6 	bl	800db74 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	4629      	mov	r1, r5
 800d5ac:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 800d5b0:	685b      	ldr	r3, [r3, #4]
 800d5b2:	689b      	ldr	r3, [r3, #8]
 800d5b4:	4798      	blx	r3
 800d5b6:	2209      	movs	r2, #9
 800d5b8:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800d5bc:	4628      	mov	r0, r5
 800d5be:	f000 fc0f 	bl	800dde0 <ucdr_serialize_array_double>
 800d5c2:	f000 fad7 	bl	800db74 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	4629      	mov	r1, r5
 800d5ca:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 800d5ce:	685b      	ldr	r3, [r3, #4]
 800d5d0:	689b      	ldr	r3, [r3, #8]
 800d5d2:	4798      	blx	r3
 800d5d4:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800d5d8:	4628      	mov	r0, r5
 800d5da:	2209      	movs	r2, #9
 800d5dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5e0:	f000 bbfe 	b.w	800dde0 <ucdr_serialize_array_double>
 800d5e4:	4770      	bx	lr
 800d5e6:	bf00      	nop

0800d5e8 <max_serialized_size_sensor_msgs__msg__Imu>:
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ee:	7003      	strb	r3, [r0, #0]
 800d5f0:	4680      	mov	r8, r0
 800d5f2:	460f      	mov	r7, r1
 800d5f4:	f000 f8da 	bl	800d7ac <max_serialized_size_std_msgs__msg__Header>
 800d5f8:	4604      	mov	r4, r0
 800d5fa:	4640      	mov	r0, r8
 800d5fc:	443c      	add	r4, r7
 800d5fe:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800d602:	4621      	mov	r1, r4
 800d604:	f000 fa0a 	bl	800da1c <max_serialized_size_geometry_msgs__msg__Quaternion>
 800d608:	4404      	add	r4, r0
 800d60a:	2108      	movs	r1, #8
 800d60c:	4620      	mov	r0, r4
 800d60e:	f001 ffa3 	bl	800f558 <ucdr_alignment>
 800d612:	4606      	mov	r6, r0
 800d614:	4640      	mov	r0, r8
 800d616:	3648      	adds	r6, #72	@ 0x48
 800d618:	4426      	add	r6, r4
 800d61a:	4631      	mov	r1, r6
 800d61c:	f000 fa90 	bl	800db40 <max_serialized_size_geometry_msgs__msg__Vector3>
 800d620:	1835      	adds	r5, r6, r0
 800d622:	2108      	movs	r1, #8
 800d624:	4628      	mov	r0, r5
 800d626:	f001 ff97 	bl	800f558 <ucdr_alignment>
 800d62a:	4604      	mov	r4, r0
 800d62c:	4640      	mov	r0, r8
 800d62e:	3448      	adds	r4, #72	@ 0x48
 800d630:	4425      	add	r5, r4
 800d632:	4629      	mov	r1, r5
 800d634:	f000 fa84 	bl	800db40 <max_serialized_size_geometry_msgs__msg__Vector3>
 800d638:	4405      	add	r5, r0
 800d63a:	2108      	movs	r1, #8
 800d63c:	4628      	mov	r0, r5
 800d63e:	f001 ff8b 	bl	800f558 <ucdr_alignment>
 800d642:	4438      	add	r0, r7
 800d644:	4428      	add	r0, r5
 800d646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d64a:	bf00      	nop

0800d64c <_Imu__max_serialized_size>:
 800d64c:	b500      	push	{lr}
 800d64e:	b083      	sub	sp, #12
 800d650:	2100      	movs	r1, #0
 800d652:	f10d 0007 	add.w	r0, sp, #7
 800d656:	f7ff ffc7 	bl	800d5e8 <max_serialized_size_sensor_msgs__msg__Imu>
 800d65a:	b003      	add	sp, #12
 800d65c:	f85d fb04 	ldr.w	pc, [sp], #4

0800d660 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800d660:	4800      	ldr	r0, [pc, #0]	@ (800d664 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 800d662:	4770      	bx	lr
 800d664:	20000304 	.word	0x20000304

0800d668 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 800d668:	f006 bd02 	b.w	8014070 <std_msgs__msg__Header__init>

0800d66c <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 800d66c:	f006 bd24 	b.w	80140b8 <std_msgs__msg__Header__fini>

0800d670 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800d670:	b508      	push	{r3, lr}
 800d672:	f000 f8ad 	bl	800d7d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d676:	4b06      	ldr	r3, [pc, #24]	@ (800d690 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800d678:	4906      	ldr	r1, [pc, #24]	@ (800d694 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 800d67a:	681a      	ldr	r2, [r3, #0]
 800d67c:	60c8      	str	r0, [r1, #12]
 800d67e:	b10a      	cbz	r2, 800d684 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 800d680:	4803      	ldr	r0, [pc, #12]	@ (800d690 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800d682:	bd08      	pop	{r3, pc}
 800d684:	4a04      	ldr	r2, [pc, #16]	@ (800d698 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 800d686:	4802      	ldr	r0, [pc, #8]	@ (800d690 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800d688:	6812      	ldr	r2, [r2, #0]
 800d68a:	601a      	str	r2, [r3, #0]
 800d68c:	bd08      	pop	{r3, pc}
 800d68e:	bf00      	nop
 800d690:	200003a4 	.word	0x200003a4
 800d694:	2000032c 	.word	0x2000032c
 800d698:	20000694 	.word	0x20000694

0800d69c <_Header__max_serialized_size>:
 800d69c:	b500      	push	{lr}
 800d69e:	b083      	sub	sp, #12
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	2100      	movs	r1, #0
 800d6a4:	f10d 0007 	add.w	r0, sp, #7
 800d6a8:	f88d 3007 	strb.w	r3, [sp, #7]
 800d6ac:	f000 f8ee 	bl	800d88c <max_serialized_size_builtin_interfaces__msg__Time>
 800d6b0:	b003      	add	sp, #12
 800d6b2:	f85d fb04 	ldr.w	pc, [sp], #4
 800d6b6:	bf00      	nop

0800d6b8 <get_serialized_size_std_msgs__msg__Header>:
 800d6b8:	b570      	push	{r4, r5, r6, lr}
 800d6ba:	4605      	mov	r5, r0
 800d6bc:	b168      	cbz	r0, 800d6da <get_serialized_size_std_msgs__msg__Header+0x22>
 800d6be:	460c      	mov	r4, r1
 800d6c0:	f000 f894 	bl	800d7ec <get_serialized_size_builtin_interfaces__msg__Time>
 800d6c4:	2104      	movs	r1, #4
 800d6c6:	1826      	adds	r6, r4, r0
 800d6c8:	f1c4 0405 	rsb	r4, r4, #5
 800d6cc:	4630      	mov	r0, r6
 800d6ce:	f001 ff43 	bl	800f558 <ucdr_alignment>
 800d6d2:	68e9      	ldr	r1, [r5, #12]
 800d6d4:	440c      	add	r4, r1
 800d6d6:	4404      	add	r4, r0
 800d6d8:	19a0      	adds	r0, r4, r6
 800d6da:	bd70      	pop	{r4, r5, r6, pc}

0800d6dc <_Header__cdr_deserialize>:
 800d6dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6de:	460c      	mov	r4, r1
 800d6e0:	b083      	sub	sp, #12
 800d6e2:	b1e9      	cbz	r1, 800d720 <_Header__cdr_deserialize+0x44>
 800d6e4:	4606      	mov	r6, r0
 800d6e6:	f000 f8e5 	bl	800d8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	4621      	mov	r1, r4
 800d6ee:	4630      	mov	r0, r6
 800d6f0:	685b      	ldr	r3, [r3, #4]
 800d6f2:	68db      	ldr	r3, [r3, #12]
 800d6f4:	4798      	blx	r3
 800d6f6:	6927      	ldr	r7, [r4, #16]
 800d6f8:	ab01      	add	r3, sp, #4
 800d6fa:	68a1      	ldr	r1, [r4, #8]
 800d6fc:	463a      	mov	r2, r7
 800d6fe:	4630      	mov	r0, r6
 800d700:	f001 ffac 	bl	800f65c <ucdr_deserialize_sequence_char>
 800d704:	9b01      	ldr	r3, [sp, #4]
 800d706:	4605      	mov	r5, r0
 800d708:	b920      	cbnz	r0, 800d714 <_Header__cdr_deserialize+0x38>
 800d70a:	429f      	cmp	r7, r3
 800d70c:	d30c      	bcc.n	800d728 <_Header__cdr_deserialize+0x4c>
 800d70e:	4628      	mov	r0, r5
 800d710:	b003      	add	sp, #12
 800d712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d714:	b103      	cbz	r3, 800d718 <_Header__cdr_deserialize+0x3c>
 800d716:	3b01      	subs	r3, #1
 800d718:	4628      	mov	r0, r5
 800d71a:	60e3      	str	r3, [r4, #12]
 800d71c:	b003      	add	sp, #12
 800d71e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d720:	460d      	mov	r5, r1
 800d722:	4628      	mov	r0, r5
 800d724:	b003      	add	sp, #12
 800d726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d728:	2101      	movs	r1, #1
 800d72a:	4630      	mov	r0, r6
 800d72c:	75b5      	strb	r5, [r6, #22]
 800d72e:	7571      	strb	r1, [r6, #21]
 800d730:	60e5      	str	r5, [r4, #12]
 800d732:	f001 ff29 	bl	800f588 <ucdr_align_to>
 800d736:	4630      	mov	r0, r6
 800d738:	9901      	ldr	r1, [sp, #4]
 800d73a:	f001 ff5d 	bl	800f5f8 <ucdr_advance_buffer>
 800d73e:	4628      	mov	r0, r5
 800d740:	b003      	add	sp, #12
 800d742:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d744 <_Header__cdr_serialize>:
 800d744:	b308      	cbz	r0, 800d78a <_Header__cdr_serialize+0x46>
 800d746:	b570      	push	{r4, r5, r6, lr}
 800d748:	4604      	mov	r4, r0
 800d74a:	460d      	mov	r5, r1
 800d74c:	f000 f8b2 	bl	800d8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d750:	4603      	mov	r3, r0
 800d752:	4629      	mov	r1, r5
 800d754:	4620      	mov	r0, r4
 800d756:	685b      	ldr	r3, [r3, #4]
 800d758:	689b      	ldr	r3, [r3, #8]
 800d75a:	4798      	blx	r3
 800d75c:	68a6      	ldr	r6, [r4, #8]
 800d75e:	b15e      	cbz	r6, 800d778 <_Header__cdr_serialize+0x34>
 800d760:	4630      	mov	r0, r6
 800d762:	f7f2 fd77 	bl	8000254 <strlen>
 800d766:	4603      	mov	r3, r0
 800d768:	1c42      	adds	r2, r0, #1
 800d76a:	4631      	mov	r1, r6
 800d76c:	4628      	mov	r0, r5
 800d76e:	60e3      	str	r3, [r4, #12]
 800d770:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d774:	f001 bf60 	b.w	800f638 <ucdr_serialize_sequence_char>
 800d778:	4633      	mov	r3, r6
 800d77a:	4632      	mov	r2, r6
 800d77c:	4631      	mov	r1, r6
 800d77e:	4628      	mov	r0, r5
 800d780:	60e3      	str	r3, [r4, #12]
 800d782:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d786:	f001 bf57 	b.w	800f638 <ucdr_serialize_sequence_char>
 800d78a:	4770      	bx	lr

0800d78c <_Header__get_serialized_size>:
 800d78c:	b538      	push	{r3, r4, r5, lr}
 800d78e:	4604      	mov	r4, r0
 800d790:	b150      	cbz	r0, 800d7a8 <_Header__get_serialized_size+0x1c>
 800d792:	2100      	movs	r1, #0
 800d794:	f000 f82a 	bl	800d7ec <get_serialized_size_builtin_interfaces__msg__Time>
 800d798:	2104      	movs	r1, #4
 800d79a:	4605      	mov	r5, r0
 800d79c:	f001 fedc 	bl	800f558 <ucdr_alignment>
 800d7a0:	68e2      	ldr	r2, [r4, #12]
 800d7a2:	3205      	adds	r2, #5
 800d7a4:	1953      	adds	r3, r2, r5
 800d7a6:	4418      	add	r0, r3
 800d7a8:	bd38      	pop	{r3, r4, r5, pc}
 800d7aa:	bf00      	nop

0800d7ac <max_serialized_size_std_msgs__msg__Header>:
 800d7ac:	2301      	movs	r3, #1
 800d7ae:	b510      	push	{r4, lr}
 800d7b0:	7003      	strb	r3, [r0, #0]
 800d7b2:	4604      	mov	r4, r0
 800d7b4:	f000 f86a 	bl	800d88c <max_serialized_size_builtin_interfaces__msg__Time>
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	7023      	strb	r3, [r4, #0]
 800d7bc:	bd10      	pop	{r4, pc}
 800d7be:	bf00      	nop

0800d7c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800d7c0:	4800      	ldr	r0, [pc, #0]	@ (800d7c4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800d7c2:	4770      	bx	lr
 800d7c4:	200003b0 	.word	0x200003b0

0800d7c8 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800d7c8:	f006 bc82 	b.w	80140d0 <builtin_interfaces__msg__Time__init>

0800d7cc <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800d7cc:	f006 bc84 	b.w	80140d8 <builtin_interfaces__msg__Time__fini>

0800d7d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800d7d0:	4b04      	ldr	r3, [pc, #16]	@ (800d7e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800d7d2:	681a      	ldr	r2, [r3, #0]
 800d7d4:	b10a      	cbz	r2, 800d7da <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800d7d6:	4803      	ldr	r0, [pc, #12]	@ (800d7e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800d7d8:	4770      	bx	lr
 800d7da:	4a03      	ldr	r2, [pc, #12]	@ (800d7e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800d7dc:	4801      	ldr	r0, [pc, #4]	@ (800d7e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800d7de:	6812      	ldr	r2, [r2, #0]
 800d7e0:	601a      	str	r2, [r3, #0]
 800d7e2:	4770      	bx	lr
 800d7e4:	20000450 	.word	0x20000450
 800d7e8:	20000694 	.word	0x20000694

0800d7ec <get_serialized_size_builtin_interfaces__msg__Time>:
 800d7ec:	b180      	cbz	r0, 800d810 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800d7ee:	b538      	push	{r3, r4, r5, lr}
 800d7f0:	460d      	mov	r5, r1
 800d7f2:	2104      	movs	r1, #4
 800d7f4:	4628      	mov	r0, r5
 800d7f6:	f001 feaf 	bl	800f558 <ucdr_alignment>
 800d7fa:	1d2b      	adds	r3, r5, #4
 800d7fc:	f1c5 0504 	rsb	r5, r5, #4
 800d800:	2104      	movs	r1, #4
 800d802:	181c      	adds	r4, r3, r0
 800d804:	4620      	mov	r0, r4
 800d806:	f001 fea7 	bl	800f558 <ucdr_alignment>
 800d80a:	4428      	add	r0, r5
 800d80c:	4420      	add	r0, r4
 800d80e:	bd38      	pop	{r3, r4, r5, pc}
 800d810:	4770      	bx	lr
 800d812:	bf00      	nop

0800d814 <_Time__cdr_deserialize>:
 800d814:	b538      	push	{r3, r4, r5, lr}
 800d816:	460c      	mov	r4, r1
 800d818:	b141      	cbz	r1, 800d82c <_Time__cdr_deserialize+0x18>
 800d81a:	4605      	mov	r5, r0
 800d81c:	f001 fa7e 	bl	800ed1c <ucdr_deserialize_int32_t>
 800d820:	1d21      	adds	r1, r4, #4
 800d822:	4628      	mov	r0, r5
 800d824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d828:	f000 bef6 	b.w	800e618 <ucdr_deserialize_uint32_t>
 800d82c:	4608      	mov	r0, r1
 800d82e:	bd38      	pop	{r3, r4, r5, pc}

0800d830 <_Time__cdr_serialize>:
 800d830:	b160      	cbz	r0, 800d84c <_Time__cdr_serialize+0x1c>
 800d832:	b538      	push	{r3, r4, r5, lr}
 800d834:	460d      	mov	r5, r1
 800d836:	4604      	mov	r4, r0
 800d838:	6801      	ldr	r1, [r0, #0]
 800d83a:	4628      	mov	r0, r5
 800d83c:	f001 f9d6 	bl	800ebec <ucdr_serialize_int32_t>
 800d840:	6861      	ldr	r1, [r4, #4]
 800d842:	4628      	mov	r0, r5
 800d844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d848:	f000 bdb6 	b.w	800e3b8 <ucdr_serialize_uint32_t>
 800d84c:	4770      	bx	lr
 800d84e:	bf00      	nop

0800d850 <_Time__get_serialized_size>:
 800d850:	b160      	cbz	r0, 800d86c <_Time__get_serialized_size+0x1c>
 800d852:	2104      	movs	r1, #4
 800d854:	2000      	movs	r0, #0
 800d856:	b510      	push	{r4, lr}
 800d858:	f001 fe7e 	bl	800f558 <ucdr_alignment>
 800d85c:	2104      	movs	r1, #4
 800d85e:	1844      	adds	r4, r0, r1
 800d860:	4620      	mov	r0, r4
 800d862:	f001 fe79 	bl	800f558 <ucdr_alignment>
 800d866:	3004      	adds	r0, #4
 800d868:	4420      	add	r0, r4
 800d86a:	bd10      	pop	{r4, pc}
 800d86c:	4770      	bx	lr
 800d86e:	bf00      	nop

0800d870 <_Time__max_serialized_size>:
 800d870:	b510      	push	{r4, lr}
 800d872:	2104      	movs	r1, #4
 800d874:	2000      	movs	r0, #0
 800d876:	f001 fe6f 	bl	800f558 <ucdr_alignment>
 800d87a:	2104      	movs	r1, #4
 800d87c:	1844      	adds	r4, r0, r1
 800d87e:	4620      	mov	r0, r4
 800d880:	f001 fe6a 	bl	800f558 <ucdr_alignment>
 800d884:	3004      	adds	r0, #4
 800d886:	4420      	add	r0, r4
 800d888:	bd10      	pop	{r4, pc}
 800d88a:	bf00      	nop

0800d88c <max_serialized_size_builtin_interfaces__msg__Time>:
 800d88c:	b538      	push	{r3, r4, r5, lr}
 800d88e:	460c      	mov	r4, r1
 800d890:	2301      	movs	r3, #1
 800d892:	2104      	movs	r1, #4
 800d894:	1d25      	adds	r5, r4, #4
 800d896:	7003      	strb	r3, [r0, #0]
 800d898:	4620      	mov	r0, r4
 800d89a:	f1c4 0404 	rsb	r4, r4, #4
 800d89e:	f001 fe5b 	bl	800f558 <ucdr_alignment>
 800d8a2:	4405      	add	r5, r0
 800d8a4:	2104      	movs	r1, #4
 800d8a6:	4628      	mov	r0, r5
 800d8a8:	f001 fe56 	bl	800f558 <ucdr_alignment>
 800d8ac:	4420      	add	r0, r4
 800d8ae:	4428      	add	r0, r5
 800d8b0:	bd38      	pop	{r3, r4, r5, pc}
 800d8b2:	bf00      	nop

0800d8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800d8b4:	4800      	ldr	r0, [pc, #0]	@ (800d8b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800d8b6:	4770      	bx	lr
 800d8b8:	2000045c 	.word	0x2000045c

0800d8bc <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 800d8bc:	f006 bc0e 	b.w	80140dc <geometry_msgs__msg__Quaternion__init>

0800d8c0 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 800d8c0:	f006 bc1c 	b.w	80140fc <geometry_msgs__msg__Quaternion__fini>

0800d8c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800d8c4:	4b04      	ldr	r3, [pc, #16]	@ (800d8d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800d8c6:	681a      	ldr	r2, [r3, #0]
 800d8c8:	b10a      	cbz	r2, 800d8ce <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 800d8ca:	4803      	ldr	r0, [pc, #12]	@ (800d8d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800d8cc:	4770      	bx	lr
 800d8ce:	4a03      	ldr	r2, [pc, #12]	@ (800d8dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 800d8d0:	4801      	ldr	r0, [pc, #4]	@ (800d8d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800d8d2:	6812      	ldr	r2, [r2, #0]
 800d8d4:	601a      	str	r2, [r3, #0]
 800d8d6:	4770      	bx	lr
 800d8d8:	20000574 	.word	0x20000574
 800d8dc:	20000694 	.word	0x20000694

0800d8e0 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800d8e0:	f006 bc0e 	b.w	8014100 <geometry_msgs__msg__Vector3__init>

0800d8e4 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800d8e4:	f006 bc10 	b.w	8014108 <geometry_msgs__msg__Vector3__fini>

0800d8e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800d8e8:	4b04      	ldr	r3, [pc, #16]	@ (800d8fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800d8ea:	681a      	ldr	r2, [r3, #0]
 800d8ec:	b10a      	cbz	r2, 800d8f2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800d8ee:	4803      	ldr	r0, [pc, #12]	@ (800d8fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800d8f0:	4770      	bx	lr
 800d8f2:	4a03      	ldr	r2, [pc, #12]	@ (800d900 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800d8f4:	4801      	ldr	r0, [pc, #4]	@ (800d8fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800d8f6:	6812      	ldr	r2, [r2, #0]
 800d8f8:	601a      	str	r2, [r3, #0]
 800d8fa:	4770      	bx	lr
 800d8fc:	20000634 	.word	0x20000634
 800d900:	20000694 	.word	0x20000694

0800d904 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 800d904:	b1e8      	cbz	r0, 800d942 <get_serialized_size_geometry_msgs__msg__Quaternion+0x3e>
 800d906:	b570      	push	{r4, r5, r6, lr}
 800d908:	460d      	mov	r5, r1
 800d90a:	2108      	movs	r1, #8
 800d90c:	4628      	mov	r0, r5
 800d90e:	f001 fe23 	bl	800f558 <ucdr_alignment>
 800d912:	f105 0308 	add.w	r3, r5, #8
 800d916:	2108      	movs	r1, #8
 800d918:	f1c5 0508 	rsb	r5, r5, #8
 800d91c:	181e      	adds	r6, r3, r0
 800d91e:	4630      	mov	r0, r6
 800d920:	f001 fe1a 	bl	800f558 <ucdr_alignment>
 800d924:	2108      	movs	r1, #8
 800d926:	1844      	adds	r4, r0, r1
 800d928:	4434      	add	r4, r6
 800d92a:	4620      	mov	r0, r4
 800d92c:	f001 fe14 	bl	800f558 <ucdr_alignment>
 800d930:	2108      	movs	r1, #8
 800d932:	4408      	add	r0, r1
 800d934:	4404      	add	r4, r0
 800d936:	4620      	mov	r0, r4
 800d938:	f001 fe0e 	bl	800f558 <ucdr_alignment>
 800d93c:	4428      	add	r0, r5
 800d93e:	4420      	add	r0, r4
 800d940:	bd70      	pop	{r4, r5, r6, pc}
 800d942:	4770      	bx	lr

0800d944 <_Quaternion__cdr_deserialize>:
 800d944:	b538      	push	{r3, r4, r5, lr}
 800d946:	460c      	mov	r4, r1
 800d948:	b199      	cbz	r1, 800d972 <_Quaternion__cdr_deserialize+0x2e>
 800d94a:	4605      	mov	r5, r0
 800d94c:	f001 fc18 	bl	800f180 <ucdr_deserialize_double>
 800d950:	f104 0108 	add.w	r1, r4, #8
 800d954:	4628      	mov	r0, r5
 800d956:	f001 fc13 	bl	800f180 <ucdr_deserialize_double>
 800d95a:	f104 0110 	add.w	r1, r4, #16
 800d95e:	4628      	mov	r0, r5
 800d960:	f001 fc0e 	bl	800f180 <ucdr_deserialize_double>
 800d964:	f104 0118 	add.w	r1, r4, #24
 800d968:	4628      	mov	r0, r5
 800d96a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d96e:	f001 bc07 	b.w	800f180 <ucdr_deserialize_double>
 800d972:	4608      	mov	r0, r1
 800d974:	bd38      	pop	{r3, r4, r5, pc}
 800d976:	bf00      	nop

0800d978 <_Quaternion__cdr_serialize>:
 800d978:	b1c0      	cbz	r0, 800d9ac <_Quaternion__cdr_serialize+0x34>
 800d97a:	b538      	push	{r3, r4, r5, lr}
 800d97c:	460d      	mov	r5, r1
 800d97e:	4604      	mov	r4, r0
 800d980:	ed90 0b00 	vldr	d0, [r0]
 800d984:	4608      	mov	r0, r1
 800d986:	f001 fa59 	bl	800ee3c <ucdr_serialize_double>
 800d98a:	4628      	mov	r0, r5
 800d98c:	ed94 0b02 	vldr	d0, [r4, #8]
 800d990:	f001 fa54 	bl	800ee3c <ucdr_serialize_double>
 800d994:	4628      	mov	r0, r5
 800d996:	ed94 0b04 	vldr	d0, [r4, #16]
 800d99a:	f001 fa4f 	bl	800ee3c <ucdr_serialize_double>
 800d99e:	4628      	mov	r0, r5
 800d9a0:	ed94 0b06 	vldr	d0, [r4, #24]
 800d9a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9a8:	f001 ba48 	b.w	800ee3c <ucdr_serialize_double>
 800d9ac:	4770      	bx	lr
 800d9ae:	bf00      	nop

0800d9b0 <_Quaternion__get_serialized_size>:
 800d9b0:	b1c0      	cbz	r0, 800d9e4 <_Quaternion__get_serialized_size+0x34>
 800d9b2:	2108      	movs	r1, #8
 800d9b4:	2000      	movs	r0, #0
 800d9b6:	b538      	push	{r3, r4, r5, lr}
 800d9b8:	f001 fdce 	bl	800f558 <ucdr_alignment>
 800d9bc:	2108      	movs	r1, #8
 800d9be:	1845      	adds	r5, r0, r1
 800d9c0:	4628      	mov	r0, r5
 800d9c2:	f001 fdc9 	bl	800f558 <ucdr_alignment>
 800d9c6:	2108      	movs	r1, #8
 800d9c8:	1844      	adds	r4, r0, r1
 800d9ca:	442c      	add	r4, r5
 800d9cc:	4620      	mov	r0, r4
 800d9ce:	f001 fdc3 	bl	800f558 <ucdr_alignment>
 800d9d2:	2108      	movs	r1, #8
 800d9d4:	4408      	add	r0, r1
 800d9d6:	4404      	add	r4, r0
 800d9d8:	4620      	mov	r0, r4
 800d9da:	f001 fdbd 	bl	800f558 <ucdr_alignment>
 800d9de:	3008      	adds	r0, #8
 800d9e0:	4420      	add	r0, r4
 800d9e2:	bd38      	pop	{r3, r4, r5, pc}
 800d9e4:	4770      	bx	lr
 800d9e6:	bf00      	nop

0800d9e8 <_Quaternion__max_serialized_size>:
 800d9e8:	b538      	push	{r3, r4, r5, lr}
 800d9ea:	2108      	movs	r1, #8
 800d9ec:	2000      	movs	r0, #0
 800d9ee:	f001 fdb3 	bl	800f558 <ucdr_alignment>
 800d9f2:	2108      	movs	r1, #8
 800d9f4:	1845      	adds	r5, r0, r1
 800d9f6:	4628      	mov	r0, r5
 800d9f8:	f001 fdae 	bl	800f558 <ucdr_alignment>
 800d9fc:	2108      	movs	r1, #8
 800d9fe:	1844      	adds	r4, r0, r1
 800da00:	442c      	add	r4, r5
 800da02:	4620      	mov	r0, r4
 800da04:	f001 fda8 	bl	800f558 <ucdr_alignment>
 800da08:	2108      	movs	r1, #8
 800da0a:	4408      	add	r0, r1
 800da0c:	4404      	add	r4, r0
 800da0e:	4620      	mov	r0, r4
 800da10:	f001 fda2 	bl	800f558 <ucdr_alignment>
 800da14:	3008      	adds	r0, #8
 800da16:	4420      	add	r0, r4
 800da18:	bd38      	pop	{r3, r4, r5, pc}
 800da1a:	bf00      	nop

0800da1c <max_serialized_size_geometry_msgs__msg__Quaternion>:
 800da1c:	b570      	push	{r4, r5, r6, lr}
 800da1e:	460c      	mov	r4, r1
 800da20:	2301      	movs	r3, #1
 800da22:	2108      	movs	r1, #8
 800da24:	f104 0508 	add.w	r5, r4, #8
 800da28:	7003      	strb	r3, [r0, #0]
 800da2a:	4620      	mov	r0, r4
 800da2c:	f1c4 0408 	rsb	r4, r4, #8
 800da30:	f001 fd92 	bl	800f558 <ucdr_alignment>
 800da34:	1946      	adds	r6, r0, r5
 800da36:	2108      	movs	r1, #8
 800da38:	4630      	mov	r0, r6
 800da3a:	f001 fd8d 	bl	800f558 <ucdr_alignment>
 800da3e:	2108      	movs	r1, #8
 800da40:	1845      	adds	r5, r0, r1
 800da42:	4435      	add	r5, r6
 800da44:	4628      	mov	r0, r5
 800da46:	f001 fd87 	bl	800f558 <ucdr_alignment>
 800da4a:	2108      	movs	r1, #8
 800da4c:	4408      	add	r0, r1
 800da4e:	4405      	add	r5, r0
 800da50:	4628      	mov	r0, r5
 800da52:	f001 fd81 	bl	800f558 <ucdr_alignment>
 800da56:	4420      	add	r0, r4
 800da58:	4428      	add	r0, r5
 800da5a:	bd70      	pop	{r4, r5, r6, pc}

0800da5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800da5c:	4800      	ldr	r0, [pc, #0]	@ (800da60 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 800da5e:	4770      	bx	lr
 800da60:	20000640 	.word	0x20000640

0800da64 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800da64:	b1b8      	cbz	r0, 800da96 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800da66:	b538      	push	{r3, r4, r5, lr}
 800da68:	460d      	mov	r5, r1
 800da6a:	2108      	movs	r1, #8
 800da6c:	4628      	mov	r0, r5
 800da6e:	f001 fd73 	bl	800f558 <ucdr_alignment>
 800da72:	f105 0308 	add.w	r3, r5, #8
 800da76:	2108      	movs	r1, #8
 800da78:	f1c5 0508 	rsb	r5, r5, #8
 800da7c:	181c      	adds	r4, r3, r0
 800da7e:	4620      	mov	r0, r4
 800da80:	f001 fd6a 	bl	800f558 <ucdr_alignment>
 800da84:	2108      	movs	r1, #8
 800da86:	4408      	add	r0, r1
 800da88:	4404      	add	r4, r0
 800da8a:	4620      	mov	r0, r4
 800da8c:	f001 fd64 	bl	800f558 <ucdr_alignment>
 800da90:	4428      	add	r0, r5
 800da92:	4420      	add	r0, r4
 800da94:	bd38      	pop	{r3, r4, r5, pc}
 800da96:	4770      	bx	lr

0800da98 <_Vector3__cdr_deserialize>:
 800da98:	b538      	push	{r3, r4, r5, lr}
 800da9a:	460c      	mov	r4, r1
 800da9c:	b171      	cbz	r1, 800dabc <_Vector3__cdr_deserialize+0x24>
 800da9e:	4605      	mov	r5, r0
 800daa0:	f001 fb6e 	bl	800f180 <ucdr_deserialize_double>
 800daa4:	f104 0108 	add.w	r1, r4, #8
 800daa8:	4628      	mov	r0, r5
 800daaa:	f001 fb69 	bl	800f180 <ucdr_deserialize_double>
 800daae:	f104 0110 	add.w	r1, r4, #16
 800dab2:	4628      	mov	r0, r5
 800dab4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dab8:	f001 bb62 	b.w	800f180 <ucdr_deserialize_double>
 800dabc:	4608      	mov	r0, r1
 800dabe:	bd38      	pop	{r3, r4, r5, pc}

0800dac0 <_Vector3__cdr_serialize>:
 800dac0:	b198      	cbz	r0, 800daea <_Vector3__cdr_serialize+0x2a>
 800dac2:	b538      	push	{r3, r4, r5, lr}
 800dac4:	460d      	mov	r5, r1
 800dac6:	4604      	mov	r4, r0
 800dac8:	ed90 0b00 	vldr	d0, [r0]
 800dacc:	4608      	mov	r0, r1
 800dace:	f001 f9b5 	bl	800ee3c <ucdr_serialize_double>
 800dad2:	4628      	mov	r0, r5
 800dad4:	ed94 0b02 	vldr	d0, [r4, #8]
 800dad8:	f001 f9b0 	bl	800ee3c <ucdr_serialize_double>
 800dadc:	4628      	mov	r0, r5
 800dade:	ed94 0b04 	vldr	d0, [r4, #16]
 800dae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dae6:	f001 b9a9 	b.w	800ee3c <ucdr_serialize_double>
 800daea:	4770      	bx	lr

0800daec <_Vector3__get_serialized_size>:
 800daec:	b190      	cbz	r0, 800db14 <_Vector3__get_serialized_size+0x28>
 800daee:	2108      	movs	r1, #8
 800daf0:	2000      	movs	r0, #0
 800daf2:	b510      	push	{r4, lr}
 800daf4:	f001 fd30 	bl	800f558 <ucdr_alignment>
 800daf8:	2108      	movs	r1, #8
 800dafa:	1844      	adds	r4, r0, r1
 800dafc:	4620      	mov	r0, r4
 800dafe:	f001 fd2b 	bl	800f558 <ucdr_alignment>
 800db02:	2108      	movs	r1, #8
 800db04:	4408      	add	r0, r1
 800db06:	4404      	add	r4, r0
 800db08:	4620      	mov	r0, r4
 800db0a:	f001 fd25 	bl	800f558 <ucdr_alignment>
 800db0e:	3008      	adds	r0, #8
 800db10:	4420      	add	r0, r4
 800db12:	bd10      	pop	{r4, pc}
 800db14:	4770      	bx	lr
 800db16:	bf00      	nop

0800db18 <_Vector3__max_serialized_size>:
 800db18:	b538      	push	{r3, r4, r5, lr}
 800db1a:	2108      	movs	r1, #8
 800db1c:	2000      	movs	r0, #0
 800db1e:	f001 fd1b 	bl	800f558 <ucdr_alignment>
 800db22:	2108      	movs	r1, #8
 800db24:	1845      	adds	r5, r0, r1
 800db26:	4628      	mov	r0, r5
 800db28:	f001 fd16 	bl	800f558 <ucdr_alignment>
 800db2c:	2108      	movs	r1, #8
 800db2e:	1844      	adds	r4, r0, r1
 800db30:	442c      	add	r4, r5
 800db32:	4620      	mov	r0, r4
 800db34:	f001 fd10 	bl	800f558 <ucdr_alignment>
 800db38:	3008      	adds	r0, #8
 800db3a:	4420      	add	r0, r4
 800db3c:	bd38      	pop	{r3, r4, r5, pc}
 800db3e:	bf00      	nop

0800db40 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800db40:	b570      	push	{r4, r5, r6, lr}
 800db42:	460c      	mov	r4, r1
 800db44:	2301      	movs	r3, #1
 800db46:	2108      	movs	r1, #8
 800db48:	f104 0508 	add.w	r5, r4, #8
 800db4c:	7003      	strb	r3, [r0, #0]
 800db4e:	4620      	mov	r0, r4
 800db50:	f1c4 0408 	rsb	r4, r4, #8
 800db54:	f001 fd00 	bl	800f558 <ucdr_alignment>
 800db58:	1946      	adds	r6, r0, r5
 800db5a:	2108      	movs	r1, #8
 800db5c:	4630      	mov	r0, r6
 800db5e:	f001 fcfb 	bl	800f558 <ucdr_alignment>
 800db62:	2108      	movs	r1, #8
 800db64:	1845      	adds	r5, r0, r1
 800db66:	4435      	add	r5, r6
 800db68:	4628      	mov	r0, r5
 800db6a:	f001 fcf5 	bl	800f558 <ucdr_alignment>
 800db6e:	4420      	add	r0, r4
 800db70:	4428      	add	r0, r5
 800db72:	bd70      	pop	{r4, r5, r6, pc}

0800db74 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800db74:	4800      	ldr	r0, [pc, #0]	@ (800db78 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800db76:	4770      	bx	lr
 800db78:	20000668 	.word	0x20000668

0800db7c <ucdr_serialize_endian_array_char>:
 800db7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db80:	4619      	mov	r1, r3
 800db82:	461f      	mov	r7, r3
 800db84:	4605      	mov	r5, r0
 800db86:	4690      	mov	r8, r2
 800db88:	f001 fc8e 	bl	800f4a8 <ucdr_check_buffer_available_for>
 800db8c:	b9e0      	cbnz	r0, 800dbc8 <ucdr_serialize_endian_array_char+0x4c>
 800db8e:	463e      	mov	r6, r7
 800db90:	e00b      	b.n	800dbaa <ucdr_serialize_endian_array_char+0x2e>
 800db92:	4441      	add	r1, r8
 800db94:	68a8      	ldr	r0, [r5, #8]
 800db96:	4622      	mov	r2, r4
 800db98:	1b36      	subs	r6, r6, r4
 800db9a:	f009 f8ce 	bl	8016d3a <memcpy>
 800db9e:	68ab      	ldr	r3, [r5, #8]
 800dba0:	6928      	ldr	r0, [r5, #16]
 800dba2:	4423      	add	r3, r4
 800dba4:	4420      	add	r0, r4
 800dba6:	60ab      	str	r3, [r5, #8]
 800dba8:	6128      	str	r0, [r5, #16]
 800dbaa:	4631      	mov	r1, r6
 800dbac:	2201      	movs	r2, #1
 800dbae:	4628      	mov	r0, r5
 800dbb0:	f001 fd04 	bl	800f5bc <ucdr_check_final_buffer_behavior_array>
 800dbb4:	1bb9      	subs	r1, r7, r6
 800dbb6:	4604      	mov	r4, r0
 800dbb8:	2800      	cmp	r0, #0
 800dbba:	d1ea      	bne.n	800db92 <ucdr_serialize_endian_array_char+0x16>
 800dbbc:	2301      	movs	r3, #1
 800dbbe:	7da8      	ldrb	r0, [r5, #22]
 800dbc0:	756b      	strb	r3, [r5, #21]
 800dbc2:	4058      	eors	r0, r3
 800dbc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbc8:	463a      	mov	r2, r7
 800dbca:	4641      	mov	r1, r8
 800dbcc:	68a8      	ldr	r0, [r5, #8]
 800dbce:	f009 f8b4 	bl	8016d3a <memcpy>
 800dbd2:	68aa      	ldr	r2, [r5, #8]
 800dbd4:	692b      	ldr	r3, [r5, #16]
 800dbd6:	443a      	add	r2, r7
 800dbd8:	443b      	add	r3, r7
 800dbda:	60aa      	str	r2, [r5, #8]
 800dbdc:	612b      	str	r3, [r5, #16]
 800dbde:	e7ed      	b.n	800dbbc <ucdr_serialize_endian_array_char+0x40>

0800dbe0 <ucdr_deserialize_endian_array_char>:
 800dbe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbe4:	4619      	mov	r1, r3
 800dbe6:	461f      	mov	r7, r3
 800dbe8:	4605      	mov	r5, r0
 800dbea:	4690      	mov	r8, r2
 800dbec:	f001 fc5c 	bl	800f4a8 <ucdr_check_buffer_available_for>
 800dbf0:	b9e8      	cbnz	r0, 800dc2e <ucdr_deserialize_endian_array_char+0x4e>
 800dbf2:	463e      	mov	r6, r7
 800dbf4:	e00c      	b.n	800dc10 <ucdr_deserialize_endian_array_char+0x30>
 800dbf6:	eb08 0003 	add.w	r0, r8, r3
 800dbfa:	68a9      	ldr	r1, [r5, #8]
 800dbfc:	4622      	mov	r2, r4
 800dbfe:	1b36      	subs	r6, r6, r4
 800dc00:	f009 f89b 	bl	8016d3a <memcpy>
 800dc04:	68ab      	ldr	r3, [r5, #8]
 800dc06:	6928      	ldr	r0, [r5, #16]
 800dc08:	4423      	add	r3, r4
 800dc0a:	4420      	add	r0, r4
 800dc0c:	60ab      	str	r3, [r5, #8]
 800dc0e:	6128      	str	r0, [r5, #16]
 800dc10:	4631      	mov	r1, r6
 800dc12:	2201      	movs	r2, #1
 800dc14:	4628      	mov	r0, r5
 800dc16:	f001 fcd1 	bl	800f5bc <ucdr_check_final_buffer_behavior_array>
 800dc1a:	1bbb      	subs	r3, r7, r6
 800dc1c:	4604      	mov	r4, r0
 800dc1e:	2800      	cmp	r0, #0
 800dc20:	d1e9      	bne.n	800dbf6 <ucdr_deserialize_endian_array_char+0x16>
 800dc22:	2301      	movs	r3, #1
 800dc24:	7da8      	ldrb	r0, [r5, #22]
 800dc26:	756b      	strb	r3, [r5, #21]
 800dc28:	4058      	eors	r0, r3
 800dc2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc2e:	463a      	mov	r2, r7
 800dc30:	68a9      	ldr	r1, [r5, #8]
 800dc32:	4640      	mov	r0, r8
 800dc34:	f009 f881 	bl	8016d3a <memcpy>
 800dc38:	68aa      	ldr	r2, [r5, #8]
 800dc3a:	692b      	ldr	r3, [r5, #16]
 800dc3c:	443a      	add	r2, r7
 800dc3e:	443b      	add	r3, r7
 800dc40:	60aa      	str	r2, [r5, #8]
 800dc42:	612b      	str	r3, [r5, #16]
 800dc44:	e7ed      	b.n	800dc22 <ucdr_deserialize_endian_array_char+0x42>
 800dc46:	bf00      	nop

0800dc48 <ucdr_serialize_array_uint8_t>:
 800dc48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc4c:	4688      	mov	r8, r1
 800dc4e:	4611      	mov	r1, r2
 800dc50:	4617      	mov	r7, r2
 800dc52:	4605      	mov	r5, r0
 800dc54:	f001 fc28 	bl	800f4a8 <ucdr_check_buffer_available_for>
 800dc58:	b9e0      	cbnz	r0, 800dc94 <ucdr_serialize_array_uint8_t+0x4c>
 800dc5a:	463e      	mov	r6, r7
 800dc5c:	e00b      	b.n	800dc76 <ucdr_serialize_array_uint8_t+0x2e>
 800dc5e:	4441      	add	r1, r8
 800dc60:	68a8      	ldr	r0, [r5, #8]
 800dc62:	4622      	mov	r2, r4
 800dc64:	1b36      	subs	r6, r6, r4
 800dc66:	f009 f868 	bl	8016d3a <memcpy>
 800dc6a:	68ab      	ldr	r3, [r5, #8]
 800dc6c:	6928      	ldr	r0, [r5, #16]
 800dc6e:	4423      	add	r3, r4
 800dc70:	4420      	add	r0, r4
 800dc72:	60ab      	str	r3, [r5, #8]
 800dc74:	6128      	str	r0, [r5, #16]
 800dc76:	4631      	mov	r1, r6
 800dc78:	2201      	movs	r2, #1
 800dc7a:	4628      	mov	r0, r5
 800dc7c:	f001 fc9e 	bl	800f5bc <ucdr_check_final_buffer_behavior_array>
 800dc80:	1bb9      	subs	r1, r7, r6
 800dc82:	4604      	mov	r4, r0
 800dc84:	2800      	cmp	r0, #0
 800dc86:	d1ea      	bne.n	800dc5e <ucdr_serialize_array_uint8_t+0x16>
 800dc88:	2301      	movs	r3, #1
 800dc8a:	7da8      	ldrb	r0, [r5, #22]
 800dc8c:	756b      	strb	r3, [r5, #21]
 800dc8e:	4058      	eors	r0, r3
 800dc90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc94:	463a      	mov	r2, r7
 800dc96:	4641      	mov	r1, r8
 800dc98:	68a8      	ldr	r0, [r5, #8]
 800dc9a:	f009 f84e 	bl	8016d3a <memcpy>
 800dc9e:	68aa      	ldr	r2, [r5, #8]
 800dca0:	692b      	ldr	r3, [r5, #16]
 800dca2:	443a      	add	r2, r7
 800dca4:	443b      	add	r3, r7
 800dca6:	60aa      	str	r2, [r5, #8]
 800dca8:	612b      	str	r3, [r5, #16]
 800dcaa:	e7ed      	b.n	800dc88 <ucdr_serialize_array_uint8_t+0x40>

0800dcac <ucdr_serialize_endian_array_uint8_t>:
 800dcac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcb0:	4619      	mov	r1, r3
 800dcb2:	461f      	mov	r7, r3
 800dcb4:	4605      	mov	r5, r0
 800dcb6:	4690      	mov	r8, r2
 800dcb8:	f001 fbf6 	bl	800f4a8 <ucdr_check_buffer_available_for>
 800dcbc:	b9e0      	cbnz	r0, 800dcf8 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800dcbe:	463e      	mov	r6, r7
 800dcc0:	e00b      	b.n	800dcda <ucdr_serialize_endian_array_uint8_t+0x2e>
 800dcc2:	4441      	add	r1, r8
 800dcc4:	68a8      	ldr	r0, [r5, #8]
 800dcc6:	4622      	mov	r2, r4
 800dcc8:	1b36      	subs	r6, r6, r4
 800dcca:	f009 f836 	bl	8016d3a <memcpy>
 800dcce:	68ab      	ldr	r3, [r5, #8]
 800dcd0:	6928      	ldr	r0, [r5, #16]
 800dcd2:	4423      	add	r3, r4
 800dcd4:	4420      	add	r0, r4
 800dcd6:	60ab      	str	r3, [r5, #8]
 800dcd8:	6128      	str	r0, [r5, #16]
 800dcda:	4631      	mov	r1, r6
 800dcdc:	2201      	movs	r2, #1
 800dcde:	4628      	mov	r0, r5
 800dce0:	f001 fc6c 	bl	800f5bc <ucdr_check_final_buffer_behavior_array>
 800dce4:	1bb9      	subs	r1, r7, r6
 800dce6:	4604      	mov	r4, r0
 800dce8:	2800      	cmp	r0, #0
 800dcea:	d1ea      	bne.n	800dcc2 <ucdr_serialize_endian_array_uint8_t+0x16>
 800dcec:	2301      	movs	r3, #1
 800dcee:	7da8      	ldrb	r0, [r5, #22]
 800dcf0:	756b      	strb	r3, [r5, #21]
 800dcf2:	4058      	eors	r0, r3
 800dcf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcf8:	463a      	mov	r2, r7
 800dcfa:	4641      	mov	r1, r8
 800dcfc:	68a8      	ldr	r0, [r5, #8]
 800dcfe:	f009 f81c 	bl	8016d3a <memcpy>
 800dd02:	68aa      	ldr	r2, [r5, #8]
 800dd04:	692b      	ldr	r3, [r5, #16]
 800dd06:	443a      	add	r2, r7
 800dd08:	443b      	add	r3, r7
 800dd0a:	60aa      	str	r2, [r5, #8]
 800dd0c:	612b      	str	r3, [r5, #16]
 800dd0e:	e7ed      	b.n	800dcec <ucdr_serialize_endian_array_uint8_t+0x40>

0800dd10 <ucdr_deserialize_array_uint8_t>:
 800dd10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd14:	4688      	mov	r8, r1
 800dd16:	4611      	mov	r1, r2
 800dd18:	4617      	mov	r7, r2
 800dd1a:	4605      	mov	r5, r0
 800dd1c:	f001 fbc4 	bl	800f4a8 <ucdr_check_buffer_available_for>
 800dd20:	b9e8      	cbnz	r0, 800dd5e <ucdr_deserialize_array_uint8_t+0x4e>
 800dd22:	463e      	mov	r6, r7
 800dd24:	e00c      	b.n	800dd40 <ucdr_deserialize_array_uint8_t+0x30>
 800dd26:	eb08 0003 	add.w	r0, r8, r3
 800dd2a:	68a9      	ldr	r1, [r5, #8]
 800dd2c:	4622      	mov	r2, r4
 800dd2e:	1b36      	subs	r6, r6, r4
 800dd30:	f009 f803 	bl	8016d3a <memcpy>
 800dd34:	68ab      	ldr	r3, [r5, #8]
 800dd36:	6928      	ldr	r0, [r5, #16]
 800dd38:	4423      	add	r3, r4
 800dd3a:	4420      	add	r0, r4
 800dd3c:	60ab      	str	r3, [r5, #8]
 800dd3e:	6128      	str	r0, [r5, #16]
 800dd40:	4631      	mov	r1, r6
 800dd42:	2201      	movs	r2, #1
 800dd44:	4628      	mov	r0, r5
 800dd46:	f001 fc39 	bl	800f5bc <ucdr_check_final_buffer_behavior_array>
 800dd4a:	1bbb      	subs	r3, r7, r6
 800dd4c:	4604      	mov	r4, r0
 800dd4e:	2800      	cmp	r0, #0
 800dd50:	d1e9      	bne.n	800dd26 <ucdr_deserialize_array_uint8_t+0x16>
 800dd52:	2301      	movs	r3, #1
 800dd54:	7da8      	ldrb	r0, [r5, #22]
 800dd56:	756b      	strb	r3, [r5, #21]
 800dd58:	4058      	eors	r0, r3
 800dd5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd5e:	463a      	mov	r2, r7
 800dd60:	68a9      	ldr	r1, [r5, #8]
 800dd62:	4640      	mov	r0, r8
 800dd64:	f008 ffe9 	bl	8016d3a <memcpy>
 800dd68:	68aa      	ldr	r2, [r5, #8]
 800dd6a:	692b      	ldr	r3, [r5, #16]
 800dd6c:	443a      	add	r2, r7
 800dd6e:	443b      	add	r3, r7
 800dd70:	60aa      	str	r2, [r5, #8]
 800dd72:	612b      	str	r3, [r5, #16]
 800dd74:	e7ed      	b.n	800dd52 <ucdr_deserialize_array_uint8_t+0x42>
 800dd76:	bf00      	nop

0800dd78 <ucdr_deserialize_endian_array_uint8_t>:
 800dd78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd7c:	4619      	mov	r1, r3
 800dd7e:	461f      	mov	r7, r3
 800dd80:	4605      	mov	r5, r0
 800dd82:	4690      	mov	r8, r2
 800dd84:	f001 fb90 	bl	800f4a8 <ucdr_check_buffer_available_for>
 800dd88:	b9e8      	cbnz	r0, 800ddc6 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 800dd8a:	463e      	mov	r6, r7
 800dd8c:	e00c      	b.n	800dda8 <ucdr_deserialize_endian_array_uint8_t+0x30>
 800dd8e:	eb08 0003 	add.w	r0, r8, r3
 800dd92:	68a9      	ldr	r1, [r5, #8]
 800dd94:	4622      	mov	r2, r4
 800dd96:	1b36      	subs	r6, r6, r4
 800dd98:	f008 ffcf 	bl	8016d3a <memcpy>
 800dd9c:	68ab      	ldr	r3, [r5, #8]
 800dd9e:	6928      	ldr	r0, [r5, #16]
 800dda0:	4423      	add	r3, r4
 800dda2:	4420      	add	r0, r4
 800dda4:	60ab      	str	r3, [r5, #8]
 800dda6:	6128      	str	r0, [r5, #16]
 800dda8:	4631      	mov	r1, r6
 800ddaa:	2201      	movs	r2, #1
 800ddac:	4628      	mov	r0, r5
 800ddae:	f001 fc05 	bl	800f5bc <ucdr_check_final_buffer_behavior_array>
 800ddb2:	1bbb      	subs	r3, r7, r6
 800ddb4:	4604      	mov	r4, r0
 800ddb6:	2800      	cmp	r0, #0
 800ddb8:	d1e9      	bne.n	800dd8e <ucdr_deserialize_endian_array_uint8_t+0x16>
 800ddba:	2301      	movs	r3, #1
 800ddbc:	7da8      	ldrb	r0, [r5, #22]
 800ddbe:	756b      	strb	r3, [r5, #21]
 800ddc0:	4058      	eors	r0, r3
 800ddc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddc6:	463a      	mov	r2, r7
 800ddc8:	68a9      	ldr	r1, [r5, #8]
 800ddca:	4640      	mov	r0, r8
 800ddcc:	f008 ffb5 	bl	8016d3a <memcpy>
 800ddd0:	68aa      	ldr	r2, [r5, #8]
 800ddd2:	692b      	ldr	r3, [r5, #16]
 800ddd4:	443a      	add	r2, r7
 800ddd6:	443b      	add	r3, r7
 800ddd8:	60aa      	str	r2, [r5, #8]
 800ddda:	612b      	str	r3, [r5, #16]
 800dddc:	e7ed      	b.n	800ddba <ucdr_deserialize_endian_array_uint8_t+0x42>
 800ddde:	bf00      	nop

0800dde0 <ucdr_serialize_array_double>:
 800dde0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dde4:	4604      	mov	r4, r0
 800dde6:	460e      	mov	r6, r1
 800dde8:	2108      	movs	r1, #8
 800ddea:	4617      	mov	r7, r2
 800ddec:	f001 fbbc 	bl	800f568 <ucdr_buffer_alignment>
 800ddf0:	4601      	mov	r1, r0
 800ddf2:	4620      	mov	r0, r4
 800ddf4:	7d65      	ldrb	r5, [r4, #21]
 800ddf6:	f001 fbff 	bl	800f5f8 <ucdr_advance_buffer>
 800ddfa:	7d21      	ldrb	r1, [r4, #20]
 800ddfc:	7565      	strb	r5, [r4, #21]
 800ddfe:	2901      	cmp	r1, #1
 800de00:	d010      	beq.n	800de24 <ucdr_serialize_array_double+0x44>
 800de02:	b157      	cbz	r7, 800de1a <ucdr_serialize_array_double+0x3a>
 800de04:	2500      	movs	r5, #0
 800de06:	e000      	b.n	800de0a <ucdr_serialize_array_double+0x2a>
 800de08:	7d21      	ldrb	r1, [r4, #20]
 800de0a:	3501      	adds	r5, #1
 800de0c:	4620      	mov	r0, r4
 800de0e:	ecb6 0b02 	vldmia	r6!, {d0}
 800de12:	f001 f8e3 	bl	800efdc <ucdr_serialize_endian_double>
 800de16:	42af      	cmp	r7, r5
 800de18:	d1f6      	bne.n	800de08 <ucdr_serialize_array_double+0x28>
 800de1a:	7da0      	ldrb	r0, [r4, #22]
 800de1c:	f080 0001 	eor.w	r0, r0, #1
 800de20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de24:	00ff      	lsls	r7, r7, #3
 800de26:	4620      	mov	r0, r4
 800de28:	4639      	mov	r1, r7
 800de2a:	f001 fb3d 	bl	800f4a8 <ucdr_check_buffer_available_for>
 800de2e:	b9f8      	cbnz	r0, 800de70 <ucdr_serialize_array_double+0x90>
 800de30:	46b8      	mov	r8, r7
 800de32:	e00c      	b.n	800de4e <ucdr_serialize_array_double+0x6e>
 800de34:	462a      	mov	r2, r5
 800de36:	4431      	add	r1, r6
 800de38:	68a0      	ldr	r0, [r4, #8]
 800de3a:	eba8 0805 	sub.w	r8, r8, r5
 800de3e:	f008 ff7c 	bl	8016d3a <memcpy>
 800de42:	68a2      	ldr	r2, [r4, #8]
 800de44:	6923      	ldr	r3, [r4, #16]
 800de46:	442a      	add	r2, r5
 800de48:	442b      	add	r3, r5
 800de4a:	60a2      	str	r2, [r4, #8]
 800de4c:	6123      	str	r3, [r4, #16]
 800de4e:	4641      	mov	r1, r8
 800de50:	2208      	movs	r2, #8
 800de52:	4620      	mov	r0, r4
 800de54:	f001 fbb2 	bl	800f5bc <ucdr_check_final_buffer_behavior_array>
 800de58:	eba7 0108 	sub.w	r1, r7, r8
 800de5c:	4605      	mov	r5, r0
 800de5e:	2800      	cmp	r0, #0
 800de60:	d1e8      	bne.n	800de34 <ucdr_serialize_array_double+0x54>
 800de62:	2308      	movs	r3, #8
 800de64:	7da0      	ldrb	r0, [r4, #22]
 800de66:	7563      	strb	r3, [r4, #21]
 800de68:	f080 0001 	eor.w	r0, r0, #1
 800de6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de70:	463a      	mov	r2, r7
 800de72:	4631      	mov	r1, r6
 800de74:	68a0      	ldr	r0, [r4, #8]
 800de76:	f008 ff60 	bl	8016d3a <memcpy>
 800de7a:	68a2      	ldr	r2, [r4, #8]
 800de7c:	6923      	ldr	r3, [r4, #16]
 800de7e:	443a      	add	r2, r7
 800de80:	441f      	add	r7, r3
 800de82:	60a2      	str	r2, [r4, #8]
 800de84:	6127      	str	r7, [r4, #16]
 800de86:	e7ec      	b.n	800de62 <ucdr_serialize_array_double+0x82>

0800de88 <ucdr_deserialize_array_double>:
 800de88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de8c:	4604      	mov	r4, r0
 800de8e:	460e      	mov	r6, r1
 800de90:	2108      	movs	r1, #8
 800de92:	4617      	mov	r7, r2
 800de94:	f001 fb68 	bl	800f568 <ucdr_buffer_alignment>
 800de98:	4601      	mov	r1, r0
 800de9a:	4620      	mov	r0, r4
 800de9c:	7d65      	ldrb	r5, [r4, #21]
 800de9e:	f001 fbab 	bl	800f5f8 <ucdr_advance_buffer>
 800dea2:	7d21      	ldrb	r1, [r4, #20]
 800dea4:	7565      	strb	r5, [r4, #21]
 800dea6:	2901      	cmp	r1, #1
 800dea8:	d010      	beq.n	800decc <ucdr_deserialize_array_double+0x44>
 800deaa:	b157      	cbz	r7, 800dec2 <ucdr_deserialize_array_double+0x3a>
 800deac:	2500      	movs	r5, #0
 800deae:	e000      	b.n	800deb2 <ucdr_deserialize_array_double+0x2a>
 800deb0:	7d21      	ldrb	r1, [r4, #20]
 800deb2:	3501      	adds	r5, #1
 800deb4:	4632      	mov	r2, r6
 800deb6:	4620      	mov	r0, r4
 800deb8:	3608      	adds	r6, #8
 800deba:	f001 fa27 	bl	800f30c <ucdr_deserialize_endian_double>
 800debe:	42af      	cmp	r7, r5
 800dec0:	d1f6      	bne.n	800deb0 <ucdr_deserialize_array_double+0x28>
 800dec2:	7da0      	ldrb	r0, [r4, #22]
 800dec4:	f080 0001 	eor.w	r0, r0, #1
 800dec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800decc:	00ff      	lsls	r7, r7, #3
 800dece:	4620      	mov	r0, r4
 800ded0:	4639      	mov	r1, r7
 800ded2:	f001 fae9 	bl	800f4a8 <ucdr_check_buffer_available_for>
 800ded6:	b9f8      	cbnz	r0, 800df18 <ucdr_deserialize_array_double+0x90>
 800ded8:	46b8      	mov	r8, r7
 800deda:	e00c      	b.n	800def6 <ucdr_deserialize_array_double+0x6e>
 800dedc:	18f0      	adds	r0, r6, r3
 800dede:	462a      	mov	r2, r5
 800dee0:	68a1      	ldr	r1, [r4, #8]
 800dee2:	eba8 0805 	sub.w	r8, r8, r5
 800dee6:	f008 ff28 	bl	8016d3a <memcpy>
 800deea:	68a2      	ldr	r2, [r4, #8]
 800deec:	6923      	ldr	r3, [r4, #16]
 800deee:	442a      	add	r2, r5
 800def0:	442b      	add	r3, r5
 800def2:	60a2      	str	r2, [r4, #8]
 800def4:	6123      	str	r3, [r4, #16]
 800def6:	4641      	mov	r1, r8
 800def8:	2208      	movs	r2, #8
 800defa:	4620      	mov	r0, r4
 800defc:	f001 fb5e 	bl	800f5bc <ucdr_check_final_buffer_behavior_array>
 800df00:	eba7 0308 	sub.w	r3, r7, r8
 800df04:	4605      	mov	r5, r0
 800df06:	2800      	cmp	r0, #0
 800df08:	d1e8      	bne.n	800dedc <ucdr_deserialize_array_double+0x54>
 800df0a:	2308      	movs	r3, #8
 800df0c:	7da0      	ldrb	r0, [r4, #22]
 800df0e:	7563      	strb	r3, [r4, #21]
 800df10:	f080 0001 	eor.w	r0, r0, #1
 800df14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df18:	463a      	mov	r2, r7
 800df1a:	68a1      	ldr	r1, [r4, #8]
 800df1c:	4630      	mov	r0, r6
 800df1e:	f008 ff0c 	bl	8016d3a <memcpy>
 800df22:	68a2      	ldr	r2, [r4, #8]
 800df24:	6923      	ldr	r3, [r4, #16]
 800df26:	443a      	add	r2, r7
 800df28:	441f      	add	r7, r3
 800df2a:	60a2      	str	r2, [r4, #8]
 800df2c:	6127      	str	r7, [r4, #16]
 800df2e:	e7ec      	b.n	800df0a <ucdr_deserialize_array_double+0x82>

0800df30 <ucdr_serialize_bool>:
 800df30:	b538      	push	{r3, r4, r5, lr}
 800df32:	460d      	mov	r5, r1
 800df34:	2101      	movs	r1, #1
 800df36:	4604      	mov	r4, r0
 800df38:	f001 fac2 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800df3c:	b148      	cbz	r0, 800df52 <ucdr_serialize_bool+0x22>
 800df3e:	68a3      	ldr	r3, [r4, #8]
 800df40:	2101      	movs	r1, #1
 800df42:	701d      	strb	r5, [r3, #0]
 800df44:	68a2      	ldr	r2, [r4, #8]
 800df46:	6923      	ldr	r3, [r4, #16]
 800df48:	440a      	add	r2, r1
 800df4a:	7561      	strb	r1, [r4, #21]
 800df4c:	440b      	add	r3, r1
 800df4e:	60a2      	str	r2, [r4, #8]
 800df50:	6123      	str	r3, [r4, #16]
 800df52:	7da0      	ldrb	r0, [r4, #22]
 800df54:	f080 0001 	eor.w	r0, r0, #1
 800df58:	bd38      	pop	{r3, r4, r5, pc}
 800df5a:	bf00      	nop

0800df5c <ucdr_deserialize_bool>:
 800df5c:	b538      	push	{r3, r4, r5, lr}
 800df5e:	460d      	mov	r5, r1
 800df60:	2101      	movs	r1, #1
 800df62:	4604      	mov	r4, r0
 800df64:	f001 faac 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800df68:	b160      	cbz	r0, 800df84 <ucdr_deserialize_bool+0x28>
 800df6a:	68a2      	ldr	r2, [r4, #8]
 800df6c:	2101      	movs	r1, #1
 800df6e:	6923      	ldr	r3, [r4, #16]
 800df70:	f812 0b01 	ldrb.w	r0, [r2], #1
 800df74:	440b      	add	r3, r1
 800df76:	3800      	subs	r0, #0
 800df78:	bf18      	it	ne
 800df7a:	2001      	movne	r0, #1
 800df7c:	7028      	strb	r0, [r5, #0]
 800df7e:	60a2      	str	r2, [r4, #8]
 800df80:	6123      	str	r3, [r4, #16]
 800df82:	7561      	strb	r1, [r4, #21]
 800df84:	7da0      	ldrb	r0, [r4, #22]
 800df86:	f080 0001 	eor.w	r0, r0, #1
 800df8a:	bd38      	pop	{r3, r4, r5, pc}

0800df8c <ucdr_serialize_uint8_t>:
 800df8c:	b538      	push	{r3, r4, r5, lr}
 800df8e:	460d      	mov	r5, r1
 800df90:	2101      	movs	r1, #1
 800df92:	4604      	mov	r4, r0
 800df94:	f001 fa94 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800df98:	b148      	cbz	r0, 800dfae <ucdr_serialize_uint8_t+0x22>
 800df9a:	68a3      	ldr	r3, [r4, #8]
 800df9c:	2101      	movs	r1, #1
 800df9e:	701d      	strb	r5, [r3, #0]
 800dfa0:	68a2      	ldr	r2, [r4, #8]
 800dfa2:	6923      	ldr	r3, [r4, #16]
 800dfa4:	440a      	add	r2, r1
 800dfa6:	7561      	strb	r1, [r4, #21]
 800dfa8:	440b      	add	r3, r1
 800dfaa:	60a2      	str	r2, [r4, #8]
 800dfac:	6123      	str	r3, [r4, #16]
 800dfae:	7da0      	ldrb	r0, [r4, #22]
 800dfb0:	f080 0001 	eor.w	r0, r0, #1
 800dfb4:	bd38      	pop	{r3, r4, r5, pc}
 800dfb6:	bf00      	nop

0800dfb8 <ucdr_deserialize_uint8_t>:
 800dfb8:	b538      	push	{r3, r4, r5, lr}
 800dfba:	460d      	mov	r5, r1
 800dfbc:	2101      	movs	r1, #1
 800dfbe:	4604      	mov	r4, r0
 800dfc0:	f001 fa7e 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800dfc4:	b150      	cbz	r0, 800dfdc <ucdr_deserialize_uint8_t+0x24>
 800dfc6:	68a3      	ldr	r3, [r4, #8]
 800dfc8:	2101      	movs	r1, #1
 800dfca:	781b      	ldrb	r3, [r3, #0]
 800dfcc:	702b      	strb	r3, [r5, #0]
 800dfce:	68a2      	ldr	r2, [r4, #8]
 800dfd0:	6923      	ldr	r3, [r4, #16]
 800dfd2:	440a      	add	r2, r1
 800dfd4:	7561      	strb	r1, [r4, #21]
 800dfd6:	440b      	add	r3, r1
 800dfd8:	60a2      	str	r2, [r4, #8]
 800dfda:	6123      	str	r3, [r4, #16]
 800dfdc:	7da0      	ldrb	r0, [r4, #22]
 800dfde:	f080 0001 	eor.w	r0, r0, #1
 800dfe2:	bd38      	pop	{r3, r4, r5, pc}

0800dfe4 <ucdr_serialize_uint16_t>:
 800dfe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfe8:	460b      	mov	r3, r1
 800dfea:	b082      	sub	sp, #8
 800dfec:	4604      	mov	r4, r0
 800dfee:	2102      	movs	r1, #2
 800dff0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800dff4:	f001 fab8 	bl	800f568 <ucdr_buffer_alignment>
 800dff8:	4601      	mov	r1, r0
 800dffa:	4620      	mov	r0, r4
 800dffc:	7d67      	ldrb	r7, [r4, #21]
 800dffe:	f001 fafb 	bl	800f5f8 <ucdr_advance_buffer>
 800e002:	2102      	movs	r1, #2
 800e004:	4620      	mov	r0, r4
 800e006:	f001 fa4f 	bl	800f4a8 <ucdr_check_buffer_available_for>
 800e00a:	bb78      	cbnz	r0, 800e06c <ucdr_serialize_uint16_t+0x88>
 800e00c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e010:	42ab      	cmp	r3, r5
 800e012:	d926      	bls.n	800e062 <ucdr_serialize_uint16_t+0x7e>
 800e014:	1b5e      	subs	r6, r3, r5
 800e016:	60a3      	str	r3, [r4, #8]
 800e018:	6923      	ldr	r3, [r4, #16]
 800e01a:	4620      	mov	r0, r4
 800e01c:	f1c6 0802 	rsb	r8, r6, #2
 800e020:	4433      	add	r3, r6
 800e022:	4641      	mov	r1, r8
 800e024:	6123      	str	r3, [r4, #16]
 800e026:	f001 fa4b 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800e02a:	2800      	cmp	r0, #0
 800e02c:	d03b      	beq.n	800e0a6 <ucdr_serialize_uint16_t+0xc2>
 800e02e:	7d23      	ldrb	r3, [r4, #20]
 800e030:	2b01      	cmp	r3, #1
 800e032:	d04a      	beq.n	800e0ca <ucdr_serialize_uint16_t+0xe6>
 800e034:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e038:	702b      	strb	r3, [r5, #0]
 800e03a:	2e00      	cmp	r6, #0
 800e03c:	d040      	beq.n	800e0c0 <ucdr_serialize_uint16_t+0xdc>
 800e03e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e042:	706b      	strb	r3, [r5, #1]
 800e044:	6923      	ldr	r3, [r4, #16]
 800e046:	2102      	movs	r1, #2
 800e048:	68a2      	ldr	r2, [r4, #8]
 800e04a:	3302      	adds	r3, #2
 800e04c:	7da0      	ldrb	r0, [r4, #22]
 800e04e:	4442      	add	r2, r8
 800e050:	7561      	strb	r1, [r4, #21]
 800e052:	1b9e      	subs	r6, r3, r6
 800e054:	f080 0001 	eor.w	r0, r0, #1
 800e058:	60a2      	str	r2, [r4, #8]
 800e05a:	6126      	str	r6, [r4, #16]
 800e05c:	b002      	add	sp, #8
 800e05e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e062:	2102      	movs	r1, #2
 800e064:	4620      	mov	r0, r4
 800e066:	f001 fa2b 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800e06a:	b190      	cbz	r0, 800e092 <ucdr_serialize_uint16_t+0xae>
 800e06c:	7d23      	ldrb	r3, [r4, #20]
 800e06e:	2b01      	cmp	r3, #1
 800e070:	68a3      	ldr	r3, [r4, #8]
 800e072:	d014      	beq.n	800e09e <ucdr_serialize_uint16_t+0xba>
 800e074:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e078:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e07c:	7019      	strb	r1, [r3, #0]
 800e07e:	68a3      	ldr	r3, [r4, #8]
 800e080:	705a      	strb	r2, [r3, #1]
 800e082:	2102      	movs	r1, #2
 800e084:	68a2      	ldr	r2, [r4, #8]
 800e086:	6923      	ldr	r3, [r4, #16]
 800e088:	440a      	add	r2, r1
 800e08a:	7561      	strb	r1, [r4, #21]
 800e08c:	440b      	add	r3, r1
 800e08e:	60a2      	str	r2, [r4, #8]
 800e090:	6123      	str	r3, [r4, #16]
 800e092:	7da0      	ldrb	r0, [r4, #22]
 800e094:	f080 0001 	eor.w	r0, r0, #1
 800e098:	b002      	add	sp, #8
 800e09a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e09e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e0a2:	801a      	strh	r2, [r3, #0]
 800e0a4:	e7ed      	b.n	800e082 <ucdr_serialize_uint16_t+0x9e>
 800e0a6:	68a2      	ldr	r2, [r4, #8]
 800e0a8:	6923      	ldr	r3, [r4, #16]
 800e0aa:	7da0      	ldrb	r0, [r4, #22]
 800e0ac:	1b92      	subs	r2, r2, r6
 800e0ae:	1b9b      	subs	r3, r3, r6
 800e0b0:	7567      	strb	r7, [r4, #21]
 800e0b2:	f080 0001 	eor.w	r0, r0, #1
 800e0b6:	60a2      	str	r2, [r4, #8]
 800e0b8:	6123      	str	r3, [r4, #16]
 800e0ba:	b002      	add	sp, #8
 800e0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0c0:	68a3      	ldr	r3, [r4, #8]
 800e0c2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e0c6:	701a      	strb	r2, [r3, #0]
 800e0c8:	e7bc      	b.n	800e044 <ucdr_serialize_uint16_t+0x60>
 800e0ca:	4628      	mov	r0, r5
 800e0cc:	f10d 0506 	add.w	r5, sp, #6
 800e0d0:	4632      	mov	r2, r6
 800e0d2:	4629      	mov	r1, r5
 800e0d4:	f008 fe31 	bl	8016d3a <memcpy>
 800e0d8:	4642      	mov	r2, r8
 800e0da:	19a9      	adds	r1, r5, r6
 800e0dc:	68a0      	ldr	r0, [r4, #8]
 800e0de:	f008 fe2c 	bl	8016d3a <memcpy>
 800e0e2:	e7af      	b.n	800e044 <ucdr_serialize_uint16_t+0x60>

0800e0e4 <ucdr_serialize_endian_uint16_t>:
 800e0e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e0e8:	4604      	mov	r4, r0
 800e0ea:	b083      	sub	sp, #12
 800e0ec:	460d      	mov	r5, r1
 800e0ee:	2102      	movs	r1, #2
 800e0f0:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e0f4:	f001 fa38 	bl	800f568 <ucdr_buffer_alignment>
 800e0f8:	4601      	mov	r1, r0
 800e0fa:	4620      	mov	r0, r4
 800e0fc:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e100:	f001 fa7a 	bl	800f5f8 <ucdr_advance_buffer>
 800e104:	2102      	movs	r1, #2
 800e106:	4620      	mov	r0, r4
 800e108:	f001 f9ce 	bl	800f4a8 <ucdr_check_buffer_available_for>
 800e10c:	bb70      	cbnz	r0, 800e16c <ucdr_serialize_endian_uint16_t+0x88>
 800e10e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800e112:	42be      	cmp	r6, r7
 800e114:	d925      	bls.n	800e162 <ucdr_serialize_endian_uint16_t+0x7e>
 800e116:	6923      	ldr	r3, [r4, #16]
 800e118:	4620      	mov	r0, r4
 800e11a:	60a6      	str	r6, [r4, #8]
 800e11c:	1bf6      	subs	r6, r6, r7
 800e11e:	4433      	add	r3, r6
 800e120:	f1c6 0902 	rsb	r9, r6, #2
 800e124:	6123      	str	r3, [r4, #16]
 800e126:	4649      	mov	r1, r9
 800e128:	f001 f9ca 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800e12c:	2800      	cmp	r0, #0
 800e12e:	d039      	beq.n	800e1a4 <ucdr_serialize_endian_uint16_t+0xc0>
 800e130:	2d01      	cmp	r5, #1
 800e132:	d04a      	beq.n	800e1ca <ucdr_serialize_endian_uint16_t+0xe6>
 800e134:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e138:	703b      	strb	r3, [r7, #0]
 800e13a:	2e00      	cmp	r6, #0
 800e13c:	d040      	beq.n	800e1c0 <ucdr_serialize_endian_uint16_t+0xdc>
 800e13e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e142:	707b      	strb	r3, [r7, #1]
 800e144:	6923      	ldr	r3, [r4, #16]
 800e146:	2102      	movs	r1, #2
 800e148:	68a2      	ldr	r2, [r4, #8]
 800e14a:	7da0      	ldrb	r0, [r4, #22]
 800e14c:	3302      	adds	r3, #2
 800e14e:	444a      	add	r2, r9
 800e150:	7561      	strb	r1, [r4, #21]
 800e152:	1b9b      	subs	r3, r3, r6
 800e154:	f080 0001 	eor.w	r0, r0, #1
 800e158:	60a2      	str	r2, [r4, #8]
 800e15a:	6123      	str	r3, [r4, #16]
 800e15c:	b003      	add	sp, #12
 800e15e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e162:	2102      	movs	r1, #2
 800e164:	4620      	mov	r0, r4
 800e166:	f001 f9ab 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800e16a:	b188      	cbz	r0, 800e190 <ucdr_serialize_endian_uint16_t+0xac>
 800e16c:	2d01      	cmp	r5, #1
 800e16e:	68a3      	ldr	r3, [r4, #8]
 800e170:	d014      	beq.n	800e19c <ucdr_serialize_endian_uint16_t+0xb8>
 800e172:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e176:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e17a:	7019      	strb	r1, [r3, #0]
 800e17c:	68a3      	ldr	r3, [r4, #8]
 800e17e:	705a      	strb	r2, [r3, #1]
 800e180:	2102      	movs	r1, #2
 800e182:	68a2      	ldr	r2, [r4, #8]
 800e184:	6923      	ldr	r3, [r4, #16]
 800e186:	440a      	add	r2, r1
 800e188:	7561      	strb	r1, [r4, #21]
 800e18a:	440b      	add	r3, r1
 800e18c:	60a2      	str	r2, [r4, #8]
 800e18e:	6123      	str	r3, [r4, #16]
 800e190:	7da0      	ldrb	r0, [r4, #22]
 800e192:	f080 0001 	eor.w	r0, r0, #1
 800e196:	b003      	add	sp, #12
 800e198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e19c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e1a0:	801a      	strh	r2, [r3, #0]
 800e1a2:	e7ed      	b.n	800e180 <ucdr_serialize_endian_uint16_t+0x9c>
 800e1a4:	68a2      	ldr	r2, [r4, #8]
 800e1a6:	6923      	ldr	r3, [r4, #16]
 800e1a8:	7da0      	ldrb	r0, [r4, #22]
 800e1aa:	1b92      	subs	r2, r2, r6
 800e1ac:	1b9b      	subs	r3, r3, r6
 800e1ae:	f884 8015 	strb.w	r8, [r4, #21]
 800e1b2:	f080 0001 	eor.w	r0, r0, #1
 800e1b6:	60a2      	str	r2, [r4, #8]
 800e1b8:	6123      	str	r3, [r4, #16]
 800e1ba:	b003      	add	sp, #12
 800e1bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1c0:	68a3      	ldr	r3, [r4, #8]
 800e1c2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e1c6:	701a      	strb	r2, [r3, #0]
 800e1c8:	e7bc      	b.n	800e144 <ucdr_serialize_endian_uint16_t+0x60>
 800e1ca:	f10d 0506 	add.w	r5, sp, #6
 800e1ce:	4632      	mov	r2, r6
 800e1d0:	4638      	mov	r0, r7
 800e1d2:	4629      	mov	r1, r5
 800e1d4:	f008 fdb1 	bl	8016d3a <memcpy>
 800e1d8:	464a      	mov	r2, r9
 800e1da:	19a9      	adds	r1, r5, r6
 800e1dc:	68a0      	ldr	r0, [r4, #8]
 800e1de:	f008 fdac 	bl	8016d3a <memcpy>
 800e1e2:	e7af      	b.n	800e144 <ucdr_serialize_endian_uint16_t+0x60>

0800e1e4 <ucdr_deserialize_uint16_t>:
 800e1e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1e8:	4604      	mov	r4, r0
 800e1ea:	460d      	mov	r5, r1
 800e1ec:	2102      	movs	r1, #2
 800e1ee:	f001 f9bb 	bl	800f568 <ucdr_buffer_alignment>
 800e1f2:	4601      	mov	r1, r0
 800e1f4:	4620      	mov	r0, r4
 800e1f6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e1fa:	f001 f9fd 	bl	800f5f8 <ucdr_advance_buffer>
 800e1fe:	2102      	movs	r1, #2
 800e200:	4620      	mov	r0, r4
 800e202:	f001 f951 	bl	800f4a8 <ucdr_check_buffer_available_for>
 800e206:	bb60      	cbnz	r0, 800e262 <ucdr_deserialize_uint16_t+0x7e>
 800e208:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800e20c:	42be      	cmp	r6, r7
 800e20e:	d923      	bls.n	800e258 <ucdr_deserialize_uint16_t+0x74>
 800e210:	6923      	ldr	r3, [r4, #16]
 800e212:	4620      	mov	r0, r4
 800e214:	60a6      	str	r6, [r4, #8]
 800e216:	1bf6      	subs	r6, r6, r7
 800e218:	4433      	add	r3, r6
 800e21a:	f1c6 0902 	rsb	r9, r6, #2
 800e21e:	6123      	str	r3, [r4, #16]
 800e220:	4649      	mov	r1, r9
 800e222:	f001 f94d 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800e226:	2800      	cmp	r0, #0
 800e228:	d034      	beq.n	800e294 <ucdr_deserialize_uint16_t+0xb0>
 800e22a:	7d23      	ldrb	r3, [r4, #20]
 800e22c:	2b01      	cmp	r3, #1
 800e22e:	d042      	beq.n	800e2b6 <ucdr_deserialize_uint16_t+0xd2>
 800e230:	787b      	ldrb	r3, [r7, #1]
 800e232:	702b      	strb	r3, [r5, #0]
 800e234:	2e00      	cmp	r6, #0
 800e236:	d03a      	beq.n	800e2ae <ucdr_deserialize_uint16_t+0xca>
 800e238:	783b      	ldrb	r3, [r7, #0]
 800e23a:	706b      	strb	r3, [r5, #1]
 800e23c:	6923      	ldr	r3, [r4, #16]
 800e23e:	2102      	movs	r1, #2
 800e240:	68a2      	ldr	r2, [r4, #8]
 800e242:	3302      	adds	r3, #2
 800e244:	7da0      	ldrb	r0, [r4, #22]
 800e246:	444a      	add	r2, r9
 800e248:	7561      	strb	r1, [r4, #21]
 800e24a:	1b9b      	subs	r3, r3, r6
 800e24c:	f080 0001 	eor.w	r0, r0, #1
 800e250:	60a2      	str	r2, [r4, #8]
 800e252:	6123      	str	r3, [r4, #16]
 800e254:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e258:	2102      	movs	r1, #2
 800e25a:	4620      	mov	r0, r4
 800e25c:	f001 f930 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800e260:	b180      	cbz	r0, 800e284 <ucdr_deserialize_uint16_t+0xa0>
 800e262:	7d23      	ldrb	r3, [r4, #20]
 800e264:	2b01      	cmp	r3, #1
 800e266:	68a3      	ldr	r3, [r4, #8]
 800e268:	d011      	beq.n	800e28e <ucdr_deserialize_uint16_t+0xaa>
 800e26a:	785b      	ldrb	r3, [r3, #1]
 800e26c:	702b      	strb	r3, [r5, #0]
 800e26e:	68a3      	ldr	r3, [r4, #8]
 800e270:	781b      	ldrb	r3, [r3, #0]
 800e272:	706b      	strb	r3, [r5, #1]
 800e274:	2102      	movs	r1, #2
 800e276:	68a2      	ldr	r2, [r4, #8]
 800e278:	6923      	ldr	r3, [r4, #16]
 800e27a:	440a      	add	r2, r1
 800e27c:	7561      	strb	r1, [r4, #21]
 800e27e:	440b      	add	r3, r1
 800e280:	60a2      	str	r2, [r4, #8]
 800e282:	6123      	str	r3, [r4, #16]
 800e284:	7da0      	ldrb	r0, [r4, #22]
 800e286:	f080 0001 	eor.w	r0, r0, #1
 800e28a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e28e:	881b      	ldrh	r3, [r3, #0]
 800e290:	802b      	strh	r3, [r5, #0]
 800e292:	e7ef      	b.n	800e274 <ucdr_deserialize_uint16_t+0x90>
 800e294:	68a2      	ldr	r2, [r4, #8]
 800e296:	6923      	ldr	r3, [r4, #16]
 800e298:	1b92      	subs	r2, r2, r6
 800e29a:	7da0      	ldrb	r0, [r4, #22]
 800e29c:	1b9b      	subs	r3, r3, r6
 800e29e:	f884 8015 	strb.w	r8, [r4, #21]
 800e2a2:	f080 0001 	eor.w	r0, r0, #1
 800e2a6:	60a2      	str	r2, [r4, #8]
 800e2a8:	6123      	str	r3, [r4, #16]
 800e2aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2ae:	68a3      	ldr	r3, [r4, #8]
 800e2b0:	781b      	ldrb	r3, [r3, #0]
 800e2b2:	706b      	strb	r3, [r5, #1]
 800e2b4:	e7c2      	b.n	800e23c <ucdr_deserialize_uint16_t+0x58>
 800e2b6:	4639      	mov	r1, r7
 800e2b8:	4632      	mov	r2, r6
 800e2ba:	4628      	mov	r0, r5
 800e2bc:	f008 fd3d 	bl	8016d3a <memcpy>
 800e2c0:	464a      	mov	r2, r9
 800e2c2:	19a8      	adds	r0, r5, r6
 800e2c4:	68a1      	ldr	r1, [r4, #8]
 800e2c6:	f008 fd38 	bl	8016d3a <memcpy>
 800e2ca:	e7b7      	b.n	800e23c <ucdr_deserialize_uint16_t+0x58>

0800e2cc <ucdr_deserialize_endian_uint16_t>:
 800e2cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2d0:	4604      	mov	r4, r0
 800e2d2:	460e      	mov	r6, r1
 800e2d4:	2102      	movs	r1, #2
 800e2d6:	4615      	mov	r5, r2
 800e2d8:	f001 f946 	bl	800f568 <ucdr_buffer_alignment>
 800e2dc:	4601      	mov	r1, r0
 800e2de:	4620      	mov	r0, r4
 800e2e0:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e2e4:	f001 f988 	bl	800f5f8 <ucdr_advance_buffer>
 800e2e8:	2102      	movs	r1, #2
 800e2ea:	4620      	mov	r0, r4
 800e2ec:	f001 f8dc 	bl	800f4a8 <ucdr_check_buffer_available_for>
 800e2f0:	bb70      	cbnz	r0, 800e350 <ucdr_deserialize_endian_uint16_t+0x84>
 800e2f2:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 800e2f6:	454f      	cmp	r7, r9
 800e2f8:	d925      	bls.n	800e346 <ucdr_deserialize_endian_uint16_t+0x7a>
 800e2fa:	6923      	ldr	r3, [r4, #16]
 800e2fc:	4620      	mov	r0, r4
 800e2fe:	60a7      	str	r7, [r4, #8]
 800e300:	eba7 0709 	sub.w	r7, r7, r9
 800e304:	443b      	add	r3, r7
 800e306:	f1c7 0a02 	rsb	sl, r7, #2
 800e30a:	6123      	str	r3, [r4, #16]
 800e30c:	4651      	mov	r1, sl
 800e30e:	f001 f8d7 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800e312:	2800      	cmp	r0, #0
 800e314:	d034      	beq.n	800e380 <ucdr_deserialize_endian_uint16_t+0xb4>
 800e316:	2e01      	cmp	r6, #1
 800e318:	d043      	beq.n	800e3a2 <ucdr_deserialize_endian_uint16_t+0xd6>
 800e31a:	f899 3001 	ldrb.w	r3, [r9, #1]
 800e31e:	702b      	strb	r3, [r5, #0]
 800e320:	2f00      	cmp	r7, #0
 800e322:	d03a      	beq.n	800e39a <ucdr_deserialize_endian_uint16_t+0xce>
 800e324:	f899 3000 	ldrb.w	r3, [r9]
 800e328:	706b      	strb	r3, [r5, #1]
 800e32a:	6923      	ldr	r3, [r4, #16]
 800e32c:	2102      	movs	r1, #2
 800e32e:	68a2      	ldr	r2, [r4, #8]
 800e330:	3302      	adds	r3, #2
 800e332:	7da0      	ldrb	r0, [r4, #22]
 800e334:	4452      	add	r2, sl
 800e336:	7561      	strb	r1, [r4, #21]
 800e338:	1bdb      	subs	r3, r3, r7
 800e33a:	f080 0001 	eor.w	r0, r0, #1
 800e33e:	60a2      	str	r2, [r4, #8]
 800e340:	6123      	str	r3, [r4, #16]
 800e342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e346:	2102      	movs	r1, #2
 800e348:	4620      	mov	r0, r4
 800e34a:	f001 f8b9 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800e34e:	b178      	cbz	r0, 800e370 <ucdr_deserialize_endian_uint16_t+0xa4>
 800e350:	2e01      	cmp	r6, #1
 800e352:	68a3      	ldr	r3, [r4, #8]
 800e354:	d011      	beq.n	800e37a <ucdr_deserialize_endian_uint16_t+0xae>
 800e356:	785b      	ldrb	r3, [r3, #1]
 800e358:	702b      	strb	r3, [r5, #0]
 800e35a:	68a3      	ldr	r3, [r4, #8]
 800e35c:	781b      	ldrb	r3, [r3, #0]
 800e35e:	706b      	strb	r3, [r5, #1]
 800e360:	2102      	movs	r1, #2
 800e362:	68a2      	ldr	r2, [r4, #8]
 800e364:	6923      	ldr	r3, [r4, #16]
 800e366:	440a      	add	r2, r1
 800e368:	7561      	strb	r1, [r4, #21]
 800e36a:	440b      	add	r3, r1
 800e36c:	60a2      	str	r2, [r4, #8]
 800e36e:	6123      	str	r3, [r4, #16]
 800e370:	7da0      	ldrb	r0, [r4, #22]
 800e372:	f080 0001 	eor.w	r0, r0, #1
 800e376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e37a:	881b      	ldrh	r3, [r3, #0]
 800e37c:	802b      	strh	r3, [r5, #0]
 800e37e:	e7ef      	b.n	800e360 <ucdr_deserialize_endian_uint16_t+0x94>
 800e380:	68a2      	ldr	r2, [r4, #8]
 800e382:	6923      	ldr	r3, [r4, #16]
 800e384:	1bd2      	subs	r2, r2, r7
 800e386:	7da0      	ldrb	r0, [r4, #22]
 800e388:	1bdb      	subs	r3, r3, r7
 800e38a:	f884 8015 	strb.w	r8, [r4, #21]
 800e38e:	f080 0001 	eor.w	r0, r0, #1
 800e392:	60a2      	str	r2, [r4, #8]
 800e394:	6123      	str	r3, [r4, #16]
 800e396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e39a:	68a3      	ldr	r3, [r4, #8]
 800e39c:	781b      	ldrb	r3, [r3, #0]
 800e39e:	706b      	strb	r3, [r5, #1]
 800e3a0:	e7c3      	b.n	800e32a <ucdr_deserialize_endian_uint16_t+0x5e>
 800e3a2:	4649      	mov	r1, r9
 800e3a4:	463a      	mov	r2, r7
 800e3a6:	4628      	mov	r0, r5
 800e3a8:	f008 fcc7 	bl	8016d3a <memcpy>
 800e3ac:	4652      	mov	r2, sl
 800e3ae:	19e8      	adds	r0, r5, r7
 800e3b0:	68a1      	ldr	r1, [r4, #8]
 800e3b2:	f008 fcc2 	bl	8016d3a <memcpy>
 800e3b6:	e7b8      	b.n	800e32a <ucdr_deserialize_endian_uint16_t+0x5e>

0800e3b8 <ucdr_serialize_uint32_t>:
 800e3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3bc:	b082      	sub	sp, #8
 800e3be:	4604      	mov	r4, r0
 800e3c0:	9101      	str	r1, [sp, #4]
 800e3c2:	2104      	movs	r1, #4
 800e3c4:	f001 f8d0 	bl	800f568 <ucdr_buffer_alignment>
 800e3c8:	4601      	mov	r1, r0
 800e3ca:	4620      	mov	r0, r4
 800e3cc:	7d67      	ldrb	r7, [r4, #21]
 800e3ce:	f001 f913 	bl	800f5f8 <ucdr_advance_buffer>
 800e3d2:	2104      	movs	r1, #4
 800e3d4:	4620      	mov	r0, r4
 800e3d6:	f001 f867 	bl	800f4a8 <ucdr_check_buffer_available_for>
 800e3da:	2800      	cmp	r0, #0
 800e3dc:	d139      	bne.n	800e452 <ucdr_serialize_uint32_t+0x9a>
 800e3de:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e3e2:	42ab      	cmp	r3, r5
 800e3e4:	d930      	bls.n	800e448 <ucdr_serialize_uint32_t+0x90>
 800e3e6:	1b5e      	subs	r6, r3, r5
 800e3e8:	60a3      	str	r3, [r4, #8]
 800e3ea:	6923      	ldr	r3, [r4, #16]
 800e3ec:	4620      	mov	r0, r4
 800e3ee:	f1c6 0804 	rsb	r8, r6, #4
 800e3f2:	4433      	add	r3, r6
 800e3f4:	4641      	mov	r1, r8
 800e3f6:	6123      	str	r3, [r4, #16]
 800e3f8:	f001 f862 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800e3fc:	2800      	cmp	r0, #0
 800e3fe:	d04c      	beq.n	800e49a <ucdr_serialize_uint32_t+0xe2>
 800e400:	7d23      	ldrb	r3, [r4, #20]
 800e402:	2b01      	cmp	r3, #1
 800e404:	d063      	beq.n	800e4ce <ucdr_serialize_uint32_t+0x116>
 800e406:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e40a:	702b      	strb	r3, [r5, #0]
 800e40c:	2e00      	cmp	r6, #0
 800e40e:	d051      	beq.n	800e4b4 <ucdr_serialize_uint32_t+0xfc>
 800e410:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e414:	2e01      	cmp	r6, #1
 800e416:	706b      	strb	r3, [r5, #1]
 800e418:	d050      	beq.n	800e4bc <ucdr_serialize_uint32_t+0x104>
 800e41a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e41e:	2e02      	cmp	r6, #2
 800e420:	70ab      	strb	r3, [r5, #2]
 800e422:	d04f      	beq.n	800e4c4 <ucdr_serialize_uint32_t+0x10c>
 800e424:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e428:	70eb      	strb	r3, [r5, #3]
 800e42a:	6923      	ldr	r3, [r4, #16]
 800e42c:	2104      	movs	r1, #4
 800e42e:	68a2      	ldr	r2, [r4, #8]
 800e430:	3304      	adds	r3, #4
 800e432:	7da0      	ldrb	r0, [r4, #22]
 800e434:	4442      	add	r2, r8
 800e436:	7561      	strb	r1, [r4, #21]
 800e438:	1b9e      	subs	r6, r3, r6
 800e43a:	f080 0001 	eor.w	r0, r0, #1
 800e43e:	60a2      	str	r2, [r4, #8]
 800e440:	6126      	str	r6, [r4, #16]
 800e442:	b002      	add	sp, #8
 800e444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e448:	2104      	movs	r1, #4
 800e44a:	4620      	mov	r0, r4
 800e44c:	f001 f838 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800e450:	b1d0      	cbz	r0, 800e488 <ucdr_serialize_uint32_t+0xd0>
 800e452:	7d23      	ldrb	r3, [r4, #20]
 800e454:	2b01      	cmp	r3, #1
 800e456:	68a3      	ldr	r3, [r4, #8]
 800e458:	d01c      	beq.n	800e494 <ucdr_serialize_uint32_t+0xdc>
 800e45a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800e45e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e462:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800e466:	7018      	strb	r0, [r3, #0]
 800e468:	68a3      	ldr	r3, [r4, #8]
 800e46a:	705a      	strb	r2, [r3, #1]
 800e46c:	68a3      	ldr	r3, [r4, #8]
 800e46e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e472:	7099      	strb	r1, [r3, #2]
 800e474:	68a3      	ldr	r3, [r4, #8]
 800e476:	70da      	strb	r2, [r3, #3]
 800e478:	2104      	movs	r1, #4
 800e47a:	68a2      	ldr	r2, [r4, #8]
 800e47c:	6923      	ldr	r3, [r4, #16]
 800e47e:	440a      	add	r2, r1
 800e480:	7561      	strb	r1, [r4, #21]
 800e482:	440b      	add	r3, r1
 800e484:	60a2      	str	r2, [r4, #8]
 800e486:	6123      	str	r3, [r4, #16]
 800e488:	7da0      	ldrb	r0, [r4, #22]
 800e48a:	f080 0001 	eor.w	r0, r0, #1
 800e48e:	b002      	add	sp, #8
 800e490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e494:	9a01      	ldr	r2, [sp, #4]
 800e496:	601a      	str	r2, [r3, #0]
 800e498:	e7ee      	b.n	800e478 <ucdr_serialize_uint32_t+0xc0>
 800e49a:	68a2      	ldr	r2, [r4, #8]
 800e49c:	6923      	ldr	r3, [r4, #16]
 800e49e:	7da0      	ldrb	r0, [r4, #22]
 800e4a0:	1b92      	subs	r2, r2, r6
 800e4a2:	1b9b      	subs	r3, r3, r6
 800e4a4:	7567      	strb	r7, [r4, #21]
 800e4a6:	f080 0001 	eor.w	r0, r0, #1
 800e4aa:	60a2      	str	r2, [r4, #8]
 800e4ac:	6123      	str	r3, [r4, #16]
 800e4ae:	b002      	add	sp, #8
 800e4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4b4:	68a3      	ldr	r3, [r4, #8]
 800e4b6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e4ba:	701a      	strb	r2, [r3, #0]
 800e4bc:	68a3      	ldr	r3, [r4, #8]
 800e4be:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e4c2:	701a      	strb	r2, [r3, #0]
 800e4c4:	68a3      	ldr	r3, [r4, #8]
 800e4c6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e4ca:	701a      	strb	r2, [r3, #0]
 800e4cc:	e7ad      	b.n	800e42a <ucdr_serialize_uint32_t+0x72>
 800e4ce:	4628      	mov	r0, r5
 800e4d0:	ad01      	add	r5, sp, #4
 800e4d2:	4632      	mov	r2, r6
 800e4d4:	4629      	mov	r1, r5
 800e4d6:	f008 fc30 	bl	8016d3a <memcpy>
 800e4da:	4642      	mov	r2, r8
 800e4dc:	19a9      	adds	r1, r5, r6
 800e4de:	68a0      	ldr	r0, [r4, #8]
 800e4e0:	f008 fc2b 	bl	8016d3a <memcpy>
 800e4e4:	e7a1      	b.n	800e42a <ucdr_serialize_uint32_t+0x72>
 800e4e6:	bf00      	nop

0800e4e8 <ucdr_serialize_endian_uint32_t>:
 800e4e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e4ec:	4604      	mov	r4, r0
 800e4ee:	b083      	sub	sp, #12
 800e4f0:	460d      	mov	r5, r1
 800e4f2:	2104      	movs	r1, #4
 800e4f4:	9201      	str	r2, [sp, #4]
 800e4f6:	f001 f837 	bl	800f568 <ucdr_buffer_alignment>
 800e4fa:	4601      	mov	r1, r0
 800e4fc:	4620      	mov	r0, r4
 800e4fe:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e502:	f001 f879 	bl	800f5f8 <ucdr_advance_buffer>
 800e506:	2104      	movs	r1, #4
 800e508:	4620      	mov	r0, r4
 800e50a:	f000 ffcd 	bl	800f4a8 <ucdr_check_buffer_available_for>
 800e50e:	2800      	cmp	r0, #0
 800e510:	d138      	bne.n	800e584 <ucdr_serialize_endian_uint32_t+0x9c>
 800e512:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e516:	42b7      	cmp	r7, r6
 800e518:	d92f      	bls.n	800e57a <ucdr_serialize_endian_uint32_t+0x92>
 800e51a:	6923      	ldr	r3, [r4, #16]
 800e51c:	4620      	mov	r0, r4
 800e51e:	60a7      	str	r7, [r4, #8]
 800e520:	1bbf      	subs	r7, r7, r6
 800e522:	443b      	add	r3, r7
 800e524:	f1c7 0904 	rsb	r9, r7, #4
 800e528:	6123      	str	r3, [r4, #16]
 800e52a:	4649      	mov	r1, r9
 800e52c:	f000 ffc8 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800e530:	2800      	cmp	r0, #0
 800e532:	d04a      	beq.n	800e5ca <ucdr_serialize_endian_uint32_t+0xe2>
 800e534:	2d01      	cmp	r5, #1
 800e536:	d063      	beq.n	800e600 <ucdr_serialize_endian_uint32_t+0x118>
 800e538:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e53c:	7033      	strb	r3, [r6, #0]
 800e53e:	2f00      	cmp	r7, #0
 800e540:	d051      	beq.n	800e5e6 <ucdr_serialize_endian_uint32_t+0xfe>
 800e542:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e546:	2f01      	cmp	r7, #1
 800e548:	7073      	strb	r3, [r6, #1]
 800e54a:	d050      	beq.n	800e5ee <ucdr_serialize_endian_uint32_t+0x106>
 800e54c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e550:	2f02      	cmp	r7, #2
 800e552:	70b3      	strb	r3, [r6, #2]
 800e554:	d04f      	beq.n	800e5f6 <ucdr_serialize_endian_uint32_t+0x10e>
 800e556:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e55a:	70f3      	strb	r3, [r6, #3]
 800e55c:	6923      	ldr	r3, [r4, #16]
 800e55e:	2104      	movs	r1, #4
 800e560:	68a2      	ldr	r2, [r4, #8]
 800e562:	7da0      	ldrb	r0, [r4, #22]
 800e564:	3304      	adds	r3, #4
 800e566:	444a      	add	r2, r9
 800e568:	7561      	strb	r1, [r4, #21]
 800e56a:	1bdb      	subs	r3, r3, r7
 800e56c:	f080 0001 	eor.w	r0, r0, #1
 800e570:	60a2      	str	r2, [r4, #8]
 800e572:	6123      	str	r3, [r4, #16]
 800e574:	b003      	add	sp, #12
 800e576:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e57a:	2104      	movs	r1, #4
 800e57c:	4620      	mov	r0, r4
 800e57e:	f000 ff9f 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800e582:	b1c8      	cbz	r0, 800e5b8 <ucdr_serialize_endian_uint32_t+0xd0>
 800e584:	2d01      	cmp	r5, #1
 800e586:	68a3      	ldr	r3, [r4, #8]
 800e588:	d01c      	beq.n	800e5c4 <ucdr_serialize_endian_uint32_t+0xdc>
 800e58a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800e58e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e592:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800e596:	7018      	strb	r0, [r3, #0]
 800e598:	68a3      	ldr	r3, [r4, #8]
 800e59a:	705a      	strb	r2, [r3, #1]
 800e59c:	68a3      	ldr	r3, [r4, #8]
 800e59e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e5a2:	7099      	strb	r1, [r3, #2]
 800e5a4:	68a3      	ldr	r3, [r4, #8]
 800e5a6:	70da      	strb	r2, [r3, #3]
 800e5a8:	2104      	movs	r1, #4
 800e5aa:	68a2      	ldr	r2, [r4, #8]
 800e5ac:	6923      	ldr	r3, [r4, #16]
 800e5ae:	440a      	add	r2, r1
 800e5b0:	7561      	strb	r1, [r4, #21]
 800e5b2:	440b      	add	r3, r1
 800e5b4:	60a2      	str	r2, [r4, #8]
 800e5b6:	6123      	str	r3, [r4, #16]
 800e5b8:	7da0      	ldrb	r0, [r4, #22]
 800e5ba:	f080 0001 	eor.w	r0, r0, #1
 800e5be:	b003      	add	sp, #12
 800e5c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e5c4:	9a01      	ldr	r2, [sp, #4]
 800e5c6:	601a      	str	r2, [r3, #0]
 800e5c8:	e7ee      	b.n	800e5a8 <ucdr_serialize_endian_uint32_t+0xc0>
 800e5ca:	68a2      	ldr	r2, [r4, #8]
 800e5cc:	6923      	ldr	r3, [r4, #16]
 800e5ce:	7da0      	ldrb	r0, [r4, #22]
 800e5d0:	1bd2      	subs	r2, r2, r7
 800e5d2:	1bdb      	subs	r3, r3, r7
 800e5d4:	f884 8015 	strb.w	r8, [r4, #21]
 800e5d8:	f080 0001 	eor.w	r0, r0, #1
 800e5dc:	60a2      	str	r2, [r4, #8]
 800e5de:	6123      	str	r3, [r4, #16]
 800e5e0:	b003      	add	sp, #12
 800e5e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e5e6:	68a3      	ldr	r3, [r4, #8]
 800e5e8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e5ec:	701a      	strb	r2, [r3, #0]
 800e5ee:	68a3      	ldr	r3, [r4, #8]
 800e5f0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e5f4:	701a      	strb	r2, [r3, #0]
 800e5f6:	68a3      	ldr	r3, [r4, #8]
 800e5f8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e5fc:	701a      	strb	r2, [r3, #0]
 800e5fe:	e7ad      	b.n	800e55c <ucdr_serialize_endian_uint32_t+0x74>
 800e600:	ad01      	add	r5, sp, #4
 800e602:	463a      	mov	r2, r7
 800e604:	4630      	mov	r0, r6
 800e606:	4629      	mov	r1, r5
 800e608:	f008 fb97 	bl	8016d3a <memcpy>
 800e60c:	464a      	mov	r2, r9
 800e60e:	19e9      	adds	r1, r5, r7
 800e610:	68a0      	ldr	r0, [r4, #8]
 800e612:	f008 fb92 	bl	8016d3a <memcpy>
 800e616:	e7a1      	b.n	800e55c <ucdr_serialize_endian_uint32_t+0x74>

0800e618 <ucdr_deserialize_uint32_t>:
 800e618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e61c:	4604      	mov	r4, r0
 800e61e:	460d      	mov	r5, r1
 800e620:	2104      	movs	r1, #4
 800e622:	f000 ffa1 	bl	800f568 <ucdr_buffer_alignment>
 800e626:	4601      	mov	r1, r0
 800e628:	4620      	mov	r0, r4
 800e62a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e62e:	f000 ffe3 	bl	800f5f8 <ucdr_advance_buffer>
 800e632:	2104      	movs	r1, #4
 800e634:	4620      	mov	r0, r4
 800e636:	f000 ff37 	bl	800f4a8 <ucdr_check_buffer_available_for>
 800e63a:	2800      	cmp	r0, #0
 800e63c:	d138      	bne.n	800e6b0 <ucdr_deserialize_uint32_t+0x98>
 800e63e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e642:	42b7      	cmp	r7, r6
 800e644:	d92f      	bls.n	800e6a6 <ucdr_deserialize_uint32_t+0x8e>
 800e646:	6923      	ldr	r3, [r4, #16]
 800e648:	4620      	mov	r0, r4
 800e64a:	60a7      	str	r7, [r4, #8]
 800e64c:	1bbf      	subs	r7, r7, r6
 800e64e:	443b      	add	r3, r7
 800e650:	f1c7 0904 	rsb	r9, r7, #4
 800e654:	6123      	str	r3, [r4, #16]
 800e656:	4649      	mov	r1, r9
 800e658:	f000 ff32 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800e65c:	2800      	cmp	r0, #0
 800e65e:	d046      	beq.n	800e6ee <ucdr_deserialize_uint32_t+0xd6>
 800e660:	7d23      	ldrb	r3, [r4, #20]
 800e662:	2b01      	cmp	r3, #1
 800e664:	d05c      	beq.n	800e720 <ucdr_deserialize_uint32_t+0x108>
 800e666:	78f3      	ldrb	r3, [r6, #3]
 800e668:	702b      	strb	r3, [r5, #0]
 800e66a:	2f00      	cmp	r7, #0
 800e66c:	d04c      	beq.n	800e708 <ucdr_deserialize_uint32_t+0xf0>
 800e66e:	78b3      	ldrb	r3, [r6, #2]
 800e670:	2f01      	cmp	r7, #1
 800e672:	706b      	strb	r3, [r5, #1]
 800e674:	f105 0302 	add.w	r3, r5, #2
 800e678:	d04a      	beq.n	800e710 <ucdr_deserialize_uint32_t+0xf8>
 800e67a:	7873      	ldrb	r3, [r6, #1]
 800e67c:	2f02      	cmp	r7, #2
 800e67e:	70ab      	strb	r3, [r5, #2]
 800e680:	f105 0303 	add.w	r3, r5, #3
 800e684:	d048      	beq.n	800e718 <ucdr_deserialize_uint32_t+0x100>
 800e686:	7833      	ldrb	r3, [r6, #0]
 800e688:	70eb      	strb	r3, [r5, #3]
 800e68a:	6923      	ldr	r3, [r4, #16]
 800e68c:	2104      	movs	r1, #4
 800e68e:	68a2      	ldr	r2, [r4, #8]
 800e690:	3304      	adds	r3, #4
 800e692:	7da0      	ldrb	r0, [r4, #22]
 800e694:	444a      	add	r2, r9
 800e696:	7561      	strb	r1, [r4, #21]
 800e698:	1bdb      	subs	r3, r3, r7
 800e69a:	f080 0001 	eor.w	r0, r0, #1
 800e69e:	60a2      	str	r2, [r4, #8]
 800e6a0:	6123      	str	r3, [r4, #16]
 800e6a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6a6:	2104      	movs	r1, #4
 800e6a8:	4620      	mov	r0, r4
 800e6aa:	f000 ff09 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800e6ae:	b1b0      	cbz	r0, 800e6de <ucdr_deserialize_uint32_t+0xc6>
 800e6b0:	7d23      	ldrb	r3, [r4, #20]
 800e6b2:	2b01      	cmp	r3, #1
 800e6b4:	68a3      	ldr	r3, [r4, #8]
 800e6b6:	d017      	beq.n	800e6e8 <ucdr_deserialize_uint32_t+0xd0>
 800e6b8:	78db      	ldrb	r3, [r3, #3]
 800e6ba:	702b      	strb	r3, [r5, #0]
 800e6bc:	68a3      	ldr	r3, [r4, #8]
 800e6be:	789b      	ldrb	r3, [r3, #2]
 800e6c0:	706b      	strb	r3, [r5, #1]
 800e6c2:	68a3      	ldr	r3, [r4, #8]
 800e6c4:	785b      	ldrb	r3, [r3, #1]
 800e6c6:	70ab      	strb	r3, [r5, #2]
 800e6c8:	68a3      	ldr	r3, [r4, #8]
 800e6ca:	781b      	ldrb	r3, [r3, #0]
 800e6cc:	70eb      	strb	r3, [r5, #3]
 800e6ce:	2104      	movs	r1, #4
 800e6d0:	68a2      	ldr	r2, [r4, #8]
 800e6d2:	6923      	ldr	r3, [r4, #16]
 800e6d4:	440a      	add	r2, r1
 800e6d6:	7561      	strb	r1, [r4, #21]
 800e6d8:	440b      	add	r3, r1
 800e6da:	60a2      	str	r2, [r4, #8]
 800e6dc:	6123      	str	r3, [r4, #16]
 800e6de:	7da0      	ldrb	r0, [r4, #22]
 800e6e0:	f080 0001 	eor.w	r0, r0, #1
 800e6e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	602b      	str	r3, [r5, #0]
 800e6ec:	e7ef      	b.n	800e6ce <ucdr_deserialize_uint32_t+0xb6>
 800e6ee:	68a2      	ldr	r2, [r4, #8]
 800e6f0:	6923      	ldr	r3, [r4, #16]
 800e6f2:	1bd2      	subs	r2, r2, r7
 800e6f4:	7da0      	ldrb	r0, [r4, #22]
 800e6f6:	1bdb      	subs	r3, r3, r7
 800e6f8:	f884 8015 	strb.w	r8, [r4, #21]
 800e6fc:	f080 0001 	eor.w	r0, r0, #1
 800e700:	60a2      	str	r2, [r4, #8]
 800e702:	6123      	str	r3, [r4, #16]
 800e704:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e708:	68a3      	ldr	r3, [r4, #8]
 800e70a:	789b      	ldrb	r3, [r3, #2]
 800e70c:	706b      	strb	r3, [r5, #1]
 800e70e:	1cab      	adds	r3, r5, #2
 800e710:	68a2      	ldr	r2, [r4, #8]
 800e712:	7852      	ldrb	r2, [r2, #1]
 800e714:	f803 2b01 	strb.w	r2, [r3], #1
 800e718:	68a2      	ldr	r2, [r4, #8]
 800e71a:	7812      	ldrb	r2, [r2, #0]
 800e71c:	701a      	strb	r2, [r3, #0]
 800e71e:	e7b4      	b.n	800e68a <ucdr_deserialize_uint32_t+0x72>
 800e720:	4631      	mov	r1, r6
 800e722:	463a      	mov	r2, r7
 800e724:	4628      	mov	r0, r5
 800e726:	f008 fb08 	bl	8016d3a <memcpy>
 800e72a:	464a      	mov	r2, r9
 800e72c:	19e8      	adds	r0, r5, r7
 800e72e:	68a1      	ldr	r1, [r4, #8]
 800e730:	f008 fb03 	bl	8016d3a <memcpy>
 800e734:	e7a9      	b.n	800e68a <ucdr_deserialize_uint32_t+0x72>
 800e736:	bf00      	nop

0800e738 <ucdr_deserialize_endian_uint32_t>:
 800e738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e73c:	4604      	mov	r4, r0
 800e73e:	460e      	mov	r6, r1
 800e740:	2104      	movs	r1, #4
 800e742:	4615      	mov	r5, r2
 800e744:	f000 ff10 	bl	800f568 <ucdr_buffer_alignment>
 800e748:	4601      	mov	r1, r0
 800e74a:	4620      	mov	r0, r4
 800e74c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e750:	f000 ff52 	bl	800f5f8 <ucdr_advance_buffer>
 800e754:	2104      	movs	r1, #4
 800e756:	4620      	mov	r0, r4
 800e758:	f000 fea6 	bl	800f4a8 <ucdr_check_buffer_available_for>
 800e75c:	2800      	cmp	r0, #0
 800e75e:	d13c      	bne.n	800e7da <ucdr_deserialize_endian_uint32_t+0xa2>
 800e760:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800e764:	42bb      	cmp	r3, r7
 800e766:	d933      	bls.n	800e7d0 <ucdr_deserialize_endian_uint32_t+0x98>
 800e768:	eba3 0907 	sub.w	r9, r3, r7
 800e76c:	60a3      	str	r3, [r4, #8]
 800e76e:	6923      	ldr	r3, [r4, #16]
 800e770:	4620      	mov	r0, r4
 800e772:	f1c9 0a04 	rsb	sl, r9, #4
 800e776:	444b      	add	r3, r9
 800e778:	4651      	mov	r1, sl
 800e77a:	6123      	str	r3, [r4, #16]
 800e77c:	f000 fea0 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800e780:	2800      	cmp	r0, #0
 800e782:	d048      	beq.n	800e816 <ucdr_deserialize_endian_uint32_t+0xde>
 800e784:	2e01      	cmp	r6, #1
 800e786:	d061      	beq.n	800e84c <ucdr_deserialize_endian_uint32_t+0x114>
 800e788:	78fb      	ldrb	r3, [r7, #3]
 800e78a:	702b      	strb	r3, [r5, #0]
 800e78c:	f1b9 0f00 	cmp.w	r9, #0
 800e790:	d050      	beq.n	800e834 <ucdr_deserialize_endian_uint32_t+0xfc>
 800e792:	78bb      	ldrb	r3, [r7, #2]
 800e794:	f1b9 0f01 	cmp.w	r9, #1
 800e798:	706b      	strb	r3, [r5, #1]
 800e79a:	f105 0302 	add.w	r3, r5, #2
 800e79e:	d04d      	beq.n	800e83c <ucdr_deserialize_endian_uint32_t+0x104>
 800e7a0:	787b      	ldrb	r3, [r7, #1]
 800e7a2:	f1b9 0f02 	cmp.w	r9, #2
 800e7a6:	70ab      	strb	r3, [r5, #2]
 800e7a8:	f105 0303 	add.w	r3, r5, #3
 800e7ac:	d04a      	beq.n	800e844 <ucdr_deserialize_endian_uint32_t+0x10c>
 800e7ae:	783b      	ldrb	r3, [r7, #0]
 800e7b0:	70eb      	strb	r3, [r5, #3]
 800e7b2:	6923      	ldr	r3, [r4, #16]
 800e7b4:	2104      	movs	r1, #4
 800e7b6:	68a2      	ldr	r2, [r4, #8]
 800e7b8:	3304      	adds	r3, #4
 800e7ba:	7da0      	ldrb	r0, [r4, #22]
 800e7bc:	4452      	add	r2, sl
 800e7be:	7561      	strb	r1, [r4, #21]
 800e7c0:	eba3 0309 	sub.w	r3, r3, r9
 800e7c4:	f080 0001 	eor.w	r0, r0, #1
 800e7c8:	60a2      	str	r2, [r4, #8]
 800e7ca:	6123      	str	r3, [r4, #16]
 800e7cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7d0:	2104      	movs	r1, #4
 800e7d2:	4620      	mov	r0, r4
 800e7d4:	f000 fe74 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800e7d8:	b1a8      	cbz	r0, 800e806 <ucdr_deserialize_endian_uint32_t+0xce>
 800e7da:	2e01      	cmp	r6, #1
 800e7dc:	68a3      	ldr	r3, [r4, #8]
 800e7de:	d017      	beq.n	800e810 <ucdr_deserialize_endian_uint32_t+0xd8>
 800e7e0:	78db      	ldrb	r3, [r3, #3]
 800e7e2:	702b      	strb	r3, [r5, #0]
 800e7e4:	68a3      	ldr	r3, [r4, #8]
 800e7e6:	789b      	ldrb	r3, [r3, #2]
 800e7e8:	706b      	strb	r3, [r5, #1]
 800e7ea:	68a3      	ldr	r3, [r4, #8]
 800e7ec:	785b      	ldrb	r3, [r3, #1]
 800e7ee:	70ab      	strb	r3, [r5, #2]
 800e7f0:	68a3      	ldr	r3, [r4, #8]
 800e7f2:	781b      	ldrb	r3, [r3, #0]
 800e7f4:	70eb      	strb	r3, [r5, #3]
 800e7f6:	2104      	movs	r1, #4
 800e7f8:	68a2      	ldr	r2, [r4, #8]
 800e7fa:	6923      	ldr	r3, [r4, #16]
 800e7fc:	440a      	add	r2, r1
 800e7fe:	7561      	strb	r1, [r4, #21]
 800e800:	440b      	add	r3, r1
 800e802:	60a2      	str	r2, [r4, #8]
 800e804:	6123      	str	r3, [r4, #16]
 800e806:	7da0      	ldrb	r0, [r4, #22]
 800e808:	f080 0001 	eor.w	r0, r0, #1
 800e80c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	602b      	str	r3, [r5, #0]
 800e814:	e7ef      	b.n	800e7f6 <ucdr_deserialize_endian_uint32_t+0xbe>
 800e816:	68a2      	ldr	r2, [r4, #8]
 800e818:	6923      	ldr	r3, [r4, #16]
 800e81a:	eba2 0209 	sub.w	r2, r2, r9
 800e81e:	7da0      	ldrb	r0, [r4, #22]
 800e820:	eba3 0309 	sub.w	r3, r3, r9
 800e824:	f884 8015 	strb.w	r8, [r4, #21]
 800e828:	f080 0001 	eor.w	r0, r0, #1
 800e82c:	60a2      	str	r2, [r4, #8]
 800e82e:	6123      	str	r3, [r4, #16]
 800e830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e834:	68a3      	ldr	r3, [r4, #8]
 800e836:	789b      	ldrb	r3, [r3, #2]
 800e838:	706b      	strb	r3, [r5, #1]
 800e83a:	1cab      	adds	r3, r5, #2
 800e83c:	68a2      	ldr	r2, [r4, #8]
 800e83e:	7852      	ldrb	r2, [r2, #1]
 800e840:	f803 2b01 	strb.w	r2, [r3], #1
 800e844:	68a2      	ldr	r2, [r4, #8]
 800e846:	7812      	ldrb	r2, [r2, #0]
 800e848:	701a      	strb	r2, [r3, #0]
 800e84a:	e7b2      	b.n	800e7b2 <ucdr_deserialize_endian_uint32_t+0x7a>
 800e84c:	4639      	mov	r1, r7
 800e84e:	464a      	mov	r2, r9
 800e850:	4628      	mov	r0, r5
 800e852:	f008 fa72 	bl	8016d3a <memcpy>
 800e856:	4652      	mov	r2, sl
 800e858:	eb05 0009 	add.w	r0, r5, r9
 800e85c:	68a1      	ldr	r1, [r4, #8]
 800e85e:	f008 fa6c 	bl	8016d3a <memcpy>
 800e862:	e7a6      	b.n	800e7b2 <ucdr_deserialize_endian_uint32_t+0x7a>

0800e864 <ucdr_serialize_uint64_t>:
 800e864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e868:	4604      	mov	r4, r0
 800e86a:	b082      	sub	sp, #8
 800e86c:	2108      	movs	r1, #8
 800e86e:	e9cd 2300 	strd	r2, r3, [sp]
 800e872:	f000 fe79 	bl	800f568 <ucdr_buffer_alignment>
 800e876:	4601      	mov	r1, r0
 800e878:	4620      	mov	r0, r4
 800e87a:	7d67      	ldrb	r7, [r4, #21]
 800e87c:	f000 febc 	bl	800f5f8 <ucdr_advance_buffer>
 800e880:	2108      	movs	r1, #8
 800e882:	4620      	mov	r0, r4
 800e884:	f000 fe10 	bl	800f4a8 <ucdr_check_buffer_available_for>
 800e888:	2800      	cmp	r0, #0
 800e88a:	d14e      	bne.n	800e92a <ucdr_serialize_uint64_t+0xc6>
 800e88c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e890:	42ab      	cmp	r3, r5
 800e892:	d945      	bls.n	800e920 <ucdr_serialize_uint64_t+0xbc>
 800e894:	1b5e      	subs	r6, r3, r5
 800e896:	60a3      	str	r3, [r4, #8]
 800e898:	6923      	ldr	r3, [r4, #16]
 800e89a:	4620      	mov	r0, r4
 800e89c:	f1c6 0808 	rsb	r8, r6, #8
 800e8a0:	4433      	add	r3, r6
 800e8a2:	4641      	mov	r1, r8
 800e8a4:	6123      	str	r3, [r4, #16]
 800e8a6:	f000 fe0b 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800e8aa:	2800      	cmp	r0, #0
 800e8ac:	d074      	beq.n	800e998 <ucdr_serialize_uint64_t+0x134>
 800e8ae:	7d23      	ldrb	r3, [r4, #20]
 800e8b0:	2b01      	cmp	r3, #1
 800e8b2:	f000 809b 	beq.w	800e9ec <ucdr_serialize_uint64_t+0x188>
 800e8b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e8ba:	702b      	strb	r3, [r5, #0]
 800e8bc:	2e00      	cmp	r6, #0
 800e8be:	d078      	beq.n	800e9b2 <ucdr_serialize_uint64_t+0x14e>
 800e8c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e8c4:	2e01      	cmp	r6, #1
 800e8c6:	706b      	strb	r3, [r5, #1]
 800e8c8:	d077      	beq.n	800e9ba <ucdr_serialize_uint64_t+0x156>
 800e8ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e8ce:	2e02      	cmp	r6, #2
 800e8d0:	70ab      	strb	r3, [r5, #2]
 800e8d2:	d076      	beq.n	800e9c2 <ucdr_serialize_uint64_t+0x15e>
 800e8d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e8d8:	2e03      	cmp	r6, #3
 800e8da:	70eb      	strb	r3, [r5, #3]
 800e8dc:	d075      	beq.n	800e9ca <ucdr_serialize_uint64_t+0x166>
 800e8de:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e8e2:	2e04      	cmp	r6, #4
 800e8e4:	712b      	strb	r3, [r5, #4]
 800e8e6:	d074      	beq.n	800e9d2 <ucdr_serialize_uint64_t+0x16e>
 800e8e8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800e8ec:	2e05      	cmp	r6, #5
 800e8ee:	716b      	strb	r3, [r5, #5]
 800e8f0:	d073      	beq.n	800e9da <ucdr_serialize_uint64_t+0x176>
 800e8f2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800e8f6:	2e06      	cmp	r6, #6
 800e8f8:	71ab      	strb	r3, [r5, #6]
 800e8fa:	d072      	beq.n	800e9e2 <ucdr_serialize_uint64_t+0x17e>
 800e8fc:	f89d 3000 	ldrb.w	r3, [sp]
 800e900:	71eb      	strb	r3, [r5, #7]
 800e902:	6923      	ldr	r3, [r4, #16]
 800e904:	2108      	movs	r1, #8
 800e906:	68a2      	ldr	r2, [r4, #8]
 800e908:	3308      	adds	r3, #8
 800e90a:	7da0      	ldrb	r0, [r4, #22]
 800e90c:	4442      	add	r2, r8
 800e90e:	7561      	strb	r1, [r4, #21]
 800e910:	1b9e      	subs	r6, r3, r6
 800e912:	f080 0001 	eor.w	r0, r0, #1
 800e916:	60a2      	str	r2, [r4, #8]
 800e918:	6126      	str	r6, [r4, #16]
 800e91a:	b002      	add	sp, #8
 800e91c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e920:	2108      	movs	r1, #8
 800e922:	4620      	mov	r0, r4
 800e924:	f000 fdcc 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800e928:	b350      	cbz	r0, 800e980 <ucdr_serialize_uint64_t+0x11c>
 800e92a:	7d23      	ldrb	r3, [r4, #20]
 800e92c:	2b01      	cmp	r3, #1
 800e92e:	d02d      	beq.n	800e98c <ucdr_serialize_uint64_t+0x128>
 800e930:	68a3      	ldr	r3, [r4, #8]
 800e932:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800e936:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e93a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800e93e:	7018      	strb	r0, [r3, #0]
 800e940:	68a3      	ldr	r3, [r4, #8]
 800e942:	705a      	strb	r2, [r3, #1]
 800e944:	68a3      	ldr	r3, [r4, #8]
 800e946:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e94a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800e94e:	7099      	strb	r1, [r3, #2]
 800e950:	68a3      	ldr	r3, [r4, #8]
 800e952:	70da      	strb	r2, [r3, #3]
 800e954:	68a3      	ldr	r3, [r4, #8]
 800e956:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e95a:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800e95e:	7118      	strb	r0, [r3, #4]
 800e960:	68a3      	ldr	r3, [r4, #8]
 800e962:	715a      	strb	r2, [r3, #5]
 800e964:	68a3      	ldr	r3, [r4, #8]
 800e966:	f89d 2000 	ldrb.w	r2, [sp]
 800e96a:	7199      	strb	r1, [r3, #6]
 800e96c:	68a3      	ldr	r3, [r4, #8]
 800e96e:	71da      	strb	r2, [r3, #7]
 800e970:	2108      	movs	r1, #8
 800e972:	68a2      	ldr	r2, [r4, #8]
 800e974:	6923      	ldr	r3, [r4, #16]
 800e976:	440a      	add	r2, r1
 800e978:	7561      	strb	r1, [r4, #21]
 800e97a:	440b      	add	r3, r1
 800e97c:	60a2      	str	r2, [r4, #8]
 800e97e:	6123      	str	r3, [r4, #16]
 800e980:	7da0      	ldrb	r0, [r4, #22]
 800e982:	f080 0001 	eor.w	r0, r0, #1
 800e986:	b002      	add	sp, #8
 800e988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e98c:	466b      	mov	r3, sp
 800e98e:	68a2      	ldr	r2, [r4, #8]
 800e990:	cb03      	ldmia	r3!, {r0, r1}
 800e992:	6010      	str	r0, [r2, #0]
 800e994:	6051      	str	r1, [r2, #4]
 800e996:	e7eb      	b.n	800e970 <ucdr_serialize_uint64_t+0x10c>
 800e998:	68a2      	ldr	r2, [r4, #8]
 800e99a:	6923      	ldr	r3, [r4, #16]
 800e99c:	7da0      	ldrb	r0, [r4, #22]
 800e99e:	1b92      	subs	r2, r2, r6
 800e9a0:	1b9b      	subs	r3, r3, r6
 800e9a2:	7567      	strb	r7, [r4, #21]
 800e9a4:	f080 0001 	eor.w	r0, r0, #1
 800e9a8:	60a2      	str	r2, [r4, #8]
 800e9aa:	6123      	str	r3, [r4, #16]
 800e9ac:	b002      	add	sp, #8
 800e9ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9b2:	68a3      	ldr	r3, [r4, #8]
 800e9b4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e9b8:	701a      	strb	r2, [r3, #0]
 800e9ba:	68a3      	ldr	r3, [r4, #8]
 800e9bc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e9c0:	701a      	strb	r2, [r3, #0]
 800e9c2:	68a3      	ldr	r3, [r4, #8]
 800e9c4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e9c8:	701a      	strb	r2, [r3, #0]
 800e9ca:	68a3      	ldr	r3, [r4, #8]
 800e9cc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e9d0:	701a      	strb	r2, [r3, #0]
 800e9d2:	68a3      	ldr	r3, [r4, #8]
 800e9d4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e9d8:	701a      	strb	r2, [r3, #0]
 800e9da:	68a3      	ldr	r3, [r4, #8]
 800e9dc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e9e0:	701a      	strb	r2, [r3, #0]
 800e9e2:	68a3      	ldr	r3, [r4, #8]
 800e9e4:	f89d 2000 	ldrb.w	r2, [sp]
 800e9e8:	701a      	strb	r2, [r3, #0]
 800e9ea:	e78a      	b.n	800e902 <ucdr_serialize_uint64_t+0x9e>
 800e9ec:	4628      	mov	r0, r5
 800e9ee:	466d      	mov	r5, sp
 800e9f0:	4632      	mov	r2, r6
 800e9f2:	4629      	mov	r1, r5
 800e9f4:	f008 f9a1 	bl	8016d3a <memcpy>
 800e9f8:	4642      	mov	r2, r8
 800e9fa:	19a9      	adds	r1, r5, r6
 800e9fc:	68a0      	ldr	r0, [r4, #8]
 800e9fe:	f008 f99c 	bl	8016d3a <memcpy>
 800ea02:	e77e      	b.n	800e902 <ucdr_serialize_uint64_t+0x9e>

0800ea04 <ucdr_serialize_int16_t>:
 800ea04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea08:	460b      	mov	r3, r1
 800ea0a:	b082      	sub	sp, #8
 800ea0c:	4604      	mov	r4, r0
 800ea0e:	2102      	movs	r1, #2
 800ea10:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ea14:	f000 fda8 	bl	800f568 <ucdr_buffer_alignment>
 800ea18:	4601      	mov	r1, r0
 800ea1a:	4620      	mov	r0, r4
 800ea1c:	7d67      	ldrb	r7, [r4, #21]
 800ea1e:	f000 fdeb 	bl	800f5f8 <ucdr_advance_buffer>
 800ea22:	2102      	movs	r1, #2
 800ea24:	4620      	mov	r0, r4
 800ea26:	f000 fd3f 	bl	800f4a8 <ucdr_check_buffer_available_for>
 800ea2a:	bb78      	cbnz	r0, 800ea8c <ucdr_serialize_int16_t+0x88>
 800ea2c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ea30:	42ab      	cmp	r3, r5
 800ea32:	d926      	bls.n	800ea82 <ucdr_serialize_int16_t+0x7e>
 800ea34:	1b5e      	subs	r6, r3, r5
 800ea36:	60a3      	str	r3, [r4, #8]
 800ea38:	6923      	ldr	r3, [r4, #16]
 800ea3a:	4620      	mov	r0, r4
 800ea3c:	f1c6 0802 	rsb	r8, r6, #2
 800ea40:	4433      	add	r3, r6
 800ea42:	4641      	mov	r1, r8
 800ea44:	6123      	str	r3, [r4, #16]
 800ea46:	f000 fd3b 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800ea4a:	2800      	cmp	r0, #0
 800ea4c:	d03b      	beq.n	800eac6 <ucdr_serialize_int16_t+0xc2>
 800ea4e:	7d23      	ldrb	r3, [r4, #20]
 800ea50:	2b01      	cmp	r3, #1
 800ea52:	d04a      	beq.n	800eaea <ucdr_serialize_int16_t+0xe6>
 800ea54:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ea58:	702b      	strb	r3, [r5, #0]
 800ea5a:	2e00      	cmp	r6, #0
 800ea5c:	d040      	beq.n	800eae0 <ucdr_serialize_int16_t+0xdc>
 800ea5e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ea62:	706b      	strb	r3, [r5, #1]
 800ea64:	6923      	ldr	r3, [r4, #16]
 800ea66:	2102      	movs	r1, #2
 800ea68:	68a2      	ldr	r2, [r4, #8]
 800ea6a:	3302      	adds	r3, #2
 800ea6c:	7da0      	ldrb	r0, [r4, #22]
 800ea6e:	4442      	add	r2, r8
 800ea70:	7561      	strb	r1, [r4, #21]
 800ea72:	1b9e      	subs	r6, r3, r6
 800ea74:	f080 0001 	eor.w	r0, r0, #1
 800ea78:	60a2      	str	r2, [r4, #8]
 800ea7a:	6126      	str	r6, [r4, #16]
 800ea7c:	b002      	add	sp, #8
 800ea7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea82:	2102      	movs	r1, #2
 800ea84:	4620      	mov	r0, r4
 800ea86:	f000 fd1b 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800ea8a:	b190      	cbz	r0, 800eab2 <ucdr_serialize_int16_t+0xae>
 800ea8c:	7d23      	ldrb	r3, [r4, #20]
 800ea8e:	2b01      	cmp	r3, #1
 800ea90:	68a3      	ldr	r3, [r4, #8]
 800ea92:	d014      	beq.n	800eabe <ucdr_serialize_int16_t+0xba>
 800ea94:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ea98:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ea9c:	7019      	strb	r1, [r3, #0]
 800ea9e:	68a3      	ldr	r3, [r4, #8]
 800eaa0:	705a      	strb	r2, [r3, #1]
 800eaa2:	2102      	movs	r1, #2
 800eaa4:	68a2      	ldr	r2, [r4, #8]
 800eaa6:	6923      	ldr	r3, [r4, #16]
 800eaa8:	440a      	add	r2, r1
 800eaaa:	7561      	strb	r1, [r4, #21]
 800eaac:	440b      	add	r3, r1
 800eaae:	60a2      	str	r2, [r4, #8]
 800eab0:	6123      	str	r3, [r4, #16]
 800eab2:	7da0      	ldrb	r0, [r4, #22]
 800eab4:	f080 0001 	eor.w	r0, r0, #1
 800eab8:	b002      	add	sp, #8
 800eaba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eabe:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800eac2:	801a      	strh	r2, [r3, #0]
 800eac4:	e7ed      	b.n	800eaa2 <ucdr_serialize_int16_t+0x9e>
 800eac6:	68a2      	ldr	r2, [r4, #8]
 800eac8:	6923      	ldr	r3, [r4, #16]
 800eaca:	7da0      	ldrb	r0, [r4, #22]
 800eacc:	1b92      	subs	r2, r2, r6
 800eace:	1b9b      	subs	r3, r3, r6
 800ead0:	7567      	strb	r7, [r4, #21]
 800ead2:	f080 0001 	eor.w	r0, r0, #1
 800ead6:	60a2      	str	r2, [r4, #8]
 800ead8:	6123      	str	r3, [r4, #16]
 800eada:	b002      	add	sp, #8
 800eadc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eae0:	68a3      	ldr	r3, [r4, #8]
 800eae2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eae6:	701a      	strb	r2, [r3, #0]
 800eae8:	e7bc      	b.n	800ea64 <ucdr_serialize_int16_t+0x60>
 800eaea:	4628      	mov	r0, r5
 800eaec:	f10d 0506 	add.w	r5, sp, #6
 800eaf0:	4632      	mov	r2, r6
 800eaf2:	4629      	mov	r1, r5
 800eaf4:	f008 f921 	bl	8016d3a <memcpy>
 800eaf8:	4642      	mov	r2, r8
 800eafa:	19a9      	adds	r1, r5, r6
 800eafc:	68a0      	ldr	r0, [r4, #8]
 800eafe:	f008 f91c 	bl	8016d3a <memcpy>
 800eb02:	e7af      	b.n	800ea64 <ucdr_serialize_int16_t+0x60>

0800eb04 <ucdr_deserialize_int16_t>:
 800eb04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb08:	4604      	mov	r4, r0
 800eb0a:	460d      	mov	r5, r1
 800eb0c:	2102      	movs	r1, #2
 800eb0e:	f000 fd2b 	bl	800f568 <ucdr_buffer_alignment>
 800eb12:	4601      	mov	r1, r0
 800eb14:	4620      	mov	r0, r4
 800eb16:	f894 8015 	ldrb.w	r8, [r4, #21]
 800eb1a:	f000 fd6d 	bl	800f5f8 <ucdr_advance_buffer>
 800eb1e:	2102      	movs	r1, #2
 800eb20:	4620      	mov	r0, r4
 800eb22:	f000 fcc1 	bl	800f4a8 <ucdr_check_buffer_available_for>
 800eb26:	bb60      	cbnz	r0, 800eb82 <ucdr_deserialize_int16_t+0x7e>
 800eb28:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800eb2c:	42be      	cmp	r6, r7
 800eb2e:	d923      	bls.n	800eb78 <ucdr_deserialize_int16_t+0x74>
 800eb30:	6923      	ldr	r3, [r4, #16]
 800eb32:	4620      	mov	r0, r4
 800eb34:	60a6      	str	r6, [r4, #8]
 800eb36:	1bf6      	subs	r6, r6, r7
 800eb38:	4433      	add	r3, r6
 800eb3a:	f1c6 0902 	rsb	r9, r6, #2
 800eb3e:	6123      	str	r3, [r4, #16]
 800eb40:	4649      	mov	r1, r9
 800eb42:	f000 fcbd 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800eb46:	2800      	cmp	r0, #0
 800eb48:	d034      	beq.n	800ebb4 <ucdr_deserialize_int16_t+0xb0>
 800eb4a:	7d23      	ldrb	r3, [r4, #20]
 800eb4c:	2b01      	cmp	r3, #1
 800eb4e:	d042      	beq.n	800ebd6 <ucdr_deserialize_int16_t+0xd2>
 800eb50:	787b      	ldrb	r3, [r7, #1]
 800eb52:	702b      	strb	r3, [r5, #0]
 800eb54:	2e00      	cmp	r6, #0
 800eb56:	d03a      	beq.n	800ebce <ucdr_deserialize_int16_t+0xca>
 800eb58:	783b      	ldrb	r3, [r7, #0]
 800eb5a:	706b      	strb	r3, [r5, #1]
 800eb5c:	6923      	ldr	r3, [r4, #16]
 800eb5e:	2102      	movs	r1, #2
 800eb60:	68a2      	ldr	r2, [r4, #8]
 800eb62:	3302      	adds	r3, #2
 800eb64:	7da0      	ldrb	r0, [r4, #22]
 800eb66:	444a      	add	r2, r9
 800eb68:	7561      	strb	r1, [r4, #21]
 800eb6a:	1b9b      	subs	r3, r3, r6
 800eb6c:	f080 0001 	eor.w	r0, r0, #1
 800eb70:	60a2      	str	r2, [r4, #8]
 800eb72:	6123      	str	r3, [r4, #16]
 800eb74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb78:	2102      	movs	r1, #2
 800eb7a:	4620      	mov	r0, r4
 800eb7c:	f000 fca0 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800eb80:	b180      	cbz	r0, 800eba4 <ucdr_deserialize_int16_t+0xa0>
 800eb82:	7d23      	ldrb	r3, [r4, #20]
 800eb84:	2b01      	cmp	r3, #1
 800eb86:	68a3      	ldr	r3, [r4, #8]
 800eb88:	d011      	beq.n	800ebae <ucdr_deserialize_int16_t+0xaa>
 800eb8a:	785b      	ldrb	r3, [r3, #1]
 800eb8c:	702b      	strb	r3, [r5, #0]
 800eb8e:	68a3      	ldr	r3, [r4, #8]
 800eb90:	781b      	ldrb	r3, [r3, #0]
 800eb92:	706b      	strb	r3, [r5, #1]
 800eb94:	2102      	movs	r1, #2
 800eb96:	68a2      	ldr	r2, [r4, #8]
 800eb98:	6923      	ldr	r3, [r4, #16]
 800eb9a:	440a      	add	r2, r1
 800eb9c:	7561      	strb	r1, [r4, #21]
 800eb9e:	440b      	add	r3, r1
 800eba0:	60a2      	str	r2, [r4, #8]
 800eba2:	6123      	str	r3, [r4, #16]
 800eba4:	7da0      	ldrb	r0, [r4, #22]
 800eba6:	f080 0001 	eor.w	r0, r0, #1
 800ebaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebae:	881b      	ldrh	r3, [r3, #0]
 800ebb0:	802b      	strh	r3, [r5, #0]
 800ebb2:	e7ef      	b.n	800eb94 <ucdr_deserialize_int16_t+0x90>
 800ebb4:	68a2      	ldr	r2, [r4, #8]
 800ebb6:	6923      	ldr	r3, [r4, #16]
 800ebb8:	1b92      	subs	r2, r2, r6
 800ebba:	7da0      	ldrb	r0, [r4, #22]
 800ebbc:	1b9b      	subs	r3, r3, r6
 800ebbe:	f884 8015 	strb.w	r8, [r4, #21]
 800ebc2:	f080 0001 	eor.w	r0, r0, #1
 800ebc6:	60a2      	str	r2, [r4, #8]
 800ebc8:	6123      	str	r3, [r4, #16]
 800ebca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebce:	68a3      	ldr	r3, [r4, #8]
 800ebd0:	781b      	ldrb	r3, [r3, #0]
 800ebd2:	706b      	strb	r3, [r5, #1]
 800ebd4:	e7c2      	b.n	800eb5c <ucdr_deserialize_int16_t+0x58>
 800ebd6:	4639      	mov	r1, r7
 800ebd8:	4632      	mov	r2, r6
 800ebda:	4628      	mov	r0, r5
 800ebdc:	f008 f8ad 	bl	8016d3a <memcpy>
 800ebe0:	464a      	mov	r2, r9
 800ebe2:	19a8      	adds	r0, r5, r6
 800ebe4:	68a1      	ldr	r1, [r4, #8]
 800ebe6:	f008 f8a8 	bl	8016d3a <memcpy>
 800ebea:	e7b7      	b.n	800eb5c <ucdr_deserialize_int16_t+0x58>

0800ebec <ucdr_serialize_int32_t>:
 800ebec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebf0:	b082      	sub	sp, #8
 800ebf2:	4604      	mov	r4, r0
 800ebf4:	9101      	str	r1, [sp, #4]
 800ebf6:	2104      	movs	r1, #4
 800ebf8:	f000 fcb6 	bl	800f568 <ucdr_buffer_alignment>
 800ebfc:	4601      	mov	r1, r0
 800ebfe:	4620      	mov	r0, r4
 800ec00:	7d67      	ldrb	r7, [r4, #21]
 800ec02:	f000 fcf9 	bl	800f5f8 <ucdr_advance_buffer>
 800ec06:	2104      	movs	r1, #4
 800ec08:	4620      	mov	r0, r4
 800ec0a:	f000 fc4d 	bl	800f4a8 <ucdr_check_buffer_available_for>
 800ec0e:	2800      	cmp	r0, #0
 800ec10:	d139      	bne.n	800ec86 <ucdr_serialize_int32_t+0x9a>
 800ec12:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ec16:	42ab      	cmp	r3, r5
 800ec18:	d930      	bls.n	800ec7c <ucdr_serialize_int32_t+0x90>
 800ec1a:	1b5e      	subs	r6, r3, r5
 800ec1c:	60a3      	str	r3, [r4, #8]
 800ec1e:	6923      	ldr	r3, [r4, #16]
 800ec20:	4620      	mov	r0, r4
 800ec22:	f1c6 0804 	rsb	r8, r6, #4
 800ec26:	4433      	add	r3, r6
 800ec28:	4641      	mov	r1, r8
 800ec2a:	6123      	str	r3, [r4, #16]
 800ec2c:	f000 fc48 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800ec30:	2800      	cmp	r0, #0
 800ec32:	d04c      	beq.n	800ecce <ucdr_serialize_int32_t+0xe2>
 800ec34:	7d23      	ldrb	r3, [r4, #20]
 800ec36:	2b01      	cmp	r3, #1
 800ec38:	d063      	beq.n	800ed02 <ucdr_serialize_int32_t+0x116>
 800ec3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ec3e:	702b      	strb	r3, [r5, #0]
 800ec40:	2e00      	cmp	r6, #0
 800ec42:	d051      	beq.n	800ece8 <ucdr_serialize_int32_t+0xfc>
 800ec44:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ec48:	2e01      	cmp	r6, #1
 800ec4a:	706b      	strb	r3, [r5, #1]
 800ec4c:	d050      	beq.n	800ecf0 <ucdr_serialize_int32_t+0x104>
 800ec4e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ec52:	2e02      	cmp	r6, #2
 800ec54:	70ab      	strb	r3, [r5, #2]
 800ec56:	d04f      	beq.n	800ecf8 <ucdr_serialize_int32_t+0x10c>
 800ec58:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ec5c:	70eb      	strb	r3, [r5, #3]
 800ec5e:	6923      	ldr	r3, [r4, #16]
 800ec60:	2104      	movs	r1, #4
 800ec62:	68a2      	ldr	r2, [r4, #8]
 800ec64:	3304      	adds	r3, #4
 800ec66:	7da0      	ldrb	r0, [r4, #22]
 800ec68:	4442      	add	r2, r8
 800ec6a:	7561      	strb	r1, [r4, #21]
 800ec6c:	1b9e      	subs	r6, r3, r6
 800ec6e:	f080 0001 	eor.w	r0, r0, #1
 800ec72:	60a2      	str	r2, [r4, #8]
 800ec74:	6126      	str	r6, [r4, #16]
 800ec76:	b002      	add	sp, #8
 800ec78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec7c:	2104      	movs	r1, #4
 800ec7e:	4620      	mov	r0, r4
 800ec80:	f000 fc1e 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800ec84:	b1d0      	cbz	r0, 800ecbc <ucdr_serialize_int32_t+0xd0>
 800ec86:	7d23      	ldrb	r3, [r4, #20]
 800ec88:	2b01      	cmp	r3, #1
 800ec8a:	68a3      	ldr	r3, [r4, #8]
 800ec8c:	d01c      	beq.n	800ecc8 <ucdr_serialize_int32_t+0xdc>
 800ec8e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800ec92:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ec96:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800ec9a:	7018      	strb	r0, [r3, #0]
 800ec9c:	68a3      	ldr	r3, [r4, #8]
 800ec9e:	705a      	strb	r2, [r3, #1]
 800eca0:	68a3      	ldr	r3, [r4, #8]
 800eca2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800eca6:	7099      	strb	r1, [r3, #2]
 800eca8:	68a3      	ldr	r3, [r4, #8]
 800ecaa:	70da      	strb	r2, [r3, #3]
 800ecac:	2104      	movs	r1, #4
 800ecae:	68a2      	ldr	r2, [r4, #8]
 800ecb0:	6923      	ldr	r3, [r4, #16]
 800ecb2:	440a      	add	r2, r1
 800ecb4:	7561      	strb	r1, [r4, #21]
 800ecb6:	440b      	add	r3, r1
 800ecb8:	60a2      	str	r2, [r4, #8]
 800ecba:	6123      	str	r3, [r4, #16]
 800ecbc:	7da0      	ldrb	r0, [r4, #22]
 800ecbe:	f080 0001 	eor.w	r0, r0, #1
 800ecc2:	b002      	add	sp, #8
 800ecc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecc8:	9a01      	ldr	r2, [sp, #4]
 800ecca:	601a      	str	r2, [r3, #0]
 800eccc:	e7ee      	b.n	800ecac <ucdr_serialize_int32_t+0xc0>
 800ecce:	68a2      	ldr	r2, [r4, #8]
 800ecd0:	6923      	ldr	r3, [r4, #16]
 800ecd2:	7da0      	ldrb	r0, [r4, #22]
 800ecd4:	1b92      	subs	r2, r2, r6
 800ecd6:	1b9b      	subs	r3, r3, r6
 800ecd8:	7567      	strb	r7, [r4, #21]
 800ecda:	f080 0001 	eor.w	r0, r0, #1
 800ecde:	60a2      	str	r2, [r4, #8]
 800ece0:	6123      	str	r3, [r4, #16]
 800ece2:	b002      	add	sp, #8
 800ece4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ece8:	68a3      	ldr	r3, [r4, #8]
 800ecea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ecee:	701a      	strb	r2, [r3, #0]
 800ecf0:	68a3      	ldr	r3, [r4, #8]
 800ecf2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ecf6:	701a      	strb	r2, [r3, #0]
 800ecf8:	68a3      	ldr	r3, [r4, #8]
 800ecfa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ecfe:	701a      	strb	r2, [r3, #0]
 800ed00:	e7ad      	b.n	800ec5e <ucdr_serialize_int32_t+0x72>
 800ed02:	4628      	mov	r0, r5
 800ed04:	ad01      	add	r5, sp, #4
 800ed06:	4632      	mov	r2, r6
 800ed08:	4629      	mov	r1, r5
 800ed0a:	f008 f816 	bl	8016d3a <memcpy>
 800ed0e:	4642      	mov	r2, r8
 800ed10:	19a9      	adds	r1, r5, r6
 800ed12:	68a0      	ldr	r0, [r4, #8]
 800ed14:	f008 f811 	bl	8016d3a <memcpy>
 800ed18:	e7a1      	b.n	800ec5e <ucdr_serialize_int32_t+0x72>
 800ed1a:	bf00      	nop

0800ed1c <ucdr_deserialize_int32_t>:
 800ed1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed20:	4604      	mov	r4, r0
 800ed22:	460d      	mov	r5, r1
 800ed24:	2104      	movs	r1, #4
 800ed26:	f000 fc1f 	bl	800f568 <ucdr_buffer_alignment>
 800ed2a:	4601      	mov	r1, r0
 800ed2c:	4620      	mov	r0, r4
 800ed2e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ed32:	f000 fc61 	bl	800f5f8 <ucdr_advance_buffer>
 800ed36:	2104      	movs	r1, #4
 800ed38:	4620      	mov	r0, r4
 800ed3a:	f000 fbb5 	bl	800f4a8 <ucdr_check_buffer_available_for>
 800ed3e:	2800      	cmp	r0, #0
 800ed40:	d138      	bne.n	800edb4 <ucdr_deserialize_int32_t+0x98>
 800ed42:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ed46:	42b7      	cmp	r7, r6
 800ed48:	d92f      	bls.n	800edaa <ucdr_deserialize_int32_t+0x8e>
 800ed4a:	6923      	ldr	r3, [r4, #16]
 800ed4c:	4620      	mov	r0, r4
 800ed4e:	60a7      	str	r7, [r4, #8]
 800ed50:	1bbf      	subs	r7, r7, r6
 800ed52:	443b      	add	r3, r7
 800ed54:	f1c7 0904 	rsb	r9, r7, #4
 800ed58:	6123      	str	r3, [r4, #16]
 800ed5a:	4649      	mov	r1, r9
 800ed5c:	f000 fbb0 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800ed60:	2800      	cmp	r0, #0
 800ed62:	d046      	beq.n	800edf2 <ucdr_deserialize_int32_t+0xd6>
 800ed64:	7d23      	ldrb	r3, [r4, #20]
 800ed66:	2b01      	cmp	r3, #1
 800ed68:	d05c      	beq.n	800ee24 <ucdr_deserialize_int32_t+0x108>
 800ed6a:	78f3      	ldrb	r3, [r6, #3]
 800ed6c:	702b      	strb	r3, [r5, #0]
 800ed6e:	2f00      	cmp	r7, #0
 800ed70:	d04c      	beq.n	800ee0c <ucdr_deserialize_int32_t+0xf0>
 800ed72:	78b3      	ldrb	r3, [r6, #2]
 800ed74:	2f01      	cmp	r7, #1
 800ed76:	706b      	strb	r3, [r5, #1]
 800ed78:	f105 0302 	add.w	r3, r5, #2
 800ed7c:	d04a      	beq.n	800ee14 <ucdr_deserialize_int32_t+0xf8>
 800ed7e:	7873      	ldrb	r3, [r6, #1]
 800ed80:	2f02      	cmp	r7, #2
 800ed82:	70ab      	strb	r3, [r5, #2]
 800ed84:	f105 0303 	add.w	r3, r5, #3
 800ed88:	d048      	beq.n	800ee1c <ucdr_deserialize_int32_t+0x100>
 800ed8a:	7833      	ldrb	r3, [r6, #0]
 800ed8c:	70eb      	strb	r3, [r5, #3]
 800ed8e:	6923      	ldr	r3, [r4, #16]
 800ed90:	2104      	movs	r1, #4
 800ed92:	68a2      	ldr	r2, [r4, #8]
 800ed94:	3304      	adds	r3, #4
 800ed96:	7da0      	ldrb	r0, [r4, #22]
 800ed98:	444a      	add	r2, r9
 800ed9a:	7561      	strb	r1, [r4, #21]
 800ed9c:	1bdb      	subs	r3, r3, r7
 800ed9e:	f080 0001 	eor.w	r0, r0, #1
 800eda2:	60a2      	str	r2, [r4, #8]
 800eda4:	6123      	str	r3, [r4, #16]
 800eda6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edaa:	2104      	movs	r1, #4
 800edac:	4620      	mov	r0, r4
 800edae:	f000 fb87 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800edb2:	b1b0      	cbz	r0, 800ede2 <ucdr_deserialize_int32_t+0xc6>
 800edb4:	7d23      	ldrb	r3, [r4, #20]
 800edb6:	2b01      	cmp	r3, #1
 800edb8:	68a3      	ldr	r3, [r4, #8]
 800edba:	d017      	beq.n	800edec <ucdr_deserialize_int32_t+0xd0>
 800edbc:	78db      	ldrb	r3, [r3, #3]
 800edbe:	702b      	strb	r3, [r5, #0]
 800edc0:	68a3      	ldr	r3, [r4, #8]
 800edc2:	789b      	ldrb	r3, [r3, #2]
 800edc4:	706b      	strb	r3, [r5, #1]
 800edc6:	68a3      	ldr	r3, [r4, #8]
 800edc8:	785b      	ldrb	r3, [r3, #1]
 800edca:	70ab      	strb	r3, [r5, #2]
 800edcc:	68a3      	ldr	r3, [r4, #8]
 800edce:	781b      	ldrb	r3, [r3, #0]
 800edd0:	70eb      	strb	r3, [r5, #3]
 800edd2:	2104      	movs	r1, #4
 800edd4:	68a2      	ldr	r2, [r4, #8]
 800edd6:	6923      	ldr	r3, [r4, #16]
 800edd8:	440a      	add	r2, r1
 800edda:	7561      	strb	r1, [r4, #21]
 800eddc:	440b      	add	r3, r1
 800edde:	60a2      	str	r2, [r4, #8]
 800ede0:	6123      	str	r3, [r4, #16]
 800ede2:	7da0      	ldrb	r0, [r4, #22]
 800ede4:	f080 0001 	eor.w	r0, r0, #1
 800ede8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	602b      	str	r3, [r5, #0]
 800edf0:	e7ef      	b.n	800edd2 <ucdr_deserialize_int32_t+0xb6>
 800edf2:	68a2      	ldr	r2, [r4, #8]
 800edf4:	6923      	ldr	r3, [r4, #16]
 800edf6:	1bd2      	subs	r2, r2, r7
 800edf8:	7da0      	ldrb	r0, [r4, #22]
 800edfa:	1bdb      	subs	r3, r3, r7
 800edfc:	f884 8015 	strb.w	r8, [r4, #21]
 800ee00:	f080 0001 	eor.w	r0, r0, #1
 800ee04:	60a2      	str	r2, [r4, #8]
 800ee06:	6123      	str	r3, [r4, #16]
 800ee08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee0c:	68a3      	ldr	r3, [r4, #8]
 800ee0e:	789b      	ldrb	r3, [r3, #2]
 800ee10:	706b      	strb	r3, [r5, #1]
 800ee12:	1cab      	adds	r3, r5, #2
 800ee14:	68a2      	ldr	r2, [r4, #8]
 800ee16:	7852      	ldrb	r2, [r2, #1]
 800ee18:	f803 2b01 	strb.w	r2, [r3], #1
 800ee1c:	68a2      	ldr	r2, [r4, #8]
 800ee1e:	7812      	ldrb	r2, [r2, #0]
 800ee20:	701a      	strb	r2, [r3, #0]
 800ee22:	e7b4      	b.n	800ed8e <ucdr_deserialize_int32_t+0x72>
 800ee24:	4631      	mov	r1, r6
 800ee26:	463a      	mov	r2, r7
 800ee28:	4628      	mov	r0, r5
 800ee2a:	f007 ff86 	bl	8016d3a <memcpy>
 800ee2e:	464a      	mov	r2, r9
 800ee30:	19e8      	adds	r0, r5, r7
 800ee32:	68a1      	ldr	r1, [r4, #8]
 800ee34:	f007 ff81 	bl	8016d3a <memcpy>
 800ee38:	e7a9      	b.n	800ed8e <ucdr_deserialize_int32_t+0x72>
 800ee3a:	bf00      	nop

0800ee3c <ucdr_serialize_double>:
 800ee3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee40:	4604      	mov	r4, r0
 800ee42:	b082      	sub	sp, #8
 800ee44:	2108      	movs	r1, #8
 800ee46:	ed8d 0b00 	vstr	d0, [sp]
 800ee4a:	f000 fb8d 	bl	800f568 <ucdr_buffer_alignment>
 800ee4e:	4601      	mov	r1, r0
 800ee50:	4620      	mov	r0, r4
 800ee52:	7d67      	ldrb	r7, [r4, #21]
 800ee54:	f000 fbd0 	bl	800f5f8 <ucdr_advance_buffer>
 800ee58:	2108      	movs	r1, #8
 800ee5a:	4620      	mov	r0, r4
 800ee5c:	f000 fb24 	bl	800f4a8 <ucdr_check_buffer_available_for>
 800ee60:	2800      	cmp	r0, #0
 800ee62:	d14e      	bne.n	800ef02 <ucdr_serialize_double+0xc6>
 800ee64:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ee68:	42ab      	cmp	r3, r5
 800ee6a:	d945      	bls.n	800eef8 <ucdr_serialize_double+0xbc>
 800ee6c:	1b5e      	subs	r6, r3, r5
 800ee6e:	60a3      	str	r3, [r4, #8]
 800ee70:	6923      	ldr	r3, [r4, #16]
 800ee72:	4620      	mov	r0, r4
 800ee74:	f1c6 0808 	rsb	r8, r6, #8
 800ee78:	4433      	add	r3, r6
 800ee7a:	4641      	mov	r1, r8
 800ee7c:	6123      	str	r3, [r4, #16]
 800ee7e:	f000 fb1f 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800ee82:	2800      	cmp	r0, #0
 800ee84:	d074      	beq.n	800ef70 <ucdr_serialize_double+0x134>
 800ee86:	7d23      	ldrb	r3, [r4, #20]
 800ee88:	2b01      	cmp	r3, #1
 800ee8a:	f000 809b 	beq.w	800efc4 <ucdr_serialize_double+0x188>
 800ee8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ee92:	702b      	strb	r3, [r5, #0]
 800ee94:	2e00      	cmp	r6, #0
 800ee96:	d078      	beq.n	800ef8a <ucdr_serialize_double+0x14e>
 800ee98:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ee9c:	2e01      	cmp	r6, #1
 800ee9e:	706b      	strb	r3, [r5, #1]
 800eea0:	d077      	beq.n	800ef92 <ucdr_serialize_double+0x156>
 800eea2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800eea6:	2e02      	cmp	r6, #2
 800eea8:	70ab      	strb	r3, [r5, #2]
 800eeaa:	d076      	beq.n	800ef9a <ucdr_serialize_double+0x15e>
 800eeac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800eeb0:	2e03      	cmp	r6, #3
 800eeb2:	70eb      	strb	r3, [r5, #3]
 800eeb4:	d075      	beq.n	800efa2 <ucdr_serialize_double+0x166>
 800eeb6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800eeba:	2e04      	cmp	r6, #4
 800eebc:	712b      	strb	r3, [r5, #4]
 800eebe:	d074      	beq.n	800efaa <ucdr_serialize_double+0x16e>
 800eec0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800eec4:	2e05      	cmp	r6, #5
 800eec6:	716b      	strb	r3, [r5, #5]
 800eec8:	d073      	beq.n	800efb2 <ucdr_serialize_double+0x176>
 800eeca:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800eece:	2e06      	cmp	r6, #6
 800eed0:	71ab      	strb	r3, [r5, #6]
 800eed2:	d072      	beq.n	800efba <ucdr_serialize_double+0x17e>
 800eed4:	f89d 3000 	ldrb.w	r3, [sp]
 800eed8:	71eb      	strb	r3, [r5, #7]
 800eeda:	6923      	ldr	r3, [r4, #16]
 800eedc:	2108      	movs	r1, #8
 800eede:	68a2      	ldr	r2, [r4, #8]
 800eee0:	3308      	adds	r3, #8
 800eee2:	7da0      	ldrb	r0, [r4, #22]
 800eee4:	4442      	add	r2, r8
 800eee6:	7561      	strb	r1, [r4, #21]
 800eee8:	1b9e      	subs	r6, r3, r6
 800eeea:	f080 0001 	eor.w	r0, r0, #1
 800eeee:	60a2      	str	r2, [r4, #8]
 800eef0:	6126      	str	r6, [r4, #16]
 800eef2:	b002      	add	sp, #8
 800eef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eef8:	2108      	movs	r1, #8
 800eefa:	4620      	mov	r0, r4
 800eefc:	f000 fae0 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800ef00:	b350      	cbz	r0, 800ef58 <ucdr_serialize_double+0x11c>
 800ef02:	7d23      	ldrb	r3, [r4, #20]
 800ef04:	2b01      	cmp	r3, #1
 800ef06:	d02d      	beq.n	800ef64 <ucdr_serialize_double+0x128>
 800ef08:	68a3      	ldr	r3, [r4, #8]
 800ef0a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800ef0e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ef12:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800ef16:	7018      	strb	r0, [r3, #0]
 800ef18:	68a3      	ldr	r3, [r4, #8]
 800ef1a:	705a      	strb	r2, [r3, #1]
 800ef1c:	68a3      	ldr	r3, [r4, #8]
 800ef1e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ef22:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800ef26:	7099      	strb	r1, [r3, #2]
 800ef28:	68a3      	ldr	r3, [r4, #8]
 800ef2a:	70da      	strb	r2, [r3, #3]
 800ef2c:	68a3      	ldr	r3, [r4, #8]
 800ef2e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ef32:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800ef36:	7118      	strb	r0, [r3, #4]
 800ef38:	68a3      	ldr	r3, [r4, #8]
 800ef3a:	715a      	strb	r2, [r3, #5]
 800ef3c:	68a3      	ldr	r3, [r4, #8]
 800ef3e:	f89d 2000 	ldrb.w	r2, [sp]
 800ef42:	7199      	strb	r1, [r3, #6]
 800ef44:	68a3      	ldr	r3, [r4, #8]
 800ef46:	71da      	strb	r2, [r3, #7]
 800ef48:	2108      	movs	r1, #8
 800ef4a:	68a2      	ldr	r2, [r4, #8]
 800ef4c:	6923      	ldr	r3, [r4, #16]
 800ef4e:	440a      	add	r2, r1
 800ef50:	7561      	strb	r1, [r4, #21]
 800ef52:	440b      	add	r3, r1
 800ef54:	60a2      	str	r2, [r4, #8]
 800ef56:	6123      	str	r3, [r4, #16]
 800ef58:	7da0      	ldrb	r0, [r4, #22]
 800ef5a:	f080 0001 	eor.w	r0, r0, #1
 800ef5e:	b002      	add	sp, #8
 800ef60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef64:	466b      	mov	r3, sp
 800ef66:	68a2      	ldr	r2, [r4, #8]
 800ef68:	cb03      	ldmia	r3!, {r0, r1}
 800ef6a:	6010      	str	r0, [r2, #0]
 800ef6c:	6051      	str	r1, [r2, #4]
 800ef6e:	e7eb      	b.n	800ef48 <ucdr_serialize_double+0x10c>
 800ef70:	68a2      	ldr	r2, [r4, #8]
 800ef72:	6923      	ldr	r3, [r4, #16]
 800ef74:	7da0      	ldrb	r0, [r4, #22]
 800ef76:	1b92      	subs	r2, r2, r6
 800ef78:	1b9b      	subs	r3, r3, r6
 800ef7a:	7567      	strb	r7, [r4, #21]
 800ef7c:	f080 0001 	eor.w	r0, r0, #1
 800ef80:	60a2      	str	r2, [r4, #8]
 800ef82:	6123      	str	r3, [r4, #16]
 800ef84:	b002      	add	sp, #8
 800ef86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef8a:	68a3      	ldr	r3, [r4, #8]
 800ef8c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ef90:	701a      	strb	r2, [r3, #0]
 800ef92:	68a3      	ldr	r3, [r4, #8]
 800ef94:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ef98:	701a      	strb	r2, [r3, #0]
 800ef9a:	68a3      	ldr	r3, [r4, #8]
 800ef9c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800efa0:	701a      	strb	r2, [r3, #0]
 800efa2:	68a3      	ldr	r3, [r4, #8]
 800efa4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800efa8:	701a      	strb	r2, [r3, #0]
 800efaa:	68a3      	ldr	r3, [r4, #8]
 800efac:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800efb0:	701a      	strb	r2, [r3, #0]
 800efb2:	68a3      	ldr	r3, [r4, #8]
 800efb4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800efb8:	701a      	strb	r2, [r3, #0]
 800efba:	68a3      	ldr	r3, [r4, #8]
 800efbc:	f89d 2000 	ldrb.w	r2, [sp]
 800efc0:	701a      	strb	r2, [r3, #0]
 800efc2:	e78a      	b.n	800eeda <ucdr_serialize_double+0x9e>
 800efc4:	4628      	mov	r0, r5
 800efc6:	466d      	mov	r5, sp
 800efc8:	4632      	mov	r2, r6
 800efca:	4629      	mov	r1, r5
 800efcc:	f007 feb5 	bl	8016d3a <memcpy>
 800efd0:	4642      	mov	r2, r8
 800efd2:	19a9      	adds	r1, r5, r6
 800efd4:	68a0      	ldr	r0, [r4, #8]
 800efd6:	f007 feb0 	bl	8016d3a <memcpy>
 800efda:	e77e      	b.n	800eeda <ucdr_serialize_double+0x9e>

0800efdc <ucdr_serialize_endian_double>:
 800efdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800efe0:	4604      	mov	r4, r0
 800efe2:	b083      	sub	sp, #12
 800efe4:	460e      	mov	r6, r1
 800efe6:	2108      	movs	r1, #8
 800efe8:	ed8d 0b00 	vstr	d0, [sp]
 800efec:	f000 fabc 	bl	800f568 <ucdr_buffer_alignment>
 800eff0:	4601      	mov	r1, r0
 800eff2:	4620      	mov	r0, r4
 800eff4:	f894 8015 	ldrb.w	r8, [r4, #21]
 800eff8:	f000 fafe 	bl	800f5f8 <ucdr_advance_buffer>
 800effc:	2108      	movs	r1, #8
 800effe:	4620      	mov	r0, r4
 800f000:	f000 fa52 	bl	800f4a8 <ucdr_check_buffer_available_for>
 800f004:	2800      	cmp	r0, #0
 800f006:	d14d      	bne.n	800f0a4 <ucdr_serialize_endian_double+0xc8>
 800f008:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800f00c:	42bd      	cmp	r5, r7
 800f00e:	d944      	bls.n	800f09a <ucdr_serialize_endian_double+0xbe>
 800f010:	6923      	ldr	r3, [r4, #16]
 800f012:	4620      	mov	r0, r4
 800f014:	60a5      	str	r5, [r4, #8]
 800f016:	1bed      	subs	r5, r5, r7
 800f018:	442b      	add	r3, r5
 800f01a:	f1c5 0908 	rsb	r9, r5, #8
 800f01e:	6123      	str	r3, [r4, #16]
 800f020:	4649      	mov	r1, r9
 800f022:	f000 fa4d 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800f026:	2800      	cmp	r0, #0
 800f028:	d072      	beq.n	800f110 <ucdr_serialize_endian_double+0x134>
 800f02a:	2e01      	cmp	r6, #1
 800f02c:	f000 809b 	beq.w	800f166 <ucdr_serialize_endian_double+0x18a>
 800f030:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f034:	703b      	strb	r3, [r7, #0]
 800f036:	2d00      	cmp	r5, #0
 800f038:	d078      	beq.n	800f12c <ucdr_serialize_endian_double+0x150>
 800f03a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f03e:	2d01      	cmp	r5, #1
 800f040:	707b      	strb	r3, [r7, #1]
 800f042:	d077      	beq.n	800f134 <ucdr_serialize_endian_double+0x158>
 800f044:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f048:	2d02      	cmp	r5, #2
 800f04a:	70bb      	strb	r3, [r7, #2]
 800f04c:	d076      	beq.n	800f13c <ucdr_serialize_endian_double+0x160>
 800f04e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f052:	2d03      	cmp	r5, #3
 800f054:	70fb      	strb	r3, [r7, #3]
 800f056:	d075      	beq.n	800f144 <ucdr_serialize_endian_double+0x168>
 800f058:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f05c:	2d04      	cmp	r5, #4
 800f05e:	713b      	strb	r3, [r7, #4]
 800f060:	d074      	beq.n	800f14c <ucdr_serialize_endian_double+0x170>
 800f062:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800f066:	2d05      	cmp	r5, #5
 800f068:	717b      	strb	r3, [r7, #5]
 800f06a:	d073      	beq.n	800f154 <ucdr_serialize_endian_double+0x178>
 800f06c:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800f070:	2d06      	cmp	r5, #6
 800f072:	71bb      	strb	r3, [r7, #6]
 800f074:	d072      	beq.n	800f15c <ucdr_serialize_endian_double+0x180>
 800f076:	f89d 3000 	ldrb.w	r3, [sp]
 800f07a:	71fb      	strb	r3, [r7, #7]
 800f07c:	6923      	ldr	r3, [r4, #16]
 800f07e:	2108      	movs	r1, #8
 800f080:	68a2      	ldr	r2, [r4, #8]
 800f082:	3308      	adds	r3, #8
 800f084:	7da0      	ldrb	r0, [r4, #22]
 800f086:	444a      	add	r2, r9
 800f088:	7561      	strb	r1, [r4, #21]
 800f08a:	1b5d      	subs	r5, r3, r5
 800f08c:	f080 0001 	eor.w	r0, r0, #1
 800f090:	60a2      	str	r2, [r4, #8]
 800f092:	6125      	str	r5, [r4, #16]
 800f094:	b003      	add	sp, #12
 800f096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f09a:	2108      	movs	r1, #8
 800f09c:	4620      	mov	r0, r4
 800f09e:	f000 fa0f 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800f0a2:	b348      	cbz	r0, 800f0f8 <ucdr_serialize_endian_double+0x11c>
 800f0a4:	2e01      	cmp	r6, #1
 800f0a6:	d02d      	beq.n	800f104 <ucdr_serialize_endian_double+0x128>
 800f0a8:	68a3      	ldr	r3, [r4, #8]
 800f0aa:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800f0ae:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f0b2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f0b6:	7018      	strb	r0, [r3, #0]
 800f0b8:	68a3      	ldr	r3, [r4, #8]
 800f0ba:	705a      	strb	r2, [r3, #1]
 800f0bc:	68a3      	ldr	r3, [r4, #8]
 800f0be:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f0c2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800f0c6:	7099      	strb	r1, [r3, #2]
 800f0c8:	68a3      	ldr	r3, [r4, #8]
 800f0ca:	70da      	strb	r2, [r3, #3]
 800f0cc:	68a3      	ldr	r3, [r4, #8]
 800f0ce:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f0d2:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800f0d6:	7118      	strb	r0, [r3, #4]
 800f0d8:	68a3      	ldr	r3, [r4, #8]
 800f0da:	715a      	strb	r2, [r3, #5]
 800f0dc:	68a3      	ldr	r3, [r4, #8]
 800f0de:	f89d 2000 	ldrb.w	r2, [sp]
 800f0e2:	7199      	strb	r1, [r3, #6]
 800f0e4:	68a3      	ldr	r3, [r4, #8]
 800f0e6:	71da      	strb	r2, [r3, #7]
 800f0e8:	2108      	movs	r1, #8
 800f0ea:	68a2      	ldr	r2, [r4, #8]
 800f0ec:	6923      	ldr	r3, [r4, #16]
 800f0ee:	440a      	add	r2, r1
 800f0f0:	7561      	strb	r1, [r4, #21]
 800f0f2:	440b      	add	r3, r1
 800f0f4:	60a2      	str	r2, [r4, #8]
 800f0f6:	6123      	str	r3, [r4, #16]
 800f0f8:	7da0      	ldrb	r0, [r4, #22]
 800f0fa:	f080 0001 	eor.w	r0, r0, #1
 800f0fe:	b003      	add	sp, #12
 800f100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f104:	466b      	mov	r3, sp
 800f106:	68a2      	ldr	r2, [r4, #8]
 800f108:	cb03      	ldmia	r3!, {r0, r1}
 800f10a:	6010      	str	r0, [r2, #0]
 800f10c:	6051      	str	r1, [r2, #4]
 800f10e:	e7eb      	b.n	800f0e8 <ucdr_serialize_endian_double+0x10c>
 800f110:	68a2      	ldr	r2, [r4, #8]
 800f112:	6923      	ldr	r3, [r4, #16]
 800f114:	7da0      	ldrb	r0, [r4, #22]
 800f116:	1b52      	subs	r2, r2, r5
 800f118:	1b5b      	subs	r3, r3, r5
 800f11a:	f884 8015 	strb.w	r8, [r4, #21]
 800f11e:	f080 0001 	eor.w	r0, r0, #1
 800f122:	60a2      	str	r2, [r4, #8]
 800f124:	6123      	str	r3, [r4, #16]
 800f126:	b003      	add	sp, #12
 800f128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f12c:	68a3      	ldr	r3, [r4, #8]
 800f12e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f132:	701a      	strb	r2, [r3, #0]
 800f134:	68a3      	ldr	r3, [r4, #8]
 800f136:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f13a:	701a      	strb	r2, [r3, #0]
 800f13c:	68a3      	ldr	r3, [r4, #8]
 800f13e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f142:	701a      	strb	r2, [r3, #0]
 800f144:	68a3      	ldr	r3, [r4, #8]
 800f146:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f14a:	701a      	strb	r2, [r3, #0]
 800f14c:	68a3      	ldr	r3, [r4, #8]
 800f14e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f152:	701a      	strb	r2, [r3, #0]
 800f154:	68a3      	ldr	r3, [r4, #8]
 800f156:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f15a:	701a      	strb	r2, [r3, #0]
 800f15c:	68a3      	ldr	r3, [r4, #8]
 800f15e:	f89d 2000 	ldrb.w	r2, [sp]
 800f162:	701a      	strb	r2, [r3, #0]
 800f164:	e78a      	b.n	800f07c <ucdr_serialize_endian_double+0xa0>
 800f166:	466e      	mov	r6, sp
 800f168:	462a      	mov	r2, r5
 800f16a:	4638      	mov	r0, r7
 800f16c:	4631      	mov	r1, r6
 800f16e:	f007 fde4 	bl	8016d3a <memcpy>
 800f172:	464a      	mov	r2, r9
 800f174:	1971      	adds	r1, r6, r5
 800f176:	68a0      	ldr	r0, [r4, #8]
 800f178:	f007 fddf 	bl	8016d3a <memcpy>
 800f17c:	e77e      	b.n	800f07c <ucdr_serialize_endian_double+0xa0>
 800f17e:	bf00      	nop

0800f180 <ucdr_deserialize_double>:
 800f180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f184:	4604      	mov	r4, r0
 800f186:	460d      	mov	r5, r1
 800f188:	2108      	movs	r1, #8
 800f18a:	f000 f9ed 	bl	800f568 <ucdr_buffer_alignment>
 800f18e:	4601      	mov	r1, r0
 800f190:	4620      	mov	r0, r4
 800f192:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f196:	f000 fa2f 	bl	800f5f8 <ucdr_advance_buffer>
 800f19a:	2108      	movs	r1, #8
 800f19c:	4620      	mov	r0, r4
 800f19e:	f000 f983 	bl	800f4a8 <ucdr_check_buffer_available_for>
 800f1a2:	2800      	cmp	r0, #0
 800f1a4:	d151      	bne.n	800f24a <ucdr_deserialize_double+0xca>
 800f1a6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f1aa:	42be      	cmp	r6, r7
 800f1ac:	d948      	bls.n	800f240 <ucdr_deserialize_double+0xc0>
 800f1ae:	6923      	ldr	r3, [r4, #16]
 800f1b0:	4620      	mov	r0, r4
 800f1b2:	60a6      	str	r6, [r4, #8]
 800f1b4:	1bf6      	subs	r6, r6, r7
 800f1b6:	4433      	add	r3, r6
 800f1b8:	f1c6 0908 	rsb	r9, r6, #8
 800f1bc:	6123      	str	r3, [r4, #16]
 800f1be:	4649      	mov	r1, r9
 800f1c0:	f000 f97e 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800f1c4:	2800      	cmp	r0, #0
 800f1c6:	d06d      	beq.n	800f2a4 <ucdr_deserialize_double+0x124>
 800f1c8:	7d23      	ldrb	r3, [r4, #20]
 800f1ca:	2b01      	cmp	r3, #1
 800f1cc:	f000 8093 	beq.w	800f2f6 <ucdr_deserialize_double+0x176>
 800f1d0:	79fb      	ldrb	r3, [r7, #7]
 800f1d2:	702b      	strb	r3, [r5, #0]
 800f1d4:	2e00      	cmp	r6, #0
 800f1d6:	d072      	beq.n	800f2be <ucdr_deserialize_double+0x13e>
 800f1d8:	79bb      	ldrb	r3, [r7, #6]
 800f1da:	2e01      	cmp	r6, #1
 800f1dc:	706b      	strb	r3, [r5, #1]
 800f1de:	f105 0302 	add.w	r3, r5, #2
 800f1e2:	d070      	beq.n	800f2c6 <ucdr_deserialize_double+0x146>
 800f1e4:	797b      	ldrb	r3, [r7, #5]
 800f1e6:	2e02      	cmp	r6, #2
 800f1e8:	70ab      	strb	r3, [r5, #2]
 800f1ea:	f105 0303 	add.w	r3, r5, #3
 800f1ee:	d06e      	beq.n	800f2ce <ucdr_deserialize_double+0x14e>
 800f1f0:	793b      	ldrb	r3, [r7, #4]
 800f1f2:	2e03      	cmp	r6, #3
 800f1f4:	70eb      	strb	r3, [r5, #3]
 800f1f6:	f105 0304 	add.w	r3, r5, #4
 800f1fa:	d06c      	beq.n	800f2d6 <ucdr_deserialize_double+0x156>
 800f1fc:	78fb      	ldrb	r3, [r7, #3]
 800f1fe:	2e04      	cmp	r6, #4
 800f200:	712b      	strb	r3, [r5, #4]
 800f202:	f105 0305 	add.w	r3, r5, #5
 800f206:	d06a      	beq.n	800f2de <ucdr_deserialize_double+0x15e>
 800f208:	78bb      	ldrb	r3, [r7, #2]
 800f20a:	2e05      	cmp	r6, #5
 800f20c:	716b      	strb	r3, [r5, #5]
 800f20e:	f105 0306 	add.w	r3, r5, #6
 800f212:	d068      	beq.n	800f2e6 <ucdr_deserialize_double+0x166>
 800f214:	787b      	ldrb	r3, [r7, #1]
 800f216:	2e06      	cmp	r6, #6
 800f218:	71ab      	strb	r3, [r5, #6]
 800f21a:	f105 0307 	add.w	r3, r5, #7
 800f21e:	d066      	beq.n	800f2ee <ucdr_deserialize_double+0x16e>
 800f220:	783b      	ldrb	r3, [r7, #0]
 800f222:	71eb      	strb	r3, [r5, #7]
 800f224:	6923      	ldr	r3, [r4, #16]
 800f226:	2108      	movs	r1, #8
 800f228:	68a2      	ldr	r2, [r4, #8]
 800f22a:	3308      	adds	r3, #8
 800f22c:	7da0      	ldrb	r0, [r4, #22]
 800f22e:	444a      	add	r2, r9
 800f230:	7561      	strb	r1, [r4, #21]
 800f232:	1b9e      	subs	r6, r3, r6
 800f234:	f080 0001 	eor.w	r0, r0, #1
 800f238:	60a2      	str	r2, [r4, #8]
 800f23a:	6126      	str	r6, [r4, #16]
 800f23c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f240:	2108      	movs	r1, #8
 800f242:	4620      	mov	r0, r4
 800f244:	f000 f93c 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800f248:	b310      	cbz	r0, 800f290 <ucdr_deserialize_double+0x110>
 800f24a:	7d23      	ldrb	r3, [r4, #20]
 800f24c:	2b01      	cmp	r3, #1
 800f24e:	68a3      	ldr	r3, [r4, #8]
 800f250:	d023      	beq.n	800f29a <ucdr_deserialize_double+0x11a>
 800f252:	79db      	ldrb	r3, [r3, #7]
 800f254:	702b      	strb	r3, [r5, #0]
 800f256:	68a3      	ldr	r3, [r4, #8]
 800f258:	799b      	ldrb	r3, [r3, #6]
 800f25a:	706b      	strb	r3, [r5, #1]
 800f25c:	68a3      	ldr	r3, [r4, #8]
 800f25e:	795b      	ldrb	r3, [r3, #5]
 800f260:	70ab      	strb	r3, [r5, #2]
 800f262:	68a3      	ldr	r3, [r4, #8]
 800f264:	791b      	ldrb	r3, [r3, #4]
 800f266:	70eb      	strb	r3, [r5, #3]
 800f268:	68a3      	ldr	r3, [r4, #8]
 800f26a:	78db      	ldrb	r3, [r3, #3]
 800f26c:	712b      	strb	r3, [r5, #4]
 800f26e:	68a3      	ldr	r3, [r4, #8]
 800f270:	789b      	ldrb	r3, [r3, #2]
 800f272:	716b      	strb	r3, [r5, #5]
 800f274:	68a3      	ldr	r3, [r4, #8]
 800f276:	785b      	ldrb	r3, [r3, #1]
 800f278:	71ab      	strb	r3, [r5, #6]
 800f27a:	68a3      	ldr	r3, [r4, #8]
 800f27c:	781b      	ldrb	r3, [r3, #0]
 800f27e:	71eb      	strb	r3, [r5, #7]
 800f280:	2108      	movs	r1, #8
 800f282:	68a2      	ldr	r2, [r4, #8]
 800f284:	6923      	ldr	r3, [r4, #16]
 800f286:	440a      	add	r2, r1
 800f288:	7561      	strb	r1, [r4, #21]
 800f28a:	440b      	add	r3, r1
 800f28c:	60a2      	str	r2, [r4, #8]
 800f28e:	6123      	str	r3, [r4, #16]
 800f290:	7da0      	ldrb	r0, [r4, #22]
 800f292:	f080 0001 	eor.w	r0, r0, #1
 800f296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f29a:	681a      	ldr	r2, [r3, #0]
 800f29c:	685b      	ldr	r3, [r3, #4]
 800f29e:	602a      	str	r2, [r5, #0]
 800f2a0:	606b      	str	r3, [r5, #4]
 800f2a2:	e7ed      	b.n	800f280 <ucdr_deserialize_double+0x100>
 800f2a4:	68a2      	ldr	r2, [r4, #8]
 800f2a6:	6923      	ldr	r3, [r4, #16]
 800f2a8:	1b92      	subs	r2, r2, r6
 800f2aa:	7da0      	ldrb	r0, [r4, #22]
 800f2ac:	1b9b      	subs	r3, r3, r6
 800f2ae:	f884 8015 	strb.w	r8, [r4, #21]
 800f2b2:	f080 0001 	eor.w	r0, r0, #1
 800f2b6:	60a2      	str	r2, [r4, #8]
 800f2b8:	6123      	str	r3, [r4, #16]
 800f2ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2be:	68a3      	ldr	r3, [r4, #8]
 800f2c0:	799b      	ldrb	r3, [r3, #6]
 800f2c2:	706b      	strb	r3, [r5, #1]
 800f2c4:	1cab      	adds	r3, r5, #2
 800f2c6:	68a2      	ldr	r2, [r4, #8]
 800f2c8:	7952      	ldrb	r2, [r2, #5]
 800f2ca:	f803 2b01 	strb.w	r2, [r3], #1
 800f2ce:	68a2      	ldr	r2, [r4, #8]
 800f2d0:	7912      	ldrb	r2, [r2, #4]
 800f2d2:	f803 2b01 	strb.w	r2, [r3], #1
 800f2d6:	68a2      	ldr	r2, [r4, #8]
 800f2d8:	78d2      	ldrb	r2, [r2, #3]
 800f2da:	f803 2b01 	strb.w	r2, [r3], #1
 800f2de:	68a2      	ldr	r2, [r4, #8]
 800f2e0:	7892      	ldrb	r2, [r2, #2]
 800f2e2:	f803 2b01 	strb.w	r2, [r3], #1
 800f2e6:	68a2      	ldr	r2, [r4, #8]
 800f2e8:	7852      	ldrb	r2, [r2, #1]
 800f2ea:	f803 2b01 	strb.w	r2, [r3], #1
 800f2ee:	68a2      	ldr	r2, [r4, #8]
 800f2f0:	7812      	ldrb	r2, [r2, #0]
 800f2f2:	701a      	strb	r2, [r3, #0]
 800f2f4:	e796      	b.n	800f224 <ucdr_deserialize_double+0xa4>
 800f2f6:	4639      	mov	r1, r7
 800f2f8:	4632      	mov	r2, r6
 800f2fa:	4628      	mov	r0, r5
 800f2fc:	f007 fd1d 	bl	8016d3a <memcpy>
 800f300:	464a      	mov	r2, r9
 800f302:	19a8      	adds	r0, r5, r6
 800f304:	68a1      	ldr	r1, [r4, #8]
 800f306:	f007 fd18 	bl	8016d3a <memcpy>
 800f30a:	e78b      	b.n	800f224 <ucdr_deserialize_double+0xa4>

0800f30c <ucdr_deserialize_endian_double>:
 800f30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f310:	4604      	mov	r4, r0
 800f312:	460f      	mov	r7, r1
 800f314:	2108      	movs	r1, #8
 800f316:	4615      	mov	r5, r2
 800f318:	f000 f926 	bl	800f568 <ucdr_buffer_alignment>
 800f31c:	4601      	mov	r1, r0
 800f31e:	4620      	mov	r0, r4
 800f320:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f324:	f000 f968 	bl	800f5f8 <ucdr_advance_buffer>
 800f328:	2108      	movs	r1, #8
 800f32a:	4620      	mov	r0, r4
 800f32c:	f000 f8bc 	bl	800f4a8 <ucdr_check_buffer_available_for>
 800f330:	2800      	cmp	r0, #0
 800f332:	d159      	bne.n	800f3e8 <ucdr_deserialize_endian_double+0xdc>
 800f334:	e9d4 6901 	ldrd	r6, r9, [r4, #4]
 800f338:	454e      	cmp	r6, r9
 800f33a:	d950      	bls.n	800f3de <ucdr_deserialize_endian_double+0xd2>
 800f33c:	6923      	ldr	r3, [r4, #16]
 800f33e:	4620      	mov	r0, r4
 800f340:	60a6      	str	r6, [r4, #8]
 800f342:	eba6 0609 	sub.w	r6, r6, r9
 800f346:	4433      	add	r3, r6
 800f348:	f1c6 0a08 	rsb	sl, r6, #8
 800f34c:	6123      	str	r3, [r4, #16]
 800f34e:	4651      	mov	r1, sl
 800f350:	f000 f8b6 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800f354:	2800      	cmp	r0, #0
 800f356:	d073      	beq.n	800f440 <ucdr_deserialize_endian_double+0x134>
 800f358:	2f01      	cmp	r7, #1
 800f35a:	f000 809a 	beq.w	800f492 <ucdr_deserialize_endian_double+0x186>
 800f35e:	f899 3007 	ldrb.w	r3, [r9, #7]
 800f362:	702b      	strb	r3, [r5, #0]
 800f364:	2e00      	cmp	r6, #0
 800f366:	d078      	beq.n	800f45a <ucdr_deserialize_endian_double+0x14e>
 800f368:	f899 3006 	ldrb.w	r3, [r9, #6]
 800f36c:	2e01      	cmp	r6, #1
 800f36e:	706b      	strb	r3, [r5, #1]
 800f370:	f105 0302 	add.w	r3, r5, #2
 800f374:	d075      	beq.n	800f462 <ucdr_deserialize_endian_double+0x156>
 800f376:	f899 3005 	ldrb.w	r3, [r9, #5]
 800f37a:	2e02      	cmp	r6, #2
 800f37c:	70ab      	strb	r3, [r5, #2]
 800f37e:	f105 0303 	add.w	r3, r5, #3
 800f382:	d072      	beq.n	800f46a <ucdr_deserialize_endian_double+0x15e>
 800f384:	f899 3004 	ldrb.w	r3, [r9, #4]
 800f388:	2e03      	cmp	r6, #3
 800f38a:	70eb      	strb	r3, [r5, #3]
 800f38c:	f105 0304 	add.w	r3, r5, #4
 800f390:	d06f      	beq.n	800f472 <ucdr_deserialize_endian_double+0x166>
 800f392:	f899 3003 	ldrb.w	r3, [r9, #3]
 800f396:	2e04      	cmp	r6, #4
 800f398:	712b      	strb	r3, [r5, #4]
 800f39a:	f105 0305 	add.w	r3, r5, #5
 800f39e:	d06c      	beq.n	800f47a <ucdr_deserialize_endian_double+0x16e>
 800f3a0:	f899 3002 	ldrb.w	r3, [r9, #2]
 800f3a4:	2e05      	cmp	r6, #5
 800f3a6:	716b      	strb	r3, [r5, #5]
 800f3a8:	f105 0306 	add.w	r3, r5, #6
 800f3ac:	d069      	beq.n	800f482 <ucdr_deserialize_endian_double+0x176>
 800f3ae:	f899 3001 	ldrb.w	r3, [r9, #1]
 800f3b2:	2e06      	cmp	r6, #6
 800f3b4:	71ab      	strb	r3, [r5, #6]
 800f3b6:	f105 0307 	add.w	r3, r5, #7
 800f3ba:	d066      	beq.n	800f48a <ucdr_deserialize_endian_double+0x17e>
 800f3bc:	f899 3000 	ldrb.w	r3, [r9]
 800f3c0:	71eb      	strb	r3, [r5, #7]
 800f3c2:	6923      	ldr	r3, [r4, #16]
 800f3c4:	2108      	movs	r1, #8
 800f3c6:	68a2      	ldr	r2, [r4, #8]
 800f3c8:	3308      	adds	r3, #8
 800f3ca:	7da0      	ldrb	r0, [r4, #22]
 800f3cc:	4452      	add	r2, sl
 800f3ce:	7561      	strb	r1, [r4, #21]
 800f3d0:	1b9e      	subs	r6, r3, r6
 800f3d2:	f080 0001 	eor.w	r0, r0, #1
 800f3d6:	60a2      	str	r2, [r4, #8]
 800f3d8:	6126      	str	r6, [r4, #16]
 800f3da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3de:	2108      	movs	r1, #8
 800f3e0:	4620      	mov	r0, r4
 800f3e2:	f000 f86d 	bl	800f4c0 <ucdr_check_final_buffer_behavior>
 800f3e6:	b308      	cbz	r0, 800f42c <ucdr_deserialize_endian_double+0x120>
 800f3e8:	2f01      	cmp	r7, #1
 800f3ea:	68a3      	ldr	r3, [r4, #8]
 800f3ec:	d023      	beq.n	800f436 <ucdr_deserialize_endian_double+0x12a>
 800f3ee:	79db      	ldrb	r3, [r3, #7]
 800f3f0:	702b      	strb	r3, [r5, #0]
 800f3f2:	68a3      	ldr	r3, [r4, #8]
 800f3f4:	799b      	ldrb	r3, [r3, #6]
 800f3f6:	706b      	strb	r3, [r5, #1]
 800f3f8:	68a3      	ldr	r3, [r4, #8]
 800f3fa:	795b      	ldrb	r3, [r3, #5]
 800f3fc:	70ab      	strb	r3, [r5, #2]
 800f3fe:	68a3      	ldr	r3, [r4, #8]
 800f400:	791b      	ldrb	r3, [r3, #4]
 800f402:	70eb      	strb	r3, [r5, #3]
 800f404:	68a3      	ldr	r3, [r4, #8]
 800f406:	78db      	ldrb	r3, [r3, #3]
 800f408:	712b      	strb	r3, [r5, #4]
 800f40a:	68a3      	ldr	r3, [r4, #8]
 800f40c:	789b      	ldrb	r3, [r3, #2]
 800f40e:	716b      	strb	r3, [r5, #5]
 800f410:	68a3      	ldr	r3, [r4, #8]
 800f412:	785b      	ldrb	r3, [r3, #1]
 800f414:	71ab      	strb	r3, [r5, #6]
 800f416:	68a3      	ldr	r3, [r4, #8]
 800f418:	781b      	ldrb	r3, [r3, #0]
 800f41a:	71eb      	strb	r3, [r5, #7]
 800f41c:	2108      	movs	r1, #8
 800f41e:	68a2      	ldr	r2, [r4, #8]
 800f420:	6923      	ldr	r3, [r4, #16]
 800f422:	440a      	add	r2, r1
 800f424:	7561      	strb	r1, [r4, #21]
 800f426:	440b      	add	r3, r1
 800f428:	60a2      	str	r2, [r4, #8]
 800f42a:	6123      	str	r3, [r4, #16]
 800f42c:	7da0      	ldrb	r0, [r4, #22]
 800f42e:	f080 0001 	eor.w	r0, r0, #1
 800f432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f436:	681a      	ldr	r2, [r3, #0]
 800f438:	685b      	ldr	r3, [r3, #4]
 800f43a:	602a      	str	r2, [r5, #0]
 800f43c:	606b      	str	r3, [r5, #4]
 800f43e:	e7ed      	b.n	800f41c <ucdr_deserialize_endian_double+0x110>
 800f440:	68a2      	ldr	r2, [r4, #8]
 800f442:	6923      	ldr	r3, [r4, #16]
 800f444:	1b92      	subs	r2, r2, r6
 800f446:	7da0      	ldrb	r0, [r4, #22]
 800f448:	1b9b      	subs	r3, r3, r6
 800f44a:	f884 8015 	strb.w	r8, [r4, #21]
 800f44e:	f080 0001 	eor.w	r0, r0, #1
 800f452:	60a2      	str	r2, [r4, #8]
 800f454:	6123      	str	r3, [r4, #16]
 800f456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f45a:	68a3      	ldr	r3, [r4, #8]
 800f45c:	799b      	ldrb	r3, [r3, #6]
 800f45e:	706b      	strb	r3, [r5, #1]
 800f460:	1cab      	adds	r3, r5, #2
 800f462:	68a2      	ldr	r2, [r4, #8]
 800f464:	7952      	ldrb	r2, [r2, #5]
 800f466:	f803 2b01 	strb.w	r2, [r3], #1
 800f46a:	68a2      	ldr	r2, [r4, #8]
 800f46c:	7912      	ldrb	r2, [r2, #4]
 800f46e:	f803 2b01 	strb.w	r2, [r3], #1
 800f472:	68a2      	ldr	r2, [r4, #8]
 800f474:	78d2      	ldrb	r2, [r2, #3]
 800f476:	f803 2b01 	strb.w	r2, [r3], #1
 800f47a:	68a2      	ldr	r2, [r4, #8]
 800f47c:	7892      	ldrb	r2, [r2, #2]
 800f47e:	f803 2b01 	strb.w	r2, [r3], #1
 800f482:	68a2      	ldr	r2, [r4, #8]
 800f484:	7852      	ldrb	r2, [r2, #1]
 800f486:	f803 2b01 	strb.w	r2, [r3], #1
 800f48a:	68a2      	ldr	r2, [r4, #8]
 800f48c:	7812      	ldrb	r2, [r2, #0]
 800f48e:	701a      	strb	r2, [r3, #0]
 800f490:	e797      	b.n	800f3c2 <ucdr_deserialize_endian_double+0xb6>
 800f492:	4649      	mov	r1, r9
 800f494:	4632      	mov	r2, r6
 800f496:	4628      	mov	r0, r5
 800f498:	f007 fc4f 	bl	8016d3a <memcpy>
 800f49c:	4652      	mov	r2, sl
 800f49e:	19a8      	adds	r0, r5, r6
 800f4a0:	68a1      	ldr	r1, [r4, #8]
 800f4a2:	f007 fc4a 	bl	8016d3a <memcpy>
 800f4a6:	e78c      	b.n	800f3c2 <ucdr_deserialize_endian_double+0xb6>

0800f4a8 <ucdr_check_buffer_available_for>:
 800f4a8:	7d83      	ldrb	r3, [r0, #22]
 800f4aa:	b93b      	cbnz	r3, 800f4bc <ucdr_check_buffer_available_for+0x14>
 800f4ac:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800f4b0:	4419      	add	r1, r3
 800f4b2:	4288      	cmp	r0, r1
 800f4b4:	bf34      	ite	cc
 800f4b6:	2000      	movcc	r0, #0
 800f4b8:	2001      	movcs	r0, #1
 800f4ba:	4770      	bx	lr
 800f4bc:	2000      	movs	r0, #0
 800f4be:	4770      	bx	lr

0800f4c0 <ucdr_check_final_buffer_behavior>:
 800f4c0:	7d83      	ldrb	r3, [r0, #22]
 800f4c2:	b943      	cbnz	r3, 800f4d6 <ucdr_check_final_buffer_behavior+0x16>
 800f4c4:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800f4c8:	b510      	push	{r4, lr}
 800f4ca:	4291      	cmp	r1, r2
 800f4cc:	4604      	mov	r4, r0
 800f4ce:	d205      	bcs.n	800f4dc <ucdr_check_final_buffer_behavior+0x1c>
 800f4d0:	2301      	movs	r3, #1
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	bd10      	pop	{r4, pc}
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	4618      	mov	r0, r3
 800f4da:	4770      	bx	lr
 800f4dc:	6982      	ldr	r2, [r0, #24]
 800f4de:	b13a      	cbz	r2, 800f4f0 <ucdr_check_final_buffer_behavior+0x30>
 800f4e0:	69c1      	ldr	r1, [r0, #28]
 800f4e2:	4790      	blx	r2
 800f4e4:	f080 0301 	eor.w	r3, r0, #1
 800f4e8:	75a0      	strb	r0, [r4, #22]
 800f4ea:	b2db      	uxtb	r3, r3
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	bd10      	pop	{r4, pc}
 800f4f0:	2001      	movs	r0, #1
 800f4f2:	75a0      	strb	r0, [r4, #22]
 800f4f4:	e7fa      	b.n	800f4ec <ucdr_check_final_buffer_behavior+0x2c>
 800f4f6:	bf00      	nop

0800f4f8 <ucdr_set_on_full_buffer_callback>:
 800f4f8:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800f4fc:	4770      	bx	lr
 800f4fe:	bf00      	nop

0800f500 <ucdr_init_buffer_origin_offset_endian>:
 800f500:	b410      	push	{r4}
 800f502:	9c01      	ldr	r4, [sp, #4]
 800f504:	440a      	add	r2, r1
 800f506:	6001      	str	r1, [r0, #0]
 800f508:	6042      	str	r2, [r0, #4]
 800f50a:	190a      	adds	r2, r1, r4
 800f50c:	441c      	add	r4, r3
 800f50e:	6082      	str	r2, [r0, #8]
 800f510:	2200      	movs	r2, #0
 800f512:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800f516:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800f51a:	7542      	strb	r2, [r0, #21]
 800f51c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f520:	7582      	strb	r2, [r0, #22]
 800f522:	7503      	strb	r3, [r0, #20]
 800f524:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800f528:	4770      	bx	lr
 800f52a:	bf00      	nop

0800f52c <ucdr_init_buffer_origin_offset>:
 800f52c:	b510      	push	{r4, lr}
 800f52e:	b082      	sub	sp, #8
 800f530:	9c04      	ldr	r4, [sp, #16]
 800f532:	9400      	str	r4, [sp, #0]
 800f534:	2401      	movs	r4, #1
 800f536:	9401      	str	r4, [sp, #4]
 800f538:	f7ff ffe2 	bl	800f500 <ucdr_init_buffer_origin_offset_endian>
 800f53c:	b002      	add	sp, #8
 800f53e:	bd10      	pop	{r4, pc}

0800f540 <ucdr_init_buffer_origin>:
 800f540:	b510      	push	{r4, lr}
 800f542:	2400      	movs	r4, #0
 800f544:	b082      	sub	sp, #8
 800f546:	9400      	str	r4, [sp, #0]
 800f548:	f7ff fff0 	bl	800f52c <ucdr_init_buffer_origin_offset>
 800f54c:	b002      	add	sp, #8
 800f54e:	bd10      	pop	{r4, pc}

0800f550 <ucdr_init_buffer>:
 800f550:	2300      	movs	r3, #0
 800f552:	f7ff bff5 	b.w	800f540 <ucdr_init_buffer_origin>
 800f556:	bf00      	nop

0800f558 <ucdr_alignment>:
 800f558:	fbb0 f2f1 	udiv	r2, r0, r1
 800f55c:	fb02 0011 	mls	r0, r2, r1, r0
 800f560:	1e4b      	subs	r3, r1, #1
 800f562:	1a08      	subs	r0, r1, r0
 800f564:	4018      	ands	r0, r3
 800f566:	4770      	bx	lr

0800f568 <ucdr_buffer_alignment>:
 800f568:	7d43      	ldrb	r3, [r0, #21]
 800f56a:	428b      	cmp	r3, r1
 800f56c:	d209      	bcs.n	800f582 <ucdr_buffer_alignment+0x1a>
 800f56e:	6903      	ldr	r3, [r0, #16]
 800f570:	1e4a      	subs	r2, r1, #1
 800f572:	fbb3 f0f1 	udiv	r0, r3, r1
 800f576:	fb01 3010 	mls	r0, r1, r0, r3
 800f57a:	1a09      	subs	r1, r1, r0
 800f57c:	ea01 0002 	and.w	r0, r1, r2
 800f580:	4770      	bx	lr
 800f582:	2000      	movs	r0, #0
 800f584:	4770      	bx	lr
 800f586:	bf00      	nop

0800f588 <ucdr_align_to>:
 800f588:	b538      	push	{r3, r4, r5, lr}
 800f58a:	4604      	mov	r4, r0
 800f58c:	460d      	mov	r5, r1
 800f58e:	f7ff ffeb 	bl	800f568 <ucdr_buffer_alignment>
 800f592:	68a3      	ldr	r3, [r4, #8]
 800f594:	7565      	strb	r5, [r4, #21]
 800f596:	181a      	adds	r2, r3, r0
 800f598:	6923      	ldr	r3, [r4, #16]
 800f59a:	4418      	add	r0, r3
 800f59c:	6863      	ldr	r3, [r4, #4]
 800f59e:	4293      	cmp	r3, r2
 800f5a0:	6120      	str	r0, [r4, #16]
 800f5a2:	bf28      	it	cs
 800f5a4:	4613      	movcs	r3, r2
 800f5a6:	60a3      	str	r3, [r4, #8]
 800f5a8:	bd38      	pop	{r3, r4, r5, pc}
 800f5aa:	bf00      	nop

0800f5ac <ucdr_buffer_length>:
 800f5ac:	6882      	ldr	r2, [r0, #8]
 800f5ae:	6800      	ldr	r0, [r0, #0]
 800f5b0:	1a10      	subs	r0, r2, r0
 800f5b2:	4770      	bx	lr

0800f5b4 <ucdr_buffer_remaining>:
 800f5b4:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800f5b8:	1a10      	subs	r0, r2, r0
 800f5ba:	4770      	bx	lr

0800f5bc <ucdr_check_final_buffer_behavior_array>:
 800f5bc:	b538      	push	{r3, r4, r5, lr}
 800f5be:	7d83      	ldrb	r3, [r0, #22]
 800f5c0:	b9a3      	cbnz	r3, 800f5ec <ucdr_check_final_buffer_behavior_array+0x30>
 800f5c2:	4604      	mov	r4, r0
 800f5c4:	460d      	mov	r5, r1
 800f5c6:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800f5ca:	429a      	cmp	r2, r3
 800f5cc:	d300      	bcc.n	800f5d0 <ucdr_check_final_buffer_behavior_array+0x14>
 800f5ce:	b931      	cbnz	r1, 800f5de <ucdr_check_final_buffer_behavior_array+0x22>
 800f5d0:	4620      	mov	r0, r4
 800f5d2:	f7ff ffef 	bl	800f5b4 <ucdr_buffer_remaining>
 800f5d6:	42a8      	cmp	r0, r5
 800f5d8:	bf28      	it	cs
 800f5da:	4628      	movcs	r0, r5
 800f5dc:	bd38      	pop	{r3, r4, r5, pc}
 800f5de:	6983      	ldr	r3, [r0, #24]
 800f5e0:	b133      	cbz	r3, 800f5f0 <ucdr_check_final_buffer_behavior_array+0x34>
 800f5e2:	69c1      	ldr	r1, [r0, #28]
 800f5e4:	4798      	blx	r3
 800f5e6:	75a0      	strb	r0, [r4, #22]
 800f5e8:	2800      	cmp	r0, #0
 800f5ea:	d0f1      	beq.n	800f5d0 <ucdr_check_final_buffer_behavior_array+0x14>
 800f5ec:	2000      	movs	r0, #0
 800f5ee:	bd38      	pop	{r3, r4, r5, pc}
 800f5f0:	2301      	movs	r3, #1
 800f5f2:	7583      	strb	r3, [r0, #22]
 800f5f4:	e7fa      	b.n	800f5ec <ucdr_check_final_buffer_behavior_array+0x30>
 800f5f6:	bf00      	nop

0800f5f8 <ucdr_advance_buffer>:
 800f5f8:	b538      	push	{r3, r4, r5, lr}
 800f5fa:	4604      	mov	r4, r0
 800f5fc:	460d      	mov	r5, r1
 800f5fe:	f7ff ff53 	bl	800f4a8 <ucdr_check_buffer_available_for>
 800f602:	b178      	cbz	r0, 800f624 <ucdr_advance_buffer+0x2c>
 800f604:	6923      	ldr	r3, [r4, #16]
 800f606:	68a2      	ldr	r2, [r4, #8]
 800f608:	442b      	add	r3, r5
 800f60a:	442a      	add	r2, r5
 800f60c:	6123      	str	r3, [r4, #16]
 800f60e:	2301      	movs	r3, #1
 800f610:	60a2      	str	r2, [r4, #8]
 800f612:	7563      	strb	r3, [r4, #21]
 800f614:	bd38      	pop	{r3, r4, r5, pc}
 800f616:	68a2      	ldr	r2, [r4, #8]
 800f618:	1a2d      	subs	r5, r5, r0
 800f61a:	6923      	ldr	r3, [r4, #16]
 800f61c:	4402      	add	r2, r0
 800f61e:	4418      	add	r0, r3
 800f620:	60a2      	str	r2, [r4, #8]
 800f622:	6120      	str	r0, [r4, #16]
 800f624:	4629      	mov	r1, r5
 800f626:	2201      	movs	r2, #1
 800f628:	4620      	mov	r0, r4
 800f62a:	f7ff ffc7 	bl	800f5bc <ucdr_check_final_buffer_behavior_array>
 800f62e:	2800      	cmp	r0, #0
 800f630:	d1f1      	bne.n	800f616 <ucdr_advance_buffer+0x1e>
 800f632:	2301      	movs	r3, #1
 800f634:	7563      	strb	r3, [r4, #21]
 800f636:	bd38      	pop	{r3, r4, r5, pc}

0800f638 <ucdr_serialize_sequence_char>:
 800f638:	b570      	push	{r4, r5, r6, lr}
 800f63a:	4615      	mov	r5, r2
 800f63c:	460e      	mov	r6, r1
 800f63e:	7d01      	ldrb	r1, [r0, #20]
 800f640:	4604      	mov	r4, r0
 800f642:	f7fe ff51 	bl	800e4e8 <ucdr_serialize_endian_uint32_t>
 800f646:	b90d      	cbnz	r5, 800f64c <ucdr_serialize_sequence_char+0x14>
 800f648:	2001      	movs	r0, #1
 800f64a:	bd70      	pop	{r4, r5, r6, pc}
 800f64c:	462b      	mov	r3, r5
 800f64e:	4632      	mov	r2, r6
 800f650:	7d21      	ldrb	r1, [r4, #20]
 800f652:	4620      	mov	r0, r4
 800f654:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f658:	f7fe ba90 	b.w	800db7c <ucdr_serialize_endian_array_char>

0800f65c <ucdr_deserialize_sequence_char>:
 800f65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f660:	461d      	mov	r5, r3
 800f662:	4616      	mov	r6, r2
 800f664:	460f      	mov	r7, r1
 800f666:	461a      	mov	r2, r3
 800f668:	7d01      	ldrb	r1, [r0, #20]
 800f66a:	4604      	mov	r4, r0
 800f66c:	f7ff f864 	bl	800e738 <ucdr_deserialize_endian_uint32_t>
 800f670:	682b      	ldr	r3, [r5, #0]
 800f672:	429e      	cmp	r6, r3
 800f674:	d201      	bcs.n	800f67a <ucdr_deserialize_sequence_char+0x1e>
 800f676:	2201      	movs	r2, #1
 800f678:	75a2      	strb	r2, [r4, #22]
 800f67a:	b913      	cbnz	r3, 800f682 <ucdr_deserialize_sequence_char+0x26>
 800f67c:	2001      	movs	r0, #1
 800f67e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f682:	463a      	mov	r2, r7
 800f684:	7d21      	ldrb	r1, [r4, #20]
 800f686:	4620      	mov	r0, r4
 800f688:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f68c:	f7fe baa8 	b.w	800dbe0 <ucdr_deserialize_endian_array_char>

0800f690 <ucdr_serialize_sequence_uint8_t>:
 800f690:	b570      	push	{r4, r5, r6, lr}
 800f692:	4615      	mov	r5, r2
 800f694:	460e      	mov	r6, r1
 800f696:	7d01      	ldrb	r1, [r0, #20]
 800f698:	4604      	mov	r4, r0
 800f69a:	f7fe ff25 	bl	800e4e8 <ucdr_serialize_endian_uint32_t>
 800f69e:	b90d      	cbnz	r5, 800f6a4 <ucdr_serialize_sequence_uint8_t+0x14>
 800f6a0:	2001      	movs	r0, #1
 800f6a2:	bd70      	pop	{r4, r5, r6, pc}
 800f6a4:	462b      	mov	r3, r5
 800f6a6:	4632      	mov	r2, r6
 800f6a8:	7d21      	ldrb	r1, [r4, #20]
 800f6aa:	4620      	mov	r0, r4
 800f6ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f6b0:	f7fe bafc 	b.w	800dcac <ucdr_serialize_endian_array_uint8_t>

0800f6b4 <ucdr_deserialize_sequence_uint8_t>:
 800f6b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6b8:	461d      	mov	r5, r3
 800f6ba:	4616      	mov	r6, r2
 800f6bc:	460f      	mov	r7, r1
 800f6be:	461a      	mov	r2, r3
 800f6c0:	7d01      	ldrb	r1, [r0, #20]
 800f6c2:	4604      	mov	r4, r0
 800f6c4:	f7ff f838 	bl	800e738 <ucdr_deserialize_endian_uint32_t>
 800f6c8:	682b      	ldr	r3, [r5, #0]
 800f6ca:	429e      	cmp	r6, r3
 800f6cc:	d201      	bcs.n	800f6d2 <ucdr_deserialize_sequence_uint8_t+0x1e>
 800f6ce:	2201      	movs	r2, #1
 800f6d0:	75a2      	strb	r2, [r4, #22]
 800f6d2:	b913      	cbnz	r3, 800f6da <ucdr_deserialize_sequence_uint8_t+0x26>
 800f6d4:	2001      	movs	r0, #1
 800f6d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6da:	463a      	mov	r2, r7
 800f6dc:	7d21      	ldrb	r1, [r4, #20]
 800f6de:	4620      	mov	r0, r4
 800f6e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6e4:	f7fe bb48 	b.w	800dd78 <ucdr_deserialize_endian_array_uint8_t>

0800f6e8 <uxr_buffer_delete_entity>:
 800f6e8:	b510      	push	{r4, lr}
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	b08e      	sub	sp, #56	@ 0x38
 800f6ee:	4604      	mov	r4, r0
 800f6f0:	9103      	str	r1, [sp, #12]
 800f6f2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f6f6:	2303      	movs	r3, #3
 800f6f8:	2204      	movs	r2, #4
 800f6fa:	9300      	str	r3, [sp, #0]
 800f6fc:	ab06      	add	r3, sp, #24
 800f6fe:	f001 f87f 	bl	8010800 <uxr_prepare_stream_to_write_submessage>
 800f702:	b918      	cbnz	r0, 800f70c <uxr_buffer_delete_entity+0x24>
 800f704:	4604      	mov	r4, r0
 800f706:	4620      	mov	r0, r4
 800f708:	b00e      	add	sp, #56	@ 0x38
 800f70a:	bd10      	pop	{r4, pc}
 800f70c:	9902      	ldr	r1, [sp, #8]
 800f70e:	aa05      	add	r2, sp, #20
 800f710:	4620      	mov	r0, r4
 800f712:	f001 f9b1 	bl	8010a78 <uxr_init_base_object_request>
 800f716:	4604      	mov	r4, r0
 800f718:	a905      	add	r1, sp, #20
 800f71a:	a806      	add	r0, sp, #24
 800f71c:	f002 fb1a 	bl	8011d54 <uxr_serialize_DELETE_Payload>
 800f720:	4620      	mov	r0, r4
 800f722:	b00e      	add	sp, #56	@ 0x38
 800f724:	bd10      	pop	{r4, pc}
 800f726:	bf00      	nop

0800f728 <uxr_common_create_entity>:
 800f728:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800f72c:	b510      	push	{r4, lr}
 800f72e:	f1bc 0f01 	cmp.w	ip, #1
 800f732:	b08c      	sub	sp, #48	@ 0x30
 800f734:	4604      	mov	r4, r0
 800f736:	9202      	str	r2, [sp, #8]
 800f738:	bf0c      	ite	eq
 800f73a:	f003 0201 	andeq.w	r2, r3, #1
 800f73e:	2200      	movne	r2, #0
 800f740:	330e      	adds	r3, #14
 800f742:	9103      	str	r1, [sp, #12]
 800f744:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800f748:	441a      	add	r2, r3
 800f74a:	ab04      	add	r3, sp, #16
 800f74c:	9101      	str	r1, [sp, #4]
 800f74e:	2101      	movs	r1, #1
 800f750:	b292      	uxth	r2, r2
 800f752:	9100      	str	r1, [sp, #0]
 800f754:	9903      	ldr	r1, [sp, #12]
 800f756:	f001 f853 	bl	8010800 <uxr_prepare_stream_to_write_submessage>
 800f75a:	b918      	cbnz	r0, 800f764 <uxr_common_create_entity+0x3c>
 800f75c:	4604      	mov	r4, r0
 800f75e:	4620      	mov	r0, r4
 800f760:	b00c      	add	sp, #48	@ 0x30
 800f762:	bd10      	pop	{r4, pc}
 800f764:	9902      	ldr	r1, [sp, #8]
 800f766:	4620      	mov	r0, r4
 800f768:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f76a:	f001 f985 	bl	8010a78 <uxr_init_base_object_request>
 800f76e:	4604      	mov	r4, r0
 800f770:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f772:	a804      	add	r0, sp, #16
 800f774:	f002 fa48 	bl	8011c08 <uxr_serialize_CREATE_Payload>
 800f778:	4620      	mov	r0, r4
 800f77a:	b00c      	add	sp, #48	@ 0x30
 800f77c:	bd10      	pop	{r4, pc}
 800f77e:	bf00      	nop

0800f780 <uxr_buffer_create_participant_bin>:
 800f780:	b570      	push	{r4, r5, r6, lr}
 800f782:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800f786:	4605      	mov	r5, r0
 800f788:	ac11      	add	r4, sp, #68	@ 0x44
 800f78a:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800f78e:	2303      	movs	r3, #3
 800f790:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800f794:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800f798:	7223      	strb	r3, [r4, #8]
 800f79a:	2300      	movs	r3, #0
 800f79c:	2201      	movs	r2, #1
 800f79e:	f88d 3014 	strb.w	r3, [sp, #20]
 800f7a2:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800f7a4:	7122      	strb	r2, [r4, #4]
 800f7a6:	b1cb      	cbz	r3, 800f7dc <uxr_buffer_create_participant_bin+0x5c>
 800f7a8:	f88d 201c 	strb.w	r2, [sp, #28]
 800f7ac:	9308      	str	r3, [sp, #32]
 800f7ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f7b2:	a915      	add	r1, sp, #84	@ 0x54
 800f7b4:	a809      	add	r0, sp, #36	@ 0x24
 800f7b6:	f7ff fecb 	bl	800f550 <ucdr_init_buffer>
 800f7ba:	a905      	add	r1, sp, #20
 800f7bc:	a809      	add	r0, sp, #36	@ 0x24
 800f7be:	f001 fef9 	bl	80115b4 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800f7c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f7c4:	9600      	str	r6, [sp, #0]
 800f7c6:	4628      	mov	r0, r5
 800f7c8:	9401      	str	r4, [sp, #4]
 800f7ca:	60e3      	str	r3, [r4, #12]
 800f7cc:	b29b      	uxth	r3, r3
 800f7ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f7d2:	f7ff ffa9 	bl	800f728 <uxr_common_create_entity>
 800f7d6:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800f7da:	bd70      	pop	{r4, r5, r6, pc}
 800f7dc:	f88d 301c 	strb.w	r3, [sp, #28]
 800f7e0:	e7e5      	b.n	800f7ae <uxr_buffer_create_participant_bin+0x2e>
 800f7e2:	bf00      	nop

0800f7e4 <uxr_buffer_create_topic_bin>:
 800f7e4:	b570      	push	{r4, r5, r6, lr}
 800f7e6:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800f7ea:	4605      	mov	r5, r0
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	9105      	str	r1, [sp, #20]
 800f7f0:	a997      	add	r1, sp, #604	@ 0x25c
 800f7f2:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800f7f6:	ac13      	add	r4, sp, #76	@ 0x4c
 800f7f8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f7fc:	2302      	movs	r3, #2
 800f7fe:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800f802:	f000 f8ed 	bl	800f9e0 <uxr_object_id_to_raw>
 800f806:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800f808:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f80c:	a917      	add	r1, sp, #92	@ 0x5c
 800f80e:	a80b      	add	r0, sp, #44	@ 0x2c
 800f810:	9306      	str	r3, [sp, #24]
 800f812:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800f814:	930a      	str	r3, [sp, #40]	@ 0x28
 800f816:	2303      	movs	r3, #3
 800f818:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800f81c:	2301      	movs	r3, #1
 800f81e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800f822:	2300      	movs	r3, #0
 800f824:	f88d 301c 	strb.w	r3, [sp, #28]
 800f828:	f7ff fe92 	bl	800f550 <ucdr_init_buffer>
 800f82c:	a906      	add	r1, sp, #24
 800f82e:	a80b      	add	r0, sp, #44	@ 0x2c
 800f830:	f001 fee2 	bl	80115f8 <uxr_serialize_OBJK_Topic_Binary>
 800f834:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f836:	4628      	mov	r0, r5
 800f838:	9600      	str	r6, [sp, #0]
 800f83a:	9316      	str	r3, [sp, #88]	@ 0x58
 800f83c:	b29b      	uxth	r3, r3
 800f83e:	9401      	str	r4, [sp, #4]
 800f840:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f844:	f7ff ff70 	bl	800f728 <uxr_common_create_entity>
 800f848:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800f84c:	bd70      	pop	{r4, r5, r6, pc}
 800f84e:	bf00      	nop

0800f850 <uxr_buffer_create_publisher_bin>:
 800f850:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f852:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800f856:	2603      	movs	r6, #3
 800f858:	4605      	mov	r5, r0
 800f85a:	4618      	mov	r0, r3
 800f85c:	9105      	str	r1, [sp, #20]
 800f85e:	a992      	add	r1, sp, #584	@ 0x248
 800f860:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800f864:	ac0e      	add	r4, sp, #56	@ 0x38
 800f866:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800f86a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f86e:	f000 f8b7 	bl	800f9e0 <uxr_object_id_to_raw>
 800f872:	2300      	movs	r3, #0
 800f874:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f878:	a912      	add	r1, sp, #72	@ 0x48
 800f87a:	a806      	add	r0, sp, #24
 800f87c:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800f880:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800f884:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800f888:	f7ff fe62 	bl	800f550 <ucdr_init_buffer>
 800f88c:	a993      	add	r1, sp, #588	@ 0x24c
 800f88e:	a806      	add	r0, sp, #24
 800f890:	f001 ff66 	bl	8011760 <uxr_serialize_OBJK_Publisher_Binary>
 800f894:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f896:	4628      	mov	r0, r5
 800f898:	9700      	str	r7, [sp, #0]
 800f89a:	9311      	str	r3, [sp, #68]	@ 0x44
 800f89c:	b29b      	uxth	r3, r3
 800f89e:	9401      	str	r4, [sp, #4]
 800f8a0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f8a4:	f7ff ff40 	bl	800f728 <uxr_common_create_entity>
 800f8a8:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800f8ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8ae:	bf00      	nop

0800f8b0 <uxr_buffer_create_datawriter_bin>:
 800f8b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8b4:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800f8b8:	4606      	mov	r6, r0
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	2703      	movs	r7, #3
 800f8be:	ac1d      	add	r4, sp, #116	@ 0x74
 800f8c0:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800f8c4:	9105      	str	r1, [sp, #20]
 800f8c6:	a9a1      	add	r1, sp, #644	@ 0x284
 800f8c8:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800f8cc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f8d0:	2305      	movs	r3, #5
 800f8d2:	7123      	strb	r3, [r4, #4]
 800f8d4:	f000 f884 	bl	800f9e0 <uxr_object_id_to_raw>
 800f8d8:	a90e      	add	r1, sp, #56	@ 0x38
 800f8da:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800f8dc:	7227      	strb	r7, [r4, #8]
 800f8de:	f000 f87f 	bl	800f9e0 <uxr_object_id_to_raw>
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800f8e8:	3d00      	subs	r5, #0
 800f8ea:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800f8ee:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800f8f2:	bf18      	it	ne
 800f8f4:	2501      	movne	r5, #1
 800f8f6:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800f8fa:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800f8fe:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800f902:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f906:	2301      	movs	r3, #1
 800f908:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800f90c:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800f910:	bb8a      	cbnz	r2, 800f976 <uxr_buffer_create_datawriter_bin+0xc6>
 800f912:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800f916:	f04f 0c13 	mov.w	ip, #19
 800f91a:	250b      	movs	r5, #11
 800f91c:	2221      	movs	r2, #33	@ 0x21
 800f91e:	2111      	movs	r1, #17
 800f920:	2009      	movs	r0, #9
 800f922:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f926:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800f92a:	b923      	cbnz	r3, 800f936 <uxr_buffer_create_datawriter_bin+0x86>
 800f92c:	4672      	mov	r2, lr
 800f92e:	4661      	mov	r1, ip
 800f930:	4628      	mov	r0, r5
 800f932:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800f936:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800f93a:	2b01      	cmp	r3, #1
 800f93c:	d025      	beq.n	800f98a <uxr_buffer_create_datawriter_bin+0xda>
 800f93e:	2b03      	cmp	r3, #3
 800f940:	d029      	beq.n	800f996 <uxr_buffer_create_datawriter_bin+0xe6>
 800f942:	b32b      	cbz	r3, 800f990 <uxr_buffer_create_datawriter_bin+0xe0>
 800f944:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f948:	a921      	add	r1, sp, #132	@ 0x84
 800f94a:	a806      	add	r0, sp, #24
 800f94c:	f7ff fe00 	bl	800f550 <ucdr_init_buffer>
 800f950:	a90e      	add	r1, sp, #56	@ 0x38
 800f952:	a806      	add	r0, sp, #24
 800f954:	f001 ff7a 	bl	801184c <uxr_serialize_OBJK_DataWriter_Binary>
 800f958:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f95a:	f8cd 8000 	str.w	r8, [sp]
 800f95e:	4630      	mov	r0, r6
 800f960:	9401      	str	r4, [sp, #4]
 800f962:	60e3      	str	r3, [r4, #12]
 800f964:	b29b      	uxth	r3, r3
 800f966:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f96a:	f7ff fedd 	bl	800f728 <uxr_common_create_entity>
 800f96e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800f972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f976:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800f97a:	f04f 0c12 	mov.w	ip, #18
 800f97e:	250a      	movs	r5, #10
 800f980:	2220      	movs	r2, #32
 800f982:	2110      	movs	r1, #16
 800f984:	2008      	movs	r0, #8
 800f986:	2702      	movs	r7, #2
 800f988:	e7cd      	b.n	800f926 <uxr_buffer_create_datawriter_bin+0x76>
 800f98a:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800f98e:	e7d9      	b.n	800f944 <uxr_buffer_create_datawriter_bin+0x94>
 800f990:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800f994:	e7d6      	b.n	800f944 <uxr_buffer_create_datawriter_bin+0x94>
 800f996:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800f99a:	e7d3      	b.n	800f944 <uxr_buffer_create_datawriter_bin+0x94>

0800f99c <uxr_object_id>:
 800f99c:	b082      	sub	sp, #8
 800f99e:	2300      	movs	r3, #0
 800f9a0:	f88d 1006 	strb.w	r1, [sp, #6]
 800f9a4:	f360 030f 	bfi	r3, r0, #0, #16
 800f9a8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f9ac:	f362 431f 	bfi	r3, r2, #16, #16
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	b002      	add	sp, #8
 800f9b4:	4770      	bx	lr
 800f9b6:	bf00      	nop

0800f9b8 <uxr_object_id_from_raw>:
 800f9b8:	7843      	ldrb	r3, [r0, #1]
 800f9ba:	b082      	sub	sp, #8
 800f9bc:	7801      	ldrb	r1, [r0, #0]
 800f9be:	2000      	movs	r0, #0
 800f9c0:	091a      	lsrs	r2, r3, #4
 800f9c2:	f003 030f 	and.w	r3, r3, #15
 800f9c6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800f9ca:	f88d 3006 	strb.w	r3, [sp, #6]
 800f9ce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800f9d2:	f362 000f 	bfi	r0, r2, #0, #16
 800f9d6:	f363 401f 	bfi	r0, r3, #16, #16
 800f9da:	b002      	add	sp, #8
 800f9dc:	4770      	bx	lr
 800f9de:	bf00      	nop

0800f9e0 <uxr_object_id_to_raw>:
 800f9e0:	4602      	mov	r2, r0
 800f9e2:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800f9e6:	b082      	sub	sp, #8
 800f9e8:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800f9ec:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800f9f0:	f881 c000 	strb.w	ip, [r1]
 800f9f4:	7048      	strb	r0, [r1, #1]
 800f9f6:	b002      	add	sp, #8
 800f9f8:	4770      	bx	lr
 800f9fa:	bf00      	nop

0800f9fc <on_get_fragmentation_info>:
 800f9fc:	b500      	push	{lr}
 800f9fe:	b08b      	sub	sp, #44	@ 0x2c
 800fa00:	4601      	mov	r1, r0
 800fa02:	2204      	movs	r2, #4
 800fa04:	a802      	add	r0, sp, #8
 800fa06:	f7ff fda3 	bl	800f550 <ucdr_init_buffer>
 800fa0a:	f10d 0305 	add.w	r3, sp, #5
 800fa0e:	f10d 0206 	add.w	r2, sp, #6
 800fa12:	a901      	add	r1, sp, #4
 800fa14:	a802      	add	r0, sp, #8
 800fa16:	f001 f9b9 	bl	8010d8c <uxr_read_submessage_header>
 800fa1a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fa1e:	2b0d      	cmp	r3, #13
 800fa20:	d003      	beq.n	800fa2a <on_get_fragmentation_info+0x2e>
 800fa22:	2000      	movs	r0, #0
 800fa24:	b00b      	add	sp, #44	@ 0x2c
 800fa26:	f85d fb04 	ldr.w	pc, [sp], #4
 800fa2a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fa2e:	f013 0f02 	tst.w	r3, #2
 800fa32:	bf14      	ite	ne
 800fa34:	2002      	movne	r0, #2
 800fa36:	2001      	moveq	r0, #1
 800fa38:	b00b      	add	sp, #44	@ 0x2c
 800fa3a:	f85d fb04 	ldr.w	pc, [sp], #4
 800fa3e:	bf00      	nop

0800fa40 <read_submessage_get_info>:
 800fa40:	b570      	push	{r4, r5, r6, lr}
 800fa42:	2500      	movs	r5, #0
 800fa44:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800fa48:	460e      	mov	r6, r1
 800fa4a:	4604      	mov	r4, r0
 800fa4c:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800fa50:	4629      	mov	r1, r5
 800fa52:	a810      	add	r0, sp, #64	@ 0x40
 800fa54:	9503      	str	r5, [sp, #12]
 800fa56:	9504      	str	r5, [sp, #16]
 800fa58:	f007 f8a6 	bl	8016ba8 <memset>
 800fa5c:	a903      	add	r1, sp, #12
 800fa5e:	4630      	mov	r0, r6
 800fa60:	f002 f962 	bl	8011d28 <uxr_deserialize_GET_INFO_Payload>
 800fa64:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800fa68:	4620      	mov	r0, r4
 800fa6a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fa6e:	f000 fffb 	bl	8010a68 <uxr_session_header_offset>
 800fa72:	462b      	mov	r3, r5
 800fa74:	220c      	movs	r2, #12
 800fa76:	a905      	add	r1, sp, #20
 800fa78:	9000      	str	r0, [sp, #0]
 800fa7a:	a808      	add	r0, sp, #32
 800fa7c:	f7ff fd56 	bl	800f52c <ucdr_init_buffer_origin_offset>
 800fa80:	a910      	add	r1, sp, #64	@ 0x40
 800fa82:	a808      	add	r0, sp, #32
 800fa84:	f002 f9c4 	bl	8011e10 <uxr_serialize_INFO_Payload>
 800fa88:	9b08      	ldr	r3, [sp, #32]
 800fa8a:	462a      	mov	r2, r5
 800fa8c:	4629      	mov	r1, r5
 800fa8e:	4620      	mov	r0, r4
 800fa90:	f000 ff96 	bl	80109c0 <uxr_stamp_session_header>
 800fa94:	a808      	add	r0, sp, #32
 800fa96:	f7ff fd89 	bl	800f5ac <ucdr_buffer_length>
 800fa9a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fa9c:	4602      	mov	r2, r0
 800fa9e:	a905      	add	r1, sp, #20
 800faa0:	e9d3 0400 	ldrd	r0, r4, [r3]
 800faa4:	47a0      	blx	r4
 800faa6:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800faaa:	bd70      	pop	{r4, r5, r6, pc}

0800faac <write_submessage_acknack.isra.0>:
 800faac:	b570      	push	{r4, r5, r6, lr}
 800faae:	b092      	sub	sp, #72	@ 0x48
 800fab0:	4605      	mov	r5, r0
 800fab2:	460e      	mov	r6, r1
 800fab4:	4614      	mov	r4, r2
 800fab6:	f000 ffd7 	bl	8010a68 <uxr_session_header_offset>
 800faba:	a905      	add	r1, sp, #20
 800fabc:	9000      	str	r0, [sp, #0]
 800fabe:	2300      	movs	r3, #0
 800fac0:	a80a      	add	r0, sp, #40	@ 0x28
 800fac2:	2211      	movs	r2, #17
 800fac4:	f7ff fd32 	bl	800f52c <ucdr_init_buffer_origin_offset>
 800fac8:	2218      	movs	r2, #24
 800faca:	2300      	movs	r3, #0
 800facc:	210a      	movs	r1, #10
 800face:	fb02 5404 	mla	r4, r2, r4, r5
 800fad2:	a80a      	add	r0, sp, #40	@ 0x28
 800fad4:	2205      	movs	r2, #5
 800fad6:	3450      	adds	r4, #80	@ 0x50
 800fad8:	f001 f93e 	bl	8010d58 <uxr_buffer_submessage_header>
 800fadc:	a903      	add	r1, sp, #12
 800fade:	4620      	mov	r0, r4
 800fae0:	f004 fd84 	bl	80145ec <uxr_compute_acknack>
 800fae4:	ba40      	rev16	r0, r0
 800fae6:	a903      	add	r1, sp, #12
 800fae8:	f88d 6010 	strb.w	r6, [sp, #16]
 800faec:	f8ad 000e 	strh.w	r0, [sp, #14]
 800faf0:	a80a      	add	r0, sp, #40	@ 0x28
 800faf2:	f002 f9ff 	bl	8011ef4 <uxr_serialize_ACKNACK_Payload>
 800faf6:	2200      	movs	r2, #0
 800faf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fafa:	4628      	mov	r0, r5
 800fafc:	4611      	mov	r1, r2
 800fafe:	f000 ff5f 	bl	80109c0 <uxr_stamp_session_header>
 800fb02:	a80a      	add	r0, sp, #40	@ 0x28
 800fb04:	f7ff fd52 	bl	800f5ac <ucdr_buffer_length>
 800fb08:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800fb0a:	4602      	mov	r2, r0
 800fb0c:	a905      	add	r1, sp, #20
 800fb0e:	e9d3 0400 	ldrd	r0, r4, [r3]
 800fb12:	47a0      	blx	r4
 800fb14:	b012      	add	sp, #72	@ 0x48
 800fb16:	bd70      	pop	{r4, r5, r6, pc}

0800fb18 <uxr_init_session>:
 800fb18:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800fb50 <uxr_init_session+0x38>
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	b510      	push	{r4, lr}
 800fb20:	4604      	mov	r4, r0
 800fb22:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800fb26:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800fb2a:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800fb2e:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800fb32:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800fb36:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800fb3a:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800fb3e:	2181      	movs	r1, #129	@ 0x81
 800fb40:	f000 fea2 	bl	8010888 <uxr_init_session_info>
 800fb44:	f104 0008 	add.w	r0, r4, #8
 800fb48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb4c:	f001 b820 	b.w	8010b90 <uxr_init_stream_storage>
	...

0800fb58 <uxr_set_status_callback>:
 800fb58:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800fb5c:	4770      	bx	lr
 800fb5e:	bf00      	nop

0800fb60 <uxr_set_topic_callback>:
 800fb60:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800fb64:	4770      	bx	lr
 800fb66:	bf00      	nop

0800fb68 <uxr_set_request_callback>:
 800fb68:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800fb6c:	4770      	bx	lr
 800fb6e:	bf00      	nop

0800fb70 <uxr_set_reply_callback>:
 800fb70:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800fb74:	4770      	bx	lr
 800fb76:	bf00      	nop

0800fb78 <uxr_create_output_best_effort_stream>:
 800fb78:	b510      	push	{r4, lr}
 800fb7a:	4604      	mov	r4, r0
 800fb7c:	b084      	sub	sp, #16
 800fb7e:	e9cd 2100 	strd	r2, r1, [sp]
 800fb82:	f000 ff71 	bl	8010a68 <uxr_session_header_offset>
 800fb86:	4603      	mov	r3, r0
 800fb88:	f104 0008 	add.w	r0, r4, #8
 800fb8c:	e9dd 2100 	ldrd	r2, r1, [sp]
 800fb90:	b004      	add	sp, #16
 800fb92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb96:	f001 b841 	b.w	8010c1c <uxr_add_output_best_effort_buffer>
 800fb9a:	bf00      	nop

0800fb9c <uxr_create_output_reliable_stream>:
 800fb9c:	b530      	push	{r4, r5, lr}
 800fb9e:	b089      	sub	sp, #36	@ 0x24
 800fba0:	4604      	mov	r4, r0
 800fba2:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800fba6:	9303      	str	r3, [sp, #12]
 800fba8:	f000 ff5e 	bl	8010a68 <uxr_session_header_offset>
 800fbac:	4605      	mov	r5, r0
 800fbae:	9905      	ldr	r1, [sp, #20]
 800fbb0:	f104 0008 	add.w	r0, r4, #8
 800fbb4:	9500      	str	r5, [sp, #0]
 800fbb6:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800fbba:	f001 f843 	bl	8010c44 <uxr_add_output_reliable_buffer>
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	fa5f fc80 	uxtb.w	ip, r0
 800fbc4:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800fbc8:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800fbcc:	0e03      	lsrs	r3, r0, #24
 800fbce:	f36c 0207 	bfi	r2, ip, #0, #8
 800fbd2:	f364 220f 	bfi	r2, r4, #8, #8
 800fbd6:	f361 4217 	bfi	r2, r1, #16, #8
 800fbda:	f363 621f 	bfi	r2, r3, #24, #8
 800fbde:	4610      	mov	r0, r2
 800fbe0:	b009      	add	sp, #36	@ 0x24
 800fbe2:	bd30      	pop	{r4, r5, pc}

0800fbe4 <uxr_create_input_best_effort_stream>:
 800fbe4:	b082      	sub	sp, #8
 800fbe6:	3008      	adds	r0, #8
 800fbe8:	b002      	add	sp, #8
 800fbea:	f001 b845 	b.w	8010c78 <uxr_add_input_best_effort_buffer>
 800fbee:	bf00      	nop

0800fbf0 <uxr_create_input_reliable_stream>:
 800fbf0:	b510      	push	{r4, lr}
 800fbf2:	4c0c      	ldr	r4, [pc, #48]	@ (800fc24 <uxr_create_input_reliable_stream+0x34>)
 800fbf4:	b084      	sub	sp, #16
 800fbf6:	3008      	adds	r0, #8
 800fbf8:	9400      	str	r4, [sp, #0]
 800fbfa:	f001 f853 	bl	8010ca4 <uxr_add_input_reliable_buffer>
 800fbfe:	2200      	movs	r2, #0
 800fc00:	fa5f fe80 	uxtb.w	lr, r0
 800fc04:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 800fc08:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800fc0c:	0e03      	lsrs	r3, r0, #24
 800fc0e:	f36e 0207 	bfi	r2, lr, #0, #8
 800fc12:	f36c 220f 	bfi	r2, ip, #8, #8
 800fc16:	f361 4217 	bfi	r2, r1, #16, #8
 800fc1a:	f363 621f 	bfi	r2, r3, #24, #8
 800fc1e:	4610      	mov	r0, r2
 800fc20:	b004      	add	sp, #16
 800fc22:	bd10      	pop	{r4, pc}
 800fc24:	0800f9fd 	.word	0x0800f9fd

0800fc28 <uxr_epoch_millis>:
 800fc28:	b510      	push	{r4, lr}
 800fc2a:	4604      	mov	r4, r0
 800fc2c:	f001 f8f6 	bl	8010e1c <uxr_nanos>
 800fc30:	4a05      	ldr	r2, [pc, #20]	@ (800fc48 <uxr_epoch_millis+0x20>)
 800fc32:	e9d4 3426 	ldrd	r3, r4, [r4, #152]	@ 0x98
 800fc36:	1ac0      	subs	r0, r0, r3
 800fc38:	f04f 0300 	mov.w	r3, #0
 800fc3c:	eb61 0104 	sbc.w	r1, r1, r4
 800fc40:	f7f0 fb66 	bl	8000310 <__aeabi_ldivmod>
 800fc44:	bd10      	pop	{r4, pc}
 800fc46:	bf00      	nop
 800fc48:	000f4240 	.word	0x000f4240

0800fc4c <uxr_epoch_nanos>:
 800fc4c:	b510      	push	{r4, lr}
 800fc4e:	4604      	mov	r4, r0
 800fc50:	f001 f8e4 	bl	8010e1c <uxr_nanos>
 800fc54:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800fc58:	1ac0      	subs	r0, r0, r3
 800fc5a:	eb61 0102 	sbc.w	r1, r1, r2
 800fc5e:	bd10      	pop	{r4, pc}

0800fc60 <uxr_flash_output_streams>:
 800fc60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc64:	7e03      	ldrb	r3, [r0, #24]
 800fc66:	b084      	sub	sp, #16
 800fc68:	4604      	mov	r4, r0
 800fc6a:	b1fb      	cbz	r3, 800fcac <uxr_flash_output_streams+0x4c>
 800fc6c:	f04f 0900 	mov.w	r9, #0
 800fc70:	f10d 0802 	add.w	r8, sp, #2
 800fc74:	af03      	add	r7, sp, #12
 800fc76:	ae02      	add	r6, sp, #8
 800fc78:	4648      	mov	r0, r9
 800fc7a:	2201      	movs	r2, #1
 800fc7c:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800fc80:	4611      	mov	r1, r2
 800fc82:	3508      	adds	r5, #8
 800fc84:	f000 ff2a 	bl	8010adc <uxr_stream_id>
 800fc88:	4684      	mov	ip, r0
 800fc8a:	4643      	mov	r3, r8
 800fc8c:	463a      	mov	r2, r7
 800fc8e:	4631      	mov	r1, r6
 800fc90:	4628      	mov	r0, r5
 800fc92:	f8cd c004 	str.w	ip, [sp, #4]
 800fc96:	f004 fd33 	bl	8014700 <uxr_prepare_best_effort_buffer_to_send>
 800fc9a:	2800      	cmp	r0, #0
 800fc9c:	d13d      	bne.n	800fd1a <uxr_flash_output_streams+0xba>
 800fc9e:	f109 0901 	add.w	r9, r9, #1
 800fca2:	7e23      	ldrb	r3, [r4, #24]
 800fca4:	fa5f f089 	uxtb.w	r0, r9
 800fca8:	4283      	cmp	r3, r0
 800fcaa:	d8e6      	bhi.n	800fc7a <uxr_flash_output_streams+0x1a>
 800fcac:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800fcb0:	b383      	cbz	r3, 800fd14 <uxr_flash_output_streams+0xb4>
 800fcb2:	f04f 0900 	mov.w	r9, #0
 800fcb6:	f10d 0802 	add.w	r8, sp, #2
 800fcba:	af03      	add	r7, sp, #12
 800fcbc:	ae02      	add	r6, sp, #8
 800fcbe:	4648      	mov	r0, r9
 800fcc0:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800fcc4:	2201      	movs	r2, #1
 800fcc6:	2102      	movs	r1, #2
 800fcc8:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800fccc:	f000 ff06 	bl	8010adc <uxr_stream_id>
 800fcd0:	9001      	str	r0, [sp, #4]
 800fcd2:	3520      	adds	r5, #32
 800fcd4:	e00c      	b.n	800fcf0 <uxr_flash_output_streams+0x90>
 800fcd6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800fcda:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800fcde:	9b02      	ldr	r3, [sp, #8]
 800fce0:	f000 fe6e 	bl	80109c0 <uxr_stamp_session_header>
 800fce4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fce6:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800fcea:	e9d3 0a00 	ldrd	r0, sl, [r3]
 800fcee:	47d0      	blx	sl
 800fcf0:	4643      	mov	r3, r8
 800fcf2:	463a      	mov	r2, r7
 800fcf4:	4631      	mov	r1, r6
 800fcf6:	4628      	mov	r0, r5
 800fcf8:	f004 ff26 	bl	8014b48 <uxr_prepare_next_reliable_buffer_to_send>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	4620      	mov	r0, r4
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d1e8      	bne.n	800fcd6 <uxr_flash_output_streams+0x76>
 800fd04:	f109 0901 	add.w	r9, r9, #1
 800fd08:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800fd0c:	fa5f f089 	uxtb.w	r0, r9
 800fd10:	4283      	cmp	r3, r0
 800fd12:	d8d5      	bhi.n	800fcc0 <uxr_flash_output_streams+0x60>
 800fd14:	b004      	add	sp, #16
 800fd16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd1a:	9b02      	ldr	r3, [sp, #8]
 800fd1c:	4620      	mov	r0, r4
 800fd1e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800fd22:	f109 0901 	add.w	r9, r9, #1
 800fd26:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800fd2a:	f000 fe49 	bl	80109c0 <uxr_stamp_session_header>
 800fd2e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fd30:	9a03      	ldr	r2, [sp, #12]
 800fd32:	685d      	ldr	r5, [r3, #4]
 800fd34:	6818      	ldr	r0, [r3, #0]
 800fd36:	9902      	ldr	r1, [sp, #8]
 800fd38:	47a8      	blx	r5
 800fd3a:	7e23      	ldrb	r3, [r4, #24]
 800fd3c:	fa5f f089 	uxtb.w	r0, r9
 800fd40:	4283      	cmp	r3, r0
 800fd42:	d89a      	bhi.n	800fc7a <uxr_flash_output_streams+0x1a>
 800fd44:	e7b2      	b.n	800fcac <uxr_flash_output_streams+0x4c>
 800fd46:	bf00      	nop

0800fd48 <read_submessage_info>:
 800fd48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd4c:	460d      	mov	r5, r1
 800fd4e:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800fd52:	4606      	mov	r6, r0
 800fd54:	4669      	mov	r1, sp
 800fd56:	4628      	mov	r0, r5
 800fd58:	f001 fef8 	bl	8011b4c <uxr_deserialize_BaseObjectReply>
 800fd5c:	4604      	mov	r4, r0
 800fd5e:	a902      	add	r1, sp, #8
 800fd60:	4628      	mov	r0, r5
 800fd62:	f89d 7005 	ldrb.w	r7, [sp, #5]
 800fd66:	f7fe f8f9 	bl	800df5c <ucdr_deserialize_bool>
 800fd6a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800fd6e:	4004      	ands	r4, r0
 800fd70:	b2e4      	uxtb	r4, r4
 800fd72:	b95b      	cbnz	r3, 800fd8c <read_submessage_info+0x44>
 800fd74:	a987      	add	r1, sp, #540	@ 0x21c
 800fd76:	4628      	mov	r0, r5
 800fd78:	f7fe f8f0 	bl	800df5c <ucdr_deserialize_bool>
 800fd7c:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800fd80:	4680      	mov	r8, r0
 800fd82:	b94b      	cbnz	r3, 800fd98 <read_submessage_info+0x50>
 800fd84:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800fd88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd8c:	a903      	add	r1, sp, #12
 800fd8e:	4628      	mov	r0, r5
 800fd90:	f001 fd88 	bl	80118a4 <uxr_deserialize_ObjectVariant>
 800fd94:	4004      	ands	r4, r0
 800fd96:	e7ed      	b.n	800fd74 <read_submessage_info+0x2c>
 800fd98:	a988      	add	r1, sp, #544	@ 0x220
 800fd9a:	4628      	mov	r0, r5
 800fd9c:	f7fe f90c 	bl	800dfb8 <ucdr_deserialize_uint8_t>
 800fda0:	ea14 0f08 	tst.w	r4, r8
 800fda4:	d0ee      	beq.n	800fd84 <read_submessage_info+0x3c>
 800fda6:	2800      	cmp	r0, #0
 800fda8:	d0ec      	beq.n	800fd84 <read_submessage_info+0x3c>
 800fdaa:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800fdae:	2b0d      	cmp	r3, #13
 800fdb0:	d1e8      	bne.n	800fd84 <read_submessage_info+0x3c>
 800fdb2:	a98a      	add	r1, sp, #552	@ 0x228
 800fdb4:	4628      	mov	r0, r5
 800fdb6:	f7fe fea5 	bl	800eb04 <ucdr_deserialize_int16_t>
 800fdba:	b138      	cbz	r0, 800fdcc <read_submessage_info+0x84>
 800fdbc:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	dd06      	ble.n	800fdd2 <read_submessage_info+0x8a>
 800fdc4:	2f00      	cmp	r7, #0
 800fdc6:	bf14      	ite	ne
 800fdc8:	2001      	movne	r0, #1
 800fdca:	2002      	moveq	r0, #2
 800fdcc:	f886 00b5 	strb.w	r0, [r6, #181]	@ 0xb5
 800fdd0:	e7d8      	b.n	800fd84 <read_submessage_info+0x3c>
 800fdd2:	2000      	movs	r0, #0
 800fdd4:	e7fa      	b.n	800fdcc <read_submessage_info+0x84>
 800fdd6:	bf00      	nop

0800fdd8 <read_submessage_list>:
 800fdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fddc:	4604      	mov	r4, r0
 800fdde:	b097      	sub	sp, #92	@ 0x5c
 800fde0:	460d      	mov	r5, r1
 800fde2:	4ec1      	ldr	r6, [pc, #772]	@ (80100e8 <read_submessage_list+0x310>)
 800fde4:	9209      	str	r2, [sp, #36]	@ 0x24
 800fde6:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800fdea:	aa0c      	add	r2, sp, #48	@ 0x30
 800fdec:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800fdf0:	4628      	mov	r0, r5
 800fdf2:	f000 ffcb 	bl	8010d8c <uxr_read_submessage_header>
 800fdf6:	2800      	cmp	r0, #0
 800fdf8:	f000 8142 	beq.w	8010080 <read_submessage_list+0x2a8>
 800fdfc:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800fe00:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800fe04:	3b02      	subs	r3, #2
 800fe06:	2b0d      	cmp	r3, #13
 800fe08:	d8ed      	bhi.n	800fde6 <read_submessage_list+0xe>
 800fe0a:	a101      	add	r1, pc, #4	@ (adr r1, 800fe10 <read_submessage_list+0x38>)
 800fe0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fe10:	08010077 	.word	0x08010077
 800fe14:	0800fde7 	.word	0x0800fde7
 800fe18:	08010067 	.word	0x08010067
 800fe1c:	08010005 	.word	0x08010005
 800fe20:	0800fffb 	.word	0x0800fffb
 800fe24:	0800fde7 	.word	0x0800fde7
 800fe28:	0800fde7 	.word	0x0800fde7
 800fe2c:	0800ff51 	.word	0x0800ff51
 800fe30:	0800fee3 	.word	0x0800fee3
 800fe34:	0800fea3 	.word	0x0800fea3
 800fe38:	0800fde7 	.word	0x0800fde7
 800fe3c:	0800fde7 	.word	0x0800fde7
 800fe40:	0800fde7 	.word	0x0800fde7
 800fe44:	0800fe49 	.word	0x0800fe49
 800fe48:	a910      	add	r1, sp, #64	@ 0x40
 800fe4a:	4628      	mov	r0, r5
 800fe4c:	f002 f8a6 	bl	8011f9c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800fe50:	f8d4 8090 	ldr.w	r8, [r4, #144]	@ 0x90
 800fe54:	f1b8 0f00 	cmp.w	r8, #0
 800fe58:	f000 811a 	beq.w	8010090 <read_submessage_list+0x2b8>
 800fe5c:	f000 ffde 	bl	8010e1c <uxr_nanos>
 800fe60:	4602      	mov	r2, r0
 800fe62:	460b      	mov	r3, r1
 800fe64:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 800fe68:	2100      	movs	r1, #0
 800fe6a:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 800fe6c:	9006      	str	r0, [sp, #24]
 800fe6e:	468c      	mov	ip, r1
 800fe70:	9815      	ldr	r0, [sp, #84]	@ 0x54
 800fe72:	fbc7 0c06 	smlal	r0, ip, r7, r6
 800fe76:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800fe78:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 800fe7c:	468c      	mov	ip, r1
 800fe7e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800fe80:	fbc7 0c06 	smlal	r0, ip, r7, r6
 800fe84:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 800fe88:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	@ 0x48
 800fe8c:	fbc7 0106 	smlal	r0, r1, r7, r6
 800fe90:	e9cd 0100 	strd	r0, r1, [sp]
 800fe94:	4620      	mov	r0, r4
 800fe96:	47c0      	blx	r8
 800fe98:	f04f 0301 	mov.w	r3, #1
 800fe9c:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 800fea0:	e7a1      	b.n	800fde6 <read_submessage_list+0xe>
 800fea2:	a910      	add	r1, sp, #64	@ 0x40
 800fea4:	4628      	mov	r0, r5
 800fea6:	f002 f865 	bl	8011f74 <uxr_deserialize_HEARTBEAT_Payload>
 800feaa:	2100      	movs	r1, #0
 800feac:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800feb0:	f000 fe42 	bl	8010b38 <uxr_stream_id_from_raw>
 800feb4:	f3c0 2807 	ubfx	r8, r0, #8, #8
 800feb8:	900f      	str	r0, [sp, #60]	@ 0x3c
 800feba:	f104 0008 	add.w	r0, r4, #8
 800febe:	4641      	mov	r1, r8
 800fec0:	f000 ff28 	bl	8010d14 <uxr_get_input_reliable_stream>
 800fec4:	2800      	cmp	r0, #0
 800fec6:	d08e      	beq.n	800fde6 <read_submessage_list+0xe>
 800fec8:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800fecc:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800fed0:	f004 fb80 	bl	80145d4 <uxr_process_heartbeat>
 800fed4:	4642      	mov	r2, r8
 800fed6:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800feda:	4620      	mov	r0, r4
 800fedc:	f7ff fde6 	bl	800faac <write_submessage_acknack.isra.0>
 800fee0:	e781      	b.n	800fde6 <read_submessage_list+0xe>
 800fee2:	a910      	add	r1, sp, #64	@ 0x40
 800fee4:	4628      	mov	r0, r5
 800fee6:	f002 f81d 	bl	8011f24 <uxr_deserialize_ACKNACK_Payload>
 800feea:	2100      	movs	r1, #0
 800feec:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800fef0:	f000 fe22 	bl	8010b38 <uxr_stream_id_from_raw>
 800fef4:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800fef8:	900d      	str	r0, [sp, #52]	@ 0x34
 800fefa:	f104 0008 	add.w	r0, r4, #8
 800fefe:	f000 fef3 	bl	8010ce8 <uxr_get_output_reliable_stream>
 800ff02:	4680      	mov	r8, r0
 800ff04:	2800      	cmp	r0, #0
 800ff06:	f43f af6e 	beq.w	800fde6 <read_submessage_list+0xe>
 800ff0a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800ff0e:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800ff12:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800ff16:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800ff1a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800ff1e:	b289      	uxth	r1, r1
 800ff20:	f004 feba 	bl	8014c98 <uxr_process_acknack>
 800ff24:	4640      	mov	r0, r8
 800ff26:	f004 fe7b 	bl	8014c20 <uxr_begin_output_nack_buffer_it>
 800ff2a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800ff2e:	e005      	b.n	800ff3c <read_submessage_list+0x164>
 800ff30:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ff32:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	@ 0x38
 800ff36:	e9d3 0900 	ldrd	r0, r9, [r3]
 800ff3a:	47c8      	blx	r9
 800ff3c:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800ff40:	aa0f      	add	r2, sp, #60	@ 0x3c
 800ff42:	4651      	mov	r1, sl
 800ff44:	4640      	mov	r0, r8
 800ff46:	f004 fe6d 	bl	8014c24 <uxr_next_reliable_nack_buffer_to_send>
 800ff4a:	2800      	cmp	r0, #0
 800ff4c:	d1f0      	bne.n	800ff30 <read_submessage_list+0x158>
 800ff4e:	e74a      	b.n	800fde6 <read_submessage_list+0xe>
 800ff50:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800ff54:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800ff58:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 800ff5c:	4628      	mov	r0, r5
 800ff5e:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800ff62:	4651      	mov	r1, sl
 800ff64:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800ff68:	f1a8 0804 	sub.w	r8, r8, #4
 800ff6c:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800ff70:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800ff74:	fa1f f888 	uxth.w	r8, r8
 800ff78:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800ff7c:	f009 090e 	and.w	r9, r9, #14
 800ff80:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800ff84:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800ff88:	f001 fd2e 	bl	80119e8 <uxr_deserialize_BaseObjectRequest>
 800ff8c:	4650      	mov	r0, sl
 800ff8e:	a90f      	add	r1, sp, #60	@ 0x3c
 800ff90:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800ff94:	f000 fd90 	bl	8010ab8 <uxr_parse_base_object_request>
 800ff98:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ff9a:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800ff9e:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800ffa2:	9110      	str	r1, [sp, #64]	@ 0x40
 800ffa4:	f1bb 0f00 	cmp.w	fp, #0
 800ffa8:	d006      	beq.n	800ffb8 <read_submessage_list+0x1e0>
 800ffaa:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800ffae:	4652      	mov	r2, sl
 800ffb0:	4620      	mov	r0, r4
 800ffb2:	9300      	str	r3, [sp, #0]
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	47d8      	blx	fp
 800ffb8:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800ffba:	b182      	cbz	r2, 800ffde <read_submessage_list+0x206>
 800ffbc:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 800ffbe:	f04f 0c00 	mov.w	ip, #0
 800ffc2:	3902      	subs	r1, #2
 800ffc4:	e003      	b.n	800ffce <read_submessage_list+0x1f6>
 800ffc6:	f10c 0c01 	add.w	ip, ip, #1
 800ffca:	4594      	cmp	ip, r2
 800ffcc:	d007      	beq.n	800ffde <read_submessage_list+0x206>
 800ffce:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 800ffd2:	4553      	cmp	r3, sl
 800ffd4:	d1f7      	bne.n	800ffc6 <read_submessage_list+0x1ee>
 800ffd6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800ffd8:	2200      	movs	r2, #0
 800ffda:	f803 200c 	strb.w	r2, [r3, ip]
 800ffde:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800ffe2:	464b      	mov	r3, r9
 800ffe4:	4642      	mov	r2, r8
 800ffe6:	4620      	mov	r0, r4
 800ffe8:	9102      	str	r1, [sp, #8]
 800ffea:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ffec:	9101      	str	r1, [sp, #4]
 800ffee:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800fff0:	9100      	str	r1, [sp, #0]
 800fff2:	4629      	mov	r1, r5
 800fff4:	f004 fed8 	bl	8014da8 <read_submessage_format>
 800fff8:	e6f5      	b.n	800fde6 <read_submessage_list+0xe>
 800fffa:	4629      	mov	r1, r5
 800fffc:	4620      	mov	r0, r4
 800fffe:	f7ff fea3 	bl	800fd48 <read_submessage_info>
 8010002:	e6f0      	b.n	800fde6 <read_submessage_list+0xe>
 8010004:	2a00      	cmp	r2, #0
 8010006:	d03e      	beq.n	8010086 <read_submessage_list+0x2ae>
 8010008:	a910      	add	r1, sp, #64	@ 0x40
 801000a:	4628      	mov	r0, r5
 801000c:	f001 fee2 	bl	8011dd4 <uxr_deserialize_STATUS_Payload>
 8010010:	a90e      	add	r1, sp, #56	@ 0x38
 8010012:	aa0d      	add	r2, sp, #52	@ 0x34
 8010014:	a810      	add	r0, sp, #64	@ 0x40
 8010016:	f000 fd4f 	bl	8010ab8 <uxr_parse_base_object_request>
 801001a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801001c:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8010020:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8010024:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 8010028:	910f      	str	r1, [sp, #60]	@ 0x3c
 801002a:	f1ba 0f00 	cmp.w	sl, #0
 801002e:	d006      	beq.n	801003e <read_submessage_list+0x266>
 8010030:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8010034:	4642      	mov	r2, r8
 8010036:	4620      	mov	r0, r4
 8010038:	9300      	str	r3, [sp, #0]
 801003a:	464b      	mov	r3, r9
 801003c:	47d0      	blx	sl
 801003e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8010040:	2a00      	cmp	r2, #0
 8010042:	f43f aed0 	beq.w	800fde6 <read_submessage_list+0xe>
 8010046:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8010048:	2100      	movs	r1, #0
 801004a:	3802      	subs	r0, #2
 801004c:	e003      	b.n	8010056 <read_submessage_list+0x27e>
 801004e:	3101      	adds	r1, #1
 8010050:	4291      	cmp	r1, r2
 8010052:	f43f aec8 	beq.w	800fde6 <read_submessage_list+0xe>
 8010056:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801005a:	4543      	cmp	r3, r8
 801005c:	d1f7      	bne.n	801004e <read_submessage_list+0x276>
 801005e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8010060:	f803 9001 	strb.w	r9, [r3, r1]
 8010064:	e6bf      	b.n	800fde6 <read_submessage_list+0xe>
 8010066:	2a00      	cmp	r2, #0
 8010068:	f47f aebd 	bne.w	800fde6 <read_submessage_list+0xe>
 801006c:	4629      	mov	r1, r5
 801006e:	4620      	mov	r0, r4
 8010070:	f000 fc66 	bl	8010940 <uxr_read_create_session_status>
 8010074:	e6b7      	b.n	800fde6 <read_submessage_list+0xe>
 8010076:	4629      	mov	r1, r5
 8010078:	4620      	mov	r0, r4
 801007a:	f7ff fce1 	bl	800fa40 <read_submessage_get_info>
 801007e:	e6b2      	b.n	800fde6 <read_submessage_list+0xe>
 8010080:	b017      	add	sp, #92	@ 0x5c
 8010082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010086:	4629      	mov	r1, r5
 8010088:	4620      	mov	r0, r4
 801008a:	f000 fc67 	bl	801095c <uxr_read_delete_session_status>
 801008e:	e6aa      	b.n	800fde6 <read_submessage_list+0xe>
 8010090:	f000 fec4 	bl	8010e1c <uxr_nanos>
 8010094:	4642      	mov	r2, r8
 8010096:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8010098:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801009a:	fbc7 3206 	smlal	r3, r2, r7, r6
 801009e:	1818      	adds	r0, r3, r0
 80100a0:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80100a2:	eb42 0101 	adc.w	r1, r2, r1
 80100a6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80100a8:	4642      	mov	r2, r8
 80100aa:	fbc7 3206 	smlal	r3, r2, r7, r6
 80100ae:	469c      	mov	ip, r3
 80100b0:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	@ 0x40
 80100b4:	fbc3 7806 	smlal	r7, r8, r3, r6
 80100b8:	4643      	mov	r3, r8
 80100ba:	eb1c 0c07 	adds.w	ip, ip, r7
 80100be:	eb42 0203 	adc.w	r2, r2, r3
 80100c2:	ebb0 030c 	subs.w	r3, r0, ip
 80100c6:	eb61 0202 	sbc.w	r2, r1, r2
 80100ca:	2a00      	cmp	r2, #0
 80100cc:	db08      	blt.n	80100e0 <read_submessage_list+0x308>
 80100ce:	085b      	lsrs	r3, r3, #1
 80100d0:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 80100d4:	1052      	asrs	r2, r2, #1
 80100d6:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 80100da:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 80100de:	e6db      	b.n	800fe98 <read_submessage_list+0xc0>
 80100e0:	3301      	adds	r3, #1
 80100e2:	f142 0200 	adc.w	r2, r2, #0
 80100e6:	e7f2      	b.n	80100ce <read_submessage_list+0x2f6>
 80100e8:	3b9aca00 	.word	0x3b9aca00

080100ec <listen_message_reliably>:
 80100ec:	1e0b      	subs	r3, r1, #0
 80100ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100f2:	bfb8      	it	lt
 80100f4:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 80100f8:	b09d      	sub	sp, #116	@ 0x74
 80100fa:	4680      	mov	r8, r0
 80100fc:	9305      	str	r3, [sp, #20]
 80100fe:	f000 fe71 	bl	8010de4 <uxr_millis>
 8010102:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8010106:	4681      	mov	r9, r0
 8010108:	2a00      	cmp	r2, #0
 801010a:	f000 809a 	beq.w	8010242 <listen_message_reliably+0x156>
 801010e:	2600      	movs	r6, #0
 8010110:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010114:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8010118:	460f      	mov	r7, r1
 801011a:	4630      	mov	r0, r6
 801011c:	9303      	str	r3, [sp, #12]
 801011e:	e00e      	b.n	801013e <listen_message_reliably+0x52>
 8010120:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010122:	3601      	adds	r6, #1
 8010124:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010126:	455a      	cmp	r2, fp
 8010128:	9903      	ldr	r1, [sp, #12]
 801012a:	b2f0      	uxtb	r0, r6
 801012c:	eb73 0101 	sbcs.w	r1, r3, r1
 8010130:	da01      	bge.n	8010136 <listen_message_reliably+0x4a>
 8010132:	4693      	mov	fp, r2
 8010134:	9303      	str	r3, [sp, #12]
 8010136:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801013a:	4283      	cmp	r3, r0
 801013c:	d95f      	bls.n	80101fe <listen_message_reliably+0x112>
 801013e:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8010142:	2102      	movs	r1, #2
 8010144:	2201      	movs	r2, #1
 8010146:	00e4      	lsls	r4, r4, #3
 8010148:	f000 fcc8 	bl	8010adc <uxr_stream_id>
 801014c:	4601      	mov	r1, r0
 801014e:	f104 0520 	add.w	r5, r4, #32
 8010152:	463b      	mov	r3, r7
 8010154:	464a      	mov	r2, r9
 8010156:	9109      	str	r1, [sp, #36]	@ 0x24
 8010158:	4445      	add	r5, r8
 801015a:	4628      	mov	r0, r5
 801015c:	f004 fd34 	bl	8014bc8 <uxr_update_output_stream_heartbeat_timestamp>
 8010160:	eb08 0304 	add.w	r3, r8, r4
 8010164:	2800      	cmp	r0, #0
 8010166:	d0db      	beq.n	8010120 <listen_message_reliably+0x34>
 8010168:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 801016c:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8010170:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8010174:	4640      	mov	r0, r8
 8010176:	3501      	adds	r5, #1
 8010178:	4444      	add	r4, r8
 801017a:	9304      	str	r3, [sp, #16]
 801017c:	f000 fc74 	bl	8010a68 <uxr_session_header_offset>
 8010180:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8010184:	2300      	movs	r3, #0
 8010186:	2211      	movs	r2, #17
 8010188:	a90c      	add	r1, sp, #48	@ 0x30
 801018a:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 801018e:	9000      	str	r0, [sp, #0]
 8010190:	4650      	mov	r0, sl
 8010192:	3601      	adds	r6, #1
 8010194:	f7ff f9ca 	bl	800f52c <ucdr_init_buffer_origin_offset>
 8010198:	2300      	movs	r3, #0
 801019a:	2205      	movs	r2, #5
 801019c:	210b      	movs	r1, #11
 801019e:	4650      	mov	r0, sl
 80101a0:	f000 fdda 	bl	8010d58 <uxr_buffer_submessage_header>
 80101a4:	2101      	movs	r1, #1
 80101a6:	8968      	ldrh	r0, [r5, #10]
 80101a8:	f004 fec8 	bl	8014f3c <uxr_seq_num_add>
 80101ac:	892b      	ldrh	r3, [r5, #8]
 80101ae:	4602      	mov	r2, r0
 80101b0:	a90a      	add	r1, sp, #40	@ 0x28
 80101b2:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80101b6:	4650      	mov	r0, sl
 80101b8:	9b04      	ldr	r3, [sp, #16]
 80101ba:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80101be:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80101c2:	f001 fec3 	bl	8011f4c <uxr_serialize_HEARTBEAT_Payload>
 80101c6:	2200      	movs	r2, #0
 80101c8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80101ca:	4640      	mov	r0, r8
 80101cc:	4611      	mov	r1, r2
 80101ce:	f000 fbf7 	bl	80109c0 <uxr_stamp_session_header>
 80101d2:	4650      	mov	r0, sl
 80101d4:	f7ff f9ea 	bl	800f5ac <ucdr_buffer_length>
 80101d8:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 80101dc:	4602      	mov	r2, r0
 80101de:	a90c      	add	r1, sp, #48	@ 0x30
 80101e0:	e9d3 0500 	ldrd	r0, r5, [r3]
 80101e4:	47a8      	blx	r5
 80101e6:	9903      	ldr	r1, [sp, #12]
 80101e8:	b2f0      	uxtb	r0, r6
 80101ea:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 80101ee:	455a      	cmp	r2, fp
 80101f0:	eb73 0101 	sbcs.w	r1, r3, r1
 80101f4:	db9d      	blt.n	8010132 <listen_message_reliably+0x46>
 80101f6:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 80101fa:	4283      	cmp	r3, r0
 80101fc:	d89f      	bhi.n	801013e <listen_message_reliably+0x52>
 80101fe:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010202:	9a03      	ldr	r2, [sp, #12]
 8010204:	429a      	cmp	r2, r3
 8010206:	bf08      	it	eq
 8010208:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 801020c:	d019      	beq.n	8010242 <listen_message_reliably+0x156>
 801020e:	ebab 0309 	sub.w	r3, fp, r9
 8010212:	2b00      	cmp	r3, #0
 8010214:	9d05      	ldr	r5, [sp, #20]
 8010216:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 801021a:	aa08      	add	r2, sp, #32
 801021c:	bf08      	it	eq
 801021e:	2301      	moveq	r3, #1
 8010220:	a907      	add	r1, sp, #28
 8010222:	6884      	ldr	r4, [r0, #8]
 8010224:	429d      	cmp	r5, r3
 8010226:	6800      	ldr	r0, [r0, #0]
 8010228:	bfa8      	it	ge
 801022a:	461d      	movge	r5, r3
 801022c:	462b      	mov	r3, r5
 801022e:	47a0      	blx	r4
 8010230:	b948      	cbnz	r0, 8010246 <listen_message_reliably+0x15a>
 8010232:	9b05      	ldr	r3, [sp, #20]
 8010234:	1b5b      	subs	r3, r3, r5
 8010236:	2b00      	cmp	r3, #0
 8010238:	9305      	str	r3, [sp, #20]
 801023a:	f73f af60 	bgt.w	80100fe <listen_message_reliably+0x12>
 801023e:	4604      	mov	r4, r0
 8010240:	e012      	b.n	8010268 <listen_message_reliably+0x17c>
 8010242:	9b05      	ldr	r3, [sp, #20]
 8010244:	e7e5      	b.n	8010212 <listen_message_reliably+0x126>
 8010246:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801024a:	4604      	mov	r4, r0
 801024c:	2500      	movs	r5, #0
 801024e:	a80c      	add	r0, sp, #48	@ 0x30
 8010250:	f7ff f97e 	bl	800f550 <ucdr_init_buffer>
 8010254:	f10d 031a 	add.w	r3, sp, #26
 8010258:	aa06      	add	r2, sp, #24
 801025a:	a90c      	add	r1, sp, #48	@ 0x30
 801025c:	4640      	mov	r0, r8
 801025e:	f88d 5018 	strb.w	r5, [sp, #24]
 8010262:	f000 fbc1 	bl	80109e8 <uxr_read_session_header>
 8010266:	b918      	cbnz	r0, 8010270 <listen_message_reliably+0x184>
 8010268:	4620      	mov	r0, r4
 801026a:	b01d      	add	sp, #116	@ 0x74
 801026c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010270:	4629      	mov	r1, r5
 8010272:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8010276:	f000 fc5f 	bl	8010b38 <uxr_stream_id_from_raw>
 801027a:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801027e:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8010282:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8010286:	2e01      	cmp	r6, #1
 8010288:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801028c:	d04b      	beq.n	8010326 <listen_message_reliably+0x23a>
 801028e:	2e02      	cmp	r6, #2
 8010290:	d00f      	beq.n	80102b2 <listen_message_reliably+0x1c6>
 8010292:	2e00      	cmp	r6, #0
 8010294:	d1e8      	bne.n	8010268 <listen_message_reliably+0x17c>
 8010296:	4631      	mov	r1, r6
 8010298:	4630      	mov	r0, r6
 801029a:	f000 fc4d 	bl	8010b38 <uxr_stream_id_from_raw>
 801029e:	4602      	mov	r2, r0
 80102a0:	a90c      	add	r1, sp, #48	@ 0x30
 80102a2:	4640      	mov	r0, r8
 80102a4:	920a      	str	r2, [sp, #40]	@ 0x28
 80102a6:	f7ff fd97 	bl	800fdd8 <read_submessage_list>
 80102aa:	4620      	mov	r0, r4
 80102ac:	b01d      	add	sp, #116	@ 0x74
 80102ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102b2:	4629      	mov	r1, r5
 80102b4:	f108 0008 	add.w	r0, r8, #8
 80102b8:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 80102bc:	f000 fd2a 	bl	8010d14 <uxr_get_input_reliable_stream>
 80102c0:	4607      	mov	r7, r0
 80102c2:	b338      	cbz	r0, 8010314 <listen_message_reliably+0x228>
 80102c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80102c6:	a80c      	add	r0, sp, #48	@ 0x30
 80102c8:	9203      	str	r2, [sp, #12]
 80102ca:	f7ff f973 	bl	800f5b4 <ucdr_buffer_remaining>
 80102ce:	4603      	mov	r3, r0
 80102d0:	f10d 0019 	add.w	r0, sp, #25
 80102d4:	9a03      	ldr	r2, [sp, #12]
 80102d6:	4651      	mov	r1, sl
 80102d8:	9000      	str	r0, [sp, #0]
 80102da:	4638      	mov	r0, r7
 80102dc:	f004 f87e 	bl	80143dc <uxr_receive_reliable_message>
 80102e0:	b1c0      	cbz	r0, 8010314 <listen_message_reliably+0x228>
 80102e2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80102e6:	b393      	cbz	r3, 801034e <listen_message_reliably+0x262>
 80102e8:	ae14      	add	r6, sp, #80	@ 0x50
 80102ea:	f04f 0a02 	mov.w	sl, #2
 80102ee:	e00a      	b.n	8010306 <listen_message_reliably+0x21a>
 80102f0:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 80102f4:	4631      	mov	r1, r6
 80102f6:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 80102fa:	4640      	mov	r0, r8
 80102fc:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8010300:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010302:	f7ff fd69 	bl	800fdd8 <read_submessage_list>
 8010306:	2204      	movs	r2, #4
 8010308:	4631      	mov	r1, r6
 801030a:	4638      	mov	r0, r7
 801030c:	f004 f8e8 	bl	80144e0 <uxr_next_input_reliable_buffer_available>
 8010310:	2800      	cmp	r0, #0
 8010312:	d1ed      	bne.n	80102f0 <listen_message_reliably+0x204>
 8010314:	4640      	mov	r0, r8
 8010316:	462a      	mov	r2, r5
 8010318:	4649      	mov	r1, r9
 801031a:	f7ff fbc7 	bl	800faac <write_submessage_acknack.isra.0>
 801031e:	4620      	mov	r0, r4
 8010320:	b01d      	add	sp, #116	@ 0x74
 8010322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010326:	4629      	mov	r1, r5
 8010328:	f108 0008 	add.w	r0, r8, #8
 801032c:	f000 fce8 	bl	8010d00 <uxr_get_input_best_effort_stream>
 8010330:	2800      	cmp	r0, #0
 8010332:	d099      	beq.n	8010268 <listen_message_reliably+0x17c>
 8010334:	4651      	mov	r1, sl
 8010336:	f003 ffc7 	bl	80142c8 <uxr_receive_best_effort_message>
 801033a:	2800      	cmp	r0, #0
 801033c:	d094      	beq.n	8010268 <listen_message_reliably+0x17c>
 801033e:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8010342:	a90c      	add	r1, sp, #48	@ 0x30
 8010344:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010346:	4640      	mov	r0, r8
 8010348:	f7ff fd46 	bl	800fdd8 <read_submessage_list>
 801034c:	e78c      	b.n	8010268 <listen_message_reliably+0x17c>
 801034e:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8010352:	a90c      	add	r1, sp, #48	@ 0x30
 8010354:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010356:	4640      	mov	r0, r8
 8010358:	f7ff fd3e 	bl	800fdd8 <read_submessage_list>
 801035c:	e7c4      	b.n	80102e8 <listen_message_reliably+0x1fc>
 801035e:	bf00      	nop

08010360 <uxr_run_session_until_confirm_delivery>:
 8010360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010364:	4606      	mov	r6, r0
 8010366:	460d      	mov	r5, r1
 8010368:	f000 fd3c 	bl	8010de4 <uxr_millis>
 801036c:	4607      	mov	r7, r0
 801036e:	4630      	mov	r0, r6
 8010370:	f106 0808 	add.w	r8, r6, #8
 8010374:	f7ff fc74 	bl	800fc60 <uxr_flash_output_streams>
 8010378:	2d00      	cmp	r5, #0
 801037a:	db10      	blt.n	801039e <uxr_run_session_until_confirm_delivery+0x3e>
 801037c:	462c      	mov	r4, r5
 801037e:	e006      	b.n	801038e <uxr_run_session_until_confirm_delivery+0x2e>
 8010380:	f7ff feb4 	bl	80100ec <listen_message_reliably>
 8010384:	f000 fd2e 	bl	8010de4 <uxr_millis>
 8010388:	1bc3      	subs	r3, r0, r7
 801038a:	1aec      	subs	r4, r5, r3
 801038c:	d407      	bmi.n	801039e <uxr_run_session_until_confirm_delivery+0x3e>
 801038e:	4640      	mov	r0, r8
 8010390:	f000 fccc 	bl	8010d2c <uxr_output_streams_confirmed>
 8010394:	4603      	mov	r3, r0
 8010396:	4621      	mov	r1, r4
 8010398:	4630      	mov	r0, r6
 801039a:	2b00      	cmp	r3, #0
 801039c:	d0f0      	beq.n	8010380 <uxr_run_session_until_confirm_delivery+0x20>
 801039e:	4640      	mov	r0, r8
 80103a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80103a4:	f000 bcc2 	b.w	8010d2c <uxr_output_streams_confirmed>

080103a8 <uxr_run_session_until_all_status>:
 80103a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103ac:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 80103b0:	4606      	mov	r6, r0
 80103b2:	4688      	mov	r8, r1
 80103b4:	4692      	mov	sl, r2
 80103b6:	461f      	mov	r7, r3
 80103b8:	f7ff fc52 	bl	800fc60 <uxr_flash_output_streams>
 80103bc:	f1bb 0f00 	cmp.w	fp, #0
 80103c0:	d004      	beq.n	80103cc <uxr_run_session_until_all_status+0x24>
 80103c2:	465a      	mov	r2, fp
 80103c4:	21ff      	movs	r1, #255	@ 0xff
 80103c6:	4638      	mov	r0, r7
 80103c8:	f006 fbee 	bl	8016ba8 <memset>
 80103cc:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 80103d0:	1e7d      	subs	r5, r7, #1
 80103d2:	e9c6 a71d 	strd	sl, r7, [r6, #116]	@ 0x74
 80103d6:	f000 fd05 	bl	8010de4 <uxr_millis>
 80103da:	4641      	mov	r1, r8
 80103dc:	4681      	mov	r9, r0
 80103de:	4630      	mov	r0, r6
 80103e0:	f7ff fe84 	bl	80100ec <listen_message_reliably>
 80103e4:	f000 fcfe 	bl	8010de4 <uxr_millis>
 80103e8:	eba0 0009 	sub.w	r0, r0, r9
 80103ec:	eba8 0100 	sub.w	r1, r8, r0
 80103f0:	f1bb 0f00 	cmp.w	fp, #0
 80103f4:	d029      	beq.n	801044a <uxr_run_session_until_all_status+0xa2>
 80103f6:	46ae      	mov	lr, r5
 80103f8:	f04f 0c00 	mov.w	ip, #0
 80103fc:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8010400:	2cff      	cmp	r4, #255	@ 0xff
 8010402:	d015      	beq.n	8010430 <uxr_run_session_until_all_status+0x88>
 8010404:	f10c 0c01 	add.w	ip, ip, #1
 8010408:	45e3      	cmp	fp, ip
 801040a:	d8f7      	bhi.n	80103fc <uxr_run_session_until_all_status+0x54>
 801040c:	2300      	movs	r3, #0
 801040e:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8010410:	e000      	b.n	8010414 <uxr_run_session_until_all_status+0x6c>
 8010412:	b158      	cbz	r0, 801042c <uxr_run_session_until_all_status+0x84>
 8010414:	462b      	mov	r3, r5
 8010416:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 801041a:	3302      	adds	r3, #2
 801041c:	2801      	cmp	r0, #1
 801041e:	eba3 0307 	sub.w	r3, r3, r7
 8010422:	bf8c      	ite	hi
 8010424:	2000      	movhi	r0, #0
 8010426:	2001      	movls	r0, #1
 8010428:	459b      	cmp	fp, r3
 801042a:	d8f2      	bhi.n	8010412 <uxr_run_session_until_all_status+0x6a>
 801042c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010430:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8010434:	f10c 0c01 	add.w	ip, ip, #1
 8010438:	45dc      	cmp	ip, fp
 801043a:	d201      	bcs.n	8010440 <uxr_run_session_until_all_status+0x98>
 801043c:	2b00      	cmp	r3, #0
 801043e:	d0dd      	beq.n	80103fc <uxr_run_session_until_all_status+0x54>
 8010440:	2900      	cmp	r1, #0
 8010442:	dde3      	ble.n	801040c <uxr_run_session_until_all_status+0x64>
 8010444:	2b00      	cmp	r3, #0
 8010446:	d1ca      	bne.n	80103de <uxr_run_session_until_all_status+0x36>
 8010448:	e7e0      	b.n	801040c <uxr_run_session_until_all_status+0x64>
 801044a:	2001      	movs	r0, #1
 801044c:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8010450:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010454 <wait_session_status>:
 8010454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010458:	4604      	mov	r4, r0
 801045a:	b09d      	sub	sp, #116	@ 0x74
 801045c:	20ff      	movs	r0, #255	@ 0xff
 801045e:	9303      	str	r3, [sp, #12]
 8010460:	7160      	strb	r0, [r4, #5]
 8010462:	2b00      	cmp	r3, #0
 8010464:	f000 80b6 	beq.w	80105d4 <wait_session_status+0x180>
 8010468:	4689      	mov	r9, r1
 801046a:	4692      	mov	sl, r2
 801046c:	f04f 0b00 	mov.w	fp, #0
 8010470:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010472:	4652      	mov	r2, sl
 8010474:	4649      	mov	r1, r9
 8010476:	e9d3 0500 	ldrd	r0, r5, [r3]
 801047a:	47a8      	blx	r5
 801047c:	f000 fcb2 	bl	8010de4 <uxr_millis>
 8010480:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010484:	4605      	mov	r5, r0
 8010486:	e009      	b.n	801049c <wait_session_status+0x48>
 8010488:	f000 fcac 	bl	8010de4 <uxr_millis>
 801048c:	1b40      	subs	r0, r0, r5
 801048e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8010492:	2b00      	cmp	r3, #0
 8010494:	dd40      	ble.n	8010518 <wait_session_status+0xc4>
 8010496:	7960      	ldrb	r0, [r4, #5]
 8010498:	28ff      	cmp	r0, #255	@ 0xff
 801049a:	d145      	bne.n	8010528 <wait_session_status+0xd4>
 801049c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801049e:	a908      	add	r1, sp, #32
 80104a0:	6896      	ldr	r6, [r2, #8]
 80104a2:	6810      	ldr	r0, [r2, #0]
 80104a4:	aa09      	add	r2, sp, #36	@ 0x24
 80104a6:	47b0      	blx	r6
 80104a8:	2800      	cmp	r0, #0
 80104aa:	d0ed      	beq.n	8010488 <wait_session_status+0x34>
 80104ac:	a80c      	add	r0, sp, #48	@ 0x30
 80104ae:	2600      	movs	r6, #0
 80104b0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80104b4:	f7ff f84c 	bl	800f550 <ucdr_init_buffer>
 80104b8:	f10d 031e 	add.w	r3, sp, #30
 80104bc:	aa07      	add	r2, sp, #28
 80104be:	a90c      	add	r1, sp, #48	@ 0x30
 80104c0:	4620      	mov	r0, r4
 80104c2:	f88d 601c 	strb.w	r6, [sp, #28]
 80104c6:	f000 fa8f 	bl	80109e8 <uxr_read_session_header>
 80104ca:	2800      	cmp	r0, #0
 80104cc:	d0dc      	beq.n	8010488 <wait_session_status+0x34>
 80104ce:	4631      	mov	r1, r6
 80104d0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80104d4:	f000 fb30 	bl	8010b38 <uxr_stream_id_from_raw>
 80104d8:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80104dc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80104e0:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80104e4:	2f01      	cmp	r7, #1
 80104e6:	9302      	str	r3, [sp, #8]
 80104e8:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 80104ec:	d05c      	beq.n	80105a8 <wait_session_status+0x154>
 80104ee:	2f02      	cmp	r7, #2
 80104f0:	d020      	beq.n	8010534 <wait_session_status+0xe0>
 80104f2:	2f00      	cmp	r7, #0
 80104f4:	d1c8      	bne.n	8010488 <wait_session_status+0x34>
 80104f6:	4639      	mov	r1, r7
 80104f8:	4638      	mov	r0, r7
 80104fa:	f000 fb1d 	bl	8010b38 <uxr_stream_id_from_raw>
 80104fe:	a90c      	add	r1, sp, #48	@ 0x30
 8010500:	4602      	mov	r2, r0
 8010502:	900b      	str	r0, [sp, #44]	@ 0x2c
 8010504:	4620      	mov	r0, r4
 8010506:	f7ff fc67 	bl	800fdd8 <read_submessage_list>
 801050a:	f000 fc6b 	bl	8010de4 <uxr_millis>
 801050e:	1b40      	subs	r0, r0, r5
 8010510:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8010514:	2b00      	cmp	r3, #0
 8010516:	dcbe      	bgt.n	8010496 <wait_session_status+0x42>
 8010518:	f10b 0b01 	add.w	fp, fp, #1
 801051c:	9b03      	ldr	r3, [sp, #12]
 801051e:	7960      	ldrb	r0, [r4, #5]
 8010520:	455b      	cmp	r3, fp
 8010522:	d001      	beq.n	8010528 <wait_session_status+0xd4>
 8010524:	28ff      	cmp	r0, #255	@ 0xff
 8010526:	d0a3      	beq.n	8010470 <wait_session_status+0x1c>
 8010528:	38ff      	subs	r0, #255	@ 0xff
 801052a:	bf18      	it	ne
 801052c:	2001      	movne	r0, #1
 801052e:	b01d      	add	sp, #116	@ 0x74
 8010530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010534:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8010538:	4631      	mov	r1, r6
 801053a:	f104 0008 	add.w	r0, r4, #8
 801053e:	9304      	str	r3, [sp, #16]
 8010540:	f000 fbe8 	bl	8010d14 <uxr_get_input_reliable_stream>
 8010544:	4680      	mov	r8, r0
 8010546:	b348      	cbz	r0, 801059c <wait_session_status+0x148>
 8010548:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801054a:	a80c      	add	r0, sp, #48	@ 0x30
 801054c:	9205      	str	r2, [sp, #20]
 801054e:	f7ff f831 	bl	800f5b4 <ucdr_buffer_remaining>
 8010552:	4603      	mov	r3, r0
 8010554:	f10d 001d 	add.w	r0, sp, #29
 8010558:	9a05      	ldr	r2, [sp, #20]
 801055a:	9000      	str	r0, [sp, #0]
 801055c:	4640      	mov	r0, r8
 801055e:	9902      	ldr	r1, [sp, #8]
 8010560:	f003 ff3c 	bl	80143dc <uxr_receive_reliable_message>
 8010564:	b1d0      	cbz	r0, 801059c <wait_session_status+0x148>
 8010566:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d03a      	beq.n	80105e4 <wait_session_status+0x190>
 801056e:	9f04      	ldr	r7, [sp, #16]
 8010570:	e00a      	b.n	8010588 <wait_session_status+0x134>
 8010572:	f04f 0302 	mov.w	r3, #2
 8010576:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 801057a:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801057e:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8010582:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010584:	f7ff fc28 	bl	800fdd8 <read_submessage_list>
 8010588:	a914      	add	r1, sp, #80	@ 0x50
 801058a:	2204      	movs	r2, #4
 801058c:	4640      	mov	r0, r8
 801058e:	f003 ffa7 	bl	80144e0 <uxr_next_input_reliable_buffer_available>
 8010592:	4603      	mov	r3, r0
 8010594:	a914      	add	r1, sp, #80	@ 0x50
 8010596:	4620      	mov	r0, r4
 8010598:	2b00      	cmp	r3, #0
 801059a:	d1ea      	bne.n	8010572 <wait_session_status+0x11e>
 801059c:	4632      	mov	r2, r6
 801059e:	9904      	ldr	r1, [sp, #16]
 80105a0:	4620      	mov	r0, r4
 80105a2:	f7ff fa83 	bl	800faac <write_submessage_acknack.isra.0>
 80105a6:	e76f      	b.n	8010488 <wait_session_status+0x34>
 80105a8:	4631      	mov	r1, r6
 80105aa:	f104 0008 	add.w	r0, r4, #8
 80105ae:	f000 fba7 	bl	8010d00 <uxr_get_input_best_effort_stream>
 80105b2:	2800      	cmp	r0, #0
 80105b4:	f43f af68 	beq.w	8010488 <wait_session_status+0x34>
 80105b8:	9902      	ldr	r1, [sp, #8]
 80105ba:	f003 fe85 	bl	80142c8 <uxr_receive_best_effort_message>
 80105be:	2800      	cmp	r0, #0
 80105c0:	f43f af62 	beq.w	8010488 <wait_session_status+0x34>
 80105c4:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80105c8:	a90c      	add	r1, sp, #48	@ 0x30
 80105ca:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80105cc:	4620      	mov	r0, r4
 80105ce:	f7ff fc03 	bl	800fdd8 <read_submessage_list>
 80105d2:	e759      	b.n	8010488 <wait_session_status+0x34>
 80105d4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80105d6:	e9d3 0400 	ldrd	r0, r4, [r3]
 80105da:	47a0      	blx	r4
 80105dc:	2001      	movs	r0, #1
 80105de:	b01d      	add	sp, #116	@ 0x74
 80105e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105e4:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80105e8:	a90c      	add	r1, sp, #48	@ 0x30
 80105ea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80105ec:	4620      	mov	r0, r4
 80105ee:	f7ff fbf3 	bl	800fdd8 <read_submessage_list>
 80105f2:	e7bc      	b.n	801056e <wait_session_status+0x11a>

080105f4 <uxr_delete_session_retries>:
 80105f4:	b530      	push	{r4, r5, lr}
 80105f6:	b08f      	sub	sp, #60	@ 0x3c
 80105f8:	4604      	mov	r4, r0
 80105fa:	460d      	mov	r5, r1
 80105fc:	f000 fa34 	bl	8010a68 <uxr_session_header_offset>
 8010600:	2300      	movs	r3, #0
 8010602:	2210      	movs	r2, #16
 8010604:	a902      	add	r1, sp, #8
 8010606:	9000      	str	r0, [sp, #0]
 8010608:	a806      	add	r0, sp, #24
 801060a:	f7fe ff8f 	bl	800f52c <ucdr_init_buffer_origin_offset>
 801060e:	a906      	add	r1, sp, #24
 8010610:	4620      	mov	r0, r4
 8010612:	f000 f979 	bl	8010908 <uxr_buffer_delete_session>
 8010616:	2200      	movs	r2, #0
 8010618:	9b06      	ldr	r3, [sp, #24]
 801061a:	4620      	mov	r0, r4
 801061c:	4611      	mov	r1, r2
 801061e:	f000 f9cf 	bl	80109c0 <uxr_stamp_session_header>
 8010622:	a806      	add	r0, sp, #24
 8010624:	f7fe ffc2 	bl	800f5ac <ucdr_buffer_length>
 8010628:	462b      	mov	r3, r5
 801062a:	4602      	mov	r2, r0
 801062c:	a902      	add	r1, sp, #8
 801062e:	4620      	mov	r0, r4
 8010630:	f7ff ff10 	bl	8010454 <wait_session_status>
 8010634:	b118      	cbz	r0, 801063e <uxr_delete_session_retries+0x4a>
 8010636:	7960      	ldrb	r0, [r4, #5]
 8010638:	fab0 f080 	clz	r0, r0
 801063c:	0940      	lsrs	r0, r0, #5
 801063e:	b00f      	add	sp, #60	@ 0x3c
 8010640:	bd30      	pop	{r4, r5, pc}
 8010642:	bf00      	nop

08010644 <uxr_create_session>:
 8010644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010648:	f100 0b08 	add.w	fp, r0, #8
 801064c:	4604      	mov	r4, r0
 801064e:	b0ab      	sub	sp, #172	@ 0xac
 8010650:	4658      	mov	r0, fp
 8010652:	465e      	mov	r6, fp
 8010654:	f000 faa6 	bl	8010ba4 <uxr_reset_stream_storage>
 8010658:	4620      	mov	r0, r4
 801065a:	f000 fa05 	bl	8010a68 <uxr_session_header_offset>
 801065e:	2300      	movs	r3, #0
 8010660:	221c      	movs	r2, #28
 8010662:	a90b      	add	r1, sp, #44	@ 0x2c
 8010664:	9000      	str	r0, [sp, #0]
 8010666:	a812      	add	r0, sp, #72	@ 0x48
 8010668:	f7fe ff60 	bl	800f52c <ucdr_init_buffer_origin_offset>
 801066c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801066e:	a912      	add	r1, sp, #72	@ 0x48
 8010670:	4620      	mov	r0, r4
 8010672:	8a1a      	ldrh	r2, [r3, #16]
 8010674:	3a04      	subs	r2, #4
 8010676:	b292      	uxth	r2, r2
 8010678:	f000 f91c 	bl	80108b4 <uxr_buffer_create_session>
 801067c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801067e:	4620      	mov	r0, r4
 8010680:	f000 f98a 	bl	8010998 <uxr_stamp_create_session_header>
 8010684:	a812      	add	r0, sp, #72	@ 0x48
 8010686:	f7fe ff91 	bl	800f5ac <ucdr_buffer_length>
 801068a:	23ff      	movs	r3, #255	@ 0xff
 801068c:	4681      	mov	r9, r0
 801068e:	7163      	strb	r3, [r4, #5]
 8010690:	230a      	movs	r3, #10
 8010692:	9303      	str	r3, [sp, #12]
 8010694:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010696:	464a      	mov	r2, r9
 8010698:	a90b      	add	r1, sp, #44	@ 0x2c
 801069a:	e9d3 0500 	ldrd	r0, r5, [r3]
 801069e:	47a8      	blx	r5
 80106a0:	f000 fba0 	bl	8010de4 <uxr_millis>
 80106a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80106a8:	4605      	mov	r5, r0
 80106aa:	e009      	b.n	80106c0 <uxr_create_session+0x7c>
 80106ac:	f000 fb9a 	bl	8010de4 <uxr_millis>
 80106b0:	1b40      	subs	r0, r0, r5
 80106b2:	7962      	ldrb	r2, [r4, #5]
 80106b4:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	dd38      	ble.n	801072e <uxr_create_session+0xea>
 80106bc:	2aff      	cmp	r2, #255	@ 0xff
 80106be:	d13c      	bne.n	801073a <uxr_create_session+0xf6>
 80106c0:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80106c2:	a907      	add	r1, sp, #28
 80106c4:	6897      	ldr	r7, [r2, #8]
 80106c6:	6810      	ldr	r0, [r2, #0]
 80106c8:	aa08      	add	r2, sp, #32
 80106ca:	47b8      	blx	r7
 80106cc:	2800      	cmp	r0, #0
 80106ce:	d0ed      	beq.n	80106ac <uxr_create_session+0x68>
 80106d0:	a81a      	add	r0, sp, #104	@ 0x68
 80106d2:	2700      	movs	r7, #0
 80106d4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80106d8:	f7fe ff3a 	bl	800f550 <ucdr_init_buffer>
 80106dc:	f10d 031a 	add.w	r3, sp, #26
 80106e0:	aa06      	add	r2, sp, #24
 80106e2:	a91a      	add	r1, sp, #104	@ 0x68
 80106e4:	4620      	mov	r0, r4
 80106e6:	f88d 7018 	strb.w	r7, [sp, #24]
 80106ea:	f000 f97d 	bl	80109e8 <uxr_read_session_header>
 80106ee:	2800      	cmp	r0, #0
 80106f0:	d0dc      	beq.n	80106ac <uxr_create_session+0x68>
 80106f2:	4639      	mov	r1, r7
 80106f4:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80106f8:	f000 fa1e 	bl	8010b38 <uxr_stream_id_from_raw>
 80106fc:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8010700:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8010704:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8010708:	2f01      	cmp	r7, #1
 801070a:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801070e:	d053      	beq.n	80107b8 <uxr_create_session+0x174>
 8010710:	2f02      	cmp	r7, #2
 8010712:	d018      	beq.n	8010746 <uxr_create_session+0x102>
 8010714:	2f00      	cmp	r7, #0
 8010716:	d1c9      	bne.n	80106ac <uxr_create_session+0x68>
 8010718:	4639      	mov	r1, r7
 801071a:	4638      	mov	r0, r7
 801071c:	f000 fa0c 	bl	8010b38 <uxr_stream_id_from_raw>
 8010720:	a91a      	add	r1, sp, #104	@ 0x68
 8010722:	4602      	mov	r2, r0
 8010724:	900a      	str	r0, [sp, #40]	@ 0x28
 8010726:	4620      	mov	r0, r4
 8010728:	f7ff fb56 	bl	800fdd8 <read_submessage_list>
 801072c:	e7be      	b.n	80106ac <uxr_create_session+0x68>
 801072e:	9b03      	ldr	r3, [sp, #12]
 8010730:	3b01      	subs	r3, #1
 8010732:	9303      	str	r3, [sp, #12]
 8010734:	d001      	beq.n	801073a <uxr_create_session+0xf6>
 8010736:	2aff      	cmp	r2, #255	@ 0xff
 8010738:	d0ac      	beq.n	8010694 <uxr_create_session+0x50>
 801073a:	2a00      	cmp	r2, #0
 801073c:	d051      	beq.n	80107e2 <uxr_create_session+0x19e>
 801073e:	2000      	movs	r0, #0
 8010740:	b02b      	add	sp, #172	@ 0xac
 8010742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010746:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801074a:	4641      	mov	r1, r8
 801074c:	4630      	mov	r0, r6
 801074e:	9304      	str	r3, [sp, #16]
 8010750:	f000 fae0 	bl	8010d14 <uxr_get_input_reliable_stream>
 8010754:	4682      	mov	sl, r0
 8010756:	b348      	cbz	r0, 80107ac <uxr_create_session+0x168>
 8010758:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801075a:	a81a      	add	r0, sp, #104	@ 0x68
 801075c:	9205      	str	r2, [sp, #20]
 801075e:	f7fe ff29 	bl	800f5b4 <ucdr_buffer_remaining>
 8010762:	4603      	mov	r3, r0
 8010764:	f10d 0019 	add.w	r0, sp, #25
 8010768:	9a05      	ldr	r2, [sp, #20]
 801076a:	4659      	mov	r1, fp
 801076c:	9000      	str	r0, [sp, #0]
 801076e:	4650      	mov	r0, sl
 8010770:	f003 fe34 	bl	80143dc <uxr_receive_reliable_message>
 8010774:	b1d0      	cbz	r0, 80107ac <uxr_create_session+0x168>
 8010776:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d038      	beq.n	80107f0 <uxr_create_session+0x1ac>
 801077e:	9f04      	ldr	r7, [sp, #16]
 8010780:	e00a      	b.n	8010798 <uxr_create_session+0x154>
 8010782:	f04f 0302 	mov.w	r3, #2
 8010786:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 801078a:	f88d 8029 	strb.w	r8, [sp, #41]	@ 0x29
 801078e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010792:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010794:	f7ff fb20 	bl	800fdd8 <read_submessage_list>
 8010798:	a922      	add	r1, sp, #136	@ 0x88
 801079a:	2204      	movs	r2, #4
 801079c:	4650      	mov	r0, sl
 801079e:	f003 fe9f 	bl	80144e0 <uxr_next_input_reliable_buffer_available>
 80107a2:	4603      	mov	r3, r0
 80107a4:	a922      	add	r1, sp, #136	@ 0x88
 80107a6:	4620      	mov	r0, r4
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d1ea      	bne.n	8010782 <uxr_create_session+0x13e>
 80107ac:	4642      	mov	r2, r8
 80107ae:	9904      	ldr	r1, [sp, #16]
 80107b0:	4620      	mov	r0, r4
 80107b2:	f7ff f97b 	bl	800faac <write_submessage_acknack.isra.0>
 80107b6:	e779      	b.n	80106ac <uxr_create_session+0x68>
 80107b8:	4641      	mov	r1, r8
 80107ba:	4630      	mov	r0, r6
 80107bc:	f000 faa0 	bl	8010d00 <uxr_get_input_best_effort_stream>
 80107c0:	2800      	cmp	r0, #0
 80107c2:	f43f af73 	beq.w	80106ac <uxr_create_session+0x68>
 80107c6:	4659      	mov	r1, fp
 80107c8:	f003 fd7e 	bl	80142c8 <uxr_receive_best_effort_message>
 80107cc:	2800      	cmp	r0, #0
 80107ce:	f43f af6d 	beq.w	80106ac <uxr_create_session+0x68>
 80107d2:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 80107d6:	a91a      	add	r1, sp, #104	@ 0x68
 80107d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80107da:	4620      	mov	r0, r4
 80107dc:	f7ff fafc 	bl	800fdd8 <read_submessage_list>
 80107e0:	e764      	b.n	80106ac <uxr_create_session+0x68>
 80107e2:	4630      	mov	r0, r6
 80107e4:	f000 f9de 	bl	8010ba4 <uxr_reset_stream_storage>
 80107e8:	2001      	movs	r0, #1
 80107ea:	b02b      	add	sp, #172	@ 0xac
 80107ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107f0:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 80107f4:	a91a      	add	r1, sp, #104	@ 0x68
 80107f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80107f8:	4620      	mov	r0, r4
 80107fa:	f7ff faed 	bl	800fdd8 <read_submessage_list>
 80107fe:	e7be      	b.n	801077e <uxr_create_session+0x13a>

08010800 <uxr_prepare_stream_to_write_submessage>:
 8010800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010804:	b082      	sub	sp, #8
 8010806:	4604      	mov	r4, r0
 8010808:	4610      	mov	r0, r2
 801080a:	4615      	mov	r5, r2
 801080c:	461e      	mov	r6, r3
 801080e:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 8010812:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8010816:	f105 0904 	add.w	r9, r5, #4
 801081a:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 801081e:	9101      	str	r1, [sp, #4]
 8010820:	f000 fada 	bl	8010dd8 <uxr_submessage_padding>
 8010824:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010828:	4481      	add	r9, r0
 801082a:	2b01      	cmp	r3, #1
 801082c:	d01d      	beq.n	801086a <uxr_prepare_stream_to_write_submessage+0x6a>
 801082e:	2b02      	cmp	r3, #2
 8010830:	d116      	bne.n	8010860 <uxr_prepare_stream_to_write_submessage+0x60>
 8010832:	f104 0008 	add.w	r0, r4, #8
 8010836:	4651      	mov	r1, sl
 8010838:	f000 fa56 	bl	8010ce8 <uxr_get_output_reliable_stream>
 801083c:	4604      	mov	r4, r0
 801083e:	b158      	cbz	r0, 8010858 <uxr_prepare_stream_to_write_submessage+0x58>
 8010840:	4649      	mov	r1, r9
 8010842:	4632      	mov	r2, r6
 8010844:	f004 f812 	bl	801486c <uxr_prepare_reliable_buffer_to_write>
 8010848:	4604      	mov	r4, r0
 801084a:	b12c      	cbz	r4, 8010858 <uxr_prepare_stream_to_write_submessage+0x58>
 801084c:	4643      	mov	r3, r8
 801084e:	b2aa      	uxth	r2, r5
 8010850:	4639      	mov	r1, r7
 8010852:	4630      	mov	r0, r6
 8010854:	f000 fa80 	bl	8010d58 <uxr_buffer_submessage_header>
 8010858:	4620      	mov	r0, r4
 801085a:	b002      	add	sp, #8
 801085c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010860:	2400      	movs	r4, #0
 8010862:	4620      	mov	r0, r4
 8010864:	b002      	add	sp, #8
 8010866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801086a:	f104 0008 	add.w	r0, r4, #8
 801086e:	4651      	mov	r1, sl
 8010870:	f000 fa32 	bl	8010cd8 <uxr_get_output_best_effort_stream>
 8010874:	4604      	mov	r4, r0
 8010876:	2800      	cmp	r0, #0
 8010878:	d0ee      	beq.n	8010858 <uxr_prepare_stream_to_write_submessage+0x58>
 801087a:	4649      	mov	r1, r9
 801087c:	4632      	mov	r2, r6
 801087e:	f003 ff1f 	bl	80146c0 <uxr_prepare_best_effort_buffer_to_write>
 8010882:	4604      	mov	r4, r0
 8010884:	e7e1      	b.n	801084a <uxr_prepare_stream_to_write_submessage+0x4a>
 8010886:	bf00      	nop

08010888 <uxr_init_session_info>:
 8010888:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801088c:	23ff      	movs	r3, #255	@ 0xff
 801088e:	7102      	strb	r2, [r0, #4]
 8010890:	f880 c001 	strb.w	ip, [r0, #1]
 8010894:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8010898:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801089c:	7001      	strb	r1, [r0, #0]
 801089e:	f880 c002 	strb.w	ip, [r0, #2]
 80108a2:	7143      	strb	r3, [r0, #5]
 80108a4:	70c2      	strb	r2, [r0, #3]
 80108a6:	b500      	push	{lr}
 80108a8:	f04f 0e09 	mov.w	lr, #9
 80108ac:	f8a0 e006 	strh.w	lr, [r0, #6]
 80108b0:	f85d fb04 	ldr.w	pc, [sp], #4

080108b4 <uxr_buffer_create_session>:
 80108b4:	b530      	push	{r4, r5, lr}
 80108b6:	2300      	movs	r3, #0
 80108b8:	b089      	sub	sp, #36	@ 0x24
 80108ba:	4d12      	ldr	r5, [pc, #72]	@ (8010904 <uxr_buffer_create_session+0x50>)
 80108bc:	460c      	mov	r4, r1
 80108be:	9307      	str	r3, [sp, #28]
 80108c0:	4619      	mov	r1, r3
 80108c2:	f8ad 201c 	strh.w	r2, [sp, #28]
 80108c6:	2201      	movs	r2, #1
 80108c8:	9301      	str	r3, [sp, #4]
 80108ca:	80c2      	strh	r2, [r0, #6]
 80108cc:	f88d 2004 	strb.w	r2, [sp, #4]
 80108d0:	682a      	ldr	r2, [r5, #0]
 80108d2:	9303      	str	r3, [sp, #12]
 80108d4:	9200      	str	r2, [sp, #0]
 80108d6:	88aa      	ldrh	r2, [r5, #4]
 80108d8:	9306      	str	r3, [sp, #24]
 80108da:	f8ad 2006 	strh.w	r2, [sp, #6]
 80108de:	f8d0 2001 	ldr.w	r2, [r0, #1]
 80108e2:	9202      	str	r2, [sp, #8]
 80108e4:	7802      	ldrb	r2, [r0, #0]
 80108e6:	4620      	mov	r0, r4
 80108e8:	f88d 200c 	strb.w	r2, [sp, #12]
 80108ec:	2210      	movs	r2, #16
 80108ee:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80108f2:	f000 fa31 	bl	8010d58 <uxr_buffer_submessage_header>
 80108f6:	4669      	mov	r1, sp
 80108f8:	4620      	mov	r0, r4
 80108fa:	f001 f983 	bl	8011c04 <uxr_serialize_CREATE_CLIENT_Payload>
 80108fe:	b009      	add	sp, #36	@ 0x24
 8010900:	bd30      	pop	{r4, r5, pc}
 8010902:	bf00      	nop
 8010904:	08017ac4 	.word	0x08017ac4

08010908 <uxr_buffer_delete_session>:
 8010908:	4a0c      	ldr	r2, [pc, #48]	@ (801093c <uxr_buffer_delete_session+0x34>)
 801090a:	2302      	movs	r3, #2
 801090c:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 8010910:	b510      	push	{r4, lr}
 8010912:	460c      	mov	r4, r1
 8010914:	b082      	sub	sp, #8
 8010916:	8911      	ldrh	r1, [r2, #8]
 8010918:	2204      	movs	r2, #4
 801091a:	80c3      	strh	r3, [r0, #6]
 801091c:	2300      	movs	r3, #0
 801091e:	f8ad 1006 	strh.w	r1, [sp, #6]
 8010922:	4620      	mov	r0, r4
 8010924:	2103      	movs	r1, #3
 8010926:	f8ad c004 	strh.w	ip, [sp, #4]
 801092a:	f000 fa15 	bl	8010d58 <uxr_buffer_submessage_header>
 801092e:	a901      	add	r1, sp, #4
 8010930:	4620      	mov	r0, r4
 8010932:	f001 fa0f 	bl	8011d54 <uxr_serialize_DELETE_Payload>
 8010936:	b002      	add	sp, #8
 8010938:	bd10      	pop	{r4, pc}
 801093a:	bf00      	nop
 801093c:	08017ac4 	.word	0x08017ac4

08010940 <uxr_read_create_session_status>:
 8010940:	b510      	push	{r4, lr}
 8010942:	460b      	mov	r3, r1
 8010944:	b088      	sub	sp, #32
 8010946:	4604      	mov	r4, r0
 8010948:	a901      	add	r1, sp, #4
 801094a:	4618      	mov	r0, r3
 801094c:	f001 fa12 	bl	8011d74 <uxr_deserialize_STATUS_AGENT_Payload>
 8010950:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010954:	7163      	strb	r3, [r4, #5]
 8010956:	b008      	add	sp, #32
 8010958:	bd10      	pop	{r4, pc}
 801095a:	bf00      	nop

0801095c <uxr_read_delete_session_status>:
 801095c:	b510      	push	{r4, lr}
 801095e:	b084      	sub	sp, #16
 8010960:	4604      	mov	r4, r0
 8010962:	4608      	mov	r0, r1
 8010964:	a902      	add	r1, sp, #8
 8010966:	f001 fa35 	bl	8011dd4 <uxr_deserialize_STATUS_Payload>
 801096a:	88e3      	ldrh	r3, [r4, #6]
 801096c:	2b02      	cmp	r3, #2
 801096e:	d001      	beq.n	8010974 <uxr_read_delete_session_status+0x18>
 8010970:	b004      	add	sp, #16
 8010972:	bd10      	pop	{r4, pc}
 8010974:	f10d 000a 	add.w	r0, sp, #10
 8010978:	f7ff f81e 	bl	800f9b8 <uxr_object_id_from_raw>
 801097c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8010980:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8010984:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010988:	b29b      	uxth	r3, r3
 801098a:	2b02      	cmp	r3, #2
 801098c:	d1f0      	bne.n	8010970 <uxr_read_delete_session_status+0x14>
 801098e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8010992:	7163      	strb	r3, [r4, #5]
 8010994:	e7ec      	b.n	8010970 <uxr_read_delete_session_status+0x14>
 8010996:	bf00      	nop

08010998 <uxr_stamp_create_session_header>:
 8010998:	b510      	push	{r4, lr}
 801099a:	2208      	movs	r2, #8
 801099c:	b08a      	sub	sp, #40	@ 0x28
 801099e:	4604      	mov	r4, r0
 80109a0:	eb0d 0002 	add.w	r0, sp, r2
 80109a4:	f7fe fdd4 	bl	800f550 <ucdr_init_buffer>
 80109a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109ac:	2300      	movs	r3, #0
 80109ae:	a802      	add	r0, sp, #8
 80109b0:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80109b4:	9400      	str	r4, [sp, #0]
 80109b6:	461a      	mov	r2, r3
 80109b8:	f000 fbca 	bl	8011150 <uxr_serialize_message_header>
 80109bc:	b00a      	add	sp, #40	@ 0x28
 80109be:	bd10      	pop	{r4, pc}

080109c0 <uxr_stamp_session_header>:
 80109c0:	b530      	push	{r4, r5, lr}
 80109c2:	b08d      	sub	sp, #52	@ 0x34
 80109c4:	4604      	mov	r4, r0
 80109c6:	460d      	mov	r5, r1
 80109c8:	4619      	mov	r1, r3
 80109ca:	a804      	add	r0, sp, #16
 80109cc:	9203      	str	r2, [sp, #12]
 80109ce:	2208      	movs	r2, #8
 80109d0:	f7fe fdbe 	bl	800f550 <ucdr_init_buffer>
 80109d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109d8:	9b03      	ldr	r3, [sp, #12]
 80109da:	462a      	mov	r2, r5
 80109dc:	a804      	add	r0, sp, #16
 80109de:	9400      	str	r4, [sp, #0]
 80109e0:	f000 fbb6 	bl	8011150 <uxr_serialize_message_header>
 80109e4:	b00d      	add	sp, #52	@ 0x34
 80109e6:	bd30      	pop	{r4, r5, pc}

080109e8 <uxr_read_session_header>:
 80109e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109ec:	4607      	mov	r7, r0
 80109ee:	b084      	sub	sp, #16
 80109f0:	4608      	mov	r0, r1
 80109f2:	460c      	mov	r4, r1
 80109f4:	4615      	mov	r5, r2
 80109f6:	461e      	mov	r6, r3
 80109f8:	f7fe fddc 	bl	800f5b4 <ucdr_buffer_remaining>
 80109fc:	2808      	cmp	r0, #8
 80109fe:	d803      	bhi.n	8010a08 <uxr_read_session_header+0x20>
 8010a00:	2000      	movs	r0, #0
 8010a02:	b004      	add	sp, #16
 8010a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a08:	f10d 080c 	add.w	r8, sp, #12
 8010a0c:	4633      	mov	r3, r6
 8010a0e:	462a      	mov	r2, r5
 8010a10:	4620      	mov	r0, r4
 8010a12:	f10d 010b 	add.w	r1, sp, #11
 8010a16:	f8cd 8000 	str.w	r8, [sp]
 8010a1a:	f000 fbb7 	bl	801118c <uxr_deserialize_message_header>
 8010a1e:	783a      	ldrb	r2, [r7, #0]
 8010a20:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8010a24:	4293      	cmp	r3, r2
 8010a26:	d1eb      	bne.n	8010a00 <uxr_read_session_header+0x18>
 8010a28:	061b      	lsls	r3, r3, #24
 8010a2a:	d41b      	bmi.n	8010a64 <uxr_read_session_header+0x7c>
 8010a2c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8010a30:	787b      	ldrb	r3, [r7, #1]
 8010a32:	429a      	cmp	r2, r3
 8010a34:	d003      	beq.n	8010a3e <uxr_read_session_header+0x56>
 8010a36:	2001      	movs	r0, #1
 8010a38:	f080 0001 	eor.w	r0, r0, #1
 8010a3c:	e7e1      	b.n	8010a02 <uxr_read_session_header+0x1a>
 8010a3e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8010a42:	1cb8      	adds	r0, r7, #2
 8010a44:	78bb      	ldrb	r3, [r7, #2]
 8010a46:	429a      	cmp	r2, r3
 8010a48:	d1f5      	bne.n	8010a36 <uxr_read_session_header+0x4e>
 8010a4a:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8010a4e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8010a52:	429a      	cmp	r2, r3
 8010a54:	d1ef      	bne.n	8010a36 <uxr_read_session_header+0x4e>
 8010a56:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8010a5a:	7843      	ldrb	r3, [r0, #1]
 8010a5c:	429a      	cmp	r2, r3
 8010a5e:	d1ea      	bne.n	8010a36 <uxr_read_session_header+0x4e>
 8010a60:	2000      	movs	r0, #0
 8010a62:	e7e9      	b.n	8010a38 <uxr_read_session_header+0x50>
 8010a64:	2001      	movs	r0, #1
 8010a66:	e7cc      	b.n	8010a02 <uxr_read_session_header+0x1a>

08010a68 <uxr_session_header_offset>:
 8010a68:	f990 3000 	ldrsb.w	r3, [r0]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	bfac      	ite	ge
 8010a70:	2008      	movge	r0, #8
 8010a72:	2004      	movlt	r0, #4
 8010a74:	4770      	bx	lr
 8010a76:	bf00      	nop

08010a78 <uxr_init_base_object_request>:
 8010a78:	b510      	push	{r4, lr}
 8010a7a:	b082      	sub	sp, #8
 8010a7c:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8010a80:	9101      	str	r1, [sp, #4]
 8010a82:	88c3      	ldrh	r3, [r0, #6]
 8010a84:	f1a3 010a 	sub.w	r1, r3, #10
 8010a88:	b289      	uxth	r1, r1
 8010a8a:	42a1      	cmp	r1, r4
 8010a8c:	d80f      	bhi.n	8010aae <uxr_init_base_object_request+0x36>
 8010a8e:	3301      	adds	r3, #1
 8010a90:	b29c      	uxth	r4, r3
 8010a92:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8010a96:	b2db      	uxtb	r3, r3
 8010a98:	80c4      	strh	r4, [r0, #6]
 8010a9a:	1c91      	adds	r1, r2, #2
 8010a9c:	9801      	ldr	r0, [sp, #4]
 8010a9e:	f882 c000 	strb.w	ip, [r2]
 8010aa2:	7053      	strb	r3, [r2, #1]
 8010aa4:	f7fe ff9c 	bl	800f9e0 <uxr_object_id_to_raw>
 8010aa8:	4620      	mov	r0, r4
 8010aaa:	b002      	add	sp, #8
 8010aac:	bd10      	pop	{r4, pc}
 8010aae:	230a      	movs	r3, #10
 8010ab0:	f04f 0c00 	mov.w	ip, #0
 8010ab4:	461c      	mov	r4, r3
 8010ab6:	e7ef      	b.n	8010a98 <uxr_init_base_object_request+0x20>

08010ab8 <uxr_parse_base_object_request>:
 8010ab8:	b570      	push	{r4, r5, r6, lr}
 8010aba:	4604      	mov	r4, r0
 8010abc:	3002      	adds	r0, #2
 8010abe:	460d      	mov	r5, r1
 8010ac0:	4616      	mov	r6, r2
 8010ac2:	f7fe ff79 	bl	800f9b8 <uxr_object_id_from_raw>
 8010ac6:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8010aca:	8028      	strh	r0, [r5, #0]
 8010acc:	806b      	strh	r3, [r5, #2]
 8010ace:	7822      	ldrb	r2, [r4, #0]
 8010ad0:	7863      	ldrb	r3, [r4, #1]
 8010ad2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010ad6:	8033      	strh	r3, [r6, #0]
 8010ad8:	bd70      	pop	{r4, r5, r6, pc}
 8010ada:	bf00      	nop

08010adc <uxr_stream_id>:
 8010adc:	2901      	cmp	r1, #1
 8010ade:	4684      	mov	ip, r0
 8010ae0:	b500      	push	{lr}
 8010ae2:	b083      	sub	sp, #12
 8010ae4:	d01f      	beq.n	8010b26 <uxr_stream_id+0x4a>
 8010ae6:	2902      	cmp	r1, #2
 8010ae8:	f04f 0e00 	mov.w	lr, #0
 8010aec:	d020      	beq.n	8010b30 <uxr_stream_id+0x54>
 8010aee:	2300      	movs	r3, #0
 8010af0:	2000      	movs	r0, #0
 8010af2:	f36e 0307 	bfi	r3, lr, #0, #8
 8010af6:	f36c 230f 	bfi	r3, ip, #8, #8
 8010afa:	f361 4317 	bfi	r3, r1, #16, #8
 8010afe:	f362 631f 	bfi	r3, r2, #24, #8
 8010b02:	fa5f fc83 	uxtb.w	ip, r3
 8010b06:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8010b0a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010b0e:	0e1b      	lsrs	r3, r3, #24
 8010b10:	f36c 0007 	bfi	r0, ip, #0, #8
 8010b14:	f361 200f 	bfi	r0, r1, #8, #8
 8010b18:	f362 4017 	bfi	r0, r2, #16, #8
 8010b1c:	f363 601f 	bfi	r0, r3, #24, #8
 8010b20:	b003      	add	sp, #12
 8010b22:	f85d fb04 	ldr.w	pc, [sp], #4
 8010b26:	f100 0e01 	add.w	lr, r0, #1
 8010b2a:	fa5f fe8e 	uxtb.w	lr, lr
 8010b2e:	e7de      	b.n	8010aee <uxr_stream_id+0x12>
 8010b30:	f080 0e80 	eor.w	lr, r0, #128	@ 0x80
 8010b34:	e7db      	b.n	8010aee <uxr_stream_id+0x12>
 8010b36:	bf00      	nop

08010b38 <uxr_stream_id_from_raw>:
 8010b38:	b082      	sub	sp, #8
 8010b3a:	b130      	cbz	r0, 8010b4a <uxr_stream_id_from_raw+0x12>
 8010b3c:	0603      	lsls	r3, r0, #24
 8010b3e:	d421      	bmi.n	8010b84 <uxr_stream_id_from_raw+0x4c>
 8010b40:	1e42      	subs	r2, r0, #1
 8010b42:	f04f 0c01 	mov.w	ip, #1
 8010b46:	b2d2      	uxtb	r2, r2
 8010b48:	e001      	b.n	8010b4e <uxr_stream_id_from_raw+0x16>
 8010b4a:	4684      	mov	ip, r0
 8010b4c:	4602      	mov	r2, r0
 8010b4e:	2300      	movs	r3, #0
 8010b50:	f360 0307 	bfi	r3, r0, #0, #8
 8010b54:	2000      	movs	r0, #0
 8010b56:	f362 230f 	bfi	r3, r2, #8, #8
 8010b5a:	f36c 4317 	bfi	r3, ip, #16, #8
 8010b5e:	f361 631f 	bfi	r3, r1, #24, #8
 8010b62:	fa5f fc83 	uxtb.w	ip, r3
 8010b66:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8010b6a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010b6e:	0e1b      	lsrs	r3, r3, #24
 8010b70:	f36c 0007 	bfi	r0, ip, #0, #8
 8010b74:	f361 200f 	bfi	r0, r1, #8, #8
 8010b78:	f362 4017 	bfi	r0, r2, #16, #8
 8010b7c:	f363 601f 	bfi	r0, r3, #24, #8
 8010b80:	b002      	add	sp, #8
 8010b82:	4770      	bx	lr
 8010b84:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8010b88:	f04f 0c02 	mov.w	ip, #2
 8010b8c:	e7df      	b.n	8010b4e <uxr_stream_id_from_raw+0x16>
 8010b8e:	bf00      	nop

08010b90 <uxr_init_stream_storage>:
 8010b90:	2300      	movs	r3, #0
 8010b92:	7403      	strb	r3, [r0, #16]
 8010b94:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8010b98:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8010b9c:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8010ba0:	4770      	bx	lr
 8010ba2:	bf00      	nop

08010ba4 <uxr_reset_stream_storage>:
 8010ba4:	b570      	push	{r4, r5, r6, lr}
 8010ba6:	7c03      	ldrb	r3, [r0, #16]
 8010ba8:	4604      	mov	r4, r0
 8010baa:	b14b      	cbz	r3, 8010bc0 <uxr_reset_stream_storage+0x1c>
 8010bac:	4606      	mov	r6, r0
 8010bae:	2500      	movs	r5, #0
 8010bb0:	4630      	mov	r0, r6
 8010bb2:	3501      	adds	r5, #1
 8010bb4:	f003 fd7e 	bl	80146b4 <uxr_reset_output_best_effort_stream>
 8010bb8:	7c23      	ldrb	r3, [r4, #16]
 8010bba:	3610      	adds	r6, #16
 8010bbc:	42ab      	cmp	r3, r5
 8010bbe:	d8f7      	bhi.n	8010bb0 <uxr_reset_stream_storage+0xc>
 8010bc0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010bc4:	b15b      	cbz	r3, 8010bde <uxr_reset_stream_storage+0x3a>
 8010bc6:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010bca:	2500      	movs	r5, #0
 8010bcc:	4630      	mov	r0, r6
 8010bce:	3501      	adds	r5, #1
 8010bd0:	f003 fb76 	bl	80142c0 <uxr_reset_input_best_effort_stream>
 8010bd4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010bd8:	3602      	adds	r6, #2
 8010bda:	42ab      	cmp	r3, r5
 8010bdc:	d8f6      	bhi.n	8010bcc <uxr_reset_stream_storage+0x28>
 8010bde:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8010be2:	b15b      	cbz	r3, 8010bfc <uxr_reset_stream_storage+0x58>
 8010be4:	f104 0618 	add.w	r6, r4, #24
 8010be8:	2500      	movs	r5, #0
 8010bea:	4630      	mov	r0, r6
 8010bec:	3501      	adds	r5, #1
 8010bee:	f003 fe0f 	bl	8014810 <uxr_reset_output_reliable_stream>
 8010bf2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8010bf6:	3628      	adds	r6, #40	@ 0x28
 8010bf8:	42ab      	cmp	r3, r5
 8010bfa:	d8f6      	bhi.n	8010bea <uxr_reset_stream_storage+0x46>
 8010bfc:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8010c00:	b15b      	cbz	r3, 8010c1a <uxr_reset_stream_storage+0x76>
 8010c02:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8010c06:	2500      	movs	r5, #0
 8010c08:	4630      	mov	r0, r6
 8010c0a:	3501      	adds	r5, #1
 8010c0c:	f003 fbc4 	bl	8014398 <uxr_reset_input_reliable_stream>
 8010c10:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8010c14:	3618      	adds	r6, #24
 8010c16:	42ab      	cmp	r3, r5
 8010c18:	d8f6      	bhi.n	8010c08 <uxr_reset_stream_storage+0x64>
 8010c1a:	bd70      	pop	{r4, r5, r6, pc}

08010c1c <uxr_add_output_best_effort_buffer>:
 8010c1c:	b510      	push	{r4, lr}
 8010c1e:	7c04      	ldrb	r4, [r0, #16]
 8010c20:	b082      	sub	sp, #8
 8010c22:	f104 0c01 	add.w	ip, r4, #1
 8010c26:	f880 c010 	strb.w	ip, [r0, #16]
 8010c2a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8010c2e:	f003 fd37 	bl	80146a0 <uxr_init_output_best_effort_stream>
 8010c32:	2201      	movs	r2, #1
 8010c34:	4620      	mov	r0, r4
 8010c36:	4611      	mov	r1, r2
 8010c38:	b002      	add	sp, #8
 8010c3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c3e:	f7ff bf4d 	b.w	8010adc <uxr_stream_id>
 8010c42:	bf00      	nop

08010c44 <uxr_add_output_reliable_buffer>:
 8010c44:	b510      	push	{r4, lr}
 8010c46:	b084      	sub	sp, #16
 8010c48:	4684      	mov	ip, r0
 8010c4a:	2028      	movs	r0, #40	@ 0x28
 8010c4c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8010c50:	9400      	str	r4, [sp, #0]
 8010c52:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8010c56:	fb00 c004 	mla	r0, r0, r4, ip
 8010c5a:	f104 0e01 	add.w	lr, r4, #1
 8010c5e:	3018      	adds	r0, #24
 8010c60:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8010c64:	f003 fd9c 	bl	80147a0 <uxr_init_output_reliable_stream>
 8010c68:	2201      	movs	r2, #1
 8010c6a:	2102      	movs	r1, #2
 8010c6c:	4620      	mov	r0, r4
 8010c6e:	b004      	add	sp, #16
 8010c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c74:	f7ff bf32 	b.w	8010adc <uxr_stream_id>

08010c78 <uxr_add_input_best_effort_buffer>:
 8010c78:	b510      	push	{r4, lr}
 8010c7a:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8010c7e:	b082      	sub	sp, #8
 8010c80:	1c62      	adds	r2, r4, #1
 8010c82:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8010c86:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8010c8a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8010c8e:	f003 fb13 	bl	80142b8 <uxr_init_input_best_effort_stream>
 8010c92:	2200      	movs	r2, #0
 8010c94:	2101      	movs	r1, #1
 8010c96:	4620      	mov	r0, r4
 8010c98:	b002      	add	sp, #8
 8010c9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c9e:	f7ff bf1d 	b.w	8010adc <uxr_stream_id>
 8010ca2:	bf00      	nop

08010ca4 <uxr_add_input_reliable_buffer>:
 8010ca4:	b510      	push	{r4, lr}
 8010ca6:	b084      	sub	sp, #16
 8010ca8:	4684      	mov	ip, r0
 8010caa:	2018      	movs	r0, #24
 8010cac:	9c06      	ldr	r4, [sp, #24]
 8010cae:	9400      	str	r4, [sp, #0]
 8010cb0:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8010cb4:	fb00 c004 	mla	r0, r0, r4, ip
 8010cb8:	f104 0e01 	add.w	lr, r4, #1
 8010cbc:	3048      	adds	r0, #72	@ 0x48
 8010cbe:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8010cc2:	f003 fb43 	bl	801434c <uxr_init_input_reliable_stream>
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	2102      	movs	r1, #2
 8010cca:	4620      	mov	r0, r4
 8010ccc:	b004      	add	sp, #16
 8010cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cd2:	f7ff bf03 	b.w	8010adc <uxr_stream_id>
 8010cd6:	bf00      	nop

08010cd8 <uxr_get_output_best_effort_stream>:
 8010cd8:	7c03      	ldrb	r3, [r0, #16]
 8010cda:	428b      	cmp	r3, r1
 8010cdc:	bf8c      	ite	hi
 8010cde:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8010ce2:	2000      	movls	r0, #0
 8010ce4:	4770      	bx	lr
 8010ce6:	bf00      	nop

08010ce8 <uxr_get_output_reliable_stream>:
 8010ce8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010cec:	428b      	cmp	r3, r1
 8010cee:	d904      	bls.n	8010cfa <uxr_get_output_reliable_stream+0x12>
 8010cf0:	2328      	movs	r3, #40	@ 0x28
 8010cf2:	fb03 0001 	mla	r0, r3, r1, r0
 8010cf6:	3018      	adds	r0, #24
 8010cf8:	4770      	bx	lr
 8010cfa:	2000      	movs	r0, #0
 8010cfc:	4770      	bx	lr
 8010cfe:	bf00      	nop

08010d00 <uxr_get_input_best_effort_stream>:
 8010d00:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8010d04:	428b      	cmp	r3, r1
 8010d06:	d903      	bls.n	8010d10 <uxr_get_input_best_effort_stream+0x10>
 8010d08:	3121      	adds	r1, #33	@ 0x21
 8010d0a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8010d0e:	4770      	bx	lr
 8010d10:	2000      	movs	r0, #0
 8010d12:	4770      	bx	lr

08010d14 <uxr_get_input_reliable_stream>:
 8010d14:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8010d18:	428b      	cmp	r3, r1
 8010d1a:	d904      	bls.n	8010d26 <uxr_get_input_reliable_stream+0x12>
 8010d1c:	2318      	movs	r3, #24
 8010d1e:	fb03 0001 	mla	r0, r3, r1, r0
 8010d22:	3048      	adds	r0, #72	@ 0x48
 8010d24:	4770      	bx	lr
 8010d26:	2000      	movs	r0, #0
 8010d28:	4770      	bx	lr
 8010d2a:	bf00      	nop

08010d2c <uxr_output_streams_confirmed>:
 8010d2c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010d30:	b183      	cbz	r3, 8010d54 <uxr_output_streams_confirmed+0x28>
 8010d32:	b570      	push	{r4, r5, r6, lr}
 8010d34:	4606      	mov	r6, r0
 8010d36:	f100 0518 	add.w	r5, r0, #24
 8010d3a:	2400      	movs	r4, #0
 8010d3c:	e000      	b.n	8010d40 <uxr_output_streams_confirmed+0x14>
 8010d3e:	b140      	cbz	r0, 8010d52 <uxr_output_streams_confirmed+0x26>
 8010d40:	4628      	mov	r0, r5
 8010d42:	3401      	adds	r4, #1
 8010d44:	f003 ffd8 	bl	8014cf8 <uxr_is_output_up_to_date>
 8010d48:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8010d4c:	3528      	adds	r5, #40	@ 0x28
 8010d4e:	42a3      	cmp	r3, r4
 8010d50:	d8f5      	bhi.n	8010d3e <uxr_output_streams_confirmed+0x12>
 8010d52:	bd70      	pop	{r4, r5, r6, pc}
 8010d54:	2001      	movs	r0, #1
 8010d56:	4770      	bx	lr

08010d58 <uxr_buffer_submessage_header>:
 8010d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d5a:	460e      	mov	r6, r1
 8010d5c:	2104      	movs	r1, #4
 8010d5e:	4604      	mov	r4, r0
 8010d60:	4615      	mov	r5, r2
 8010d62:	461f      	mov	r7, r3
 8010d64:	f7fe fc10 	bl	800f588 <ucdr_align_to>
 8010d68:	2301      	movs	r3, #1
 8010d6a:	4631      	mov	r1, r6
 8010d6c:	4620      	mov	r0, r4
 8010d6e:	ea47 0203 	orr.w	r2, r7, r3
 8010d72:	7523      	strb	r3, [r4, #20]
 8010d74:	462b      	mov	r3, r5
 8010d76:	f000 fa29 	bl	80111cc <uxr_serialize_submessage_header>
 8010d7a:	4620      	mov	r0, r4
 8010d7c:	f7fe fc1a 	bl	800f5b4 <ucdr_buffer_remaining>
 8010d80:	42a8      	cmp	r0, r5
 8010d82:	bf34      	ite	cc
 8010d84:	2000      	movcc	r0, #0
 8010d86:	2001      	movcs	r0, #1
 8010d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d8a:	bf00      	nop

08010d8c <uxr_read_submessage_header>:
 8010d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d90:	4604      	mov	r4, r0
 8010d92:	460d      	mov	r5, r1
 8010d94:	2104      	movs	r1, #4
 8010d96:	4616      	mov	r6, r2
 8010d98:	4698      	mov	r8, r3
 8010d9a:	f7fe fbf5 	bl	800f588 <ucdr_align_to>
 8010d9e:	4620      	mov	r0, r4
 8010da0:	f7fe fc08 	bl	800f5b4 <ucdr_buffer_remaining>
 8010da4:	2803      	cmp	r0, #3
 8010da6:	bf8c      	ite	hi
 8010da8:	2701      	movhi	r7, #1
 8010daa:	2700      	movls	r7, #0
 8010dac:	d802      	bhi.n	8010db4 <uxr_read_submessage_header+0x28>
 8010dae:	4638      	mov	r0, r7
 8010db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010db4:	4633      	mov	r3, r6
 8010db6:	4642      	mov	r2, r8
 8010db8:	4620      	mov	r0, r4
 8010dba:	4629      	mov	r1, r5
 8010dbc:	f000 fa1a 	bl	80111f4 <uxr_deserialize_submessage_header>
 8010dc0:	f898 3000 	ldrb.w	r3, [r8]
 8010dc4:	4638      	mov	r0, r7
 8010dc6:	f003 0201 	and.w	r2, r3, #1
 8010dca:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8010dce:	f888 3000 	strb.w	r3, [r8]
 8010dd2:	7522      	strb	r2, [r4, #20]
 8010dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010dd8 <uxr_submessage_padding>:
 8010dd8:	f010 0003 	ands.w	r0, r0, #3
 8010ddc:	bf18      	it	ne
 8010dde:	f1c0 0004 	rsbne	r0, r0, #4
 8010de2:	4770      	bx	lr

08010de4 <uxr_millis>:
 8010de4:	b510      	push	{r4, lr}
 8010de6:	b084      	sub	sp, #16
 8010de8:	2001      	movs	r0, #1
 8010dea:	4669      	mov	r1, sp
 8010dec:	f7f1 fe7c 	bl	8002ae8 <clock_gettime>
 8010df0:	4908      	ldr	r1, [pc, #32]	@ (8010e14 <uxr_millis+0x30>)
 8010df2:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8010df6:	fba0 0301 	umull	r0, r3, r0, r1
 8010dfa:	1900      	adds	r0, r0, r4
 8010dfc:	fb01 3102 	mla	r1, r1, r2, r3
 8010e00:	4a05      	ldr	r2, [pc, #20]	@ (8010e18 <uxr_millis+0x34>)
 8010e02:	f04f 0300 	mov.w	r3, #0
 8010e06:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8010e0a:	f7ef fa81 	bl	8000310 <__aeabi_ldivmod>
 8010e0e:	b004      	add	sp, #16
 8010e10:	bd10      	pop	{r4, pc}
 8010e12:	bf00      	nop
 8010e14:	3b9aca00 	.word	0x3b9aca00
 8010e18:	000f4240 	.word	0x000f4240

08010e1c <uxr_nanos>:
 8010e1c:	b510      	push	{r4, lr}
 8010e1e:	b084      	sub	sp, #16
 8010e20:	2001      	movs	r0, #1
 8010e22:	4669      	mov	r1, sp
 8010e24:	f7f1 fe60 	bl	8002ae8 <clock_gettime>
 8010e28:	4a06      	ldr	r2, [pc, #24]	@ (8010e44 <uxr_nanos+0x28>)
 8010e2a:	9800      	ldr	r0, [sp, #0]
 8010e2c:	9902      	ldr	r1, [sp, #8]
 8010e2e:	fba0 0302 	umull	r0, r3, r0, r2
 8010e32:	9c01      	ldr	r4, [sp, #4]
 8010e34:	1840      	adds	r0, r0, r1
 8010e36:	fb02 3304 	mla	r3, r2, r4, r3
 8010e3a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8010e3e:	b004      	add	sp, #16
 8010e40:	bd10      	pop	{r4, pc}
 8010e42:	bf00      	nop
 8010e44:	3b9aca00 	.word	0x3b9aca00

08010e48 <on_full_output_buffer_fragmented>:
 8010e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e4c:	460c      	mov	r4, r1
 8010e4e:	b08a      	sub	sp, #40	@ 0x28
 8010e50:	4606      	mov	r6, r0
 8010e52:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8010e56:	f104 0008 	add.w	r0, r4, #8
 8010e5a:	f7ff ff45 	bl	8010ce8 <uxr_get_output_reliable_stream>
 8010e5e:	4605      	mov	r5, r0
 8010e60:	f003 ff54 	bl	8014d0c <get_available_free_slots>
 8010e64:	b968      	cbnz	r0, 8010e82 <on_full_output_buffer_fragmented+0x3a>
 8010e66:	4620      	mov	r0, r4
 8010e68:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8010e6c:	4798      	blx	r3
 8010e6e:	b918      	cbnz	r0, 8010e78 <on_full_output_buffer_fragmented+0x30>
 8010e70:	2001      	movs	r0, #1
 8010e72:	b00a      	add	sp, #40	@ 0x28
 8010e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e78:	4628      	mov	r0, r5
 8010e7a:	f003 ff47 	bl	8014d0c <get_available_free_slots>
 8010e7e:	2800      	cmp	r0, #0
 8010e80:	d0f6      	beq.n	8010e70 <on_full_output_buffer_fragmented+0x28>
 8010e82:	8929      	ldrh	r1, [r5, #8]
 8010e84:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8010e88:	89eb      	ldrh	r3, [r5, #14]
 8010e8a:	7b28      	ldrb	r0, [r5, #12]
 8010e8c:	686f      	ldr	r7, [r5, #4]
 8010e8e:	1a12      	subs	r2, r2, r0
 8010e90:	fbb3 f0f1 	udiv	r0, r3, r1
 8010e94:	fbb7 f7f1 	udiv	r7, r7, r1
 8010e98:	fb01 3110 	mls	r1, r1, r0, r3
 8010e9c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8010ea0:	b289      	uxth	r1, r1
 8010ea2:	fb07 f101 	mul.w	r1, r7, r1
 8010ea6:	3f04      	subs	r7, #4
 8010ea8:	443a      	add	r2, r7
 8010eaa:	3104      	adds	r1, #4
 8010eac:	fa1f f882 	uxth.w	r8, r2
 8010eb0:	463a      	mov	r2, r7
 8010eb2:	eba3 0308 	sub.w	r3, r3, r8
 8010eb6:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8010eba:	682b      	ldr	r3, [r5, #0]
 8010ebc:	4419      	add	r1, r3
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8010ec4:	9000      	str	r0, [sp, #0]
 8010ec6:	a802      	add	r0, sp, #8
 8010ec8:	f7fe fb30 	bl	800f52c <ucdr_init_buffer_origin_offset>
 8010ecc:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8010ed0:	f102 0308 	add.w	r3, r2, #8
 8010ed4:	42bb      	cmp	r3, r7
 8010ed6:	d927      	bls.n	8010f28 <on_full_output_buffer_fragmented+0xe0>
 8010ed8:	4642      	mov	r2, r8
 8010eda:	2300      	movs	r3, #0
 8010edc:	210d      	movs	r1, #13
 8010ede:	a802      	add	r0, sp, #8
 8010ee0:	f7ff ff3a 	bl	8010d58 <uxr_buffer_submessage_header>
 8010ee4:	8929      	ldrh	r1, [r5, #8]
 8010ee6:	89eb      	ldrh	r3, [r5, #14]
 8010ee8:	686a      	ldr	r2, [r5, #4]
 8010eea:	fbb3 f0f1 	udiv	r0, r3, r1
 8010eee:	fbb2 f2f1 	udiv	r2, r2, r1
 8010ef2:	fb01 3310 	mls	r3, r1, r0, r3
 8010ef6:	b29b      	uxth	r3, r3
 8010ef8:	fb02 f303 	mul.w	r3, r2, r3
 8010efc:	682a      	ldr	r2, [r5, #0]
 8010efe:	50d7      	str	r7, [r2, r3]
 8010f00:	2101      	movs	r1, #1
 8010f02:	89e8      	ldrh	r0, [r5, #14]
 8010f04:	f004 f81a 	bl	8014f3c <uxr_seq_num_add>
 8010f08:	9904      	ldr	r1, [sp, #16]
 8010f0a:	9a03      	ldr	r2, [sp, #12]
 8010f0c:	81e8      	strh	r0, [r5, #14]
 8010f0e:	4630      	mov	r0, r6
 8010f10:	1a52      	subs	r2, r2, r1
 8010f12:	f7fe fb1d 	bl	800f550 <ucdr_init_buffer>
 8010f16:	4630      	mov	r0, r6
 8010f18:	4622      	mov	r2, r4
 8010f1a:	490f      	ldr	r1, [pc, #60]	@ (8010f58 <on_full_output_buffer_fragmented+0x110>)
 8010f1c:	f7fe faec 	bl	800f4f8 <ucdr_set_on_full_buffer_callback>
 8010f20:	2000      	movs	r0, #0
 8010f22:	b00a      	add	sp, #40	@ 0x28
 8010f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f28:	b292      	uxth	r2, r2
 8010f2a:	2302      	movs	r3, #2
 8010f2c:	210d      	movs	r1, #13
 8010f2e:	a802      	add	r0, sp, #8
 8010f30:	f7ff ff12 	bl	8010d58 <uxr_buffer_submessage_header>
 8010f34:	8928      	ldrh	r0, [r5, #8]
 8010f36:	89eb      	ldrh	r3, [r5, #14]
 8010f38:	6869      	ldr	r1, [r5, #4]
 8010f3a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8010f3e:	fbb3 f7f0 	udiv	r7, r3, r0
 8010f42:	fbb1 f1f0 	udiv	r1, r1, r0
 8010f46:	fb00 3317 	mls	r3, r0, r7, r3
 8010f4a:	3208      	adds	r2, #8
 8010f4c:	b29b      	uxth	r3, r3
 8010f4e:	fb01 f303 	mul.w	r3, r1, r3
 8010f52:	6829      	ldr	r1, [r5, #0]
 8010f54:	50ca      	str	r2, [r1, r3]
 8010f56:	e7d3      	b.n	8010f00 <on_full_output_buffer_fragmented+0xb8>
 8010f58:	08010e49 	.word	0x08010e49

08010f5c <uxr_prepare_output_stream>:
 8010f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f5e:	b087      	sub	sp, #28
 8010f60:	2707      	movs	r7, #7
 8010f62:	2500      	movs	r5, #0
 8010f64:	461c      	mov	r4, r3
 8010f66:	4606      	mov	r6, r0
 8010f68:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010f6c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010f6e:	e9cd 7500 	strd	r7, r5, [sp]
 8010f72:	3204      	adds	r2, #4
 8010f74:	f7ff fc44 	bl	8010800 <uxr_prepare_stream_to_write_submessage>
 8010f78:	f080 0201 	eor.w	r2, r0, #1
 8010f7c:	b2d2      	uxtb	r2, r2
 8010f7e:	75a2      	strb	r2, [r4, #22]
 8010f80:	b112      	cbz	r2, 8010f88 <uxr_prepare_output_stream+0x2c>
 8010f82:	4628      	mov	r0, r5
 8010f84:	b007      	add	sp, #28
 8010f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f88:	aa05      	add	r2, sp, #20
 8010f8a:	9902      	ldr	r1, [sp, #8]
 8010f8c:	4630      	mov	r0, r6
 8010f8e:	f7ff fd73 	bl	8010a78 <uxr_init_base_object_request>
 8010f92:	a905      	add	r1, sp, #20
 8010f94:	4605      	mov	r5, r0
 8010f96:	4620      	mov	r0, r4
 8010f98:	f000 ff9c 	bl	8011ed4 <uxr_serialize_WRITE_DATA_Payload_Data>
 8010f9c:	69a6      	ldr	r6, [r4, #24]
 8010f9e:	69e7      	ldr	r7, [r4, #28]
 8010fa0:	4620      	mov	r0, r4
 8010fa2:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8010fa6:	1a52      	subs	r2, r2, r1
 8010fa8:	f7fe fad2 	bl	800f550 <ucdr_init_buffer>
 8010fac:	4620      	mov	r0, r4
 8010fae:	463a      	mov	r2, r7
 8010fb0:	4631      	mov	r1, r6
 8010fb2:	f7fe faa1 	bl	800f4f8 <ucdr_set_on_full_buffer_callback>
 8010fb6:	4628      	mov	r0, r5
 8010fb8:	b007      	add	sp, #28
 8010fba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010fbc <uxr_prepare_output_stream_fragmented>:
 8010fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fc0:	b091      	sub	sp, #68	@ 0x44
 8010fc2:	4605      	mov	r5, r0
 8010fc4:	3008      	adds	r0, #8
 8010fc6:	461e      	mov	r6, r3
 8010fc8:	9105      	str	r1, [sp, #20]
 8010fca:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8010fce:	9204      	str	r2, [sp, #16]
 8010fd0:	f7ff fe8a 	bl	8010ce8 <uxr_get_output_reliable_stream>
 8010fd4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8010fd8:	2b01      	cmp	r3, #1
 8010fda:	f000 8093 	beq.w	8011104 <uxr_prepare_output_stream_fragmented+0x148>
 8010fde:	4604      	mov	r4, r0
 8010fe0:	2800      	cmp	r0, #0
 8010fe2:	f000 808f 	beq.w	8011104 <uxr_prepare_output_stream_fragmented+0x148>
 8010fe6:	f003 fe91 	bl	8014d0c <get_available_free_slots>
 8010fea:	2800      	cmp	r0, #0
 8010fec:	f000 8085 	beq.w	80110fa <uxr_prepare_output_stream_fragmented+0x13e>
 8010ff0:	8923      	ldrh	r3, [r4, #8]
 8010ff2:	89e7      	ldrh	r7, [r4, #14]
 8010ff4:	6862      	ldr	r2, [r4, #4]
 8010ff6:	fbb7 f9f3 	udiv	r9, r7, r3
 8010ffa:	fbb2 f2f3 	udiv	r2, r2, r3
 8010ffe:	fb03 7919 	mls	r9, r3, r9, r7
 8011002:	6823      	ldr	r3, [r4, #0]
 8011004:	f1a2 0b04 	sub.w	fp, r2, #4
 8011008:	9203      	str	r2, [sp, #12]
 801100a:	fa1f f989 	uxth.w	r9, r9
 801100e:	fb02 f909 	mul.w	r9, r2, r9
 8011012:	f109 0904 	add.w	r9, r9, #4
 8011016:	4499      	add	r9, r3
 8011018:	7b23      	ldrb	r3, [r4, #12]
 801101a:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801101e:	4543      	cmp	r3, r8
 8011020:	d37c      	bcc.n	801111c <uxr_prepare_output_stream_fragmented+0x160>
 8011022:	f1ab 0a04 	sub.w	sl, fp, #4
 8011026:	465a      	mov	r2, fp
 8011028:	4649      	mov	r1, r9
 801102a:	a808      	add	r0, sp, #32
 801102c:	ebaa 0a03 	sub.w	sl, sl, r3
 8011030:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8011032:	f8cd 8000 	str.w	r8, [sp]
 8011036:	3308      	adds	r3, #8
 8011038:	fa1f fa8a 	uxth.w	sl, sl
 801103c:	9302      	str	r3, [sp, #8]
 801103e:	2300      	movs	r3, #0
 8011040:	f7fe fa74 	bl	800f52c <ucdr_init_buffer_origin_offset>
 8011044:	9b02      	ldr	r3, [sp, #8]
 8011046:	4652      	mov	r2, sl
 8011048:	210d      	movs	r1, #13
 801104a:	455b      	cmp	r3, fp
 801104c:	bf34      	ite	cc
 801104e:	2302      	movcc	r3, #2
 8011050:	2300      	movcs	r3, #0
 8011052:	a808      	add	r0, sp, #32
 8011054:	f7ff fe80 	bl	8010d58 <uxr_buffer_submessage_header>
 8011058:	8921      	ldrh	r1, [r4, #8]
 801105a:	6863      	ldr	r3, [r4, #4]
 801105c:	4638      	mov	r0, r7
 801105e:	fbb7 f2f1 	udiv	r2, r7, r1
 8011062:	fbb3 f3f1 	udiv	r3, r3, r1
 8011066:	fb01 7212 	mls	r2, r1, r2, r7
 801106a:	2101      	movs	r1, #1
 801106c:	b292      	uxth	r2, r2
 801106e:	fb02 f303 	mul.w	r3, r2, r3
 8011072:	6822      	ldr	r2, [r4, #0]
 8011074:	f842 b003 	str.w	fp, [r2, r3]
 8011078:	f003 ff60 	bl	8014f3c <uxr_seq_num_add>
 801107c:	9b03      	ldr	r3, [sp, #12]
 801107e:	f108 0104 	add.w	r1, r8, #4
 8011082:	4607      	mov	r7, r0
 8011084:	f1a3 0208 	sub.w	r2, r3, #8
 8011088:	4630      	mov	r0, r6
 801108a:	4449      	add	r1, r9
 801108c:	eba2 0208 	sub.w	r2, r2, r8
 8011090:	f7fe fa5e 	bl	800f550 <ucdr_init_buffer>
 8011094:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8011096:	2107      	movs	r1, #7
 8011098:	81e7      	strh	r7, [r4, #14]
 801109a:	1d1a      	adds	r2, r3, #4
 801109c:	2300      	movs	r3, #0
 801109e:	4630      	mov	r0, r6
 80110a0:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80110a4:	bf28      	it	cs
 80110a6:	461a      	movcs	r2, r3
 80110a8:	b292      	uxth	r2, r2
 80110aa:	f7ff fe55 	bl	8010d58 <uxr_buffer_submessage_header>
 80110ae:	aa07      	add	r2, sp, #28
 80110b0:	9904      	ldr	r1, [sp, #16]
 80110b2:	4628      	mov	r0, r5
 80110b4:	f7ff fce0 	bl	8010a78 <uxr_init_base_object_request>
 80110b8:	4604      	mov	r4, r0
 80110ba:	b320      	cbz	r0, 8011106 <uxr_prepare_output_stream_fragmented+0x14a>
 80110bc:	a907      	add	r1, sp, #28
 80110be:	4630      	mov	r0, r6
 80110c0:	f000 ff08 	bl	8011ed4 <uxr_serialize_WRITE_DATA_Payload_Data>
 80110c4:	4630      	mov	r0, r6
 80110c6:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80110ca:	1a52      	subs	r2, r2, r1
 80110cc:	f7fe fa40 	bl	800f550 <ucdr_init_buffer>
 80110d0:	9b05      	ldr	r3, [sp, #20]
 80110d2:	9a02      	ldr	r2, [sp, #8]
 80110d4:	4630      	mov	r0, r6
 80110d6:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 80110da:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80110dc:	f8c5 20c4 	str.w	r2, [r5, #196]	@ 0xc4
 80110e0:	462a      	mov	r2, r5
 80110e2:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 80110e6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80110e8:	4918      	ldr	r1, [pc, #96]	@ (801114c <uxr_prepare_output_stream_fragmented+0x190>)
 80110ea:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 80110ee:	f7fe fa03 	bl	800f4f8 <ucdr_set_on_full_buffer_callback>
 80110f2:	4620      	mov	r0, r4
 80110f4:	b011      	add	sp, #68	@ 0x44
 80110f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110fa:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80110fc:	4628      	mov	r0, r5
 80110fe:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8011100:	4798      	blx	r3
 8011102:	b920      	cbnz	r0, 801110e <uxr_prepare_output_stream_fragmented+0x152>
 8011104:	2400      	movs	r4, #0
 8011106:	4620      	mov	r0, r4
 8011108:	b011      	add	sp, #68	@ 0x44
 801110a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801110e:	4620      	mov	r0, r4
 8011110:	f003 fdfc 	bl	8014d0c <get_available_free_slots>
 8011114:	2800      	cmp	r0, #0
 8011116:	f47f af6b 	bne.w	8010ff0 <uxr_prepare_output_stream_fragmented+0x34>
 801111a:	e7f3      	b.n	8011104 <uxr_prepare_output_stream_fragmented+0x148>
 801111c:	4638      	mov	r0, r7
 801111e:	2101      	movs	r1, #1
 8011120:	f003 ff0c 	bl	8014f3c <uxr_seq_num_add>
 8011124:	8922      	ldrh	r2, [r4, #8]
 8011126:	6863      	ldr	r3, [r4, #4]
 8011128:	4607      	mov	r7, r0
 801112a:	fbb3 f9f2 	udiv	r9, r3, r2
 801112e:	fbb0 f3f2 	udiv	r3, r0, r2
 8011132:	fb02 0313 	mls	r3, r2, r3, r0
 8011136:	b29b      	uxth	r3, r3
 8011138:	fb03 f909 	mul.w	r9, r3, r9
 801113c:	6823      	ldr	r3, [r4, #0]
 801113e:	f109 0904 	add.w	r9, r9, #4
 8011142:	4499      	add	r9, r3
 8011144:	7b23      	ldrb	r3, [r4, #12]
 8011146:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801114a:	e76a      	b.n	8011022 <uxr_prepare_output_stream_fragmented+0x66>
 801114c:	08010e49 	.word	0x08010e49

08011150 <uxr_serialize_message_header>:
 8011150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011152:	4616      	mov	r6, r2
 8011154:	b083      	sub	sp, #12
 8011156:	4604      	mov	r4, r0
 8011158:	460d      	mov	r5, r1
 801115a:	9301      	str	r3, [sp, #4]
 801115c:	9f08      	ldr	r7, [sp, #32]
 801115e:	f7fc ff15 	bl	800df8c <ucdr_serialize_uint8_t>
 8011162:	4631      	mov	r1, r6
 8011164:	4620      	mov	r0, r4
 8011166:	f7fc ff11 	bl	800df8c <ucdr_serialize_uint8_t>
 801116a:	9a01      	ldr	r2, [sp, #4]
 801116c:	2101      	movs	r1, #1
 801116e:	4620      	mov	r0, r4
 8011170:	f7fc ffb8 	bl	800e0e4 <ucdr_serialize_endian_uint16_t>
 8011174:	062b      	lsls	r3, r5, #24
 8011176:	d501      	bpl.n	801117c <uxr_serialize_message_header+0x2c>
 8011178:	b003      	add	sp, #12
 801117a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801117c:	2204      	movs	r2, #4
 801117e:	4639      	mov	r1, r7
 8011180:	4620      	mov	r0, r4
 8011182:	b003      	add	sp, #12
 8011184:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011188:	f7fc bd5e 	b.w	800dc48 <ucdr_serialize_array_uint8_t>

0801118c <uxr_deserialize_message_header>:
 801118c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801118e:	4616      	mov	r6, r2
 8011190:	b083      	sub	sp, #12
 8011192:	4604      	mov	r4, r0
 8011194:	460d      	mov	r5, r1
 8011196:	9301      	str	r3, [sp, #4]
 8011198:	9f08      	ldr	r7, [sp, #32]
 801119a:	f7fc ff0d 	bl	800dfb8 <ucdr_deserialize_uint8_t>
 801119e:	4631      	mov	r1, r6
 80111a0:	4620      	mov	r0, r4
 80111a2:	f7fc ff09 	bl	800dfb8 <ucdr_deserialize_uint8_t>
 80111a6:	9a01      	ldr	r2, [sp, #4]
 80111a8:	2101      	movs	r1, #1
 80111aa:	4620      	mov	r0, r4
 80111ac:	f7fd f88e 	bl	800e2cc <ucdr_deserialize_endian_uint16_t>
 80111b0:	f995 3000 	ldrsb.w	r3, [r5]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	da01      	bge.n	80111bc <uxr_deserialize_message_header+0x30>
 80111b8:	b003      	add	sp, #12
 80111ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111bc:	2204      	movs	r2, #4
 80111be:	4639      	mov	r1, r7
 80111c0:	4620      	mov	r0, r4
 80111c2:	b003      	add	sp, #12
 80111c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80111c8:	f7fc bda2 	b.w	800dd10 <ucdr_deserialize_array_uint8_t>

080111cc <uxr_serialize_submessage_header>:
 80111cc:	b530      	push	{r4, r5, lr}
 80111ce:	4615      	mov	r5, r2
 80111d0:	b083      	sub	sp, #12
 80111d2:	4604      	mov	r4, r0
 80111d4:	9301      	str	r3, [sp, #4]
 80111d6:	f7fc fed9 	bl	800df8c <ucdr_serialize_uint8_t>
 80111da:	4629      	mov	r1, r5
 80111dc:	4620      	mov	r0, r4
 80111de:	f7fc fed5 	bl	800df8c <ucdr_serialize_uint8_t>
 80111e2:	9a01      	ldr	r2, [sp, #4]
 80111e4:	2101      	movs	r1, #1
 80111e6:	4620      	mov	r0, r4
 80111e8:	b003      	add	sp, #12
 80111ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80111ee:	f7fc bf79 	b.w	800e0e4 <ucdr_serialize_endian_uint16_t>
 80111f2:	bf00      	nop

080111f4 <uxr_deserialize_submessage_header>:
 80111f4:	b530      	push	{r4, r5, lr}
 80111f6:	4615      	mov	r5, r2
 80111f8:	b083      	sub	sp, #12
 80111fa:	4604      	mov	r4, r0
 80111fc:	9301      	str	r3, [sp, #4]
 80111fe:	f7fc fedb 	bl	800dfb8 <ucdr_deserialize_uint8_t>
 8011202:	4629      	mov	r1, r5
 8011204:	4620      	mov	r0, r4
 8011206:	f7fc fed7 	bl	800dfb8 <ucdr_deserialize_uint8_t>
 801120a:	9a01      	ldr	r2, [sp, #4]
 801120c:	2101      	movs	r1, #1
 801120e:	4620      	mov	r0, r4
 8011210:	b003      	add	sp, #12
 8011212:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011216:	f7fd b859 	b.w	800e2cc <ucdr_deserialize_endian_uint16_t>
 801121a:	bf00      	nop

0801121c <uxr_serialize_CLIENT_Representation>:
 801121c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011220:	2204      	movs	r2, #4
 8011222:	460e      	mov	r6, r1
 8011224:	4605      	mov	r5, r0
 8011226:	f7fc fd0f 	bl	800dc48 <ucdr_serialize_array_uint8_t>
 801122a:	4607      	mov	r7, r0
 801122c:	2202      	movs	r2, #2
 801122e:	1d31      	adds	r1, r6, #4
 8011230:	4628      	mov	r0, r5
 8011232:	f7fc fd09 	bl	800dc48 <ucdr_serialize_array_uint8_t>
 8011236:	4038      	ands	r0, r7
 8011238:	2202      	movs	r2, #2
 801123a:	1db1      	adds	r1, r6, #6
 801123c:	b2c7      	uxtb	r7, r0
 801123e:	4628      	mov	r0, r5
 8011240:	f7fc fd02 	bl	800dc48 <ucdr_serialize_array_uint8_t>
 8011244:	2204      	movs	r2, #4
 8011246:	4007      	ands	r7, r0
 8011248:	f106 0108 	add.w	r1, r6, #8
 801124c:	4628      	mov	r0, r5
 801124e:	f7fc fcfb 	bl	800dc48 <ucdr_serialize_array_uint8_t>
 8011252:	4007      	ands	r7, r0
 8011254:	7b31      	ldrb	r1, [r6, #12]
 8011256:	4628      	mov	r0, r5
 8011258:	f7fc fe98 	bl	800df8c <ucdr_serialize_uint8_t>
 801125c:	7b71      	ldrb	r1, [r6, #13]
 801125e:	4007      	ands	r7, r0
 8011260:	4628      	mov	r0, r5
 8011262:	f7fc fe65 	bl	800df30 <ucdr_serialize_bool>
 8011266:	7b73      	ldrb	r3, [r6, #13]
 8011268:	ea07 0800 	and.w	r8, r7, r0
 801126c:	b93b      	cbnz	r3, 801127e <uxr_serialize_CLIENT_Representation+0x62>
 801126e:	8bb1      	ldrh	r1, [r6, #28]
 8011270:	4628      	mov	r0, r5
 8011272:	f7fc feb7 	bl	800dfe4 <ucdr_serialize_uint16_t>
 8011276:	ea08 0000 	and.w	r0, r8, r0
 801127a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801127e:	6931      	ldr	r1, [r6, #16]
 8011280:	4628      	mov	r0, r5
 8011282:	f7fd f899 	bl	800e3b8 <ucdr_serialize_uint32_t>
 8011286:	6933      	ldr	r3, [r6, #16]
 8011288:	b1e3      	cbz	r3, 80112c4 <uxr_serialize_CLIENT_Representation+0xa8>
 801128a:	b1c0      	cbz	r0, 80112be <uxr_serialize_CLIENT_Representation+0xa2>
 801128c:	4637      	mov	r7, r6
 801128e:	f04f 0900 	mov.w	r9, #0
 8011292:	e000      	b.n	8011296 <uxr_serialize_CLIENT_Representation+0x7a>
 8011294:	b19c      	cbz	r4, 80112be <uxr_serialize_CLIENT_Representation+0xa2>
 8011296:	6979      	ldr	r1, [r7, #20]
 8011298:	4628      	mov	r0, r5
 801129a:	f002 ff37 	bl	801410c <ucdr_serialize_string>
 801129e:	69b9      	ldr	r1, [r7, #24]
 80112a0:	4604      	mov	r4, r0
 80112a2:	4628      	mov	r0, r5
 80112a4:	f002 ff32 	bl	801410c <ucdr_serialize_string>
 80112a8:	f109 0901 	add.w	r9, r9, #1
 80112ac:	6933      	ldr	r3, [r6, #16]
 80112ae:	4004      	ands	r4, r0
 80112b0:	3708      	adds	r7, #8
 80112b2:	4599      	cmp	r9, r3
 80112b4:	b2e4      	uxtb	r4, r4
 80112b6:	d3ed      	bcc.n	8011294 <uxr_serialize_CLIENT_Representation+0x78>
 80112b8:	ea08 0804 	and.w	r8, r8, r4
 80112bc:	e7d7      	b.n	801126e <uxr_serialize_CLIENT_Representation+0x52>
 80112be:	f04f 0800 	mov.w	r8, #0
 80112c2:	e7d4      	b.n	801126e <uxr_serialize_CLIENT_Representation+0x52>
 80112c4:	ea08 0800 	and.w	r8, r8, r0
 80112c8:	e7d1      	b.n	801126e <uxr_serialize_CLIENT_Representation+0x52>
 80112ca:	bf00      	nop

080112cc <uxr_deserialize_CLIENT_Representation>:
 80112cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112d0:	2204      	movs	r2, #4
 80112d2:	460c      	mov	r4, r1
 80112d4:	4605      	mov	r5, r0
 80112d6:	f7fc fd1b 	bl	800dd10 <ucdr_deserialize_array_uint8_t>
 80112da:	4607      	mov	r7, r0
 80112dc:	2202      	movs	r2, #2
 80112de:	1d21      	adds	r1, r4, #4
 80112e0:	4628      	mov	r0, r5
 80112e2:	f7fc fd15 	bl	800dd10 <ucdr_deserialize_array_uint8_t>
 80112e6:	4038      	ands	r0, r7
 80112e8:	2202      	movs	r2, #2
 80112ea:	1da1      	adds	r1, r4, #6
 80112ec:	b2c6      	uxtb	r6, r0
 80112ee:	4628      	mov	r0, r5
 80112f0:	f7fc fd0e 	bl	800dd10 <ucdr_deserialize_array_uint8_t>
 80112f4:	2204      	movs	r2, #4
 80112f6:	4006      	ands	r6, r0
 80112f8:	f104 0108 	add.w	r1, r4, #8
 80112fc:	4628      	mov	r0, r5
 80112fe:	f7fc fd07 	bl	800dd10 <ucdr_deserialize_array_uint8_t>
 8011302:	4006      	ands	r6, r0
 8011304:	f104 010c 	add.w	r1, r4, #12
 8011308:	4628      	mov	r0, r5
 801130a:	f7fc fe55 	bl	800dfb8 <ucdr_deserialize_uint8_t>
 801130e:	f104 010d 	add.w	r1, r4, #13
 8011312:	ea06 0700 	and.w	r7, r6, r0
 8011316:	4628      	mov	r0, r5
 8011318:	f7fc fe20 	bl	800df5c <ucdr_deserialize_bool>
 801131c:	7b63      	ldrb	r3, [r4, #13]
 801131e:	4007      	ands	r7, r0
 8011320:	b93b      	cbnz	r3, 8011332 <uxr_deserialize_CLIENT_Representation+0x66>
 8011322:	f104 011c 	add.w	r1, r4, #28
 8011326:	4628      	mov	r0, r5
 8011328:	f7fc ff5c 	bl	800e1e4 <ucdr_deserialize_uint16_t>
 801132c:	4038      	ands	r0, r7
 801132e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011332:	f104 0110 	add.w	r1, r4, #16
 8011336:	4628      	mov	r0, r5
 8011338:	f7fd f96e 	bl	800e618 <ucdr_deserialize_uint32_t>
 801133c:	6923      	ldr	r3, [r4, #16]
 801133e:	2b01      	cmp	r3, #1
 8011340:	d903      	bls.n	801134a <uxr_deserialize_CLIENT_Representation+0x7e>
 8011342:	2301      	movs	r3, #1
 8011344:	2700      	movs	r7, #0
 8011346:	75ab      	strb	r3, [r5, #22]
 8011348:	e7eb      	b.n	8011322 <uxr_deserialize_CLIENT_Representation+0x56>
 801134a:	b30b      	cbz	r3, 8011390 <uxr_deserialize_CLIENT_Representation+0xc4>
 801134c:	b1f0      	cbz	r0, 801138c <uxr_deserialize_CLIENT_Representation+0xc0>
 801134e:	46a0      	mov	r8, r4
 8011350:	f04f 0900 	mov.w	r9, #0
 8011354:	e000      	b.n	8011358 <uxr_deserialize_CLIENT_Representation+0x8c>
 8011356:	b1ce      	cbz	r6, 801138c <uxr_deserialize_CLIENT_Representation+0xc0>
 8011358:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801135c:	f108 0808 	add.w	r8, r8, #8
 8011360:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011364:	4628      	mov	r0, r5
 8011366:	f002 fee1 	bl	801412c <ucdr_deserialize_string>
 801136a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801136e:	4606      	mov	r6, r0
 8011370:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011374:	4628      	mov	r0, r5
 8011376:	f109 0901 	add.w	r9, r9, #1
 801137a:	f002 fed7 	bl	801412c <ucdr_deserialize_string>
 801137e:	6923      	ldr	r3, [r4, #16]
 8011380:	4006      	ands	r6, r0
 8011382:	4599      	cmp	r9, r3
 8011384:	b2f6      	uxtb	r6, r6
 8011386:	d3e6      	bcc.n	8011356 <uxr_deserialize_CLIENT_Representation+0x8a>
 8011388:	4037      	ands	r7, r6
 801138a:	e7ca      	b.n	8011322 <uxr_deserialize_CLIENT_Representation+0x56>
 801138c:	2700      	movs	r7, #0
 801138e:	e7c8      	b.n	8011322 <uxr_deserialize_CLIENT_Representation+0x56>
 8011390:	4007      	ands	r7, r0
 8011392:	e7c6      	b.n	8011322 <uxr_deserialize_CLIENT_Representation+0x56>

08011394 <uxr_serialize_AGENT_Representation>:
 8011394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011398:	2204      	movs	r2, #4
 801139a:	460f      	mov	r7, r1
 801139c:	4605      	mov	r5, r0
 801139e:	f7fc fc53 	bl	800dc48 <ucdr_serialize_array_uint8_t>
 80113a2:	4604      	mov	r4, r0
 80113a4:	2202      	movs	r2, #2
 80113a6:	1d39      	adds	r1, r7, #4
 80113a8:	4628      	mov	r0, r5
 80113aa:	f7fc fc4d 	bl	800dc48 <ucdr_serialize_array_uint8_t>
 80113ae:	4020      	ands	r0, r4
 80113b0:	2202      	movs	r2, #2
 80113b2:	1db9      	adds	r1, r7, #6
 80113b4:	b2c4      	uxtb	r4, r0
 80113b6:	4628      	mov	r0, r5
 80113b8:	f7fc fc46 	bl	800dc48 <ucdr_serialize_array_uint8_t>
 80113bc:	7a39      	ldrb	r1, [r7, #8]
 80113be:	4004      	ands	r4, r0
 80113c0:	4628      	mov	r0, r5
 80113c2:	f7fc fdb5 	bl	800df30 <ucdr_serialize_bool>
 80113c6:	7a3b      	ldrb	r3, [r7, #8]
 80113c8:	ea00 0804 	and.w	r8, r0, r4
 80113cc:	b913      	cbnz	r3, 80113d4 <uxr_serialize_AGENT_Representation+0x40>
 80113ce:	4640      	mov	r0, r8
 80113d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113d4:	68f9      	ldr	r1, [r7, #12]
 80113d6:	4628      	mov	r0, r5
 80113d8:	f7fc ffee 	bl	800e3b8 <ucdr_serialize_uint32_t>
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	b303      	cbz	r3, 8011422 <uxr_serialize_AGENT_Representation+0x8e>
 80113e0:	b1d0      	cbz	r0, 8011418 <uxr_serialize_AGENT_Representation+0x84>
 80113e2:	463e      	mov	r6, r7
 80113e4:	f04f 0900 	mov.w	r9, #0
 80113e8:	e000      	b.n	80113ec <uxr_serialize_AGENT_Representation+0x58>
 80113ea:	b1ac      	cbz	r4, 8011418 <uxr_serialize_AGENT_Representation+0x84>
 80113ec:	6931      	ldr	r1, [r6, #16]
 80113ee:	4628      	mov	r0, r5
 80113f0:	f002 fe8c 	bl	801410c <ucdr_serialize_string>
 80113f4:	6971      	ldr	r1, [r6, #20]
 80113f6:	4604      	mov	r4, r0
 80113f8:	4628      	mov	r0, r5
 80113fa:	f002 fe87 	bl	801410c <ucdr_serialize_string>
 80113fe:	f109 0901 	add.w	r9, r9, #1
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	4004      	ands	r4, r0
 8011406:	3608      	adds	r6, #8
 8011408:	4599      	cmp	r9, r3
 801140a:	b2e4      	uxtb	r4, r4
 801140c:	d3ed      	bcc.n	80113ea <uxr_serialize_AGENT_Representation+0x56>
 801140e:	ea08 0804 	and.w	r8, r8, r4
 8011412:	4640      	mov	r0, r8
 8011414:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011418:	f04f 0800 	mov.w	r8, #0
 801141c:	4640      	mov	r0, r8
 801141e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011422:	ea08 0800 	and.w	r8, r8, r0
 8011426:	e7d2      	b.n	80113ce <uxr_serialize_AGENT_Representation+0x3a>

08011428 <uxr_serialize_DATAWRITER_Representation>:
 8011428:	b570      	push	{r4, r5, r6, lr}
 801142a:	460d      	mov	r5, r1
 801142c:	7809      	ldrb	r1, [r1, #0]
 801142e:	4606      	mov	r6, r0
 8011430:	f7fc fdac 	bl	800df8c <ucdr_serialize_uint8_t>
 8011434:	4604      	mov	r4, r0
 8011436:	b130      	cbz	r0, 8011446 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8011438:	782b      	ldrb	r3, [r5, #0]
 801143a:	2b02      	cmp	r3, #2
 801143c:	d00c      	beq.n	8011458 <uxr_serialize_DATAWRITER_Representation+0x30>
 801143e:	2b03      	cmp	r3, #3
 8011440:	d010      	beq.n	8011464 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8011442:	2b01      	cmp	r3, #1
 8011444:	d008      	beq.n	8011458 <uxr_serialize_DATAWRITER_Representation+0x30>
 8011446:	2202      	movs	r2, #2
 8011448:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801144c:	4630      	mov	r0, r6
 801144e:	f7fc fbfb 	bl	800dc48 <ucdr_serialize_array_uint8_t>
 8011452:	4020      	ands	r0, r4
 8011454:	b2c0      	uxtb	r0, r0
 8011456:	bd70      	pop	{r4, r5, r6, pc}
 8011458:	6869      	ldr	r1, [r5, #4]
 801145a:	4630      	mov	r0, r6
 801145c:	f002 fe56 	bl	801410c <ucdr_serialize_string>
 8011460:	4604      	mov	r4, r0
 8011462:	e7f0      	b.n	8011446 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8011464:	4629      	mov	r1, r5
 8011466:	4630      	mov	r0, r6
 8011468:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801146c:	3104      	adds	r1, #4
 801146e:	f7fe f90f 	bl	800f690 <ucdr_serialize_sequence_uint8_t>
 8011472:	4604      	mov	r4, r0
 8011474:	e7e7      	b.n	8011446 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8011476:	bf00      	nop

08011478 <uxr_serialize_ObjectVariant.part.0>:
 8011478:	b570      	push	{r4, r5, r6, lr}
 801147a:	780b      	ldrb	r3, [r1, #0]
 801147c:	460c      	mov	r4, r1
 801147e:	4605      	mov	r5, r0
 8011480:	3b01      	subs	r3, #1
 8011482:	2b0d      	cmp	r3, #13
 8011484:	d854      	bhi.n	8011530 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8011486:	e8df f003 	tbb	[pc, r3]
 801148a:	0730      	.short	0x0730
 801148c:	07071b1b 	.word	0x07071b1b
 8011490:	0c530707 	.word	0x0c530707
 8011494:	494e0c0c 	.word	0x494e0c0c
 8011498:	3104      	adds	r1, #4
 801149a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801149e:	f7ff bfc3 	b.w	8011428 <uxr_serialize_DATAWRITER_Representation>
 80114a2:	7909      	ldrb	r1, [r1, #4]
 80114a4:	f7fc fd72 	bl	800df8c <ucdr_serialize_uint8_t>
 80114a8:	b1e8      	cbz	r0, 80114e6 <uxr_serialize_ObjectVariant.part.0+0x6e>
 80114aa:	7923      	ldrb	r3, [r4, #4]
 80114ac:	2b01      	cmp	r3, #1
 80114ae:	d001      	beq.n	80114b4 <uxr_serialize_ObjectVariant.part.0+0x3c>
 80114b0:	2b02      	cmp	r3, #2
 80114b2:	d13d      	bne.n	8011530 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80114b4:	68a1      	ldr	r1, [r4, #8]
 80114b6:	4628      	mov	r0, r5
 80114b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80114bc:	f002 be26 	b.w	801410c <ucdr_serialize_string>
 80114c0:	7909      	ldrb	r1, [r1, #4]
 80114c2:	f7fc fd63 	bl	800df8c <ucdr_serialize_uint8_t>
 80114c6:	4606      	mov	r6, r0
 80114c8:	b120      	cbz	r0, 80114d4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80114ca:	7923      	ldrb	r3, [r4, #4]
 80114cc:	2b02      	cmp	r3, #2
 80114ce:	d039      	beq.n	8011544 <uxr_serialize_ObjectVariant.part.0+0xcc>
 80114d0:	2b03      	cmp	r3, #3
 80114d2:	d02f      	beq.n	8011534 <uxr_serialize_ObjectVariant.part.0+0xbc>
 80114d4:	2202      	movs	r2, #2
 80114d6:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 80114da:	4628      	mov	r0, r5
 80114dc:	f7fc fbb4 	bl	800dc48 <ucdr_serialize_array_uint8_t>
 80114e0:	4030      	ands	r0, r6
 80114e2:	b2c0      	uxtb	r0, r0
 80114e4:	bd70      	pop	{r4, r5, r6, pc}
 80114e6:	2000      	movs	r0, #0
 80114e8:	bd70      	pop	{r4, r5, r6, pc}
 80114ea:	7909      	ldrb	r1, [r1, #4]
 80114ec:	f7fc fd4e 	bl	800df8c <ucdr_serialize_uint8_t>
 80114f0:	4606      	mov	r6, r0
 80114f2:	b158      	cbz	r0, 801150c <uxr_serialize_ObjectVariant.part.0+0x94>
 80114f4:	7923      	ldrb	r3, [r4, #4]
 80114f6:	2b02      	cmp	r3, #2
 80114f8:	d003      	beq.n	8011502 <uxr_serialize_ObjectVariant.part.0+0x8a>
 80114fa:	2b03      	cmp	r3, #3
 80114fc:	d028      	beq.n	8011550 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80114fe:	2b01      	cmp	r3, #1
 8011500:	d104      	bne.n	801150c <uxr_serialize_ObjectVariant.part.0+0x94>
 8011502:	68a1      	ldr	r1, [r4, #8]
 8011504:	4628      	mov	r0, r5
 8011506:	f002 fe01 	bl	801410c <ucdr_serialize_string>
 801150a:	4606      	mov	r6, r0
 801150c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8011510:	4628      	mov	r0, r5
 8011512:	f7fd fa77 	bl	800ea04 <ucdr_serialize_int16_t>
 8011516:	4030      	ands	r0, r6
 8011518:	b2c0      	uxtb	r0, r0
 801151a:	bd70      	pop	{r4, r5, r6, pc}
 801151c:	3104      	adds	r1, #4
 801151e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011522:	f7ff be7b 	b.w	801121c <uxr_serialize_CLIENT_Representation>
 8011526:	3104      	adds	r1, #4
 8011528:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801152c:	f7ff bf32 	b.w	8011394 <uxr_serialize_AGENT_Representation>
 8011530:	2001      	movs	r0, #1
 8011532:	bd70      	pop	{r4, r5, r6, pc}
 8011534:	68a2      	ldr	r2, [r4, #8]
 8011536:	f104 010c 	add.w	r1, r4, #12
 801153a:	4628      	mov	r0, r5
 801153c:	f7fe f8a8 	bl	800f690 <ucdr_serialize_sequence_uint8_t>
 8011540:	4606      	mov	r6, r0
 8011542:	e7c7      	b.n	80114d4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8011544:	68a1      	ldr	r1, [r4, #8]
 8011546:	4628      	mov	r0, r5
 8011548:	f002 fde0 	bl	801410c <ucdr_serialize_string>
 801154c:	4606      	mov	r6, r0
 801154e:	e7c1      	b.n	80114d4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8011550:	68a2      	ldr	r2, [r4, #8]
 8011552:	f104 010c 	add.w	r1, r4, #12
 8011556:	4628      	mov	r0, r5
 8011558:	f7fe f89a 	bl	800f690 <ucdr_serialize_sequence_uint8_t>
 801155c:	4606      	mov	r6, r0
 801155e:	e7d5      	b.n	801150c <uxr_serialize_ObjectVariant.part.0+0x94>

08011560 <uxr_deserialize_DATAWRITER_Representation>:
 8011560:	b570      	push	{r4, r5, r6, lr}
 8011562:	4606      	mov	r6, r0
 8011564:	460d      	mov	r5, r1
 8011566:	f7fc fd27 	bl	800dfb8 <ucdr_deserialize_uint8_t>
 801156a:	4604      	mov	r4, r0
 801156c:	b130      	cbz	r0, 801157c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801156e:	782b      	ldrb	r3, [r5, #0]
 8011570:	2b02      	cmp	r3, #2
 8011572:	d00c      	beq.n	801158e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8011574:	2b03      	cmp	r3, #3
 8011576:	d012      	beq.n	801159e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8011578:	2b01      	cmp	r3, #1
 801157a:	d008      	beq.n	801158e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801157c:	2202      	movs	r2, #2
 801157e:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8011582:	4630      	mov	r0, r6
 8011584:	f7fc fbc4 	bl	800dd10 <ucdr_deserialize_array_uint8_t>
 8011588:	4020      	ands	r0, r4
 801158a:	b2c0      	uxtb	r0, r0
 801158c:	bd70      	pop	{r4, r5, r6, pc}
 801158e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011592:	6869      	ldr	r1, [r5, #4]
 8011594:	4630      	mov	r0, r6
 8011596:	f002 fdc9 	bl	801412c <ucdr_deserialize_string>
 801159a:	4604      	mov	r4, r0
 801159c:	e7ee      	b.n	801157c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801159e:	1d2b      	adds	r3, r5, #4
 80115a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80115a4:	f105 0108 	add.w	r1, r5, #8
 80115a8:	4630      	mov	r0, r6
 80115aa:	f7fe f883 	bl	800f6b4 <ucdr_deserialize_sequence_uint8_t>
 80115ae:	4604      	mov	r4, r0
 80115b0:	e7e4      	b.n	801157c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80115b2:	bf00      	nop

080115b4 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 80115b4:	b570      	push	{r4, r5, r6, lr}
 80115b6:	460d      	mov	r5, r1
 80115b8:	7809      	ldrb	r1, [r1, #0]
 80115ba:	4606      	mov	r6, r0
 80115bc:	f7fc fcb8 	bl	800df30 <ucdr_serialize_bool>
 80115c0:	782b      	ldrb	r3, [r5, #0]
 80115c2:	4604      	mov	r4, r0
 80115c4:	b94b      	cbnz	r3, 80115da <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 80115c6:	7a29      	ldrb	r1, [r5, #8]
 80115c8:	4630      	mov	r0, r6
 80115ca:	f7fc fcb1 	bl	800df30 <ucdr_serialize_bool>
 80115ce:	7a2b      	ldrb	r3, [r5, #8]
 80115d0:	4004      	ands	r4, r0
 80115d2:	b2e4      	uxtb	r4, r4
 80115d4:	b943      	cbnz	r3, 80115e8 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 80115d6:	4620      	mov	r0, r4
 80115d8:	bd70      	pop	{r4, r5, r6, pc}
 80115da:	6869      	ldr	r1, [r5, #4]
 80115dc:	4630      	mov	r0, r6
 80115de:	f002 fd95 	bl	801410c <ucdr_serialize_string>
 80115e2:	4004      	ands	r4, r0
 80115e4:	b2e4      	uxtb	r4, r4
 80115e6:	e7ee      	b.n	80115c6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80115e8:	68e9      	ldr	r1, [r5, #12]
 80115ea:	4630      	mov	r0, r6
 80115ec:	f002 fd8e 	bl	801410c <ucdr_serialize_string>
 80115f0:	4004      	ands	r4, r0
 80115f2:	4620      	mov	r0, r4
 80115f4:	bd70      	pop	{r4, r5, r6, pc}
 80115f6:	bf00      	nop

080115f8 <uxr_serialize_OBJK_Topic_Binary>:
 80115f8:	b570      	push	{r4, r5, r6, lr}
 80115fa:	460d      	mov	r5, r1
 80115fc:	4606      	mov	r6, r0
 80115fe:	6809      	ldr	r1, [r1, #0]
 8011600:	f002 fd84 	bl	801410c <ucdr_serialize_string>
 8011604:	4604      	mov	r4, r0
 8011606:	7929      	ldrb	r1, [r5, #4]
 8011608:	4630      	mov	r0, r6
 801160a:	f7fc fc91 	bl	800df30 <ucdr_serialize_bool>
 801160e:	792b      	ldrb	r3, [r5, #4]
 8011610:	4004      	ands	r4, r0
 8011612:	b2e4      	uxtb	r4, r4
 8011614:	b943      	cbnz	r3, 8011628 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8011616:	7b29      	ldrb	r1, [r5, #12]
 8011618:	4630      	mov	r0, r6
 801161a:	f7fc fc89 	bl	800df30 <ucdr_serialize_bool>
 801161e:	7b2b      	ldrb	r3, [r5, #12]
 8011620:	4004      	ands	r4, r0
 8011622:	b93b      	cbnz	r3, 8011634 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8011624:	4620      	mov	r0, r4
 8011626:	bd70      	pop	{r4, r5, r6, pc}
 8011628:	68a9      	ldr	r1, [r5, #8]
 801162a:	4630      	mov	r0, r6
 801162c:	f002 fd6e 	bl	801410c <ucdr_serialize_string>
 8011630:	4004      	ands	r4, r0
 8011632:	e7f0      	b.n	8011616 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8011634:	6929      	ldr	r1, [r5, #16]
 8011636:	4630      	mov	r0, r6
 8011638:	f002 fd68 	bl	801410c <ucdr_serialize_string>
 801163c:	4004      	ands	r4, r0
 801163e:	b2e4      	uxtb	r4, r4
 8011640:	4620      	mov	r0, r4
 8011642:	bd70      	pop	{r4, r5, r6, pc}

08011644 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8011644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011648:	460c      	mov	r4, r1
 801164a:	7809      	ldrb	r1, [r1, #0]
 801164c:	4606      	mov	r6, r0
 801164e:	f7fc fc6f 	bl	800df30 <ucdr_serialize_bool>
 8011652:	7823      	ldrb	r3, [r4, #0]
 8011654:	4605      	mov	r5, r0
 8011656:	b96b      	cbnz	r3, 8011674 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8011658:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801165c:	4630      	mov	r0, r6
 801165e:	f7fc fc67 	bl	800df30 <ucdr_serialize_bool>
 8011662:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8011666:	4005      	ands	r5, r0
 8011668:	b2ed      	uxtb	r5, r5
 801166a:	2b00      	cmp	r3, #0
 801166c:	d169      	bne.n	8011742 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801166e:	4628      	mov	r0, r5
 8011670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011674:	6861      	ldr	r1, [r4, #4]
 8011676:	4630      	mov	r0, r6
 8011678:	f7fc fe9e 	bl	800e3b8 <ucdr_serialize_uint32_t>
 801167c:	6863      	ldr	r3, [r4, #4]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d06b      	beq.n	801175a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8011682:	2800      	cmp	r0, #0
 8011684:	d067      	beq.n	8011756 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011686:	68a1      	ldr	r1, [r4, #8]
 8011688:	4630      	mov	r0, r6
 801168a:	f002 fd3f 	bl	801410c <ucdr_serialize_string>
 801168e:	6863      	ldr	r3, [r4, #4]
 8011690:	2b01      	cmp	r3, #1
 8011692:	d953      	bls.n	801173c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011694:	2800      	cmp	r0, #0
 8011696:	d05e      	beq.n	8011756 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011698:	68e1      	ldr	r1, [r4, #12]
 801169a:	4630      	mov	r0, r6
 801169c:	f002 fd36 	bl	801410c <ucdr_serialize_string>
 80116a0:	6863      	ldr	r3, [r4, #4]
 80116a2:	2b02      	cmp	r3, #2
 80116a4:	d94a      	bls.n	801173c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80116a6:	2800      	cmp	r0, #0
 80116a8:	d055      	beq.n	8011756 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80116aa:	6921      	ldr	r1, [r4, #16]
 80116ac:	4630      	mov	r0, r6
 80116ae:	f002 fd2d 	bl	801410c <ucdr_serialize_string>
 80116b2:	6863      	ldr	r3, [r4, #4]
 80116b4:	2b03      	cmp	r3, #3
 80116b6:	d941      	bls.n	801173c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80116b8:	2800      	cmp	r0, #0
 80116ba:	d04c      	beq.n	8011756 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80116bc:	6961      	ldr	r1, [r4, #20]
 80116be:	4630      	mov	r0, r6
 80116c0:	f002 fd24 	bl	801410c <ucdr_serialize_string>
 80116c4:	6863      	ldr	r3, [r4, #4]
 80116c6:	2b04      	cmp	r3, #4
 80116c8:	d938      	bls.n	801173c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80116ca:	2800      	cmp	r0, #0
 80116cc:	d043      	beq.n	8011756 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80116ce:	69a1      	ldr	r1, [r4, #24]
 80116d0:	4630      	mov	r0, r6
 80116d2:	f002 fd1b 	bl	801410c <ucdr_serialize_string>
 80116d6:	6863      	ldr	r3, [r4, #4]
 80116d8:	2b05      	cmp	r3, #5
 80116da:	d92f      	bls.n	801173c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80116dc:	2800      	cmp	r0, #0
 80116de:	d03a      	beq.n	8011756 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80116e0:	69e1      	ldr	r1, [r4, #28]
 80116e2:	4630      	mov	r0, r6
 80116e4:	f002 fd12 	bl	801410c <ucdr_serialize_string>
 80116e8:	6863      	ldr	r3, [r4, #4]
 80116ea:	2b06      	cmp	r3, #6
 80116ec:	d926      	bls.n	801173c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80116ee:	b390      	cbz	r0, 8011756 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80116f0:	6a21      	ldr	r1, [r4, #32]
 80116f2:	4630      	mov	r0, r6
 80116f4:	f002 fd0a 	bl	801410c <ucdr_serialize_string>
 80116f8:	6863      	ldr	r3, [r4, #4]
 80116fa:	2b07      	cmp	r3, #7
 80116fc:	d91e      	bls.n	801173c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80116fe:	b350      	cbz	r0, 8011756 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011700:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8011702:	4630      	mov	r0, r6
 8011704:	f002 fd02 	bl	801410c <ucdr_serialize_string>
 8011708:	6863      	ldr	r3, [r4, #4]
 801170a:	2b08      	cmp	r3, #8
 801170c:	d916      	bls.n	801173c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801170e:	b310      	cbz	r0, 8011756 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011710:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8011712:	4630      	mov	r0, r6
 8011714:	f002 fcfa 	bl	801410c <ucdr_serialize_string>
 8011718:	6863      	ldr	r3, [r4, #4]
 801171a:	2b09      	cmp	r3, #9
 801171c:	d90e      	bls.n	801173c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801171e:	b1d0      	cbz	r0, 8011756 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011720:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8011724:	2709      	movs	r7, #9
 8011726:	e000      	b.n	801172a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8011728:	b1a8      	cbz	r0, 8011756 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801172a:	f858 1b04 	ldr.w	r1, [r8], #4
 801172e:	4630      	mov	r0, r6
 8011730:	f002 fcec 	bl	801410c <ucdr_serialize_string>
 8011734:	3701      	adds	r7, #1
 8011736:	6862      	ldr	r2, [r4, #4]
 8011738:	4297      	cmp	r7, r2
 801173a:	d3f5      	bcc.n	8011728 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801173c:	4005      	ands	r5, r0
 801173e:	b2ed      	uxtb	r5, r5
 8011740:	e78a      	b.n	8011658 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8011742:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011744:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8011748:	4630      	mov	r0, r6
 801174a:	f7fd ffa1 	bl	800f690 <ucdr_serialize_sequence_uint8_t>
 801174e:	4005      	ands	r5, r0
 8011750:	4628      	mov	r0, r5
 8011752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011756:	2500      	movs	r5, #0
 8011758:	e77e      	b.n	8011658 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801175a:	4028      	ands	r0, r5
 801175c:	b2c5      	uxtb	r5, r0
 801175e:	e77b      	b.n	8011658 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08011760 <uxr_serialize_OBJK_Publisher_Binary>:
 8011760:	b570      	push	{r4, r5, r6, lr}
 8011762:	460d      	mov	r5, r1
 8011764:	7809      	ldrb	r1, [r1, #0]
 8011766:	4606      	mov	r6, r0
 8011768:	f7fc fbe2 	bl	800df30 <ucdr_serialize_bool>
 801176c:	782b      	ldrb	r3, [r5, #0]
 801176e:	4604      	mov	r4, r0
 8011770:	b94b      	cbnz	r3, 8011786 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8011772:	7a29      	ldrb	r1, [r5, #8]
 8011774:	4630      	mov	r0, r6
 8011776:	f7fc fbdb 	bl	800df30 <ucdr_serialize_bool>
 801177a:	7a2b      	ldrb	r3, [r5, #8]
 801177c:	4004      	ands	r4, r0
 801177e:	b2e4      	uxtb	r4, r4
 8011780:	b943      	cbnz	r3, 8011794 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8011782:	4620      	mov	r0, r4
 8011784:	bd70      	pop	{r4, r5, r6, pc}
 8011786:	6869      	ldr	r1, [r5, #4]
 8011788:	4630      	mov	r0, r6
 801178a:	f002 fcbf 	bl	801410c <ucdr_serialize_string>
 801178e:	4004      	ands	r4, r0
 8011790:	b2e4      	uxtb	r4, r4
 8011792:	e7ee      	b.n	8011772 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8011794:	f105 010c 	add.w	r1, r5, #12
 8011798:	4630      	mov	r0, r6
 801179a:	f7ff ff53 	bl	8011644 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801179e:	4004      	ands	r4, r0
 80117a0:	4620      	mov	r0, r4
 80117a2:	bd70      	pop	{r4, r5, r6, pc}

080117a4 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80117a4:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 80117a8:	4688      	mov	r8, r1
 80117aa:	4681      	mov	r9, r0
 80117ac:	8809      	ldrh	r1, [r1, #0]
 80117ae:	f7fc fc19 	bl	800dfe4 <ucdr_serialize_uint16_t>
 80117b2:	4606      	mov	r6, r0
 80117b4:	f898 1002 	ldrb.w	r1, [r8, #2]
 80117b8:	4648      	mov	r0, r9
 80117ba:	f7fc fbb9 	bl	800df30 <ucdr_serialize_bool>
 80117be:	f898 3002 	ldrb.w	r3, [r8, #2]
 80117c2:	4006      	ands	r6, r0
 80117c4:	b2f5      	uxtb	r5, r6
 80117c6:	b9eb      	cbnz	r3, 8011804 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 80117c8:	f898 1006 	ldrb.w	r1, [r8, #6]
 80117cc:	4648      	mov	r0, r9
 80117ce:	f7fc fbaf 	bl	800df30 <ucdr_serialize_bool>
 80117d2:	f898 3006 	ldrb.w	r3, [r8, #6]
 80117d6:	4005      	ands	r5, r0
 80117d8:	bb7b      	cbnz	r3, 801183a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80117da:	f898 100c 	ldrb.w	r1, [r8, #12]
 80117de:	4648      	mov	r0, r9
 80117e0:	f7fc fba6 	bl	800df30 <ucdr_serialize_bool>
 80117e4:	f898 300c 	ldrb.w	r3, [r8, #12]
 80117e8:	4005      	ands	r5, r0
 80117ea:	b9f3      	cbnz	r3, 801182a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80117ec:	f898 1014 	ldrb.w	r1, [r8, #20]
 80117f0:	4648      	mov	r0, r9
 80117f2:	f7fc fb9d 	bl	800df30 <ucdr_serialize_bool>
 80117f6:	f898 3014 	ldrb.w	r3, [r8, #20]
 80117fa:	4005      	ands	r5, r0
 80117fc:	b94b      	cbnz	r3, 8011812 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80117fe:	4628      	mov	r0, r5
 8011800:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8011804:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8011808:	4648      	mov	r0, r9
 801180a:	f7fc fbeb 	bl	800dfe4 <ucdr_serialize_uint16_t>
 801180e:	4005      	ands	r5, r0
 8011810:	e7da      	b.n	80117c8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8011812:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8011816:	f108 011c 	add.w	r1, r8, #28
 801181a:	4648      	mov	r0, r9
 801181c:	f7fd ff38 	bl	800f690 <ucdr_serialize_sequence_uint8_t>
 8011820:	4028      	ands	r0, r5
 8011822:	b2c5      	uxtb	r5, r0
 8011824:	4628      	mov	r0, r5
 8011826:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801182a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801182e:	4648      	mov	r0, r9
 8011830:	f7fc fdc2 	bl	800e3b8 <ucdr_serialize_uint32_t>
 8011834:	4028      	ands	r0, r5
 8011836:	b2c5      	uxtb	r5, r0
 8011838:	e7d8      	b.n	80117ec <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801183a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801183e:	4648      	mov	r0, r9
 8011840:	f7fc fdba 	bl	800e3b8 <ucdr_serialize_uint32_t>
 8011844:	4028      	ands	r0, r5
 8011846:	b2c5      	uxtb	r5, r0
 8011848:	e7c7      	b.n	80117da <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801184a:	bf00      	nop

0801184c <uxr_serialize_OBJK_DataWriter_Binary>:
 801184c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801184e:	2202      	movs	r2, #2
 8011850:	460d      	mov	r5, r1
 8011852:	4606      	mov	r6, r0
 8011854:	f7fc f9f8 	bl	800dc48 <ucdr_serialize_array_uint8_t>
 8011858:	4604      	mov	r4, r0
 801185a:	78a9      	ldrb	r1, [r5, #2]
 801185c:	4630      	mov	r0, r6
 801185e:	f7fc fb67 	bl	800df30 <ucdr_serialize_bool>
 8011862:	78ab      	ldrb	r3, [r5, #2]
 8011864:	4004      	ands	r4, r0
 8011866:	b2e4      	uxtb	r4, r4
 8011868:	b90b      	cbnz	r3, 801186e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801186a:	4620      	mov	r0, r4
 801186c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801186e:	f105 0108 	add.w	r1, r5, #8
 8011872:	4630      	mov	r0, r6
 8011874:	f7ff ff96 	bl	80117a4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8011878:	4607      	mov	r7, r0
 801187a:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 801187e:	4630      	mov	r0, r6
 8011880:	f7fc fb56 	bl	800df30 <ucdr_serialize_bool>
 8011884:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8011888:	4038      	ands	r0, r7
 801188a:	b2c7      	uxtb	r7, r0
 801188c:	b913      	cbnz	r3, 8011894 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801188e:	403c      	ands	r4, r7
 8011890:	4620      	mov	r0, r4
 8011892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011894:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8011898:	4630      	mov	r0, r6
 801189a:	f7fc ffe3 	bl	800e864 <ucdr_serialize_uint64_t>
 801189e:	4007      	ands	r7, r0
 80118a0:	e7f5      	b.n	801188e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 80118a2:	bf00      	nop

080118a4 <uxr_deserialize_ObjectVariant>:
 80118a4:	b570      	push	{r4, r5, r6, lr}
 80118a6:	4605      	mov	r5, r0
 80118a8:	460e      	mov	r6, r1
 80118aa:	f7fc fb85 	bl	800dfb8 <ucdr_deserialize_uint8_t>
 80118ae:	b168      	cbz	r0, 80118cc <uxr_deserialize_ObjectVariant+0x28>
 80118b0:	7833      	ldrb	r3, [r6, #0]
 80118b2:	4604      	mov	r4, r0
 80118b4:	3b01      	subs	r3, #1
 80118b6:	2b0d      	cmp	r3, #13
 80118b8:	d809      	bhi.n	80118ce <uxr_deserialize_ObjectVariant+0x2a>
 80118ba:	e8df f003 	tbb	[pc, r3]
 80118be:	0a41      	.short	0x0a41
 80118c0:	0a0a2323 	.word	0x0a0a2323
 80118c4:	10080a0a 	.word	0x10080a0a
 80118c8:	565c1010 	.word	0x565c1010
 80118cc:	2400      	movs	r4, #0
 80118ce:	4620      	mov	r0, r4
 80118d0:	bd70      	pop	{r4, r5, r6, pc}
 80118d2:	1d31      	adds	r1, r6, #4
 80118d4:	4628      	mov	r0, r5
 80118d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80118da:	f7ff be41 	b.w	8011560 <uxr_deserialize_DATAWRITER_Representation>
 80118de:	1d31      	adds	r1, r6, #4
 80118e0:	4628      	mov	r0, r5
 80118e2:	f7fc fb69 	bl	800dfb8 <ucdr_deserialize_uint8_t>
 80118e6:	2800      	cmp	r0, #0
 80118e8:	d0f0      	beq.n	80118cc <uxr_deserialize_ObjectVariant+0x28>
 80118ea:	7933      	ldrb	r3, [r6, #4]
 80118ec:	2b01      	cmp	r3, #1
 80118ee:	d001      	beq.n	80118f4 <uxr_deserialize_ObjectVariant+0x50>
 80118f0:	2b02      	cmp	r3, #2
 80118f2:	d1ec      	bne.n	80118ce <uxr_deserialize_ObjectVariant+0x2a>
 80118f4:	68b1      	ldr	r1, [r6, #8]
 80118f6:	4628      	mov	r0, r5
 80118f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80118fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011900:	f002 bc14 	b.w	801412c <ucdr_deserialize_string>
 8011904:	1d31      	adds	r1, r6, #4
 8011906:	4628      	mov	r0, r5
 8011908:	f7fc fb56 	bl	800dfb8 <ucdr_deserialize_uint8_t>
 801190c:	4604      	mov	r4, r0
 801190e:	b170      	cbz	r0, 801192e <uxr_deserialize_ObjectVariant+0x8a>
 8011910:	7933      	ldrb	r3, [r6, #4]
 8011912:	2b02      	cmp	r3, #2
 8011914:	d04c      	beq.n	80119b0 <uxr_deserialize_ObjectVariant+0x10c>
 8011916:	2b03      	cmp	r3, #3
 8011918:	d109      	bne.n	801192e <uxr_deserialize_ObjectVariant+0x8a>
 801191a:	f106 0308 	add.w	r3, r6, #8
 801191e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011922:	f106 010c 	add.w	r1, r6, #12
 8011926:	4628      	mov	r0, r5
 8011928:	f7fd fec4 	bl	800f6b4 <ucdr_deserialize_sequence_uint8_t>
 801192c:	4604      	mov	r4, r0
 801192e:	2202      	movs	r2, #2
 8011930:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8011934:	4628      	mov	r0, r5
 8011936:	f7fc f9eb 	bl	800dd10 <ucdr_deserialize_array_uint8_t>
 801193a:	4020      	ands	r0, r4
 801193c:	b2c4      	uxtb	r4, r0
 801193e:	e7c6      	b.n	80118ce <uxr_deserialize_ObjectVariant+0x2a>
 8011940:	1d31      	adds	r1, r6, #4
 8011942:	4628      	mov	r0, r5
 8011944:	f7fc fb38 	bl	800dfb8 <ucdr_deserialize_uint8_t>
 8011948:	4604      	mov	r4, r0
 801194a:	b130      	cbz	r0, 801195a <uxr_deserialize_ObjectVariant+0xb6>
 801194c:	7933      	ldrb	r3, [r6, #4]
 801194e:	2b02      	cmp	r3, #2
 8011950:	d036      	beq.n	80119c0 <uxr_deserialize_ObjectVariant+0x11c>
 8011952:	2b03      	cmp	r3, #3
 8011954:	d03c      	beq.n	80119d0 <uxr_deserialize_ObjectVariant+0x12c>
 8011956:	2b01      	cmp	r3, #1
 8011958:	d032      	beq.n	80119c0 <uxr_deserialize_ObjectVariant+0x11c>
 801195a:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801195e:	4628      	mov	r0, r5
 8011960:	f7fd f8d0 	bl	800eb04 <ucdr_deserialize_int16_t>
 8011964:	4020      	ands	r0, r4
 8011966:	b2c4      	uxtb	r4, r0
 8011968:	e7b1      	b.n	80118ce <uxr_deserialize_ObjectVariant+0x2a>
 801196a:	1d31      	adds	r1, r6, #4
 801196c:	4628      	mov	r0, r5
 801196e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011972:	f7ff bcab 	b.w	80112cc <uxr_deserialize_CLIENT_Representation>
 8011976:	2204      	movs	r2, #4
 8011978:	4628      	mov	r0, r5
 801197a:	18b1      	adds	r1, r6, r2
 801197c:	f7fc f9c8 	bl	800dd10 <ucdr_deserialize_array_uint8_t>
 8011980:	4604      	mov	r4, r0
 8011982:	2202      	movs	r2, #2
 8011984:	f106 0108 	add.w	r1, r6, #8
 8011988:	4628      	mov	r0, r5
 801198a:	f7fc f9c1 	bl	800dd10 <ucdr_deserialize_array_uint8_t>
 801198e:	4004      	ands	r4, r0
 8011990:	2202      	movs	r2, #2
 8011992:	f106 010a 	add.w	r1, r6, #10
 8011996:	4628      	mov	r0, r5
 8011998:	b2e4      	uxtb	r4, r4
 801199a:	f7fc f9b9 	bl	800dd10 <ucdr_deserialize_array_uint8_t>
 801199e:	4603      	mov	r3, r0
 80119a0:	f106 010c 	add.w	r1, r6, #12
 80119a4:	4628      	mov	r0, r5
 80119a6:	401c      	ands	r4, r3
 80119a8:	f7fc fad8 	bl	800df5c <ucdr_deserialize_bool>
 80119ac:	4004      	ands	r4, r0
 80119ae:	e78e      	b.n	80118ce <uxr_deserialize_ObjectVariant+0x2a>
 80119b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80119b4:	68b1      	ldr	r1, [r6, #8]
 80119b6:	4628      	mov	r0, r5
 80119b8:	f002 fbb8 	bl	801412c <ucdr_deserialize_string>
 80119bc:	4604      	mov	r4, r0
 80119be:	e7b6      	b.n	801192e <uxr_deserialize_ObjectVariant+0x8a>
 80119c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80119c4:	68b1      	ldr	r1, [r6, #8]
 80119c6:	4628      	mov	r0, r5
 80119c8:	f002 fbb0 	bl	801412c <ucdr_deserialize_string>
 80119cc:	4604      	mov	r4, r0
 80119ce:	e7c4      	b.n	801195a <uxr_deserialize_ObjectVariant+0xb6>
 80119d0:	f106 0308 	add.w	r3, r6, #8
 80119d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80119d8:	f106 010c 	add.w	r1, r6, #12
 80119dc:	4628      	mov	r0, r5
 80119de:	f7fd fe69 	bl	800f6b4 <ucdr_deserialize_sequence_uint8_t>
 80119e2:	4604      	mov	r4, r0
 80119e4:	e7b9      	b.n	801195a <uxr_deserialize_ObjectVariant+0xb6>
 80119e6:	bf00      	nop

080119e8 <uxr_deserialize_BaseObjectRequest>:
 80119e8:	b570      	push	{r4, r5, r6, lr}
 80119ea:	2202      	movs	r2, #2
 80119ec:	4605      	mov	r5, r0
 80119ee:	460e      	mov	r6, r1
 80119f0:	f7fc f98e 	bl	800dd10 <ucdr_deserialize_array_uint8_t>
 80119f4:	2202      	movs	r2, #2
 80119f6:	4604      	mov	r4, r0
 80119f8:	4628      	mov	r0, r5
 80119fa:	18b1      	adds	r1, r6, r2
 80119fc:	f7fc f988 	bl	800dd10 <ucdr_deserialize_array_uint8_t>
 8011a00:	4020      	ands	r0, r4
 8011a02:	b2c0      	uxtb	r0, r0
 8011a04:	bd70      	pop	{r4, r5, r6, pc}
 8011a06:	bf00      	nop

08011a08 <uxr_serialize_ActivityInfoVariant>:
 8011a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a0c:	460e      	mov	r6, r1
 8011a0e:	7809      	ldrb	r1, [r1, #0]
 8011a10:	4680      	mov	r8, r0
 8011a12:	f7fc fabb 	bl	800df8c <ucdr_serialize_uint8_t>
 8011a16:	4607      	mov	r7, r0
 8011a18:	b138      	cbz	r0, 8011a2a <uxr_serialize_ActivityInfoVariant+0x22>
 8011a1a:	7833      	ldrb	r3, [r6, #0]
 8011a1c:	2b06      	cmp	r3, #6
 8011a1e:	f000 8081 	beq.w	8011b24 <uxr_serialize_ActivityInfoVariant+0x11c>
 8011a22:	2b0d      	cmp	r3, #13
 8011a24:	d014      	beq.n	8011a50 <uxr_serialize_ActivityInfoVariant+0x48>
 8011a26:	2b05      	cmp	r3, #5
 8011a28:	d002      	beq.n	8011a30 <uxr_serialize_ActivityInfoVariant+0x28>
 8011a2a:	4638      	mov	r0, r7
 8011a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a30:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8011a34:	4640      	mov	r0, r8
 8011a36:	f7fc ffe5 	bl	800ea04 <ucdr_serialize_int16_t>
 8011a3a:	4607      	mov	r7, r0
 8011a3c:	4640      	mov	r0, r8
 8011a3e:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8011a42:	f7fc ff0f 	bl	800e864 <ucdr_serialize_uint64_t>
 8011a46:	4038      	ands	r0, r7
 8011a48:	b2c7      	uxtb	r7, r0
 8011a4a:	4638      	mov	r0, r7
 8011a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a50:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8011a54:	4640      	mov	r0, r8
 8011a56:	f7fc ffd5 	bl	800ea04 <ucdr_serialize_int16_t>
 8011a5a:	68f1      	ldr	r1, [r6, #12]
 8011a5c:	4607      	mov	r7, r0
 8011a5e:	4640      	mov	r0, r8
 8011a60:	f7fc fcaa 	bl	800e3b8 <ucdr_serialize_uint32_t>
 8011a64:	68f3      	ldr	r3, [r6, #12]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d0ed      	beq.n	8011a46 <uxr_serialize_ActivityInfoVariant+0x3e>
 8011a6a:	b318      	cbz	r0, 8011ab4 <uxr_serialize_ActivityInfoVariant+0xac>
 8011a6c:	f106 090c 	add.w	r9, r6, #12
 8011a70:	2400      	movs	r4, #0
 8011a72:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8011a76:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8011a7a:	7c29      	ldrb	r1, [r5, #16]
 8011a7c:	4640      	mov	r0, r8
 8011a7e:	f7fc fa85 	bl	800df8c <ucdr_serialize_uint8_t>
 8011a82:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 8011a86:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8011a8a:	2800      	cmp	r0, #0
 8011a8c:	d051      	beq.n	8011b32 <uxr_serialize_ActivityInfoVariant+0x12a>
 8011a8e:	7c2b      	ldrb	r3, [r5, #16]
 8011a90:	00c9      	lsls	r1, r1, #3
 8011a92:	2b03      	cmp	r3, #3
 8011a94:	d854      	bhi.n	8011b40 <uxr_serialize_ActivityInfoVariant+0x138>
 8011a96:	e8df f003 	tbb	[pc, r3]
 8011a9a:	2133      	.short	0x2133
 8011a9c:	020f      	.short	0x020f
 8011a9e:	4449      	add	r1, r9
 8011aa0:	4640      	mov	r0, r8
 8011aa2:	6889      	ldr	r1, [r1, #8]
 8011aa4:	f002 fb32 	bl	801410c <ucdr_serialize_string>
 8011aa8:	3401      	adds	r4, #1
 8011aaa:	68f2      	ldr	r2, [r6, #12]
 8011aac:	4294      	cmp	r4, r2
 8011aae:	d244      	bcs.n	8011b3a <uxr_serialize_ActivityInfoVariant+0x132>
 8011ab0:	2800      	cmp	r0, #0
 8011ab2:	d1de      	bne.n	8011a72 <uxr_serialize_ActivityInfoVariant+0x6a>
 8011ab4:	2700      	movs	r7, #0
 8011ab6:	e7b8      	b.n	8011a2a <uxr_serialize_ActivityInfoVariant+0x22>
 8011ab8:	3108      	adds	r1, #8
 8011aba:	44a2      	add	sl, r4
 8011abc:	2210      	movs	r2, #16
 8011abe:	4640      	mov	r0, r8
 8011ac0:	4449      	add	r1, r9
 8011ac2:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8011ac6:	f7fc f8bf 	bl	800dc48 <ucdr_serialize_array_uint8_t>
 8011aca:	4605      	mov	r5, r0
 8011acc:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 8011ad0:	4640      	mov	r0, r8
 8011ad2:	f7fc fc71 	bl	800e3b8 <ucdr_serialize_uint32_t>
 8011ad6:	4028      	ands	r0, r5
 8011ad8:	b2c0      	uxtb	r0, r0
 8011ada:	e7e5      	b.n	8011aa8 <uxr_serialize_ActivityInfoVariant+0xa0>
 8011adc:	3108      	adds	r1, #8
 8011ade:	44a2      	add	sl, r4
 8011ae0:	2204      	movs	r2, #4
 8011ae2:	4640      	mov	r0, r8
 8011ae4:	4449      	add	r1, r9
 8011ae6:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8011aea:	f7fc f8ad 	bl	800dc48 <ucdr_serialize_array_uint8_t>
 8011aee:	4605      	mov	r5, r0
 8011af0:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 8011af4:	4640      	mov	r0, r8
 8011af6:	f7fc fa75 	bl	800dfe4 <ucdr_serialize_uint16_t>
 8011afa:	4028      	ands	r0, r5
 8011afc:	b2c0      	uxtb	r0, r0
 8011afe:	e7d3      	b.n	8011aa8 <uxr_serialize_ActivityInfoVariant+0xa0>
 8011b00:	3108      	adds	r1, #8
 8011b02:	44a2      	add	sl, r4
 8011b04:	2202      	movs	r2, #2
 8011b06:	4640      	mov	r0, r8
 8011b08:	4449      	add	r1, r9
 8011b0a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8011b0e:	f7fc f89b 	bl	800dc48 <ucdr_serialize_array_uint8_t>
 8011b12:	4605      	mov	r5, r0
 8011b14:	f89a 1016 	ldrb.w	r1, [sl, #22]
 8011b18:	4640      	mov	r0, r8
 8011b1a:	f7fc fa37 	bl	800df8c <ucdr_serialize_uint8_t>
 8011b1e:	4028      	ands	r0, r5
 8011b20:	b2c0      	uxtb	r0, r0
 8011b22:	e7c1      	b.n	8011aa8 <uxr_serialize_ActivityInfoVariant+0xa0>
 8011b24:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8011b28:	4640      	mov	r0, r8
 8011b2a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b2e:	f7fc bf69 	b.w	800ea04 <ucdr_serialize_int16_t>
 8011b32:	3401      	adds	r4, #1
 8011b34:	68f2      	ldr	r2, [r6, #12]
 8011b36:	42a2      	cmp	r2, r4
 8011b38:	d8bc      	bhi.n	8011ab4 <uxr_serialize_ActivityInfoVariant+0xac>
 8011b3a:	4007      	ands	r7, r0
 8011b3c:	b2ff      	uxtb	r7, r7
 8011b3e:	e774      	b.n	8011a2a <uxr_serialize_ActivityInfoVariant+0x22>
 8011b40:	3401      	adds	r4, #1
 8011b42:	68f3      	ldr	r3, [r6, #12]
 8011b44:	3518      	adds	r5, #24
 8011b46:	429c      	cmp	r4, r3
 8011b48:	d397      	bcc.n	8011a7a <uxr_serialize_ActivityInfoVariant+0x72>
 8011b4a:	e76e      	b.n	8011a2a <uxr_serialize_ActivityInfoVariant+0x22>

08011b4c <uxr_deserialize_BaseObjectReply>:
 8011b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b50:	2202      	movs	r2, #2
 8011b52:	4606      	mov	r6, r0
 8011b54:	460f      	mov	r7, r1
 8011b56:	f7fc f8db 	bl	800dd10 <ucdr_deserialize_array_uint8_t>
 8011b5a:	2202      	movs	r2, #2
 8011b5c:	4605      	mov	r5, r0
 8011b5e:	4630      	mov	r0, r6
 8011b60:	18b9      	adds	r1, r7, r2
 8011b62:	f7fc f8d5 	bl	800dd10 <ucdr_deserialize_array_uint8_t>
 8011b66:	4680      	mov	r8, r0
 8011b68:	1d39      	adds	r1, r7, #4
 8011b6a:	4630      	mov	r0, r6
 8011b6c:	f7fc fa24 	bl	800dfb8 <ucdr_deserialize_uint8_t>
 8011b70:	ea05 0508 	and.w	r5, r5, r8
 8011b74:	4604      	mov	r4, r0
 8011b76:	1d79      	adds	r1, r7, #5
 8011b78:	4630      	mov	r0, r6
 8011b7a:	402c      	ands	r4, r5
 8011b7c:	f7fc fa1c 	bl	800dfb8 <ucdr_deserialize_uint8_t>
 8011b80:	4020      	ands	r0, r4
 8011b82:	b2c0      	uxtb	r0, r0
 8011b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011b88 <uxr_serialize_ReadSpecification>:
 8011b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b8a:	460e      	mov	r6, r1
 8011b8c:	4607      	mov	r7, r0
 8011b8e:	7809      	ldrb	r1, [r1, #0]
 8011b90:	f7fc f9fc 	bl	800df8c <ucdr_serialize_uint8_t>
 8011b94:	4604      	mov	r4, r0
 8011b96:	7871      	ldrb	r1, [r6, #1]
 8011b98:	4638      	mov	r0, r7
 8011b9a:	f7fc f9f7 	bl	800df8c <ucdr_serialize_uint8_t>
 8011b9e:	4004      	ands	r4, r0
 8011ba0:	78b1      	ldrb	r1, [r6, #2]
 8011ba2:	4638      	mov	r0, r7
 8011ba4:	f7fc f9c4 	bl	800df30 <ucdr_serialize_bool>
 8011ba8:	78b3      	ldrb	r3, [r6, #2]
 8011baa:	b2e4      	uxtb	r4, r4
 8011bac:	4004      	ands	r4, r0
 8011bae:	b943      	cbnz	r3, 8011bc2 <uxr_serialize_ReadSpecification+0x3a>
 8011bb0:	7a31      	ldrb	r1, [r6, #8]
 8011bb2:	4638      	mov	r0, r7
 8011bb4:	f7fc f9bc 	bl	800df30 <ucdr_serialize_bool>
 8011bb8:	7a33      	ldrb	r3, [r6, #8]
 8011bba:	4004      	ands	r4, r0
 8011bbc:	b93b      	cbnz	r3, 8011bce <uxr_serialize_ReadSpecification+0x46>
 8011bbe:	4620      	mov	r0, r4
 8011bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011bc2:	6871      	ldr	r1, [r6, #4]
 8011bc4:	4638      	mov	r0, r7
 8011bc6:	f002 faa1 	bl	801410c <ucdr_serialize_string>
 8011bca:	4004      	ands	r4, r0
 8011bcc:	e7f0      	b.n	8011bb0 <uxr_serialize_ReadSpecification+0x28>
 8011bce:	8971      	ldrh	r1, [r6, #10]
 8011bd0:	4638      	mov	r0, r7
 8011bd2:	f7fc fa07 	bl	800dfe4 <ucdr_serialize_uint16_t>
 8011bd6:	4605      	mov	r5, r0
 8011bd8:	89b1      	ldrh	r1, [r6, #12]
 8011bda:	4638      	mov	r0, r7
 8011bdc:	f7fc fa02 	bl	800dfe4 <ucdr_serialize_uint16_t>
 8011be0:	4005      	ands	r5, r0
 8011be2:	89f1      	ldrh	r1, [r6, #14]
 8011be4:	4638      	mov	r0, r7
 8011be6:	b2ed      	uxtb	r5, r5
 8011be8:	f7fc f9fc 	bl	800dfe4 <ucdr_serialize_uint16_t>
 8011bec:	8a31      	ldrh	r1, [r6, #16]
 8011bee:	4025      	ands	r5, r4
 8011bf0:	4604      	mov	r4, r0
 8011bf2:	4638      	mov	r0, r7
 8011bf4:	4025      	ands	r5, r4
 8011bf6:	f7fc f9f5 	bl	800dfe4 <ucdr_serialize_uint16_t>
 8011bfa:	ea00 0405 	and.w	r4, r0, r5
 8011bfe:	4620      	mov	r0, r4
 8011c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c02:	bf00      	nop

08011c04 <uxr_serialize_CREATE_CLIENT_Payload>:
 8011c04:	f7ff bb0a 	b.w	801121c <uxr_serialize_CLIENT_Representation>

08011c08 <uxr_serialize_CREATE_Payload>:
 8011c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c0a:	2202      	movs	r2, #2
 8011c0c:	4607      	mov	r7, r0
 8011c0e:	460e      	mov	r6, r1
 8011c10:	f7fc f81a 	bl	800dc48 <ucdr_serialize_array_uint8_t>
 8011c14:	2202      	movs	r2, #2
 8011c16:	4605      	mov	r5, r0
 8011c18:	4638      	mov	r0, r7
 8011c1a:	18b1      	adds	r1, r6, r2
 8011c1c:	f7fc f814 	bl	800dc48 <ucdr_serialize_array_uint8_t>
 8011c20:	7931      	ldrb	r1, [r6, #4]
 8011c22:	4604      	mov	r4, r0
 8011c24:	4638      	mov	r0, r7
 8011c26:	f7fc f9b1 	bl	800df8c <ucdr_serialize_uint8_t>
 8011c2a:	b170      	cbz	r0, 8011c4a <uxr_serialize_CREATE_Payload+0x42>
 8011c2c:	7933      	ldrb	r3, [r6, #4]
 8011c2e:	402c      	ands	r4, r5
 8011c30:	3b01      	subs	r3, #1
 8011c32:	b2e4      	uxtb	r4, r4
 8011c34:	2b0d      	cmp	r3, #13
 8011c36:	d809      	bhi.n	8011c4c <uxr_serialize_CREATE_Payload+0x44>
 8011c38:	e8df f003 	tbb	[pc, r3]
 8011c3c:	23230a4c 	.word	0x23230a4c
 8011c40:	0a0a0a0a 	.word	0x0a0a0a0a
 8011c44:	12121208 	.word	0x12121208
 8011c48:	3e45      	.short	0x3e45
 8011c4a:	2400      	movs	r4, #0
 8011c4c:	4620      	mov	r0, r4
 8011c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c50:	f106 0108 	add.w	r1, r6, #8
 8011c54:	4638      	mov	r0, r7
 8011c56:	f7ff fbe7 	bl	8011428 <uxr_serialize_DATAWRITER_Representation>
 8011c5a:	4004      	ands	r4, r0
 8011c5c:	4620      	mov	r0, r4
 8011c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c60:	7a31      	ldrb	r1, [r6, #8]
 8011c62:	4638      	mov	r0, r7
 8011c64:	f7fc f992 	bl	800df8c <ucdr_serialize_uint8_t>
 8011c68:	2800      	cmp	r0, #0
 8011c6a:	d0ee      	beq.n	8011c4a <uxr_serialize_CREATE_Payload+0x42>
 8011c6c:	7a33      	ldrb	r3, [r6, #8]
 8011c6e:	2b01      	cmp	r3, #1
 8011c70:	d001      	beq.n	8011c76 <uxr_serialize_CREATE_Payload+0x6e>
 8011c72:	2b02      	cmp	r3, #2
 8011c74:	d1ea      	bne.n	8011c4c <uxr_serialize_CREATE_Payload+0x44>
 8011c76:	68f1      	ldr	r1, [r6, #12]
 8011c78:	4638      	mov	r0, r7
 8011c7a:	f002 fa47 	bl	801410c <ucdr_serialize_string>
 8011c7e:	4004      	ands	r4, r0
 8011c80:	e7e4      	b.n	8011c4c <uxr_serialize_CREATE_Payload+0x44>
 8011c82:	7a31      	ldrb	r1, [r6, #8]
 8011c84:	4638      	mov	r0, r7
 8011c86:	f7fc f981 	bl	800df8c <ucdr_serialize_uint8_t>
 8011c8a:	4605      	mov	r5, r0
 8011c8c:	b158      	cbz	r0, 8011ca6 <uxr_serialize_CREATE_Payload+0x9e>
 8011c8e:	7a33      	ldrb	r3, [r6, #8]
 8011c90:	2b02      	cmp	r3, #2
 8011c92:	d034      	beq.n	8011cfe <uxr_serialize_CREATE_Payload+0xf6>
 8011c94:	2b03      	cmp	r3, #3
 8011c96:	d106      	bne.n	8011ca6 <uxr_serialize_CREATE_Payload+0x9e>
 8011c98:	68f2      	ldr	r2, [r6, #12]
 8011c9a:	f106 0110 	add.w	r1, r6, #16
 8011c9e:	4638      	mov	r0, r7
 8011ca0:	f7fd fcf6 	bl	800f690 <ucdr_serialize_sequence_uint8_t>
 8011ca4:	4605      	mov	r5, r0
 8011ca6:	2202      	movs	r2, #2
 8011ca8:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8011cac:	4638      	mov	r0, r7
 8011cae:	f7fb ffcb 	bl	800dc48 <ucdr_serialize_array_uint8_t>
 8011cb2:	4028      	ands	r0, r5
 8011cb4:	4004      	ands	r4, r0
 8011cb6:	e7c9      	b.n	8011c4c <uxr_serialize_CREATE_Payload+0x44>
 8011cb8:	f106 0108 	add.w	r1, r6, #8
 8011cbc:	4638      	mov	r0, r7
 8011cbe:	f7ff faad 	bl	801121c <uxr_serialize_CLIENT_Representation>
 8011cc2:	4004      	ands	r4, r0
 8011cc4:	e7c2      	b.n	8011c4c <uxr_serialize_CREATE_Payload+0x44>
 8011cc6:	f106 0108 	add.w	r1, r6, #8
 8011cca:	4638      	mov	r0, r7
 8011ccc:	f7ff fb62 	bl	8011394 <uxr_serialize_AGENT_Representation>
 8011cd0:	4004      	ands	r4, r0
 8011cd2:	e7bb      	b.n	8011c4c <uxr_serialize_CREATE_Payload+0x44>
 8011cd4:	7a31      	ldrb	r1, [r6, #8]
 8011cd6:	4638      	mov	r0, r7
 8011cd8:	f7fc f958 	bl	800df8c <ucdr_serialize_uint8_t>
 8011cdc:	4605      	mov	r5, r0
 8011cde:	b130      	cbz	r0, 8011cee <uxr_serialize_CREATE_Payload+0xe6>
 8011ce0:	7a33      	ldrb	r3, [r6, #8]
 8011ce2:	2b02      	cmp	r3, #2
 8011ce4:	d011      	beq.n	8011d0a <uxr_serialize_CREATE_Payload+0x102>
 8011ce6:	2b03      	cmp	r3, #3
 8011ce8:	d015      	beq.n	8011d16 <uxr_serialize_CREATE_Payload+0x10e>
 8011cea:	2b01      	cmp	r3, #1
 8011cec:	d00d      	beq.n	8011d0a <uxr_serialize_CREATE_Payload+0x102>
 8011cee:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8011cf2:	4638      	mov	r0, r7
 8011cf4:	f7fc fe86 	bl	800ea04 <ucdr_serialize_int16_t>
 8011cf8:	4028      	ands	r0, r5
 8011cfa:	4004      	ands	r4, r0
 8011cfc:	e7a6      	b.n	8011c4c <uxr_serialize_CREATE_Payload+0x44>
 8011cfe:	68f1      	ldr	r1, [r6, #12]
 8011d00:	4638      	mov	r0, r7
 8011d02:	f002 fa03 	bl	801410c <ucdr_serialize_string>
 8011d06:	4605      	mov	r5, r0
 8011d08:	e7cd      	b.n	8011ca6 <uxr_serialize_CREATE_Payload+0x9e>
 8011d0a:	68f1      	ldr	r1, [r6, #12]
 8011d0c:	4638      	mov	r0, r7
 8011d0e:	f002 f9fd 	bl	801410c <ucdr_serialize_string>
 8011d12:	4605      	mov	r5, r0
 8011d14:	e7eb      	b.n	8011cee <uxr_serialize_CREATE_Payload+0xe6>
 8011d16:	68f2      	ldr	r2, [r6, #12]
 8011d18:	f106 0110 	add.w	r1, r6, #16
 8011d1c:	4638      	mov	r0, r7
 8011d1e:	f7fd fcb7 	bl	800f690 <ucdr_serialize_sequence_uint8_t>
 8011d22:	4605      	mov	r5, r0
 8011d24:	e7e3      	b.n	8011cee <uxr_serialize_CREATE_Payload+0xe6>
 8011d26:	bf00      	nop

08011d28 <uxr_deserialize_GET_INFO_Payload>:
 8011d28:	b570      	push	{r4, r5, r6, lr}
 8011d2a:	2202      	movs	r2, #2
 8011d2c:	4605      	mov	r5, r0
 8011d2e:	460e      	mov	r6, r1
 8011d30:	f7fb ffee 	bl	800dd10 <ucdr_deserialize_array_uint8_t>
 8011d34:	2202      	movs	r2, #2
 8011d36:	4604      	mov	r4, r0
 8011d38:	4628      	mov	r0, r5
 8011d3a:	18b1      	adds	r1, r6, r2
 8011d3c:	f7fb ffe8 	bl	800dd10 <ucdr_deserialize_array_uint8_t>
 8011d40:	4603      	mov	r3, r0
 8011d42:	1d31      	adds	r1, r6, #4
 8011d44:	4628      	mov	r0, r5
 8011d46:	401c      	ands	r4, r3
 8011d48:	f7fc fc66 	bl	800e618 <ucdr_deserialize_uint32_t>
 8011d4c:	b2e4      	uxtb	r4, r4
 8011d4e:	4020      	ands	r0, r4
 8011d50:	bd70      	pop	{r4, r5, r6, pc}
 8011d52:	bf00      	nop

08011d54 <uxr_serialize_DELETE_Payload>:
 8011d54:	b570      	push	{r4, r5, r6, lr}
 8011d56:	2202      	movs	r2, #2
 8011d58:	4605      	mov	r5, r0
 8011d5a:	460e      	mov	r6, r1
 8011d5c:	f7fb ff74 	bl	800dc48 <ucdr_serialize_array_uint8_t>
 8011d60:	2202      	movs	r2, #2
 8011d62:	4604      	mov	r4, r0
 8011d64:	4628      	mov	r0, r5
 8011d66:	18b1      	adds	r1, r6, r2
 8011d68:	f7fb ff6e 	bl	800dc48 <ucdr_serialize_array_uint8_t>
 8011d6c:	4020      	ands	r0, r4
 8011d6e:	b2c0      	uxtb	r0, r0
 8011d70:	bd70      	pop	{r4, r5, r6, pc}
 8011d72:	bf00      	nop

08011d74 <uxr_deserialize_STATUS_AGENT_Payload>:
 8011d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d78:	460e      	mov	r6, r1
 8011d7a:	4605      	mov	r5, r0
 8011d7c:	f7fc f91c 	bl	800dfb8 <ucdr_deserialize_uint8_t>
 8011d80:	4604      	mov	r4, r0
 8011d82:	1c71      	adds	r1, r6, #1
 8011d84:	4628      	mov	r0, r5
 8011d86:	f7fc f917 	bl	800dfb8 <ucdr_deserialize_uint8_t>
 8011d8a:	2204      	movs	r2, #4
 8011d8c:	4681      	mov	r9, r0
 8011d8e:	4628      	mov	r0, r5
 8011d90:	18b1      	adds	r1, r6, r2
 8011d92:	f7fb ffbd 	bl	800dd10 <ucdr_deserialize_array_uint8_t>
 8011d96:	f106 0108 	add.w	r1, r6, #8
 8011d9a:	4680      	mov	r8, r0
 8011d9c:	2202      	movs	r2, #2
 8011d9e:	4628      	mov	r0, r5
 8011da0:	f7fb ffb6 	bl	800dd10 <ucdr_deserialize_array_uint8_t>
 8011da4:	ea04 0309 	and.w	r3, r4, r9
 8011da8:	4607      	mov	r7, r0
 8011daa:	2202      	movs	r2, #2
 8011dac:	b2db      	uxtb	r3, r3
 8011dae:	f106 010a 	add.w	r1, r6, #10
 8011db2:	4628      	mov	r0, r5
 8011db4:	ea03 0408 	and.w	r4, r3, r8
 8011db8:	f7fb ffaa 	bl	800dd10 <ucdr_deserialize_array_uint8_t>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	4628      	mov	r0, r5
 8011dc0:	403c      	ands	r4, r7
 8011dc2:	f106 010c 	add.w	r1, r6, #12
 8011dc6:	461d      	mov	r5, r3
 8011dc8:	f7fc f8c8 	bl	800df5c <ucdr_deserialize_bool>
 8011dcc:	4025      	ands	r5, r4
 8011dce:	4028      	ands	r0, r5
 8011dd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08011dd4 <uxr_deserialize_STATUS_Payload>:
 8011dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dd8:	2202      	movs	r2, #2
 8011dda:	4606      	mov	r6, r0
 8011ddc:	460f      	mov	r7, r1
 8011dde:	f7fb ff97 	bl	800dd10 <ucdr_deserialize_array_uint8_t>
 8011de2:	2202      	movs	r2, #2
 8011de4:	4605      	mov	r5, r0
 8011de6:	4630      	mov	r0, r6
 8011de8:	18b9      	adds	r1, r7, r2
 8011dea:	f7fb ff91 	bl	800dd10 <ucdr_deserialize_array_uint8_t>
 8011dee:	4680      	mov	r8, r0
 8011df0:	1d39      	adds	r1, r7, #4
 8011df2:	4630      	mov	r0, r6
 8011df4:	f7fc f8e0 	bl	800dfb8 <ucdr_deserialize_uint8_t>
 8011df8:	ea05 0508 	and.w	r5, r5, r8
 8011dfc:	4604      	mov	r4, r0
 8011dfe:	1d79      	adds	r1, r7, #5
 8011e00:	4630      	mov	r0, r6
 8011e02:	402c      	ands	r4, r5
 8011e04:	f7fc f8d8 	bl	800dfb8 <ucdr_deserialize_uint8_t>
 8011e08:	4020      	ands	r0, r4
 8011e0a:	b2c0      	uxtb	r0, r0
 8011e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011e10 <uxr_serialize_INFO_Payload>:
 8011e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e14:	2202      	movs	r2, #2
 8011e16:	460c      	mov	r4, r1
 8011e18:	4605      	mov	r5, r0
 8011e1a:	f7fb ff15 	bl	800dc48 <ucdr_serialize_array_uint8_t>
 8011e1e:	2202      	movs	r2, #2
 8011e20:	4680      	mov	r8, r0
 8011e22:	4628      	mov	r0, r5
 8011e24:	18a1      	adds	r1, r4, r2
 8011e26:	f7fb ff0f 	bl	800dc48 <ucdr_serialize_array_uint8_t>
 8011e2a:	4607      	mov	r7, r0
 8011e2c:	7921      	ldrb	r1, [r4, #4]
 8011e2e:	4628      	mov	r0, r5
 8011e30:	f7fc f8ac 	bl	800df8c <ucdr_serialize_uint8_t>
 8011e34:	ea08 0807 	and.w	r8, r8, r7
 8011e38:	4606      	mov	r6, r0
 8011e3a:	7961      	ldrb	r1, [r4, #5]
 8011e3c:	4628      	mov	r0, r5
 8011e3e:	ea06 0608 	and.w	r6, r6, r8
 8011e42:	f7fc f8a3 	bl	800df8c <ucdr_serialize_uint8_t>
 8011e46:	7a21      	ldrb	r1, [r4, #8]
 8011e48:	4030      	ands	r0, r6
 8011e4a:	b2c7      	uxtb	r7, r0
 8011e4c:	4628      	mov	r0, r5
 8011e4e:	f7fc f86f 	bl	800df30 <ucdr_serialize_bool>
 8011e52:	7a23      	ldrb	r3, [r4, #8]
 8011e54:	4606      	mov	r6, r0
 8011e56:	b96b      	cbnz	r3, 8011e74 <uxr_serialize_INFO_Payload+0x64>
 8011e58:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8011e5c:	4628      	mov	r0, r5
 8011e5e:	f7fc f867 	bl	800df30 <ucdr_serialize_bool>
 8011e62:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8011e66:	4030      	ands	r0, r6
 8011e68:	b2c6      	uxtb	r6, r0
 8011e6a:	b983      	cbnz	r3, 8011e8e <uxr_serialize_INFO_Payload+0x7e>
 8011e6c:	ea06 0007 	and.w	r0, r6, r7
 8011e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e74:	7b21      	ldrb	r1, [r4, #12]
 8011e76:	4628      	mov	r0, r5
 8011e78:	f7fc f888 	bl	800df8c <ucdr_serialize_uint8_t>
 8011e7c:	b188      	cbz	r0, 8011ea2 <uxr_serialize_INFO_Payload+0x92>
 8011e7e:	f104 010c 	add.w	r1, r4, #12
 8011e82:	4628      	mov	r0, r5
 8011e84:	f7ff faf8 	bl	8011478 <uxr_serialize_ObjectVariant.part.0>
 8011e88:	4030      	ands	r0, r6
 8011e8a:	b2c6      	uxtb	r6, r0
 8011e8c:	e7e4      	b.n	8011e58 <uxr_serialize_INFO_Payload+0x48>
 8011e8e:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8011e92:	4628      	mov	r0, r5
 8011e94:	f7ff fdb8 	bl	8011a08 <uxr_serialize_ActivityInfoVariant>
 8011e98:	4006      	ands	r6, r0
 8011e9a:	ea06 0007 	and.w	r0, r6, r7
 8011e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ea2:	4606      	mov	r6, r0
 8011ea4:	e7d8      	b.n	8011e58 <uxr_serialize_INFO_Payload+0x48>
 8011ea6:	bf00      	nop

08011ea8 <uxr_serialize_READ_DATA_Payload>:
 8011ea8:	b570      	push	{r4, r5, r6, lr}
 8011eaa:	2202      	movs	r2, #2
 8011eac:	4605      	mov	r5, r0
 8011eae:	460e      	mov	r6, r1
 8011eb0:	f7fb feca 	bl	800dc48 <ucdr_serialize_array_uint8_t>
 8011eb4:	2202      	movs	r2, #2
 8011eb6:	4604      	mov	r4, r0
 8011eb8:	4628      	mov	r0, r5
 8011eba:	18b1      	adds	r1, r6, r2
 8011ebc:	f7fb fec4 	bl	800dc48 <ucdr_serialize_array_uint8_t>
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	1d31      	adds	r1, r6, #4
 8011ec4:	4628      	mov	r0, r5
 8011ec6:	401c      	ands	r4, r3
 8011ec8:	f7ff fe5e 	bl	8011b88 <uxr_serialize_ReadSpecification>
 8011ecc:	b2e4      	uxtb	r4, r4
 8011ece:	4020      	ands	r0, r4
 8011ed0:	bd70      	pop	{r4, r5, r6, pc}
 8011ed2:	bf00      	nop

08011ed4 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8011ed4:	b570      	push	{r4, r5, r6, lr}
 8011ed6:	2202      	movs	r2, #2
 8011ed8:	4605      	mov	r5, r0
 8011eda:	460e      	mov	r6, r1
 8011edc:	f7fb feb4 	bl	800dc48 <ucdr_serialize_array_uint8_t>
 8011ee0:	2202      	movs	r2, #2
 8011ee2:	4604      	mov	r4, r0
 8011ee4:	4628      	mov	r0, r5
 8011ee6:	18b1      	adds	r1, r6, r2
 8011ee8:	f7fb feae 	bl	800dc48 <ucdr_serialize_array_uint8_t>
 8011eec:	4020      	ands	r0, r4
 8011eee:	b2c0      	uxtb	r0, r0
 8011ef0:	bd70      	pop	{r4, r5, r6, pc}
 8011ef2:	bf00      	nop

08011ef4 <uxr_serialize_ACKNACK_Payload>:
 8011ef4:	b570      	push	{r4, r5, r6, lr}
 8011ef6:	460c      	mov	r4, r1
 8011ef8:	4605      	mov	r5, r0
 8011efa:	460e      	mov	r6, r1
 8011efc:	f834 1b02 	ldrh.w	r1, [r4], #2
 8011f00:	f7fc f870 	bl	800dfe4 <ucdr_serialize_uint16_t>
 8011f04:	2202      	movs	r2, #2
 8011f06:	4621      	mov	r1, r4
 8011f08:	4604      	mov	r4, r0
 8011f0a:	4628      	mov	r0, r5
 8011f0c:	f7fb fe9c 	bl	800dc48 <ucdr_serialize_array_uint8_t>
 8011f10:	4603      	mov	r3, r0
 8011f12:	7931      	ldrb	r1, [r6, #4]
 8011f14:	4628      	mov	r0, r5
 8011f16:	401c      	ands	r4, r3
 8011f18:	f7fc f838 	bl	800df8c <ucdr_serialize_uint8_t>
 8011f1c:	b2e4      	uxtb	r4, r4
 8011f1e:	4020      	ands	r0, r4
 8011f20:	bd70      	pop	{r4, r5, r6, pc}
 8011f22:	bf00      	nop

08011f24 <uxr_deserialize_ACKNACK_Payload>:
 8011f24:	b570      	push	{r4, r5, r6, lr}
 8011f26:	460e      	mov	r6, r1
 8011f28:	4605      	mov	r5, r0
 8011f2a:	f7fc f95b 	bl	800e1e4 <ucdr_deserialize_uint16_t>
 8011f2e:	2202      	movs	r2, #2
 8011f30:	4604      	mov	r4, r0
 8011f32:	4628      	mov	r0, r5
 8011f34:	18b1      	adds	r1, r6, r2
 8011f36:	f7fb feeb 	bl	800dd10 <ucdr_deserialize_array_uint8_t>
 8011f3a:	4603      	mov	r3, r0
 8011f3c:	1d31      	adds	r1, r6, #4
 8011f3e:	4628      	mov	r0, r5
 8011f40:	401c      	ands	r4, r3
 8011f42:	f7fc f839 	bl	800dfb8 <ucdr_deserialize_uint8_t>
 8011f46:	b2e4      	uxtb	r4, r4
 8011f48:	4020      	ands	r0, r4
 8011f4a:	bd70      	pop	{r4, r5, r6, pc}

08011f4c <uxr_serialize_HEARTBEAT_Payload>:
 8011f4c:	b570      	push	{r4, r5, r6, lr}
 8011f4e:	460d      	mov	r5, r1
 8011f50:	4606      	mov	r6, r0
 8011f52:	8809      	ldrh	r1, [r1, #0]
 8011f54:	f7fc f846 	bl	800dfe4 <ucdr_serialize_uint16_t>
 8011f58:	8869      	ldrh	r1, [r5, #2]
 8011f5a:	4604      	mov	r4, r0
 8011f5c:	4630      	mov	r0, r6
 8011f5e:	f7fc f841 	bl	800dfe4 <ucdr_serialize_uint16_t>
 8011f62:	4603      	mov	r3, r0
 8011f64:	7929      	ldrb	r1, [r5, #4]
 8011f66:	4630      	mov	r0, r6
 8011f68:	401c      	ands	r4, r3
 8011f6a:	f7fc f80f 	bl	800df8c <ucdr_serialize_uint8_t>
 8011f6e:	b2e4      	uxtb	r4, r4
 8011f70:	4020      	ands	r0, r4
 8011f72:	bd70      	pop	{r4, r5, r6, pc}

08011f74 <uxr_deserialize_HEARTBEAT_Payload>:
 8011f74:	b570      	push	{r4, r5, r6, lr}
 8011f76:	460e      	mov	r6, r1
 8011f78:	4605      	mov	r5, r0
 8011f7a:	f7fc f933 	bl	800e1e4 <ucdr_deserialize_uint16_t>
 8011f7e:	4604      	mov	r4, r0
 8011f80:	1cb1      	adds	r1, r6, #2
 8011f82:	4628      	mov	r0, r5
 8011f84:	f7fc f92e 	bl	800e1e4 <ucdr_deserialize_uint16_t>
 8011f88:	4603      	mov	r3, r0
 8011f8a:	1d31      	adds	r1, r6, #4
 8011f8c:	4628      	mov	r0, r5
 8011f8e:	401c      	ands	r4, r3
 8011f90:	f7fc f812 	bl	800dfb8 <ucdr_deserialize_uint8_t>
 8011f94:	b2e4      	uxtb	r4, r4
 8011f96:	4020      	ands	r0, r4
 8011f98:	bd70      	pop	{r4, r5, r6, pc}
 8011f9a:	bf00      	nop

08011f9c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8011f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fa0:	460e      	mov	r6, r1
 8011fa2:	4605      	mov	r5, r0
 8011fa4:	f7fc feba 	bl	800ed1c <ucdr_deserialize_int32_t>
 8011fa8:	4607      	mov	r7, r0
 8011faa:	1d31      	adds	r1, r6, #4
 8011fac:	4628      	mov	r0, r5
 8011fae:	f7fc fb33 	bl	800e618 <ucdr_deserialize_uint32_t>
 8011fb2:	4680      	mov	r8, r0
 8011fb4:	f106 0108 	add.w	r1, r6, #8
 8011fb8:	4628      	mov	r0, r5
 8011fba:	f7fc feaf 	bl	800ed1c <ucdr_deserialize_int32_t>
 8011fbe:	ea07 0708 	and.w	r7, r7, r8
 8011fc2:	4604      	mov	r4, r0
 8011fc4:	f106 010c 	add.w	r1, r6, #12
 8011fc8:	4628      	mov	r0, r5
 8011fca:	403c      	ands	r4, r7
 8011fcc:	f7fc fb24 	bl	800e618 <ucdr_deserialize_uint32_t>
 8011fd0:	f106 0110 	add.w	r1, r6, #16
 8011fd4:	4004      	ands	r4, r0
 8011fd6:	4628      	mov	r0, r5
 8011fd8:	f7fc fea0 	bl	800ed1c <ucdr_deserialize_int32_t>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	b2e4      	uxtb	r4, r4
 8011fe0:	4628      	mov	r0, r5
 8011fe2:	461d      	mov	r5, r3
 8011fe4:	f106 0114 	add.w	r1, r6, #20
 8011fe8:	f7fc fb16 	bl	800e618 <ucdr_deserialize_uint32_t>
 8011fec:	402c      	ands	r4, r5
 8011fee:	4020      	ands	r0, r4
 8011ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011ff4 <uxr_deserialize_SampleIdentity>:
 8011ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ff8:	4604      	mov	r4, r0
 8011ffa:	460d      	mov	r5, r1
 8011ffc:	220c      	movs	r2, #12
 8011ffe:	f7fb fe87 	bl	800dd10 <ucdr_deserialize_array_uint8_t>
 8012002:	2203      	movs	r2, #3
 8012004:	f105 010c 	add.w	r1, r5, #12
 8012008:	4607      	mov	r7, r0
 801200a:	4620      	mov	r0, r4
 801200c:	f7fb fe80 	bl	800dd10 <ucdr_deserialize_array_uint8_t>
 8012010:	f105 010f 	add.w	r1, r5, #15
 8012014:	4680      	mov	r8, r0
 8012016:	4620      	mov	r0, r4
 8012018:	f7fb ffce 	bl	800dfb8 <ucdr_deserialize_uint8_t>
 801201c:	f105 0110 	add.w	r1, r5, #16
 8012020:	4606      	mov	r6, r0
 8012022:	4620      	mov	r0, r4
 8012024:	f7fc fe7a 	bl	800ed1c <ucdr_deserialize_int32_t>
 8012028:	ea07 0708 	and.w	r7, r7, r8
 801202c:	4603      	mov	r3, r0
 801202e:	4620      	mov	r0, r4
 8012030:	403e      	ands	r6, r7
 8012032:	f105 0114 	add.w	r1, r5, #20
 8012036:	461c      	mov	r4, r3
 8012038:	f7fc faee 	bl	800e618 <ucdr_deserialize_uint32_t>
 801203c:	4034      	ands	r4, r6
 801203e:	4020      	ands	r0, r4
 8012040:	b2c0      	uxtb	r0, r0
 8012042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012046:	bf00      	nop

08012048 <rcl_convert_rmw_ret_to_rcl_ret>:
 8012048:	280b      	cmp	r0, #11
 801204a:	dc0d      	bgt.n	8012068 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801204c:	2800      	cmp	r0, #0
 801204e:	db09      	blt.n	8012064 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012050:	280b      	cmp	r0, #11
 8012052:	d807      	bhi.n	8012064 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012054:	e8df f000 	tbb	[pc, r0]
 8012058:	07060607 	.word	0x07060607
 801205c:	06060606 	.word	0x06060606
 8012060:	07070606 	.word	0x07070606
 8012064:	2001      	movs	r0, #1
 8012066:	4770      	bx	lr
 8012068:	28cb      	cmp	r0, #203	@ 0xcb
 801206a:	bf18      	it	ne
 801206c:	2001      	movne	r0, #1
 801206e:	4770      	bx	lr

08012070 <rcl_get_zero_initialized_context>:
 8012070:	4a03      	ldr	r2, [pc, #12]	@ (8012080 <rcl_get_zero_initialized_context+0x10>)
 8012072:	4603      	mov	r3, r0
 8012074:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012078:	e883 0003 	stmia.w	r3, {r0, r1}
 801207c:	4618      	mov	r0, r3
 801207e:	4770      	bx	lr
 8012080:	08018560 	.word	0x08018560

08012084 <rcl_context_is_valid>:
 8012084:	b118      	cbz	r0, 801208e <rcl_context_is_valid+0xa>
 8012086:	6840      	ldr	r0, [r0, #4]
 8012088:	3800      	subs	r0, #0
 801208a:	bf18      	it	ne
 801208c:	2001      	movne	r0, #1
 801208e:	4770      	bx	lr

08012090 <__cleanup_context>:
 8012090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012094:	4606      	mov	r6, r0
 8012096:	2300      	movs	r3, #0
 8012098:	6800      	ldr	r0, [r0, #0]
 801209a:	6073      	str	r3, [r6, #4]
 801209c:	2800      	cmp	r0, #0
 801209e:	d049      	beq.n	8012134 <__cleanup_context+0xa4>
 80120a0:	6947      	ldr	r7, [r0, #20]
 80120a2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80120a6:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80120aa:	b137      	cbz	r7, 80120ba <__cleanup_context+0x2a>
 80120ac:	3014      	adds	r0, #20
 80120ae:	f000 f9a7 	bl	8012400 <rcl_init_options_fini>
 80120b2:	4607      	mov	r7, r0
 80120b4:	2800      	cmp	r0, #0
 80120b6:	d144      	bne.n	8012142 <__cleanup_context+0xb2>
 80120b8:	6830      	ldr	r0, [r6, #0]
 80120ba:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80120bc:	b143      	cbz	r3, 80120d0 <__cleanup_context+0x40>
 80120be:	3028      	adds	r0, #40	@ 0x28
 80120c0:	f001 fcb0 	bl	8013a24 <rmw_context_fini>
 80120c4:	b118      	cbz	r0, 80120ce <__cleanup_context+0x3e>
 80120c6:	2f00      	cmp	r7, #0
 80120c8:	d03e      	beq.n	8012148 <__cleanup_context+0xb8>
 80120ca:	f7fa fbcd 	bl	800c868 <rcutils_reset_error>
 80120ce:	6830      	ldr	r0, [r6, #0]
 80120d0:	6a03      	ldr	r3, [r0, #32]
 80120d2:	b1db      	cbz	r3, 801210c <__cleanup_context+0x7c>
 80120d4:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80120d8:	2a01      	cmp	r2, #1
 80120da:	f17c 0100 	sbcs.w	r1, ip, #0
 80120de:	db11      	blt.n	8012104 <__cleanup_context+0x74>
 80120e0:	2400      	movs	r4, #0
 80120e2:	4625      	mov	r5, r4
 80120e4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80120e8:	4649      	mov	r1, r9
 80120ea:	b1b8      	cbz	r0, 801211c <__cleanup_context+0x8c>
 80120ec:	47c0      	blx	r8
 80120ee:	6833      	ldr	r3, [r6, #0]
 80120f0:	3401      	adds	r4, #1
 80120f2:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80120f6:	f145 0500 	adc.w	r5, r5, #0
 80120fa:	6a1b      	ldr	r3, [r3, #32]
 80120fc:	4294      	cmp	r4, r2
 80120fe:	eb75 010c 	sbcs.w	r1, r5, ip
 8012102:	dbef      	blt.n	80120e4 <__cleanup_context+0x54>
 8012104:	4618      	mov	r0, r3
 8012106:	4649      	mov	r1, r9
 8012108:	47c0      	blx	r8
 801210a:	6830      	ldr	r0, [r6, #0]
 801210c:	4649      	mov	r1, r9
 801210e:	47c0      	blx	r8
 8012110:	2300      	movs	r3, #0
 8012112:	4638      	mov	r0, r7
 8012114:	e9c6 3300 	strd	r3, r3, [r6]
 8012118:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801211c:	3401      	adds	r4, #1
 801211e:	f145 0500 	adc.w	r5, r5, #0
 8012122:	4294      	cmp	r4, r2
 8012124:	eb75 010c 	sbcs.w	r1, r5, ip
 8012128:	dbdc      	blt.n	80120e4 <__cleanup_context+0x54>
 801212a:	4618      	mov	r0, r3
 801212c:	4649      	mov	r1, r9
 801212e:	47c0      	blx	r8
 8012130:	6830      	ldr	r0, [r6, #0]
 8012132:	e7eb      	b.n	801210c <__cleanup_context+0x7c>
 8012134:	4607      	mov	r7, r0
 8012136:	2300      	movs	r3, #0
 8012138:	4638      	mov	r0, r7
 801213a:	e9c6 3300 	strd	r3, r3, [r6]
 801213e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012142:	f7fa fb91 	bl	800c868 <rcutils_reset_error>
 8012146:	e7b7      	b.n	80120b8 <__cleanup_context+0x28>
 8012148:	f7ff ff7e 	bl	8012048 <rcl_convert_rmw_ret_to_rcl_ret>
 801214c:	4607      	mov	r7, r0
 801214e:	e7bc      	b.n	80120ca <__cleanup_context+0x3a>

08012150 <rcl_init>:
 8012150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012154:	1e05      	subs	r5, r0, #0
 8012156:	b09c      	sub	sp, #112	@ 0x70
 8012158:	460e      	mov	r6, r1
 801215a:	4690      	mov	r8, r2
 801215c:	461f      	mov	r7, r3
 801215e:	f340 809c 	ble.w	801229a <rcl_init+0x14a>
 8012162:	2900      	cmp	r1, #0
 8012164:	f000 809c 	beq.w	80122a0 <rcl_init+0x150>
 8012168:	f1a1 0e04 	sub.w	lr, r1, #4
 801216c:	f04f 0c00 	mov.w	ip, #0
 8012170:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8012174:	f10c 0c01 	add.w	ip, ip, #1
 8012178:	2c00      	cmp	r4, #0
 801217a:	f000 8091 	beq.w	80122a0 <rcl_init+0x150>
 801217e:	4565      	cmp	r5, ip
 8012180:	d1f6      	bne.n	8012170 <rcl_init+0x20>
 8012182:	f1b8 0f00 	cmp.w	r8, #0
 8012186:	f000 808b 	beq.w	80122a0 <rcl_init+0x150>
 801218a:	f8d8 4000 	ldr.w	r4, [r8]
 801218e:	2c00      	cmp	r4, #0
 8012190:	f000 8086 	beq.w	80122a0 <rcl_init+0x150>
 8012194:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 8012198:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801219a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801219e:	6823      	ldr	r3, [r4, #0]
 80121a0:	a817      	add	r0, sp, #92	@ 0x5c
 80121a2:	f8cc 3000 	str.w	r3, [ip]
 80121a6:	f7fa fb3b 	bl	800c820 <rcutils_allocator_is_valid>
 80121aa:	f080 0001 	eor.w	r0, r0, #1
 80121ae:	b2c0      	uxtb	r0, r0
 80121b0:	2800      	cmp	r0, #0
 80121b2:	d175      	bne.n	80122a0 <rcl_init+0x150>
 80121b4:	2f00      	cmp	r7, #0
 80121b6:	d073      	beq.n	80122a0 <rcl_init+0x150>
 80121b8:	683b      	ldr	r3, [r7, #0]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d175      	bne.n	80122aa <rcl_init+0x15a>
 80121be:	2178      	movs	r1, #120	@ 0x78
 80121c0:	2001      	movs	r0, #1
 80121c2:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 80121c6:	4798      	blx	r3
 80121c8:	4604      	mov	r4, r0
 80121ca:	6038      	str	r0, [r7, #0]
 80121cc:	2800      	cmp	r0, #0
 80121ce:	f000 80a0 	beq.w	8012312 <rcl_init+0x1c2>
 80121d2:	a802      	add	r0, sp, #8
 80121d4:	f001 f830 	bl	8013238 <rmw_get_zero_initialized_context>
 80121d8:	a902      	add	r1, sp, #8
 80121da:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80121de:	2250      	movs	r2, #80	@ 0x50
 80121e0:	f004 fdab 	bl	8016d3a <memcpy>
 80121e4:	ac17      	add	r4, sp, #92	@ 0x5c
 80121e6:	f8d7 e000 	ldr.w	lr, [r7]
 80121ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80121ec:	46f4      	mov	ip, lr
 80121ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80121f2:	6823      	ldr	r3, [r4, #0]
 80121f4:	f10e 0114 	add.w	r1, lr, #20
 80121f8:	4640      	mov	r0, r8
 80121fa:	f8cc 3000 	str.w	r3, [ip]
 80121fe:	f000 f929 	bl	8012454 <rcl_init_options_copy>
 8012202:	4604      	mov	r4, r0
 8012204:	2800      	cmp	r0, #0
 8012206:	d144      	bne.n	8012292 <rcl_init+0x142>
 8012208:	f8d7 9000 	ldr.w	r9, [r7]
 801220c:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8012210:	f8c9 0020 	str.w	r0, [r9, #32]
 8012214:	f8c9 5018 	str.w	r5, [r9, #24]
 8012218:	f8c9 801c 	str.w	r8, [r9, #28]
 801221c:	2d00      	cmp	r5, #0
 801221e:	d04b      	beq.n	80122b8 <rcl_init+0x168>
 8012220:	2e00      	cmp	r6, #0
 8012222:	d049      	beq.n	80122b8 <rcl_init+0x168>
 8012224:	2104      	movs	r1, #4
 8012226:	4628      	mov	r0, r5
 8012228:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 801222c:	4798      	blx	r3
 801222e:	f8c9 0020 	str.w	r0, [r9, #32]
 8012232:	f8d7 9000 	ldr.w	r9, [r7]
 8012236:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801223a:	46ca      	mov	sl, r9
 801223c:	b343      	cbz	r3, 8012290 <rcl_init+0x140>
 801223e:	2d01      	cmp	r5, #1
 8012240:	f178 0300 	sbcs.w	r3, r8, #0
 8012244:	db38      	blt.n	80122b8 <rcl_init+0x168>
 8012246:	2400      	movs	r4, #0
 8012248:	3e04      	subs	r6, #4
 801224a:	46a1      	mov	r9, r4
 801224c:	e00b      	b.n	8012266 <rcl_init+0x116>
 801224e:	6831      	ldr	r1, [r6, #0]
 8012250:	f004 fd73 	bl	8016d3a <memcpy>
 8012254:	3401      	adds	r4, #1
 8012256:	f149 0900 	adc.w	r9, r9, #0
 801225a:	45c8      	cmp	r8, r9
 801225c:	bf08      	it	eq
 801225e:	42a5      	cmpeq	r5, r4
 8012260:	d028      	beq.n	80122b4 <rcl_init+0x164>
 8012262:	f8d7 a000 	ldr.w	sl, [r7]
 8012266:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801226a:	f7ed fff3 	bl	8000254 <strlen>
 801226e:	1c42      	adds	r2, r0, #1
 8012270:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012272:	4610      	mov	r0, r2
 8012274:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8012276:	f8da a020 	ldr.w	sl, [sl, #32]
 801227a:	9201      	str	r2, [sp, #4]
 801227c:	4798      	blx	r3
 801227e:	683b      	ldr	r3, [r7, #0]
 8012280:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8012284:	6a1b      	ldr	r3, [r3, #32]
 8012286:	9a01      	ldr	r2, [sp, #4]
 8012288:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801228c:	2800      	cmp	r0, #0
 801228e:	d1de      	bne.n	801224e <rcl_init+0xfe>
 8012290:	240a      	movs	r4, #10
 8012292:	4638      	mov	r0, r7
 8012294:	f7ff fefc 	bl	8012090 <__cleanup_context>
 8012298:	e003      	b.n	80122a2 <rcl_init+0x152>
 801229a:	2900      	cmp	r1, #0
 801229c:	f43f af71 	beq.w	8012182 <rcl_init+0x32>
 80122a0:	240b      	movs	r4, #11
 80122a2:	4620      	mov	r0, r4
 80122a4:	b01c      	add	sp, #112	@ 0x70
 80122a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122aa:	2464      	movs	r4, #100	@ 0x64
 80122ac:	4620      	mov	r0, r4
 80122ae:	b01c      	add	sp, #112	@ 0x70
 80122b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122b4:	f8d7 9000 	ldr.w	r9, [r7]
 80122b8:	491c      	ldr	r1, [pc, #112]	@ (801232c <rcl_init+0x1dc>)
 80122ba:	680b      	ldr	r3, [r1, #0]
 80122bc:	3301      	adds	r3, #1
 80122be:	d023      	beq.n	8012308 <rcl_init+0x1b8>
 80122c0:	461a      	mov	r2, r3
 80122c2:	2400      	movs	r4, #0
 80122c4:	600b      	str	r3, [r1, #0]
 80122c6:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80122ca:	607b      	str	r3, [r7, #4]
 80122cc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80122ce:	6182      	str	r2, [r0, #24]
 80122d0:	3301      	adds	r3, #1
 80122d2:	61c4      	str	r4, [r0, #28]
 80122d4:	d01f      	beq.n	8012316 <rcl_init+0x1c6>
 80122d6:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80122da:	b94b      	cbnz	r3, 80122f0 <rcl_init+0x1a0>
 80122dc:	3030      	adds	r0, #48	@ 0x30
 80122de:	f000 f927 	bl	8012530 <rcl_get_localhost_only>
 80122e2:	4604      	mov	r4, r0
 80122e4:	2800      	cmp	r0, #0
 80122e6:	d1d4      	bne.n	8012292 <rcl_init+0x142>
 80122e8:	f8d7 9000 	ldr.w	r9, [r7]
 80122ec:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80122f0:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 80122f4:	3018      	adds	r0, #24
 80122f6:	f001 fa5f 	bl	80137b8 <rmw_init>
 80122fa:	4604      	mov	r4, r0
 80122fc:	2800      	cmp	r0, #0
 80122fe:	d0d0      	beq.n	80122a2 <rcl_init+0x152>
 8012300:	f7ff fea2 	bl	8012048 <rcl_convert_rmw_ret_to_rcl_ret>
 8012304:	4604      	mov	r4, r0
 8012306:	e7c4      	b.n	8012292 <rcl_init+0x142>
 8012308:	2201      	movs	r2, #1
 801230a:	461c      	mov	r4, r3
 801230c:	600a      	str	r2, [r1, #0]
 801230e:	4613      	mov	r3, r2
 8012310:	e7d9      	b.n	80122c6 <rcl_init+0x176>
 8012312:	240a      	movs	r4, #10
 8012314:	e7c5      	b.n	80122a2 <rcl_init+0x152>
 8012316:	3024      	adds	r0, #36	@ 0x24
 8012318:	f003 faac 	bl	8015874 <rcl_get_default_domain_id>
 801231c:	4604      	mov	r4, r0
 801231e:	2800      	cmp	r0, #0
 8012320:	d1b7      	bne.n	8012292 <rcl_init+0x142>
 8012322:	f8d7 9000 	ldr.w	r9, [r7]
 8012326:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801232a:	e7d4      	b.n	80122d6 <rcl_init+0x186>
 801232c:	2000ebb4 	.word	0x2000ebb4

08012330 <rcl_get_zero_initialized_init_options>:
 8012330:	2000      	movs	r0, #0
 8012332:	4770      	bx	lr

08012334 <rcl_init_options_init>:
 8012334:	b084      	sub	sp, #16
 8012336:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012338:	b097      	sub	sp, #92	@ 0x5c
 801233a:	ae1d      	add	r6, sp, #116	@ 0x74
 801233c:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8012340:	2800      	cmp	r0, #0
 8012342:	d058      	beq.n	80123f6 <rcl_init_options_init+0xc2>
 8012344:	6803      	ldr	r3, [r0, #0]
 8012346:	4605      	mov	r5, r0
 8012348:	b133      	cbz	r3, 8012358 <rcl_init_options_init+0x24>
 801234a:	2464      	movs	r4, #100	@ 0x64
 801234c:	4620      	mov	r0, r4
 801234e:	b017      	add	sp, #92	@ 0x5c
 8012350:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012354:	b004      	add	sp, #16
 8012356:	4770      	bx	lr
 8012358:	4630      	mov	r0, r6
 801235a:	f7fa fa61 	bl	800c820 <rcutils_allocator_is_valid>
 801235e:	2800      	cmp	r0, #0
 8012360:	d049      	beq.n	80123f6 <rcl_init_options_init+0xc2>
 8012362:	46b4      	mov	ip, r6
 8012364:	ac11      	add	r4, sp, #68	@ 0x44
 8012366:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801236a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801236c:	f8dc 3000 	ldr.w	r3, [ip]
 8012370:	2050      	movs	r0, #80	@ 0x50
 8012372:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8012374:	6023      	str	r3, [r4, #0]
 8012376:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012378:	4798      	blx	r3
 801237a:	4604      	mov	r4, r0
 801237c:	6028      	str	r0, [r5, #0]
 801237e:	2800      	cmp	r0, #0
 8012380:	d03b      	beq.n	80123fa <rcl_init_options_init+0xc6>
 8012382:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8012386:	4686      	mov	lr, r0
 8012388:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801238c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012390:	f8dc 3000 	ldr.w	r3, [ip]
 8012394:	a802      	add	r0, sp, #8
 8012396:	f8ce 3000 	str.w	r3, [lr]
 801239a:	f000 ff61 	bl	8013260 <rmw_get_zero_initialized_init_options>
 801239e:	f10d 0e08 	add.w	lr, sp, #8
 80123a2:	f104 0c18 	add.w	ip, r4, #24
 80123a6:	682f      	ldr	r7, [r5, #0]
 80123a8:	ac20      	add	r4, sp, #128	@ 0x80
 80123aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80123ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80123b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80123b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80123ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80123be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80123c2:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80123c6:	e88c 0003 	stmia.w	ip, {r0, r1}
 80123ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80123ce:	e88d 0003 	stmia.w	sp, {r0, r1}
 80123d2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80123d6:	f107 0018 	add.w	r0, r7, #24
 80123da:	f001 f8cd 	bl	8013578 <rmw_init_options_init>
 80123de:	4604      	mov	r4, r0
 80123e0:	2800      	cmp	r0, #0
 80123e2:	d0b3      	beq.n	801234c <rcl_init_options_init+0x18>
 80123e4:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80123e6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80123e8:	6828      	ldr	r0, [r5, #0]
 80123ea:	4798      	blx	r3
 80123ec:	4620      	mov	r0, r4
 80123ee:	f7ff fe2b 	bl	8012048 <rcl_convert_rmw_ret_to_rcl_ret>
 80123f2:	4604      	mov	r4, r0
 80123f4:	e7aa      	b.n	801234c <rcl_init_options_init+0x18>
 80123f6:	240b      	movs	r4, #11
 80123f8:	e7a8      	b.n	801234c <rcl_init_options_init+0x18>
 80123fa:	240a      	movs	r4, #10
 80123fc:	e7a6      	b.n	801234c <rcl_init_options_init+0x18>
 80123fe:	bf00      	nop

08012400 <rcl_init_options_fini>:
 8012400:	b530      	push	{r4, r5, lr}
 8012402:	b087      	sub	sp, #28
 8012404:	b1f0      	cbz	r0, 8012444 <rcl_init_options_fini+0x44>
 8012406:	6803      	ldr	r3, [r0, #0]
 8012408:	4604      	mov	r4, r0
 801240a:	b1db      	cbz	r3, 8012444 <rcl_init_options_fini+0x44>
 801240c:	469c      	mov	ip, r3
 801240e:	f10d 0e04 	add.w	lr, sp, #4
 8012412:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012416:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801241a:	f8dc 3000 	ldr.w	r3, [ip]
 801241e:	a801      	add	r0, sp, #4
 8012420:	f8ce 3000 	str.w	r3, [lr]
 8012424:	f7fa f9fc 	bl	800c820 <rcutils_allocator_is_valid>
 8012428:	b160      	cbz	r0, 8012444 <rcl_init_options_fini+0x44>
 801242a:	6820      	ldr	r0, [r4, #0]
 801242c:	3018      	adds	r0, #24
 801242e:	f001 f97b 	bl	8013728 <rmw_init_options_fini>
 8012432:	4605      	mov	r5, r0
 8012434:	b950      	cbnz	r0, 801244c <rcl_init_options_fini+0x4c>
 8012436:	6820      	ldr	r0, [r4, #0]
 8012438:	9b02      	ldr	r3, [sp, #8]
 801243a:	9905      	ldr	r1, [sp, #20]
 801243c:	4798      	blx	r3
 801243e:	4628      	mov	r0, r5
 8012440:	b007      	add	sp, #28
 8012442:	bd30      	pop	{r4, r5, pc}
 8012444:	250b      	movs	r5, #11
 8012446:	4628      	mov	r0, r5
 8012448:	b007      	add	sp, #28
 801244a:	bd30      	pop	{r4, r5, pc}
 801244c:	f7ff fdfc 	bl	8012048 <rcl_convert_rmw_ret_to_rcl_ret>
 8012450:	4605      	mov	r5, r0
 8012452:	e7f8      	b.n	8012446 <rcl_init_options_fini+0x46>

08012454 <rcl_init_options_copy>:
 8012454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012458:	b094      	sub	sp, #80	@ 0x50
 801245a:	2800      	cmp	r0, #0
 801245c:	d05b      	beq.n	8012516 <rcl_init_options_copy+0xc2>
 801245e:	4604      	mov	r4, r0
 8012460:	6800      	ldr	r0, [r0, #0]
 8012462:	2800      	cmp	r0, #0
 8012464:	d057      	beq.n	8012516 <rcl_init_options_copy+0xc2>
 8012466:	460e      	mov	r6, r1
 8012468:	f7fa f9da 	bl	800c820 <rcutils_allocator_is_valid>
 801246c:	2e00      	cmp	r6, #0
 801246e:	d052      	beq.n	8012516 <rcl_init_options_copy+0xc2>
 8012470:	f080 0001 	eor.w	r0, r0, #1
 8012474:	b2c0      	uxtb	r0, r0
 8012476:	2800      	cmp	r0, #0
 8012478:	d14d      	bne.n	8012516 <rcl_init_options_copy+0xc2>
 801247a:	6833      	ldr	r3, [r6, #0]
 801247c:	b123      	cbz	r3, 8012488 <rcl_init_options_copy+0x34>
 801247e:	2464      	movs	r4, #100	@ 0x64
 8012480:	4620      	mov	r0, r4
 8012482:	b014      	add	sp, #80	@ 0x50
 8012484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012488:	6827      	ldr	r7, [r4, #0]
 801248a:	ad0f      	add	r5, sp, #60	@ 0x3c
 801248c:	46bc      	mov	ip, r7
 801248e:	f8d7 8000 	ldr.w	r8, [r7]
 8012492:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012496:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012498:	f8dc 3000 	ldr.w	r3, [ip]
 801249c:	2050      	movs	r0, #80	@ 0x50
 801249e:	4619      	mov	r1, r3
 80124a0:	602b      	str	r3, [r5, #0]
 80124a2:	47c0      	blx	r8
 80124a4:	4605      	mov	r5, r0
 80124a6:	6030      	str	r0, [r6, #0]
 80124a8:	b3d0      	cbz	r0, 8012520 <rcl_init_options_copy+0xcc>
 80124aa:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 80124ae:	4686      	mov	lr, r0
 80124b0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80124b4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80124b8:	f8dc 3000 	ldr.w	r3, [ip]
 80124bc:	4668      	mov	r0, sp
 80124be:	f8ce 3000 	str.w	r3, [lr]
 80124c2:	f000 fecd 	bl	8013260 <rmw_get_zero_initialized_init_options>
 80124c6:	46ee      	mov	lr, sp
 80124c8:	f105 0c18 	add.w	ip, r5, #24
 80124cc:	6824      	ldr	r4, [r4, #0]
 80124ce:	6835      	ldr	r5, [r6, #0]
 80124d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80124d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80124d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80124dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80124e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80124e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80124e8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80124ec:	e88c 0003 	stmia.w	ip, {r0, r1}
 80124f0:	f104 0018 	add.w	r0, r4, #24
 80124f4:	f105 0118 	add.w	r1, r5, #24
 80124f8:	f001 f8a0 	bl	801363c <rmw_init_options_copy>
 80124fc:	4604      	mov	r4, r0
 80124fe:	2800      	cmp	r0, #0
 8012500:	d0be      	beq.n	8012480 <rcl_init_options_copy+0x2c>
 8012502:	f7fa f99b 	bl	800c83c <rcutils_get_error_string>
 8012506:	f7fa f9af 	bl	800c868 <rcutils_reset_error>
 801250a:	4630      	mov	r0, r6
 801250c:	f7ff ff78 	bl	8012400 <rcl_init_options_fini>
 8012510:	b140      	cbz	r0, 8012524 <rcl_init_options_copy+0xd0>
 8012512:	4604      	mov	r4, r0
 8012514:	e7b4      	b.n	8012480 <rcl_init_options_copy+0x2c>
 8012516:	240b      	movs	r4, #11
 8012518:	4620      	mov	r0, r4
 801251a:	b014      	add	sp, #80	@ 0x50
 801251c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012520:	240a      	movs	r4, #10
 8012522:	e7ad      	b.n	8012480 <rcl_init_options_copy+0x2c>
 8012524:	4620      	mov	r0, r4
 8012526:	b014      	add	sp, #80	@ 0x50
 8012528:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801252c:	f7ff bd8c 	b.w	8012048 <rcl_convert_rmw_ret_to_rcl_ret>

08012530 <rcl_get_localhost_only>:
 8012530:	b510      	push	{r4, lr}
 8012532:	2300      	movs	r3, #0
 8012534:	b082      	sub	sp, #8
 8012536:	9301      	str	r3, [sp, #4]
 8012538:	b1b8      	cbz	r0, 801256a <rcl_get_localhost_only+0x3a>
 801253a:	4604      	mov	r4, r0
 801253c:	a901      	add	r1, sp, #4
 801253e:	480c      	ldr	r0, [pc, #48]	@ (8012570 <rcl_get_localhost_only+0x40>)
 8012540:	f000 fb70 	bl	8012c24 <rcutils_get_env>
 8012544:	b110      	cbz	r0, 801254c <rcl_get_localhost_only+0x1c>
 8012546:	2001      	movs	r0, #1
 8012548:	b002      	add	sp, #8
 801254a:	bd10      	pop	{r4, pc}
 801254c:	9b01      	ldr	r3, [sp, #4]
 801254e:	b113      	cbz	r3, 8012556 <rcl_get_localhost_only+0x26>
 8012550:	781a      	ldrb	r2, [r3, #0]
 8012552:	2a31      	cmp	r2, #49	@ 0x31
 8012554:	d004      	beq.n	8012560 <rcl_get_localhost_only+0x30>
 8012556:	2302      	movs	r3, #2
 8012558:	2000      	movs	r0, #0
 801255a:	7023      	strb	r3, [r4, #0]
 801255c:	b002      	add	sp, #8
 801255e:	bd10      	pop	{r4, pc}
 8012560:	785b      	ldrb	r3, [r3, #1]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d1f7      	bne.n	8012556 <rcl_get_localhost_only+0x26>
 8012566:	2301      	movs	r3, #1
 8012568:	e7f6      	b.n	8012558 <rcl_get_localhost_only+0x28>
 801256a:	200b      	movs	r0, #11
 801256c:	b002      	add	sp, #8
 801256e:	bd10      	pop	{r4, pc}
 8012570:	08017fd0 	.word	0x08017fd0

08012574 <rcl_get_zero_initialized_node>:
 8012574:	4a03      	ldr	r2, [pc, #12]	@ (8012584 <rcl_get_zero_initialized_node+0x10>)
 8012576:	4603      	mov	r3, r0
 8012578:	e892 0003 	ldmia.w	r2, {r0, r1}
 801257c:	e883 0003 	stmia.w	r3, {r0, r1}
 8012580:	4618      	mov	r0, r3
 8012582:	4770      	bx	lr
 8012584:	08018568 	.word	0x08018568

08012588 <rcl_node_init>:
 8012588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801258c:	b0a9      	sub	sp, #164	@ 0xa4
 801258e:	4604      	mov	r4, r0
 8012590:	460e      	mov	r6, r1
 8012592:	4615      	mov	r5, r2
 8012594:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8012598:	a823      	add	r0, sp, #140	@ 0x8c
 801259a:	461f      	mov	r7, r3
 801259c:	f003 fb90 	bl	8015cc0 <rcl_guard_condition_get_default_options>
 80125a0:	f1b8 0f00 	cmp.w	r8, #0
 80125a4:	f000 80f3 	beq.w	801278e <rcl_node_init+0x206>
 80125a8:	4640      	mov	r0, r8
 80125aa:	f7fa f939 	bl	800c820 <rcutils_allocator_is_valid>
 80125ae:	2d00      	cmp	r5, #0
 80125b0:	bf18      	it	ne
 80125b2:	2c00      	cmpne	r4, #0
 80125b4:	f080 0001 	eor.w	r0, r0, #1
 80125b8:	bf0c      	ite	eq
 80125ba:	f04f 0c01 	moveq.w	ip, #1
 80125be:	f04f 0c00 	movne.w	ip, #0
 80125c2:	2e00      	cmp	r6, #0
 80125c4:	bf08      	it	eq
 80125c6:	f04c 0c01 	orreq.w	ip, ip, #1
 80125ca:	ea4c 0c00 	orr.w	ip, ip, r0
 80125ce:	f01c 09ff 	ands.w	r9, ip, #255	@ 0xff
 80125d2:	f040 80dc 	bne.w	801278e <rcl_node_init+0x206>
 80125d6:	f8d4 a004 	ldr.w	sl, [r4, #4]
 80125da:	f1ba 0f00 	cmp.w	sl, #0
 80125de:	f040 80fc 	bne.w	80127da <rcl_node_init+0x252>
 80125e2:	2f00      	cmp	r7, #0
 80125e4:	f000 80d3 	beq.w	801278e <rcl_node_init+0x206>
 80125e8:	4638      	mov	r0, r7
 80125ea:	f7ff fd4b 	bl	8012084 <rcl_context_is_valid>
 80125ee:	4683      	mov	fp, r0
 80125f0:	2800      	cmp	r0, #0
 80125f2:	f000 80d2 	beq.w	801279a <rcl_node_init+0x212>
 80125f6:	4652      	mov	r2, sl
 80125f8:	4630      	mov	r0, r6
 80125fa:	a922      	add	r1, sp, #136	@ 0x88
 80125fc:	f8cd a088 	str.w	sl, [sp, #136]	@ 0x88
 8012600:	f000 ff30 	bl	8013464 <rmw_validate_node_name>
 8012604:	4682      	mov	sl, r0
 8012606:	2800      	cmp	r0, #0
 8012608:	f040 80c3 	bne.w	8012792 <rcl_node_init+0x20a>
 801260c:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801260e:	2800      	cmp	r0, #0
 8012610:	f040 80f1 	bne.w	80127f6 <rcl_node_init+0x26e>
 8012614:	4628      	mov	r0, r5
 8012616:	f7ed fe1d 	bl	8000254 <strlen>
 801261a:	2800      	cmp	r0, #0
 801261c:	f040 80c0 	bne.w	80127a0 <rcl_node_init+0x218>
 8012620:	4d79      	ldr	r5, [pc, #484]	@ (8012808 <rcl_node_init+0x280>)
 8012622:	a922      	add	r1, sp, #136	@ 0x88
 8012624:	2200      	movs	r2, #0
 8012626:	4628      	mov	r0, r5
 8012628:	f000 fefe 	bl	8013428 <rmw_validate_namespace>
 801262c:	4682      	mov	sl, r0
 801262e:	2800      	cmp	r0, #0
 8012630:	f040 80af 	bne.w	8012792 <rcl_node_init+0x20a>
 8012634:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8012636:	2800      	cmp	r0, #0
 8012638:	f040 80d5 	bne.w	80127e6 <rcl_node_init+0x25e>
 801263c:	f8d8 3000 	ldr.w	r3, [r8]
 8012640:	2078      	movs	r0, #120	@ 0x78
 8012642:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012646:	4798      	blx	r3
 8012648:	4682      	mov	sl, r0
 801264a:	6060      	str	r0, [r4, #4]
 801264c:	2800      	cmp	r0, #0
 801264e:	f000 80cf 	beq.w	80127f0 <rcl_node_init+0x268>
 8012652:	2200      	movs	r2, #0
 8012654:	2300      	movs	r3, #0
 8012656:	a808      	add	r0, sp, #32
 8012658:	e9ca 231a 	strd	r2, r3, [sl, #104]	@ 0x68
 801265c:	e9ca 231c 	strd	r2, r3, [sl, #112]	@ 0x70
 8012660:	f000 f902 	bl	8012868 <rcl_node_get_default_options>
 8012664:	a908      	add	r1, sp, #32
 8012666:	4650      	mov	r0, sl
 8012668:	2268      	movs	r2, #104	@ 0x68
 801266a:	f004 fb66 	bl	8016d3a <memcpy>
 801266e:	6861      	ldr	r1, [r4, #4]
 8012670:	4640      	mov	r0, r8
 8012672:	6027      	str	r7, [r4, #0]
 8012674:	f000 f906 	bl	8012884 <rcl_node_options_copy>
 8012678:	2800      	cmp	r0, #0
 801267a:	d158      	bne.n	801272e <rcl_node_init+0x1a6>
 801267c:	4628      	mov	r0, r5
 801267e:	f7ed fde9 	bl	8000254 <strlen>
 8012682:	4428      	add	r0, r5
 8012684:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8012688:	e9cd 5603 	strd	r5, r6, [sp, #12]
 801268c:	2b2f      	cmp	r3, #47	@ 0x2f
 801268e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012692:	9300      	str	r3, [sp, #0]
 8012694:	bf0c      	ite	eq
 8012696:	4b5d      	ldreq	r3, [pc, #372]	@ (801280c <rcl_node_init+0x284>)
 8012698:	4b5d      	ldrne	r3, [pc, #372]	@ (8012810 <rcl_node_init+0x288>)
 801269a:	9302      	str	r3, [sp, #8]
 801269c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80126a0:	9301      	str	r3, [sp, #4]
 80126a2:	f8d4 a004 	ldr.w	sl, [r4, #4]
 80126a6:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80126aa:	f000 fad3 	bl	8012c54 <rcutils_format_string_limit>
 80126ae:	6823      	ldr	r3, [r4, #0]
 80126b0:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 80126b4:	4631      	mov	r1, r6
 80126b6:	6818      	ldr	r0, [r3, #0]
 80126b8:	462a      	mov	r2, r5
 80126ba:	6866      	ldr	r6, [r4, #4]
 80126bc:	3028      	adds	r0, #40	@ 0x28
 80126be:	f001 fad5 	bl	8013c6c <rmw_create_node>
 80126c2:	6863      	ldr	r3, [r4, #4]
 80126c4:	66b0      	str	r0, [r6, #104]	@ 0x68
 80126c6:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80126c8:	2800      	cmp	r0, #0
 80126ca:	d032      	beq.n	8012732 <rcl_node_init+0x1aa>
 80126cc:	f001 fb5e 	bl	8013d8c <rmw_node_get_graph_guard_condition>
 80126d0:	4682      	mov	sl, r0
 80126d2:	b360      	cbz	r0, 801272e <rcl_node_init+0x1a6>
 80126d4:	f8d8 3000 	ldr.w	r3, [r8]
 80126d8:	2008      	movs	r0, #8
 80126da:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80126de:	6866      	ldr	r6, [r4, #4]
 80126e0:	4798      	blx	r3
 80126e2:	6863      	ldr	r3, [r4, #4]
 80126e4:	66f0      	str	r0, [r6, #108]	@ 0x6c
 80126e6:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 80126ea:	f1bb 0f00 	cmp.w	fp, #0
 80126ee:	d020      	beq.n	8012732 <rcl_node_init+0x1aa>
 80126f0:	a806      	add	r0, sp, #24
 80126f2:	ae23      	add	r6, sp, #140	@ 0x8c
 80126f4:	f003 fa58 	bl	8015ba8 <rcl_get_zero_initialized_guard_condition>
 80126f8:	a806      	add	r0, sp, #24
 80126fa:	6863      	ldr	r3, [r4, #4]
 80126fc:	46c4      	mov	ip, r8
 80126fe:	c803      	ldmia	r0, {r0, r1}
 8012700:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8012704:	e88b 0003 	stmia.w	fp, {r0, r1}
 8012708:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801270c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801270e:	f8dc 3000 	ldr.w	r3, [ip]
 8012712:	6033      	str	r3, [r6, #0]
 8012714:	ab28      	add	r3, sp, #160	@ 0xa0
 8012716:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 801271a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801271e:	4651      	mov	r1, sl
 8012720:	463a      	mov	r2, r7
 8012722:	4670      	mov	r0, lr
 8012724:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012726:	f003 fa49 	bl	8015bbc <rcl_guard_condition_init_from_rmw>
 801272a:	4682      	mov	sl, r0
 801272c:	b328      	cbz	r0, 801277a <rcl_node_init+0x1f2>
 801272e:	6863      	ldr	r3, [r4, #4]
 8012730:	b1f3      	cbz	r3, 8012770 <rcl_node_init+0x1e8>
 8012732:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8012734:	b128      	cbz	r0, 8012742 <rcl_node_init+0x1ba>
 8012736:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801273a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801273e:	4798      	blx	r3
 8012740:	6863      	ldr	r3, [r4, #4]
 8012742:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8012744:	b110      	cbz	r0, 801274c <rcl_node_init+0x1c4>
 8012746:	f001 faa3 	bl	8013c90 <rmw_destroy_node>
 801274a:	6863      	ldr	r3, [r4, #4]
 801274c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801274e:	b148      	cbz	r0, 8012764 <rcl_node_init+0x1dc>
 8012750:	f003 fa90 	bl	8015c74 <rcl_guard_condition_fini>
 8012754:	6863      	ldr	r3, [r4, #4]
 8012756:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801275a:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801275c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012760:	4798      	blx	r3
 8012762:	6863      	ldr	r3, [r4, #4]
 8012764:	4618      	mov	r0, r3
 8012766:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801276a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801276e:	4798      	blx	r3
 8012770:	2300      	movs	r3, #0
 8012772:	f04f 0a01 	mov.w	sl, #1
 8012776:	e9c4 3300 	strd	r3, r3, [r4]
 801277a:	f1b9 0f00 	cmp.w	r9, #0
 801277e:	d008      	beq.n	8012792 <rcl_node_init+0x20a>
 8012780:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012784:	4628      	mov	r0, r5
 8012786:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801278a:	4798      	blx	r3
 801278c:	e001      	b.n	8012792 <rcl_node_init+0x20a>
 801278e:	f04f 0a0b 	mov.w	sl, #11
 8012792:	4650      	mov	r0, sl
 8012794:	b029      	add	sp, #164	@ 0xa4
 8012796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801279a:	f04f 0a65 	mov.w	sl, #101	@ 0x65
 801279e:	e7f8      	b.n	8012792 <rcl_node_init+0x20a>
 80127a0:	782b      	ldrb	r3, [r5, #0]
 80127a2:	2b2f      	cmp	r3, #47	@ 0x2f
 80127a4:	f43f af3d 	beq.w	8012622 <rcl_node_init+0x9a>
 80127a8:	9503      	str	r5, [sp, #12]
 80127aa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80127ae:	9300      	str	r3, [sp, #0]
 80127b0:	4b18      	ldr	r3, [pc, #96]	@ (8012814 <rcl_node_init+0x28c>)
 80127b2:	9302      	str	r3, [sp, #8]
 80127b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80127b8:	9301      	str	r3, [sp, #4]
 80127ba:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80127be:	f000 fa49 	bl	8012c54 <rcutils_format_string_limit>
 80127c2:	4605      	mov	r5, r0
 80127c4:	b1e0      	cbz	r0, 8012800 <rcl_node_init+0x278>
 80127c6:	2200      	movs	r2, #0
 80127c8:	a922      	add	r1, sp, #136	@ 0x88
 80127ca:	9222      	str	r2, [sp, #136]	@ 0x88
 80127cc:	f000 fe2c 	bl	8013428 <rmw_validate_namespace>
 80127d0:	4682      	mov	sl, r0
 80127d2:	2800      	cmp	r0, #0
 80127d4:	d1d4      	bne.n	8012780 <rcl_node_init+0x1f8>
 80127d6:	46d9      	mov	r9, fp
 80127d8:	e72c      	b.n	8012634 <rcl_node_init+0xac>
 80127da:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 80127de:	4650      	mov	r0, sl
 80127e0:	b029      	add	sp, #164	@ 0xa4
 80127e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127e6:	f04f 0aca 	mov.w	sl, #202	@ 0xca
 80127ea:	f000 fe2f 	bl	801344c <rmw_namespace_validation_result_string>
 80127ee:	e7c4      	b.n	801277a <rcl_node_init+0x1f2>
 80127f0:	f04f 0a0a 	mov.w	sl, #10
 80127f4:	e7c1      	b.n	801277a <rcl_node_init+0x1f2>
 80127f6:	f04f 0ac9 	mov.w	sl, #201	@ 0xc9
 80127fa:	f000 fe87 	bl	801350c <rmw_node_name_validation_result_string>
 80127fe:	e7c8      	b.n	8012792 <rcl_node_init+0x20a>
 8012800:	f04f 0a0a 	mov.w	sl, #10
 8012804:	e7c5      	b.n	8012792 <rcl_node_init+0x20a>
 8012806:	bf00      	nop
 8012808:	08017fe8 	.word	0x08017fe8
 801280c:	08017c64 	.word	0x08017c64
 8012810:	08017ff0 	.word	0x08017ff0
 8012814:	08017fec 	.word	0x08017fec

08012818 <rcl_node_is_valid>:
 8012818:	b130      	cbz	r0, 8012828 <rcl_node_is_valid+0x10>
 801281a:	6843      	ldr	r3, [r0, #4]
 801281c:	b123      	cbz	r3, 8012828 <rcl_node_is_valid+0x10>
 801281e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012820:	b113      	cbz	r3, 8012828 <rcl_node_is_valid+0x10>
 8012822:	6800      	ldr	r0, [r0, #0]
 8012824:	f7ff bc2e 	b.w	8012084 <rcl_context_is_valid>
 8012828:	2000      	movs	r0, #0
 801282a:	4770      	bx	lr

0801282c <rcl_node_get_name>:
 801282c:	b120      	cbz	r0, 8012838 <rcl_node_get_name+0xc>
 801282e:	6840      	ldr	r0, [r0, #4]
 8012830:	b110      	cbz	r0, 8012838 <rcl_node_get_name+0xc>
 8012832:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8012834:	b100      	cbz	r0, 8012838 <rcl_node_get_name+0xc>
 8012836:	6880      	ldr	r0, [r0, #8]
 8012838:	4770      	bx	lr
 801283a:	bf00      	nop

0801283c <rcl_node_get_namespace>:
 801283c:	b120      	cbz	r0, 8012848 <rcl_node_get_namespace+0xc>
 801283e:	6840      	ldr	r0, [r0, #4]
 8012840:	b110      	cbz	r0, 8012848 <rcl_node_get_namespace+0xc>
 8012842:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8012844:	b100      	cbz	r0, 8012848 <rcl_node_get_namespace+0xc>
 8012846:	68c0      	ldr	r0, [r0, #12]
 8012848:	4770      	bx	lr
 801284a:	bf00      	nop

0801284c <rcl_node_get_options>:
 801284c:	b128      	cbz	r0, 801285a <rcl_node_get_options+0xe>
 801284e:	6840      	ldr	r0, [r0, #4]
 8012850:	b118      	cbz	r0, 801285a <rcl_node_get_options+0xe>
 8012852:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8012854:	2b00      	cmp	r3, #0
 8012856:	bf08      	it	eq
 8012858:	2000      	moveq	r0, #0
 801285a:	4770      	bx	lr

0801285c <rcl_node_get_rmw_handle>:
 801285c:	b110      	cbz	r0, 8012864 <rcl_node_get_rmw_handle+0x8>
 801285e:	6840      	ldr	r0, [r0, #4]
 8012860:	b100      	cbz	r0, 8012864 <rcl_node_get_rmw_handle+0x8>
 8012862:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8012864:	4770      	bx	lr
 8012866:	bf00      	nop

08012868 <rcl_node_get_default_options>:
 8012868:	b510      	push	{r4, lr}
 801286a:	4604      	mov	r4, r0
 801286c:	2268      	movs	r2, #104	@ 0x68
 801286e:	2100      	movs	r1, #0
 8012870:	f004 f99a 	bl	8016ba8 <memset>
 8012874:	4620      	mov	r0, r4
 8012876:	f7f9 ffc5 	bl	800c804 <rcutils_get_default_allocator>
 801287a:	2301      	movs	r3, #1
 801287c:	4620      	mov	r0, r4
 801287e:	7523      	strb	r3, [r4, #20]
 8012880:	bd10      	pop	{r4, pc}
 8012882:	bf00      	nop

08012884 <rcl_node_options_copy>:
 8012884:	2800      	cmp	r0, #0
 8012886:	bf18      	it	ne
 8012888:	4288      	cmpne	r0, r1
 801288a:	d01b      	beq.n	80128c4 <rcl_node_options_copy+0x40>
 801288c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801288e:	fab1 f681 	clz	r6, r1
 8012892:	460c      	mov	r4, r1
 8012894:	0976      	lsrs	r6, r6, #5
 8012896:	b199      	cbz	r1, 80128c0 <rcl_node_options_copy+0x3c>
 8012898:	4605      	mov	r5, r0
 801289a:	8a87      	ldrh	r7, [r0, #20]
 801289c:	4684      	mov	ip, r0
 801289e:	468e      	mov	lr, r1
 80128a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80128a2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80128a6:	682b      	ldr	r3, [r5, #0]
 80128a8:	2250      	movs	r2, #80	@ 0x50
 80128aa:	f10c 0118 	add.w	r1, ip, #24
 80128ae:	f104 0018 	add.w	r0, r4, #24
 80128b2:	f8ce 3000 	str.w	r3, [lr]
 80128b6:	82a7      	strh	r7, [r4, #20]
 80128b8:	f004 fa3f 	bl	8016d3a <memcpy>
 80128bc:	4630      	mov	r0, r6
 80128be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80128c0:	200b      	movs	r0, #11
 80128c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80128c4:	200b      	movs	r0, #11
 80128c6:	4770      	bx	lr

080128c8 <rcl_node_resolve_name>:
 80128c8:	b082      	sub	sp, #8
 80128ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128ce:	b091      	sub	sp, #68	@ 0x44
 80128d0:	ac1a      	add	r4, sp, #104	@ 0x68
 80128d2:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 80128d6:	e884 000c 	stmia.w	r4, {r2, r3}
 80128da:	2800      	cmp	r0, #0
 80128dc:	d03d      	beq.n	801295a <rcl_node_resolve_name+0x92>
 80128de:	460c      	mov	r4, r1
 80128e0:	4605      	mov	r5, r0
 80128e2:	f7ff ffb3 	bl	801284c <rcl_node_get_options>
 80128e6:	2800      	cmp	r0, #0
 80128e8:	d03a      	beq.n	8012960 <rcl_node_resolve_name+0x98>
 80128ea:	4628      	mov	r0, r5
 80128ec:	f7ff ff9e 	bl	801282c <rcl_node_get_name>
 80128f0:	4606      	mov	r6, r0
 80128f2:	4628      	mov	r0, r5
 80128f4:	ad0b      	add	r5, sp, #44	@ 0x2c
 80128f6:	f7ff ffa1 	bl	801283c <rcl_node_get_namespace>
 80128fa:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 80128fe:	4607      	mov	r7, r0
 8012900:	46ac      	mov	ip, r5
 8012902:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012906:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801290a:	f8de 3000 	ldr.w	r3, [lr]
 801290e:	f8cc 3000 	str.w	r3, [ip]
 8012912:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012914:	b30b      	cbz	r3, 801295a <rcl_node_resolve_name+0x92>
 8012916:	4689      	mov	r9, r1
 8012918:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 801291c:	f000 fb12 	bl	8012f44 <rcutils_get_zero_initialized_string_map>
 8012920:	ab10      	add	r3, sp, #64	@ 0x40
 8012922:	9008      	str	r0, [sp, #32]
 8012924:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8012928:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801292c:	2100      	movs	r1, #0
 801292e:	a808      	add	r0, sp, #32
 8012930:	e895 000c 	ldmia.w	r5, {r2, r3}
 8012934:	f000 fb7c 	bl	8013030 <rcutils_string_map_init>
 8012938:	4683      	mov	fp, r0
 801293a:	b1a0      	cbz	r0, 8012966 <rcl_node_resolve_name+0x9e>
 801293c:	f7f9 ff7e 	bl	800c83c <rcutils_get_error_string>
 8012940:	f7f9 ff92 	bl	800c868 <rcutils_reset_error>
 8012944:	f1bb 0f0a 	cmp.w	fp, #10
 8012948:	bf18      	it	ne
 801294a:	f04f 0b01 	movne.w	fp, #1
 801294e:	4658      	mov	r0, fp
 8012950:	b011      	add	sp, #68	@ 0x44
 8012952:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012956:	b002      	add	sp, #8
 8012958:	4770      	bx	lr
 801295a:	f04f 0b0b 	mov.w	fp, #11
 801295e:	e7f6      	b.n	801294e <rcl_node_resolve_name+0x86>
 8012960:	f04f 0b01 	mov.w	fp, #1
 8012964:	e7f3      	b.n	801294e <rcl_node_resolve_name+0x86>
 8012966:	9009      	str	r0, [sp, #36]	@ 0x24
 8012968:	9007      	str	r0, [sp, #28]
 801296a:	a808      	add	r0, sp, #32
 801296c:	f003 f916 	bl	8015b9c <rcl_get_default_topic_name_substitutions>
 8012970:	4683      	mov	fp, r0
 8012972:	b180      	cbz	r0, 8012996 <rcl_node_resolve_name+0xce>
 8012974:	280a      	cmp	r0, #10
 8012976:	a808      	add	r0, sp, #32
 8012978:	bf18      	it	ne
 801297a:	f04f 0b01 	movne.w	fp, #1
 801297e:	f000 fb97 	bl	80130b0 <rcutils_string_map_fini>
 8012982:	4604      	mov	r4, r0
 8012984:	2800      	cmp	r0, #0
 8012986:	d15b      	bne.n	8012a40 <rcl_node_resolve_name+0x178>
 8012988:	4651      	mov	r1, sl
 801298a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801298c:	47c8      	blx	r9
 801298e:	4651      	mov	r1, sl
 8012990:	4620      	mov	r0, r4
 8012992:	47c8      	blx	r9
 8012994:	e7db      	b.n	801294e <rcl_node_resolve_name+0x86>
 8012996:	ab09      	add	r3, sp, #36	@ 0x24
 8012998:	46ec      	mov	ip, sp
 801299a:	9305      	str	r3, [sp, #20]
 801299c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801299e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80129a2:	682b      	ldr	r3, [r5, #0]
 80129a4:	463a      	mov	r2, r7
 80129a6:	4631      	mov	r1, r6
 80129a8:	4620      	mov	r0, r4
 80129aa:	f8cc 3000 	str.w	r3, [ip]
 80129ae:	ab08      	add	r3, sp, #32
 80129b0:	f002 ff94 	bl	80158dc <rcl_expand_topic_name>
 80129b4:	4683      	mov	fp, r0
 80129b6:	b9d8      	cbnz	r0, 80129f0 <rcl_node_resolve_name+0x128>
 80129b8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80129ba:	4602      	mov	r2, r0
 80129bc:	9009      	str	r0, [sp, #36]	@ 0x24
 80129be:	a90a      	add	r1, sp, #40	@ 0x28
 80129c0:	4620      	mov	r0, r4
 80129c2:	f000 fc61 	bl	8013288 <rmw_validate_full_topic_name>
 80129c6:	bb50      	cbnz	r0, 8012a1e <rcl_node_resolve_name+0x156>
 80129c8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80129ca:	2d00      	cmp	r5, #0
 80129cc:	d140      	bne.n	8012a50 <rcl_node_resolve_name+0x188>
 80129ce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80129d0:	a808      	add	r0, sp, #32
 80129d2:	601c      	str	r4, [r3, #0]
 80129d4:	f000 fb6c 	bl	80130b0 <rcutils_string_map_fini>
 80129d8:	4683      	mov	fp, r0
 80129da:	2800      	cmp	r0, #0
 80129dc:	d043      	beq.n	8012a66 <rcl_node_resolve_name+0x19e>
 80129de:	f7f9 ff2d 	bl	800c83c <rcutils_get_error_string>
 80129e2:	46a8      	mov	r8, r5
 80129e4:	f04f 0b01 	mov.w	fp, #1
 80129e8:	462c      	mov	r4, r5
 80129ea:	f7f9 ff3d 	bl	800c868 <rcutils_reset_error>
 80129ee:	e00a      	b.n	8012a06 <rcl_node_resolve_name+0x13e>
 80129f0:	2867      	cmp	r0, #103	@ 0x67
 80129f2:	bf14      	ite	ne
 80129f4:	f04f 0800 	movne.w	r8, #0
 80129f8:	f008 0801 	andeq.w	r8, r8, #1
 80129fc:	9c07      	ldr	r4, [sp, #28]
 80129fe:	a808      	add	r0, sp, #32
 8012a00:	f000 fb56 	bl	80130b0 <rcutils_string_map_fini>
 8012a04:	bb50      	cbnz	r0, 8012a5c <rcl_node_resolve_name+0x194>
 8012a06:	4651      	mov	r1, sl
 8012a08:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012a0a:	47c8      	blx	r9
 8012a0c:	4651      	mov	r1, sl
 8012a0e:	4620      	mov	r0, r4
 8012a10:	47c8      	blx	r9
 8012a12:	f1b8 0f00 	cmp.w	r8, #0
 8012a16:	bf18      	it	ne
 8012a18:	f04f 0b68 	movne.w	fp, #104	@ 0x68
 8012a1c:	e797      	b.n	801294e <rcl_node_resolve_name+0x86>
 8012a1e:	f7f9 ff0d 	bl	800c83c <rcutils_get_error_string>
 8012a22:	f7f9 ff21 	bl	800c868 <rcutils_reset_error>
 8012a26:	a808      	add	r0, sp, #32
 8012a28:	f000 fb42 	bl	80130b0 <rcutils_string_map_fini>
 8012a2c:	b998      	cbnz	r0, 8012a56 <rcl_node_resolve_name+0x18e>
 8012a2e:	4651      	mov	r1, sl
 8012a30:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012a32:	47c8      	blx	r9
 8012a34:	4651      	mov	r1, sl
 8012a36:	4620      	mov	r0, r4
 8012a38:	f04f 0b01 	mov.w	fp, #1
 8012a3c:	47c8      	blx	r9
 8012a3e:	e786      	b.n	801294e <rcl_node_resolve_name+0x86>
 8012a40:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8012a44:	f7f9 fefa 	bl	800c83c <rcutils_get_error_string>
 8012a48:	f7f9 ff0e 	bl	800c868 <rcutils_reset_error>
 8012a4c:	4644      	mov	r4, r8
 8012a4e:	e7da      	b.n	8012a06 <rcl_node_resolve_name+0x13e>
 8012a50:	f04f 0b67 	mov.w	fp, #103	@ 0x67
 8012a54:	e7d3      	b.n	80129fe <rcl_node_resolve_name+0x136>
 8012a56:	46d8      	mov	r8, fp
 8012a58:	f04f 0b01 	mov.w	fp, #1
 8012a5c:	f7f9 feee 	bl	800c83c <rcutils_get_error_string>
 8012a60:	f7f9 ff02 	bl	800c868 <rcutils_reset_error>
 8012a64:	e7cf      	b.n	8012a06 <rcl_node_resolve_name+0x13e>
 8012a66:	4651      	mov	r1, sl
 8012a68:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012a6a:	47c8      	blx	r9
 8012a6c:	4651      	mov	r1, sl
 8012a6e:	4658      	mov	r0, fp
 8012a70:	47c8      	blx	r9
 8012a72:	e76c      	b.n	801294e <rcl_node_resolve_name+0x86>

08012a74 <rcl_get_system_time>:
 8012a74:	4608      	mov	r0, r1
 8012a76:	f000 bb93 	b.w	80131a0 <rcutils_system_time_now>
 8012a7a:	bf00      	nop

08012a7c <rcl_get_steady_time>:
 8012a7c:	4608      	mov	r0, r1
 8012a7e:	f000 bbb5 	b.w	80131ec <rcutils_steady_time_now>
 8012a82:	bf00      	nop

08012a84 <rcl_get_ros_time>:
 8012a84:	7a03      	ldrb	r3, [r0, #8]
 8012a86:	b510      	push	{r4, lr}
 8012a88:	460c      	mov	r4, r1
 8012a8a:	b143      	cbz	r3, 8012a9e <rcl_get_ros_time+0x1a>
 8012a8c:	2105      	movs	r1, #5
 8012a8e:	f000 f893 	bl	8012bb8 <__atomic_load_8>
 8012a92:	4602      	mov	r2, r0
 8012a94:	460b      	mov	r3, r1
 8012a96:	2000      	movs	r0, #0
 8012a98:	e9c4 2300 	strd	r2, r3, [r4]
 8012a9c:	bd10      	pop	{r4, pc}
 8012a9e:	4608      	mov	r0, r1
 8012aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012aa4:	f000 bb7c 	b.w	80131a0 <rcutils_system_time_now>

08012aa8 <rcl_clock_init>:
 8012aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012aaa:	4605      	mov	r5, r0
 8012aac:	4610      	mov	r0, r2
 8012aae:	4614      	mov	r4, r2
 8012ab0:	460e      	mov	r6, r1
 8012ab2:	f7f9 feb5 	bl	800c820 <rcutils_allocator_is_valid>
 8012ab6:	b128      	cbz	r0, 8012ac4 <rcl_clock_init+0x1c>
 8012ab8:	2d03      	cmp	r5, #3
 8012aba:	d803      	bhi.n	8012ac4 <rcl_clock_init+0x1c>
 8012abc:	e8df f005 	tbb	[pc, r5]
 8012ac0:	0659301f 	.word	0x0659301f
 8012ac4:	f04f 0c0b 	mov.w	ip, #11
 8012ac8:	4660      	mov	r0, ip
 8012aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012acc:	2c00      	cmp	r4, #0
 8012ace:	d0f9      	beq.n	8012ac4 <rcl_clock_init+0x1c>
 8012ad0:	fab6 f386 	clz	r3, r6
 8012ad4:	095b      	lsrs	r3, r3, #5
 8012ad6:	2e00      	cmp	r6, #0
 8012ad8:	d0f4      	beq.n	8012ac4 <rcl_clock_init+0x1c>
 8012ada:	6133      	str	r3, [r6, #16]
 8012adc:	469c      	mov	ip, r3
 8012ade:	f106 0514 	add.w	r5, r6, #20
 8012ae2:	4f32      	ldr	r7, [pc, #200]	@ (8012bac <rcl_clock_init+0x104>)
 8012ae4:	f04f 0e03 	mov.w	lr, #3
 8012ae8:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012aec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012aee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012af0:	6823      	ldr	r3, [r4, #0]
 8012af2:	4660      	mov	r0, ip
 8012af4:	602b      	str	r3, [r5, #0]
 8012af6:	60f7      	str	r7, [r6, #12]
 8012af8:	f886 e000 	strb.w	lr, [r6]
 8012afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012afe:	2e00      	cmp	r6, #0
 8012b00:	d0e0      	beq.n	8012ac4 <rcl_clock_init+0x1c>
 8012b02:	2300      	movs	r3, #0
 8012b04:	f106 0514 	add.w	r5, r6, #20
 8012b08:	7033      	strb	r3, [r6, #0]
 8012b0a:	469c      	mov	ip, r3
 8012b0c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012b10:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8012b14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012b16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012b18:	6823      	ldr	r3, [r4, #0]
 8012b1a:	4660      	mov	r0, ip
 8012b1c:	602b      	str	r3, [r5, #0]
 8012b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b20:	2c00      	cmp	r4, #0
 8012b22:	d0cf      	beq.n	8012ac4 <rcl_clock_init+0x1c>
 8012b24:	fab6 f586 	clz	r5, r6
 8012b28:	096d      	lsrs	r5, r5, #5
 8012b2a:	2e00      	cmp	r6, #0
 8012b2c:	d0ca      	beq.n	8012ac4 <rcl_clock_init+0x1c>
 8012b2e:	46a6      	mov	lr, r4
 8012b30:	7035      	strb	r5, [r6, #0]
 8012b32:	f106 0c14 	add.w	ip, r6, #20
 8012b36:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012b3a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8012b3e:	e9c6 5503 	strd	r5, r5, [r6, #12]
 8012b42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012b46:	f8de 3000 	ldr.w	r3, [lr]
 8012b4a:	2010      	movs	r0, #16
 8012b4c:	f8cc 3000 	str.w	r3, [ip]
 8012b50:	6823      	ldr	r3, [r4, #0]
 8012b52:	6921      	ldr	r1, [r4, #16]
 8012b54:	4798      	blx	r3
 8012b56:	6130      	str	r0, [r6, #16]
 8012b58:	b320      	cbz	r0, 8012ba4 <rcl_clock_init+0xfc>
 8012b5a:	2200      	movs	r2, #0
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	46ac      	mov	ip, r5
 8012b60:	7205      	strb	r5, [r0, #8]
 8012b62:	e9c0 2300 	strd	r2, r3, [r0]
 8012b66:	4a12      	ldr	r2, [pc, #72]	@ (8012bb0 <rcl_clock_init+0x108>)
 8012b68:	2301      	movs	r3, #1
 8012b6a:	4660      	mov	r0, ip
 8012b6c:	60f2      	str	r2, [r6, #12]
 8012b6e:	7033      	strb	r3, [r6, #0]
 8012b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b72:	2c00      	cmp	r4, #0
 8012b74:	d0a6      	beq.n	8012ac4 <rcl_clock_init+0x1c>
 8012b76:	fab6 f386 	clz	r3, r6
 8012b7a:	095b      	lsrs	r3, r3, #5
 8012b7c:	2e00      	cmp	r6, #0
 8012b7e:	d0a1      	beq.n	8012ac4 <rcl_clock_init+0x1c>
 8012b80:	6133      	str	r3, [r6, #16]
 8012b82:	469c      	mov	ip, r3
 8012b84:	f106 0514 	add.w	r5, r6, #20
 8012b88:	f8df e028 	ldr.w	lr, [pc, #40]	@ 8012bb4 <rcl_clock_init+0x10c>
 8012b8c:	2702      	movs	r7, #2
 8012b8e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012b92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012b94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012b96:	6823      	ldr	r3, [r4, #0]
 8012b98:	4660      	mov	r0, ip
 8012b9a:	602b      	str	r3, [r5, #0]
 8012b9c:	f8c6 e00c 	str.w	lr, [r6, #12]
 8012ba0:	7037      	strb	r7, [r6, #0]
 8012ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ba4:	f04f 0c0a 	mov.w	ip, #10
 8012ba8:	e78e      	b.n	8012ac8 <rcl_clock_init+0x20>
 8012baa:	bf00      	nop
 8012bac:	08012a7d 	.word	0x08012a7d
 8012bb0:	08012a85 	.word	0x08012a85
 8012bb4:	08012a75 	.word	0x08012a75

08012bb8 <__atomic_load_8>:
 8012bb8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8012bbc:	4a16      	ldr	r2, [pc, #88]	@ (8012c18 <__atomic_load_8+0x60>)
 8012bbe:	4b17      	ldr	r3, [pc, #92]	@ (8012c1c <__atomic_load_8+0x64>)
 8012bc0:	f04f 0c01 	mov.w	ip, #1
 8012bc4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8012bc8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8012bcc:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8012bd0:	fb02 f101 	mul.w	r1, r2, r1
 8012bd4:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8012bd8:	fba3 2301 	umull	r2, r3, r3, r1
 8012bdc:	091b      	lsrs	r3, r3, #4
 8012bde:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8012be2:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8012be6:	b4d0      	push	{r4, r6, r7}
 8012be8:	1ac9      	subs	r1, r1, r3
 8012bea:	4c0d      	ldr	r4, [pc, #52]	@ (8012c20 <__atomic_load_8+0x68>)
 8012bec:	1862      	adds	r2, r4, r1
 8012bee:	e8d2 3f4f 	ldrexb	r3, [r2]
 8012bf2:	e8c2 cf46 	strexb	r6, ip, [r2]
 8012bf6:	2e00      	cmp	r6, #0
 8012bf8:	d1f9      	bne.n	8012bee <__atomic_load_8+0x36>
 8012bfa:	b2db      	uxtb	r3, r3
 8012bfc:	f3bf 8f5b 	dmb	ish
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d1f4      	bne.n	8012bee <__atomic_load_8+0x36>
 8012c04:	e9d0 6700 	ldrd	r6, r7, [r0]
 8012c08:	f3bf 8f5b 	dmb	ish
 8012c0c:	5463      	strb	r3, [r4, r1]
 8012c0e:	4630      	mov	r0, r6
 8012c10:	4639      	mov	r1, r7
 8012c12:	bcd0      	pop	{r4, r6, r7}
 8012c14:	4770      	bx	lr
 8012c16:	bf00      	nop
 8012c18:	27d4eb2d 	.word	0x27d4eb2d
 8012c1c:	b21642c9 	.word	0xb21642c9
 8012c20:	2000ebb8 	.word	0x2000ebb8

08012c24 <rcutils_get_env>:
 8012c24:	b168      	cbz	r0, 8012c42 <rcutils_get_env+0x1e>
 8012c26:	b510      	push	{r4, lr}
 8012c28:	460c      	mov	r4, r1
 8012c2a:	b129      	cbz	r1, 8012c38 <rcutils_get_env+0x14>
 8012c2c:	f003 fb0a 	bl	8016244 <getenv>
 8012c30:	b120      	cbz	r0, 8012c3c <rcutils_get_env+0x18>
 8012c32:	6020      	str	r0, [r4, #0]
 8012c34:	2000      	movs	r0, #0
 8012c36:	bd10      	pop	{r4, pc}
 8012c38:	4803      	ldr	r0, [pc, #12]	@ (8012c48 <rcutils_get_env+0x24>)
 8012c3a:	bd10      	pop	{r4, pc}
 8012c3c:	4b03      	ldr	r3, [pc, #12]	@ (8012c4c <rcutils_get_env+0x28>)
 8012c3e:	6023      	str	r3, [r4, #0]
 8012c40:	bd10      	pop	{r4, pc}
 8012c42:	4803      	ldr	r0, [pc, #12]	@ (8012c50 <rcutils_get_env+0x2c>)
 8012c44:	4770      	bx	lr
 8012c46:	bf00      	nop
 8012c48:	08018014 	.word	0x08018014
 8012c4c:	080183c4 	.word	0x080183c4
 8012c50:	08017ff8 	.word	0x08017ff8

08012c54 <rcutils_format_string_limit>:
 8012c54:	b40f      	push	{r0, r1, r2, r3}
 8012c56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c58:	b083      	sub	sp, #12
 8012c5a:	ac08      	add	r4, sp, #32
 8012c5c:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8012c5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012c62:	b326      	cbz	r6, 8012cae <rcutils_format_string_limit+0x5a>
 8012c64:	a808      	add	r0, sp, #32
 8012c66:	f7f9 fddb 	bl	800c820 <rcutils_allocator_is_valid>
 8012c6a:	b300      	cbz	r0, 8012cae <rcutils_format_string_limit+0x5a>
 8012c6c:	2100      	movs	r1, #0
 8012c6e:	ab0f      	add	r3, sp, #60	@ 0x3c
 8012c70:	4632      	mov	r2, r6
 8012c72:	4608      	mov	r0, r1
 8012c74:	e9cd 3300 	strd	r3, r3, [sp]
 8012c78:	f000 f906 	bl	8012e88 <rcutils_vsnprintf>
 8012c7c:	1c43      	adds	r3, r0, #1
 8012c7e:	4605      	mov	r5, r0
 8012c80:	d015      	beq.n	8012cae <rcutils_format_string_limit+0x5a>
 8012c82:	1c47      	adds	r7, r0, #1
 8012c84:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012c86:	429f      	cmp	r7, r3
 8012c88:	d901      	bls.n	8012c8e <rcutils_format_string_limit+0x3a>
 8012c8a:	1e5d      	subs	r5, r3, #1
 8012c8c:	461f      	mov	r7, r3
 8012c8e:	9b08      	ldr	r3, [sp, #32]
 8012c90:	4638      	mov	r0, r7
 8012c92:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012c94:	4798      	blx	r3
 8012c96:	4604      	mov	r4, r0
 8012c98:	b148      	cbz	r0, 8012cae <rcutils_format_string_limit+0x5a>
 8012c9a:	4632      	mov	r2, r6
 8012c9c:	4639      	mov	r1, r7
 8012c9e:	9b01      	ldr	r3, [sp, #4]
 8012ca0:	f000 f8f2 	bl	8012e88 <rcutils_vsnprintf>
 8012ca4:	2800      	cmp	r0, #0
 8012ca6:	db09      	blt.n	8012cbc <rcutils_format_string_limit+0x68>
 8012ca8:	2300      	movs	r3, #0
 8012caa:	5563      	strb	r3, [r4, r5]
 8012cac:	e000      	b.n	8012cb0 <rcutils_format_string_limit+0x5c>
 8012cae:	2400      	movs	r4, #0
 8012cb0:	4620      	mov	r0, r4
 8012cb2:	b003      	add	sp, #12
 8012cb4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012cb8:	b004      	add	sp, #16
 8012cba:	4770      	bx	lr
 8012cbc:	4620      	mov	r0, r4
 8012cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012cc0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012cc2:	2400      	movs	r4, #0
 8012cc4:	4798      	blx	r3
 8012cc6:	e7f3      	b.n	8012cb0 <rcutils_format_string_limit+0x5c>

08012cc8 <rcutils_repl_str>:
 8012cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ccc:	ed2d 8b02 	vpush	{d8}
 8012cd0:	b087      	sub	sp, #28
 8012cd2:	2600      	movs	r6, #0
 8012cd4:	4680      	mov	r8, r0
 8012cd6:	468a      	mov	sl, r1
 8012cd8:	9000      	str	r0, [sp, #0]
 8012cda:	4608      	mov	r0, r1
 8012cdc:	ee08 2a10 	vmov	s16, r2
 8012ce0:	4699      	mov	r9, r3
 8012ce2:	2510      	movs	r5, #16
 8012ce4:	f7ed fab6 	bl	8000254 <strlen>
 8012ce8:	4637      	mov	r7, r6
 8012cea:	46b3      	mov	fp, r6
 8012cec:	9001      	str	r0, [sp, #4]
 8012cee:	e01e      	b.n	8012d2e <rcutils_repl_str+0x66>
 8012cf0:	f10b 0b01 	add.w	fp, fp, #1
 8012cf4:	9b01      	ldr	r3, [sp, #4]
 8012cf6:	455e      	cmp	r6, fp
 8012cf8:	eb04 0803 	add.w	r8, r4, r3
 8012cfc:	d211      	bcs.n	8012d22 <rcutils_repl_str+0x5a>
 8012cfe:	442e      	add	r6, r5
 8012d00:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8012d04:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8012d08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012d0c:	00b1      	lsls	r1, r6, #2
 8012d0e:	4798      	blx	r3
 8012d10:	2800      	cmp	r0, #0
 8012d12:	f000 8088 	beq.w	8012e26 <rcutils_repl_str+0x15e>
 8012d16:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8012d1a:	4607      	mov	r7, r0
 8012d1c:	bf28      	it	cs
 8012d1e:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8012d22:	9a00      	ldr	r2, [sp, #0]
 8012d24:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8012d28:	1aa4      	subs	r4, r4, r2
 8012d2a:	f843 4c04 	str.w	r4, [r3, #-4]
 8012d2e:	4651      	mov	r1, sl
 8012d30:	4640      	mov	r0, r8
 8012d32:	f003 ff60 	bl	8016bf6 <strstr>
 8012d36:	4604      	mov	r4, r0
 8012d38:	4638      	mov	r0, r7
 8012d3a:	2c00      	cmp	r4, #0
 8012d3c:	d1d8      	bne.n	8012cf0 <rcutils_repl_str+0x28>
 8012d3e:	4640      	mov	r0, r8
 8012d40:	f7ed fa88 	bl	8000254 <strlen>
 8012d44:	9b00      	ldr	r3, [sp, #0]
 8012d46:	eba8 0803 	sub.w	r8, r8, r3
 8012d4a:	eb08 0400 	add.w	r4, r8, r0
 8012d4e:	9402      	str	r4, [sp, #8]
 8012d50:	f1bb 0f00 	cmp.w	fp, #0
 8012d54:	d045      	beq.n	8012de2 <rcutils_repl_str+0x11a>
 8012d56:	ee18 0a10 	vmov	r0, s16
 8012d5a:	f7ed fa7b 	bl	8000254 <strlen>
 8012d5e:	9a01      	ldr	r2, [sp, #4]
 8012d60:	4606      	mov	r6, r0
 8012d62:	f8d9 3000 	ldr.w	r3, [r9]
 8012d66:	1a82      	subs	r2, r0, r2
 8012d68:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8012d6c:	fb0b 4202 	mla	r2, fp, r2, r4
 8012d70:	1c50      	adds	r0, r2, #1
 8012d72:	9205      	str	r2, [sp, #20]
 8012d74:	4798      	blx	r3
 8012d76:	4682      	mov	sl, r0
 8012d78:	2800      	cmp	r0, #0
 8012d7a:	d054      	beq.n	8012e26 <rcutils_repl_str+0x15e>
 8012d7c:	683a      	ldr	r2, [r7, #0]
 8012d7e:	463d      	mov	r5, r7
 8012d80:	9900      	ldr	r1, [sp, #0]
 8012d82:	2401      	movs	r4, #1
 8012d84:	f003 ffd9 	bl	8016d3a <memcpy>
 8012d88:	683b      	ldr	r3, [r7, #0]
 8012d8a:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 8012d8e:	eb0a 0803 	add.w	r8, sl, r3
 8012d92:	ee18 7a10 	vmov	r7, s16
 8012d96:	f8dd a000 	ldr.w	sl, [sp]
 8012d9a:	f8cd 9000 	str.w	r9, [sp]
 8012d9e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012da2:	4632      	mov	r2, r6
 8012da4:	4639      	mov	r1, r7
 8012da6:	4640      	mov	r0, r8
 8012da8:	44b0      	add	r8, r6
 8012daa:	f003 ffc6 	bl	8016d3a <memcpy>
 8012dae:	f855 2b04 	ldr.w	r2, [r5], #4
 8012db2:	45a3      	cmp	fp, r4
 8012db4:	444a      	add	r2, r9
 8012db6:	eb0a 0102 	add.w	r1, sl, r2
 8012dba:	d02a      	beq.n	8012e12 <rcutils_repl_str+0x14a>
 8012dbc:	6828      	ldr	r0, [r5, #0]
 8012dbe:	1a82      	subs	r2, r0, r2
 8012dc0:	4640      	mov	r0, r8
 8012dc2:	4490      	add	r8, r2
 8012dc4:	f003 ffb9 	bl	8016d3a <memcpy>
 8012dc8:	1c62      	adds	r2, r4, #1
 8012dca:	45a3      	cmp	fp, r4
 8012dcc:	4614      	mov	r4, r2
 8012dce:	d8e8      	bhi.n	8012da2 <rcutils_repl_str+0xda>
 8012dd0:	f8dd 9000 	ldr.w	r9, [sp]
 8012dd4:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8012dd8:	2300      	movs	r3, #0
 8012dda:	9a05      	ldr	r2, [sp, #20]
 8012ddc:	f80a 3002 	strb.w	r3, [sl, r2]
 8012de0:	e00b      	b.n	8012dfa <rcutils_repl_str+0x132>
 8012de2:	4620      	mov	r0, r4
 8012de4:	f8d9 3000 	ldr.w	r3, [r9]
 8012de8:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8012dec:	3001      	adds	r0, #1
 8012dee:	4798      	blx	r3
 8012df0:	4682      	mov	sl, r0
 8012df2:	b110      	cbz	r0, 8012dfa <rcutils_repl_str+0x132>
 8012df4:	9900      	ldr	r1, [sp, #0]
 8012df6:	f003 ff98 	bl	8016d2a <strcpy>
 8012dfa:	4638      	mov	r0, r7
 8012dfc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8012e00:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8012e04:	4798      	blx	r3
 8012e06:	4650      	mov	r0, sl
 8012e08:	b007      	add	sp, #28
 8012e0a:	ecbd 8b02 	vpop	{d8}
 8012e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e12:	9b02      	ldr	r3, [sp, #8]
 8012e14:	4640      	mov	r0, r8
 8012e16:	f8dd 9000 	ldr.w	r9, [sp]
 8012e1a:	1a9a      	subs	r2, r3, r2
 8012e1c:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8012e20:	f003 ff8b 	bl	8016d3a <memcpy>
 8012e24:	e7d8      	b.n	8012dd8 <rcutils_repl_str+0x110>
 8012e26:	f04f 0a00 	mov.w	sl, #0
 8012e2a:	e7e6      	b.n	8012dfa <rcutils_repl_str+0x132>

08012e2c <rcutils_snprintf>:
 8012e2c:	b40c      	push	{r2, r3}
 8012e2e:	b530      	push	{r4, r5, lr}
 8012e30:	b083      	sub	sp, #12
 8012e32:	ab06      	add	r3, sp, #24
 8012e34:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e38:	9301      	str	r3, [sp, #4]
 8012e3a:	b1e2      	cbz	r2, 8012e76 <rcutils_snprintf+0x4a>
 8012e3c:	fab0 f480 	clz	r4, r0
 8012e40:	fab1 f581 	clz	r5, r1
 8012e44:	ea50 0c01 	orrs.w	ip, r0, r1
 8012e48:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8012e4c:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8012e50:	d008      	beq.n	8012e64 <rcutils_snprintf+0x38>
 8012e52:	b984      	cbnz	r4, 8012e76 <rcutils_snprintf+0x4a>
 8012e54:	b97d      	cbnz	r5, 8012e76 <rcutils_snprintf+0x4a>
 8012e56:	f003 fdeb 	bl	8016a30 <vsniprintf>
 8012e5a:	b003      	add	sp, #12
 8012e5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012e60:	b002      	add	sp, #8
 8012e62:	4770      	bx	lr
 8012e64:	4661      	mov	r1, ip
 8012e66:	4660      	mov	r0, ip
 8012e68:	f003 fde2 	bl	8016a30 <vsniprintf>
 8012e6c:	b003      	add	sp, #12
 8012e6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012e72:	b002      	add	sp, #8
 8012e74:	4770      	bx	lr
 8012e76:	f003 ff2b 	bl	8016cd0 <__errno>
 8012e7a:	2216      	movs	r2, #22
 8012e7c:	4603      	mov	r3, r0
 8012e7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012e82:	601a      	str	r2, [r3, #0]
 8012e84:	e7e9      	b.n	8012e5a <rcutils_snprintf+0x2e>
 8012e86:	bf00      	nop

08012e88 <rcutils_vsnprintf>:
 8012e88:	b570      	push	{r4, r5, r6, lr}
 8012e8a:	b1b2      	cbz	r2, 8012eba <rcutils_vsnprintf+0x32>
 8012e8c:	fab0 f480 	clz	r4, r0
 8012e90:	fab1 f581 	clz	r5, r1
 8012e94:	ea50 0c01 	orrs.w	ip, r0, r1
 8012e98:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8012e9c:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8012ea0:	d005      	beq.n	8012eae <rcutils_vsnprintf+0x26>
 8012ea2:	b954      	cbnz	r4, 8012eba <rcutils_vsnprintf+0x32>
 8012ea4:	b94d      	cbnz	r5, 8012eba <rcutils_vsnprintf+0x32>
 8012ea6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012eaa:	f003 bdc1 	b.w	8016a30 <vsniprintf>
 8012eae:	4661      	mov	r1, ip
 8012eb0:	4660      	mov	r0, ip
 8012eb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012eb6:	f003 bdbb 	b.w	8016a30 <vsniprintf>
 8012eba:	f003 ff09 	bl	8016cd0 <__errno>
 8012ebe:	2316      	movs	r3, #22
 8012ec0:	6003      	str	r3, [r0, #0]
 8012ec2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012ec6:	bd70      	pop	{r4, r5, r6, pc}

08012ec8 <rcutils_strdup>:
 8012ec8:	b084      	sub	sp, #16
 8012eca:	b570      	push	{r4, r5, r6, lr}
 8012ecc:	b082      	sub	sp, #8
 8012ece:	4605      	mov	r5, r0
 8012ed0:	ac07      	add	r4, sp, #28
 8012ed2:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8012ed6:	b1b0      	cbz	r0, 8012f06 <rcutils_strdup+0x3e>
 8012ed8:	f7ed f9bc 	bl	8000254 <strlen>
 8012edc:	1c42      	adds	r2, r0, #1
 8012ede:	9b07      	ldr	r3, [sp, #28]
 8012ee0:	4606      	mov	r6, r0
 8012ee2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012ee4:	4610      	mov	r0, r2
 8012ee6:	9201      	str	r2, [sp, #4]
 8012ee8:	4798      	blx	r3
 8012eea:	4604      	mov	r4, r0
 8012eec:	b128      	cbz	r0, 8012efa <rcutils_strdup+0x32>
 8012eee:	9a01      	ldr	r2, [sp, #4]
 8012ef0:	4629      	mov	r1, r5
 8012ef2:	f003 ff22 	bl	8016d3a <memcpy>
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	55a3      	strb	r3, [r4, r6]
 8012efa:	4620      	mov	r0, r4
 8012efc:	b002      	add	sp, #8
 8012efe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f02:	b004      	add	sp, #16
 8012f04:	4770      	bx	lr
 8012f06:	4604      	mov	r4, r0
 8012f08:	e7f7      	b.n	8012efa <rcutils_strdup+0x32>
 8012f0a:	bf00      	nop

08012f0c <rcutils_strndup>:
 8012f0c:	b082      	sub	sp, #8
 8012f0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f10:	ac06      	add	r4, sp, #24
 8012f12:	4605      	mov	r5, r0
 8012f14:	e884 000c 	stmia.w	r4, {r2, r3}
 8012f18:	b188      	cbz	r0, 8012f3e <rcutils_strndup+0x32>
 8012f1a:	1c4f      	adds	r7, r1, #1
 8012f1c:	460e      	mov	r6, r1
 8012f1e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012f20:	4638      	mov	r0, r7
 8012f22:	4790      	blx	r2
 8012f24:	4604      	mov	r4, r0
 8012f26:	b128      	cbz	r0, 8012f34 <rcutils_strndup+0x28>
 8012f28:	463a      	mov	r2, r7
 8012f2a:	4629      	mov	r1, r5
 8012f2c:	f003 ff05 	bl	8016d3a <memcpy>
 8012f30:	2300      	movs	r3, #0
 8012f32:	55a3      	strb	r3, [r4, r6]
 8012f34:	4620      	mov	r0, r4
 8012f36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012f3a:	b002      	add	sp, #8
 8012f3c:	4770      	bx	lr
 8012f3e:	4604      	mov	r4, r0
 8012f40:	e7f8      	b.n	8012f34 <rcutils_strndup+0x28>
 8012f42:	bf00      	nop

08012f44 <rcutils_get_zero_initialized_string_map>:
 8012f44:	2000      	movs	r0, #0
 8012f46:	4b01      	ldr	r3, [pc, #4]	@ (8012f4c <rcutils_get_zero_initialized_string_map+0x8>)
 8012f48:	6018      	str	r0, [r3, #0]
 8012f4a:	4770      	bx	lr
 8012f4c:	2000ebd0 	.word	0x2000ebd0

08012f50 <rcutils_string_map_reserve>:
 8012f50:	2800      	cmp	r0, #0
 8012f52:	d05e      	beq.n	8013012 <rcutils_string_map_reserve+0xc2>
 8012f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f58:	460c      	mov	r4, r1
 8012f5a:	6801      	ldr	r1, [r0, #0]
 8012f5c:	b082      	sub	sp, #8
 8012f5e:	4605      	mov	r5, r0
 8012f60:	b129      	cbz	r1, 8012f6e <rcutils_string_map_reserve+0x1e>
 8012f62:	68cb      	ldr	r3, [r1, #12]
 8012f64:	42a3      	cmp	r3, r4
 8012f66:	d906      	bls.n	8012f76 <rcutils_string_map_reserve+0x26>
 8012f68:	461c      	mov	r4, r3
 8012f6a:	2900      	cmp	r1, #0
 8012f6c:	d1f9      	bne.n	8012f62 <rcutils_string_map_reserve+0x12>
 8012f6e:	201f      	movs	r0, #31
 8012f70:	b002      	add	sp, #8
 8012f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f76:	688b      	ldr	r3, [r1, #8]
 8012f78:	42a3      	cmp	r3, r4
 8012f7a:	d046      	beq.n	801300a <rcutils_string_map_reserve+0xba>
 8012f7c:	6a0e      	ldr	r6, [r1, #32]
 8012f7e:	2c00      	cmp	r4, #0
 8012f80:	d033      	beq.n	8012fea <rcutils_string_map_reserve+0x9a>
 8012f82:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8012f86:	d242      	bcs.n	801300e <rcutils_string_map_reserve+0xbe>
 8012f88:	00a7      	lsls	r7, r4, #2
 8012f8a:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8012f8e:	6808      	ldr	r0, [r1, #0]
 8012f90:	4632      	mov	r2, r6
 8012f92:	4639      	mov	r1, r7
 8012f94:	47c0      	blx	r8
 8012f96:	2800      	cmp	r0, #0
 8012f98:	d039      	beq.n	801300e <rcutils_string_map_reserve+0xbe>
 8012f9a:	682b      	ldr	r3, [r5, #0]
 8012f9c:	4632      	mov	r2, r6
 8012f9e:	4639      	mov	r1, r7
 8012fa0:	6018      	str	r0, [r3, #0]
 8012fa2:	6858      	ldr	r0, [r3, #4]
 8012fa4:	47c0      	blx	r8
 8012fa6:	2800      	cmp	r0, #0
 8012fa8:	d031      	beq.n	801300e <rcutils_string_map_reserve+0xbe>
 8012faa:	682d      	ldr	r5, [r5, #0]
 8012fac:	68ab      	ldr	r3, [r5, #8]
 8012fae:	6068      	str	r0, [r5, #4]
 8012fb0:	42a3      	cmp	r3, r4
 8012fb2:	d225      	bcs.n	8013000 <rcutils_string_map_reserve+0xb0>
 8012fb4:	682a      	ldr	r2, [r5, #0]
 8012fb6:	eb00 0c07 	add.w	ip, r0, r7
 8012fba:	0099      	lsls	r1, r3, #2
 8012fbc:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8012fc0:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8012fc4:	45e6      	cmp	lr, ip
 8012fc6:	d203      	bcs.n	8012fd0 <rcutils_string_map_reserve+0x80>
 8012fc8:	eb02 0c07 	add.w	ip, r2, r7
 8012fcc:	4566      	cmp	r6, ip
 8012fce:	d322      	bcc.n	8013016 <rcutils_string_map_reserve+0xc6>
 8012fd0:	1ae3      	subs	r3, r4, r3
 8012fd2:	4670      	mov	r0, lr
 8012fd4:	2100      	movs	r1, #0
 8012fd6:	009a      	lsls	r2, r3, #2
 8012fd8:	9201      	str	r2, [sp, #4]
 8012fda:	f003 fde5 	bl	8016ba8 <memset>
 8012fde:	9a01      	ldr	r2, [sp, #4]
 8012fe0:	2100      	movs	r1, #0
 8012fe2:	4630      	mov	r0, r6
 8012fe4:	f003 fde0 	bl	8016ba8 <memset>
 8012fe8:	e00a      	b.n	8013000 <rcutils_string_map_reserve+0xb0>
 8012fea:	694f      	ldr	r7, [r1, #20]
 8012fec:	6808      	ldr	r0, [r1, #0]
 8012fee:	4631      	mov	r1, r6
 8012ff0:	47b8      	blx	r7
 8012ff2:	682b      	ldr	r3, [r5, #0]
 8012ff4:	4631      	mov	r1, r6
 8012ff6:	6858      	ldr	r0, [r3, #4]
 8012ff8:	601c      	str	r4, [r3, #0]
 8012ffa:	47b8      	blx	r7
 8012ffc:	682d      	ldr	r5, [r5, #0]
 8012ffe:	606c      	str	r4, [r5, #4]
 8013000:	2000      	movs	r0, #0
 8013002:	60ac      	str	r4, [r5, #8]
 8013004:	b002      	add	sp, #8
 8013006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801300a:	2000      	movs	r0, #0
 801300c:	e7b0      	b.n	8012f70 <rcutils_string_map_reserve+0x20>
 801300e:	200a      	movs	r0, #10
 8013010:	e7ae      	b.n	8012f70 <rcutils_string_map_reserve+0x20>
 8013012:	200b      	movs	r0, #11
 8013014:	4770      	bx	lr
 8013016:	1f0b      	subs	r3, r1, #4
 8013018:	4418      	add	r0, r3
 801301a:	4413      	add	r3, r2
 801301c:	3a04      	subs	r2, #4
 801301e:	4417      	add	r7, r2
 8013020:	2200      	movs	r2, #0
 8013022:	f843 2f04 	str.w	r2, [r3, #4]!
 8013026:	42bb      	cmp	r3, r7
 8013028:	f840 2f04 	str.w	r2, [r0, #4]!
 801302c:	d1f9      	bne.n	8013022 <rcutils_string_map_reserve+0xd2>
 801302e:	e7e7      	b.n	8013000 <rcutils_string_map_reserve+0xb0>

08013030 <rcutils_string_map_init>:
 8013030:	b082      	sub	sp, #8
 8013032:	b570      	push	{r4, r5, r6, lr}
 8013034:	ac04      	add	r4, sp, #16
 8013036:	e884 000c 	stmia.w	r4, {r2, r3}
 801303a:	b380      	cbz	r0, 801309e <rcutils_string_map_init+0x6e>
 801303c:	6806      	ldr	r6, [r0, #0]
 801303e:	4604      	mov	r4, r0
 8013040:	b12e      	cbz	r6, 801304e <rcutils_string_map_init+0x1e>
 8013042:	251e      	movs	r5, #30
 8013044:	4628      	mov	r0, r5
 8013046:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801304a:	b002      	add	sp, #8
 801304c:	4770      	bx	lr
 801304e:	a804      	add	r0, sp, #16
 8013050:	460d      	mov	r5, r1
 8013052:	f7f9 fbe5 	bl	800c820 <rcutils_allocator_is_valid>
 8013056:	b310      	cbz	r0, 801309e <rcutils_string_map_init+0x6e>
 8013058:	9b04      	ldr	r3, [sp, #16]
 801305a:	2024      	movs	r0, #36	@ 0x24
 801305c:	9908      	ldr	r1, [sp, #32]
 801305e:	4798      	blx	r3
 8013060:	6020      	str	r0, [r4, #0]
 8013062:	b310      	cbz	r0, 80130aa <rcutils_string_map_init+0x7a>
 8013064:	f10d 0e10 	add.w	lr, sp, #16
 8013068:	f100 0c10 	add.w	ip, r0, #16
 801306c:	e9c0 6600 	strd	r6, r6, [r0]
 8013070:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8013074:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013078:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801307c:	f8de 3000 	ldr.w	r3, [lr]
 8013080:	4629      	mov	r1, r5
 8013082:	4620      	mov	r0, r4
 8013084:	f8cc 3000 	str.w	r3, [ip]
 8013088:	f7ff ff62 	bl	8012f50 <rcutils_string_map_reserve>
 801308c:	4605      	mov	r5, r0
 801308e:	2800      	cmp	r0, #0
 8013090:	d0d8      	beq.n	8013044 <rcutils_string_map_init+0x14>
 8013092:	9b05      	ldr	r3, [sp, #20]
 8013094:	9908      	ldr	r1, [sp, #32]
 8013096:	6820      	ldr	r0, [r4, #0]
 8013098:	4798      	blx	r3
 801309a:	6026      	str	r6, [r4, #0]
 801309c:	e7d2      	b.n	8013044 <rcutils_string_map_init+0x14>
 801309e:	250b      	movs	r5, #11
 80130a0:	4628      	mov	r0, r5
 80130a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80130a6:	b002      	add	sp, #8
 80130a8:	4770      	bx	lr
 80130aa:	250a      	movs	r5, #10
 80130ac:	e7ca      	b.n	8013044 <rcutils_string_map_init+0x14>
 80130ae:	bf00      	nop

080130b0 <rcutils_string_map_fini>:
 80130b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130b4:	b082      	sub	sp, #8
 80130b6:	2800      	cmp	r0, #0
 80130b8:	d03a      	beq.n	8013130 <rcutils_string_map_fini+0x80>
 80130ba:	6804      	ldr	r4, [r0, #0]
 80130bc:	4606      	mov	r6, r0
 80130be:	2c00      	cmp	r4, #0
 80130c0:	d032      	beq.n	8013128 <rcutils_string_map_fini+0x78>
 80130c2:	68a3      	ldr	r3, [r4, #8]
 80130c4:	b32b      	cbz	r3, 8013112 <rcutils_string_map_fini+0x62>
 80130c6:	2500      	movs	r5, #0
 80130c8:	6822      	ldr	r2, [r4, #0]
 80130ca:	462f      	mov	r7, r5
 80130cc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80130d0:	b1e0      	cbz	r0, 801310c <rcutils_string_map_fini+0x5c>
 80130d2:	6a21      	ldr	r1, [r4, #32]
 80130d4:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80130d8:	9101      	str	r1, [sp, #4]
 80130da:	47c0      	blx	r8
 80130dc:	9901      	ldr	r1, [sp, #4]
 80130de:	e9d4 3200 	ldrd	r3, r2, [r4]
 80130e2:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 80130e6:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80130ea:	47c0      	blx	r8
 80130ec:	68e3      	ldr	r3, [r4, #12]
 80130ee:	6862      	ldr	r2, [r4, #4]
 80130f0:	3b01      	subs	r3, #1
 80130f2:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80130f6:	3501      	adds	r5, #1
 80130f8:	60e3      	str	r3, [r4, #12]
 80130fa:	6834      	ldr	r4, [r6, #0]
 80130fc:	68a3      	ldr	r3, [r4, #8]
 80130fe:	429d      	cmp	r5, r3
 8013100:	d207      	bcs.n	8013112 <rcutils_string_map_fini+0x62>
 8013102:	6822      	ldr	r2, [r4, #0]
 8013104:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8013108:	2800      	cmp	r0, #0
 801310a:	d1e2      	bne.n	80130d2 <rcutils_string_map_fini+0x22>
 801310c:	3501      	adds	r5, #1
 801310e:	429d      	cmp	r5, r3
 8013110:	d3dc      	bcc.n	80130cc <rcutils_string_map_fini+0x1c>
 8013112:	2100      	movs	r1, #0
 8013114:	4630      	mov	r0, r6
 8013116:	f7ff ff1b 	bl	8012f50 <rcutils_string_map_reserve>
 801311a:	4604      	mov	r4, r0
 801311c:	b920      	cbnz	r0, 8013128 <rcutils_string_map_fini+0x78>
 801311e:	6830      	ldr	r0, [r6, #0]
 8013120:	6943      	ldr	r3, [r0, #20]
 8013122:	6a01      	ldr	r1, [r0, #32]
 8013124:	4798      	blx	r3
 8013126:	6034      	str	r4, [r6, #0]
 8013128:	4620      	mov	r0, r4
 801312a:	b002      	add	sp, #8
 801312c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013130:	240b      	movs	r4, #11
 8013132:	4620      	mov	r0, r4
 8013134:	b002      	add	sp, #8
 8013136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801313a:	bf00      	nop

0801313c <rcutils_string_map_getn>:
 801313c:	b378      	cbz	r0, 801319e <rcutils_string_map_getn+0x62>
 801313e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013142:	f8d0 b000 	ldr.w	fp, [r0]
 8013146:	f1bb 0f00 	cmp.w	fp, #0
 801314a:	d01f      	beq.n	801318c <rcutils_string_map_getn+0x50>
 801314c:	fab1 f481 	clz	r4, r1
 8013150:	4688      	mov	r8, r1
 8013152:	0964      	lsrs	r4, r4, #5
 8013154:	b1d1      	cbz	r1, 801318c <rcutils_string_map_getn+0x50>
 8013156:	f8db 7008 	ldr.w	r7, [fp, #8]
 801315a:	f8db 6000 	ldr.w	r6, [fp]
 801315e:	b1af      	cbz	r7, 801318c <rcutils_string_map_getn+0x50>
 8013160:	4691      	mov	r9, r2
 8013162:	3e04      	subs	r6, #4
 8013164:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8013168:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801316c:	3401      	adds	r4, #1
 801316e:	4628      	mov	r0, r5
 8013170:	b155      	cbz	r5, 8013188 <rcutils_string_map_getn+0x4c>
 8013172:	f7ed f86f 	bl	8000254 <strlen>
 8013176:	4602      	mov	r2, r0
 8013178:	4629      	mov	r1, r5
 801317a:	4640      	mov	r0, r8
 801317c:	454a      	cmp	r2, r9
 801317e:	bf38      	it	cc
 8013180:	464a      	movcc	r2, r9
 8013182:	f003 fd26 	bl	8016bd2 <strncmp>
 8013186:	b120      	cbz	r0, 8013192 <rcutils_string_map_getn+0x56>
 8013188:	42a7      	cmp	r7, r4
 801318a:	d1eb      	bne.n	8013164 <rcutils_string_map_getn+0x28>
 801318c:	2000      	movs	r0, #0
 801318e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013192:	f8db 3004 	ldr.w	r3, [fp, #4]
 8013196:	f853 000a 	ldr.w	r0, [r3, sl]
 801319a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801319e:	4770      	bx	lr

080131a0 <rcutils_system_time_now>:
 80131a0:	b300      	cbz	r0, 80131e4 <rcutils_system_time_now+0x44>
 80131a2:	b570      	push	{r4, r5, r6, lr}
 80131a4:	b084      	sub	sp, #16
 80131a6:	4604      	mov	r4, r0
 80131a8:	2001      	movs	r0, #1
 80131aa:	4669      	mov	r1, sp
 80131ac:	f7ef fc9c 	bl	8002ae8 <clock_gettime>
 80131b0:	e9dd 3100 	ldrd	r3, r1, [sp]
 80131b4:	2900      	cmp	r1, #0
 80131b6:	db12      	blt.n	80131de <rcutils_system_time_now+0x3e>
 80131b8:	ea53 0201 	orrs.w	r2, r3, r1
 80131bc:	9d02      	ldr	r5, [sp, #8]
 80131be:	d101      	bne.n	80131c4 <rcutils_system_time_now+0x24>
 80131c0:	2d00      	cmp	r5, #0
 80131c2:	db0c      	blt.n	80131de <rcutils_system_time_now+0x3e>
 80131c4:	4e08      	ldr	r6, [pc, #32]	@ (80131e8 <rcutils_system_time_now+0x48>)
 80131c6:	2000      	movs	r0, #0
 80131c8:	fba3 3206 	umull	r3, r2, r3, r6
 80131cc:	195b      	adds	r3, r3, r5
 80131ce:	fb06 2201 	mla	r2, r6, r1, r2
 80131d2:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 80131d6:	e9c4 3200 	strd	r3, r2, [r4]
 80131da:	b004      	add	sp, #16
 80131dc:	bd70      	pop	{r4, r5, r6, pc}
 80131de:	2002      	movs	r0, #2
 80131e0:	b004      	add	sp, #16
 80131e2:	bd70      	pop	{r4, r5, r6, pc}
 80131e4:	200b      	movs	r0, #11
 80131e6:	4770      	bx	lr
 80131e8:	3b9aca00 	.word	0x3b9aca00

080131ec <rcutils_steady_time_now>:
 80131ec:	b300      	cbz	r0, 8013230 <rcutils_steady_time_now+0x44>
 80131ee:	b570      	push	{r4, r5, r6, lr}
 80131f0:	b084      	sub	sp, #16
 80131f2:	4604      	mov	r4, r0
 80131f4:	2000      	movs	r0, #0
 80131f6:	4669      	mov	r1, sp
 80131f8:	f7ef fc76 	bl	8002ae8 <clock_gettime>
 80131fc:	e9dd 3100 	ldrd	r3, r1, [sp]
 8013200:	2900      	cmp	r1, #0
 8013202:	db12      	blt.n	801322a <rcutils_steady_time_now+0x3e>
 8013204:	ea53 0201 	orrs.w	r2, r3, r1
 8013208:	9d02      	ldr	r5, [sp, #8]
 801320a:	d101      	bne.n	8013210 <rcutils_steady_time_now+0x24>
 801320c:	2d00      	cmp	r5, #0
 801320e:	db0c      	blt.n	801322a <rcutils_steady_time_now+0x3e>
 8013210:	4e08      	ldr	r6, [pc, #32]	@ (8013234 <rcutils_steady_time_now+0x48>)
 8013212:	2000      	movs	r0, #0
 8013214:	fba3 3206 	umull	r3, r2, r3, r6
 8013218:	195b      	adds	r3, r3, r5
 801321a:	fb06 2201 	mla	r2, r6, r1, r2
 801321e:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8013222:	e9c4 3200 	strd	r3, r2, [r4]
 8013226:	b004      	add	sp, #16
 8013228:	bd70      	pop	{r4, r5, r6, pc}
 801322a:	2002      	movs	r0, #2
 801322c:	b004      	add	sp, #16
 801322e:	bd70      	pop	{r4, r5, r6, pc}
 8013230:	200b      	movs	r0, #11
 8013232:	4770      	bx	lr
 8013234:	3b9aca00 	.word	0x3b9aca00

08013238 <rmw_get_zero_initialized_context>:
 8013238:	b510      	push	{r4, lr}
 801323a:	4604      	mov	r4, r0
 801323c:	3010      	adds	r0, #16
 801323e:	f000 f80f 	bl	8013260 <rmw_get_zero_initialized_init_options>
 8013242:	2300      	movs	r3, #0
 8013244:	4620      	mov	r0, r4
 8013246:	60a3      	str	r3, [r4, #8]
 8013248:	64a3      	str	r3, [r4, #72]	@ 0x48
 801324a:	64e3      	str	r3, [r4, #76]	@ 0x4c
 801324c:	ed9f 7b02 	vldr	d7, [pc, #8]	@ 8013258 <rmw_get_zero_initialized_context+0x20>
 8013250:	ed84 7b00 	vstr	d7, [r4]
 8013254:	bd10      	pop	{r4, pc}
 8013256:	bf00      	nop
	...

08013260 <rmw_get_zero_initialized_init_options>:
 8013260:	b510      	push	{r4, lr}
 8013262:	4604      	mov	r4, r0
 8013264:	2238      	movs	r2, #56	@ 0x38
 8013266:	2100      	movs	r1, #0
 8013268:	f003 fc9e 	bl	8016ba8 <memset>
 801326c:	f104 0010 	add.w	r0, r4, #16
 8013270:	f000 f806 	bl	8013280 <rmw_get_default_security_options>
 8013274:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013278:	4620      	mov	r0, r4
 801327a:	60e3      	str	r3, [r4, #12]
 801327c:	bd10      	pop	{r4, pc}
 801327e:	bf00      	nop

08013280 <rmw_get_default_security_options>:
 8013280:	2200      	movs	r2, #0
 8013282:	7002      	strb	r2, [r0, #0]
 8013284:	6042      	str	r2, [r0, #4]
 8013286:	4770      	bx	lr

08013288 <rmw_validate_full_topic_name>:
 8013288:	2800      	cmp	r0, #0
 801328a:	d05d      	beq.n	8013348 <rmw_validate_full_topic_name+0xc0>
 801328c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013290:	460d      	mov	r5, r1
 8013292:	2900      	cmp	r1, #0
 8013294:	d05a      	beq.n	801334c <rmw_validate_full_topic_name+0xc4>
 8013296:	4604      	mov	r4, r0
 8013298:	4616      	mov	r6, r2
 801329a:	f7ec ffdb 	bl	8000254 <strlen>
 801329e:	b150      	cbz	r0, 80132b6 <rmw_validate_full_topic_name+0x2e>
 80132a0:	7823      	ldrb	r3, [r4, #0]
 80132a2:	2b2f      	cmp	r3, #47	@ 0x2f
 80132a4:	d00e      	beq.n	80132c4 <rmw_validate_full_topic_name+0x3c>
 80132a6:	2302      	movs	r3, #2
 80132a8:	602b      	str	r3, [r5, #0]
 80132aa:	b146      	cbz	r6, 80132be <rmw_validate_full_topic_name+0x36>
 80132ac:	2300      	movs	r3, #0
 80132ae:	4618      	mov	r0, r3
 80132b0:	6033      	str	r3, [r6, #0]
 80132b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132b6:	2301      	movs	r3, #1
 80132b8:	602b      	str	r3, [r5, #0]
 80132ba:	2e00      	cmp	r6, #0
 80132bc:	d1f6      	bne.n	80132ac <rmw_validate_full_topic_name+0x24>
 80132be:	2000      	movs	r0, #0
 80132c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132c4:	1e43      	subs	r3, r0, #1
 80132c6:	5ce2      	ldrb	r2, [r4, r3]
 80132c8:	2a2f      	cmp	r2, #47	@ 0x2f
 80132ca:	d041      	beq.n	8013350 <rmw_validate_full_topic_name+0xc8>
 80132cc:	1e62      	subs	r2, r4, #1
 80132ce:	f1c4 0e01 	rsb	lr, r4, #1
 80132d2:	eb02 0800 	add.w	r8, r2, r0
 80132d6:	eb0e 0702 	add.w	r7, lr, r2
 80132da:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80132de:	f023 0120 	bic.w	r1, r3, #32
 80132e2:	f1a3 0c2f 	sub.w	ip, r3, #47	@ 0x2f
 80132e6:	3941      	subs	r1, #65	@ 0x41
 80132e8:	2919      	cmp	r1, #25
 80132ea:	d90f      	bls.n	801330c <rmw_validate_full_topic_name+0x84>
 80132ec:	f1bc 0f0a 	cmp.w	ip, #10
 80132f0:	d90c      	bls.n	801330c <rmw_validate_full_topic_name+0x84>
 80132f2:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
 80132f6:	fab3 f383 	clz	r3, r3
 80132fa:	095b      	lsrs	r3, r3, #5
 80132fc:	b933      	cbnz	r3, 801330c <rmw_validate_full_topic_name+0x84>
 80132fe:	2204      	movs	r2, #4
 8013300:	602a      	str	r2, [r5, #0]
 8013302:	2e00      	cmp	r6, #0
 8013304:	d0db      	beq.n	80132be <rmw_validate_full_topic_name+0x36>
 8013306:	4618      	mov	r0, r3
 8013308:	6037      	str	r7, [r6, #0]
 801330a:	e7d2      	b.n	80132b2 <rmw_validate_full_topic_name+0x2a>
 801330c:	4542      	cmp	r2, r8
 801330e:	d1e2      	bne.n	80132d6 <rmw_validate_full_topic_name+0x4e>
 8013310:	2301      	movs	r3, #1
 8013312:	4f1a      	ldr	r7, [pc, #104]	@ (801337c <rmw_validate_full_topic_name+0xf4>)
 8013314:	e004      	b.n	8013320 <rmw_validate_full_topic_name+0x98>
 8013316:	4298      	cmp	r0, r3
 8013318:	f104 0401 	add.w	r4, r4, #1
 801331c:	4613      	mov	r3, r2
 801331e:	d91c      	bls.n	801335a <rmw_validate_full_topic_name+0xd2>
 8013320:	4298      	cmp	r0, r3
 8013322:	f103 0201 	add.w	r2, r3, #1
 8013326:	d0f6      	beq.n	8013316 <rmw_validate_full_topic_name+0x8e>
 8013328:	7821      	ldrb	r1, [r4, #0]
 801332a:	292f      	cmp	r1, #47	@ 0x2f
 801332c:	d1f3      	bne.n	8013316 <rmw_validate_full_topic_name+0x8e>
 801332e:	7861      	ldrb	r1, [r4, #1]
 8013330:	292f      	cmp	r1, #47	@ 0x2f
 8013332:	d01e      	beq.n	8013372 <rmw_validate_full_topic_name+0xea>
 8013334:	5dc9      	ldrb	r1, [r1, r7]
 8013336:	0749      	lsls	r1, r1, #29
 8013338:	d5ed      	bpl.n	8013316 <rmw_validate_full_topic_name+0x8e>
 801333a:	2206      	movs	r2, #6
 801333c:	602a      	str	r2, [r5, #0]
 801333e:	2e00      	cmp	r6, #0
 8013340:	d0bd      	beq.n	80132be <rmw_validate_full_topic_name+0x36>
 8013342:	2000      	movs	r0, #0
 8013344:	6033      	str	r3, [r6, #0]
 8013346:	e7b4      	b.n	80132b2 <rmw_validate_full_topic_name+0x2a>
 8013348:	200b      	movs	r0, #11
 801334a:	4770      	bx	lr
 801334c:	200b      	movs	r0, #11
 801334e:	e7b0      	b.n	80132b2 <rmw_validate_full_topic_name+0x2a>
 8013350:	2203      	movs	r2, #3
 8013352:	602a      	str	r2, [r5, #0]
 8013354:	2e00      	cmp	r6, #0
 8013356:	d1f4      	bne.n	8013342 <rmw_validate_full_topic_name+0xba>
 8013358:	e7b1      	b.n	80132be <rmw_validate_full_topic_name+0x36>
 801335a:	28f7      	cmp	r0, #247	@ 0xf7
 801335c:	d803      	bhi.n	8013366 <rmw_validate_full_topic_name+0xde>
 801335e:	2300      	movs	r3, #0
 8013360:	4618      	mov	r0, r3
 8013362:	602b      	str	r3, [r5, #0]
 8013364:	e7a5      	b.n	80132b2 <rmw_validate_full_topic_name+0x2a>
 8013366:	2307      	movs	r3, #7
 8013368:	602b      	str	r3, [r5, #0]
 801336a:	2e00      	cmp	r6, #0
 801336c:	d0a7      	beq.n	80132be <rmw_validate_full_topic_name+0x36>
 801336e:	23f6      	movs	r3, #246	@ 0xf6
 8013370:	e7e7      	b.n	8013342 <rmw_validate_full_topic_name+0xba>
 8013372:	2205      	movs	r2, #5
 8013374:	602a      	str	r2, [r5, #0]
 8013376:	2e00      	cmp	r6, #0
 8013378:	d1e3      	bne.n	8013342 <rmw_validate_full_topic_name+0xba>
 801337a:	e7a0      	b.n	80132be <rmw_validate_full_topic_name+0x36>
 801337c:	0801888f 	.word	0x0801888f

08013380 <rmw_validate_namespace_with_size>:
 8013380:	2800      	cmp	r0, #0
 8013382:	d043      	beq.n	801340c <rmw_validate_namespace_with_size+0x8c>
 8013384:	b570      	push	{r4, r5, r6, lr}
 8013386:	4614      	mov	r4, r2
 8013388:	b0c2      	sub	sp, #264	@ 0x108
 801338a:	b32a      	cbz	r2, 80133d8 <rmw_validate_namespace_with_size+0x58>
 801338c:	2901      	cmp	r1, #1
 801338e:	460d      	mov	r5, r1
 8013390:	461e      	mov	r6, r3
 8013392:	d102      	bne.n	801339a <rmw_validate_namespace_with_size+0x1a>
 8013394:	7803      	ldrb	r3, [r0, #0]
 8013396:	2b2f      	cmp	r3, #47	@ 0x2f
 8013398:	d012      	beq.n	80133c0 <rmw_validate_namespace_with_size+0x40>
 801339a:	aa01      	add	r2, sp, #4
 801339c:	4669      	mov	r1, sp
 801339e:	f7ff ff73 	bl	8013288 <rmw_validate_full_topic_name>
 80133a2:	b980      	cbnz	r0, 80133c6 <rmw_validate_namespace_with_size+0x46>
 80133a4:	9a00      	ldr	r2, [sp, #0]
 80133a6:	b14a      	cbz	r2, 80133bc <rmw_validate_namespace_with_size+0x3c>
 80133a8:	2a07      	cmp	r2, #7
 80133aa:	d007      	beq.n	80133bc <rmw_validate_namespace_with_size+0x3c>
 80133ac:	1e53      	subs	r3, r2, #1
 80133ae:	2b05      	cmp	r3, #5
 80133b0:	d82e      	bhi.n	8013410 <rmw_validate_namespace_with_size+0x90>
 80133b2:	e8df f003 	tbb	[pc, r3]
 80133b6:	1f1c      	.short	0x1f1c
 80133b8:	14282522 	.word	0x14282522
 80133bc:	2df5      	cmp	r5, #245	@ 0xf5
 80133be:	d804      	bhi.n	80133ca <rmw_validate_namespace_with_size+0x4a>
 80133c0:	2300      	movs	r3, #0
 80133c2:	4618      	mov	r0, r3
 80133c4:	6023      	str	r3, [r4, #0]
 80133c6:	b042      	add	sp, #264	@ 0x108
 80133c8:	bd70      	pop	{r4, r5, r6, pc}
 80133ca:	2307      	movs	r3, #7
 80133cc:	6023      	str	r3, [r4, #0]
 80133ce:	2e00      	cmp	r6, #0
 80133d0:	d0f9      	beq.n	80133c6 <rmw_validate_namespace_with_size+0x46>
 80133d2:	23f4      	movs	r3, #244	@ 0xf4
 80133d4:	6033      	str	r3, [r6, #0]
 80133d6:	e7f6      	b.n	80133c6 <rmw_validate_namespace_with_size+0x46>
 80133d8:	200b      	movs	r0, #11
 80133da:	b042      	add	sp, #264	@ 0x108
 80133dc:	bd70      	pop	{r4, r5, r6, pc}
 80133de:	2306      	movs	r3, #6
 80133e0:	6023      	str	r3, [r4, #0]
 80133e2:	2e00      	cmp	r6, #0
 80133e4:	d0ef      	beq.n	80133c6 <rmw_validate_namespace_with_size+0x46>
 80133e6:	9b01      	ldr	r3, [sp, #4]
 80133e8:	6033      	str	r3, [r6, #0]
 80133ea:	b042      	add	sp, #264	@ 0x108
 80133ec:	bd70      	pop	{r4, r5, r6, pc}
 80133ee:	2301      	movs	r3, #1
 80133f0:	6023      	str	r3, [r4, #0]
 80133f2:	e7f6      	b.n	80133e2 <rmw_validate_namespace_with_size+0x62>
 80133f4:	2302      	movs	r3, #2
 80133f6:	6023      	str	r3, [r4, #0]
 80133f8:	e7f3      	b.n	80133e2 <rmw_validate_namespace_with_size+0x62>
 80133fa:	2303      	movs	r3, #3
 80133fc:	6023      	str	r3, [r4, #0]
 80133fe:	e7f0      	b.n	80133e2 <rmw_validate_namespace_with_size+0x62>
 8013400:	2304      	movs	r3, #4
 8013402:	6023      	str	r3, [r4, #0]
 8013404:	e7ed      	b.n	80133e2 <rmw_validate_namespace_with_size+0x62>
 8013406:	2305      	movs	r3, #5
 8013408:	6023      	str	r3, [r4, #0]
 801340a:	e7ea      	b.n	80133e2 <rmw_validate_namespace_with_size+0x62>
 801340c:	200b      	movs	r0, #11
 801340e:	4770      	bx	lr
 8013410:	4613      	mov	r3, r2
 8013412:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8013416:	4a03      	ldr	r2, [pc, #12]	@ (8013424 <rmw_validate_namespace_with_size+0xa4>)
 8013418:	a802      	add	r0, sp, #8
 801341a:	f7ff fd07 	bl	8012e2c <rcutils_snprintf>
 801341e:	2001      	movs	r0, #1
 8013420:	e7d1      	b.n	80133c6 <rmw_validate_namespace_with_size+0x46>
 8013422:	bf00      	nop
 8013424:	08018030 	.word	0x08018030

08013428 <rmw_validate_namespace>:
 8013428:	b168      	cbz	r0, 8013446 <rmw_validate_namespace+0x1e>
 801342a:	b570      	push	{r4, r5, r6, lr}
 801342c:	460d      	mov	r5, r1
 801342e:	4616      	mov	r6, r2
 8013430:	4604      	mov	r4, r0
 8013432:	f7ec ff0f 	bl	8000254 <strlen>
 8013436:	4633      	mov	r3, r6
 8013438:	4601      	mov	r1, r0
 801343a:	462a      	mov	r2, r5
 801343c:	4620      	mov	r0, r4
 801343e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013442:	f7ff bf9d 	b.w	8013380 <rmw_validate_namespace_with_size>
 8013446:	200b      	movs	r0, #11
 8013448:	4770      	bx	lr
 801344a:	bf00      	nop

0801344c <rmw_namespace_validation_result_string>:
 801344c:	2807      	cmp	r0, #7
 801344e:	d803      	bhi.n	8013458 <rmw_namespace_validation_result_string+0xc>
 8013450:	4b02      	ldr	r3, [pc, #8]	@ (801345c <rmw_namespace_validation_result_string+0x10>)
 8013452:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8013456:	4770      	bx	lr
 8013458:	4801      	ldr	r0, [pc, #4]	@ (8013460 <rmw_namespace_validation_result_string+0x14>)
 801345a:	4770      	bx	lr
 801345c:	08018570 	.word	0x08018570
 8013460:	08018080 	.word	0x08018080

08013464 <rmw_validate_node_name>:
 8013464:	2800      	cmp	r0, #0
 8013466:	d042      	beq.n	80134ee <rmw_validate_node_name+0x8a>
 8013468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801346c:	460d      	mov	r5, r1
 801346e:	2900      	cmp	r1, #0
 8013470:	d03f      	beq.n	80134f2 <rmw_validate_node_name+0x8e>
 8013472:	4604      	mov	r4, r0
 8013474:	4616      	mov	r6, r2
 8013476:	f7ec feed 	bl	8000254 <strlen>
 801347a:	b310      	cbz	r0, 80134c2 <rmw_validate_node_name+0x5e>
 801347c:	1e63      	subs	r3, r4, #1
 801347e:	f1c4 0101 	rsb	r1, r4, #1
 8013482:	eb03 0800 	add.w	r8, r3, r0
 8013486:	18cf      	adds	r7, r1, r3
 8013488:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801348c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8013490:	f02e 0c20 	bic.w	ip, lr, #32
 8013494:	2a09      	cmp	r2, #9
 8013496:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801349a:	d905      	bls.n	80134a8 <rmw_validate_node_name+0x44>
 801349c:	f1bc 0f19 	cmp.w	ip, #25
 80134a0:	d902      	bls.n	80134a8 <rmw_validate_node_name+0x44>
 80134a2:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 80134a6:	d114      	bne.n	80134d2 <rmw_validate_node_name+0x6e>
 80134a8:	4598      	cmp	r8, r3
 80134aa:	d1ec      	bne.n	8013486 <rmw_validate_node_name+0x22>
 80134ac:	7822      	ldrb	r2, [r4, #0]
 80134ae:	4b16      	ldr	r3, [pc, #88]	@ (8013508 <rmw_validate_node_name+0xa4>)
 80134b0:	5cd3      	ldrb	r3, [r2, r3]
 80134b2:	f013 0304 	ands.w	r3, r3, #4
 80134b6:	d113      	bne.n	80134e0 <rmw_validate_node_name+0x7c>
 80134b8:	28ff      	cmp	r0, #255	@ 0xff
 80134ba:	d81c      	bhi.n	80134f6 <rmw_validate_node_name+0x92>
 80134bc:	4618      	mov	r0, r3
 80134be:	602b      	str	r3, [r5, #0]
 80134c0:	e00c      	b.n	80134dc <rmw_validate_node_name+0x78>
 80134c2:	2301      	movs	r3, #1
 80134c4:	602b      	str	r3, [r5, #0]
 80134c6:	b17e      	cbz	r6, 80134e8 <rmw_validate_node_name+0x84>
 80134c8:	2300      	movs	r3, #0
 80134ca:	4618      	mov	r0, r3
 80134cc:	6033      	str	r3, [r6, #0]
 80134ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134d2:	2302      	movs	r3, #2
 80134d4:	602b      	str	r3, [r5, #0]
 80134d6:	b13e      	cbz	r6, 80134e8 <rmw_validate_node_name+0x84>
 80134d8:	2000      	movs	r0, #0
 80134da:	6037      	str	r7, [r6, #0]
 80134dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134e0:	2303      	movs	r3, #3
 80134e2:	602b      	str	r3, [r5, #0]
 80134e4:	2e00      	cmp	r6, #0
 80134e6:	d1ef      	bne.n	80134c8 <rmw_validate_node_name+0x64>
 80134e8:	2000      	movs	r0, #0
 80134ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134ee:	200b      	movs	r0, #11
 80134f0:	4770      	bx	lr
 80134f2:	200b      	movs	r0, #11
 80134f4:	e7f2      	b.n	80134dc <rmw_validate_node_name+0x78>
 80134f6:	2204      	movs	r2, #4
 80134f8:	602a      	str	r2, [r5, #0]
 80134fa:	2e00      	cmp	r6, #0
 80134fc:	d0f4      	beq.n	80134e8 <rmw_validate_node_name+0x84>
 80134fe:	22fe      	movs	r2, #254	@ 0xfe
 8013500:	4618      	mov	r0, r3
 8013502:	6032      	str	r2, [r6, #0]
 8013504:	e7ea      	b.n	80134dc <rmw_validate_node_name+0x78>
 8013506:	bf00      	nop
 8013508:	0801888f 	.word	0x0801888f

0801350c <rmw_node_name_validation_result_string>:
 801350c:	2804      	cmp	r0, #4
 801350e:	d803      	bhi.n	8013518 <rmw_node_name_validation_result_string+0xc>
 8013510:	4b02      	ldr	r3, [pc, #8]	@ (801351c <rmw_node_name_validation_result_string+0x10>)
 8013512:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8013516:	4770      	bx	lr
 8013518:	4801      	ldr	r0, [pc, #4]	@ (8013520 <rmw_node_name_validation_result_string+0x14>)
 801351a:	4770      	bx	lr
 801351c:	08018590 	.word	0x08018590
 8013520:	08018228 	.word	0x08018228

08013524 <get_memory>:
 8013524:	4603      	mov	r3, r0
 8013526:	6840      	ldr	r0, [r0, #4]
 8013528:	b158      	cbz	r0, 8013542 <get_memory+0x1e>
 801352a:	6842      	ldr	r2, [r0, #4]
 801352c:	605a      	str	r2, [r3, #4]
 801352e:	b10a      	cbz	r2, 8013534 <get_memory+0x10>
 8013530:	2100      	movs	r1, #0
 8013532:	6011      	str	r1, [r2, #0]
 8013534:	681a      	ldr	r2, [r3, #0]
 8013536:	6042      	str	r2, [r0, #4]
 8013538:	b102      	cbz	r2, 801353c <get_memory+0x18>
 801353a:	6010      	str	r0, [r2, #0]
 801353c:	2200      	movs	r2, #0
 801353e:	6002      	str	r2, [r0, #0]
 8013540:	6018      	str	r0, [r3, #0]
 8013542:	4770      	bx	lr

08013544 <put_memory>:
 8013544:	680b      	ldr	r3, [r1, #0]
 8013546:	b10b      	cbz	r3, 801354c <put_memory+0x8>
 8013548:	684a      	ldr	r2, [r1, #4]
 801354a:	605a      	str	r2, [r3, #4]
 801354c:	684a      	ldr	r2, [r1, #4]
 801354e:	b102      	cbz	r2, 8013552 <put_memory+0xe>
 8013550:	6013      	str	r3, [r2, #0]
 8013552:	6803      	ldr	r3, [r0, #0]
 8013554:	428b      	cmp	r3, r1
 8013556:	6843      	ldr	r3, [r0, #4]
 8013558:	bf08      	it	eq
 801355a:	6002      	streq	r2, [r0, #0]
 801355c:	604b      	str	r3, [r1, #4]
 801355e:	b103      	cbz	r3, 8013562 <put_memory+0x1e>
 8013560:	6019      	str	r1, [r3, #0]
 8013562:	2300      	movs	r3, #0
 8013564:	600b      	str	r3, [r1, #0]
 8013566:	6041      	str	r1, [r0, #4]
 8013568:	4770      	bx	lr
 801356a:	bf00      	nop

0801356c <rmw_get_implementation_identifier>:
 801356c:	4b01      	ldr	r3, [pc, #4]	@ (8013574 <rmw_get_implementation_identifier+0x8>)
 801356e:	6818      	ldr	r0, [r3, #0]
 8013570:	4770      	bx	lr
 8013572:	bf00      	nop
 8013574:	080185a4 	.word	0x080185a4

08013578 <rmw_init_options_init>:
 8013578:	b084      	sub	sp, #16
 801357a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801357c:	b083      	sub	sp, #12
 801357e:	ad09      	add	r5, sp, #36	@ 0x24
 8013580:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8013584:	b130      	cbz	r0, 8013594 <rmw_init_options_init+0x1c>
 8013586:	4604      	mov	r4, r0
 8013588:	4628      	mov	r0, r5
 801358a:	f7f9 f949 	bl	800c820 <rcutils_allocator_is_valid>
 801358e:	b108      	cbz	r0, 8013594 <rmw_init_options_init+0x1c>
 8013590:	68a6      	ldr	r6, [r4, #8]
 8013592:	b12e      	cbz	r6, 80135a0 <rmw_init_options_init+0x28>
 8013594:	200b      	movs	r0, #11
 8013596:	b003      	add	sp, #12
 8013598:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801359c:	b004      	add	sp, #16
 801359e:	4770      	bx	lr
 80135a0:	2200      	movs	r2, #0
 80135a2:	2300      	movs	r3, #0
 80135a4:	f104 0c20 	add.w	ip, r4, #32
 80135a8:	466f      	mov	r7, sp
 80135aa:	e9c4 2300 	strd	r2, r3, [r4]
 80135ae:	4b1f      	ldr	r3, [pc, #124]	@ (801362c <rmw_init_options_init+0xb4>)
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	60a3      	str	r3, [r4, #8]
 80135b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80135b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80135ba:	682b      	ldr	r3, [r5, #0]
 80135bc:	4638      	mov	r0, r7
 80135be:	f8cc 3000 	str.w	r3, [ip]
 80135c2:	61e6      	str	r6, [r4, #28]
 80135c4:	60e6      	str	r6, [r4, #12]
 80135c6:	f7ff fe5b 	bl	8013280 <rmw_get_default_security_options>
 80135ca:	f104 0310 	add.w	r3, r4, #16
 80135ce:	2203      	movs	r2, #3
 80135d0:	e897 0003 	ldmia.w	r7, {r0, r1}
 80135d4:	e883 0003 	stmia.w	r3, {r0, r1}
 80135d8:	4815      	ldr	r0, [pc, #84]	@ (8013630 <rmw_init_options_init+0xb8>)
 80135da:	4916      	ldr	r1, [pc, #88]	@ (8013634 <rmw_init_options_init+0xbc>)
 80135dc:	7626      	strb	r6, [r4, #24]
 80135de:	f7f9 fc45 	bl	800ce6c <rmw_uxrce_init_init_options_impl_memory>
 80135e2:	4813      	ldr	r0, [pc, #76]	@ (8013630 <rmw_init_options_init+0xb8>)
 80135e4:	f7ff ff9e 	bl	8013524 <get_memory>
 80135e8:	b1f0      	cbz	r0, 8013628 <rmw_init_options_init+0xb0>
 80135ea:	4a13      	ldr	r2, [pc, #76]	@ (8013638 <rmw_init_options_init+0xc0>)
 80135ec:	6883      	ldr	r3, [r0, #8]
 80135ee:	6851      	ldr	r1, [r2, #4]
 80135f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80135f2:	7810      	ldrb	r0, [r2, #0]
 80135f4:	6159      	str	r1, [r3, #20]
 80135f6:	68d1      	ldr	r1, [r2, #12]
 80135f8:	7418      	strb	r0, [r3, #16]
 80135fa:	61d9      	str	r1, [r3, #28]
 80135fc:	6911      	ldr	r1, [r2, #16]
 80135fe:	6219      	str	r1, [r3, #32]
 8013600:	6951      	ldr	r1, [r2, #20]
 8013602:	6892      	ldr	r2, [r2, #8]
 8013604:	6259      	str	r1, [r3, #36]	@ 0x24
 8013606:	619a      	str	r2, [r3, #24]
 8013608:	f7fd fc08 	bl	8010e1c <uxr_nanos>
 801360c:	f002 ff20 	bl	8016450 <srand>
 8013610:	f002 ff4c 	bl	80164ac <rand>
 8013614:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013616:	6298      	str	r0, [r3, #40]	@ 0x28
 8013618:	2800      	cmp	r0, #0
 801361a:	d0f9      	beq.n	8013610 <rmw_init_options_init+0x98>
 801361c:	2000      	movs	r0, #0
 801361e:	b003      	add	sp, #12
 8013620:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013624:	b004      	add	sp, #16
 8013626:	4770      	bx	lr
 8013628:	2001      	movs	r0, #1
 801362a:	e7b4      	b.n	8013596 <rmw_init_options_init+0x1e>
 801362c:	080185a4 	.word	0x080185a4
 8013630:	2000eb24 	.word	0x2000eb24
 8013634:	2000a3c0 	.word	0x2000a3c0
 8013638:	2000a24c 	.word	0x2000a24c

0801363c <rmw_init_options_copy>:
 801363c:	b570      	push	{r4, r5, r6, lr}
 801363e:	b088      	sub	sp, #32
 8013640:	b160      	cbz	r0, 801365c <rmw_init_options_copy+0x20>
 8013642:	460d      	mov	r5, r1
 8013644:	b151      	cbz	r1, 801365c <rmw_init_options_copy+0x20>
 8013646:	4604      	mov	r4, r0
 8013648:	6880      	ldr	r0, [r0, #8]
 801364a:	b128      	cbz	r0, 8013658 <rmw_init_options_copy+0x1c>
 801364c:	4b34      	ldr	r3, [pc, #208]	@ (8013720 <rmw_init_options_copy+0xe4>)
 801364e:	6819      	ldr	r1, [r3, #0]
 8013650:	f7ec fdf6 	bl	8000240 <strcmp>
 8013654:	2800      	cmp	r0, #0
 8013656:	d157      	bne.n	8013708 <rmw_init_options_copy+0xcc>
 8013658:	68ab      	ldr	r3, [r5, #8]
 801365a:	b11b      	cbz	r3, 8013664 <rmw_init_options_copy+0x28>
 801365c:	240b      	movs	r4, #11
 801365e:	4620      	mov	r0, r4
 8013660:	b008      	add	sp, #32
 8013662:	bd70      	pop	{r4, r5, r6, pc}
 8013664:	4623      	mov	r3, r4
 8013666:	462a      	mov	r2, r5
 8013668:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 801366c:	f8d3 e000 	ldr.w	lr, [r3]
 8013670:	3310      	adds	r3, #16
 8013672:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 8013676:	3210      	adds	r2, #16
 8013678:	f853 0c08 	ldr.w	r0, [r3, #-8]
 801367c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8013680:	42b3      	cmp	r3, r6
 8013682:	f842 ec10 	str.w	lr, [r2, #-16]
 8013686:	f842 cc0c 	str.w	ip, [r2, #-12]
 801368a:	f842 0c08 	str.w	r0, [r2, #-8]
 801368e:	f842 1c04 	str.w	r1, [r2, #-4]
 8013692:	d1eb      	bne.n	801366c <rmw_init_options_copy+0x30>
 8013694:	6819      	ldr	r1, [r3, #0]
 8013696:	f104 0e20 	add.w	lr, r4, #32
 801369a:	685b      	ldr	r3, [r3, #4]
 801369c:	f10d 0c0c 	add.w	ip, sp, #12
 80136a0:	6011      	str	r1, [r2, #0]
 80136a2:	6053      	str	r3, [r2, #4]
 80136a4:	4666      	mov	r6, ip
 80136a6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80136aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80136ae:	f8de 3000 	ldr.w	r3, [lr]
 80136b2:	4630      	mov	r0, r6
 80136b4:	f8cc 3000 	str.w	r3, [ip]
 80136b8:	f7f9 f8b2 	bl	800c820 <rcutils_allocator_is_valid>
 80136bc:	2800      	cmp	r0, #0
 80136be:	d0cd      	beq.n	801365c <rmw_init_options_copy+0x20>
 80136c0:	ab08      	add	r3, sp, #32
 80136c2:	e913 0003 	ldmdb	r3, {r0, r1}
 80136c6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80136ca:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80136ce:	69e0      	ldr	r0, [r4, #28]
 80136d0:	f7ff fbfa 	bl	8012ec8 <rcutils_strdup>
 80136d4:	61e8      	str	r0, [r5, #28]
 80136d6:	69e3      	ldr	r3, [r4, #28]
 80136d8:	b103      	cbz	r3, 80136dc <rmw_init_options_copy+0xa0>
 80136da:	b1f8      	cbz	r0, 801371c <rmw_init_options_copy+0xe0>
 80136dc:	4811      	ldr	r0, [pc, #68]	@ (8013724 <rmw_init_options_copy+0xe8>)
 80136de:	f7ff ff21 	bl	8013524 <get_memory>
 80136e2:	b1a8      	cbz	r0, 8013710 <rmw_init_options_copy+0xd4>
 80136e4:	6883      	ldr	r3, [r0, #8]
 80136e6:	636b      	str	r3, [r5, #52]	@ 0x34
 80136e8:	f103 0510 	add.w	r5, r3, #16
 80136ec:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80136ee:	2400      	movs	r4, #0
 80136f0:	f102 0c10 	add.w	ip, r2, #16
 80136f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80136f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80136fa:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80136fe:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8013702:	4620      	mov	r0, r4
 8013704:	b008      	add	sp, #32
 8013706:	bd70      	pop	{r4, r5, r6, pc}
 8013708:	240c      	movs	r4, #12
 801370a:	4620      	mov	r0, r4
 801370c:	b008      	add	sp, #32
 801370e:	bd70      	pop	{r4, r5, r6, pc}
 8013710:	9b04      	ldr	r3, [sp, #16]
 8013712:	2401      	movs	r4, #1
 8013714:	9907      	ldr	r1, [sp, #28]
 8013716:	69e8      	ldr	r0, [r5, #28]
 8013718:	4798      	blx	r3
 801371a:	e7a0      	b.n	801365e <rmw_init_options_copy+0x22>
 801371c:	240a      	movs	r4, #10
 801371e:	e79e      	b.n	801365e <rmw_init_options_copy+0x22>
 8013720:	080185a4 	.word	0x080185a4
 8013724:	2000eb24 	.word	0x2000eb24

08013728 <rmw_init_options_fini>:
 8013728:	b510      	push	{r4, lr}
 801372a:	b08e      	sub	sp, #56	@ 0x38
 801372c:	2800      	cmp	r0, #0
 801372e:	d035      	beq.n	801379c <rmw_init_options_fini+0x74>
 8013730:	4604      	mov	r4, r0
 8013732:	3020      	adds	r0, #32
 8013734:	f7f9 f874 	bl	800c820 <rcutils_allocator_is_valid>
 8013738:	b380      	cbz	r0, 801379c <rmw_init_options_fini+0x74>
 801373a:	68a0      	ldr	r0, [r4, #8]
 801373c:	b120      	cbz	r0, 8013748 <rmw_init_options_fini+0x20>
 801373e:	4b1c      	ldr	r3, [pc, #112]	@ (80137b0 <rmw_init_options_fini+0x88>)
 8013740:	6819      	ldr	r1, [r3, #0]
 8013742:	f7ec fd7d 	bl	8000240 <strcmp>
 8013746:	bb88      	cbnz	r0, 80137ac <rmw_init_options_fini+0x84>
 8013748:	4b1a      	ldr	r3, [pc, #104]	@ (80137b4 <rmw_init_options_fini+0x8c>)
 801374a:	6819      	ldr	r1, [r3, #0]
 801374c:	b351      	cbz	r1, 80137a4 <rmw_init_options_fini+0x7c>
 801374e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8013750:	e001      	b.n	8013756 <rmw_init_options_fini+0x2e>
 8013752:	6849      	ldr	r1, [r1, #4]
 8013754:	b331      	cbz	r1, 80137a4 <rmw_init_options_fini+0x7c>
 8013756:	688b      	ldr	r3, [r1, #8]
 8013758:	429a      	cmp	r2, r3
 801375a:	d1fa      	bne.n	8013752 <rmw_init_options_fini+0x2a>
 801375c:	4815      	ldr	r0, [pc, #84]	@ (80137b4 <rmw_init_options_fini+0x8c>)
 801375e:	f7ff fef1 	bl	8013544 <put_memory>
 8013762:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013764:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8013766:	69e0      	ldr	r0, [r4, #28]
 8013768:	4798      	blx	r3
 801376a:	4668      	mov	r0, sp
 801376c:	f7ff fd78 	bl	8013260 <rmw_get_zero_initialized_init_options>
 8013770:	46ee      	mov	lr, sp
 8013772:	46a4      	mov	ip, r4
 8013774:	2400      	movs	r4, #0
 8013776:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801377a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801377e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013782:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013786:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801378a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801378e:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013792:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013796:	4620      	mov	r0, r4
 8013798:	b00e      	add	sp, #56	@ 0x38
 801379a:	bd10      	pop	{r4, pc}
 801379c:	240b      	movs	r4, #11
 801379e:	4620      	mov	r0, r4
 80137a0:	b00e      	add	sp, #56	@ 0x38
 80137a2:	bd10      	pop	{r4, pc}
 80137a4:	2401      	movs	r4, #1
 80137a6:	4620      	mov	r0, r4
 80137a8:	b00e      	add	sp, #56	@ 0x38
 80137aa:	bd10      	pop	{r4, pc}
 80137ac:	240c      	movs	r4, #12
 80137ae:	e7f2      	b.n	8013796 <rmw_init_options_fini+0x6e>
 80137b0:	080185a4 	.word	0x080185a4
 80137b4:	2000eb24 	.word	0x2000eb24

080137b8 <rmw_init>:
 80137b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80137bc:	b083      	sub	sp, #12
 80137be:	2800      	cmp	r0, #0
 80137c0:	f000 80d3 	beq.w	801396a <rmw_init+0x1b2>
 80137c4:	460e      	mov	r6, r1
 80137c6:	2900      	cmp	r1, #0
 80137c8:	f000 80cf 	beq.w	801396a <rmw_init+0x1b2>
 80137cc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80137ce:	4605      	mov	r5, r0
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	f000 80ca 	beq.w	801396a <rmw_init+0x1b2>
 80137d6:	4b78      	ldr	r3, [pc, #480]	@ (80139b8 <rmw_init+0x200>)
 80137d8:	6880      	ldr	r0, [r0, #8]
 80137da:	681f      	ldr	r7, [r3, #0]
 80137dc:	b128      	cbz	r0, 80137ea <rmw_init+0x32>
 80137de:	4639      	mov	r1, r7
 80137e0:	f7ec fd2e 	bl	8000240 <strcmp>
 80137e4:	2800      	cmp	r0, #0
 80137e6:	f040 80ca 	bne.w	801397e <rmw_init+0x1c6>
 80137ea:	4c74      	ldr	r4, [pc, #464]	@ (80139bc <rmw_init+0x204>)
 80137ec:	f04f 0800 	mov.w	r8, #0
 80137f0:	4973      	ldr	r1, [pc, #460]	@ (80139c0 <rmw_init+0x208>)
 80137f2:	4874      	ldr	r0, [pc, #464]	@ (80139c4 <rmw_init+0x20c>)
 80137f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80137f8:	60b7      	str	r7, [r6, #8]
 80137fa:	e9c6 2300 	strd	r2, r3, [r6]
 80137fe:	68eb      	ldr	r3, [r5, #12]
 8013800:	2201      	movs	r2, #1
 8013802:	64b3      	str	r3, [r6, #72]	@ 0x48
 8013804:	f7f9 fad2 	bl	800cdac <rmw_uxrce_init_session_memory>
 8013808:	4620      	mov	r0, r4
 801380a:	2204      	movs	r2, #4
 801380c:	496e      	ldr	r1, [pc, #440]	@ (80139c8 <rmw_init+0x210>)
 801380e:	f7f9 fb0d 	bl	800ce2c <rmw_uxrce_init_static_input_buffer_memory>
 8013812:	486c      	ldr	r0, [pc, #432]	@ (80139c4 <rmw_init+0x20c>)
 8013814:	f884 800d 	strb.w	r8, [r4, #13]
 8013818:	f7ff fe84 	bl	8013524 <get_memory>
 801381c:	2800      	cmp	r0, #0
 801381e:	f000 80a9 	beq.w	8013974 <rmw_init+0x1bc>
 8013822:	6884      	ldr	r4, [r0, #8]
 8013824:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8013826:	f104 0910 	add.w	r9, r4, #16
 801382a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 801382c:	f890 c010 	ldrb.w	ip, [r0, #16]
 8013830:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8013834:	9101      	str	r1, [sp, #4]
 8013836:	4661      	mov	r1, ip
 8013838:	6a00      	ldr	r0, [r0, #32]
 801383a:	9000      	str	r0, [sp, #0]
 801383c:	4648      	mov	r0, r9
 801383e:	f000 fcf9 	bl	8014234 <uxr_set_custom_transport_callbacks>
 8013842:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8013846:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 801384a:	4960      	ldr	r1, [pc, #384]	@ (80139cc <rmw_init+0x214>)
 801384c:	4860      	ldr	r0, [pc, #384]	@ (80139d0 <rmw_init+0x218>)
 801384e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8013852:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8013856:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 801385a:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 801385e:	2201      	movs	r2, #1
 8013860:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8013864:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8013868:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 801386c:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8013870:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8013872:	f7f9 fa7b 	bl	800cd6c <rmw_uxrce_init_node_memory>
 8013876:	2205      	movs	r2, #5
 8013878:	4956      	ldr	r1, [pc, #344]	@ (80139d4 <rmw_init+0x21c>)
 801387a:	4857      	ldr	r0, [pc, #348]	@ (80139d8 <rmw_init+0x220>)
 801387c:	f7f9 fa56 	bl	800cd2c <rmw_uxrce_init_subscription_memory>
 8013880:	220a      	movs	r2, #10
 8013882:	4956      	ldr	r1, [pc, #344]	@ (80139dc <rmw_init+0x224>)
 8013884:	4856      	ldr	r0, [pc, #344]	@ (80139e0 <rmw_init+0x228>)
 8013886:	f7f9 fa31 	bl	800ccec <rmw_uxrce_init_publisher_memory>
 801388a:	2201      	movs	r2, #1
 801388c:	4955      	ldr	r1, [pc, #340]	@ (80139e4 <rmw_init+0x22c>)
 801388e:	4856      	ldr	r0, [pc, #344]	@ (80139e8 <rmw_init+0x230>)
 8013890:	f7f9 f9ec 	bl	800cc6c <rmw_uxrce_init_service_memory>
 8013894:	2201      	movs	r2, #1
 8013896:	4955      	ldr	r1, [pc, #340]	@ (80139ec <rmw_init+0x234>)
 8013898:	4855      	ldr	r0, [pc, #340]	@ (80139f0 <rmw_init+0x238>)
 801389a:	f7f9 fa07 	bl	800ccac <rmw_uxrce_init_client_memory>
 801389e:	220f      	movs	r2, #15
 80138a0:	4954      	ldr	r1, [pc, #336]	@ (80139f4 <rmw_init+0x23c>)
 80138a2:	4855      	ldr	r0, [pc, #340]	@ (80139f8 <rmw_init+0x240>)
 80138a4:	f7f9 faa2 	bl	800cdec <rmw_uxrce_init_topic_memory>
 80138a8:	2203      	movs	r2, #3
 80138aa:	4954      	ldr	r1, [pc, #336]	@ (80139fc <rmw_init+0x244>)
 80138ac:	4854      	ldr	r0, [pc, #336]	@ (8013a00 <rmw_init+0x248>)
 80138ae:	f7f9 fadd 	bl	800ce6c <rmw_uxrce_init_init_options_impl_memory>
 80138b2:	2204      	movs	r2, #4
 80138b4:	4953      	ldr	r1, [pc, #332]	@ (8013a04 <rmw_init+0x24c>)
 80138b6:	4854      	ldr	r0, [pc, #336]	@ (8013a08 <rmw_init+0x250>)
 80138b8:	f7f9 faf8 	bl	800ceac <rmw_uxrce_init_wait_set_memory>
 80138bc:	4953      	ldr	r1, [pc, #332]	@ (8013a0c <rmw_init+0x254>)
 80138be:	4854      	ldr	r0, [pc, #336]	@ (8013a10 <rmw_init+0x258>)
 80138c0:	2204      	movs	r2, #4
 80138c2:	f7f9 fb13 	bl	800ceec <rmw_uxrce_init_guard_condition_memory>
 80138c6:	4642      	mov	r2, r8
 80138c8:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80138ca:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 80138cc:	f000 fb0a 	bl	8013ee4 <rmw_uxrce_transport_init>
 80138d0:	4607      	mov	r7, r0
 80138d2:	2800      	cmp	r0, #0
 80138d4:	d158      	bne.n	8013988 <rmw_init+0x1d0>
 80138d6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80138d8:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 80138dc:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 80138e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80138e2:	4628      	mov	r0, r5
 80138e4:	f7fc f918 	bl	800fb18 <uxr_init_session>
 80138e8:	4622      	mov	r2, r4
 80138ea:	494a      	ldr	r1, [pc, #296]	@ (8013a14 <rmw_init+0x25c>)
 80138ec:	4628      	mov	r0, r5
 80138ee:	f7fc f937 	bl	800fb60 <uxr_set_topic_callback>
 80138f2:	463a      	mov	r2, r7
 80138f4:	4948      	ldr	r1, [pc, #288]	@ (8013a18 <rmw_init+0x260>)
 80138f6:	4628      	mov	r0, r5
 80138f8:	f7fc f92e 	bl	800fb58 <uxr_set_status_callback>
 80138fc:	463a      	mov	r2, r7
 80138fe:	4947      	ldr	r1, [pc, #284]	@ (8013a1c <rmw_init+0x264>)
 8013900:	4628      	mov	r0, r5
 8013902:	f7fc f931 	bl	800fb68 <uxr_set_request_callback>
 8013906:	463a      	mov	r2, r7
 8013908:	4945      	ldr	r1, [pc, #276]	@ (8013a20 <rmw_init+0x268>)
 801390a:	4628      	mov	r0, r5
 801390c:	f7fc f930 	bl	800fb70 <uxr_set_reply_callback>
 8013910:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8013914:	2304      	movs	r3, #4
 8013916:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 801391a:	0092      	lsls	r2, r2, #2
 801391c:	4628      	mov	r0, r5
 801391e:	f7fc f967 	bl	800fbf0 <uxr_create_input_reliable_stream>
 8013922:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8013926:	2304      	movs	r3, #4
 8013928:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 801392c:	0092      	lsls	r2, r2, #2
 801392e:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8013932:	4628      	mov	r0, r5
 8013934:	f7fc f932 	bl	800fb9c <uxr_create_output_reliable_stream>
 8013938:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 801393c:	4628      	mov	r0, r5
 801393e:	f7fc f951 	bl	800fbe4 <uxr_create_input_best_effort_stream>
 8013942:	f241 3194 	movw	r1, #5012	@ 0x1394
 8013946:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 801394a:	4628      	mov	r0, r5
 801394c:	4421      	add	r1, r4
 801394e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8013952:	f7fc f911 	bl	800fb78 <uxr_create_output_best_effort_stream>
 8013956:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 801395a:	4628      	mov	r0, r5
 801395c:	f7fc fe72 	bl	8010644 <uxr_create_session>
 8013960:	b1f8      	cbz	r0, 80139a2 <rmw_init+0x1ea>
 8013962:	4638      	mov	r0, r7
 8013964:	b003      	add	sp, #12
 8013966:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801396a:	270b      	movs	r7, #11
 801396c:	4638      	mov	r0, r7
 801396e:	b003      	add	sp, #12
 8013970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013974:	2701      	movs	r7, #1
 8013976:	4638      	mov	r0, r7
 8013978:	b003      	add	sp, #12
 801397a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801397e:	270c      	movs	r7, #12
 8013980:	4638      	mov	r0, r7
 8013982:	b003      	add	sp, #12
 8013984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013988:	4648      	mov	r0, r9
 801398a:	f000 fc91 	bl	80142b0 <uxr_close_custom_transport>
 801398e:	4621      	mov	r1, r4
 8013990:	480c      	ldr	r0, [pc, #48]	@ (80139c4 <rmw_init+0x20c>)
 8013992:	f7ff fdd7 	bl	8013544 <put_memory>
 8013996:	4638      	mov	r0, r7
 8013998:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 801399c:	b003      	add	sp, #12
 801399e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80139a2:	4648      	mov	r0, r9
 80139a4:	f000 fc84 	bl	80142b0 <uxr_close_custom_transport>
 80139a8:	4621      	mov	r1, r4
 80139aa:	4806      	ldr	r0, [pc, #24]	@ (80139c4 <rmw_init+0x20c>)
 80139ac:	f7ff fdca 	bl	8013544 <put_memory>
 80139b0:	64f7      	str	r7, [r6, #76]	@ 0x4c
 80139b2:	2701      	movs	r7, #1
 80139b4:	e7d5      	b.n	8013962 <rmw_init+0x1aa>
 80139b6:	bf00      	nop
 80139b8:	080185a4 	.word	0x080185a4
 80139bc:	2000eb74 	.word	0x2000eb74
 80139c0:	2000ae20 	.word	0x2000ae20
 80139c4:	2000eb64 	.word	0x2000eb64
 80139c8:	2000c3c8 	.word	0x2000c3c8
 80139cc:	2000a444 	.word	0x2000a444
 80139d0:	2000eb34 	.word	0x2000eb34
 80139d4:	2000e4c8 	.word	0x2000e4c8
 80139d8:	2000eb84 	.word	0x2000eb84
 80139dc:	2000a4e8 	.word	0x2000a4e8
 80139e0:	2000eb44 	.word	0x2000eb44
 80139e4:	2000ad58 	.word	0x2000ad58
 80139e8:	2000eb54 	.word	0x2000eb54
 80139ec:	2000a278 	.word	0x2000a278
 80139f0:	2000a268 	.word	0x2000a268
 80139f4:	2000e900 	.word	0x2000e900
 80139f8:	2000eb94 	.word	0x2000eb94
 80139fc:	2000a3c0 	.word	0x2000a3c0
 8013a00:	2000eb24 	.word	0x2000eb24
 8013a04:	2000eaa4 	.word	0x2000eaa4
 8013a08:	2000eba4 	.word	0x2000eba4
 8013a0c:	2000a340 	.word	0x2000a340
 8013a10:	2000eb14 	.word	0x2000eb14
 8013a14:	08015e89 	.word	0x08015e89
 8013a18:	08015e81 	.word	0x08015e81
 8013a1c:	08015f21 	.word	0x08015f21
 8013a20:	08015fbd 	.word	0x08015fbd

08013a24 <rmw_context_fini>:
 8013a24:	4b17      	ldr	r3, [pc, #92]	@ (8013a84 <rmw_context_fini+0x60>)
 8013a26:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8013a28:	b570      	push	{r4, r5, r6, lr}
 8013a2a:	681c      	ldr	r4, [r3, #0]
 8013a2c:	4605      	mov	r5, r0
 8013a2e:	b334      	cbz	r4, 8013a7e <rmw_context_fini+0x5a>
 8013a30:	2600      	movs	r6, #0
 8013a32:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8013a36:	6902      	ldr	r2, [r0, #16]
 8013a38:	428a      	cmp	r2, r1
 8013a3a:	d018      	beq.n	8013a6e <rmw_context_fini+0x4a>
 8013a3c:	2c00      	cmp	r4, #0
 8013a3e:	d1f8      	bne.n	8013a32 <rmw_context_fini+0xe>
 8013a40:	b189      	cbz	r1, 8013a66 <rmw_context_fini+0x42>
 8013a42:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8013a46:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8013a4a:	789b      	ldrb	r3, [r3, #2]
 8013a4c:	2b01      	cmp	r3, #1
 8013a4e:	bf14      	ite	ne
 8013a50:	210a      	movne	r1, #10
 8013a52:	2100      	moveq	r1, #0
 8013a54:	f7fc fdce 	bl	80105f4 <uxr_delete_session_retries>
 8013a58:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8013a5a:	f7f9 fa67 	bl	800cf2c <rmw_uxrce_fini_session_memory>
 8013a5e:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8013a60:	3010      	adds	r0, #16
 8013a62:	f000 fc25 	bl	80142b0 <uxr_close_custom_transport>
 8013a66:	2300      	movs	r3, #0
 8013a68:	4630      	mov	r0, r6
 8013a6a:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8013a6c:	bd70      	pop	{r4, r5, r6, pc}
 8013a6e:	3018      	adds	r0, #24
 8013a70:	f000 f90e 	bl	8013c90 <rmw_destroy_node>
 8013a74:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8013a76:	4606      	mov	r6, r0
 8013a78:	2c00      	cmp	r4, #0
 8013a7a:	d1da      	bne.n	8013a32 <rmw_context_fini+0xe>
 8013a7c:	e7e0      	b.n	8013a40 <rmw_context_fini+0x1c>
 8013a7e:	4626      	mov	r6, r4
 8013a80:	e7de      	b.n	8013a40 <rmw_context_fini+0x1c>
 8013a82:	bf00      	nop
 8013a84:	2000eb34 	.word	0x2000eb34

08013a88 <create_topic>:
 8013a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a8c:	4605      	mov	r5, r0
 8013a8e:	b084      	sub	sp, #16
 8013a90:	4822      	ldr	r0, [pc, #136]	@ (8013b1c <create_topic+0x94>)
 8013a92:	460f      	mov	r7, r1
 8013a94:	4616      	mov	r6, r2
 8013a96:	f7ff fd45 	bl	8013524 <get_memory>
 8013a9a:	4604      	mov	r4, r0
 8013a9c:	2800      	cmp	r0, #0
 8013a9e:	d039      	beq.n	8013b14 <create_topic+0x8c>
 8013aa0:	692b      	ldr	r3, [r5, #16]
 8013aa2:	2102      	movs	r1, #2
 8013aa4:	6884      	ldr	r4, [r0, #8]
 8013aa6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013aaa:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 8013b24 <create_topic+0x9c>
 8013aae:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8013ab2:	1c42      	adds	r2, r0, #1
 8013ab4:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8013ab8:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8013abc:	f7fb ff6e 	bl	800f99c <uxr_object_id>
 8013ac0:	223c      	movs	r2, #60	@ 0x3c
 8013ac2:	6120      	str	r0, [r4, #16]
 8013ac4:	4641      	mov	r1, r8
 8013ac6:	4638      	mov	r0, r7
 8013ac8:	f7f9 fb6e 	bl	800d1a8 <generate_topic_name>
 8013acc:	b1f0      	cbz	r0, 8013b0c <create_topic+0x84>
 8013ace:	4f14      	ldr	r7, [pc, #80]	@ (8013b20 <create_topic+0x98>)
 8013ad0:	4630      	mov	r0, r6
 8013ad2:	2264      	movs	r2, #100	@ 0x64
 8013ad4:	4639      	mov	r1, r7
 8013ad6:	f7f9 fb39 	bl	800d14c <generate_type_name>
 8013ada:	b1b8      	cbz	r0, 8013b0c <create_topic+0x84>
 8013adc:	6928      	ldr	r0, [r5, #16]
 8013ade:	2106      	movs	r1, #6
 8013ae0:	696b      	ldr	r3, [r5, #20]
 8013ae2:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8013ae6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013aea:	f8cd 8000 	str.w	r8, [sp]
 8013aee:	e9cd 7101 	strd	r7, r1, [sp, #4]
 8013af2:	6811      	ldr	r1, [r2, #0]
 8013af4:	6922      	ldr	r2, [r4, #16]
 8013af6:	f7fb fe75 	bl	800f7e4 <uxr_buffer_create_topic_bin>
 8013afa:	4602      	mov	r2, r0
 8013afc:	6928      	ldr	r0, [r5, #16]
 8013afe:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8013b02:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8013b06:	f7f9 faed 	bl	800d0e4 <run_xrce_session>
 8013b0a:	b918      	cbnz	r0, 8013b14 <create_topic+0x8c>
 8013b0c:	4620      	mov	r0, r4
 8013b0e:	2400      	movs	r4, #0
 8013b10:	f7f9 fa82 	bl	800d018 <rmw_uxrce_fini_topic_memory>
 8013b14:	4620      	mov	r0, r4
 8013b16:	b004      	add	sp, #16
 8013b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b1c:	2000eb94 	.word	0x2000eb94
 8013b20:	2000ec10 	.word	0x2000ec10
 8013b24:	2000ebd4 	.word	0x2000ebd4

08013b28 <destroy_topic>:
 8013b28:	b538      	push	{r3, r4, r5, lr}
 8013b2a:	6985      	ldr	r5, [r0, #24]
 8013b2c:	b1dd      	cbz	r5, 8013b66 <destroy_topic+0x3e>
 8013b2e:	4604      	mov	r4, r0
 8013b30:	6928      	ldr	r0, [r5, #16]
 8013b32:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013b36:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013b3a:	6922      	ldr	r2, [r4, #16]
 8013b3c:	6819      	ldr	r1, [r3, #0]
 8013b3e:	f7fb fdd3 	bl	800f6e8 <uxr_buffer_delete_entity>
 8013b42:	4602      	mov	r2, r0
 8013b44:	6928      	ldr	r0, [r5, #16]
 8013b46:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013b4a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013b4e:	f7f9 fac9 	bl	800d0e4 <run_xrce_session>
 8013b52:	4603      	mov	r3, r0
 8013b54:	4620      	mov	r0, r4
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	bf14      	ite	ne
 8013b5a:	2400      	movne	r4, #0
 8013b5c:	2402      	moveq	r4, #2
 8013b5e:	f7f9 fa5b 	bl	800d018 <rmw_uxrce_fini_topic_memory>
 8013b62:	4620      	mov	r0, r4
 8013b64:	bd38      	pop	{r3, r4, r5, pc}
 8013b66:	2401      	movs	r4, #1
 8013b68:	4620      	mov	r0, r4
 8013b6a:	bd38      	pop	{r3, r4, r5, pc}

08013b6c <create_node>:
 8013b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013b70:	b083      	sub	sp, #12
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d064      	beq.n	8013c40 <create_node+0xd4>
 8013b76:	4606      	mov	r6, r0
 8013b78:	4838      	ldr	r0, [pc, #224]	@ (8013c5c <create_node+0xf0>)
 8013b7a:	460f      	mov	r7, r1
 8013b7c:	4690      	mov	r8, r2
 8013b7e:	461d      	mov	r5, r3
 8013b80:	f7ff fcd0 	bl	8013524 <get_memory>
 8013b84:	2800      	cmp	r0, #0
 8013b86:	d05b      	beq.n	8013c40 <create_node+0xd4>
 8013b88:	6884      	ldr	r4, [r0, #8]
 8013b8a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8013b8c:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8013b90:	f104 0518 	add.w	r5, r4, #24
 8013b94:	6123      	str	r3, [r4, #16]
 8013b96:	f7ff fce9 	bl	801356c <rmw_get_implementation_identifier>
 8013b9a:	f8c4 9020 	str.w	r9, [r4, #32]
 8013b9e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8013ba2:	4630      	mov	r0, r6
 8013ba4:	f7ec fb56 	bl	8000254 <strlen>
 8013ba8:	1c42      	adds	r2, r0, #1
 8013baa:	2a3c      	cmp	r2, #60	@ 0x3c
 8013bac:	d840      	bhi.n	8013c30 <create_node+0xc4>
 8013bae:	4648      	mov	r0, r9
 8013bb0:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8013bb4:	4631      	mov	r1, r6
 8013bb6:	f003 f8c0 	bl	8016d3a <memcpy>
 8013bba:	4638      	mov	r0, r7
 8013bbc:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8013bc0:	f7ec fb48 	bl	8000254 <strlen>
 8013bc4:	1c42      	adds	r2, r0, #1
 8013bc6:	2a3c      	cmp	r2, #60	@ 0x3c
 8013bc8:	d832      	bhi.n	8013c30 <create_node+0xc4>
 8013bca:	4639      	mov	r1, r7
 8013bcc:	4648      	mov	r0, r9
 8013bce:	f003 f8b4 	bl	8016d3a <memcpy>
 8013bd2:	6923      	ldr	r3, [r4, #16]
 8013bd4:	2101      	movs	r1, #1
 8013bd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013bda:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8013bde:	1842      	adds	r2, r0, r1
 8013be0:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8013be4:	f7fb feda 	bl	800f99c <uxr_object_id>
 8013be8:	6160      	str	r0, [r4, #20]
 8013bea:	783b      	ldrb	r3, [r7, #0]
 8013bec:	2b2f      	cmp	r3, #47	@ 0x2f
 8013bee:	d12c      	bne.n	8013c4a <create_node+0xde>
 8013bf0:	787b      	ldrb	r3, [r7, #1]
 8013bf2:	bb53      	cbnz	r3, 8013c4a <create_node+0xde>
 8013bf4:	4633      	mov	r3, r6
 8013bf6:	4a1a      	ldr	r2, [pc, #104]	@ (8013c60 <create_node+0xf4>)
 8013bf8:	213c      	movs	r1, #60	@ 0x3c
 8013bfa:	481a      	ldr	r0, [pc, #104]	@ (8013c64 <create_node+0xf8>)
 8013bfc:	f002 fe70 	bl	80168e0 <sniprintf>
 8013c00:	6920      	ldr	r0, [r4, #16]
 8013c02:	2106      	movs	r1, #6
 8013c04:	fa1f f388 	uxth.w	r3, r8
 8013c08:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8013c0c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013c10:	9101      	str	r1, [sp, #4]
 8013c12:	4914      	ldr	r1, [pc, #80]	@ (8013c64 <create_node+0xf8>)
 8013c14:	9100      	str	r1, [sp, #0]
 8013c16:	6811      	ldr	r1, [r2, #0]
 8013c18:	6962      	ldr	r2, [r4, #20]
 8013c1a:	f7fb fdb1 	bl	800f780 <uxr_buffer_create_participant_bin>
 8013c1e:	4602      	mov	r2, r0
 8013c20:	6920      	ldr	r0, [r4, #16]
 8013c22:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8013c26:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8013c2a:	f7f9 fa5b 	bl	800d0e4 <run_xrce_session>
 8013c2e:	b918      	cbnz	r0, 8013c38 <create_node+0xcc>
 8013c30:	4628      	mov	r0, r5
 8013c32:	2500      	movs	r5, #0
 8013c34:	f7f9 f980 	bl	800cf38 <rmw_uxrce_fini_node_memory>
 8013c38:	4628      	mov	r0, r5
 8013c3a:	b003      	add	sp, #12
 8013c3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c40:	2500      	movs	r5, #0
 8013c42:	4628      	mov	r0, r5
 8013c44:	b003      	add	sp, #12
 8013c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c4a:	463b      	mov	r3, r7
 8013c4c:	4a06      	ldr	r2, [pc, #24]	@ (8013c68 <create_node+0xfc>)
 8013c4e:	213c      	movs	r1, #60	@ 0x3c
 8013c50:	9600      	str	r6, [sp, #0]
 8013c52:	4804      	ldr	r0, [pc, #16]	@ (8013c64 <create_node+0xf8>)
 8013c54:	f002 fe44 	bl	80168e0 <sniprintf>
 8013c58:	e7d2      	b.n	8013c00 <create_node+0x94>
 8013c5a:	bf00      	nop
 8013c5c:	2000eb34 	.word	0x2000eb34
 8013c60:	08017c58 	.word	0x08017c58
 8013c64:	2000ec74 	.word	0x2000ec74
 8013c68:	08017ff0 	.word	0x08017ff0

08013c6c <rmw_create_node>:
 8013c6c:	468c      	mov	ip, r1
 8013c6e:	4611      	mov	r1, r2
 8013c70:	f1bc 0f00 	cmp.w	ip, #0
 8013c74:	d00a      	beq.n	8013c8c <rmw_create_node+0x20>
 8013c76:	f89c 3000 	ldrb.w	r3, [ip]
 8013c7a:	b13b      	cbz	r3, 8013c8c <rmw_create_node+0x20>
 8013c7c:	b132      	cbz	r2, 8013c8c <rmw_create_node+0x20>
 8013c7e:	7813      	ldrb	r3, [r2, #0]
 8013c80:	b123      	cbz	r3, 8013c8c <rmw_create_node+0x20>
 8013c82:	4603      	mov	r3, r0
 8013c84:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8013c86:	4660      	mov	r0, ip
 8013c88:	f7ff bf70 	b.w	8013b6c <create_node>
 8013c8c:	2000      	movs	r0, #0
 8013c8e:	4770      	bx	lr

08013c90 <rmw_destroy_node>:
 8013c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c92:	b328      	cbz	r0, 8013ce0 <rmw_destroy_node+0x50>
 8013c94:	4607      	mov	r7, r0
 8013c96:	6800      	ldr	r0, [r0, #0]
 8013c98:	b120      	cbz	r0, 8013ca4 <rmw_destroy_node+0x14>
 8013c9a:	4b37      	ldr	r3, [pc, #220]	@ (8013d78 <rmw_destroy_node+0xe8>)
 8013c9c:	6819      	ldr	r1, [r3, #0]
 8013c9e:	f7ec facf 	bl	8000240 <strcmp>
 8013ca2:	b9e8      	cbnz	r0, 8013ce0 <rmw_destroy_node+0x50>
 8013ca4:	687d      	ldr	r5, [r7, #4]
 8013ca6:	b1dd      	cbz	r5, 8013ce0 <rmw_destroy_node+0x50>
 8013ca8:	4b34      	ldr	r3, [pc, #208]	@ (8013d7c <rmw_destroy_node+0xec>)
 8013caa:	681c      	ldr	r4, [r3, #0]
 8013cac:	2c00      	cmp	r4, #0
 8013cae:	d060      	beq.n	8013d72 <rmw_destroy_node+0xe2>
 8013cb0:	2600      	movs	r6, #0
 8013cb2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8013cb6:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8013cba:	429d      	cmp	r5, r3
 8013cbc:	d013      	beq.n	8013ce6 <rmw_destroy_node+0x56>
 8013cbe:	2c00      	cmp	r4, #0
 8013cc0:	d1f7      	bne.n	8013cb2 <rmw_destroy_node+0x22>
 8013cc2:	4b2f      	ldr	r3, [pc, #188]	@ (8013d80 <rmw_destroy_node+0xf0>)
 8013cc4:	681c      	ldr	r4, [r3, #0]
 8013cc6:	b1c4      	cbz	r4, 8013cfa <rmw_destroy_node+0x6a>
 8013cc8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8013ccc:	6a0b      	ldr	r3, [r1, #32]
 8013cce:	429d      	cmp	r5, r3
 8013cd0:	d1f9      	bne.n	8013cc6 <rmw_destroy_node+0x36>
 8013cd2:	317c      	adds	r1, #124	@ 0x7c
 8013cd4:	4638      	mov	r0, r7
 8013cd6:	f000 f8a3 	bl	8013e20 <rmw_destroy_subscription>
 8013cda:	2801      	cmp	r0, #1
 8013cdc:	4606      	mov	r6, r0
 8013cde:	d1f2      	bne.n	8013cc6 <rmw_destroy_node+0x36>
 8013ce0:	2601      	movs	r6, #1
 8013ce2:	4630      	mov	r0, r6
 8013ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ce6:	3184      	adds	r1, #132	@ 0x84
 8013ce8:	4638      	mov	r0, r7
 8013cea:	f7f8 ff4f 	bl	800cb8c <rmw_destroy_publisher>
 8013cee:	2801      	cmp	r0, #1
 8013cf0:	4606      	mov	r6, r0
 8013cf2:	d0f5      	beq.n	8013ce0 <rmw_destroy_node+0x50>
 8013cf4:	2c00      	cmp	r4, #0
 8013cf6:	d1dc      	bne.n	8013cb2 <rmw_destroy_node+0x22>
 8013cf8:	e7e3      	b.n	8013cc2 <rmw_destroy_node+0x32>
 8013cfa:	4b22      	ldr	r3, [pc, #136]	@ (8013d84 <rmw_destroy_node+0xf4>)
 8013cfc:	681c      	ldr	r4, [r3, #0]
 8013cfe:	b16c      	cbz	r4, 8013d1c <rmw_destroy_node+0x8c>
 8013d00:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8013d04:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8013d06:	429d      	cmp	r5, r3
 8013d08:	d1f9      	bne.n	8013cfe <rmw_destroy_node+0x6e>
 8013d0a:	317c      	adds	r1, #124	@ 0x7c
 8013d0c:	4638      	mov	r0, r7
 8013d0e:	f000 f843 	bl	8013d98 <rmw_destroy_service>
 8013d12:	2801      	cmp	r0, #1
 8013d14:	4606      	mov	r6, r0
 8013d16:	d0e3      	beq.n	8013ce0 <rmw_destroy_node+0x50>
 8013d18:	2c00      	cmp	r4, #0
 8013d1a:	d1f1      	bne.n	8013d00 <rmw_destroy_node+0x70>
 8013d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8013d88 <rmw_destroy_node+0xf8>)
 8013d1e:	681c      	ldr	r4, [r3, #0]
 8013d20:	b16c      	cbz	r4, 8013d3e <rmw_destroy_node+0xae>
 8013d22:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8013d26:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8013d28:	429d      	cmp	r5, r3
 8013d2a:	d1f9      	bne.n	8013d20 <rmw_destroy_node+0x90>
 8013d2c:	317c      	adds	r1, #124	@ 0x7c
 8013d2e:	4638      	mov	r0, r7
 8013d30:	f002 f98e 	bl	8016050 <rmw_destroy_client>
 8013d34:	2801      	cmp	r0, #1
 8013d36:	4606      	mov	r6, r0
 8013d38:	d0d2      	beq.n	8013ce0 <rmw_destroy_node+0x50>
 8013d3a:	2c00      	cmp	r4, #0
 8013d3c:	d1f1      	bne.n	8013d22 <rmw_destroy_node+0x92>
 8013d3e:	6928      	ldr	r0, [r5, #16]
 8013d40:	696a      	ldr	r2, [r5, #20]
 8013d42:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013d46:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013d4a:	6819      	ldr	r1, [r3, #0]
 8013d4c:	f7fb fccc 	bl	800f6e8 <uxr_buffer_delete_entity>
 8013d50:	4602      	mov	r2, r0
 8013d52:	6928      	ldr	r0, [r5, #16]
 8013d54:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013d58:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013d5c:	f7f9 f9c2 	bl	800d0e4 <run_xrce_session>
 8013d60:	4603      	mov	r3, r0
 8013d62:	4638      	mov	r0, r7
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	bf08      	it	eq
 8013d68:	2602      	moveq	r6, #2
 8013d6a:	f7f9 f8e5 	bl	800cf38 <rmw_uxrce_fini_node_memory>
 8013d6e:	4630      	mov	r0, r6
 8013d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d72:	4626      	mov	r6, r4
 8013d74:	e7a5      	b.n	8013cc2 <rmw_destroy_node+0x32>
 8013d76:	bf00      	nop
 8013d78:	080185a4 	.word	0x080185a4
 8013d7c:	2000eb44 	.word	0x2000eb44
 8013d80:	2000eb84 	.word	0x2000eb84
 8013d84:	2000eb54 	.word	0x2000eb54
 8013d88:	2000a268 	.word	0x2000a268

08013d8c <rmw_node_get_graph_guard_condition>:
 8013d8c:	6843      	ldr	r3, [r0, #4]
 8013d8e:	6918      	ldr	r0, [r3, #16]
 8013d90:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8013d94:	4770      	bx	lr
 8013d96:	bf00      	nop

08013d98 <rmw_destroy_service>:
 8013d98:	b570      	push	{r4, r5, r6, lr}
 8013d9a:	b128      	cbz	r0, 8013da8 <rmw_destroy_service+0x10>
 8013d9c:	4604      	mov	r4, r0
 8013d9e:	6800      	ldr	r0, [r0, #0]
 8013da0:	460d      	mov	r5, r1
 8013da2:	f7f9 fa19 	bl	800d1d8 <is_uxrce_rmw_identifier_valid>
 8013da6:	b910      	cbnz	r0, 8013dae <rmw_destroy_service+0x16>
 8013da8:	2401      	movs	r4, #1
 8013daa:	4620      	mov	r0, r4
 8013dac:	bd70      	pop	{r4, r5, r6, pc}
 8013dae:	6863      	ldr	r3, [r4, #4]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d0f9      	beq.n	8013da8 <rmw_destroy_service+0x10>
 8013db4:	2d00      	cmp	r5, #0
 8013db6:	d0f7      	beq.n	8013da8 <rmw_destroy_service+0x10>
 8013db8:	6828      	ldr	r0, [r5, #0]
 8013dba:	f7f9 fa0d 	bl	800d1d8 <is_uxrce_rmw_identifier_valid>
 8013dbe:	2800      	cmp	r0, #0
 8013dc0:	d0f2      	beq.n	8013da8 <rmw_destroy_service+0x10>
 8013dc2:	686e      	ldr	r6, [r5, #4]
 8013dc4:	2e00      	cmp	r6, #0
 8013dc6:	d0ef      	beq.n	8013da8 <rmw_destroy_service+0x10>
 8013dc8:	6864      	ldr	r4, [r4, #4]
 8013dca:	6932      	ldr	r2, [r6, #16]
 8013dcc:	6920      	ldr	r0, [r4, #16]
 8013dce:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013dd2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013dd6:	6819      	ldr	r1, [r3, #0]
 8013dd8:	f000 ffba 	bl	8014d50 <uxr_buffer_cancel_data>
 8013ddc:	4602      	mov	r2, r0
 8013dde:	6920      	ldr	r0, [r4, #16]
 8013de0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013de4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013de8:	f7f9 f97c 	bl	800d0e4 <run_xrce_session>
 8013dec:	6920      	ldr	r0, [r4, #16]
 8013dee:	6932      	ldr	r2, [r6, #16]
 8013df0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013df4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013df8:	6819      	ldr	r1, [r3, #0]
 8013dfa:	f7fb fc75 	bl	800f6e8 <uxr_buffer_delete_entity>
 8013dfe:	4602      	mov	r2, r0
 8013e00:	6920      	ldr	r0, [r4, #16]
 8013e02:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013e06:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013e0a:	f7f9 f96b 	bl	800d0e4 <run_xrce_session>
 8013e0e:	4603      	mov	r3, r0
 8013e10:	4628      	mov	r0, r5
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	bf14      	ite	ne
 8013e16:	2400      	movne	r4, #0
 8013e18:	2402      	moveq	r4, #2
 8013e1a:	f7f9 f8d1 	bl	800cfc0 <rmw_uxrce_fini_service_memory>
 8013e1e:	e7c4      	b.n	8013daa <rmw_destroy_service+0x12>

08013e20 <rmw_destroy_subscription>:
 8013e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e24:	b128      	cbz	r0, 8013e32 <rmw_destroy_subscription+0x12>
 8013e26:	4604      	mov	r4, r0
 8013e28:	6800      	ldr	r0, [r0, #0]
 8013e2a:	460d      	mov	r5, r1
 8013e2c:	f7f9 f9d4 	bl	800d1d8 <is_uxrce_rmw_identifier_valid>
 8013e30:	b918      	cbnz	r0, 8013e3a <rmw_destroy_subscription+0x1a>
 8013e32:	2401      	movs	r4, #1
 8013e34:	4620      	mov	r0, r4
 8013e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e3a:	6863      	ldr	r3, [r4, #4]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d0f8      	beq.n	8013e32 <rmw_destroy_subscription+0x12>
 8013e40:	fab5 f485 	clz	r4, r5
 8013e44:	0964      	lsrs	r4, r4, #5
 8013e46:	2d00      	cmp	r5, #0
 8013e48:	d0f3      	beq.n	8013e32 <rmw_destroy_subscription+0x12>
 8013e4a:	6828      	ldr	r0, [r5, #0]
 8013e4c:	f7f9 f9c4 	bl	800d1d8 <is_uxrce_rmw_identifier_valid>
 8013e50:	2800      	cmp	r0, #0
 8013e52:	d0ee      	beq.n	8013e32 <rmw_destroy_subscription+0x12>
 8013e54:	686e      	ldr	r6, [r5, #4]
 8013e56:	2e00      	cmp	r6, #0
 8013e58:	d0eb      	beq.n	8013e32 <rmw_destroy_subscription+0x12>
 8013e5a:	6a37      	ldr	r7, [r6, #32]
 8013e5c:	6972      	ldr	r2, [r6, #20]
 8013e5e:	6938      	ldr	r0, [r7, #16]
 8013e60:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013e64:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013e68:	6819      	ldr	r1, [r3, #0]
 8013e6a:	f000 ff71 	bl	8014d50 <uxr_buffer_cancel_data>
 8013e6e:	4602      	mov	r2, r0
 8013e70:	6938      	ldr	r0, [r7, #16]
 8013e72:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013e76:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013e7a:	f7f9 f933 	bl	800d0e4 <run_xrce_session>
 8013e7e:	69f0      	ldr	r0, [r6, #28]
 8013e80:	f7ff fe52 	bl	8013b28 <destroy_topic>
 8013e84:	6a33      	ldr	r3, [r6, #32]
 8013e86:	6972      	ldr	r2, [r6, #20]
 8013e88:	6918      	ldr	r0, [r3, #16]
 8013e8a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013e8e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013e92:	6819      	ldr	r1, [r3, #0]
 8013e94:	f7fb fc28 	bl	800f6e8 <uxr_buffer_delete_entity>
 8013e98:	6a33      	ldr	r3, [r6, #32]
 8013e9a:	4680      	mov	r8, r0
 8013e9c:	6932      	ldr	r2, [r6, #16]
 8013e9e:	6918      	ldr	r0, [r3, #16]
 8013ea0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013ea4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013ea8:	6819      	ldr	r1, [r3, #0]
 8013eaa:	f7fb fc1d 	bl	800f6e8 <uxr_buffer_delete_entity>
 8013eae:	4606      	mov	r6, r0
 8013eb0:	6938      	ldr	r0, [r7, #16]
 8013eb2:	4642      	mov	r2, r8
 8013eb4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013eb8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013ebc:	f7f9 f912 	bl	800d0e4 <run_xrce_session>
 8013ec0:	693f      	ldr	r7, [r7, #16]
 8013ec2:	4632      	mov	r2, r6
 8013ec4:	4606      	mov	r6, r0
 8013ec6:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8013eca:	4638      	mov	r0, r7
 8013ecc:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8013ed0:	f7f9 f908 	bl	800d0e4 <run_xrce_session>
 8013ed4:	b126      	cbz	r6, 8013ee0 <rmw_destroy_subscription+0xc0>
 8013ed6:	b118      	cbz	r0, 8013ee0 <rmw_destroy_subscription+0xc0>
 8013ed8:	4628      	mov	r0, r5
 8013eda:	f7f9 f85b 	bl	800cf94 <rmw_uxrce_fini_subscription_memory>
 8013ede:	e7a9      	b.n	8013e34 <rmw_destroy_subscription+0x14>
 8013ee0:	2402      	movs	r4, #2
 8013ee2:	e7f9      	b.n	8013ed8 <rmw_destroy_subscription+0xb8>

08013ee4 <rmw_uxrce_transport_init>:
 8013ee4:	b508      	push	{r3, lr}
 8013ee6:	b108      	cbz	r0, 8013eec <rmw_uxrce_transport_init+0x8>
 8013ee8:	f100 0210 	add.w	r2, r0, #16
 8013eec:	b139      	cbz	r1, 8013efe <rmw_uxrce_transport_init+0x1a>
 8013eee:	6949      	ldr	r1, [r1, #20]
 8013ef0:	4610      	mov	r0, r2
 8013ef2:	f000 f9a9 	bl	8014248 <uxr_init_custom_transport>
 8013ef6:	f080 0001 	eor.w	r0, r0, #1
 8013efa:	b2c0      	uxtb	r0, r0
 8013efc:	bd08      	pop	{r3, pc}
 8013efe:	4b04      	ldr	r3, [pc, #16]	@ (8013f10 <rmw_uxrce_transport_init+0x2c>)
 8013f00:	4610      	mov	r0, r2
 8013f02:	6859      	ldr	r1, [r3, #4]
 8013f04:	f000 f9a0 	bl	8014248 <uxr_init_custom_transport>
 8013f08:	f080 0001 	eor.w	r0, r0, #1
 8013f0c:	b2c0      	uxtb	r0, r0
 8013f0e:	bd08      	pop	{r3, pc}
 8013f10:	2000a24c 	.word	0x2000a24c

08013f14 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8013f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f18:	6805      	ldr	r5, [r0, #0]
 8013f1a:	4604      	mov	r4, r0
 8013f1c:	460e      	mov	r6, r1
 8013f1e:	4628      	mov	r0, r5
 8013f20:	f7ec f98e 	bl	8000240 <strcmp>
 8013f24:	b1c8      	cbz	r0, 8013f5a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8013f26:	4b11      	ldr	r3, [pc, #68]	@ (8013f6c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	429d      	cmp	r5, r3
 8013f2c:	d112      	bne.n	8013f54 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8013f2e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8013f32:	f8d8 4000 	ldr.w	r4, [r8]
 8013f36:	b16c      	cbz	r4, 8013f54 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8013f38:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8013f3c:	2700      	movs	r7, #0
 8013f3e:	3d04      	subs	r5, #4
 8013f40:	4631      	mov	r1, r6
 8013f42:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8013f46:	f7ec f97b 	bl	8000240 <strcmp>
 8013f4a:	00bb      	lsls	r3, r7, #2
 8013f4c:	b140      	cbz	r0, 8013f60 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8013f4e:	3701      	adds	r7, #1
 8013f50:	42bc      	cmp	r4, r7
 8013f52:	d1f5      	bne.n	8013f40 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8013f54:	2000      	movs	r0, #0
 8013f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f5a:	4620      	mov	r0, r4
 8013f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f60:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013f64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013f68:	58d3      	ldr	r3, [r2, r3]
 8013f6a:	4718      	bx	r3
 8013f6c:	20000690 	.word	0x20000690

08013f70 <sensor_msgs__msg__FluidPressure__init>:
 8013f70:	b538      	push	{r3, r4, r5, lr}
 8013f72:	4604      	mov	r4, r0
 8013f74:	b128      	cbz	r0, 8013f82 <sensor_msgs__msg__FluidPressure__init+0x12>
 8013f76:	f000 f87b 	bl	8014070 <std_msgs__msg__Header__init>
 8013f7a:	4605      	mov	r5, r0
 8013f7c:	b120      	cbz	r0, 8013f88 <sensor_msgs__msg__FluidPressure__init+0x18>
 8013f7e:	4628      	mov	r0, r5
 8013f80:	bd38      	pop	{r3, r4, r5, pc}
 8013f82:	4605      	mov	r5, r0
 8013f84:	4628      	mov	r0, r5
 8013f86:	bd38      	pop	{r3, r4, r5, pc}
 8013f88:	4620      	mov	r0, r4
 8013f8a:	f000 f895 	bl	80140b8 <std_msgs__msg__Header__fini>
 8013f8e:	4628      	mov	r0, r5
 8013f90:	bd38      	pop	{r3, r4, r5, pc}
 8013f92:	bf00      	nop

08013f94 <sensor_msgs__msg__FluidPressure__fini>:
 8013f94:	b108      	cbz	r0, 8013f9a <sensor_msgs__msg__FluidPressure__fini+0x6>
 8013f96:	f000 b88f 	b.w	80140b8 <std_msgs__msg__Header__fini>
 8013f9a:	4770      	bx	lr

08013f9c <sensor_msgs__msg__Imu__init>:
 8013f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fa0:	4605      	mov	r5, r0
 8013fa2:	b3c0      	cbz	r0, 8014016 <sensor_msgs__msg__Imu__init+0x7a>
 8013fa4:	f000 f864 	bl	8014070 <std_msgs__msg__Header__init>
 8013fa8:	4604      	mov	r4, r0
 8013faa:	b310      	cbz	r0, 8013ff2 <sensor_msgs__msg__Imu__init+0x56>
 8013fac:	f105 0618 	add.w	r6, r5, #24
 8013fb0:	4630      	mov	r0, r6
 8013fb2:	f000 f893 	bl	80140dc <geometry_msgs__msg__Quaternion__init>
 8013fb6:	4604      	mov	r4, r0
 8013fb8:	2800      	cmp	r0, #0
 8013fba:	d040      	beq.n	801403e <sensor_msgs__msg__Imu__init+0xa2>
 8013fbc:	f105 0780 	add.w	r7, r5, #128	@ 0x80
 8013fc0:	4638      	mov	r0, r7
 8013fc2:	f000 f89d 	bl	8014100 <geometry_msgs__msg__Vector3__init>
 8013fc6:	4604      	mov	r4, r0
 8013fc8:	b348      	cbz	r0, 801401e <sensor_msgs__msg__Imu__init+0x82>
 8013fca:	f105 08e0 	add.w	r8, r5, #224	@ 0xe0
 8013fce:	4640      	mov	r0, r8
 8013fd0:	f000 f896 	bl	8014100 <geometry_msgs__msg__Vector3__init>
 8013fd4:	4604      	mov	r4, r0
 8013fd6:	b9d8      	cbnz	r0, 8014010 <sensor_msgs__msg__Imu__init+0x74>
 8013fd8:	4628      	mov	r0, r5
 8013fda:	f000 f86d 	bl	80140b8 <std_msgs__msg__Header__fini>
 8013fde:	4630      	mov	r0, r6
 8013fe0:	f000 f88c 	bl	80140fc <geometry_msgs__msg__Quaternion__fini>
 8013fe4:	4638      	mov	r0, r7
 8013fe6:	f000 f88f 	bl	8014108 <geometry_msgs__msg__Vector3__fini>
 8013fea:	4640      	mov	r0, r8
 8013fec:	f000 f88c 	bl	8014108 <geometry_msgs__msg__Vector3__fini>
 8013ff0:	e00e      	b.n	8014010 <sensor_msgs__msg__Imu__init+0x74>
 8013ff2:	4628      	mov	r0, r5
 8013ff4:	f000 f860 	bl	80140b8 <std_msgs__msg__Header__fini>
 8013ff8:	f105 0018 	add.w	r0, r5, #24
 8013ffc:	f000 f87e 	bl	80140fc <geometry_msgs__msg__Quaternion__fini>
 8014000:	f105 0080 	add.w	r0, r5, #128	@ 0x80
 8014004:	f000 f880 	bl	8014108 <geometry_msgs__msg__Vector3__fini>
 8014008:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 801400c:	f000 f87c 	bl	8014108 <geometry_msgs__msg__Vector3__fini>
 8014010:	4620      	mov	r0, r4
 8014012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014016:	4604      	mov	r4, r0
 8014018:	4620      	mov	r0, r4
 801401a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801401e:	4628      	mov	r0, r5
 8014020:	f000 f84a 	bl	80140b8 <std_msgs__msg__Header__fini>
 8014024:	4630      	mov	r0, r6
 8014026:	f000 f869 	bl	80140fc <geometry_msgs__msg__Quaternion__fini>
 801402a:	4638      	mov	r0, r7
 801402c:	f000 f86c 	bl	8014108 <geometry_msgs__msg__Vector3__fini>
 8014030:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 8014034:	f000 f868 	bl	8014108 <geometry_msgs__msg__Vector3__fini>
 8014038:	4620      	mov	r0, r4
 801403a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801403e:	4628      	mov	r0, r5
 8014040:	f000 f83a 	bl	80140b8 <std_msgs__msg__Header__fini>
 8014044:	4630      	mov	r0, r6
 8014046:	e7d9      	b.n	8013ffc <sensor_msgs__msg__Imu__init+0x60>

08014048 <sensor_msgs__msg__Imu__fini>:
 8014048:	b188      	cbz	r0, 801406e <sensor_msgs__msg__Imu__fini+0x26>
 801404a:	b510      	push	{r4, lr}
 801404c:	4604      	mov	r4, r0
 801404e:	f000 f833 	bl	80140b8 <std_msgs__msg__Header__fini>
 8014052:	f104 0018 	add.w	r0, r4, #24
 8014056:	f000 f851 	bl	80140fc <geometry_msgs__msg__Quaternion__fini>
 801405a:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 801405e:	f000 f853 	bl	8014108 <geometry_msgs__msg__Vector3__fini>
 8014062:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 8014066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801406a:	f000 b84d 	b.w	8014108 <geometry_msgs__msg__Vector3__fini>
 801406e:	4770      	bx	lr

08014070 <std_msgs__msg__Header__init>:
 8014070:	b570      	push	{r4, r5, r6, lr}
 8014072:	4605      	mov	r5, r0
 8014074:	b1a8      	cbz	r0, 80140a2 <std_msgs__msg__Header__init+0x32>
 8014076:	f000 f82b 	bl	80140d0 <builtin_interfaces__msg__Time__init>
 801407a:	4604      	mov	r4, r0
 801407c:	b140      	cbz	r0, 8014090 <std_msgs__msg__Header__init+0x20>
 801407e:	f105 0608 	add.w	r6, r5, #8
 8014082:	4630      	mov	r0, r6
 8014084:	f002 f852 	bl	801612c <rosidl_runtime_c__String__init>
 8014088:	4604      	mov	r4, r0
 801408a:	b168      	cbz	r0, 80140a8 <std_msgs__msg__Header__init+0x38>
 801408c:	4620      	mov	r0, r4
 801408e:	bd70      	pop	{r4, r5, r6, pc}
 8014090:	4628      	mov	r0, r5
 8014092:	f000 f821 	bl	80140d8 <builtin_interfaces__msg__Time__fini>
 8014096:	f105 0008 	add.w	r0, r5, #8
 801409a:	f002 f85d 	bl	8016158 <rosidl_runtime_c__String__fini>
 801409e:	4620      	mov	r0, r4
 80140a0:	bd70      	pop	{r4, r5, r6, pc}
 80140a2:	4604      	mov	r4, r0
 80140a4:	4620      	mov	r0, r4
 80140a6:	bd70      	pop	{r4, r5, r6, pc}
 80140a8:	4628      	mov	r0, r5
 80140aa:	f000 f815 	bl	80140d8 <builtin_interfaces__msg__Time__fini>
 80140ae:	4630      	mov	r0, r6
 80140b0:	f002 f852 	bl	8016158 <rosidl_runtime_c__String__fini>
 80140b4:	e7ea      	b.n	801408c <std_msgs__msg__Header__init+0x1c>
 80140b6:	bf00      	nop

080140b8 <std_msgs__msg__Header__fini>:
 80140b8:	b148      	cbz	r0, 80140ce <std_msgs__msg__Header__fini+0x16>
 80140ba:	b510      	push	{r4, lr}
 80140bc:	4604      	mov	r4, r0
 80140be:	f000 f80b 	bl	80140d8 <builtin_interfaces__msg__Time__fini>
 80140c2:	f104 0008 	add.w	r0, r4, #8
 80140c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80140ca:	f002 b845 	b.w	8016158 <rosidl_runtime_c__String__fini>
 80140ce:	4770      	bx	lr

080140d0 <builtin_interfaces__msg__Time__init>:
 80140d0:	3800      	subs	r0, #0
 80140d2:	bf18      	it	ne
 80140d4:	2001      	movne	r0, #1
 80140d6:	4770      	bx	lr

080140d8 <builtin_interfaces__msg__Time__fini>:
 80140d8:	4770      	bx	lr
 80140da:	bf00      	nop

080140dc <geometry_msgs__msg__Quaternion__init>:
 80140dc:	b160      	cbz	r0, 80140f8 <geometry_msgs__msg__Quaternion__init+0x1c>
 80140de:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 80140e2:	2200      	movs	r2, #0
 80140e4:	2300      	movs	r3, #0
 80140e6:	ed80 7b06 	vstr	d7, [r0, #24]
 80140ea:	e9c0 2300 	strd	r2, r3, [r0]
 80140ee:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80140f2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80140f6:	2001      	movs	r0, #1
 80140f8:	4770      	bx	lr
 80140fa:	bf00      	nop

080140fc <geometry_msgs__msg__Quaternion__fini>:
 80140fc:	4770      	bx	lr
 80140fe:	bf00      	nop

08014100 <geometry_msgs__msg__Vector3__init>:
 8014100:	3800      	subs	r0, #0
 8014102:	bf18      	it	ne
 8014104:	2001      	movne	r0, #1
 8014106:	4770      	bx	lr

08014108 <geometry_msgs__msg__Vector3__fini>:
 8014108:	4770      	bx	lr
 801410a:	bf00      	nop

0801410c <ucdr_serialize_string>:
 801410c:	b510      	push	{r4, lr}
 801410e:	b082      	sub	sp, #8
 8014110:	4604      	mov	r4, r0
 8014112:	4608      	mov	r0, r1
 8014114:	9101      	str	r1, [sp, #4]
 8014116:	f7ec f89d 	bl	8000254 <strlen>
 801411a:	4602      	mov	r2, r0
 801411c:	9901      	ldr	r1, [sp, #4]
 801411e:	4620      	mov	r0, r4
 8014120:	3201      	adds	r2, #1
 8014122:	b002      	add	sp, #8
 8014124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014128:	f7fb ba86 	b.w	800f638 <ucdr_serialize_sequence_char>

0801412c <ucdr_deserialize_string>:
 801412c:	b500      	push	{lr}
 801412e:	b083      	sub	sp, #12
 8014130:	ab01      	add	r3, sp, #4
 8014132:	f7fb fa93 	bl	800f65c <ucdr_deserialize_sequence_char>
 8014136:	b003      	add	sp, #12
 8014138:	f85d fb04 	ldr.w	pc, [sp], #4

0801413c <get_custom_error>:
 801413c:	4b01      	ldr	r3, [pc, #4]	@ (8014144 <get_custom_error+0x8>)
 801413e:	7818      	ldrb	r0, [r3, #0]
 8014140:	4770      	bx	lr
 8014142:	bf00      	nop
 8014144:	2000ecb0 	.word	0x2000ecb0

08014148 <recv_custom_msg>:
 8014148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801414c:	4693      	mov	fp, r2
 801414e:	b089      	sub	sp, #36	@ 0x24
 8014150:	2200      	movs	r2, #0
 8014152:	4604      	mov	r4, r0
 8014154:	468a      	mov	sl, r1
 8014156:	9305      	str	r3, [sp, #20]
 8014158:	f88d 201e 	strb.w	r2, [sp, #30]
 801415c:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8014160:	b322      	cbz	r2, 80141ac <recv_custom_msg+0x64>
 8014162:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8014166:	f10d 081f 	add.w	r8, sp, #31
 801416a:	af05      	add	r7, sp, #20
 801416c:	f10d 061e 	add.w	r6, sp, #30
 8014170:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8014174:	e002      	b.n	801417c <recv_custom_msg+0x34>
 8014176:	9b05      	ldr	r3, [sp, #20]
 8014178:	2b00      	cmp	r3, #0
 801417a:	dd0f      	ble.n	801419c <recv_custom_msg+0x54>
 801417c:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8014180:	4623      	mov	r3, r4
 8014182:	4622      	mov	r2, r4
 8014184:	4648      	mov	r0, r9
 8014186:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801418a:	e9cd 5600 	strd	r5, r6, [sp]
 801418e:	f001 f8d9 	bl	8015344 <uxr_read_framed_msg>
 8014192:	2800      	cmp	r0, #0
 8014194:	d0ef      	beq.n	8014176 <recv_custom_msg+0x2e>
 8014196:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801419a:	b1b3      	cbz	r3, 80141ca <recv_custom_msg+0x82>
 801419c:	4b0f      	ldr	r3, [pc, #60]	@ (80141dc <recv_custom_msg+0x94>)
 801419e:	2000      	movs	r0, #0
 80141a0:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80141a4:	701a      	strb	r2, [r3, #0]
 80141a6:	b009      	add	sp, #36	@ 0x24
 80141a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141ac:	f10d 021f 	add.w	r2, sp, #31
 80141b0:	4601      	mov	r1, r0
 80141b2:	9200      	str	r2, [sp, #0]
 80141b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80141b8:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 80141bc:	47a8      	blx	r5
 80141be:	2800      	cmp	r0, #0
 80141c0:	d0ec      	beq.n	801419c <recv_custom_msg+0x54>
 80141c2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d1e8      	bne.n	801419c <recv_custom_msg+0x54>
 80141ca:	f8cb 0000 	str.w	r0, [fp]
 80141ce:	2001      	movs	r0, #1
 80141d0:	f8ca 4000 	str.w	r4, [sl]
 80141d4:	b009      	add	sp, #36	@ 0x24
 80141d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141da:	bf00      	nop
 80141dc:	2000ecb0 	.word	0x2000ecb0

080141e0 <send_custom_msg>:
 80141e0:	b530      	push	{r4, r5, lr}
 80141e2:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 80141e6:	b087      	sub	sp, #28
 80141e8:	4614      	mov	r4, r2
 80141ea:	b995      	cbnz	r5, 8014212 <send_custom_msg+0x32>
 80141ec:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 80141f0:	f10d 0317 	add.w	r3, sp, #23
 80141f4:	47a8      	blx	r5
 80141f6:	1e03      	subs	r3, r0, #0
 80141f8:	bf18      	it	ne
 80141fa:	2301      	movne	r3, #1
 80141fc:	42a0      	cmp	r0, r4
 80141fe:	bf18      	it	ne
 8014200:	2300      	movne	r3, #0
 8014202:	b91b      	cbnz	r3, 801420c <send_custom_msg+0x2c>
 8014204:	4a0a      	ldr	r2, [pc, #40]	@ (8014230 <send_custom_msg+0x50>)
 8014206:	f89d 1017 	ldrb.w	r1, [sp, #23]
 801420a:	7011      	strb	r1, [r2, #0]
 801420c:	4618      	mov	r0, r3
 801420e:	b007      	add	sp, #28
 8014210:	bd30      	pop	{r4, r5, pc}
 8014212:	460b      	mov	r3, r1
 8014214:	2200      	movs	r2, #0
 8014216:	f10d 0117 	add.w	r1, sp, #23
 801421a:	9400      	str	r4, [sp, #0]
 801421c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8014220:	4602      	mov	r2, r0
 8014222:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8014226:	f200 2002 	addw	r0, r0, #514	@ 0x202
 801422a:	f000 fead 	bl	8014f88 <uxr_write_framed_msg>
 801422e:	e7e2      	b.n	80141f6 <send_custom_msg+0x16>
 8014230:	2000ecb0 	.word	0x2000ecb0

08014234 <uxr_set_custom_transport_callbacks>:
 8014234:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8014238:	9901      	ldr	r1, [sp, #4]
 801423a:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 801423e:	9b00      	ldr	r3, [sp, #0]
 8014240:	e9c0 319c 	strd	r3, r1, [r0, #624]	@ 0x270
 8014244:	4770      	bx	lr
 8014246:	bf00      	nop

08014248 <uxr_init_custom_transport>:
 8014248:	b538      	push	{r3, r4, r5, lr}
 801424a:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801424e:	b303      	cbz	r3, 8014292 <uxr_init_custom_transport+0x4a>
 8014250:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8014254:	4604      	mov	r4, r0
 8014256:	b1e2      	cbz	r2, 8014292 <uxr_init_custom_transport+0x4a>
 8014258:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 801425c:	b1ca      	cbz	r2, 8014292 <uxr_init_custom_transport+0x4a>
 801425e:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8014262:	b1b2      	cbz	r2, 8014292 <uxr_init_custom_transport+0x4a>
 8014264:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8014268:	4798      	blx	r3
 801426a:	4605      	mov	r5, r0
 801426c:	b188      	cbz	r0, 8014292 <uxr_init_custom_transport+0x4a>
 801426e:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8014272:	b98b      	cbnz	r3, 8014298 <uxr_init_custom_transport+0x50>
 8014274:	4b0b      	ldr	r3, [pc, #44]	@ (80142a4 <uxr_init_custom_transport+0x5c>)
 8014276:	4628      	mov	r0, r5
 8014278:	490b      	ldr	r1, [pc, #44]	@ (80142a8 <uxr_init_custom_transport+0x60>)
 801427a:	4a0c      	ldr	r2, [pc, #48]	@ (80142ac <uxr_init_custom_transport+0x64>)
 801427c:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8014280:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014284:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8014288:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 801428c:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8014290:	bd38      	pop	{r3, r4, r5, pc}
 8014292:	2500      	movs	r5, #0
 8014294:	4628      	mov	r0, r5
 8014296:	bd38      	pop	{r3, r4, r5, pc}
 8014298:	2100      	movs	r1, #0
 801429a:	f204 2002 	addw	r0, r4, #514	@ 0x202
 801429e:	f000 fe6d 	bl	8014f7c <uxr_init_framing_io>
 80142a2:	e7e7      	b.n	8014274 <uxr_init_custom_transport+0x2c>
 80142a4:	08014149 	.word	0x08014149
 80142a8:	080141e1 	.word	0x080141e1
 80142ac:	0801413d 	.word	0x0801413d

080142b0 <uxr_close_custom_transport>:
 80142b0:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 80142b4:	4718      	bx	r3
 80142b6:	bf00      	nop

080142b8 <uxr_init_input_best_effort_stream>:
 80142b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80142bc:	8003      	strh	r3, [r0, #0]
 80142be:	4770      	bx	lr

080142c0 <uxr_reset_input_best_effort_stream>:
 80142c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80142c4:	8003      	strh	r3, [r0, #0]
 80142c6:	4770      	bx	lr

080142c8 <uxr_receive_best_effort_message>:
 80142c8:	b538      	push	{r3, r4, r5, lr}
 80142ca:	4604      	mov	r4, r0
 80142cc:	8800      	ldrh	r0, [r0, #0]
 80142ce:	460d      	mov	r5, r1
 80142d0:	f000 fe3c 	bl	8014f4c <uxr_seq_num_cmp>
 80142d4:	4603      	mov	r3, r0
 80142d6:	0fc0      	lsrs	r0, r0, #31
 80142d8:	2b00      	cmp	r3, #0
 80142da:	bfb8      	it	lt
 80142dc:	8025      	strhlt	r5, [r4, #0]
 80142de:	bd38      	pop	{r3, r4, r5, pc}

080142e0 <on_full_input_buffer>:
 80142e0:	b570      	push	{r4, r5, r6, lr}
 80142e2:	460c      	mov	r4, r1
 80142e4:	4605      	mov	r5, r0
 80142e6:	8908      	ldrh	r0, [r1, #8]
 80142e8:	682b      	ldr	r3, [r5, #0]
 80142ea:	7d26      	ldrb	r6, [r4, #20]
 80142ec:	e9d1 1200 	ldrd	r1, r2, [r1]
 80142f0:	fbb2 f2f0 	udiv	r2, r2, r0
 80142f4:	eba3 0c01 	sub.w	ip, r3, r1
 80142f8:	fbbc fcf2 	udiv	ip, ip, r2
 80142fc:	f10c 0c01 	add.w	ip, ip, #1
 8014300:	fa1f f38c 	uxth.w	r3, ip
 8014304:	fbb3 fcf0 	udiv	ip, r3, r0
 8014308:	fb00 331c 	mls	r3, r0, ip, r3
 801430c:	b29b      	uxth	r3, r3
 801430e:	fb02 f303 	mul.w	r3, r2, r3
 8014312:	1d18      	adds	r0, r3, #4
 8014314:	4408      	add	r0, r1
 8014316:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801431a:	b116      	cbz	r6, 8014322 <on_full_input_buffer+0x42>
 801431c:	2600      	movs	r6, #0
 801431e:	f840 6c04 	str.w	r6, [r0, #-4]
 8014322:	2a03      	cmp	r2, #3
 8014324:	d801      	bhi.n	801432a <on_full_input_buffer+0x4a>
 8014326:	2001      	movs	r0, #1
 8014328:	bd70      	pop	{r4, r5, r6, pc}
 801432a:	3308      	adds	r3, #8
 801432c:	4628      	mov	r0, r5
 801432e:	3a04      	subs	r2, #4
 8014330:	4419      	add	r1, r3
 8014332:	692b      	ldr	r3, [r5, #16]
 8014334:	f7fb f904 	bl	800f540 <ucdr_init_buffer_origin>
 8014338:	4628      	mov	r0, r5
 801433a:	4622      	mov	r2, r4
 801433c:	4902      	ldr	r1, [pc, #8]	@ (8014348 <on_full_input_buffer+0x68>)
 801433e:	f7fb f8db 	bl	800f4f8 <ucdr_set_on_full_buffer_callback>
 8014342:	2000      	movs	r0, #0
 8014344:	bd70      	pop	{r4, r5, r6, pc}
 8014346:	bf00      	nop
 8014348:	080142e1 	.word	0x080142e1

0801434c <uxr_init_input_reliable_stream>:
 801434c:	b510      	push	{r4, lr}
 801434e:	e9c0 1200 	strd	r1, r2, [r0]
 8014352:	2400      	movs	r4, #0
 8014354:	9a02      	ldr	r2, [sp, #8]
 8014356:	8103      	strh	r3, [r0, #8]
 8014358:	6102      	str	r2, [r0, #16]
 801435a:	7504      	strb	r4, [r0, #20]
 801435c:	b1c3      	cbz	r3, 8014390 <uxr_init_input_reliable_stream+0x44>
 801435e:	600c      	str	r4, [r1, #0]
 8014360:	8901      	ldrh	r1, [r0, #8]
 8014362:	2901      	cmp	r1, #1
 8014364:	d914      	bls.n	8014390 <uxr_init_input_reliable_stream+0x44>
 8014366:	f04f 0c01 	mov.w	ip, #1
 801436a:	6843      	ldr	r3, [r0, #4]
 801436c:	f10c 0e01 	add.w	lr, ip, #1
 8014370:	fbbc f2f1 	udiv	r2, ip, r1
 8014374:	fbb3 f3f1 	udiv	r3, r3, r1
 8014378:	fb01 c212 	mls	r2, r1, r2, ip
 801437c:	fa1f fc8e 	uxth.w	ip, lr
 8014380:	b292      	uxth	r2, r2
 8014382:	fb02 f303 	mul.w	r3, r2, r3
 8014386:	6802      	ldr	r2, [r0, #0]
 8014388:	50d4      	str	r4, [r2, r3]
 801438a:	8901      	ldrh	r1, [r0, #8]
 801438c:	4561      	cmp	r1, ip
 801438e:	d8ec      	bhi.n	801436a <uxr_init_input_reliable_stream+0x1e>
 8014390:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014394:	60c3      	str	r3, [r0, #12]
 8014396:	bd10      	pop	{r4, pc}

08014398 <uxr_reset_input_reliable_stream>:
 8014398:	8901      	ldrh	r1, [r0, #8]
 801439a:	b1d9      	cbz	r1, 80143d4 <uxr_reset_input_reliable_stream+0x3c>
 801439c:	b510      	push	{r4, lr}
 801439e:	f04f 0e00 	mov.w	lr, #0
 80143a2:	46f4      	mov	ip, lr
 80143a4:	4674      	mov	r4, lr
 80143a6:	6843      	ldr	r3, [r0, #4]
 80143a8:	f10e 0e01 	add.w	lr, lr, #1
 80143ac:	fbbc f2f1 	udiv	r2, ip, r1
 80143b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80143b4:	fb01 c212 	mls	r2, r1, r2, ip
 80143b8:	fa1f fc8e 	uxth.w	ip, lr
 80143bc:	b292      	uxth	r2, r2
 80143be:	fb02 f303 	mul.w	r3, r2, r3
 80143c2:	6802      	ldr	r2, [r0, #0]
 80143c4:	50d4      	str	r4, [r2, r3]
 80143c6:	8901      	ldrh	r1, [r0, #8]
 80143c8:	4561      	cmp	r1, ip
 80143ca:	d8ec      	bhi.n	80143a6 <uxr_reset_input_reliable_stream+0xe>
 80143cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80143d0:	60c3      	str	r3, [r0, #12]
 80143d2:	bd10      	pop	{r4, pc}
 80143d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80143d8:	60c3      	str	r3, [r0, #12]
 80143da:	4770      	bx	lr

080143dc <uxr_receive_reliable_message>:
 80143dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80143e0:	4604      	mov	r4, r0
 80143e2:	460d      	mov	r5, r1
 80143e4:	8901      	ldrh	r1, [r0, #8]
 80143e6:	4617      	mov	r7, r2
 80143e8:	8980      	ldrh	r0, [r0, #12]
 80143ea:	4698      	mov	r8, r3
 80143ec:	f000 fda6 	bl	8014f3c <uxr_seq_num_add>
 80143f0:	4629      	mov	r1, r5
 80143f2:	4606      	mov	r6, r0
 80143f4:	89a0      	ldrh	r0, [r4, #12]
 80143f6:	f000 fda9 	bl	8014f4c <uxr_seq_num_cmp>
 80143fa:	2800      	cmp	r0, #0
 80143fc:	db0a      	blt.n	8014414 <uxr_receive_reliable_message+0x38>
 80143fe:	2600      	movs	r6, #0
 8014400:	4629      	mov	r1, r5
 8014402:	89e0      	ldrh	r0, [r4, #14]
 8014404:	f000 fda2 	bl	8014f4c <uxr_seq_num_cmp>
 8014408:	2800      	cmp	r0, #0
 801440a:	da00      	bge.n	801440e <uxr_receive_reliable_message+0x32>
 801440c:	81e5      	strh	r5, [r4, #14]
 801440e:	4630      	mov	r0, r6
 8014410:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014414:	4630      	mov	r0, r6
 8014416:	4629      	mov	r1, r5
 8014418:	f000 fd98 	bl	8014f4c <uxr_seq_num_cmp>
 801441c:	2800      	cmp	r0, #0
 801441e:	dbee      	blt.n	80143fe <uxr_receive_reliable_message+0x22>
 8014420:	6923      	ldr	r3, [r4, #16]
 8014422:	4638      	mov	r0, r7
 8014424:	4798      	blx	r3
 8014426:	4681      	mov	r9, r0
 8014428:	2101      	movs	r1, #1
 801442a:	89a0      	ldrh	r0, [r4, #12]
 801442c:	f000 fd86 	bl	8014f3c <uxr_seq_num_add>
 8014430:	f1b9 0f00 	cmp.w	r9, #0
 8014434:	bf08      	it	eq
 8014436:	4285      	cmpeq	r5, r0
 8014438:	bf0c      	ite	eq
 801443a:	2601      	moveq	r6, #1
 801443c:	2600      	movne	r6, #0
 801443e:	d104      	bne.n	801444a <uxr_receive_reliable_message+0x6e>
 8014440:	2300      	movs	r3, #0
 8014442:	9a08      	ldr	r2, [sp, #32]
 8014444:	81a0      	strh	r0, [r4, #12]
 8014446:	7013      	strb	r3, [r2, #0]
 8014448:	e7da      	b.n	8014400 <uxr_receive_reliable_message+0x24>
 801444a:	8922      	ldrh	r2, [r4, #8]
 801444c:	6863      	ldr	r3, [r4, #4]
 801444e:	fbb5 f0f2 	udiv	r0, r5, r2
 8014452:	fbb3 f3f2 	udiv	r3, r3, r2
 8014456:	fb02 5010 	mls	r0, r2, r0, r5
 801445a:	b280      	uxth	r0, r0
 801445c:	fb03 f000 	mul.w	r0, r3, r0
 8014460:	6823      	ldr	r3, [r4, #0]
 8014462:	3004      	adds	r0, #4
 8014464:	4418      	add	r0, r3
 8014466:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801446a:	2b00      	cmp	r3, #0
 801446c:	d1c7      	bne.n	80143fe <uxr_receive_reliable_message+0x22>
 801446e:	4639      	mov	r1, r7
 8014470:	4642      	mov	r2, r8
 8014472:	f002 fc62 	bl	8016d3a <memcpy>
 8014476:	8921      	ldrh	r1, [r4, #8]
 8014478:	6863      	ldr	r3, [r4, #4]
 801447a:	fbb5 f2f1 	udiv	r2, r5, r1
 801447e:	fbb3 f3f1 	udiv	r3, r3, r1
 8014482:	fb01 5212 	mls	r2, r1, r2, r5
 8014486:	b292      	uxth	r2, r2
 8014488:	fb02 f303 	mul.w	r3, r2, r3
 801448c:	6822      	ldr	r2, [r4, #0]
 801448e:	f842 8003 	str.w	r8, [r2, r3]
 8014492:	2301      	movs	r3, #1
 8014494:	9a08      	ldr	r2, [sp, #32]
 8014496:	7013      	strb	r3, [r2, #0]
 8014498:	f1b9 0f00 	cmp.w	r9, #0
 801449c:	d0af      	beq.n	80143fe <uxr_receive_reliable_message+0x22>
 801449e:	89a6      	ldrh	r6, [r4, #12]
 80144a0:	2101      	movs	r1, #1
 80144a2:	4630      	mov	r0, r6
 80144a4:	f000 fd4a 	bl	8014f3c <uxr_seq_num_add>
 80144a8:	8921      	ldrh	r1, [r4, #8]
 80144aa:	6863      	ldr	r3, [r4, #4]
 80144ac:	4606      	mov	r6, r0
 80144ae:	fbb0 f2f1 	udiv	r2, r0, r1
 80144b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80144b6:	fb01 0212 	mls	r2, r1, r2, r0
 80144ba:	6820      	ldr	r0, [r4, #0]
 80144bc:	b292      	uxth	r2, r2
 80144be:	fb02 f303 	mul.w	r3, r2, r3
 80144c2:	3304      	adds	r3, #4
 80144c4:	4418      	add	r0, r3
 80144c6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d097      	beq.n	80143fe <uxr_receive_reliable_message+0x22>
 80144ce:	6923      	ldr	r3, [r4, #16]
 80144d0:	4798      	blx	r3
 80144d2:	2802      	cmp	r0, #2
 80144d4:	d002      	beq.n	80144dc <uxr_receive_reliable_message+0x100>
 80144d6:	2801      	cmp	r0, #1
 80144d8:	d0e2      	beq.n	80144a0 <uxr_receive_reliable_message+0xc4>
 80144da:	e790      	b.n	80143fe <uxr_receive_reliable_message+0x22>
 80144dc:	2601      	movs	r6, #1
 80144de:	e78f      	b.n	8014400 <uxr_receive_reliable_message+0x24>

080144e0 <uxr_next_input_reliable_buffer_available>:
 80144e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144e4:	4604      	mov	r4, r0
 80144e6:	460f      	mov	r7, r1
 80144e8:	8980      	ldrh	r0, [r0, #12]
 80144ea:	2101      	movs	r1, #1
 80144ec:	4690      	mov	r8, r2
 80144ee:	f000 fd25 	bl	8014f3c <uxr_seq_num_add>
 80144f2:	8922      	ldrh	r2, [r4, #8]
 80144f4:	6866      	ldr	r6, [r4, #4]
 80144f6:	fbb0 f3f2 	udiv	r3, r0, r2
 80144fa:	fbb6 f6f2 	udiv	r6, r6, r2
 80144fe:	fb02 0313 	mls	r3, r2, r3, r0
 8014502:	b29b      	uxth	r3, r3
 8014504:	fb03 f606 	mul.w	r6, r3, r6
 8014508:	6823      	ldr	r3, [r4, #0]
 801450a:	3604      	adds	r6, #4
 801450c:	441e      	add	r6, r3
 801450e:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8014512:	f1b9 0f00 	cmp.w	r9, #0
 8014516:	d023      	beq.n	8014560 <uxr_next_input_reliable_buffer_available+0x80>
 8014518:	4605      	mov	r5, r0
 801451a:	6923      	ldr	r3, [r4, #16]
 801451c:	4630      	mov	r0, r6
 801451e:	4798      	blx	r3
 8014520:	4682      	mov	sl, r0
 8014522:	b300      	cbz	r0, 8014566 <uxr_next_input_reliable_buffer_available+0x86>
 8014524:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8014528:	2101      	movs	r1, #1
 801452a:	4650      	mov	r0, sl
 801452c:	f000 fd06 	bl	8014f3c <uxr_seq_num_add>
 8014530:	8921      	ldrh	r1, [r4, #8]
 8014532:	4682      	mov	sl, r0
 8014534:	6863      	ldr	r3, [r4, #4]
 8014536:	6820      	ldr	r0, [r4, #0]
 8014538:	fbba f2f1 	udiv	r2, sl, r1
 801453c:	fbb3 f3f1 	udiv	r3, r3, r1
 8014540:	fb01 a212 	mls	r2, r1, r2, sl
 8014544:	b292      	uxth	r2, r2
 8014546:	fb02 f303 	mul.w	r3, r2, r3
 801454a:	3304      	adds	r3, #4
 801454c:	4418      	add	r0, r3
 801454e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014552:	b12b      	cbz	r3, 8014560 <uxr_next_input_reliable_buffer_available+0x80>
 8014554:	6923      	ldr	r3, [r4, #16]
 8014556:	4798      	blx	r3
 8014558:	2802      	cmp	r0, #2
 801455a:	d01b      	beq.n	8014594 <uxr_next_input_reliable_buffer_available+0xb4>
 801455c:	2801      	cmp	r0, #1
 801455e:	d0e3      	beq.n	8014528 <uxr_next_input_reliable_buffer_available+0x48>
 8014560:	2000      	movs	r0, #0
 8014562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014566:	464a      	mov	r2, r9
 8014568:	4631      	mov	r1, r6
 801456a:	4638      	mov	r0, r7
 801456c:	f7fa fff0 	bl	800f550 <ucdr_init_buffer>
 8014570:	8921      	ldrh	r1, [r4, #8]
 8014572:	6863      	ldr	r3, [r4, #4]
 8014574:	2001      	movs	r0, #1
 8014576:	fbb5 f2f1 	udiv	r2, r5, r1
 801457a:	fbb3 f3f1 	udiv	r3, r3, r1
 801457e:	fb01 5212 	mls	r2, r1, r2, r5
 8014582:	b292      	uxth	r2, r2
 8014584:	fb02 f303 	mul.w	r3, r2, r3
 8014588:	6822      	ldr	r2, [r4, #0]
 801458a:	f842 a003 	str.w	sl, [r2, r3]
 801458e:	81a5      	strh	r5, [r4, #12]
 8014590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014594:	8920      	ldrh	r0, [r4, #8]
 8014596:	eb06 0108 	add.w	r1, r6, r8
 801459a:	6863      	ldr	r3, [r4, #4]
 801459c:	eba9 0208 	sub.w	r2, r9, r8
 80145a0:	fbb5 f6f0 	udiv	r6, r5, r0
 80145a4:	fbb3 f3f0 	udiv	r3, r3, r0
 80145a8:	fb00 5516 	mls	r5, r0, r6, r5
 80145ac:	2000      	movs	r0, #0
 80145ae:	b2ad      	uxth	r5, r5
 80145b0:	fb03 f505 	mul.w	r5, r3, r5
 80145b4:	6823      	ldr	r3, [r4, #0]
 80145b6:	5158      	str	r0, [r3, r5]
 80145b8:	4638      	mov	r0, r7
 80145ba:	f7fa ffc9 	bl	800f550 <ucdr_init_buffer>
 80145be:	4638      	mov	r0, r7
 80145c0:	4622      	mov	r2, r4
 80145c2:	4903      	ldr	r1, [pc, #12]	@ (80145d0 <uxr_next_input_reliable_buffer_available+0xf0>)
 80145c4:	f7fa ff98 	bl	800f4f8 <ucdr_set_on_full_buffer_callback>
 80145c8:	2001      	movs	r0, #1
 80145ca:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80145ce:	e7c8      	b.n	8014562 <uxr_next_input_reliable_buffer_available+0x82>
 80145d0:	080142e1 	.word	0x080142e1

080145d4 <uxr_process_heartbeat>:
 80145d4:	b538      	push	{r3, r4, r5, lr}
 80145d6:	4611      	mov	r1, r2
 80145d8:	4604      	mov	r4, r0
 80145da:	89c0      	ldrh	r0, [r0, #14]
 80145dc:	4615      	mov	r5, r2
 80145de:	f000 fcb5 	bl	8014f4c <uxr_seq_num_cmp>
 80145e2:	2800      	cmp	r0, #0
 80145e4:	bfb8      	it	lt
 80145e6:	81e5      	strhlt	r5, [r4, #14]
 80145e8:	bd38      	pop	{r3, r4, r5, pc}
 80145ea:	bf00      	nop

080145ec <uxr_compute_acknack>:
 80145ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80145f0:	8903      	ldrh	r3, [r0, #8]
 80145f2:	4604      	mov	r4, r0
 80145f4:	460f      	mov	r7, r1
 80145f6:	8985      	ldrh	r5, [r0, #12]
 80145f8:	b1db      	cbz	r3, 8014632 <uxr_compute_acknack+0x46>
 80145fa:	4628      	mov	r0, r5
 80145fc:	2601      	movs	r6, #1
 80145fe:	e004      	b.n	801460a <uxr_compute_acknack+0x1e>
 8014600:	4566      	cmp	r6, ip
 8014602:	f106 0601 	add.w	r6, r6, #1
 8014606:	d214      	bcs.n	8014632 <uxr_compute_acknack+0x46>
 8014608:	89a0      	ldrh	r0, [r4, #12]
 801460a:	b2b1      	uxth	r1, r6
 801460c:	f000 fc96 	bl	8014f3c <uxr_seq_num_add>
 8014610:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014614:	fbb0 f2fc 	udiv	r2, r0, ip
 8014618:	e9d4 1300 	ldrd	r1, r3, [r4]
 801461c:	fb0c 0212 	mls	r2, ip, r2, r0
 8014620:	fbb3 f3fc 	udiv	r3, r3, ip
 8014624:	b292      	uxth	r2, r2
 8014626:	fb02 f303 	mul.w	r3, r2, r3
 801462a:	58cb      	ldr	r3, [r1, r3]
 801462c:	2b00      	cmp	r3, #0
 801462e:	d1e7      	bne.n	8014600 <uxr_compute_acknack+0x14>
 8014630:	4605      	mov	r5, r0
 8014632:	803d      	strh	r5, [r7, #0]
 8014634:	2101      	movs	r1, #1
 8014636:	89e6      	ldrh	r6, [r4, #14]
 8014638:	4628      	mov	r0, r5
 801463a:	f000 fc83 	bl	8014f44 <uxr_seq_num_sub>
 801463e:	4601      	mov	r1, r0
 8014640:	4630      	mov	r0, r6
 8014642:	f000 fc7f 	bl	8014f44 <uxr_seq_num_sub>
 8014646:	4606      	mov	r6, r0
 8014648:	b328      	cbz	r0, 8014696 <uxr_compute_acknack+0xaa>
 801464a:	f04f 0900 	mov.w	r9, #0
 801464e:	f04f 0801 	mov.w	r8, #1
 8014652:	464d      	mov	r5, r9
 8014654:	fa1f f189 	uxth.w	r1, r9
 8014658:	8838      	ldrh	r0, [r7, #0]
 801465a:	f000 fc6f 	bl	8014f3c <uxr_seq_num_add>
 801465e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014662:	6861      	ldr	r1, [r4, #4]
 8014664:	fa08 fe09 	lsl.w	lr, r8, r9
 8014668:	6822      	ldr	r2, [r4, #0]
 801466a:	f109 0901 	add.w	r9, r9, #1
 801466e:	ea4e 0e05 	orr.w	lr, lr, r5
 8014672:	fbb0 f3fc 	udiv	r3, r0, ip
 8014676:	fbb1 f1fc 	udiv	r1, r1, ip
 801467a:	fb03 001c 	mls	r0, r3, ip, r0
 801467e:	b283      	uxth	r3, r0
 8014680:	fb01 f303 	mul.w	r3, r1, r3
 8014684:	58d3      	ldr	r3, [r2, r3]
 8014686:	b90b      	cbnz	r3, 801468c <uxr_compute_acknack+0xa0>
 8014688:	fa1f f58e 	uxth.w	r5, lr
 801468c:	454e      	cmp	r6, r9
 801468e:	d1e1      	bne.n	8014654 <uxr_compute_acknack+0x68>
 8014690:	4628      	mov	r0, r5
 8014692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014696:	4605      	mov	r5, r0
 8014698:	4628      	mov	r0, r5
 801469a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801469e:	bf00      	nop

080146a0 <uxr_init_output_best_effort_stream>:
 80146a0:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 80146a4:	6001      	str	r1, [r0, #0]
 80146a6:	7303      	strb	r3, [r0, #12]
 80146a8:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80146ac:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80146b0:	4770      	bx	lr
 80146b2:	bf00      	nop

080146b4 <uxr_reset_output_best_effort_stream>:
 80146b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80146b8:	7b03      	ldrb	r3, [r0, #12]
 80146ba:	81c2      	strh	r2, [r0, #14]
 80146bc:	6043      	str	r3, [r0, #4]
 80146be:	4770      	bx	lr

080146c0 <uxr_prepare_best_effort_buffer_to_write>:
 80146c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80146c2:	4604      	mov	r4, r0
 80146c4:	b083      	sub	sp, #12
 80146c6:	6840      	ldr	r0, [r0, #4]
 80146c8:	460d      	mov	r5, r1
 80146ca:	4616      	mov	r6, r2
 80146cc:	f7fc fb84 	bl	8010dd8 <uxr_submessage_padding>
 80146d0:	6863      	ldr	r3, [r4, #4]
 80146d2:	4418      	add	r0, r3
 80146d4:	68a3      	ldr	r3, [r4, #8]
 80146d6:	1942      	adds	r2, r0, r5
 80146d8:	4293      	cmp	r3, r2
 80146da:	bf2c      	ite	cs
 80146dc:	2701      	movcs	r7, #1
 80146de:	2700      	movcc	r7, #0
 80146e0:	d202      	bcs.n	80146e8 <uxr_prepare_best_effort_buffer_to_write+0x28>
 80146e2:	4638      	mov	r0, r7
 80146e4:	b003      	add	sp, #12
 80146e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80146e8:	9000      	str	r0, [sp, #0]
 80146ea:	2300      	movs	r3, #0
 80146ec:	4630      	mov	r0, r6
 80146ee:	6821      	ldr	r1, [r4, #0]
 80146f0:	f7fa ff1c 	bl	800f52c <ucdr_init_buffer_origin_offset>
 80146f4:	6861      	ldr	r1, [r4, #4]
 80146f6:	4638      	mov	r0, r7
 80146f8:	4429      	add	r1, r5
 80146fa:	6061      	str	r1, [r4, #4]
 80146fc:	b003      	add	sp, #12
 80146fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014700 <uxr_prepare_best_effort_buffer_to_send>:
 8014700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014704:	4604      	mov	r4, r0
 8014706:	461d      	mov	r5, r3
 8014708:	6840      	ldr	r0, [r0, #4]
 801470a:	7b23      	ldrb	r3, [r4, #12]
 801470c:	4298      	cmp	r0, r3
 801470e:	bf8c      	ite	hi
 8014710:	2601      	movhi	r6, #1
 8014712:	2600      	movls	r6, #0
 8014714:	d802      	bhi.n	801471c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8014716:	4630      	mov	r0, r6
 8014718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801471c:	4688      	mov	r8, r1
 801471e:	89e0      	ldrh	r0, [r4, #14]
 8014720:	2101      	movs	r1, #1
 8014722:	4617      	mov	r7, r2
 8014724:	f000 fc0a 	bl	8014f3c <uxr_seq_num_add>
 8014728:	6823      	ldr	r3, [r4, #0]
 801472a:	81e0      	strh	r0, [r4, #14]
 801472c:	8028      	strh	r0, [r5, #0]
 801472e:	4630      	mov	r0, r6
 8014730:	f8c8 3000 	str.w	r3, [r8]
 8014734:	6863      	ldr	r3, [r4, #4]
 8014736:	603b      	str	r3, [r7, #0]
 8014738:	7b23      	ldrb	r3, [r4, #12]
 801473a:	6063      	str	r3, [r4, #4]
 801473c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014740 <on_full_output_buffer>:
 8014740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014742:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8014746:	460c      	mov	r4, r1
 8014748:	6803      	ldr	r3, [r0, #0]
 801474a:	4605      	mov	r5, r0
 801474c:	7b26      	ldrb	r6, [r4, #12]
 801474e:	e9d1 1200 	ldrd	r1, r2, [r1]
 8014752:	fbb2 f2fc 	udiv	r2, r2, ip
 8014756:	eba3 0e01 	sub.w	lr, r3, r1
 801475a:	6903      	ldr	r3, [r0, #16]
 801475c:	fbbe fef2 	udiv	lr, lr, r2
 8014760:	f10e 0e01 	add.w	lr, lr, #1
 8014764:	fa1f fe8e 	uxth.w	lr, lr
 8014768:	fbbe f7fc 	udiv	r7, lr, ip
 801476c:	fb0c ec17 	mls	ip, ip, r7, lr
 8014770:	fa1f fc8c 	uxth.w	ip, ip
 8014774:	fb02 fc0c 	mul.w	ip, r2, ip
 8014778:	f851 200c 	ldr.w	r2, [r1, ip]
 801477c:	44b4      	add	ip, r6
 801477e:	1b92      	subs	r2, r2, r6
 8014780:	f10c 0c08 	add.w	ip, ip, #8
 8014784:	3a04      	subs	r2, #4
 8014786:	4461      	add	r1, ip
 8014788:	f7fa feda 	bl	800f540 <ucdr_init_buffer_origin>
 801478c:	4628      	mov	r0, r5
 801478e:	4622      	mov	r2, r4
 8014790:	4902      	ldr	r1, [pc, #8]	@ (801479c <on_full_output_buffer+0x5c>)
 8014792:	f7fa feb1 	bl	800f4f8 <ucdr_set_on_full_buffer_callback>
 8014796:	2000      	movs	r0, #0
 8014798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801479a:	bf00      	nop
 801479c:	08014741 	.word	0x08014741

080147a0 <uxr_init_output_reliable_stream>:
 80147a0:	b530      	push	{r4, r5, lr}
 80147a2:	f89d 400c 	ldrb.w	r4, [sp, #12]
 80147a6:	8103      	strh	r3, [r0, #8]
 80147a8:	7304      	strb	r4, [r0, #12]
 80147aa:	e9c0 1200 	strd	r1, r2, [r0]
 80147ae:	b1e3      	cbz	r3, 80147ea <uxr_init_output_reliable_stream+0x4a>
 80147b0:	600c      	str	r4, [r1, #0]
 80147b2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80147b6:	f1bc 0f01 	cmp.w	ip, #1
 80147ba:	d916      	bls.n	80147ea <uxr_init_output_reliable_stream+0x4a>
 80147bc:	f04f 0e01 	mov.w	lr, #1
 80147c0:	6843      	ldr	r3, [r0, #4]
 80147c2:	f10e 0501 	add.w	r5, lr, #1
 80147c6:	7b04      	ldrb	r4, [r0, #12]
 80147c8:	6801      	ldr	r1, [r0, #0]
 80147ca:	fbbe f2fc 	udiv	r2, lr, ip
 80147ce:	fbb3 f3fc 	udiv	r3, r3, ip
 80147d2:	fb0c e212 	mls	r2, ip, r2, lr
 80147d6:	fa1f fe85 	uxth.w	lr, r5
 80147da:	b292      	uxth	r2, r2
 80147dc:	fb02 f303 	mul.w	r3, r2, r3
 80147e0:	50cc      	str	r4, [r1, r3]
 80147e2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80147e6:	45f4      	cmp	ip, lr
 80147e8:	d8ea      	bhi.n	80147c0 <uxr_init_output_reliable_stream+0x20>
 80147ea:	4b07      	ldr	r3, [pc, #28]	@ (8014808 <uxr_init_output_reliable_stream+0x68>)
 80147ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80147f0:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80147f4:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 80147f8:	f8c0 300e 	str.w	r3, [r0, #14]
 80147fc:	2300      	movs	r3, #0
 80147fe:	8242      	strh	r2, [r0, #18]
 8014800:	8403      	strh	r3, [r0, #32]
 8014802:	e9c0 4506 	strd	r4, r5, [r0, #24]
 8014806:	bd30      	pop	{r4, r5, pc}
 8014808:	ffff0000 	.word	0xffff0000
 801480c:	00000000 	.word	0x00000000

08014810 <uxr_reset_output_reliable_stream>:
 8014810:	8901      	ldrh	r1, [r0, #8]
 8014812:	b510      	push	{r4, lr}
 8014814:	b1b1      	cbz	r1, 8014844 <uxr_reset_output_reliable_stream+0x34>
 8014816:	f04f 0e00 	mov.w	lr, #0
 801481a:	46f4      	mov	ip, lr
 801481c:	6843      	ldr	r3, [r0, #4]
 801481e:	f10e 0e01 	add.w	lr, lr, #1
 8014822:	7b04      	ldrb	r4, [r0, #12]
 8014824:	fbbc f2f1 	udiv	r2, ip, r1
 8014828:	fbb3 f3f1 	udiv	r3, r3, r1
 801482c:	fb01 c212 	mls	r2, r1, r2, ip
 8014830:	fa1f fc8e 	uxth.w	ip, lr
 8014834:	b292      	uxth	r2, r2
 8014836:	fb02 f303 	mul.w	r3, r2, r3
 801483a:	6802      	ldr	r2, [r0, #0]
 801483c:	50d4      	str	r4, [r2, r3]
 801483e:	8901      	ldrh	r1, [r0, #8]
 8014840:	4561      	cmp	r1, ip
 8014842:	d8eb      	bhi.n	801481c <uxr_reset_output_reliable_stream+0xc>
 8014844:	4b08      	ldr	r3, [pc, #32]	@ (8014868 <uxr_reset_output_reliable_stream+0x58>)
 8014846:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801484a:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 8014860 <uxr_reset_output_reliable_stream+0x50>
 801484e:	f8c0 300e 	str.w	r3, [r0, #14]
 8014852:	2300      	movs	r3, #0
 8014854:	8242      	strh	r2, [r0, #18]
 8014856:	8403      	strh	r3, [r0, #32]
 8014858:	ed80 7b06 	vstr	d7, [r0, #24]
 801485c:	bd10      	pop	{r4, pc}
 801485e:	bf00      	nop
 8014860:	ffffffff 	.word	0xffffffff
 8014864:	7fffffff 	.word	0x7fffffff
 8014868:	ffff0000 	.word	0xffff0000

0801486c <uxr_prepare_reliable_buffer_to_write>:
 801486c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014870:	4604      	mov	r4, r0
 8014872:	b091      	sub	sp, #68	@ 0x44
 8014874:	8900      	ldrh	r0, [r0, #8]
 8014876:	468b      	mov	fp, r1
 8014878:	89e6      	ldrh	r6, [r4, #14]
 801487a:	9204      	str	r2, [sp, #16]
 801487c:	6865      	ldr	r5, [r4, #4]
 801487e:	6823      	ldr	r3, [r4, #0]
 8014880:	f894 900c 	ldrb.w	r9, [r4, #12]
 8014884:	fbb6 f2f0 	udiv	r2, r6, r0
 8014888:	fbb5 f5f0 	udiv	r5, r5, r0
 801488c:	fb00 6212 	mls	r2, r0, r2, r6
 8014890:	1f2f      	subs	r7, r5, #4
 8014892:	b292      	uxth	r2, r2
 8014894:	fb05 3202 	mla	r2, r5, r2, r3
 8014898:	1d11      	adds	r1, r2, #4
 801489a:	f8d2 8000 	ldr.w	r8, [r2]
 801489e:	9103      	str	r1, [sp, #12]
 80148a0:	2800      	cmp	r0, #0
 80148a2:	f000 814a 	beq.w	8014b3a <uxr_prepare_reliable_buffer_to_write+0x2ce>
 80148a6:	f04f 0c00 	mov.w	ip, #0
 80148aa:	46e2      	mov	sl, ip
 80148ac:	4661      	mov	r1, ip
 80148ae:	f10c 0c01 	add.w	ip, ip, #1
 80148b2:	fbb1 f2f0 	udiv	r2, r1, r0
 80148b6:	fb00 1212 	mls	r2, r0, r2, r1
 80148ba:	fa1f f18c 	uxth.w	r1, ip
 80148be:	b292      	uxth	r2, r2
 80148c0:	fb05 f202 	mul.w	r2, r5, r2
 80148c4:	589a      	ldr	r2, [r3, r2]
 80148c6:	454a      	cmp	r2, r9
 80148c8:	d103      	bne.n	80148d2 <uxr_prepare_reliable_buffer_to_write+0x66>
 80148ca:	f10a 0a01 	add.w	sl, sl, #1
 80148ce:	fa1f fa8a 	uxth.w	sl, sl
 80148d2:	4281      	cmp	r1, r0
 80148d4:	d3eb      	bcc.n	80148ae <uxr_prepare_reliable_buffer_to_write+0x42>
 80148d6:	4640      	mov	r0, r8
 80148d8:	2104      	movs	r1, #4
 80148da:	f8cd a014 	str.w	sl, [sp, #20]
 80148de:	f7fa fe3b 	bl	800f558 <ucdr_alignment>
 80148e2:	4480      	add	r8, r0
 80148e4:	eb08 020b 	add.w	r2, r8, fp
 80148e8:	42ba      	cmp	r2, r7
 80148ea:	f240 80ca 	bls.w	8014a82 <uxr_prepare_reliable_buffer_to_write+0x216>
 80148ee:	7b22      	ldrb	r2, [r4, #12]
 80148f0:	445a      	add	r2, fp
 80148f2:	42ba      	cmp	r2, r7
 80148f4:	f240 80b2 	bls.w	8014a5c <uxr_prepare_reliable_buffer_to_write+0x1f0>
 80148f8:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 80148fc:	b2bb      	uxth	r3, r7
 80148fe:	eba2 0209 	sub.w	r2, r2, r9
 8014902:	441a      	add	r2, r3
 8014904:	b292      	uxth	r2, r2
 8014906:	fb0a f902 	mul.w	r9, sl, r2
 801490a:	9205      	str	r2, [sp, #20]
 801490c:	45d9      	cmp	r9, fp
 801490e:	9206      	str	r2, [sp, #24]
 8014910:	f0c0 80b3 	bcc.w	8014a7a <uxr_prepare_reliable_buffer_to_write+0x20e>
 8014914:	f108 0204 	add.w	r2, r8, #4
 8014918:	42ba      	cmp	r2, r7
 801491a:	f080 80da 	bcs.w	8014ad2 <uxr_prepare_reliable_buffer_to_write+0x266>
 801491e:	f1a3 0904 	sub.w	r9, r3, #4
 8014922:	9b05      	ldr	r3, [sp, #20]
 8014924:	eba9 0908 	sub.w	r9, r9, r8
 8014928:	fa1f f989 	uxth.w	r9, r9
 801492c:	ebab 0b09 	sub.w	fp, fp, r9
 8014930:	fbbb f2f3 	udiv	r2, fp, r3
 8014934:	fb03 b312 	mls	r3, r3, r2, fp
 8014938:	2b00      	cmp	r3, #0
 801493a:	f040 80c4 	bne.w	8014ac6 <uxr_prepare_reliable_buffer_to_write+0x25a>
 801493e:	b293      	uxth	r3, r2
 8014940:	4553      	cmp	r3, sl
 8014942:	f200 809a 	bhi.w	8014a7a <uxr_prepare_reliable_buffer_to_write+0x20e>
 8014946:	2b00      	cmp	r3, #0
 8014948:	f000 80f9 	beq.w	8014b3e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801494c:	f8cd 801c 	str.w	r8, [sp, #28]
 8014950:	f04f 0a00 	mov.w	sl, #0
 8014954:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8014958:	f10d 0b20 	add.w	fp, sp, #32
 801495c:	9505      	str	r5, [sp, #20]
 801495e:	461d      	mov	r5, r3
 8014960:	e000      	b.n	8014964 <uxr_prepare_reliable_buffer_to_write+0xf8>
 8014962:	46c1      	mov	r9, r8
 8014964:	8922      	ldrh	r2, [r4, #8]
 8014966:	4658      	mov	r0, fp
 8014968:	6863      	ldr	r3, [r4, #4]
 801496a:	f10a 0a01 	add.w	sl, sl, #1
 801496e:	fbb6 f1f2 	udiv	r1, r6, r2
 8014972:	fbb3 f3f2 	udiv	r3, r3, r2
 8014976:	fb02 6111 	mls	r1, r2, r1, r6
 801497a:	463a      	mov	r2, r7
 801497c:	b289      	uxth	r1, r1
 801497e:	fb03 f101 	mul.w	r1, r3, r1
 8014982:	6823      	ldr	r3, [r4, #0]
 8014984:	3104      	adds	r1, #4
 8014986:	4419      	add	r1, r3
 8014988:	2300      	movs	r3, #0
 801498a:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801498e:	f8cd c000 	str.w	ip, [sp]
 8014992:	f7fa fdcb 	bl	800f52c <ucdr_init_buffer_origin_offset>
 8014996:	464a      	mov	r2, r9
 8014998:	2300      	movs	r3, #0
 801499a:	210d      	movs	r1, #13
 801499c:	4658      	mov	r0, fp
 801499e:	f7fc f9db 	bl	8010d58 <uxr_buffer_submessage_header>
 80149a2:	8921      	ldrh	r1, [r4, #8]
 80149a4:	6863      	ldr	r3, [r4, #4]
 80149a6:	4630      	mov	r0, r6
 80149a8:	fbb6 f2f1 	udiv	r2, r6, r1
 80149ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80149b0:	fb01 6212 	mls	r2, r1, r2, r6
 80149b4:	2101      	movs	r1, #1
 80149b6:	b292      	uxth	r2, r2
 80149b8:	fb02 f303 	mul.w	r3, r2, r3
 80149bc:	6822      	ldr	r2, [r4, #0]
 80149be:	50d7      	str	r7, [r2, r3]
 80149c0:	f000 fabc 	bl	8014f3c <uxr_seq_num_add>
 80149c4:	4606      	mov	r6, r0
 80149c6:	fa1f f38a 	uxth.w	r3, sl
 80149ca:	429d      	cmp	r5, r3
 80149cc:	d8c9      	bhi.n	8014962 <uxr_prepare_reliable_buffer_to_write+0xf6>
 80149ce:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80149d2:	9d05      	ldr	r5, [sp, #20]
 80149d4:	8920      	ldrh	r0, [r4, #8]
 80149d6:	463a      	mov	r2, r7
 80149d8:	6863      	ldr	r3, [r4, #4]
 80149da:	fbb6 f1f0 	udiv	r1, r6, r0
 80149de:	fbb3 f3f0 	udiv	r3, r3, r0
 80149e2:	fb00 6111 	mls	r1, r0, r1, r6
 80149e6:	4658      	mov	r0, fp
 80149e8:	b289      	uxth	r1, r1
 80149ea:	fb01 f303 	mul.w	r3, r1, r3
 80149ee:	6821      	ldr	r1, [r4, #0]
 80149f0:	3304      	adds	r3, #4
 80149f2:	4419      	add	r1, r3
 80149f4:	2300      	movs	r3, #0
 80149f6:	f851 7c04 	ldr.w	r7, [r1, #-4]
 80149fa:	9700      	str	r7, [sp, #0]
 80149fc:	f7fa fd96 	bl	800f52c <ucdr_init_buffer_origin_offset>
 8014a00:	9f06      	ldr	r7, [sp, #24]
 8014a02:	4658      	mov	r0, fp
 8014a04:	2302      	movs	r3, #2
 8014a06:	b2ba      	uxth	r2, r7
 8014a08:	210d      	movs	r1, #13
 8014a0a:	f7fc f9a5 	bl	8010d58 <uxr_buffer_submessage_header>
 8014a0e:	f108 0104 	add.w	r1, r8, #4
 8014a12:	9b03      	ldr	r3, [sp, #12]
 8014a14:	f1a5 0208 	sub.w	r2, r5, #8
 8014a18:	8925      	ldrh	r5, [r4, #8]
 8014a1a:	440b      	add	r3, r1
 8014a1c:	eba2 0208 	sub.w	r2, r2, r8
 8014a20:	fbb6 f0f5 	udiv	r0, r6, r5
 8014a24:	4619      	mov	r1, r3
 8014a26:	6863      	ldr	r3, [r4, #4]
 8014a28:	fb05 6010 	mls	r0, r5, r0, r6
 8014a2c:	fbb3 f3f5 	udiv	r3, r3, r5
 8014a30:	b280      	uxth	r0, r0
 8014a32:	6825      	ldr	r5, [r4, #0]
 8014a34:	fb00 f303 	mul.w	r3, r0, r3
 8014a38:	7b20      	ldrb	r0, [r4, #12]
 8014a3a:	3004      	adds	r0, #4
 8014a3c:	4438      	add	r0, r7
 8014a3e:	50e8      	str	r0, [r5, r3]
 8014a40:	9d04      	ldr	r5, [sp, #16]
 8014a42:	4628      	mov	r0, r5
 8014a44:	f7fa fd84 	bl	800f550 <ucdr_init_buffer>
 8014a48:	4628      	mov	r0, r5
 8014a4a:	4622      	mov	r2, r4
 8014a4c:	493d      	ldr	r1, [pc, #244]	@ (8014b44 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8014a4e:	f7fa fd53 	bl	800f4f8 <ucdr_set_on_full_buffer_callback>
 8014a52:	2001      	movs	r0, #1
 8014a54:	81e6      	strh	r6, [r4, #14]
 8014a56:	b011      	add	sp, #68	@ 0x44
 8014a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a5c:	2101      	movs	r1, #1
 8014a5e:	89e0      	ldrh	r0, [r4, #14]
 8014a60:	f000 fa6c 	bl	8014f3c <uxr_seq_num_add>
 8014a64:	4605      	mov	r5, r0
 8014a66:	8921      	ldrh	r1, [r4, #8]
 8014a68:	8a60      	ldrh	r0, [r4, #18]
 8014a6a:	f000 fa67 	bl	8014f3c <uxr_seq_num_add>
 8014a6e:	4601      	mov	r1, r0
 8014a70:	4628      	mov	r0, r5
 8014a72:	f000 fa6b 	bl	8014f4c <uxr_seq_num_cmp>
 8014a76:	2800      	cmp	r0, #0
 8014a78:	dd44      	ble.n	8014b04 <uxr_prepare_reliable_buffer_to_write+0x298>
 8014a7a:	2000      	movs	r0, #0
 8014a7c:	b011      	add	sp, #68	@ 0x44
 8014a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a82:	8921      	ldrh	r1, [r4, #8]
 8014a84:	8a60      	ldrh	r0, [r4, #18]
 8014a86:	9205      	str	r2, [sp, #20]
 8014a88:	f000 fa58 	bl	8014f3c <uxr_seq_num_add>
 8014a8c:	4601      	mov	r1, r0
 8014a8e:	4630      	mov	r0, r6
 8014a90:	f000 fa5c 	bl	8014f4c <uxr_seq_num_cmp>
 8014a94:	2800      	cmp	r0, #0
 8014a96:	9a05      	ldr	r2, [sp, #20]
 8014a98:	dcef      	bgt.n	8014a7a <uxr_prepare_reliable_buffer_to_write+0x20e>
 8014a9a:	8925      	ldrh	r5, [r4, #8]
 8014a9c:	e9d4 7300 	ldrd	r7, r3, [r4]
 8014aa0:	fbb6 f4f5 	udiv	r4, r6, r5
 8014aa4:	fbb3 f3f5 	udiv	r3, r3, r5
 8014aa8:	fb05 6414 	mls	r4, r5, r4, r6
 8014aac:	b2a4      	uxth	r4, r4
 8014aae:	fb04 f303 	mul.w	r3, r4, r3
 8014ab2:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8014ab6:	50fa      	str	r2, [r7, r3]
 8014ab8:	2300      	movs	r3, #0
 8014aba:	f8cd 8000 	str.w	r8, [sp]
 8014abe:	f7fa fd35 	bl	800f52c <ucdr_init_buffer_origin_offset>
 8014ac2:	2001      	movs	r0, #1
 8014ac4:	e7da      	b.n	8014a7c <uxr_prepare_reliable_buffer_to_write+0x210>
 8014ac6:	3201      	adds	r2, #1
 8014ac8:	9306      	str	r3, [sp, #24]
 8014aca:	b293      	uxth	r3, r2
 8014acc:	4553      	cmp	r3, sl
 8014ace:	d8d4      	bhi.n	8014a7a <uxr_prepare_reliable_buffer_to_write+0x20e>
 8014ad0:	e739      	b.n	8014946 <uxr_prepare_reliable_buffer_to_write+0xda>
 8014ad2:	4630      	mov	r0, r6
 8014ad4:	2101      	movs	r1, #1
 8014ad6:	9307      	str	r3, [sp, #28]
 8014ad8:	f000 fa30 	bl	8014f3c <uxr_seq_num_add>
 8014adc:	4606      	mov	r6, r0
 8014ade:	8920      	ldrh	r0, [r4, #8]
 8014ae0:	6862      	ldr	r2, [r4, #4]
 8014ae2:	fbb6 f1f0 	udiv	r1, r6, r0
 8014ae6:	fbb2 f2f0 	udiv	r2, r2, r0
 8014aea:	fb00 6111 	mls	r1, r0, r1, r6
 8014aee:	b289      	uxth	r1, r1
 8014af0:	fb01 f202 	mul.w	r2, r1, r2
 8014af4:	6821      	ldr	r1, [r4, #0]
 8014af6:	3204      	adds	r2, #4
 8014af8:	188b      	adds	r3, r1, r2
 8014afa:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8014afe:	9303      	str	r3, [sp, #12]
 8014b00:	9b07      	ldr	r3, [sp, #28]
 8014b02:	e70c      	b.n	801491e <uxr_prepare_reliable_buffer_to_write+0xb2>
 8014b04:	8921      	ldrh	r1, [r4, #8]
 8014b06:	6863      	ldr	r3, [r4, #4]
 8014b08:	9804      	ldr	r0, [sp, #16]
 8014b0a:	fbb5 f2f1 	udiv	r2, r5, r1
 8014b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8014b12:	fb01 5212 	mls	r2, r1, r2, r5
 8014b16:	6821      	ldr	r1, [r4, #0]
 8014b18:	b292      	uxth	r2, r2
 8014b1a:	fb02 f303 	mul.w	r3, r2, r3
 8014b1e:	7b22      	ldrb	r2, [r4, #12]
 8014b20:	3304      	adds	r3, #4
 8014b22:	445a      	add	r2, fp
 8014b24:	4419      	add	r1, r3
 8014b26:	f841 2c04 	str.w	r2, [r1, #-4]
 8014b2a:	7b23      	ldrb	r3, [r4, #12]
 8014b2c:	9300      	str	r3, [sp, #0]
 8014b2e:	2300      	movs	r3, #0
 8014b30:	f7fa fcfc 	bl	800f52c <ucdr_init_buffer_origin_offset>
 8014b34:	2001      	movs	r0, #1
 8014b36:	81e5      	strh	r5, [r4, #14]
 8014b38:	e7a0      	b.n	8014a7c <uxr_prepare_reliable_buffer_to_write+0x210>
 8014b3a:	4682      	mov	sl, r0
 8014b3c:	e6cb      	b.n	80148d6 <uxr_prepare_reliable_buffer_to_write+0x6a>
 8014b3e:	f10d 0b20 	add.w	fp, sp, #32
 8014b42:	e747      	b.n	80149d4 <uxr_prepare_reliable_buffer_to_write+0x168>
 8014b44:	08014741 	.word	0x08014741

08014b48 <uxr_prepare_next_reliable_buffer_to_send>:
 8014b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b4a:	4604      	mov	r4, r0
 8014b4c:	461d      	mov	r5, r3
 8014b4e:	460f      	mov	r7, r1
 8014b50:	8a00      	ldrh	r0, [r0, #16]
 8014b52:	2101      	movs	r1, #1
 8014b54:	4616      	mov	r6, r2
 8014b56:	f000 f9f1 	bl	8014f3c <uxr_seq_num_add>
 8014b5a:	8028      	strh	r0, [r5, #0]
 8014b5c:	8922      	ldrh	r2, [r4, #8]
 8014b5e:	6863      	ldr	r3, [r4, #4]
 8014b60:	fbb0 f1f2 	udiv	r1, r0, r2
 8014b64:	fbb3 f3f2 	udiv	r3, r3, r2
 8014b68:	fb02 0c11 	mls	ip, r2, r1, r0
 8014b6c:	89e1      	ldrh	r1, [r4, #14]
 8014b6e:	fa1f fc8c 	uxth.w	ip, ip
 8014b72:	fb0c fc03 	mul.w	ip, ip, r3
 8014b76:	6823      	ldr	r3, [r4, #0]
 8014b78:	f10c 0c04 	add.w	ip, ip, #4
 8014b7c:	4463      	add	r3, ip
 8014b7e:	603b      	str	r3, [r7, #0]
 8014b80:	6823      	ldr	r3, [r4, #0]
 8014b82:	449c      	add	ip, r3
 8014b84:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8014b88:	6033      	str	r3, [r6, #0]
 8014b8a:	f000 f9df 	bl	8014f4c <uxr_seq_num_cmp>
 8014b8e:	2800      	cmp	r0, #0
 8014b90:	dd01      	ble.n	8014b96 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8014b92:	2000      	movs	r0, #0
 8014b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b96:	7b23      	ldrb	r3, [r4, #12]
 8014b98:	6832      	ldr	r2, [r6, #0]
 8014b9a:	429a      	cmp	r2, r3
 8014b9c:	d9f9      	bls.n	8014b92 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8014b9e:	8a61      	ldrh	r1, [r4, #18]
 8014ba0:	8a20      	ldrh	r0, [r4, #16]
 8014ba2:	f000 f9cf 	bl	8014f44 <uxr_seq_num_sub>
 8014ba6:	8923      	ldrh	r3, [r4, #8]
 8014ba8:	4283      	cmp	r3, r0
 8014baa:	d0f2      	beq.n	8014b92 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8014bac:	8828      	ldrh	r0, [r5, #0]
 8014bae:	89e3      	ldrh	r3, [r4, #14]
 8014bb0:	8220      	strh	r0, [r4, #16]
 8014bb2:	4298      	cmp	r0, r3
 8014bb4:	d001      	beq.n	8014bba <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8014bb6:	2001      	movs	r0, #1
 8014bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014bba:	2101      	movs	r1, #1
 8014bbc:	f000 f9be 	bl	8014f3c <uxr_seq_num_add>
 8014bc0:	4603      	mov	r3, r0
 8014bc2:	2001      	movs	r0, #1
 8014bc4:	81e3      	strh	r3, [r4, #14]
 8014bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014bc8 <uxr_update_output_stream_heartbeat_timestamp>:
 8014bc8:	b570      	push	{r4, r5, r6, lr}
 8014bca:	8a01      	ldrh	r1, [r0, #16]
 8014bcc:	4604      	mov	r4, r0
 8014bce:	8a40      	ldrh	r0, [r0, #18]
 8014bd0:	4615      	mov	r5, r2
 8014bd2:	461e      	mov	r6, r3
 8014bd4:	f000 f9ba 	bl	8014f4c <uxr_seq_num_cmp>
 8014bd8:	2800      	cmp	r0, #0
 8014bda:	db07      	blt.n	8014bec <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8014bdc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014be0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8014be4:	2000      	movs	r0, #0
 8014be6:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8014bea:	bd70      	pop	{r4, r5, r6, pc}
 8014bec:	f894 0020 	ldrb.w	r0, [r4, #32]
 8014bf0:	b940      	cbnz	r0, 8014c04 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8014bf2:	2301      	movs	r3, #1
 8014bf4:	f884 3020 	strb.w	r3, [r4, #32]
 8014bf8:	3564      	adds	r5, #100	@ 0x64
 8014bfa:	f146 0600 	adc.w	r6, r6, #0
 8014bfe:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8014c02:	bd70      	pop	{r4, r5, r6, pc}
 8014c04:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8014c08:	4295      	cmp	r5, r2
 8014c0a:	eb76 0303 	sbcs.w	r3, r6, r3
 8014c0e:	db04      	blt.n	8014c1a <uxr_update_output_stream_heartbeat_timestamp+0x52>
 8014c10:	1c43      	adds	r3, r0, #1
 8014c12:	2001      	movs	r0, #1
 8014c14:	f884 3020 	strb.w	r3, [r4, #32]
 8014c18:	e7ee      	b.n	8014bf8 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8014c1a:	2000      	movs	r0, #0
 8014c1c:	e7ec      	b.n	8014bf8 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8014c1e:	bf00      	nop

08014c20 <uxr_begin_output_nack_buffer_it>:
 8014c20:	8a40      	ldrh	r0, [r0, #18]
 8014c22:	4770      	bx	lr

08014c24 <uxr_next_reliable_nack_buffer_to_send>:
 8014c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c28:	f890 7021 	ldrb.w	r7, [r0, #33]	@ 0x21
 8014c2c:	b197      	cbz	r7, 8014c54 <uxr_next_reliable_nack_buffer_to_send+0x30>
 8014c2e:	4680      	mov	r8, r0
 8014c30:	460d      	mov	r5, r1
 8014c32:	4616      	mov	r6, r2
 8014c34:	461c      	mov	r4, r3
 8014c36:	8818      	ldrh	r0, [r3, #0]
 8014c38:	2101      	movs	r1, #1
 8014c3a:	f000 f97f 	bl	8014f3c <uxr_seq_num_add>
 8014c3e:	8020      	strh	r0, [r4, #0]
 8014c40:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 8014c44:	f000 f982 	bl	8014f4c <uxr_seq_num_cmp>
 8014c48:	2800      	cmp	r0, #0
 8014c4a:	dd06      	ble.n	8014c5a <uxr_next_reliable_nack_buffer_to_send+0x36>
 8014c4c:	2300      	movs	r3, #0
 8014c4e:	461f      	mov	r7, r3
 8014c50:	f888 3021 	strb.w	r3, [r8, #33]	@ 0x21
 8014c54:	4638      	mov	r0, r7
 8014c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c5a:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8014c5e:	8820      	ldrh	r0, [r4, #0]
 8014c60:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014c64:	fbb0 f3f2 	udiv	r3, r0, r2
 8014c68:	fbb1 fcf2 	udiv	ip, r1, r2
 8014c6c:	fb02 0313 	mls	r3, r2, r3, r0
 8014c70:	b29b      	uxth	r3, r3
 8014c72:	fb03 fc0c 	mul.w	ip, r3, ip
 8014c76:	f8d8 3000 	ldr.w	r3, [r8]
 8014c7a:	f10c 0c04 	add.w	ip, ip, #4
 8014c7e:	4463      	add	r3, ip
 8014c80:	602b      	str	r3, [r5, #0]
 8014c82:	f8d8 3000 	ldr.w	r3, [r8]
 8014c86:	4463      	add	r3, ip
 8014c88:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8014c8c:	6033      	str	r3, [r6, #0]
 8014c8e:	f898 200c 	ldrb.w	r2, [r8, #12]
 8014c92:	429a      	cmp	r2, r3
 8014c94:	d0d0      	beq.n	8014c38 <uxr_next_reliable_nack_buffer_to_send+0x14>
 8014c96:	e7dd      	b.n	8014c54 <uxr_next_reliable_nack_buffer_to_send+0x30>

08014c98 <uxr_process_acknack>:
 8014c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c9a:	4604      	mov	r4, r0
 8014c9c:	460e      	mov	r6, r1
 8014c9e:	4610      	mov	r0, r2
 8014ca0:	2101      	movs	r1, #1
 8014ca2:	f000 f94f 	bl	8014f44 <uxr_seq_num_sub>
 8014ca6:	8a61      	ldrh	r1, [r4, #18]
 8014ca8:	f000 f94c 	bl	8014f44 <uxr_seq_num_sub>
 8014cac:	b1c8      	cbz	r0, 8014ce2 <uxr_process_acknack+0x4a>
 8014cae:	4605      	mov	r5, r0
 8014cb0:	2700      	movs	r7, #0
 8014cb2:	2101      	movs	r1, #1
 8014cb4:	8a60      	ldrh	r0, [r4, #18]
 8014cb6:	f000 f941 	bl	8014f3c <uxr_seq_num_add>
 8014cba:	8923      	ldrh	r3, [r4, #8]
 8014cbc:	6862      	ldr	r2, [r4, #4]
 8014cbe:	3701      	adds	r7, #1
 8014cc0:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8014cc4:	6821      	ldr	r1, [r4, #0]
 8014cc6:	42bd      	cmp	r5, r7
 8014cc8:	8260      	strh	r0, [r4, #18]
 8014cca:	fbb0 fef3 	udiv	lr, r0, r3
 8014cce:	fbb2 f2f3 	udiv	r2, r2, r3
 8014cd2:	fb03 031e 	mls	r3, r3, lr, r0
 8014cd6:	b29b      	uxth	r3, r3
 8014cd8:	fb02 f303 	mul.w	r3, r2, r3
 8014cdc:	f841 c003 	str.w	ip, [r1, r3]
 8014ce0:	d1e7      	bne.n	8014cb2 <uxr_process_acknack+0x1a>
 8014ce2:	3e00      	subs	r6, #0
 8014ce4:	f04f 0300 	mov.w	r3, #0
 8014ce8:	bf18      	it	ne
 8014cea:	2601      	movne	r6, #1
 8014cec:	f884 3020 	strb.w	r3, [r4, #32]
 8014cf0:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8014cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014cf6:	bf00      	nop

08014cf8 <uxr_is_output_up_to_date>:
 8014cf8:	8a01      	ldrh	r1, [r0, #16]
 8014cfa:	8a40      	ldrh	r0, [r0, #18]
 8014cfc:	b508      	push	{r3, lr}
 8014cfe:	f000 f925 	bl	8014f4c <uxr_seq_num_cmp>
 8014d02:	fab0 f080 	clz	r0, r0
 8014d06:	0940      	lsrs	r0, r0, #5
 8014d08:	bd08      	pop	{r3, pc}
 8014d0a:	bf00      	nop

08014d0c <get_available_free_slots>:
 8014d0c:	8901      	ldrh	r1, [r0, #8]
 8014d0e:	b1e1      	cbz	r1, 8014d4a <get_available_free_slots+0x3e>
 8014d10:	6843      	ldr	r3, [r0, #4]
 8014d12:	f04f 0c00 	mov.w	ip, #0
 8014d16:	b530      	push	{r4, r5, lr}
 8014d18:	fbb3 fef1 	udiv	lr, r3, r1
 8014d1c:	6805      	ldr	r5, [r0, #0]
 8014d1e:	4662      	mov	r2, ip
 8014d20:	7b04      	ldrb	r4, [r0, #12]
 8014d22:	4660      	mov	r0, ip
 8014d24:	f10c 0c01 	add.w	ip, ip, #1
 8014d28:	fbb2 f3f1 	udiv	r3, r2, r1
 8014d2c:	fb01 2313 	mls	r3, r1, r3, r2
 8014d30:	fa1f f28c 	uxth.w	r2, ip
 8014d34:	b29b      	uxth	r3, r3
 8014d36:	fb0e f303 	mul.w	r3, lr, r3
 8014d3a:	58eb      	ldr	r3, [r5, r3]
 8014d3c:	429c      	cmp	r4, r3
 8014d3e:	d101      	bne.n	8014d44 <get_available_free_slots+0x38>
 8014d40:	3001      	adds	r0, #1
 8014d42:	b280      	uxth	r0, r0
 8014d44:	428a      	cmp	r2, r1
 8014d46:	d3ed      	bcc.n	8014d24 <get_available_free_slots+0x18>
 8014d48:	bd30      	pop	{r4, r5, pc}
 8014d4a:	4608      	mov	r0, r1
 8014d4c:	4770      	bx	lr
 8014d4e:	bf00      	nop

08014d50 <uxr_buffer_cancel_data>:
 8014d50:	b510      	push	{r4, lr}
 8014d52:	2300      	movs	r3, #0
 8014d54:	b094      	sub	sp, #80	@ 0x50
 8014d56:	4604      	mov	r4, r0
 8014d58:	9205      	str	r2, [sp, #20]
 8014d5a:	9301      	str	r3, [sp, #4]
 8014d5c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014d60:	f88d 301e 	strb.w	r3, [sp, #30]
 8014d64:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8014d68:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8014d6c:	2308      	movs	r3, #8
 8014d6e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8014d72:	2201      	movs	r2, #1
 8014d74:	9300      	str	r3, [sp, #0]
 8014d76:	ab0c      	add	r3, sp, #48	@ 0x30
 8014d78:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8014d7c:	2210      	movs	r2, #16
 8014d7e:	f7fb fd3f 	bl	8010800 <uxr_prepare_stream_to_write_submessage>
 8014d82:	b918      	cbnz	r0, 8014d8c <uxr_buffer_cancel_data+0x3c>
 8014d84:	4604      	mov	r4, r0
 8014d86:	4620      	mov	r0, r4
 8014d88:	b014      	add	sp, #80	@ 0x50
 8014d8a:	bd10      	pop	{r4, pc}
 8014d8c:	9905      	ldr	r1, [sp, #20]
 8014d8e:	aa06      	add	r2, sp, #24
 8014d90:	4620      	mov	r0, r4
 8014d92:	f7fb fe71 	bl	8010a78 <uxr_init_base_object_request>
 8014d96:	4604      	mov	r4, r0
 8014d98:	a906      	add	r1, sp, #24
 8014d9a:	a80c      	add	r0, sp, #48	@ 0x30
 8014d9c:	f7fd f884 	bl	8011ea8 <uxr_serialize_READ_DATA_Payload>
 8014da0:	4620      	mov	r0, r4
 8014da2:	b014      	add	sp, #80	@ 0x50
 8014da4:	bd10      	pop	{r4, pc}
 8014da6:	bf00      	nop

08014da8 <read_submessage_format>:
 8014da8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014dac:	b095      	sub	sp, #84	@ 0x54
 8014dae:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 8014db2:	b113      	cbz	r3, 8014dba <read_submessage_format+0x12>
 8014db4:	b015      	add	sp, #84	@ 0x54
 8014db6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014dba:	4606      	mov	r6, r0
 8014dbc:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8014dbe:	460c      	mov	r4, r1
 8014dc0:	4615      	mov	r5, r2
 8014dc2:	9004      	str	r0, [sp, #16]
 8014dc4:	4699      	mov	r9, r3
 8014dc6:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8014dc8:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8014dcc:	9005      	str	r0, [sp, #20]
 8014dce:	a80c      	add	r0, sp, #48	@ 0x30
 8014dd0:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8014dd4:	1a52      	subs	r2, r2, r1
 8014dd6:	f7fa fbbb 	bl	800f550 <ucdr_init_buffer>
 8014dda:	a80c      	add	r0, sp, #48	@ 0x30
 8014ddc:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8014de0:	f7fa fb8a 	bl	800f4f8 <ucdr_set_on_full_buffer_callback>
 8014de4:	69e2      	ldr	r2, [r4, #28]
 8014de6:	b19a      	cbz	r2, 8014e10 <read_submessage_format+0x68>
 8014de8:	f1b8 0f07 	cmp.w	r8, #7
 8014dec:	f882 9014 	strb.w	r9, [r2, #20]
 8014df0:	d040      	beq.n	8014e74 <read_submessage_format+0xcc>
 8014df2:	f1b8 0f08 	cmp.w	r8, #8
 8014df6:	d02e      	beq.n	8014e56 <read_submessage_format+0xae>
 8014df8:	f1b8 0f06 	cmp.w	r8, #6
 8014dfc:	d011      	beq.n	8014e22 <read_submessage_format+0x7a>
 8014dfe:	2301      	movs	r3, #1
 8014e00:	7513      	strb	r3, [r2, #20]
 8014e02:	4629      	mov	r1, r5
 8014e04:	4620      	mov	r0, r4
 8014e06:	f7fa fbf7 	bl	800f5f8 <ucdr_advance_buffer>
 8014e0a:	b015      	add	sp, #84	@ 0x54
 8014e0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e10:	f1b8 0f07 	cmp.w	r8, #7
 8014e14:	d02e      	beq.n	8014e74 <read_submessage_format+0xcc>
 8014e16:	f1b8 0f08 	cmp.w	r8, #8
 8014e1a:	d01c      	beq.n	8014e56 <read_submessage_format+0xae>
 8014e1c:	f1b8 0f06 	cmp.w	r8, #6
 8014e20:	d1ef      	bne.n	8014e02 <read_submessage_format+0x5a>
 8014e22:	f8d6 8088 	ldr.w	r8, [r6, #136]	@ 0x88
 8014e26:	f1b8 0f00 	cmp.w	r8, #0
 8014e2a:	d011      	beq.n	8014e50 <read_submessage_format+0xa8>
 8014e2c:	ab0c      	add	r3, sp, #48	@ 0x30
 8014e2e:	9501      	str	r5, [sp, #4]
 8014e30:	463a      	mov	r2, r7
 8014e32:	4630      	mov	r0, r6
 8014e34:	9300      	str	r3, [sp, #0]
 8014e36:	2306      	movs	r3, #6
 8014e38:	f88d 3016 	strb.w	r3, [sp, #22]
 8014e3c:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 8014e40:	9302      	str	r3, [sp, #8]
 8014e42:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8014e46:	47c0      	blx	r8
 8014e48:	2301      	movs	r3, #1
 8014e4a:	69e2      	ldr	r2, [r4, #28]
 8014e4c:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8014e50:	2a00      	cmp	r2, #0
 8014e52:	d1d4      	bne.n	8014dfe <read_submessage_format+0x56>
 8014e54:	e7d5      	b.n	8014e02 <read_submessage_format+0x5a>
 8014e56:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d0f8      	beq.n	8014e50 <read_submessage_format+0xa8>
 8014e5e:	a80c      	add	r0, sp, #48	@ 0x30
 8014e60:	a906      	add	r1, sp, #24
 8014e62:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8014e66:	f7fd f8c5 	bl	8011ff4 <uxr_deserialize_SampleIdentity>
 8014e6a:	b9a0      	cbnz	r0, 8014e96 <read_submessage_format+0xee>
 8014e6c:	69e2      	ldr	r2, [r4, #28]
 8014e6e:	2a00      	cmp	r2, #0
 8014e70:	d1c5      	bne.n	8014dfe <read_submessage_format+0x56>
 8014e72:	e7c6      	b.n	8014e02 <read_submessage_format+0x5a>
 8014e74:	f8d6 30ac 	ldr.w	r3, [r6, #172]	@ 0xac
 8014e78:	b13b      	cbz	r3, 8014e8a <read_submessage_format+0xe2>
 8014e7a:	a906      	add	r1, sp, #24
 8014e7c:	a80c      	add	r0, sp, #48	@ 0x30
 8014e7e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8014e82:	f7fc fdb1 	bl	80119e8 <uxr_deserialize_BaseObjectRequest>
 8014e86:	bb60      	cbnz	r0, 8014ee2 <read_submessage_format+0x13a>
 8014e88:	69e2      	ldr	r2, [r4, #28]
 8014e8a:	68a3      	ldr	r3, [r4, #8]
 8014e8c:	442b      	add	r3, r5
 8014e8e:	60a3      	str	r3, [r4, #8]
 8014e90:	2a00      	cmp	r2, #0
 8014e92:	d1b4      	bne.n	8014dfe <read_submessage_format+0x56>
 8014e94:	e7b5      	b.n	8014e02 <read_submessage_format+0x5a>
 8014e96:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014e98:	a80c      	add	r0, sp, #48	@ 0x30
 8014e9a:	eba8 0803 	sub.w	r8, r8, r3
 8014e9e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8014ea2:	44a8      	add	r8, r5
 8014ea4:	1a52      	subs	r2, r2, r1
 8014ea6:	f7fa fb53 	bl	800f550 <ucdr_init_buffer>
 8014eaa:	a80c      	add	r0, sp, #48	@ 0x30
 8014eac:	fa1f f888 	uxth.w	r8, r8
 8014eb0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8014eb4:	f7fa fb20 	bl	800f4f8 <ucdr_set_on_full_buffer_callback>
 8014eb8:	ab0c      	add	r3, sp, #48	@ 0x30
 8014eba:	2108      	movs	r1, #8
 8014ebc:	f8cd 8004 	str.w	r8, [sp, #4]
 8014ec0:	9300      	str	r3, [sp, #0]
 8014ec2:	463a      	mov	r2, r7
 8014ec4:	f88d 1016 	strb.w	r1, [sp, #22]
 8014ec8:	ab06      	add	r3, sp, #24
 8014eca:	f8d6 10a8 	ldr.w	r1, [r6, #168]	@ 0xa8
 8014ece:	4630      	mov	r0, r6
 8014ed0:	9102      	str	r1, [sp, #8]
 8014ed2:	9905      	ldr	r1, [sp, #20]
 8014ed4:	f8d6 70a4 	ldr.w	r7, [r6, #164]	@ 0xa4
 8014ed8:	47b8      	blx	r7
 8014eda:	2301      	movs	r3, #1
 8014edc:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8014ee0:	e7c4      	b.n	8014e6c <read_submessage_format+0xc4>
 8014ee2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8014ee6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014ee8:	a80c      	add	r0, sp, #48	@ 0x30
 8014eea:	1a52      	subs	r2, r2, r1
 8014eec:	eba8 0803 	sub.w	r8, r8, r3
 8014ef0:	f7fa fb2e 	bl	800f550 <ucdr_init_buffer>
 8014ef4:	a80c      	add	r0, sp, #48	@ 0x30
 8014ef6:	44a8      	add	r8, r5
 8014ef8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8014efc:	f7fa fafc 	bl	800f4f8 <ucdr_set_on_full_buffer_callback>
 8014f00:	ab0c      	add	r3, sp, #48	@ 0x30
 8014f02:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8014f06:	fa1f f888 	uxth.w	r8, r8
 8014f0a:	9300      	str	r3, [sp, #0]
 8014f0c:	463a      	mov	r2, r7
 8014f0e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8014f12:	4630      	mov	r0, r6
 8014f14:	f8cd 8004 	str.w	r8, [sp, #4]
 8014f18:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8014f1c:	2107      	movs	r1, #7
 8014f1e:	f88d 1016 	strb.w	r1, [sp, #22]
 8014f22:	b29b      	uxth	r3, r3
 8014f24:	f8d6 10b0 	ldr.w	r1, [r6, #176]	@ 0xb0
 8014f28:	9102      	str	r1, [sp, #8]
 8014f2a:	9905      	ldr	r1, [sp, #20]
 8014f2c:	f8d6 70ac 	ldr.w	r7, [r6, #172]	@ 0xac
 8014f30:	47b8      	blx	r7
 8014f32:	2301      	movs	r3, #1
 8014f34:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8014f38:	e7a6      	b.n	8014e88 <read_submessage_format+0xe0>
 8014f3a:	bf00      	nop

08014f3c <uxr_seq_num_add>:
 8014f3c:	4408      	add	r0, r1
 8014f3e:	b280      	uxth	r0, r0
 8014f40:	4770      	bx	lr
 8014f42:	bf00      	nop

08014f44 <uxr_seq_num_sub>:
 8014f44:	1a40      	subs	r0, r0, r1
 8014f46:	b280      	uxth	r0, r0
 8014f48:	4770      	bx	lr
 8014f4a:	bf00      	nop

08014f4c <uxr_seq_num_cmp>:
 8014f4c:	4288      	cmp	r0, r1
 8014f4e:	d011      	beq.n	8014f74 <uxr_seq_num_cmp+0x28>
 8014f50:	d309      	bcc.n	8014f66 <uxr_seq_num_cmp+0x1a>
 8014f52:	4288      	cmp	r0, r1
 8014f54:	d910      	bls.n	8014f78 <uxr_seq_num_cmp+0x2c>
 8014f56:	1a40      	subs	r0, r0, r1
 8014f58:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8014f5c:	bfd4      	ite	le
 8014f5e:	2001      	movle	r0, #1
 8014f60:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8014f64:	4770      	bx	lr
 8014f66:	1a0b      	subs	r3, r1, r0
 8014f68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014f6c:	daf1      	bge.n	8014f52 <uxr_seq_num_cmp+0x6>
 8014f6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014f72:	4770      	bx	lr
 8014f74:	2000      	movs	r0, #0
 8014f76:	4770      	bx	lr
 8014f78:	2001      	movs	r0, #1
 8014f7a:	4770      	bx	lr

08014f7c <uxr_init_framing_io>:
 8014f7c:	2300      	movs	r3, #0
 8014f7e:	7041      	strb	r1, [r0, #1]
 8014f80:	7003      	strb	r3, [r0, #0]
 8014f82:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8014f84:	4770      	bx	lr
 8014f86:	bf00      	nop

08014f88 <uxr_write_framed_msg>:
 8014f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f8c:	4617      	mov	r7, r2
 8014f8e:	7842      	ldrb	r2, [r0, #1]
 8014f90:	460e      	mov	r6, r1
 8014f92:	b083      	sub	sp, #12
 8014f94:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8014f98:	469b      	mov	fp, r3
 8014f9a:	237e      	movs	r3, #126	@ 0x7e
 8014f9c:	4604      	mov	r4, r0
 8014f9e:	2901      	cmp	r1, #1
 8014fa0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8014fa4:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8014fa8:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8014fac:	f240 8115 	bls.w	80151da <uxr_write_framed_msg+0x252>
 8014fb0:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8014fb4:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8014fb8:	2202      	movs	r2, #2
 8014fba:	2901      	cmp	r1, #1
 8014fbc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014fc0:	d952      	bls.n	8015068 <uxr_write_framed_msg+0xe0>
 8014fc2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014fc4:	2103      	movs	r1, #3
 8014fc6:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8014fca:	b2dd      	uxtb	r5, r3
 8014fcc:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8014fd0:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8014fd4:	2a01      	cmp	r2, #1
 8014fd6:	d95c      	bls.n	8015092 <uxr_write_framed_msg+0x10a>
 8014fd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014fda:	1862      	adds	r2, r4, r1
 8014fdc:	3101      	adds	r1, #1
 8014fde:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8014fe2:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 8014fe6:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8014fea:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 8014fee:	2a01      	cmp	r2, #1
 8014ff0:	d961      	bls.n	80150b6 <uxr_write_framed_msg+0x12e>
 8014ff2:	1c4a      	adds	r2, r1, #1
 8014ff4:	4421      	add	r1, r4
 8014ff6:	b2d2      	uxtb	r2, r2
 8014ff8:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8014ffc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015000:	2b00      	cmp	r3, #0
 8015002:	d06a      	beq.n	80150da <uxr_write_framed_msg+0x152>
 8015004:	f04f 0800 	mov.w	r8, #0
 8015008:	46c1      	mov	r9, r8
 801500a:	e016      	b.n	801503a <uxr_write_framed_msg+0xb2>
 801500c:	2a29      	cmp	r2, #41	@ 0x29
 801500e:	d868      	bhi.n	80150e2 <uxr_write_framed_msg+0x15a>
 8015010:	18a0      	adds	r0, r4, r2
 8015012:	3201      	adds	r2, #1
 8015014:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8015018:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801501c:	ea88 0101 	eor.w	r1, r8, r1
 8015020:	4b7d      	ldr	r3, [pc, #500]	@ (8015218 <uxr_write_framed_msg+0x290>)
 8015022:	f109 0901 	add.w	r9, r9, #1
 8015026:	b2c9      	uxtb	r1, r1
 8015028:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 801502c:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8015030:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015032:	454b      	cmp	r3, r9
 8015034:	d969      	bls.n	801510a <uxr_write_framed_msg+0x182>
 8015036:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801503a:	f81b 1009 	ldrb.w	r1, [fp, r9]
 801503e:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8015042:	2801      	cmp	r0, #1
 8015044:	d8e2      	bhi.n	801500c <uxr_write_framed_msg+0x84>
 8015046:	1c50      	adds	r0, r2, #1
 8015048:	b2c0      	uxtb	r0, r0
 801504a:	2829      	cmp	r0, #41	@ 0x29
 801504c:	d849      	bhi.n	80150e2 <uxr_write_framed_msg+0x15a>
 801504e:	18a0      	adds	r0, r4, r2
 8015050:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8015054:	3202      	adds	r2, #2
 8015056:	f081 0520 	eor.w	r5, r1, #32
 801505a:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801505e:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8015062:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015066:	e7d9      	b.n	801501c <uxr_write_framed_msg+0x94>
 8015068:	2104      	movs	r1, #4
 801506a:	f04f 0c03 	mov.w	ip, #3
 801506e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015070:	4422      	add	r2, r4
 8015072:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8015076:	44a4      	add	ip, r4
 8015078:	b2dd      	uxtb	r5, r3
 801507a:	f080 0020 	eor.w	r0, r0, #32
 801507e:	f882 e038 	strb.w	lr, [r2, #56]	@ 0x38
 8015082:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8015086:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 801508a:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801508e:	2a01      	cmp	r2, #1
 8015090:	d8a2      	bhi.n	8014fd8 <uxr_write_framed_msg+0x50>
 8015092:	1862      	adds	r2, r4, r1
 8015094:	207d      	movs	r0, #125	@ 0x7d
 8015096:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015098:	f085 0520 	eor.w	r5, r5, #32
 801509c:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 80150a0:	3102      	adds	r1, #2
 80150a2:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80150a6:	f882 5039 	strb.w	r5, [r2, #57]	@ 0x39
 80150aa:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80150ae:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 80150b2:	2a01      	cmp	r2, #1
 80150b4:	d89d      	bhi.n	8014ff2 <uxr_write_framed_msg+0x6a>
 80150b6:	1c4d      	adds	r5, r1, #1
 80150b8:	1c8a      	adds	r2, r1, #2
 80150ba:	f080 0020 	eor.w	r0, r0, #32
 80150be:	4421      	add	r1, r4
 80150c0:	fa54 f585 	uxtab	r5, r4, r5
 80150c4:	b2d2      	uxtb	r2, r2
 80150c6:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80150ca:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 80150ce:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 80150d2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d194      	bne.n	8015004 <uxr_write_framed_msg+0x7c>
 80150da:	4619      	mov	r1, r3
 80150dc:	f8ad 3004 	strh.w	r3, [sp, #4]
 80150e0:	e019      	b.n	8015116 <uxr_write_framed_msg+0x18e>
 80150e2:	2500      	movs	r5, #0
 80150e4:	e000      	b.n	80150e8 <uxr_write_framed_msg+0x160>
 80150e6:	b160      	cbz	r0, 8015102 <uxr_write_framed_msg+0x17a>
 80150e8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80150ec:	1b52      	subs	r2, r2, r5
 80150ee:	4653      	mov	r3, sl
 80150f0:	4638      	mov	r0, r7
 80150f2:	4421      	add	r1, r4
 80150f4:	47b0      	blx	r6
 80150f6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80150fa:	4405      	add	r5, r0
 80150fc:	4295      	cmp	r5, r2
 80150fe:	d3f2      	bcc.n	80150e6 <uxr_write_framed_msg+0x15e>
 8015100:	d066      	beq.n	80151d0 <uxr_write_framed_msg+0x248>
 8015102:	2000      	movs	r0, #0
 8015104:	b003      	add	sp, #12
 8015106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801510a:	fa5f f188 	uxtb.w	r1, r8
 801510e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015112:	f8ad 8004 	strh.w	r8, [sp, #4]
 8015116:	f04f 0900 	mov.w	r9, #0
 801511a:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 801511e:	46c8      	mov	r8, r9
 8015120:	e013      	b.n	801514a <uxr_write_framed_msg+0x1c2>
 8015122:	2a29      	cmp	r2, #41	@ 0x29
 8015124:	d824      	bhi.n	8015170 <uxr_write_framed_msg+0x1e8>
 8015126:	18a3      	adds	r3, r4, r2
 8015128:	3201      	adds	r2, #1
 801512a:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 801512e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015132:	f109 0901 	add.w	r9, r9, #1
 8015136:	f1b9 0f02 	cmp.w	r9, #2
 801513a:	d02d      	beq.n	8015198 <uxr_write_framed_msg+0x210>
 801513c:	f109 0308 	add.w	r3, r9, #8
 8015140:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015144:	446b      	add	r3, sp
 8015146:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 801514a:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 801514e:	2b01      	cmp	r3, #1
 8015150:	d8e7      	bhi.n	8015122 <uxr_write_framed_msg+0x19a>
 8015152:	1c53      	adds	r3, r2, #1
 8015154:	b2db      	uxtb	r3, r3
 8015156:	2b29      	cmp	r3, #41	@ 0x29
 8015158:	d80a      	bhi.n	8015170 <uxr_write_framed_msg+0x1e8>
 801515a:	18a3      	adds	r3, r4, r2
 801515c:	f081 0120 	eor.w	r1, r1, #32
 8015160:	3202      	adds	r2, #2
 8015162:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 8015166:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 801516a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801516e:	e7e0      	b.n	8015132 <uxr_write_framed_msg+0x1aa>
 8015170:	2500      	movs	r5, #0
 8015172:	e001      	b.n	8015178 <uxr_write_framed_msg+0x1f0>
 8015174:	2800      	cmp	r0, #0
 8015176:	d0c4      	beq.n	8015102 <uxr_write_framed_msg+0x17a>
 8015178:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801517c:	1b52      	subs	r2, r2, r5
 801517e:	4653      	mov	r3, sl
 8015180:	4638      	mov	r0, r7
 8015182:	4421      	add	r1, r4
 8015184:	47b0      	blx	r6
 8015186:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801518a:	4405      	add	r5, r0
 801518c:	4295      	cmp	r5, r2
 801518e:	d3f1      	bcc.n	8015174 <uxr_write_framed_msg+0x1ec>
 8015190:	d1b7      	bne.n	8015102 <uxr_write_framed_msg+0x17a>
 8015192:	f884 8062 	strb.w	r8, [r4, #98]	@ 0x62
 8015196:	e7d1      	b.n	801513c <uxr_write_framed_msg+0x1b4>
 8015198:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801519c:	b19a      	cbz	r2, 80151c6 <uxr_write_framed_msg+0x23e>
 801519e:	2500      	movs	r5, #0
 80151a0:	e001      	b.n	80151a6 <uxr_write_framed_msg+0x21e>
 80151a2:	2800      	cmp	r0, #0
 80151a4:	d0ad      	beq.n	8015102 <uxr_write_framed_msg+0x17a>
 80151a6:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80151aa:	1b52      	subs	r2, r2, r5
 80151ac:	4653      	mov	r3, sl
 80151ae:	4638      	mov	r0, r7
 80151b0:	4421      	add	r1, r4
 80151b2:	47b0      	blx	r6
 80151b4:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80151b8:	4405      	add	r5, r0
 80151ba:	4295      	cmp	r5, r2
 80151bc:	d3f1      	bcc.n	80151a2 <uxr_write_framed_msg+0x21a>
 80151be:	d1a0      	bne.n	8015102 <uxr_write_framed_msg+0x17a>
 80151c0:	2300      	movs	r3, #0
 80151c2:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80151c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80151c8:	b298      	uxth	r0, r3
 80151ca:	b003      	add	sp, #12
 80151cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151d0:	f04f 0300 	mov.w	r3, #0
 80151d4:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80151d8:	e72a      	b.n	8015030 <uxr_write_framed_msg+0xa8>
 80151da:	217d      	movs	r1, #125	@ 0x7d
 80151dc:	f082 0220 	eor.w	r2, r2, #32
 80151e0:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 80151e4:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80151e8:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 80151ec:	2203      	movs	r2, #3
 80151ee:	2901      	cmp	r1, #1
 80151f0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80151f4:	d803      	bhi.n	80151fe <uxr_write_framed_msg+0x276>
 80151f6:	2105      	movs	r1, #5
 80151f8:	f04f 0c04 	mov.w	ip, #4
 80151fc:	e737      	b.n	801506e <uxr_write_framed_msg+0xe6>
 80151fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015200:	2104      	movs	r1, #4
 8015202:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8015206:	b2dd      	uxtb	r5, r3
 8015208:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801520c:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8015210:	2a01      	cmp	r2, #1
 8015212:	f63f aee1 	bhi.w	8014fd8 <uxr_write_framed_msg+0x50>
 8015216:	e73c      	b.n	8015092 <uxr_write_framed_msg+0x10a>
 8015218:	080185a8 	.word	0x080185a8

0801521c <uxr_framing_read_transport>:
 801521c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015220:	4604      	mov	r4, r0
 8015222:	b085      	sub	sp, #20
 8015224:	4692      	mov	sl, r2
 8015226:	4689      	mov	r9, r1
 8015228:	461d      	mov	r5, r3
 801522a:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801522c:	f7fb fdda 	bl	8010de4 <uxr_millis>
 8015230:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8015234:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 8015238:	4680      	mov	r8, r0
 801523a:	42ba      	cmp	r2, r7
 801523c:	d05f      	beq.n	80152fe <uxr_framing_read_transport+0xe2>
 801523e:	d817      	bhi.n	8015270 <uxr_framing_read_transport+0x54>
 8015240:	3f01      	subs	r7, #1
 8015242:	1aba      	subs	r2, r7, r2
 8015244:	2700      	movs	r7, #0
 8015246:	b2d2      	uxtb	r2, r2
 8015248:	42b2      	cmp	r2, r6
 801524a:	d81a      	bhi.n	8015282 <uxr_framing_read_transport+0x66>
 801524c:	19d3      	adds	r3, r2, r7
 801524e:	42b3      	cmp	r3, r6
 8015250:	d852      	bhi.n	80152f8 <uxr_framing_read_transport+0xdc>
 8015252:	b9d2      	cbnz	r2, 801528a <uxr_framing_read_transport+0x6e>
 8015254:	2600      	movs	r6, #0
 8015256:	f7fb fdc5 	bl	8010de4 <uxr_millis>
 801525a:	682b      	ldr	r3, [r5, #0]
 801525c:	eba0 0008 	sub.w	r0, r0, r8
 8015260:	1a1b      	subs	r3, r3, r0
 8015262:	4630      	mov	r0, r6
 8015264:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015268:	602b      	str	r3, [r5, #0]
 801526a:	b005      	add	sp, #20
 801526c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015270:	2f00      	cmp	r7, #0
 8015272:	d060      	beq.n	8015336 <uxr_framing_read_transport+0x11a>
 8015274:	f1c2 022a 	rsb	r2, r2, #42	@ 0x2a
 8015278:	3f01      	subs	r7, #1
 801527a:	b2d2      	uxtb	r2, r2
 801527c:	b2ff      	uxtb	r7, r7
 801527e:	42b2      	cmp	r2, r6
 8015280:	d9e4      	bls.n	801524c <uxr_framing_read_transport+0x30>
 8015282:	b2f2      	uxtb	r2, r6
 8015284:	2700      	movs	r7, #0
 8015286:	2a00      	cmp	r2, #0
 8015288:	d0e4      	beq.n	8015254 <uxr_framing_read_transport+0x38>
 801528a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801528c:	4650      	mov	r0, sl
 801528e:	9203      	str	r2, [sp, #12]
 8015290:	9300      	str	r3, [sp, #0]
 8015292:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015296:	682b      	ldr	r3, [r5, #0]
 8015298:	3102      	adds	r1, #2
 801529a:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 8015340 <uxr_framing_read_transport+0x124>
 801529e:	4421      	add	r1, r4
 80152a0:	47c8      	blx	r9
 80152a2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80152a6:	4606      	mov	r6, r0
 80152a8:	4403      	add	r3, r0
 80152aa:	0859      	lsrs	r1, r3, #1
 80152ac:	fbab 2101 	umull	r2, r1, fp, r1
 80152b0:	222a      	movs	r2, #42	@ 0x2a
 80152b2:	0889      	lsrs	r1, r1, #2
 80152b4:	fb02 3111 	mls	r1, r2, r1, r3
 80152b8:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 80152bc:	2800      	cmp	r0, #0
 80152be:	d0c9      	beq.n	8015254 <uxr_framing_read_transport+0x38>
 80152c0:	9a03      	ldr	r2, [sp, #12]
 80152c2:	4290      	cmp	r0, r2
 80152c4:	d1c7      	bne.n	8015256 <uxr_framing_read_transport+0x3a>
 80152c6:	2f00      	cmp	r7, #0
 80152c8:	d0c5      	beq.n	8015256 <uxr_framing_read_transport+0x3a>
 80152ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80152cc:	3102      	adds	r1, #2
 80152ce:	463a      	mov	r2, r7
 80152d0:	4650      	mov	r0, sl
 80152d2:	4421      	add	r1, r4
 80152d4:	9300      	str	r3, [sp, #0]
 80152d6:	2300      	movs	r3, #0
 80152d8:	47c8      	blx	r9
 80152da:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 80152de:	4406      	add	r6, r0
 80152e0:	1813      	adds	r3, r2, r0
 80152e2:	085a      	lsrs	r2, r3, #1
 80152e4:	fbab 1b02 	umull	r1, fp, fp, r2
 80152e8:	222a      	movs	r2, #42	@ 0x2a
 80152ea:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 80152ee:	fb02 331b 	mls	r3, r2, fp, r3
 80152f2:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80152f6:	e7ae      	b.n	8015256 <uxr_framing_read_transport+0x3a>
 80152f8:	1ab6      	subs	r6, r6, r2
 80152fa:	b2f7      	uxtb	r7, r6
 80152fc:	e7a9      	b.n	8015252 <uxr_framing_read_transport+0x36>
 80152fe:	2300      	movs	r3, #0
 8015300:	2e28      	cmp	r6, #40	@ 0x28
 8015302:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8015304:	d9bd      	bls.n	8015282 <uxr_framing_read_transport+0x66>
 8015306:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015308:	2229      	movs	r2, #41	@ 0x29
 801530a:	1ca1      	adds	r1, r4, #2
 801530c:	4650      	mov	r0, sl
 801530e:	9300      	str	r3, [sp, #0]
 8015310:	682b      	ldr	r3, [r5, #0]
 8015312:	47c8      	blx	r9
 8015314:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8015318:	4606      	mov	r6, r0
 801531a:	212a      	movs	r1, #42	@ 0x2a
 801531c:	4403      	add	r3, r0
 801531e:	4808      	ldr	r0, [pc, #32]	@ (8015340 <uxr_framing_read_transport+0x124>)
 8015320:	085a      	lsrs	r2, r3, #1
 8015322:	fba0 0202 	umull	r0, r2, r0, r2
 8015326:	0892      	lsrs	r2, r2, #2
 8015328:	fb01 3312 	mls	r3, r1, r2, r3
 801532c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8015330:	2e00      	cmp	r6, #0
 8015332:	d08f      	beq.n	8015254 <uxr_framing_read_transport+0x38>
 8015334:	e78f      	b.n	8015256 <uxr_framing_read_transport+0x3a>
 8015336:	f1c2 0229 	rsb	r2, r2, #41	@ 0x29
 801533a:	b2d2      	uxtb	r2, r2
 801533c:	e784      	b.n	8015248 <uxr_framing_read_transport+0x2c>
 801533e:	bf00      	nop
 8015340:	30c30c31 	.word	0x30c30c31

08015344 <uxr_read_framed_msg>:
 8015344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015348:	461e      	mov	r6, r3
 801534a:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 801534e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8015352:	b083      	sub	sp, #12
 8015354:	4604      	mov	r4, r0
 8015356:	4688      	mov	r8, r1
 8015358:	429d      	cmp	r5, r3
 801535a:	4691      	mov	r9, r2
 801535c:	f000 818c 	beq.w	8015678 <uxr_read_framed_msg+0x334>
 8015360:	7823      	ldrb	r3, [r4, #0]
 8015362:	4dc3      	ldr	r5, [pc, #780]	@ (8015670 <uxr_read_framed_msg+0x32c>)
 8015364:	4fc3      	ldr	r7, [pc, #780]	@ (8015674 <uxr_read_framed_msg+0x330>)
 8015366:	2b07      	cmp	r3, #7
 8015368:	d8fd      	bhi.n	8015366 <uxr_read_framed_msg+0x22>
 801536a:	e8df f013 	tbh	[pc, r3, lsl #1]
 801536e:	011c      	.short	0x011c
 8015370:	00d900fb 	.word	0x00d900fb
 8015374:	008f00ba 	.word	0x008f00ba
 8015378:	00320051 	.word	0x00320051
 801537c:	0008      	.short	0x0008
 801537e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015382:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015386:	4299      	cmp	r1, r3
 8015388:	f000 814d 	beq.w	8015626 <uxr_read_framed_msg+0x2e2>
 801538c:	18e2      	adds	r2, r4, r3
 801538e:	7892      	ldrb	r2, [r2, #2]
 8015390:	2a7d      	cmp	r2, #125	@ 0x7d
 8015392:	f000 81b8 	beq.w	8015706 <uxr_read_framed_msg+0x3c2>
 8015396:	3301      	adds	r3, #1
 8015398:	212a      	movs	r1, #42	@ 0x2a
 801539a:	2a7e      	cmp	r2, #126	@ 0x7e
 801539c:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80153a0:	fba5 c000 	umull	ip, r0, r5, r0
 80153a4:	ea4f 0090 	mov.w	r0, r0, lsr #2
 80153a8:	fb01 3310 	mls	r3, r1, r0, r3
 80153ac:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80153b0:	f000 8257 	beq.w	8015862 <uxr_read_framed_msg+0x51e>
 80153b4:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80153b6:	2000      	movs	r0, #0
 80153b8:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 80153ba:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80153be:	7020      	strb	r0, [r4, #0]
 80153c0:	b29b      	uxth	r3, r3
 80153c2:	4299      	cmp	r1, r3
 80153c4:	86a3      	strh	r3, [r4, #52]	@ 0x34
 80153c6:	f000 8178 	beq.w	80156ba <uxr_read_framed_msg+0x376>
 80153ca:	2000      	movs	r0, #0
 80153cc:	b003      	add	sp, #12
 80153ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153d2:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80153d6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80153da:	4298      	cmp	r0, r3
 80153dc:	f000 8132 	beq.w	8015644 <uxr_read_framed_msg+0x300>
 80153e0:	18e2      	adds	r2, r4, r3
 80153e2:	7891      	ldrb	r1, [r2, #2]
 80153e4:	297d      	cmp	r1, #125	@ 0x7d
 80153e6:	f000 8170 	beq.w	80156ca <uxr_read_framed_msg+0x386>
 80153ea:	3301      	adds	r3, #1
 80153ec:	202a      	movs	r0, #42	@ 0x2a
 80153ee:	297e      	cmp	r1, #126	@ 0x7e
 80153f0:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80153f4:	fba5 c202 	umull	ip, r2, r5, r2
 80153f8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80153fc:	fb00 3312 	mls	r3, r0, r2, r3
 8015400:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015404:	f000 821d 	beq.w	8015842 <uxr_read_framed_msg+0x4fe>
 8015408:	2307      	movs	r3, #7
 801540a:	86a1      	strh	r1, [r4, #52]	@ 0x34
 801540c:	7023      	strb	r3, [r4, #0]
 801540e:	e7aa      	b.n	8015366 <uxr_read_framed_msg+0x22>
 8015410:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8015412:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8015416:	459e      	cmp	lr, r3
 8015418:	d827      	bhi.n	801546a <uxr_read_framed_msg+0x126>
 801541a:	e032      	b.n	8015482 <uxr_read_framed_msg+0x13e>
 801541c:	fba5 b101 	umull	fp, r1, r5, r1
 8015420:	f89c c002 	ldrb.w	ip, [ip, #2]
 8015424:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8015428:	0889      	lsrs	r1, r1, #2
 801542a:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801542e:	fb0b 0111 	mls	r1, fp, r1, r0
 8015432:	f000 80d4 	beq.w	80155de <uxr_read_framed_msg+0x29a>
 8015436:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801543a:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 801543e:	f000 80cb 	beq.w	80155d8 <uxr_read_framed_msg+0x294>
 8015442:	f806 c003 	strb.w	ip, [r6, r3]
 8015446:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8015448:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801544a:	ea80 010c 	eor.w	r1, r0, ip
 801544e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8015452:	3301      	adds	r3, #1
 8015454:	b2c9      	uxtb	r1, r1
 8015456:	b29b      	uxth	r3, r3
 8015458:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 801545c:	4573      	cmp	r3, lr
 801545e:	8663      	strh	r3, [r4, #50]	@ 0x32
 8015460:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8015464:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8015466:	f080 811d 	bcs.w	80156a4 <uxr_read_framed_msg+0x360>
 801546a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801546e:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8015472:	1c50      	adds	r0, r2, #1
 8015474:	eb04 0c02 	add.w	ip, r4, r2
 8015478:	4592      	cmp	sl, r2
 801547a:	ea4f 0150 	mov.w	r1, r0, lsr #1
 801547e:	d1cd      	bne.n	801541c <uxr_read_framed_msg+0xd8>
 8015480:	459e      	cmp	lr, r3
 8015482:	f040 8114 	bne.w	80156ae <uxr_read_framed_msg+0x36a>
 8015486:	2306      	movs	r3, #6
 8015488:	7023      	strb	r3, [r4, #0]
 801548a:	e76c      	b.n	8015366 <uxr_read_framed_msg+0x22>
 801548c:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8015490:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015494:	4298      	cmp	r0, r3
 8015496:	f000 80c6 	beq.w	8015626 <uxr_read_framed_msg+0x2e2>
 801549a:	18e2      	adds	r2, r4, r3
 801549c:	7891      	ldrb	r1, [r2, #2]
 801549e:	297d      	cmp	r1, #125	@ 0x7d
 80154a0:	f000 8193 	beq.w	80157ca <uxr_read_framed_msg+0x486>
 80154a4:	3301      	adds	r3, #1
 80154a6:	202a      	movs	r0, #42	@ 0x2a
 80154a8:	297e      	cmp	r1, #126	@ 0x7e
 80154aa:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80154ae:	fba5 c202 	umull	ip, r2, r5, r2
 80154b2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80154b6:	fb00 3312 	mls	r3, r0, r2, r3
 80154ba:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80154be:	f000 81d0 	beq.w	8015862 <uxr_read_framed_msg+0x51e>
 80154c2:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80154c4:	2000      	movs	r0, #0
 80154c6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80154ca:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80154cc:	8660      	strh	r0, [r4, #50]	@ 0x32
 80154ce:	b29b      	uxth	r3, r3
 80154d0:	86e0      	strh	r0, [r4, #54]	@ 0x36
 80154d2:	428b      	cmp	r3, r1
 80154d4:	8623      	strh	r3, [r4, #48]	@ 0x30
 80154d6:	f240 80e2 	bls.w	801569e <uxr_read_framed_msg+0x35a>
 80154da:	7020      	strb	r0, [r4, #0]
 80154dc:	b003      	add	sp, #12
 80154de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154e2:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80154e6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80154ea:	4298      	cmp	r0, r3
 80154ec:	f000 80aa 	beq.w	8015644 <uxr_read_framed_msg+0x300>
 80154f0:	18e2      	adds	r2, r4, r3
 80154f2:	7891      	ldrb	r1, [r2, #2]
 80154f4:	297d      	cmp	r1, #125	@ 0x7d
 80154f6:	f000 8186 	beq.w	8015806 <uxr_read_framed_msg+0x4c2>
 80154fa:	3301      	adds	r3, #1
 80154fc:	202a      	movs	r0, #42	@ 0x2a
 80154fe:	297e      	cmp	r1, #126	@ 0x7e
 8015500:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8015504:	fba5 c202 	umull	ip, r2, r5, r2
 8015508:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801550c:	fb00 3312 	mls	r3, r0, r2, r3
 8015510:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015514:	f000 8195 	beq.w	8015842 <uxr_read_framed_msg+0x4fe>
 8015518:	2304      	movs	r3, #4
 801551a:	8621      	strh	r1, [r4, #48]	@ 0x30
 801551c:	7023      	strb	r3, [r4, #0]
 801551e:	e722      	b.n	8015366 <uxr_read_framed_msg+0x22>
 8015520:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8015524:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8015528:	4290      	cmp	r0, r2
 801552a:	f000 80b4 	beq.w	8015696 <uxr_read_framed_msg+0x352>
 801552e:	18a3      	adds	r3, r4, r2
 8015530:	7899      	ldrb	r1, [r3, #2]
 8015532:	297d      	cmp	r1, #125	@ 0x7d
 8015534:	f000 8107 	beq.w	8015746 <uxr_read_framed_msg+0x402>
 8015538:	3201      	adds	r2, #1
 801553a:	232a      	movs	r3, #42	@ 0x2a
 801553c:	297e      	cmp	r1, #126	@ 0x7e
 801553e:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8015542:	fba5 c000 	umull	ip, r0, r5, r0
 8015546:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801554a:	fb03 2210 	mls	r2, r3, r0, r2
 801554e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8015552:	f000 818a 	beq.w	801586a <uxr_read_framed_msg+0x526>
 8015556:	7863      	ldrb	r3, [r4, #1]
 8015558:	428b      	cmp	r3, r1
 801555a:	bf0c      	ite	eq
 801555c:	2303      	moveq	r3, #3
 801555e:	2300      	movne	r3, #0
 8015560:	7023      	strb	r3, [r4, #0]
 8015562:	e700      	b.n	8015366 <uxr_read_framed_msg+0x22>
 8015564:	2300      	movs	r3, #0
 8015566:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801556a:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 801556e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015572:	4299      	cmp	r1, r3
 8015574:	d06a      	beq.n	801564c <uxr_read_framed_msg+0x308>
 8015576:	18e2      	adds	r2, r4, r3
 8015578:	7890      	ldrb	r0, [r2, #2]
 801557a:	287d      	cmp	r0, #125	@ 0x7d
 801557c:	f000 8100 	beq.w	8015780 <uxr_read_framed_msg+0x43c>
 8015580:	3301      	adds	r3, #1
 8015582:	212a      	movs	r1, #42	@ 0x2a
 8015584:	287e      	cmp	r0, #126	@ 0x7e
 8015586:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 801558a:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801558e:	fba5 c202 	umull	ip, r2, r5, r2
 8015592:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015596:	fb01 3312 	mls	r3, r1, r2, r3
 801559a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801559e:	d055      	beq.n	801564c <uxr_read_framed_msg+0x308>
 80155a0:	2302      	movs	r3, #2
 80155a2:	7023      	strb	r3, [r4, #0]
 80155a4:	e6df      	b.n	8015366 <uxr_read_framed_msg+0x22>
 80155a6:	f894 c02c 	ldrb.w	ip, [r4, #44]	@ 0x2c
 80155aa:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 80155ae:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80155b2:	1c5a      	adds	r2, r3, #1
 80155b4:	459c      	cmp	ip, r3
 80155b6:	eb04 0103 	add.w	r1, r4, r3
 80155ba:	ea4f 0352 	mov.w	r3, r2, lsr #1
 80155be:	f43f af04 	beq.w	80153ca <uxr_read_framed_msg+0x86>
 80155c2:	fba5 0303 	umull	r0, r3, r5, r3
 80155c6:	7889      	ldrb	r1, [r1, #2]
 80155c8:	089b      	lsrs	r3, r3, #2
 80155ca:	297e      	cmp	r1, #126	@ 0x7e
 80155cc:	fb0e 2313 	mls	r3, lr, r3, r2
 80155d0:	b2db      	uxtb	r3, r3
 80155d2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80155d6:	d1ec      	bne.n	80155b2 <uxr_read_framed_msg+0x26e>
 80155d8:	2301      	movs	r3, #1
 80155da:	7023      	strb	r3, [r4, #0]
 80155dc:	e6c3      	b.n	8015366 <uxr_read_framed_msg+0x22>
 80155de:	1c50      	adds	r0, r2, #1
 80155e0:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 80155e4:	3202      	adds	r2, #2
 80155e6:	0841      	lsrs	r1, r0, #1
 80155e8:	fba5 c101 	umull	ip, r1, r5, r1
 80155ec:	0889      	lsrs	r1, r1, #2
 80155ee:	fb0b 0111 	mls	r1, fp, r1, r0
 80155f2:	1860      	adds	r0, r4, r1
 80155f4:	b2c9      	uxtb	r1, r1
 80155f6:	458a      	cmp	sl, r1
 80155f8:	f43f af42 	beq.w	8015480 <uxr_read_framed_msg+0x13c>
 80155fc:	0851      	lsrs	r1, r2, #1
 80155fe:	7880      	ldrb	r0, [r0, #2]
 8015600:	fba5 a101 	umull	sl, r1, r5, r1
 8015604:	287e      	cmp	r0, #126	@ 0x7e
 8015606:	f080 0c20 	eor.w	ip, r0, #32
 801560a:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801560e:	fb0b 2211 	mls	r2, fp, r1, r2
 8015612:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8015616:	f47f af14 	bne.w	8015442 <uxr_read_framed_msg+0xfe>
 801561a:	459e      	cmp	lr, r3
 801561c:	f43f af33 	beq.w	8015486 <uxr_read_framed_msg+0x142>
 8015620:	2301      	movs	r3, #1
 8015622:	7023      	strb	r3, [r4, #0]
 8015624:	e69f      	b.n	8015366 <uxr_read_framed_msg+0x22>
 8015626:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015628:	9300      	str	r3, [sp, #0]
 801562a:	2301      	movs	r3, #1
 801562c:	9301      	str	r3, [sp, #4]
 801562e:	464a      	mov	r2, r9
 8015630:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015632:	4641      	mov	r1, r8
 8015634:	4620      	mov	r0, r4
 8015636:	f7ff fdf1 	bl	801521c <uxr_framing_read_transport>
 801563a:	2800      	cmp	r0, #0
 801563c:	f43f aec5 	beq.w	80153ca <uxr_read_framed_msg+0x86>
 8015640:	7823      	ldrb	r3, [r4, #0]
 8015642:	e690      	b.n	8015366 <uxr_read_framed_msg+0x22>
 8015644:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015646:	9300      	str	r3, [sp, #0]
 8015648:	2302      	movs	r3, #2
 801564a:	e7ef      	b.n	801562c <uxr_read_framed_msg+0x2e8>
 801564c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801564e:	464a      	mov	r2, r9
 8015650:	4641      	mov	r1, r8
 8015652:	4620      	mov	r0, r4
 8015654:	9300      	str	r3, [sp, #0]
 8015656:	2304      	movs	r3, #4
 8015658:	9301      	str	r3, [sp, #4]
 801565a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801565c:	f7ff fdde 	bl	801521c <uxr_framing_read_transport>
 8015660:	2800      	cmp	r0, #0
 8015662:	d1ed      	bne.n	8015640 <uxr_read_framed_msg+0x2fc>
 8015664:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8015668:	2b7e      	cmp	r3, #126	@ 0x7e
 801566a:	d0e9      	beq.n	8015640 <uxr_read_framed_msg+0x2fc>
 801566c:	e6ad      	b.n	80153ca <uxr_read_framed_msg+0x86>
 801566e:	bf00      	nop
 8015670:	30c30c31 	.word	0x30c30c31
 8015674:	080185a8 	.word	0x080185a8
 8015678:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801567a:	9300      	str	r3, [sp, #0]
 801567c:	2305      	movs	r3, #5
 801567e:	9301      	str	r3, [sp, #4]
 8015680:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015682:	f7ff fdcb 	bl	801521c <uxr_framing_read_transport>
 8015686:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801568a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801568e:	429a      	cmp	r2, r3
 8015690:	f43f ae9b 	beq.w	80153ca <uxr_read_framed_msg+0x86>
 8015694:	e664      	b.n	8015360 <uxr_read_framed_msg+0x1c>
 8015696:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015698:	9300      	str	r3, [sp, #0]
 801569a:	2303      	movs	r3, #3
 801569c:	e7c6      	b.n	801562c <uxr_read_framed_msg+0x2e8>
 801569e:	2305      	movs	r3, #5
 80156a0:	7023      	strb	r3, [r4, #0]
 80156a2:	e660      	b.n	8015366 <uxr_read_framed_msg+0x22>
 80156a4:	f43f aeef 	beq.w	8015486 <uxr_read_framed_msg+0x142>
 80156a8:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80156ac:	d094      	beq.n	80155d8 <uxr_read_framed_msg+0x294>
 80156ae:	ebae 0303 	sub.w	r3, lr, r3
 80156b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80156b4:	3302      	adds	r3, #2
 80156b6:	9200      	str	r2, [sp, #0]
 80156b8:	e7b8      	b.n	801562c <uxr_read_framed_msg+0x2e8>
 80156ba:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80156be:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80156c0:	7013      	strb	r3, [r2, #0]
 80156c2:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 80156c4:	b003      	add	sp, #12
 80156c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156ca:	1c59      	adds	r1, r3, #1
 80156cc:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80156d0:	084a      	lsrs	r2, r1, #1
 80156d2:	fba5 e202 	umull	lr, r2, r5, r2
 80156d6:	0892      	lsrs	r2, r2, #2
 80156d8:	fb0c 1212 	mls	r2, ip, r2, r1
 80156dc:	b2d1      	uxtb	r1, r2
 80156de:	4288      	cmp	r0, r1
 80156e0:	d0b0      	beq.n	8015644 <uxr_read_framed_msg+0x300>
 80156e2:	3302      	adds	r3, #2
 80156e4:	4422      	add	r2, r4
 80156e6:	7891      	ldrb	r1, [r2, #2]
 80156e8:	085a      	lsrs	r2, r3, #1
 80156ea:	fba5 0202 	umull	r0, r2, r5, r2
 80156ee:	297e      	cmp	r1, #126	@ 0x7e
 80156f0:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80156f4:	fb0c 3312 	mls	r3, ip, r2, r3
 80156f8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80156fc:	f000 80a1 	beq.w	8015842 <uxr_read_framed_msg+0x4fe>
 8015700:	f081 0120 	eor.w	r1, r1, #32
 8015704:	e680      	b.n	8015408 <uxr_read_framed_msg+0xc4>
 8015706:	f103 0c01 	add.w	ip, r3, #1
 801570a:	202a      	movs	r0, #42	@ 0x2a
 801570c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015710:	fba5 e202 	umull	lr, r2, r5, r2
 8015714:	0892      	lsrs	r2, r2, #2
 8015716:	fb00 c212 	mls	r2, r0, r2, ip
 801571a:	fa5f fc82 	uxtb.w	ip, r2
 801571e:	4561      	cmp	r1, ip
 8015720:	d081      	beq.n	8015626 <uxr_read_framed_msg+0x2e2>
 8015722:	3302      	adds	r3, #2
 8015724:	4422      	add	r2, r4
 8015726:	0859      	lsrs	r1, r3, #1
 8015728:	7892      	ldrb	r2, [r2, #2]
 801572a:	fba5 c101 	umull	ip, r1, r5, r1
 801572e:	2a7e      	cmp	r2, #126	@ 0x7e
 8015730:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8015734:	fb00 3311 	mls	r3, r0, r1, r3
 8015738:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801573c:	f000 8091 	beq.w	8015862 <uxr_read_framed_msg+0x51e>
 8015740:	f082 0220 	eor.w	r2, r2, #32
 8015744:	e636      	b.n	80153b4 <uxr_read_framed_msg+0x70>
 8015746:	1c51      	adds	r1, r2, #1
 8015748:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801574c:	084b      	lsrs	r3, r1, #1
 801574e:	fba5 e303 	umull	lr, r3, r5, r3
 8015752:	089b      	lsrs	r3, r3, #2
 8015754:	fb0c 1313 	mls	r3, ip, r3, r1
 8015758:	b2d9      	uxtb	r1, r3
 801575a:	4288      	cmp	r0, r1
 801575c:	d09b      	beq.n	8015696 <uxr_read_framed_msg+0x352>
 801575e:	3202      	adds	r2, #2
 8015760:	4423      	add	r3, r4
 8015762:	0850      	lsrs	r0, r2, #1
 8015764:	789b      	ldrb	r3, [r3, #2]
 8015766:	fba5 1000 	umull	r1, r0, r5, r0
 801576a:	2b7e      	cmp	r3, #126	@ 0x7e
 801576c:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8015770:	fb0c 2210 	mls	r2, ip, r0, r2
 8015774:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8015778:	d077      	beq.n	801586a <uxr_read_framed_msg+0x526>
 801577a:	f083 0120 	eor.w	r1, r3, #32
 801577e:	e6ea      	b.n	8015556 <uxr_read_framed_msg+0x212>
 8015780:	f103 0c01 	add.w	ip, r3, #1
 8015784:	202a      	movs	r0, #42	@ 0x2a
 8015786:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801578a:	fba5 e202 	umull	lr, r2, r5, r2
 801578e:	0892      	lsrs	r2, r2, #2
 8015790:	fb00 c212 	mls	r2, r0, r2, ip
 8015794:	fa5f fc82 	uxtb.w	ip, r2
 8015798:	4561      	cmp	r1, ip
 801579a:	f43f af57 	beq.w	801564c <uxr_read_framed_msg+0x308>
 801579e:	3302      	adds	r3, #2
 80157a0:	4422      	add	r2, r4
 80157a2:	7891      	ldrb	r1, [r2, #2]
 80157a4:	085a      	lsrs	r2, r3, #1
 80157a6:	fba5 c202 	umull	ip, r2, r5, r2
 80157aa:	297e      	cmp	r1, #126	@ 0x7e
 80157ac:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80157b0:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80157b4:	fb00 3312 	mls	r3, r0, r2, r3
 80157b8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80157bc:	f43f af46 	beq.w	801564c <uxr_read_framed_msg+0x308>
 80157c0:	f081 0120 	eor.w	r1, r1, #32
 80157c4:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80157c8:	e6ea      	b.n	80155a0 <uxr_read_framed_msg+0x25c>
 80157ca:	1c59      	adds	r1, r3, #1
 80157cc:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80157d0:	084a      	lsrs	r2, r1, #1
 80157d2:	fba5 e202 	umull	lr, r2, r5, r2
 80157d6:	0892      	lsrs	r2, r2, #2
 80157d8:	fb0c 1212 	mls	r2, ip, r2, r1
 80157dc:	b2d1      	uxtb	r1, r2
 80157de:	4288      	cmp	r0, r1
 80157e0:	f43f af21 	beq.w	8015626 <uxr_read_framed_msg+0x2e2>
 80157e4:	3302      	adds	r3, #2
 80157e6:	4422      	add	r2, r4
 80157e8:	7891      	ldrb	r1, [r2, #2]
 80157ea:	085a      	lsrs	r2, r3, #1
 80157ec:	fba5 0202 	umull	r0, r2, r5, r2
 80157f0:	297e      	cmp	r1, #126	@ 0x7e
 80157f2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80157f6:	fb0c 3312 	mls	r3, ip, r2, r3
 80157fa:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80157fe:	d030      	beq.n	8015862 <uxr_read_framed_msg+0x51e>
 8015800:	f081 0120 	eor.w	r1, r1, #32
 8015804:	e65d      	b.n	80154c2 <uxr_read_framed_msg+0x17e>
 8015806:	1c59      	adds	r1, r3, #1
 8015808:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801580c:	084a      	lsrs	r2, r1, #1
 801580e:	fba5 e202 	umull	lr, r2, r5, r2
 8015812:	0892      	lsrs	r2, r2, #2
 8015814:	fb0c 1212 	mls	r2, ip, r2, r1
 8015818:	b2d1      	uxtb	r1, r2
 801581a:	4288      	cmp	r0, r1
 801581c:	f43f af12 	beq.w	8015644 <uxr_read_framed_msg+0x300>
 8015820:	3302      	adds	r3, #2
 8015822:	4422      	add	r2, r4
 8015824:	7891      	ldrb	r1, [r2, #2]
 8015826:	085a      	lsrs	r2, r3, #1
 8015828:	fba5 0202 	umull	r0, r2, r5, r2
 801582c:	297e      	cmp	r1, #126	@ 0x7e
 801582e:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015832:	fb0c 3312 	mls	r3, ip, r2, r3
 8015836:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801583a:	d002      	beq.n	8015842 <uxr_read_framed_msg+0x4fe>
 801583c:	f081 0120 	eor.w	r1, r1, #32
 8015840:	e66a      	b.n	8015518 <uxr_read_framed_msg+0x1d4>
 8015842:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015844:	9300      	str	r3, [sp, #0]
 8015846:	2302      	movs	r3, #2
 8015848:	9301      	str	r3, [sp, #4]
 801584a:	464a      	mov	r2, r9
 801584c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801584e:	4641      	mov	r1, r8
 8015850:	4620      	mov	r0, r4
 8015852:	f7ff fce3 	bl	801521c <uxr_framing_read_transport>
 8015856:	2800      	cmp	r0, #0
 8015858:	f47f aef2 	bne.w	8015640 <uxr_read_framed_msg+0x2fc>
 801585c:	2301      	movs	r3, #1
 801585e:	7023      	strb	r3, [r4, #0]
 8015860:	e581      	b.n	8015366 <uxr_read_framed_msg+0x22>
 8015862:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015864:	9300      	str	r3, [sp, #0]
 8015866:	2301      	movs	r3, #1
 8015868:	e7ee      	b.n	8015848 <uxr_read_framed_msg+0x504>
 801586a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801586c:	9300      	str	r3, [sp, #0]
 801586e:	2303      	movs	r3, #3
 8015870:	e7ea      	b.n	8015848 <uxr_read_framed_msg+0x504>
 8015872:	bf00      	nop

08015874 <rcl_get_default_domain_id>:
 8015874:	b530      	push	{r4, r5, lr}
 8015876:	2300      	movs	r3, #0
 8015878:	b083      	sub	sp, #12
 801587a:	9300      	str	r3, [sp, #0]
 801587c:	b1d0      	cbz	r0, 80158b4 <rcl_get_default_domain_id+0x40>
 801587e:	4604      	mov	r4, r0
 8015880:	4669      	mov	r1, sp
 8015882:	4815      	ldr	r0, [pc, #84]	@ (80158d8 <rcl_get_default_domain_id+0x64>)
 8015884:	f7fd f9ce 	bl	8012c24 <rcutils_get_env>
 8015888:	4602      	mov	r2, r0
 801588a:	b110      	cbz	r0, 8015892 <rcl_get_default_domain_id+0x1e>
 801588c:	2001      	movs	r0, #1
 801588e:	b003      	add	sp, #12
 8015890:	bd30      	pop	{r4, r5, pc}
 8015892:	9b00      	ldr	r3, [sp, #0]
 8015894:	b18b      	cbz	r3, 80158ba <rcl_get_default_domain_id+0x46>
 8015896:	7818      	ldrb	r0, [r3, #0]
 8015898:	2800      	cmp	r0, #0
 801589a:	d0f8      	beq.n	801588e <rcl_get_default_domain_id+0x1a>
 801589c:	a901      	add	r1, sp, #4
 801589e:	4618      	mov	r0, r3
 80158a0:	9201      	str	r2, [sp, #4]
 80158a2:	f000 fee5 	bl	8016670 <strtoul>
 80158a6:	4605      	mov	r5, r0
 80158a8:	b150      	cbz	r0, 80158c0 <rcl_get_default_domain_id+0x4c>
 80158aa:	1c43      	adds	r3, r0, #1
 80158ac:	d00d      	beq.n	80158ca <rcl_get_default_domain_id+0x56>
 80158ae:	2000      	movs	r0, #0
 80158b0:	6025      	str	r5, [r4, #0]
 80158b2:	e7ec      	b.n	801588e <rcl_get_default_domain_id+0x1a>
 80158b4:	200b      	movs	r0, #11
 80158b6:	b003      	add	sp, #12
 80158b8:	bd30      	pop	{r4, r5, pc}
 80158ba:	4618      	mov	r0, r3
 80158bc:	b003      	add	sp, #12
 80158be:	bd30      	pop	{r4, r5, pc}
 80158c0:	9b01      	ldr	r3, [sp, #4]
 80158c2:	781b      	ldrb	r3, [r3, #0]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d0f2      	beq.n	80158ae <rcl_get_default_domain_id+0x3a>
 80158c8:	e7e0      	b.n	801588c <rcl_get_default_domain_id+0x18>
 80158ca:	f001 fa01 	bl	8016cd0 <__errno>
 80158ce:	6803      	ldr	r3, [r0, #0]
 80158d0:	2b22      	cmp	r3, #34	@ 0x22
 80158d2:	d1ec      	bne.n	80158ae <rcl_get_default_domain_id+0x3a>
 80158d4:	e7da      	b.n	801588c <rcl_get_default_domain_id+0x18>
 80158d6:	bf00      	nop
 80158d8:	08018344 	.word	0x08018344

080158dc <rcl_expand_topic_name>:
 80158dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158e0:	b08d      	sub	sp, #52	@ 0x34
 80158e2:	4698      	mov	r8, r3
 80158e4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80158e6:	9207      	str	r2, [sp, #28]
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	bf18      	it	ne
 80158ec:	f1b8 0f00 	cmpne.w	r8, #0
 80158f0:	bf0c      	ite	eq
 80158f2:	2301      	moveq	r3, #1
 80158f4:	2300      	movne	r3, #0
 80158f6:	2a00      	cmp	r2, #0
 80158f8:	bf08      	it	eq
 80158fa:	f043 0301 	orreq.w	r3, r3, #1
 80158fe:	2900      	cmp	r1, #0
 8015900:	bf08      	it	eq
 8015902:	f043 0301 	orreq.w	r3, r3, #1
 8015906:	2b00      	cmp	r3, #0
 8015908:	d13d      	bne.n	8015986 <rcl_expand_topic_name+0xaa>
 801590a:	fab0 f280 	clz	r2, r0
 801590e:	4604      	mov	r4, r0
 8015910:	0952      	lsrs	r2, r2, #5
 8015912:	2800      	cmp	r0, #0
 8015914:	d037      	beq.n	8015986 <rcl_expand_topic_name+0xaa>
 8015916:	460f      	mov	r7, r1
 8015918:	a90b      	add	r1, sp, #44	@ 0x2c
 801591a:	f000 f9ed 	bl	8015cf8 <rcl_validate_topic_name>
 801591e:	4605      	mov	r5, r0
 8015920:	bb68      	cbnz	r0, 801597e <rcl_expand_topic_name+0xa2>
 8015922:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015924:	2b00      	cmp	r3, #0
 8015926:	d137      	bne.n	8015998 <rcl_expand_topic_name+0xbc>
 8015928:	4602      	mov	r2, r0
 801592a:	a90b      	add	r1, sp, #44	@ 0x2c
 801592c:	4638      	mov	r0, r7
 801592e:	f7fd fd99 	bl	8013464 <rmw_validate_node_name>
 8015932:	bb68      	cbnz	r0, 8015990 <rcl_expand_topic_name+0xb4>
 8015934:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015936:	2b00      	cmp	r3, #0
 8015938:	d133      	bne.n	80159a2 <rcl_expand_topic_name+0xc6>
 801593a:	462a      	mov	r2, r5
 801593c:	a90b      	add	r1, sp, #44	@ 0x2c
 801593e:	9807      	ldr	r0, [sp, #28]
 8015940:	f7fd fd72 	bl	8013428 <rmw_validate_namespace>
 8015944:	bb20      	cbnz	r0, 8015990 <rcl_expand_topic_name+0xb4>
 8015946:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8015948:	2d00      	cmp	r5, #0
 801594a:	f040 80a2 	bne.w	8015a92 <rcl_expand_topic_name+0x1b6>
 801594e:	217b      	movs	r1, #123	@ 0x7b
 8015950:	4620      	mov	r0, r4
 8015952:	f001 f931 	bl	8016bb8 <strchr>
 8015956:	7823      	ldrb	r3, [r4, #0]
 8015958:	4681      	mov	r9, r0
 801595a:	bb20      	cbnz	r0, 80159a6 <rcl_expand_topic_name+0xca>
 801595c:	2b2f      	cmp	r3, #47	@ 0x2f
 801595e:	d122      	bne.n	80159a6 <rcl_expand_topic_name+0xca>
 8015960:	ab19      	add	r3, sp, #100	@ 0x64
 8015962:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015966:	ab16      	add	r3, sp, #88	@ 0x58
 8015968:	e88d 0003 	stmia.w	sp, {r0, r1}
 801596c:	4620      	mov	r0, r4
 801596e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015970:	f7fd faaa 	bl	8012ec8 <rcutils_strdup>
 8015974:	2800      	cmp	r0, #0
 8015976:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8015978:	bf08      	it	eq
 801597a:	250a      	moveq	r5, #10
 801597c:	6018      	str	r0, [r3, #0]
 801597e:	4628      	mov	r0, r5
 8015980:	b00d      	add	sp, #52	@ 0x34
 8015982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015986:	250b      	movs	r5, #11
 8015988:	4628      	mov	r0, r5
 801598a:	b00d      	add	sp, #52	@ 0x34
 801598c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015990:	f7fc fb5a 	bl	8012048 <rcl_convert_rmw_ret_to_rcl_ret>
 8015994:	4605      	mov	r5, r0
 8015996:	e7f2      	b.n	801597e <rcl_expand_topic_name+0xa2>
 8015998:	2567      	movs	r5, #103	@ 0x67
 801599a:	4628      	mov	r0, r5
 801599c:	b00d      	add	sp, #52	@ 0x34
 801599e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159a2:	25c9      	movs	r5, #201	@ 0xc9
 80159a4:	e7eb      	b.n	801597e <rcl_expand_topic_name+0xa2>
 80159a6:	2b7e      	cmp	r3, #126	@ 0x7e
 80159a8:	d075      	beq.n	8015a96 <rcl_expand_topic_name+0x1ba>
 80159aa:	f1b9 0f00 	cmp.w	r9, #0
 80159ae:	f000 80c2 	beq.w	8015b36 <rcl_expand_topic_name+0x25a>
 80159b2:	2300      	movs	r3, #0
 80159b4:	46a2      	mov	sl, r4
 80159b6:	461e      	mov	r6, r3
 80159b8:	9508      	str	r5, [sp, #32]
 80159ba:	4655      	mov	r5, sl
 80159bc:	9409      	str	r4, [sp, #36]	@ 0x24
 80159be:	46b2      	mov	sl, r6
 80159c0:	464c      	mov	r4, r9
 80159c2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80159c6:	2c00      	cmp	r4, #0
 80159c8:	f000 80ae 	beq.w	8015b28 <rcl_expand_topic_name+0x24c>
 80159cc:	217d      	movs	r1, #125	@ 0x7d
 80159ce:	4628      	mov	r0, r5
 80159d0:	f001 f8f2 	bl	8016bb8 <strchr>
 80159d4:	eba0 0904 	sub.w	r9, r0, r4
 80159d8:	4621      	mov	r1, r4
 80159da:	4869      	ldr	r0, [pc, #420]	@ (8015b80 <rcl_expand_topic_name+0x2a4>)
 80159dc:	f109 0601 	add.w	r6, r9, #1
 80159e0:	4632      	mov	r2, r6
 80159e2:	f001 f8f6 	bl	8016bd2 <strncmp>
 80159e6:	2800      	cmp	r0, #0
 80159e8:	d051      	beq.n	8015a8e <rcl_expand_topic_name+0x1b2>
 80159ea:	4632      	mov	r2, r6
 80159ec:	4621      	mov	r1, r4
 80159ee:	4865      	ldr	r0, [pc, #404]	@ (8015b84 <rcl_expand_topic_name+0x2a8>)
 80159f0:	f001 f8ef 	bl	8016bd2 <strncmp>
 80159f4:	b128      	cbz	r0, 8015a02 <rcl_expand_topic_name+0x126>
 80159f6:	4632      	mov	r2, r6
 80159f8:	4621      	mov	r1, r4
 80159fa:	4863      	ldr	r0, [pc, #396]	@ (8015b88 <rcl_expand_topic_name+0x2ac>)
 80159fc:	f001 f8e9 	bl	8016bd2 <strncmp>
 8015a00:	bb38      	cbnz	r0, 8015a52 <rcl_expand_topic_name+0x176>
 8015a02:	46d9      	mov	r9, fp
 8015a04:	ab18      	add	r3, sp, #96	@ 0x60
 8015a06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015a0a:	ab16      	add	r3, sp, #88	@ 0x58
 8015a0c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015a10:	4620      	mov	r0, r4
 8015a12:	4631      	mov	r1, r6
 8015a14:	cb0c      	ldmia	r3, {r2, r3}
 8015a16:	f7fd fa79 	bl	8012f0c <rcutils_strndup>
 8015a1a:	4604      	mov	r4, r0
 8015a1c:	2800      	cmp	r0, #0
 8015a1e:	f000 80a3 	beq.w	8015b68 <rcl_expand_topic_name+0x28c>
 8015a22:	464a      	mov	r2, r9
 8015a24:	4628      	mov	r0, r5
 8015a26:	ab16      	add	r3, sp, #88	@ 0x58
 8015a28:	4621      	mov	r1, r4
 8015a2a:	f7fd f94d 	bl	8012cc8 <rcutils_repl_str>
 8015a2e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015a30:	4605      	mov	r5, r0
 8015a32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015a34:	4620      	mov	r0, r4
 8015a36:	4798      	blx	r3
 8015a38:	4650      	mov	r0, sl
 8015a3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015a3c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015a3e:	4798      	blx	r3
 8015a40:	2d00      	cmp	r5, #0
 8015a42:	d06c      	beq.n	8015b1e <rcl_expand_topic_name+0x242>
 8015a44:	217b      	movs	r1, #123	@ 0x7b
 8015a46:	4628      	mov	r0, r5
 8015a48:	f001 f8b6 	bl	8016bb8 <strchr>
 8015a4c:	46aa      	mov	sl, r5
 8015a4e:	4604      	mov	r4, r0
 8015a50:	e7b9      	b.n	80159c6 <rcl_expand_topic_name+0xea>
 8015a52:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8015a56:	1c61      	adds	r1, r4, #1
 8015a58:	4640      	mov	r0, r8
 8015a5a:	f7fd fb6f 	bl	801313c <rcutils_string_map_getn>
 8015a5e:	4681      	mov	r9, r0
 8015a60:	2800      	cmp	r0, #0
 8015a62:	d1cf      	bne.n	8015a04 <rcl_expand_topic_name+0x128>
 8015a64:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8015a66:	aa18      	add	r2, sp, #96	@ 0x60
 8015a68:	2569      	movs	r5, #105	@ 0x69
 8015a6a:	6018      	str	r0, [r3, #0]
 8015a6c:	ab16      	add	r3, sp, #88	@ 0x58
 8015a6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8015a70:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015a74:	4631      	mov	r1, r6
 8015a76:	4620      	mov	r0, r4
 8015a78:	cb0c      	ldmia	r3, {r2, r3}
 8015a7a:	f7fd fa47 	bl	8012f0c <rcutils_strndup>
 8015a7e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015a80:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015a82:	4798      	blx	r3
 8015a84:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015a86:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015a88:	4650      	mov	r0, sl
 8015a8a:	4798      	blx	r3
 8015a8c:	e777      	b.n	801597e <rcl_expand_topic_name+0xa2>
 8015a8e:	46b9      	mov	r9, r7
 8015a90:	e7b8      	b.n	8015a04 <rcl_expand_topic_name+0x128>
 8015a92:	25ca      	movs	r5, #202	@ 0xca
 8015a94:	e773      	b.n	801597e <rcl_expand_topic_name+0xa2>
 8015a96:	9e07      	ldr	r6, [sp, #28]
 8015a98:	4630      	mov	r0, r6
 8015a9a:	f7ea fbdb 	bl	8000254 <strlen>
 8015a9e:	4a3b      	ldr	r2, [pc, #236]	@ (8015b8c <rcl_expand_topic_name+0x2b0>)
 8015aa0:	4b3b      	ldr	r3, [pc, #236]	@ (8015b90 <rcl_expand_topic_name+0x2b4>)
 8015aa2:	9603      	str	r6, [sp, #12]
 8015aa4:	2801      	cmp	r0, #1
 8015aa6:	bf18      	it	ne
 8015aa8:	4613      	movne	r3, r2
 8015aaa:	9704      	str	r7, [sp, #16]
 8015aac:	9302      	str	r3, [sp, #8]
 8015aae:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8015ab0:	9300      	str	r3, [sp, #0]
 8015ab2:	1c63      	adds	r3, r4, #1
 8015ab4:	9305      	str	r3, [sp, #20]
 8015ab6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015aba:	9301      	str	r3, [sp, #4]
 8015abc:	ab16      	add	r3, sp, #88	@ 0x58
 8015abe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015ac0:	f7fd f8c8 	bl	8012c54 <rcutils_format_string_limit>
 8015ac4:	4606      	mov	r6, r0
 8015ac6:	b350      	cbz	r0, 8015b1e <rcl_expand_topic_name+0x242>
 8015ac8:	f1b9 0f00 	cmp.w	r9, #0
 8015acc:	d005      	beq.n	8015ada <rcl_expand_topic_name+0x1fe>
 8015ace:	217b      	movs	r1, #123	@ 0x7b
 8015ad0:	46b2      	mov	sl, r6
 8015ad2:	f001 f871 	bl	8016bb8 <strchr>
 8015ad6:	4681      	mov	r9, r0
 8015ad8:	e76e      	b.n	80159b8 <rcl_expand_topic_name+0xdc>
 8015ada:	7833      	ldrb	r3, [r6, #0]
 8015adc:	2b2f      	cmp	r3, #47	@ 0x2f
 8015ade:	d01b      	beq.n	8015b18 <rcl_expand_topic_name+0x23c>
 8015ae0:	9c07      	ldr	r4, [sp, #28]
 8015ae2:	4620      	mov	r0, r4
 8015ae4:	f7ea fbb6 	bl	8000254 <strlen>
 8015ae8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015aec:	4a29      	ldr	r2, [pc, #164]	@ (8015b94 <rcl_expand_topic_name+0x2b8>)
 8015aee:	9301      	str	r3, [sp, #4]
 8015af0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8015af2:	9604      	str	r6, [sp, #16]
 8015af4:	9300      	str	r3, [sp, #0]
 8015af6:	4b28      	ldr	r3, [pc, #160]	@ (8015b98 <rcl_expand_topic_name+0x2bc>)
 8015af8:	9403      	str	r4, [sp, #12]
 8015afa:	2801      	cmp	r0, #1
 8015afc:	bf18      	it	ne
 8015afe:	4613      	movne	r3, r2
 8015b00:	9302      	str	r3, [sp, #8]
 8015b02:	ab16      	add	r3, sp, #88	@ 0x58
 8015b04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015b06:	f7fd f8a5 	bl	8012c54 <rcutils_format_string_limit>
 8015b0a:	4603      	mov	r3, r0
 8015b0c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8015b0e:	4630      	mov	r0, r6
 8015b10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015b12:	461e      	mov	r6, r3
 8015b14:	4790      	blx	r2
 8015b16:	b116      	cbz	r6, 8015b1e <rcl_expand_topic_name+0x242>
 8015b18:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8015b1a:	601e      	str	r6, [r3, #0]
 8015b1c:	e72f      	b.n	801597e <rcl_expand_topic_name+0xa2>
 8015b1e:	2300      	movs	r3, #0
 8015b20:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8015b22:	250a      	movs	r5, #10
 8015b24:	6013      	str	r3, [r2, #0]
 8015b26:	e72a      	b.n	801597e <rcl_expand_topic_name+0xa2>
 8015b28:	4653      	mov	r3, sl
 8015b2a:	4656      	mov	r6, sl
 8015b2c:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d1d2      	bne.n	8015ada <rcl_expand_topic_name+0x1fe>
 8015b34:	7823      	ldrb	r3, [r4, #0]
 8015b36:	2b2f      	cmp	r3, #47	@ 0x2f
 8015b38:	d01e      	beq.n	8015b78 <rcl_expand_topic_name+0x29c>
 8015b3a:	9e07      	ldr	r6, [sp, #28]
 8015b3c:	4630      	mov	r0, r6
 8015b3e:	f7ea fb89 	bl	8000254 <strlen>
 8015b42:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8015b44:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015b48:	9603      	str	r6, [sp, #12]
 8015b4a:	9404      	str	r4, [sp, #16]
 8015b4c:	e9cd 2300 	strd	r2, r3, [sp]
 8015b50:	4a10      	ldr	r2, [pc, #64]	@ (8015b94 <rcl_expand_topic_name+0x2b8>)
 8015b52:	4b11      	ldr	r3, [pc, #68]	@ (8015b98 <rcl_expand_topic_name+0x2bc>)
 8015b54:	2801      	cmp	r0, #1
 8015b56:	bf18      	it	ne
 8015b58:	4613      	movne	r3, r2
 8015b5a:	9302      	str	r3, [sp, #8]
 8015b5c:	ab16      	add	r3, sp, #88	@ 0x58
 8015b5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015b60:	f7fd f878 	bl	8012c54 <rcutils_format_string_limit>
 8015b64:	4606      	mov	r6, r0
 8015b66:	e7d6      	b.n	8015b16 <rcl_expand_topic_name+0x23a>
 8015b68:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	@ 0x68
 8015b6c:	4650      	mov	r0, sl
 8015b6e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015b70:	6014      	str	r4, [r2, #0]
 8015b72:	250a      	movs	r5, #10
 8015b74:	4798      	blx	r3
 8015b76:	e702      	b.n	801597e <rcl_expand_topic_name+0xa2>
 8015b78:	2300      	movs	r3, #0
 8015b7a:	461e      	mov	r6, r3
 8015b7c:	e7cc      	b.n	8015b18 <rcl_expand_topic_name+0x23c>
 8015b7e:	bf00      	nop
 8015b80:	0801835c 	.word	0x0801835c
 8015b84:	08018364 	.word	0x08018364
 8015b88:	0801836c 	.word	0x0801836c
 8015b8c:	08018354 	.word	0x08018354
 8015b90:	08017c54 	.word	0x08017c54
 8015b94:	08017ff0 	.word	0x08017ff0
 8015b98:	08017c64 	.word	0x08017c64

08015b9c <rcl_get_default_topic_name_substitutions>:
 8015b9c:	2800      	cmp	r0, #0
 8015b9e:	bf0c      	ite	eq
 8015ba0:	200b      	moveq	r0, #11
 8015ba2:	2000      	movne	r0, #0
 8015ba4:	4770      	bx	lr
 8015ba6:	bf00      	nop

08015ba8 <rcl_get_zero_initialized_guard_condition>:
 8015ba8:	4a03      	ldr	r2, [pc, #12]	@ (8015bb8 <rcl_get_zero_initialized_guard_condition+0x10>)
 8015baa:	4603      	mov	r3, r0
 8015bac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015bb0:	e883 0003 	stmia.w	r3, {r0, r1}
 8015bb4:	4618      	mov	r0, r3
 8015bb6:	4770      	bx	lr
 8015bb8:	080187a8 	.word	0x080187a8

08015bbc <rcl_guard_condition_init_from_rmw>:
 8015bbc:	b082      	sub	sp, #8
 8015bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bc2:	b086      	sub	sp, #24
 8015bc4:	4604      	mov	r4, r0
 8015bc6:	460e      	mov	r6, r1
 8015bc8:	4615      	mov	r5, r2
 8015bca:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8015bce:	f10d 0e04 	add.w	lr, sp, #4
 8015bd2:	f84c 3f04 	str.w	r3, [ip, #4]!
 8015bd6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015bda:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015bde:	f8dc 3000 	ldr.w	r3, [ip]
 8015be2:	a801      	add	r0, sp, #4
 8015be4:	f8ce 3000 	str.w	r3, [lr]
 8015be8:	f7f6 fe1a 	bl	800c820 <rcutils_allocator_is_valid>
 8015bec:	f080 0301 	eor.w	r3, r0, #1
 8015bf0:	b2db      	uxtb	r3, r3
 8015bf2:	bb3b      	cbnz	r3, 8015c44 <rcl_guard_condition_init_from_rmw+0x88>
 8015bf4:	b334      	cbz	r4, 8015c44 <rcl_guard_condition_init_from_rmw+0x88>
 8015bf6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8015bfa:	f1b8 0f00 	cmp.w	r8, #0
 8015bfe:	d11a      	bne.n	8015c36 <rcl_guard_condition_init_from_rmw+0x7a>
 8015c00:	b305      	cbz	r5, 8015c44 <rcl_guard_condition_init_from_rmw+0x88>
 8015c02:	4628      	mov	r0, r5
 8015c04:	f7fc fa3e 	bl	8012084 <rcl_context_is_valid>
 8015c08:	b1f0      	cbz	r0, 8015c48 <rcl_guard_condition_init_from_rmw+0x8c>
 8015c0a:	9b01      	ldr	r3, [sp, #4]
 8015c0c:	201c      	movs	r0, #28
 8015c0e:	9905      	ldr	r1, [sp, #20]
 8015c10:	4798      	blx	r3
 8015c12:	4607      	mov	r7, r0
 8015c14:	6060      	str	r0, [r4, #4]
 8015c16:	b320      	cbz	r0, 8015c62 <rcl_guard_condition_init_from_rmw+0xa6>
 8015c18:	b1c6      	cbz	r6, 8015c4c <rcl_guard_condition_init_from_rmw+0x90>
 8015c1a:	6006      	str	r6, [r0, #0]
 8015c1c:	f880 8004 	strb.w	r8, [r0, #4]
 8015c20:	ac01      	add	r4, sp, #4
 8015c22:	f107 0c08 	add.w	ip, r7, #8
 8015c26:	2500      	movs	r5, #0
 8015c28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015c2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015c2e:	6823      	ldr	r3, [r4, #0]
 8015c30:	f8cc 3000 	str.w	r3, [ip]
 8015c34:	e000      	b.n	8015c38 <rcl_guard_condition_init_from_rmw+0x7c>
 8015c36:	2564      	movs	r5, #100	@ 0x64
 8015c38:	4628      	mov	r0, r5
 8015c3a:	b006      	add	sp, #24
 8015c3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015c40:	b002      	add	sp, #8
 8015c42:	4770      	bx	lr
 8015c44:	250b      	movs	r5, #11
 8015c46:	e7f7      	b.n	8015c38 <rcl_guard_condition_init_from_rmw+0x7c>
 8015c48:	2565      	movs	r5, #101	@ 0x65
 8015c4a:	e7f5      	b.n	8015c38 <rcl_guard_condition_init_from_rmw+0x7c>
 8015c4c:	6828      	ldr	r0, [r5, #0]
 8015c4e:	3028      	adds	r0, #40	@ 0x28
 8015c50:	f000 fa42 	bl	80160d8 <rmw_create_guard_condition>
 8015c54:	6038      	str	r0, [r7, #0]
 8015c56:	6867      	ldr	r7, [r4, #4]
 8015c58:	683e      	ldr	r6, [r7, #0]
 8015c5a:	b126      	cbz	r6, 8015c66 <rcl_guard_condition_init_from_rmw+0xaa>
 8015c5c:	2301      	movs	r3, #1
 8015c5e:	713b      	strb	r3, [r7, #4]
 8015c60:	e7de      	b.n	8015c20 <rcl_guard_condition_init_from_rmw+0x64>
 8015c62:	250a      	movs	r5, #10
 8015c64:	e7e8      	b.n	8015c38 <rcl_guard_condition_init_from_rmw+0x7c>
 8015c66:	9b02      	ldr	r3, [sp, #8]
 8015c68:	4638      	mov	r0, r7
 8015c6a:	9905      	ldr	r1, [sp, #20]
 8015c6c:	2501      	movs	r5, #1
 8015c6e:	4798      	blx	r3
 8015c70:	6066      	str	r6, [r4, #4]
 8015c72:	e7e1      	b.n	8015c38 <rcl_guard_condition_init_from_rmw+0x7c>

08015c74 <rcl_guard_condition_fini>:
 8015c74:	b570      	push	{r4, r5, r6, lr}
 8015c76:	b082      	sub	sp, #8
 8015c78:	b1f0      	cbz	r0, 8015cb8 <rcl_guard_condition_fini+0x44>
 8015c7a:	6843      	ldr	r3, [r0, #4]
 8015c7c:	4604      	mov	r4, r0
 8015c7e:	b163      	cbz	r3, 8015c9a <rcl_guard_condition_fini+0x26>
 8015c80:	6818      	ldr	r0, [r3, #0]
 8015c82:	68de      	ldr	r6, [r3, #12]
 8015c84:	6999      	ldr	r1, [r3, #24]
 8015c86:	b160      	cbz	r0, 8015ca2 <rcl_guard_condition_fini+0x2e>
 8015c88:	791d      	ldrb	r5, [r3, #4]
 8015c8a:	b965      	cbnz	r5, 8015ca6 <rcl_guard_condition_fini+0x32>
 8015c8c:	4618      	mov	r0, r3
 8015c8e:	47b0      	blx	r6
 8015c90:	2300      	movs	r3, #0
 8015c92:	4628      	mov	r0, r5
 8015c94:	6063      	str	r3, [r4, #4]
 8015c96:	b002      	add	sp, #8
 8015c98:	bd70      	pop	{r4, r5, r6, pc}
 8015c9a:	461d      	mov	r5, r3
 8015c9c:	4628      	mov	r0, r5
 8015c9e:	b002      	add	sp, #8
 8015ca0:	bd70      	pop	{r4, r5, r6, pc}
 8015ca2:	4605      	mov	r5, r0
 8015ca4:	e7f2      	b.n	8015c8c <rcl_guard_condition_fini+0x18>
 8015ca6:	9101      	str	r1, [sp, #4]
 8015ca8:	f000 fa2c 	bl	8016104 <rmw_destroy_guard_condition>
 8015cac:	1e05      	subs	r5, r0, #0
 8015cae:	6863      	ldr	r3, [r4, #4]
 8015cb0:	9901      	ldr	r1, [sp, #4]
 8015cb2:	bf18      	it	ne
 8015cb4:	2501      	movne	r5, #1
 8015cb6:	e7e9      	b.n	8015c8c <rcl_guard_condition_fini+0x18>
 8015cb8:	250b      	movs	r5, #11
 8015cba:	4628      	mov	r0, r5
 8015cbc:	b002      	add	sp, #8
 8015cbe:	bd70      	pop	{r4, r5, r6, pc}

08015cc0 <rcl_guard_condition_get_default_options>:
 8015cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015cc2:	b087      	sub	sp, #28
 8015cc4:	4606      	mov	r6, r0
 8015cc6:	4c0b      	ldr	r4, [pc, #44]	@ (8015cf4 <rcl_guard_condition_get_default_options+0x34>)
 8015cc8:	4668      	mov	r0, sp
 8015cca:	f7f6 fd9b 	bl	800c804 <rcutils_get_default_allocator>
 8015cce:	46ee      	mov	lr, sp
 8015cd0:	46a4      	mov	ip, r4
 8015cd2:	4625      	mov	r5, r4
 8015cd4:	4634      	mov	r4, r6
 8015cd6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015cda:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015cde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015ce0:	f8de 7000 	ldr.w	r7, [lr]
 8015ce4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015ce6:	4630      	mov	r0, r6
 8015ce8:	f8cc 7000 	str.w	r7, [ip]
 8015cec:	6027      	str	r7, [r4, #0]
 8015cee:	b007      	add	sp, #28
 8015cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015cf2:	bf00      	nop
 8015cf4:	2000ecb4 	.word	0x2000ecb4

08015cf8 <rcl_validate_topic_name>:
 8015cf8:	2800      	cmp	r0, #0
 8015cfa:	f000 8089 	beq.w	8015e10 <rcl_validate_topic_name+0x118>
 8015cfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d02:	460e      	mov	r6, r1
 8015d04:	2900      	cmp	r1, #0
 8015d06:	f000 8085 	beq.w	8015e14 <rcl_validate_topic_name+0x11c>
 8015d0a:	4604      	mov	r4, r0
 8015d0c:	4617      	mov	r7, r2
 8015d0e:	f7ea faa1 	bl	8000254 <strlen>
 8015d12:	b1b0      	cbz	r0, 8015d42 <rcl_validate_topic_name+0x4a>
 8015d14:	f894 e000 	ldrb.w	lr, [r4]
 8015d18:	f8df c160 	ldr.w	ip, [pc, #352]	@ 8015e7c <rcl_validate_topic_name+0x184>
 8015d1c:	f81c 300e 	ldrb.w	r3, [ip, lr]
 8015d20:	f013 0304 	ands.w	r3, r3, #4
 8015d24:	d139      	bne.n	8015d9a <rcl_validate_topic_name+0xa2>
 8015d26:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8015d2a:	f814 2008 	ldrb.w	r2, [r4, r8]
 8015d2e:	2a2f      	cmp	r2, #47	@ 0x2f
 8015d30:	d10f      	bne.n	8015d52 <rcl_validate_topic_name+0x5a>
 8015d32:	2202      	movs	r2, #2
 8015d34:	6032      	str	r2, [r6, #0]
 8015d36:	b3a7      	cbz	r7, 8015da2 <rcl_validate_topic_name+0xaa>
 8015d38:	4618      	mov	r0, r3
 8015d3a:	f8c7 8000 	str.w	r8, [r7]
 8015d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d42:	2301      	movs	r3, #1
 8015d44:	6033      	str	r3, [r6, #0]
 8015d46:	b367      	cbz	r7, 8015da2 <rcl_validate_topic_name+0xaa>
 8015d48:	2300      	movs	r3, #0
 8015d4a:	4618      	mov	r0, r3
 8015d4c:	603b      	str	r3, [r7, #0]
 8015d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d52:	f104 3aff 	add.w	sl, r4, #4294967295	@ 0xffffffff
 8015d56:	461d      	mov	r5, r3
 8015d58:	4619      	mov	r1, r3
 8015d5a:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8015d5e:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
 8015d62:	f1b9 0f09 	cmp.w	r9, #9
 8015d66:	d91f      	bls.n	8015da8 <rcl_validate_topic_name+0xb0>
 8015d68:	f022 0920 	bic.w	r9, r2, #32
 8015d6c:	f1a9 0941 	sub.w	r9, r9, #65	@ 0x41
 8015d70:	f1b9 0f19 	cmp.w	r9, #25
 8015d74:	d918      	bls.n	8015da8 <rcl_validate_topic_name+0xb0>
 8015d76:	2a5f      	cmp	r2, #95	@ 0x5f
 8015d78:	d024      	beq.n	8015dc4 <rcl_validate_topic_name+0xcc>
 8015d7a:	2a2f      	cmp	r2, #47	@ 0x2f
 8015d7c:	d058      	beq.n	8015e30 <rcl_validate_topic_name+0x138>
 8015d7e:	2a7e      	cmp	r2, #126	@ 0x7e
 8015d80:	d04a      	beq.n	8015e18 <rcl_validate_topic_name+0x120>
 8015d82:	2a7b      	cmp	r2, #123	@ 0x7b
 8015d84:	d05b      	beq.n	8015e3e <rcl_validate_topic_name+0x146>
 8015d86:	2a7d      	cmp	r2, #125	@ 0x7d
 8015d88:	d169      	bne.n	8015e5e <rcl_validate_topic_name+0x166>
 8015d8a:	2d00      	cmp	r5, #0
 8015d8c:	d15c      	bne.n	8015e48 <rcl_validate_topic_name+0x150>
 8015d8e:	2305      	movs	r3, #5
 8015d90:	6033      	str	r3, [r6, #0]
 8015d92:	b137      	cbz	r7, 8015da2 <rcl_validate_topic_name+0xaa>
 8015d94:	2000      	movs	r0, #0
 8015d96:	6039      	str	r1, [r7, #0]
 8015d98:	e7d9      	b.n	8015d4e <rcl_validate_topic_name+0x56>
 8015d9a:	2304      	movs	r3, #4
 8015d9c:	6033      	str	r3, [r6, #0]
 8015d9e:	2f00      	cmp	r7, #0
 8015da0:	d1d2      	bne.n	8015d48 <rcl_validate_topic_name+0x50>
 8015da2:	2000      	movs	r0, #0
 8015da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015da8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8015dac:	0752      	lsls	r2, r2, #29
 8015dae:	d509      	bpl.n	8015dc4 <rcl_validate_topic_name+0xcc>
 8015db0:	2900      	cmp	r1, #0
 8015db2:	bf0c      	ite	eq
 8015db4:	2200      	moveq	r2, #0
 8015db6:	f005 0201 	andne.w	r2, r5, #1
 8015dba:	b11a      	cbz	r2, 8015dc4 <rcl_validate_topic_name+0xcc>
 8015dbc:	1e4d      	subs	r5, r1, #1
 8015dbe:	429d      	cmp	r5, r3
 8015dc0:	d031      	beq.n	8015e26 <rcl_validate_topic_name+0x12e>
 8015dc2:	4615      	mov	r5, r2
 8015dc4:	3101      	adds	r1, #1
 8015dc6:	4288      	cmp	r0, r1
 8015dc8:	d1c7      	bne.n	8015d5a <rcl_validate_topic_name+0x62>
 8015dca:	2d00      	cmp	r5, #0
 8015dcc:	d142      	bne.n	8015e54 <rcl_validate_topic_name+0x15c>
 8015dce:	4628      	mov	r0, r5
 8015dd0:	2301      	movs	r3, #1
 8015dd2:	e00c      	b.n	8015dee <rcl_validate_topic_name+0xf6>
 8015dd4:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8015dd8:	d101      	bne.n	8015dde <rcl_validate_topic_name+0xe6>
 8015dda:	2801      	cmp	r0, #1
 8015ddc:	d047      	beq.n	8015e6e <rcl_validate_topic_name+0x176>
 8015dde:	1c5a      	adds	r2, r3, #1
 8015de0:	428b      	cmp	r3, r1
 8015de2:	f100 0001 	add.w	r0, r0, #1
 8015de6:	f104 0401 	add.w	r4, r4, #1
 8015dea:	4613      	mov	r3, r2
 8015dec:	d22e      	bcs.n	8015e4c <rcl_validate_topic_name+0x154>
 8015dee:	4580      	cmp	r8, r0
 8015df0:	d0f5      	beq.n	8015dde <rcl_validate_topic_name+0xe6>
 8015df2:	7822      	ldrb	r2, [r4, #0]
 8015df4:	2a2f      	cmp	r2, #47	@ 0x2f
 8015df6:	d1ed      	bne.n	8015dd4 <rcl_validate_topic_name+0xdc>
 8015df8:	7862      	ldrb	r2, [r4, #1]
 8015dfa:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8015dfe:	0752      	lsls	r2, r2, #29
 8015e00:	d5ed      	bpl.n	8015dde <rcl_validate_topic_name+0xe6>
 8015e02:	2204      	movs	r2, #4
 8015e04:	6032      	str	r2, [r6, #0]
 8015e06:	2f00      	cmp	r7, #0
 8015e08:	d0cb      	beq.n	8015da2 <rcl_validate_topic_name+0xaa>
 8015e0a:	2000      	movs	r0, #0
 8015e0c:	603b      	str	r3, [r7, #0]
 8015e0e:	e79e      	b.n	8015d4e <rcl_validate_topic_name+0x56>
 8015e10:	200b      	movs	r0, #11
 8015e12:	4770      	bx	lr
 8015e14:	200b      	movs	r0, #11
 8015e16:	e79a      	b.n	8015d4e <rcl_validate_topic_name+0x56>
 8015e18:	2900      	cmp	r1, #0
 8015e1a:	d0d3      	beq.n	8015dc4 <rcl_validate_topic_name+0xcc>
 8015e1c:	2306      	movs	r3, #6
 8015e1e:	6033      	str	r3, [r6, #0]
 8015e20:	2f00      	cmp	r7, #0
 8015e22:	d1b7      	bne.n	8015d94 <rcl_validate_topic_name+0x9c>
 8015e24:	e7bd      	b.n	8015da2 <rcl_validate_topic_name+0xaa>
 8015e26:	2309      	movs	r3, #9
 8015e28:	6033      	str	r3, [r6, #0]
 8015e2a:	2f00      	cmp	r7, #0
 8015e2c:	d1b2      	bne.n	8015d94 <rcl_validate_topic_name+0x9c>
 8015e2e:	e7b8      	b.n	8015da2 <rcl_validate_topic_name+0xaa>
 8015e30:	2d00      	cmp	r5, #0
 8015e32:	d0c7      	beq.n	8015dc4 <rcl_validate_topic_name+0xcc>
 8015e34:	2308      	movs	r3, #8
 8015e36:	6033      	str	r3, [r6, #0]
 8015e38:	2f00      	cmp	r7, #0
 8015e3a:	d1ab      	bne.n	8015d94 <rcl_validate_topic_name+0x9c>
 8015e3c:	e7b1      	b.n	8015da2 <rcl_validate_topic_name+0xaa>
 8015e3e:	2d00      	cmp	r5, #0
 8015e40:	d1f8      	bne.n	8015e34 <rcl_validate_topic_name+0x13c>
 8015e42:	460b      	mov	r3, r1
 8015e44:	2501      	movs	r5, #1
 8015e46:	e7bd      	b.n	8015dc4 <rcl_validate_topic_name+0xcc>
 8015e48:	2500      	movs	r5, #0
 8015e4a:	e7bb      	b.n	8015dc4 <rcl_validate_topic_name+0xcc>
 8015e4c:	2300      	movs	r3, #0
 8015e4e:	4618      	mov	r0, r3
 8015e50:	6033      	str	r3, [r6, #0]
 8015e52:	e77c      	b.n	8015d4e <rcl_validate_topic_name+0x56>
 8015e54:	2205      	movs	r2, #5
 8015e56:	6032      	str	r2, [r6, #0]
 8015e58:	2f00      	cmp	r7, #0
 8015e5a:	d1d6      	bne.n	8015e0a <rcl_validate_topic_name+0x112>
 8015e5c:	e7a1      	b.n	8015da2 <rcl_validate_topic_name+0xaa>
 8015e5e:	2d00      	cmp	r5, #0
 8015e60:	bf14      	ite	ne
 8015e62:	2308      	movne	r3, #8
 8015e64:	2303      	moveq	r3, #3
 8015e66:	6033      	str	r3, [r6, #0]
 8015e68:	2f00      	cmp	r7, #0
 8015e6a:	d193      	bne.n	8015d94 <rcl_validate_topic_name+0x9c>
 8015e6c:	e799      	b.n	8015da2 <rcl_validate_topic_name+0xaa>
 8015e6e:	2307      	movs	r3, #7
 8015e70:	6033      	str	r3, [r6, #0]
 8015e72:	2f00      	cmp	r7, #0
 8015e74:	d095      	beq.n	8015da2 <rcl_validate_topic_name+0xaa>
 8015e76:	2301      	movs	r3, #1
 8015e78:	e7c7      	b.n	8015e0a <rcl_validate_topic_name+0x112>
 8015e7a:	bf00      	nop
 8015e7c:	0801888f 	.word	0x0801888f

08015e80 <on_status>:
 8015e80:	b082      	sub	sp, #8
 8015e82:	b002      	add	sp, #8
 8015e84:	4770      	bx	lr
 8015e86:	bf00      	nop

08015e88 <on_topic>:
 8015e88:	4a23      	ldr	r2, [pc, #140]	@ (8015f18 <on_topic+0x90>)
 8015e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e8e:	6812      	ldr	r2, [r2, #0]
 8015e90:	b094      	sub	sp, #80	@ 0x50
 8015e92:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8015e94:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8015e98:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015e9a:	9312      	str	r3, [sp, #72]	@ 0x48
 8015e9c:	b3c2      	cbz	r2, 8015f10 <on_topic+0x88>
 8015e9e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8015ea2:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8015ea6:	e001      	b.n	8015eac <on_topic+0x24>
 8015ea8:	6852      	ldr	r2, [r2, #4]
 8015eaa:	b38a      	cbz	r2, 8015f10 <on_topic+0x88>
 8015eac:	6894      	ldr	r4, [r2, #8]
 8015eae:	8aa3      	ldrh	r3, [r4, #20]
 8015eb0:	428b      	cmp	r3, r1
 8015eb2:	d1f9      	bne.n	8015ea8 <on_topic+0x20>
 8015eb4:	7da3      	ldrb	r3, [r4, #22]
 8015eb6:	4283      	cmp	r3, r0
 8015eb8:	d1f6      	bne.n	8015ea8 <on_topic+0x20>
 8015eba:	2248      	movs	r2, #72	@ 0x48
 8015ebc:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8015ec0:	4668      	mov	r0, sp
 8015ec2:	f000 ff3a 	bl	8016d3a <memcpy>
 8015ec6:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8015eca:	4620      	mov	r0, r4
 8015ecc:	cb0c      	ldmia	r3, {r2, r3}
 8015ece:	f7f7 f8af 	bl	800d030 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015ed2:	4607      	mov	r7, r0
 8015ed4:	b1e0      	cbz	r0, 8015f10 <on_topic+0x88>
 8015ed6:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8015eda:	462a      	mov	r2, r5
 8015edc:	4630      	mov	r0, r6
 8015ede:	f108 0110 	add.w	r1, r8, #16
 8015ee2:	f7f7 ff15 	bl	800dd10 <ucdr_deserialize_array_uint8_t>
 8015ee6:	b930      	cbnz	r0, 8015ef6 <on_topic+0x6e>
 8015ee8:	4639      	mov	r1, r7
 8015eea:	480c      	ldr	r0, [pc, #48]	@ (8015f1c <on_topic+0x94>)
 8015eec:	b014      	add	sp, #80	@ 0x50
 8015eee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015ef2:	f7fd bb27 	b.w	8013544 <put_memory>
 8015ef6:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8015efa:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 8015efe:	f7f6 fea7 	bl	800cc50 <rmw_uros_epoch_nanos>
 8015f02:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8015f06:	2305      	movs	r3, #5
 8015f08:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015f0c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8015f10:	b014      	add	sp, #80	@ 0x50
 8015f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f16:	bf00      	nop
 8015f18:	2000eb84 	.word	0x2000eb84
 8015f1c:	2000eb74 	.word	0x2000eb74

08015f20 <on_request>:
 8015f20:	4824      	ldr	r0, [pc, #144]	@ (8015fb4 <on_request+0x94>)
 8015f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f26:	6800      	ldr	r0, [r0, #0]
 8015f28:	b094      	sub	sp, #80	@ 0x50
 8015f2a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8015f2c:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 8015f30:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015f32:	2800      	cmp	r0, #0
 8015f34:	d03b      	beq.n	8015fae <on_request+0x8e>
 8015f36:	461d      	mov	r5, r3
 8015f38:	e001      	b.n	8015f3e <on_request+0x1e>
 8015f3a:	6840      	ldr	r0, [r0, #4]
 8015f3c:	b3b8      	cbz	r0, 8015fae <on_request+0x8e>
 8015f3e:	6884      	ldr	r4, [r0, #8]
 8015f40:	8b21      	ldrh	r1, [r4, #24]
 8015f42:	4291      	cmp	r1, r2
 8015f44:	d1f9      	bne.n	8015f3a <on_request+0x1a>
 8015f46:	2248      	movs	r2, #72	@ 0x48
 8015f48:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8015f4c:	4668      	mov	r0, sp
 8015f4e:	f000 fef4 	bl	8016d3a <memcpy>
 8015f52:	f104 0320 	add.w	r3, r4, #32
 8015f56:	4620      	mov	r0, r4
 8015f58:	cb0c      	ldmia	r3, {r2, r3}
 8015f5a:	f7f7 f869 	bl	800d030 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015f5e:	4680      	mov	r8, r0
 8015f60:	b328      	cbz	r0, 8015fae <on_request+0x8e>
 8015f62:	4630      	mov	r0, r6
 8015f64:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8015f68:	463a      	mov	r2, r7
 8015f6a:	f106 0110 	add.w	r1, r6, #16
 8015f6e:	f7f7 fecf 	bl	800dd10 <ucdr_deserialize_array_uint8_t>
 8015f72:	b930      	cbnz	r0, 8015f82 <on_request+0x62>
 8015f74:	4641      	mov	r1, r8
 8015f76:	4810      	ldr	r0, [pc, #64]	@ (8015fb8 <on_request+0x98>)
 8015f78:	b014      	add	sp, #80	@ 0x50
 8015f7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015f7e:	f7fd bae1 	b.w	8013544 <put_memory>
 8015f82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015f84:	f606 0c28 	addw	ip, r6, #2088	@ 0x828
 8015f88:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 8015f8c:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 8015f90:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015f94:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015f98:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015f9c:	f7f6 fe58 	bl	800cc50 <rmw_uros_epoch_nanos>
 8015fa0:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 8015fa4:	2303      	movs	r3, #3
 8015fa6:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015faa:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 8015fae:	b014      	add	sp, #80	@ 0x50
 8015fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015fb4:	2000eb54 	.word	0x2000eb54
 8015fb8:	2000eb74 	.word	0x2000eb74

08015fbc <on_reply>:
 8015fbc:	4822      	ldr	r0, [pc, #136]	@ (8016048 <on_reply+0x8c>)
 8015fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fc2:	6800      	ldr	r0, [r0, #0]
 8015fc4:	b094      	sub	sp, #80	@ 0x50
 8015fc6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8015fc8:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 8015fcc:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015fce:	b3b8      	cbz	r0, 8016040 <on_reply+0x84>
 8015fd0:	461d      	mov	r5, r3
 8015fd2:	e001      	b.n	8015fd8 <on_reply+0x1c>
 8015fd4:	6840      	ldr	r0, [r0, #4]
 8015fd6:	b398      	cbz	r0, 8016040 <on_reply+0x84>
 8015fd8:	6884      	ldr	r4, [r0, #8]
 8015fda:	8b21      	ldrh	r1, [r4, #24]
 8015fdc:	4291      	cmp	r1, r2
 8015fde:	d1f9      	bne.n	8015fd4 <on_reply+0x18>
 8015fe0:	2248      	movs	r2, #72	@ 0x48
 8015fe2:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8015fe6:	4668      	mov	r0, sp
 8015fe8:	f000 fea7 	bl	8016d3a <memcpy>
 8015fec:	f104 0320 	add.w	r3, r4, #32
 8015ff0:	4620      	mov	r0, r4
 8015ff2:	cb0c      	ldmia	r3, {r2, r3}
 8015ff4:	f7f7 f81c 	bl	800d030 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015ff8:	4680      	mov	r8, r0
 8015ffa:	b308      	cbz	r0, 8016040 <on_reply+0x84>
 8015ffc:	4630      	mov	r0, r6
 8015ffe:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8016002:	463a      	mov	r2, r7
 8016004:	f106 0110 	add.w	r1, r6, #16
 8016008:	f7f7 fe82 	bl	800dd10 <ucdr_deserialize_array_uint8_t>
 801600c:	b930      	cbnz	r0, 801601c <on_reply+0x60>
 801600e:	4641      	mov	r1, r8
 8016010:	480e      	ldr	r0, [pc, #56]	@ (801604c <on_reply+0x90>)
 8016012:	b014      	add	sp, #80	@ 0x50
 8016014:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016018:	f7fd ba94 	b.w	8013544 <put_memory>
 801601c:	2200      	movs	r2, #0
 801601e:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 8016022:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 8016026:	f8c6 282c 	str.w	r2, [r6, #2092]	@ 0x82c
 801602a:	f8c6 5828 	str.w	r5, [r6, #2088]	@ 0x828
 801602e:	f7f6 fe0f 	bl	800cc50 <rmw_uros_epoch_nanos>
 8016032:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 8016036:	2304      	movs	r3, #4
 8016038:	e942 0102 	strd	r0, r1, [r2, #-8]
 801603c:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 8016040:	b014      	add	sp, #80	@ 0x50
 8016042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016046:	bf00      	nop
 8016048:	2000a268 	.word	0x2000a268
 801604c:	2000eb74 	.word	0x2000eb74

08016050 <rmw_destroy_client>:
 8016050:	b570      	push	{r4, r5, r6, lr}
 8016052:	b128      	cbz	r0, 8016060 <rmw_destroy_client+0x10>
 8016054:	4604      	mov	r4, r0
 8016056:	6800      	ldr	r0, [r0, #0]
 8016058:	460d      	mov	r5, r1
 801605a:	f7f7 f8bd 	bl	800d1d8 <is_uxrce_rmw_identifier_valid>
 801605e:	b910      	cbnz	r0, 8016066 <rmw_destroy_client+0x16>
 8016060:	2401      	movs	r4, #1
 8016062:	4620      	mov	r0, r4
 8016064:	bd70      	pop	{r4, r5, r6, pc}
 8016066:	6863      	ldr	r3, [r4, #4]
 8016068:	2b00      	cmp	r3, #0
 801606a:	d0f9      	beq.n	8016060 <rmw_destroy_client+0x10>
 801606c:	2d00      	cmp	r5, #0
 801606e:	d0f7      	beq.n	8016060 <rmw_destroy_client+0x10>
 8016070:	6828      	ldr	r0, [r5, #0]
 8016072:	f7f7 f8b1 	bl	800d1d8 <is_uxrce_rmw_identifier_valid>
 8016076:	2800      	cmp	r0, #0
 8016078:	d0f2      	beq.n	8016060 <rmw_destroy_client+0x10>
 801607a:	686e      	ldr	r6, [r5, #4]
 801607c:	2e00      	cmp	r6, #0
 801607e:	d0ef      	beq.n	8016060 <rmw_destroy_client+0x10>
 8016080:	6864      	ldr	r4, [r4, #4]
 8016082:	6932      	ldr	r2, [r6, #16]
 8016084:	6920      	ldr	r0, [r4, #16]
 8016086:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801608a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801608e:	6819      	ldr	r1, [r3, #0]
 8016090:	f7fe fe5e 	bl	8014d50 <uxr_buffer_cancel_data>
 8016094:	4602      	mov	r2, r0
 8016096:	6920      	ldr	r0, [r4, #16]
 8016098:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801609c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80160a0:	f7f7 f820 	bl	800d0e4 <run_xrce_session>
 80160a4:	6920      	ldr	r0, [r4, #16]
 80160a6:	6932      	ldr	r2, [r6, #16]
 80160a8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80160ac:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80160b0:	6819      	ldr	r1, [r3, #0]
 80160b2:	f7f9 fb19 	bl	800f6e8 <uxr_buffer_delete_entity>
 80160b6:	4602      	mov	r2, r0
 80160b8:	6920      	ldr	r0, [r4, #16]
 80160ba:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80160be:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80160c2:	f7f7 f80f 	bl	800d0e4 <run_xrce_session>
 80160c6:	4603      	mov	r3, r0
 80160c8:	4628      	mov	r0, r5
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	bf14      	ite	ne
 80160ce:	2400      	movne	r4, #0
 80160d0:	2402      	moveq	r4, #2
 80160d2:	f7f6 ff8b 	bl	800cfec <rmw_uxrce_fini_client_memory>
 80160d6:	e7c4      	b.n	8016062 <rmw_destroy_client+0x12>

080160d8 <rmw_create_guard_condition>:
 80160d8:	b538      	push	{r3, r4, r5, lr}
 80160da:	4605      	mov	r5, r0
 80160dc:	4808      	ldr	r0, [pc, #32]	@ (8016100 <rmw_create_guard_condition+0x28>)
 80160de:	f7fd fa21 	bl	8013524 <get_memory>
 80160e2:	4603      	mov	r3, r0
 80160e4:	b148      	cbz	r0, 80160fa <rmw_create_guard_condition+0x22>
 80160e6:	6884      	ldr	r4, [r0, #8]
 80160e8:	2300      	movs	r3, #0
 80160ea:	61e5      	str	r5, [r4, #28]
 80160ec:	7423      	strb	r3, [r4, #16]
 80160ee:	f7fd fa3d 	bl	801356c <rmw_get_implementation_identifier>
 80160f2:	f104 0314 	add.w	r3, r4, #20
 80160f6:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80160fa:	4618      	mov	r0, r3
 80160fc:	bd38      	pop	{r3, r4, r5, pc}
 80160fe:	bf00      	nop
 8016100:	2000eb14 	.word	0x2000eb14

08016104 <rmw_destroy_guard_condition>:
 8016104:	b508      	push	{r3, lr}
 8016106:	4b08      	ldr	r3, [pc, #32]	@ (8016128 <rmw_destroy_guard_condition+0x24>)
 8016108:	6819      	ldr	r1, [r3, #0]
 801610a:	b911      	cbnz	r1, 8016112 <rmw_destroy_guard_condition+0xe>
 801610c:	e00a      	b.n	8016124 <rmw_destroy_guard_condition+0x20>
 801610e:	6849      	ldr	r1, [r1, #4]
 8016110:	b141      	cbz	r1, 8016124 <rmw_destroy_guard_condition+0x20>
 8016112:	688b      	ldr	r3, [r1, #8]
 8016114:	3314      	adds	r3, #20
 8016116:	4298      	cmp	r0, r3
 8016118:	d1f9      	bne.n	801610e <rmw_destroy_guard_condition+0xa>
 801611a:	4803      	ldr	r0, [pc, #12]	@ (8016128 <rmw_destroy_guard_condition+0x24>)
 801611c:	f7fd fa12 	bl	8013544 <put_memory>
 8016120:	2000      	movs	r0, #0
 8016122:	bd08      	pop	{r3, pc}
 8016124:	2001      	movs	r0, #1
 8016126:	bd08      	pop	{r3, pc}
 8016128:	2000eb14 	.word	0x2000eb14

0801612c <rosidl_runtime_c__String__init>:
 801612c:	b510      	push	{r4, lr}
 801612e:	4604      	mov	r4, r0
 8016130:	b086      	sub	sp, #24
 8016132:	b170      	cbz	r0, 8016152 <rosidl_runtime_c__String__init+0x26>
 8016134:	a801      	add	r0, sp, #4
 8016136:	f7f6 fb65 	bl	800c804 <rcutils_get_default_allocator>
 801613a:	9b01      	ldr	r3, [sp, #4]
 801613c:	9905      	ldr	r1, [sp, #20]
 801613e:	2001      	movs	r0, #1
 8016140:	4798      	blx	r3
 8016142:	6020      	str	r0, [r4, #0]
 8016144:	b128      	cbz	r0, 8016152 <rosidl_runtime_c__String__init+0x26>
 8016146:	2100      	movs	r1, #0
 8016148:	2201      	movs	r2, #1
 801614a:	7001      	strb	r1, [r0, #0]
 801614c:	4610      	mov	r0, r2
 801614e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8016152:	b006      	add	sp, #24
 8016154:	bd10      	pop	{r4, pc}
 8016156:	bf00      	nop

08016158 <rosidl_runtime_c__String__fini>:
 8016158:	b320      	cbz	r0, 80161a4 <rosidl_runtime_c__String__fini+0x4c>
 801615a:	6803      	ldr	r3, [r0, #0]
 801615c:	b510      	push	{r4, lr}
 801615e:	4604      	mov	r4, r0
 8016160:	b086      	sub	sp, #24
 8016162:	b173      	cbz	r3, 8016182 <rosidl_runtime_c__String__fini+0x2a>
 8016164:	6883      	ldr	r3, [r0, #8]
 8016166:	b1f3      	cbz	r3, 80161a6 <rosidl_runtime_c__String__fini+0x4e>
 8016168:	a801      	add	r0, sp, #4
 801616a:	f7f6 fb4b 	bl	800c804 <rcutils_get_default_allocator>
 801616e:	9b02      	ldr	r3, [sp, #8]
 8016170:	9905      	ldr	r1, [sp, #20]
 8016172:	6820      	ldr	r0, [r4, #0]
 8016174:	4798      	blx	r3
 8016176:	2300      	movs	r3, #0
 8016178:	e9c4 3300 	strd	r3, r3, [r4]
 801617c:	60a3      	str	r3, [r4, #8]
 801617e:	b006      	add	sp, #24
 8016180:	bd10      	pop	{r4, pc}
 8016182:	6843      	ldr	r3, [r0, #4]
 8016184:	b9db      	cbnz	r3, 80161be <rosidl_runtime_c__String__fini+0x66>
 8016186:	6883      	ldr	r3, [r0, #8]
 8016188:	2b00      	cmp	r3, #0
 801618a:	d0f8      	beq.n	801617e <rosidl_runtime_c__String__fini+0x26>
 801618c:	4b12      	ldr	r3, [pc, #72]	@ (80161d8 <rosidl_runtime_c__String__fini+0x80>)
 801618e:	2251      	movs	r2, #81	@ 0x51
 8016190:	2101      	movs	r1, #1
 8016192:	4812      	ldr	r0, [pc, #72]	@ (80161dc <rosidl_runtime_c__String__fini+0x84>)
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	68db      	ldr	r3, [r3, #12]
 8016198:	f000 fb82 	bl	80168a0 <fwrite>
 801619c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80161a0:	f000 f83e 	bl	8016220 <exit>
 80161a4:	4770      	bx	lr
 80161a6:	4b0c      	ldr	r3, [pc, #48]	@ (80161d8 <rosidl_runtime_c__String__fini+0x80>)
 80161a8:	224c      	movs	r2, #76	@ 0x4c
 80161aa:	2101      	movs	r1, #1
 80161ac:	480c      	ldr	r0, [pc, #48]	@ (80161e0 <rosidl_runtime_c__String__fini+0x88>)
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	68db      	ldr	r3, [r3, #12]
 80161b2:	f000 fb75 	bl	80168a0 <fwrite>
 80161b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80161ba:	f000 f831 	bl	8016220 <exit>
 80161be:	4b06      	ldr	r3, [pc, #24]	@ (80161d8 <rosidl_runtime_c__String__fini+0x80>)
 80161c0:	224e      	movs	r2, #78	@ 0x4e
 80161c2:	2101      	movs	r1, #1
 80161c4:	4807      	ldr	r0, [pc, #28]	@ (80161e4 <rosidl_runtime_c__String__fini+0x8c>)
 80161c6:	681b      	ldr	r3, [r3, #0]
 80161c8:	68db      	ldr	r3, [r3, #12]
 80161ca:	f000 fb69 	bl	80168a0 <fwrite>
 80161ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80161d2:	f000 f825 	bl	8016220 <exit>
 80161d6:	bf00      	nop
 80161d8:	200006a4 	.word	0x200006a4
 80161dc:	08018418 	.word	0x08018418
 80161e0:	08018378 	.word	0x08018378
 80161e4:	080183c8 	.word	0x080183c8

080161e8 <calloc>:
 80161e8:	4b02      	ldr	r3, [pc, #8]	@ (80161f4 <calloc+0xc>)
 80161ea:	460a      	mov	r2, r1
 80161ec:	4601      	mov	r1, r0
 80161ee:	6818      	ldr	r0, [r3, #0]
 80161f0:	f000 b802 	b.w	80161f8 <_calloc_r>
 80161f4:	200006a4 	.word	0x200006a4

080161f8 <_calloc_r>:
 80161f8:	b570      	push	{r4, r5, r6, lr}
 80161fa:	fba1 5402 	umull	r5, r4, r1, r2
 80161fe:	b934      	cbnz	r4, 801620e <_calloc_r+0x16>
 8016200:	4629      	mov	r1, r5
 8016202:	f000 f899 	bl	8016338 <_malloc_r>
 8016206:	4606      	mov	r6, r0
 8016208:	b928      	cbnz	r0, 8016216 <_calloc_r+0x1e>
 801620a:	4630      	mov	r0, r6
 801620c:	bd70      	pop	{r4, r5, r6, pc}
 801620e:	220c      	movs	r2, #12
 8016210:	6002      	str	r2, [r0, #0]
 8016212:	2600      	movs	r6, #0
 8016214:	e7f9      	b.n	801620a <_calloc_r+0x12>
 8016216:	462a      	mov	r2, r5
 8016218:	4621      	mov	r1, r4
 801621a:	f000 fcc5 	bl	8016ba8 <memset>
 801621e:	e7f4      	b.n	801620a <_calloc_r+0x12>

08016220 <exit>:
 8016220:	b508      	push	{r3, lr}
 8016222:	4b06      	ldr	r3, [pc, #24]	@ (801623c <exit+0x1c>)
 8016224:	4604      	mov	r4, r0
 8016226:	b113      	cbz	r3, 801622e <exit+0xe>
 8016228:	2100      	movs	r1, #0
 801622a:	f3af 8000 	nop.w
 801622e:	4b04      	ldr	r3, [pc, #16]	@ (8016240 <exit+0x20>)
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	b103      	cbz	r3, 8016236 <exit+0x16>
 8016234:	4798      	blx	r3
 8016236:	4620      	mov	r0, r4
 8016238:	f7ed f818 	bl	800326c <_exit>
 801623c:	00000000 	.word	0x00000000
 8016240:	2000ee08 	.word	0x2000ee08

08016244 <getenv>:
 8016244:	b507      	push	{r0, r1, r2, lr}
 8016246:	4b04      	ldr	r3, [pc, #16]	@ (8016258 <getenv+0x14>)
 8016248:	4601      	mov	r1, r0
 801624a:	aa01      	add	r2, sp, #4
 801624c:	6818      	ldr	r0, [r3, #0]
 801624e:	f000 f805 	bl	801625c <_findenv_r>
 8016252:	b003      	add	sp, #12
 8016254:	f85d fb04 	ldr.w	pc, [sp], #4
 8016258:	200006a4 	.word	0x200006a4

0801625c <_findenv_r>:
 801625c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016260:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 80162d0 <_findenv_r+0x74>
 8016264:	4606      	mov	r6, r0
 8016266:	4689      	mov	r9, r1
 8016268:	4617      	mov	r7, r2
 801626a:	f000 fd93 	bl	8016d94 <__env_lock>
 801626e:	f8da 4000 	ldr.w	r4, [sl]
 8016272:	b134      	cbz	r4, 8016282 <_findenv_r+0x26>
 8016274:	464b      	mov	r3, r9
 8016276:	4698      	mov	r8, r3
 8016278:	f813 2b01 	ldrb.w	r2, [r3], #1
 801627c:	b13a      	cbz	r2, 801628e <_findenv_r+0x32>
 801627e:	2a3d      	cmp	r2, #61	@ 0x3d
 8016280:	d1f9      	bne.n	8016276 <_findenv_r+0x1a>
 8016282:	4630      	mov	r0, r6
 8016284:	f000 fd8c 	bl	8016da0 <__env_unlock>
 8016288:	2000      	movs	r0, #0
 801628a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801628e:	eba8 0809 	sub.w	r8, r8, r9
 8016292:	46a3      	mov	fp, r4
 8016294:	f854 0b04 	ldr.w	r0, [r4], #4
 8016298:	2800      	cmp	r0, #0
 801629a:	d0f2      	beq.n	8016282 <_findenv_r+0x26>
 801629c:	4642      	mov	r2, r8
 801629e:	4649      	mov	r1, r9
 80162a0:	f000 fc97 	bl	8016bd2 <strncmp>
 80162a4:	2800      	cmp	r0, #0
 80162a6:	d1f4      	bne.n	8016292 <_findenv_r+0x36>
 80162a8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80162ac:	eb03 0508 	add.w	r5, r3, r8
 80162b0:	f813 3008 	ldrb.w	r3, [r3, r8]
 80162b4:	2b3d      	cmp	r3, #61	@ 0x3d
 80162b6:	d1ec      	bne.n	8016292 <_findenv_r+0x36>
 80162b8:	f8da 3000 	ldr.w	r3, [sl]
 80162bc:	ebab 0303 	sub.w	r3, fp, r3
 80162c0:	109b      	asrs	r3, r3, #2
 80162c2:	4630      	mov	r0, r6
 80162c4:	603b      	str	r3, [r7, #0]
 80162c6:	f000 fd6b 	bl	8016da0 <__env_unlock>
 80162ca:	1c68      	adds	r0, r5, #1
 80162cc:	e7dd      	b.n	801628a <_findenv_r+0x2e>
 80162ce:	bf00      	nop
 80162d0:	2000001c 	.word	0x2000001c

080162d4 <malloc>:
 80162d4:	4b02      	ldr	r3, [pc, #8]	@ (80162e0 <malloc+0xc>)
 80162d6:	4601      	mov	r1, r0
 80162d8:	6818      	ldr	r0, [r3, #0]
 80162da:	f000 b82d 	b.w	8016338 <_malloc_r>
 80162de:	bf00      	nop
 80162e0:	200006a4 	.word	0x200006a4

080162e4 <free>:
 80162e4:	4b02      	ldr	r3, [pc, #8]	@ (80162f0 <free+0xc>)
 80162e6:	4601      	mov	r1, r0
 80162e8:	6818      	ldr	r0, [r3, #0]
 80162ea:	f000 bd5f 	b.w	8016dac <_free_r>
 80162ee:	bf00      	nop
 80162f0:	200006a4 	.word	0x200006a4

080162f4 <sbrk_aligned>:
 80162f4:	b570      	push	{r4, r5, r6, lr}
 80162f6:	4e0f      	ldr	r6, [pc, #60]	@ (8016334 <sbrk_aligned+0x40>)
 80162f8:	460c      	mov	r4, r1
 80162fa:	6831      	ldr	r1, [r6, #0]
 80162fc:	4605      	mov	r5, r0
 80162fe:	b911      	cbnz	r1, 8016306 <sbrk_aligned+0x12>
 8016300:	f000 fcc4 	bl	8016c8c <_sbrk_r>
 8016304:	6030      	str	r0, [r6, #0]
 8016306:	4621      	mov	r1, r4
 8016308:	4628      	mov	r0, r5
 801630a:	f000 fcbf 	bl	8016c8c <_sbrk_r>
 801630e:	1c43      	adds	r3, r0, #1
 8016310:	d103      	bne.n	801631a <sbrk_aligned+0x26>
 8016312:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8016316:	4620      	mov	r0, r4
 8016318:	bd70      	pop	{r4, r5, r6, pc}
 801631a:	1cc4      	adds	r4, r0, #3
 801631c:	f024 0403 	bic.w	r4, r4, #3
 8016320:	42a0      	cmp	r0, r4
 8016322:	d0f8      	beq.n	8016316 <sbrk_aligned+0x22>
 8016324:	1a21      	subs	r1, r4, r0
 8016326:	4628      	mov	r0, r5
 8016328:	f000 fcb0 	bl	8016c8c <_sbrk_r>
 801632c:	3001      	adds	r0, #1
 801632e:	d1f2      	bne.n	8016316 <sbrk_aligned+0x22>
 8016330:	e7ef      	b.n	8016312 <sbrk_aligned+0x1e>
 8016332:	bf00      	nop
 8016334:	2000ecc8 	.word	0x2000ecc8

08016338 <_malloc_r>:
 8016338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801633c:	1ccd      	adds	r5, r1, #3
 801633e:	f025 0503 	bic.w	r5, r5, #3
 8016342:	3508      	adds	r5, #8
 8016344:	2d0c      	cmp	r5, #12
 8016346:	bf38      	it	cc
 8016348:	250c      	movcc	r5, #12
 801634a:	2d00      	cmp	r5, #0
 801634c:	4606      	mov	r6, r0
 801634e:	db01      	blt.n	8016354 <_malloc_r+0x1c>
 8016350:	42a9      	cmp	r1, r5
 8016352:	d904      	bls.n	801635e <_malloc_r+0x26>
 8016354:	230c      	movs	r3, #12
 8016356:	6033      	str	r3, [r6, #0]
 8016358:	2000      	movs	r0, #0
 801635a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801635e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016434 <_malloc_r+0xfc>
 8016362:	f000 f869 	bl	8016438 <__malloc_lock>
 8016366:	f8d8 3000 	ldr.w	r3, [r8]
 801636a:	461c      	mov	r4, r3
 801636c:	bb44      	cbnz	r4, 80163c0 <_malloc_r+0x88>
 801636e:	4629      	mov	r1, r5
 8016370:	4630      	mov	r0, r6
 8016372:	f7ff ffbf 	bl	80162f4 <sbrk_aligned>
 8016376:	1c43      	adds	r3, r0, #1
 8016378:	4604      	mov	r4, r0
 801637a:	d158      	bne.n	801642e <_malloc_r+0xf6>
 801637c:	f8d8 4000 	ldr.w	r4, [r8]
 8016380:	4627      	mov	r7, r4
 8016382:	2f00      	cmp	r7, #0
 8016384:	d143      	bne.n	801640e <_malloc_r+0xd6>
 8016386:	2c00      	cmp	r4, #0
 8016388:	d04b      	beq.n	8016422 <_malloc_r+0xea>
 801638a:	6823      	ldr	r3, [r4, #0]
 801638c:	4639      	mov	r1, r7
 801638e:	4630      	mov	r0, r6
 8016390:	eb04 0903 	add.w	r9, r4, r3
 8016394:	f000 fc7a 	bl	8016c8c <_sbrk_r>
 8016398:	4581      	cmp	r9, r0
 801639a:	d142      	bne.n	8016422 <_malloc_r+0xea>
 801639c:	6821      	ldr	r1, [r4, #0]
 801639e:	1a6d      	subs	r5, r5, r1
 80163a0:	4629      	mov	r1, r5
 80163a2:	4630      	mov	r0, r6
 80163a4:	f7ff ffa6 	bl	80162f4 <sbrk_aligned>
 80163a8:	3001      	adds	r0, #1
 80163aa:	d03a      	beq.n	8016422 <_malloc_r+0xea>
 80163ac:	6823      	ldr	r3, [r4, #0]
 80163ae:	442b      	add	r3, r5
 80163b0:	6023      	str	r3, [r4, #0]
 80163b2:	f8d8 3000 	ldr.w	r3, [r8]
 80163b6:	685a      	ldr	r2, [r3, #4]
 80163b8:	bb62      	cbnz	r2, 8016414 <_malloc_r+0xdc>
 80163ba:	f8c8 7000 	str.w	r7, [r8]
 80163be:	e00f      	b.n	80163e0 <_malloc_r+0xa8>
 80163c0:	6822      	ldr	r2, [r4, #0]
 80163c2:	1b52      	subs	r2, r2, r5
 80163c4:	d420      	bmi.n	8016408 <_malloc_r+0xd0>
 80163c6:	2a0b      	cmp	r2, #11
 80163c8:	d917      	bls.n	80163fa <_malloc_r+0xc2>
 80163ca:	1961      	adds	r1, r4, r5
 80163cc:	42a3      	cmp	r3, r4
 80163ce:	6025      	str	r5, [r4, #0]
 80163d0:	bf18      	it	ne
 80163d2:	6059      	strne	r1, [r3, #4]
 80163d4:	6863      	ldr	r3, [r4, #4]
 80163d6:	bf08      	it	eq
 80163d8:	f8c8 1000 	streq.w	r1, [r8]
 80163dc:	5162      	str	r2, [r4, r5]
 80163de:	604b      	str	r3, [r1, #4]
 80163e0:	4630      	mov	r0, r6
 80163e2:	f000 f82f 	bl	8016444 <__malloc_unlock>
 80163e6:	f104 000b 	add.w	r0, r4, #11
 80163ea:	1d23      	adds	r3, r4, #4
 80163ec:	f020 0007 	bic.w	r0, r0, #7
 80163f0:	1ac2      	subs	r2, r0, r3
 80163f2:	bf1c      	itt	ne
 80163f4:	1a1b      	subne	r3, r3, r0
 80163f6:	50a3      	strne	r3, [r4, r2]
 80163f8:	e7af      	b.n	801635a <_malloc_r+0x22>
 80163fa:	6862      	ldr	r2, [r4, #4]
 80163fc:	42a3      	cmp	r3, r4
 80163fe:	bf0c      	ite	eq
 8016400:	f8c8 2000 	streq.w	r2, [r8]
 8016404:	605a      	strne	r2, [r3, #4]
 8016406:	e7eb      	b.n	80163e0 <_malloc_r+0xa8>
 8016408:	4623      	mov	r3, r4
 801640a:	6864      	ldr	r4, [r4, #4]
 801640c:	e7ae      	b.n	801636c <_malloc_r+0x34>
 801640e:	463c      	mov	r4, r7
 8016410:	687f      	ldr	r7, [r7, #4]
 8016412:	e7b6      	b.n	8016382 <_malloc_r+0x4a>
 8016414:	461a      	mov	r2, r3
 8016416:	685b      	ldr	r3, [r3, #4]
 8016418:	42a3      	cmp	r3, r4
 801641a:	d1fb      	bne.n	8016414 <_malloc_r+0xdc>
 801641c:	2300      	movs	r3, #0
 801641e:	6053      	str	r3, [r2, #4]
 8016420:	e7de      	b.n	80163e0 <_malloc_r+0xa8>
 8016422:	230c      	movs	r3, #12
 8016424:	6033      	str	r3, [r6, #0]
 8016426:	4630      	mov	r0, r6
 8016428:	f000 f80c 	bl	8016444 <__malloc_unlock>
 801642c:	e794      	b.n	8016358 <_malloc_r+0x20>
 801642e:	6005      	str	r5, [r0, #0]
 8016430:	e7d6      	b.n	80163e0 <_malloc_r+0xa8>
 8016432:	bf00      	nop
 8016434:	2000eccc 	.word	0x2000eccc

08016438 <__malloc_lock>:
 8016438:	4801      	ldr	r0, [pc, #4]	@ (8016440 <__malloc_lock+0x8>)
 801643a:	f000 bc74 	b.w	8016d26 <__retarget_lock_acquire_recursive>
 801643e:	bf00      	nop
 8016440:	2000ee11 	.word	0x2000ee11

08016444 <__malloc_unlock>:
 8016444:	4801      	ldr	r0, [pc, #4]	@ (801644c <__malloc_unlock+0x8>)
 8016446:	f000 bc6f 	b.w	8016d28 <__retarget_lock_release_recursive>
 801644a:	bf00      	nop
 801644c:	2000ee11 	.word	0x2000ee11

08016450 <srand>:
 8016450:	b538      	push	{r3, r4, r5, lr}
 8016452:	4b10      	ldr	r3, [pc, #64]	@ (8016494 <srand+0x44>)
 8016454:	681d      	ldr	r5, [r3, #0]
 8016456:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016458:	4604      	mov	r4, r0
 801645a:	b9b3      	cbnz	r3, 801648a <srand+0x3a>
 801645c:	2018      	movs	r0, #24
 801645e:	f7ff ff39 	bl	80162d4 <malloc>
 8016462:	4602      	mov	r2, r0
 8016464:	6328      	str	r0, [r5, #48]	@ 0x30
 8016466:	b920      	cbnz	r0, 8016472 <srand+0x22>
 8016468:	4b0b      	ldr	r3, [pc, #44]	@ (8016498 <srand+0x48>)
 801646a:	480c      	ldr	r0, [pc, #48]	@ (801649c <srand+0x4c>)
 801646c:	2146      	movs	r1, #70	@ 0x46
 801646e:	f000 fc73 	bl	8016d58 <__assert_func>
 8016472:	490b      	ldr	r1, [pc, #44]	@ (80164a0 <srand+0x50>)
 8016474:	4b0b      	ldr	r3, [pc, #44]	@ (80164a4 <srand+0x54>)
 8016476:	e9c0 1300 	strd	r1, r3, [r0]
 801647a:	4b0b      	ldr	r3, [pc, #44]	@ (80164a8 <srand+0x58>)
 801647c:	6083      	str	r3, [r0, #8]
 801647e:	230b      	movs	r3, #11
 8016480:	8183      	strh	r3, [r0, #12]
 8016482:	2100      	movs	r1, #0
 8016484:	2001      	movs	r0, #1
 8016486:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801648a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801648c:	2200      	movs	r2, #0
 801648e:	611c      	str	r4, [r3, #16]
 8016490:	615a      	str	r2, [r3, #20]
 8016492:	bd38      	pop	{r3, r4, r5, pc}
 8016494:	200006a4 	.word	0x200006a4
 8016498:	080187b0 	.word	0x080187b0
 801649c:	080187c7 	.word	0x080187c7
 80164a0:	abcd330e 	.word	0xabcd330e
 80164a4:	e66d1234 	.word	0xe66d1234
 80164a8:	0005deec 	.word	0x0005deec

080164ac <rand>:
 80164ac:	4b16      	ldr	r3, [pc, #88]	@ (8016508 <rand+0x5c>)
 80164ae:	b510      	push	{r4, lr}
 80164b0:	681c      	ldr	r4, [r3, #0]
 80164b2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80164b4:	b9b3      	cbnz	r3, 80164e4 <rand+0x38>
 80164b6:	2018      	movs	r0, #24
 80164b8:	f7ff ff0c 	bl	80162d4 <malloc>
 80164bc:	4602      	mov	r2, r0
 80164be:	6320      	str	r0, [r4, #48]	@ 0x30
 80164c0:	b920      	cbnz	r0, 80164cc <rand+0x20>
 80164c2:	4b12      	ldr	r3, [pc, #72]	@ (801650c <rand+0x60>)
 80164c4:	4812      	ldr	r0, [pc, #72]	@ (8016510 <rand+0x64>)
 80164c6:	2152      	movs	r1, #82	@ 0x52
 80164c8:	f000 fc46 	bl	8016d58 <__assert_func>
 80164cc:	4911      	ldr	r1, [pc, #68]	@ (8016514 <rand+0x68>)
 80164ce:	4b12      	ldr	r3, [pc, #72]	@ (8016518 <rand+0x6c>)
 80164d0:	e9c0 1300 	strd	r1, r3, [r0]
 80164d4:	4b11      	ldr	r3, [pc, #68]	@ (801651c <rand+0x70>)
 80164d6:	6083      	str	r3, [r0, #8]
 80164d8:	230b      	movs	r3, #11
 80164da:	8183      	strh	r3, [r0, #12]
 80164dc:	2100      	movs	r1, #0
 80164de:	2001      	movs	r0, #1
 80164e0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80164e4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80164e6:	480e      	ldr	r0, [pc, #56]	@ (8016520 <rand+0x74>)
 80164e8:	690b      	ldr	r3, [r1, #16]
 80164ea:	694c      	ldr	r4, [r1, #20]
 80164ec:	4a0d      	ldr	r2, [pc, #52]	@ (8016524 <rand+0x78>)
 80164ee:	4358      	muls	r0, r3
 80164f0:	fb02 0004 	mla	r0, r2, r4, r0
 80164f4:	fba3 3202 	umull	r3, r2, r3, r2
 80164f8:	3301      	adds	r3, #1
 80164fa:	eb40 0002 	adc.w	r0, r0, r2
 80164fe:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016502:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8016506:	bd10      	pop	{r4, pc}
 8016508:	200006a4 	.word	0x200006a4
 801650c:	080187b0 	.word	0x080187b0
 8016510:	080187c7 	.word	0x080187c7
 8016514:	abcd330e 	.word	0xabcd330e
 8016518:	e66d1234 	.word	0xe66d1234
 801651c:	0005deec 	.word	0x0005deec
 8016520:	5851f42d 	.word	0x5851f42d
 8016524:	4c957f2d 	.word	0x4c957f2d

08016528 <realloc>:
 8016528:	4b02      	ldr	r3, [pc, #8]	@ (8016534 <realloc+0xc>)
 801652a:	460a      	mov	r2, r1
 801652c:	4601      	mov	r1, r0
 801652e:	6818      	ldr	r0, [r3, #0]
 8016530:	f000 b802 	b.w	8016538 <_realloc_r>
 8016534:	200006a4 	.word	0x200006a4

08016538 <_realloc_r>:
 8016538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801653c:	4607      	mov	r7, r0
 801653e:	4614      	mov	r4, r2
 8016540:	460d      	mov	r5, r1
 8016542:	b921      	cbnz	r1, 801654e <_realloc_r+0x16>
 8016544:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016548:	4611      	mov	r1, r2
 801654a:	f7ff bef5 	b.w	8016338 <_malloc_r>
 801654e:	b92a      	cbnz	r2, 801655c <_realloc_r+0x24>
 8016550:	f000 fc2c 	bl	8016dac <_free_r>
 8016554:	4625      	mov	r5, r4
 8016556:	4628      	mov	r0, r5
 8016558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801655c:	f000 fc70 	bl	8016e40 <_malloc_usable_size_r>
 8016560:	4284      	cmp	r4, r0
 8016562:	4606      	mov	r6, r0
 8016564:	d802      	bhi.n	801656c <_realloc_r+0x34>
 8016566:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801656a:	d8f4      	bhi.n	8016556 <_realloc_r+0x1e>
 801656c:	4621      	mov	r1, r4
 801656e:	4638      	mov	r0, r7
 8016570:	f7ff fee2 	bl	8016338 <_malloc_r>
 8016574:	4680      	mov	r8, r0
 8016576:	b908      	cbnz	r0, 801657c <_realloc_r+0x44>
 8016578:	4645      	mov	r5, r8
 801657a:	e7ec      	b.n	8016556 <_realloc_r+0x1e>
 801657c:	42b4      	cmp	r4, r6
 801657e:	4622      	mov	r2, r4
 8016580:	4629      	mov	r1, r5
 8016582:	bf28      	it	cs
 8016584:	4632      	movcs	r2, r6
 8016586:	f000 fbd8 	bl	8016d3a <memcpy>
 801658a:	4629      	mov	r1, r5
 801658c:	4638      	mov	r0, r7
 801658e:	f000 fc0d 	bl	8016dac <_free_r>
 8016592:	e7f1      	b.n	8016578 <_realloc_r+0x40>

08016594 <_strtoul_l.isra.0>:
 8016594:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016598:	4e34      	ldr	r6, [pc, #208]	@ (801666c <_strtoul_l.isra.0+0xd8>)
 801659a:	4686      	mov	lr, r0
 801659c:	460d      	mov	r5, r1
 801659e:	4628      	mov	r0, r5
 80165a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80165a4:	5d37      	ldrb	r7, [r6, r4]
 80165a6:	f017 0708 	ands.w	r7, r7, #8
 80165aa:	d1f8      	bne.n	801659e <_strtoul_l.isra.0+0xa>
 80165ac:	2c2d      	cmp	r4, #45	@ 0x2d
 80165ae:	d110      	bne.n	80165d2 <_strtoul_l.isra.0+0x3e>
 80165b0:	782c      	ldrb	r4, [r5, #0]
 80165b2:	2701      	movs	r7, #1
 80165b4:	1c85      	adds	r5, r0, #2
 80165b6:	f033 0010 	bics.w	r0, r3, #16
 80165ba:	d115      	bne.n	80165e8 <_strtoul_l.isra.0+0x54>
 80165bc:	2c30      	cmp	r4, #48	@ 0x30
 80165be:	d10d      	bne.n	80165dc <_strtoul_l.isra.0+0x48>
 80165c0:	7828      	ldrb	r0, [r5, #0]
 80165c2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80165c6:	2858      	cmp	r0, #88	@ 0x58
 80165c8:	d108      	bne.n	80165dc <_strtoul_l.isra.0+0x48>
 80165ca:	786c      	ldrb	r4, [r5, #1]
 80165cc:	3502      	adds	r5, #2
 80165ce:	2310      	movs	r3, #16
 80165d0:	e00a      	b.n	80165e8 <_strtoul_l.isra.0+0x54>
 80165d2:	2c2b      	cmp	r4, #43	@ 0x2b
 80165d4:	bf04      	itt	eq
 80165d6:	782c      	ldrbeq	r4, [r5, #0]
 80165d8:	1c85      	addeq	r5, r0, #2
 80165da:	e7ec      	b.n	80165b6 <_strtoul_l.isra.0+0x22>
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d1f6      	bne.n	80165ce <_strtoul_l.isra.0+0x3a>
 80165e0:	2c30      	cmp	r4, #48	@ 0x30
 80165e2:	bf14      	ite	ne
 80165e4:	230a      	movne	r3, #10
 80165e6:	2308      	moveq	r3, #8
 80165e8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80165ec:	2600      	movs	r6, #0
 80165ee:	fbb8 f8f3 	udiv	r8, r8, r3
 80165f2:	fb03 f908 	mul.w	r9, r3, r8
 80165f6:	ea6f 0909 	mvn.w	r9, r9
 80165fa:	4630      	mov	r0, r6
 80165fc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8016600:	f1bc 0f09 	cmp.w	ip, #9
 8016604:	d810      	bhi.n	8016628 <_strtoul_l.isra.0+0x94>
 8016606:	4664      	mov	r4, ip
 8016608:	42a3      	cmp	r3, r4
 801660a:	dd1e      	ble.n	801664a <_strtoul_l.isra.0+0xb6>
 801660c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8016610:	d007      	beq.n	8016622 <_strtoul_l.isra.0+0x8e>
 8016612:	4580      	cmp	r8, r0
 8016614:	d316      	bcc.n	8016644 <_strtoul_l.isra.0+0xb0>
 8016616:	d101      	bne.n	801661c <_strtoul_l.isra.0+0x88>
 8016618:	45a1      	cmp	r9, r4
 801661a:	db13      	blt.n	8016644 <_strtoul_l.isra.0+0xb0>
 801661c:	fb00 4003 	mla	r0, r0, r3, r4
 8016620:	2601      	movs	r6, #1
 8016622:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016626:	e7e9      	b.n	80165fc <_strtoul_l.isra.0+0x68>
 8016628:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801662c:	f1bc 0f19 	cmp.w	ip, #25
 8016630:	d801      	bhi.n	8016636 <_strtoul_l.isra.0+0xa2>
 8016632:	3c37      	subs	r4, #55	@ 0x37
 8016634:	e7e8      	b.n	8016608 <_strtoul_l.isra.0+0x74>
 8016636:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801663a:	f1bc 0f19 	cmp.w	ip, #25
 801663e:	d804      	bhi.n	801664a <_strtoul_l.isra.0+0xb6>
 8016640:	3c57      	subs	r4, #87	@ 0x57
 8016642:	e7e1      	b.n	8016608 <_strtoul_l.isra.0+0x74>
 8016644:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8016648:	e7eb      	b.n	8016622 <_strtoul_l.isra.0+0x8e>
 801664a:	1c73      	adds	r3, r6, #1
 801664c:	d106      	bne.n	801665c <_strtoul_l.isra.0+0xc8>
 801664e:	2322      	movs	r3, #34	@ 0x22
 8016650:	f8ce 3000 	str.w	r3, [lr]
 8016654:	4630      	mov	r0, r6
 8016656:	b932      	cbnz	r2, 8016666 <_strtoul_l.isra.0+0xd2>
 8016658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801665c:	b107      	cbz	r7, 8016660 <_strtoul_l.isra.0+0xcc>
 801665e:	4240      	negs	r0, r0
 8016660:	2a00      	cmp	r2, #0
 8016662:	d0f9      	beq.n	8016658 <_strtoul_l.isra.0+0xc4>
 8016664:	b106      	cbz	r6, 8016668 <_strtoul_l.isra.0+0xd4>
 8016666:	1e69      	subs	r1, r5, #1
 8016668:	6011      	str	r1, [r2, #0]
 801666a:	e7f5      	b.n	8016658 <_strtoul_l.isra.0+0xc4>
 801666c:	0801888f 	.word	0x0801888f

08016670 <strtoul>:
 8016670:	4613      	mov	r3, r2
 8016672:	460a      	mov	r2, r1
 8016674:	4601      	mov	r1, r0
 8016676:	4802      	ldr	r0, [pc, #8]	@ (8016680 <strtoul+0x10>)
 8016678:	6800      	ldr	r0, [r0, #0]
 801667a:	f7ff bf8b 	b.w	8016594 <_strtoul_l.isra.0>
 801667e:	bf00      	nop
 8016680:	200006a4 	.word	0x200006a4

08016684 <std>:
 8016684:	2300      	movs	r3, #0
 8016686:	b510      	push	{r4, lr}
 8016688:	4604      	mov	r4, r0
 801668a:	e9c0 3300 	strd	r3, r3, [r0]
 801668e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016692:	6083      	str	r3, [r0, #8]
 8016694:	8181      	strh	r1, [r0, #12]
 8016696:	6643      	str	r3, [r0, #100]	@ 0x64
 8016698:	81c2      	strh	r2, [r0, #14]
 801669a:	6183      	str	r3, [r0, #24]
 801669c:	4619      	mov	r1, r3
 801669e:	2208      	movs	r2, #8
 80166a0:	305c      	adds	r0, #92	@ 0x5c
 80166a2:	f000 fa81 	bl	8016ba8 <memset>
 80166a6:	4b0d      	ldr	r3, [pc, #52]	@ (80166dc <std+0x58>)
 80166a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80166aa:	4b0d      	ldr	r3, [pc, #52]	@ (80166e0 <std+0x5c>)
 80166ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80166ae:	4b0d      	ldr	r3, [pc, #52]	@ (80166e4 <std+0x60>)
 80166b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80166b2:	4b0d      	ldr	r3, [pc, #52]	@ (80166e8 <std+0x64>)
 80166b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80166b6:	4b0d      	ldr	r3, [pc, #52]	@ (80166ec <std+0x68>)
 80166b8:	6224      	str	r4, [r4, #32]
 80166ba:	429c      	cmp	r4, r3
 80166bc:	d006      	beq.n	80166cc <std+0x48>
 80166be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80166c2:	4294      	cmp	r4, r2
 80166c4:	d002      	beq.n	80166cc <std+0x48>
 80166c6:	33d0      	adds	r3, #208	@ 0xd0
 80166c8:	429c      	cmp	r4, r3
 80166ca:	d105      	bne.n	80166d8 <std+0x54>
 80166cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80166d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80166d4:	f000 bb26 	b.w	8016d24 <__retarget_lock_init_recursive>
 80166d8:	bd10      	pop	{r4, pc}
 80166da:	bf00      	nop
 80166dc:	0801694d 	.word	0x0801694d
 80166e0:	0801696f 	.word	0x0801696f
 80166e4:	080169a7 	.word	0x080169a7
 80166e8:	080169cb 	.word	0x080169cb
 80166ec:	2000ecd0 	.word	0x2000ecd0

080166f0 <stdio_exit_handler>:
 80166f0:	4a02      	ldr	r2, [pc, #8]	@ (80166fc <stdio_exit_handler+0xc>)
 80166f2:	4903      	ldr	r1, [pc, #12]	@ (8016700 <stdio_exit_handler+0x10>)
 80166f4:	4803      	ldr	r0, [pc, #12]	@ (8016704 <stdio_exit_handler+0x14>)
 80166f6:	f000 b869 	b.w	80167cc <_fwalk_sglue>
 80166fa:	bf00      	nop
 80166fc:	20000698 	.word	0x20000698
 8016700:	080177a5 	.word	0x080177a5
 8016704:	200006a8 	.word	0x200006a8

08016708 <cleanup_stdio>:
 8016708:	6841      	ldr	r1, [r0, #4]
 801670a:	4b0c      	ldr	r3, [pc, #48]	@ (801673c <cleanup_stdio+0x34>)
 801670c:	4299      	cmp	r1, r3
 801670e:	b510      	push	{r4, lr}
 8016710:	4604      	mov	r4, r0
 8016712:	d001      	beq.n	8016718 <cleanup_stdio+0x10>
 8016714:	f001 f846 	bl	80177a4 <_fflush_r>
 8016718:	68a1      	ldr	r1, [r4, #8]
 801671a:	4b09      	ldr	r3, [pc, #36]	@ (8016740 <cleanup_stdio+0x38>)
 801671c:	4299      	cmp	r1, r3
 801671e:	d002      	beq.n	8016726 <cleanup_stdio+0x1e>
 8016720:	4620      	mov	r0, r4
 8016722:	f001 f83f 	bl	80177a4 <_fflush_r>
 8016726:	68e1      	ldr	r1, [r4, #12]
 8016728:	4b06      	ldr	r3, [pc, #24]	@ (8016744 <cleanup_stdio+0x3c>)
 801672a:	4299      	cmp	r1, r3
 801672c:	d004      	beq.n	8016738 <cleanup_stdio+0x30>
 801672e:	4620      	mov	r0, r4
 8016730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016734:	f001 b836 	b.w	80177a4 <_fflush_r>
 8016738:	bd10      	pop	{r4, pc}
 801673a:	bf00      	nop
 801673c:	2000ecd0 	.word	0x2000ecd0
 8016740:	2000ed38 	.word	0x2000ed38
 8016744:	2000eda0 	.word	0x2000eda0

08016748 <global_stdio_init.part.0>:
 8016748:	b510      	push	{r4, lr}
 801674a:	4b0b      	ldr	r3, [pc, #44]	@ (8016778 <global_stdio_init.part.0+0x30>)
 801674c:	4c0b      	ldr	r4, [pc, #44]	@ (801677c <global_stdio_init.part.0+0x34>)
 801674e:	4a0c      	ldr	r2, [pc, #48]	@ (8016780 <global_stdio_init.part.0+0x38>)
 8016750:	601a      	str	r2, [r3, #0]
 8016752:	4620      	mov	r0, r4
 8016754:	2200      	movs	r2, #0
 8016756:	2104      	movs	r1, #4
 8016758:	f7ff ff94 	bl	8016684 <std>
 801675c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016760:	2201      	movs	r2, #1
 8016762:	2109      	movs	r1, #9
 8016764:	f7ff ff8e 	bl	8016684 <std>
 8016768:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801676c:	2202      	movs	r2, #2
 801676e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016772:	2112      	movs	r1, #18
 8016774:	f7ff bf86 	b.w	8016684 <std>
 8016778:	2000ee08 	.word	0x2000ee08
 801677c:	2000ecd0 	.word	0x2000ecd0
 8016780:	080166f1 	.word	0x080166f1

08016784 <__sfp_lock_acquire>:
 8016784:	4801      	ldr	r0, [pc, #4]	@ (801678c <__sfp_lock_acquire+0x8>)
 8016786:	f000 bace 	b.w	8016d26 <__retarget_lock_acquire_recursive>
 801678a:	bf00      	nop
 801678c:	2000ee12 	.word	0x2000ee12

08016790 <__sfp_lock_release>:
 8016790:	4801      	ldr	r0, [pc, #4]	@ (8016798 <__sfp_lock_release+0x8>)
 8016792:	f000 bac9 	b.w	8016d28 <__retarget_lock_release_recursive>
 8016796:	bf00      	nop
 8016798:	2000ee12 	.word	0x2000ee12

0801679c <__sinit>:
 801679c:	b510      	push	{r4, lr}
 801679e:	4604      	mov	r4, r0
 80167a0:	f7ff fff0 	bl	8016784 <__sfp_lock_acquire>
 80167a4:	6a23      	ldr	r3, [r4, #32]
 80167a6:	b11b      	cbz	r3, 80167b0 <__sinit+0x14>
 80167a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80167ac:	f7ff bff0 	b.w	8016790 <__sfp_lock_release>
 80167b0:	4b04      	ldr	r3, [pc, #16]	@ (80167c4 <__sinit+0x28>)
 80167b2:	6223      	str	r3, [r4, #32]
 80167b4:	4b04      	ldr	r3, [pc, #16]	@ (80167c8 <__sinit+0x2c>)
 80167b6:	681b      	ldr	r3, [r3, #0]
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d1f5      	bne.n	80167a8 <__sinit+0xc>
 80167bc:	f7ff ffc4 	bl	8016748 <global_stdio_init.part.0>
 80167c0:	e7f2      	b.n	80167a8 <__sinit+0xc>
 80167c2:	bf00      	nop
 80167c4:	08016709 	.word	0x08016709
 80167c8:	2000ee08 	.word	0x2000ee08

080167cc <_fwalk_sglue>:
 80167cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80167d0:	4607      	mov	r7, r0
 80167d2:	4688      	mov	r8, r1
 80167d4:	4614      	mov	r4, r2
 80167d6:	2600      	movs	r6, #0
 80167d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80167dc:	f1b9 0901 	subs.w	r9, r9, #1
 80167e0:	d505      	bpl.n	80167ee <_fwalk_sglue+0x22>
 80167e2:	6824      	ldr	r4, [r4, #0]
 80167e4:	2c00      	cmp	r4, #0
 80167e6:	d1f7      	bne.n	80167d8 <_fwalk_sglue+0xc>
 80167e8:	4630      	mov	r0, r6
 80167ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80167ee:	89ab      	ldrh	r3, [r5, #12]
 80167f0:	2b01      	cmp	r3, #1
 80167f2:	d907      	bls.n	8016804 <_fwalk_sglue+0x38>
 80167f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80167f8:	3301      	adds	r3, #1
 80167fa:	d003      	beq.n	8016804 <_fwalk_sglue+0x38>
 80167fc:	4629      	mov	r1, r5
 80167fe:	4638      	mov	r0, r7
 8016800:	47c0      	blx	r8
 8016802:	4306      	orrs	r6, r0
 8016804:	3568      	adds	r5, #104	@ 0x68
 8016806:	e7e9      	b.n	80167dc <_fwalk_sglue+0x10>

08016808 <_fwrite_r>:
 8016808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801680c:	9c08      	ldr	r4, [sp, #32]
 801680e:	468a      	mov	sl, r1
 8016810:	4690      	mov	r8, r2
 8016812:	fb02 f903 	mul.w	r9, r2, r3
 8016816:	4606      	mov	r6, r0
 8016818:	b118      	cbz	r0, 8016822 <_fwrite_r+0x1a>
 801681a:	6a03      	ldr	r3, [r0, #32]
 801681c:	b90b      	cbnz	r3, 8016822 <_fwrite_r+0x1a>
 801681e:	f7ff ffbd 	bl	801679c <__sinit>
 8016822:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016824:	07dd      	lsls	r5, r3, #31
 8016826:	d405      	bmi.n	8016834 <_fwrite_r+0x2c>
 8016828:	89a3      	ldrh	r3, [r4, #12]
 801682a:	0598      	lsls	r0, r3, #22
 801682c:	d402      	bmi.n	8016834 <_fwrite_r+0x2c>
 801682e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016830:	f000 fa79 	bl	8016d26 <__retarget_lock_acquire_recursive>
 8016834:	89a3      	ldrh	r3, [r4, #12]
 8016836:	0719      	lsls	r1, r3, #28
 8016838:	d516      	bpl.n	8016868 <_fwrite_r+0x60>
 801683a:	6923      	ldr	r3, [r4, #16]
 801683c:	b1a3      	cbz	r3, 8016868 <_fwrite_r+0x60>
 801683e:	2500      	movs	r5, #0
 8016840:	454d      	cmp	r5, r9
 8016842:	d01f      	beq.n	8016884 <_fwrite_r+0x7c>
 8016844:	68a7      	ldr	r7, [r4, #8]
 8016846:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801684a:	3f01      	subs	r7, #1
 801684c:	2f00      	cmp	r7, #0
 801684e:	60a7      	str	r7, [r4, #8]
 8016850:	da04      	bge.n	801685c <_fwrite_r+0x54>
 8016852:	69a3      	ldr	r3, [r4, #24]
 8016854:	429f      	cmp	r7, r3
 8016856:	db0f      	blt.n	8016878 <_fwrite_r+0x70>
 8016858:	290a      	cmp	r1, #10
 801685a:	d00d      	beq.n	8016878 <_fwrite_r+0x70>
 801685c:	6823      	ldr	r3, [r4, #0]
 801685e:	1c5a      	adds	r2, r3, #1
 8016860:	6022      	str	r2, [r4, #0]
 8016862:	7019      	strb	r1, [r3, #0]
 8016864:	3501      	adds	r5, #1
 8016866:	e7eb      	b.n	8016840 <_fwrite_r+0x38>
 8016868:	4621      	mov	r1, r4
 801686a:	4630      	mov	r0, r6
 801686c:	f000 f92c 	bl	8016ac8 <__swsetup_r>
 8016870:	2800      	cmp	r0, #0
 8016872:	d0e4      	beq.n	801683e <_fwrite_r+0x36>
 8016874:	2500      	movs	r5, #0
 8016876:	e005      	b.n	8016884 <_fwrite_r+0x7c>
 8016878:	4622      	mov	r2, r4
 801687a:	4630      	mov	r0, r6
 801687c:	f000 f8e6 	bl	8016a4c <__swbuf_r>
 8016880:	3001      	adds	r0, #1
 8016882:	d1ef      	bne.n	8016864 <_fwrite_r+0x5c>
 8016884:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016886:	07da      	lsls	r2, r3, #31
 8016888:	d405      	bmi.n	8016896 <_fwrite_r+0x8e>
 801688a:	89a3      	ldrh	r3, [r4, #12]
 801688c:	059b      	lsls	r3, r3, #22
 801688e:	d402      	bmi.n	8016896 <_fwrite_r+0x8e>
 8016890:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016892:	f000 fa49 	bl	8016d28 <__retarget_lock_release_recursive>
 8016896:	fbb5 f0f8 	udiv	r0, r5, r8
 801689a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080168a0 <fwrite>:
 80168a0:	b507      	push	{r0, r1, r2, lr}
 80168a2:	9300      	str	r3, [sp, #0]
 80168a4:	4613      	mov	r3, r2
 80168a6:	460a      	mov	r2, r1
 80168a8:	4601      	mov	r1, r0
 80168aa:	4803      	ldr	r0, [pc, #12]	@ (80168b8 <fwrite+0x18>)
 80168ac:	6800      	ldr	r0, [r0, #0]
 80168ae:	f7ff ffab 	bl	8016808 <_fwrite_r>
 80168b2:	b003      	add	sp, #12
 80168b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80168b8:	200006a4 	.word	0x200006a4

080168bc <iprintf>:
 80168bc:	b40f      	push	{r0, r1, r2, r3}
 80168be:	b507      	push	{r0, r1, r2, lr}
 80168c0:	4906      	ldr	r1, [pc, #24]	@ (80168dc <iprintf+0x20>)
 80168c2:	ab04      	add	r3, sp, #16
 80168c4:	6808      	ldr	r0, [r1, #0]
 80168c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80168ca:	6881      	ldr	r1, [r0, #8]
 80168cc:	9301      	str	r3, [sp, #4]
 80168ce:	f000 fc41 	bl	8017154 <_vfiprintf_r>
 80168d2:	b003      	add	sp, #12
 80168d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80168d8:	b004      	add	sp, #16
 80168da:	4770      	bx	lr
 80168dc:	200006a4 	.word	0x200006a4

080168e0 <sniprintf>:
 80168e0:	b40c      	push	{r2, r3}
 80168e2:	b530      	push	{r4, r5, lr}
 80168e4:	4b18      	ldr	r3, [pc, #96]	@ (8016948 <sniprintf+0x68>)
 80168e6:	1e0c      	subs	r4, r1, #0
 80168e8:	681d      	ldr	r5, [r3, #0]
 80168ea:	b09d      	sub	sp, #116	@ 0x74
 80168ec:	da08      	bge.n	8016900 <sniprintf+0x20>
 80168ee:	238b      	movs	r3, #139	@ 0x8b
 80168f0:	602b      	str	r3, [r5, #0]
 80168f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80168f6:	b01d      	add	sp, #116	@ 0x74
 80168f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80168fc:	b002      	add	sp, #8
 80168fe:	4770      	bx	lr
 8016900:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016904:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016908:	f04f 0300 	mov.w	r3, #0
 801690c:	931b      	str	r3, [sp, #108]	@ 0x6c
 801690e:	bf14      	ite	ne
 8016910:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8016914:	4623      	moveq	r3, r4
 8016916:	9304      	str	r3, [sp, #16]
 8016918:	9307      	str	r3, [sp, #28]
 801691a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801691e:	9002      	str	r0, [sp, #8]
 8016920:	9006      	str	r0, [sp, #24]
 8016922:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016926:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8016928:	ab21      	add	r3, sp, #132	@ 0x84
 801692a:	a902      	add	r1, sp, #8
 801692c:	4628      	mov	r0, r5
 801692e:	9301      	str	r3, [sp, #4]
 8016930:	f000 faea 	bl	8016f08 <_svfiprintf_r>
 8016934:	1c43      	adds	r3, r0, #1
 8016936:	bfbc      	itt	lt
 8016938:	238b      	movlt	r3, #139	@ 0x8b
 801693a:	602b      	strlt	r3, [r5, #0]
 801693c:	2c00      	cmp	r4, #0
 801693e:	d0da      	beq.n	80168f6 <sniprintf+0x16>
 8016940:	9b02      	ldr	r3, [sp, #8]
 8016942:	2200      	movs	r2, #0
 8016944:	701a      	strb	r2, [r3, #0]
 8016946:	e7d6      	b.n	80168f6 <sniprintf+0x16>
 8016948:	200006a4 	.word	0x200006a4

0801694c <__sread>:
 801694c:	b510      	push	{r4, lr}
 801694e:	460c      	mov	r4, r1
 8016950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016954:	f000 f988 	bl	8016c68 <_read_r>
 8016958:	2800      	cmp	r0, #0
 801695a:	bfab      	itete	ge
 801695c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801695e:	89a3      	ldrhlt	r3, [r4, #12]
 8016960:	181b      	addge	r3, r3, r0
 8016962:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016966:	bfac      	ite	ge
 8016968:	6563      	strge	r3, [r4, #84]	@ 0x54
 801696a:	81a3      	strhlt	r3, [r4, #12]
 801696c:	bd10      	pop	{r4, pc}

0801696e <__swrite>:
 801696e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016972:	461f      	mov	r7, r3
 8016974:	898b      	ldrh	r3, [r1, #12]
 8016976:	05db      	lsls	r3, r3, #23
 8016978:	4605      	mov	r5, r0
 801697a:	460c      	mov	r4, r1
 801697c:	4616      	mov	r6, r2
 801697e:	d505      	bpl.n	801698c <__swrite+0x1e>
 8016980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016984:	2302      	movs	r3, #2
 8016986:	2200      	movs	r2, #0
 8016988:	f000 f95c 	bl	8016c44 <_lseek_r>
 801698c:	89a3      	ldrh	r3, [r4, #12]
 801698e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016992:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016996:	81a3      	strh	r3, [r4, #12]
 8016998:	4632      	mov	r2, r6
 801699a:	463b      	mov	r3, r7
 801699c:	4628      	mov	r0, r5
 801699e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80169a2:	f000 b983 	b.w	8016cac <_write_r>

080169a6 <__sseek>:
 80169a6:	b510      	push	{r4, lr}
 80169a8:	460c      	mov	r4, r1
 80169aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169ae:	f000 f949 	bl	8016c44 <_lseek_r>
 80169b2:	1c43      	adds	r3, r0, #1
 80169b4:	89a3      	ldrh	r3, [r4, #12]
 80169b6:	bf15      	itete	ne
 80169b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80169ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80169be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80169c2:	81a3      	strheq	r3, [r4, #12]
 80169c4:	bf18      	it	ne
 80169c6:	81a3      	strhne	r3, [r4, #12]
 80169c8:	bd10      	pop	{r4, pc}

080169ca <__sclose>:
 80169ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169ce:	f000 b929 	b.w	8016c24 <_close_r>

080169d2 <_vsniprintf_r>:
 80169d2:	b530      	push	{r4, r5, lr}
 80169d4:	4614      	mov	r4, r2
 80169d6:	2c00      	cmp	r4, #0
 80169d8:	b09b      	sub	sp, #108	@ 0x6c
 80169da:	4605      	mov	r5, r0
 80169dc:	461a      	mov	r2, r3
 80169de:	da05      	bge.n	80169ec <_vsniprintf_r+0x1a>
 80169e0:	238b      	movs	r3, #139	@ 0x8b
 80169e2:	6003      	str	r3, [r0, #0]
 80169e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80169e8:	b01b      	add	sp, #108	@ 0x6c
 80169ea:	bd30      	pop	{r4, r5, pc}
 80169ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80169f0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80169f4:	f04f 0300 	mov.w	r3, #0
 80169f8:	9319      	str	r3, [sp, #100]	@ 0x64
 80169fa:	bf14      	ite	ne
 80169fc:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8016a00:	4623      	moveq	r3, r4
 8016a02:	9302      	str	r3, [sp, #8]
 8016a04:	9305      	str	r3, [sp, #20]
 8016a06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016a0a:	9100      	str	r1, [sp, #0]
 8016a0c:	9104      	str	r1, [sp, #16]
 8016a0e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016a12:	4669      	mov	r1, sp
 8016a14:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8016a16:	f000 fa77 	bl	8016f08 <_svfiprintf_r>
 8016a1a:	1c43      	adds	r3, r0, #1
 8016a1c:	bfbc      	itt	lt
 8016a1e:	238b      	movlt	r3, #139	@ 0x8b
 8016a20:	602b      	strlt	r3, [r5, #0]
 8016a22:	2c00      	cmp	r4, #0
 8016a24:	d0e0      	beq.n	80169e8 <_vsniprintf_r+0x16>
 8016a26:	9b00      	ldr	r3, [sp, #0]
 8016a28:	2200      	movs	r2, #0
 8016a2a:	701a      	strb	r2, [r3, #0]
 8016a2c:	e7dc      	b.n	80169e8 <_vsniprintf_r+0x16>
	...

08016a30 <vsniprintf>:
 8016a30:	b507      	push	{r0, r1, r2, lr}
 8016a32:	9300      	str	r3, [sp, #0]
 8016a34:	4613      	mov	r3, r2
 8016a36:	460a      	mov	r2, r1
 8016a38:	4601      	mov	r1, r0
 8016a3a:	4803      	ldr	r0, [pc, #12]	@ (8016a48 <vsniprintf+0x18>)
 8016a3c:	6800      	ldr	r0, [r0, #0]
 8016a3e:	f7ff ffc8 	bl	80169d2 <_vsniprintf_r>
 8016a42:	b003      	add	sp, #12
 8016a44:	f85d fb04 	ldr.w	pc, [sp], #4
 8016a48:	200006a4 	.word	0x200006a4

08016a4c <__swbuf_r>:
 8016a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a4e:	460e      	mov	r6, r1
 8016a50:	4614      	mov	r4, r2
 8016a52:	4605      	mov	r5, r0
 8016a54:	b118      	cbz	r0, 8016a5e <__swbuf_r+0x12>
 8016a56:	6a03      	ldr	r3, [r0, #32]
 8016a58:	b90b      	cbnz	r3, 8016a5e <__swbuf_r+0x12>
 8016a5a:	f7ff fe9f 	bl	801679c <__sinit>
 8016a5e:	69a3      	ldr	r3, [r4, #24]
 8016a60:	60a3      	str	r3, [r4, #8]
 8016a62:	89a3      	ldrh	r3, [r4, #12]
 8016a64:	071a      	lsls	r2, r3, #28
 8016a66:	d501      	bpl.n	8016a6c <__swbuf_r+0x20>
 8016a68:	6923      	ldr	r3, [r4, #16]
 8016a6a:	b943      	cbnz	r3, 8016a7e <__swbuf_r+0x32>
 8016a6c:	4621      	mov	r1, r4
 8016a6e:	4628      	mov	r0, r5
 8016a70:	f000 f82a 	bl	8016ac8 <__swsetup_r>
 8016a74:	b118      	cbz	r0, 8016a7e <__swbuf_r+0x32>
 8016a76:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8016a7a:	4638      	mov	r0, r7
 8016a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a7e:	6823      	ldr	r3, [r4, #0]
 8016a80:	6922      	ldr	r2, [r4, #16]
 8016a82:	1a98      	subs	r0, r3, r2
 8016a84:	6963      	ldr	r3, [r4, #20]
 8016a86:	b2f6      	uxtb	r6, r6
 8016a88:	4283      	cmp	r3, r0
 8016a8a:	4637      	mov	r7, r6
 8016a8c:	dc05      	bgt.n	8016a9a <__swbuf_r+0x4e>
 8016a8e:	4621      	mov	r1, r4
 8016a90:	4628      	mov	r0, r5
 8016a92:	f000 fe87 	bl	80177a4 <_fflush_r>
 8016a96:	2800      	cmp	r0, #0
 8016a98:	d1ed      	bne.n	8016a76 <__swbuf_r+0x2a>
 8016a9a:	68a3      	ldr	r3, [r4, #8]
 8016a9c:	3b01      	subs	r3, #1
 8016a9e:	60a3      	str	r3, [r4, #8]
 8016aa0:	6823      	ldr	r3, [r4, #0]
 8016aa2:	1c5a      	adds	r2, r3, #1
 8016aa4:	6022      	str	r2, [r4, #0]
 8016aa6:	701e      	strb	r6, [r3, #0]
 8016aa8:	6962      	ldr	r2, [r4, #20]
 8016aaa:	1c43      	adds	r3, r0, #1
 8016aac:	429a      	cmp	r2, r3
 8016aae:	d004      	beq.n	8016aba <__swbuf_r+0x6e>
 8016ab0:	89a3      	ldrh	r3, [r4, #12]
 8016ab2:	07db      	lsls	r3, r3, #31
 8016ab4:	d5e1      	bpl.n	8016a7a <__swbuf_r+0x2e>
 8016ab6:	2e0a      	cmp	r6, #10
 8016ab8:	d1df      	bne.n	8016a7a <__swbuf_r+0x2e>
 8016aba:	4621      	mov	r1, r4
 8016abc:	4628      	mov	r0, r5
 8016abe:	f000 fe71 	bl	80177a4 <_fflush_r>
 8016ac2:	2800      	cmp	r0, #0
 8016ac4:	d0d9      	beq.n	8016a7a <__swbuf_r+0x2e>
 8016ac6:	e7d6      	b.n	8016a76 <__swbuf_r+0x2a>

08016ac8 <__swsetup_r>:
 8016ac8:	b538      	push	{r3, r4, r5, lr}
 8016aca:	4b29      	ldr	r3, [pc, #164]	@ (8016b70 <__swsetup_r+0xa8>)
 8016acc:	4605      	mov	r5, r0
 8016ace:	6818      	ldr	r0, [r3, #0]
 8016ad0:	460c      	mov	r4, r1
 8016ad2:	b118      	cbz	r0, 8016adc <__swsetup_r+0x14>
 8016ad4:	6a03      	ldr	r3, [r0, #32]
 8016ad6:	b90b      	cbnz	r3, 8016adc <__swsetup_r+0x14>
 8016ad8:	f7ff fe60 	bl	801679c <__sinit>
 8016adc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016ae0:	0719      	lsls	r1, r3, #28
 8016ae2:	d422      	bmi.n	8016b2a <__swsetup_r+0x62>
 8016ae4:	06da      	lsls	r2, r3, #27
 8016ae6:	d407      	bmi.n	8016af8 <__swsetup_r+0x30>
 8016ae8:	2209      	movs	r2, #9
 8016aea:	602a      	str	r2, [r5, #0]
 8016aec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016af0:	81a3      	strh	r3, [r4, #12]
 8016af2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016af6:	e033      	b.n	8016b60 <__swsetup_r+0x98>
 8016af8:	0758      	lsls	r0, r3, #29
 8016afa:	d512      	bpl.n	8016b22 <__swsetup_r+0x5a>
 8016afc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016afe:	b141      	cbz	r1, 8016b12 <__swsetup_r+0x4a>
 8016b00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016b04:	4299      	cmp	r1, r3
 8016b06:	d002      	beq.n	8016b0e <__swsetup_r+0x46>
 8016b08:	4628      	mov	r0, r5
 8016b0a:	f000 f94f 	bl	8016dac <_free_r>
 8016b0e:	2300      	movs	r3, #0
 8016b10:	6363      	str	r3, [r4, #52]	@ 0x34
 8016b12:	89a3      	ldrh	r3, [r4, #12]
 8016b14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016b18:	81a3      	strh	r3, [r4, #12]
 8016b1a:	2300      	movs	r3, #0
 8016b1c:	6063      	str	r3, [r4, #4]
 8016b1e:	6923      	ldr	r3, [r4, #16]
 8016b20:	6023      	str	r3, [r4, #0]
 8016b22:	89a3      	ldrh	r3, [r4, #12]
 8016b24:	f043 0308 	orr.w	r3, r3, #8
 8016b28:	81a3      	strh	r3, [r4, #12]
 8016b2a:	6923      	ldr	r3, [r4, #16]
 8016b2c:	b94b      	cbnz	r3, 8016b42 <__swsetup_r+0x7a>
 8016b2e:	89a3      	ldrh	r3, [r4, #12]
 8016b30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016b34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016b38:	d003      	beq.n	8016b42 <__swsetup_r+0x7a>
 8016b3a:	4621      	mov	r1, r4
 8016b3c:	4628      	mov	r0, r5
 8016b3e:	f000 fe91 	bl	8017864 <__smakebuf_r>
 8016b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b46:	f013 0201 	ands.w	r2, r3, #1
 8016b4a:	d00a      	beq.n	8016b62 <__swsetup_r+0x9a>
 8016b4c:	2200      	movs	r2, #0
 8016b4e:	60a2      	str	r2, [r4, #8]
 8016b50:	6962      	ldr	r2, [r4, #20]
 8016b52:	4252      	negs	r2, r2
 8016b54:	61a2      	str	r2, [r4, #24]
 8016b56:	6922      	ldr	r2, [r4, #16]
 8016b58:	b942      	cbnz	r2, 8016b6c <__swsetup_r+0xa4>
 8016b5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016b5e:	d1c5      	bne.n	8016aec <__swsetup_r+0x24>
 8016b60:	bd38      	pop	{r3, r4, r5, pc}
 8016b62:	0799      	lsls	r1, r3, #30
 8016b64:	bf58      	it	pl
 8016b66:	6962      	ldrpl	r2, [r4, #20]
 8016b68:	60a2      	str	r2, [r4, #8]
 8016b6a:	e7f4      	b.n	8016b56 <__swsetup_r+0x8e>
 8016b6c:	2000      	movs	r0, #0
 8016b6e:	e7f7      	b.n	8016b60 <__swsetup_r+0x98>
 8016b70:	200006a4 	.word	0x200006a4

08016b74 <memmove>:
 8016b74:	4288      	cmp	r0, r1
 8016b76:	b510      	push	{r4, lr}
 8016b78:	eb01 0402 	add.w	r4, r1, r2
 8016b7c:	d902      	bls.n	8016b84 <memmove+0x10>
 8016b7e:	4284      	cmp	r4, r0
 8016b80:	4623      	mov	r3, r4
 8016b82:	d807      	bhi.n	8016b94 <memmove+0x20>
 8016b84:	1e43      	subs	r3, r0, #1
 8016b86:	42a1      	cmp	r1, r4
 8016b88:	d008      	beq.n	8016b9c <memmove+0x28>
 8016b8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016b8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016b92:	e7f8      	b.n	8016b86 <memmove+0x12>
 8016b94:	4402      	add	r2, r0
 8016b96:	4601      	mov	r1, r0
 8016b98:	428a      	cmp	r2, r1
 8016b9a:	d100      	bne.n	8016b9e <memmove+0x2a>
 8016b9c:	bd10      	pop	{r4, pc}
 8016b9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016ba2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016ba6:	e7f7      	b.n	8016b98 <memmove+0x24>

08016ba8 <memset>:
 8016ba8:	4402      	add	r2, r0
 8016baa:	4603      	mov	r3, r0
 8016bac:	4293      	cmp	r3, r2
 8016bae:	d100      	bne.n	8016bb2 <memset+0xa>
 8016bb0:	4770      	bx	lr
 8016bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8016bb6:	e7f9      	b.n	8016bac <memset+0x4>

08016bb8 <strchr>:
 8016bb8:	b2c9      	uxtb	r1, r1
 8016bba:	4603      	mov	r3, r0
 8016bbc:	4618      	mov	r0, r3
 8016bbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016bc2:	b112      	cbz	r2, 8016bca <strchr+0x12>
 8016bc4:	428a      	cmp	r2, r1
 8016bc6:	d1f9      	bne.n	8016bbc <strchr+0x4>
 8016bc8:	4770      	bx	lr
 8016bca:	2900      	cmp	r1, #0
 8016bcc:	bf18      	it	ne
 8016bce:	2000      	movne	r0, #0
 8016bd0:	4770      	bx	lr

08016bd2 <strncmp>:
 8016bd2:	b510      	push	{r4, lr}
 8016bd4:	b16a      	cbz	r2, 8016bf2 <strncmp+0x20>
 8016bd6:	3901      	subs	r1, #1
 8016bd8:	1884      	adds	r4, r0, r2
 8016bda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016bde:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016be2:	429a      	cmp	r2, r3
 8016be4:	d103      	bne.n	8016bee <strncmp+0x1c>
 8016be6:	42a0      	cmp	r0, r4
 8016be8:	d001      	beq.n	8016bee <strncmp+0x1c>
 8016bea:	2a00      	cmp	r2, #0
 8016bec:	d1f5      	bne.n	8016bda <strncmp+0x8>
 8016bee:	1ad0      	subs	r0, r2, r3
 8016bf0:	bd10      	pop	{r4, pc}
 8016bf2:	4610      	mov	r0, r2
 8016bf4:	e7fc      	b.n	8016bf0 <strncmp+0x1e>

08016bf6 <strstr>:
 8016bf6:	780a      	ldrb	r2, [r1, #0]
 8016bf8:	b570      	push	{r4, r5, r6, lr}
 8016bfa:	b96a      	cbnz	r2, 8016c18 <strstr+0x22>
 8016bfc:	bd70      	pop	{r4, r5, r6, pc}
 8016bfe:	429a      	cmp	r2, r3
 8016c00:	d109      	bne.n	8016c16 <strstr+0x20>
 8016c02:	460c      	mov	r4, r1
 8016c04:	4605      	mov	r5, r0
 8016c06:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d0f6      	beq.n	8016bfc <strstr+0x6>
 8016c0e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8016c12:	429e      	cmp	r6, r3
 8016c14:	d0f7      	beq.n	8016c06 <strstr+0x10>
 8016c16:	3001      	adds	r0, #1
 8016c18:	7803      	ldrb	r3, [r0, #0]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d1ef      	bne.n	8016bfe <strstr+0x8>
 8016c1e:	4618      	mov	r0, r3
 8016c20:	e7ec      	b.n	8016bfc <strstr+0x6>
	...

08016c24 <_close_r>:
 8016c24:	b538      	push	{r3, r4, r5, lr}
 8016c26:	4d06      	ldr	r5, [pc, #24]	@ (8016c40 <_close_r+0x1c>)
 8016c28:	2300      	movs	r3, #0
 8016c2a:	4604      	mov	r4, r0
 8016c2c:	4608      	mov	r0, r1
 8016c2e:	602b      	str	r3, [r5, #0]
 8016c30:	f7ec fb60 	bl	80032f4 <_close>
 8016c34:	1c43      	adds	r3, r0, #1
 8016c36:	d102      	bne.n	8016c3e <_close_r+0x1a>
 8016c38:	682b      	ldr	r3, [r5, #0]
 8016c3a:	b103      	cbz	r3, 8016c3e <_close_r+0x1a>
 8016c3c:	6023      	str	r3, [r4, #0]
 8016c3e:	bd38      	pop	{r3, r4, r5, pc}
 8016c40:	2000ee0c 	.word	0x2000ee0c

08016c44 <_lseek_r>:
 8016c44:	b538      	push	{r3, r4, r5, lr}
 8016c46:	4d07      	ldr	r5, [pc, #28]	@ (8016c64 <_lseek_r+0x20>)
 8016c48:	4604      	mov	r4, r0
 8016c4a:	4608      	mov	r0, r1
 8016c4c:	4611      	mov	r1, r2
 8016c4e:	2200      	movs	r2, #0
 8016c50:	602a      	str	r2, [r5, #0]
 8016c52:	461a      	mov	r2, r3
 8016c54:	f7ec fb75 	bl	8003342 <_lseek>
 8016c58:	1c43      	adds	r3, r0, #1
 8016c5a:	d102      	bne.n	8016c62 <_lseek_r+0x1e>
 8016c5c:	682b      	ldr	r3, [r5, #0]
 8016c5e:	b103      	cbz	r3, 8016c62 <_lseek_r+0x1e>
 8016c60:	6023      	str	r3, [r4, #0]
 8016c62:	bd38      	pop	{r3, r4, r5, pc}
 8016c64:	2000ee0c 	.word	0x2000ee0c

08016c68 <_read_r>:
 8016c68:	b538      	push	{r3, r4, r5, lr}
 8016c6a:	4d07      	ldr	r5, [pc, #28]	@ (8016c88 <_read_r+0x20>)
 8016c6c:	4604      	mov	r4, r0
 8016c6e:	4608      	mov	r0, r1
 8016c70:	4611      	mov	r1, r2
 8016c72:	2200      	movs	r2, #0
 8016c74:	602a      	str	r2, [r5, #0]
 8016c76:	461a      	mov	r2, r3
 8016c78:	f7ec fb03 	bl	8003282 <_read>
 8016c7c:	1c43      	adds	r3, r0, #1
 8016c7e:	d102      	bne.n	8016c86 <_read_r+0x1e>
 8016c80:	682b      	ldr	r3, [r5, #0]
 8016c82:	b103      	cbz	r3, 8016c86 <_read_r+0x1e>
 8016c84:	6023      	str	r3, [r4, #0]
 8016c86:	bd38      	pop	{r3, r4, r5, pc}
 8016c88:	2000ee0c 	.word	0x2000ee0c

08016c8c <_sbrk_r>:
 8016c8c:	b538      	push	{r3, r4, r5, lr}
 8016c8e:	4d06      	ldr	r5, [pc, #24]	@ (8016ca8 <_sbrk_r+0x1c>)
 8016c90:	2300      	movs	r3, #0
 8016c92:	4604      	mov	r4, r0
 8016c94:	4608      	mov	r0, r1
 8016c96:	602b      	str	r3, [r5, #0]
 8016c98:	f7ec fb60 	bl	800335c <_sbrk>
 8016c9c:	1c43      	adds	r3, r0, #1
 8016c9e:	d102      	bne.n	8016ca6 <_sbrk_r+0x1a>
 8016ca0:	682b      	ldr	r3, [r5, #0]
 8016ca2:	b103      	cbz	r3, 8016ca6 <_sbrk_r+0x1a>
 8016ca4:	6023      	str	r3, [r4, #0]
 8016ca6:	bd38      	pop	{r3, r4, r5, pc}
 8016ca8:	2000ee0c 	.word	0x2000ee0c

08016cac <_write_r>:
 8016cac:	b538      	push	{r3, r4, r5, lr}
 8016cae:	4d07      	ldr	r5, [pc, #28]	@ (8016ccc <_write_r+0x20>)
 8016cb0:	4604      	mov	r4, r0
 8016cb2:	4608      	mov	r0, r1
 8016cb4:	4611      	mov	r1, r2
 8016cb6:	2200      	movs	r2, #0
 8016cb8:	602a      	str	r2, [r5, #0]
 8016cba:	461a      	mov	r2, r3
 8016cbc:	f7ec fafe 	bl	80032bc <_write>
 8016cc0:	1c43      	adds	r3, r0, #1
 8016cc2:	d102      	bne.n	8016cca <_write_r+0x1e>
 8016cc4:	682b      	ldr	r3, [r5, #0]
 8016cc6:	b103      	cbz	r3, 8016cca <_write_r+0x1e>
 8016cc8:	6023      	str	r3, [r4, #0]
 8016cca:	bd38      	pop	{r3, r4, r5, pc}
 8016ccc:	2000ee0c 	.word	0x2000ee0c

08016cd0 <__errno>:
 8016cd0:	4b01      	ldr	r3, [pc, #4]	@ (8016cd8 <__errno+0x8>)
 8016cd2:	6818      	ldr	r0, [r3, #0]
 8016cd4:	4770      	bx	lr
 8016cd6:	bf00      	nop
 8016cd8:	200006a4 	.word	0x200006a4

08016cdc <__libc_init_array>:
 8016cdc:	b570      	push	{r4, r5, r6, lr}
 8016cde:	4d0d      	ldr	r5, [pc, #52]	@ (8016d14 <__libc_init_array+0x38>)
 8016ce0:	4c0d      	ldr	r4, [pc, #52]	@ (8016d18 <__libc_init_array+0x3c>)
 8016ce2:	1b64      	subs	r4, r4, r5
 8016ce4:	10a4      	asrs	r4, r4, #2
 8016ce6:	2600      	movs	r6, #0
 8016ce8:	42a6      	cmp	r6, r4
 8016cea:	d109      	bne.n	8016d00 <__libc_init_array+0x24>
 8016cec:	4d0b      	ldr	r5, [pc, #44]	@ (8016d1c <__libc_init_array+0x40>)
 8016cee:	4c0c      	ldr	r4, [pc, #48]	@ (8016d20 <__libc_init_array+0x44>)
 8016cf0:	f000 fe62 	bl	80179b8 <_init>
 8016cf4:	1b64      	subs	r4, r4, r5
 8016cf6:	10a4      	asrs	r4, r4, #2
 8016cf8:	2600      	movs	r6, #0
 8016cfa:	42a6      	cmp	r6, r4
 8016cfc:	d105      	bne.n	8016d0a <__libc_init_array+0x2e>
 8016cfe:	bd70      	pop	{r4, r5, r6, pc}
 8016d00:	f855 3b04 	ldr.w	r3, [r5], #4
 8016d04:	4798      	blx	r3
 8016d06:	3601      	adds	r6, #1
 8016d08:	e7ee      	b.n	8016ce8 <__libc_init_array+0xc>
 8016d0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8016d0e:	4798      	blx	r3
 8016d10:	3601      	adds	r6, #1
 8016d12:	e7f2      	b.n	8016cfa <__libc_init_array+0x1e>
 8016d14:	08018998 	.word	0x08018998
 8016d18:	08018998 	.word	0x08018998
 8016d1c:	08018998 	.word	0x08018998
 8016d20:	080189a4 	.word	0x080189a4

08016d24 <__retarget_lock_init_recursive>:
 8016d24:	4770      	bx	lr

08016d26 <__retarget_lock_acquire_recursive>:
 8016d26:	4770      	bx	lr

08016d28 <__retarget_lock_release_recursive>:
 8016d28:	4770      	bx	lr

08016d2a <strcpy>:
 8016d2a:	4603      	mov	r3, r0
 8016d2c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016d30:	f803 2b01 	strb.w	r2, [r3], #1
 8016d34:	2a00      	cmp	r2, #0
 8016d36:	d1f9      	bne.n	8016d2c <strcpy+0x2>
 8016d38:	4770      	bx	lr

08016d3a <memcpy>:
 8016d3a:	440a      	add	r2, r1
 8016d3c:	4291      	cmp	r1, r2
 8016d3e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8016d42:	d100      	bne.n	8016d46 <memcpy+0xc>
 8016d44:	4770      	bx	lr
 8016d46:	b510      	push	{r4, lr}
 8016d48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016d4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016d50:	4291      	cmp	r1, r2
 8016d52:	d1f9      	bne.n	8016d48 <memcpy+0xe>
 8016d54:	bd10      	pop	{r4, pc}
	...

08016d58 <__assert_func>:
 8016d58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016d5a:	4614      	mov	r4, r2
 8016d5c:	461a      	mov	r2, r3
 8016d5e:	4b09      	ldr	r3, [pc, #36]	@ (8016d84 <__assert_func+0x2c>)
 8016d60:	681b      	ldr	r3, [r3, #0]
 8016d62:	4605      	mov	r5, r0
 8016d64:	68d8      	ldr	r0, [r3, #12]
 8016d66:	b14c      	cbz	r4, 8016d7c <__assert_func+0x24>
 8016d68:	4b07      	ldr	r3, [pc, #28]	@ (8016d88 <__assert_func+0x30>)
 8016d6a:	9100      	str	r1, [sp, #0]
 8016d6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016d70:	4906      	ldr	r1, [pc, #24]	@ (8016d8c <__assert_func+0x34>)
 8016d72:	462b      	mov	r3, r5
 8016d74:	f000 fd3e 	bl	80177f4 <fiprintf>
 8016d78:	f000 fdd2 	bl	8017920 <abort>
 8016d7c:	4b04      	ldr	r3, [pc, #16]	@ (8016d90 <__assert_func+0x38>)
 8016d7e:	461c      	mov	r4, r3
 8016d80:	e7f3      	b.n	8016d6a <__assert_func+0x12>
 8016d82:	bf00      	nop
 8016d84:	200006a4 	.word	0x200006a4
 8016d88:	0801881f 	.word	0x0801881f
 8016d8c:	0801882c 	.word	0x0801882c
 8016d90:	0801885a 	.word	0x0801885a

08016d94 <__env_lock>:
 8016d94:	4801      	ldr	r0, [pc, #4]	@ (8016d9c <__env_lock+0x8>)
 8016d96:	f7ff bfc6 	b.w	8016d26 <__retarget_lock_acquire_recursive>
 8016d9a:	bf00      	nop
 8016d9c:	2000ee10 	.word	0x2000ee10

08016da0 <__env_unlock>:
 8016da0:	4801      	ldr	r0, [pc, #4]	@ (8016da8 <__env_unlock+0x8>)
 8016da2:	f7ff bfc1 	b.w	8016d28 <__retarget_lock_release_recursive>
 8016da6:	bf00      	nop
 8016da8:	2000ee10 	.word	0x2000ee10

08016dac <_free_r>:
 8016dac:	b538      	push	{r3, r4, r5, lr}
 8016dae:	4605      	mov	r5, r0
 8016db0:	2900      	cmp	r1, #0
 8016db2:	d041      	beq.n	8016e38 <_free_r+0x8c>
 8016db4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016db8:	1f0c      	subs	r4, r1, #4
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	bfb8      	it	lt
 8016dbe:	18e4      	addlt	r4, r4, r3
 8016dc0:	f7ff fb3a 	bl	8016438 <__malloc_lock>
 8016dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8016e3c <_free_r+0x90>)
 8016dc6:	6813      	ldr	r3, [r2, #0]
 8016dc8:	b933      	cbnz	r3, 8016dd8 <_free_r+0x2c>
 8016dca:	6063      	str	r3, [r4, #4]
 8016dcc:	6014      	str	r4, [r2, #0]
 8016dce:	4628      	mov	r0, r5
 8016dd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016dd4:	f7ff bb36 	b.w	8016444 <__malloc_unlock>
 8016dd8:	42a3      	cmp	r3, r4
 8016dda:	d908      	bls.n	8016dee <_free_r+0x42>
 8016ddc:	6820      	ldr	r0, [r4, #0]
 8016dde:	1821      	adds	r1, r4, r0
 8016de0:	428b      	cmp	r3, r1
 8016de2:	bf01      	itttt	eq
 8016de4:	6819      	ldreq	r1, [r3, #0]
 8016de6:	685b      	ldreq	r3, [r3, #4]
 8016de8:	1809      	addeq	r1, r1, r0
 8016dea:	6021      	streq	r1, [r4, #0]
 8016dec:	e7ed      	b.n	8016dca <_free_r+0x1e>
 8016dee:	461a      	mov	r2, r3
 8016df0:	685b      	ldr	r3, [r3, #4]
 8016df2:	b10b      	cbz	r3, 8016df8 <_free_r+0x4c>
 8016df4:	42a3      	cmp	r3, r4
 8016df6:	d9fa      	bls.n	8016dee <_free_r+0x42>
 8016df8:	6811      	ldr	r1, [r2, #0]
 8016dfa:	1850      	adds	r0, r2, r1
 8016dfc:	42a0      	cmp	r0, r4
 8016dfe:	d10b      	bne.n	8016e18 <_free_r+0x6c>
 8016e00:	6820      	ldr	r0, [r4, #0]
 8016e02:	4401      	add	r1, r0
 8016e04:	1850      	adds	r0, r2, r1
 8016e06:	4283      	cmp	r3, r0
 8016e08:	6011      	str	r1, [r2, #0]
 8016e0a:	d1e0      	bne.n	8016dce <_free_r+0x22>
 8016e0c:	6818      	ldr	r0, [r3, #0]
 8016e0e:	685b      	ldr	r3, [r3, #4]
 8016e10:	6053      	str	r3, [r2, #4]
 8016e12:	4408      	add	r0, r1
 8016e14:	6010      	str	r0, [r2, #0]
 8016e16:	e7da      	b.n	8016dce <_free_r+0x22>
 8016e18:	d902      	bls.n	8016e20 <_free_r+0x74>
 8016e1a:	230c      	movs	r3, #12
 8016e1c:	602b      	str	r3, [r5, #0]
 8016e1e:	e7d6      	b.n	8016dce <_free_r+0x22>
 8016e20:	6820      	ldr	r0, [r4, #0]
 8016e22:	1821      	adds	r1, r4, r0
 8016e24:	428b      	cmp	r3, r1
 8016e26:	bf04      	itt	eq
 8016e28:	6819      	ldreq	r1, [r3, #0]
 8016e2a:	685b      	ldreq	r3, [r3, #4]
 8016e2c:	6063      	str	r3, [r4, #4]
 8016e2e:	bf04      	itt	eq
 8016e30:	1809      	addeq	r1, r1, r0
 8016e32:	6021      	streq	r1, [r4, #0]
 8016e34:	6054      	str	r4, [r2, #4]
 8016e36:	e7ca      	b.n	8016dce <_free_r+0x22>
 8016e38:	bd38      	pop	{r3, r4, r5, pc}
 8016e3a:	bf00      	nop
 8016e3c:	2000eccc 	.word	0x2000eccc

08016e40 <_malloc_usable_size_r>:
 8016e40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016e44:	1f18      	subs	r0, r3, #4
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	bfbc      	itt	lt
 8016e4a:	580b      	ldrlt	r3, [r1, r0]
 8016e4c:	18c0      	addlt	r0, r0, r3
 8016e4e:	4770      	bx	lr

08016e50 <__ssputs_r>:
 8016e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e54:	688e      	ldr	r6, [r1, #8]
 8016e56:	461f      	mov	r7, r3
 8016e58:	42be      	cmp	r6, r7
 8016e5a:	680b      	ldr	r3, [r1, #0]
 8016e5c:	4682      	mov	sl, r0
 8016e5e:	460c      	mov	r4, r1
 8016e60:	4690      	mov	r8, r2
 8016e62:	d82d      	bhi.n	8016ec0 <__ssputs_r+0x70>
 8016e64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016e68:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016e6c:	d026      	beq.n	8016ebc <__ssputs_r+0x6c>
 8016e6e:	6965      	ldr	r5, [r4, #20]
 8016e70:	6909      	ldr	r1, [r1, #16]
 8016e72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016e76:	eba3 0901 	sub.w	r9, r3, r1
 8016e7a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016e7e:	1c7b      	adds	r3, r7, #1
 8016e80:	444b      	add	r3, r9
 8016e82:	106d      	asrs	r5, r5, #1
 8016e84:	429d      	cmp	r5, r3
 8016e86:	bf38      	it	cc
 8016e88:	461d      	movcc	r5, r3
 8016e8a:	0553      	lsls	r3, r2, #21
 8016e8c:	d527      	bpl.n	8016ede <__ssputs_r+0x8e>
 8016e8e:	4629      	mov	r1, r5
 8016e90:	f7ff fa52 	bl	8016338 <_malloc_r>
 8016e94:	4606      	mov	r6, r0
 8016e96:	b360      	cbz	r0, 8016ef2 <__ssputs_r+0xa2>
 8016e98:	6921      	ldr	r1, [r4, #16]
 8016e9a:	464a      	mov	r2, r9
 8016e9c:	f7ff ff4d 	bl	8016d3a <memcpy>
 8016ea0:	89a3      	ldrh	r3, [r4, #12]
 8016ea2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016ea6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016eaa:	81a3      	strh	r3, [r4, #12]
 8016eac:	6126      	str	r6, [r4, #16]
 8016eae:	6165      	str	r5, [r4, #20]
 8016eb0:	444e      	add	r6, r9
 8016eb2:	eba5 0509 	sub.w	r5, r5, r9
 8016eb6:	6026      	str	r6, [r4, #0]
 8016eb8:	60a5      	str	r5, [r4, #8]
 8016eba:	463e      	mov	r6, r7
 8016ebc:	42be      	cmp	r6, r7
 8016ebe:	d900      	bls.n	8016ec2 <__ssputs_r+0x72>
 8016ec0:	463e      	mov	r6, r7
 8016ec2:	6820      	ldr	r0, [r4, #0]
 8016ec4:	4632      	mov	r2, r6
 8016ec6:	4641      	mov	r1, r8
 8016ec8:	f7ff fe54 	bl	8016b74 <memmove>
 8016ecc:	68a3      	ldr	r3, [r4, #8]
 8016ece:	1b9b      	subs	r3, r3, r6
 8016ed0:	60a3      	str	r3, [r4, #8]
 8016ed2:	6823      	ldr	r3, [r4, #0]
 8016ed4:	4433      	add	r3, r6
 8016ed6:	6023      	str	r3, [r4, #0]
 8016ed8:	2000      	movs	r0, #0
 8016eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ede:	462a      	mov	r2, r5
 8016ee0:	f7ff fb2a 	bl	8016538 <_realloc_r>
 8016ee4:	4606      	mov	r6, r0
 8016ee6:	2800      	cmp	r0, #0
 8016ee8:	d1e0      	bne.n	8016eac <__ssputs_r+0x5c>
 8016eea:	6921      	ldr	r1, [r4, #16]
 8016eec:	4650      	mov	r0, sl
 8016eee:	f7ff ff5d 	bl	8016dac <_free_r>
 8016ef2:	230c      	movs	r3, #12
 8016ef4:	f8ca 3000 	str.w	r3, [sl]
 8016ef8:	89a3      	ldrh	r3, [r4, #12]
 8016efa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016efe:	81a3      	strh	r3, [r4, #12]
 8016f00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016f04:	e7e9      	b.n	8016eda <__ssputs_r+0x8a>
	...

08016f08 <_svfiprintf_r>:
 8016f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f0c:	4698      	mov	r8, r3
 8016f0e:	898b      	ldrh	r3, [r1, #12]
 8016f10:	061b      	lsls	r3, r3, #24
 8016f12:	b09d      	sub	sp, #116	@ 0x74
 8016f14:	4607      	mov	r7, r0
 8016f16:	460d      	mov	r5, r1
 8016f18:	4614      	mov	r4, r2
 8016f1a:	d510      	bpl.n	8016f3e <_svfiprintf_r+0x36>
 8016f1c:	690b      	ldr	r3, [r1, #16]
 8016f1e:	b973      	cbnz	r3, 8016f3e <_svfiprintf_r+0x36>
 8016f20:	2140      	movs	r1, #64	@ 0x40
 8016f22:	f7ff fa09 	bl	8016338 <_malloc_r>
 8016f26:	6028      	str	r0, [r5, #0]
 8016f28:	6128      	str	r0, [r5, #16]
 8016f2a:	b930      	cbnz	r0, 8016f3a <_svfiprintf_r+0x32>
 8016f2c:	230c      	movs	r3, #12
 8016f2e:	603b      	str	r3, [r7, #0]
 8016f30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016f34:	b01d      	add	sp, #116	@ 0x74
 8016f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f3a:	2340      	movs	r3, #64	@ 0x40
 8016f3c:	616b      	str	r3, [r5, #20]
 8016f3e:	2300      	movs	r3, #0
 8016f40:	9309      	str	r3, [sp, #36]	@ 0x24
 8016f42:	2320      	movs	r3, #32
 8016f44:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016f48:	f8cd 800c 	str.w	r8, [sp, #12]
 8016f4c:	2330      	movs	r3, #48	@ 0x30
 8016f4e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80170ec <_svfiprintf_r+0x1e4>
 8016f52:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016f56:	f04f 0901 	mov.w	r9, #1
 8016f5a:	4623      	mov	r3, r4
 8016f5c:	469a      	mov	sl, r3
 8016f5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016f62:	b10a      	cbz	r2, 8016f68 <_svfiprintf_r+0x60>
 8016f64:	2a25      	cmp	r2, #37	@ 0x25
 8016f66:	d1f9      	bne.n	8016f5c <_svfiprintf_r+0x54>
 8016f68:	ebba 0b04 	subs.w	fp, sl, r4
 8016f6c:	d00b      	beq.n	8016f86 <_svfiprintf_r+0x7e>
 8016f6e:	465b      	mov	r3, fp
 8016f70:	4622      	mov	r2, r4
 8016f72:	4629      	mov	r1, r5
 8016f74:	4638      	mov	r0, r7
 8016f76:	f7ff ff6b 	bl	8016e50 <__ssputs_r>
 8016f7a:	3001      	adds	r0, #1
 8016f7c:	f000 80a7 	beq.w	80170ce <_svfiprintf_r+0x1c6>
 8016f80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016f82:	445a      	add	r2, fp
 8016f84:	9209      	str	r2, [sp, #36]	@ 0x24
 8016f86:	f89a 3000 	ldrb.w	r3, [sl]
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	f000 809f 	beq.w	80170ce <_svfiprintf_r+0x1c6>
 8016f90:	2300      	movs	r3, #0
 8016f92:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016f96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016f9a:	f10a 0a01 	add.w	sl, sl, #1
 8016f9e:	9304      	str	r3, [sp, #16]
 8016fa0:	9307      	str	r3, [sp, #28]
 8016fa2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016fa6:	931a      	str	r3, [sp, #104]	@ 0x68
 8016fa8:	4654      	mov	r4, sl
 8016faa:	2205      	movs	r2, #5
 8016fac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016fb0:	484e      	ldr	r0, [pc, #312]	@ (80170ec <_svfiprintf_r+0x1e4>)
 8016fb2:	f7e9 f95d 	bl	8000270 <memchr>
 8016fb6:	9a04      	ldr	r2, [sp, #16]
 8016fb8:	b9d8      	cbnz	r0, 8016ff2 <_svfiprintf_r+0xea>
 8016fba:	06d0      	lsls	r0, r2, #27
 8016fbc:	bf44      	itt	mi
 8016fbe:	2320      	movmi	r3, #32
 8016fc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016fc4:	0711      	lsls	r1, r2, #28
 8016fc6:	bf44      	itt	mi
 8016fc8:	232b      	movmi	r3, #43	@ 0x2b
 8016fca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016fce:	f89a 3000 	ldrb.w	r3, [sl]
 8016fd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8016fd4:	d015      	beq.n	8017002 <_svfiprintf_r+0xfa>
 8016fd6:	9a07      	ldr	r2, [sp, #28]
 8016fd8:	4654      	mov	r4, sl
 8016fda:	2000      	movs	r0, #0
 8016fdc:	f04f 0c0a 	mov.w	ip, #10
 8016fe0:	4621      	mov	r1, r4
 8016fe2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016fe6:	3b30      	subs	r3, #48	@ 0x30
 8016fe8:	2b09      	cmp	r3, #9
 8016fea:	d94b      	bls.n	8017084 <_svfiprintf_r+0x17c>
 8016fec:	b1b0      	cbz	r0, 801701c <_svfiprintf_r+0x114>
 8016fee:	9207      	str	r2, [sp, #28]
 8016ff0:	e014      	b.n	801701c <_svfiprintf_r+0x114>
 8016ff2:	eba0 0308 	sub.w	r3, r0, r8
 8016ff6:	fa09 f303 	lsl.w	r3, r9, r3
 8016ffa:	4313      	orrs	r3, r2
 8016ffc:	9304      	str	r3, [sp, #16]
 8016ffe:	46a2      	mov	sl, r4
 8017000:	e7d2      	b.n	8016fa8 <_svfiprintf_r+0xa0>
 8017002:	9b03      	ldr	r3, [sp, #12]
 8017004:	1d19      	adds	r1, r3, #4
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	9103      	str	r1, [sp, #12]
 801700a:	2b00      	cmp	r3, #0
 801700c:	bfbb      	ittet	lt
 801700e:	425b      	neglt	r3, r3
 8017010:	f042 0202 	orrlt.w	r2, r2, #2
 8017014:	9307      	strge	r3, [sp, #28]
 8017016:	9307      	strlt	r3, [sp, #28]
 8017018:	bfb8      	it	lt
 801701a:	9204      	strlt	r2, [sp, #16]
 801701c:	7823      	ldrb	r3, [r4, #0]
 801701e:	2b2e      	cmp	r3, #46	@ 0x2e
 8017020:	d10a      	bne.n	8017038 <_svfiprintf_r+0x130>
 8017022:	7863      	ldrb	r3, [r4, #1]
 8017024:	2b2a      	cmp	r3, #42	@ 0x2a
 8017026:	d132      	bne.n	801708e <_svfiprintf_r+0x186>
 8017028:	9b03      	ldr	r3, [sp, #12]
 801702a:	1d1a      	adds	r2, r3, #4
 801702c:	681b      	ldr	r3, [r3, #0]
 801702e:	9203      	str	r2, [sp, #12]
 8017030:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017034:	3402      	adds	r4, #2
 8017036:	9305      	str	r3, [sp, #20]
 8017038:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80170fc <_svfiprintf_r+0x1f4>
 801703c:	7821      	ldrb	r1, [r4, #0]
 801703e:	2203      	movs	r2, #3
 8017040:	4650      	mov	r0, sl
 8017042:	f7e9 f915 	bl	8000270 <memchr>
 8017046:	b138      	cbz	r0, 8017058 <_svfiprintf_r+0x150>
 8017048:	9b04      	ldr	r3, [sp, #16]
 801704a:	eba0 000a 	sub.w	r0, r0, sl
 801704e:	2240      	movs	r2, #64	@ 0x40
 8017050:	4082      	lsls	r2, r0
 8017052:	4313      	orrs	r3, r2
 8017054:	3401      	adds	r4, #1
 8017056:	9304      	str	r3, [sp, #16]
 8017058:	f814 1b01 	ldrb.w	r1, [r4], #1
 801705c:	4824      	ldr	r0, [pc, #144]	@ (80170f0 <_svfiprintf_r+0x1e8>)
 801705e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017062:	2206      	movs	r2, #6
 8017064:	f7e9 f904 	bl	8000270 <memchr>
 8017068:	2800      	cmp	r0, #0
 801706a:	d036      	beq.n	80170da <_svfiprintf_r+0x1d2>
 801706c:	4b21      	ldr	r3, [pc, #132]	@ (80170f4 <_svfiprintf_r+0x1ec>)
 801706e:	bb1b      	cbnz	r3, 80170b8 <_svfiprintf_r+0x1b0>
 8017070:	9b03      	ldr	r3, [sp, #12]
 8017072:	3307      	adds	r3, #7
 8017074:	f023 0307 	bic.w	r3, r3, #7
 8017078:	3308      	adds	r3, #8
 801707a:	9303      	str	r3, [sp, #12]
 801707c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801707e:	4433      	add	r3, r6
 8017080:	9309      	str	r3, [sp, #36]	@ 0x24
 8017082:	e76a      	b.n	8016f5a <_svfiprintf_r+0x52>
 8017084:	fb0c 3202 	mla	r2, ip, r2, r3
 8017088:	460c      	mov	r4, r1
 801708a:	2001      	movs	r0, #1
 801708c:	e7a8      	b.n	8016fe0 <_svfiprintf_r+0xd8>
 801708e:	2300      	movs	r3, #0
 8017090:	3401      	adds	r4, #1
 8017092:	9305      	str	r3, [sp, #20]
 8017094:	4619      	mov	r1, r3
 8017096:	f04f 0c0a 	mov.w	ip, #10
 801709a:	4620      	mov	r0, r4
 801709c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80170a0:	3a30      	subs	r2, #48	@ 0x30
 80170a2:	2a09      	cmp	r2, #9
 80170a4:	d903      	bls.n	80170ae <_svfiprintf_r+0x1a6>
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d0c6      	beq.n	8017038 <_svfiprintf_r+0x130>
 80170aa:	9105      	str	r1, [sp, #20]
 80170ac:	e7c4      	b.n	8017038 <_svfiprintf_r+0x130>
 80170ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80170b2:	4604      	mov	r4, r0
 80170b4:	2301      	movs	r3, #1
 80170b6:	e7f0      	b.n	801709a <_svfiprintf_r+0x192>
 80170b8:	ab03      	add	r3, sp, #12
 80170ba:	9300      	str	r3, [sp, #0]
 80170bc:	462a      	mov	r2, r5
 80170be:	4b0e      	ldr	r3, [pc, #56]	@ (80170f8 <_svfiprintf_r+0x1f0>)
 80170c0:	a904      	add	r1, sp, #16
 80170c2:	4638      	mov	r0, r7
 80170c4:	f3af 8000 	nop.w
 80170c8:	1c42      	adds	r2, r0, #1
 80170ca:	4606      	mov	r6, r0
 80170cc:	d1d6      	bne.n	801707c <_svfiprintf_r+0x174>
 80170ce:	89ab      	ldrh	r3, [r5, #12]
 80170d0:	065b      	lsls	r3, r3, #25
 80170d2:	f53f af2d 	bmi.w	8016f30 <_svfiprintf_r+0x28>
 80170d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80170d8:	e72c      	b.n	8016f34 <_svfiprintf_r+0x2c>
 80170da:	ab03      	add	r3, sp, #12
 80170dc:	9300      	str	r3, [sp, #0]
 80170de:	462a      	mov	r2, r5
 80170e0:	4b05      	ldr	r3, [pc, #20]	@ (80170f8 <_svfiprintf_r+0x1f0>)
 80170e2:	a904      	add	r1, sp, #16
 80170e4:	4638      	mov	r0, r7
 80170e6:	f000 f9bb 	bl	8017460 <_printf_i>
 80170ea:	e7ed      	b.n	80170c8 <_svfiprintf_r+0x1c0>
 80170ec:	0801885b 	.word	0x0801885b
 80170f0:	08018865 	.word	0x08018865
 80170f4:	00000000 	.word	0x00000000
 80170f8:	08016e51 	.word	0x08016e51
 80170fc:	08018861 	.word	0x08018861

08017100 <__sfputc_r>:
 8017100:	6893      	ldr	r3, [r2, #8]
 8017102:	3b01      	subs	r3, #1
 8017104:	2b00      	cmp	r3, #0
 8017106:	b410      	push	{r4}
 8017108:	6093      	str	r3, [r2, #8]
 801710a:	da08      	bge.n	801711e <__sfputc_r+0x1e>
 801710c:	6994      	ldr	r4, [r2, #24]
 801710e:	42a3      	cmp	r3, r4
 8017110:	db01      	blt.n	8017116 <__sfputc_r+0x16>
 8017112:	290a      	cmp	r1, #10
 8017114:	d103      	bne.n	801711e <__sfputc_r+0x1e>
 8017116:	f85d 4b04 	ldr.w	r4, [sp], #4
 801711a:	f7ff bc97 	b.w	8016a4c <__swbuf_r>
 801711e:	6813      	ldr	r3, [r2, #0]
 8017120:	1c58      	adds	r0, r3, #1
 8017122:	6010      	str	r0, [r2, #0]
 8017124:	7019      	strb	r1, [r3, #0]
 8017126:	4608      	mov	r0, r1
 8017128:	f85d 4b04 	ldr.w	r4, [sp], #4
 801712c:	4770      	bx	lr

0801712e <__sfputs_r>:
 801712e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017130:	4606      	mov	r6, r0
 8017132:	460f      	mov	r7, r1
 8017134:	4614      	mov	r4, r2
 8017136:	18d5      	adds	r5, r2, r3
 8017138:	42ac      	cmp	r4, r5
 801713a:	d101      	bne.n	8017140 <__sfputs_r+0x12>
 801713c:	2000      	movs	r0, #0
 801713e:	e007      	b.n	8017150 <__sfputs_r+0x22>
 8017140:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017144:	463a      	mov	r2, r7
 8017146:	4630      	mov	r0, r6
 8017148:	f7ff ffda 	bl	8017100 <__sfputc_r>
 801714c:	1c43      	adds	r3, r0, #1
 801714e:	d1f3      	bne.n	8017138 <__sfputs_r+0xa>
 8017150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017154 <_vfiprintf_r>:
 8017154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017158:	460d      	mov	r5, r1
 801715a:	b09d      	sub	sp, #116	@ 0x74
 801715c:	4614      	mov	r4, r2
 801715e:	4698      	mov	r8, r3
 8017160:	4606      	mov	r6, r0
 8017162:	b118      	cbz	r0, 801716c <_vfiprintf_r+0x18>
 8017164:	6a03      	ldr	r3, [r0, #32]
 8017166:	b90b      	cbnz	r3, 801716c <_vfiprintf_r+0x18>
 8017168:	f7ff fb18 	bl	801679c <__sinit>
 801716c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801716e:	07d9      	lsls	r1, r3, #31
 8017170:	d405      	bmi.n	801717e <_vfiprintf_r+0x2a>
 8017172:	89ab      	ldrh	r3, [r5, #12]
 8017174:	059a      	lsls	r2, r3, #22
 8017176:	d402      	bmi.n	801717e <_vfiprintf_r+0x2a>
 8017178:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801717a:	f7ff fdd4 	bl	8016d26 <__retarget_lock_acquire_recursive>
 801717e:	89ab      	ldrh	r3, [r5, #12]
 8017180:	071b      	lsls	r3, r3, #28
 8017182:	d501      	bpl.n	8017188 <_vfiprintf_r+0x34>
 8017184:	692b      	ldr	r3, [r5, #16]
 8017186:	b99b      	cbnz	r3, 80171b0 <_vfiprintf_r+0x5c>
 8017188:	4629      	mov	r1, r5
 801718a:	4630      	mov	r0, r6
 801718c:	f7ff fc9c 	bl	8016ac8 <__swsetup_r>
 8017190:	b170      	cbz	r0, 80171b0 <_vfiprintf_r+0x5c>
 8017192:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017194:	07dc      	lsls	r4, r3, #31
 8017196:	d504      	bpl.n	80171a2 <_vfiprintf_r+0x4e>
 8017198:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801719c:	b01d      	add	sp, #116	@ 0x74
 801719e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171a2:	89ab      	ldrh	r3, [r5, #12]
 80171a4:	0598      	lsls	r0, r3, #22
 80171a6:	d4f7      	bmi.n	8017198 <_vfiprintf_r+0x44>
 80171a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80171aa:	f7ff fdbd 	bl	8016d28 <__retarget_lock_release_recursive>
 80171ae:	e7f3      	b.n	8017198 <_vfiprintf_r+0x44>
 80171b0:	2300      	movs	r3, #0
 80171b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80171b4:	2320      	movs	r3, #32
 80171b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80171ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80171be:	2330      	movs	r3, #48	@ 0x30
 80171c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017370 <_vfiprintf_r+0x21c>
 80171c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80171c8:	f04f 0901 	mov.w	r9, #1
 80171cc:	4623      	mov	r3, r4
 80171ce:	469a      	mov	sl, r3
 80171d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80171d4:	b10a      	cbz	r2, 80171da <_vfiprintf_r+0x86>
 80171d6:	2a25      	cmp	r2, #37	@ 0x25
 80171d8:	d1f9      	bne.n	80171ce <_vfiprintf_r+0x7a>
 80171da:	ebba 0b04 	subs.w	fp, sl, r4
 80171de:	d00b      	beq.n	80171f8 <_vfiprintf_r+0xa4>
 80171e0:	465b      	mov	r3, fp
 80171e2:	4622      	mov	r2, r4
 80171e4:	4629      	mov	r1, r5
 80171e6:	4630      	mov	r0, r6
 80171e8:	f7ff ffa1 	bl	801712e <__sfputs_r>
 80171ec:	3001      	adds	r0, #1
 80171ee:	f000 80a7 	beq.w	8017340 <_vfiprintf_r+0x1ec>
 80171f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80171f4:	445a      	add	r2, fp
 80171f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80171f8:	f89a 3000 	ldrb.w	r3, [sl]
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	f000 809f 	beq.w	8017340 <_vfiprintf_r+0x1ec>
 8017202:	2300      	movs	r3, #0
 8017204:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017208:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801720c:	f10a 0a01 	add.w	sl, sl, #1
 8017210:	9304      	str	r3, [sp, #16]
 8017212:	9307      	str	r3, [sp, #28]
 8017214:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017218:	931a      	str	r3, [sp, #104]	@ 0x68
 801721a:	4654      	mov	r4, sl
 801721c:	2205      	movs	r2, #5
 801721e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017222:	4853      	ldr	r0, [pc, #332]	@ (8017370 <_vfiprintf_r+0x21c>)
 8017224:	f7e9 f824 	bl	8000270 <memchr>
 8017228:	9a04      	ldr	r2, [sp, #16]
 801722a:	b9d8      	cbnz	r0, 8017264 <_vfiprintf_r+0x110>
 801722c:	06d1      	lsls	r1, r2, #27
 801722e:	bf44      	itt	mi
 8017230:	2320      	movmi	r3, #32
 8017232:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017236:	0713      	lsls	r3, r2, #28
 8017238:	bf44      	itt	mi
 801723a:	232b      	movmi	r3, #43	@ 0x2b
 801723c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017240:	f89a 3000 	ldrb.w	r3, [sl]
 8017244:	2b2a      	cmp	r3, #42	@ 0x2a
 8017246:	d015      	beq.n	8017274 <_vfiprintf_r+0x120>
 8017248:	9a07      	ldr	r2, [sp, #28]
 801724a:	4654      	mov	r4, sl
 801724c:	2000      	movs	r0, #0
 801724e:	f04f 0c0a 	mov.w	ip, #10
 8017252:	4621      	mov	r1, r4
 8017254:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017258:	3b30      	subs	r3, #48	@ 0x30
 801725a:	2b09      	cmp	r3, #9
 801725c:	d94b      	bls.n	80172f6 <_vfiprintf_r+0x1a2>
 801725e:	b1b0      	cbz	r0, 801728e <_vfiprintf_r+0x13a>
 8017260:	9207      	str	r2, [sp, #28]
 8017262:	e014      	b.n	801728e <_vfiprintf_r+0x13a>
 8017264:	eba0 0308 	sub.w	r3, r0, r8
 8017268:	fa09 f303 	lsl.w	r3, r9, r3
 801726c:	4313      	orrs	r3, r2
 801726e:	9304      	str	r3, [sp, #16]
 8017270:	46a2      	mov	sl, r4
 8017272:	e7d2      	b.n	801721a <_vfiprintf_r+0xc6>
 8017274:	9b03      	ldr	r3, [sp, #12]
 8017276:	1d19      	adds	r1, r3, #4
 8017278:	681b      	ldr	r3, [r3, #0]
 801727a:	9103      	str	r1, [sp, #12]
 801727c:	2b00      	cmp	r3, #0
 801727e:	bfbb      	ittet	lt
 8017280:	425b      	neglt	r3, r3
 8017282:	f042 0202 	orrlt.w	r2, r2, #2
 8017286:	9307      	strge	r3, [sp, #28]
 8017288:	9307      	strlt	r3, [sp, #28]
 801728a:	bfb8      	it	lt
 801728c:	9204      	strlt	r2, [sp, #16]
 801728e:	7823      	ldrb	r3, [r4, #0]
 8017290:	2b2e      	cmp	r3, #46	@ 0x2e
 8017292:	d10a      	bne.n	80172aa <_vfiprintf_r+0x156>
 8017294:	7863      	ldrb	r3, [r4, #1]
 8017296:	2b2a      	cmp	r3, #42	@ 0x2a
 8017298:	d132      	bne.n	8017300 <_vfiprintf_r+0x1ac>
 801729a:	9b03      	ldr	r3, [sp, #12]
 801729c:	1d1a      	adds	r2, r3, #4
 801729e:	681b      	ldr	r3, [r3, #0]
 80172a0:	9203      	str	r2, [sp, #12]
 80172a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80172a6:	3402      	adds	r4, #2
 80172a8:	9305      	str	r3, [sp, #20]
 80172aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017380 <_vfiprintf_r+0x22c>
 80172ae:	7821      	ldrb	r1, [r4, #0]
 80172b0:	2203      	movs	r2, #3
 80172b2:	4650      	mov	r0, sl
 80172b4:	f7e8 ffdc 	bl	8000270 <memchr>
 80172b8:	b138      	cbz	r0, 80172ca <_vfiprintf_r+0x176>
 80172ba:	9b04      	ldr	r3, [sp, #16]
 80172bc:	eba0 000a 	sub.w	r0, r0, sl
 80172c0:	2240      	movs	r2, #64	@ 0x40
 80172c2:	4082      	lsls	r2, r0
 80172c4:	4313      	orrs	r3, r2
 80172c6:	3401      	adds	r4, #1
 80172c8:	9304      	str	r3, [sp, #16]
 80172ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80172ce:	4829      	ldr	r0, [pc, #164]	@ (8017374 <_vfiprintf_r+0x220>)
 80172d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80172d4:	2206      	movs	r2, #6
 80172d6:	f7e8 ffcb 	bl	8000270 <memchr>
 80172da:	2800      	cmp	r0, #0
 80172dc:	d03f      	beq.n	801735e <_vfiprintf_r+0x20a>
 80172de:	4b26      	ldr	r3, [pc, #152]	@ (8017378 <_vfiprintf_r+0x224>)
 80172e0:	bb1b      	cbnz	r3, 801732a <_vfiprintf_r+0x1d6>
 80172e2:	9b03      	ldr	r3, [sp, #12]
 80172e4:	3307      	adds	r3, #7
 80172e6:	f023 0307 	bic.w	r3, r3, #7
 80172ea:	3308      	adds	r3, #8
 80172ec:	9303      	str	r3, [sp, #12]
 80172ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80172f0:	443b      	add	r3, r7
 80172f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80172f4:	e76a      	b.n	80171cc <_vfiprintf_r+0x78>
 80172f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80172fa:	460c      	mov	r4, r1
 80172fc:	2001      	movs	r0, #1
 80172fe:	e7a8      	b.n	8017252 <_vfiprintf_r+0xfe>
 8017300:	2300      	movs	r3, #0
 8017302:	3401      	adds	r4, #1
 8017304:	9305      	str	r3, [sp, #20]
 8017306:	4619      	mov	r1, r3
 8017308:	f04f 0c0a 	mov.w	ip, #10
 801730c:	4620      	mov	r0, r4
 801730e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017312:	3a30      	subs	r2, #48	@ 0x30
 8017314:	2a09      	cmp	r2, #9
 8017316:	d903      	bls.n	8017320 <_vfiprintf_r+0x1cc>
 8017318:	2b00      	cmp	r3, #0
 801731a:	d0c6      	beq.n	80172aa <_vfiprintf_r+0x156>
 801731c:	9105      	str	r1, [sp, #20]
 801731e:	e7c4      	b.n	80172aa <_vfiprintf_r+0x156>
 8017320:	fb0c 2101 	mla	r1, ip, r1, r2
 8017324:	4604      	mov	r4, r0
 8017326:	2301      	movs	r3, #1
 8017328:	e7f0      	b.n	801730c <_vfiprintf_r+0x1b8>
 801732a:	ab03      	add	r3, sp, #12
 801732c:	9300      	str	r3, [sp, #0]
 801732e:	462a      	mov	r2, r5
 8017330:	4b12      	ldr	r3, [pc, #72]	@ (801737c <_vfiprintf_r+0x228>)
 8017332:	a904      	add	r1, sp, #16
 8017334:	4630      	mov	r0, r6
 8017336:	f3af 8000 	nop.w
 801733a:	4607      	mov	r7, r0
 801733c:	1c78      	adds	r0, r7, #1
 801733e:	d1d6      	bne.n	80172ee <_vfiprintf_r+0x19a>
 8017340:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017342:	07d9      	lsls	r1, r3, #31
 8017344:	d405      	bmi.n	8017352 <_vfiprintf_r+0x1fe>
 8017346:	89ab      	ldrh	r3, [r5, #12]
 8017348:	059a      	lsls	r2, r3, #22
 801734a:	d402      	bmi.n	8017352 <_vfiprintf_r+0x1fe>
 801734c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801734e:	f7ff fceb 	bl	8016d28 <__retarget_lock_release_recursive>
 8017352:	89ab      	ldrh	r3, [r5, #12]
 8017354:	065b      	lsls	r3, r3, #25
 8017356:	f53f af1f 	bmi.w	8017198 <_vfiprintf_r+0x44>
 801735a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801735c:	e71e      	b.n	801719c <_vfiprintf_r+0x48>
 801735e:	ab03      	add	r3, sp, #12
 8017360:	9300      	str	r3, [sp, #0]
 8017362:	462a      	mov	r2, r5
 8017364:	4b05      	ldr	r3, [pc, #20]	@ (801737c <_vfiprintf_r+0x228>)
 8017366:	a904      	add	r1, sp, #16
 8017368:	4630      	mov	r0, r6
 801736a:	f000 f879 	bl	8017460 <_printf_i>
 801736e:	e7e4      	b.n	801733a <_vfiprintf_r+0x1e6>
 8017370:	0801885b 	.word	0x0801885b
 8017374:	08018865 	.word	0x08018865
 8017378:	00000000 	.word	0x00000000
 801737c:	0801712f 	.word	0x0801712f
 8017380:	08018861 	.word	0x08018861

08017384 <_printf_common>:
 8017384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017388:	4616      	mov	r6, r2
 801738a:	4698      	mov	r8, r3
 801738c:	688a      	ldr	r2, [r1, #8]
 801738e:	690b      	ldr	r3, [r1, #16]
 8017390:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017394:	4293      	cmp	r3, r2
 8017396:	bfb8      	it	lt
 8017398:	4613      	movlt	r3, r2
 801739a:	6033      	str	r3, [r6, #0]
 801739c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80173a0:	4607      	mov	r7, r0
 80173a2:	460c      	mov	r4, r1
 80173a4:	b10a      	cbz	r2, 80173aa <_printf_common+0x26>
 80173a6:	3301      	adds	r3, #1
 80173a8:	6033      	str	r3, [r6, #0]
 80173aa:	6823      	ldr	r3, [r4, #0]
 80173ac:	0699      	lsls	r1, r3, #26
 80173ae:	bf42      	ittt	mi
 80173b0:	6833      	ldrmi	r3, [r6, #0]
 80173b2:	3302      	addmi	r3, #2
 80173b4:	6033      	strmi	r3, [r6, #0]
 80173b6:	6825      	ldr	r5, [r4, #0]
 80173b8:	f015 0506 	ands.w	r5, r5, #6
 80173bc:	d106      	bne.n	80173cc <_printf_common+0x48>
 80173be:	f104 0a19 	add.w	sl, r4, #25
 80173c2:	68e3      	ldr	r3, [r4, #12]
 80173c4:	6832      	ldr	r2, [r6, #0]
 80173c6:	1a9b      	subs	r3, r3, r2
 80173c8:	42ab      	cmp	r3, r5
 80173ca:	dc26      	bgt.n	801741a <_printf_common+0x96>
 80173cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80173d0:	6822      	ldr	r2, [r4, #0]
 80173d2:	3b00      	subs	r3, #0
 80173d4:	bf18      	it	ne
 80173d6:	2301      	movne	r3, #1
 80173d8:	0692      	lsls	r2, r2, #26
 80173da:	d42b      	bmi.n	8017434 <_printf_common+0xb0>
 80173dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80173e0:	4641      	mov	r1, r8
 80173e2:	4638      	mov	r0, r7
 80173e4:	47c8      	blx	r9
 80173e6:	3001      	adds	r0, #1
 80173e8:	d01e      	beq.n	8017428 <_printf_common+0xa4>
 80173ea:	6823      	ldr	r3, [r4, #0]
 80173ec:	6922      	ldr	r2, [r4, #16]
 80173ee:	f003 0306 	and.w	r3, r3, #6
 80173f2:	2b04      	cmp	r3, #4
 80173f4:	bf02      	ittt	eq
 80173f6:	68e5      	ldreq	r5, [r4, #12]
 80173f8:	6833      	ldreq	r3, [r6, #0]
 80173fa:	1aed      	subeq	r5, r5, r3
 80173fc:	68a3      	ldr	r3, [r4, #8]
 80173fe:	bf0c      	ite	eq
 8017400:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017404:	2500      	movne	r5, #0
 8017406:	4293      	cmp	r3, r2
 8017408:	bfc4      	itt	gt
 801740a:	1a9b      	subgt	r3, r3, r2
 801740c:	18ed      	addgt	r5, r5, r3
 801740e:	2600      	movs	r6, #0
 8017410:	341a      	adds	r4, #26
 8017412:	42b5      	cmp	r5, r6
 8017414:	d11a      	bne.n	801744c <_printf_common+0xc8>
 8017416:	2000      	movs	r0, #0
 8017418:	e008      	b.n	801742c <_printf_common+0xa8>
 801741a:	2301      	movs	r3, #1
 801741c:	4652      	mov	r2, sl
 801741e:	4641      	mov	r1, r8
 8017420:	4638      	mov	r0, r7
 8017422:	47c8      	blx	r9
 8017424:	3001      	adds	r0, #1
 8017426:	d103      	bne.n	8017430 <_printf_common+0xac>
 8017428:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801742c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017430:	3501      	adds	r5, #1
 8017432:	e7c6      	b.n	80173c2 <_printf_common+0x3e>
 8017434:	18e1      	adds	r1, r4, r3
 8017436:	1c5a      	adds	r2, r3, #1
 8017438:	2030      	movs	r0, #48	@ 0x30
 801743a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801743e:	4422      	add	r2, r4
 8017440:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017444:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017448:	3302      	adds	r3, #2
 801744a:	e7c7      	b.n	80173dc <_printf_common+0x58>
 801744c:	2301      	movs	r3, #1
 801744e:	4622      	mov	r2, r4
 8017450:	4641      	mov	r1, r8
 8017452:	4638      	mov	r0, r7
 8017454:	47c8      	blx	r9
 8017456:	3001      	adds	r0, #1
 8017458:	d0e6      	beq.n	8017428 <_printf_common+0xa4>
 801745a:	3601      	adds	r6, #1
 801745c:	e7d9      	b.n	8017412 <_printf_common+0x8e>
	...

08017460 <_printf_i>:
 8017460:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017464:	7e0f      	ldrb	r7, [r1, #24]
 8017466:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017468:	2f78      	cmp	r7, #120	@ 0x78
 801746a:	4691      	mov	r9, r2
 801746c:	4680      	mov	r8, r0
 801746e:	460c      	mov	r4, r1
 8017470:	469a      	mov	sl, r3
 8017472:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017476:	d807      	bhi.n	8017488 <_printf_i+0x28>
 8017478:	2f62      	cmp	r7, #98	@ 0x62
 801747a:	d80a      	bhi.n	8017492 <_printf_i+0x32>
 801747c:	2f00      	cmp	r7, #0
 801747e:	f000 80d1 	beq.w	8017624 <_printf_i+0x1c4>
 8017482:	2f58      	cmp	r7, #88	@ 0x58
 8017484:	f000 80b8 	beq.w	80175f8 <_printf_i+0x198>
 8017488:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801748c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017490:	e03a      	b.n	8017508 <_printf_i+0xa8>
 8017492:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017496:	2b15      	cmp	r3, #21
 8017498:	d8f6      	bhi.n	8017488 <_printf_i+0x28>
 801749a:	a101      	add	r1, pc, #4	@ (adr r1, 80174a0 <_printf_i+0x40>)
 801749c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80174a0:	080174f9 	.word	0x080174f9
 80174a4:	0801750d 	.word	0x0801750d
 80174a8:	08017489 	.word	0x08017489
 80174ac:	08017489 	.word	0x08017489
 80174b0:	08017489 	.word	0x08017489
 80174b4:	08017489 	.word	0x08017489
 80174b8:	0801750d 	.word	0x0801750d
 80174bc:	08017489 	.word	0x08017489
 80174c0:	08017489 	.word	0x08017489
 80174c4:	08017489 	.word	0x08017489
 80174c8:	08017489 	.word	0x08017489
 80174cc:	0801760b 	.word	0x0801760b
 80174d0:	08017537 	.word	0x08017537
 80174d4:	080175c5 	.word	0x080175c5
 80174d8:	08017489 	.word	0x08017489
 80174dc:	08017489 	.word	0x08017489
 80174e0:	0801762d 	.word	0x0801762d
 80174e4:	08017489 	.word	0x08017489
 80174e8:	08017537 	.word	0x08017537
 80174ec:	08017489 	.word	0x08017489
 80174f0:	08017489 	.word	0x08017489
 80174f4:	080175cd 	.word	0x080175cd
 80174f8:	6833      	ldr	r3, [r6, #0]
 80174fa:	1d1a      	adds	r2, r3, #4
 80174fc:	681b      	ldr	r3, [r3, #0]
 80174fe:	6032      	str	r2, [r6, #0]
 8017500:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017504:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017508:	2301      	movs	r3, #1
 801750a:	e09c      	b.n	8017646 <_printf_i+0x1e6>
 801750c:	6833      	ldr	r3, [r6, #0]
 801750e:	6820      	ldr	r0, [r4, #0]
 8017510:	1d19      	adds	r1, r3, #4
 8017512:	6031      	str	r1, [r6, #0]
 8017514:	0606      	lsls	r6, r0, #24
 8017516:	d501      	bpl.n	801751c <_printf_i+0xbc>
 8017518:	681d      	ldr	r5, [r3, #0]
 801751a:	e003      	b.n	8017524 <_printf_i+0xc4>
 801751c:	0645      	lsls	r5, r0, #25
 801751e:	d5fb      	bpl.n	8017518 <_printf_i+0xb8>
 8017520:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017524:	2d00      	cmp	r5, #0
 8017526:	da03      	bge.n	8017530 <_printf_i+0xd0>
 8017528:	232d      	movs	r3, #45	@ 0x2d
 801752a:	426d      	negs	r5, r5
 801752c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017530:	4858      	ldr	r0, [pc, #352]	@ (8017694 <_printf_i+0x234>)
 8017532:	230a      	movs	r3, #10
 8017534:	e011      	b.n	801755a <_printf_i+0xfa>
 8017536:	6821      	ldr	r1, [r4, #0]
 8017538:	6833      	ldr	r3, [r6, #0]
 801753a:	0608      	lsls	r0, r1, #24
 801753c:	f853 5b04 	ldr.w	r5, [r3], #4
 8017540:	d402      	bmi.n	8017548 <_printf_i+0xe8>
 8017542:	0649      	lsls	r1, r1, #25
 8017544:	bf48      	it	mi
 8017546:	b2ad      	uxthmi	r5, r5
 8017548:	2f6f      	cmp	r7, #111	@ 0x6f
 801754a:	4852      	ldr	r0, [pc, #328]	@ (8017694 <_printf_i+0x234>)
 801754c:	6033      	str	r3, [r6, #0]
 801754e:	bf14      	ite	ne
 8017550:	230a      	movne	r3, #10
 8017552:	2308      	moveq	r3, #8
 8017554:	2100      	movs	r1, #0
 8017556:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801755a:	6866      	ldr	r6, [r4, #4]
 801755c:	60a6      	str	r6, [r4, #8]
 801755e:	2e00      	cmp	r6, #0
 8017560:	db05      	blt.n	801756e <_printf_i+0x10e>
 8017562:	6821      	ldr	r1, [r4, #0]
 8017564:	432e      	orrs	r6, r5
 8017566:	f021 0104 	bic.w	r1, r1, #4
 801756a:	6021      	str	r1, [r4, #0]
 801756c:	d04b      	beq.n	8017606 <_printf_i+0x1a6>
 801756e:	4616      	mov	r6, r2
 8017570:	fbb5 f1f3 	udiv	r1, r5, r3
 8017574:	fb03 5711 	mls	r7, r3, r1, r5
 8017578:	5dc7      	ldrb	r7, [r0, r7]
 801757a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801757e:	462f      	mov	r7, r5
 8017580:	42bb      	cmp	r3, r7
 8017582:	460d      	mov	r5, r1
 8017584:	d9f4      	bls.n	8017570 <_printf_i+0x110>
 8017586:	2b08      	cmp	r3, #8
 8017588:	d10b      	bne.n	80175a2 <_printf_i+0x142>
 801758a:	6823      	ldr	r3, [r4, #0]
 801758c:	07df      	lsls	r7, r3, #31
 801758e:	d508      	bpl.n	80175a2 <_printf_i+0x142>
 8017590:	6923      	ldr	r3, [r4, #16]
 8017592:	6861      	ldr	r1, [r4, #4]
 8017594:	4299      	cmp	r1, r3
 8017596:	bfde      	ittt	le
 8017598:	2330      	movle	r3, #48	@ 0x30
 801759a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801759e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80175a2:	1b92      	subs	r2, r2, r6
 80175a4:	6122      	str	r2, [r4, #16]
 80175a6:	f8cd a000 	str.w	sl, [sp]
 80175aa:	464b      	mov	r3, r9
 80175ac:	aa03      	add	r2, sp, #12
 80175ae:	4621      	mov	r1, r4
 80175b0:	4640      	mov	r0, r8
 80175b2:	f7ff fee7 	bl	8017384 <_printf_common>
 80175b6:	3001      	adds	r0, #1
 80175b8:	d14a      	bne.n	8017650 <_printf_i+0x1f0>
 80175ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80175be:	b004      	add	sp, #16
 80175c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175c4:	6823      	ldr	r3, [r4, #0]
 80175c6:	f043 0320 	orr.w	r3, r3, #32
 80175ca:	6023      	str	r3, [r4, #0]
 80175cc:	4832      	ldr	r0, [pc, #200]	@ (8017698 <_printf_i+0x238>)
 80175ce:	2778      	movs	r7, #120	@ 0x78
 80175d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80175d4:	6823      	ldr	r3, [r4, #0]
 80175d6:	6831      	ldr	r1, [r6, #0]
 80175d8:	061f      	lsls	r7, r3, #24
 80175da:	f851 5b04 	ldr.w	r5, [r1], #4
 80175de:	d402      	bmi.n	80175e6 <_printf_i+0x186>
 80175e0:	065f      	lsls	r7, r3, #25
 80175e2:	bf48      	it	mi
 80175e4:	b2ad      	uxthmi	r5, r5
 80175e6:	6031      	str	r1, [r6, #0]
 80175e8:	07d9      	lsls	r1, r3, #31
 80175ea:	bf44      	itt	mi
 80175ec:	f043 0320 	orrmi.w	r3, r3, #32
 80175f0:	6023      	strmi	r3, [r4, #0]
 80175f2:	b11d      	cbz	r5, 80175fc <_printf_i+0x19c>
 80175f4:	2310      	movs	r3, #16
 80175f6:	e7ad      	b.n	8017554 <_printf_i+0xf4>
 80175f8:	4826      	ldr	r0, [pc, #152]	@ (8017694 <_printf_i+0x234>)
 80175fa:	e7e9      	b.n	80175d0 <_printf_i+0x170>
 80175fc:	6823      	ldr	r3, [r4, #0]
 80175fe:	f023 0320 	bic.w	r3, r3, #32
 8017602:	6023      	str	r3, [r4, #0]
 8017604:	e7f6      	b.n	80175f4 <_printf_i+0x194>
 8017606:	4616      	mov	r6, r2
 8017608:	e7bd      	b.n	8017586 <_printf_i+0x126>
 801760a:	6833      	ldr	r3, [r6, #0]
 801760c:	6825      	ldr	r5, [r4, #0]
 801760e:	6961      	ldr	r1, [r4, #20]
 8017610:	1d18      	adds	r0, r3, #4
 8017612:	6030      	str	r0, [r6, #0]
 8017614:	062e      	lsls	r6, r5, #24
 8017616:	681b      	ldr	r3, [r3, #0]
 8017618:	d501      	bpl.n	801761e <_printf_i+0x1be>
 801761a:	6019      	str	r1, [r3, #0]
 801761c:	e002      	b.n	8017624 <_printf_i+0x1c4>
 801761e:	0668      	lsls	r0, r5, #25
 8017620:	d5fb      	bpl.n	801761a <_printf_i+0x1ba>
 8017622:	8019      	strh	r1, [r3, #0]
 8017624:	2300      	movs	r3, #0
 8017626:	6123      	str	r3, [r4, #16]
 8017628:	4616      	mov	r6, r2
 801762a:	e7bc      	b.n	80175a6 <_printf_i+0x146>
 801762c:	6833      	ldr	r3, [r6, #0]
 801762e:	1d1a      	adds	r2, r3, #4
 8017630:	6032      	str	r2, [r6, #0]
 8017632:	681e      	ldr	r6, [r3, #0]
 8017634:	6862      	ldr	r2, [r4, #4]
 8017636:	2100      	movs	r1, #0
 8017638:	4630      	mov	r0, r6
 801763a:	f7e8 fe19 	bl	8000270 <memchr>
 801763e:	b108      	cbz	r0, 8017644 <_printf_i+0x1e4>
 8017640:	1b80      	subs	r0, r0, r6
 8017642:	6060      	str	r0, [r4, #4]
 8017644:	6863      	ldr	r3, [r4, #4]
 8017646:	6123      	str	r3, [r4, #16]
 8017648:	2300      	movs	r3, #0
 801764a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801764e:	e7aa      	b.n	80175a6 <_printf_i+0x146>
 8017650:	6923      	ldr	r3, [r4, #16]
 8017652:	4632      	mov	r2, r6
 8017654:	4649      	mov	r1, r9
 8017656:	4640      	mov	r0, r8
 8017658:	47d0      	blx	sl
 801765a:	3001      	adds	r0, #1
 801765c:	d0ad      	beq.n	80175ba <_printf_i+0x15a>
 801765e:	6823      	ldr	r3, [r4, #0]
 8017660:	079b      	lsls	r3, r3, #30
 8017662:	d413      	bmi.n	801768c <_printf_i+0x22c>
 8017664:	68e0      	ldr	r0, [r4, #12]
 8017666:	9b03      	ldr	r3, [sp, #12]
 8017668:	4298      	cmp	r0, r3
 801766a:	bfb8      	it	lt
 801766c:	4618      	movlt	r0, r3
 801766e:	e7a6      	b.n	80175be <_printf_i+0x15e>
 8017670:	2301      	movs	r3, #1
 8017672:	4632      	mov	r2, r6
 8017674:	4649      	mov	r1, r9
 8017676:	4640      	mov	r0, r8
 8017678:	47d0      	blx	sl
 801767a:	3001      	adds	r0, #1
 801767c:	d09d      	beq.n	80175ba <_printf_i+0x15a>
 801767e:	3501      	adds	r5, #1
 8017680:	68e3      	ldr	r3, [r4, #12]
 8017682:	9903      	ldr	r1, [sp, #12]
 8017684:	1a5b      	subs	r3, r3, r1
 8017686:	42ab      	cmp	r3, r5
 8017688:	dcf2      	bgt.n	8017670 <_printf_i+0x210>
 801768a:	e7eb      	b.n	8017664 <_printf_i+0x204>
 801768c:	2500      	movs	r5, #0
 801768e:	f104 0619 	add.w	r6, r4, #25
 8017692:	e7f5      	b.n	8017680 <_printf_i+0x220>
 8017694:	0801886c 	.word	0x0801886c
 8017698:	0801887d 	.word	0x0801887d

0801769c <__sflush_r>:
 801769c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80176a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176a4:	0716      	lsls	r6, r2, #28
 80176a6:	4605      	mov	r5, r0
 80176a8:	460c      	mov	r4, r1
 80176aa:	d454      	bmi.n	8017756 <__sflush_r+0xba>
 80176ac:	684b      	ldr	r3, [r1, #4]
 80176ae:	2b00      	cmp	r3, #0
 80176b0:	dc02      	bgt.n	80176b8 <__sflush_r+0x1c>
 80176b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	dd48      	ble.n	801774a <__sflush_r+0xae>
 80176b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80176ba:	2e00      	cmp	r6, #0
 80176bc:	d045      	beq.n	801774a <__sflush_r+0xae>
 80176be:	2300      	movs	r3, #0
 80176c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80176c4:	682f      	ldr	r7, [r5, #0]
 80176c6:	6a21      	ldr	r1, [r4, #32]
 80176c8:	602b      	str	r3, [r5, #0]
 80176ca:	d030      	beq.n	801772e <__sflush_r+0x92>
 80176cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80176ce:	89a3      	ldrh	r3, [r4, #12]
 80176d0:	0759      	lsls	r1, r3, #29
 80176d2:	d505      	bpl.n	80176e0 <__sflush_r+0x44>
 80176d4:	6863      	ldr	r3, [r4, #4]
 80176d6:	1ad2      	subs	r2, r2, r3
 80176d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80176da:	b10b      	cbz	r3, 80176e0 <__sflush_r+0x44>
 80176dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80176de:	1ad2      	subs	r2, r2, r3
 80176e0:	2300      	movs	r3, #0
 80176e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80176e4:	6a21      	ldr	r1, [r4, #32]
 80176e6:	4628      	mov	r0, r5
 80176e8:	47b0      	blx	r6
 80176ea:	1c43      	adds	r3, r0, #1
 80176ec:	89a3      	ldrh	r3, [r4, #12]
 80176ee:	d106      	bne.n	80176fe <__sflush_r+0x62>
 80176f0:	6829      	ldr	r1, [r5, #0]
 80176f2:	291d      	cmp	r1, #29
 80176f4:	d82b      	bhi.n	801774e <__sflush_r+0xb2>
 80176f6:	4a2a      	ldr	r2, [pc, #168]	@ (80177a0 <__sflush_r+0x104>)
 80176f8:	40ca      	lsrs	r2, r1
 80176fa:	07d6      	lsls	r6, r2, #31
 80176fc:	d527      	bpl.n	801774e <__sflush_r+0xb2>
 80176fe:	2200      	movs	r2, #0
 8017700:	6062      	str	r2, [r4, #4]
 8017702:	04d9      	lsls	r1, r3, #19
 8017704:	6922      	ldr	r2, [r4, #16]
 8017706:	6022      	str	r2, [r4, #0]
 8017708:	d504      	bpl.n	8017714 <__sflush_r+0x78>
 801770a:	1c42      	adds	r2, r0, #1
 801770c:	d101      	bne.n	8017712 <__sflush_r+0x76>
 801770e:	682b      	ldr	r3, [r5, #0]
 8017710:	b903      	cbnz	r3, 8017714 <__sflush_r+0x78>
 8017712:	6560      	str	r0, [r4, #84]	@ 0x54
 8017714:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017716:	602f      	str	r7, [r5, #0]
 8017718:	b1b9      	cbz	r1, 801774a <__sflush_r+0xae>
 801771a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801771e:	4299      	cmp	r1, r3
 8017720:	d002      	beq.n	8017728 <__sflush_r+0x8c>
 8017722:	4628      	mov	r0, r5
 8017724:	f7ff fb42 	bl	8016dac <_free_r>
 8017728:	2300      	movs	r3, #0
 801772a:	6363      	str	r3, [r4, #52]	@ 0x34
 801772c:	e00d      	b.n	801774a <__sflush_r+0xae>
 801772e:	2301      	movs	r3, #1
 8017730:	4628      	mov	r0, r5
 8017732:	47b0      	blx	r6
 8017734:	4602      	mov	r2, r0
 8017736:	1c50      	adds	r0, r2, #1
 8017738:	d1c9      	bne.n	80176ce <__sflush_r+0x32>
 801773a:	682b      	ldr	r3, [r5, #0]
 801773c:	2b00      	cmp	r3, #0
 801773e:	d0c6      	beq.n	80176ce <__sflush_r+0x32>
 8017740:	2b1d      	cmp	r3, #29
 8017742:	d001      	beq.n	8017748 <__sflush_r+0xac>
 8017744:	2b16      	cmp	r3, #22
 8017746:	d11e      	bne.n	8017786 <__sflush_r+0xea>
 8017748:	602f      	str	r7, [r5, #0]
 801774a:	2000      	movs	r0, #0
 801774c:	e022      	b.n	8017794 <__sflush_r+0xf8>
 801774e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017752:	b21b      	sxth	r3, r3
 8017754:	e01b      	b.n	801778e <__sflush_r+0xf2>
 8017756:	690f      	ldr	r7, [r1, #16]
 8017758:	2f00      	cmp	r7, #0
 801775a:	d0f6      	beq.n	801774a <__sflush_r+0xae>
 801775c:	0793      	lsls	r3, r2, #30
 801775e:	680e      	ldr	r6, [r1, #0]
 8017760:	bf08      	it	eq
 8017762:	694b      	ldreq	r3, [r1, #20]
 8017764:	600f      	str	r7, [r1, #0]
 8017766:	bf18      	it	ne
 8017768:	2300      	movne	r3, #0
 801776a:	eba6 0807 	sub.w	r8, r6, r7
 801776e:	608b      	str	r3, [r1, #8]
 8017770:	f1b8 0f00 	cmp.w	r8, #0
 8017774:	dde9      	ble.n	801774a <__sflush_r+0xae>
 8017776:	6a21      	ldr	r1, [r4, #32]
 8017778:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801777a:	4643      	mov	r3, r8
 801777c:	463a      	mov	r2, r7
 801777e:	4628      	mov	r0, r5
 8017780:	47b0      	blx	r6
 8017782:	2800      	cmp	r0, #0
 8017784:	dc08      	bgt.n	8017798 <__sflush_r+0xfc>
 8017786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801778a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801778e:	81a3      	strh	r3, [r4, #12]
 8017790:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017798:	4407      	add	r7, r0
 801779a:	eba8 0800 	sub.w	r8, r8, r0
 801779e:	e7e7      	b.n	8017770 <__sflush_r+0xd4>
 80177a0:	20400001 	.word	0x20400001

080177a4 <_fflush_r>:
 80177a4:	b538      	push	{r3, r4, r5, lr}
 80177a6:	690b      	ldr	r3, [r1, #16]
 80177a8:	4605      	mov	r5, r0
 80177aa:	460c      	mov	r4, r1
 80177ac:	b913      	cbnz	r3, 80177b4 <_fflush_r+0x10>
 80177ae:	2500      	movs	r5, #0
 80177b0:	4628      	mov	r0, r5
 80177b2:	bd38      	pop	{r3, r4, r5, pc}
 80177b4:	b118      	cbz	r0, 80177be <_fflush_r+0x1a>
 80177b6:	6a03      	ldr	r3, [r0, #32]
 80177b8:	b90b      	cbnz	r3, 80177be <_fflush_r+0x1a>
 80177ba:	f7fe ffef 	bl	801679c <__sinit>
 80177be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	d0f3      	beq.n	80177ae <_fflush_r+0xa>
 80177c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80177c8:	07d0      	lsls	r0, r2, #31
 80177ca:	d404      	bmi.n	80177d6 <_fflush_r+0x32>
 80177cc:	0599      	lsls	r1, r3, #22
 80177ce:	d402      	bmi.n	80177d6 <_fflush_r+0x32>
 80177d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80177d2:	f7ff faa8 	bl	8016d26 <__retarget_lock_acquire_recursive>
 80177d6:	4628      	mov	r0, r5
 80177d8:	4621      	mov	r1, r4
 80177da:	f7ff ff5f 	bl	801769c <__sflush_r>
 80177de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80177e0:	07da      	lsls	r2, r3, #31
 80177e2:	4605      	mov	r5, r0
 80177e4:	d4e4      	bmi.n	80177b0 <_fflush_r+0xc>
 80177e6:	89a3      	ldrh	r3, [r4, #12]
 80177e8:	059b      	lsls	r3, r3, #22
 80177ea:	d4e1      	bmi.n	80177b0 <_fflush_r+0xc>
 80177ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80177ee:	f7ff fa9b 	bl	8016d28 <__retarget_lock_release_recursive>
 80177f2:	e7dd      	b.n	80177b0 <_fflush_r+0xc>

080177f4 <fiprintf>:
 80177f4:	b40e      	push	{r1, r2, r3}
 80177f6:	b503      	push	{r0, r1, lr}
 80177f8:	4601      	mov	r1, r0
 80177fa:	ab03      	add	r3, sp, #12
 80177fc:	4805      	ldr	r0, [pc, #20]	@ (8017814 <fiprintf+0x20>)
 80177fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8017802:	6800      	ldr	r0, [r0, #0]
 8017804:	9301      	str	r3, [sp, #4]
 8017806:	f7ff fca5 	bl	8017154 <_vfiprintf_r>
 801780a:	b002      	add	sp, #8
 801780c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017810:	b003      	add	sp, #12
 8017812:	4770      	bx	lr
 8017814:	200006a4 	.word	0x200006a4

08017818 <__swhatbuf_r>:
 8017818:	b570      	push	{r4, r5, r6, lr}
 801781a:	460c      	mov	r4, r1
 801781c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017820:	2900      	cmp	r1, #0
 8017822:	b096      	sub	sp, #88	@ 0x58
 8017824:	4615      	mov	r5, r2
 8017826:	461e      	mov	r6, r3
 8017828:	da0d      	bge.n	8017846 <__swhatbuf_r+0x2e>
 801782a:	89a3      	ldrh	r3, [r4, #12]
 801782c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017830:	f04f 0100 	mov.w	r1, #0
 8017834:	bf14      	ite	ne
 8017836:	2340      	movne	r3, #64	@ 0x40
 8017838:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801783c:	2000      	movs	r0, #0
 801783e:	6031      	str	r1, [r6, #0]
 8017840:	602b      	str	r3, [r5, #0]
 8017842:	b016      	add	sp, #88	@ 0x58
 8017844:	bd70      	pop	{r4, r5, r6, pc}
 8017846:	466a      	mov	r2, sp
 8017848:	f000 f848 	bl	80178dc <_fstat_r>
 801784c:	2800      	cmp	r0, #0
 801784e:	dbec      	blt.n	801782a <__swhatbuf_r+0x12>
 8017850:	9901      	ldr	r1, [sp, #4]
 8017852:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017856:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801785a:	4259      	negs	r1, r3
 801785c:	4159      	adcs	r1, r3
 801785e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017862:	e7eb      	b.n	801783c <__swhatbuf_r+0x24>

08017864 <__smakebuf_r>:
 8017864:	898b      	ldrh	r3, [r1, #12]
 8017866:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017868:	079d      	lsls	r5, r3, #30
 801786a:	4606      	mov	r6, r0
 801786c:	460c      	mov	r4, r1
 801786e:	d507      	bpl.n	8017880 <__smakebuf_r+0x1c>
 8017870:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017874:	6023      	str	r3, [r4, #0]
 8017876:	6123      	str	r3, [r4, #16]
 8017878:	2301      	movs	r3, #1
 801787a:	6163      	str	r3, [r4, #20]
 801787c:	b003      	add	sp, #12
 801787e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017880:	ab01      	add	r3, sp, #4
 8017882:	466a      	mov	r2, sp
 8017884:	f7ff ffc8 	bl	8017818 <__swhatbuf_r>
 8017888:	9f00      	ldr	r7, [sp, #0]
 801788a:	4605      	mov	r5, r0
 801788c:	4639      	mov	r1, r7
 801788e:	4630      	mov	r0, r6
 8017890:	f7fe fd52 	bl	8016338 <_malloc_r>
 8017894:	b948      	cbnz	r0, 80178aa <__smakebuf_r+0x46>
 8017896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801789a:	059a      	lsls	r2, r3, #22
 801789c:	d4ee      	bmi.n	801787c <__smakebuf_r+0x18>
 801789e:	f023 0303 	bic.w	r3, r3, #3
 80178a2:	f043 0302 	orr.w	r3, r3, #2
 80178a6:	81a3      	strh	r3, [r4, #12]
 80178a8:	e7e2      	b.n	8017870 <__smakebuf_r+0xc>
 80178aa:	89a3      	ldrh	r3, [r4, #12]
 80178ac:	6020      	str	r0, [r4, #0]
 80178ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80178b2:	81a3      	strh	r3, [r4, #12]
 80178b4:	9b01      	ldr	r3, [sp, #4]
 80178b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80178ba:	b15b      	cbz	r3, 80178d4 <__smakebuf_r+0x70>
 80178bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80178c0:	4630      	mov	r0, r6
 80178c2:	f000 f81d 	bl	8017900 <_isatty_r>
 80178c6:	b128      	cbz	r0, 80178d4 <__smakebuf_r+0x70>
 80178c8:	89a3      	ldrh	r3, [r4, #12]
 80178ca:	f023 0303 	bic.w	r3, r3, #3
 80178ce:	f043 0301 	orr.w	r3, r3, #1
 80178d2:	81a3      	strh	r3, [r4, #12]
 80178d4:	89a3      	ldrh	r3, [r4, #12]
 80178d6:	431d      	orrs	r5, r3
 80178d8:	81a5      	strh	r5, [r4, #12]
 80178da:	e7cf      	b.n	801787c <__smakebuf_r+0x18>

080178dc <_fstat_r>:
 80178dc:	b538      	push	{r3, r4, r5, lr}
 80178de:	4d07      	ldr	r5, [pc, #28]	@ (80178fc <_fstat_r+0x20>)
 80178e0:	2300      	movs	r3, #0
 80178e2:	4604      	mov	r4, r0
 80178e4:	4608      	mov	r0, r1
 80178e6:	4611      	mov	r1, r2
 80178e8:	602b      	str	r3, [r5, #0]
 80178ea:	f7eb fd0f 	bl	800330c <_fstat>
 80178ee:	1c43      	adds	r3, r0, #1
 80178f0:	d102      	bne.n	80178f8 <_fstat_r+0x1c>
 80178f2:	682b      	ldr	r3, [r5, #0]
 80178f4:	b103      	cbz	r3, 80178f8 <_fstat_r+0x1c>
 80178f6:	6023      	str	r3, [r4, #0]
 80178f8:	bd38      	pop	{r3, r4, r5, pc}
 80178fa:	bf00      	nop
 80178fc:	2000ee0c 	.word	0x2000ee0c

08017900 <_isatty_r>:
 8017900:	b538      	push	{r3, r4, r5, lr}
 8017902:	4d06      	ldr	r5, [pc, #24]	@ (801791c <_isatty_r+0x1c>)
 8017904:	2300      	movs	r3, #0
 8017906:	4604      	mov	r4, r0
 8017908:	4608      	mov	r0, r1
 801790a:	602b      	str	r3, [r5, #0]
 801790c:	f7eb fd0e 	bl	800332c <_isatty>
 8017910:	1c43      	adds	r3, r0, #1
 8017912:	d102      	bne.n	801791a <_isatty_r+0x1a>
 8017914:	682b      	ldr	r3, [r5, #0]
 8017916:	b103      	cbz	r3, 801791a <_isatty_r+0x1a>
 8017918:	6023      	str	r3, [r4, #0]
 801791a:	bd38      	pop	{r3, r4, r5, pc}
 801791c:	2000ee0c 	.word	0x2000ee0c

08017920 <abort>:
 8017920:	b508      	push	{r3, lr}
 8017922:	2006      	movs	r0, #6
 8017924:	f000 f82c 	bl	8017980 <raise>
 8017928:	2001      	movs	r0, #1
 801792a:	f7eb fc9f 	bl	800326c <_exit>

0801792e <_raise_r>:
 801792e:	291f      	cmp	r1, #31
 8017930:	b538      	push	{r3, r4, r5, lr}
 8017932:	4605      	mov	r5, r0
 8017934:	460c      	mov	r4, r1
 8017936:	d904      	bls.n	8017942 <_raise_r+0x14>
 8017938:	2316      	movs	r3, #22
 801793a:	6003      	str	r3, [r0, #0]
 801793c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017940:	bd38      	pop	{r3, r4, r5, pc}
 8017942:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017944:	b112      	cbz	r2, 801794c <_raise_r+0x1e>
 8017946:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801794a:	b94b      	cbnz	r3, 8017960 <_raise_r+0x32>
 801794c:	4628      	mov	r0, r5
 801794e:	f000 f831 	bl	80179b4 <_getpid_r>
 8017952:	4622      	mov	r2, r4
 8017954:	4601      	mov	r1, r0
 8017956:	4628      	mov	r0, r5
 8017958:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801795c:	f000 b818 	b.w	8017990 <_kill_r>
 8017960:	2b01      	cmp	r3, #1
 8017962:	d00a      	beq.n	801797a <_raise_r+0x4c>
 8017964:	1c59      	adds	r1, r3, #1
 8017966:	d103      	bne.n	8017970 <_raise_r+0x42>
 8017968:	2316      	movs	r3, #22
 801796a:	6003      	str	r3, [r0, #0]
 801796c:	2001      	movs	r0, #1
 801796e:	e7e7      	b.n	8017940 <_raise_r+0x12>
 8017970:	2100      	movs	r1, #0
 8017972:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017976:	4620      	mov	r0, r4
 8017978:	4798      	blx	r3
 801797a:	2000      	movs	r0, #0
 801797c:	e7e0      	b.n	8017940 <_raise_r+0x12>
	...

08017980 <raise>:
 8017980:	4b02      	ldr	r3, [pc, #8]	@ (801798c <raise+0xc>)
 8017982:	4601      	mov	r1, r0
 8017984:	6818      	ldr	r0, [r3, #0]
 8017986:	f7ff bfd2 	b.w	801792e <_raise_r>
 801798a:	bf00      	nop
 801798c:	200006a4 	.word	0x200006a4

08017990 <_kill_r>:
 8017990:	b538      	push	{r3, r4, r5, lr}
 8017992:	4d07      	ldr	r5, [pc, #28]	@ (80179b0 <_kill_r+0x20>)
 8017994:	2300      	movs	r3, #0
 8017996:	4604      	mov	r4, r0
 8017998:	4608      	mov	r0, r1
 801799a:	4611      	mov	r1, r2
 801799c:	602b      	str	r3, [r5, #0]
 801799e:	f7eb fc55 	bl	800324c <_kill>
 80179a2:	1c43      	adds	r3, r0, #1
 80179a4:	d102      	bne.n	80179ac <_kill_r+0x1c>
 80179a6:	682b      	ldr	r3, [r5, #0]
 80179a8:	b103      	cbz	r3, 80179ac <_kill_r+0x1c>
 80179aa:	6023      	str	r3, [r4, #0]
 80179ac:	bd38      	pop	{r3, r4, r5, pc}
 80179ae:	bf00      	nop
 80179b0:	2000ee0c 	.word	0x2000ee0c

080179b4 <_getpid_r>:
 80179b4:	f7eb bc42 	b.w	800323c <_getpid>

080179b8 <_init>:
 80179b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179ba:	bf00      	nop
 80179bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80179be:	bc08      	pop	{r3}
 80179c0:	469e      	mov	lr, r3
 80179c2:	4770      	bx	lr

080179c4 <_fini>:
 80179c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179c6:	bf00      	nop
 80179c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80179ca:	bc08      	pop	{r3}
 80179cc:	469e      	mov	lr, r3
 80179ce:	4770      	bx	lr
