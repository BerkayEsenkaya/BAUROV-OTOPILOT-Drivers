
BAUROV-OTOPILOT-NUCF7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bd8  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08006dd8  08006dd8  00007dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e70  08006e70  00008010  2**0
                  CONTENTS
  4 .ARM          00000008  08006e70  08006e70  00007e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e78  08006e78  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e78  08006e78  00007e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e7c  08006e7c  00007e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006e80  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f78  20000010  08006e90  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004f88  08006e90  00008f88  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000207dc  00000000  00000000  0000803e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004196  00000000  00000000  0002881a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b18  00000000  00000000  0002c9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001531  00000000  00000000  0002e4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003f3b  00000000  00000000  0002f9f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000213b0  00000000  00000000  00033934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108943  00000000  00000000  00054ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015d627  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073c4  00000000  00000000  0015d66c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00164a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000010 	.word	0x20000010
 800021c:	00000000 	.word	0x00000000
 8000220:	08006dc0 	.word	0x08006dc0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000014 	.word	0x20000014
 800023c:	08006dc0 	.word	0x08006dc0

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b96a 	b.w	800052c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	460c      	mov	r4, r1
 8000278:	2b00      	cmp	r3, #0
 800027a:	d14e      	bne.n	800031a <__udivmoddi4+0xaa>
 800027c:	4694      	mov	ip, r2
 800027e:	458c      	cmp	ip, r1
 8000280:	4686      	mov	lr, r0
 8000282:	fab2 f282 	clz	r2, r2
 8000286:	d962      	bls.n	800034e <__udivmoddi4+0xde>
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0320 	rsb	r3, r2, #32
 800028e:	4091      	lsls	r1, r2
 8000290:	fa20 f303 	lsr.w	r3, r0, r3
 8000294:	fa0c fc02 	lsl.w	ip, ip, r2
 8000298:	4319      	orrs	r1, r3
 800029a:	fa00 fe02 	lsl.w	lr, r0, r2
 800029e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a2:	fa1f f68c 	uxth.w	r6, ip
 80002a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ae:	fb07 1114 	mls	r1, r7, r4, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb04 f106 	mul.w	r1, r4, r6
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002c6:	f080 8112 	bcs.w	80004ee <__udivmoddi4+0x27e>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 810f 	bls.w	80004ee <__udivmoddi4+0x27e>
 80002d0:	3c02      	subs	r4, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a59      	subs	r1, r3, r1
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	fbb1 f0f7 	udiv	r0, r1, r7
 80002de:	fb07 1110 	mls	r1, r7, r0, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb00 f606 	mul.w	r6, r0, r6
 80002ea:	429e      	cmp	r6, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x94>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002f6:	f080 80fc 	bcs.w	80004f2 <__udivmoddi4+0x282>
 80002fa:	429e      	cmp	r6, r3
 80002fc:	f240 80f9 	bls.w	80004f2 <__udivmoddi4+0x282>
 8000300:	4463      	add	r3, ip
 8000302:	3802      	subs	r0, #2
 8000304:	1b9b      	subs	r3, r3, r6
 8000306:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800030a:	2100      	movs	r1, #0
 800030c:	b11d      	cbz	r5, 8000316 <__udivmoddi4+0xa6>
 800030e:	40d3      	lsrs	r3, r2
 8000310:	2200      	movs	r2, #0
 8000312:	e9c5 3200 	strd	r3, r2, [r5]
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d905      	bls.n	800032a <__udivmoddi4+0xba>
 800031e:	b10d      	cbz	r5, 8000324 <__udivmoddi4+0xb4>
 8000320:	e9c5 0100 	strd	r0, r1, [r5]
 8000324:	2100      	movs	r1, #0
 8000326:	4608      	mov	r0, r1
 8000328:	e7f5      	b.n	8000316 <__udivmoddi4+0xa6>
 800032a:	fab3 f183 	clz	r1, r3
 800032e:	2900      	cmp	r1, #0
 8000330:	d146      	bne.n	80003c0 <__udivmoddi4+0x150>
 8000332:	42a3      	cmp	r3, r4
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xcc>
 8000336:	4290      	cmp	r0, r2
 8000338:	f0c0 80f0 	bcc.w	800051c <__udivmoddi4+0x2ac>
 800033c:	1a86      	subs	r6, r0, r2
 800033e:	eb64 0303 	sbc.w	r3, r4, r3
 8000342:	2001      	movs	r0, #1
 8000344:	2d00      	cmp	r5, #0
 8000346:	d0e6      	beq.n	8000316 <__udivmoddi4+0xa6>
 8000348:	e9c5 6300 	strd	r6, r3, [r5]
 800034c:	e7e3      	b.n	8000316 <__udivmoddi4+0xa6>
 800034e:	2a00      	cmp	r2, #0
 8000350:	f040 8090 	bne.w	8000474 <__udivmoddi4+0x204>
 8000354:	eba1 040c 	sub.w	r4, r1, ip
 8000358:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800035c:	fa1f f78c 	uxth.w	r7, ip
 8000360:	2101      	movs	r1, #1
 8000362:	fbb4 f6f8 	udiv	r6, r4, r8
 8000366:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800036a:	fb08 4416 	mls	r4, r8, r6, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb07 f006 	mul.w	r0, r7, r6
 8000376:	4298      	cmp	r0, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x11c>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x11a>
 8000384:	4298      	cmp	r0, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2b4>
 800038a:	4626      	mov	r6, r4
 800038c:	1a1c      	subs	r4, r3, r0
 800038e:	fa1f f38e 	uxth.w	r3, lr
 8000392:	fbb4 f0f8 	udiv	r0, r4, r8
 8000396:	fb08 4410 	mls	r4, r8, r0, r4
 800039a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800039e:	fb00 f707 	mul.w	r7, r0, r7
 80003a2:	429f      	cmp	r7, r3
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x148>
 80003a6:	eb1c 0303 	adds.w	r3, ip, r3
 80003aa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x146>
 80003b0:	429f      	cmp	r7, r3
 80003b2:	f200 80b0 	bhi.w	8000516 <__udivmoddi4+0x2a6>
 80003b6:	4620      	mov	r0, r4
 80003b8:	1bdb      	subs	r3, r3, r7
 80003ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003be:	e7a5      	b.n	800030c <__udivmoddi4+0x9c>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ca:	431f      	orrs	r7, r3
 80003cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d0:	fa04 f301 	lsl.w	r3, r4, r1
 80003d4:	ea43 030c 	orr.w	r3, r3, ip
 80003d8:	40f4      	lsrs	r4, r6
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	0c38      	lsrs	r0, r7, #16
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb4 fef0 	udiv	lr, r4, r0
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	fb00 441e 	mls	r4, r0, lr, r4
 80003f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f4:	fb0e f90c 	mul.w	r9, lr, ip
 80003f8:	45a1      	cmp	r9, r4
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90a      	bls.n	8000416 <__udivmoddi4+0x1a6>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000406:	f080 8084 	bcs.w	8000512 <__udivmoddi4+0x2a2>
 800040a:	45a1      	cmp	r9, r4
 800040c:	f240 8081 	bls.w	8000512 <__udivmoddi4+0x2a2>
 8000410:	f1ae 0e02 	sub.w	lr, lr, #2
 8000414:	443c      	add	r4, r7
 8000416:	eba4 0409 	sub.w	r4, r4, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000422:	fb00 4413 	mls	r4, r0, r3, r4
 8000426:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800042a:	fb03 fc0c 	mul.w	ip, r3, ip
 800042e:	45a4      	cmp	ip, r4
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1d2>
 8000432:	193c      	adds	r4, r7, r4
 8000434:	f103 30ff 	add.w	r0, r3, #4294967295
 8000438:	d267      	bcs.n	800050a <__udivmoddi4+0x29a>
 800043a:	45a4      	cmp	ip, r4
 800043c:	d965      	bls.n	800050a <__udivmoddi4+0x29a>
 800043e:	3b02      	subs	r3, #2
 8000440:	443c      	add	r4, r7
 8000442:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000446:	fba0 9302 	umull	r9, r3, r0, r2
 800044a:	eba4 040c 	sub.w	r4, r4, ip
 800044e:	429c      	cmp	r4, r3
 8000450:	46ce      	mov	lr, r9
 8000452:	469c      	mov	ip, r3
 8000454:	d351      	bcc.n	80004fa <__udivmoddi4+0x28a>
 8000456:	d04e      	beq.n	80004f6 <__udivmoddi4+0x286>
 8000458:	b155      	cbz	r5, 8000470 <__udivmoddi4+0x200>
 800045a:	ebb8 030e 	subs.w	r3, r8, lr
 800045e:	eb64 040c 	sbc.w	r4, r4, ip
 8000462:	fa04 f606 	lsl.w	r6, r4, r6
 8000466:	40cb      	lsrs	r3, r1
 8000468:	431e      	orrs	r6, r3
 800046a:	40cc      	lsrs	r4, r1
 800046c:	e9c5 6400 	strd	r6, r4, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	e750      	b.n	8000316 <__udivmoddi4+0xa6>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f103 	lsr.w	r1, r0, r3
 800047c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000480:	fa24 f303 	lsr.w	r3, r4, r3
 8000484:	4094      	lsls	r4, r2
 8000486:	430c      	orrs	r4, r1
 8000488:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800048c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000490:	fa1f f78c 	uxth.w	r7, ip
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3110 	mls	r1, r8, r0, r3
 800049c:	0c23      	lsrs	r3, r4, #16
 800049e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004a2:	fb00 f107 	mul.w	r1, r0, r7
 80004a6:	4299      	cmp	r1, r3
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x24c>
 80004aa:	eb1c 0303 	adds.w	r3, ip, r3
 80004ae:	f100 36ff 	add.w	r6, r0, #4294967295
 80004b2:	d22c      	bcs.n	800050e <__udivmoddi4+0x29e>
 80004b4:	4299      	cmp	r1, r3
 80004b6:	d92a      	bls.n	800050e <__udivmoddi4+0x29e>
 80004b8:	3802      	subs	r0, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004c4:	fb08 3311 	mls	r3, r8, r1, r3
 80004c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004cc:	fb01 f307 	mul.w	r3, r1, r7
 80004d0:	42a3      	cmp	r3, r4
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x276>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004dc:	d213      	bcs.n	8000506 <__udivmoddi4+0x296>
 80004de:	42a3      	cmp	r3, r4
 80004e0:	d911      	bls.n	8000506 <__udivmoddi4+0x296>
 80004e2:	3902      	subs	r1, #2
 80004e4:	4464      	add	r4, ip
 80004e6:	1ae4      	subs	r4, r4, r3
 80004e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ec:	e739      	b.n	8000362 <__udivmoddi4+0xf2>
 80004ee:	4604      	mov	r4, r0
 80004f0:	e6f0      	b.n	80002d4 <__udivmoddi4+0x64>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e706      	b.n	8000304 <__udivmoddi4+0x94>
 80004f6:	45c8      	cmp	r8, r9
 80004f8:	d2ae      	bcs.n	8000458 <__udivmoddi4+0x1e8>
 80004fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000502:	3801      	subs	r0, #1
 8000504:	e7a8      	b.n	8000458 <__udivmoddi4+0x1e8>
 8000506:	4631      	mov	r1, r6
 8000508:	e7ed      	b.n	80004e6 <__udivmoddi4+0x276>
 800050a:	4603      	mov	r3, r0
 800050c:	e799      	b.n	8000442 <__udivmoddi4+0x1d2>
 800050e:	4630      	mov	r0, r6
 8000510:	e7d4      	b.n	80004bc <__udivmoddi4+0x24c>
 8000512:	46d6      	mov	lr, sl
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1a6>
 8000516:	4463      	add	r3, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74d      	b.n	80003b8 <__udivmoddi4+0x148>
 800051c:	4606      	mov	r6, r0
 800051e:	4623      	mov	r3, r4
 8000520:	4608      	mov	r0, r1
 8000522:	e70f      	b.n	8000344 <__udivmoddi4+0xd4>
 8000524:	3e02      	subs	r6, #2
 8000526:	4463      	add	r3, ip
 8000528:	e730      	b.n	800038c <__udivmoddi4+0x11c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fc63 	bl	8000dfe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f82a 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 f938 	bl	80007b0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000540:	f000 f8d8 	bl	80006f4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000544:	f000 f906 	bl	8000754 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 8000548:	f000 f894 	bl	8000674 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800054c:	f003 fe00 	bl	8004150 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Thread_MicroROS */
  Thread_MicroROSHandle = osThreadNew(TaskMicroROS, NULL, &Thread_MicroROS_attributes);
 8000550:	4a09      	ldr	r2, [pc, #36]	@ (8000578 <main+0x48>)
 8000552:	2100      	movs	r1, #0
 8000554:	4809      	ldr	r0, [pc, #36]	@ (800057c <main+0x4c>)
 8000556:	f003 fe65 	bl	8004224 <osThreadNew>
 800055a:	4603      	mov	r3, r0
 800055c:	4a08      	ldr	r2, [pc, #32]	@ (8000580 <main+0x50>)
 800055e:	6013      	str	r3, [r2, #0]

  /* creation of Thread_Sensors */
  Thread_SensorsHandle = osThreadNew(TaskSensors, NULL, &Thread_Sensors_attributes);
 8000560:	4a08      	ldr	r2, [pc, #32]	@ (8000584 <main+0x54>)
 8000562:	2100      	movs	r1, #0
 8000564:	4808      	ldr	r0, [pc, #32]	@ (8000588 <main+0x58>)
 8000566:	f003 fe5d 	bl	8004224 <osThreadNew>
 800056a:	4603      	mov	r3, r0
 800056c:	4a07      	ldr	r2, [pc, #28]	@ (800058c <main+0x5c>)
 800056e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000570:	f003 fe22 	bl	80041b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000574:	bf00      	nop
 8000576:	e7fd      	b.n	8000574 <main+0x44>
 8000578:	08006e10 	.word	0x08006e10
 800057c:	0800090d 	.word	0x0800090d
 8000580:	200005e8 	.word	0x200005e8
 8000584:	08006e34 	.word	0x08006e34
 8000588:	0800093d 	.word	0x0800093d
 800058c:	200005ec 	.word	0x200005ec

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	@ 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 031c 	add.w	r3, r7, #28
 800059a:	2234      	movs	r2, #52	@ 0x34
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f006 fbd4 	bl	8006d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 0308 	add.w	r3, r7, #8
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005b4:	f001 f9a4 	bl	8001900 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	4b2c      	ldr	r3, [pc, #176]	@ (800066c <SystemClock_Config+0xdc>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005bc:	4a2b      	ldr	r2, [pc, #172]	@ (800066c <SystemClock_Config+0xdc>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005c4:	4b29      	ldr	r3, [pc, #164]	@ (800066c <SystemClock_Config+0xdc>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d0:	4b27      	ldr	r3, [pc, #156]	@ (8000670 <SystemClock_Config+0xe0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005d8:	4a25      	ldr	r2, [pc, #148]	@ (8000670 <SystemClock_Config+0xe0>)
 80005da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b23      	ldr	r3, [pc, #140]	@ (8000670 <SystemClock_Config+0xe0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005e8:	603b      	str	r3, [r7, #0]
 80005ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ec:	2301      	movs	r3, #1
 80005ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f6:	2302      	movs	r3, #2
 80005f8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000600:	2304      	movs	r3, #4
 8000602:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000604:	2360      	movs	r3, #96	@ 0x60
 8000606:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000608:	2302      	movs	r3, #2
 800060a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800060c:	2304      	movs	r3, #4
 800060e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000610:	2302      	movs	r3, #2
 8000612:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	f107 031c 	add.w	r3, r7, #28
 8000618:	4618      	mov	r0, r3
 800061a:	f001 f9d1 	bl	80019c0 <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000624:	f000 f9b4 	bl	8000990 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000628:	f001 f97a 	bl	8001920 <HAL_PWREx_EnableOverDrive>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000632:	f000 f9ad 	bl	8000990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000636:	230f      	movs	r3, #15
 8000638:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063a:	2302      	movs	r3, #2
 800063c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000642:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800064c:	f107 0308 	add.w	r3, r7, #8
 8000650:	2103      	movs	r1, #3
 8000652:	4618      	mov	r0, r3
 8000654:	f001 fc62 	bl	8001f1c <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800065e:	f000 f997 	bl	8000990 <Error_Handler>
  }
}
 8000662:	bf00      	nop
 8000664:	3750      	adds	r7, #80	@ 0x50
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800
 8000670:	40007000 	.word	0x40007000

08000674 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000678:	4b1b      	ldr	r3, [pc, #108]	@ (80006e8 <MX_I2C2_Init+0x74>)
 800067a:	4a1c      	ldr	r2, [pc, #112]	@ (80006ec <MX_I2C2_Init+0x78>)
 800067c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 800067e:	4b1a      	ldr	r3, [pc, #104]	@ (80006e8 <MX_I2C2_Init+0x74>)
 8000680:	4a1b      	ldr	r2, [pc, #108]	@ (80006f0 <MX_I2C2_Init+0x7c>)
 8000682:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000684:	4b18      	ldr	r3, [pc, #96]	@ (80006e8 <MX_I2C2_Init+0x74>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800068a:	4b17      	ldr	r3, [pc, #92]	@ (80006e8 <MX_I2C2_Init+0x74>)
 800068c:	2201      	movs	r2, #1
 800068e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000690:	4b15      	ldr	r3, [pc, #84]	@ (80006e8 <MX_I2C2_Init+0x74>)
 8000692:	2200      	movs	r2, #0
 8000694:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000696:	4b14      	ldr	r3, [pc, #80]	@ (80006e8 <MX_I2C2_Init+0x74>)
 8000698:	2200      	movs	r2, #0
 800069a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800069c:	4b12      	ldr	r3, [pc, #72]	@ (80006e8 <MX_I2C2_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <MX_I2C2_Init+0x74>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <MX_I2C2_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006ae:	480e      	ldr	r0, [pc, #56]	@ (80006e8 <MX_I2C2_Init+0x74>)
 80006b0:	f000 feb8 	bl	8001424 <HAL_I2C_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80006ba:	f000 f969 	bl	8000990 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006be:	2100      	movs	r1, #0
 80006c0:	4809      	ldr	r0, [pc, #36]	@ (80006e8 <MX_I2C2_Init+0x74>)
 80006c2:	f000 ff4b 	bl	800155c <HAL_I2CEx_ConfigAnalogFilter>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80006cc:	f000 f960 	bl	8000990 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006d0:	2100      	movs	r1, #0
 80006d2:	4805      	ldr	r0, [pc, #20]	@ (80006e8 <MX_I2C2_Init+0x74>)
 80006d4:	f000 ff8d 	bl	80015f2 <HAL_I2CEx_ConfigDigitalFilter>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80006de:	f000 f957 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	2000002c 	.word	0x2000002c
 80006ec:	40005800 	.word	0x40005800
 80006f0:	20303e5d 	.word	0x20303e5d

080006f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006f8:	4b14      	ldr	r3, [pc, #80]	@ (800074c <MX_USART3_UART_Init+0x58>)
 80006fa:	4a15      	ldr	r2, [pc, #84]	@ (8000750 <MX_USART3_UART_Init+0x5c>)
 80006fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006fe:	4b13      	ldr	r3, [pc, #76]	@ (800074c <MX_USART3_UART_Init+0x58>)
 8000700:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000704:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000706:	4b11      	ldr	r3, [pc, #68]	@ (800074c <MX_USART3_UART_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800070c:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <MX_USART3_UART_Init+0x58>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <MX_USART3_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000718:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_USART3_UART_Init+0x58>)
 800071a:	220c      	movs	r2, #12
 800071c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <MX_USART3_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000724:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_USART3_UART_Init+0x58>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072a:	4b08      	ldr	r3, [pc, #32]	@ (800074c <MX_USART3_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_USART3_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	@ (800074c <MX_USART3_UART_Init+0x58>)
 8000738:	f002 fd3e 	bl	80031b8 <HAL_UART_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000742:	f000 f925 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000080 	.word	0x20000080
 8000750:	40004800 	.word	0x40004800

08000754 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000758:	4b14      	ldr	r3, [pc, #80]	@ (80007ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800075a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800075e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000760:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000762:	2206      	movs	r2, #6
 8000764:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000766:	4b11      	ldr	r3, [pc, #68]	@ (80007ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000768:	2202      	movs	r2, #2
 800076a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800076c:	4b0f      	ldr	r3, [pc, #60]	@ (80007ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000772:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000774:	2202      	movs	r2, #2
 8000776:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000778:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077a:	2201      	movs	r2, #1
 800077c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	@ (80007ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000784:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800078a:	4b08      	ldr	r3, [pc, #32]	@ (80007ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078c:	2201      	movs	r2, #1
 800078e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000790:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	@ (80007ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000798:	f000 ff77 	bl	800168a <HAL_PCD_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007a2:	f000 f8f5 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000108 	.word	0x20000108

080007b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08c      	sub	sp, #48	@ 0x30
 80007b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	4b4d      	ldr	r3, [pc, #308]	@ (80008fc <MX_GPIO_Init+0x14c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a4c      	ldr	r2, [pc, #304]	@ (80008fc <MX_GPIO_Init+0x14c>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b4a      	ldr	r3, [pc, #296]	@ (80008fc <MX_GPIO_Init+0x14c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	61bb      	str	r3, [r7, #24]
 80007dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007de:	4b47      	ldr	r3, [pc, #284]	@ (80008fc <MX_GPIO_Init+0x14c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a46      	ldr	r2, [pc, #280]	@ (80008fc <MX_GPIO_Init+0x14c>)
 80007e4:	f043 0320 	orr.w	r3, r3, #32
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b44      	ldr	r3, [pc, #272]	@ (80008fc <MX_GPIO_Init+0x14c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0320 	and.w	r3, r3, #32
 80007f2:	617b      	str	r3, [r7, #20]
 80007f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f6:	4b41      	ldr	r3, [pc, #260]	@ (80008fc <MX_GPIO_Init+0x14c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a40      	ldr	r2, [pc, #256]	@ (80008fc <MX_GPIO_Init+0x14c>)
 80007fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b3e      	ldr	r3, [pc, #248]	@ (80008fc <MX_GPIO_Init+0x14c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	4b3b      	ldr	r3, [pc, #236]	@ (80008fc <MX_GPIO_Init+0x14c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a3a      	ldr	r2, [pc, #232]	@ (80008fc <MX_GPIO_Init+0x14c>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b38      	ldr	r3, [pc, #224]	@ (80008fc <MX_GPIO_Init+0x14c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000826:	4b35      	ldr	r3, [pc, #212]	@ (80008fc <MX_GPIO_Init+0x14c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a34      	ldr	r2, [pc, #208]	@ (80008fc <MX_GPIO_Init+0x14c>)
 800082c:	f043 0308 	orr.w	r3, r3, #8
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b32      	ldr	r3, [pc, #200]	@ (80008fc <MX_GPIO_Init+0x14c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0308 	and.w	r3, r3, #8
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800083e:	4b2f      	ldr	r3, [pc, #188]	@ (80008fc <MX_GPIO_Init+0x14c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a2e      	ldr	r2, [pc, #184]	@ (80008fc <MX_GPIO_Init+0x14c>)
 8000844:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b2c      	ldr	r3, [pc, #176]	@ (80008fc <MX_GPIO_Init+0x14c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	4b29      	ldr	r3, [pc, #164]	@ (80008fc <MX_GPIO_Init+0x14c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a28      	ldr	r2, [pc, #160]	@ (80008fc <MX_GPIO_Init+0x14c>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b26      	ldr	r3, [pc, #152]	@ (80008fc <MX_GPIO_Init+0x14c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000874:	4822      	ldr	r0, [pc, #136]	@ (8000900 <MX_GPIO_Init+0x150>)
 8000876:	f000 fda1 	bl	80013bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2140      	movs	r1, #64	@ 0x40
 800087e:	4821      	ldr	r0, [pc, #132]	@ (8000904 <MX_GPIO_Init+0x154>)
 8000880:	f000 fd9c 	bl	80013bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000884:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	481b      	ldr	r0, [pc, #108]	@ (8000908 <MX_GPIO_Init+0x158>)
 800089c:	f000 fbe2 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008a0:	f244 0381 	movw	r3, #16513	@ 0x4081
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	4811      	ldr	r0, [pc, #68]	@ (8000900 <MX_GPIO_Init+0x150>)
 80008ba:	f000 fbd3 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008be:	2340      	movs	r3, #64	@ 0x40
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	480b      	ldr	r0, [pc, #44]	@ (8000904 <MX_GPIO_Init+0x154>)
 80008d6:	f000 fbc5 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008da:	2380      	movs	r3, #128	@ 0x80
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	4805      	ldr	r0, [pc, #20]	@ (8000904 <MX_GPIO_Init+0x154>)
 80008ee:	f000 fbb9 	bl	8001064 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008f2:	bf00      	nop
 80008f4:	3730      	adds	r7, #48	@ 0x30
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020400 	.word	0x40020400
 8000904:	40021800 	.word	0x40021800
 8000908:	40020800 	.word	0x40020800

0800090c <TaskMicroROS>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMicroROS */
void TaskMicroROS(void *argument)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int i=0;
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	i++;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	3301      	adds	r3, #1
 800091c:	60fb      	str	r3, [r7, #12]
	if(i>=10){
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	2b09      	cmp	r3, #9
 8000922:	dd05      	ble.n	8000930 <TaskMicroROS+0x24>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000924:	2101      	movs	r1, #1
 8000926:	4804      	ldr	r0, [pc, #16]	@ (8000938 <TaskMicroROS+0x2c>)
 8000928:	f000 fd61 	bl	80013ee <HAL_GPIO_TogglePin>
		i=0;
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
	}
    osDelay(10);
 8000930:	200a      	movs	r0, #10
 8000932:	f003 fd1d 	bl	8004370 <osDelay>
	i++;
 8000936:	e7ef      	b.n	8000918 <TaskMicroROS+0xc>
 8000938:	40020400 	.word	0x40020400

0800093c <TaskSensors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskSensors */
void TaskSensors(void *argument)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskSensors */
	int i=0;
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  i++;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	3301      	adds	r3, #1
 800094c:	60fb      	str	r3, [r7, #12]
	if(i>=25){
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	2b18      	cmp	r3, #24
 8000952:	dd05      	ble.n	8000960 <TaskSensors+0x24>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD2_Pin);
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	4804      	ldr	r0, [pc, #16]	@ (8000968 <TaskSensors+0x2c>)
 8000958:	f000 fd49 	bl	80013ee <HAL_GPIO_TogglePin>
		i=0;
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
	}
	osDelay(10);
 8000960:	200a      	movs	r0, #10
 8000962:	f003 fd05 	bl	8004370 <osDelay>
	  i++;
 8000966:	e7ef      	b.n	8000948 <TaskSensors+0xc>
 8000968:	40020400 	.word	0x40020400

0800096c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a04      	ldr	r2, [pc, #16]	@ (800098c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d101      	bne.n	8000982 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800097e:	f000 fa4b 	bl	8000e18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40010000 	.word	0x40010000

08000990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000994:	b672      	cpsid	i
}
 8000996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <Error_Handler+0x8>

0800099c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	4b11      	ldr	r3, [pc, #68]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a6:	4a10      	ldr	r2, [pc, #64]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ae:	4b0e      	ldr	r3, [pc, #56]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ba:	4b0b      	ldr	r3, [pc, #44]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009be:	4a0a      	ldr	r2, [pc, #40]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009c6:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	210f      	movs	r1, #15
 80009d6:	f06f 0001 	mvn.w	r0, #1
 80009da:	f000 fb19 	bl	8001010 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800

080009ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b0ae      	sub	sp, #184	@ 0xb8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	2290      	movs	r2, #144	@ 0x90
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f006 f99d 	bl	8006d4c <memset>
  if(hi2c->Instance==I2C2)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a21      	ldr	r2, [pc, #132]	@ (8000a9c <HAL_I2C_MspInit+0xb0>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d13b      	bne.n	8000a94 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a20:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000a22:	2300      	movs	r3, #0
 8000a24:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f001 fcce 	bl	80023cc <HAL_RCCEx_PeriphCLKConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000a36:	f7ff ffab 	bl	8000990 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a3a:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <HAL_I2C_MspInit+0xb4>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	4a18      	ldr	r2, [pc, #96]	@ (8000aa0 <HAL_I2C_MspInit+0xb4>)
 8000a40:	f043 0320 	orr.w	r3, r3, #32
 8000a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a46:	4b16      	ldr	r3, [pc, #88]	@ (8000aa0 <HAL_I2C_MspInit+0xb4>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	f003 0320 	and.w	r3, r3, #32
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a52:	2303      	movs	r3, #3
 8000a54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a58:	2312      	movs	r3, #18
 8000a5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a64:	2303      	movs	r3, #3
 8000a66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a6a:	2304      	movs	r3, #4
 8000a6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a70:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000a74:	4619      	mov	r1, r3
 8000a76:	480b      	ldr	r0, [pc, #44]	@ (8000aa4 <HAL_I2C_MspInit+0xb8>)
 8000a78:	f000 faf4 	bl	8001064 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a7c:	4b08      	ldr	r3, [pc, #32]	@ (8000aa0 <HAL_I2C_MspInit+0xb4>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a80:	4a07      	ldr	r2, [pc, #28]	@ (8000aa0 <HAL_I2C_MspInit+0xb4>)
 8000a82:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a88:	4b05      	ldr	r3, [pc, #20]	@ (8000aa0 <HAL_I2C_MspInit+0xb4>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000a94:	bf00      	nop
 8000a96:	37b8      	adds	r7, #184	@ 0xb8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40005800 	.word	0x40005800
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40021400 	.word	0x40021400

08000aa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b0ae      	sub	sp, #184	@ 0xb8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	2290      	movs	r2, #144	@ 0x90
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f006 f93f 	bl	8006d4c <memset>
  if(huart->Instance==USART3)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a22      	ldr	r2, [pc, #136]	@ (8000b5c <HAL_UART_MspInit+0xb4>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d13c      	bne.n	8000b52 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ad8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000adc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f001 fc70 	bl	80023cc <HAL_RCCEx_PeriphCLKConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000af2:	f7ff ff4d 	bl	8000990 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000af6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b60 <HAL_UART_MspInit+0xb8>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afa:	4a19      	ldr	r2, [pc, #100]	@ (8000b60 <HAL_UART_MspInit+0xb8>)
 8000afc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b02:	4b17      	ldr	r3, [pc, #92]	@ (8000b60 <HAL_UART_MspInit+0xb8>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0e:	4b14      	ldr	r3, [pc, #80]	@ (8000b60 <HAL_UART_MspInit+0xb8>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	4a13      	ldr	r2, [pc, #76]	@ (8000b60 <HAL_UART_MspInit+0xb8>)
 8000b14:	f043 0308 	orr.w	r3, r3, #8
 8000b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1a:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <HAL_UART_MspInit+0xb8>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	f003 0308 	and.w	r3, r3, #8
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b26:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b40:	2307      	movs	r3, #7
 8000b42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b46:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4805      	ldr	r0, [pc, #20]	@ (8000b64 <HAL_UART_MspInit+0xbc>)
 8000b4e:	f000 fa89 	bl	8001064 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000b52:	bf00      	nop
 8000b54:	37b8      	adds	r7, #184	@ 0xb8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40004800 	.word	0x40004800
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40020c00 	.word	0x40020c00

08000b68 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b0ae      	sub	sp, #184	@ 0xb8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	2290      	movs	r2, #144	@ 0x90
 8000b86:	2100      	movs	r1, #0
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f006 f8df 	bl	8006d4c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b96:	d159      	bne.n	8000c4c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000b98:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000b9c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f001 fc0f 	bl	80023cc <HAL_RCCEx_PeriphCLKConfig>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000bb4:	f7ff feec 	bl	8000990 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb8:	4b26      	ldr	r3, [pc, #152]	@ (8000c54 <HAL_PCD_MspInit+0xec>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbc:	4a25      	ldr	r2, [pc, #148]	@ (8000c54 <HAL_PCD_MspInit+0xec>)
 8000bbe:	f043 0301 	orr.w	r3, r3, #1
 8000bc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc4:	4b23      	ldr	r3, [pc, #140]	@ (8000c54 <HAL_PCD_MspInit+0xec>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc8:	f003 0301 	and.w	r3, r3, #1
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bd0:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000bd4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be4:	2303      	movs	r3, #3
 8000be6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bea:	230a      	movs	r3, #10
 8000bec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4818      	ldr	r0, [pc, #96]	@ (8000c58 <HAL_PCD_MspInit+0xf0>)
 8000bf8:	f000 fa34 	bl	8001064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000bfc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c04:	2300      	movs	r3, #0
 8000c06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c14:	4619      	mov	r1, r3
 8000c16:	4810      	ldr	r0, [pc, #64]	@ (8000c58 <HAL_PCD_MspInit+0xf0>)
 8000c18:	f000 fa24 	bl	8001064 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c54 <HAL_PCD_MspInit+0xec>)
 8000c1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c20:	4a0c      	ldr	r2, [pc, #48]	@ (8000c54 <HAL_PCD_MspInit+0xec>)
 8000c22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c26:	6353      	str	r3, [r2, #52]	@ 0x34
 8000c28:	4b0a      	ldr	r3, [pc, #40]	@ (8000c54 <HAL_PCD_MspInit+0xec>)
 8000c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	4b07      	ldr	r3, [pc, #28]	@ (8000c54 <HAL_PCD_MspInit+0xec>)
 8000c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c38:	4a06      	ldr	r2, [pc, #24]	@ (8000c54 <HAL_PCD_MspInit+0xec>)
 8000c3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c3e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c40:	4b04      	ldr	r3, [pc, #16]	@ (8000c54 <HAL_PCD_MspInit+0xec>)
 8000c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000c4c:	bf00      	nop
 8000c4e:	37b8      	adds	r7, #184	@ 0xb8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020000 	.word	0x40020000

08000c5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08c      	sub	sp, #48	@ 0x30
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c6c:	4b2e      	ldr	r3, [pc, #184]	@ (8000d28 <HAL_InitTick+0xcc>)
 8000c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c70:	4a2d      	ldr	r2, [pc, #180]	@ (8000d28 <HAL_InitTick+0xcc>)
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c78:	4b2b      	ldr	r3, [pc, #172]	@ (8000d28 <HAL_InitTick+0xcc>)
 8000c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c84:	f107 020c 	add.w	r2, r7, #12
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f001 fb6a 	bl	8002368 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c94:	f001 fb54 	bl	8002340 <HAL_RCC_GetPCLK2Freq>
 8000c98:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c9c:	4a23      	ldr	r2, [pc, #140]	@ (8000d2c <HAL_InitTick+0xd0>)
 8000c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca2:	0c9b      	lsrs	r3, r3, #18
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ca8:	4b21      	ldr	r3, [pc, #132]	@ (8000d30 <HAL_InitTick+0xd4>)
 8000caa:	4a22      	ldr	r2, [pc, #136]	@ (8000d34 <HAL_InitTick+0xd8>)
 8000cac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000cae:	4b20      	ldr	r3, [pc, #128]	@ (8000d30 <HAL_InitTick+0xd4>)
 8000cb0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cb4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000cb6:	4a1e      	ldr	r2, [pc, #120]	@ (8000d30 <HAL_InitTick+0xd4>)
 8000cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cba:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000cbc:	4b1c      	ldr	r3, [pc, #112]	@ (8000d30 <HAL_InitTick+0xd4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d30 <HAL_InitTick+0xd4>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc8:	4b19      	ldr	r3, [pc, #100]	@ (8000d30 <HAL_InitTick+0xd4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000cce:	4818      	ldr	r0, [pc, #96]	@ (8000d30 <HAL_InitTick+0xd4>)
 8000cd0:	f001 ffa4 	bl	8002c1c <HAL_TIM_Base_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000cda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d11b      	bne.n	8000d1a <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000ce2:	4813      	ldr	r0, [pc, #76]	@ (8000d30 <HAL_InitTick+0xd4>)
 8000ce4:	f001 fffc 	bl	8002ce0 <HAL_TIM_Base_Start_IT>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000cee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d111      	bne.n	8000d1a <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000cf6:	2019      	movs	r0, #25
 8000cf8:	f000 f9a6 	bl	8001048 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b0f      	cmp	r3, #15
 8000d00:	d808      	bhi.n	8000d14 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000d02:	2200      	movs	r2, #0
 8000d04:	6879      	ldr	r1, [r7, #4]
 8000d06:	2019      	movs	r0, #25
 8000d08:	f000 f982 	bl	8001010 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d38 <HAL_InitTick+0xdc>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	e002      	b.n	8000d1a <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3730      	adds	r7, #48	@ 0x30
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	431bde83 	.word	0x431bde83
 8000d30:	200005f0 	.word	0x200005f0
 8000d34:	40010000 	.word	0x40010000
 8000d38:	20000004 	.word	0x20000004

08000d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <NMI_Handler+0x4>

08000d44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <HardFault_Handler+0x4>

08000d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <MemManage_Handler+0x4>

08000d54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <BusFault_Handler+0x4>

08000d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <UsageFault_Handler+0x4>

08000d64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d78:	4802      	ldr	r0, [pc, #8]	@ (8000d84 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d7a:	f002 f829 	bl	8002dd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200005f0 	.word	0x200005f0

08000d88 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d8c:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <SystemInit+0x20>)
 8000d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d92:	4a05      	ldr	r2, [pc, #20]	@ (8000da8 <SystemInit+0x20>)
 8000d94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000de4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000db0:	f7ff ffea 	bl	8000d88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db4:	480c      	ldr	r0, [pc, #48]	@ (8000de8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000db6:	490d      	ldr	r1, [pc, #52]	@ (8000dec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000db8:	4a0d      	ldr	r2, [pc, #52]	@ (8000df0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dbc:	e002      	b.n	8000dc4 <LoopCopyDataInit>

08000dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc2:	3304      	adds	r3, #4

08000dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc8:	d3f9      	bcc.n	8000dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dca:	4a0a      	ldr	r2, [pc, #40]	@ (8000df4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dcc:	4c0a      	ldr	r4, [pc, #40]	@ (8000df8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd0:	e001      	b.n	8000dd6 <LoopFillZerobss>

08000dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd4:	3204      	adds	r2, #4

08000dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd8:	d3fb      	bcc.n	8000dd2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000dda:	f005 ffbf 	bl	8006d5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dde:	f7ff fba7 	bl	8000530 <main>
  bx  lr    
 8000de2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000de4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000df0:	08006e80 	.word	0x08006e80
  ldr r2, =_sbss
 8000df4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000df8:	20004f88 	.word	0x20004f88

08000dfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dfc:	e7fe      	b.n	8000dfc <ADC_IRQHandler>

08000dfe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e02:	2003      	movs	r0, #3
 8000e04:	f000 f8f9 	bl	8000ffa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e08:	200f      	movs	r0, #15
 8000e0a:	f7ff ff27 	bl	8000c5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e0e:	f7ff fdc5 	bl	800099c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e12:	2300      	movs	r3, #0
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <HAL_IncTick+0x20>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <HAL_IncTick+0x24>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	4a04      	ldr	r2, [pc, #16]	@ (8000e3c <HAL_IncTick+0x24>)
 8000e2a:	6013      	str	r3, [r2, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000008 	.word	0x20000008
 8000e3c:	2000063c 	.word	0x2000063c

08000e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return uwTick;
 8000e44:	4b03      	ldr	r3, [pc, #12]	@ (8000e54 <HAL_GetTick+0x14>)
 8000e46:	681b      	ldr	r3, [r3, #0]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	2000063c 	.word	0x2000063c

08000e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e60:	f7ff ffee 	bl	8000e40 <HAL_GetTick>
 8000e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e70:	d005      	beq.n	8000e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e72:	4b0a      	ldr	r3, [pc, #40]	@ (8000e9c <HAL_Delay+0x44>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e7e:	bf00      	nop
 8000e80:	f7ff ffde 	bl	8000e40 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d8f7      	bhi.n	8000e80 <HAL_Delay+0x28>
  {
  }
}
 8000e90:	bf00      	nop
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000008 	.word	0x20000008

08000ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ec8:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ece:	4a04      	ldr	r2, [pc, #16]	@ (8000ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	60d3      	str	r3, [r2, #12]
}
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000ed00 	.word	0xe000ed00
 8000ee4:	05fa0000 	.word	0x05fa0000

08000ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eec:	4b04      	ldr	r3, [pc, #16]	@ (8000f00 <__NVIC_GetPriorityGrouping+0x18>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	0a1b      	lsrs	r3, r3, #8
 8000ef2:	f003 0307 	and.w	r3, r3, #7
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db0b      	blt.n	8000f2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	f003 021f 	and.w	r2, r3, #31
 8000f1c:	4907      	ldr	r1, [pc, #28]	@ (8000f3c <__NVIC_EnableIRQ+0x38>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	095b      	lsrs	r3, r3, #5
 8000f24:	2001      	movs	r0, #1
 8000f26:	fa00 f202 	lsl.w	r2, r0, r2
 8000f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000e100 	.word	0xe000e100

08000f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	6039      	str	r1, [r7, #0]
 8000f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	db0a      	blt.n	8000f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	490c      	ldr	r1, [pc, #48]	@ (8000f8c <__NVIC_SetPriority+0x4c>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	0112      	lsls	r2, r2, #4
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	440b      	add	r3, r1
 8000f64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f68:	e00a      	b.n	8000f80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4908      	ldr	r1, [pc, #32]	@ (8000f90 <__NVIC_SetPriority+0x50>)
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	f003 030f 	and.w	r3, r3, #15
 8000f76:	3b04      	subs	r3, #4
 8000f78:	0112      	lsls	r2, r2, #4
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	761a      	strb	r2, [r3, #24]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000e100 	.word	0xe000e100
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b089      	sub	sp, #36	@ 0x24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f1c3 0307 	rsb	r3, r3, #7
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	bf28      	it	cs
 8000fb2:	2304      	movcs	r3, #4
 8000fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3304      	adds	r3, #4
 8000fba:	2b06      	cmp	r3, #6
 8000fbc:	d902      	bls.n	8000fc4 <NVIC_EncodePriority+0x30>
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3b03      	subs	r3, #3
 8000fc2:	e000      	b.n	8000fc6 <NVIC_EncodePriority+0x32>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43da      	mvns	r2, r3
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	401a      	ands	r2, r3
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe6:	43d9      	mvns	r1, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	4313      	orrs	r3, r2
         );
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3724      	adds	r7, #36	@ 0x24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ff4c 	bl	8000ea0 <__NVIC_SetPriorityGrouping>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
 800101c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001022:	f7ff ff61 	bl	8000ee8 <__NVIC_GetPriorityGrouping>
 8001026:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	68b9      	ldr	r1, [r7, #8]
 800102c:	6978      	ldr	r0, [r7, #20]
 800102e:	f7ff ffb1 	bl	8000f94 <NVIC_EncodePriority>
 8001032:	4602      	mov	r2, r0
 8001034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001038:	4611      	mov	r1, r2
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff ff80 	bl	8000f40 <__NVIC_SetPriority>
}
 8001040:	bf00      	nop
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ff54 	bl	8000f04 <__NVIC_EnableIRQ>
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	@ 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800107a:	2300      	movs	r3, #0
 800107c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
 8001082:	e175      	b.n	8001370 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001084:	2201      	movs	r2, #1
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	429a      	cmp	r2, r3
 800109e:	f040 8164 	bne.w	800136a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d005      	beq.n	80010ba <HAL_GPIO_Init+0x56>
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d130      	bne.n	800111c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	2203      	movs	r2, #3
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	68da      	ldr	r2, [r3, #12]
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010f0:	2201      	movs	r2, #1
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	091b      	lsrs	r3, r3, #4
 8001106:	f003 0201 	and.w	r2, r3, #1
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f003 0303 	and.w	r3, r3, #3
 8001124:	2b03      	cmp	r3, #3
 8001126:	d017      	beq.n	8001158 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	2203      	movs	r2, #3
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	689a      	ldr	r2, [r3, #8]
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d123      	bne.n	80011ac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	08da      	lsrs	r2, r3, #3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3208      	adds	r2, #8
 800116c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	f003 0307 	and.w	r3, r3, #7
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	220f      	movs	r2, #15
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	691a      	ldr	r2, [r3, #16]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	08da      	lsrs	r2, r3, #3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3208      	adds	r2, #8
 80011a6:	69b9      	ldr	r1, [r7, #24]
 80011a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	2203      	movs	r2, #3
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 0203 	and.w	r2, r3, #3
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	f000 80be 	beq.w	800136a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ee:	4b66      	ldr	r3, [pc, #408]	@ (8001388 <HAL_GPIO_Init+0x324>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f2:	4a65      	ldr	r2, [pc, #404]	@ (8001388 <HAL_GPIO_Init+0x324>)
 80011f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011fa:	4b63      	ldr	r3, [pc, #396]	@ (8001388 <HAL_GPIO_Init+0x324>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001206:	4a61      	ldr	r2, [pc, #388]	@ (800138c <HAL_GPIO_Init+0x328>)
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	089b      	lsrs	r3, r3, #2
 800120c:	3302      	adds	r3, #2
 800120e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f003 0303 	and.w	r3, r3, #3
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	220f      	movs	r2, #15
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a58      	ldr	r2, [pc, #352]	@ (8001390 <HAL_GPIO_Init+0x32c>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d037      	beq.n	80012a2 <HAL_GPIO_Init+0x23e>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a57      	ldr	r2, [pc, #348]	@ (8001394 <HAL_GPIO_Init+0x330>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d031      	beq.n	800129e <HAL_GPIO_Init+0x23a>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a56      	ldr	r2, [pc, #344]	@ (8001398 <HAL_GPIO_Init+0x334>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d02b      	beq.n	800129a <HAL_GPIO_Init+0x236>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a55      	ldr	r2, [pc, #340]	@ (800139c <HAL_GPIO_Init+0x338>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d025      	beq.n	8001296 <HAL_GPIO_Init+0x232>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a54      	ldr	r2, [pc, #336]	@ (80013a0 <HAL_GPIO_Init+0x33c>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d01f      	beq.n	8001292 <HAL_GPIO_Init+0x22e>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a53      	ldr	r2, [pc, #332]	@ (80013a4 <HAL_GPIO_Init+0x340>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d019      	beq.n	800128e <HAL_GPIO_Init+0x22a>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a52      	ldr	r2, [pc, #328]	@ (80013a8 <HAL_GPIO_Init+0x344>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d013      	beq.n	800128a <HAL_GPIO_Init+0x226>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a51      	ldr	r2, [pc, #324]	@ (80013ac <HAL_GPIO_Init+0x348>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d00d      	beq.n	8001286 <HAL_GPIO_Init+0x222>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a50      	ldr	r2, [pc, #320]	@ (80013b0 <HAL_GPIO_Init+0x34c>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d007      	beq.n	8001282 <HAL_GPIO_Init+0x21e>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a4f      	ldr	r2, [pc, #316]	@ (80013b4 <HAL_GPIO_Init+0x350>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d101      	bne.n	800127e <HAL_GPIO_Init+0x21a>
 800127a:	2309      	movs	r3, #9
 800127c:	e012      	b.n	80012a4 <HAL_GPIO_Init+0x240>
 800127e:	230a      	movs	r3, #10
 8001280:	e010      	b.n	80012a4 <HAL_GPIO_Init+0x240>
 8001282:	2308      	movs	r3, #8
 8001284:	e00e      	b.n	80012a4 <HAL_GPIO_Init+0x240>
 8001286:	2307      	movs	r3, #7
 8001288:	e00c      	b.n	80012a4 <HAL_GPIO_Init+0x240>
 800128a:	2306      	movs	r3, #6
 800128c:	e00a      	b.n	80012a4 <HAL_GPIO_Init+0x240>
 800128e:	2305      	movs	r3, #5
 8001290:	e008      	b.n	80012a4 <HAL_GPIO_Init+0x240>
 8001292:	2304      	movs	r3, #4
 8001294:	e006      	b.n	80012a4 <HAL_GPIO_Init+0x240>
 8001296:	2303      	movs	r3, #3
 8001298:	e004      	b.n	80012a4 <HAL_GPIO_Init+0x240>
 800129a:	2302      	movs	r3, #2
 800129c:	e002      	b.n	80012a4 <HAL_GPIO_Init+0x240>
 800129e:	2301      	movs	r3, #1
 80012a0:	e000      	b.n	80012a4 <HAL_GPIO_Init+0x240>
 80012a2:	2300      	movs	r3, #0
 80012a4:	69fa      	ldr	r2, [r7, #28]
 80012a6:	f002 0203 	and.w	r2, r2, #3
 80012aa:	0092      	lsls	r2, r2, #2
 80012ac:	4093      	lsls	r3, r2
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80012b4:	4935      	ldr	r1, [pc, #212]	@ (800138c <HAL_GPIO_Init+0x328>)
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	089b      	lsrs	r3, r3, #2
 80012ba:	3302      	adds	r3, #2
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012c2:	4b3d      	ldr	r3, [pc, #244]	@ (80013b8 <HAL_GPIO_Init+0x354>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	43db      	mvns	r3, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4013      	ands	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012e6:	4a34      	ldr	r2, [pc, #208]	@ (80013b8 <HAL_GPIO_Init+0x354>)
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012ec:	4b32      	ldr	r3, [pc, #200]	@ (80013b8 <HAL_GPIO_Init+0x354>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d003      	beq.n	8001310 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001310:	4a29      	ldr	r2, [pc, #164]	@ (80013b8 <HAL_GPIO_Init+0x354>)
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001316:	4b28      	ldr	r3, [pc, #160]	@ (80013b8 <HAL_GPIO_Init+0x354>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800133a:	4a1f      	ldr	r2, [pc, #124]	@ (80013b8 <HAL_GPIO_Init+0x354>)
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001340:	4b1d      	ldr	r3, [pc, #116]	@ (80013b8 <HAL_GPIO_Init+0x354>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001364:	4a14      	ldr	r2, [pc, #80]	@ (80013b8 <HAL_GPIO_Init+0x354>)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3301      	adds	r3, #1
 800136e:	61fb      	str	r3, [r7, #28]
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	2b0f      	cmp	r3, #15
 8001374:	f67f ae86 	bls.w	8001084 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001378:	bf00      	nop
 800137a:	bf00      	nop
 800137c:	3724      	adds	r7, #36	@ 0x24
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40023800 	.word	0x40023800
 800138c:	40013800 	.word	0x40013800
 8001390:	40020000 	.word	0x40020000
 8001394:	40020400 	.word	0x40020400
 8001398:	40020800 	.word	0x40020800
 800139c:	40020c00 	.word	0x40020c00
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40021400 	.word	0x40021400
 80013a8:	40021800 	.word	0x40021800
 80013ac:	40021c00 	.word	0x40021c00
 80013b0:	40022000 	.word	0x40022000
 80013b4:	40022400 	.word	0x40022400
 80013b8:	40013c00 	.word	0x40013c00

080013bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	807b      	strh	r3, [r7, #2]
 80013c8:	4613      	mov	r3, r2
 80013ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013cc:	787b      	ldrb	r3, [r7, #1]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013d2:	887a      	ldrh	r2, [r7, #2]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80013d8:	e003      	b.n	80013e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80013da:	887b      	ldrh	r3, [r7, #2]
 80013dc:	041a      	lsls	r2, r3, #16
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	619a      	str	r2, [r3, #24]
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b085      	sub	sp, #20
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
 80013f6:	460b      	mov	r3, r1
 80013f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001400:	887a      	ldrh	r2, [r7, #2]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	4013      	ands	r3, r2
 8001406:	041a      	lsls	r2, r3, #16
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	43d9      	mvns	r1, r3
 800140c:	887b      	ldrh	r3, [r7, #2]
 800140e:	400b      	ands	r3, r1
 8001410:	431a      	orrs	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	619a      	str	r2, [r3, #24]
}
 8001416:	bf00      	nop
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e08b      	b.n	800154e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d106      	bne.n	8001450 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff face 	bl	80009ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2224      	movs	r2, #36	@ 0x24
 8001454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 0201 	bic.w	r2, r2, #1
 8001466:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001474:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001484:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d107      	bne.n	800149e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	e006      	b.n	80014ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80014aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d108      	bne.n	80014c6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	e007      	b.n	80014d6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6859      	ldr	r1, [r3, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001558 <HAL_I2C_Init+0x134>)
 80014e2:	430b      	orrs	r3, r1
 80014e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68da      	ldr	r2, [r3, #12]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	691a      	ldr	r2, [r3, #16]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	430a      	orrs	r2, r1
 800150e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	69d9      	ldr	r1, [r3, #28]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a1a      	ldr	r2, [r3, #32]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	430a      	orrs	r2, r1
 800151e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f042 0201 	orr.w	r2, r2, #1
 800152e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2220      	movs	r2, #32
 800153a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	02008000 	.word	0x02008000

0800155c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b20      	cmp	r3, #32
 8001570:	d138      	bne.n	80015e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001578:	2b01      	cmp	r3, #1
 800157a:	d101      	bne.n	8001580 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800157c:	2302      	movs	r3, #2
 800157e:	e032      	b.n	80015e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2224      	movs	r2, #36	@ 0x24
 800158c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 0201 	bic.w	r2, r2, #1
 800159e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80015ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6819      	ldr	r1, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	430a      	orrs	r2, r1
 80015be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f042 0201 	orr.w	r2, r2, #1
 80015ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2220      	movs	r2, #32
 80015d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80015e0:	2300      	movs	r3, #0
 80015e2:	e000      	b.n	80015e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80015e4:	2302      	movs	r3, #2
  }
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b085      	sub	sp, #20
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b20      	cmp	r3, #32
 8001606:	d139      	bne.n	800167c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800160e:	2b01      	cmp	r3, #1
 8001610:	d101      	bne.n	8001616 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001612:	2302      	movs	r3, #2
 8001614:	e033      	b.n	800167e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2224      	movs	r2, #36	@ 0x24
 8001622:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0201 	bic.w	r2, r2, #1
 8001634:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001644:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	021b      	lsls	r3, r3, #8
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	4313      	orrs	r3, r2
 800164e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 0201 	orr.w	r2, r2, #1
 8001666:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2220      	movs	r2, #32
 800166c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001678:	2300      	movs	r3, #0
 800167a:	e000      	b.n	800167e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800167c:	2302      	movs	r3, #2
  }
}
 800167e:	4618      	mov	r0, r3
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b086      	sub	sp, #24
 800168e:	af02      	add	r7, sp, #8
 8001690:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e108      	b.n	80018ae <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d106      	bne.n	80016bc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff fa56 	bl	8000b68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2203      	movs	r2, #3
 80016c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016ca:	d102      	bne.n	80016d2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f002 fa96 	bl	8003c08 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6818      	ldr	r0, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	7c1a      	ldrb	r2, [r3, #16]
 80016e4:	f88d 2000 	strb.w	r2, [sp]
 80016e8:	3304      	adds	r3, #4
 80016ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016ec:	f002 fa32 	bl	8003b54 <USB_CoreInit>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d005      	beq.n	8001702 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2202      	movs	r2, #2
 80016fa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e0d5      	b.n	80018ae <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f002 fa8e 	bl	8003c2a <USB_SetCurrentMode>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2202      	movs	r2, #2
 8001718:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e0c6      	b.n	80018ae <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001720:	2300      	movs	r3, #0
 8001722:	73fb      	strb	r3, [r7, #15]
 8001724:	e04a      	b.n	80017bc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001726:	7bfa      	ldrb	r2, [r7, #15]
 8001728:	6879      	ldr	r1, [r7, #4]
 800172a:	4613      	mov	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	4413      	add	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	440b      	add	r3, r1
 8001734:	3315      	adds	r3, #21
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800173a:	7bfa      	ldrb	r2, [r7, #15]
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	4413      	add	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	440b      	add	r3, r1
 8001748:	3314      	adds	r3, #20
 800174a:	7bfa      	ldrb	r2, [r7, #15]
 800174c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800174e:	7bfa      	ldrb	r2, [r7, #15]
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	b298      	uxth	r0, r3
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	4413      	add	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	440b      	add	r3, r1
 8001760:	332e      	adds	r3, #46	@ 0x2e
 8001762:	4602      	mov	r2, r0
 8001764:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001766:	7bfa      	ldrb	r2, [r7, #15]
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	4613      	mov	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	4413      	add	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	440b      	add	r3, r1
 8001774:	3318      	adds	r3, #24
 8001776:	2200      	movs	r2, #0
 8001778:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800177a:	7bfa      	ldrb	r2, [r7, #15]
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	4613      	mov	r3, r2
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	4413      	add	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	440b      	add	r3, r1
 8001788:	331c      	adds	r3, #28
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800178e:	7bfa      	ldrb	r2, [r7, #15]
 8001790:	6879      	ldr	r1, [r7, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	4413      	add	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	440b      	add	r3, r1
 800179c:	3320      	adds	r3, #32
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017a2:	7bfa      	ldrb	r2, [r7, #15]
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	4613      	mov	r3, r2
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	4413      	add	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	440b      	add	r3, r1
 80017b0:	3324      	adds	r3, #36	@ 0x24
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
 80017b8:	3301      	adds	r3, #1
 80017ba:	73fb      	strb	r3, [r7, #15]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	791b      	ldrb	r3, [r3, #4]
 80017c0:	7bfa      	ldrb	r2, [r7, #15]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d3af      	bcc.n	8001726 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	73fb      	strb	r3, [r7, #15]
 80017ca:	e044      	b.n	8001856 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017cc:	7bfa      	ldrb	r2, [r7, #15]
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	4613      	mov	r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	4413      	add	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	440b      	add	r3, r1
 80017da:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80017e2:	7bfa      	ldrb	r2, [r7, #15]
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	4613      	mov	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	4413      	add	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	440b      	add	r3, r1
 80017f0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80017f4:	7bfa      	ldrb	r2, [r7, #15]
 80017f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017f8:	7bfa      	ldrb	r2, [r7, #15]
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	4413      	add	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	440b      	add	r3, r1
 8001806:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800180a:	2200      	movs	r2, #0
 800180c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800180e:	7bfa      	ldrb	r2, [r7, #15]
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	4413      	add	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	440b      	add	r3, r1
 800181c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001824:	7bfa      	ldrb	r2, [r7, #15]
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	4613      	mov	r3, r2
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	4413      	add	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	440b      	add	r3, r1
 8001832:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800183a:	7bfa      	ldrb	r2, [r7, #15]
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	4613      	mov	r3, r2
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	4413      	add	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	440b      	add	r3, r1
 8001848:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	3301      	adds	r3, #1
 8001854:	73fb      	strb	r3, [r7, #15]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	791b      	ldrb	r3, [r3, #4]
 800185a:	7bfa      	ldrb	r2, [r7, #15]
 800185c:	429a      	cmp	r2, r3
 800185e:	d3b5      	bcc.n	80017cc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6818      	ldr	r0, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	7c1a      	ldrb	r2, [r3, #16]
 8001868:	f88d 2000 	strb.w	r2, [sp]
 800186c:	3304      	adds	r3, #4
 800186e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001870:	f002 fa28 	bl	8003cc4 <USB_DevInit>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d005      	beq.n	8001886 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2202      	movs	r2, #2
 800187e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e013      	b.n	80018ae <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	7b1b      	ldrb	r3, [r3, #12]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d102      	bne.n	80018a2 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 f80b 	bl	80018b8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f002 fbe3 	bl	8004072 <USB_DevDisconnect>

  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80018e6:	4b05      	ldr	r3, [pc, #20]	@ (80018fc <HAL_PCDEx_ActivateLPM+0x44>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	10000003 	.word	0x10000003

08001900 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001904:	4b05      	ldr	r3, [pc, #20]	@ (800191c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a04      	ldr	r2, [pc, #16]	@ (800191c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800190a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800190e:	6013      	str	r3, [r2, #0]
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40007000 	.word	0x40007000

08001920 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800192a:	4b23      	ldr	r3, [pc, #140]	@ (80019b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192e:	4a22      	ldr	r2, [pc, #136]	@ (80019b8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001934:	6413      	str	r3, [r2, #64]	@ 0x40
 8001936:	4b20      	ldr	r3, [pc, #128]	@ (80019b8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001942:	4b1e      	ldr	r3, [pc, #120]	@ (80019bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a1d      	ldr	r2, [pc, #116]	@ (80019bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001948:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800194c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800194e:	f7ff fa77 	bl	8000e40 <HAL_GetTick>
 8001952:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001954:	e009      	b.n	800196a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001956:	f7ff fa73 	bl	8000e40 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001964:	d901      	bls.n	800196a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e022      	b.n	80019b0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800196a:	4b14      	ldr	r3, [pc, #80]	@ (80019bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001972:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001976:	d1ee      	bne.n	8001956 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001978:	4b10      	ldr	r3, [pc, #64]	@ (80019bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0f      	ldr	r2, [pc, #60]	@ (80019bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800197e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001982:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001984:	f7ff fa5c 	bl	8000e40 <HAL_GetTick>
 8001988:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800198a:	e009      	b.n	80019a0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800198c:	f7ff fa58 	bl	8000e40 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800199a:	d901      	bls.n	80019a0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e007      	b.n	80019b0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80019a0:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <HAL_PWREx_EnableOverDrive+0x9c>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80019ac:	d1ee      	bne.n	800198c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40007000 	.word	0x40007000

080019c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80019c8:	2300      	movs	r3, #0
 80019ca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e29b      	b.n	8001f0e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 8087 	beq.w	8001af2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019e4:	4b96      	ldr	r3, [pc, #600]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 030c 	and.w	r3, r3, #12
 80019ec:	2b04      	cmp	r3, #4
 80019ee:	d00c      	beq.n	8001a0a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019f0:	4b93      	ldr	r3, [pc, #588]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 030c 	and.w	r3, r3, #12
 80019f8:	2b08      	cmp	r3, #8
 80019fa:	d112      	bne.n	8001a22 <HAL_RCC_OscConfig+0x62>
 80019fc:	4b90      	ldr	r3, [pc, #576]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a08:	d10b      	bne.n	8001a22 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0a:	4b8d      	ldr	r3, [pc, #564]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d06c      	beq.n	8001af0 <HAL_RCC_OscConfig+0x130>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d168      	bne.n	8001af0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e275      	b.n	8001f0e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a2a:	d106      	bne.n	8001a3a <HAL_RCC_OscConfig+0x7a>
 8001a2c:	4b84      	ldr	r3, [pc, #528]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a83      	ldr	r2, [pc, #524]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001a32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	e02e      	b.n	8001a98 <HAL_RCC_OscConfig+0xd8>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10c      	bne.n	8001a5c <HAL_RCC_OscConfig+0x9c>
 8001a42:	4b7f      	ldr	r3, [pc, #508]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a7e      	ldr	r2, [pc, #504]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001a48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	4b7c      	ldr	r3, [pc, #496]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a7b      	ldr	r2, [pc, #492]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001a54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	e01d      	b.n	8001a98 <HAL_RCC_OscConfig+0xd8>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a64:	d10c      	bne.n	8001a80 <HAL_RCC_OscConfig+0xc0>
 8001a66:	4b76      	ldr	r3, [pc, #472]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a75      	ldr	r2, [pc, #468]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001a6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	4b73      	ldr	r3, [pc, #460]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a72      	ldr	r2, [pc, #456]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001a78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	e00b      	b.n	8001a98 <HAL_RCC_OscConfig+0xd8>
 8001a80:	4b6f      	ldr	r3, [pc, #444]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a6e      	ldr	r2, [pc, #440]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001a86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	4b6c      	ldr	r3, [pc, #432]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a6b      	ldr	r2, [pc, #428]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001a92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d013      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa0:	f7ff f9ce 	bl	8000e40 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa8:	f7ff f9ca 	bl	8000e40 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b64      	cmp	r3, #100	@ 0x64
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e229      	b.n	8001f0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aba:	4b61      	ldr	r3, [pc, #388]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0xe8>
 8001ac6:	e014      	b.n	8001af2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac8:	f7ff f9ba 	bl	8000e40 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad0:	f7ff f9b6 	bl	8000e40 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b64      	cmp	r3, #100	@ 0x64
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e215      	b.n	8001f0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae2:	4b57      	ldr	r3, [pc, #348]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x110>
 8001aee:	e000      	b.n	8001af2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d069      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001afe:	4b50      	ldr	r3, [pc, #320]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 030c 	and.w	r3, r3, #12
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d00b      	beq.n	8001b22 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b0a:	4b4d      	ldr	r3, [pc, #308]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d11c      	bne.n	8001b50 <HAL_RCC_OscConfig+0x190>
 8001b16:	4b4a      	ldr	r3, [pc, #296]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d116      	bne.n	8001b50 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b22:	4b47      	ldr	r3, [pc, #284]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d005      	beq.n	8001b3a <HAL_RCC_OscConfig+0x17a>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d001      	beq.n	8001b3a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e1e9      	b.n	8001f0e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3a:	4b41      	ldr	r3, [pc, #260]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	493d      	ldr	r1, [pc, #244]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b4e:	e040      	b.n	8001bd2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d023      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b58:	4b39      	ldr	r3, [pc, #228]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a38      	ldr	r2, [pc, #224]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b64:	f7ff f96c 	bl	8000e40 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b6c:	f7ff f968 	bl	8000e40 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e1c7      	b.n	8001f0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7e:	4b30      	ldr	r3, [pc, #192]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0f0      	beq.n	8001b6c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	4929      	ldr	r1, [pc, #164]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]
 8001b9e:	e018      	b.n	8001bd2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ba0:	4b27      	ldr	r3, [pc, #156]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a26      	ldr	r2, [pc, #152]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001ba6:	f023 0301 	bic.w	r3, r3, #1
 8001baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bac:	f7ff f948 	bl	8000e40 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb4:	f7ff f944 	bl	8000e40 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e1a3      	b.n	8001f0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f0      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d038      	beq.n	8001c50 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d019      	beq.n	8001c1a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be6:	4b16      	ldr	r3, [pc, #88]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001be8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bea:	4a15      	ldr	r2, [pc, #84]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf2:	f7ff f925 	bl	8000e40 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bfa:	f7ff f921 	bl	8000e40 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e180      	b.n	8001f0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001c0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0f0      	beq.n	8001bfa <HAL_RCC_OscConfig+0x23a>
 8001c18:	e01a      	b.n	8001c50 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c1a:	4b09      	ldr	r3, [pc, #36]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001c1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c1e:	4a08      	ldr	r2, [pc, #32]	@ (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001c20:	f023 0301 	bic.w	r3, r3, #1
 8001c24:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c26:	f7ff f90b 	bl	8000e40 <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c2c:	e00a      	b.n	8001c44 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c2e:	f7ff f907 	bl	8000e40 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d903      	bls.n	8001c44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e166      	b.n	8001f0e <HAL_RCC_OscConfig+0x54e>
 8001c40:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c44:	4b92      	ldr	r3, [pc, #584]	@ (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001c46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1ee      	bne.n	8001c2e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f000 80a4 	beq.w	8001da6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c5e:	4b8c      	ldr	r3, [pc, #560]	@ (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10d      	bne.n	8001c86 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c6a:	4b89      	ldr	r3, [pc, #548]	@ (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	4a88      	ldr	r2, [pc, #544]	@ (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001c70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c76:	4b86      	ldr	r3, [pc, #536]	@ (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c7e:	60bb      	str	r3, [r7, #8]
 8001c80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c82:	2301      	movs	r3, #1
 8001c84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c86:	4b83      	ldr	r3, [pc, #524]	@ (8001e94 <HAL_RCC_OscConfig+0x4d4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d118      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001c92:	4b80      	ldr	r3, [pc, #512]	@ (8001e94 <HAL_RCC_OscConfig+0x4d4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a7f      	ldr	r2, [pc, #508]	@ (8001e94 <HAL_RCC_OscConfig+0x4d4>)
 8001c98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c9e:	f7ff f8cf 	bl	8000e40 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ca6:	f7ff f8cb 	bl	8000e40 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b64      	cmp	r3, #100	@ 0x64
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e12a      	b.n	8001f0e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cb8:	4b76      	ldr	r3, [pc, #472]	@ (8001e94 <HAL_RCC_OscConfig+0x4d4>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d0f0      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d106      	bne.n	8001cda <HAL_RCC_OscConfig+0x31a>
 8001ccc:	4b70      	ldr	r3, [pc, #448]	@ (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001cce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cd0:	4a6f      	ldr	r2, [pc, #444]	@ (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cd8:	e02d      	b.n	8001d36 <HAL_RCC_OscConfig+0x376>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10c      	bne.n	8001cfc <HAL_RCC_OscConfig+0x33c>
 8001ce2:	4b6b      	ldr	r3, [pc, #428]	@ (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ce6:	4a6a      	ldr	r2, [pc, #424]	@ (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001ce8:	f023 0301 	bic.w	r3, r3, #1
 8001cec:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cee:	4b68      	ldr	r3, [pc, #416]	@ (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cf2:	4a67      	ldr	r2, [pc, #412]	@ (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001cf4:	f023 0304 	bic.w	r3, r3, #4
 8001cf8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cfa:	e01c      	b.n	8001d36 <HAL_RCC_OscConfig+0x376>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2b05      	cmp	r3, #5
 8001d02:	d10c      	bne.n	8001d1e <HAL_RCC_OscConfig+0x35e>
 8001d04:	4b62      	ldr	r3, [pc, #392]	@ (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d08:	4a61      	ldr	r2, [pc, #388]	@ (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001d0a:	f043 0304 	orr.w	r3, r3, #4
 8001d0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d10:	4b5f      	ldr	r3, [pc, #380]	@ (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d14:	4a5e      	ldr	r2, [pc, #376]	@ (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d1c:	e00b      	b.n	8001d36 <HAL_RCC_OscConfig+0x376>
 8001d1e:	4b5c      	ldr	r3, [pc, #368]	@ (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d22:	4a5b      	ldr	r2, [pc, #364]	@ (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001d24:	f023 0301 	bic.w	r3, r3, #1
 8001d28:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d2a:	4b59      	ldr	r3, [pc, #356]	@ (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d2e:	4a58      	ldr	r2, [pc, #352]	@ (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001d30:	f023 0304 	bic.w	r3, r3, #4
 8001d34:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d015      	beq.n	8001d6a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3e:	f7ff f87f 	bl	8000e40 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d44:	e00a      	b.n	8001d5c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d46:	f7ff f87b 	bl	8000e40 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e0d8      	b.n	8001f0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5c:	4b4c      	ldr	r3, [pc, #304]	@ (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0ee      	beq.n	8001d46 <HAL_RCC_OscConfig+0x386>
 8001d68:	e014      	b.n	8001d94 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d6a:	f7ff f869 	bl	8000e40 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d70:	e00a      	b.n	8001d88 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d72:	f7ff f865 	bl	8000e40 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e0c2      	b.n	8001f0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d88:	4b41      	ldr	r3, [pc, #260]	@ (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1ee      	bne.n	8001d72 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d94:	7dfb      	ldrb	r3, [r7, #23]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d105      	bne.n	8001da6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d9a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9e:	4a3c      	ldr	r2, [pc, #240]	@ (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001da0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001da4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 80ae 	beq.w	8001f0c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001db0:	4b37      	ldr	r3, [pc, #220]	@ (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 030c 	and.w	r3, r3, #12
 8001db8:	2b08      	cmp	r3, #8
 8001dba:	d06d      	beq.n	8001e98 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d14b      	bne.n	8001e5c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc4:	4b32      	ldr	r3, [pc, #200]	@ (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a31      	ldr	r2, [pc, #196]	@ (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001dca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001dce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd0:	f7ff f836 	bl	8000e40 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd8:	f7ff f832 	bl	8000e40 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e091      	b.n	8001f0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dea:	4b29      	ldr	r3, [pc, #164]	@ (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f0      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69da      	ldr	r2, [r3, #28]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e04:	019b      	lsls	r3, r3, #6
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e0c:	085b      	lsrs	r3, r3, #1
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	041b      	lsls	r3, r3, #16
 8001e12:	431a      	orrs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e18:	061b      	lsls	r3, r3, #24
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e20:	071b      	lsls	r3, r3, #28
 8001e22:	491b      	ldr	r1, [pc, #108]	@ (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e28:	4b19      	ldr	r3, [pc, #100]	@ (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a18      	ldr	r2, [pc, #96]	@ (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001e2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e34:	f7ff f804 	bl	8000e40 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3c:	f7ff f800 	bl	8000e40 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e05f      	b.n	8001f0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4e:	4b10      	ldr	r3, [pc, #64]	@ (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0f0      	beq.n	8001e3c <HAL_RCC_OscConfig+0x47c>
 8001e5a:	e057      	b.n	8001f0c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a0b      	ldr	r2, [pc, #44]	@ (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001e62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e68:	f7fe ffea 	bl	8000e40 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e70:	f7fe ffe6 	bl	8000e40 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e045      	b.n	8001f0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e82:	4b03      	ldr	r3, [pc, #12]	@ (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1f0      	bne.n	8001e70 <HAL_RCC_OscConfig+0x4b0>
 8001e8e:	e03d      	b.n	8001f0c <HAL_RCC_OscConfig+0x54c>
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001e98:	4b1f      	ldr	r3, [pc, #124]	@ (8001f18 <HAL_RCC_OscConfig+0x558>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d030      	beq.n	8001f08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d129      	bne.n	8001f08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d122      	bne.n	8001f08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ec8:	4013      	ands	r3, r2
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ece:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d119      	bne.n	8001f08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ede:	085b      	lsrs	r3, r3, #1
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d10f      	bne.n	8001f08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d107      	bne.n	8001f08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f02:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d001      	beq.n	8001f0c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e000      	b.n	8001f0e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40023800 	.word	0x40023800

08001f1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e0d0      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f34:	4b6a      	ldr	r3, [pc, #424]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 030f 	and.w	r3, r3, #15
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d910      	bls.n	8001f64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f42:	4b67      	ldr	r3, [pc, #412]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 020f 	bic.w	r2, r3, #15
 8001f4a:	4965      	ldr	r1, [pc, #404]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f52:	4b63      	ldr	r3, [pc, #396]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d001      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0b8      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d020      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d005      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f7c:	4b59      	ldr	r3, [pc, #356]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	4a58      	ldr	r2, [pc, #352]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f82:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0308 	and.w	r3, r3, #8
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d005      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f94:	4b53      	ldr	r3, [pc, #332]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	4a52      	ldr	r2, [pc, #328]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f9a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa0:	4b50      	ldr	r3, [pc, #320]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	494d      	ldr	r1, [pc, #308]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d040      	beq.n	8002040 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d107      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc6:	4b47      	ldr	r3, [pc, #284]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d115      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e07f      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d107      	bne.n	8001fee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fde:	4b41      	ldr	r3, [pc, #260]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d109      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e073      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fee:	4b3d      	ldr	r3, [pc, #244]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e06b      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ffe:	4b39      	ldr	r3, [pc, #228]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f023 0203 	bic.w	r2, r3, #3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	4936      	ldr	r1, [pc, #216]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c8>)
 800200c:	4313      	orrs	r3, r2
 800200e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002010:	f7fe ff16 	bl	8000e40 <HAL_GetTick>
 8002014:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002016:	e00a      	b.n	800202e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002018:	f7fe ff12 	bl	8000e40 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002026:	4293      	cmp	r3, r2
 8002028:	d901      	bls.n	800202e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e053      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202e:	4b2d      	ldr	r3, [pc, #180]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 020c 	and.w	r2, r3, #12
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	429a      	cmp	r2, r3
 800203e:	d1eb      	bne.n	8002018 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002040:	4b27      	ldr	r3, [pc, #156]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 030f 	and.w	r3, r3, #15
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	429a      	cmp	r2, r3
 800204c:	d210      	bcs.n	8002070 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204e:	4b24      	ldr	r3, [pc, #144]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 020f 	bic.w	r2, r3, #15
 8002056:	4922      	ldr	r1, [pc, #136]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	4313      	orrs	r3, r2
 800205c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800205e:	4b20      	ldr	r3, [pc, #128]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d001      	beq.n	8002070 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e032      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b00      	cmp	r3, #0
 800207a:	d008      	beq.n	800208e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800207c:	4b19      	ldr	r3, [pc, #100]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c8>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	4916      	ldr	r1, [pc, #88]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c8>)
 800208a:	4313      	orrs	r3, r2
 800208c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	2b00      	cmp	r3, #0
 8002098:	d009      	beq.n	80020ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800209a:	4b12      	ldr	r3, [pc, #72]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c8>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	490e      	ldr	r1, [pc, #56]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c8>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020ae:	f000 f821 	bl	80020f4 <HAL_RCC_GetSysClockFreq>
 80020b2:	4602      	mov	r2, r0
 80020b4:	4b0b      	ldr	r3, [pc, #44]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c8>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	091b      	lsrs	r3, r3, #4
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	490a      	ldr	r1, [pc, #40]	@ (80020e8 <HAL_RCC_ClockConfig+0x1cc>)
 80020c0:	5ccb      	ldrb	r3, [r1, r3]
 80020c2:	fa22 f303 	lsr.w	r3, r2, r3
 80020c6:	4a09      	ldr	r2, [pc, #36]	@ (80020ec <HAL_RCC_ClockConfig+0x1d0>)
 80020c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020ca:	4b09      	ldr	r3, [pc, #36]	@ (80020f0 <HAL_RCC_ClockConfig+0x1d4>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fdc4 	bl	8000c5c <HAL_InitTick>

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40023c00 	.word	0x40023c00
 80020e4:	40023800 	.word	0x40023800
 80020e8:	08006e58 	.word	0x08006e58
 80020ec:	20000000 	.word	0x20000000
 80020f0:	20000004 	.word	0x20000004

080020f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020f8:	b094      	sub	sp, #80	@ 0x50
 80020fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8002100:	2300      	movs	r3, #0
 8002102:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002104:	2300      	movs	r3, #0
 8002106:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800210c:	4b79      	ldr	r3, [pc, #484]	@ (80022f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 030c 	and.w	r3, r3, #12
 8002114:	2b08      	cmp	r3, #8
 8002116:	d00d      	beq.n	8002134 <HAL_RCC_GetSysClockFreq+0x40>
 8002118:	2b08      	cmp	r3, #8
 800211a:	f200 80e1 	bhi.w	80022e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <HAL_RCC_GetSysClockFreq+0x34>
 8002122:	2b04      	cmp	r3, #4
 8002124:	d003      	beq.n	800212e <HAL_RCC_GetSysClockFreq+0x3a>
 8002126:	e0db      	b.n	80022e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002128:	4b73      	ldr	r3, [pc, #460]	@ (80022f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800212a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800212c:	e0db      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800212e:	4b73      	ldr	r3, [pc, #460]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x208>)
 8002130:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002132:	e0d8      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002134:	4b6f      	ldr	r3, [pc, #444]	@ (80022f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800213c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800213e:	4b6d      	ldr	r3, [pc, #436]	@ (80022f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d063      	beq.n	8002212 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800214a:	4b6a      	ldr	r3, [pc, #424]	@ (80022f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	099b      	lsrs	r3, r3, #6
 8002150:	2200      	movs	r2, #0
 8002152:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002154:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800215c:	633b      	str	r3, [r7, #48]	@ 0x30
 800215e:	2300      	movs	r3, #0
 8002160:	637b      	str	r3, [r7, #52]	@ 0x34
 8002162:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002166:	4622      	mov	r2, r4
 8002168:	462b      	mov	r3, r5
 800216a:	f04f 0000 	mov.w	r0, #0
 800216e:	f04f 0100 	mov.w	r1, #0
 8002172:	0159      	lsls	r1, r3, #5
 8002174:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002178:	0150      	lsls	r0, r2, #5
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	4621      	mov	r1, r4
 8002180:	1a51      	subs	r1, r2, r1
 8002182:	6139      	str	r1, [r7, #16]
 8002184:	4629      	mov	r1, r5
 8002186:	eb63 0301 	sbc.w	r3, r3, r1
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002198:	4659      	mov	r1, fp
 800219a:	018b      	lsls	r3, r1, #6
 800219c:	4651      	mov	r1, sl
 800219e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021a2:	4651      	mov	r1, sl
 80021a4:	018a      	lsls	r2, r1, #6
 80021a6:	4651      	mov	r1, sl
 80021a8:	ebb2 0801 	subs.w	r8, r2, r1
 80021ac:	4659      	mov	r1, fp
 80021ae:	eb63 0901 	sbc.w	r9, r3, r1
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021c6:	4690      	mov	r8, r2
 80021c8:	4699      	mov	r9, r3
 80021ca:	4623      	mov	r3, r4
 80021cc:	eb18 0303 	adds.w	r3, r8, r3
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	462b      	mov	r3, r5
 80021d4:	eb49 0303 	adc.w	r3, r9, r3
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	f04f 0300 	mov.w	r3, #0
 80021e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80021e6:	4629      	mov	r1, r5
 80021e8:	024b      	lsls	r3, r1, #9
 80021ea:	4621      	mov	r1, r4
 80021ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021f0:	4621      	mov	r1, r4
 80021f2:	024a      	lsls	r2, r1, #9
 80021f4:	4610      	mov	r0, r2
 80021f6:	4619      	mov	r1, r3
 80021f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021fa:	2200      	movs	r2, #0
 80021fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002200:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002204:	f7fe f81c 	bl	8000240 <__aeabi_uldivmod>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	4613      	mov	r3, r2
 800220e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002210:	e058      	b.n	80022c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002212:	4b38      	ldr	r3, [pc, #224]	@ (80022f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	099b      	lsrs	r3, r3, #6
 8002218:	2200      	movs	r2, #0
 800221a:	4618      	mov	r0, r3
 800221c:	4611      	mov	r1, r2
 800221e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002222:	623b      	str	r3, [r7, #32]
 8002224:	2300      	movs	r3, #0
 8002226:	627b      	str	r3, [r7, #36]	@ 0x24
 8002228:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800222c:	4642      	mov	r2, r8
 800222e:	464b      	mov	r3, r9
 8002230:	f04f 0000 	mov.w	r0, #0
 8002234:	f04f 0100 	mov.w	r1, #0
 8002238:	0159      	lsls	r1, r3, #5
 800223a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800223e:	0150      	lsls	r0, r2, #5
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4641      	mov	r1, r8
 8002246:	ebb2 0a01 	subs.w	sl, r2, r1
 800224a:	4649      	mov	r1, r9
 800224c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	f04f 0300 	mov.w	r3, #0
 8002258:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800225c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002260:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002264:	ebb2 040a 	subs.w	r4, r2, sl
 8002268:	eb63 050b 	sbc.w	r5, r3, fp
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	f04f 0300 	mov.w	r3, #0
 8002274:	00eb      	lsls	r3, r5, #3
 8002276:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800227a:	00e2      	lsls	r2, r4, #3
 800227c:	4614      	mov	r4, r2
 800227e:	461d      	mov	r5, r3
 8002280:	4643      	mov	r3, r8
 8002282:	18e3      	adds	r3, r4, r3
 8002284:	603b      	str	r3, [r7, #0]
 8002286:	464b      	mov	r3, r9
 8002288:	eb45 0303 	adc.w	r3, r5, r3
 800228c:	607b      	str	r3, [r7, #4]
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	e9d7 4500 	ldrd	r4, r5, [r7]
 800229a:	4629      	mov	r1, r5
 800229c:	028b      	lsls	r3, r1, #10
 800229e:	4621      	mov	r1, r4
 80022a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022a4:	4621      	mov	r1, r4
 80022a6:	028a      	lsls	r2, r1, #10
 80022a8:	4610      	mov	r0, r2
 80022aa:	4619      	mov	r1, r3
 80022ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022ae:	2200      	movs	r2, #0
 80022b0:	61bb      	str	r3, [r7, #24]
 80022b2:	61fa      	str	r2, [r7, #28]
 80022b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022b8:	f7fd ffc2 	bl	8000240 <__aeabi_uldivmod>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4613      	mov	r3, r2
 80022c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80022c4:	4b0b      	ldr	r3, [pc, #44]	@ (80022f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	0c1b      	lsrs	r3, r3, #16
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	3301      	adds	r3, #1
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80022d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80022d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022de:	e002      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022e0:	4b05      	ldr	r3, [pc, #20]	@ (80022f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80022e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3750      	adds	r7, #80	@ 0x50
 80022ec:	46bd      	mov	sp, r7
 80022ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022f2:	bf00      	nop
 80022f4:	40023800 	.word	0x40023800
 80022f8:	00f42400 	.word	0x00f42400
 80022fc:	007a1200 	.word	0x007a1200

08002300 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002304:	4b03      	ldr	r3, [pc, #12]	@ (8002314 <HAL_RCC_GetHCLKFreq+0x14>)
 8002306:	681b      	ldr	r3, [r3, #0]
}
 8002308:	4618      	mov	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	20000000 	.word	0x20000000

08002318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800231c:	f7ff fff0 	bl	8002300 <HAL_RCC_GetHCLKFreq>
 8002320:	4602      	mov	r2, r0
 8002322:	4b05      	ldr	r3, [pc, #20]	@ (8002338 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	0a9b      	lsrs	r3, r3, #10
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	4903      	ldr	r1, [pc, #12]	@ (800233c <HAL_RCC_GetPCLK1Freq+0x24>)
 800232e:	5ccb      	ldrb	r3, [r1, r3]
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002334:	4618      	mov	r0, r3
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40023800 	.word	0x40023800
 800233c:	08006e68 	.word	0x08006e68

08002340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002344:	f7ff ffdc 	bl	8002300 <HAL_RCC_GetHCLKFreq>
 8002348:	4602      	mov	r2, r0
 800234a:	4b05      	ldr	r3, [pc, #20]	@ (8002360 <HAL_RCC_GetPCLK2Freq+0x20>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	0b5b      	lsrs	r3, r3, #13
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	4903      	ldr	r1, [pc, #12]	@ (8002364 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002356:	5ccb      	ldrb	r3, [r1, r3]
 8002358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800235c:	4618      	mov	r0, r3
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40023800 	.word	0x40023800
 8002364:	08006e68 	.word	0x08006e68

08002368 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	220f      	movs	r2, #15
 8002376:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002378:	4b12      	ldr	r3, [pc, #72]	@ (80023c4 <HAL_RCC_GetClockConfig+0x5c>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 0203 	and.w	r2, r3, #3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002384:	4b0f      	ldr	r3, [pc, #60]	@ (80023c4 <HAL_RCC_GetClockConfig+0x5c>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002390:	4b0c      	ldr	r3, [pc, #48]	@ (80023c4 <HAL_RCC_GetClockConfig+0x5c>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800239c:	4b09      	ldr	r3, [pc, #36]	@ (80023c4 <HAL_RCC_GetClockConfig+0x5c>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	08db      	lsrs	r3, r3, #3
 80023a2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80023aa:	4b07      	ldr	r3, [pc, #28]	@ (80023c8 <HAL_RCC_GetClockConfig+0x60>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 020f 	and.w	r2, r3, #15
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	601a      	str	r2, [r3, #0]
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40023c00 	.word	0x40023c00

080023cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b088      	sub	sp, #32
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d012      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80023f4:	4b69      	ldr	r3, [pc, #420]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	4a68      	ldr	r2, [pc, #416]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023fa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80023fe:	6093      	str	r3, [r2, #8]
 8002400:	4b66      	ldr	r3, [pc, #408]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002408:	4964      	ldr	r1, [pc, #400]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800240a:	4313      	orrs	r3, r2
 800240c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002416:	2301      	movs	r3, #1
 8002418:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d017      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002426:	4b5d      	ldr	r3, [pc, #372]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002428:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800242c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002434:	4959      	ldr	r1, [pc, #356]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002436:	4313      	orrs	r3, r2
 8002438:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002440:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002444:	d101      	bne.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002446:	2301      	movs	r3, #1
 8002448:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002452:	2301      	movs	r3, #1
 8002454:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d017      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002462:	4b4e      	ldr	r3, [pc, #312]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002464:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002468:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002470:	494a      	ldr	r1, [pc, #296]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002472:	4313      	orrs	r3, r2
 8002474:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002480:	d101      	bne.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002482:	2301      	movs	r3, #1
 8002484:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800248e:	2301      	movs	r3, #1
 8002490:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800249e:	2301      	movs	r3, #1
 80024a0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0320 	and.w	r3, r3, #32
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 808b 	beq.w	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80024b0:	4b3a      	ldr	r3, [pc, #232]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b4:	4a39      	ldr	r2, [pc, #228]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80024bc:	4b37      	ldr	r3, [pc, #220]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80024c8:	4b35      	ldr	r3, [pc, #212]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a34      	ldr	r2, [pc, #208]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024d4:	f7fe fcb4 	bl	8000e40 <HAL_GetTick>
 80024d8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024dc:	f7fe fcb0 	bl	8000e40 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b64      	cmp	r3, #100	@ 0x64
 80024e8:	d901      	bls.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e38f      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80024ee:	4b2c      	ldr	r3, [pc, #176]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f0      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024fa:	4b28      	ldr	r3, [pc, #160]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002502:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d035      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	429a      	cmp	r2, r3
 8002516:	d02e      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002518:	4b20      	ldr	r3, [pc, #128]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800251a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800251c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002520:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002522:	4b1e      	ldr	r3, [pc, #120]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002526:	4a1d      	ldr	r2, [pc, #116]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800252c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800252e:	4b1b      	ldr	r3, [pc, #108]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002532:	4a1a      	ldr	r2, [pc, #104]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002534:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002538:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800253a:	4a18      	ldr	r2, [pc, #96]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002540:	4b16      	ldr	r3, [pc, #88]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b01      	cmp	r3, #1
 800254a:	d114      	bne.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254c:	f7fe fc78 	bl	8000e40 <HAL_GetTick>
 8002550:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002552:	e00a      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002554:	f7fe fc74 	bl	8000e40 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002562:	4293      	cmp	r3, r2
 8002564:	d901      	bls.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e351      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800256a:	4b0c      	ldr	r3, [pc, #48]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800256c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0ee      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800257e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002582:	d111      	bne.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002584:	4b05      	ldr	r3, [pc, #20]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002590:	4b04      	ldr	r3, [pc, #16]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002592:	400b      	ands	r3, r1
 8002594:	4901      	ldr	r1, [pc, #4]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002596:	4313      	orrs	r3, r2
 8002598:	608b      	str	r3, [r1, #8]
 800259a:	e00b      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800259c:	40023800 	.word	0x40023800
 80025a0:	40007000 	.word	0x40007000
 80025a4:	0ffffcff 	.word	0x0ffffcff
 80025a8:	4bac      	ldr	r3, [pc, #688]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	4aab      	ldr	r2, [pc, #684]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025ae:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80025b2:	6093      	str	r3, [r2, #8]
 80025b4:	4ba9      	ldr	r3, [pc, #676]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025b6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c0:	49a6      	ldr	r1, [pc, #664]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0310 	and.w	r3, r3, #16
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d010      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80025d2:	4ba2      	ldr	r3, [pc, #648]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025d8:	4aa0      	ldr	r2, [pc, #640]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025de:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80025e2:	4b9e      	ldr	r3, [pc, #632]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025e4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ec:	499b      	ldr	r1, [pc, #620]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00a      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002600:	4b96      	ldr	r3, [pc, #600]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002606:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800260e:	4993      	ldr	r1, [pc, #588]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002610:	4313      	orrs	r3, r2
 8002612:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00a      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002622:	4b8e      	ldr	r3, [pc, #568]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002628:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002630:	498a      	ldr	r1, [pc, #552]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002632:	4313      	orrs	r3, r2
 8002634:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00a      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002644:	4b85      	ldr	r3, [pc, #532]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800264a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002652:	4982      	ldr	r1, [pc, #520]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002654:	4313      	orrs	r3, r2
 8002656:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00a      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002666:	4b7d      	ldr	r3, [pc, #500]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800266c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002674:	4979      	ldr	r1, [pc, #484]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002676:	4313      	orrs	r3, r2
 8002678:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00a      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002688:	4b74      	ldr	r3, [pc, #464]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800268a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800268e:	f023 0203 	bic.w	r2, r3, #3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002696:	4971      	ldr	r1, [pc, #452]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002698:	4313      	orrs	r3, r2
 800269a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00a      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026aa:	4b6c      	ldr	r3, [pc, #432]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b0:	f023 020c 	bic.w	r2, r3, #12
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026b8:	4968      	ldr	r1, [pc, #416]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00a      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026cc:	4b63      	ldr	r3, [pc, #396]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026da:	4960      	ldr	r1, [pc, #384]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00a      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026ee:	4b5b      	ldr	r3, [pc, #364]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026f4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026fc:	4957      	ldr	r1, [pc, #348]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00a      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002710:	4b52      	ldr	r3, [pc, #328]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002716:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800271e:	494f      	ldr	r1, [pc, #316]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002720:	4313      	orrs	r3, r2
 8002722:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00a      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002732:	4b4a      	ldr	r3, [pc, #296]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002738:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002740:	4946      	ldr	r1, [pc, #280]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002742:	4313      	orrs	r3, r2
 8002744:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00a      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002754:	4b41      	ldr	r3, [pc, #260]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800275a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002762:	493e      	ldr	r1, [pc, #248]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002764:	4313      	orrs	r3, r2
 8002766:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00a      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002776:	4b39      	ldr	r3, [pc, #228]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002778:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800277c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002784:	4935      	ldr	r1, [pc, #212]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00a      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002798:	4b30      	ldr	r3, [pc, #192]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800279a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800279e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027a6:	492d      	ldr	r1, [pc, #180]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d011      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80027ba:	4b28      	ldr	r3, [pc, #160]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027c8:	4924      	ldr	r1, [pc, #144]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027d8:	d101      	bne.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80027da:	2301      	movs	r3, #1
 80027dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80027ea:	2301      	movs	r3, #1
 80027ec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00a      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027fa:	4b18      	ldr	r3, [pc, #96]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002800:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002808:	4914      	ldr	r1, [pc, #80]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800280a:	4313      	orrs	r3, r2
 800280c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00b      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800281c:	4b0f      	ldr	r3, [pc, #60]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800281e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002822:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800282c:	490b      	ldr	r1, [pc, #44]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800282e:	4313      	orrs	r3, r2
 8002830:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00f      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002840:	4b06      	ldr	r3, [pc, #24]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002846:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002850:	4902      	ldr	r1, [pc, #8]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002852:	4313      	orrs	r3, r2
 8002854:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002858:	e002      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800285a:	bf00      	nop
 800285c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00b      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800286c:	4b8a      	ldr	r3, [pc, #552]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800286e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002872:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800287c:	4986      	ldr	r1, [pc, #536]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800287e:	4313      	orrs	r3, r2
 8002880:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00b      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002890:	4b81      	ldr	r3, [pc, #516]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002892:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002896:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028a0:	497d      	ldr	r1, [pc, #500]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d006      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 80d6 	beq.w	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80028bc:	4b76      	ldr	r3, [pc, #472]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a75      	ldr	r2, [pc, #468]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80028c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028c8:	f7fe faba 	bl	8000e40 <HAL_GetTick>
 80028cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028ce:	e008      	b.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028d0:	f7fe fab6 	bl	8000e40 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b64      	cmp	r3, #100	@ 0x64
 80028dc:	d901      	bls.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e195      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028e2:	4b6d      	ldr	r3, [pc, #436]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1f0      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d021      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d11d      	bne.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002902:	4b65      	ldr	r3, [pc, #404]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002904:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002908:	0c1b      	lsrs	r3, r3, #16
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002910:	4b61      	ldr	r3, [pc, #388]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002912:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002916:	0e1b      	lsrs	r3, r3, #24
 8002918:	f003 030f 	and.w	r3, r3, #15
 800291c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	019a      	lsls	r2, r3, #6
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	041b      	lsls	r3, r3, #16
 8002928:	431a      	orrs	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	061b      	lsls	r3, r3, #24
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	071b      	lsls	r3, r3, #28
 8002936:	4958      	ldr	r1, [pc, #352]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002938:	4313      	orrs	r3, r2
 800293a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d004      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800294e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002952:	d00a      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800295c:	2b00      	cmp	r3, #0
 800295e:	d02e      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002964:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002968:	d129      	bne.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800296a:	4b4b      	ldr	r3, [pc, #300]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800296c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002970:	0c1b      	lsrs	r3, r3, #16
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002978:	4b47      	ldr	r3, [pc, #284]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800297a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800297e:	0f1b      	lsrs	r3, r3, #28
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	019a      	lsls	r2, r3, #6
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	041b      	lsls	r3, r3, #16
 8002990:	431a      	orrs	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	061b      	lsls	r3, r3, #24
 8002998:	431a      	orrs	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	071b      	lsls	r3, r3, #28
 800299e:	493e      	ldr	r1, [pc, #248]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80029a6:	4b3c      	ldr	r3, [pc, #240]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029ac:	f023 021f 	bic.w	r2, r3, #31
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b4:	3b01      	subs	r3, #1
 80029b6:	4938      	ldr	r1, [pc, #224]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d01d      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029ca:	4b33      	ldr	r3, [pc, #204]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029d0:	0e1b      	lsrs	r3, r3, #24
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029de:	0f1b      	lsrs	r3, r3, #28
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	019a      	lsls	r2, r3, #6
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	041b      	lsls	r3, r3, #16
 80029f2:	431a      	orrs	r2, r3
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	061b      	lsls	r3, r3, #24
 80029f8:	431a      	orrs	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	071b      	lsls	r3, r3, #28
 80029fe:	4926      	ldr	r1, [pc, #152]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d011      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	019a      	lsls	r2, r3, #6
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	041b      	lsls	r3, r3, #16
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	061b      	lsls	r3, r3, #24
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	071b      	lsls	r3, r3, #28
 8002a2e:	491a      	ldr	r1, [pc, #104]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a36:	4b18      	ldr	r3, [pc, #96]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a17      	ldr	r2, [pc, #92]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a3c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a42:	f7fe f9fd 	bl	8000e40 <HAL_GetTick>
 8002a46:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a48:	e008      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a4a:	f7fe f9f9 	bl	8000e40 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b64      	cmp	r3, #100	@ 0x64
 8002a56:	d901      	bls.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e0d8      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0f0      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	f040 80ce 	bne.w	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002a70:	4b09      	ldr	r3, [pc, #36]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a08      	ldr	r2, [pc, #32]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a7c:	f7fe f9e0 	bl	8000e40 <HAL_GetTick>
 8002a80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a82:	e00b      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a84:	f7fe f9dc 	bl	8000e40 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b64      	cmp	r3, #100	@ 0x64
 8002a90:	d904      	bls.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e0bb      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002a96:	bf00      	nop
 8002a98:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a9c:	4b5e      	ldr	r3, [pc, #376]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002aa4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002aa8:	d0ec      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d009      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d02e      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d12a      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ad2:	4b51      	ldr	r3, [pc, #324]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad8:	0c1b      	lsrs	r3, r3, #16
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ae0:	4b4d      	ldr	r3, [pc, #308]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ae6:	0f1b      	lsrs	r3, r3, #28
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	019a      	lsls	r2, r3, #6
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	041b      	lsls	r3, r3, #16
 8002af8:	431a      	orrs	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	061b      	lsls	r3, r3, #24
 8002b00:	431a      	orrs	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	071b      	lsls	r3, r3, #28
 8002b06:	4944      	ldr	r1, [pc, #272]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b0e:	4b42      	ldr	r3, [pc, #264]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b14:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	021b      	lsls	r3, r3, #8
 8002b20:	493d      	ldr	r1, [pc, #244]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d022      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b3c:	d11d      	bne.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b3e:	4b36      	ldr	r3, [pc, #216]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b44:	0e1b      	lsrs	r3, r3, #24
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b4c:	4b32      	ldr	r3, [pc, #200]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b52:	0f1b      	lsrs	r3, r3, #28
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	019a      	lsls	r2, r3, #6
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	041b      	lsls	r3, r3, #16
 8002b66:	431a      	orrs	r2, r3
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	061b      	lsls	r3, r3, #24
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	071b      	lsls	r3, r3, #28
 8002b72:	4929      	ldr	r1, [pc, #164]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d028      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b86:	4b24      	ldr	r3, [pc, #144]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b8c:	0e1b      	lsrs	r3, r3, #24
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b94:	4b20      	ldr	r3, [pc, #128]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b9a:	0c1b      	lsrs	r3, r3, #16
 8002b9c:	f003 0303 	and.w	r3, r3, #3
 8002ba0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	019a      	lsls	r2, r3, #6
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	041b      	lsls	r3, r3, #16
 8002bac:	431a      	orrs	r2, r3
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	061b      	lsls	r3, r3, #24
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	071b      	lsls	r3, r3, #28
 8002bba:	4917      	ldr	r1, [pc, #92]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002bc2:	4b15      	ldr	r3, [pc, #84]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bc8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd0:	4911      	ldr	r1, [pc, #68]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a0e      	ldr	r2, [pc, #56]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002be2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002be4:	f7fe f92c 	bl	8000e40 <HAL_GetTick>
 8002be8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002bec:	f7fe f928 	bl	8000e40 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b64      	cmp	r3, #100	@ 0x64
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e007      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002bfe:	4b06      	ldr	r3, [pc, #24]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c0a:	d1ef      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3720      	adds	r7, #32
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40023800 	.word	0x40023800

08002c1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e049      	b.n	8002cc2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d106      	bne.n	8002c48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f841 	bl	8002cca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3304      	adds	r3, #4
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4610      	mov	r0, r2
 8002c5c:	f000 f9e8 	bl	8003030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
	...

08002ce0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d001      	beq.n	8002cf8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e054      	b.n	8002da2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0201 	orr.w	r2, r2, #1
 8002d0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a26      	ldr	r2, [pc, #152]	@ (8002db0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d022      	beq.n	8002d60 <HAL_TIM_Base_Start_IT+0x80>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d22:	d01d      	beq.n	8002d60 <HAL_TIM_Base_Start_IT+0x80>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a22      	ldr	r2, [pc, #136]	@ (8002db4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d018      	beq.n	8002d60 <HAL_TIM_Base_Start_IT+0x80>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a21      	ldr	r2, [pc, #132]	@ (8002db8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d013      	beq.n	8002d60 <HAL_TIM_Base_Start_IT+0x80>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a1f      	ldr	r2, [pc, #124]	@ (8002dbc <HAL_TIM_Base_Start_IT+0xdc>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d00e      	beq.n	8002d60 <HAL_TIM_Base_Start_IT+0x80>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a1e      	ldr	r2, [pc, #120]	@ (8002dc0 <HAL_TIM_Base_Start_IT+0xe0>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d009      	beq.n	8002d60 <HAL_TIM_Base_Start_IT+0x80>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a1c      	ldr	r2, [pc, #112]	@ (8002dc4 <HAL_TIM_Base_Start_IT+0xe4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d004      	beq.n	8002d60 <HAL_TIM_Base_Start_IT+0x80>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a1b      	ldr	r2, [pc, #108]	@ (8002dc8 <HAL_TIM_Base_Start_IT+0xe8>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d115      	bne.n	8002d8c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	4b19      	ldr	r3, [pc, #100]	@ (8002dcc <HAL_TIM_Base_Start_IT+0xec>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2b06      	cmp	r3, #6
 8002d70:	d015      	beq.n	8002d9e <HAL_TIM_Base_Start_IT+0xbe>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d78:	d011      	beq.n	8002d9e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f042 0201 	orr.w	r2, r2, #1
 8002d88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d8a:	e008      	b.n	8002d9e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0201 	orr.w	r2, r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	e000      	b.n	8002da0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40010000 	.word	0x40010000
 8002db4:	40000400 	.word	0x40000400
 8002db8:	40000800 	.word	0x40000800
 8002dbc:	40000c00 	.word	0x40000c00
 8002dc0:	40010400 	.word	0x40010400
 8002dc4:	40014000 	.word	0x40014000
 8002dc8:	40001800 	.word	0x40001800
 8002dcc:	00010007 	.word	0x00010007

08002dd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d020      	beq.n	8002e34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d01b      	beq.n	8002e34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f06f 0202 	mvn.w	r2, #2
 8002e04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f8e9 	bl	8002ff2 <HAL_TIM_IC_CaptureCallback>
 8002e20:	e005      	b.n	8002e2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f8db 	bl	8002fde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 f8ec 	bl	8003006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	f003 0304 	and.w	r3, r3, #4
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d020      	beq.n	8002e80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d01b      	beq.n	8002e80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f06f 0204 	mvn.w	r2, #4
 8002e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2202      	movs	r2, #2
 8002e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f8c3 	bl	8002ff2 <HAL_TIM_IC_CaptureCallback>
 8002e6c:	e005      	b.n	8002e7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f8b5 	bl	8002fde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f8c6 	bl	8003006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d020      	beq.n	8002ecc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d01b      	beq.n	8002ecc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f06f 0208 	mvn.w	r2, #8
 8002e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2204      	movs	r2, #4
 8002ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f89d 	bl	8002ff2 <HAL_TIM_IC_CaptureCallback>
 8002eb8:	e005      	b.n	8002ec6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f88f 	bl	8002fde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f8a0 	bl	8003006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	f003 0310 	and.w	r3, r3, #16
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d020      	beq.n	8002f18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f003 0310 	and.w	r3, r3, #16
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d01b      	beq.n	8002f18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f06f 0210 	mvn.w	r2, #16
 8002ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2208      	movs	r2, #8
 8002eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f877 	bl	8002ff2 <HAL_TIM_IC_CaptureCallback>
 8002f04:	e005      	b.n	8002f12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f869 	bl	8002fde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 f87a 	bl	8003006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00c      	beq.n	8002f3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d007      	beq.n	8002f3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0201 	mvn.w	r2, #1
 8002f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7fd fd18 	bl	800096c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d104      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00c      	beq.n	8002f6a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d007      	beq.n	8002f6a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002f62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f913 	bl	8003190 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00c      	beq.n	8002f8e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d007      	beq.n	8002f8e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f90b 	bl	80031a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00c      	beq.n	8002fb2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d007      	beq.n	8002fb2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002faa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f834 	bl	800301a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	f003 0320 	and.w	r3, r3, #32
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00c      	beq.n	8002fd6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f003 0320 	and.w	r3, r3, #32
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d007      	beq.n	8002fd6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f06f 0220 	mvn.w	r2, #32
 8002fce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 f8d3 	bl	800317c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fd6:	bf00      	nop
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003006:	b480      	push	{r7}
 8003008:	b083      	sub	sp, #12
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
	...

08003030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a43      	ldr	r2, [pc, #268]	@ (8003150 <TIM_Base_SetConfig+0x120>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d013      	beq.n	8003070 <TIM_Base_SetConfig+0x40>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800304e:	d00f      	beq.n	8003070 <TIM_Base_SetConfig+0x40>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a40      	ldr	r2, [pc, #256]	@ (8003154 <TIM_Base_SetConfig+0x124>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d00b      	beq.n	8003070 <TIM_Base_SetConfig+0x40>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a3f      	ldr	r2, [pc, #252]	@ (8003158 <TIM_Base_SetConfig+0x128>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d007      	beq.n	8003070 <TIM_Base_SetConfig+0x40>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a3e      	ldr	r2, [pc, #248]	@ (800315c <TIM_Base_SetConfig+0x12c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d003      	beq.n	8003070 <TIM_Base_SetConfig+0x40>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a3d      	ldr	r2, [pc, #244]	@ (8003160 <TIM_Base_SetConfig+0x130>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d108      	bne.n	8003082 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	4313      	orrs	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a32      	ldr	r2, [pc, #200]	@ (8003150 <TIM_Base_SetConfig+0x120>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d02b      	beq.n	80030e2 <TIM_Base_SetConfig+0xb2>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003090:	d027      	beq.n	80030e2 <TIM_Base_SetConfig+0xb2>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a2f      	ldr	r2, [pc, #188]	@ (8003154 <TIM_Base_SetConfig+0x124>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d023      	beq.n	80030e2 <TIM_Base_SetConfig+0xb2>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a2e      	ldr	r2, [pc, #184]	@ (8003158 <TIM_Base_SetConfig+0x128>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d01f      	beq.n	80030e2 <TIM_Base_SetConfig+0xb2>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a2d      	ldr	r2, [pc, #180]	@ (800315c <TIM_Base_SetConfig+0x12c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d01b      	beq.n	80030e2 <TIM_Base_SetConfig+0xb2>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a2c      	ldr	r2, [pc, #176]	@ (8003160 <TIM_Base_SetConfig+0x130>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d017      	beq.n	80030e2 <TIM_Base_SetConfig+0xb2>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a2b      	ldr	r2, [pc, #172]	@ (8003164 <TIM_Base_SetConfig+0x134>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d013      	beq.n	80030e2 <TIM_Base_SetConfig+0xb2>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a2a      	ldr	r2, [pc, #168]	@ (8003168 <TIM_Base_SetConfig+0x138>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d00f      	beq.n	80030e2 <TIM_Base_SetConfig+0xb2>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a29      	ldr	r2, [pc, #164]	@ (800316c <TIM_Base_SetConfig+0x13c>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d00b      	beq.n	80030e2 <TIM_Base_SetConfig+0xb2>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a28      	ldr	r2, [pc, #160]	@ (8003170 <TIM_Base_SetConfig+0x140>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d007      	beq.n	80030e2 <TIM_Base_SetConfig+0xb2>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a27      	ldr	r2, [pc, #156]	@ (8003174 <TIM_Base_SetConfig+0x144>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d003      	beq.n	80030e2 <TIM_Base_SetConfig+0xb2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a26      	ldr	r2, [pc, #152]	@ (8003178 <TIM_Base_SetConfig+0x148>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d108      	bne.n	80030f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	4313      	orrs	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a0e      	ldr	r2, [pc, #56]	@ (8003150 <TIM_Base_SetConfig+0x120>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d003      	beq.n	8003122 <TIM_Base_SetConfig+0xf2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a10      	ldr	r2, [pc, #64]	@ (8003160 <TIM_Base_SetConfig+0x130>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d103      	bne.n	800312a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	691a      	ldr	r2, [r3, #16]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f043 0204 	orr.w	r2, r3, #4
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	601a      	str	r2, [r3, #0]
}
 8003142:	bf00      	nop
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40010000 	.word	0x40010000
 8003154:	40000400 	.word	0x40000400
 8003158:	40000800 	.word	0x40000800
 800315c:	40000c00 	.word	0x40000c00
 8003160:	40010400 	.word	0x40010400
 8003164:	40014000 	.word	0x40014000
 8003168:	40014400 	.word	0x40014400
 800316c:	40014800 	.word	0x40014800
 8003170:	40001800 	.word	0x40001800
 8003174:	40001c00 	.word	0x40001c00
 8003178:	40002000 	.word	0x40002000

0800317c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e040      	b.n	800324c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d106      	bne.n	80031e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7fd fc64 	bl	8000aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2224      	movs	r2, #36	@ 0x24
 80031e4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0201 	bic.w	r2, r2, #1
 80031f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d002      	beq.n	8003204 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 fa8c 	bl	800371c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 f825 	bl	8003254 <UART_SetConfig>
 800320a:	4603      	mov	r3, r0
 800320c:	2b01      	cmp	r3, #1
 800320e:	d101      	bne.n	8003214 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e01b      	b.n	800324c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003222:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003232:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0201 	orr.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 fb0b 	bl	8003860 <UART_CheckIdleState>
 800324a:	4603      	mov	r3, r0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b088      	sub	sp, #32
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800325c:	2300      	movs	r3, #0
 800325e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	431a      	orrs	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	4313      	orrs	r3, r2
 8003276:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	4ba6      	ldr	r3, [pc, #664]	@ (8003518 <UART_SetConfig+0x2c4>)
 8003280:	4013      	ands	r3, r2
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6812      	ldr	r2, [r2, #0]
 8003286:	6979      	ldr	r1, [r7, #20]
 8003288:	430b      	orrs	r3, r1
 800328a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a94      	ldr	r2, [pc, #592]	@ (800351c <UART_SetConfig+0x2c8>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d120      	bne.n	8003312 <UART_SetConfig+0xbe>
 80032d0:	4b93      	ldr	r3, [pc, #588]	@ (8003520 <UART_SetConfig+0x2cc>)
 80032d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	2b03      	cmp	r3, #3
 80032dc:	d816      	bhi.n	800330c <UART_SetConfig+0xb8>
 80032de:	a201      	add	r2, pc, #4	@ (adr r2, 80032e4 <UART_SetConfig+0x90>)
 80032e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e4:	080032f5 	.word	0x080032f5
 80032e8:	08003301 	.word	0x08003301
 80032ec:	080032fb 	.word	0x080032fb
 80032f0:	08003307 	.word	0x08003307
 80032f4:	2301      	movs	r3, #1
 80032f6:	77fb      	strb	r3, [r7, #31]
 80032f8:	e150      	b.n	800359c <UART_SetConfig+0x348>
 80032fa:	2302      	movs	r3, #2
 80032fc:	77fb      	strb	r3, [r7, #31]
 80032fe:	e14d      	b.n	800359c <UART_SetConfig+0x348>
 8003300:	2304      	movs	r3, #4
 8003302:	77fb      	strb	r3, [r7, #31]
 8003304:	e14a      	b.n	800359c <UART_SetConfig+0x348>
 8003306:	2308      	movs	r3, #8
 8003308:	77fb      	strb	r3, [r7, #31]
 800330a:	e147      	b.n	800359c <UART_SetConfig+0x348>
 800330c:	2310      	movs	r3, #16
 800330e:	77fb      	strb	r3, [r7, #31]
 8003310:	e144      	b.n	800359c <UART_SetConfig+0x348>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a83      	ldr	r2, [pc, #524]	@ (8003524 <UART_SetConfig+0x2d0>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d132      	bne.n	8003382 <UART_SetConfig+0x12e>
 800331c:	4b80      	ldr	r3, [pc, #512]	@ (8003520 <UART_SetConfig+0x2cc>)
 800331e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003322:	f003 030c 	and.w	r3, r3, #12
 8003326:	2b0c      	cmp	r3, #12
 8003328:	d828      	bhi.n	800337c <UART_SetConfig+0x128>
 800332a:	a201      	add	r2, pc, #4	@ (adr r2, 8003330 <UART_SetConfig+0xdc>)
 800332c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003330:	08003365 	.word	0x08003365
 8003334:	0800337d 	.word	0x0800337d
 8003338:	0800337d 	.word	0x0800337d
 800333c:	0800337d 	.word	0x0800337d
 8003340:	08003371 	.word	0x08003371
 8003344:	0800337d 	.word	0x0800337d
 8003348:	0800337d 	.word	0x0800337d
 800334c:	0800337d 	.word	0x0800337d
 8003350:	0800336b 	.word	0x0800336b
 8003354:	0800337d 	.word	0x0800337d
 8003358:	0800337d 	.word	0x0800337d
 800335c:	0800337d 	.word	0x0800337d
 8003360:	08003377 	.word	0x08003377
 8003364:	2300      	movs	r3, #0
 8003366:	77fb      	strb	r3, [r7, #31]
 8003368:	e118      	b.n	800359c <UART_SetConfig+0x348>
 800336a:	2302      	movs	r3, #2
 800336c:	77fb      	strb	r3, [r7, #31]
 800336e:	e115      	b.n	800359c <UART_SetConfig+0x348>
 8003370:	2304      	movs	r3, #4
 8003372:	77fb      	strb	r3, [r7, #31]
 8003374:	e112      	b.n	800359c <UART_SetConfig+0x348>
 8003376:	2308      	movs	r3, #8
 8003378:	77fb      	strb	r3, [r7, #31]
 800337a:	e10f      	b.n	800359c <UART_SetConfig+0x348>
 800337c:	2310      	movs	r3, #16
 800337e:	77fb      	strb	r3, [r7, #31]
 8003380:	e10c      	b.n	800359c <UART_SetConfig+0x348>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a68      	ldr	r2, [pc, #416]	@ (8003528 <UART_SetConfig+0x2d4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d120      	bne.n	80033ce <UART_SetConfig+0x17a>
 800338c:	4b64      	ldr	r3, [pc, #400]	@ (8003520 <UART_SetConfig+0x2cc>)
 800338e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003392:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003396:	2b30      	cmp	r3, #48	@ 0x30
 8003398:	d013      	beq.n	80033c2 <UART_SetConfig+0x16e>
 800339a:	2b30      	cmp	r3, #48	@ 0x30
 800339c:	d814      	bhi.n	80033c8 <UART_SetConfig+0x174>
 800339e:	2b20      	cmp	r3, #32
 80033a0:	d009      	beq.n	80033b6 <UART_SetConfig+0x162>
 80033a2:	2b20      	cmp	r3, #32
 80033a4:	d810      	bhi.n	80033c8 <UART_SetConfig+0x174>
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <UART_SetConfig+0x15c>
 80033aa:	2b10      	cmp	r3, #16
 80033ac:	d006      	beq.n	80033bc <UART_SetConfig+0x168>
 80033ae:	e00b      	b.n	80033c8 <UART_SetConfig+0x174>
 80033b0:	2300      	movs	r3, #0
 80033b2:	77fb      	strb	r3, [r7, #31]
 80033b4:	e0f2      	b.n	800359c <UART_SetConfig+0x348>
 80033b6:	2302      	movs	r3, #2
 80033b8:	77fb      	strb	r3, [r7, #31]
 80033ba:	e0ef      	b.n	800359c <UART_SetConfig+0x348>
 80033bc:	2304      	movs	r3, #4
 80033be:	77fb      	strb	r3, [r7, #31]
 80033c0:	e0ec      	b.n	800359c <UART_SetConfig+0x348>
 80033c2:	2308      	movs	r3, #8
 80033c4:	77fb      	strb	r3, [r7, #31]
 80033c6:	e0e9      	b.n	800359c <UART_SetConfig+0x348>
 80033c8:	2310      	movs	r3, #16
 80033ca:	77fb      	strb	r3, [r7, #31]
 80033cc:	e0e6      	b.n	800359c <UART_SetConfig+0x348>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a56      	ldr	r2, [pc, #344]	@ (800352c <UART_SetConfig+0x2d8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d120      	bne.n	800341a <UART_SetConfig+0x1c6>
 80033d8:	4b51      	ldr	r3, [pc, #324]	@ (8003520 <UART_SetConfig+0x2cc>)
 80033da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033de:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80033e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80033e4:	d013      	beq.n	800340e <UART_SetConfig+0x1ba>
 80033e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80033e8:	d814      	bhi.n	8003414 <UART_SetConfig+0x1c0>
 80033ea:	2b80      	cmp	r3, #128	@ 0x80
 80033ec:	d009      	beq.n	8003402 <UART_SetConfig+0x1ae>
 80033ee:	2b80      	cmp	r3, #128	@ 0x80
 80033f0:	d810      	bhi.n	8003414 <UART_SetConfig+0x1c0>
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <UART_SetConfig+0x1a8>
 80033f6:	2b40      	cmp	r3, #64	@ 0x40
 80033f8:	d006      	beq.n	8003408 <UART_SetConfig+0x1b4>
 80033fa:	e00b      	b.n	8003414 <UART_SetConfig+0x1c0>
 80033fc:	2300      	movs	r3, #0
 80033fe:	77fb      	strb	r3, [r7, #31]
 8003400:	e0cc      	b.n	800359c <UART_SetConfig+0x348>
 8003402:	2302      	movs	r3, #2
 8003404:	77fb      	strb	r3, [r7, #31]
 8003406:	e0c9      	b.n	800359c <UART_SetConfig+0x348>
 8003408:	2304      	movs	r3, #4
 800340a:	77fb      	strb	r3, [r7, #31]
 800340c:	e0c6      	b.n	800359c <UART_SetConfig+0x348>
 800340e:	2308      	movs	r3, #8
 8003410:	77fb      	strb	r3, [r7, #31]
 8003412:	e0c3      	b.n	800359c <UART_SetConfig+0x348>
 8003414:	2310      	movs	r3, #16
 8003416:	77fb      	strb	r3, [r7, #31]
 8003418:	e0c0      	b.n	800359c <UART_SetConfig+0x348>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a44      	ldr	r2, [pc, #272]	@ (8003530 <UART_SetConfig+0x2dc>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d125      	bne.n	8003470 <UART_SetConfig+0x21c>
 8003424:	4b3e      	ldr	r3, [pc, #248]	@ (8003520 <UART_SetConfig+0x2cc>)
 8003426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800342a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800342e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003432:	d017      	beq.n	8003464 <UART_SetConfig+0x210>
 8003434:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003438:	d817      	bhi.n	800346a <UART_SetConfig+0x216>
 800343a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800343e:	d00b      	beq.n	8003458 <UART_SetConfig+0x204>
 8003440:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003444:	d811      	bhi.n	800346a <UART_SetConfig+0x216>
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <UART_SetConfig+0x1fe>
 800344a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800344e:	d006      	beq.n	800345e <UART_SetConfig+0x20a>
 8003450:	e00b      	b.n	800346a <UART_SetConfig+0x216>
 8003452:	2300      	movs	r3, #0
 8003454:	77fb      	strb	r3, [r7, #31]
 8003456:	e0a1      	b.n	800359c <UART_SetConfig+0x348>
 8003458:	2302      	movs	r3, #2
 800345a:	77fb      	strb	r3, [r7, #31]
 800345c:	e09e      	b.n	800359c <UART_SetConfig+0x348>
 800345e:	2304      	movs	r3, #4
 8003460:	77fb      	strb	r3, [r7, #31]
 8003462:	e09b      	b.n	800359c <UART_SetConfig+0x348>
 8003464:	2308      	movs	r3, #8
 8003466:	77fb      	strb	r3, [r7, #31]
 8003468:	e098      	b.n	800359c <UART_SetConfig+0x348>
 800346a:	2310      	movs	r3, #16
 800346c:	77fb      	strb	r3, [r7, #31]
 800346e:	e095      	b.n	800359c <UART_SetConfig+0x348>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a2f      	ldr	r2, [pc, #188]	@ (8003534 <UART_SetConfig+0x2e0>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d125      	bne.n	80034c6 <UART_SetConfig+0x272>
 800347a:	4b29      	ldr	r3, [pc, #164]	@ (8003520 <UART_SetConfig+0x2cc>)
 800347c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003480:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003484:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003488:	d017      	beq.n	80034ba <UART_SetConfig+0x266>
 800348a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800348e:	d817      	bhi.n	80034c0 <UART_SetConfig+0x26c>
 8003490:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003494:	d00b      	beq.n	80034ae <UART_SetConfig+0x25a>
 8003496:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800349a:	d811      	bhi.n	80034c0 <UART_SetConfig+0x26c>
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <UART_SetConfig+0x254>
 80034a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034a4:	d006      	beq.n	80034b4 <UART_SetConfig+0x260>
 80034a6:	e00b      	b.n	80034c0 <UART_SetConfig+0x26c>
 80034a8:	2301      	movs	r3, #1
 80034aa:	77fb      	strb	r3, [r7, #31]
 80034ac:	e076      	b.n	800359c <UART_SetConfig+0x348>
 80034ae:	2302      	movs	r3, #2
 80034b0:	77fb      	strb	r3, [r7, #31]
 80034b2:	e073      	b.n	800359c <UART_SetConfig+0x348>
 80034b4:	2304      	movs	r3, #4
 80034b6:	77fb      	strb	r3, [r7, #31]
 80034b8:	e070      	b.n	800359c <UART_SetConfig+0x348>
 80034ba:	2308      	movs	r3, #8
 80034bc:	77fb      	strb	r3, [r7, #31]
 80034be:	e06d      	b.n	800359c <UART_SetConfig+0x348>
 80034c0:	2310      	movs	r3, #16
 80034c2:	77fb      	strb	r3, [r7, #31]
 80034c4:	e06a      	b.n	800359c <UART_SetConfig+0x348>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a1b      	ldr	r2, [pc, #108]	@ (8003538 <UART_SetConfig+0x2e4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d138      	bne.n	8003542 <UART_SetConfig+0x2ee>
 80034d0:	4b13      	ldr	r3, [pc, #76]	@ (8003520 <UART_SetConfig+0x2cc>)
 80034d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034d6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80034da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80034de:	d017      	beq.n	8003510 <UART_SetConfig+0x2bc>
 80034e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80034e4:	d82a      	bhi.n	800353c <UART_SetConfig+0x2e8>
 80034e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034ea:	d00b      	beq.n	8003504 <UART_SetConfig+0x2b0>
 80034ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034f0:	d824      	bhi.n	800353c <UART_SetConfig+0x2e8>
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <UART_SetConfig+0x2aa>
 80034f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034fa:	d006      	beq.n	800350a <UART_SetConfig+0x2b6>
 80034fc:	e01e      	b.n	800353c <UART_SetConfig+0x2e8>
 80034fe:	2300      	movs	r3, #0
 8003500:	77fb      	strb	r3, [r7, #31]
 8003502:	e04b      	b.n	800359c <UART_SetConfig+0x348>
 8003504:	2302      	movs	r3, #2
 8003506:	77fb      	strb	r3, [r7, #31]
 8003508:	e048      	b.n	800359c <UART_SetConfig+0x348>
 800350a:	2304      	movs	r3, #4
 800350c:	77fb      	strb	r3, [r7, #31]
 800350e:	e045      	b.n	800359c <UART_SetConfig+0x348>
 8003510:	2308      	movs	r3, #8
 8003512:	77fb      	strb	r3, [r7, #31]
 8003514:	e042      	b.n	800359c <UART_SetConfig+0x348>
 8003516:	bf00      	nop
 8003518:	efff69f3 	.word	0xefff69f3
 800351c:	40011000 	.word	0x40011000
 8003520:	40023800 	.word	0x40023800
 8003524:	40004400 	.word	0x40004400
 8003528:	40004800 	.word	0x40004800
 800352c:	40004c00 	.word	0x40004c00
 8003530:	40005000 	.word	0x40005000
 8003534:	40011400 	.word	0x40011400
 8003538:	40007800 	.word	0x40007800
 800353c:	2310      	movs	r3, #16
 800353e:	77fb      	strb	r3, [r7, #31]
 8003540:	e02c      	b.n	800359c <UART_SetConfig+0x348>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a72      	ldr	r2, [pc, #456]	@ (8003710 <UART_SetConfig+0x4bc>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d125      	bne.n	8003598 <UART_SetConfig+0x344>
 800354c:	4b71      	ldr	r3, [pc, #452]	@ (8003714 <UART_SetConfig+0x4c0>)
 800354e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003552:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003556:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800355a:	d017      	beq.n	800358c <UART_SetConfig+0x338>
 800355c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003560:	d817      	bhi.n	8003592 <UART_SetConfig+0x33e>
 8003562:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003566:	d00b      	beq.n	8003580 <UART_SetConfig+0x32c>
 8003568:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800356c:	d811      	bhi.n	8003592 <UART_SetConfig+0x33e>
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <UART_SetConfig+0x326>
 8003572:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003576:	d006      	beq.n	8003586 <UART_SetConfig+0x332>
 8003578:	e00b      	b.n	8003592 <UART_SetConfig+0x33e>
 800357a:	2300      	movs	r3, #0
 800357c:	77fb      	strb	r3, [r7, #31]
 800357e:	e00d      	b.n	800359c <UART_SetConfig+0x348>
 8003580:	2302      	movs	r3, #2
 8003582:	77fb      	strb	r3, [r7, #31]
 8003584:	e00a      	b.n	800359c <UART_SetConfig+0x348>
 8003586:	2304      	movs	r3, #4
 8003588:	77fb      	strb	r3, [r7, #31]
 800358a:	e007      	b.n	800359c <UART_SetConfig+0x348>
 800358c:	2308      	movs	r3, #8
 800358e:	77fb      	strb	r3, [r7, #31]
 8003590:	e004      	b.n	800359c <UART_SetConfig+0x348>
 8003592:	2310      	movs	r3, #16
 8003594:	77fb      	strb	r3, [r7, #31]
 8003596:	e001      	b.n	800359c <UART_SetConfig+0x348>
 8003598:	2310      	movs	r3, #16
 800359a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035a4:	d15b      	bne.n	800365e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80035a6:	7ffb      	ldrb	r3, [r7, #31]
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d828      	bhi.n	80035fe <UART_SetConfig+0x3aa>
 80035ac:	a201      	add	r2, pc, #4	@ (adr r2, 80035b4 <UART_SetConfig+0x360>)
 80035ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b2:	bf00      	nop
 80035b4:	080035d9 	.word	0x080035d9
 80035b8:	080035e1 	.word	0x080035e1
 80035bc:	080035e9 	.word	0x080035e9
 80035c0:	080035ff 	.word	0x080035ff
 80035c4:	080035ef 	.word	0x080035ef
 80035c8:	080035ff 	.word	0x080035ff
 80035cc:	080035ff 	.word	0x080035ff
 80035d0:	080035ff 	.word	0x080035ff
 80035d4:	080035f7 	.word	0x080035f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035d8:	f7fe fe9e 	bl	8002318 <HAL_RCC_GetPCLK1Freq>
 80035dc:	61b8      	str	r0, [r7, #24]
        break;
 80035de:	e013      	b.n	8003608 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035e0:	f7fe feae 	bl	8002340 <HAL_RCC_GetPCLK2Freq>
 80035e4:	61b8      	str	r0, [r7, #24]
        break;
 80035e6:	e00f      	b.n	8003608 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035e8:	4b4b      	ldr	r3, [pc, #300]	@ (8003718 <UART_SetConfig+0x4c4>)
 80035ea:	61bb      	str	r3, [r7, #24]
        break;
 80035ec:	e00c      	b.n	8003608 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ee:	f7fe fd81 	bl	80020f4 <HAL_RCC_GetSysClockFreq>
 80035f2:	61b8      	str	r0, [r7, #24]
        break;
 80035f4:	e008      	b.n	8003608 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035fa:	61bb      	str	r3, [r7, #24]
        break;
 80035fc:	e004      	b.n	8003608 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80035fe:	2300      	movs	r3, #0
 8003600:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	77bb      	strb	r3, [r7, #30]
        break;
 8003606:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d074      	beq.n	80036f8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	005a      	lsls	r2, r3, #1
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	085b      	lsrs	r3, r3, #1
 8003618:	441a      	add	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003622:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	2b0f      	cmp	r3, #15
 8003628:	d916      	bls.n	8003658 <UART_SetConfig+0x404>
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003630:	d212      	bcs.n	8003658 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	b29b      	uxth	r3, r3
 8003636:	f023 030f 	bic.w	r3, r3, #15
 800363a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	085b      	lsrs	r3, r3, #1
 8003640:	b29b      	uxth	r3, r3
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	b29a      	uxth	r2, r3
 8003648:	89fb      	ldrh	r3, [r7, #14]
 800364a:	4313      	orrs	r3, r2
 800364c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	89fa      	ldrh	r2, [r7, #14]
 8003654:	60da      	str	r2, [r3, #12]
 8003656:	e04f      	b.n	80036f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	77bb      	strb	r3, [r7, #30]
 800365c:	e04c      	b.n	80036f8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800365e:	7ffb      	ldrb	r3, [r7, #31]
 8003660:	2b08      	cmp	r3, #8
 8003662:	d828      	bhi.n	80036b6 <UART_SetConfig+0x462>
 8003664:	a201      	add	r2, pc, #4	@ (adr r2, 800366c <UART_SetConfig+0x418>)
 8003666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366a:	bf00      	nop
 800366c:	08003691 	.word	0x08003691
 8003670:	08003699 	.word	0x08003699
 8003674:	080036a1 	.word	0x080036a1
 8003678:	080036b7 	.word	0x080036b7
 800367c:	080036a7 	.word	0x080036a7
 8003680:	080036b7 	.word	0x080036b7
 8003684:	080036b7 	.word	0x080036b7
 8003688:	080036b7 	.word	0x080036b7
 800368c:	080036af 	.word	0x080036af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003690:	f7fe fe42 	bl	8002318 <HAL_RCC_GetPCLK1Freq>
 8003694:	61b8      	str	r0, [r7, #24]
        break;
 8003696:	e013      	b.n	80036c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003698:	f7fe fe52 	bl	8002340 <HAL_RCC_GetPCLK2Freq>
 800369c:	61b8      	str	r0, [r7, #24]
        break;
 800369e:	e00f      	b.n	80036c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003718 <UART_SetConfig+0x4c4>)
 80036a2:	61bb      	str	r3, [r7, #24]
        break;
 80036a4:	e00c      	b.n	80036c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036a6:	f7fe fd25 	bl	80020f4 <HAL_RCC_GetSysClockFreq>
 80036aa:	61b8      	str	r0, [r7, #24]
        break;
 80036ac:	e008      	b.n	80036c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036b2:	61bb      	str	r3, [r7, #24]
        break;
 80036b4:	e004      	b.n	80036c0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80036b6:	2300      	movs	r3, #0
 80036b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	77bb      	strb	r3, [r7, #30]
        break;
 80036be:	bf00      	nop
    }

    if (pclk != 0U)
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d018      	beq.n	80036f8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	085a      	lsrs	r2, r3, #1
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	441a      	add	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	2b0f      	cmp	r3, #15
 80036de:	d909      	bls.n	80036f4 <UART_SetConfig+0x4a0>
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036e6:	d205      	bcs.n	80036f4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	60da      	str	r2, [r3, #12]
 80036f2:	e001      	b.n	80036f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003704:	7fbb      	ldrb	r3, [r7, #30]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3720      	adds	r7, #32
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40007c00 	.word	0x40007c00
 8003714:	40023800 	.word	0x40023800
 8003718:	00f42400 	.word	0x00f42400

0800371c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003728:	f003 0308 	and.w	r3, r3, #8
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00a      	beq.n	800378a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b0:	f003 0310 	and.w	r3, r3, #16
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00a      	beq.n	80037ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d01a      	beq.n	8003832 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003816:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800381a:	d10a      	bne.n	8003832 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	605a      	str	r2, [r3, #4]
  }
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b098      	sub	sp, #96	@ 0x60
 8003864:	af02      	add	r7, sp, #8
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003870:	f7fd fae6 	bl	8000e40 <HAL_GetTick>
 8003874:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0308 	and.w	r3, r3, #8
 8003880:	2b08      	cmp	r3, #8
 8003882:	d12e      	bne.n	80038e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003884:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800388c:	2200      	movs	r2, #0
 800388e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f88c 	bl	80039b0 <UART_WaitOnFlagUntilTimeout>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d021      	beq.n	80038e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038a6:	e853 3f00 	ldrex	r3, [r3]
 80038aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80038ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	461a      	mov	r2, r3
 80038ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80038be:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80038c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038c4:	e841 2300 	strex	r3, r2, [r1]
 80038c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80038ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1e6      	bne.n	800389e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2220      	movs	r2, #32
 80038d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e062      	b.n	80039a8 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	d149      	bne.n	8003984 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038f8:	2200      	movs	r2, #0
 80038fa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f856 	bl	80039b0 <UART_WaitOnFlagUntilTimeout>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d03c      	beq.n	8003984 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003912:	e853 3f00 	ldrex	r3, [r3]
 8003916:	623b      	str	r3, [r7, #32]
   return(result);
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800391e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	461a      	mov	r2, r3
 8003926:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003928:	633b      	str	r3, [r7, #48]	@ 0x30
 800392a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800392e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003930:	e841 2300 	strex	r3, r2, [r1]
 8003934:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1e6      	bne.n	800390a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	3308      	adds	r3, #8
 8003942:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	e853 3f00 	ldrex	r3, [r3]
 800394a:	60fb      	str	r3, [r7, #12]
   return(result);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f023 0301 	bic.w	r3, r3, #1
 8003952:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	3308      	adds	r3, #8
 800395a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800395c:	61fa      	str	r2, [r7, #28]
 800395e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003960:	69b9      	ldr	r1, [r7, #24]
 8003962:	69fa      	ldr	r2, [r7, #28]
 8003964:	e841 2300 	strex	r3, r2, [r1]
 8003968:	617b      	str	r3, [r7, #20]
   return(result);
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1e5      	bne.n	800393c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2220      	movs	r2, #32
 8003974:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e011      	b.n	80039a8 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2220      	movs	r2, #32
 8003988:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2220      	movs	r2, #32
 800398e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3758      	adds	r7, #88	@ 0x58
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	603b      	str	r3, [r7, #0]
 80039bc:	4613      	mov	r3, r2
 80039be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039c0:	e04f      	b.n	8003a62 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c8:	d04b      	beq.n	8003a62 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ca:	f7fd fa39 	bl	8000e40 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d302      	bcc.n	80039e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e04e      	b.n	8003a82 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d037      	beq.n	8003a62 <UART_WaitOnFlagUntilTimeout+0xb2>
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b80      	cmp	r3, #128	@ 0x80
 80039f6:	d034      	beq.n	8003a62 <UART_WaitOnFlagUntilTimeout+0xb2>
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	2b40      	cmp	r3, #64	@ 0x40
 80039fc:	d031      	beq.n	8003a62 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	f003 0308 	and.w	r3, r3, #8
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d110      	bne.n	8003a2e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2208      	movs	r2, #8
 8003a12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 f838 	bl	8003a8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2208      	movs	r2, #8
 8003a1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e029      	b.n	8003a82 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a3c:	d111      	bne.n	8003a62 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 f81e 	bl	8003a8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2220      	movs	r2, #32
 8003a52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e00f      	b.n	8003a82 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	69da      	ldr	r2, [r3, #28]
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	bf0c      	ite	eq
 8003a72:	2301      	moveq	r3, #1
 8003a74:	2300      	movne	r3, #0
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	461a      	mov	r2, r3
 8003a7a:	79fb      	ldrb	r3, [r7, #7]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d0a0      	beq.n	80039c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b095      	sub	sp, #84	@ 0x54
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a9a:	e853 3f00 	ldrex	r3, [r3]
 8003a9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	461a      	mov	r2, r3
 8003aae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ab0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ab2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ab6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ab8:	e841 2300 	strex	r3, r2, [r1]
 8003abc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1e6      	bne.n	8003a92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	3308      	adds	r3, #8
 8003aca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003acc:	6a3b      	ldr	r3, [r7, #32]
 8003ace:	e853 3f00 	ldrex	r3, [r3]
 8003ad2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	f023 0301 	bic.w	r3, r3, #1
 8003ada:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	3308      	adds	r3, #8
 8003ae2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ae4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003aea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003aec:	e841 2300 	strex	r3, r2, [r1]
 8003af0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1e5      	bne.n	8003ac4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d118      	bne.n	8003b32 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	e853 3f00 	ldrex	r3, [r3]
 8003b0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	f023 0310 	bic.w	r3, r3, #16
 8003b14:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b1e:	61bb      	str	r3, [r7, #24]
 8003b20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b22:	6979      	ldr	r1, [r7, #20]
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	e841 2300 	strex	r3, r2, [r1]
 8003b2a:	613b      	str	r3, [r7, #16]
   return(result);
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1e6      	bne.n	8003b00 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2220      	movs	r2, #32
 8003b36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003b46:	bf00      	nop
 8003b48:	3754      	adds	r7, #84	@ 0x54
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
	...

08003b54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b54:	b084      	sub	sp, #16
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b084      	sub	sp, #16
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
 8003b5e:	f107 001c 	add.w	r0, r7, #28
 8003b62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b66:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d121      	bne.n	8003bb2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b72:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68da      	ldr	r2, [r3, #12]
 8003b7e:	4b21      	ldr	r3, [pc, #132]	@ (8003c04 <USB_CoreInit+0xb0>)
 8003b80:	4013      	ands	r3, r2
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003b92:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d105      	bne.n	8003ba6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 fa92 	bl	80040d0 <USB_CoreReset>
 8003bac:	4603      	mov	r3, r0
 8003bae:	73fb      	strb	r3, [r7, #15]
 8003bb0:	e010      	b.n	8003bd4 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 fa86 	bl	80040d0 <USB_CoreReset>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bcc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8003bd4:	7fbb      	ldrb	r3, [r7, #30]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d10b      	bne.n	8003bf2 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f043 0206 	orr.w	r2, r3, #6
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f043 0220 	orr.w	r2, r3, #32
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bfe:	b004      	add	sp, #16
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	ffbdffbf 	.word	0xffbdffbf

08003c08 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f023 0201 	bic.w	r2, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b084      	sub	sp, #16
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
 8003c32:	460b      	mov	r3, r1
 8003c34:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003c46:	78fb      	ldrb	r3, [r7, #3]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d115      	bne.n	8003c78 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003c58:	200a      	movs	r0, #10
 8003c5a:	f7fd f8fd 	bl	8000e58 <HAL_Delay>
      ms += 10U;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	330a      	adds	r3, #10
 8003c62:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 fa25 	bl	80040b4 <USB_GetMode>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d01e      	beq.n	8003cae <USB_SetCurrentMode+0x84>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2bc7      	cmp	r3, #199	@ 0xc7
 8003c74:	d9f0      	bls.n	8003c58 <USB_SetCurrentMode+0x2e>
 8003c76:	e01a      	b.n	8003cae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003c78:	78fb      	ldrb	r3, [r7, #3]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d115      	bne.n	8003caa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003c8a:	200a      	movs	r0, #10
 8003c8c:	f7fd f8e4 	bl	8000e58 <HAL_Delay>
      ms += 10U;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	330a      	adds	r3, #10
 8003c94:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 fa0c 	bl	80040b4 <USB_GetMode>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d005      	beq.n	8003cae <USB_SetCurrentMode+0x84>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2bc7      	cmp	r3, #199	@ 0xc7
 8003ca6:	d9f0      	bls.n	8003c8a <USB_SetCurrentMode+0x60>
 8003ca8:	e001      	b.n	8003cae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e005      	b.n	8003cba <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2bc8      	cmp	r3, #200	@ 0xc8
 8003cb2:	d101      	bne.n	8003cb8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e000      	b.n	8003cba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
	...

08003cc4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003cc4:	b084      	sub	sp, #16
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b086      	sub	sp, #24
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
 8003cce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003cd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003cde:	2300      	movs	r3, #0
 8003ce0:	613b      	str	r3, [r7, #16]
 8003ce2:	e009      	b.n	8003cf8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	3340      	adds	r3, #64	@ 0x40
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4413      	add	r3, r2
 8003cee:	2200      	movs	r2, #0
 8003cf0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	613b      	str	r3, [r7, #16]
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	2b0e      	cmp	r3, #14
 8003cfc:	d9f2      	bls.n	8003ce4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003cfe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d11c      	bne.n	8003d40 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d14:	f043 0302 	orr.w	r3, r3, #2
 8003d18:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d1e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	e005      	b.n	8003d4c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d44:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003d52:	461a      	mov	r2, r3
 8003d54:	2300      	movs	r3, #0
 8003d56:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d58:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d10d      	bne.n	8003d7c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003d60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d104      	bne.n	8003d72 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003d68:	2100      	movs	r1, #0
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f968 	bl	8004040 <USB_SetDevSpeed>
 8003d70:	e008      	b.n	8003d84 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003d72:	2101      	movs	r1, #1
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f963 	bl	8004040 <USB_SetDevSpeed>
 8003d7a:	e003      	b.n	8003d84 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003d7c:	2103      	movs	r1, #3
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f95e 	bl	8004040 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003d84:	2110      	movs	r1, #16
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f8fa 	bl	8003f80 <USB_FlushTxFifo>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f924 	bl	8003fe4 <USB_FlushRxFifo>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dac:	461a      	mov	r2, r3
 8003dae:	2300      	movs	r3, #0
 8003db0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003db8:	461a      	mov	r2, r3
 8003dba:	2300      	movs	r3, #0
 8003dbc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003dca:	2300      	movs	r3, #0
 8003dcc:	613b      	str	r3, [r7, #16]
 8003dce:	e043      	b.n	8003e58 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	015a      	lsls	r2, r3, #5
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003de2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003de6:	d118      	bne.n	8003e1a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10a      	bne.n	8003e04 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	015a      	lsls	r2, r3, #5
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	4413      	add	r3, r2
 8003df6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003e00:	6013      	str	r3, [r2, #0]
 8003e02:	e013      	b.n	8003e2c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	015a      	lsls	r2, r3, #5
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e10:	461a      	mov	r2, r3
 8003e12:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003e16:	6013      	str	r3, [r2, #0]
 8003e18:	e008      	b.n	8003e2c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	015a      	lsls	r2, r3, #5
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	4413      	add	r3, r2
 8003e22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e26:	461a      	mov	r2, r3
 8003e28:	2300      	movs	r3, #0
 8003e2a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e38:	461a      	mov	r2, r3
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	015a      	lsls	r2, r3, #5
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4413      	add	r3, r2
 8003e46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003e50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	3301      	adds	r3, #1
 8003e56:	613b      	str	r3, [r7, #16]
 8003e58:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d3b5      	bcc.n	8003dd0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e64:	2300      	movs	r3, #0
 8003e66:	613b      	str	r3, [r7, #16]
 8003e68:	e043      	b.n	8003ef2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	015a      	lsls	r2, r3, #5
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	4413      	add	r3, r2
 8003e72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e80:	d118      	bne.n	8003eb4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10a      	bne.n	8003e9e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e94:	461a      	mov	r2, r3
 8003e96:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003e9a:	6013      	str	r3, [r2, #0]
 8003e9c:	e013      	b.n	8003ec6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	015a      	lsls	r2, r3, #5
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003eaa:	461a      	mov	r2, r3
 8003eac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003eb0:	6013      	str	r3, [r2, #0]
 8003eb2:	e008      	b.n	8003ec6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	015a      	lsls	r2, r3, #5
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4413      	add	r3, r2
 8003ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	015a      	lsls	r2, r3, #5
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	4413      	add	r3, r2
 8003ece:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003eea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	613b      	str	r3, [r7, #16]
 8003ef2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d3b5      	bcc.n	8003e6a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f10:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003f1e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003f20:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d105      	bne.n	8003f34 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	f043 0210 	orr.w	r2, r3, #16
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	699a      	ldr	r2, [r3, #24]
 8003f38:	4b0f      	ldr	r3, [pc, #60]	@ (8003f78 <USB_DevInit+0x2b4>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003f40:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d005      	beq.n	8003f54 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	f043 0208 	orr.w	r2, r3, #8
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003f54:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d105      	bne.n	8003f68 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	699a      	ldr	r2, [r3, #24]
 8003f60:	4b06      	ldr	r3, [pc, #24]	@ (8003f7c <USB_DevInit+0x2b8>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f74:	b004      	add	sp, #16
 8003f76:	4770      	bx	lr
 8003f78:	803c3800 	.word	0x803c3800
 8003f7c:	40000004 	.word	0x40000004

08003f80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	3301      	adds	r3, #1
 8003f92:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003f9a:	d901      	bls.n	8003fa0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e01b      	b.n	8003fd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	daf2      	bge.n	8003f8e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	019b      	lsls	r3, r3, #6
 8003fb0:	f043 0220 	orr.w	r2, r3, #32
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003fc4:	d901      	bls.n	8003fca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e006      	b.n	8003fd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	f003 0320 	and.w	r3, r3, #32
 8003fd2:	2b20      	cmp	r3, #32
 8003fd4:	d0f0      	beq.n	8003fb8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003fec:	2300      	movs	r3, #0
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003ffc:	d901      	bls.n	8004002 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e018      	b.n	8004034 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	2b00      	cmp	r3, #0
 8004008:	daf2      	bge.n	8003ff0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2210      	movs	r2, #16
 8004012:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	3301      	adds	r3, #1
 8004018:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004020:	d901      	bls.n	8004026 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e006      	b.n	8004034 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f003 0310 	and.w	r3, r3, #16
 800402e:	2b10      	cmp	r3, #16
 8004030:	d0f0      	beq.n	8004014 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	460b      	mov	r3, r1
 800404a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	78fb      	ldrb	r3, [r7, #3]
 800405a:	68f9      	ldr	r1, [r7, #12]
 800405c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004060:	4313      	orrs	r3, r2
 8004062:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004072:	b480      	push	{r7}
 8004074:	b085      	sub	sp, #20
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800408c:	f023 0303 	bic.w	r3, r3, #3
 8004090:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040a0:	f043 0302 	orr.w	r3, r3, #2
 80040a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	f003 0301 	and.w	r3, r3, #1
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040d8:	2300      	movs	r3, #0
 80040da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	3301      	adds	r3, #1
 80040e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80040e8:	d901      	bls.n	80040ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e022      	b.n	8004134 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	daf2      	bge.n	80040dc <USB_CoreReset+0xc>

  count = 10U;
 80040f6:	230a      	movs	r3, #10
 80040f8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80040fa:	e002      	b.n	8004102 <USB_CoreReset+0x32>
  {
    count--;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	3b01      	subs	r3, #1
 8004100:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1f9      	bne.n	80040fc <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	f043 0201 	orr.w	r2, r3, #1
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	3301      	adds	r3, #1
 8004118:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004120:	d901      	bls.n	8004126 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e006      	b.n	8004134 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b01      	cmp	r3, #1
 8004130:	d0f0      	beq.n	8004114 <USB_CoreReset+0x44>

  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004144:	bf00      	nop
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
	...

08004150 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004156:	f3ef 8305 	mrs	r3, IPSR
 800415a:	60bb      	str	r3, [r7, #8]
  return(result);
 800415c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10f      	bne.n	8004182 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004162:	f3ef 8310 	mrs	r3, PRIMASK
 8004166:	607b      	str	r3, [r7, #4]
  return(result);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d105      	bne.n	800417a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800416e:	f3ef 8311 	mrs	r3, BASEPRI
 8004172:	603b      	str	r3, [r7, #0]
  return(result);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d007      	beq.n	800418a <osKernelInitialize+0x3a>
 800417a:	4b0e      	ldr	r3, [pc, #56]	@ (80041b4 <osKernelInitialize+0x64>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2b02      	cmp	r3, #2
 8004180:	d103      	bne.n	800418a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004182:	f06f 0305 	mvn.w	r3, #5
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	e00c      	b.n	80041a4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800418a:	4b0a      	ldr	r3, [pc, #40]	@ (80041b4 <osKernelInitialize+0x64>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d105      	bne.n	800419e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004192:	4b08      	ldr	r3, [pc, #32]	@ (80041b4 <osKernelInitialize+0x64>)
 8004194:	2201      	movs	r2, #1
 8004196:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004198:	2300      	movs	r3, #0
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	e002      	b.n	80041a4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800419e:	f04f 33ff 	mov.w	r3, #4294967295
 80041a2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80041a4:	68fb      	ldr	r3, [r7, #12]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	20000640 	.word	0x20000640

080041b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041be:	f3ef 8305 	mrs	r3, IPSR
 80041c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80041c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10f      	bne.n	80041ea <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ca:	f3ef 8310 	mrs	r3, PRIMASK
 80041ce:	607b      	str	r3, [r7, #4]
  return(result);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d105      	bne.n	80041e2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041d6:	f3ef 8311 	mrs	r3, BASEPRI
 80041da:	603b      	str	r3, [r7, #0]
  return(result);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d007      	beq.n	80041f2 <osKernelStart+0x3a>
 80041e2:	4b0f      	ldr	r3, [pc, #60]	@ (8004220 <osKernelStart+0x68>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d103      	bne.n	80041f2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80041ea:	f06f 0305 	mvn.w	r3, #5
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	e010      	b.n	8004214 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80041f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004220 <osKernelStart+0x68>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d109      	bne.n	800420e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80041fa:	f7ff ffa1 	bl	8004140 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80041fe:	4b08      	ldr	r3, [pc, #32]	@ (8004220 <osKernelStart+0x68>)
 8004200:	2202      	movs	r2, #2
 8004202:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004204:	f001 f8ca 	bl	800539c <vTaskStartScheduler>
      stat = osOK;
 8004208:	2300      	movs	r3, #0
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	e002      	b.n	8004214 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800420e:	f04f 33ff 	mov.w	r3, #4294967295
 8004212:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004214:	68fb      	ldr	r3, [r7, #12]
}
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	20000640 	.word	0x20000640

08004224 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004224:	b580      	push	{r7, lr}
 8004226:	b090      	sub	sp, #64	@ 0x40
 8004228:	af04      	add	r7, sp, #16
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004230:	2300      	movs	r3, #0
 8004232:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004234:	f3ef 8305 	mrs	r3, IPSR
 8004238:	61fb      	str	r3, [r7, #28]
  return(result);
 800423a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800423c:	2b00      	cmp	r3, #0
 800423e:	f040 808f 	bne.w	8004360 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004242:	f3ef 8310 	mrs	r3, PRIMASK
 8004246:	61bb      	str	r3, [r7, #24]
  return(result);
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d105      	bne.n	800425a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800424e:	f3ef 8311 	mrs	r3, BASEPRI
 8004252:	617b      	str	r3, [r7, #20]
  return(result);
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <osThreadNew+0x3e>
 800425a:	4b44      	ldr	r3, [pc, #272]	@ (800436c <osThreadNew+0x148>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b02      	cmp	r3, #2
 8004260:	d07e      	beq.n	8004360 <osThreadNew+0x13c>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d07b      	beq.n	8004360 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004268:	2380      	movs	r3, #128	@ 0x80
 800426a:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800426c:	2318      	movs	r3, #24
 800426e:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8004270:	2300      	movs	r3, #0
 8004272:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8004274:	f04f 33ff 	mov.w	r3, #4294967295
 8004278:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d045      	beq.n	800430c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d002      	beq.n	800428e <osThreadNew+0x6a>
        name = attr->name;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d002      	beq.n	800429c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800429c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d008      	beq.n	80042b4 <osThreadNew+0x90>
 80042a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a4:	2b38      	cmp	r3, #56	@ 0x38
 80042a6:	d805      	bhi.n	80042b4 <osThreadNew+0x90>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <osThreadNew+0x94>
        return (NULL);
 80042b4:	2300      	movs	r3, #0
 80042b6:	e054      	b.n	8004362 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	089b      	lsrs	r3, r3, #2
 80042c6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00e      	beq.n	80042ee <osThreadNew+0xca>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	2b5b      	cmp	r3, #91	@ 0x5b
 80042d6:	d90a      	bls.n	80042ee <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d006      	beq.n	80042ee <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d002      	beq.n	80042ee <osThreadNew+0xca>
        mem = 1;
 80042e8:	2301      	movs	r3, #1
 80042ea:	623b      	str	r3, [r7, #32]
 80042ec:	e010      	b.n	8004310 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10c      	bne.n	8004310 <osThreadNew+0xec>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d108      	bne.n	8004310 <osThreadNew+0xec>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d104      	bne.n	8004310 <osThreadNew+0xec>
          mem = 0;
 8004306:	2300      	movs	r3, #0
 8004308:	623b      	str	r3, [r7, #32]
 800430a:	e001      	b.n	8004310 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800430c:	2300      	movs	r3, #0
 800430e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d110      	bne.n	8004338 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800431e:	9202      	str	r2, [sp, #8]
 8004320:	9301      	str	r3, [sp, #4]
 8004322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004324:	9300      	str	r3, [sp, #0]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800432a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 fe4f 	bl	8004fd0 <xTaskCreateStatic>
 8004332:	4603      	mov	r3, r0
 8004334:	613b      	str	r3, [r7, #16]
 8004336:	e013      	b.n	8004360 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d110      	bne.n	8004360 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800433e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004340:	b29a      	uxth	r2, r3
 8004342:	f107 0310 	add.w	r3, r7, #16
 8004346:	9301      	str	r3, [sp, #4]
 8004348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 fea3 	bl	800509c <xTaskCreate>
 8004356:	4603      	mov	r3, r0
 8004358:	2b01      	cmp	r3, #1
 800435a:	d001      	beq.n	8004360 <osThreadNew+0x13c>
          hTask = NULL;
 800435c:	2300      	movs	r3, #0
 800435e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004360:	693b      	ldr	r3, [r7, #16]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3730      	adds	r7, #48	@ 0x30
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	20000640 	.word	0x20000640

08004370 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004378:	f3ef 8305 	mrs	r3, IPSR
 800437c:	613b      	str	r3, [r7, #16]
  return(result);
 800437e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10f      	bne.n	80043a4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004384:	f3ef 8310 	mrs	r3, PRIMASK
 8004388:	60fb      	str	r3, [r7, #12]
  return(result);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d105      	bne.n	800439c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004390:	f3ef 8311 	mrs	r3, BASEPRI
 8004394:	60bb      	str	r3, [r7, #8]
  return(result);
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d007      	beq.n	80043ac <osDelay+0x3c>
 800439c:	4b0a      	ldr	r3, [pc, #40]	@ (80043c8 <osDelay+0x58>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d103      	bne.n	80043ac <osDelay+0x3c>
    stat = osErrorISR;
 80043a4:	f06f 0305 	mvn.w	r3, #5
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	e007      	b.n	80043bc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80043ac:	2300      	movs	r3, #0
 80043ae:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d002      	beq.n	80043bc <osDelay+0x4c>
      vTaskDelay(ticks);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 ffb8 	bl	800532c <vTaskDelay>
    }
  }

  return (stat);
 80043bc:	697b      	ldr	r3, [r7, #20]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3718      	adds	r7, #24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	20000640 	.word	0x20000640

080043cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4a07      	ldr	r2, [pc, #28]	@ (80043f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80043dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	4a06      	ldr	r2, [pc, #24]	@ (80043fc <vApplicationGetIdleTaskMemory+0x30>)
 80043e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2280      	movs	r2, #128	@ 0x80
 80043e8:	601a      	str	r2, [r3, #0]
}
 80043ea:	bf00      	nop
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	20000644 	.word	0x20000644
 80043fc:	200006a0 	.word	0x200006a0

08004400 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4a07      	ldr	r2, [pc, #28]	@ (800442c <vApplicationGetTimerTaskMemory+0x2c>)
 8004410:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	4a06      	ldr	r2, [pc, #24]	@ (8004430 <vApplicationGetTimerTaskMemory+0x30>)
 8004416:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800441e:	601a      	str	r2, [r3, #0]
}
 8004420:	bf00      	nop
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	200008a0 	.word	0x200008a0
 8004430:	200008fc 	.word	0x200008fc

08004434 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f103 0208 	add.w	r2, r3, #8
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f04f 32ff 	mov.w	r2, #4294967295
 800444c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f103 0208 	add.w	r2, r3, #8
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f103 0208 	add.w	r2, r3, #8
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004482:	bf00      	nop
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800448e:	b480      	push	{r7}
 8004490:	b085      	sub	sp, #20
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
 8004496:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	689a      	ldr	r2, [r3, #8]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	1c5a      	adds	r2, r3, #1
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	601a      	str	r2, [r3, #0]
}
 80044ca:	bf00      	nop
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044d6:	b480      	push	{r7}
 80044d8:	b085      	sub	sp, #20
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
 80044de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ec:	d103      	bne.n	80044f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	e00c      	b.n	8004510 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	3308      	adds	r3, #8
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	e002      	b.n	8004504 <vListInsert+0x2e>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	429a      	cmp	r2, r3
 800450e:	d2f6      	bcs.n	80044fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	1c5a      	adds	r2, r3, #1
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	601a      	str	r2, [r3, #0]
}
 800453c:	bf00      	nop
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6892      	ldr	r2, [r2, #8]
 800455e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	6852      	ldr	r2, [r2, #4]
 8004568:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	429a      	cmp	r2, r3
 8004572:	d103      	bne.n	800457c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	1e5a      	subs	r2, r3, #1
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
}
 8004590:	4618      	mov	r0, r3
 8004592:	3714      	adds	r7, #20
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d10d      	bne.n	80045cc <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80045b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045b4:	b672      	cpsid	i
 80045b6:	f383 8811 	msr	BASEPRI, r3
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	b662      	cpsie	i
 80045c4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80045c6:	bf00      	nop
 80045c8:	bf00      	nop
 80045ca:	e7fd      	b.n	80045c8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80045cc:	f002 f8a6 	bl	800671c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d8:	68f9      	ldr	r1, [r7, #12]
 80045da:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80045dc:	fb01 f303 	mul.w	r3, r1, r3
 80045e0:	441a      	add	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045fc:	3b01      	subs	r3, #1
 80045fe:	68f9      	ldr	r1, [r7, #12]
 8004600:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004602:	fb01 f303 	mul.w	r3, r1, r3
 8004606:	441a      	add	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	22ff      	movs	r2, #255	@ 0xff
 8004610:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	22ff      	movs	r2, #255	@ 0xff
 8004618:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d114      	bne.n	800464c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d01a      	beq.n	8004660 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	3310      	adds	r3, #16
 800462e:	4618      	mov	r0, r3
 8004630:	f001 f950 	bl	80058d4 <xTaskRemoveFromEventList>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d012      	beq.n	8004660 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800463a:	4b0d      	ldr	r3, [pc, #52]	@ (8004670 <xQueueGenericReset+0xd4>)
 800463c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	f3bf 8f4f 	dsb	sy
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	e009      	b.n	8004660 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	3310      	adds	r3, #16
 8004650:	4618      	mov	r0, r3
 8004652:	f7ff feef 	bl	8004434 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	3324      	adds	r3, #36	@ 0x24
 800465a:	4618      	mov	r0, r3
 800465c:	f7ff feea 	bl	8004434 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004660:	f002 f892 	bl	8006788 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004664:	2301      	movs	r3, #1
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	e000ed04 	.word	0xe000ed04

08004674 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004674:	b580      	push	{r7, lr}
 8004676:	b08e      	sub	sp, #56	@ 0x38
 8004678:	af02      	add	r7, sp, #8
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
 8004680:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10d      	bne.n	80046a4 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8004688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800468c:	b672      	cpsid	i
 800468e:	f383 8811 	msr	BASEPRI, r3
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	b662      	cpsie	i
 800469c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800469e:	bf00      	nop
 80046a0:	bf00      	nop
 80046a2:	e7fd      	b.n	80046a0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10d      	bne.n	80046c6 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80046aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ae:	b672      	cpsid	i
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	b662      	cpsie	i
 80046be:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80046c0:	bf00      	nop
 80046c2:	bf00      	nop
 80046c4:	e7fd      	b.n	80046c2 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d002      	beq.n	80046d2 <xQueueGenericCreateStatic+0x5e>
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <xQueueGenericCreateStatic+0x62>
 80046d2:	2301      	movs	r3, #1
 80046d4:	e000      	b.n	80046d8 <xQueueGenericCreateStatic+0x64>
 80046d6:	2300      	movs	r3, #0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10d      	bne.n	80046f8 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80046dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e0:	b672      	cpsid	i
 80046e2:	f383 8811 	msr	BASEPRI, r3
 80046e6:	f3bf 8f6f 	isb	sy
 80046ea:	f3bf 8f4f 	dsb	sy
 80046ee:	b662      	cpsie	i
 80046f0:	623b      	str	r3, [r7, #32]
}
 80046f2:	bf00      	nop
 80046f4:	bf00      	nop
 80046f6:	e7fd      	b.n	80046f4 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d102      	bne.n	8004704 <xQueueGenericCreateStatic+0x90>
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <xQueueGenericCreateStatic+0x94>
 8004704:	2301      	movs	r3, #1
 8004706:	e000      	b.n	800470a <xQueueGenericCreateStatic+0x96>
 8004708:	2300      	movs	r3, #0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10d      	bne.n	800472a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800470e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004712:	b672      	cpsid	i
 8004714:	f383 8811 	msr	BASEPRI, r3
 8004718:	f3bf 8f6f 	isb	sy
 800471c:	f3bf 8f4f 	dsb	sy
 8004720:	b662      	cpsie	i
 8004722:	61fb      	str	r3, [r7, #28]
}
 8004724:	bf00      	nop
 8004726:	bf00      	nop
 8004728:	e7fd      	b.n	8004726 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800472a:	2350      	movs	r3, #80	@ 0x50
 800472c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2b50      	cmp	r3, #80	@ 0x50
 8004732:	d00d      	beq.n	8004750 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8004734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004738:	b672      	cpsid	i
 800473a:	f383 8811 	msr	BASEPRI, r3
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	b662      	cpsie	i
 8004748:	61bb      	str	r3, [r7, #24]
}
 800474a:	bf00      	nop
 800474c:	bf00      	nop
 800474e:	e7fd      	b.n	800474c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004750:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00d      	beq.n	8004778 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800475c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004764:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	4613      	mov	r3, r2
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	68b9      	ldr	r1, [r7, #8]
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 f805 	bl	8004782 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800477a:	4618      	mov	r0, r3
 800477c:	3730      	adds	r7, #48	@ 0x30
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b084      	sub	sp, #16
 8004786:	af00      	add	r7, sp, #0
 8004788:	60f8      	str	r0, [r7, #12]
 800478a:	60b9      	str	r1, [r7, #8]
 800478c:	607a      	str	r2, [r7, #4]
 800478e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d103      	bne.n	800479e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	601a      	str	r2, [r3, #0]
 800479c:	e002      	b.n	80047a4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80047b0:	2101      	movs	r1, #1
 80047b2:	69b8      	ldr	r0, [r7, #24]
 80047b4:	f7ff fef2 	bl	800459c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	78fa      	ldrb	r2, [r7, #3]
 80047bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80047c0:	bf00      	nop
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b08e      	sub	sp, #56	@ 0x38
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
 80047d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80047d6:	2300      	movs	r3, #0
 80047d8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80047de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10d      	bne.n	8004800 <xQueueGenericSend+0x38>
	__asm volatile
 80047e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e8:	b672      	cpsid	i
 80047ea:	f383 8811 	msr	BASEPRI, r3
 80047ee:	f3bf 8f6f 	isb	sy
 80047f2:	f3bf 8f4f 	dsb	sy
 80047f6:	b662      	cpsie	i
 80047f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80047fa:	bf00      	nop
 80047fc:	bf00      	nop
 80047fe:	e7fd      	b.n	80047fc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d103      	bne.n	800480e <xQueueGenericSend+0x46>
 8004806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <xQueueGenericSend+0x4a>
 800480e:	2301      	movs	r3, #1
 8004810:	e000      	b.n	8004814 <xQueueGenericSend+0x4c>
 8004812:	2300      	movs	r3, #0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10d      	bne.n	8004834 <xQueueGenericSend+0x6c>
	__asm volatile
 8004818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800481c:	b672      	cpsid	i
 800481e:	f383 8811 	msr	BASEPRI, r3
 8004822:	f3bf 8f6f 	isb	sy
 8004826:	f3bf 8f4f 	dsb	sy
 800482a:	b662      	cpsie	i
 800482c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800482e:	bf00      	nop
 8004830:	bf00      	nop
 8004832:	e7fd      	b.n	8004830 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	2b02      	cmp	r3, #2
 8004838:	d103      	bne.n	8004842 <xQueueGenericSend+0x7a>
 800483a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800483c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800483e:	2b01      	cmp	r3, #1
 8004840:	d101      	bne.n	8004846 <xQueueGenericSend+0x7e>
 8004842:	2301      	movs	r3, #1
 8004844:	e000      	b.n	8004848 <xQueueGenericSend+0x80>
 8004846:	2300      	movs	r3, #0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10d      	bne.n	8004868 <xQueueGenericSend+0xa0>
	__asm volatile
 800484c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004850:	b672      	cpsid	i
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	b662      	cpsie	i
 8004860:	623b      	str	r3, [r7, #32]
}
 8004862:	bf00      	nop
 8004864:	bf00      	nop
 8004866:	e7fd      	b.n	8004864 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004868:	f001 f9fc 	bl	8005c64 <xTaskGetSchedulerState>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d102      	bne.n	8004878 <xQueueGenericSend+0xb0>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <xQueueGenericSend+0xb4>
 8004878:	2301      	movs	r3, #1
 800487a:	e000      	b.n	800487e <xQueueGenericSend+0xb6>
 800487c:	2300      	movs	r3, #0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10d      	bne.n	800489e <xQueueGenericSend+0xd6>
	__asm volatile
 8004882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004886:	b672      	cpsid	i
 8004888:	f383 8811 	msr	BASEPRI, r3
 800488c:	f3bf 8f6f 	isb	sy
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	b662      	cpsie	i
 8004896:	61fb      	str	r3, [r7, #28]
}
 8004898:	bf00      	nop
 800489a:	bf00      	nop
 800489c:	e7fd      	b.n	800489a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800489e:	f001 ff3d 	bl	800671c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d302      	bcc.n	80048b4 <xQueueGenericSend+0xec>
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d129      	bne.n	8004908 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	68b9      	ldr	r1, [r7, #8]
 80048b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048ba:	f000 fa1b 	bl	8004cf4 <prvCopyDataToQueue>
 80048be:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d010      	beq.n	80048ea <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ca:	3324      	adds	r3, #36	@ 0x24
 80048cc:	4618      	mov	r0, r3
 80048ce:	f001 f801 	bl	80058d4 <xTaskRemoveFromEventList>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d013      	beq.n	8004900 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80048d8:	4b3f      	ldr	r3, [pc, #252]	@ (80049d8 <xQueueGenericSend+0x210>)
 80048da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	e00a      	b.n	8004900 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80048ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d007      	beq.n	8004900 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80048f0:	4b39      	ldr	r3, [pc, #228]	@ (80049d8 <xQueueGenericSend+0x210>)
 80048f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004900:	f001 ff42 	bl	8006788 <vPortExitCritical>
				return pdPASS;
 8004904:	2301      	movs	r3, #1
 8004906:	e063      	b.n	80049d0 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d103      	bne.n	8004916 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800490e:	f001 ff3b 	bl	8006788 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004912:	2300      	movs	r3, #0
 8004914:	e05c      	b.n	80049d0 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004918:	2b00      	cmp	r3, #0
 800491a:	d106      	bne.n	800492a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800491c:	f107 0314 	add.w	r3, r7, #20
 8004920:	4618      	mov	r0, r3
 8004922:	f001 f83d 	bl	80059a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004926:	2301      	movs	r3, #1
 8004928:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800492a:	f001 ff2d 	bl	8006788 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800492e:	f000 fda1 	bl	8005474 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004932:	f001 fef3 	bl	800671c <vPortEnterCritical>
 8004936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004938:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800493c:	b25b      	sxtb	r3, r3
 800493e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004942:	d103      	bne.n	800494c <xQueueGenericSend+0x184>
 8004944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800494c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800494e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004952:	b25b      	sxtb	r3, r3
 8004954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004958:	d103      	bne.n	8004962 <xQueueGenericSend+0x19a>
 800495a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004962:	f001 ff11 	bl	8006788 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004966:	1d3a      	adds	r2, r7, #4
 8004968:	f107 0314 	add.w	r3, r7, #20
 800496c:	4611      	mov	r1, r2
 800496e:	4618      	mov	r0, r3
 8004970:	f001 f82c 	bl	80059cc <xTaskCheckForTimeOut>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d124      	bne.n	80049c4 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800497a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800497c:	f000 fab2 	bl	8004ee4 <prvIsQueueFull>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d018      	beq.n	80049b8 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004988:	3310      	adds	r3, #16
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	4611      	mov	r1, r2
 800498e:	4618      	mov	r0, r3
 8004990:	f000 ff4a 	bl	8005828 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004994:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004996:	f000 fa3d 	bl	8004e14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800499a:	f000 fd79 	bl	8005490 <xTaskResumeAll>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f47f af7c 	bne.w	800489e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80049a6:	4b0c      	ldr	r3, [pc, #48]	@ (80049d8 <xQueueGenericSend+0x210>)
 80049a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	f3bf 8f4f 	dsb	sy
 80049b2:	f3bf 8f6f 	isb	sy
 80049b6:	e772      	b.n	800489e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80049b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049ba:	f000 fa2b 	bl	8004e14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049be:	f000 fd67 	bl	8005490 <xTaskResumeAll>
 80049c2:	e76c      	b.n	800489e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80049c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049c6:	f000 fa25 	bl	8004e14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049ca:	f000 fd61 	bl	8005490 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80049ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3738      	adds	r7, #56	@ 0x38
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	e000ed04 	.word	0xe000ed04

080049dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08e      	sub	sp, #56	@ 0x38
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
 80049e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80049ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10d      	bne.n	8004a10 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80049f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f8:	b672      	cpsid	i
 80049fa:	f383 8811 	msr	BASEPRI, r3
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	b662      	cpsie	i
 8004a08:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004a0a:	bf00      	nop
 8004a0c:	bf00      	nop
 8004a0e:	e7fd      	b.n	8004a0c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d103      	bne.n	8004a1e <xQueueGenericSendFromISR+0x42>
 8004a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <xQueueGenericSendFromISR+0x46>
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e000      	b.n	8004a24 <xQueueGenericSendFromISR+0x48>
 8004a22:	2300      	movs	r3, #0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10d      	bne.n	8004a44 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8004a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a2c:	b672      	cpsid	i
 8004a2e:	f383 8811 	msr	BASEPRI, r3
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	b662      	cpsie	i
 8004a3c:	623b      	str	r3, [r7, #32]
}
 8004a3e:	bf00      	nop
 8004a40:	bf00      	nop
 8004a42:	e7fd      	b.n	8004a40 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d103      	bne.n	8004a52 <xQueueGenericSendFromISR+0x76>
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d101      	bne.n	8004a56 <xQueueGenericSendFromISR+0x7a>
 8004a52:	2301      	movs	r3, #1
 8004a54:	e000      	b.n	8004a58 <xQueueGenericSendFromISR+0x7c>
 8004a56:	2300      	movs	r3, #0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10d      	bne.n	8004a78 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8004a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a60:	b672      	cpsid	i
 8004a62:	f383 8811 	msr	BASEPRI, r3
 8004a66:	f3bf 8f6f 	isb	sy
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	b662      	cpsie	i
 8004a70:	61fb      	str	r3, [r7, #28]
}
 8004a72:	bf00      	nop
 8004a74:	bf00      	nop
 8004a76:	e7fd      	b.n	8004a74 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a78:	f001 ff38 	bl	80068ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004a7c:	f3ef 8211 	mrs	r2, BASEPRI
 8004a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a84:	b672      	cpsid	i
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	b662      	cpsie	i
 8004a94:	61ba      	str	r2, [r7, #24]
 8004a96:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004a98:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d302      	bcc.n	8004aae <xQueueGenericSendFromISR+0xd2>
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d12c      	bne.n	8004b08 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ab4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	68b9      	ldr	r1, [r7, #8]
 8004abc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004abe:	f000 f919 	bl	8004cf4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004ac2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8004ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aca:	d112      	bne.n	8004af2 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d016      	beq.n	8004b02 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad6:	3324      	adds	r3, #36	@ 0x24
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 fefb 	bl	80058d4 <xTaskRemoveFromEventList>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00e      	beq.n	8004b02 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00b      	beq.n	8004b02 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	e007      	b.n	8004b02 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004af2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004af6:	3301      	adds	r3, #1
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	b25a      	sxtb	r2, r3
 8004afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004b02:	2301      	movs	r3, #1
 8004b04:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8004b06:	e001      	b.n	8004b0c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b0e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b16:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3738      	adds	r7, #56	@ 0x38
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
	...

08004b24 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b08c      	sub	sp, #48	@ 0x30
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b30:	2300      	movs	r3, #0
 8004b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10d      	bne.n	8004b5a <xQueueReceive+0x36>
	__asm volatile
 8004b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b42:	b672      	cpsid	i
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	b662      	cpsie	i
 8004b52:	623b      	str	r3, [r7, #32]
}
 8004b54:	bf00      	nop
 8004b56:	bf00      	nop
 8004b58:	e7fd      	b.n	8004b56 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d103      	bne.n	8004b68 <xQueueReceive+0x44>
 8004b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <xQueueReceive+0x48>
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e000      	b.n	8004b6e <xQueueReceive+0x4a>
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10d      	bne.n	8004b8e <xQueueReceive+0x6a>
	__asm volatile
 8004b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b76:	b672      	cpsid	i
 8004b78:	f383 8811 	msr	BASEPRI, r3
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	b662      	cpsie	i
 8004b86:	61fb      	str	r3, [r7, #28]
}
 8004b88:	bf00      	nop
 8004b8a:	bf00      	nop
 8004b8c:	e7fd      	b.n	8004b8a <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b8e:	f001 f869 	bl	8005c64 <xTaskGetSchedulerState>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d102      	bne.n	8004b9e <xQueueReceive+0x7a>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <xQueueReceive+0x7e>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e000      	b.n	8004ba4 <xQueueReceive+0x80>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10d      	bne.n	8004bc4 <xQueueReceive+0xa0>
	__asm volatile
 8004ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bac:	b672      	cpsid	i
 8004bae:	f383 8811 	msr	BASEPRI, r3
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	b662      	cpsie	i
 8004bbc:	61bb      	str	r3, [r7, #24]
}
 8004bbe:	bf00      	nop
 8004bc0:	bf00      	nop
 8004bc2:	e7fd      	b.n	8004bc0 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bc4:	f001 fdaa 	bl	800671c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bcc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d01f      	beq.n	8004c14 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004bd4:	68b9      	ldr	r1, [r7, #8]
 8004bd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bd8:	f000 f8f6 	bl	8004dc8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bde:	1e5a      	subs	r2, r3, #1
 8004be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00f      	beq.n	8004c0c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bee:	3310      	adds	r3, #16
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 fe6f 	bl	80058d4 <xTaskRemoveFromEventList>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d007      	beq.n	8004c0c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004bfc:	4b3c      	ldr	r3, [pc, #240]	@ (8004cf0 <xQueueReceive+0x1cc>)
 8004bfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c0c:	f001 fdbc 	bl	8006788 <vPortExitCritical>
				return pdPASS;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e069      	b.n	8004ce8 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d103      	bne.n	8004c22 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c1a:	f001 fdb5 	bl	8006788 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	e062      	b.n	8004ce8 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d106      	bne.n	8004c36 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c28:	f107 0310 	add.w	r3, r7, #16
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 feb7 	bl	80059a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c32:	2301      	movs	r3, #1
 8004c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c36:	f001 fda7 	bl	8006788 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c3a:	f000 fc1b 	bl	8005474 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c3e:	f001 fd6d 	bl	800671c <vPortEnterCritical>
 8004c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c48:	b25b      	sxtb	r3, r3
 8004c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4e:	d103      	bne.n	8004c58 <xQueueReceive+0x134>
 8004c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c5e:	b25b      	sxtb	r3, r3
 8004c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c64:	d103      	bne.n	8004c6e <xQueueReceive+0x14a>
 8004c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c6e:	f001 fd8b 	bl	8006788 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c72:	1d3a      	adds	r2, r7, #4
 8004c74:	f107 0310 	add.w	r3, r7, #16
 8004c78:	4611      	mov	r1, r2
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 fea6 	bl	80059cc <xTaskCheckForTimeOut>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d123      	bne.n	8004cce <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c88:	f000 f916 	bl	8004eb8 <prvIsQueueEmpty>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d017      	beq.n	8004cc2 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c94:	3324      	adds	r3, #36	@ 0x24
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	4611      	mov	r1, r2
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 fdc4 	bl	8005828 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ca0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ca2:	f000 f8b7 	bl	8004e14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ca6:	f000 fbf3 	bl	8005490 <xTaskResumeAll>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d189      	bne.n	8004bc4 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8004cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8004cf0 <xQueueReceive+0x1cc>)
 8004cb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	f3bf 8f6f 	isb	sy
 8004cc0:	e780      	b.n	8004bc4 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004cc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cc4:	f000 f8a6 	bl	8004e14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cc8:	f000 fbe2 	bl	8005490 <xTaskResumeAll>
 8004ccc:	e77a      	b.n	8004bc4 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004cce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cd0:	f000 f8a0 	bl	8004e14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004cd4:	f000 fbdc 	bl	8005490 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cda:	f000 f8ed 	bl	8004eb8 <prvIsQueueEmpty>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f43f af6f 	beq.w	8004bc4 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ce6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3730      	adds	r7, #48	@ 0x30
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	e000ed04 	.word	0xe000ed04

08004cf4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d00:	2300      	movs	r3, #0
 8004d02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10d      	bne.n	8004d2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d14d      	bne.n	8004db6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 ffbe 	bl	8005ca0 <xTaskPriorityDisinherit>
 8004d24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	609a      	str	r2, [r3, #8]
 8004d2c:	e043      	b.n	8004db6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d119      	bne.n	8004d68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6858      	ldr	r0, [r3, #4]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	68b9      	ldr	r1, [r7, #8]
 8004d40:	f002 f830 	bl	8006da4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4c:	441a      	add	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d32b      	bcc.n	8004db6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	605a      	str	r2, [r3, #4]
 8004d66:	e026      	b.n	8004db6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	68d8      	ldr	r0, [r3, #12]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d70:	461a      	mov	r2, r3
 8004d72:	68b9      	ldr	r1, [r7, #8]
 8004d74:	f002 f816 	bl	8006da4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	68da      	ldr	r2, [r3, #12]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d80:	425b      	negs	r3, r3
 8004d82:	441a      	add	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d207      	bcs.n	8004da4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	689a      	ldr	r2, [r3, #8]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9c:	425b      	negs	r3, r3
 8004d9e:	441a      	add	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d105      	bne.n	8004db6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d002      	beq.n	8004db6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	3b01      	subs	r3, #1
 8004db4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004dbe:	697b      	ldr	r3, [r7, #20]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3718      	adds	r7, #24
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d018      	beq.n	8004e0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de2:	441a      	add	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68da      	ldr	r2, [r3, #12]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d303      	bcc.n	8004dfc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68d9      	ldr	r1, [r3, #12]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e04:	461a      	mov	r2, r3
 8004e06:	6838      	ldr	r0, [r7, #0]
 8004e08:	f001 ffcc 	bl	8006da4 <memcpy>
	}
}
 8004e0c:	bf00      	nop
 8004e0e:	3708      	adds	r7, #8
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e1c:	f001 fc7e 	bl	800671c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e28:	e011      	b.n	8004e4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d012      	beq.n	8004e58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	3324      	adds	r3, #36	@ 0x24
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 fd4c 	bl	80058d4 <xTaskRemoveFromEventList>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004e42:	f000 fe2b 	bl	8005a9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004e46:	7bfb      	ldrb	r3, [r7, #15]
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	dce9      	bgt.n	8004e2a <prvUnlockQueue+0x16>
 8004e56:	e000      	b.n	8004e5a <prvUnlockQueue+0x46>
					break;
 8004e58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	22ff      	movs	r2, #255	@ 0xff
 8004e5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004e62:	f001 fc91 	bl	8006788 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004e66:	f001 fc59 	bl	800671c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e72:	e011      	b.n	8004e98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d012      	beq.n	8004ea2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	3310      	adds	r3, #16
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 fd27 	bl	80058d4 <xTaskRemoveFromEventList>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004e8c:	f000 fe06 	bl	8005a9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004e90:	7bbb      	ldrb	r3, [r7, #14]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	dce9      	bgt.n	8004e74 <prvUnlockQueue+0x60>
 8004ea0:	e000      	b.n	8004ea4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004ea2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	22ff      	movs	r2, #255	@ 0xff
 8004ea8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004eac:	f001 fc6c 	bl	8006788 <vPortExitCritical>
}
 8004eb0:	bf00      	nop
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ec0:	f001 fc2c 	bl	800671c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d102      	bne.n	8004ed2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	e001      	b.n	8004ed6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ed6:	f001 fc57 	bl	8006788 <vPortExitCritical>

	return xReturn;
 8004eda:	68fb      	ldr	r3, [r7, #12]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004eec:	f001 fc16 	bl	800671c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d102      	bne.n	8004f02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004efc:	2301      	movs	r3, #1
 8004efe:	60fb      	str	r3, [r7, #12]
 8004f00:	e001      	b.n	8004f06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f02:	2300      	movs	r3, #0
 8004f04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f06:	f001 fc3f 	bl	8006788 <vPortExitCritical>

	return xReturn;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f1e:	2300      	movs	r3, #0
 8004f20:	60fb      	str	r3, [r7, #12]
 8004f22:	e014      	b.n	8004f4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004f24:	4a0f      	ldr	r2, [pc, #60]	@ (8004f64 <vQueueAddToRegistry+0x50>)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10b      	bne.n	8004f48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004f30:	490c      	ldr	r1, [pc, #48]	@ (8004f64 <vQueueAddToRegistry+0x50>)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8004f64 <vQueueAddToRegistry+0x50>)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	00db      	lsls	r3, r3, #3
 8004f40:	4413      	add	r3, r2
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004f46:	e006      	b.n	8004f56 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	60fb      	str	r3, [r7, #12]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2b07      	cmp	r3, #7
 8004f52:	d9e7      	bls.n	8004f24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004f54:	bf00      	nop
 8004f56:	bf00      	nop
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	20000cfc 	.word	0x20000cfc

08004f68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004f78:	f001 fbd0 	bl	800671c <vPortEnterCritical>
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f82:	b25b      	sxtb	r3, r3
 8004f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f88:	d103      	bne.n	8004f92 <vQueueWaitForMessageRestricted+0x2a>
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f98:	b25b      	sxtb	r3, r3
 8004f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9e:	d103      	bne.n	8004fa8 <vQueueWaitForMessageRestricted+0x40>
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fa8:	f001 fbee 	bl	8006788 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d106      	bne.n	8004fc2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	3324      	adds	r3, #36	@ 0x24
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	68b9      	ldr	r1, [r7, #8]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 fc5b 	bl	8005878 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004fc2:	6978      	ldr	r0, [r7, #20]
 8004fc4:	f7ff ff26 	bl	8004e14 <prvUnlockQueue>
	}
 8004fc8:	bf00      	nop
 8004fca:	3718      	adds	r7, #24
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b08e      	sub	sp, #56	@ 0x38
 8004fd4:	af04      	add	r7, sp, #16
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
 8004fdc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10d      	bne.n	8005000 <xTaskCreateStatic+0x30>
	__asm volatile
 8004fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe8:	b672      	cpsid	i
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	b662      	cpsie	i
 8004ff8:	623b      	str	r3, [r7, #32]
}
 8004ffa:	bf00      	nop
 8004ffc:	bf00      	nop
 8004ffe:	e7fd      	b.n	8004ffc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10d      	bne.n	8005022 <xTaskCreateStatic+0x52>
	__asm volatile
 8005006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800500a:	b672      	cpsid	i
 800500c:	f383 8811 	msr	BASEPRI, r3
 8005010:	f3bf 8f6f 	isb	sy
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	b662      	cpsie	i
 800501a:	61fb      	str	r3, [r7, #28]
}
 800501c:	bf00      	nop
 800501e:	bf00      	nop
 8005020:	e7fd      	b.n	800501e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005022:	235c      	movs	r3, #92	@ 0x5c
 8005024:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	2b5c      	cmp	r3, #92	@ 0x5c
 800502a:	d00d      	beq.n	8005048 <xTaskCreateStatic+0x78>
	__asm volatile
 800502c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005030:	b672      	cpsid	i
 8005032:	f383 8811 	msr	BASEPRI, r3
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	b662      	cpsie	i
 8005040:	61bb      	str	r3, [r7, #24]
}
 8005042:	bf00      	nop
 8005044:	bf00      	nop
 8005046:	e7fd      	b.n	8005044 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005048:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800504a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800504c:	2b00      	cmp	r3, #0
 800504e:	d01e      	beq.n	800508e <xTaskCreateStatic+0xbe>
 8005050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005052:	2b00      	cmp	r3, #0
 8005054:	d01b      	beq.n	800508e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005058:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800505a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800505e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005062:	2202      	movs	r2, #2
 8005064:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005068:	2300      	movs	r3, #0
 800506a:	9303      	str	r3, [sp, #12]
 800506c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506e:	9302      	str	r3, [sp, #8]
 8005070:	f107 0314 	add.w	r3, r7, #20
 8005074:	9301      	str	r3, [sp, #4]
 8005076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	68b9      	ldr	r1, [r7, #8]
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 f850 	bl	8005126 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005086:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005088:	f000 f8e0 	bl	800524c <prvAddNewTaskToReadyList>
 800508c:	e001      	b.n	8005092 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800508e:	2300      	movs	r3, #0
 8005090:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005092:	697b      	ldr	r3, [r7, #20]
	}
 8005094:	4618      	mov	r0, r3
 8005096:	3728      	adds	r7, #40	@ 0x28
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800509c:	b580      	push	{r7, lr}
 800509e:	b08c      	sub	sp, #48	@ 0x30
 80050a0:	af04      	add	r7, sp, #16
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	603b      	str	r3, [r7, #0]
 80050a8:	4613      	mov	r3, r2
 80050aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80050ac:	88fb      	ldrh	r3, [r7, #6]
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4618      	mov	r0, r3
 80050b2:	f001 fc61 	bl	8006978 <pvPortMalloc>
 80050b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00e      	beq.n	80050dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80050be:	205c      	movs	r0, #92	@ 0x5c
 80050c0:	f001 fc5a 	bl	8006978 <pvPortMalloc>
 80050c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80050d2:	e005      	b.n	80050e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80050d4:	6978      	ldr	r0, [r7, #20]
 80050d6:	f001 fd1d 	bl	8006b14 <vPortFree>
 80050da:	e001      	b.n	80050e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80050dc:	2300      	movs	r3, #0
 80050de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d017      	beq.n	8005116 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80050ee:	88fa      	ldrh	r2, [r7, #6]
 80050f0:	2300      	movs	r3, #0
 80050f2:	9303      	str	r3, [sp, #12]
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	9302      	str	r3, [sp, #8]
 80050f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050fa:	9301      	str	r3, [sp, #4]
 80050fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	68b9      	ldr	r1, [r7, #8]
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f000 f80e 	bl	8005126 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800510a:	69f8      	ldr	r0, [r7, #28]
 800510c:	f000 f89e 	bl	800524c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005110:	2301      	movs	r3, #1
 8005112:	61bb      	str	r3, [r7, #24]
 8005114:	e002      	b.n	800511c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005116:	f04f 33ff 	mov.w	r3, #4294967295
 800511a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800511c:	69bb      	ldr	r3, [r7, #24]
	}
 800511e:	4618      	mov	r0, r3
 8005120:	3720      	adds	r7, #32
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b088      	sub	sp, #32
 800512a:	af00      	add	r7, sp, #0
 800512c:	60f8      	str	r0, [r7, #12]
 800512e:	60b9      	str	r1, [r7, #8]
 8005130:	607a      	str	r2, [r7, #4]
 8005132:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005136:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	461a      	mov	r2, r3
 800513e:	21a5      	movs	r1, #165	@ 0xa5
 8005140:	f001 fe04 	bl	8006d4c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005146:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005148:	6879      	ldr	r1, [r7, #4]
 800514a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800514e:	440b      	add	r3, r1
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4413      	add	r3, r2
 8005154:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	f023 0307 	bic.w	r3, r3, #7
 800515c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	f003 0307 	and.w	r3, r3, #7
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00d      	beq.n	8005184 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8005168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800516c:	b672      	cpsid	i
 800516e:	f383 8811 	msr	BASEPRI, r3
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	f3bf 8f4f 	dsb	sy
 800517a:	b662      	cpsie	i
 800517c:	617b      	str	r3, [r7, #20]
}
 800517e:	bf00      	nop
 8005180:	bf00      	nop
 8005182:	e7fd      	b.n	8005180 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d01f      	beq.n	80051ca <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800518a:	2300      	movs	r3, #0
 800518c:	61fb      	str	r3, [r7, #28]
 800518e:	e012      	b.n	80051b6 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	4413      	add	r3, r2
 8005196:	7819      	ldrb	r1, [r3, #0]
 8005198:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	4413      	add	r3, r2
 800519e:	3334      	adds	r3, #52	@ 0x34
 80051a0:	460a      	mov	r2, r1
 80051a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	4413      	add	r3, r2
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d006      	beq.n	80051be <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	3301      	adds	r3, #1
 80051b4:	61fb      	str	r3, [r7, #28]
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	2b0f      	cmp	r3, #15
 80051ba:	d9e9      	bls.n	8005190 <prvInitialiseNewTask+0x6a>
 80051bc:	e000      	b.n	80051c0 <prvInitialiseNewTask+0x9a>
			{
				break;
 80051be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80051c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051c8:	e003      	b.n	80051d2 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80051ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d4:	2b37      	cmp	r3, #55	@ 0x37
 80051d6:	d901      	bls.n	80051dc <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80051d8:	2337      	movs	r3, #55	@ 0x37
 80051da:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80051dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051e0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80051e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051e6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80051e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ea:	2200      	movs	r2, #0
 80051ec:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80051ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f0:	3304      	adds	r3, #4
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7ff f93e 	bl	8004474 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80051f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051fa:	3318      	adds	r3, #24
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7ff f939 	bl	8004474 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005204:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005206:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800520a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800520e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005210:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005214:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005216:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800521a:	2200      	movs	r2, #0
 800521c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800521e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	68f9      	ldr	r1, [r7, #12]
 800522a:	69b8      	ldr	r0, [r7, #24]
 800522c:	f001 f968 	bl	8006500 <pxPortInitialiseStack>
 8005230:	4602      	mov	r2, r0
 8005232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005234:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005238:	2b00      	cmp	r3, #0
 800523a:	d002      	beq.n	8005242 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800523c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800523e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005240:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005242:	bf00      	nop
 8005244:	3720      	adds	r7, #32
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
	...

0800524c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005254:	f001 fa62 	bl	800671c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005258:	4b2d      	ldr	r3, [pc, #180]	@ (8005310 <prvAddNewTaskToReadyList+0xc4>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	3301      	adds	r3, #1
 800525e:	4a2c      	ldr	r2, [pc, #176]	@ (8005310 <prvAddNewTaskToReadyList+0xc4>)
 8005260:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005262:	4b2c      	ldr	r3, [pc, #176]	@ (8005314 <prvAddNewTaskToReadyList+0xc8>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d109      	bne.n	800527e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800526a:	4a2a      	ldr	r2, [pc, #168]	@ (8005314 <prvAddNewTaskToReadyList+0xc8>)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005270:	4b27      	ldr	r3, [pc, #156]	@ (8005310 <prvAddNewTaskToReadyList+0xc4>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d110      	bne.n	800529a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005278:	f000 fc34 	bl	8005ae4 <prvInitialiseTaskLists>
 800527c:	e00d      	b.n	800529a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800527e:	4b26      	ldr	r3, [pc, #152]	@ (8005318 <prvAddNewTaskToReadyList+0xcc>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d109      	bne.n	800529a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005286:	4b23      	ldr	r3, [pc, #140]	@ (8005314 <prvAddNewTaskToReadyList+0xc8>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005290:	429a      	cmp	r2, r3
 8005292:	d802      	bhi.n	800529a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005294:	4a1f      	ldr	r2, [pc, #124]	@ (8005314 <prvAddNewTaskToReadyList+0xc8>)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800529a:	4b20      	ldr	r3, [pc, #128]	@ (800531c <prvAddNewTaskToReadyList+0xd0>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	3301      	adds	r3, #1
 80052a0:	4a1e      	ldr	r2, [pc, #120]	@ (800531c <prvAddNewTaskToReadyList+0xd0>)
 80052a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80052a4:	4b1d      	ldr	r3, [pc, #116]	@ (800531c <prvAddNewTaskToReadyList+0xd0>)
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005320 <prvAddNewTaskToReadyList+0xd4>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d903      	bls.n	80052c0 <prvAddNewTaskToReadyList+0x74>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052bc:	4a18      	ldr	r2, [pc, #96]	@ (8005320 <prvAddNewTaskToReadyList+0xd4>)
 80052be:	6013      	str	r3, [r2, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052c4:	4613      	mov	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4a15      	ldr	r2, [pc, #84]	@ (8005324 <prvAddNewTaskToReadyList+0xd8>)
 80052ce:	441a      	add	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	3304      	adds	r3, #4
 80052d4:	4619      	mov	r1, r3
 80052d6:	4610      	mov	r0, r2
 80052d8:	f7ff f8d9 	bl	800448e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80052dc:	f001 fa54 	bl	8006788 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80052e0:	4b0d      	ldr	r3, [pc, #52]	@ (8005318 <prvAddNewTaskToReadyList+0xcc>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00e      	beq.n	8005306 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80052e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005314 <prvAddNewTaskToReadyList+0xc8>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d207      	bcs.n	8005306 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80052f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005328 <prvAddNewTaskToReadyList+0xdc>)
 80052f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052fc:	601a      	str	r2, [r3, #0]
 80052fe:	f3bf 8f4f 	dsb	sy
 8005302:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005306:	bf00      	nop
 8005308:	3708      	adds	r7, #8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	20001210 	.word	0x20001210
 8005314:	20000d3c 	.word	0x20000d3c
 8005318:	2000121c 	.word	0x2000121c
 800531c:	2000122c 	.word	0x2000122c
 8005320:	20001218 	.word	0x20001218
 8005324:	20000d40 	.word	0x20000d40
 8005328:	e000ed04 	.word	0xe000ed04

0800532c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005334:	2300      	movs	r3, #0
 8005336:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d01a      	beq.n	8005374 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800533e:	4b15      	ldr	r3, [pc, #84]	@ (8005394 <vTaskDelay+0x68>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00d      	beq.n	8005362 <vTaskDelay+0x36>
	__asm volatile
 8005346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800534a:	b672      	cpsid	i
 800534c:	f383 8811 	msr	BASEPRI, r3
 8005350:	f3bf 8f6f 	isb	sy
 8005354:	f3bf 8f4f 	dsb	sy
 8005358:	b662      	cpsie	i
 800535a:	60bb      	str	r3, [r7, #8]
}
 800535c:	bf00      	nop
 800535e:	bf00      	nop
 8005360:	e7fd      	b.n	800535e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005362:	f000 f887 	bl	8005474 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005366:	2100      	movs	r1, #0
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 fd0d 	bl	8005d88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800536e:	f000 f88f 	bl	8005490 <xTaskResumeAll>
 8005372:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d107      	bne.n	800538a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800537a:	4b07      	ldr	r3, [pc, #28]	@ (8005398 <vTaskDelay+0x6c>)
 800537c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800538a:	bf00      	nop
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	20001238 	.word	0x20001238
 8005398:	e000ed04 	.word	0xe000ed04

0800539c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b08a      	sub	sp, #40	@ 0x28
 80053a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80053a2:	2300      	movs	r3, #0
 80053a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80053a6:	2300      	movs	r3, #0
 80053a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80053aa:	463a      	mov	r2, r7
 80053ac:	1d39      	adds	r1, r7, #4
 80053ae:	f107 0308 	add.w	r3, r7, #8
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7ff f80a 	bl	80043cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80053b8:	6839      	ldr	r1, [r7, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	9202      	str	r2, [sp, #8]
 80053c0:	9301      	str	r3, [sp, #4]
 80053c2:	2300      	movs	r3, #0
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	2300      	movs	r3, #0
 80053c8:	460a      	mov	r2, r1
 80053ca:	4924      	ldr	r1, [pc, #144]	@ (800545c <vTaskStartScheduler+0xc0>)
 80053cc:	4824      	ldr	r0, [pc, #144]	@ (8005460 <vTaskStartScheduler+0xc4>)
 80053ce:	f7ff fdff 	bl	8004fd0 <xTaskCreateStatic>
 80053d2:	4603      	mov	r3, r0
 80053d4:	4a23      	ldr	r2, [pc, #140]	@ (8005464 <vTaskStartScheduler+0xc8>)
 80053d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80053d8:	4b22      	ldr	r3, [pc, #136]	@ (8005464 <vTaskStartScheduler+0xc8>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d002      	beq.n	80053e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80053e0:	2301      	movs	r3, #1
 80053e2:	617b      	str	r3, [r7, #20]
 80053e4:	e001      	b.n	80053ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80053e6:	2300      	movs	r3, #0
 80053e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d102      	bne.n	80053f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80053f0:	f000 fd1e 	bl	8005e30 <xTimerCreateTimerTask>
 80053f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d118      	bne.n	800542e <vTaskStartScheduler+0x92>
	__asm volatile
 80053fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005400:	b672      	cpsid	i
 8005402:	f383 8811 	msr	BASEPRI, r3
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	b662      	cpsie	i
 8005410:	613b      	str	r3, [r7, #16]
}
 8005412:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005414:	4b14      	ldr	r3, [pc, #80]	@ (8005468 <vTaskStartScheduler+0xcc>)
 8005416:	f04f 32ff 	mov.w	r2, #4294967295
 800541a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800541c:	4b13      	ldr	r3, [pc, #76]	@ (800546c <vTaskStartScheduler+0xd0>)
 800541e:	2201      	movs	r2, #1
 8005420:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005422:	4b13      	ldr	r3, [pc, #76]	@ (8005470 <vTaskStartScheduler+0xd4>)
 8005424:	2200      	movs	r2, #0
 8005426:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005428:	f001 f8fa 	bl	8006620 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800542c:	e011      	b.n	8005452 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005434:	d10d      	bne.n	8005452 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800543a:	b672      	cpsid	i
 800543c:	f383 8811 	msr	BASEPRI, r3
 8005440:	f3bf 8f6f 	isb	sy
 8005444:	f3bf 8f4f 	dsb	sy
 8005448:	b662      	cpsie	i
 800544a:	60fb      	str	r3, [r7, #12]
}
 800544c:	bf00      	nop
 800544e:	bf00      	nop
 8005450:	e7fd      	b.n	800544e <vTaskStartScheduler+0xb2>
}
 8005452:	bf00      	nop
 8005454:	3718      	adds	r7, #24
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	08006df8 	.word	0x08006df8
 8005460:	08005ab5 	.word	0x08005ab5
 8005464:	20001234 	.word	0x20001234
 8005468:	20001230 	.word	0x20001230
 800546c:	2000121c 	.word	0x2000121c
 8005470:	20001214 	.word	0x20001214

08005474 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005474:	b480      	push	{r7}
 8005476:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005478:	4b04      	ldr	r3, [pc, #16]	@ (800548c <vTaskSuspendAll+0x18>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	3301      	adds	r3, #1
 800547e:	4a03      	ldr	r2, [pc, #12]	@ (800548c <vTaskSuspendAll+0x18>)
 8005480:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005482:	bf00      	nop
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	20001238 	.word	0x20001238

08005490 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005496:	2300      	movs	r3, #0
 8005498:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800549a:	2300      	movs	r3, #0
 800549c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800549e:	4b43      	ldr	r3, [pc, #268]	@ (80055ac <xTaskResumeAll+0x11c>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10d      	bne.n	80054c2 <xTaskResumeAll+0x32>
	__asm volatile
 80054a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054aa:	b672      	cpsid	i
 80054ac:	f383 8811 	msr	BASEPRI, r3
 80054b0:	f3bf 8f6f 	isb	sy
 80054b4:	f3bf 8f4f 	dsb	sy
 80054b8:	b662      	cpsie	i
 80054ba:	603b      	str	r3, [r7, #0]
}
 80054bc:	bf00      	nop
 80054be:	bf00      	nop
 80054c0:	e7fd      	b.n	80054be <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80054c2:	f001 f92b 	bl	800671c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80054c6:	4b39      	ldr	r3, [pc, #228]	@ (80055ac <xTaskResumeAll+0x11c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	3b01      	subs	r3, #1
 80054cc:	4a37      	ldr	r2, [pc, #220]	@ (80055ac <xTaskResumeAll+0x11c>)
 80054ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054d0:	4b36      	ldr	r3, [pc, #216]	@ (80055ac <xTaskResumeAll+0x11c>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d162      	bne.n	800559e <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054d8:	4b35      	ldr	r3, [pc, #212]	@ (80055b0 <xTaskResumeAll+0x120>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d05e      	beq.n	800559e <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054e0:	e02f      	b.n	8005542 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054e2:	4b34      	ldr	r3, [pc, #208]	@ (80055b4 <xTaskResumeAll+0x124>)
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	3318      	adds	r3, #24
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7ff f82a 	bl	8004548 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	3304      	adds	r3, #4
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7ff f825 	bl	8004548 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005502:	4b2d      	ldr	r3, [pc, #180]	@ (80055b8 <xTaskResumeAll+0x128>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	429a      	cmp	r2, r3
 8005508:	d903      	bls.n	8005512 <xTaskResumeAll+0x82>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800550e:	4a2a      	ldr	r2, [pc, #168]	@ (80055b8 <xTaskResumeAll+0x128>)
 8005510:	6013      	str	r3, [r2, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005516:	4613      	mov	r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4a27      	ldr	r2, [pc, #156]	@ (80055bc <xTaskResumeAll+0x12c>)
 8005520:	441a      	add	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	3304      	adds	r3, #4
 8005526:	4619      	mov	r1, r3
 8005528:	4610      	mov	r0, r2
 800552a:	f7fe ffb0 	bl	800448e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005532:	4b23      	ldr	r3, [pc, #140]	@ (80055c0 <xTaskResumeAll+0x130>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005538:	429a      	cmp	r2, r3
 800553a:	d302      	bcc.n	8005542 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800553c:	4b21      	ldr	r3, [pc, #132]	@ (80055c4 <xTaskResumeAll+0x134>)
 800553e:	2201      	movs	r2, #1
 8005540:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005542:	4b1c      	ldr	r3, [pc, #112]	@ (80055b4 <xTaskResumeAll+0x124>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1cb      	bne.n	80054e2 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d001      	beq.n	8005554 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005550:	f000 fb68 	bl	8005c24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005554:	4b1c      	ldr	r3, [pc, #112]	@ (80055c8 <xTaskResumeAll+0x138>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d010      	beq.n	8005582 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005560:	f000 f846 	bl	80055f0 <xTaskIncrementTick>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d002      	beq.n	8005570 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800556a:	4b16      	ldr	r3, [pc, #88]	@ (80055c4 <xTaskResumeAll+0x134>)
 800556c:	2201      	movs	r2, #1
 800556e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	3b01      	subs	r3, #1
 8005574:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1f1      	bne.n	8005560 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800557c:	4b12      	ldr	r3, [pc, #72]	@ (80055c8 <xTaskResumeAll+0x138>)
 800557e:	2200      	movs	r2, #0
 8005580:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005582:	4b10      	ldr	r3, [pc, #64]	@ (80055c4 <xTaskResumeAll+0x134>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d009      	beq.n	800559e <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800558a:	2301      	movs	r3, #1
 800558c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800558e:	4b0f      	ldr	r3, [pc, #60]	@ (80055cc <xTaskResumeAll+0x13c>)
 8005590:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005594:	601a      	str	r2, [r3, #0]
 8005596:	f3bf 8f4f 	dsb	sy
 800559a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800559e:	f001 f8f3 	bl	8006788 <vPortExitCritical>

	return xAlreadyYielded;
 80055a2:	68bb      	ldr	r3, [r7, #8]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	20001238 	.word	0x20001238
 80055b0:	20001210 	.word	0x20001210
 80055b4:	200011d0 	.word	0x200011d0
 80055b8:	20001218 	.word	0x20001218
 80055bc:	20000d40 	.word	0x20000d40
 80055c0:	20000d3c 	.word	0x20000d3c
 80055c4:	20001224 	.word	0x20001224
 80055c8:	20001220 	.word	0x20001220
 80055cc:	e000ed04 	.word	0xe000ed04

080055d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80055d6:	4b05      	ldr	r3, [pc, #20]	@ (80055ec <xTaskGetTickCount+0x1c>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80055dc:	687b      	ldr	r3, [r7, #4]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	20001214 	.word	0x20001214

080055f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80055f6:	2300      	movs	r3, #0
 80055f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055fa:	4b50      	ldr	r3, [pc, #320]	@ (800573c <xTaskIncrementTick+0x14c>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f040 808c 	bne.w	800571c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005604:	4b4e      	ldr	r3, [pc, #312]	@ (8005740 <xTaskIncrementTick+0x150>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	3301      	adds	r3, #1
 800560a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800560c:	4a4c      	ldr	r2, [pc, #304]	@ (8005740 <xTaskIncrementTick+0x150>)
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d123      	bne.n	8005660 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8005618:	4b4a      	ldr	r3, [pc, #296]	@ (8005744 <xTaskIncrementTick+0x154>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00d      	beq.n	800563e <xTaskIncrementTick+0x4e>
	__asm volatile
 8005622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005626:	b672      	cpsid	i
 8005628:	f383 8811 	msr	BASEPRI, r3
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	b662      	cpsie	i
 8005636:	603b      	str	r3, [r7, #0]
}
 8005638:	bf00      	nop
 800563a:	bf00      	nop
 800563c:	e7fd      	b.n	800563a <xTaskIncrementTick+0x4a>
 800563e:	4b41      	ldr	r3, [pc, #260]	@ (8005744 <xTaskIncrementTick+0x154>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	4b40      	ldr	r3, [pc, #256]	@ (8005748 <xTaskIncrementTick+0x158>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a3e      	ldr	r2, [pc, #248]	@ (8005744 <xTaskIncrementTick+0x154>)
 800564a:	6013      	str	r3, [r2, #0]
 800564c:	4a3e      	ldr	r2, [pc, #248]	@ (8005748 <xTaskIncrementTick+0x158>)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6013      	str	r3, [r2, #0]
 8005652:	4b3e      	ldr	r3, [pc, #248]	@ (800574c <xTaskIncrementTick+0x15c>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	3301      	adds	r3, #1
 8005658:	4a3c      	ldr	r2, [pc, #240]	@ (800574c <xTaskIncrementTick+0x15c>)
 800565a:	6013      	str	r3, [r2, #0]
 800565c:	f000 fae2 	bl	8005c24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005660:	4b3b      	ldr	r3, [pc, #236]	@ (8005750 <xTaskIncrementTick+0x160>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	429a      	cmp	r2, r3
 8005668:	d349      	bcc.n	80056fe <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800566a:	4b36      	ldr	r3, [pc, #216]	@ (8005744 <xTaskIncrementTick+0x154>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d104      	bne.n	800567e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005674:	4b36      	ldr	r3, [pc, #216]	@ (8005750 <xTaskIncrementTick+0x160>)
 8005676:	f04f 32ff 	mov.w	r2, #4294967295
 800567a:	601a      	str	r2, [r3, #0]
					break;
 800567c:	e03f      	b.n	80056fe <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800567e:	4b31      	ldr	r3, [pc, #196]	@ (8005744 <xTaskIncrementTick+0x154>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	429a      	cmp	r2, r3
 8005694:	d203      	bcs.n	800569e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005696:	4a2e      	ldr	r2, [pc, #184]	@ (8005750 <xTaskIncrementTick+0x160>)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800569c:	e02f      	b.n	80056fe <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	3304      	adds	r3, #4
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fe ff50 	bl	8004548 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d004      	beq.n	80056ba <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	3318      	adds	r3, #24
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7fe ff47 	bl	8004548 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056be:	4b25      	ldr	r3, [pc, #148]	@ (8005754 <xTaskIncrementTick+0x164>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d903      	bls.n	80056ce <xTaskIncrementTick+0xde>
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ca:	4a22      	ldr	r2, [pc, #136]	@ (8005754 <xTaskIncrementTick+0x164>)
 80056cc:	6013      	str	r3, [r2, #0]
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056d2:	4613      	mov	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4a1f      	ldr	r2, [pc, #124]	@ (8005758 <xTaskIncrementTick+0x168>)
 80056dc:	441a      	add	r2, r3
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	3304      	adds	r3, #4
 80056e2:	4619      	mov	r1, r3
 80056e4:	4610      	mov	r0, r2
 80056e6:	f7fe fed2 	bl	800448e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056ee:	4b1b      	ldr	r3, [pc, #108]	@ (800575c <xTaskIncrementTick+0x16c>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d3b8      	bcc.n	800566a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80056f8:	2301      	movs	r3, #1
 80056fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056fc:	e7b5      	b.n	800566a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80056fe:	4b17      	ldr	r3, [pc, #92]	@ (800575c <xTaskIncrementTick+0x16c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005704:	4914      	ldr	r1, [pc, #80]	@ (8005758 <xTaskIncrementTick+0x168>)
 8005706:	4613      	mov	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4413      	add	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	440b      	add	r3, r1
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d907      	bls.n	8005726 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8005716:	2301      	movs	r3, #1
 8005718:	617b      	str	r3, [r7, #20]
 800571a:	e004      	b.n	8005726 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800571c:	4b10      	ldr	r3, [pc, #64]	@ (8005760 <xTaskIncrementTick+0x170>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	3301      	adds	r3, #1
 8005722:	4a0f      	ldr	r2, [pc, #60]	@ (8005760 <xTaskIncrementTick+0x170>)
 8005724:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005726:	4b0f      	ldr	r3, [pc, #60]	@ (8005764 <xTaskIncrementTick+0x174>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800572e:	2301      	movs	r3, #1
 8005730:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005732:	697b      	ldr	r3, [r7, #20]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3718      	adds	r7, #24
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	20001238 	.word	0x20001238
 8005740:	20001214 	.word	0x20001214
 8005744:	200011c8 	.word	0x200011c8
 8005748:	200011cc 	.word	0x200011cc
 800574c:	20001228 	.word	0x20001228
 8005750:	20001230 	.word	0x20001230
 8005754:	20001218 	.word	0x20001218
 8005758:	20000d40 	.word	0x20000d40
 800575c:	20000d3c 	.word	0x20000d3c
 8005760:	20001220 	.word	0x20001220
 8005764:	20001224 	.word	0x20001224

08005768 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800576e:	4b29      	ldr	r3, [pc, #164]	@ (8005814 <vTaskSwitchContext+0xac>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d003      	beq.n	800577e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005776:	4b28      	ldr	r3, [pc, #160]	@ (8005818 <vTaskSwitchContext+0xb0>)
 8005778:	2201      	movs	r2, #1
 800577a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800577c:	e044      	b.n	8005808 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800577e:	4b26      	ldr	r3, [pc, #152]	@ (8005818 <vTaskSwitchContext+0xb0>)
 8005780:	2200      	movs	r2, #0
 8005782:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005784:	4b25      	ldr	r3, [pc, #148]	@ (800581c <vTaskSwitchContext+0xb4>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	60fb      	str	r3, [r7, #12]
 800578a:	e013      	b.n	80057b4 <vTaskSwitchContext+0x4c>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10d      	bne.n	80057ae <vTaskSwitchContext+0x46>
	__asm volatile
 8005792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005796:	b672      	cpsid	i
 8005798:	f383 8811 	msr	BASEPRI, r3
 800579c:	f3bf 8f6f 	isb	sy
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	b662      	cpsie	i
 80057a6:	607b      	str	r3, [r7, #4]
}
 80057a8:	bf00      	nop
 80057aa:	bf00      	nop
 80057ac:	e7fd      	b.n	80057aa <vTaskSwitchContext+0x42>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	3b01      	subs	r3, #1
 80057b2:	60fb      	str	r3, [r7, #12]
 80057b4:	491a      	ldr	r1, [pc, #104]	@ (8005820 <vTaskSwitchContext+0xb8>)
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	4613      	mov	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4413      	add	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	440b      	add	r3, r1
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d0e1      	beq.n	800578c <vTaskSwitchContext+0x24>
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	4613      	mov	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4a13      	ldr	r2, [pc, #76]	@ (8005820 <vTaskSwitchContext+0xb8>)
 80057d4:	4413      	add	r3, r2
 80057d6:	60bb      	str	r3, [r7, #8]
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	605a      	str	r2, [r3, #4]
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	3308      	adds	r3, #8
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d104      	bne.n	80057f8 <vTaskSwitchContext+0x90>
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	605a      	str	r2, [r3, #4]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	4a09      	ldr	r2, [pc, #36]	@ (8005824 <vTaskSwitchContext+0xbc>)
 8005800:	6013      	str	r3, [r2, #0]
 8005802:	4a06      	ldr	r2, [pc, #24]	@ (800581c <vTaskSwitchContext+0xb4>)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6013      	str	r3, [r2, #0]
}
 8005808:	bf00      	nop
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	20001238 	.word	0x20001238
 8005818:	20001224 	.word	0x20001224
 800581c:	20001218 	.word	0x20001218
 8005820:	20000d40 	.word	0x20000d40
 8005824:	20000d3c 	.word	0x20000d3c

08005828 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10d      	bne.n	8005854 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8005838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583c:	b672      	cpsid	i
 800583e:	f383 8811 	msr	BASEPRI, r3
 8005842:	f3bf 8f6f 	isb	sy
 8005846:	f3bf 8f4f 	dsb	sy
 800584a:	b662      	cpsie	i
 800584c:	60fb      	str	r3, [r7, #12]
}
 800584e:	bf00      	nop
 8005850:	bf00      	nop
 8005852:	e7fd      	b.n	8005850 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005854:	4b07      	ldr	r3, [pc, #28]	@ (8005874 <vTaskPlaceOnEventList+0x4c>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	3318      	adds	r3, #24
 800585a:	4619      	mov	r1, r3
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7fe fe3a 	bl	80044d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005862:	2101      	movs	r1, #1
 8005864:	6838      	ldr	r0, [r7, #0]
 8005866:	f000 fa8f 	bl	8005d88 <prvAddCurrentTaskToDelayedList>
}
 800586a:	bf00      	nop
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	20000d3c 	.word	0x20000d3c

08005878 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10d      	bne.n	80058a6 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800588a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800588e:	b672      	cpsid	i
 8005890:	f383 8811 	msr	BASEPRI, r3
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	b662      	cpsie	i
 800589e:	617b      	str	r3, [r7, #20]
}
 80058a0:	bf00      	nop
 80058a2:	bf00      	nop
 80058a4:	e7fd      	b.n	80058a2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058a6:	4b0a      	ldr	r3, [pc, #40]	@ (80058d0 <vTaskPlaceOnEventListRestricted+0x58>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	3318      	adds	r3, #24
 80058ac:	4619      	mov	r1, r3
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f7fe fded 	bl	800448e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d002      	beq.n	80058c0 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 80058ba:	f04f 33ff 	mov.w	r3, #4294967295
 80058be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80058c0:	6879      	ldr	r1, [r7, #4]
 80058c2:	68b8      	ldr	r0, [r7, #8]
 80058c4:	f000 fa60 	bl	8005d88 <prvAddCurrentTaskToDelayedList>
	}
 80058c8:	bf00      	nop
 80058ca:	3718      	adds	r7, #24
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	20000d3c 	.word	0x20000d3c

080058d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10d      	bne.n	8005906 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80058ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ee:	b672      	cpsid	i
 80058f0:	f383 8811 	msr	BASEPRI, r3
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	b662      	cpsie	i
 80058fe:	60fb      	str	r3, [r7, #12]
}
 8005900:	bf00      	nop
 8005902:	bf00      	nop
 8005904:	e7fd      	b.n	8005902 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	3318      	adds	r3, #24
 800590a:	4618      	mov	r0, r3
 800590c:	f7fe fe1c 	bl	8004548 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005910:	4b1d      	ldr	r3, [pc, #116]	@ (8005988 <xTaskRemoveFromEventList+0xb4>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d11d      	bne.n	8005954 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	3304      	adds	r3, #4
 800591c:	4618      	mov	r0, r3
 800591e:	f7fe fe13 	bl	8004548 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005926:	4b19      	ldr	r3, [pc, #100]	@ (800598c <xTaskRemoveFromEventList+0xb8>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	429a      	cmp	r2, r3
 800592c:	d903      	bls.n	8005936 <xTaskRemoveFromEventList+0x62>
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005932:	4a16      	ldr	r2, [pc, #88]	@ (800598c <xTaskRemoveFromEventList+0xb8>)
 8005934:	6013      	str	r3, [r2, #0]
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800593a:	4613      	mov	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4413      	add	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	4a13      	ldr	r2, [pc, #76]	@ (8005990 <xTaskRemoveFromEventList+0xbc>)
 8005944:	441a      	add	r2, r3
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	3304      	adds	r3, #4
 800594a:	4619      	mov	r1, r3
 800594c:	4610      	mov	r0, r2
 800594e:	f7fe fd9e 	bl	800448e <vListInsertEnd>
 8005952:	e005      	b.n	8005960 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	3318      	adds	r3, #24
 8005958:	4619      	mov	r1, r3
 800595a:	480e      	ldr	r0, [pc, #56]	@ (8005994 <xTaskRemoveFromEventList+0xc0>)
 800595c:	f7fe fd97 	bl	800448e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005964:	4b0c      	ldr	r3, [pc, #48]	@ (8005998 <xTaskRemoveFromEventList+0xc4>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596a:	429a      	cmp	r2, r3
 800596c:	d905      	bls.n	800597a <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800596e:	2301      	movs	r3, #1
 8005970:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005972:	4b0a      	ldr	r3, [pc, #40]	@ (800599c <xTaskRemoveFromEventList+0xc8>)
 8005974:	2201      	movs	r2, #1
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	e001      	b.n	800597e <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800597a:	2300      	movs	r3, #0
 800597c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800597e:	697b      	ldr	r3, [r7, #20]
}
 8005980:	4618      	mov	r0, r3
 8005982:	3718      	adds	r7, #24
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	20001238 	.word	0x20001238
 800598c:	20001218 	.word	0x20001218
 8005990:	20000d40 	.word	0x20000d40
 8005994:	200011d0 	.word	0x200011d0
 8005998:	20000d3c 	.word	0x20000d3c
 800599c:	20001224 	.word	0x20001224

080059a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80059a8:	4b06      	ldr	r3, [pc, #24]	@ (80059c4 <vTaskInternalSetTimeOutState+0x24>)
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80059b0:	4b05      	ldr	r3, [pc, #20]	@ (80059c8 <vTaskInternalSetTimeOutState+0x28>)
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	605a      	str	r2, [r3, #4]
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr
 80059c4:	20001228 	.word	0x20001228
 80059c8:	20001214 	.word	0x20001214

080059cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b088      	sub	sp, #32
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10d      	bne.n	80059f8 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80059dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e0:	b672      	cpsid	i
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	b662      	cpsie	i
 80059f0:	613b      	str	r3, [r7, #16]
}
 80059f2:	bf00      	nop
 80059f4:	bf00      	nop
 80059f6:	e7fd      	b.n	80059f4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10d      	bne.n	8005a1a <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80059fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a02:	b672      	cpsid	i
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	b662      	cpsie	i
 8005a12:	60fb      	str	r3, [r7, #12]
}
 8005a14:	bf00      	nop
 8005a16:	bf00      	nop
 8005a18:	e7fd      	b.n	8005a16 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8005a1a:	f000 fe7f 	bl	800671c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8005a94 <xTaskCheckForTimeOut+0xc8>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a36:	d102      	bne.n	8005a3e <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	61fb      	str	r3, [r7, #28]
 8005a3c:	e023      	b.n	8005a86 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	4b15      	ldr	r3, [pc, #84]	@ (8005a98 <xTaskCheckForTimeOut+0xcc>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d007      	beq.n	8005a5a <xTaskCheckForTimeOut+0x8e>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	69ba      	ldr	r2, [r7, #24]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d302      	bcc.n	8005a5a <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a54:	2301      	movs	r3, #1
 8005a56:	61fb      	str	r3, [r7, #28]
 8005a58:	e015      	b.n	8005a86 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d20b      	bcs.n	8005a7c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	1ad2      	subs	r2, r2, r3
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f7ff ff95 	bl	80059a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a76:	2300      	movs	r3, #0
 8005a78:	61fb      	str	r3, [r7, #28]
 8005a7a:	e004      	b.n	8005a86 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a82:	2301      	movs	r3, #1
 8005a84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005a86:	f000 fe7f 	bl	8006788 <vPortExitCritical>

	return xReturn;
 8005a8a:	69fb      	ldr	r3, [r7, #28]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3720      	adds	r7, #32
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	20001214 	.word	0x20001214
 8005a98:	20001228 	.word	0x20001228

08005a9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005aa0:	4b03      	ldr	r3, [pc, #12]	@ (8005ab0 <vTaskMissedYield+0x14>)
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	601a      	str	r2, [r3, #0]
}
 8005aa6:	bf00      	nop
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	20001224 	.word	0x20001224

08005ab4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005abc:	f000 f852 	bl	8005b64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ac0:	4b06      	ldr	r3, [pc, #24]	@ (8005adc <prvIdleTask+0x28>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d9f9      	bls.n	8005abc <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ac8:	4b05      	ldr	r3, [pc, #20]	@ (8005ae0 <prvIdleTask+0x2c>)
 8005aca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ace:	601a      	str	r2, [r3, #0]
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ad8:	e7f0      	b.n	8005abc <prvIdleTask+0x8>
 8005ada:	bf00      	nop
 8005adc:	20000d40 	.word	0x20000d40
 8005ae0:	e000ed04 	.word	0xe000ed04

08005ae4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005aea:	2300      	movs	r3, #0
 8005aec:	607b      	str	r3, [r7, #4]
 8005aee:	e00c      	b.n	8005b0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	4613      	mov	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4413      	add	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4a12      	ldr	r2, [pc, #72]	@ (8005b44 <prvInitialiseTaskLists+0x60>)
 8005afc:	4413      	add	r3, r2
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7fe fc98 	bl	8004434 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	3301      	adds	r3, #1
 8005b08:	607b      	str	r3, [r7, #4]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2b37      	cmp	r3, #55	@ 0x37
 8005b0e:	d9ef      	bls.n	8005af0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b10:	480d      	ldr	r0, [pc, #52]	@ (8005b48 <prvInitialiseTaskLists+0x64>)
 8005b12:	f7fe fc8f 	bl	8004434 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b16:	480d      	ldr	r0, [pc, #52]	@ (8005b4c <prvInitialiseTaskLists+0x68>)
 8005b18:	f7fe fc8c 	bl	8004434 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b1c:	480c      	ldr	r0, [pc, #48]	@ (8005b50 <prvInitialiseTaskLists+0x6c>)
 8005b1e:	f7fe fc89 	bl	8004434 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b22:	480c      	ldr	r0, [pc, #48]	@ (8005b54 <prvInitialiseTaskLists+0x70>)
 8005b24:	f7fe fc86 	bl	8004434 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b28:	480b      	ldr	r0, [pc, #44]	@ (8005b58 <prvInitialiseTaskLists+0x74>)
 8005b2a:	f7fe fc83 	bl	8004434 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8005b5c <prvInitialiseTaskLists+0x78>)
 8005b30:	4a05      	ldr	r2, [pc, #20]	@ (8005b48 <prvInitialiseTaskLists+0x64>)
 8005b32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b34:	4b0a      	ldr	r3, [pc, #40]	@ (8005b60 <prvInitialiseTaskLists+0x7c>)
 8005b36:	4a05      	ldr	r2, [pc, #20]	@ (8005b4c <prvInitialiseTaskLists+0x68>)
 8005b38:	601a      	str	r2, [r3, #0]
}
 8005b3a:	bf00      	nop
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	20000d40 	.word	0x20000d40
 8005b48:	200011a0 	.word	0x200011a0
 8005b4c:	200011b4 	.word	0x200011b4
 8005b50:	200011d0 	.word	0x200011d0
 8005b54:	200011e4 	.word	0x200011e4
 8005b58:	200011fc 	.word	0x200011fc
 8005b5c:	200011c8 	.word	0x200011c8
 8005b60:	200011cc 	.word	0x200011cc

08005b64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b6a:	e019      	b.n	8005ba0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b6c:	f000 fdd6 	bl	800671c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b70:	4b10      	ldr	r3, [pc, #64]	@ (8005bb4 <prvCheckTasksWaitingTermination+0x50>)
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	3304      	adds	r3, #4
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7fe fce3 	bl	8004548 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b82:	4b0d      	ldr	r3, [pc, #52]	@ (8005bb8 <prvCheckTasksWaitingTermination+0x54>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	3b01      	subs	r3, #1
 8005b88:	4a0b      	ldr	r2, [pc, #44]	@ (8005bb8 <prvCheckTasksWaitingTermination+0x54>)
 8005b8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8005bbc <prvCheckTasksWaitingTermination+0x58>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	3b01      	subs	r3, #1
 8005b92:	4a0a      	ldr	r2, [pc, #40]	@ (8005bbc <prvCheckTasksWaitingTermination+0x58>)
 8005b94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005b96:	f000 fdf7 	bl	8006788 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f810 	bl	8005bc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ba0:	4b06      	ldr	r3, [pc, #24]	@ (8005bbc <prvCheckTasksWaitingTermination+0x58>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1e1      	bne.n	8005b6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ba8:	bf00      	nop
 8005baa:	bf00      	nop
 8005bac:	3708      	adds	r7, #8
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	200011e4 	.word	0x200011e4
 8005bb8:	20001210 	.word	0x20001210
 8005bbc:	200011f8 	.word	0x200011f8

08005bc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d108      	bne.n	8005be4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 ff9c 	bl	8006b14 <vPortFree>
				vPortFree( pxTCB );
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 ff99 	bl	8006b14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005be2:	e01b      	b.n	8005c1c <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d103      	bne.n	8005bf6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 ff90 	bl	8006b14 <vPortFree>
	}
 8005bf4:	e012      	b.n	8005c1c <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d00d      	beq.n	8005c1c <prvDeleteTCB+0x5c>
	__asm volatile
 8005c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c04:	b672      	cpsid	i
 8005c06:	f383 8811 	msr	BASEPRI, r3
 8005c0a:	f3bf 8f6f 	isb	sy
 8005c0e:	f3bf 8f4f 	dsb	sy
 8005c12:	b662      	cpsie	i
 8005c14:	60fb      	str	r3, [r7, #12]
}
 8005c16:	bf00      	nop
 8005c18:	bf00      	nop
 8005c1a:	e7fd      	b.n	8005c18 <prvDeleteTCB+0x58>
	}
 8005c1c:	bf00      	nop
 8005c1e:	3710      	adds	r7, #16
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8005c5c <prvResetNextTaskUnblockTime+0x38>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d104      	bne.n	8005c3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c34:	4b0a      	ldr	r3, [pc, #40]	@ (8005c60 <prvResetNextTaskUnblockTime+0x3c>)
 8005c36:	f04f 32ff 	mov.w	r2, #4294967295
 8005c3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c3c:	e008      	b.n	8005c50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c3e:	4b07      	ldr	r3, [pc, #28]	@ (8005c5c <prvResetNextTaskUnblockTime+0x38>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	4a04      	ldr	r2, [pc, #16]	@ (8005c60 <prvResetNextTaskUnblockTime+0x3c>)
 8005c4e:	6013      	str	r3, [r2, #0]
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	200011c8 	.word	0x200011c8
 8005c60:	20001230 	.word	0x20001230

08005c64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8005c98 <xTaskGetSchedulerState+0x34>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d102      	bne.n	8005c78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c72:	2301      	movs	r3, #1
 8005c74:	607b      	str	r3, [r7, #4]
 8005c76:	e008      	b.n	8005c8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c78:	4b08      	ldr	r3, [pc, #32]	@ (8005c9c <xTaskGetSchedulerState+0x38>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d102      	bne.n	8005c86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c80:	2302      	movs	r3, #2
 8005c82:	607b      	str	r3, [r7, #4]
 8005c84:	e001      	b.n	8005c8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c86:	2300      	movs	r3, #0
 8005c88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005c8a:	687b      	ldr	r3, [r7, #4]
	}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	2000121c 	.word	0x2000121c
 8005c9c:	20001238 	.word	0x20001238

08005ca0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005cac:	2300      	movs	r3, #0
 8005cae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d05c      	beq.n	8005d70 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005cb6:	4b31      	ldr	r3, [pc, #196]	@ (8005d7c <xTaskPriorityDisinherit+0xdc>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d00d      	beq.n	8005cdc <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8005cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc4:	b672      	cpsid	i
 8005cc6:	f383 8811 	msr	BASEPRI, r3
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	b662      	cpsie	i
 8005cd4:	60fb      	str	r3, [r7, #12]
}
 8005cd6:	bf00      	nop
 8005cd8:	bf00      	nop
 8005cda:	e7fd      	b.n	8005cd8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10d      	bne.n	8005d00 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8005ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce8:	b672      	cpsid	i
 8005cea:	f383 8811 	msr	BASEPRI, r3
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	b662      	cpsie	i
 8005cf8:	60bb      	str	r3, [r7, #8]
}
 8005cfa:	bf00      	nop
 8005cfc:	bf00      	nop
 8005cfe:	e7fd      	b.n	8005cfc <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d04:	1e5a      	subs	r2, r3, #1
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d02c      	beq.n	8005d70 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d128      	bne.n	8005d70 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	3304      	adds	r3, #4
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7fe fc10 	bl	8004548 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d34:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d40:	4b0f      	ldr	r3, [pc, #60]	@ (8005d80 <xTaskPriorityDisinherit+0xe0>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d903      	bls.n	8005d50 <xTaskPriorityDisinherit+0xb0>
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d4c:	4a0c      	ldr	r2, [pc, #48]	@ (8005d80 <xTaskPriorityDisinherit+0xe0>)
 8005d4e:	6013      	str	r3, [r2, #0]
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d54:	4613      	mov	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4a09      	ldr	r2, [pc, #36]	@ (8005d84 <xTaskPriorityDisinherit+0xe4>)
 8005d5e:	441a      	add	r2, r3
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	3304      	adds	r3, #4
 8005d64:	4619      	mov	r1, r3
 8005d66:	4610      	mov	r0, r2
 8005d68:	f7fe fb91 	bl	800448e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d70:	697b      	ldr	r3, [r7, #20]
	}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3718      	adds	r7, #24
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	20000d3c 	.word	0x20000d3c
 8005d80:	20001218 	.word	0x20001218
 8005d84:	20000d40 	.word	0x20000d40

08005d88 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d92:	4b21      	ldr	r3, [pc, #132]	@ (8005e18 <prvAddCurrentTaskToDelayedList+0x90>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d98:	4b20      	ldr	r3, [pc, #128]	@ (8005e1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3304      	adds	r3, #4
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fe fbd2 	bl	8004548 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005daa:	d10a      	bne.n	8005dc2 <prvAddCurrentTaskToDelayedList+0x3a>
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d007      	beq.n	8005dc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005db2:	4b1a      	ldr	r3, [pc, #104]	@ (8005e1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	3304      	adds	r3, #4
 8005db8:	4619      	mov	r1, r3
 8005dba:	4819      	ldr	r0, [pc, #100]	@ (8005e20 <prvAddCurrentTaskToDelayedList+0x98>)
 8005dbc:	f7fe fb67 	bl	800448e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005dc0:	e026      	b.n	8005e10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005dca:	4b14      	ldr	r3, [pc, #80]	@ (8005e1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005dd2:	68ba      	ldr	r2, [r7, #8]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d209      	bcs.n	8005dee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dda:	4b12      	ldr	r3, [pc, #72]	@ (8005e24 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	4b0f      	ldr	r3, [pc, #60]	@ (8005e1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	3304      	adds	r3, #4
 8005de4:	4619      	mov	r1, r3
 8005de6:	4610      	mov	r0, r2
 8005de8:	f7fe fb75 	bl	80044d6 <vListInsert>
}
 8005dec:	e010      	b.n	8005e10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dee:	4b0e      	ldr	r3, [pc, #56]	@ (8005e28 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	4b0a      	ldr	r3, [pc, #40]	@ (8005e1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	3304      	adds	r3, #4
 8005df8:	4619      	mov	r1, r3
 8005dfa:	4610      	mov	r0, r2
 8005dfc:	f7fe fb6b 	bl	80044d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e00:	4b0a      	ldr	r3, [pc, #40]	@ (8005e2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d202      	bcs.n	8005e10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005e0a:	4a08      	ldr	r2, [pc, #32]	@ (8005e2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	6013      	str	r3, [r2, #0]
}
 8005e10:	bf00      	nop
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	20001214 	.word	0x20001214
 8005e1c:	20000d3c 	.word	0x20000d3c
 8005e20:	200011fc 	.word	0x200011fc
 8005e24:	200011cc 	.word	0x200011cc
 8005e28:	200011c8 	.word	0x200011c8
 8005e2c:	20001230 	.word	0x20001230

08005e30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b08a      	sub	sp, #40	@ 0x28
 8005e34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005e36:	2300      	movs	r3, #0
 8005e38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005e3a:	f000 fb21 	bl	8006480 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8005eb8 <xTimerCreateTimerTask+0x88>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d021      	beq.n	8005e8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005e46:	2300      	movs	r3, #0
 8005e48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005e4e:	1d3a      	adds	r2, r7, #4
 8005e50:	f107 0108 	add.w	r1, r7, #8
 8005e54:	f107 030c 	add.w	r3, r7, #12
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fe fad1 	bl	8004400 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005e5e:	6879      	ldr	r1, [r7, #4]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	9202      	str	r2, [sp, #8]
 8005e66:	9301      	str	r3, [sp, #4]
 8005e68:	2302      	movs	r3, #2
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	460a      	mov	r2, r1
 8005e70:	4912      	ldr	r1, [pc, #72]	@ (8005ebc <xTimerCreateTimerTask+0x8c>)
 8005e72:	4813      	ldr	r0, [pc, #76]	@ (8005ec0 <xTimerCreateTimerTask+0x90>)
 8005e74:	f7ff f8ac 	bl	8004fd0 <xTaskCreateStatic>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	4a12      	ldr	r2, [pc, #72]	@ (8005ec4 <xTimerCreateTimerTask+0x94>)
 8005e7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005e7e:	4b11      	ldr	r3, [pc, #68]	@ (8005ec4 <xTimerCreateTimerTask+0x94>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005e86:	2301      	movs	r3, #1
 8005e88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10d      	bne.n	8005eac <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8005e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e94:	b672      	cpsid	i
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	b662      	cpsie	i
 8005ea4:	613b      	str	r3, [r7, #16]
}
 8005ea6:	bf00      	nop
 8005ea8:	bf00      	nop
 8005eaa:	e7fd      	b.n	8005ea8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8005eac:	697b      	ldr	r3, [r7, #20]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3718      	adds	r7, #24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	2000126c 	.word	0x2000126c
 8005ebc:	08006e00 	.word	0x08006e00
 8005ec0:	08006009 	.word	0x08006009
 8005ec4:	20001270 	.word	0x20001270

08005ec8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b08a      	sub	sp, #40	@ 0x28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
 8005ed4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10d      	bne.n	8005efc <xTimerGenericCommand+0x34>
	__asm volatile
 8005ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee4:	b672      	cpsid	i
 8005ee6:	f383 8811 	msr	BASEPRI, r3
 8005eea:	f3bf 8f6f 	isb	sy
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	b662      	cpsie	i
 8005ef4:	623b      	str	r3, [r7, #32]
}
 8005ef6:	bf00      	nop
 8005ef8:	bf00      	nop
 8005efa:	e7fd      	b.n	8005ef8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005efc:	4b19      	ldr	r3, [pc, #100]	@ (8005f64 <xTimerGenericCommand+0x9c>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d02a      	beq.n	8005f5a <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	2b05      	cmp	r3, #5
 8005f14:	dc18      	bgt.n	8005f48 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005f16:	f7ff fea5 	bl	8005c64 <xTaskGetSchedulerState>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d109      	bne.n	8005f34 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005f20:	4b10      	ldr	r3, [pc, #64]	@ (8005f64 <xTimerGenericCommand+0x9c>)
 8005f22:	6818      	ldr	r0, [r3, #0]
 8005f24:	f107 0110 	add.w	r1, r7, #16
 8005f28:	2300      	movs	r3, #0
 8005f2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f2c:	f7fe fc4c 	bl	80047c8 <xQueueGenericSend>
 8005f30:	6278      	str	r0, [r7, #36]	@ 0x24
 8005f32:	e012      	b.n	8005f5a <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005f34:	4b0b      	ldr	r3, [pc, #44]	@ (8005f64 <xTimerGenericCommand+0x9c>)
 8005f36:	6818      	ldr	r0, [r3, #0]
 8005f38:	f107 0110 	add.w	r1, r7, #16
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f7fe fc42 	bl	80047c8 <xQueueGenericSend>
 8005f44:	6278      	str	r0, [r7, #36]	@ 0x24
 8005f46:	e008      	b.n	8005f5a <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005f48:	4b06      	ldr	r3, [pc, #24]	@ (8005f64 <xTimerGenericCommand+0x9c>)
 8005f4a:	6818      	ldr	r0, [r3, #0]
 8005f4c:	f107 0110 	add.w	r1, r7, #16
 8005f50:	2300      	movs	r3, #0
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	f7fe fd42 	bl	80049dc <xQueueGenericSendFromISR>
 8005f58:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3728      	adds	r7, #40	@ 0x28
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	2000126c 	.word	0x2000126c

08005f68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b088      	sub	sp, #32
 8005f6c:	af02      	add	r7, sp, #8
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f72:	4b24      	ldr	r3, [pc, #144]	@ (8006004 <prvProcessExpiredTimer+0x9c>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	3304      	adds	r3, #4
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7fe fae1 	bl	8004548 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f8c:	f003 0304 	and.w	r3, r3, #4
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d025      	beq.n	8005fe0 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	699a      	ldr	r2, [r3, #24]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	18d1      	adds	r1, r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	683a      	ldr	r2, [r7, #0]
 8005fa0:	6978      	ldr	r0, [r7, #20]
 8005fa2:	f000 f8d7 	bl	8006154 <prvInsertTimerInActiveList>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d022      	beq.n	8005ff2 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005fac:	2300      	movs	r3, #0
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	6978      	ldr	r0, [r7, #20]
 8005fb8:	f7ff ff86 	bl	8005ec8 <xTimerGenericCommand>
 8005fbc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d116      	bne.n	8005ff2 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8005fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc8:	b672      	cpsid	i
 8005fca:	f383 8811 	msr	BASEPRI, r3
 8005fce:	f3bf 8f6f 	isb	sy
 8005fd2:	f3bf 8f4f 	dsb	sy
 8005fd6:	b662      	cpsie	i
 8005fd8:	60fb      	str	r3, [r7, #12]
}
 8005fda:	bf00      	nop
 8005fdc:	bf00      	nop
 8005fde:	e7fd      	b.n	8005fdc <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005fe6:	f023 0301 	bic.w	r3, r3, #1
 8005fea:	b2da      	uxtb	r2, r3
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	6978      	ldr	r0, [r7, #20]
 8005ff8:	4798      	blx	r3
}
 8005ffa:	bf00      	nop
 8005ffc:	3718      	adds	r7, #24
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	20001264 	.word	0x20001264

08006008 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006010:	f107 0308 	add.w	r3, r7, #8
 8006014:	4618      	mov	r0, r3
 8006016:	f000 f859 	bl	80060cc <prvGetNextExpireTime>
 800601a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	4619      	mov	r1, r3
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 f805 	bl	8006030 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006026:	f000 f8d7 	bl	80061d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800602a:	bf00      	nop
 800602c:	e7f0      	b.n	8006010 <prvTimerTask+0x8>
	...

08006030 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800603a:	f7ff fa1b 	bl	8005474 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800603e:	f107 0308 	add.w	r3, r7, #8
 8006042:	4618      	mov	r0, r3
 8006044:	f000 f866 	bl	8006114 <prvSampleTimeNow>
 8006048:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d130      	bne.n	80060b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10a      	bne.n	800606c <prvProcessTimerOrBlockTask+0x3c>
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	429a      	cmp	r2, r3
 800605c:	d806      	bhi.n	800606c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800605e:	f7ff fa17 	bl	8005490 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006062:	68f9      	ldr	r1, [r7, #12]
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7ff ff7f 	bl	8005f68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800606a:	e024      	b.n	80060b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d008      	beq.n	8006084 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006072:	4b13      	ldr	r3, [pc, #76]	@ (80060c0 <prvProcessTimerOrBlockTask+0x90>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d101      	bne.n	8006080 <prvProcessTimerOrBlockTask+0x50>
 800607c:	2301      	movs	r3, #1
 800607e:	e000      	b.n	8006082 <prvProcessTimerOrBlockTask+0x52>
 8006080:	2300      	movs	r3, #0
 8006082:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006084:	4b0f      	ldr	r3, [pc, #60]	@ (80060c4 <prvProcessTimerOrBlockTask+0x94>)
 8006086:	6818      	ldr	r0, [r3, #0]
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	4619      	mov	r1, r3
 8006092:	f7fe ff69 	bl	8004f68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006096:	f7ff f9fb 	bl	8005490 <xTaskResumeAll>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d10a      	bne.n	80060b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80060a0:	4b09      	ldr	r3, [pc, #36]	@ (80060c8 <prvProcessTimerOrBlockTask+0x98>)
 80060a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060a6:	601a      	str	r2, [r3, #0]
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	f3bf 8f6f 	isb	sy
}
 80060b0:	e001      	b.n	80060b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80060b2:	f7ff f9ed 	bl	8005490 <xTaskResumeAll>
}
 80060b6:	bf00      	nop
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	20001268 	.word	0x20001268
 80060c4:	2000126c 	.word	0x2000126c
 80060c8:	e000ed04 	.word	0xe000ed04

080060cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80060d4:	4b0e      	ldr	r3, [pc, #56]	@ (8006110 <prvGetNextExpireTime+0x44>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d101      	bne.n	80060e2 <prvGetNextExpireTime+0x16>
 80060de:	2201      	movs	r2, #1
 80060e0:	e000      	b.n	80060e4 <prvGetNextExpireTime+0x18>
 80060e2:	2200      	movs	r2, #0
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d105      	bne.n	80060fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060f0:	4b07      	ldr	r3, [pc, #28]	@ (8006110 <prvGetNextExpireTime+0x44>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	60fb      	str	r3, [r7, #12]
 80060fa:	e001      	b.n	8006100 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80060fc:	2300      	movs	r3, #0
 80060fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006100:	68fb      	ldr	r3, [r7, #12]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	20001264 	.word	0x20001264

08006114 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800611c:	f7ff fa58 	bl	80055d0 <xTaskGetTickCount>
 8006120:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006122:	4b0b      	ldr	r3, [pc, #44]	@ (8006150 <prvSampleTimeNow+0x3c>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	429a      	cmp	r2, r3
 800612a:	d205      	bcs.n	8006138 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800612c:	f000 f940 	bl	80063b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	e002      	b.n	800613e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800613e:	4a04      	ldr	r2, [pc, #16]	@ (8006150 <prvSampleTimeNow+0x3c>)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006144:	68fb      	ldr	r3, [r7, #12]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	20001274 	.word	0x20001274

08006154 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
 8006160:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006162:	2300      	movs	r3, #0
 8006164:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	429a      	cmp	r2, r3
 8006178:	d812      	bhi.n	80061a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	1ad2      	subs	r2, r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	429a      	cmp	r2, r3
 8006186:	d302      	bcc.n	800618e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006188:	2301      	movs	r3, #1
 800618a:	617b      	str	r3, [r7, #20]
 800618c:	e01b      	b.n	80061c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800618e:	4b10      	ldr	r3, [pc, #64]	@ (80061d0 <prvInsertTimerInActiveList+0x7c>)
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	3304      	adds	r3, #4
 8006196:	4619      	mov	r1, r3
 8006198:	4610      	mov	r0, r2
 800619a:	f7fe f99c 	bl	80044d6 <vListInsert>
 800619e:	e012      	b.n	80061c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d206      	bcs.n	80061b6 <prvInsertTimerInActiveList+0x62>
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d302      	bcc.n	80061b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80061b0:	2301      	movs	r3, #1
 80061b2:	617b      	str	r3, [r7, #20]
 80061b4:	e007      	b.n	80061c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061b6:	4b07      	ldr	r3, [pc, #28]	@ (80061d4 <prvInsertTimerInActiveList+0x80>)
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	3304      	adds	r3, #4
 80061be:	4619      	mov	r1, r3
 80061c0:	4610      	mov	r0, r2
 80061c2:	f7fe f988 	bl	80044d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80061c6:	697b      	ldr	r3, [r7, #20]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3718      	adds	r7, #24
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	20001268 	.word	0x20001268
 80061d4:	20001264 	.word	0x20001264

080061d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b08e      	sub	sp, #56	@ 0x38
 80061dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061de:	e0d4      	b.n	800638a <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	da1b      	bge.n	800621e <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80061e6:	1d3b      	adds	r3, r7, #4
 80061e8:	3304      	adds	r3, #4
 80061ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80061ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10d      	bne.n	800620e <prvProcessReceivedCommands+0x36>
	__asm volatile
 80061f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f6:	b672      	cpsid	i
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	b662      	cpsie	i
 8006206:	61fb      	str	r3, [r7, #28]
}
 8006208:	bf00      	nop
 800620a:	bf00      	nop
 800620c:	e7fd      	b.n	800620a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800620e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006214:	6850      	ldr	r0, [r2, #4]
 8006216:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006218:	6892      	ldr	r2, [r2, #8]
 800621a:	4611      	mov	r1, r2
 800621c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2b00      	cmp	r3, #0
 8006222:	f2c0 80b2 	blt.w	800638a <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800622a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d004      	beq.n	800623c <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006234:	3304      	adds	r3, #4
 8006236:	4618      	mov	r0, r3
 8006238:	f7fe f986 	bl	8004548 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800623c:	463b      	mov	r3, r7
 800623e:	4618      	mov	r0, r3
 8006240:	f7ff ff68 	bl	8006114 <prvSampleTimeNow>
 8006244:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2b09      	cmp	r3, #9
 800624a:	f200 809b 	bhi.w	8006384 <prvProcessReceivedCommands+0x1ac>
 800624e:	a201      	add	r2, pc, #4	@ (adr r2, 8006254 <prvProcessReceivedCommands+0x7c>)
 8006250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006254:	0800627d 	.word	0x0800627d
 8006258:	0800627d 	.word	0x0800627d
 800625c:	0800627d 	.word	0x0800627d
 8006260:	080062f7 	.word	0x080062f7
 8006264:	0800630b 	.word	0x0800630b
 8006268:	0800635b 	.word	0x0800635b
 800626c:	0800627d 	.word	0x0800627d
 8006270:	0800627d 	.word	0x0800627d
 8006274:	080062f7 	.word	0x080062f7
 8006278:	0800630b 	.word	0x0800630b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800627c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800627e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006282:	f043 0301 	orr.w	r3, r3, #1
 8006286:	b2da      	uxtb	r2, r3
 8006288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800628a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	18d1      	adds	r1, r2, r3
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800629a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800629c:	f7ff ff5a 	bl	8006154 <prvInsertTimerInActiveList>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d070      	beq.n	8006388 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062b4:	f003 0304 	and.w	r3, r3, #4
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d065      	beq.n	8006388 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	441a      	add	r2, r3
 80062c4:	2300      	movs	r3, #0
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	2300      	movs	r3, #0
 80062ca:	2100      	movs	r1, #0
 80062cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062ce:	f7ff fdfb 	bl	8005ec8 <xTimerGenericCommand>
 80062d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80062d4:	6a3b      	ldr	r3, [r7, #32]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d156      	bne.n	8006388 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 80062da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062de:	b672      	cpsid	i
 80062e0:	f383 8811 	msr	BASEPRI, r3
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	b662      	cpsie	i
 80062ee:	61bb      	str	r3, [r7, #24]
}
 80062f0:	bf00      	nop
 80062f2:	bf00      	nop
 80062f4:	e7fd      	b.n	80062f2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062fc:	f023 0301 	bic.w	r3, r3, #1
 8006300:	b2da      	uxtb	r2, r3
 8006302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006304:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006308:	e03f      	b.n	800638a <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800630a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800630c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006310:	f043 0301 	orr.w	r3, r3, #1
 8006314:	b2da      	uxtb	r2, r3
 8006316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006318:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006320:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10d      	bne.n	8006346 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800632a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800632e:	b672      	cpsid	i
 8006330:	f383 8811 	msr	BASEPRI, r3
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	f3bf 8f4f 	dsb	sy
 800633c:	b662      	cpsie	i
 800633e:	617b      	str	r3, [r7, #20]
}
 8006340:	bf00      	nop
 8006342:	bf00      	nop
 8006344:	e7fd      	b.n	8006342 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006348:	699a      	ldr	r2, [r3, #24]
 800634a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634c:	18d1      	adds	r1, r2, r3
 800634e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006350:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006352:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006354:	f7ff fefe 	bl	8006154 <prvInsertTimerInActiveList>
					break;
 8006358:	e017      	b.n	800638a <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800635a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800635c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006360:	f003 0302 	and.w	r3, r3, #2
 8006364:	2b00      	cmp	r3, #0
 8006366:	d103      	bne.n	8006370 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8006368:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800636a:	f000 fbd3 	bl	8006b14 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800636e:	e00c      	b.n	800638a <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006372:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006376:	f023 0301 	bic.w	r3, r3, #1
 800637a:	b2da      	uxtb	r2, r3
 800637c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800637e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006382:	e002      	b.n	800638a <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8006384:	bf00      	nop
 8006386:	e000      	b.n	800638a <prvProcessReceivedCommands+0x1b2>
					break;
 8006388:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800638a:	4b08      	ldr	r3, [pc, #32]	@ (80063ac <prvProcessReceivedCommands+0x1d4>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	1d39      	adds	r1, r7, #4
 8006390:	2200      	movs	r2, #0
 8006392:	4618      	mov	r0, r3
 8006394:	f7fe fbc6 	bl	8004b24 <xQueueReceive>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	f47f af20 	bne.w	80061e0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80063a0:	bf00      	nop
 80063a2:	bf00      	nop
 80063a4:	3730      	adds	r7, #48	@ 0x30
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	2000126c 	.word	0x2000126c

080063b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b088      	sub	sp, #32
 80063b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063b6:	e04b      	b.n	8006450 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063b8:	4b2f      	ldr	r3, [pc, #188]	@ (8006478 <prvSwitchTimerLists+0xc8>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063c2:	4b2d      	ldr	r3, [pc, #180]	@ (8006478 <prvSwitchTimerLists+0xc8>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	3304      	adds	r3, #4
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fe f8b9 	bl	8004548 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063e4:	f003 0304 	and.w	r3, r3, #4
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d031      	beq.n	8006450 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	4413      	add	r3, r2
 80063f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d90e      	bls.n	800641c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800640a:	4b1b      	ldr	r3, [pc, #108]	@ (8006478 <prvSwitchTimerLists+0xc8>)
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3304      	adds	r3, #4
 8006412:	4619      	mov	r1, r3
 8006414:	4610      	mov	r0, r2
 8006416:	f7fe f85e 	bl	80044d6 <vListInsert>
 800641a:	e019      	b.n	8006450 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800641c:	2300      	movs	r3, #0
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	2300      	movs	r3, #0
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	2100      	movs	r1, #0
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f7ff fd4e 	bl	8005ec8 <xTimerGenericCommand>
 800642c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10d      	bne.n	8006450 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8006434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006438:	b672      	cpsid	i
 800643a:	f383 8811 	msr	BASEPRI, r3
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	f3bf 8f4f 	dsb	sy
 8006446:	b662      	cpsie	i
 8006448:	603b      	str	r3, [r7, #0]
}
 800644a:	bf00      	nop
 800644c:	bf00      	nop
 800644e:	e7fd      	b.n	800644c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006450:	4b09      	ldr	r3, [pc, #36]	@ (8006478 <prvSwitchTimerLists+0xc8>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1ae      	bne.n	80063b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800645a:	4b07      	ldr	r3, [pc, #28]	@ (8006478 <prvSwitchTimerLists+0xc8>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006460:	4b06      	ldr	r3, [pc, #24]	@ (800647c <prvSwitchTimerLists+0xcc>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a04      	ldr	r2, [pc, #16]	@ (8006478 <prvSwitchTimerLists+0xc8>)
 8006466:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006468:	4a04      	ldr	r2, [pc, #16]	@ (800647c <prvSwitchTimerLists+0xcc>)
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	6013      	str	r3, [r2, #0]
}
 800646e:	bf00      	nop
 8006470:	3718      	adds	r7, #24
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	20001264 	.word	0x20001264
 800647c:	20001268 	.word	0x20001268

08006480 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006486:	f000 f949 	bl	800671c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800648a:	4b15      	ldr	r3, [pc, #84]	@ (80064e0 <prvCheckForValidListAndQueue+0x60>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d120      	bne.n	80064d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006492:	4814      	ldr	r0, [pc, #80]	@ (80064e4 <prvCheckForValidListAndQueue+0x64>)
 8006494:	f7fd ffce 	bl	8004434 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006498:	4813      	ldr	r0, [pc, #76]	@ (80064e8 <prvCheckForValidListAndQueue+0x68>)
 800649a:	f7fd ffcb 	bl	8004434 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800649e:	4b13      	ldr	r3, [pc, #76]	@ (80064ec <prvCheckForValidListAndQueue+0x6c>)
 80064a0:	4a10      	ldr	r2, [pc, #64]	@ (80064e4 <prvCheckForValidListAndQueue+0x64>)
 80064a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80064a4:	4b12      	ldr	r3, [pc, #72]	@ (80064f0 <prvCheckForValidListAndQueue+0x70>)
 80064a6:	4a10      	ldr	r2, [pc, #64]	@ (80064e8 <prvCheckForValidListAndQueue+0x68>)
 80064a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80064aa:	2300      	movs	r3, #0
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	4b11      	ldr	r3, [pc, #68]	@ (80064f4 <prvCheckForValidListAndQueue+0x74>)
 80064b0:	4a11      	ldr	r2, [pc, #68]	@ (80064f8 <prvCheckForValidListAndQueue+0x78>)
 80064b2:	2110      	movs	r1, #16
 80064b4:	200a      	movs	r0, #10
 80064b6:	f7fe f8dd 	bl	8004674 <xQueueGenericCreateStatic>
 80064ba:	4603      	mov	r3, r0
 80064bc:	4a08      	ldr	r2, [pc, #32]	@ (80064e0 <prvCheckForValidListAndQueue+0x60>)
 80064be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80064c0:	4b07      	ldr	r3, [pc, #28]	@ (80064e0 <prvCheckForValidListAndQueue+0x60>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d005      	beq.n	80064d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80064c8:	4b05      	ldr	r3, [pc, #20]	@ (80064e0 <prvCheckForValidListAndQueue+0x60>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	490b      	ldr	r1, [pc, #44]	@ (80064fc <prvCheckForValidListAndQueue+0x7c>)
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7fe fd20 	bl	8004f14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064d4:	f000 f958 	bl	8006788 <vPortExitCritical>
}
 80064d8:	bf00      	nop
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	2000126c 	.word	0x2000126c
 80064e4:	2000123c 	.word	0x2000123c
 80064e8:	20001250 	.word	0x20001250
 80064ec:	20001264 	.word	0x20001264
 80064f0:	20001268 	.word	0x20001268
 80064f4:	20001318 	.word	0x20001318
 80064f8:	20001278 	.word	0x20001278
 80064fc:	08006e08 	.word	0x08006e08

08006500 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	3b04      	subs	r3, #4
 8006510:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006518:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	3b04      	subs	r3, #4
 800651e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	f023 0201 	bic.w	r2, r3, #1
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	3b04      	subs	r3, #4
 800652e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006530:	4a0c      	ldr	r2, [pc, #48]	@ (8006564 <pxPortInitialiseStack+0x64>)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	3b14      	subs	r3, #20
 800653a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	3b04      	subs	r3, #4
 8006546:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f06f 0202 	mvn.w	r2, #2
 800654e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	3b20      	subs	r3, #32
 8006554:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006556:	68fb      	ldr	r3, [r7, #12]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3714      	adds	r7, #20
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr
 8006564:	08006569 	.word	0x08006569

08006568 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800656e:	2300      	movs	r3, #0
 8006570:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006572:	4b15      	ldr	r3, [pc, #84]	@ (80065c8 <prvTaskExitError+0x60>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800657a:	d00d      	beq.n	8006598 <prvTaskExitError+0x30>
	__asm volatile
 800657c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006580:	b672      	cpsid	i
 8006582:	f383 8811 	msr	BASEPRI, r3
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	f3bf 8f4f 	dsb	sy
 800658e:	b662      	cpsie	i
 8006590:	60fb      	str	r3, [r7, #12]
}
 8006592:	bf00      	nop
 8006594:	bf00      	nop
 8006596:	e7fd      	b.n	8006594 <prvTaskExitError+0x2c>
	__asm volatile
 8006598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800659c:	b672      	cpsid	i
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	b662      	cpsie	i
 80065ac:	60bb      	str	r3, [r7, #8]
}
 80065ae:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80065b0:	bf00      	nop
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d0fc      	beq.n	80065b2 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80065b8:	bf00      	nop
 80065ba:	bf00      	nop
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	2000000c 	.word	0x2000000c
 80065cc:	00000000 	.word	0x00000000

080065d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80065d0:	4b07      	ldr	r3, [pc, #28]	@ (80065f0 <pxCurrentTCBConst2>)
 80065d2:	6819      	ldr	r1, [r3, #0]
 80065d4:	6808      	ldr	r0, [r1, #0]
 80065d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065da:	f380 8809 	msr	PSP, r0
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f04f 0000 	mov.w	r0, #0
 80065e6:	f380 8811 	msr	BASEPRI, r0
 80065ea:	4770      	bx	lr
 80065ec:	f3af 8000 	nop.w

080065f0 <pxCurrentTCBConst2>:
 80065f0:	20000d3c 	.word	0x20000d3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80065f4:	bf00      	nop
 80065f6:	bf00      	nop

080065f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80065f8:	4808      	ldr	r0, [pc, #32]	@ (800661c <prvPortStartFirstTask+0x24>)
 80065fa:	6800      	ldr	r0, [r0, #0]
 80065fc:	6800      	ldr	r0, [r0, #0]
 80065fe:	f380 8808 	msr	MSP, r0
 8006602:	f04f 0000 	mov.w	r0, #0
 8006606:	f380 8814 	msr	CONTROL, r0
 800660a:	b662      	cpsie	i
 800660c:	b661      	cpsie	f
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	f3bf 8f6f 	isb	sy
 8006616:	df00      	svc	0
 8006618:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800661a:	bf00      	nop
 800661c:	e000ed08 	.word	0xe000ed08

08006620 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006626:	4b37      	ldr	r3, [pc, #220]	@ (8006704 <xPortStartScheduler+0xe4>)
 8006628:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	b2db      	uxtb	r3, r3
 8006630:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	22ff      	movs	r2, #255	@ 0xff
 8006636:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	b2db      	uxtb	r3, r3
 800663e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006640:	78fb      	ldrb	r3, [r7, #3]
 8006642:	b2db      	uxtb	r3, r3
 8006644:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006648:	b2da      	uxtb	r2, r3
 800664a:	4b2f      	ldr	r3, [pc, #188]	@ (8006708 <xPortStartScheduler+0xe8>)
 800664c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800664e:	4b2f      	ldr	r3, [pc, #188]	@ (800670c <xPortStartScheduler+0xec>)
 8006650:	2207      	movs	r2, #7
 8006652:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006654:	e009      	b.n	800666a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006656:	4b2d      	ldr	r3, [pc, #180]	@ (800670c <xPortStartScheduler+0xec>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	3b01      	subs	r3, #1
 800665c:	4a2b      	ldr	r2, [pc, #172]	@ (800670c <xPortStartScheduler+0xec>)
 800665e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006660:	78fb      	ldrb	r3, [r7, #3]
 8006662:	b2db      	uxtb	r3, r3
 8006664:	005b      	lsls	r3, r3, #1
 8006666:	b2db      	uxtb	r3, r3
 8006668:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800666a:	78fb      	ldrb	r3, [r7, #3]
 800666c:	b2db      	uxtb	r3, r3
 800666e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006672:	2b80      	cmp	r3, #128	@ 0x80
 8006674:	d0ef      	beq.n	8006656 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006676:	4b25      	ldr	r3, [pc, #148]	@ (800670c <xPortStartScheduler+0xec>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f1c3 0307 	rsb	r3, r3, #7
 800667e:	2b04      	cmp	r3, #4
 8006680:	d00d      	beq.n	800669e <xPortStartScheduler+0x7e>
	__asm volatile
 8006682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006686:	b672      	cpsid	i
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	b662      	cpsie	i
 8006696:	60bb      	str	r3, [r7, #8]
}
 8006698:	bf00      	nop
 800669a:	bf00      	nop
 800669c:	e7fd      	b.n	800669a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800669e:	4b1b      	ldr	r3, [pc, #108]	@ (800670c <xPortStartScheduler+0xec>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	021b      	lsls	r3, r3, #8
 80066a4:	4a19      	ldr	r2, [pc, #100]	@ (800670c <xPortStartScheduler+0xec>)
 80066a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80066a8:	4b18      	ldr	r3, [pc, #96]	@ (800670c <xPortStartScheduler+0xec>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80066b0:	4a16      	ldr	r2, [pc, #88]	@ (800670c <xPortStartScheduler+0xec>)
 80066b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	b2da      	uxtb	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80066bc:	4b14      	ldr	r3, [pc, #80]	@ (8006710 <xPortStartScheduler+0xf0>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a13      	ldr	r2, [pc, #76]	@ (8006710 <xPortStartScheduler+0xf0>)
 80066c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80066c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80066c8:	4b11      	ldr	r3, [pc, #68]	@ (8006710 <xPortStartScheduler+0xf0>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a10      	ldr	r2, [pc, #64]	@ (8006710 <xPortStartScheduler+0xf0>)
 80066ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80066d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80066d4:	f000 f8dc 	bl	8006890 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80066d8:	4b0e      	ldr	r3, [pc, #56]	@ (8006714 <xPortStartScheduler+0xf4>)
 80066da:	2200      	movs	r2, #0
 80066dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80066de:	f000 f8fb 	bl	80068d8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80066e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006718 <xPortStartScheduler+0xf8>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a0c      	ldr	r2, [pc, #48]	@ (8006718 <xPortStartScheduler+0xf8>)
 80066e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80066ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80066ee:	f7ff ff83 	bl	80065f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80066f2:	f7ff f839 	bl	8005768 <vTaskSwitchContext>
	prvTaskExitError();
 80066f6:	f7ff ff37 	bl	8006568 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	e000e400 	.word	0xe000e400
 8006708:	20001368 	.word	0x20001368
 800670c:	2000136c 	.word	0x2000136c
 8006710:	e000ed20 	.word	0xe000ed20
 8006714:	2000000c 	.word	0x2000000c
 8006718:	e000ef34 	.word	0xe000ef34

0800671c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
	__asm volatile
 8006722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006726:	b672      	cpsid	i
 8006728:	f383 8811 	msr	BASEPRI, r3
 800672c:	f3bf 8f6f 	isb	sy
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	b662      	cpsie	i
 8006736:	607b      	str	r3, [r7, #4]
}
 8006738:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800673a:	4b11      	ldr	r3, [pc, #68]	@ (8006780 <vPortEnterCritical+0x64>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	3301      	adds	r3, #1
 8006740:	4a0f      	ldr	r2, [pc, #60]	@ (8006780 <vPortEnterCritical+0x64>)
 8006742:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006744:	4b0e      	ldr	r3, [pc, #56]	@ (8006780 <vPortEnterCritical+0x64>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d112      	bne.n	8006772 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800674c:	4b0d      	ldr	r3, [pc, #52]	@ (8006784 <vPortEnterCritical+0x68>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00d      	beq.n	8006772 <vPortEnterCritical+0x56>
	__asm volatile
 8006756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800675a:	b672      	cpsid	i
 800675c:	f383 8811 	msr	BASEPRI, r3
 8006760:	f3bf 8f6f 	isb	sy
 8006764:	f3bf 8f4f 	dsb	sy
 8006768:	b662      	cpsie	i
 800676a:	603b      	str	r3, [r7, #0]
}
 800676c:	bf00      	nop
 800676e:	bf00      	nop
 8006770:	e7fd      	b.n	800676e <vPortEnterCritical+0x52>
	}
}
 8006772:	bf00      	nop
 8006774:	370c      	adds	r7, #12
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	2000000c 	.word	0x2000000c
 8006784:	e000ed04 	.word	0xe000ed04

08006788 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800678e:	4b13      	ldr	r3, [pc, #76]	@ (80067dc <vPortExitCritical+0x54>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d10d      	bne.n	80067b2 <vPortExitCritical+0x2a>
	__asm volatile
 8006796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800679a:	b672      	cpsid	i
 800679c:	f383 8811 	msr	BASEPRI, r3
 80067a0:	f3bf 8f6f 	isb	sy
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	b662      	cpsie	i
 80067aa:	607b      	str	r3, [r7, #4]
}
 80067ac:	bf00      	nop
 80067ae:	bf00      	nop
 80067b0:	e7fd      	b.n	80067ae <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80067b2:	4b0a      	ldr	r3, [pc, #40]	@ (80067dc <vPortExitCritical+0x54>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	3b01      	subs	r3, #1
 80067b8:	4a08      	ldr	r2, [pc, #32]	@ (80067dc <vPortExitCritical+0x54>)
 80067ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80067bc:	4b07      	ldr	r3, [pc, #28]	@ (80067dc <vPortExitCritical+0x54>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d105      	bne.n	80067d0 <vPortExitCritical+0x48>
 80067c4:	2300      	movs	r3, #0
 80067c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	f383 8811 	msr	BASEPRI, r3
}
 80067ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr
 80067dc:	2000000c 	.word	0x2000000c

080067e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80067e0:	f3ef 8009 	mrs	r0, PSP
 80067e4:	f3bf 8f6f 	isb	sy
 80067e8:	4b15      	ldr	r3, [pc, #84]	@ (8006840 <pxCurrentTCBConst>)
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	f01e 0f10 	tst.w	lr, #16
 80067f0:	bf08      	it	eq
 80067f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80067f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067fa:	6010      	str	r0, [r2, #0]
 80067fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006800:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006804:	b672      	cpsid	i
 8006806:	f380 8811 	msr	BASEPRI, r0
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	f3bf 8f6f 	isb	sy
 8006812:	b662      	cpsie	i
 8006814:	f7fe ffa8 	bl	8005768 <vTaskSwitchContext>
 8006818:	f04f 0000 	mov.w	r0, #0
 800681c:	f380 8811 	msr	BASEPRI, r0
 8006820:	bc09      	pop	{r0, r3}
 8006822:	6819      	ldr	r1, [r3, #0]
 8006824:	6808      	ldr	r0, [r1, #0]
 8006826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800682a:	f01e 0f10 	tst.w	lr, #16
 800682e:	bf08      	it	eq
 8006830:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006834:	f380 8809 	msr	PSP, r0
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop

08006840 <pxCurrentTCBConst>:
 8006840:	20000d3c 	.word	0x20000d3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006844:	bf00      	nop
 8006846:	bf00      	nop

08006848 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
	__asm volatile
 800684e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006852:	b672      	cpsid	i
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	b662      	cpsie	i
 8006862:	607b      	str	r3, [r7, #4]
}
 8006864:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006866:	f7fe fec3 	bl	80055f0 <xTaskIncrementTick>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d003      	beq.n	8006878 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006870:	4b06      	ldr	r3, [pc, #24]	@ (800688c <SysTick_Handler+0x44>)
 8006872:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006876:	601a      	str	r2, [r3, #0]
 8006878:	2300      	movs	r3, #0
 800687a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	f383 8811 	msr	BASEPRI, r3
}
 8006882:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006884:	bf00      	nop
 8006886:	3708      	adds	r7, #8
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	e000ed04 	.word	0xe000ed04

08006890 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006890:	b480      	push	{r7}
 8006892:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006894:	4b0b      	ldr	r3, [pc, #44]	@ (80068c4 <vPortSetupTimerInterrupt+0x34>)
 8006896:	2200      	movs	r2, #0
 8006898:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800689a:	4b0b      	ldr	r3, [pc, #44]	@ (80068c8 <vPortSetupTimerInterrupt+0x38>)
 800689c:	2200      	movs	r2, #0
 800689e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80068a0:	4b0a      	ldr	r3, [pc, #40]	@ (80068cc <vPortSetupTimerInterrupt+0x3c>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a0a      	ldr	r2, [pc, #40]	@ (80068d0 <vPortSetupTimerInterrupt+0x40>)
 80068a6:	fba2 2303 	umull	r2, r3, r2, r3
 80068aa:	099b      	lsrs	r3, r3, #6
 80068ac:	4a09      	ldr	r2, [pc, #36]	@ (80068d4 <vPortSetupTimerInterrupt+0x44>)
 80068ae:	3b01      	subs	r3, #1
 80068b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80068b2:	4b04      	ldr	r3, [pc, #16]	@ (80068c4 <vPortSetupTimerInterrupt+0x34>)
 80068b4:	2207      	movs	r2, #7
 80068b6:	601a      	str	r2, [r3, #0]
}
 80068b8:	bf00      	nop
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	e000e010 	.word	0xe000e010
 80068c8:	e000e018 	.word	0xe000e018
 80068cc:	20000000 	.word	0x20000000
 80068d0:	10624dd3 	.word	0x10624dd3
 80068d4:	e000e014 	.word	0xe000e014

080068d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80068d8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80068e8 <vPortEnableVFP+0x10>
 80068dc:	6801      	ldr	r1, [r0, #0]
 80068de:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80068e2:	6001      	str	r1, [r0, #0]
 80068e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80068e6:	bf00      	nop
 80068e8:	e000ed88 	.word	0xe000ed88

080068ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80068f2:	f3ef 8305 	mrs	r3, IPSR
 80068f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2b0f      	cmp	r3, #15
 80068fc:	d917      	bls.n	800692e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80068fe:	4a1a      	ldr	r2, [pc, #104]	@ (8006968 <vPortValidateInterruptPriority+0x7c>)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4413      	add	r3, r2
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006908:	4b18      	ldr	r3, [pc, #96]	@ (800696c <vPortValidateInterruptPriority+0x80>)
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	7afa      	ldrb	r2, [r7, #11]
 800690e:	429a      	cmp	r2, r3
 8006910:	d20d      	bcs.n	800692e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8006912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006916:	b672      	cpsid	i
 8006918:	f383 8811 	msr	BASEPRI, r3
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	b662      	cpsie	i
 8006926:	607b      	str	r3, [r7, #4]
}
 8006928:	bf00      	nop
 800692a:	bf00      	nop
 800692c:	e7fd      	b.n	800692a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800692e:	4b10      	ldr	r3, [pc, #64]	@ (8006970 <vPortValidateInterruptPriority+0x84>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006936:	4b0f      	ldr	r3, [pc, #60]	@ (8006974 <vPortValidateInterruptPriority+0x88>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	429a      	cmp	r2, r3
 800693c:	d90d      	bls.n	800695a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006942:	b672      	cpsid	i
 8006944:	f383 8811 	msr	BASEPRI, r3
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	b662      	cpsie	i
 8006952:	603b      	str	r3, [r7, #0]
}
 8006954:	bf00      	nop
 8006956:	bf00      	nop
 8006958:	e7fd      	b.n	8006956 <vPortValidateInterruptPriority+0x6a>
	}
 800695a:	bf00      	nop
 800695c:	3714      	adds	r7, #20
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	e000e3f0 	.word	0xe000e3f0
 800696c:	20001368 	.word	0x20001368
 8006970:	e000ed0c 	.word	0xe000ed0c
 8006974:	2000136c 	.word	0x2000136c

08006978 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b08a      	sub	sp, #40	@ 0x28
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006980:	2300      	movs	r3, #0
 8006982:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006984:	f7fe fd76 	bl	8005474 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006988:	4b5d      	ldr	r3, [pc, #372]	@ (8006b00 <pvPortMalloc+0x188>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d101      	bne.n	8006994 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006990:	f000 f920 	bl	8006bd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006994:	4b5b      	ldr	r3, [pc, #364]	@ (8006b04 <pvPortMalloc+0x18c>)
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4013      	ands	r3, r2
 800699c:	2b00      	cmp	r3, #0
 800699e:	f040 8094 	bne.w	8006aca <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d020      	beq.n	80069ea <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80069a8:	2208      	movs	r2, #8
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4413      	add	r3, r2
 80069ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f003 0307 	and.w	r3, r3, #7
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d017      	beq.n	80069ea <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f023 0307 	bic.w	r3, r3, #7
 80069c0:	3308      	adds	r3, #8
 80069c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f003 0307 	and.w	r3, r3, #7
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00d      	beq.n	80069ea <pvPortMalloc+0x72>
	__asm volatile
 80069ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d2:	b672      	cpsid	i
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	b662      	cpsie	i
 80069e2:	617b      	str	r3, [r7, #20]
}
 80069e4:	bf00      	nop
 80069e6:	bf00      	nop
 80069e8:	e7fd      	b.n	80069e6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d06c      	beq.n	8006aca <pvPortMalloc+0x152>
 80069f0:	4b45      	ldr	r3, [pc, #276]	@ (8006b08 <pvPortMalloc+0x190>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d867      	bhi.n	8006aca <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80069fa:	4b44      	ldr	r3, [pc, #272]	@ (8006b0c <pvPortMalloc+0x194>)
 80069fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80069fe:	4b43      	ldr	r3, [pc, #268]	@ (8006b0c <pvPortMalloc+0x194>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a04:	e004      	b.n	8006a10 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8006a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d903      	bls.n	8006a22 <pvPortMalloc+0xaa>
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1f1      	bne.n	8006a06 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a22:	4b37      	ldr	r3, [pc, #220]	@ (8006b00 <pvPortMalloc+0x188>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d04e      	beq.n	8006aca <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a2c:	6a3b      	ldr	r3, [r7, #32]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2208      	movs	r2, #8
 8006a32:	4413      	add	r3, r2
 8006a34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	6a3b      	ldr	r3, [r7, #32]
 8006a3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a40:	685a      	ldr	r2, [r3, #4]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	1ad2      	subs	r2, r2, r3
 8006a46:	2308      	movs	r3, #8
 8006a48:	005b      	lsls	r3, r3, #1
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d922      	bls.n	8006a94 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4413      	add	r3, r2
 8006a54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	f003 0307 	and.w	r3, r3, #7
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d00d      	beq.n	8006a7c <pvPortMalloc+0x104>
	__asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a64:	b672      	cpsid	i
 8006a66:	f383 8811 	msr	BASEPRI, r3
 8006a6a:	f3bf 8f6f 	isb	sy
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	b662      	cpsie	i
 8006a74:	613b      	str	r3, [r7, #16]
}
 8006a76:	bf00      	nop
 8006a78:	bf00      	nop
 8006a7a:	e7fd      	b.n	8006a78 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	1ad2      	subs	r2, r2, r3
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a8e:	69b8      	ldr	r0, [r7, #24]
 8006a90:	f000 f902 	bl	8006c98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a94:	4b1c      	ldr	r3, [pc, #112]	@ (8006b08 <pvPortMalloc+0x190>)
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	4a1a      	ldr	r2, [pc, #104]	@ (8006b08 <pvPortMalloc+0x190>)
 8006aa0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006aa2:	4b19      	ldr	r3, [pc, #100]	@ (8006b08 <pvPortMalloc+0x190>)
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8006b10 <pvPortMalloc+0x198>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d203      	bcs.n	8006ab6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006aae:	4b16      	ldr	r3, [pc, #88]	@ (8006b08 <pvPortMalloc+0x190>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a17      	ldr	r2, [pc, #92]	@ (8006b10 <pvPortMalloc+0x198>)
 8006ab4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab8:	685a      	ldr	r2, [r3, #4]
 8006aba:	4b12      	ldr	r3, [pc, #72]	@ (8006b04 <pvPortMalloc+0x18c>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	431a      	orrs	r2, r3
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006aca:	f7fe fce1 	bl	8005490 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	f003 0307 	and.w	r3, r3, #7
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00d      	beq.n	8006af4 <pvPortMalloc+0x17c>
	__asm volatile
 8006ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006adc:	b672      	cpsid	i
 8006ade:	f383 8811 	msr	BASEPRI, r3
 8006ae2:	f3bf 8f6f 	isb	sy
 8006ae6:	f3bf 8f4f 	dsb	sy
 8006aea:	b662      	cpsie	i
 8006aec:	60fb      	str	r3, [r7, #12]
}
 8006aee:	bf00      	nop
 8006af0:	bf00      	nop
 8006af2:	e7fd      	b.n	8006af0 <pvPortMalloc+0x178>
	return pvReturn;
 8006af4:	69fb      	ldr	r3, [r7, #28]
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3728      	adds	r7, #40	@ 0x28
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	20004f78 	.word	0x20004f78
 8006b04:	20004f84 	.word	0x20004f84
 8006b08:	20004f7c 	.word	0x20004f7c
 8006b0c:	20004f70 	.word	0x20004f70
 8006b10:	20004f80 	.word	0x20004f80

08006b14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d04e      	beq.n	8006bc4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b26:	2308      	movs	r3, #8
 8006b28:	425b      	negs	r3, r3
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	4b24      	ldr	r3, [pc, #144]	@ (8006bcc <vPortFree+0xb8>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10d      	bne.n	8006b5e <vPortFree+0x4a>
	__asm volatile
 8006b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b46:	b672      	cpsid	i
 8006b48:	f383 8811 	msr	BASEPRI, r3
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	b662      	cpsie	i
 8006b56:	60fb      	str	r3, [r7, #12]
}
 8006b58:	bf00      	nop
 8006b5a:	bf00      	nop
 8006b5c:	e7fd      	b.n	8006b5a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00d      	beq.n	8006b82 <vPortFree+0x6e>
	__asm volatile
 8006b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b6a:	b672      	cpsid	i
 8006b6c:	f383 8811 	msr	BASEPRI, r3
 8006b70:	f3bf 8f6f 	isb	sy
 8006b74:	f3bf 8f4f 	dsb	sy
 8006b78:	b662      	cpsie	i
 8006b7a:	60bb      	str	r3, [r7, #8]
}
 8006b7c:	bf00      	nop
 8006b7e:	bf00      	nop
 8006b80:	e7fd      	b.n	8006b7e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	685a      	ldr	r2, [r3, #4]
 8006b86:	4b11      	ldr	r3, [pc, #68]	@ (8006bcc <vPortFree+0xb8>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d019      	beq.n	8006bc4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d115      	bne.n	8006bc4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8006bcc <vPortFree+0xb8>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	43db      	mvns	r3, r3
 8006ba2:	401a      	ands	r2, r3
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ba8:	f7fe fc64 	bl	8005474 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	685a      	ldr	r2, [r3, #4]
 8006bb0:	4b07      	ldr	r3, [pc, #28]	@ (8006bd0 <vPortFree+0xbc>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	4a06      	ldr	r2, [pc, #24]	@ (8006bd0 <vPortFree+0xbc>)
 8006bb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006bba:	6938      	ldr	r0, [r7, #16]
 8006bbc:	f000 f86c 	bl	8006c98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006bc0:	f7fe fc66 	bl	8005490 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006bc4:	bf00      	nop
 8006bc6:	3718      	adds	r7, #24
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	20004f84 	.word	0x20004f84
 8006bd0:	20004f7c 	.word	0x20004f7c

08006bd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006bda:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006bde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006be0:	4b27      	ldr	r3, [pc, #156]	@ (8006c80 <prvHeapInit+0xac>)
 8006be2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f003 0307 	and.w	r3, r3, #7
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00c      	beq.n	8006c08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	3307      	adds	r3, #7
 8006bf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f023 0307 	bic.w	r3, r3, #7
 8006bfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	4a1f      	ldr	r2, [pc, #124]	@ (8006c80 <prvHeapInit+0xac>)
 8006c04:	4413      	add	r3, r2
 8006c06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c0c:	4a1d      	ldr	r2, [pc, #116]	@ (8006c84 <prvHeapInit+0xb0>)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c12:	4b1c      	ldr	r3, [pc, #112]	@ (8006c84 <prvHeapInit+0xb0>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68ba      	ldr	r2, [r7, #8]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c20:	2208      	movs	r2, #8
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	1a9b      	subs	r3, r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f023 0307 	bic.w	r3, r3, #7
 8006c2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	4a15      	ldr	r2, [pc, #84]	@ (8006c88 <prvHeapInit+0xb4>)
 8006c34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c36:	4b14      	ldr	r3, [pc, #80]	@ (8006c88 <prvHeapInit+0xb4>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c3e:	4b12      	ldr	r3, [pc, #72]	@ (8006c88 <prvHeapInit+0xb4>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2200      	movs	r2, #0
 8006c44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	1ad2      	subs	r2, r2, r3
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c54:	4b0c      	ldr	r3, [pc, #48]	@ (8006c88 <prvHeapInit+0xb4>)
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	4a0a      	ldr	r2, [pc, #40]	@ (8006c8c <prvHeapInit+0xb8>)
 8006c62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	4a09      	ldr	r2, [pc, #36]	@ (8006c90 <prvHeapInit+0xbc>)
 8006c6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c6c:	4b09      	ldr	r3, [pc, #36]	@ (8006c94 <prvHeapInit+0xc0>)
 8006c6e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006c72:	601a      	str	r2, [r3, #0]
}
 8006c74:	bf00      	nop
 8006c76:	3714      	adds	r7, #20
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr
 8006c80:	20001370 	.word	0x20001370
 8006c84:	20004f70 	.word	0x20004f70
 8006c88:	20004f78 	.word	0x20004f78
 8006c8c:	20004f80 	.word	0x20004f80
 8006c90:	20004f7c 	.word	0x20004f7c
 8006c94:	20004f84 	.word	0x20004f84

08006c98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ca0:	4b28      	ldr	r3, [pc, #160]	@ (8006d44 <prvInsertBlockIntoFreeList+0xac>)
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	e002      	b.n	8006cac <prvInsertBlockIntoFreeList+0x14>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	60fb      	str	r3, [r7, #12]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d8f7      	bhi.n	8006ca6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	68ba      	ldr	r2, [r7, #8]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d108      	bne.n	8006cda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	441a      	add	r2, r3
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	441a      	add	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d118      	bne.n	8006d20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	4b15      	ldr	r3, [pc, #84]	@ (8006d48 <prvInsertBlockIntoFreeList+0xb0>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d00d      	beq.n	8006d16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685a      	ldr	r2, [r3, #4]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	441a      	add	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	601a      	str	r2, [r3, #0]
 8006d14:	e008      	b.n	8006d28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d16:	4b0c      	ldr	r3, [pc, #48]	@ (8006d48 <prvInsertBlockIntoFreeList+0xb0>)
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	601a      	str	r2, [r3, #0]
 8006d1e:	e003      	b.n	8006d28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d002      	beq.n	8006d36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d36:	bf00      	nop
 8006d38:	3714      	adds	r7, #20
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	20004f70 	.word	0x20004f70
 8006d48:	20004f78 	.word	0x20004f78

08006d4c <memset>:
 8006d4c:	4402      	add	r2, r0
 8006d4e:	4603      	mov	r3, r0
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d100      	bne.n	8006d56 <memset+0xa>
 8006d54:	4770      	bx	lr
 8006d56:	f803 1b01 	strb.w	r1, [r3], #1
 8006d5a:	e7f9      	b.n	8006d50 <memset+0x4>

08006d5c <__libc_init_array>:
 8006d5c:	b570      	push	{r4, r5, r6, lr}
 8006d5e:	4d0d      	ldr	r5, [pc, #52]	@ (8006d94 <__libc_init_array+0x38>)
 8006d60:	4c0d      	ldr	r4, [pc, #52]	@ (8006d98 <__libc_init_array+0x3c>)
 8006d62:	1b64      	subs	r4, r4, r5
 8006d64:	10a4      	asrs	r4, r4, #2
 8006d66:	2600      	movs	r6, #0
 8006d68:	42a6      	cmp	r6, r4
 8006d6a:	d109      	bne.n	8006d80 <__libc_init_array+0x24>
 8006d6c:	4d0b      	ldr	r5, [pc, #44]	@ (8006d9c <__libc_init_array+0x40>)
 8006d6e:	4c0c      	ldr	r4, [pc, #48]	@ (8006da0 <__libc_init_array+0x44>)
 8006d70:	f000 f826 	bl	8006dc0 <_init>
 8006d74:	1b64      	subs	r4, r4, r5
 8006d76:	10a4      	asrs	r4, r4, #2
 8006d78:	2600      	movs	r6, #0
 8006d7a:	42a6      	cmp	r6, r4
 8006d7c:	d105      	bne.n	8006d8a <__libc_init_array+0x2e>
 8006d7e:	bd70      	pop	{r4, r5, r6, pc}
 8006d80:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d84:	4798      	blx	r3
 8006d86:	3601      	adds	r6, #1
 8006d88:	e7ee      	b.n	8006d68 <__libc_init_array+0xc>
 8006d8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d8e:	4798      	blx	r3
 8006d90:	3601      	adds	r6, #1
 8006d92:	e7f2      	b.n	8006d7a <__libc_init_array+0x1e>
 8006d94:	08006e78 	.word	0x08006e78
 8006d98:	08006e78 	.word	0x08006e78
 8006d9c:	08006e78 	.word	0x08006e78
 8006da0:	08006e7c 	.word	0x08006e7c

08006da4 <memcpy>:
 8006da4:	440a      	add	r2, r1
 8006da6:	4291      	cmp	r1, r2
 8006da8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006dac:	d100      	bne.n	8006db0 <memcpy+0xc>
 8006dae:	4770      	bx	lr
 8006db0:	b510      	push	{r4, lr}
 8006db2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006db6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dba:	4291      	cmp	r1, r2
 8006dbc:	d1f9      	bne.n	8006db2 <memcpy+0xe>
 8006dbe:	bd10      	pop	{r4, pc}

08006dc0 <_init>:
 8006dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dc2:	bf00      	nop
 8006dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dc6:	bc08      	pop	{r3}
 8006dc8:	469e      	mov	lr, r3
 8006dca:	4770      	bx	lr

08006dcc <_fini>:
 8006dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dce:	bf00      	nop
 8006dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dd2:	bc08      	pop	{r3}
 8006dd4:	469e      	mov	lr, r3
 8006dd6:	4770      	bx	lr
