
BAUROV-OTOPILOT-NUCF7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d28  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08007f28  08007f28  00008f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fc0  08007fc0  00009010  2**0
                  CONTENTS
  4 .ARM          00000008  08007fc0  08007fc0  00008fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fc8  08007fc8  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fc8  08007fc8  00008fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007fcc  08007fcc  00008fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08007fd0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cfc  20000010  08007fe0  00009010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d0c  08007fe0  00009d0c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ec85  00000000  00000000  0000903e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000414c  00000000  00000000  00027cc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019a0  00000000  00000000  0002be10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013ff  00000000  00000000  0002d7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029fa1  00000000  00000000  0002ebaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fde6  00000000  00000000  00058b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107eb8  00000000  00000000  00078936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001807ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bbc  00000000  00000000  00180834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  001873f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000010 	.word	0x20000010
 800021c:	00000000 	.word	0x00000000
 8000220:	08007f10 	.word	0x08007f10

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000014 	.word	0x20000014
 800023c:	08007f10 	.word	0x08007f10

08000240 <__aeabi_ldivmod>:
 8000240:	b97b      	cbnz	r3, 8000262 <__aeabi_ldivmod+0x22>
 8000242:	b972      	cbnz	r2, 8000262 <__aeabi_ldivmod+0x22>
 8000244:	2900      	cmp	r1, #0
 8000246:	bfbe      	ittt	lt
 8000248:	2000      	movlt	r0, #0
 800024a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800024e:	e006      	blt.n	800025e <__aeabi_ldivmod+0x1e>
 8000250:	bf08      	it	eq
 8000252:	2800      	cmpeq	r0, #0
 8000254:	bf1c      	itt	ne
 8000256:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800025a:	f04f 30ff 	movne.w	r0, #4294967295
 800025e:	f000 b9b5 	b.w	80005cc <__aeabi_idiv0>
 8000262:	f1ad 0c08 	sub.w	ip, sp, #8
 8000266:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800026a:	2900      	cmp	r1, #0
 800026c:	db09      	blt.n	8000282 <__aeabi_ldivmod+0x42>
 800026e:	2b00      	cmp	r3, #0
 8000270:	db1a      	blt.n	80002a8 <__aeabi_ldivmod+0x68>
 8000272:	f000 f84d 	bl	8000310 <__udivmoddi4>
 8000276:	f8dd e004 	ldr.w	lr, [sp, #4]
 800027a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027e:	b004      	add	sp, #16
 8000280:	4770      	bx	lr
 8000282:	4240      	negs	r0, r0
 8000284:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000288:	2b00      	cmp	r3, #0
 800028a:	db1b      	blt.n	80002c4 <__aeabi_ldivmod+0x84>
 800028c:	f000 f840 	bl	8000310 <__udivmoddi4>
 8000290:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000294:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000298:	b004      	add	sp, #16
 800029a:	4240      	negs	r0, r0
 800029c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a0:	4252      	negs	r2, r2
 80002a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a6:	4770      	bx	lr
 80002a8:	4252      	negs	r2, r2
 80002aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ae:	f000 f82f 	bl	8000310 <__udivmoddi4>
 80002b2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ba:	b004      	add	sp, #16
 80002bc:	4240      	negs	r0, r0
 80002be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c2:	4770      	bx	lr
 80002c4:	4252      	negs	r2, r2
 80002c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ca:	f000 f821 	bl	8000310 <__udivmoddi4>
 80002ce:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d6:	b004      	add	sp, #16
 80002d8:	4252      	negs	r2, r2
 80002da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <AVG_Filter>:
#include "Filters.h"

AVG_FilterTypeDef_T AVG_IMU_ACC_X, AVG_IMU_ACC_Y, AVG_IMU_ACC_Z, AVG_IMU_GYR_X, AVG_IMU_GYR_Y, AVG_IMU_GYR_Z, AVG_IMU_MAG_X, AVG_IMU_MAG_Y, AVG_IMU_MAG_Z;
MED_FilterTypeDef_T MED_IMU_ACC_X, MED_IMU_ACC_Y, MED_IMU_ACC_Z, MED_IMU_GYR_X, MED_IMU_GYR_Y, MED_IMU_GYR_Z, MED_IMU_MAG_X, MED_IMU_MAG_Y, MED_IMU_MAG_Z;

void AVG_Filter(AVG_FilterTypeDef_T *handle, uint32_t data){
 80005d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80005d4:	b086      	sub	sp, #24
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
 80005da:	6039      	str	r1, [r7, #0]
	int64_t sum = 0;
 80005dc:	f04f 0200 	mov.w	r2, #0
 80005e0:	f04f 0300 	mov.w	r3, #0
 80005e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	handle->AVG_FilterBuffer[handle->AVG_FilterCounter++] = data;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	8b1b      	ldrh	r3, [r3, #24]
 80005ec:	1c5a      	adds	r2, r3, #1
 80005ee:	b291      	uxth	r1, r2
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	8311      	strh	r1, [r2, #24]
 80005f4:	461a      	mov	r2, r3
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	b219      	sxth	r1, r3
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	if(handle->AVG_FilterCounter == AVG_FilterBufferSize){
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	8b1b      	ldrh	r3, [r3, #24]
 8000604:	2b0a      	cmp	r3, #10
 8000606:	d134      	bne.n	8000672 <AVG_Filter+0xa2>
		for(uint8_t i=0; i<AVG_FilterBufferSize; i++)
 8000608:	2300      	movs	r3, #0
 800060a:	73fb      	strb	r3, [r7, #15]
 800060c:	e012      	b.n	8000634 <AVG_Filter+0x64>
			sum += handle->AVG_FilterBuffer[i];
 800060e:	7bfa      	ldrb	r2, [r7, #15]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000616:	b21b      	sxth	r3, r3
 8000618:	17da      	asrs	r2, r3, #31
 800061a:	461c      	mov	r4, r3
 800061c:	4615      	mov	r5, r2
 800061e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000622:	eb12 0804 	adds.w	r8, r2, r4
 8000626:	eb43 0905 	adc.w	r9, r3, r5
 800062a:	e9c7 8904 	strd	r8, r9, [r7, #16]
		for(uint8_t i=0; i<AVG_FilterBufferSize; i++)
 800062e:	7bfb      	ldrb	r3, [r7, #15]
 8000630:	3301      	adds	r3, #1
 8000632:	73fb      	strb	r3, [r7, #15]
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	2b09      	cmp	r3, #9
 8000638:	d9e9      	bls.n	800060e <AVG_Filter+0x3e>

		handle->AVG_FilteredData = (int16_t)(sum/AVG_FilterBufferSize);
 800063a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800063e:	f04f 020a 	mov.w	r2, #10
 8000642:	f04f 0300 	mov.w	r3, #0
 8000646:	f7ff fdfb 	bl	8000240 <__aeabi_ldivmod>
 800064a:	4602      	mov	r2, r0
 800064c:	460b      	mov	r3, r1
 800064e:	b212      	sxth	r2, r2
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	829a      	strh	r2, [r3, #20]
		handle->AVG_FilteredPreData = handle->AVG_FilteredData;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	82da      	strh	r2, [r3, #22]
		handle->AVG_FilterCounter = 0;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2200      	movs	r2, #0
 8000662:	831a      	strh	r2, [r3, #24]
		memset(handle->AVG_FilterBuffer, 0, sizeof(handle->AVG_FilterBuffer));
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2214      	movs	r2, #20
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f007 fc16 	bl	8007e9c <memset>
	}else{
		handle->AVG_FilteredData=handle->AVG_FilteredPreData;
	}
}
 8000670:	e004      	b.n	800067c <AVG_Filter+0xac>
		handle->AVG_FilteredData=handle->AVG_FilteredPreData;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	829a      	strh	r2, [r3, #20]
}
 800067c:	bf00      	nop
 800067e:	3718      	adds	r7, #24
 8000680:	46bd      	mov	sp, r7
 8000682:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000686 <MED_Filter_SortArray>:

static void MED_Filter_SortArray(int16_t* arr, uint8_t size) {
 8000686:	b480      	push	{r7}
 8000688:	b085      	sub	sp, #20
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
 800068e:	460b      	mov	r3, r1
 8000690:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < size - 1; i++) {
 8000692:	2300      	movs	r3, #0
 8000694:	73fb      	strb	r3, [r7, #15]
 8000696:	e032      	b.n	80006fe <MED_Filter_SortArray+0x78>
        for (uint8_t j = i + 1; j < size; j++) {
 8000698:	7bfb      	ldrb	r3, [r7, #15]
 800069a:	3301      	adds	r3, #1
 800069c:	73bb      	strb	r3, [r7, #14]
 800069e:	e027      	b.n	80006f0 <MED_Filter_SortArray+0x6a>
            if (arr[j] < arr[i]) {
 80006a0:	7bbb      	ldrb	r3, [r7, #14]
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	4413      	add	r3, r2
 80006a8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80006ac:	7bfb      	ldrb	r3, [r7, #15]
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	6879      	ldr	r1, [r7, #4]
 80006b2:	440b      	add	r3, r1
 80006b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	da16      	bge.n	80006ea <MED_Filter_SortArray+0x64>
                int16_t tmp = arr[i];
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	4413      	add	r3, r2
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	81bb      	strh	r3, [r7, #12]
                arr[i] = arr[j];
 80006c8:	7bbb      	ldrb	r3, [r7, #14]
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	687a      	ldr	r2, [r7, #4]
 80006ce:	441a      	add	r2, r3
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	6879      	ldr	r1, [r7, #4]
 80006d6:	440b      	add	r3, r1
 80006d8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80006dc:	801a      	strh	r2, [r3, #0]
                arr[j] = tmp;
 80006de:	7bbb      	ldrb	r3, [r7, #14]
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	4413      	add	r3, r2
 80006e6:	89ba      	ldrh	r2, [r7, #12]
 80006e8:	801a      	strh	r2, [r3, #0]
        for (uint8_t j = i + 1; j < size; j++) {
 80006ea:	7bbb      	ldrb	r3, [r7, #14]
 80006ec:	3301      	adds	r3, #1
 80006ee:	73bb      	strb	r3, [r7, #14]
 80006f0:	7bba      	ldrb	r2, [r7, #14]
 80006f2:	78fb      	ldrb	r3, [r7, #3]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d3d3      	bcc.n	80006a0 <MED_Filter_SortArray+0x1a>
    for (uint8_t i = 0; i < size - 1; i++) {
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	3301      	adds	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
 80006fe:	7bfa      	ldrb	r2, [r7, #15]
 8000700:	78fb      	ldrb	r3, [r7, #3]
 8000702:	3b01      	subs	r3, #1
 8000704:	429a      	cmp	r2, r3
 8000706:	dbc7      	blt.n	8000698 <MED_Filter_SortArray+0x12>
            }
        }
    }
}
 8000708:	bf00      	nop
 800070a:	bf00      	nop
 800070c:	3714      	adds	r7, #20
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr

08000716 <MED_Filter>:

void MED_Filter(MED_FilterTypeDef_T *handle, uint32_t data){
 8000716:	b580      	push	{r7, lr}
 8000718:	b082      	sub	sp, #8
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
 800071e:	6039      	str	r1, [r7, #0]
	handle->MED_FilterBuffer[handle->MED_FilterCounter++] = data;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	8a5b      	ldrh	r3, [r3, #18]
 8000724:	1c5a      	adds	r2, r3, #1
 8000726:	b291      	uxth	r1, r2
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	8251      	strh	r1, [r2, #18]
 800072c:	461a      	mov	r2, r3
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	b219      	sxth	r1, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	if(handle->MED_FilterCounter == MED_FilterBufferSize){
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	8a5b      	ldrh	r3, [r3, #18]
 800073c:	2b07      	cmp	r3, #7
 800073e:	d118      	bne.n	8000772 <MED_Filter+0x5c>
		MED_Filter_SortArray(handle->MED_FilterBuffer, MED_FilterBufferSize);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2107      	movs	r1, #7
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff ff9e 	bl	8000686 <MED_Filter_SortArray>
		handle->MED_FilteredData = handle->MED_FilterBuffer[(MED_FilterBufferSize-1)/2];
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	81da      	strh	r2, [r3, #14]
		handle->MED_FilteredPreData = handle->MED_FilteredData;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	821a      	strh	r2, [r3, #16]
		handle->MED_FilterCounter = 0;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2200      	movs	r2, #0
 8000762:	825a      	strh	r2, [r3, #18]
		memset(handle->MED_FilterBuffer, 0, sizeof(handle->MED_FilterBuffer));
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	220e      	movs	r2, #14
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f007 fb96 	bl	8007e9c <memset>
	}else{
		handle->MED_FilteredData=handle->MED_FilteredPreData;
	}
}
 8000770:	e004      	b.n	800077c <MED_Filter+0x66>
		handle->MED_FilteredData=handle->MED_FilteredPreData;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	81da      	strh	r2, [r3, #14]
}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <I2C_Init>:
 * GLOBAL FUNCTIONS
 ********************************************************/
/** Brief description which ends at this dot. Details follow
 *  here.
 */
void I2C_Init(void *handle, uint8_t I2CNo){
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	460b      	mov	r3, r1
 800078e:	70fb      	strb	r3, [r7, #3]
	I2C_HandleTypeDef_T *i2c;
	i2c = I2C_GetModule(I2CNo);
 8000790:	78fb      	ldrb	r3, [r7, #3]
 8000792:	4618      	mov	r0, r3
 8000794:	f000 f864 	bl	8000860 <I2C_GetModule>
 8000798:	60f8      	str	r0, [r7, #12]
    i2c->handle = handle;
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	601a      	str	r2, [r3, #0]
}
 80007a0:	bf00      	nop
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <I2C_ReadWrite_Poll>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
I2C_ReturnTypeDef_T I2C_ReadWrite_Poll(uint8_t I2CNo, uint8_t DevAddress, uint8_t *txBuff, uint8_t txLenght, uint8_t *rxBuff, uint8_t rxLenght){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af02      	add	r7, sp, #8
 80007ae:	603a      	str	r2, [r7, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]
 80007b6:	460b      	mov	r3, r1
 80007b8:	71bb      	strb	r3, [r7, #6]
 80007ba:	4613      	mov	r3, r2
 80007bc:	717b      	strb	r3, [r7, #5]
	I2C_HandleTypeDef_T *i2c;
	HAL_StatusTypeDef res;
	uint8_t txAddr, rxAddr;
	txAddr = DevAddress<<1;
 80007be:	79bb      	ldrb	r3, [r7, #6]
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	75fb      	strb	r3, [r7, #23]
	rxAddr = ((DevAddress<<1) | 0x01);
 80007c4:	79bb      	ldrb	r3, [r7, #6]
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	b25b      	sxtb	r3, r3
 80007ca:	f043 0301 	orr.w	r3, r3, #1
 80007ce:	b25b      	sxtb	r3, r3
 80007d0:	75bb      	strb	r3, [r7, #22]
	i2c = I2C_GetModule(I2CNo);
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 f843 	bl	8000860 <I2C_GetModule>
 80007da:	6138      	str	r0, [r7, #16]
	if(rxLenght == 0){
 80007dc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d114      	bne.n	800080e <I2C_ReadWrite_Poll+0x66>
		res = HAL_I2C_Master_Transmit(i2c->handle , txAddr, txBuff, txLenght,1000);
 80007e4:	693b      	ldr	r3, [r7, #16]
 80007e6:	6818      	ldr	r0, [r3, #0]
 80007e8:	7dfb      	ldrb	r3, [r7, #23]
 80007ea:	b299      	uxth	r1, r3
 80007ec:	797b      	ldrb	r3, [r7, #5]
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007f4:	9200      	str	r2, [sp, #0]
 80007f6:	683a      	ldr	r2, [r7, #0]
 80007f8:	f001 fed4 	bl	80025a4 <HAL_I2C_Master_Transmit>
 80007fc:	4603      	mov	r3, r0
 80007fe:	73fb      	strb	r3, [r7, #15]
		return res == I2C_ERROR;
 8000800:	7bfb      	ldrb	r3, [r7, #15]
 8000802:	2b01      	cmp	r3, #1
 8000804:	bf0c      	ite	eq
 8000806:	2301      	moveq	r3, #1
 8000808:	2300      	movne	r3, #0
 800080a:	b2db      	uxtb	r3, r3
 800080c:	e023      	b.n	8000856 <I2C_ReadWrite_Poll+0xae>
	}else{
		HAL_I2C_Master_Transmit(i2c->handle , txAddr, txBuff, txLenght,1000);
 800080e:	693b      	ldr	r3, [r7, #16]
 8000810:	6818      	ldr	r0, [r3, #0]
 8000812:	7dfb      	ldrb	r3, [r7, #23]
 8000814:	b299      	uxth	r1, r3
 8000816:	797b      	ldrb	r3, [r7, #5]
 8000818:	b29b      	uxth	r3, r3
 800081a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800081e:	9200      	str	r2, [sp, #0]
 8000820:	683a      	ldr	r2, [r7, #0]
 8000822:	f001 febf 	bl	80025a4 <HAL_I2C_Master_Transmit>
		HAL_Delay(1);
 8000826:	2001      	movs	r0, #1
 8000828:	f001 f916 	bl	8001a58 <HAL_Delay>
		res = HAL_I2C_Master_Receive(i2c->handle, rxAddr, rxBuff, rxLenght,1000);
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	6818      	ldr	r0, [r3, #0]
 8000830:	7dbb      	ldrb	r3, [r7, #22]
 8000832:	b299      	uxth	r1, r3
 8000834:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000838:	b29b      	uxth	r3, r3
 800083a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800083e:	9200      	str	r2, [sp, #0]
 8000840:	6a3a      	ldr	r2, [r7, #32]
 8000842:	f001 ffc7 	bl	80027d4 <HAL_I2C_Master_Receive>
 8000846:	4603      	mov	r3, r0
 8000848:	73fb      	strb	r3, [r7, #15]
		return res == I2C_ERROR;
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	2b01      	cmp	r3, #1
 800084e:	bf0c      	ite	eq
 8000850:	2301      	moveq	r3, #1
 8000852:	2300      	movne	r3, #0
 8000854:	b2db      	uxtb	r3, r3
	}
}
 8000856:	4618      	mov	r0, r3
 8000858:	3718      	adds	r7, #24
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <I2C_GetModule>:
 * PRIVATE FUNCTIONS
 *********************************************************/
/** Brief description which ends at this dot. Details follow
 *  here.
 */
I2C_HandleTypeDef_T* I2C_GetModule(uint8_t I2CNo){
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
	switch(I2CNo){
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	2b03      	cmp	r3, #3
 800086e:	d00a      	beq.n	8000886 <I2C_GetModule+0x26>
 8000870:	2b03      	cmp	r3, #3
 8000872:	dc0a      	bgt.n	800088a <I2C_GetModule+0x2a>
 8000874:	2b01      	cmp	r3, #1
 8000876:	d002      	beq.n	800087e <I2C_GetModule+0x1e>
 8000878:	2b02      	cmp	r3, #2
 800087a:	d002      	beq.n	8000882 <I2C_GetModule+0x22>
 800087c:	e005      	b.n	800088a <I2C_GetModule+0x2a>
		case I2CNO_1 : return &I2C_1; break;
 800087e:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <I2C_GetModule+0x38>)
 8000880:	e004      	b.n	800088c <I2C_GetModule+0x2c>
		case I2CNO_2 : return &I2C_2; break;
 8000882:	4b06      	ldr	r3, [pc, #24]	@ (800089c <I2C_GetModule+0x3c>)
 8000884:	e002      	b.n	800088c <I2C_GetModule+0x2c>
		case I2CNO_3 : return &I2C_3; break;
 8000886:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <I2C_GetModule+0x40>)
 8000888:	e000      	b.n	800088c <I2C_GetModule+0x2c>
		default : return NULL; break;
 800088a:	2300      	movs	r3, #0
	}
}
 800088c:	4618      	mov	r0, r3
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	200001dc 	.word	0x200001dc
 800089c:	200001e4 	.word	0x200001e4
 80008a0:	200001ec 	.word	0x200001ec

080008a4 <IMU_Init>:
#include "IMU.h"
#include "Filters.h"

IMU_TypeDef_T IMU_1;

void IMU_Init(IMU_TypeDef_T *ImuHandle, uint8_t ImuSensorNo, uint8_t IMU_I2CNO, uint8_t IMU_I2CAdress, void* ResetGPIOPort, uint16_t ResetGPIOPin){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af02      	add	r7, sp, #8
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	4608      	mov	r0, r1
 80008ae:	4611      	mov	r1, r2
 80008b0:	461a      	mov	r2, r3
 80008b2:	4603      	mov	r3, r0
 80008b4:	70fb      	strb	r3, [r7, #3]
 80008b6:	460b      	mov	r3, r1
 80008b8:	70bb      	strb	r3, [r7, #2]
 80008ba:	4613      	mov	r3, r2
 80008bc:	707b      	strb	r3, [r7, #1]
	BNO055_Sensor_T *imuSensor;
	imuSensor = IMU_GetSensorHandle(ImuSensorNo);
 80008be:	78fb      	ldrb	r3, [r7, #3]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 f9dd 	bl	8000c80 <IMU_GetSensorHandle>
 80008c6:	60f8      	str	r0, [r7, #12]

	BNO055_Init(imuSensor, IMU_I2CNO, IMU_I2CAdress, ResetGPIOPort, ResetGPIOPin);
 80008c8:	787a      	ldrb	r2, [r7, #1]
 80008ca:	78b9      	ldrb	r1, [r7, #2]
 80008cc:	8bbb      	ldrh	r3, [r7, #28]
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	69bb      	ldr	r3, [r7, #24]
 80008d2:	68f8      	ldr	r0, [r7, #12]
 80008d4:	f000 f9f2 	bl	8000cbc <BNO055_Init>

	ImuHandle->CalcConst.ACC_1MpS2_LSB = imuSensor->CalcConst.ACC_1MpS2_LSB;
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80008dc:	ee07 3a90 	vmov	s15, r3
 80008e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	ImuHandle->CalcConst.GYR_1RPS_LSB  = imuSensor->CalcConst.GYR_1RPS_LSB;
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80008ee:	ee07 3a90 	vmov	s15, r3
 80008f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	ImuHandle->CalcConst.MAG_1uT_LSB   = imuSensor->CalcConst.MAG_1uT_LSB;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000900:	ee07 3a90 	vmov	s15, r3
 8000904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

	HAL_Delay(250);
 800090e:	20fa      	movs	r0, #250	@ 0xfa
 8000910:	f001 f8a2 	bl	8001a58 <HAL_Delay>
}
 8000914:	bf00      	nop
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <IMU_Execute>:

void IMU_Execute(IMU_TypeDef_T *ImuHandle, uint8_t ImuSensorNo){
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	460b      	mov	r3, r1
 8000926:	70fb      	strb	r3, [r7, #3]
	BNO055_Sensor_T *imuSensor;

	imuSensor = IMU_GetSensorHandle(ImuSensorNo);
 8000928:	78fb      	ldrb	r3, [r7, #3]
 800092a:	4618      	mov	r0, r3
 800092c:	f000 f9a8 	bl	8000c80 <IMU_GetSensorHandle>
 8000930:	60f8      	str	r0, [r7, #12]

	BNO055_Get_SysError(imuSensor);
 8000932:	68f8      	ldr	r0, [r7, #12]
 8000934:	f000 fe9e 	bl	8001674 <BNO055_Get_SysError>
	BNO055_Get_ACC_Data(imuSensor);
 8000938:	68f8      	ldr	r0, [r7, #12]
 800093a:	f000 fcd7 	bl	80012ec <BNO055_Get_ACC_Data>
	BNO055_Get_MAG_Data(imuSensor);
 800093e:	68f8      	ldr	r0, [r7, #12]
 8000940:	f000 fd57 	bl	80013f2 <BNO055_Get_MAG_Data>
	BNO055_Get_GYR_Data(imuSensor);
 8000944:	68f8      	ldr	r0, [r7, #12]
 8000946:	f000 fda7 	bl	8001498 <BNO055_Get_GYR_Data>

	IMU_PopulateData(ImuHandle, ImuSensorNo);
 800094a:	78fb      	ldrb	r3, [r7, #3]
 800094c:	4619      	mov	r1, r3
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f000 f95a 	bl	8000c08 <IMU_PopulateData>

	MED_Filter(&MED_IMU_ACC_X, ImuHandle->AllRawData.Accelerometer.X_Axis);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f9b3 3000 	ldrsh.w	r3, [r3]
 800095a:	4619      	mov	r1, r3
 800095c:	4898      	ldr	r0, [pc, #608]	@ (8000bc0 <IMU_Execute+0x2a4>)
 800095e:	f7ff feda 	bl	8000716 <MED_Filter>
	AVG_Filter(&AVG_IMU_ACC_X, MED_IMU_ACC_X.MED_FilteredData);
 8000962:	4b97      	ldr	r3, [pc, #604]	@ (8000bc0 <IMU_Execute+0x2a4>)
 8000964:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000968:	4619      	mov	r1, r3
 800096a:	4896      	ldr	r0, [pc, #600]	@ (8000bc4 <IMU_Execute+0x2a8>)
 800096c:	f7ff fe30 	bl	80005d0 <AVG_Filter>
	MED_Filter(&MED_IMU_ACC_Y, ImuHandle->AllRawData.Accelerometer.Y_Axis);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000976:	4619      	mov	r1, r3
 8000978:	4893      	ldr	r0, [pc, #588]	@ (8000bc8 <IMU_Execute+0x2ac>)
 800097a:	f7ff fecc 	bl	8000716 <MED_Filter>
	AVG_Filter(&AVG_IMU_ACC_Y, MED_IMU_ACC_Y.MED_FilteredData);
 800097e:	4b92      	ldr	r3, [pc, #584]	@ (8000bc8 <IMU_Execute+0x2ac>)
 8000980:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000984:	4619      	mov	r1, r3
 8000986:	4891      	ldr	r0, [pc, #580]	@ (8000bcc <IMU_Execute+0x2b0>)
 8000988:	f7ff fe22 	bl	80005d0 <AVG_Filter>
	MED_Filter(&MED_IMU_ACC_Z, ImuHandle->AllRawData.Accelerometer.Z_Axis);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000992:	4619      	mov	r1, r3
 8000994:	488e      	ldr	r0, [pc, #568]	@ (8000bd0 <IMU_Execute+0x2b4>)
 8000996:	f7ff febe 	bl	8000716 <MED_Filter>
	AVG_Filter(&AVG_IMU_ACC_Z, MED_IMU_ACC_Z.MED_FilteredData);
 800099a:	4b8d      	ldr	r3, [pc, #564]	@ (8000bd0 <IMU_Execute+0x2b4>)
 800099c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80009a0:	4619      	mov	r1, r3
 80009a2:	488c      	ldr	r0, [pc, #560]	@ (8000bd4 <IMU_Execute+0x2b8>)
 80009a4:	f7ff fe14 	bl	80005d0 <AVG_Filter>
	MED_Filter(&MED_IMU_GYR_X, ImuHandle->AllRawData.Gyroscope.X_Axis);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80009ae:	4619      	mov	r1, r3
 80009b0:	4889      	ldr	r0, [pc, #548]	@ (8000bd8 <IMU_Execute+0x2bc>)
 80009b2:	f7ff feb0 	bl	8000716 <MED_Filter>
	AVG_Filter(&AVG_IMU_GYR_X, MED_IMU_GYR_X.MED_FilteredData);
 80009b6:	4b88      	ldr	r3, [pc, #544]	@ (8000bd8 <IMU_Execute+0x2bc>)
 80009b8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80009bc:	4619      	mov	r1, r3
 80009be:	4887      	ldr	r0, [pc, #540]	@ (8000bdc <IMU_Execute+0x2c0>)
 80009c0:	f7ff fe06 	bl	80005d0 <AVG_Filter>
	MED_Filter(&MED_IMU_GYR_Y, ImuHandle->AllRawData.Gyroscope.Y_Axis);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80009ca:	4619      	mov	r1, r3
 80009cc:	4884      	ldr	r0, [pc, #528]	@ (8000be0 <IMU_Execute+0x2c4>)
 80009ce:	f7ff fea2 	bl	8000716 <MED_Filter>
	AVG_Filter(&AVG_IMU_GYR_Y, MED_IMU_GYR_Y.MED_FilteredData);
 80009d2:	4b83      	ldr	r3, [pc, #524]	@ (8000be0 <IMU_Execute+0x2c4>)
 80009d4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80009d8:	4619      	mov	r1, r3
 80009da:	4882      	ldr	r0, [pc, #520]	@ (8000be4 <IMU_Execute+0x2c8>)
 80009dc:	f7ff fdf8 	bl	80005d0 <AVG_Filter>
	MED_Filter(&MED_IMU_GYR_Z, ImuHandle->AllRawData.Gyroscope.Z_Axis);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80009e6:	4619      	mov	r1, r3
 80009e8:	487f      	ldr	r0, [pc, #508]	@ (8000be8 <IMU_Execute+0x2cc>)
 80009ea:	f7ff fe94 	bl	8000716 <MED_Filter>
	AVG_Filter(&AVG_IMU_GYR_Z, MED_IMU_GYR_Z.MED_FilteredData);
 80009ee:	4b7e      	ldr	r3, [pc, #504]	@ (8000be8 <IMU_Execute+0x2cc>)
 80009f0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80009f4:	4619      	mov	r1, r3
 80009f6:	487d      	ldr	r0, [pc, #500]	@ (8000bec <IMU_Execute+0x2d0>)
 80009f8:	f7ff fdea 	bl	80005d0 <AVG_Filter>
	MED_Filter(&MED_IMU_MAG_X, ImuHandle->AllRawData.Magnetometer.X_Axis);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000a02:	4619      	mov	r1, r3
 8000a04:	487a      	ldr	r0, [pc, #488]	@ (8000bf0 <IMU_Execute+0x2d4>)
 8000a06:	f7ff fe86 	bl	8000716 <MED_Filter>
	AVG_Filter(&AVG_IMU_MAG_X, MED_IMU_MAG_X.MED_FilteredData);
 8000a0a:	4b79      	ldr	r3, [pc, #484]	@ (8000bf0 <IMU_Execute+0x2d4>)
 8000a0c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000a10:	4619      	mov	r1, r3
 8000a12:	4878      	ldr	r0, [pc, #480]	@ (8000bf4 <IMU_Execute+0x2d8>)
 8000a14:	f7ff fddc 	bl	80005d0 <AVG_Filter>
	MED_Filter(&MED_IMU_MAG_Y, ImuHandle->AllRawData.Magnetometer.Y_Axis);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4875      	ldr	r0, [pc, #468]	@ (8000bf8 <IMU_Execute+0x2dc>)
 8000a22:	f7ff fe78 	bl	8000716 <MED_Filter>
	AVG_Filter(&AVG_IMU_MAG_Y, MED_IMU_MAG_Y.MED_FilteredData);
 8000a26:	4b74      	ldr	r3, [pc, #464]	@ (8000bf8 <IMU_Execute+0x2dc>)
 8000a28:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4873      	ldr	r0, [pc, #460]	@ (8000bfc <IMU_Execute+0x2e0>)
 8000a30:	f7ff fdce 	bl	80005d0 <AVG_Filter>
	MED_Filter(&MED_IMU_MAG_Z, ImuHandle->AllRawData.Magnetometer.Z_Axis);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4870      	ldr	r0, [pc, #448]	@ (8000c00 <IMU_Execute+0x2e4>)
 8000a3e:	f7ff fe6a 	bl	8000716 <MED_Filter>
	AVG_Filter(&AVG_IMU_MAG_Z, MED_IMU_MAG_Z.MED_FilteredData);
 8000a42:	4b6f      	ldr	r3, [pc, #444]	@ (8000c00 <IMU_Execute+0x2e4>)
 8000a44:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	486e      	ldr	r0, [pc, #440]	@ (8000c04 <IMU_Execute+0x2e8>)
 8000a4c:	f7ff fdc0 	bl	80005d0 <AVG_Filter>

	ImuHandle->FilteredData.Accelerometer.X_Axis = AVG_IMU_ACC_X.AVG_FilteredData;
 8000a50:	4b5c      	ldr	r3, [pc, #368]	@ (8000bc4 <IMU_Execute+0x2a8>)
 8000a52:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	825a      	strh	r2, [r3, #18]
	ImuHandle->FilteredData.Accelerometer.Y_Axis = AVG_IMU_ACC_Y.AVG_FilteredData;
 8000a5a:	4b5c      	ldr	r3, [pc, #368]	@ (8000bcc <IMU_Execute+0x2b0>)
 8000a5c:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	829a      	strh	r2, [r3, #20]
	ImuHandle->FilteredData.Accelerometer.Z_Axis = AVG_IMU_ACC_Z.AVG_FilteredData;
 8000a64:	4b5b      	ldr	r3, [pc, #364]	@ (8000bd4 <IMU_Execute+0x2b8>)
 8000a66:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	82da      	strh	r2, [r3, #22]
	ImuHandle->FilteredData.Gyroscope.X_Axis     = AVG_IMU_GYR_X.AVG_FilteredData;
 8000a6e:	4b5b      	ldr	r3, [pc, #364]	@ (8000bdc <IMU_Execute+0x2c0>)
 8000a70:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	831a      	strh	r2, [r3, #24]
	ImuHandle->FilteredData.Gyroscope.Y_Axis     = AVG_IMU_GYR_Y.AVG_FilteredData;
 8000a78:	4b5a      	ldr	r3, [pc, #360]	@ (8000be4 <IMU_Execute+0x2c8>)
 8000a7a:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	835a      	strh	r2, [r3, #26]
	ImuHandle->FilteredData.Gyroscope.Z_Axis     = AVG_IMU_GYR_Z.AVG_FilteredData;
 8000a82:	4b5a      	ldr	r3, [pc, #360]	@ (8000bec <IMU_Execute+0x2d0>)
 8000a84:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	839a      	strh	r2, [r3, #28]
	ImuHandle->FilteredData.Magnetometer.X_Axis  = AVG_IMU_MAG_X.AVG_FilteredData;
 8000a8c:	4b59      	ldr	r3, [pc, #356]	@ (8000bf4 <IMU_Execute+0x2d8>)
 8000a8e:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	83da      	strh	r2, [r3, #30]
	ImuHandle->FilteredData.Magnetometer.Y_Axis  = AVG_IMU_MAG_Y.AVG_FilteredData;
 8000a96:	4b59      	ldr	r3, [pc, #356]	@ (8000bfc <IMU_Execute+0x2e0>)
 8000a98:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	841a      	strh	r2, [r3, #32]
	ImuHandle->FilteredData.Magnetometer.Z_Axis  = AVG_IMU_MAG_Z.AVG_FilteredData;
 8000aa0:	4b58      	ldr	r3, [pc, #352]	@ (8000c04 <IMU_Execute+0x2e8>)
 8000aa2:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	845a      	strh	r2, [r3, #34]	@ 0x22


	ImuHandle->CalculatedData.Accelerometer.X_Axis = (float)(ImuHandle->FilteredData.Accelerometer.X_Axis / ImuHandle->CalcConst.ACC_1MpS2_LSB);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000ab0:	ee07 3a90 	vmov	s15, r3
 8000ab4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8000abe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	ImuHandle->CalculatedData.Accelerometer.Y_Axis = (float)(ImuHandle->FilteredData.Accelerometer.Y_Axis / ImuHandle->CalcConst.ACC_1MpS2_LSB);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000ace:	ee07 3a90 	vmov	s15, r3
 8000ad2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8000adc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	ImuHandle->CalculatedData.Accelerometer.Z_Axis = (float)(ImuHandle->FilteredData.Accelerometer.Z_Axis / ImuHandle->CalcConst.ACC_1MpS2_LSB);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000aec:	ee07 3a90 	vmov	s15, r3
 8000af0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8000afa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	ImuHandle->CalculatedData.Gyroscope.X_Axis     = (float)(ImuHandle->FilteredData.Gyroscope.X_Axis / ImuHandle->CalcConst.GYR_1RPS_LSB);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000b0a:	ee07 3a90 	vmov	s15, r3
 8000b0e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8000b18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	ImuHandle->CalculatedData.Gyroscope.Y_Axis     = (float)(ImuHandle->FilteredData.Gyroscope.Y_Axis / ImuHandle->CalcConst.GYR_1RPS_LSB);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8000b28:	ee07 3a90 	vmov	s15, r3
 8000b2c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8000b36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	ImuHandle->CalculatedData.Gyroscope.Z_Axis     = (float)(ImuHandle->FilteredData.Gyroscope.Z_Axis / ImuHandle->CalcConst.GYR_1RPS_LSB);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8000b46:	ee07 3a90 	vmov	s15, r3
 8000b4a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8000b54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	ImuHandle->CalculatedData.Magnetometer.X_Axis  = (float)((ImuHandle->FilteredData.Magnetometer.X_Axis / ImuHandle->CalcConst.MAG_1uT_LSB));
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000b64:	ee07 3a90 	vmov	s15, r3
 8000b68:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8000b72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	ImuHandle->CalculatedData.Magnetometer.Y_Axis  = (float)((ImuHandle->FilteredData.Magnetometer.Y_Axis / ImuHandle->CalcConst.MAG_1uT_LSB));
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000b82:	ee07 3a90 	vmov	s15, r3
 8000b86:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8000b90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	ImuHandle->CalculatedData.Magnetometer.Z_Axis  = (float)((ImuHandle->FilteredData.Magnetometer.Z_Axis / ImuHandle->CalcConst.MAG_1uT_LSB));
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8000ba0:	ee07 3a90 	vmov	s15, r3
 8000ba4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8000bae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
//	ImuHandle->CalculatedData.Gyroscope.Z_Axis     = (int16_t)IMU_1.AllRawData.Gyroscope.Z_Axis;
//	ImuHandle->CalculatedData.Magnetometer.X_Axis  = (int16_t)IMU_1.AllRawData.Magnetometer.X_Axis;
//	ImuHandle->CalculatedData.Magnetometer.Y_Axis  = (int16_t)IMU_1.AllRawData.Magnetometer.Y_Axis;
//	ImuHandle->CalculatedData.Magnetometer.Z_Axis  = (int16_t)IMU_1.AllRawData.Magnetometer.Z_Axis;

}
 8000bb8:	bf00      	nop
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000128 	.word	0x20000128
 8000bc4:	2000002c 	.word	0x2000002c
 8000bc8:	2000013c 	.word	0x2000013c
 8000bcc:	20000048 	.word	0x20000048
 8000bd0:	20000150 	.word	0x20000150
 8000bd4:	20000064 	.word	0x20000064
 8000bd8:	20000164 	.word	0x20000164
 8000bdc:	20000080 	.word	0x20000080
 8000be0:	20000178 	.word	0x20000178
 8000be4:	2000009c 	.word	0x2000009c
 8000be8:	2000018c 	.word	0x2000018c
 8000bec:	200000b8 	.word	0x200000b8
 8000bf0:	200001a0 	.word	0x200001a0
 8000bf4:	200000d4 	.word	0x200000d4
 8000bf8:	200001b4 	.word	0x200001b4
 8000bfc:	200000f0 	.word	0x200000f0
 8000c00:	200001c8 	.word	0x200001c8
 8000c04:	2000010c 	.word	0x2000010c

08000c08 <IMU_PopulateData>:

void IMU_PopulateData(IMU_TypeDef_T *ImuHandle, uint8_t ImuSensorNo){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	460b      	mov	r3, r1
 8000c12:	70fb      	strb	r3, [r7, #3]
	BNO055_Sensor_T *imuSensor;
	imuSensor = IMU_GetSensorHandle(ImuSensorNo);
 8000c14:	78fb      	ldrb	r3, [r7, #3]
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 f832 	bl	8000c80 <IMU_GetSensorHandle>
 8000c1c:	60f8      	str	r0, [r7, #12]

	ImuHandle->AllRawData.Accelerometer.X_Axis = (int16_t)imuSensor->ImuData.ACC_X;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	801a      	strh	r2, [r3, #0]
	ImuHandle->AllRawData.Accelerometer.Y_Axis = (int16_t)imuSensor->ImuData.ACC_Y;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	805a      	strh	r2, [r3, #2]
	ImuHandle->AllRawData.Accelerometer.Z_Axis = (int16_t)imuSensor->ImuData.ACC_Z;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	809a      	strh	r2, [r3, #4]
	ImuHandle->AllRawData.Gyroscope.X_Axis     = imuSensor->ImuData.GYR_X;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	80da      	strh	r2, [r3, #6]
	ImuHandle->AllRawData.Gyroscope.Y_Axis     = imuSensor->ImuData.GYR_Y;
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	811a      	strh	r2, [r3, #8]
	ImuHandle->AllRawData.Gyroscope.Z_Axis     = imuSensor->ImuData.GYR_Z;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	815a      	strh	r2, [r3, #10]
	ImuHandle->AllRawData.Magnetometer.X_Axis  = imuSensor->ImuData.MAG_X;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	819a      	strh	r2, [r3, #12]
	ImuHandle->AllRawData.Magnetometer.Y_Axis  = imuSensor->ImuData.MAG_Y;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	81da      	strh	r2, [r3, #14]
	ImuHandle->AllRawData.Magnetometer.Z_Axis  = imuSensor->ImuData.MAG_Z;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	821a      	strh	r2, [r3, #16]
}
 8000c78:	bf00      	nop
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <IMU_GetSensorHandle>:

BNO055_Sensor_T* IMU_GetSensorHandle(uint8_t sensorNo){
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
	switch(sensorNo){
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	2b03      	cmp	r3, #3
 8000c8e:	d00a      	beq.n	8000ca6 <IMU_GetSensorHandle+0x26>
 8000c90:	2b03      	cmp	r3, #3
 8000c92:	dc06      	bgt.n	8000ca2 <IMU_GetSensorHandle+0x22>
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d002      	beq.n	8000c9e <IMU_GetSensorHandle+0x1e>
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d006      	beq.n	8000caa <IMU_GetSensorHandle+0x2a>
 8000c9c:	e001      	b.n	8000ca2 <IMU_GetSensorHandle+0x22>
		case 1 : return &BNO055_Sensor_1;break;
 8000c9e:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <IMU_GetSensorHandle+0x38>)
 8000ca0:	e004      	b.n	8000cac <IMU_GetSensorHandle+0x2c>
		case 2 : break;
		case 3 : break;
		default : return &BNO055_Sensor_1;
 8000ca2:	4b05      	ldr	r3, [pc, #20]	@ (8000cb8 <IMU_GetSensorHandle+0x38>)
 8000ca4:	e002      	b.n	8000cac <IMU_GetSensorHandle+0x2c>
		case 3 : break;
 8000ca6:	bf00      	nop
 8000ca8:	e000      	b.n	8000cac <IMU_GetSensorHandle+0x2c>
		case 2 : break;
 8000caa:	bf00      	nop
	}
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	20000248 	.word	0x20000248

08000cbc <BNO055_Init>:
BNO055_Sensor_T BNO055_Sensor_1;

/** Brief description which ends at this dot. Details follow
 *  here.
 */
void BNO055_Init(BNO055_Sensor_T *handle, uint8_t I2C_No, uint8_t I2C_Adress, void* ResetGPIOPort, uint16_t ResetGPIOPin){
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	72fb      	strb	r3, [r7, #11]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	72bb      	strb	r3, [r7, #10]
	handle->I2C_No = I2C_No;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	7afa      	ldrb	r2, [r7, #11]
 8000cd2:	701a      	strb	r2, [r3, #0]
	handle->Chip_I2C_Address = I2C_Adress;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	7aba      	ldrb	r2, [r7, #10]
 8000cd8:	705a      	strb	r2, [r3, #1]
	handle->ResetPort = ResetGPIOPort;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	605a      	str	r2, [r3, #4]
	handle->ResetPin = ResetGPIOPin;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	8b3a      	ldrh	r2, [r7, #24]
 8000ce4:	811a      	strh	r2, [r3, #8]
	handle->CalcConst.ACC_1MpS2_LSB = 100;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	2264      	movs	r2, #100	@ 0x64
 8000cea:	845a      	strh	r2, [r3, #34]	@ 0x22
	handle->CalcConst.GYR_1RPS_LSB = 900;
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f44f 7261 	mov.w	r2, #900	@ 0x384
 8000cf2:	84da      	strh	r2, [r3, #38]	@ 0x26
	handle->CalcConst.MAG_1uT_LSB = 16;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2210      	movs	r2, #16
 8000cf8:	849a      	strh	r2, [r3, #36]	@ 0x24
	handle->CalcConst.ACCRange_G = 4;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	2204      	movs	r2, #4
 8000cfe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	handle->CalcConst.GYRRange_DPS = 500;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000d08:	855a      	strh	r2, [r3, #42]	@ 0x2a

	BNO055_Reset(handle);
 8000d0a:	68f8      	ldr	r0, [r7, #12]
 8000d0c:	f000 f843 	bl	8000d96 <BNO055_Reset>

	BNO055_Set_OperationMode(handle, BNO055_DATA_OPR_MODE_NDOF);
 8000d10:	210c      	movs	r1, #12
 8000d12:	68f8      	ldr	r0, [r7, #12]
 8000d14:	f000 f85e 	bl	8000dd4 <BNO055_Set_OperationMode>
	HAL_Delay(25);
 8000d18:	2019      	movs	r0, #25
 8000d1a:	f000 fe9d 	bl	8001a58 <HAL_Delay>
//    		BNO055_GetCalibrationData(handle);
//    		break;
//    	}
//    }

    BNO055_Set_OperationMode(handle, BNO055_DATA_OPR_MODE_OPR);
 8000d1e:	2100      	movs	r1, #0
 8000d20:	68f8      	ldr	r0, [r7, #12]
 8000d22:	f000 f857 	bl	8000dd4 <BNO055_Set_OperationMode>
    HAL_Delay(25);
 8000d26:	2019      	movs	r0, #25
 8000d28:	f000 fe96 	bl	8001a58 <HAL_Delay>

	BNO055_Set_PowerMode(handle, BNO055_DATA_PWR_MODE_NORMAL);
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	68f8      	ldr	r0, [r7, #12]
 8000d30:	f000 f888 	bl	8000e44 <BNO055_Set_PowerMode>
//	BNO055_GetCalibrationData(handle);
	BNO055_Set_DataUnit(handle, BNO055_DATA_UNIT_ACC_mG | BNO055_DATA_UNIT_ORI_AND);
 8000d34:	2181      	movs	r1, #129	@ 0x81
 8000d36:	68f8      	ldr	r0, [r7, #12]
 8000d38:	f000 fc01 	bl	800153e <BNO055_Set_DataUnit>

	BNO055_Get_DataUnit(handle);
 8000d3c:	68f8      	ldr	r0, [r7, #12]
 8000d3e:	f000 fc29 	bl	8001594 <BNO055_Get_DataUnit>

	BNO055_Set_ACC_Mode(handle, BNO055_DATA_ACC_RANGE_4G | BNO055_DATA_ACC_BW_62p5Hz |  BNO055_DATA_ACC_MODE_NORMAL);
 8000d42:	210d      	movs	r1, #13
 8000d44:	68f8      	ldr	r0, [r7, #12]
 8000d46:	f000 f8b5 	bl	8000eb4 <BNO055_Set_ACC_Mode>

	BNO055_Get_ACC_Mode(handle);
 8000d4a:	68f8      	ldr	r0, [r7, #12]
 8000d4c:	f000 f8ea 	bl	8000f24 <BNO055_Get_ACC_Mode>

	BNO055_Set_MAG_Mode(handle, BNO055_DATA_MAG_BW_10Hz | BNO055_DATA_MAG_MODE_HIGHACCURACY | BNO055_DATA_MAG_PWRMODE_NORMAL);
 8000d50:	211b      	movs	r1, #27
 8000d52:	68f8      	ldr	r0, [r7, #12]
 8000d54:	f000 f91c 	bl	8000f90 <BNO055_Set_MAG_Mode>

	BNO055_Set_GYR_Mode_1(handle, BNO055_DATA_GYR_RANGE_500DPS | BNO055_DATA_GYR_BW_12Hz);
 8000d58:	212a      	movs	r1, #42	@ 0x2a
 8000d5a:	68f8      	ldr	r0, [r7, #12]
 8000d5c:	f000 f950 	bl	8001000 <BNO055_Set_GYR_Mode_1>

	BNO055_Set_GYR_Mode_2(handle, BNO055_DATA_GYR_MODE_NORMAL);
 8000d60:	2100      	movs	r1, #0
 8000d62:	68f8      	ldr	r0, [r7, #12]
 8000d64:	f000 f984 	bl	8001070 <BNO055_Set_GYR_Mode_2>


	BNO055_Set_OperationMode(handle, BNO055_DATA_OPR_MODE_AMG);
 8000d68:	2107      	movs	r1, #7
 8000d6a:	68f8      	ldr	r0, [r7, #12]
 8000d6c:	f000 f832 	bl	8000dd4 <BNO055_Set_OperationMode>

	HAL_Delay(100);
 8000d70:	2064      	movs	r0, #100	@ 0x64
 8000d72:	f000 fe71 	bl	8001a58 <HAL_Delay>

	BNO055_Get_ChipID(handle);
 8000d76:	68f8      	ldr	r0, [r7, #12]
 8000d78:	f000 f9b2 	bl	80010e0 <BNO055_Get_ChipID>
	BNO055_Get_ACC_ID(handle);
 8000d7c:	68f8      	ldr	r0, [r7, #12]
 8000d7e:	f000 f9f0 	bl	8001162 <BNO055_Get_ACC_ID>
	BNO055_Get_GYR_ID(handle);
 8000d82:	68f8      	ldr	r0, [r7, #12]
 8000d84:	f000 fa2e 	bl	80011e4 <BNO055_Get_GYR_ID>
	BNO055_Get_MAG_ID(handle);
 8000d88:	68f8      	ldr	r0, [r7, #12]
 8000d8a:	f000 fa6d 	bl	8001268 <BNO055_Get_MAG_ID>
}
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <BNO055_Reset>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
void BNO055_Reset(BNO055_Sensor_T *handle){
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(handle->ResetPort, handle->ResetPin, RESET);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6858      	ldr	r0, [r3, #4]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	891b      	ldrh	r3, [r3, #8]
 8000da6:	2200      	movs	r2, #0
 8000da8:	4619      	mov	r1, r3
 8000daa:	f001 fb2b 	bl	8002404 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000dae:	2064      	movs	r0, #100	@ 0x64
 8000db0:	f000 fe52 	bl	8001a58 <HAL_Delay>
	HAL_GPIO_WritePin(handle->ResetPort, handle->ResetPin, SET);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6858      	ldr	r0, [r3, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	891b      	ldrh	r3, [r3, #8]
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	f001 fb20 	bl	8002404 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000dc4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000dc8:	f000 fe46 	bl	8001a58 <HAL_Delay>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <BNO055_Set_OperationMode>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_OperationMode(BNO055_Sensor_T *handle, uint8_t mode){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af02      	add	r7, sp, #8
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	460b      	mov	r3, r1
 8000dde:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2], res;
	TxBuff[0] = BNO055_REG_ADDRESS_OPR_MODE;
 8000de0:	233d      	movs	r3, #61	@ 0x3d
 8000de2:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = mode;
 8000de4:	78fb      	ldrb	r3, [r7, #3]
 8000de6:	737b      	strb	r3, [r7, #13]

    if(!BNO055_Get_PageID(handle)){
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f000 fc02 	bl	80015f2 <BNO055_Get_PageID>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d121      	bne.n	8000e38 <BNO055_Set_OperationMode+0x64>
    	if(!handle->PageID){
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d10a      	bne.n	8000e14 <BNO055_Set_OperationMode+0x40>
    		return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8000dfe:	f107 010c 	add.w	r1, r7, #12
 8000e02:	2300      	movs	r3, #0
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	2300      	movs	r3, #0
 8000e08:	2202      	movs	r2, #2
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f000 fc50 	bl	80016b0 <BNO055_SendReceive>
 8000e10:	4603      	mov	r3, r0
 8000e12:	e013      	b.n	8000e3c <BNO055_Set_OperationMode+0x68>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0)){
 8000e14:	2100      	movs	r1, #0
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f000 fc09 	bl	800162e <BNO055_Set_PageID>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d10c      	bne.n	8000e3c <BNO055_Set_OperationMode+0x68>
    			return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8000e22:	f107 010c 	add.w	r1, r7, #12
 8000e26:	2300      	movs	r3, #0
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f000 fc3e 	bl	80016b0 <BNO055_SendReceive>
 8000e34:	4603      	mov	r3, r0
 8000e36:	e001      	b.n	8000e3c <BNO055_Set_OperationMode+0x68>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e7ff      	b.n	8000e3c <BNO055_Set_OperationMode+0x68>
    }
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <BNO055_Set_PowerMode>:
}

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_PowerMode(BNO055_Sensor_T *handle, uint8_t mode){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af02      	add	r7, sp, #8
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = BNO055_REG_ADDRESS_PWR_MODE;
 8000e50:	233e      	movs	r3, #62	@ 0x3e
 8000e52:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = mode;
 8000e54:	78fb      	ldrb	r3, [r7, #3]
 8000e56:	737b      	strb	r3, [r7, #13]

    if(!BNO055_Get_PageID(handle)){
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f000 fbca 	bl	80015f2 <BNO055_Get_PageID>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d121      	bne.n	8000ea8 <BNO055_Set_PowerMode+0x64>
    	if(!handle->PageID){
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d10a      	bne.n	8000e84 <BNO055_Set_PowerMode+0x40>
    		return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8000e6e:	f107 010c 	add.w	r1, r7, #12
 8000e72:	2300      	movs	r3, #0
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	2300      	movs	r3, #0
 8000e78:	2202      	movs	r2, #2
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f000 fc18 	bl	80016b0 <BNO055_SendReceive>
 8000e80:	4603      	mov	r3, r0
 8000e82:	e013      	b.n	8000eac <BNO055_Set_PowerMode+0x68>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0)){
 8000e84:	2100      	movs	r1, #0
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f000 fbd1 	bl	800162e <BNO055_Set_PageID>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d10c      	bne.n	8000eac <BNO055_Set_PowerMode+0x68>
    			return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8000e92:	f107 010c 	add.w	r1, r7, #12
 8000e96:	2300      	movs	r3, #0
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f000 fc06 	bl	80016b0 <BNO055_SendReceive>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	e001      	b.n	8000eac <BNO055_Set_PowerMode+0x68>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e7ff      	b.n	8000eac <BNO055_Set_PowerMode+0x68>
    }
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <BNO055_Set_ACC_Mode>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_ACC_Mode(BNO055_Sensor_T *handle, uint8_t mode){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af02      	add	r7, sp, #8
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = BNO055_REG_ADDRESS_ACC_CONFIG;
 8000ec0:	2308      	movs	r3, #8
 8000ec2:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = mode;
 8000ec4:	78fb      	ldrb	r3, [r7, #3]
 8000ec6:	737b      	strb	r3, [r7, #13]

    if(!BNO055_Get_PageID(handle)){
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f000 fb92 	bl	80015f2 <BNO055_Get_PageID>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d121      	bne.n	8000f18 <BNO055_Set_ACC_Mode+0x64>
    	if(handle->PageID){
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d00a      	beq.n	8000ef4 <BNO055_Set_ACC_Mode+0x40>
    		return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8000ede:	f107 010c 	add.w	r1, r7, #12
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	2202      	movs	r2, #2
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f000 fbe0 	bl	80016b0 <BNO055_SendReceive>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	e013      	b.n	8000f1c <BNO055_Set_ACC_Mode+0x68>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_1)){
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f000 fb99 	bl	800162e <BNO055_Set_PageID>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d10c      	bne.n	8000f1c <BNO055_Set_ACC_Mode+0x68>
    			return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8000f02:	f107 010c 	add.w	r1, r7, #12
 8000f06:	2300      	movs	r3, #0
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f000 fbce 	bl	80016b0 <BNO055_SendReceive>
 8000f14:	4603      	mov	r3, r0
 8000f16:	e001      	b.n	8000f1c <BNO055_Set_ACC_Mode+0x68>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e7ff      	b.n	8000f1c <BNO055_Set_ACC_Mode+0x68>
    }
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <BNO055_Get_ACC_Mode>:


/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_ACC_Mode(BNO055_Sensor_T *handle){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af02      	add	r7, sp, #8
 8000f2a:	6078      	str	r0, [r7, #4]
	uint8_t TxBuff[1], RxBuff[1];
	TxBuff[0] = BNO055_REG_ADDRESS_ACC_CONFIG;
 8000f2c:	2308      	movs	r3, #8
 8000f2e:	733b      	strb	r3, [r7, #12]

    if(!BNO055_Get_PageID(handle)){
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f000 fb5e 	bl	80015f2 <BNO055_Get_PageID>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d123      	bne.n	8000f84 <BNO055_Get_ACC_Mode+0x60>
    	if(handle->PageID){
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d00b      	beq.n	8000f5e <BNO055_Get_ACC_Mode+0x3a>
    		return BNO055_SendReceive(handle,TxBuff, 1, RxBuff, 1);
 8000f46:	f107 0308 	add.w	r3, r7, #8
 8000f4a:	f107 010c 	add.w	r1, r7, #12
 8000f4e:	2201      	movs	r2, #1
 8000f50:	9200      	str	r2, [sp, #0]
 8000f52:	2201      	movs	r2, #1
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f000 fbab 	bl	80016b0 <BNO055_SendReceive>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	e014      	b.n	8000f88 <BNO055_Get_ACC_Mode+0x64>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_1)){
 8000f5e:	2101      	movs	r1, #1
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f000 fb64 	bl	800162e <BNO055_Set_PageID>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d10d      	bne.n	8000f88 <BNO055_Get_ACC_Mode+0x64>
    			return BNO055_SendReceive(handle,TxBuff, 1, RxBuff, 1);
 8000f6c:	f107 0308 	add.w	r3, r7, #8
 8000f70:	f107 010c 	add.w	r1, r7, #12
 8000f74:	2201      	movs	r2, #1
 8000f76:	9200      	str	r2, [sp, #0]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 fb98 	bl	80016b0 <BNO055_SendReceive>
 8000f80:	4603      	mov	r3, r0
 8000f82:	e001      	b.n	8000f88 <BNO055_Get_ACC_Mode+0x64>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e7ff      	b.n	8000f88 <BNO055_Get_ACC_Mode+0x64>
    }
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <BNO055_Set_MAG_Mode>:


/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_MAG_Mode(BNO055_Sensor_T *handle, uint8_t mode){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af02      	add	r7, sp, #8
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = BNO055_REG_ADDRESS_MAG_CONFIG;
 8000f9c:	2309      	movs	r3, #9
 8000f9e:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = mode;
 8000fa0:	78fb      	ldrb	r3, [r7, #3]
 8000fa2:	737b      	strb	r3, [r7, #13]

    if(!BNO055_Get_PageID(handle)){
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f000 fb24 	bl	80015f2 <BNO055_Get_PageID>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d121      	bne.n	8000ff4 <BNO055_Set_MAG_Mode+0x64>
    	if(handle->PageID){
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d00a      	beq.n	8000fd0 <BNO055_Set_MAG_Mode+0x40>
    		return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8000fba:	f107 010c 	add.w	r1, r7, #12
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f000 fb72 	bl	80016b0 <BNO055_SendReceive>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	e013      	b.n	8000ff8 <BNO055_Set_MAG_Mode+0x68>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_1)){
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 fb2b 	bl	800162e <BNO055_Set_PageID>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d10c      	bne.n	8000ff8 <BNO055_Set_MAG_Mode+0x68>
    			return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8000fde:	f107 010c 	add.w	r1, r7, #12
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	2202      	movs	r2, #2
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f000 fb60 	bl	80016b0 <BNO055_SendReceive>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	e001      	b.n	8000ff8 <BNO055_Set_MAG_Mode+0x68>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e7ff      	b.n	8000ff8 <BNO055_Set_MAG_Mode+0x68>
    }
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <BNO055_Set_GYR_Mode_1>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_GYR_Mode_1(BNO055_Sensor_T *handle, uint8_t mode){
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af02      	add	r7, sp, #8
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = BNO055_REG_ADDRESS_GYR_CONFIG_1;
 800100c:	230a      	movs	r3, #10
 800100e:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = mode;
 8001010:	78fb      	ldrb	r3, [r7, #3]
 8001012:	737b      	strb	r3, [r7, #13]

    if(!BNO055_Get_PageID(handle)){
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f000 faec 	bl	80015f2 <BNO055_Get_PageID>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d121      	bne.n	8001064 <BNO055_Set_GYR_Mode_1+0x64>
    	if(handle->PageID){
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001026:	2b00      	cmp	r3, #0
 8001028:	d00a      	beq.n	8001040 <BNO055_Set_GYR_Mode_1+0x40>
    		return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 800102a:	f107 010c 	add.w	r1, r7, #12
 800102e:	2300      	movs	r3, #0
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2300      	movs	r3, #0
 8001034:	2202      	movs	r2, #2
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f000 fb3a 	bl	80016b0 <BNO055_SendReceive>
 800103c:	4603      	mov	r3, r0
 800103e:	e013      	b.n	8001068 <BNO055_Set_GYR_Mode_1+0x68>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_1)){
 8001040:	2101      	movs	r1, #1
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f000 faf3 	bl	800162e <BNO055_Set_PageID>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d10c      	bne.n	8001068 <BNO055_Set_GYR_Mode_1+0x68>
    			return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 800104e:	f107 010c 	add.w	r1, r7, #12
 8001052:	2300      	movs	r3, #0
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	2300      	movs	r3, #0
 8001058:	2202      	movs	r2, #2
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f000 fb28 	bl	80016b0 <BNO055_SendReceive>
 8001060:	4603      	mov	r3, r0
 8001062:	e001      	b.n	8001068 <BNO055_Set_GYR_Mode_1+0x68>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e7ff      	b.n	8001068 <BNO055_Set_GYR_Mode_1+0x68>
    }
}
 8001068:	4618      	mov	r0, r3
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <BNO055_Set_GYR_Mode_2>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_GYR_Mode_2(BNO055_Sensor_T *handle, uint8_t mode){
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af02      	add	r7, sp, #8
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = BNO055_REG_ADDRESS_GYR_CONFIG_2;
 800107c:	230b      	movs	r3, #11
 800107e:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = mode;
 8001080:	78fb      	ldrb	r3, [r7, #3]
 8001082:	737b      	strb	r3, [r7, #13]

    if(!BNO055_Get_PageID(handle)){
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 fab4 	bl	80015f2 <BNO055_Get_PageID>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d121      	bne.n	80010d4 <BNO055_Set_GYR_Mode_2+0x64>
    	if(handle->PageID){
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001096:	2b00      	cmp	r3, #0
 8001098:	d00a      	beq.n	80010b0 <BNO055_Set_GYR_Mode_2+0x40>
    		return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 800109a:	f107 010c 	add.w	r1, r7, #12
 800109e:	2300      	movs	r3, #0
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	2300      	movs	r3, #0
 80010a4:	2202      	movs	r2, #2
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 fb02 	bl	80016b0 <BNO055_SendReceive>
 80010ac:	4603      	mov	r3, r0
 80010ae:	e013      	b.n	80010d8 <BNO055_Set_GYR_Mode_2+0x68>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_1)){
 80010b0:	2101      	movs	r1, #1
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 fabb 	bl	800162e <BNO055_Set_PageID>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d10c      	bne.n	80010d8 <BNO055_Set_GYR_Mode_2+0x68>
    			return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 80010be:	f107 010c 	add.w	r1, r7, #12
 80010c2:	2300      	movs	r3, #0
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2300      	movs	r3, #0
 80010c8:	2202      	movs	r2, #2
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f000 faf0 	bl	80016b0 <BNO055_SendReceive>
 80010d0:	4603      	mov	r3, r0
 80010d2:	e001      	b.n	80010d8 <BNO055_Set_GYR_Mode_2+0x68>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e7ff      	b.n	80010d8 <BNO055_Set_GYR_Mode_2+0x68>
    }
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <BNO055_Get_ChipID>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_ChipID(BNO055_Sensor_T *handle){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[1];
	BNO055_ReturnTypeDef_T res= BNO055_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	73fb      	strb	r3, [r7, #15]
	Txbuff[0] = BNO055_REG_ADDRESS_CHIP_ID;
 80010ec:	2300      	movs	r3, #0
 80010ee:	733b      	strb	r3, [r7, #12]

    if(!BNO055_Get_PageID(handle)){
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f000 fa7e 	bl	80015f2 <BNO055_Get_PageID>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d125      	bne.n	8001148 <BNO055_Get_ChipID+0x68>
    	if(!handle->PageID){
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001102:	2b00      	cmp	r3, #0
 8001104:	d10c      	bne.n	8001120 <BNO055_Get_ChipID+0x40>
    		res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 8001106:	f107 0308 	add.w	r3, r7, #8
 800110a:	f107 010c 	add.w	r1, r7, #12
 800110e:	2201      	movs	r2, #1
 8001110:	9200      	str	r2, [sp, #0]
 8001112:	2201      	movs	r2, #1
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f000 facb 	bl	80016b0 <BNO055_SendReceive>
 800111a:	4603      	mov	r3, r0
 800111c:	73fb      	strb	r3, [r7, #15]
 800111e:	e015      	b.n	800114c <BNO055_Get_ChipID+0x6c>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0)){
 8001120:	2100      	movs	r1, #0
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f000 fa83 	bl	800162e <BNO055_Set_PageID>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d10e      	bne.n	800114c <BNO055_Get_ChipID+0x6c>
    			res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 800112e:	f107 0308 	add.w	r3, r7, #8
 8001132:	f107 010c 	add.w	r1, r7, #12
 8001136:	2201      	movs	r2, #1
 8001138:	9200      	str	r2, [sp, #0]
 800113a:	2201      	movs	r2, #1
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f000 fab7 	bl	80016b0 <BNO055_SendReceive>
 8001142:	4603      	mov	r3, r0
 8001144:	73fb      	strb	r3, [r7, #15]
 8001146:	e001      	b.n	800114c <BNO055_Get_ChipID+0x6c>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e006      	b.n	800115a <BNO055_Get_ChipID+0x7a>
    }

    if(!res)
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d102      	bne.n	8001158 <BNO055_Get_ChipID+0x78>
     	handle->IDs.CHIP_ID = RxBuff[0];
 8001152:	7a3a      	ldrb	r2, [r7, #8]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	779a      	strb	r2, [r3, #30]

     return res;
 8001158:	7bfb      	ldrb	r3, [r7, #15]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <BNO055_Get_ACC_ID>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_ACC_ID(BNO055_Sensor_T *handle){
 8001162:	b580      	push	{r7, lr}
 8001164:	b086      	sub	sp, #24
 8001166:	af02      	add	r7, sp, #8
 8001168:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[1];
	BNO055_ReturnTypeDef_T res= BNO055_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	73fb      	strb	r3, [r7, #15]
	Txbuff[0] = BNO055_REG_ADDRESS_ACC_ID;
 800116e:	2301      	movs	r3, #1
 8001170:	733b      	strb	r3, [r7, #12]

    if(!BNO055_Get_PageID(handle)){
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f000 fa3d 	bl	80015f2 <BNO055_Get_PageID>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d125      	bne.n	80011ca <BNO055_Get_ACC_ID+0x68>
    	if(!handle->PageID){
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001184:	2b00      	cmp	r3, #0
 8001186:	d10c      	bne.n	80011a2 <BNO055_Get_ACC_ID+0x40>
    		res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 8001188:	f107 0308 	add.w	r3, r7, #8
 800118c:	f107 010c 	add.w	r1, r7, #12
 8001190:	2201      	movs	r2, #1
 8001192:	9200      	str	r2, [sp, #0]
 8001194:	2201      	movs	r2, #1
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 fa8a 	bl	80016b0 <BNO055_SendReceive>
 800119c:	4603      	mov	r3, r0
 800119e:	73fb      	strb	r3, [r7, #15]
 80011a0:	e015      	b.n	80011ce <BNO055_Get_ACC_ID+0x6c>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0)){
 80011a2:	2100      	movs	r1, #0
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f000 fa42 	bl	800162e <BNO055_Set_PageID>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d10e      	bne.n	80011ce <BNO055_Get_ACC_ID+0x6c>
    			res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 80011b0:	f107 0308 	add.w	r3, r7, #8
 80011b4:	f107 010c 	add.w	r1, r7, #12
 80011b8:	2201      	movs	r2, #1
 80011ba:	9200      	str	r2, [sp, #0]
 80011bc:	2201      	movs	r2, #1
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f000 fa76 	bl	80016b0 <BNO055_SendReceive>
 80011c4:	4603      	mov	r3, r0
 80011c6:	73fb      	strb	r3, [r7, #15]
 80011c8:	e001      	b.n	80011ce <BNO055_Get_ACC_ID+0x6c>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e006      	b.n	80011dc <BNO055_Get_ACC_ID+0x7a>
    }

    if(!res)
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d102      	bne.n	80011da <BNO055_Get_ACC_ID+0x78>
     	handle->IDs.ACC_ID = RxBuff[0];
 80011d4:	7a3a      	ldrb	r2, [r7, #8]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	77da      	strb	r2, [r3, #31]

     return res;
 80011da:	7bfb      	ldrb	r3, [r7, #15]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <BNO055_Get_GYR_ID>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_GYR_ID(BNO055_Sensor_T *handle){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af02      	add	r7, sp, #8
 80011ea:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[1];
	BNO055_ReturnTypeDef_T res= BNO055_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	73fb      	strb	r3, [r7, #15]
	Txbuff[0] = BNO055_REG_ADDRESS_GYR_ID;
 80011f0:	2303      	movs	r3, #3
 80011f2:	733b      	strb	r3, [r7, #12]

    if(!BNO055_Get_PageID(handle)){
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 f9fc 	bl	80015f2 <BNO055_Get_PageID>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d125      	bne.n	800124c <BNO055_Get_GYR_ID+0x68>
    	if(!handle->PageID){
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001206:	2b00      	cmp	r3, #0
 8001208:	d10c      	bne.n	8001224 <BNO055_Get_GYR_ID+0x40>
    		res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 800120a:	f107 0308 	add.w	r3, r7, #8
 800120e:	f107 010c 	add.w	r1, r7, #12
 8001212:	2201      	movs	r2, #1
 8001214:	9200      	str	r2, [sp, #0]
 8001216:	2201      	movs	r2, #1
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f000 fa49 	bl	80016b0 <BNO055_SendReceive>
 800121e:	4603      	mov	r3, r0
 8001220:	73fb      	strb	r3, [r7, #15]
 8001222:	e015      	b.n	8001250 <BNO055_Get_GYR_ID+0x6c>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0)){
 8001224:	2100      	movs	r1, #0
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 fa01 	bl	800162e <BNO055_Set_PageID>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d10e      	bne.n	8001250 <BNO055_Get_GYR_ID+0x6c>
    			res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 8001232:	f107 0308 	add.w	r3, r7, #8
 8001236:	f107 010c 	add.w	r1, r7, #12
 800123a:	2201      	movs	r2, #1
 800123c:	9200      	str	r2, [sp, #0]
 800123e:	2201      	movs	r2, #1
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f000 fa35 	bl	80016b0 <BNO055_SendReceive>
 8001246:	4603      	mov	r3, r0
 8001248:	73fb      	strb	r3, [r7, #15]
 800124a:	e001      	b.n	8001250 <BNO055_Get_GYR_ID+0x6c>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e007      	b.n	8001260 <BNO055_Get_GYR_ID+0x7c>
    }

    if(!res)
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d103      	bne.n	800125e <BNO055_Get_GYR_ID+0x7a>
    	handle->IDs.GYR_ID = RxBuff[0];
 8001256:	7a3a      	ldrb	r2, [r7, #8]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    return res;
 800125e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <BNO055_Get_MAG_ID>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_MAG_ID(BNO055_Sensor_T *handle){
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af02      	add	r7, sp, #8
 800126e:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[1];
	BNO055_ReturnTypeDef_T res= BNO055_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	73fb      	strb	r3, [r7, #15]
	Txbuff[0] = BNO055_REG_ADDRESS_MAG_ID;
 8001274:	2302      	movs	r3, #2
 8001276:	733b      	strb	r3, [r7, #12]

    if(!BNO055_Get_PageID(handle)){
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f000 f9ba 	bl	80015f2 <BNO055_Get_PageID>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d125      	bne.n	80012d0 <BNO055_Get_MAG_ID+0x68>
    	if(!handle->PageID){
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10c      	bne.n	80012a8 <BNO055_Get_MAG_ID+0x40>
    		res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 800128e:	f107 0308 	add.w	r3, r7, #8
 8001292:	f107 010c 	add.w	r1, r7, #12
 8001296:	2201      	movs	r2, #1
 8001298:	9200      	str	r2, [sp, #0]
 800129a:	2201      	movs	r2, #1
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 fa07 	bl	80016b0 <BNO055_SendReceive>
 80012a2:	4603      	mov	r3, r0
 80012a4:	73fb      	strb	r3, [r7, #15]
 80012a6:	e015      	b.n	80012d4 <BNO055_Get_MAG_ID+0x6c>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0)){
 80012a8:	2100      	movs	r1, #0
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 f9bf 	bl	800162e <BNO055_Set_PageID>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10e      	bne.n	80012d4 <BNO055_Get_MAG_ID+0x6c>
    			res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 80012b6:	f107 0308 	add.w	r3, r7, #8
 80012ba:	f107 010c 	add.w	r1, r7, #12
 80012be:	2201      	movs	r2, #1
 80012c0:	9200      	str	r2, [sp, #0]
 80012c2:	2201      	movs	r2, #1
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 f9f3 	bl	80016b0 <BNO055_SendReceive>
 80012ca:	4603      	mov	r3, r0
 80012cc:	73fb      	strb	r3, [r7, #15]
 80012ce:	e001      	b.n	80012d4 <BNO055_Get_MAG_ID+0x6c>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e007      	b.n	80012e4 <BNO055_Get_MAG_ID+0x7c>
    }

    if(!res)
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d103      	bne.n	80012e2 <BNO055_Get_MAG_ID+0x7a>
        handle->IDs.MAG_ID = RxBuff[0];
 80012da:	7a3a      	ldrb	r2, [r7, #8]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f883 2020 	strb.w	r2, [r3, #32]

    return res;
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <BNO055_Get_ACC_Data>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_ACC_Data(BNO055_Sensor_T *handle){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af02      	add	r7, sp, #8
 80012f2:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[6];
	BNO055_ReturnTypeDef_T res = BNO055_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	75fb      	strb	r3, [r7, #23]
	Txbuff[0] = BNO055_REG_ADDRESS_ACC_X_DATA_LSB;
 80012f8:	2308      	movs	r3, #8
 80012fa:	753b      	strb	r3, [r7, #20]

	BNO055_Get_PageID(handle);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f000 f978 	bl	80015f2 <BNO055_Get_PageID>
	if(!handle->PageID)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001308:	2b00      	cmp	r3, #0
 800130a:	d10c      	bne.n	8001326 <BNO055_Get_ACC_Data+0x3a>
		res =BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 6);
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	f107 0114 	add.w	r1, r7, #20
 8001314:	2206      	movs	r2, #6
 8001316:	9200      	str	r2, [sp, #0]
 8001318:	2201      	movs	r2, #1
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 f9c8 	bl	80016b0 <BNO055_SendReceive>
 8001320:	4603      	mov	r3, r0
 8001322:	75fb      	strb	r3, [r7, #23]
 8001324:	e012      	b.n	800134c <BNO055_Get_ACC_Data+0x60>
	else{
		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0))
 8001326:	2100      	movs	r1, #0
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f000 f980 	bl	800162e <BNO055_Set_PageID>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d10b      	bne.n	800134c <BNO055_Get_ACC_Data+0x60>
			res =BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 6);
 8001334:	f107 030c 	add.w	r3, r7, #12
 8001338:	f107 0114 	add.w	r1, r7, #20
 800133c:	2206      	movs	r2, #6
 800133e:	9200      	str	r2, [sp, #0]
 8001340:	2201      	movs	r2, #1
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 f9b4 	bl	80016b0 <BNO055_SendReceive>
 8001348:	4603      	mov	r3, r0
 800134a:	75fb      	strb	r3, [r7, #23]
	}
	if(!res){
 800134c:	7dfb      	ldrb	r3, [r7, #23]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d14a      	bne.n	80013e8 <BNO055_Get_ACC_Data+0xfc>
		if(!(RxBuff[1]>>7)){
 8001352:	7b7b      	ldrb	r3, [r7, #13]
 8001354:	b25b      	sxtb	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	db0b      	blt.n	8001372 <BNO055_Get_ACC_Data+0x86>
			if( ((RxBuff[1]>>6)&(0x01)) ){
 800135a:	7b7b      	ldrb	r3, [r7, #13]
 800135c:	099b      	lsrs	r3, r3, #6
 800135e:	b2db      	uxtb	r3, r3
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	2b00      	cmp	r3, #0
 8001366:	d004      	beq.n	8001372 <BNO055_Get_ACC_Data+0x86>
				RxBuff[1] |= 0x80;
 8001368:	7b7b      	ldrb	r3, [r7, #13]
 800136a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800136e:	b2db      	uxtb	r3, r3
 8001370:	737b      	strb	r3, [r7, #13]
			}
		}
		if(!(RxBuff[3]>>7)){
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	b25b      	sxtb	r3, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	db0b      	blt.n	8001392 <BNO055_Get_ACC_Data+0xa6>
			if( ((RxBuff[3]>>6)&(0x01)) ){
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	099b      	lsrs	r3, r3, #6
 800137e:	b2db      	uxtb	r3, r3
 8001380:	f003 0301 	and.w	r3, r3, #1
 8001384:	2b00      	cmp	r3, #0
 8001386:	d004      	beq.n	8001392 <BNO055_Get_ACC_Data+0xa6>
				RxBuff[3] |= 0x80;
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800138e:	b2db      	uxtb	r3, r3
 8001390:	73fb      	strb	r3, [r7, #15]
			}
		}
		if(!(RxBuff[5]>>7)){
 8001392:	7c7b      	ldrb	r3, [r7, #17]
 8001394:	b25b      	sxtb	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	db0b      	blt.n	80013b2 <BNO055_Get_ACC_Data+0xc6>
			if( ((RxBuff[5]>>6)&(0x01)) ){
 800139a:	7c7b      	ldrb	r3, [r7, #17]
 800139c:	099b      	lsrs	r3, r3, #6
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d004      	beq.n	80013b2 <BNO055_Get_ACC_Data+0xc6>
				RxBuff[5] |= 0x80;
 80013a8:	7c7b      	ldrb	r3, [r7, #17]
 80013aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	747b      	strb	r3, [r7, #17]
			}
		}
		handle->ImuData.ACC_X = (int16_t)((int16_t)(RxBuff[1]<<8) | RxBuff[0]);
 80013b2:	7b7b      	ldrb	r3, [r7, #13]
 80013b4:	021b      	lsls	r3, r3, #8
 80013b6:	b21a      	sxth	r2, r3
 80013b8:	7b3b      	ldrb	r3, [r7, #12]
 80013ba:	b21b      	sxth	r3, r3
 80013bc:	4313      	orrs	r3, r2
 80013be:	b21a      	sxth	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	819a      	strh	r2, [r3, #12]
		handle->ImuData.ACC_Y = (int16_t)((int16_t)(RxBuff[3]<<8) | RxBuff[2]);
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	021b      	lsls	r3, r3, #8
 80013c8:	b21a      	sxth	r2, r3
 80013ca:	7bbb      	ldrb	r3, [r7, #14]
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	4313      	orrs	r3, r2
 80013d0:	b21a      	sxth	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	81da      	strh	r2, [r3, #14]
		handle->ImuData.ACC_Z = (int16_t)((int16_t)(RxBuff[5]<<8) | RxBuff[4]);
 80013d6:	7c7b      	ldrb	r3, [r7, #17]
 80013d8:	021b      	lsls	r3, r3, #8
 80013da:	b21a      	sxth	r2, r3
 80013dc:	7c3b      	ldrb	r3, [r7, #16]
 80013de:	b21b      	sxth	r3, r3
 80013e0:	4313      	orrs	r3, r2
 80013e2:	b21a      	sxth	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	821a      	strh	r2, [r3, #16]
	}
	return res;
 80013e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <BNO055_Get_MAG_Data>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_MAG_Data(BNO055_Sensor_T *handle){
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b088      	sub	sp, #32
 80013f6:	af02      	add	r7, sp, #8
 80013f8:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[6];
	BNO055_ReturnTypeDef_T res = BNO055_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	75fb      	strb	r3, [r7, #23]
	Txbuff[0] = BNO055_REG_ADDRESS_MAG_X_DATA_LSB;
 80013fe:	230e      	movs	r3, #14
 8001400:	753b      	strb	r3, [r7, #20]

	BNO055_Get_PageID(handle);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 f8f5 	bl	80015f2 <BNO055_Get_PageID>
	if(!handle->PageID)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10c      	bne.n	800142c <BNO055_Get_MAG_Data+0x3a>
		res =BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 6);
 8001412:	f107 030c 	add.w	r3, r7, #12
 8001416:	f107 0114 	add.w	r1, r7, #20
 800141a:	2206      	movs	r2, #6
 800141c:	9200      	str	r2, [sp, #0]
 800141e:	2201      	movs	r2, #1
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 f945 	bl	80016b0 <BNO055_SendReceive>
 8001426:	4603      	mov	r3, r0
 8001428:	75fb      	strb	r3, [r7, #23]
 800142a:	e012      	b.n	8001452 <BNO055_Get_MAG_Data+0x60>
	else{
		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0))
 800142c:	2100      	movs	r1, #0
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f000 f8fd 	bl	800162e <BNO055_Set_PageID>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d10b      	bne.n	8001452 <BNO055_Get_MAG_Data+0x60>
			res =BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 6);
 800143a:	f107 030c 	add.w	r3, r7, #12
 800143e:	f107 0114 	add.w	r1, r7, #20
 8001442:	2206      	movs	r2, #6
 8001444:	9200      	str	r2, [sp, #0]
 8001446:	2201      	movs	r2, #1
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 f931 	bl	80016b0 <BNO055_SendReceive>
 800144e:	4603      	mov	r3, r0
 8001450:	75fb      	strb	r3, [r7, #23]
	}

	if(!res){
 8001452:	7dfb      	ldrb	r3, [r7, #23]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d11a      	bne.n	800148e <BNO055_Get_MAG_Data+0x9c>
		handle->ImuData.MAG_X = (RxBuff[0] | (RxBuff[1]<<8));
 8001458:	7b3b      	ldrb	r3, [r7, #12]
 800145a:	b21a      	sxth	r2, r3
 800145c:	7b7b      	ldrb	r3, [r7, #13]
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	b21b      	sxth	r3, r3
 8001462:	4313      	orrs	r3, r2
 8001464:	b21a      	sxth	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	831a      	strh	r2, [r3, #24]
		handle->ImuData.MAG_Y = (RxBuff[2] | (RxBuff[3]<<8));
 800146a:	7bbb      	ldrb	r3, [r7, #14]
 800146c:	b21a      	sxth	r2, r3
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	021b      	lsls	r3, r3, #8
 8001472:	b21b      	sxth	r3, r3
 8001474:	4313      	orrs	r3, r2
 8001476:	b21a      	sxth	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	835a      	strh	r2, [r3, #26]
		handle->ImuData.MAG_Z = (RxBuff[4] | (RxBuff[5]<<8));
 800147c:	7c3b      	ldrb	r3, [r7, #16]
 800147e:	b21a      	sxth	r2, r3
 8001480:	7c7b      	ldrb	r3, [r7, #17]
 8001482:	021b      	lsls	r3, r3, #8
 8001484:	b21b      	sxth	r3, r3
 8001486:	4313      	orrs	r3, r2
 8001488:	b21a      	sxth	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	839a      	strh	r2, [r3, #28]
	}
	return res;
 800148e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <BNO055_Get_GYR_Data>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_GYR_Data(BNO055_Sensor_T *handle){
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af02      	add	r7, sp, #8
 800149e:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[6];
	BNO055_ReturnTypeDef_T res = BNO055_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	75fb      	strb	r3, [r7, #23]
	Txbuff[0] = BNO055_REG_ADDRESS_GYR_X_DATA_LSB;
 80014a4:	2314      	movs	r3, #20
 80014a6:	753b      	strb	r3, [r7, #20]

	BNO055_Get_PageID(handle);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 f8a2 	bl	80015f2 <BNO055_Get_PageID>
	if(!handle->PageID)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d10c      	bne.n	80014d2 <BNO055_Get_GYR_Data+0x3a>
		res =BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 6);
 80014b8:	f107 030c 	add.w	r3, r7, #12
 80014bc:	f107 0114 	add.w	r1, r7, #20
 80014c0:	2206      	movs	r2, #6
 80014c2:	9200      	str	r2, [sp, #0]
 80014c4:	2201      	movs	r2, #1
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 f8f2 	bl	80016b0 <BNO055_SendReceive>
 80014cc:	4603      	mov	r3, r0
 80014ce:	75fb      	strb	r3, [r7, #23]
 80014d0:	e012      	b.n	80014f8 <BNO055_Get_GYR_Data+0x60>
	else{
		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0))
 80014d2:	2100      	movs	r1, #0
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f000 f8aa 	bl	800162e <BNO055_Set_PageID>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d10b      	bne.n	80014f8 <BNO055_Get_GYR_Data+0x60>
			res =BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 6);
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	f107 0114 	add.w	r1, r7, #20
 80014e8:	2206      	movs	r2, #6
 80014ea:	9200      	str	r2, [sp, #0]
 80014ec:	2201      	movs	r2, #1
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 f8de 	bl	80016b0 <BNO055_SendReceive>
 80014f4:	4603      	mov	r3, r0
 80014f6:	75fb      	strb	r3, [r7, #23]
		}

	if(!res){
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d11a      	bne.n	8001534 <BNO055_Get_GYR_Data+0x9c>
		handle->ImuData.GYR_X = (RxBuff[0] | (RxBuff[1]<<8));
 80014fe:	7b3b      	ldrb	r3, [r7, #12]
 8001500:	b21a      	sxth	r2, r3
 8001502:	7b7b      	ldrb	r3, [r7, #13]
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	b21b      	sxth	r3, r3
 8001508:	4313      	orrs	r3, r2
 800150a:	b21a      	sxth	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	825a      	strh	r2, [r3, #18]
		handle->ImuData.GYR_Y = (RxBuff[2] | (RxBuff[3]<<8));
 8001510:	7bbb      	ldrb	r3, [r7, #14]
 8001512:	b21a      	sxth	r2, r3
 8001514:	7bfb      	ldrb	r3, [r7, #15]
 8001516:	021b      	lsls	r3, r3, #8
 8001518:	b21b      	sxth	r3, r3
 800151a:	4313      	orrs	r3, r2
 800151c:	b21a      	sxth	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	829a      	strh	r2, [r3, #20]
		handle->ImuData.GYR_Z = (RxBuff[4] | (RxBuff[5]<<8));
 8001522:	7c3b      	ldrb	r3, [r7, #16]
 8001524:	b21a      	sxth	r2, r3
 8001526:	7c7b      	ldrb	r3, [r7, #17]
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	b21b      	sxth	r3, r3
 800152c:	4313      	orrs	r3, r2
 800152e:	b21a      	sxth	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	82da      	strh	r2, [r3, #22]
	}
		return res;
 8001534:	7dfb      	ldrb	r3, [r7, #23]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <BNO055_Set_DataUnit>:
}

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_DataUnit(BNO055_Sensor_T *handle, uint8_t data){
 800153e:	b580      	push	{r7, lr}
 8001540:	b086      	sub	sp, #24
 8001542:	af02      	add	r7, sp, #8
 8001544:	6078      	str	r0, [r7, #4]
 8001546:	460b      	mov	r3, r1
 8001548:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = 0x3B;
 800154a:	233b      	movs	r3, #59	@ 0x3b
 800154c:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = data;
 800154e:	78fb      	ldrb	r3, [r7, #3]
 8001550:	737b      	strb	r3, [r7, #13]

	BNO055_Get_PageID(handle);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 f84d 	bl	80015f2 <BNO055_Get_PageID>
	if(handle->PageID){
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <BNO055_Set_DataUnit+0x2c>
		BNO055_Set_PageID(handle, BNO055_PAGE_ID_0);
 8001562:	2100      	movs	r1, #0
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f000 f862 	bl	800162e <BNO055_Set_PageID>
	}

	if(!handle->PageID){
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001570:	2b00      	cmp	r3, #0
 8001572:	d10a      	bne.n	800158a <BNO055_Set_DataUnit+0x4c>
		return BNO055_SendReceive(handle, TxBuff, 2, 0, 0);
 8001574:	f107 010c 	add.w	r1, r7, #12
 8001578:	2300      	movs	r3, #0
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	2300      	movs	r3, #0
 800157e:	2202      	movs	r2, #2
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 f895 	bl	80016b0 <BNO055_SendReceive>
 8001586:	4603      	mov	r3, r0
 8001588:	e000      	b.n	800158c <BNO055_Set_DataUnit+0x4e>
	}
	return BNO055_ERROR;
 800158a:	2301      	movs	r3, #1
}
 800158c:	4618      	mov	r0, r3
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <BNO055_Get_DataUnit>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_DataUnit(BNO055_Sensor_T *handle){
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af02      	add	r7, sp, #8
 800159a:	6078      	str	r0, [r7, #4]
	uint8_t TxBuff[1], RxBuff[1];
	TxBuff[0] = 0x3B;
 800159c:	233b      	movs	r3, #59	@ 0x3b
 800159e:	733b      	strb	r3, [r7, #12]

	BNO055_Get_PageID(handle);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 f826 	bl	80015f2 <BNO055_Get_PageID>
	if(handle->PageID){
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <BNO055_Get_DataUnit+0x24>
		BNO055_Set_PageID(handle, BNO055_PAGE_ID_0);
 80015b0:	2100      	movs	r1, #0
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 f83b 	bl	800162e <BNO055_Set_PageID>
	}
	if(!handle->PageID){
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d112      	bne.n	80015e8 <BNO055_Get_DataUnit+0x54>
		if(!BNO055_SendReceive(handle, TxBuff, 1, RxBuff, 1)){
 80015c2:	f107 0308 	add.w	r3, r7, #8
 80015c6:	f107 010c 	add.w	r1, r7, #12
 80015ca:	2201      	movs	r2, #1
 80015cc:	9200      	str	r2, [sp, #0]
 80015ce:	2201      	movs	r2, #1
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f000 f86d 	bl	80016b0 <BNO055_SendReceive>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d105      	bne.n	80015e8 <BNO055_Get_DataUnit+0x54>
			handle->UnitStat = RxBuff[0];
 80015dc:	7a3a      	ldrb	r2, [r7, #8]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			return BNO055_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	e000      	b.n	80015ea <BNO055_Get_DataUnit+0x56>
		}
	}
	return BNO055_ERROR;
 80015e8:	2301      	movs	r3, #1

}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <BNO055_Get_PageID>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_PageID(BNO055_Sensor_T *handle){
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b086      	sub	sp, #24
 80015f6:	af02      	add	r7, sp, #8
 80015f8:	6078      	str	r0, [r7, #4]
	uint8_t TxBuff[1], RxBuff[1];
	TxBuff[0] = 0x07;
 80015fa:	2307      	movs	r3, #7
 80015fc:	733b      	strb	r3, [r7, #12]
	if(BNO055_SendReceive(handle, TxBuff, 1, RxBuff, 1))
 80015fe:	f107 0308 	add.w	r3, r7, #8
 8001602:	f107 010c 	add.w	r1, r7, #12
 8001606:	2201      	movs	r2, #1
 8001608:	9200      	str	r2, [sp, #0]
 800160a:	2201      	movs	r2, #1
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 f84f 	bl	80016b0 <BNO055_SendReceive>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <BNO055_Get_PageID+0x2a>
		return BNO055_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e004      	b.n	8001626 <BNO055_Get_PageID+0x34>
	else
		handle->PageID = RxBuff[0];
 800161c:	7a3a      	ldrb	r2, [r7, #8]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	return BNO055_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <BNO055_Set_PageID>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_PageID(BNO055_Sensor_T *handle, uint8_t PageID){
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af02      	add	r7, sp, #8
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	460b      	mov	r3, r1
 8001638:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = 0x07;
 800163a:	2307      	movs	r3, #7
 800163c:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = PageID;
 800163e:	78fb      	ldrb	r3, [r7, #3]
 8001640:	737b      	strb	r3, [r7, #13]
	if(BNO055_SendReceive(handle, TxBuff, 2, 0, 0))
 8001642:	f107 010c 	add.w	r1, r7, #12
 8001646:	2300      	movs	r3, #0
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	2300      	movs	r3, #0
 800164c:	2202      	movs	r2, #2
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 f82e 	bl	80016b0 <BNO055_SendReceive>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <BNO055_Set_PageID+0x30>
		return BNO055_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e006      	b.n	800166c <BNO055_Set_PageID+0x3e>
	else{
		HAL_Delay(5);
 800165e:	2005      	movs	r0, #5
 8001660:	f000 f9fa 	bl	8001a58 <HAL_Delay>
		BNO055_Get_PageID(handle);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff ffc4 	bl	80015f2 <BNO055_Get_PageID>
		return BNO055_OK;
 800166a:	2300      	movs	r3, #0
	}
}
 800166c:	4618      	mov	r0, r3
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <BNO055_Get_SysError>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_SysError(BNO055_Sensor_T *handle){
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af02      	add	r7, sp, #8
 800167a:	6078      	str	r0, [r7, #4]
	uint8_t TxBuff[1], RxBuff[1];
	TxBuff[0] = 0x3A;
 800167c:	233a      	movs	r3, #58	@ 0x3a
 800167e:	733b      	strb	r3, [r7, #12]
	if(BNO055_SendReceive(handle, TxBuff, 1, RxBuff, 1))
 8001680:	f107 0308 	add.w	r3, r7, #8
 8001684:	f107 010c 	add.w	r1, r7, #12
 8001688:	2201      	movs	r2, #1
 800168a:	9200      	str	r2, [sp, #0]
 800168c:	2201      	movs	r2, #1
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 f80e 	bl	80016b0 <BNO055_SendReceive>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <BNO055_Get_SysError+0x2a>
		return BNO055_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e004      	b.n	80016a8 <BNO055_Get_SysError+0x34>
	else
		handle->SysError = RxBuff[0];
 800169e:	7a3a      	ldrb	r2, [r7, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
	return BNO055_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <BNO055_SendReceive>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_SendReceive(BNO055_Sensor_T *handle, uint8_t *txBuff, uint8_t txLenght, uint8_t *rxBuff, uint8_t rxLenght){
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af02      	add	r7, sp, #8
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	4613      	mov	r3, r2
 80016be:	71fb      	strb	r3, [r7, #7]
	BNO055_ReturnTypeDef_T res = BNO055_CommPorter_SendReceive(handle->I2C_No, handle->Chip_I2C_Address, txBuff, txLenght, rxBuff, rxLenght);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	7818      	ldrb	r0, [r3, #0]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	7859      	ldrb	r1, [r3, #1]
 80016c8:	79fa      	ldrb	r2, [r7, #7]
 80016ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016ce:	9301      	str	r3, [sp, #4]
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	4613      	mov	r3, r2
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	f000 f80f 	bl	80016fa <BNO055_CommPorter_SendReceive>
 80016dc:	4603      	mov	r3, r0
 80016de:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(1);
 80016e0:	2001      	movs	r0, #1
 80016e2:	f000 f9b9 	bl	8001a58 <HAL_Delay>
	if(res){
 80016e6:	7dfb      	ldrb	r3, [r7, #23]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <BNO055_SendReceive+0x40>
		return res;
 80016ec:	7dfb      	ldrb	r3, [r7, #23]
 80016ee:	e000      	b.n	80016f2 <BNO055_SendReceive+0x42>
	}else{
		return res;
 80016f0:	7dfb      	ldrb	r3, [r7, #23]
	}
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <BNO055_CommPorter_SendReceive>:
 */

#include <stdint.h>
#include "I2C.h"

uint8_t BNO055_CommPorter_SendReceive(uint8_t I2CNo, uint8_t DevAddress, uint8_t *txBuff, uint8_t txLenght, uint8_t *rxBuff, uint8_t rxLenght){
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b084      	sub	sp, #16
 80016fe:	af02      	add	r7, sp, #8
 8001700:	603a      	str	r2, [r7, #0]
 8001702:	461a      	mov	r2, r3
 8001704:	4603      	mov	r3, r0
 8001706:	71fb      	strb	r3, [r7, #7]
 8001708:	460b      	mov	r3, r1
 800170a:	71bb      	strb	r3, [r7, #6]
 800170c:	4613      	mov	r3, r2
 800170e:	717b      	strb	r3, [r7, #5]
	return I2C_ReadWrite_Poll(I2CNo, DevAddress, txBuff, txLenght, rxBuff, rxLenght);
 8001710:	797a      	ldrb	r2, [r7, #5]
 8001712:	79b9      	ldrb	r1, [r7, #6]
 8001714:	79f8      	ldrb	r0, [r7, #7]
 8001716:	7d3b      	ldrb	r3, [r7, #20]
 8001718:	9301      	str	r3, [sp, #4]
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	4613      	mov	r3, r2
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	f7ff f841 	bl	80007a8 <I2C_ReadWrite_Poll>
 8001726:	4603      	mov	r3, r0
//	return I2C_ReadWrite_IT(I2CNo, DevAddress, txBuff, txLenght, rxBuff, rxLenght);
//	return I2C_ReadWrite_DMA(I2CNo, DevAddress, txBuff, txLenght, rxBuff, rxLenght);
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001734:	f000 fbab 	bl	8001e8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001738:	f000 f828 	bl	800178c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800173c:	f000 f90c 	bl	8001958 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001740:	f000 f8da 	bl	80018f8 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8001744:	f000 f894 	bl	8001870 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001748:	f003 fda8 	bl	800529c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Thread_MicroROS */
  Thread_MicroROSHandle = osThreadNew(TaskMicroROS, NULL, &Thread_MicroROS_attributes);
 800174c:	4a09      	ldr	r2, [pc, #36]	@ (8001774 <main+0x44>)
 800174e:	2100      	movs	r1, #0
 8001750:	4809      	ldr	r0, [pc, #36]	@ (8001778 <main+0x48>)
 8001752:	f003 fe0d 	bl	8005370 <osThreadNew>
 8001756:	4603      	mov	r3, r0
 8001758:	4a08      	ldr	r2, [pc, #32]	@ (800177c <main+0x4c>)
 800175a:	6013      	str	r3, [r2, #0]

  /* creation of Thread_Sensors */
  Thread_SensorsHandle = osThreadNew(TaskSensors, NULL, &Thread_Sensors_attributes);
 800175c:	4a08      	ldr	r2, [pc, #32]	@ (8001780 <main+0x50>)
 800175e:	2100      	movs	r1, #0
 8001760:	4808      	ldr	r0, [pc, #32]	@ (8001784 <main+0x54>)
 8001762:	f003 fe05 	bl	8005370 <osThreadNew>
 8001766:	4603      	mov	r3, r0
 8001768:	4a07      	ldr	r2, [pc, #28]	@ (8001788 <main+0x58>)
 800176a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800176c:	f003 fdca 	bl	8005304 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <main+0x40>
 8001774:	08007f60 	.word	0x08007f60
 8001778:	08001a71 	.word	0x08001a71
 800177c:	2000036c 	.word	0x2000036c
 8001780:	08007f84 	.word	0x08007f84
 8001784:	08001aa1 	.word	0x08001aa1
 8001788:	20000370 	.word	0x20000370

0800178c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b094      	sub	sp, #80	@ 0x50
 8001790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001792:	f107 031c 	add.w	r3, r7, #28
 8001796:	2234      	movs	r2, #52	@ 0x34
 8001798:	2100      	movs	r1, #0
 800179a:	4618      	mov	r0, r3
 800179c:	f006 fb7e 	bl	8007e9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a0:	f107 0308 	add.w	r3, r7, #8
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80017b0:	f001 fc44 	bl	800303c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001868 <SystemClock_Config+0xdc>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b8:	4a2b      	ldr	r2, [pc, #172]	@ (8001868 <SystemClock_Config+0xdc>)
 80017ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017be:	6413      	str	r3, [r2, #64]	@ 0x40
 80017c0:	4b29      	ldr	r3, [pc, #164]	@ (8001868 <SystemClock_Config+0xdc>)
 80017c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80017cc:	4b27      	ldr	r3, [pc, #156]	@ (800186c <SystemClock_Config+0xe0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80017d4:	4a25      	ldr	r2, [pc, #148]	@ (800186c <SystemClock_Config+0xe0>)
 80017d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	4b23      	ldr	r3, [pc, #140]	@ (800186c <SystemClock_Config+0xe0>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017e4:	603b      	str	r3, [r7, #0]
 80017e6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017e8:	2301      	movs	r3, #1
 80017ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017f2:	2302      	movs	r3, #2
 80017f4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017fc:	2304      	movs	r3, #4
 80017fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001800:	2360      	movs	r3, #96	@ 0x60
 8001802:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001804:	2302      	movs	r3, #2
 8001806:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001808:	2304      	movs	r3, #4
 800180a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800180c:	2302      	movs	r3, #2
 800180e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001810:	f107 031c 	add.w	r3, r7, #28
 8001814:	4618      	mov	r0, r3
 8001816:	f001 fc71 	bl	80030fc <HAL_RCC_OscConfig>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001820:	f000 f978 	bl	8001b14 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001824:	f001 fc1a 	bl	800305c <HAL_PWREx_EnableOverDrive>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800182e:	f000 f971 	bl	8001b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001832:	230f      	movs	r3, #15
 8001834:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001836:	2302      	movs	r3, #2
 8001838:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800183a:	2300      	movs	r3, #0
 800183c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800183e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001842:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001844:	2300      	movs	r3, #0
 8001846:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001848:	f107 0308 	add.w	r3, r7, #8
 800184c:	2103      	movs	r1, #3
 800184e:	4618      	mov	r0, r3
 8001850:	f001 ff02 	bl	8003658 <HAL_RCC_ClockConfig>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800185a:	f000 f95b 	bl	8001b14 <Error_Handler>
  }
}
 800185e:	bf00      	nop
 8001860:	3750      	adds	r7, #80	@ 0x50
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40023800 	.word	0x40023800
 800186c:	40007000 	.word	0x40007000

08001870 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001874:	4b1d      	ldr	r3, [pc, #116]	@ (80018ec <MX_I2C2_Init+0x7c>)
 8001876:	4a1e      	ldr	r2, [pc, #120]	@ (80018f0 <MX_I2C2_Init+0x80>)
 8001878:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 800187a:	4b1c      	ldr	r3, [pc, #112]	@ (80018ec <MX_I2C2_Init+0x7c>)
 800187c:	4a1d      	ldr	r2, [pc, #116]	@ (80018f4 <MX_I2C2_Init+0x84>)
 800187e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001880:	4b1a      	ldr	r3, [pc, #104]	@ (80018ec <MX_I2C2_Init+0x7c>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001886:	4b19      	ldr	r3, [pc, #100]	@ (80018ec <MX_I2C2_Init+0x7c>)
 8001888:	2201      	movs	r2, #1
 800188a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800188c:	4b17      	ldr	r3, [pc, #92]	@ (80018ec <MX_I2C2_Init+0x7c>)
 800188e:	2200      	movs	r2, #0
 8001890:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001892:	4b16      	ldr	r3, [pc, #88]	@ (80018ec <MX_I2C2_Init+0x7c>)
 8001894:	2200      	movs	r2, #0
 8001896:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001898:	4b14      	ldr	r3, [pc, #80]	@ (80018ec <MX_I2C2_Init+0x7c>)
 800189a:	2200      	movs	r2, #0
 800189c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800189e:	4b13      	ldr	r3, [pc, #76]	@ (80018ec <MX_I2C2_Init+0x7c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018a4:	4b11      	ldr	r3, [pc, #68]	@ (80018ec <MX_I2C2_Init+0x7c>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018aa:	4810      	ldr	r0, [pc, #64]	@ (80018ec <MX_I2C2_Init+0x7c>)
 80018ac:	f000 fdde 	bl	800246c <HAL_I2C_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80018b6:	f000 f92d 	bl	8001b14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018ba:	2100      	movs	r1, #0
 80018bc:	480b      	ldr	r0, [pc, #44]	@ (80018ec <MX_I2C2_Init+0x7c>)
 80018be:	f001 fb25 	bl	8002f0c <HAL_I2CEx_ConfigAnalogFilter>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80018c8:	f000 f924 	bl	8001b14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80018cc:	2100      	movs	r1, #0
 80018ce:	4807      	ldr	r0, [pc, #28]	@ (80018ec <MX_I2C2_Init+0x7c>)
 80018d0:	f001 fb67 	bl	8002fa2 <HAL_I2CEx_ConfigDigitalFilter>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80018da:	f000 f91b 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */
  I2C_Init(&hi2c2, I2CNO_2);
 80018de:	2102      	movs	r1, #2
 80018e0:	4802      	ldr	r0, [pc, #8]	@ (80018ec <MX_I2C2_Init+0x7c>)
 80018e2:	f7fe ff4f 	bl	8000784 <I2C_Init>
  /* USER CODE END I2C2_Init 2 */

}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000290 	.word	0x20000290
 80018f0:	40005800 	.word	0x40005800
 80018f4:	20303e5d 	.word	0x20303e5d

080018f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018fc:	4b14      	ldr	r3, [pc, #80]	@ (8001950 <MX_USART3_UART_Init+0x58>)
 80018fe:	4a15      	ldr	r2, [pc, #84]	@ (8001954 <MX_USART3_UART_Init+0x5c>)
 8001900:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001902:	4b13      	ldr	r3, [pc, #76]	@ (8001950 <MX_USART3_UART_Init+0x58>)
 8001904:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001908:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800190a:	4b11      	ldr	r3, [pc, #68]	@ (8001950 <MX_USART3_UART_Init+0x58>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001910:	4b0f      	ldr	r3, [pc, #60]	@ (8001950 <MX_USART3_UART_Init+0x58>)
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001916:	4b0e      	ldr	r3, [pc, #56]	@ (8001950 <MX_USART3_UART_Init+0x58>)
 8001918:	2200      	movs	r2, #0
 800191a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800191c:	4b0c      	ldr	r3, [pc, #48]	@ (8001950 <MX_USART3_UART_Init+0x58>)
 800191e:	220c      	movs	r2, #12
 8001920:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001922:	4b0b      	ldr	r3, [pc, #44]	@ (8001950 <MX_USART3_UART_Init+0x58>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001928:	4b09      	ldr	r3, [pc, #36]	@ (8001950 <MX_USART3_UART_Init+0x58>)
 800192a:	2200      	movs	r2, #0
 800192c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800192e:	4b08      	ldr	r3, [pc, #32]	@ (8001950 <MX_USART3_UART_Init+0x58>)
 8001930:	2200      	movs	r2, #0
 8001932:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001934:	4b06      	ldr	r3, [pc, #24]	@ (8001950 <MX_USART3_UART_Init+0x58>)
 8001936:	2200      	movs	r2, #0
 8001938:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800193a:	4805      	ldr	r0, [pc, #20]	@ (8001950 <MX_USART3_UART_Init+0x58>)
 800193c:	f002 ffda 	bl	80048f4 <HAL_UART_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001946:	f000 f8e5 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	200002e4 	.word	0x200002e4
 8001954:	40004800 	.word	0x40004800

08001958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08c      	sub	sp, #48	@ 0x30
 800195c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195e:	f107 031c 	add.w	r3, r7, #28
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]
 800196a:	60da      	str	r2, [r3, #12]
 800196c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800196e:	4b37      	ldr	r3, [pc, #220]	@ (8001a4c <MX_GPIO_Init+0xf4>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001972:	4a36      	ldr	r2, [pc, #216]	@ (8001a4c <MX_GPIO_Init+0xf4>)
 8001974:	f043 0304 	orr.w	r3, r3, #4
 8001978:	6313      	str	r3, [r2, #48]	@ 0x30
 800197a:	4b34      	ldr	r3, [pc, #208]	@ (8001a4c <MX_GPIO_Init+0xf4>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	f003 0304 	and.w	r3, r3, #4
 8001982:	61bb      	str	r3, [r7, #24]
 8001984:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001986:	4b31      	ldr	r3, [pc, #196]	@ (8001a4c <MX_GPIO_Init+0xf4>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	4a30      	ldr	r2, [pc, #192]	@ (8001a4c <MX_GPIO_Init+0xf4>)
 800198c:	f043 0320 	orr.w	r3, r3, #32
 8001990:	6313      	str	r3, [r2, #48]	@ 0x30
 8001992:	4b2e      	ldr	r3, [pc, #184]	@ (8001a4c <MX_GPIO_Init+0xf4>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	f003 0320 	and.w	r3, r3, #32
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800199e:	4b2b      	ldr	r3, [pc, #172]	@ (8001a4c <MX_GPIO_Init+0xf4>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	4a2a      	ldr	r2, [pc, #168]	@ (8001a4c <MX_GPIO_Init+0xf4>)
 80019a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019aa:	4b28      	ldr	r3, [pc, #160]	@ (8001a4c <MX_GPIO_Init+0xf4>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b6:	4b25      	ldr	r3, [pc, #148]	@ (8001a4c <MX_GPIO_Init+0xf4>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	4a24      	ldr	r2, [pc, #144]	@ (8001a4c <MX_GPIO_Init+0xf4>)
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c2:	4b22      	ldr	r3, [pc, #136]	@ (8001a4c <MX_GPIO_Init+0xf4>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ce:	4b1f      	ldr	r3, [pc, #124]	@ (8001a4c <MX_GPIO_Init+0xf4>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d2:	4a1e      	ldr	r2, [pc, #120]	@ (8001a4c <MX_GPIO_Init+0xf4>)
 80019d4:	f043 0308 	orr.w	r3, r3, #8
 80019d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019da:	4b1c      	ldr	r3, [pc, #112]	@ (8001a4c <MX_GPIO_Init+0xf4>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019de:	f003 0308 	and.w	r3, r3, #8
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e6:	4b19      	ldr	r3, [pc, #100]	@ (8001a4c <MX_GPIO_Init+0xf4>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	4a18      	ldr	r2, [pc, #96]	@ (8001a4c <MX_GPIO_Init+0xf4>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f2:	4b16      	ldr	r3, [pc, #88]	@ (8001a4c <MX_GPIO_Init+0xf4>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80019fe:	2200      	movs	r2, #0
 8001a00:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001a04:	4812      	ldr	r0, [pc, #72]	@ (8001a50 <MX_GPIO_Init+0xf8>)
 8001a06:	f000 fcfd 	bl	8002404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001a0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a10:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001a1a:	f107 031c 	add.w	r3, r7, #28
 8001a1e:	4619      	mov	r1, r3
 8001a20:	480c      	ldr	r0, [pc, #48]	@ (8001a54 <MX_GPIO_Init+0xfc>)
 8001a22:	f000 fb43 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001a26:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a34:	2300      	movs	r3, #0
 8001a36:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a38:	f107 031c 	add.w	r3, r7, #28
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4804      	ldr	r0, [pc, #16]	@ (8001a50 <MX_GPIO_Init+0xf8>)
 8001a40:	f000 fb34 	bl	80020ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a44:	bf00      	nop
 8001a46:	3730      	adds	r7, #48	@ 0x30
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40020400 	.word	0x40020400
 8001a54:	40020800 	.word	0x40020800

08001a58 <HAL_Delay>:

/* USER CODE BEGIN 4 */
void HAL_Delay(uint32_t Delay)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  osDelay(Delay);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f003 fd2b 	bl	80054bc <osDelay>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <TaskMicroROS>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMicroROS */
void TaskMicroROS(void *argument)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int i=0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	i++;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	60fb      	str	r3, [r7, #12]
	if(i>=10){
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2b09      	cmp	r3, #9
 8001a86:	dd05      	ble.n	8001a94 <TaskMicroROS+0x24>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001a88:	2101      	movs	r1, #1
 8001a8a:	4804      	ldr	r0, [pc, #16]	@ (8001a9c <TaskMicroROS+0x2c>)
 8001a8c:	f000 fcd3 	bl	8002436 <HAL_GPIO_TogglePin>
		i=0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
	}
    osDelay(10);
 8001a94:	200a      	movs	r0, #10
 8001a96:	f003 fd11 	bl	80054bc <osDelay>
	i++;
 8001a9a:	e7ef      	b.n	8001a7c <TaskMicroROS+0xc>
 8001a9c:	40020400 	.word	0x40020400

08001aa0 <TaskSensors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskSensors */
void TaskSensors(void *argument)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af02      	add	r7, sp, #8
 8001aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskSensors */
	int i=0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60fb      	str	r3, [r7, #12]
	IMU_Init(&IMU_1, 1, I2CNO_2, BNO055_I2C_ADRESS, 0, 0);
 8001aac:	2300      	movs	r3, #0
 8001aae:	9301      	str	r3, [sp, #4]
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	2328      	movs	r3, #40	@ 0x28
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	2101      	movs	r1, #1
 8001aba:	480b      	ldr	r0, [pc, #44]	@ (8001ae8 <TaskSensors+0x48>)
 8001abc:	f7fe fef2 	bl	80008a4 <IMU_Init>
  /* Infinite loop */
  for(;;)
  {
	i++;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	60fb      	str	r3, [r7, #12]
	if(i>=25){
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2b18      	cmp	r3, #24
 8001aca:	dd05      	ble.n	8001ad8 <TaskSensors+0x38>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD2_Pin);
 8001acc:	2180      	movs	r1, #128	@ 0x80
 8001ace:	4807      	ldr	r0, [pc, #28]	@ (8001aec <TaskSensors+0x4c>)
 8001ad0:	f000 fcb1 	bl	8002436 <HAL_GPIO_TogglePin>
		i=0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60fb      	str	r3, [r7, #12]
	}
	IMU_Execute(&IMU_1, 1);
 8001ad8:	2101      	movs	r1, #1
 8001ada:	4803      	ldr	r0, [pc, #12]	@ (8001ae8 <TaskSensors+0x48>)
 8001adc:	f7fe ff1e 	bl	800091c <IMU_Execute>
	osDelay(10);
 8001ae0:	200a      	movs	r0, #10
 8001ae2:	f003 fceb 	bl	80054bc <osDelay>
	i++;
 8001ae6:	e7eb      	b.n	8001ac0 <TaskSensors+0x20>
 8001ae8:	200001f4 	.word	0x200001f4
 8001aec:	40020400 	.word	0x40020400

08001af0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a04      	ldr	r2, [pc, #16]	@ (8001b10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d101      	bne.n	8001b06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b02:	f000 f9d1 	bl	8001ea8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40010000 	.word	0x40010000

08001b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b18:	b672      	cpsid	i
}
 8001b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b1c:	bf00      	nop
 8001b1e:	e7fd      	b.n	8001b1c <Error_Handler+0x8>

08001b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b26:	4b11      	ldr	r3, [pc, #68]	@ (8001b6c <HAL_MspInit+0x4c>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2a:	4a10      	ldr	r2, [pc, #64]	@ (8001b6c <HAL_MspInit+0x4c>)
 8001b2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b32:	4b0e      	ldr	r3, [pc, #56]	@ (8001b6c <HAL_MspInit+0x4c>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b6c <HAL_MspInit+0x4c>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b42:	4a0a      	ldr	r2, [pc, #40]	@ (8001b6c <HAL_MspInit+0x4c>)
 8001b44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b4a:	4b08      	ldr	r3, [pc, #32]	@ (8001b6c <HAL_MspInit+0x4c>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b52:	603b      	str	r3, [r7, #0]
 8001b54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	210f      	movs	r1, #15
 8001b5a:	f06f 0001 	mvn.w	r0, #1
 8001b5e:	f000 fa7b 	bl	8002058 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40023800 	.word	0x40023800

08001b70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b0ae      	sub	sp, #184	@ 0xb8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	2290      	movs	r2, #144	@ 0x90
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f006 f983 	bl	8007e9c <memset>
  if(hi2c->Instance==I2C2)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a21      	ldr	r2, [pc, #132]	@ (8001c20 <HAL_I2C_MspInit+0xb0>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d13b      	bne.n	8001c18 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001ba0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ba4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001baa:	f107 0314 	add.w	r3, r7, #20
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f001 ffaa 	bl	8003b08 <HAL_RCCEx_PeriphCLKConfig>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001bba:	f7ff ffab 	bl	8001b14 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bbe:	4b19      	ldr	r3, [pc, #100]	@ (8001c24 <HAL_I2C_MspInit+0xb4>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc2:	4a18      	ldr	r2, [pc, #96]	@ (8001c24 <HAL_I2C_MspInit+0xb4>)
 8001bc4:	f043 0320 	orr.w	r3, r3, #32
 8001bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bca:	4b16      	ldr	r3, [pc, #88]	@ (8001c24 <HAL_I2C_MspInit+0xb4>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bce:	f003 0320 	and.w	r3, r3, #32
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bdc:	2312      	movs	r3, #18
 8001bde:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be8:	2303      	movs	r3, #3
 8001bea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bee:	2304      	movs	r3, #4
 8001bf0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bf4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	480b      	ldr	r0, [pc, #44]	@ (8001c28 <HAL_I2C_MspInit+0xb8>)
 8001bfc:	f000 fa56 	bl	80020ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c00:	4b08      	ldr	r3, [pc, #32]	@ (8001c24 <HAL_I2C_MspInit+0xb4>)
 8001c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c04:	4a07      	ldr	r2, [pc, #28]	@ (8001c24 <HAL_I2C_MspInit+0xb4>)
 8001c06:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c0c:	4b05      	ldr	r3, [pc, #20]	@ (8001c24 <HAL_I2C_MspInit+0xb4>)
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001c18:	bf00      	nop
 8001c1a:	37b8      	adds	r7, #184	@ 0xb8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40005800 	.word	0x40005800
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40021400 	.word	0x40021400

08001c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b0ae      	sub	sp, #184	@ 0xb8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	2290      	movs	r2, #144	@ 0x90
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f006 f925 	bl	8007e9c <memset>
  if(huart->Instance==USART3)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a22      	ldr	r2, [pc, #136]	@ (8001ce0 <HAL_UART_MspInit+0xb4>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d13c      	bne.n	8001cd6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c60:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c62:	2300      	movs	r3, #0
 8001c64:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c66:	f107 0314 	add.w	r3, r7, #20
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f001 ff4c 	bl	8003b08 <HAL_RCCEx_PeriphCLKConfig>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001c76:	f7ff ff4d 	bl	8001b14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce4 <HAL_UART_MspInit+0xb8>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7e:	4a19      	ldr	r2, [pc, #100]	@ (8001ce4 <HAL_UART_MspInit+0xb8>)
 8001c80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c86:	4b17      	ldr	r3, [pc, #92]	@ (8001ce4 <HAL_UART_MspInit+0xb8>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c8e:	613b      	str	r3, [r7, #16]
 8001c90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c92:	4b14      	ldr	r3, [pc, #80]	@ (8001ce4 <HAL_UART_MspInit+0xb8>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c96:	4a13      	ldr	r2, [pc, #76]	@ (8001ce4 <HAL_UART_MspInit+0xb8>)
 8001c98:	f043 0308 	orr.w	r3, r3, #8
 8001c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c9e:	4b11      	ldr	r3, [pc, #68]	@ (8001ce4 <HAL_UART_MspInit+0xb8>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001caa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001cae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cc4:	2307      	movs	r3, #7
 8001cc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cca:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4805      	ldr	r0, [pc, #20]	@ (8001ce8 <HAL_UART_MspInit+0xbc>)
 8001cd2:	f000 f9eb 	bl	80020ac <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001cd6:	bf00      	nop
 8001cd8:	37b8      	adds	r7, #184	@ 0xb8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40004800 	.word	0x40004800
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40020c00 	.word	0x40020c00

08001cec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08c      	sub	sp, #48	@ 0x30
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001cfc:	4b2e      	ldr	r3, [pc, #184]	@ (8001db8 <HAL_InitTick+0xcc>)
 8001cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d00:	4a2d      	ldr	r2, [pc, #180]	@ (8001db8 <HAL_InitTick+0xcc>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d08:	4b2b      	ldr	r3, [pc, #172]	@ (8001db8 <HAL_InitTick+0xcc>)
 8001d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d14:	f107 020c 	add.w	r2, r7, #12
 8001d18:	f107 0310 	add.w	r3, r7, #16
 8001d1c:	4611      	mov	r1, r2
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f001 fec0 	bl	8003aa4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001d24:	f001 feaa 	bl	8003a7c <HAL_RCC_GetPCLK2Freq>
 8001d28:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d2c:	4a23      	ldr	r2, [pc, #140]	@ (8001dbc <HAL_InitTick+0xd0>)
 8001d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d32:	0c9b      	lsrs	r3, r3, #18
 8001d34:	3b01      	subs	r3, #1
 8001d36:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001d38:	4b21      	ldr	r3, [pc, #132]	@ (8001dc0 <HAL_InitTick+0xd4>)
 8001d3a:	4a22      	ldr	r2, [pc, #136]	@ (8001dc4 <HAL_InitTick+0xd8>)
 8001d3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001d3e:	4b20      	ldr	r3, [pc, #128]	@ (8001dc0 <HAL_InitTick+0xd4>)
 8001d40:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d44:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d46:	4a1e      	ldr	r2, [pc, #120]	@ (8001dc0 <HAL_InitTick+0xd4>)
 8001d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001d4c:	4b1c      	ldr	r3, [pc, #112]	@ (8001dc0 <HAL_InitTick+0xd4>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d52:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc0 <HAL_InitTick+0xd4>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d58:	4b19      	ldr	r3, [pc, #100]	@ (8001dc0 <HAL_InitTick+0xd4>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001d5e:	4818      	ldr	r0, [pc, #96]	@ (8001dc0 <HAL_InitTick+0xd4>)
 8001d60:	f002 fafa 	bl	8004358 <HAL_TIM_Base_Init>
 8001d64:	4603      	mov	r3, r0
 8001d66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001d6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d11b      	bne.n	8001daa <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001d72:	4813      	ldr	r0, [pc, #76]	@ (8001dc0 <HAL_InitTick+0xd4>)
 8001d74:	f002 fb52 	bl	800441c <HAL_TIM_Base_Start_IT>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001d7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d111      	bne.n	8001daa <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d86:	2019      	movs	r0, #25
 8001d88:	f000 f982 	bl	8002090 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b0f      	cmp	r3, #15
 8001d90:	d808      	bhi.n	8001da4 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001d92:	2200      	movs	r2, #0
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	2019      	movs	r0, #25
 8001d98:	f000 f95e 	bl	8002058 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d9c:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc8 <HAL_InitTick+0xdc>)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	e002      	b.n	8001daa <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001daa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3730      	adds	r7, #48	@ 0x30
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	431bde83 	.word	0x431bde83
 8001dc0:	20000374 	.word	0x20000374
 8001dc4:	40010000 	.word	0x40010000
 8001dc8:	20000004 	.word	0x20000004

08001dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001dd0:	bf00      	nop
 8001dd2:	e7fd      	b.n	8001dd0 <NMI_Handler+0x4>

08001dd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd8:	bf00      	nop
 8001dda:	e7fd      	b.n	8001dd8 <HardFault_Handler+0x4>

08001ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001de0:	bf00      	nop
 8001de2:	e7fd      	b.n	8001de0 <MemManage_Handler+0x4>

08001de4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001de8:	bf00      	nop
 8001dea:	e7fd      	b.n	8001de8 <BusFault_Handler+0x4>

08001dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001df0:	bf00      	nop
 8001df2:	e7fd      	b.n	8001df0 <UsageFault_Handler+0x4>

08001df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
	...

08001e04 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e08:	4802      	ldr	r0, [pc, #8]	@ (8001e14 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e0a:	f002 fb7f 	bl	800450c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000374 	.word	0x20000374

08001e18 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e1c:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <SystemInit+0x20>)
 8001e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e22:	4a05      	ldr	r2, [pc, #20]	@ (8001e38 <SystemInit+0x20>)
 8001e24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e40:	f7ff ffea 	bl	8001e18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e44:	480c      	ldr	r0, [pc, #48]	@ (8001e78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e46:	490d      	ldr	r1, [pc, #52]	@ (8001e7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e48:	4a0d      	ldr	r2, [pc, #52]	@ (8001e80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e4c:	e002      	b.n	8001e54 <LoopCopyDataInit>

08001e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e52:	3304      	adds	r3, #4

08001e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e58:	d3f9      	bcc.n	8001e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e5c:	4c0a      	ldr	r4, [pc, #40]	@ (8001e88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e60:	e001      	b.n	8001e66 <LoopFillZerobss>

08001e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e64:	3204      	adds	r2, #4

08001e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e68:	d3fb      	bcc.n	8001e62 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001e6a:	f006 f81f 	bl	8007eac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e6e:	f7ff fc5f 	bl	8001730 <main>
  bx  lr    
 8001e72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e74:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001e78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e7c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001e80:	08007fd0 	.word	0x08007fd0
  ldr r2, =_sbss
 8001e84:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001e88:	20004d0c 	.word	0x20004d0c

08001e8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e8c:	e7fe      	b.n	8001e8c <ADC_IRQHandler>

08001e8e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e92:	2003      	movs	r0, #3
 8001e94:	f000 f8d5 	bl	8002042 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e98:	200f      	movs	r0, #15
 8001e9a:	f7ff ff27 	bl	8001cec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e9e:	f7ff fe3f 	bl	8001b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eac:	4b06      	ldr	r3, [pc, #24]	@ (8001ec8 <HAL_IncTick+0x20>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <HAL_IncTick+0x24>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	4a04      	ldr	r2, [pc, #16]	@ (8001ecc <HAL_IncTick+0x24>)
 8001eba:	6013      	str	r3, [r2, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	20000008 	.word	0x20000008
 8001ecc:	200003c0 	.word	0x200003c0

08001ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed4:	4b03      	ldr	r3, [pc, #12]	@ (8001ee4 <HAL_GetTick+0x14>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	200003c0 	.word	0x200003c0

08001ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f28 <__NVIC_SetPriorityGrouping+0x40>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f04:	4013      	ands	r3, r2
 8001f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f10:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <__NVIC_SetPriorityGrouping+0x44>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f16:	4a04      	ldr	r2, [pc, #16]	@ (8001f28 <__NVIC_SetPriorityGrouping+0x40>)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	60d3      	str	r3, [r2, #12]
}
 8001f1c:	bf00      	nop
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000ed00 	.word	0xe000ed00
 8001f2c:	05fa0000 	.word	0x05fa0000

08001f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f34:	4b04      	ldr	r3, [pc, #16]	@ (8001f48 <__NVIC_GetPriorityGrouping+0x18>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	0a1b      	lsrs	r3, r3, #8
 8001f3a:	f003 0307 	and.w	r3, r3, #7
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	db0b      	blt.n	8001f76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	f003 021f 	and.w	r2, r3, #31
 8001f64:	4907      	ldr	r1, [pc, #28]	@ (8001f84 <__NVIC_EnableIRQ+0x38>)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	095b      	lsrs	r3, r3, #5
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000e100 	.word	0xe000e100

08001f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	6039      	str	r1, [r7, #0]
 8001f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	db0a      	blt.n	8001fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	490c      	ldr	r1, [pc, #48]	@ (8001fd4 <__NVIC_SetPriority+0x4c>)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	0112      	lsls	r2, r2, #4
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	440b      	add	r3, r1
 8001fac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fb0:	e00a      	b.n	8001fc8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	4908      	ldr	r1, [pc, #32]	@ (8001fd8 <__NVIC_SetPriority+0x50>)
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	3b04      	subs	r3, #4
 8001fc0:	0112      	lsls	r2, r2, #4
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	761a      	strb	r2, [r3, #24]
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	e000e100 	.word	0xe000e100
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b089      	sub	sp, #36	@ 0x24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f1c3 0307 	rsb	r3, r3, #7
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	bf28      	it	cs
 8001ffa:	2304      	movcs	r3, #4
 8001ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	3304      	adds	r3, #4
 8002002:	2b06      	cmp	r3, #6
 8002004:	d902      	bls.n	800200c <NVIC_EncodePriority+0x30>
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	3b03      	subs	r3, #3
 800200a:	e000      	b.n	800200e <NVIC_EncodePriority+0x32>
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002010:	f04f 32ff 	mov.w	r2, #4294967295
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43da      	mvns	r2, r3
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	401a      	ands	r2, r3
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002024:	f04f 31ff 	mov.w	r1, #4294967295
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	fa01 f303 	lsl.w	r3, r1, r3
 800202e:	43d9      	mvns	r1, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002034:	4313      	orrs	r3, r2
         );
}
 8002036:	4618      	mov	r0, r3
 8002038:	3724      	adds	r7, #36	@ 0x24
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff ff4c 	bl	8001ee8 <__NVIC_SetPriorityGrouping>
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
 8002064:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800206a:	f7ff ff61 	bl	8001f30 <__NVIC_GetPriorityGrouping>
 800206e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	68b9      	ldr	r1, [r7, #8]
 8002074:	6978      	ldr	r0, [r7, #20]
 8002076:	f7ff ffb1 	bl	8001fdc <NVIC_EncodePriority>
 800207a:	4602      	mov	r2, r0
 800207c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002080:	4611      	mov	r1, r2
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff ff80 	bl	8001f88 <__NVIC_SetPriority>
}
 8002088:	bf00      	nop
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff ff54 	bl	8001f4c <__NVIC_EnableIRQ>
}
 80020a4:	bf00      	nop
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b089      	sub	sp, #36	@ 0x24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
 80020ca:	e175      	b.n	80023b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80020cc:	2201      	movs	r2, #1
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	4013      	ands	r3, r2
 80020de:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	f040 8164 	bne.w	80023b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d005      	beq.n	8002102 <HAL_GPIO_Init+0x56>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d130      	bne.n	8002164 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	2203      	movs	r2, #3
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43db      	mvns	r3, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4013      	ands	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002138:	2201      	movs	r2, #1
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	091b      	lsrs	r3, r3, #4
 800214e:	f003 0201 	and.w	r2, r3, #1
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	2b03      	cmp	r3, #3
 800216e:	d017      	beq.n	80021a0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	2203      	movs	r2, #3
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d123      	bne.n	80021f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	08da      	lsrs	r2, r3, #3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3208      	adds	r2, #8
 80021b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	220f      	movs	r2, #15
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	691a      	ldr	r2, [r3, #16]
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	08da      	lsrs	r2, r3, #3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3208      	adds	r2, #8
 80021ee:	69b9      	ldr	r1, [r7, #24]
 80021f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	2203      	movs	r2, #3
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 0203 	and.w	r2, r3, #3
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 80be 	beq.w	80023b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002236:	4b66      	ldr	r3, [pc, #408]	@ (80023d0 <HAL_GPIO_Init+0x324>)
 8002238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223a:	4a65      	ldr	r2, [pc, #404]	@ (80023d0 <HAL_GPIO_Init+0x324>)
 800223c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002240:	6453      	str	r3, [r2, #68]	@ 0x44
 8002242:	4b63      	ldr	r3, [pc, #396]	@ (80023d0 <HAL_GPIO_Init+0x324>)
 8002244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002246:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800224e:	4a61      	ldr	r2, [pc, #388]	@ (80023d4 <HAL_GPIO_Init+0x328>)
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	089b      	lsrs	r3, r3, #2
 8002254:	3302      	adds	r3, #2
 8002256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	220f      	movs	r2, #15
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43db      	mvns	r3, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4013      	ands	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a58      	ldr	r2, [pc, #352]	@ (80023d8 <HAL_GPIO_Init+0x32c>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d037      	beq.n	80022ea <HAL_GPIO_Init+0x23e>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a57      	ldr	r2, [pc, #348]	@ (80023dc <HAL_GPIO_Init+0x330>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d031      	beq.n	80022e6 <HAL_GPIO_Init+0x23a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a56      	ldr	r2, [pc, #344]	@ (80023e0 <HAL_GPIO_Init+0x334>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d02b      	beq.n	80022e2 <HAL_GPIO_Init+0x236>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a55      	ldr	r2, [pc, #340]	@ (80023e4 <HAL_GPIO_Init+0x338>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d025      	beq.n	80022de <HAL_GPIO_Init+0x232>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a54      	ldr	r2, [pc, #336]	@ (80023e8 <HAL_GPIO_Init+0x33c>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d01f      	beq.n	80022da <HAL_GPIO_Init+0x22e>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a53      	ldr	r2, [pc, #332]	@ (80023ec <HAL_GPIO_Init+0x340>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d019      	beq.n	80022d6 <HAL_GPIO_Init+0x22a>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a52      	ldr	r2, [pc, #328]	@ (80023f0 <HAL_GPIO_Init+0x344>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d013      	beq.n	80022d2 <HAL_GPIO_Init+0x226>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a51      	ldr	r2, [pc, #324]	@ (80023f4 <HAL_GPIO_Init+0x348>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d00d      	beq.n	80022ce <HAL_GPIO_Init+0x222>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a50      	ldr	r2, [pc, #320]	@ (80023f8 <HAL_GPIO_Init+0x34c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d007      	beq.n	80022ca <HAL_GPIO_Init+0x21e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a4f      	ldr	r2, [pc, #316]	@ (80023fc <HAL_GPIO_Init+0x350>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d101      	bne.n	80022c6 <HAL_GPIO_Init+0x21a>
 80022c2:	2309      	movs	r3, #9
 80022c4:	e012      	b.n	80022ec <HAL_GPIO_Init+0x240>
 80022c6:	230a      	movs	r3, #10
 80022c8:	e010      	b.n	80022ec <HAL_GPIO_Init+0x240>
 80022ca:	2308      	movs	r3, #8
 80022cc:	e00e      	b.n	80022ec <HAL_GPIO_Init+0x240>
 80022ce:	2307      	movs	r3, #7
 80022d0:	e00c      	b.n	80022ec <HAL_GPIO_Init+0x240>
 80022d2:	2306      	movs	r3, #6
 80022d4:	e00a      	b.n	80022ec <HAL_GPIO_Init+0x240>
 80022d6:	2305      	movs	r3, #5
 80022d8:	e008      	b.n	80022ec <HAL_GPIO_Init+0x240>
 80022da:	2304      	movs	r3, #4
 80022dc:	e006      	b.n	80022ec <HAL_GPIO_Init+0x240>
 80022de:	2303      	movs	r3, #3
 80022e0:	e004      	b.n	80022ec <HAL_GPIO_Init+0x240>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e002      	b.n	80022ec <HAL_GPIO_Init+0x240>
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <HAL_GPIO_Init+0x240>
 80022ea:	2300      	movs	r3, #0
 80022ec:	69fa      	ldr	r2, [r7, #28]
 80022ee:	f002 0203 	and.w	r2, r2, #3
 80022f2:	0092      	lsls	r2, r2, #2
 80022f4:	4093      	lsls	r3, r2
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80022fc:	4935      	ldr	r1, [pc, #212]	@ (80023d4 <HAL_GPIO_Init+0x328>)
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	089b      	lsrs	r3, r3, #2
 8002302:	3302      	adds	r3, #2
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800230a:	4b3d      	ldr	r3, [pc, #244]	@ (8002400 <HAL_GPIO_Init+0x354>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	43db      	mvns	r3, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4013      	ands	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800232e:	4a34      	ldr	r2, [pc, #208]	@ (8002400 <HAL_GPIO_Init+0x354>)
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002334:	4b32      	ldr	r3, [pc, #200]	@ (8002400 <HAL_GPIO_Init+0x354>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002358:	4a29      	ldr	r2, [pc, #164]	@ (8002400 <HAL_GPIO_Init+0x354>)
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800235e:	4b28      	ldr	r3, [pc, #160]	@ (8002400 <HAL_GPIO_Init+0x354>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	43db      	mvns	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4013      	ands	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002382:	4a1f      	ldr	r2, [pc, #124]	@ (8002400 <HAL_GPIO_Init+0x354>)
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002388:	4b1d      	ldr	r3, [pc, #116]	@ (8002400 <HAL_GPIO_Init+0x354>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023ac:	4a14      	ldr	r2, [pc, #80]	@ (8002400 <HAL_GPIO_Init+0x354>)
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3301      	adds	r3, #1
 80023b6:	61fb      	str	r3, [r7, #28]
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	2b0f      	cmp	r3, #15
 80023bc:	f67f ae86 	bls.w	80020cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80023c0:	bf00      	nop
 80023c2:	bf00      	nop
 80023c4:	3724      	adds	r7, #36	@ 0x24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40013800 	.word	0x40013800
 80023d8:	40020000 	.word	0x40020000
 80023dc:	40020400 	.word	0x40020400
 80023e0:	40020800 	.word	0x40020800
 80023e4:	40020c00 	.word	0x40020c00
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40021400 	.word	0x40021400
 80023f0:	40021800 	.word	0x40021800
 80023f4:	40021c00 	.word	0x40021c00
 80023f8:	40022000 	.word	0x40022000
 80023fc:	40022400 	.word	0x40022400
 8002400:	40013c00 	.word	0x40013c00

08002404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	460b      	mov	r3, r1
 800240e:	807b      	strh	r3, [r7, #2]
 8002410:	4613      	mov	r3, r2
 8002412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002414:	787b      	ldrb	r3, [r7, #1]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800241a:	887a      	ldrh	r2, [r7, #2]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002420:	e003      	b.n	800242a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002422:	887b      	ldrh	r3, [r7, #2]
 8002424:	041a      	lsls	r2, r3, #16
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	619a      	str	r2, [r3, #24]
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002436:	b480      	push	{r7}
 8002438:	b085      	sub	sp, #20
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	460b      	mov	r3, r1
 8002440:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002448:	887a      	ldrh	r2, [r7, #2]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4013      	ands	r3, r2
 800244e:	041a      	lsls	r2, r3, #16
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	43d9      	mvns	r1, r3
 8002454:	887b      	ldrh	r3, [r7, #2]
 8002456:	400b      	ands	r3, r1
 8002458:	431a      	orrs	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	619a      	str	r2, [r3, #24]
}
 800245e:	bf00      	nop
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
	...

0800246c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e08b      	b.n	8002596 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d106      	bne.n	8002498 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7ff fb6c 	bl	8001b70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2224      	movs	r2, #36	@ 0x24
 800249c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0201 	bic.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d107      	bne.n	80024e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	e006      	b.n	80024f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689a      	ldr	r2, [r3, #8]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80024f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d108      	bne.n	800250e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800250a:	605a      	str	r2, [r3, #4]
 800250c:	e007      	b.n	800251e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800251c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6859      	ldr	r1, [r3, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4b1d      	ldr	r3, [pc, #116]	@ (80025a0 <HAL_I2C_Init+0x134>)
 800252a:	430b      	orrs	r3, r1
 800252c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68da      	ldr	r2, [r3, #12]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800253c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691a      	ldr	r2, [r3, #16]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69d9      	ldr	r1, [r3, #28]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a1a      	ldr	r2, [r3, #32]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0201 	orr.w	r2, r2, #1
 8002576:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2220      	movs	r2, #32
 8002582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	02008000 	.word	0x02008000

080025a4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af02      	add	r7, sp, #8
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	607a      	str	r2, [r7, #4]
 80025ae:	461a      	mov	r2, r3
 80025b0:	460b      	mov	r3, r1
 80025b2:	817b      	strh	r3, [r7, #10]
 80025b4:	4613      	mov	r3, r2
 80025b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b20      	cmp	r3, #32
 80025c2:	f040 80fd 	bne.w	80027c0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d101      	bne.n	80025d4 <HAL_I2C_Master_Transmit+0x30>
 80025d0:	2302      	movs	r3, #2
 80025d2:	e0f6      	b.n	80027c2 <HAL_I2C_Master_Transmit+0x21e>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025dc:	f7ff fc78 	bl	8001ed0 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	2319      	movs	r3, #25
 80025e8:	2201      	movs	r2, #1
 80025ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 fa0a 	bl	8002a08 <I2C_WaitOnFlagUntilTimeout>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e0e1      	b.n	80027c2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2221      	movs	r2, #33	@ 0x21
 8002602:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2210      	movs	r2, #16
 800260a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	893a      	ldrh	r2, [r7, #8]
 800261e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800262a:	b29b      	uxth	r3, r3
 800262c:	2bff      	cmp	r3, #255	@ 0xff
 800262e:	d906      	bls.n	800263e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	22ff      	movs	r2, #255	@ 0xff
 8002634:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002636:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800263a:	617b      	str	r3, [r7, #20]
 800263c:	e007      	b.n	800264e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002642:	b29a      	uxth	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002648:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800264c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002652:	2b00      	cmp	r3, #0
 8002654:	d024      	beq.n	80026a0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265a:	781a      	ldrb	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002670:	b29b      	uxth	r3, r3
 8002672:	3b01      	subs	r3, #1
 8002674:	b29a      	uxth	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800267e:	3b01      	subs	r3, #1
 8002680:	b29a      	uxth	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800268a:	b2db      	uxtb	r3, r3
 800268c:	3301      	adds	r3, #1
 800268e:	b2da      	uxtb	r2, r3
 8002690:	8979      	ldrh	r1, [r7, #10]
 8002692:	4b4e      	ldr	r3, [pc, #312]	@ (80027cc <HAL_I2C_Master_Transmit+0x228>)
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 fc05 	bl	8002ea8 <I2C_TransferConfig>
 800269e:	e066      	b.n	800276e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	8979      	ldrh	r1, [r7, #10]
 80026a8:	4b48      	ldr	r3, [pc, #288]	@ (80027cc <HAL_I2C_Master_Transmit+0x228>)
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 fbfa 	bl	8002ea8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80026b4:	e05b      	b.n	800276e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	6a39      	ldr	r1, [r7, #32]
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 f9fd 	bl	8002aba <I2C_WaitOnTXISFlagUntilTimeout>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e07b      	b.n	80027c2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ce:	781a      	ldrb	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	3b01      	subs	r3, #1
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026fe:	b29b      	uxth	r3, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	d034      	beq.n	800276e <HAL_I2C_Master_Transmit+0x1ca>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002708:	2b00      	cmp	r3, #0
 800270a:	d130      	bne.n	800276e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	2200      	movs	r2, #0
 8002714:	2180      	movs	r1, #128	@ 0x80
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 f976 	bl	8002a08 <I2C_WaitOnFlagUntilTimeout>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e04d      	b.n	80027c2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800272a:	b29b      	uxth	r3, r3
 800272c:	2bff      	cmp	r3, #255	@ 0xff
 800272e:	d90e      	bls.n	800274e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	22ff      	movs	r2, #255	@ 0xff
 8002734:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800273a:	b2da      	uxtb	r2, r3
 800273c:	8979      	ldrh	r1, [r7, #10]
 800273e:	2300      	movs	r3, #0
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 fbae 	bl	8002ea8 <I2C_TransferConfig>
 800274c:	e00f      	b.n	800276e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002752:	b29a      	uxth	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800275c:	b2da      	uxtb	r2, r3
 800275e:	8979      	ldrh	r1, [r7, #10]
 8002760:	2300      	movs	r3, #0
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 fb9d 	bl	8002ea8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002772:	b29b      	uxth	r3, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	d19e      	bne.n	80026b6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	6a39      	ldr	r1, [r7, #32]
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 f9e3 	bl	8002b48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e01a      	b.n	80027c2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2220      	movs	r2, #32
 8002792:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6859      	ldr	r1, [r3, #4]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	4b0c      	ldr	r3, [pc, #48]	@ (80027d0 <HAL_I2C_Master_Transmit+0x22c>)
 80027a0:	400b      	ands	r3, r1
 80027a2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2220      	movs	r2, #32
 80027a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80027bc:	2300      	movs	r3, #0
 80027be:	e000      	b.n	80027c2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80027c0:	2302      	movs	r3, #2
  }
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	80002000 	.word	0x80002000
 80027d0:	fe00e800 	.word	0xfe00e800

080027d4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b088      	sub	sp, #32
 80027d8:	af02      	add	r7, sp, #8
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	607a      	str	r2, [r7, #4]
 80027de:	461a      	mov	r2, r3
 80027e0:	460b      	mov	r3, r1
 80027e2:	817b      	strh	r3, [r7, #10]
 80027e4:	4613      	mov	r3, r2
 80027e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b20      	cmp	r3, #32
 80027f2:	f040 80db 	bne.w	80029ac <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d101      	bne.n	8002804 <HAL_I2C_Master_Receive+0x30>
 8002800:	2302      	movs	r3, #2
 8002802:	e0d4      	b.n	80029ae <HAL_I2C_Master_Receive+0x1da>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800280c:	f7ff fb60 	bl	8001ed0 <HAL_GetTick>
 8002810:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	2319      	movs	r3, #25
 8002818:	2201      	movs	r2, #1
 800281a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 f8f2 	bl	8002a08 <I2C_WaitOnFlagUntilTimeout>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e0bf      	b.n	80029ae <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2222      	movs	r2, #34	@ 0x22
 8002832:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2210      	movs	r2, #16
 800283a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	893a      	ldrh	r2, [r7, #8]
 800284e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800285a:	b29b      	uxth	r3, r3
 800285c:	2bff      	cmp	r3, #255	@ 0xff
 800285e:	d90e      	bls.n	800287e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2201      	movs	r2, #1
 8002864:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800286a:	b2da      	uxtb	r2, r3
 800286c:	8979      	ldrh	r1, [r7, #10]
 800286e:	4b52      	ldr	r3, [pc, #328]	@ (80029b8 <HAL_I2C_Master_Receive+0x1e4>)
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 fb16 	bl	8002ea8 <I2C_TransferConfig>
 800287c:	e06d      	b.n	800295a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002882:	b29a      	uxth	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800288c:	b2da      	uxtb	r2, r3
 800288e:	8979      	ldrh	r1, [r7, #10]
 8002890:	4b49      	ldr	r3, [pc, #292]	@ (80029b8 <HAL_I2C_Master_Receive+0x1e4>)
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 fb05 	bl	8002ea8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800289e:	e05c      	b.n	800295a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	6a39      	ldr	r1, [r7, #32]
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 f993 	bl	8002bd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e07c      	b.n	80029ae <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028dc:	b29b      	uxth	r3, r3
 80028de:	3b01      	subs	r3, #1
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d034      	beq.n	800295a <HAL_I2C_Master_Receive+0x186>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d130      	bne.n	800295a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	2200      	movs	r2, #0
 8002900:	2180      	movs	r1, #128	@ 0x80
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 f880 	bl	8002a08 <I2C_WaitOnFlagUntilTimeout>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e04d      	b.n	80029ae <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002916:	b29b      	uxth	r3, r3
 8002918:	2bff      	cmp	r3, #255	@ 0xff
 800291a:	d90e      	bls.n	800293a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	22ff      	movs	r2, #255	@ 0xff
 8002920:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002926:	b2da      	uxtb	r2, r3
 8002928:	8979      	ldrh	r1, [r7, #10]
 800292a:	2300      	movs	r3, #0
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 fab8 	bl	8002ea8 <I2C_TransferConfig>
 8002938:	e00f      	b.n	800295a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800293e:	b29a      	uxth	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002948:	b2da      	uxtb	r2, r3
 800294a:	8979      	ldrh	r1, [r7, #10]
 800294c:	2300      	movs	r3, #0
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 faa7 	bl	8002ea8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800295e:	b29b      	uxth	r3, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	d19d      	bne.n	80028a0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	6a39      	ldr	r1, [r7, #32]
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 f8ed 	bl	8002b48 <I2C_WaitOnSTOPFlagUntilTimeout>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e01a      	b.n	80029ae <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2220      	movs	r2, #32
 800297e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6859      	ldr	r1, [r3, #4]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	4b0c      	ldr	r3, [pc, #48]	@ (80029bc <HAL_I2C_Master_Receive+0x1e8>)
 800298c:	400b      	ands	r3, r1
 800298e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2220      	movs	r2, #32
 8002994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80029a8:	2300      	movs	r3, #0
 80029aa:	e000      	b.n	80029ae <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80029ac:	2302      	movs	r3, #2
  }
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	80002400 	.word	0x80002400
 80029bc:	fe00e800 	.word	0xfe00e800

080029c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d103      	bne.n	80029de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2200      	movs	r2, #0
 80029dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d007      	beq.n	80029fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	699a      	ldr	r2, [r3, #24]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0201 	orr.w	r2, r2, #1
 80029fa:	619a      	str	r2, [r3, #24]
  }
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	603b      	str	r3, [r7, #0]
 8002a14:	4613      	mov	r3, r2
 8002a16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a18:	e03b      	b.n	8002a92 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	6839      	ldr	r1, [r7, #0]
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 f962 	bl	8002ce8 <I2C_IsErrorOccurred>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e041      	b.n	8002ab2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a34:	d02d      	beq.n	8002a92 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a36:	f7ff fa4b 	bl	8001ed0 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d302      	bcc.n	8002a4c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d122      	bne.n	8002a92 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699a      	ldr	r2, [r3, #24]
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	4013      	ands	r3, r2
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	bf0c      	ite	eq
 8002a5c:	2301      	moveq	r3, #1
 8002a5e:	2300      	movne	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	461a      	mov	r2, r3
 8002a64:	79fb      	ldrb	r3, [r7, #7]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d113      	bne.n	8002a92 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6e:	f043 0220 	orr.w	r2, r3, #32
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e00f      	b.n	8002ab2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	699a      	ldr	r2, [r3, #24]
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	bf0c      	ite	eq
 8002aa2:	2301      	moveq	r3, #1
 8002aa4:	2300      	movne	r3, #0
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	79fb      	ldrb	r3, [r7, #7]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d0b4      	beq.n	8002a1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b084      	sub	sp, #16
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	60f8      	str	r0, [r7, #12]
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ac6:	e033      	b.n	8002b30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	68b9      	ldr	r1, [r7, #8]
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 f90b 	bl	8002ce8 <I2C_IsErrorOccurred>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e031      	b.n	8002b40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae2:	d025      	beq.n	8002b30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ae4:	f7ff f9f4 	bl	8001ed0 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d302      	bcc.n	8002afa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d11a      	bne.n	8002b30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d013      	beq.n	8002b30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0c:	f043 0220 	orr.w	r2, r3, #32
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e007      	b.n	8002b40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d1c4      	bne.n	8002ac8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b54:	e02f      	b.n	8002bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 f8c4 	bl	8002ce8 <I2C_IsErrorOccurred>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e02d      	b.n	8002bc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b6a:	f7ff f9b1 	bl	8001ed0 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d302      	bcc.n	8002b80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d11a      	bne.n	8002bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	f003 0320 	and.w	r3, r3, #32
 8002b8a:	2b20      	cmp	r3, #32
 8002b8c:	d013      	beq.n	8002bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b92:	f043 0220 	orr.w	r2, r3, #32
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e007      	b.n	8002bc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	f003 0320 	and.w	r3, r3, #32
 8002bc0:	2b20      	cmp	r3, #32
 8002bc2:	d1c8      	bne.n	8002b56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
	...

08002bd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002be0:	e071      	b.n	8002cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	68b9      	ldr	r1, [r7, #8]
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 f87e 	bl	8002ce8 <I2C_IsErrorOccurred>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	f003 0320 	and.w	r3, r3, #32
 8002c00:	2b20      	cmp	r3, #32
 8002c02:	d13b      	bne.n	8002c7c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002c04:	7dfb      	ldrb	r3, [r7, #23]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d138      	bne.n	8002c7c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d105      	bne.n	8002c24 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002c20:	2300      	movs	r3, #0
 8002c22:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	f003 0310 	and.w	r3, r3, #16
 8002c2e:	2b10      	cmp	r3, #16
 8002c30:	d121      	bne.n	8002c76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2210      	movs	r2, #16
 8002c38:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2204      	movs	r2, #4
 8002c3e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2220      	movs	r2, #32
 8002c46:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6859      	ldr	r1, [r3, #4]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	4b24      	ldr	r3, [pc, #144]	@ (8002ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002c54:	400b      	ands	r3, r1
 8002c56:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	75fb      	strb	r3, [r7, #23]
 8002c74:	e002      	b.n	8002c7c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002c7c:	f7ff f928 	bl	8001ed0 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d302      	bcc.n	8002c92 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d119      	bne.n	8002cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002c92:	7dfb      	ldrb	r3, [r7, #23]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d116      	bne.n	8002cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	f003 0304 	and.w	r3, r3, #4
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d00f      	beq.n	8002cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002caa:	f043 0220 	orr.w	r2, r3, #32
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d002      	beq.n	8002cda <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002cd4:	7dfb      	ldrb	r3, [r7, #23]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d083      	beq.n	8002be2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	fe00e800 	.word	0xfe00e800

08002ce8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08a      	sub	sp, #40	@ 0x28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	f003 0310 	and.w	r3, r3, #16
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d068      	beq.n	8002de6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2210      	movs	r2, #16
 8002d1a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d1c:	e049      	b.n	8002db2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d24:	d045      	beq.n	8002db2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d26:	f7ff f8d3 	bl	8001ed0 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d302      	bcc.n	8002d3c <I2C_IsErrorOccurred+0x54>
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d13a      	bne.n	8002db2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d46:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d4e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d5e:	d121      	bne.n	8002da4 <I2C_IsErrorOccurred+0xbc>
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d66:	d01d      	beq.n	8002da4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002d68:	7cfb      	ldrb	r3, [r7, #19]
 8002d6a:	2b20      	cmp	r3, #32
 8002d6c:	d01a      	beq.n	8002da4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685a      	ldr	r2, [r3, #4]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d7c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d7e:	f7ff f8a7 	bl	8001ed0 <HAL_GetTick>
 8002d82:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d84:	e00e      	b.n	8002da4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d86:	f7ff f8a3 	bl	8001ed0 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b19      	cmp	r3, #25
 8002d92:	d907      	bls.n	8002da4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	f043 0320 	orr.w	r3, r3, #32
 8002d9a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002da2:	e006      	b.n	8002db2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	f003 0320 	and.w	r3, r3, #32
 8002dae:	2b20      	cmp	r3, #32
 8002db0:	d1e9      	bne.n	8002d86 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	f003 0320 	and.w	r3, r3, #32
 8002dbc:	2b20      	cmp	r3, #32
 8002dbe:	d003      	beq.n	8002dc8 <I2C_IsErrorOccurred+0xe0>
 8002dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0aa      	beq.n	8002d1e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d103      	bne.n	8002dd8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
 8002dda:	f043 0304 	orr.w	r3, r3, #4
 8002dde:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00b      	beq.n	8002e10 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00b      	beq.n	8002e32 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	f043 0308 	orr.w	r3, r3, #8
 8002e20:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e2a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00b      	beq.n	8002e54 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	f043 0302 	orr.w	r3, r3, #2
 8002e42:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002e54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d01c      	beq.n	8002e96 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f7ff fdaf 	bl	80029c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6859      	ldr	r1, [r3, #4]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea4 <I2C_IsErrorOccurred+0x1bc>)
 8002e6e:	400b      	ands	r3, r1
 8002e70:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2220      	movs	r2, #32
 8002e82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002e96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3728      	adds	r7, #40	@ 0x28
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	fe00e800 	.word	0xfe00e800

08002ea8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b087      	sub	sp, #28
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	607b      	str	r3, [r7, #4]
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	817b      	strh	r3, [r7, #10]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002eba:	897b      	ldrh	r3, [r7, #10]
 8002ebc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ec0:	7a7b      	ldrb	r3, [r7, #9]
 8002ec2:	041b      	lsls	r3, r3, #16
 8002ec4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ec8:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ed6:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	0d5b      	lsrs	r3, r3, #21
 8002ee2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002ee6:	4b08      	ldr	r3, [pc, #32]	@ (8002f08 <I2C_TransferConfig+0x60>)
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	43db      	mvns	r3, r3
 8002eec:	ea02 0103 	and.w	r1, r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002efa:	bf00      	nop
 8002efc:	371c      	adds	r7, #28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	03ff63ff 	.word	0x03ff63ff

08002f0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b20      	cmp	r3, #32
 8002f20:	d138      	bne.n	8002f94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d101      	bne.n	8002f30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	e032      	b.n	8002f96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2224      	movs	r2, #36	@ 0x24
 8002f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0201 	bic.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6819      	ldr	r1, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0201 	orr.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	e000      	b.n	8002f96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f94:	2302      	movs	r3, #2
  }
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b085      	sub	sp, #20
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b20      	cmp	r3, #32
 8002fb6:	d139      	bne.n	800302c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d101      	bne.n	8002fc6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	e033      	b.n	800302e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2224      	movs	r2, #36	@ 0x24
 8002fd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0201 	bic.w	r2, r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002ff4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	021b      	lsls	r3, r3, #8
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2220      	movs	r2, #32
 800301c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	e000      	b.n	800302e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800302c:	2302      	movs	r3, #2
  }
}
 800302e:	4618      	mov	r0, r3
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
	...

0800303c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003040:	4b05      	ldr	r3, [pc, #20]	@ (8003058 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a04      	ldr	r2, [pc, #16]	@ (8003058 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003046:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800304a:	6013      	str	r3, [r2, #0]
}
 800304c:	bf00      	nop
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40007000 	.word	0x40007000

0800305c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003062:	2300      	movs	r3, #0
 8003064:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003066:	4b23      	ldr	r3, [pc, #140]	@ (80030f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306a:	4a22      	ldr	r2, [pc, #136]	@ (80030f4 <HAL_PWREx_EnableOverDrive+0x98>)
 800306c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003070:	6413      	str	r3, [r2, #64]	@ 0x40
 8003072:	4b20      	ldr	r3, [pc, #128]	@ (80030f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800307a:	603b      	str	r3, [r7, #0]
 800307c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800307e:	4b1e      	ldr	r3, [pc, #120]	@ (80030f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a1d      	ldr	r2, [pc, #116]	@ (80030f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003088:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800308a:	f7fe ff21 	bl	8001ed0 <HAL_GetTick>
 800308e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003090:	e009      	b.n	80030a6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003092:	f7fe ff1d 	bl	8001ed0 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80030a0:	d901      	bls.n	80030a6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e022      	b.n	80030ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030a6:	4b14      	ldr	r3, [pc, #80]	@ (80030f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030b2:	d1ee      	bne.n	8003092 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80030b4:	4b10      	ldr	r3, [pc, #64]	@ (80030f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a0f      	ldr	r2, [pc, #60]	@ (80030f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030be:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030c0:	f7fe ff06 	bl	8001ed0 <HAL_GetTick>
 80030c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030c6:	e009      	b.n	80030dc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030c8:	f7fe ff02 	bl	8001ed0 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80030d6:	d901      	bls.n	80030dc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e007      	b.n	80030ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030dc:	4b06      	ldr	r3, [pc, #24]	@ (80030f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80030e8:	d1ee      	bne.n	80030c8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40023800 	.word	0x40023800
 80030f8:	40007000 	.word	0x40007000

080030fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003104:	2300      	movs	r3, #0
 8003106:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e29b      	b.n	800364a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 8087 	beq.w	800322e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003120:	4b96      	ldr	r3, [pc, #600]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 030c 	and.w	r3, r3, #12
 8003128:	2b04      	cmp	r3, #4
 800312a:	d00c      	beq.n	8003146 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800312c:	4b93      	ldr	r3, [pc, #588]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 030c 	and.w	r3, r3, #12
 8003134:	2b08      	cmp	r3, #8
 8003136:	d112      	bne.n	800315e <HAL_RCC_OscConfig+0x62>
 8003138:	4b90      	ldr	r3, [pc, #576]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003140:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003144:	d10b      	bne.n	800315e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003146:	4b8d      	ldr	r3, [pc, #564]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d06c      	beq.n	800322c <HAL_RCC_OscConfig+0x130>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d168      	bne.n	800322c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e275      	b.n	800364a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003166:	d106      	bne.n	8003176 <HAL_RCC_OscConfig+0x7a>
 8003168:	4b84      	ldr	r3, [pc, #528]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a83      	ldr	r2, [pc, #524]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 800316e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003172:	6013      	str	r3, [r2, #0]
 8003174:	e02e      	b.n	80031d4 <HAL_RCC_OscConfig+0xd8>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10c      	bne.n	8003198 <HAL_RCC_OscConfig+0x9c>
 800317e:	4b7f      	ldr	r3, [pc, #508]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a7e      	ldr	r2, [pc, #504]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 8003184:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	4b7c      	ldr	r3, [pc, #496]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a7b      	ldr	r2, [pc, #492]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 8003190:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	e01d      	b.n	80031d4 <HAL_RCC_OscConfig+0xd8>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031a0:	d10c      	bne.n	80031bc <HAL_RCC_OscConfig+0xc0>
 80031a2:	4b76      	ldr	r3, [pc, #472]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a75      	ldr	r2, [pc, #468]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 80031a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031ac:	6013      	str	r3, [r2, #0]
 80031ae:	4b73      	ldr	r3, [pc, #460]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a72      	ldr	r2, [pc, #456]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 80031b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	e00b      	b.n	80031d4 <HAL_RCC_OscConfig+0xd8>
 80031bc:	4b6f      	ldr	r3, [pc, #444]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a6e      	ldr	r2, [pc, #440]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 80031c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031c6:	6013      	str	r3, [r2, #0]
 80031c8:	4b6c      	ldr	r3, [pc, #432]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a6b      	ldr	r2, [pc, #428]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 80031ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d013      	beq.n	8003204 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031dc:	f7fe fe78 	bl	8001ed0 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e4:	f7fe fe74 	bl	8001ed0 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b64      	cmp	r3, #100	@ 0x64
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e229      	b.n	800364a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f6:	4b61      	ldr	r3, [pc, #388]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0f0      	beq.n	80031e4 <HAL_RCC_OscConfig+0xe8>
 8003202:	e014      	b.n	800322e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003204:	f7fe fe64 	bl	8001ed0 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800320c:	f7fe fe60 	bl	8001ed0 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b64      	cmp	r3, #100	@ 0x64
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e215      	b.n	800364a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800321e:	4b57      	ldr	r3, [pc, #348]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1f0      	bne.n	800320c <HAL_RCC_OscConfig+0x110>
 800322a:	e000      	b.n	800322e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800322c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d069      	beq.n	800330e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800323a:	4b50      	ldr	r3, [pc, #320]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 030c 	and.w	r3, r3, #12
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00b      	beq.n	800325e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003246:	4b4d      	ldr	r3, [pc, #308]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 030c 	and.w	r3, r3, #12
 800324e:	2b08      	cmp	r3, #8
 8003250:	d11c      	bne.n	800328c <HAL_RCC_OscConfig+0x190>
 8003252:	4b4a      	ldr	r3, [pc, #296]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d116      	bne.n	800328c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800325e:	4b47      	ldr	r3, [pc, #284]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d005      	beq.n	8003276 <HAL_RCC_OscConfig+0x17a>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d001      	beq.n	8003276 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e1e9      	b.n	800364a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003276:	4b41      	ldr	r3, [pc, #260]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	493d      	ldr	r1, [pc, #244]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 8003286:	4313      	orrs	r3, r2
 8003288:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800328a:	e040      	b.n	800330e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d023      	beq.n	80032dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003294:	4b39      	ldr	r3, [pc, #228]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a38      	ldr	r2, [pc, #224]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 800329a:	f043 0301 	orr.w	r3, r3, #1
 800329e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a0:	f7fe fe16 	bl	8001ed0 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032a8:	f7fe fe12 	bl	8001ed0 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e1c7      	b.n	800364a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ba:	4b30      	ldr	r3, [pc, #192]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0f0      	beq.n	80032a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c6:	4b2d      	ldr	r3, [pc, #180]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	4929      	ldr	r1, [pc, #164]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	600b      	str	r3, [r1, #0]
 80032da:	e018      	b.n	800330e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032dc:	4b27      	ldr	r3, [pc, #156]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a26      	ldr	r2, [pc, #152]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 80032e2:	f023 0301 	bic.w	r3, r3, #1
 80032e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e8:	f7fe fdf2 	bl	8001ed0 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f0:	f7fe fdee 	bl	8001ed0 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e1a3      	b.n	800364a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003302:	4b1e      	ldr	r3, [pc, #120]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f0      	bne.n	80032f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b00      	cmp	r3, #0
 8003318:	d038      	beq.n	800338c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d019      	beq.n	8003356 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003322:	4b16      	ldr	r3, [pc, #88]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 8003324:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003326:	4a15      	ldr	r2, [pc, #84]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 8003328:	f043 0301 	orr.w	r3, r3, #1
 800332c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332e:	f7fe fdcf 	bl	8001ed0 <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003336:	f7fe fdcb 	bl	8001ed0 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e180      	b.n	800364a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003348:	4b0c      	ldr	r3, [pc, #48]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 800334a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0f0      	beq.n	8003336 <HAL_RCC_OscConfig+0x23a>
 8003354:	e01a      	b.n	800338c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003356:	4b09      	ldr	r3, [pc, #36]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 8003358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800335a:	4a08      	ldr	r2, [pc, #32]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 800335c:	f023 0301 	bic.w	r3, r3, #1
 8003360:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003362:	f7fe fdb5 	bl	8001ed0 <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003368:	e00a      	b.n	8003380 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800336a:	f7fe fdb1 	bl	8001ed0 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d903      	bls.n	8003380 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e166      	b.n	800364a <HAL_RCC_OscConfig+0x54e>
 800337c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003380:	4b92      	ldr	r3, [pc, #584]	@ (80035cc <HAL_RCC_OscConfig+0x4d0>)
 8003382:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1ee      	bne.n	800336a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 80a4 	beq.w	80034e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800339a:	4b8c      	ldr	r3, [pc, #560]	@ (80035cc <HAL_RCC_OscConfig+0x4d0>)
 800339c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10d      	bne.n	80033c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a6:	4b89      	ldr	r3, [pc, #548]	@ (80035cc <HAL_RCC_OscConfig+0x4d0>)
 80033a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033aa:	4a88      	ldr	r2, [pc, #544]	@ (80035cc <HAL_RCC_OscConfig+0x4d0>)
 80033ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033b2:	4b86      	ldr	r3, [pc, #536]	@ (80035cc <HAL_RCC_OscConfig+0x4d0>)
 80033b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ba:	60bb      	str	r3, [r7, #8]
 80033bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033be:	2301      	movs	r3, #1
 80033c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033c2:	4b83      	ldr	r3, [pc, #524]	@ (80035d0 <HAL_RCC_OscConfig+0x4d4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d118      	bne.n	8003400 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80033ce:	4b80      	ldr	r3, [pc, #512]	@ (80035d0 <HAL_RCC_OscConfig+0x4d4>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a7f      	ldr	r2, [pc, #508]	@ (80035d0 <HAL_RCC_OscConfig+0x4d4>)
 80033d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033da:	f7fe fd79 	bl	8001ed0 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033e2:	f7fe fd75 	bl	8001ed0 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b64      	cmp	r3, #100	@ 0x64
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e12a      	b.n	800364a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033f4:	4b76      	ldr	r3, [pc, #472]	@ (80035d0 <HAL_RCC_OscConfig+0x4d4>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0f0      	beq.n	80033e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d106      	bne.n	8003416 <HAL_RCC_OscConfig+0x31a>
 8003408:	4b70      	ldr	r3, [pc, #448]	@ (80035cc <HAL_RCC_OscConfig+0x4d0>)
 800340a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800340c:	4a6f      	ldr	r2, [pc, #444]	@ (80035cc <HAL_RCC_OscConfig+0x4d0>)
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	6713      	str	r3, [r2, #112]	@ 0x70
 8003414:	e02d      	b.n	8003472 <HAL_RCC_OscConfig+0x376>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10c      	bne.n	8003438 <HAL_RCC_OscConfig+0x33c>
 800341e:	4b6b      	ldr	r3, [pc, #428]	@ (80035cc <HAL_RCC_OscConfig+0x4d0>)
 8003420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003422:	4a6a      	ldr	r2, [pc, #424]	@ (80035cc <HAL_RCC_OscConfig+0x4d0>)
 8003424:	f023 0301 	bic.w	r3, r3, #1
 8003428:	6713      	str	r3, [r2, #112]	@ 0x70
 800342a:	4b68      	ldr	r3, [pc, #416]	@ (80035cc <HAL_RCC_OscConfig+0x4d0>)
 800342c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800342e:	4a67      	ldr	r2, [pc, #412]	@ (80035cc <HAL_RCC_OscConfig+0x4d0>)
 8003430:	f023 0304 	bic.w	r3, r3, #4
 8003434:	6713      	str	r3, [r2, #112]	@ 0x70
 8003436:	e01c      	b.n	8003472 <HAL_RCC_OscConfig+0x376>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	2b05      	cmp	r3, #5
 800343e:	d10c      	bne.n	800345a <HAL_RCC_OscConfig+0x35e>
 8003440:	4b62      	ldr	r3, [pc, #392]	@ (80035cc <HAL_RCC_OscConfig+0x4d0>)
 8003442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003444:	4a61      	ldr	r2, [pc, #388]	@ (80035cc <HAL_RCC_OscConfig+0x4d0>)
 8003446:	f043 0304 	orr.w	r3, r3, #4
 800344a:	6713      	str	r3, [r2, #112]	@ 0x70
 800344c:	4b5f      	ldr	r3, [pc, #380]	@ (80035cc <HAL_RCC_OscConfig+0x4d0>)
 800344e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003450:	4a5e      	ldr	r2, [pc, #376]	@ (80035cc <HAL_RCC_OscConfig+0x4d0>)
 8003452:	f043 0301 	orr.w	r3, r3, #1
 8003456:	6713      	str	r3, [r2, #112]	@ 0x70
 8003458:	e00b      	b.n	8003472 <HAL_RCC_OscConfig+0x376>
 800345a:	4b5c      	ldr	r3, [pc, #368]	@ (80035cc <HAL_RCC_OscConfig+0x4d0>)
 800345c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800345e:	4a5b      	ldr	r2, [pc, #364]	@ (80035cc <HAL_RCC_OscConfig+0x4d0>)
 8003460:	f023 0301 	bic.w	r3, r3, #1
 8003464:	6713      	str	r3, [r2, #112]	@ 0x70
 8003466:	4b59      	ldr	r3, [pc, #356]	@ (80035cc <HAL_RCC_OscConfig+0x4d0>)
 8003468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800346a:	4a58      	ldr	r2, [pc, #352]	@ (80035cc <HAL_RCC_OscConfig+0x4d0>)
 800346c:	f023 0304 	bic.w	r3, r3, #4
 8003470:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d015      	beq.n	80034a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347a:	f7fe fd29 	bl	8001ed0 <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003480:	e00a      	b.n	8003498 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003482:	f7fe fd25 	bl	8001ed0 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003490:	4293      	cmp	r3, r2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e0d8      	b.n	800364a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003498:	4b4c      	ldr	r3, [pc, #304]	@ (80035cc <HAL_RCC_OscConfig+0x4d0>)
 800349a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0ee      	beq.n	8003482 <HAL_RCC_OscConfig+0x386>
 80034a4:	e014      	b.n	80034d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a6:	f7fe fd13 	bl	8001ed0 <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ac:	e00a      	b.n	80034c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ae:	f7fe fd0f 	bl	8001ed0 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034bc:	4293      	cmp	r3, r2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e0c2      	b.n	800364a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034c4:	4b41      	ldr	r3, [pc, #260]	@ (80035cc <HAL_RCC_OscConfig+0x4d0>)
 80034c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1ee      	bne.n	80034ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034d0:	7dfb      	ldrb	r3, [r7, #23]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d105      	bne.n	80034e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d6:	4b3d      	ldr	r3, [pc, #244]	@ (80035cc <HAL_RCC_OscConfig+0x4d0>)
 80034d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034da:	4a3c      	ldr	r2, [pc, #240]	@ (80035cc <HAL_RCC_OscConfig+0x4d0>)
 80034dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034e0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 80ae 	beq.w	8003648 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034ec:	4b37      	ldr	r3, [pc, #220]	@ (80035cc <HAL_RCC_OscConfig+0x4d0>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 030c 	and.w	r3, r3, #12
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d06d      	beq.n	80035d4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d14b      	bne.n	8003598 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003500:	4b32      	ldr	r3, [pc, #200]	@ (80035cc <HAL_RCC_OscConfig+0x4d0>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a31      	ldr	r2, [pc, #196]	@ (80035cc <HAL_RCC_OscConfig+0x4d0>)
 8003506:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800350a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350c:	f7fe fce0 	bl	8001ed0 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003514:	f7fe fcdc 	bl	8001ed0 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e091      	b.n	800364a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003526:	4b29      	ldr	r3, [pc, #164]	@ (80035cc <HAL_RCC_OscConfig+0x4d0>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f0      	bne.n	8003514 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69da      	ldr	r2, [r3, #28]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003540:	019b      	lsls	r3, r3, #6
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003548:	085b      	lsrs	r3, r3, #1
 800354a:	3b01      	subs	r3, #1
 800354c:	041b      	lsls	r3, r3, #16
 800354e:	431a      	orrs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003554:	061b      	lsls	r3, r3, #24
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800355c:	071b      	lsls	r3, r3, #28
 800355e:	491b      	ldr	r1, [pc, #108]	@ (80035cc <HAL_RCC_OscConfig+0x4d0>)
 8003560:	4313      	orrs	r3, r2
 8003562:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003564:	4b19      	ldr	r3, [pc, #100]	@ (80035cc <HAL_RCC_OscConfig+0x4d0>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a18      	ldr	r2, [pc, #96]	@ (80035cc <HAL_RCC_OscConfig+0x4d0>)
 800356a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800356e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003570:	f7fe fcae 	bl	8001ed0 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003578:	f7fe fcaa 	bl	8001ed0 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e05f      	b.n	800364a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800358a:	4b10      	ldr	r3, [pc, #64]	@ (80035cc <HAL_RCC_OscConfig+0x4d0>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0f0      	beq.n	8003578 <HAL_RCC_OscConfig+0x47c>
 8003596:	e057      	b.n	8003648 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003598:	4b0c      	ldr	r3, [pc, #48]	@ (80035cc <HAL_RCC_OscConfig+0x4d0>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a0b      	ldr	r2, [pc, #44]	@ (80035cc <HAL_RCC_OscConfig+0x4d0>)
 800359e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a4:	f7fe fc94 	bl	8001ed0 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ac:	f7fe fc90 	bl	8001ed0 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e045      	b.n	800364a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035be:	4b03      	ldr	r3, [pc, #12]	@ (80035cc <HAL_RCC_OscConfig+0x4d0>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f0      	bne.n	80035ac <HAL_RCC_OscConfig+0x4b0>
 80035ca:	e03d      	b.n	8003648 <HAL_RCC_OscConfig+0x54c>
 80035cc:	40023800 	.word	0x40023800
 80035d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80035d4:	4b1f      	ldr	r3, [pc, #124]	@ (8003654 <HAL_RCC_OscConfig+0x558>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d030      	beq.n	8003644 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d129      	bne.n	8003644 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d122      	bne.n	8003644 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003604:	4013      	ands	r3, r2
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800360a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800360c:	4293      	cmp	r3, r2
 800360e:	d119      	bne.n	8003644 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800361a:	085b      	lsrs	r3, r3, #1
 800361c:	3b01      	subs	r3, #1
 800361e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003620:	429a      	cmp	r2, r3
 8003622:	d10f      	bne.n	8003644 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003630:	429a      	cmp	r2, r3
 8003632:	d107      	bne.n	8003644 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003640:	429a      	cmp	r2, r3
 8003642:	d001      	beq.n	8003648 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e000      	b.n	800364a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3718      	adds	r7, #24
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40023800 	.word	0x40023800

08003658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003662:	2300      	movs	r3, #0
 8003664:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e0d0      	b.n	8003812 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003670:	4b6a      	ldr	r3, [pc, #424]	@ (800381c <HAL_RCC_ClockConfig+0x1c4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 030f 	and.w	r3, r3, #15
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	429a      	cmp	r2, r3
 800367c:	d910      	bls.n	80036a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800367e:	4b67      	ldr	r3, [pc, #412]	@ (800381c <HAL_RCC_ClockConfig+0x1c4>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f023 020f 	bic.w	r2, r3, #15
 8003686:	4965      	ldr	r1, [pc, #404]	@ (800381c <HAL_RCC_ClockConfig+0x1c4>)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	4313      	orrs	r3, r2
 800368c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800368e:	4b63      	ldr	r3, [pc, #396]	@ (800381c <HAL_RCC_ClockConfig+0x1c4>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 030f 	and.w	r3, r3, #15
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	429a      	cmp	r2, r3
 800369a:	d001      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e0b8      	b.n	8003812 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d020      	beq.n	80036ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d005      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036b8:	4b59      	ldr	r3, [pc, #356]	@ (8003820 <HAL_RCC_ClockConfig+0x1c8>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	4a58      	ldr	r2, [pc, #352]	@ (8003820 <HAL_RCC_ClockConfig+0x1c8>)
 80036be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0308 	and.w	r3, r3, #8
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d005      	beq.n	80036dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036d0:	4b53      	ldr	r3, [pc, #332]	@ (8003820 <HAL_RCC_ClockConfig+0x1c8>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	4a52      	ldr	r2, [pc, #328]	@ (8003820 <HAL_RCC_ClockConfig+0x1c8>)
 80036d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036dc:	4b50      	ldr	r3, [pc, #320]	@ (8003820 <HAL_RCC_ClockConfig+0x1c8>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	494d      	ldr	r1, [pc, #308]	@ (8003820 <HAL_RCC_ClockConfig+0x1c8>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d040      	beq.n	800377c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d107      	bne.n	8003712 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003702:	4b47      	ldr	r3, [pc, #284]	@ (8003820 <HAL_RCC_ClockConfig+0x1c8>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d115      	bne.n	800373a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e07f      	b.n	8003812 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b02      	cmp	r3, #2
 8003718:	d107      	bne.n	800372a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800371a:	4b41      	ldr	r3, [pc, #260]	@ (8003820 <HAL_RCC_ClockConfig+0x1c8>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d109      	bne.n	800373a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e073      	b.n	8003812 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800372a:	4b3d      	ldr	r3, [pc, #244]	@ (8003820 <HAL_RCC_ClockConfig+0x1c8>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e06b      	b.n	8003812 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800373a:	4b39      	ldr	r3, [pc, #228]	@ (8003820 <HAL_RCC_ClockConfig+0x1c8>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f023 0203 	bic.w	r2, r3, #3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	4936      	ldr	r1, [pc, #216]	@ (8003820 <HAL_RCC_ClockConfig+0x1c8>)
 8003748:	4313      	orrs	r3, r2
 800374a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800374c:	f7fe fbc0 	bl	8001ed0 <HAL_GetTick>
 8003750:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003752:	e00a      	b.n	800376a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003754:	f7fe fbbc 	bl	8001ed0 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003762:	4293      	cmp	r3, r2
 8003764:	d901      	bls.n	800376a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e053      	b.n	8003812 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800376a:	4b2d      	ldr	r3, [pc, #180]	@ (8003820 <HAL_RCC_ClockConfig+0x1c8>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 020c 	and.w	r2, r3, #12
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	429a      	cmp	r2, r3
 800377a:	d1eb      	bne.n	8003754 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800377c:	4b27      	ldr	r3, [pc, #156]	@ (800381c <HAL_RCC_ClockConfig+0x1c4>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 030f 	and.w	r3, r3, #15
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	429a      	cmp	r2, r3
 8003788:	d210      	bcs.n	80037ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800378a:	4b24      	ldr	r3, [pc, #144]	@ (800381c <HAL_RCC_ClockConfig+0x1c4>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f023 020f 	bic.w	r2, r3, #15
 8003792:	4922      	ldr	r1, [pc, #136]	@ (800381c <HAL_RCC_ClockConfig+0x1c4>)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	4313      	orrs	r3, r2
 8003798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800379a:	4b20      	ldr	r3, [pc, #128]	@ (800381c <HAL_RCC_ClockConfig+0x1c4>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d001      	beq.n	80037ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e032      	b.n	8003812 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d008      	beq.n	80037ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037b8:	4b19      	ldr	r3, [pc, #100]	@ (8003820 <HAL_RCC_ClockConfig+0x1c8>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	4916      	ldr	r1, [pc, #88]	@ (8003820 <HAL_RCC_ClockConfig+0x1c8>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0308 	and.w	r3, r3, #8
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d009      	beq.n	80037ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037d6:	4b12      	ldr	r3, [pc, #72]	@ (8003820 <HAL_RCC_ClockConfig+0x1c8>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	490e      	ldr	r1, [pc, #56]	@ (8003820 <HAL_RCC_ClockConfig+0x1c8>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037ea:	f000 f821 	bl	8003830 <HAL_RCC_GetSysClockFreq>
 80037ee:	4602      	mov	r2, r0
 80037f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003820 <HAL_RCC_ClockConfig+0x1c8>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	091b      	lsrs	r3, r3, #4
 80037f6:	f003 030f 	and.w	r3, r3, #15
 80037fa:	490a      	ldr	r1, [pc, #40]	@ (8003824 <HAL_RCC_ClockConfig+0x1cc>)
 80037fc:	5ccb      	ldrb	r3, [r1, r3]
 80037fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003802:	4a09      	ldr	r2, [pc, #36]	@ (8003828 <HAL_RCC_ClockConfig+0x1d0>)
 8003804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003806:	4b09      	ldr	r3, [pc, #36]	@ (800382c <HAL_RCC_ClockConfig+0x1d4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f7fe fa6e 	bl	8001cec <HAL_InitTick>

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	40023c00 	.word	0x40023c00
 8003820:	40023800 	.word	0x40023800
 8003824:	08007fa8 	.word	0x08007fa8
 8003828:	20000000 	.word	0x20000000
 800382c:	20000004 	.word	0x20000004

08003830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003834:	b094      	sub	sp, #80	@ 0x50
 8003836:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003838:	2300      	movs	r3, #0
 800383a:	647b      	str	r3, [r7, #68]	@ 0x44
 800383c:	2300      	movs	r3, #0
 800383e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003840:	2300      	movs	r3, #0
 8003842:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003844:	2300      	movs	r3, #0
 8003846:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003848:	4b79      	ldr	r3, [pc, #484]	@ (8003a30 <HAL_RCC_GetSysClockFreq+0x200>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f003 030c 	and.w	r3, r3, #12
 8003850:	2b08      	cmp	r3, #8
 8003852:	d00d      	beq.n	8003870 <HAL_RCC_GetSysClockFreq+0x40>
 8003854:	2b08      	cmp	r3, #8
 8003856:	f200 80e1 	bhi.w	8003a1c <HAL_RCC_GetSysClockFreq+0x1ec>
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <HAL_RCC_GetSysClockFreq+0x34>
 800385e:	2b04      	cmp	r3, #4
 8003860:	d003      	beq.n	800386a <HAL_RCC_GetSysClockFreq+0x3a>
 8003862:	e0db      	b.n	8003a1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003864:	4b73      	ldr	r3, [pc, #460]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x204>)
 8003866:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003868:	e0db      	b.n	8003a22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800386a:	4b73      	ldr	r3, [pc, #460]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0x208>)
 800386c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800386e:	e0d8      	b.n	8003a22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003870:	4b6f      	ldr	r3, [pc, #444]	@ (8003a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003878:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800387a:	4b6d      	ldr	r3, [pc, #436]	@ (8003a30 <HAL_RCC_GetSysClockFreq+0x200>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d063      	beq.n	800394e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003886:	4b6a      	ldr	r3, [pc, #424]	@ (8003a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	099b      	lsrs	r3, r3, #6
 800388c:	2200      	movs	r2, #0
 800388e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003890:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003898:	633b      	str	r3, [r7, #48]	@ 0x30
 800389a:	2300      	movs	r3, #0
 800389c:	637b      	str	r3, [r7, #52]	@ 0x34
 800389e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80038a2:	4622      	mov	r2, r4
 80038a4:	462b      	mov	r3, r5
 80038a6:	f04f 0000 	mov.w	r0, #0
 80038aa:	f04f 0100 	mov.w	r1, #0
 80038ae:	0159      	lsls	r1, r3, #5
 80038b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038b4:	0150      	lsls	r0, r2, #5
 80038b6:	4602      	mov	r2, r0
 80038b8:	460b      	mov	r3, r1
 80038ba:	4621      	mov	r1, r4
 80038bc:	1a51      	subs	r1, r2, r1
 80038be:	6139      	str	r1, [r7, #16]
 80038c0:	4629      	mov	r1, r5
 80038c2:	eb63 0301 	sbc.w	r3, r3, r1
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	f04f 0300 	mov.w	r3, #0
 80038d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038d4:	4659      	mov	r1, fp
 80038d6:	018b      	lsls	r3, r1, #6
 80038d8:	4651      	mov	r1, sl
 80038da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038de:	4651      	mov	r1, sl
 80038e0:	018a      	lsls	r2, r1, #6
 80038e2:	4651      	mov	r1, sl
 80038e4:	ebb2 0801 	subs.w	r8, r2, r1
 80038e8:	4659      	mov	r1, fp
 80038ea:	eb63 0901 	sbc.w	r9, r3, r1
 80038ee:	f04f 0200 	mov.w	r2, #0
 80038f2:	f04f 0300 	mov.w	r3, #0
 80038f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003902:	4690      	mov	r8, r2
 8003904:	4699      	mov	r9, r3
 8003906:	4623      	mov	r3, r4
 8003908:	eb18 0303 	adds.w	r3, r8, r3
 800390c:	60bb      	str	r3, [r7, #8]
 800390e:	462b      	mov	r3, r5
 8003910:	eb49 0303 	adc.w	r3, r9, r3
 8003914:	60fb      	str	r3, [r7, #12]
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	f04f 0300 	mov.w	r3, #0
 800391e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003922:	4629      	mov	r1, r5
 8003924:	024b      	lsls	r3, r1, #9
 8003926:	4621      	mov	r1, r4
 8003928:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800392c:	4621      	mov	r1, r4
 800392e:	024a      	lsls	r2, r1, #9
 8003930:	4610      	mov	r0, r2
 8003932:	4619      	mov	r1, r3
 8003934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003936:	2200      	movs	r2, #0
 8003938:	62bb      	str	r3, [r7, #40]	@ 0x28
 800393a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800393c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003940:	f7fc fcce 	bl	80002e0 <__aeabi_uldivmod>
 8003944:	4602      	mov	r2, r0
 8003946:	460b      	mov	r3, r1
 8003948:	4613      	mov	r3, r2
 800394a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800394c:	e058      	b.n	8003a00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800394e:	4b38      	ldr	r3, [pc, #224]	@ (8003a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	099b      	lsrs	r3, r3, #6
 8003954:	2200      	movs	r2, #0
 8003956:	4618      	mov	r0, r3
 8003958:	4611      	mov	r1, r2
 800395a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800395e:	623b      	str	r3, [r7, #32]
 8003960:	2300      	movs	r3, #0
 8003962:	627b      	str	r3, [r7, #36]	@ 0x24
 8003964:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003968:	4642      	mov	r2, r8
 800396a:	464b      	mov	r3, r9
 800396c:	f04f 0000 	mov.w	r0, #0
 8003970:	f04f 0100 	mov.w	r1, #0
 8003974:	0159      	lsls	r1, r3, #5
 8003976:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800397a:	0150      	lsls	r0, r2, #5
 800397c:	4602      	mov	r2, r0
 800397e:	460b      	mov	r3, r1
 8003980:	4641      	mov	r1, r8
 8003982:	ebb2 0a01 	subs.w	sl, r2, r1
 8003986:	4649      	mov	r1, r9
 8003988:	eb63 0b01 	sbc.w	fp, r3, r1
 800398c:	f04f 0200 	mov.w	r2, #0
 8003990:	f04f 0300 	mov.w	r3, #0
 8003994:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003998:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800399c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039a0:	ebb2 040a 	subs.w	r4, r2, sl
 80039a4:	eb63 050b 	sbc.w	r5, r3, fp
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	f04f 0300 	mov.w	r3, #0
 80039b0:	00eb      	lsls	r3, r5, #3
 80039b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039b6:	00e2      	lsls	r2, r4, #3
 80039b8:	4614      	mov	r4, r2
 80039ba:	461d      	mov	r5, r3
 80039bc:	4643      	mov	r3, r8
 80039be:	18e3      	adds	r3, r4, r3
 80039c0:	603b      	str	r3, [r7, #0]
 80039c2:	464b      	mov	r3, r9
 80039c4:	eb45 0303 	adc.w	r3, r5, r3
 80039c8:	607b      	str	r3, [r7, #4]
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	f04f 0300 	mov.w	r3, #0
 80039d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039d6:	4629      	mov	r1, r5
 80039d8:	028b      	lsls	r3, r1, #10
 80039da:	4621      	mov	r1, r4
 80039dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039e0:	4621      	mov	r1, r4
 80039e2:	028a      	lsls	r2, r1, #10
 80039e4:	4610      	mov	r0, r2
 80039e6:	4619      	mov	r1, r3
 80039e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039ea:	2200      	movs	r2, #0
 80039ec:	61bb      	str	r3, [r7, #24]
 80039ee:	61fa      	str	r2, [r7, #28]
 80039f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039f4:	f7fc fc74 	bl	80002e0 <__aeabi_uldivmod>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4613      	mov	r3, r2
 80039fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003a00:	4b0b      	ldr	r3, [pc, #44]	@ (8003a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	0c1b      	lsrs	r3, r3, #16
 8003a06:	f003 0303 	and.w	r3, r3, #3
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003a10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a1a:	e002      	b.n	8003a22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a1c:	4b05      	ldr	r3, [pc, #20]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3750      	adds	r7, #80	@ 0x50
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a2e:	bf00      	nop
 8003a30:	40023800 	.word	0x40023800
 8003a34:	00f42400 	.word	0x00f42400
 8003a38:	007a1200 	.word	0x007a1200

08003a3c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a40:	4b03      	ldr	r3, [pc, #12]	@ (8003a50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a42:	681b      	ldr	r3, [r3, #0]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	20000000 	.word	0x20000000

08003a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a58:	f7ff fff0 	bl	8003a3c <HAL_RCC_GetHCLKFreq>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	4b05      	ldr	r3, [pc, #20]	@ (8003a74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	0a9b      	lsrs	r3, r3, #10
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	4903      	ldr	r1, [pc, #12]	@ (8003a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a6a:	5ccb      	ldrb	r3, [r1, r3]
 8003a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40023800 	.word	0x40023800
 8003a78:	08007fb8 	.word	0x08007fb8

08003a7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a80:	f7ff ffdc 	bl	8003a3c <HAL_RCC_GetHCLKFreq>
 8003a84:	4602      	mov	r2, r0
 8003a86:	4b05      	ldr	r3, [pc, #20]	@ (8003a9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	0b5b      	lsrs	r3, r3, #13
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	4903      	ldr	r1, [pc, #12]	@ (8003aa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a92:	5ccb      	ldrb	r3, [r1, r3]
 8003a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	08007fb8 	.word	0x08007fb8

08003aa4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	220f      	movs	r2, #15
 8003ab2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ab4:	4b12      	ldr	r3, [pc, #72]	@ (8003b00 <HAL_RCC_GetClockConfig+0x5c>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f003 0203 	and.w	r2, r3, #3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8003b00 <HAL_RCC_GetClockConfig+0x5c>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003acc:	4b0c      	ldr	r3, [pc, #48]	@ (8003b00 <HAL_RCC_GetClockConfig+0x5c>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003ad8:	4b09      	ldr	r3, [pc, #36]	@ (8003b00 <HAL_RCC_GetClockConfig+0x5c>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	08db      	lsrs	r3, r3, #3
 8003ade:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ae6:	4b07      	ldr	r3, [pc, #28]	@ (8003b04 <HAL_RCC_GetClockConfig+0x60>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 020f 	and.w	r2, r3, #15
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	601a      	str	r2, [r3, #0]
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	40023800 	.word	0x40023800
 8003b04:	40023c00 	.word	0x40023c00

08003b08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003b10:	2300      	movs	r3, #0
 8003b12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003b14:	2300      	movs	r3, #0
 8003b16:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003b20:	2300      	movs	r3, #0
 8003b22:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d012      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b30:	4b69      	ldr	r3, [pc, #420]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	4a68      	ldr	r2, [pc, #416]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b36:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003b3a:	6093      	str	r3, [r2, #8]
 8003b3c:	4b66      	ldr	r3, [pc, #408]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b44:	4964      	ldr	r1, [pc, #400]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003b52:	2301      	movs	r3, #1
 8003b54:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d017      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b62:	4b5d      	ldr	r3, [pc, #372]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b68:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b70:	4959      	ldr	r1, [pc, #356]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b80:	d101      	bne.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003b82:	2301      	movs	r3, #1
 8003b84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d017      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b9e:	4b4e      	ldr	r3, [pc, #312]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ba4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bac:	494a      	ldr	r1, [pc, #296]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bbc:	d101      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 808b 	beq.w	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bec:	4b3a      	ldr	r3, [pc, #232]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf0:	4a39      	ldr	r2, [pc, #228]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bf6:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bf8:	4b37      	ldr	r3, [pc, #220]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c00:	60bb      	str	r3, [r7, #8]
 8003c02:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c04:	4b35      	ldr	r3, [pc, #212]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a34      	ldr	r2, [pc, #208]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c10:	f7fe f95e 	bl	8001ed0 <HAL_GetTick>
 8003c14:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c16:	e008      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c18:	f7fe f95a 	bl	8001ed0 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b64      	cmp	r3, #100	@ 0x64
 8003c24:	d901      	bls.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e38f      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c2a:	4b2c      	ldr	r3, [pc, #176]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f0      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c36:	4b28      	ldr	r3, [pc, #160]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c3e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d035      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d02e      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c54:	4b20      	ldr	r3, [pc, #128]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c5c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c62:	4a1d      	ldr	r2, [pc, #116]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c68:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c6e:	4a1a      	ldr	r2, [pc, #104]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c74:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003c76:	4a18      	ldr	r2, [pc, #96]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c7c:	4b16      	ldr	r3, [pc, #88]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d114      	bne.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c88:	f7fe f922 	bl	8001ed0 <HAL_GetTick>
 8003c8c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c8e:	e00a      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c90:	f7fe f91e 	bl	8001ed0 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e351      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0ee      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cbe:	d111      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003cc0:	4b05      	ldr	r3, [pc, #20]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003ccc:	4b04      	ldr	r3, [pc, #16]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003cce:	400b      	ands	r3, r1
 8003cd0:	4901      	ldr	r1, [pc, #4]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	608b      	str	r3, [r1, #8]
 8003cd6:	e00b      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	40007000 	.word	0x40007000
 8003ce0:	0ffffcff 	.word	0x0ffffcff
 8003ce4:	4bac      	ldr	r3, [pc, #688]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	4aab      	ldr	r2, [pc, #684]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cea:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003cee:	6093      	str	r3, [r2, #8]
 8003cf0:	4ba9      	ldr	r3, [pc, #676]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cf2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cfc:	49a6      	ldr	r1, [pc, #664]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0310 	and.w	r3, r3, #16
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d010      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d0e:	4ba2      	ldr	r3, [pc, #648]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d14:	4aa0      	ldr	r2, [pc, #640]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003d1e:	4b9e      	ldr	r3, [pc, #632]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d20:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d28:	499b      	ldr	r1, [pc, #620]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d3c:	4b96      	ldr	r3, [pc, #600]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d42:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d4a:	4993      	ldr	r1, [pc, #588]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d5e:	4b8e      	ldr	r3, [pc, #568]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d64:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d6c:	498a      	ldr	r1, [pc, #552]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d80:	4b85      	ldr	r3, [pc, #532]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d86:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d8e:	4982      	ldr	r1, [pc, #520]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003da2:	4b7d      	ldr	r3, [pc, #500]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db0:	4979      	ldr	r1, [pc, #484]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dc4:	4b74      	ldr	r3, [pc, #464]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dca:	f023 0203 	bic.w	r2, r3, #3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd2:	4971      	ldr	r1, [pc, #452]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003de6:	4b6c      	ldr	r3, [pc, #432]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dec:	f023 020c 	bic.w	r2, r3, #12
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003df4:	4968      	ldr	r1, [pc, #416]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00a      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e08:	4b63      	ldr	r3, [pc, #396]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e0e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e16:	4960      	ldr	r1, [pc, #384]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00a      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e2a:	4b5b      	ldr	r3, [pc, #364]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e30:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e38:	4957      	ldr	r1, [pc, #348]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00a      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e4c:	4b52      	ldr	r3, [pc, #328]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e52:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e5a:	494f      	ldr	r1, [pc, #316]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00a      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003e6e:	4b4a      	ldr	r3, [pc, #296]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e74:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e7c:	4946      	ldr	r1, [pc, #280]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00a      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003e90:	4b41      	ldr	r3, [pc, #260]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e96:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e9e:	493e      	ldr	r1, [pc, #248]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00a      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003eb2:	4b39      	ldr	r3, [pc, #228]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eb8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ec0:	4935      	ldr	r1, [pc, #212]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00a      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ed4:	4b30      	ldr	r3, [pc, #192]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eda:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ee2:	492d      	ldr	r1, [pc, #180]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d011      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ef6:	4b28      	ldr	r3, [pc, #160]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003efc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f04:	4924      	ldr	r1, [pc, #144]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f14:	d101      	bne.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003f16:	2301      	movs	r3, #1
 8003f18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003f26:	2301      	movs	r3, #1
 8003f28:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00a      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f36:	4b18      	ldr	r3, [pc, #96]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f3c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f44:	4914      	ldr	r1, [pc, #80]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00b      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f58:	4b0f      	ldr	r3, [pc, #60]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f5e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f68:	490b      	ldr	r1, [pc, #44]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00f      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003f7c:	4b06      	ldr	r3, [pc, #24]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f82:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f8c:	4902      	ldr	r1, [pc, #8]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003f94:	e002      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003f96:	bf00      	nop
 8003f98:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00b      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003fa8:	4b8a      	ldr	r3, [pc, #552]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003faa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fae:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb8:	4986      	ldr	r1, [pc, #536]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00b      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003fcc:	4b81      	ldr	r3, [pc, #516]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fd2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fdc:	497d      	ldr	r1, [pc, #500]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d006      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 80d6 	beq.w	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ff8:	4b76      	ldr	r3, [pc, #472]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a75      	ldr	r2, [pc, #468]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ffe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004002:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004004:	f7fd ff64 	bl	8001ed0 <HAL_GetTick>
 8004008:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800400a:	e008      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800400c:	f7fd ff60 	bl	8001ed0 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b64      	cmp	r3, #100	@ 0x64
 8004018:	d901      	bls.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e195      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800401e:	4b6d      	ldr	r3, [pc, #436]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f0      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d021      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800403a:	2b00      	cmp	r3, #0
 800403c:	d11d      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800403e:	4b65      	ldr	r3, [pc, #404]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004040:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004044:	0c1b      	lsrs	r3, r3, #16
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800404c:	4b61      	ldr	r3, [pc, #388]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800404e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004052:	0e1b      	lsrs	r3, r3, #24
 8004054:	f003 030f 	and.w	r3, r3, #15
 8004058:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	019a      	lsls	r2, r3, #6
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	041b      	lsls	r3, r3, #16
 8004064:	431a      	orrs	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	061b      	lsls	r3, r3, #24
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	071b      	lsls	r3, r3, #28
 8004072:	4958      	ldr	r1, [pc, #352]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004074:	4313      	orrs	r3, r2
 8004076:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d004      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800408a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800408e:	d00a      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004098:	2b00      	cmp	r3, #0
 800409a:	d02e      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040a4:	d129      	bne.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80040a6:	4b4b      	ldr	r3, [pc, #300]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040ac:	0c1b      	lsrs	r3, r3, #16
 80040ae:	f003 0303 	and.w	r3, r3, #3
 80040b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040b4:	4b47      	ldr	r3, [pc, #284]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040ba:	0f1b      	lsrs	r3, r3, #28
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	019a      	lsls	r2, r3, #6
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	041b      	lsls	r3, r3, #16
 80040cc:	431a      	orrs	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	061b      	lsls	r3, r3, #24
 80040d4:	431a      	orrs	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	071b      	lsls	r3, r3, #28
 80040da:	493e      	ldr	r1, [pc, #248]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80040e2:	4b3c      	ldr	r3, [pc, #240]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040e8:	f023 021f 	bic.w	r2, r3, #31
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f0:	3b01      	subs	r3, #1
 80040f2:	4938      	ldr	r1, [pc, #224]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d01d      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004106:	4b33      	ldr	r3, [pc, #204]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004108:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800410c:	0e1b      	lsrs	r3, r3, #24
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004114:	4b2f      	ldr	r3, [pc, #188]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004116:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800411a:	0f1b      	lsrs	r3, r3, #28
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	019a      	lsls	r2, r3, #6
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	041b      	lsls	r3, r3, #16
 800412e:	431a      	orrs	r2, r3
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	061b      	lsls	r3, r3, #24
 8004134:	431a      	orrs	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	071b      	lsls	r3, r3, #28
 800413a:	4926      	ldr	r1, [pc, #152]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800413c:	4313      	orrs	r3, r2
 800413e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d011      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	019a      	lsls	r2, r3, #6
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	041b      	lsls	r3, r3, #16
 800415a:	431a      	orrs	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	061b      	lsls	r3, r3, #24
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	071b      	lsls	r3, r3, #28
 800416a:	491a      	ldr	r1, [pc, #104]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800416c:	4313      	orrs	r3, r2
 800416e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004172:	4b18      	ldr	r3, [pc, #96]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a17      	ldr	r2, [pc, #92]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004178:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800417c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800417e:	f7fd fea7 	bl	8001ed0 <HAL_GetTick>
 8004182:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004184:	e008      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004186:	f7fd fea3 	bl	8001ed0 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b64      	cmp	r3, #100	@ 0x64
 8004192:	d901      	bls.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e0d8      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004198:	4b0e      	ldr	r3, [pc, #56]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0f0      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	f040 80ce 	bne.w	8004348 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80041ac:	4b09      	ldr	r3, [pc, #36]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a08      	ldr	r2, [pc, #32]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041b8:	f7fd fe8a 	bl	8001ed0 <HAL_GetTick>
 80041bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041be:	e00b      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80041c0:	f7fd fe86 	bl	8001ed0 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b64      	cmp	r3, #100	@ 0x64
 80041cc:	d904      	bls.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e0bb      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80041d2:	bf00      	nop
 80041d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041d8:	4b5e      	ldr	r3, [pc, #376]	@ (8004354 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041e4:	d0ec      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d009      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004202:	2b00      	cmp	r3, #0
 8004204:	d02e      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420a:	2b00      	cmp	r3, #0
 800420c:	d12a      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800420e:	4b51      	ldr	r3, [pc, #324]	@ (8004354 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004214:	0c1b      	lsrs	r3, r3, #16
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800421c:	4b4d      	ldr	r3, [pc, #308]	@ (8004354 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800421e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004222:	0f1b      	lsrs	r3, r3, #28
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	019a      	lsls	r2, r3, #6
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	041b      	lsls	r3, r3, #16
 8004234:	431a      	orrs	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	061b      	lsls	r3, r3, #24
 800423c:	431a      	orrs	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	071b      	lsls	r3, r3, #28
 8004242:	4944      	ldr	r1, [pc, #272]	@ (8004354 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004244:	4313      	orrs	r3, r2
 8004246:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800424a:	4b42      	ldr	r3, [pc, #264]	@ (8004354 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800424c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004250:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004258:	3b01      	subs	r3, #1
 800425a:	021b      	lsls	r3, r3, #8
 800425c:	493d      	ldr	r1, [pc, #244]	@ (8004354 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800425e:	4313      	orrs	r3, r2
 8004260:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d022      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004274:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004278:	d11d      	bne.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800427a:	4b36      	ldr	r3, [pc, #216]	@ (8004354 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800427c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004280:	0e1b      	lsrs	r3, r3, #24
 8004282:	f003 030f 	and.w	r3, r3, #15
 8004286:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004288:	4b32      	ldr	r3, [pc, #200]	@ (8004354 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800428a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800428e:	0f1b      	lsrs	r3, r3, #28
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	019a      	lsls	r2, r3, #6
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	041b      	lsls	r3, r3, #16
 80042a2:	431a      	orrs	r2, r3
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	061b      	lsls	r3, r3, #24
 80042a8:	431a      	orrs	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	071b      	lsls	r3, r3, #28
 80042ae:	4929      	ldr	r1, [pc, #164]	@ (8004354 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0308 	and.w	r3, r3, #8
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d028      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80042c2:	4b24      	ldr	r3, [pc, #144]	@ (8004354 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042c8:	0e1b      	lsrs	r3, r3, #24
 80042ca:	f003 030f 	and.w	r3, r3, #15
 80042ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80042d0:	4b20      	ldr	r3, [pc, #128]	@ (8004354 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042d6:	0c1b      	lsrs	r3, r3, #16
 80042d8:	f003 0303 	and.w	r3, r3, #3
 80042dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	019a      	lsls	r2, r3, #6
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	041b      	lsls	r3, r3, #16
 80042e8:	431a      	orrs	r2, r3
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	061b      	lsls	r3, r3, #24
 80042ee:	431a      	orrs	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	69db      	ldr	r3, [r3, #28]
 80042f4:	071b      	lsls	r3, r3, #28
 80042f6:	4917      	ldr	r1, [pc, #92]	@ (8004354 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80042fe:	4b15      	ldr	r3, [pc, #84]	@ (8004354 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004300:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004304:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800430c:	4911      	ldr	r1, [pc, #68]	@ (8004354 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800430e:	4313      	orrs	r3, r2
 8004310:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004314:	4b0f      	ldr	r3, [pc, #60]	@ (8004354 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a0e      	ldr	r2, [pc, #56]	@ (8004354 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800431a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800431e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004320:	f7fd fdd6 	bl	8001ed0 <HAL_GetTick>
 8004324:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004326:	e008      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004328:	f7fd fdd2 	bl	8001ed0 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b64      	cmp	r3, #100	@ 0x64
 8004334:	d901      	bls.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e007      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800433a:	4b06      	ldr	r3, [pc, #24]	@ (8004354 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004342:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004346:	d1ef      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3720      	adds	r7, #32
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	40023800 	.word	0x40023800

08004358 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e049      	b.n	80043fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d106      	bne.n	8004384 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f841 	bl	8004406 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3304      	adds	r3, #4
 8004394:	4619      	mov	r1, r3
 8004396:	4610      	mov	r0, r2
 8004398:	f000 f9e8 	bl	800476c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800440e:	bf00      	nop
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
	...

0800441c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b01      	cmp	r3, #1
 800442e:	d001      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e054      	b.n	80044de <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68da      	ldr	r2, [r3, #12]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0201 	orr.w	r2, r2, #1
 800444a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a26      	ldr	r2, [pc, #152]	@ (80044ec <HAL_TIM_Base_Start_IT+0xd0>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d022      	beq.n	800449c <HAL_TIM_Base_Start_IT+0x80>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800445e:	d01d      	beq.n	800449c <HAL_TIM_Base_Start_IT+0x80>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a22      	ldr	r2, [pc, #136]	@ (80044f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d018      	beq.n	800449c <HAL_TIM_Base_Start_IT+0x80>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a21      	ldr	r2, [pc, #132]	@ (80044f4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d013      	beq.n	800449c <HAL_TIM_Base_Start_IT+0x80>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a1f      	ldr	r2, [pc, #124]	@ (80044f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d00e      	beq.n	800449c <HAL_TIM_Base_Start_IT+0x80>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a1e      	ldr	r2, [pc, #120]	@ (80044fc <HAL_TIM_Base_Start_IT+0xe0>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d009      	beq.n	800449c <HAL_TIM_Base_Start_IT+0x80>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a1c      	ldr	r2, [pc, #112]	@ (8004500 <HAL_TIM_Base_Start_IT+0xe4>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d004      	beq.n	800449c <HAL_TIM_Base_Start_IT+0x80>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a1b      	ldr	r2, [pc, #108]	@ (8004504 <HAL_TIM_Base_Start_IT+0xe8>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d115      	bne.n	80044c8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689a      	ldr	r2, [r3, #8]
 80044a2:	4b19      	ldr	r3, [pc, #100]	@ (8004508 <HAL_TIM_Base_Start_IT+0xec>)
 80044a4:	4013      	ands	r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2b06      	cmp	r3, #6
 80044ac:	d015      	beq.n	80044da <HAL_TIM_Base_Start_IT+0xbe>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044b4:	d011      	beq.n	80044da <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f042 0201 	orr.w	r2, r2, #1
 80044c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044c6:	e008      	b.n	80044da <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f042 0201 	orr.w	r2, r2, #1
 80044d6:	601a      	str	r2, [r3, #0]
 80044d8:	e000      	b.n	80044dc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	40010000 	.word	0x40010000
 80044f0:	40000400 	.word	0x40000400
 80044f4:	40000800 	.word	0x40000800
 80044f8:	40000c00 	.word	0x40000c00
 80044fc:	40010400 	.word	0x40010400
 8004500:	40014000 	.word	0x40014000
 8004504:	40001800 	.word	0x40001800
 8004508:	00010007 	.word	0x00010007

0800450c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d020      	beq.n	8004570 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d01b      	beq.n	8004570 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f06f 0202 	mvn.w	r2, #2
 8004540:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f8e9 	bl	800472e <HAL_TIM_IC_CaptureCallback>
 800455c:	e005      	b.n	800456a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f8db 	bl	800471a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f8ec 	bl	8004742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f003 0304 	and.w	r3, r3, #4
 8004576:	2b00      	cmp	r3, #0
 8004578:	d020      	beq.n	80045bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d01b      	beq.n	80045bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f06f 0204 	mvn.w	r2, #4
 800458c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2202      	movs	r2, #2
 8004592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f8c3 	bl	800472e <HAL_TIM_IC_CaptureCallback>
 80045a8:	e005      	b.n	80045b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f8b5 	bl	800471a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f8c6 	bl	8004742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d020      	beq.n	8004608 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f003 0308 	and.w	r3, r3, #8
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d01b      	beq.n	8004608 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f06f 0208 	mvn.w	r2, #8
 80045d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2204      	movs	r2, #4
 80045de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f89d 	bl	800472e <HAL_TIM_IC_CaptureCallback>
 80045f4:	e005      	b.n	8004602 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f88f 	bl	800471a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f8a0 	bl	8004742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f003 0310 	and.w	r3, r3, #16
 800460e:	2b00      	cmp	r3, #0
 8004610:	d020      	beq.n	8004654 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f003 0310 	and.w	r3, r3, #16
 8004618:	2b00      	cmp	r3, #0
 800461a:	d01b      	beq.n	8004654 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f06f 0210 	mvn.w	r2, #16
 8004624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2208      	movs	r2, #8
 800462a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004636:	2b00      	cmp	r3, #0
 8004638:	d003      	beq.n	8004642 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f877 	bl	800472e <HAL_TIM_IC_CaptureCallback>
 8004640:	e005      	b.n	800464e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f869 	bl	800471a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 f87a 	bl	8004742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00c      	beq.n	8004678 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	d007      	beq.n	8004678 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f06f 0201 	mvn.w	r2, #1
 8004670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7fd fa3c 	bl	8001af0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800467e:	2b00      	cmp	r3, #0
 8004680:	d104      	bne.n	800468c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00c      	beq.n	80046a6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004692:	2b00      	cmp	r3, #0
 8004694:	d007      	beq.n	80046a6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800469e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f913 	bl	80048cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00c      	beq.n	80046ca <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d007      	beq.n	80046ca <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80046c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f90b 	bl	80048e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00c      	beq.n	80046ee <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d007      	beq.n	80046ee <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80046e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f834 	bl	8004756 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	f003 0320 	and.w	r3, r3, #32
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00c      	beq.n	8004712 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f003 0320 	and.w	r3, r3, #32
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d007      	beq.n	8004712 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f06f 0220 	mvn.w	r2, #32
 800470a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f8d3 	bl	80048b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004712:	bf00      	nop
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800474a:	bf00      	nop
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004756:	b480      	push	{r7}
 8004758:	b083      	sub	sp, #12
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800475e:	bf00      	nop
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
	...

0800476c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a43      	ldr	r2, [pc, #268]	@ (800488c <TIM_Base_SetConfig+0x120>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d013      	beq.n	80047ac <TIM_Base_SetConfig+0x40>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800478a:	d00f      	beq.n	80047ac <TIM_Base_SetConfig+0x40>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a40      	ldr	r2, [pc, #256]	@ (8004890 <TIM_Base_SetConfig+0x124>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d00b      	beq.n	80047ac <TIM_Base_SetConfig+0x40>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a3f      	ldr	r2, [pc, #252]	@ (8004894 <TIM_Base_SetConfig+0x128>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d007      	beq.n	80047ac <TIM_Base_SetConfig+0x40>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a3e      	ldr	r2, [pc, #248]	@ (8004898 <TIM_Base_SetConfig+0x12c>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d003      	beq.n	80047ac <TIM_Base_SetConfig+0x40>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a3d      	ldr	r2, [pc, #244]	@ (800489c <TIM_Base_SetConfig+0x130>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d108      	bne.n	80047be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a32      	ldr	r2, [pc, #200]	@ (800488c <TIM_Base_SetConfig+0x120>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d02b      	beq.n	800481e <TIM_Base_SetConfig+0xb2>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047cc:	d027      	beq.n	800481e <TIM_Base_SetConfig+0xb2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a2f      	ldr	r2, [pc, #188]	@ (8004890 <TIM_Base_SetConfig+0x124>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d023      	beq.n	800481e <TIM_Base_SetConfig+0xb2>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a2e      	ldr	r2, [pc, #184]	@ (8004894 <TIM_Base_SetConfig+0x128>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d01f      	beq.n	800481e <TIM_Base_SetConfig+0xb2>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a2d      	ldr	r2, [pc, #180]	@ (8004898 <TIM_Base_SetConfig+0x12c>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d01b      	beq.n	800481e <TIM_Base_SetConfig+0xb2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a2c      	ldr	r2, [pc, #176]	@ (800489c <TIM_Base_SetConfig+0x130>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d017      	beq.n	800481e <TIM_Base_SetConfig+0xb2>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a2b      	ldr	r2, [pc, #172]	@ (80048a0 <TIM_Base_SetConfig+0x134>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d013      	beq.n	800481e <TIM_Base_SetConfig+0xb2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a2a      	ldr	r2, [pc, #168]	@ (80048a4 <TIM_Base_SetConfig+0x138>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d00f      	beq.n	800481e <TIM_Base_SetConfig+0xb2>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a29      	ldr	r2, [pc, #164]	@ (80048a8 <TIM_Base_SetConfig+0x13c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d00b      	beq.n	800481e <TIM_Base_SetConfig+0xb2>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a28      	ldr	r2, [pc, #160]	@ (80048ac <TIM_Base_SetConfig+0x140>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d007      	beq.n	800481e <TIM_Base_SetConfig+0xb2>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a27      	ldr	r2, [pc, #156]	@ (80048b0 <TIM_Base_SetConfig+0x144>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d003      	beq.n	800481e <TIM_Base_SetConfig+0xb2>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a26      	ldr	r2, [pc, #152]	@ (80048b4 <TIM_Base_SetConfig+0x148>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d108      	bne.n	8004830 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	4313      	orrs	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	689a      	ldr	r2, [r3, #8]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a0e      	ldr	r2, [pc, #56]	@ (800488c <TIM_Base_SetConfig+0x120>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d003      	beq.n	800485e <TIM_Base_SetConfig+0xf2>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a10      	ldr	r2, [pc, #64]	@ (800489c <TIM_Base_SetConfig+0x130>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d103      	bne.n	8004866 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	691a      	ldr	r2, [r3, #16]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f043 0204 	orr.w	r2, r3, #4
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	601a      	str	r2, [r3, #0]
}
 800487e:	bf00      	nop
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	40010000 	.word	0x40010000
 8004890:	40000400 	.word	0x40000400
 8004894:	40000800 	.word	0x40000800
 8004898:	40000c00 	.word	0x40000c00
 800489c:	40010400 	.word	0x40010400
 80048a0:	40014000 	.word	0x40014000
 80048a4:	40014400 	.word	0x40014400
 80048a8:	40014800 	.word	0x40014800
 80048ac:	40001800 	.word	0x40001800
 80048b0:	40001c00 	.word	0x40001c00
 80048b4:	40002000 	.word	0x40002000

080048b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e040      	b.n	8004988 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800490a:	2b00      	cmp	r3, #0
 800490c:	d106      	bne.n	800491c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7fd f988 	bl	8001c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2224      	movs	r2, #36	@ 0x24
 8004920:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 0201 	bic.w	r2, r2, #1
 8004930:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004936:	2b00      	cmp	r3, #0
 8004938:	d002      	beq.n	8004940 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 fa8c 	bl	8004e58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f825 	bl	8004990 <UART_SetConfig>
 8004946:	4603      	mov	r3, r0
 8004948:	2b01      	cmp	r3, #1
 800494a:	d101      	bne.n	8004950 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e01b      	b.n	8004988 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800495e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689a      	ldr	r2, [r3, #8]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800496e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f042 0201 	orr.w	r2, r2, #1
 800497e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 fb0b 	bl	8004f9c <UART_CheckIdleState>
 8004986:	4603      	mov	r3, r0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b088      	sub	sp, #32
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004998:	2300      	movs	r3, #0
 800499a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	431a      	orrs	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	431a      	orrs	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	4ba6      	ldr	r3, [pc, #664]	@ (8004c54 <UART_SetConfig+0x2c4>)
 80049bc:	4013      	ands	r3, r2
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	6812      	ldr	r2, [r2, #0]
 80049c2:	6979      	ldr	r1, [r7, #20]
 80049c4:	430b      	orrs	r3, r1
 80049c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a94      	ldr	r2, [pc, #592]	@ (8004c58 <UART_SetConfig+0x2c8>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d120      	bne.n	8004a4e <UART_SetConfig+0xbe>
 8004a0c:	4b93      	ldr	r3, [pc, #588]	@ (8004c5c <UART_SetConfig+0x2cc>)
 8004a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a12:	f003 0303 	and.w	r3, r3, #3
 8004a16:	2b03      	cmp	r3, #3
 8004a18:	d816      	bhi.n	8004a48 <UART_SetConfig+0xb8>
 8004a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a20 <UART_SetConfig+0x90>)
 8004a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a20:	08004a31 	.word	0x08004a31
 8004a24:	08004a3d 	.word	0x08004a3d
 8004a28:	08004a37 	.word	0x08004a37
 8004a2c:	08004a43 	.word	0x08004a43
 8004a30:	2301      	movs	r3, #1
 8004a32:	77fb      	strb	r3, [r7, #31]
 8004a34:	e150      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004a36:	2302      	movs	r3, #2
 8004a38:	77fb      	strb	r3, [r7, #31]
 8004a3a:	e14d      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004a3c:	2304      	movs	r3, #4
 8004a3e:	77fb      	strb	r3, [r7, #31]
 8004a40:	e14a      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004a42:	2308      	movs	r3, #8
 8004a44:	77fb      	strb	r3, [r7, #31]
 8004a46:	e147      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004a48:	2310      	movs	r3, #16
 8004a4a:	77fb      	strb	r3, [r7, #31]
 8004a4c:	e144      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a83      	ldr	r2, [pc, #524]	@ (8004c60 <UART_SetConfig+0x2d0>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d132      	bne.n	8004abe <UART_SetConfig+0x12e>
 8004a58:	4b80      	ldr	r3, [pc, #512]	@ (8004c5c <UART_SetConfig+0x2cc>)
 8004a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a5e:	f003 030c 	and.w	r3, r3, #12
 8004a62:	2b0c      	cmp	r3, #12
 8004a64:	d828      	bhi.n	8004ab8 <UART_SetConfig+0x128>
 8004a66:	a201      	add	r2, pc, #4	@ (adr r2, 8004a6c <UART_SetConfig+0xdc>)
 8004a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6c:	08004aa1 	.word	0x08004aa1
 8004a70:	08004ab9 	.word	0x08004ab9
 8004a74:	08004ab9 	.word	0x08004ab9
 8004a78:	08004ab9 	.word	0x08004ab9
 8004a7c:	08004aad 	.word	0x08004aad
 8004a80:	08004ab9 	.word	0x08004ab9
 8004a84:	08004ab9 	.word	0x08004ab9
 8004a88:	08004ab9 	.word	0x08004ab9
 8004a8c:	08004aa7 	.word	0x08004aa7
 8004a90:	08004ab9 	.word	0x08004ab9
 8004a94:	08004ab9 	.word	0x08004ab9
 8004a98:	08004ab9 	.word	0x08004ab9
 8004a9c:	08004ab3 	.word	0x08004ab3
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	77fb      	strb	r3, [r7, #31]
 8004aa4:	e118      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	77fb      	strb	r3, [r7, #31]
 8004aaa:	e115      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004aac:	2304      	movs	r3, #4
 8004aae:	77fb      	strb	r3, [r7, #31]
 8004ab0:	e112      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004ab2:	2308      	movs	r3, #8
 8004ab4:	77fb      	strb	r3, [r7, #31]
 8004ab6:	e10f      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004ab8:	2310      	movs	r3, #16
 8004aba:	77fb      	strb	r3, [r7, #31]
 8004abc:	e10c      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a68      	ldr	r2, [pc, #416]	@ (8004c64 <UART_SetConfig+0x2d4>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d120      	bne.n	8004b0a <UART_SetConfig+0x17a>
 8004ac8:	4b64      	ldr	r3, [pc, #400]	@ (8004c5c <UART_SetConfig+0x2cc>)
 8004aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ace:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004ad2:	2b30      	cmp	r3, #48	@ 0x30
 8004ad4:	d013      	beq.n	8004afe <UART_SetConfig+0x16e>
 8004ad6:	2b30      	cmp	r3, #48	@ 0x30
 8004ad8:	d814      	bhi.n	8004b04 <UART_SetConfig+0x174>
 8004ada:	2b20      	cmp	r3, #32
 8004adc:	d009      	beq.n	8004af2 <UART_SetConfig+0x162>
 8004ade:	2b20      	cmp	r3, #32
 8004ae0:	d810      	bhi.n	8004b04 <UART_SetConfig+0x174>
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d002      	beq.n	8004aec <UART_SetConfig+0x15c>
 8004ae6:	2b10      	cmp	r3, #16
 8004ae8:	d006      	beq.n	8004af8 <UART_SetConfig+0x168>
 8004aea:	e00b      	b.n	8004b04 <UART_SetConfig+0x174>
 8004aec:	2300      	movs	r3, #0
 8004aee:	77fb      	strb	r3, [r7, #31]
 8004af0:	e0f2      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004af2:	2302      	movs	r3, #2
 8004af4:	77fb      	strb	r3, [r7, #31]
 8004af6:	e0ef      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004af8:	2304      	movs	r3, #4
 8004afa:	77fb      	strb	r3, [r7, #31]
 8004afc:	e0ec      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004afe:	2308      	movs	r3, #8
 8004b00:	77fb      	strb	r3, [r7, #31]
 8004b02:	e0e9      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004b04:	2310      	movs	r3, #16
 8004b06:	77fb      	strb	r3, [r7, #31]
 8004b08:	e0e6      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a56      	ldr	r2, [pc, #344]	@ (8004c68 <UART_SetConfig+0x2d8>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d120      	bne.n	8004b56 <UART_SetConfig+0x1c6>
 8004b14:	4b51      	ldr	r3, [pc, #324]	@ (8004c5c <UART_SetConfig+0x2cc>)
 8004b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b1a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004b1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b20:	d013      	beq.n	8004b4a <UART_SetConfig+0x1ba>
 8004b22:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b24:	d814      	bhi.n	8004b50 <UART_SetConfig+0x1c0>
 8004b26:	2b80      	cmp	r3, #128	@ 0x80
 8004b28:	d009      	beq.n	8004b3e <UART_SetConfig+0x1ae>
 8004b2a:	2b80      	cmp	r3, #128	@ 0x80
 8004b2c:	d810      	bhi.n	8004b50 <UART_SetConfig+0x1c0>
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d002      	beq.n	8004b38 <UART_SetConfig+0x1a8>
 8004b32:	2b40      	cmp	r3, #64	@ 0x40
 8004b34:	d006      	beq.n	8004b44 <UART_SetConfig+0x1b4>
 8004b36:	e00b      	b.n	8004b50 <UART_SetConfig+0x1c0>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	77fb      	strb	r3, [r7, #31]
 8004b3c:	e0cc      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004b3e:	2302      	movs	r3, #2
 8004b40:	77fb      	strb	r3, [r7, #31]
 8004b42:	e0c9      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004b44:	2304      	movs	r3, #4
 8004b46:	77fb      	strb	r3, [r7, #31]
 8004b48:	e0c6      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004b4a:	2308      	movs	r3, #8
 8004b4c:	77fb      	strb	r3, [r7, #31]
 8004b4e:	e0c3      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004b50:	2310      	movs	r3, #16
 8004b52:	77fb      	strb	r3, [r7, #31]
 8004b54:	e0c0      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a44      	ldr	r2, [pc, #272]	@ (8004c6c <UART_SetConfig+0x2dc>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d125      	bne.n	8004bac <UART_SetConfig+0x21c>
 8004b60:	4b3e      	ldr	r3, [pc, #248]	@ (8004c5c <UART_SetConfig+0x2cc>)
 8004b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b6e:	d017      	beq.n	8004ba0 <UART_SetConfig+0x210>
 8004b70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b74:	d817      	bhi.n	8004ba6 <UART_SetConfig+0x216>
 8004b76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b7a:	d00b      	beq.n	8004b94 <UART_SetConfig+0x204>
 8004b7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b80:	d811      	bhi.n	8004ba6 <UART_SetConfig+0x216>
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <UART_SetConfig+0x1fe>
 8004b86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b8a:	d006      	beq.n	8004b9a <UART_SetConfig+0x20a>
 8004b8c:	e00b      	b.n	8004ba6 <UART_SetConfig+0x216>
 8004b8e:	2300      	movs	r3, #0
 8004b90:	77fb      	strb	r3, [r7, #31]
 8004b92:	e0a1      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004b94:	2302      	movs	r3, #2
 8004b96:	77fb      	strb	r3, [r7, #31]
 8004b98:	e09e      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004b9a:	2304      	movs	r3, #4
 8004b9c:	77fb      	strb	r3, [r7, #31]
 8004b9e:	e09b      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004ba0:	2308      	movs	r3, #8
 8004ba2:	77fb      	strb	r3, [r7, #31]
 8004ba4:	e098      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004ba6:	2310      	movs	r3, #16
 8004ba8:	77fb      	strb	r3, [r7, #31]
 8004baa:	e095      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a2f      	ldr	r2, [pc, #188]	@ (8004c70 <UART_SetConfig+0x2e0>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d125      	bne.n	8004c02 <UART_SetConfig+0x272>
 8004bb6:	4b29      	ldr	r3, [pc, #164]	@ (8004c5c <UART_SetConfig+0x2cc>)
 8004bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bbc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004bc0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004bc4:	d017      	beq.n	8004bf6 <UART_SetConfig+0x266>
 8004bc6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004bca:	d817      	bhi.n	8004bfc <UART_SetConfig+0x26c>
 8004bcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bd0:	d00b      	beq.n	8004bea <UART_SetConfig+0x25a>
 8004bd2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bd6:	d811      	bhi.n	8004bfc <UART_SetConfig+0x26c>
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <UART_SetConfig+0x254>
 8004bdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004be0:	d006      	beq.n	8004bf0 <UART_SetConfig+0x260>
 8004be2:	e00b      	b.n	8004bfc <UART_SetConfig+0x26c>
 8004be4:	2301      	movs	r3, #1
 8004be6:	77fb      	strb	r3, [r7, #31]
 8004be8:	e076      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004bea:	2302      	movs	r3, #2
 8004bec:	77fb      	strb	r3, [r7, #31]
 8004bee:	e073      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004bf0:	2304      	movs	r3, #4
 8004bf2:	77fb      	strb	r3, [r7, #31]
 8004bf4:	e070      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004bf6:	2308      	movs	r3, #8
 8004bf8:	77fb      	strb	r3, [r7, #31]
 8004bfa:	e06d      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004bfc:	2310      	movs	r3, #16
 8004bfe:	77fb      	strb	r3, [r7, #31]
 8004c00:	e06a      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a1b      	ldr	r2, [pc, #108]	@ (8004c74 <UART_SetConfig+0x2e4>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d138      	bne.n	8004c7e <UART_SetConfig+0x2ee>
 8004c0c:	4b13      	ldr	r3, [pc, #76]	@ (8004c5c <UART_SetConfig+0x2cc>)
 8004c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c12:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004c16:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c1a:	d017      	beq.n	8004c4c <UART_SetConfig+0x2bc>
 8004c1c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c20:	d82a      	bhi.n	8004c78 <UART_SetConfig+0x2e8>
 8004c22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c26:	d00b      	beq.n	8004c40 <UART_SetConfig+0x2b0>
 8004c28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c2c:	d824      	bhi.n	8004c78 <UART_SetConfig+0x2e8>
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <UART_SetConfig+0x2aa>
 8004c32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c36:	d006      	beq.n	8004c46 <UART_SetConfig+0x2b6>
 8004c38:	e01e      	b.n	8004c78 <UART_SetConfig+0x2e8>
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	77fb      	strb	r3, [r7, #31]
 8004c3e:	e04b      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004c40:	2302      	movs	r3, #2
 8004c42:	77fb      	strb	r3, [r7, #31]
 8004c44:	e048      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004c46:	2304      	movs	r3, #4
 8004c48:	77fb      	strb	r3, [r7, #31]
 8004c4a:	e045      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004c4c:	2308      	movs	r3, #8
 8004c4e:	77fb      	strb	r3, [r7, #31]
 8004c50:	e042      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004c52:	bf00      	nop
 8004c54:	efff69f3 	.word	0xefff69f3
 8004c58:	40011000 	.word	0x40011000
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	40004400 	.word	0x40004400
 8004c64:	40004800 	.word	0x40004800
 8004c68:	40004c00 	.word	0x40004c00
 8004c6c:	40005000 	.word	0x40005000
 8004c70:	40011400 	.word	0x40011400
 8004c74:	40007800 	.word	0x40007800
 8004c78:	2310      	movs	r3, #16
 8004c7a:	77fb      	strb	r3, [r7, #31]
 8004c7c:	e02c      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a72      	ldr	r2, [pc, #456]	@ (8004e4c <UART_SetConfig+0x4bc>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d125      	bne.n	8004cd4 <UART_SetConfig+0x344>
 8004c88:	4b71      	ldr	r3, [pc, #452]	@ (8004e50 <UART_SetConfig+0x4c0>)
 8004c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c8e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004c92:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004c96:	d017      	beq.n	8004cc8 <UART_SetConfig+0x338>
 8004c98:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004c9c:	d817      	bhi.n	8004cce <UART_SetConfig+0x33e>
 8004c9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ca2:	d00b      	beq.n	8004cbc <UART_SetConfig+0x32c>
 8004ca4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ca8:	d811      	bhi.n	8004cce <UART_SetConfig+0x33e>
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <UART_SetConfig+0x326>
 8004cae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cb2:	d006      	beq.n	8004cc2 <UART_SetConfig+0x332>
 8004cb4:	e00b      	b.n	8004cce <UART_SetConfig+0x33e>
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	77fb      	strb	r3, [r7, #31]
 8004cba:	e00d      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	77fb      	strb	r3, [r7, #31]
 8004cc0:	e00a      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004cc2:	2304      	movs	r3, #4
 8004cc4:	77fb      	strb	r3, [r7, #31]
 8004cc6:	e007      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004cc8:	2308      	movs	r3, #8
 8004cca:	77fb      	strb	r3, [r7, #31]
 8004ccc:	e004      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004cce:	2310      	movs	r3, #16
 8004cd0:	77fb      	strb	r3, [r7, #31]
 8004cd2:	e001      	b.n	8004cd8 <UART_SetConfig+0x348>
 8004cd4:	2310      	movs	r3, #16
 8004cd6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ce0:	d15b      	bne.n	8004d9a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004ce2:	7ffb      	ldrb	r3, [r7, #31]
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	d828      	bhi.n	8004d3a <UART_SetConfig+0x3aa>
 8004ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8004cf0 <UART_SetConfig+0x360>)
 8004cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cee:	bf00      	nop
 8004cf0:	08004d15 	.word	0x08004d15
 8004cf4:	08004d1d 	.word	0x08004d1d
 8004cf8:	08004d25 	.word	0x08004d25
 8004cfc:	08004d3b 	.word	0x08004d3b
 8004d00:	08004d2b 	.word	0x08004d2b
 8004d04:	08004d3b 	.word	0x08004d3b
 8004d08:	08004d3b 	.word	0x08004d3b
 8004d0c:	08004d3b 	.word	0x08004d3b
 8004d10:	08004d33 	.word	0x08004d33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d14:	f7fe fe9e 	bl	8003a54 <HAL_RCC_GetPCLK1Freq>
 8004d18:	61b8      	str	r0, [r7, #24]
        break;
 8004d1a:	e013      	b.n	8004d44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d1c:	f7fe feae 	bl	8003a7c <HAL_RCC_GetPCLK2Freq>
 8004d20:	61b8      	str	r0, [r7, #24]
        break;
 8004d22:	e00f      	b.n	8004d44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d24:	4b4b      	ldr	r3, [pc, #300]	@ (8004e54 <UART_SetConfig+0x4c4>)
 8004d26:	61bb      	str	r3, [r7, #24]
        break;
 8004d28:	e00c      	b.n	8004d44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d2a:	f7fe fd81 	bl	8003830 <HAL_RCC_GetSysClockFreq>
 8004d2e:	61b8      	str	r0, [r7, #24]
        break;
 8004d30:	e008      	b.n	8004d44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d36:	61bb      	str	r3, [r7, #24]
        break;
 8004d38:	e004      	b.n	8004d44 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	77bb      	strb	r3, [r7, #30]
        break;
 8004d42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d074      	beq.n	8004e34 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	005a      	lsls	r2, r3, #1
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	085b      	lsrs	r3, r3, #1
 8004d54:	441a      	add	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	2b0f      	cmp	r3, #15
 8004d64:	d916      	bls.n	8004d94 <UART_SetConfig+0x404>
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d6c:	d212      	bcs.n	8004d94 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	f023 030f 	bic.w	r3, r3, #15
 8004d76:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	085b      	lsrs	r3, r3, #1
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	f003 0307 	and.w	r3, r3, #7
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	89fb      	ldrh	r3, [r7, #14]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	89fa      	ldrh	r2, [r7, #14]
 8004d90:	60da      	str	r2, [r3, #12]
 8004d92:	e04f      	b.n	8004e34 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	77bb      	strb	r3, [r7, #30]
 8004d98:	e04c      	b.n	8004e34 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d9a:	7ffb      	ldrb	r3, [r7, #31]
 8004d9c:	2b08      	cmp	r3, #8
 8004d9e:	d828      	bhi.n	8004df2 <UART_SetConfig+0x462>
 8004da0:	a201      	add	r2, pc, #4	@ (adr r2, 8004da8 <UART_SetConfig+0x418>)
 8004da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da6:	bf00      	nop
 8004da8:	08004dcd 	.word	0x08004dcd
 8004dac:	08004dd5 	.word	0x08004dd5
 8004db0:	08004ddd 	.word	0x08004ddd
 8004db4:	08004df3 	.word	0x08004df3
 8004db8:	08004de3 	.word	0x08004de3
 8004dbc:	08004df3 	.word	0x08004df3
 8004dc0:	08004df3 	.word	0x08004df3
 8004dc4:	08004df3 	.word	0x08004df3
 8004dc8:	08004deb 	.word	0x08004deb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dcc:	f7fe fe42 	bl	8003a54 <HAL_RCC_GetPCLK1Freq>
 8004dd0:	61b8      	str	r0, [r7, #24]
        break;
 8004dd2:	e013      	b.n	8004dfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dd4:	f7fe fe52 	bl	8003a7c <HAL_RCC_GetPCLK2Freq>
 8004dd8:	61b8      	str	r0, [r7, #24]
        break;
 8004dda:	e00f      	b.n	8004dfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8004e54 <UART_SetConfig+0x4c4>)
 8004dde:	61bb      	str	r3, [r7, #24]
        break;
 8004de0:	e00c      	b.n	8004dfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004de2:	f7fe fd25 	bl	8003830 <HAL_RCC_GetSysClockFreq>
 8004de6:	61b8      	str	r0, [r7, #24]
        break;
 8004de8:	e008      	b.n	8004dfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dee:	61bb      	str	r3, [r7, #24]
        break;
 8004df0:	e004      	b.n	8004dfc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	77bb      	strb	r3, [r7, #30]
        break;
 8004dfa:	bf00      	nop
    }

    if (pclk != 0U)
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d018      	beq.n	8004e34 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	085a      	lsrs	r2, r3, #1
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	441a      	add	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	2b0f      	cmp	r3, #15
 8004e1a:	d909      	bls.n	8004e30 <UART_SetConfig+0x4a0>
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e22:	d205      	bcs.n	8004e30 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	60da      	str	r2, [r3, #12]
 8004e2e:	e001      	b.n	8004e34 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004e40:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3720      	adds	r7, #32
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	40007c00 	.word	0x40007c00
 8004e50:	40023800 	.word	0x40023800
 8004e54:	00f42400 	.word	0x00f42400

08004e58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e64:	f003 0308 	and.w	r3, r3, #8
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00a      	beq.n	8004e82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00a      	beq.n	8004ec6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eca:	f003 0304 	and.w	r3, r3, #4
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eec:	f003 0310 	and.w	r3, r3, #16
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00a      	beq.n	8004f0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0e:	f003 0320 	and.w	r3, r3, #32
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d01a      	beq.n	8004f6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f56:	d10a      	bne.n	8004f6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	605a      	str	r2, [r3, #4]
  }
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b098      	sub	sp, #96	@ 0x60
 8004fa0:	af02      	add	r7, sp, #8
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fac:	f7fc ff90 	bl	8001ed0 <HAL_GetTick>
 8004fb0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0308 	and.w	r3, r3, #8
 8004fbc:	2b08      	cmp	r3, #8
 8004fbe:	d12e      	bne.n	800501e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fc0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f88c 	bl	80050ec <UART_WaitOnFlagUntilTimeout>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d021      	beq.n	800501e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fe2:	e853 3f00 	ldrex	r3, [r3]
 8004fe6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fee:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ff8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ffa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ffe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005000:	e841 2300 	strex	r3, r2, [r1]
 8005004:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1e6      	bne.n	8004fda <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2220      	movs	r2, #32
 8005010:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e062      	b.n	80050e4 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0304 	and.w	r3, r3, #4
 8005028:	2b04      	cmp	r3, #4
 800502a:	d149      	bne.n	80050c0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800502c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005034:	2200      	movs	r2, #0
 8005036:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f856 	bl	80050ec <UART_WaitOnFlagUntilTimeout>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d03c      	beq.n	80050c0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504e:	e853 3f00 	ldrex	r3, [r3]
 8005052:	623b      	str	r3, [r7, #32]
   return(result);
 8005054:	6a3b      	ldr	r3, [r7, #32]
 8005056:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800505a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	461a      	mov	r2, r3
 8005062:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005064:	633b      	str	r3, [r7, #48]	@ 0x30
 8005066:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005068:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800506a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800506c:	e841 2300 	strex	r3, r2, [r1]
 8005070:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1e6      	bne.n	8005046 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	3308      	adds	r3, #8
 800507e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	e853 3f00 	ldrex	r3, [r3]
 8005086:	60fb      	str	r3, [r7, #12]
   return(result);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 0301 	bic.w	r3, r3, #1
 800508e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	3308      	adds	r3, #8
 8005096:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005098:	61fa      	str	r2, [r7, #28]
 800509a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509c:	69b9      	ldr	r1, [r7, #24]
 800509e:	69fa      	ldr	r2, [r7, #28]
 80050a0:	e841 2300 	strex	r3, r2, [r1]
 80050a4:	617b      	str	r3, [r7, #20]
   return(result);
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1e5      	bne.n	8005078 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2220      	movs	r2, #32
 80050b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e011      	b.n	80050e4 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2220      	movs	r2, #32
 80050c4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2220      	movs	r2, #32
 80050ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3758      	adds	r7, #88	@ 0x58
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	603b      	str	r3, [r7, #0]
 80050f8:	4613      	mov	r3, r2
 80050fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050fc:	e04f      	b.n	800519e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005104:	d04b      	beq.n	800519e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005106:	f7fc fee3 	bl	8001ed0 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	429a      	cmp	r2, r3
 8005114:	d302      	bcc.n	800511c <UART_WaitOnFlagUntilTimeout+0x30>
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e04e      	b.n	80051be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0304 	and.w	r3, r3, #4
 800512a:	2b00      	cmp	r3, #0
 800512c:	d037      	beq.n	800519e <UART_WaitOnFlagUntilTimeout+0xb2>
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	2b80      	cmp	r3, #128	@ 0x80
 8005132:	d034      	beq.n	800519e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	2b40      	cmp	r3, #64	@ 0x40
 8005138:	d031      	beq.n	800519e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	69db      	ldr	r3, [r3, #28]
 8005140:	f003 0308 	and.w	r3, r3, #8
 8005144:	2b08      	cmp	r3, #8
 8005146:	d110      	bne.n	800516a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2208      	movs	r2, #8
 800514e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f000 f838 	bl	80051c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2208      	movs	r2, #8
 800515a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e029      	b.n	80051be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	69db      	ldr	r3, [r3, #28]
 8005170:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005174:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005178:	d111      	bne.n	800519e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005182:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f000 f81e 	bl	80051c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2220      	movs	r2, #32
 800518e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e00f      	b.n	80051be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	69da      	ldr	r2, [r3, #28]
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	4013      	ands	r3, r2
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	bf0c      	ite	eq
 80051ae:	2301      	moveq	r3, #1
 80051b0:	2300      	movne	r3, #0
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	461a      	mov	r2, r3
 80051b6:	79fb      	ldrb	r3, [r7, #7]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d0a0      	beq.n	80050fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b095      	sub	sp, #84	@ 0x54
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051d6:	e853 3f00 	ldrex	r3, [r3]
 80051da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	461a      	mov	r2, r3
 80051ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80051ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051f4:	e841 2300 	strex	r3, r2, [r1]
 80051f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1e6      	bne.n	80051ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	3308      	adds	r3, #8
 8005206:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005208:	6a3b      	ldr	r3, [r7, #32]
 800520a:	e853 3f00 	ldrex	r3, [r3]
 800520e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	f023 0301 	bic.w	r3, r3, #1
 8005216:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	3308      	adds	r3, #8
 800521e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005220:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005222:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005224:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005226:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005228:	e841 2300 	strex	r3, r2, [r1]
 800522c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800522e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1e5      	bne.n	8005200 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005238:	2b01      	cmp	r3, #1
 800523a:	d118      	bne.n	800526e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	e853 3f00 	ldrex	r3, [r3]
 8005248:	60bb      	str	r3, [r7, #8]
   return(result);
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	f023 0310 	bic.w	r3, r3, #16
 8005250:	647b      	str	r3, [r7, #68]	@ 0x44
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	461a      	mov	r2, r3
 8005258:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800525a:	61bb      	str	r3, [r7, #24]
 800525c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525e:	6979      	ldr	r1, [r7, #20]
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	e841 2300 	strex	r3, r2, [r1]
 8005266:	613b      	str	r3, [r7, #16]
   return(result);
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1e6      	bne.n	800523c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2220      	movs	r2, #32
 8005272:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005282:	bf00      	nop
 8005284:	3754      	adds	r7, #84	@ 0x54
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800528e:	b480      	push	{r7}
 8005290:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005292:	bf00      	nop
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052a2:	f3ef 8305 	mrs	r3, IPSR
 80052a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80052a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10f      	bne.n	80052ce <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ae:	f3ef 8310 	mrs	r3, PRIMASK
 80052b2:	607b      	str	r3, [r7, #4]
  return(result);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d105      	bne.n	80052c6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80052ba:	f3ef 8311 	mrs	r3, BASEPRI
 80052be:	603b      	str	r3, [r7, #0]
  return(result);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d007      	beq.n	80052d6 <osKernelInitialize+0x3a>
 80052c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005300 <osKernelInitialize+0x64>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d103      	bne.n	80052d6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80052ce:	f06f 0305 	mvn.w	r3, #5
 80052d2:	60fb      	str	r3, [r7, #12]
 80052d4:	e00c      	b.n	80052f0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80052d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005300 <osKernelInitialize+0x64>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d105      	bne.n	80052ea <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80052de:	4b08      	ldr	r3, [pc, #32]	@ (8005300 <osKernelInitialize+0x64>)
 80052e0:	2201      	movs	r2, #1
 80052e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80052e4:	2300      	movs	r3, #0
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	e002      	b.n	80052f0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80052ea:	f04f 33ff 	mov.w	r3, #4294967295
 80052ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80052f0:	68fb      	ldr	r3, [r7, #12]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	200003c4 	.word	0x200003c4

08005304 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800530a:	f3ef 8305 	mrs	r3, IPSR
 800530e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005310:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10f      	bne.n	8005336 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005316:	f3ef 8310 	mrs	r3, PRIMASK
 800531a:	607b      	str	r3, [r7, #4]
  return(result);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d105      	bne.n	800532e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005322:	f3ef 8311 	mrs	r3, BASEPRI
 8005326:	603b      	str	r3, [r7, #0]
  return(result);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d007      	beq.n	800533e <osKernelStart+0x3a>
 800532e:	4b0f      	ldr	r3, [pc, #60]	@ (800536c <osKernelStart+0x68>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2b02      	cmp	r3, #2
 8005334:	d103      	bne.n	800533e <osKernelStart+0x3a>
    stat = osErrorISR;
 8005336:	f06f 0305 	mvn.w	r3, #5
 800533a:	60fb      	str	r3, [r7, #12]
 800533c:	e010      	b.n	8005360 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800533e:	4b0b      	ldr	r3, [pc, #44]	@ (800536c <osKernelStart+0x68>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d109      	bne.n	800535a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005346:	f7ff ffa2 	bl	800528e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800534a:	4b08      	ldr	r3, [pc, #32]	@ (800536c <osKernelStart+0x68>)
 800534c:	2202      	movs	r2, #2
 800534e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005350:	f001 f8ca 	bl	80064e8 <vTaskStartScheduler>
      stat = osOK;
 8005354:	2300      	movs	r3, #0
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	e002      	b.n	8005360 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800535a:	f04f 33ff 	mov.w	r3, #4294967295
 800535e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005360:	68fb      	ldr	r3, [r7, #12]
}
 8005362:	4618      	mov	r0, r3
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	200003c4 	.word	0x200003c4

08005370 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005370:	b580      	push	{r7, lr}
 8005372:	b090      	sub	sp, #64	@ 0x40
 8005374:	af04      	add	r7, sp, #16
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800537c:	2300      	movs	r3, #0
 800537e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005380:	f3ef 8305 	mrs	r3, IPSR
 8005384:	61fb      	str	r3, [r7, #28]
  return(result);
 8005386:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005388:	2b00      	cmp	r3, #0
 800538a:	f040 808f 	bne.w	80054ac <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800538e:	f3ef 8310 	mrs	r3, PRIMASK
 8005392:	61bb      	str	r3, [r7, #24]
  return(result);
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d105      	bne.n	80053a6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800539a:	f3ef 8311 	mrs	r3, BASEPRI
 800539e:	617b      	str	r3, [r7, #20]
  return(result);
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <osThreadNew+0x3e>
 80053a6:	4b44      	ldr	r3, [pc, #272]	@ (80054b8 <osThreadNew+0x148>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d07e      	beq.n	80054ac <osThreadNew+0x13c>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d07b      	beq.n	80054ac <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80053b4:	2380      	movs	r3, #128	@ 0x80
 80053b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80053b8:	2318      	movs	r3, #24
 80053ba:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 80053bc:	2300      	movs	r3, #0
 80053be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 80053c0:	f04f 33ff 	mov.w	r3, #4294967295
 80053c4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d045      	beq.n	8005458 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d002      	beq.n	80053da <osThreadNew+0x6a>
        name = attr->name;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d002      	beq.n	80053e8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80053e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d008      	beq.n	8005400 <osThreadNew+0x90>
 80053ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f0:	2b38      	cmp	r3, #56	@ 0x38
 80053f2:	d805      	bhi.n	8005400 <osThreadNew+0x90>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <osThreadNew+0x94>
        return (NULL);
 8005400:	2300      	movs	r3, #0
 8005402:	e054      	b.n	80054ae <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d003      	beq.n	8005414 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	089b      	lsrs	r3, r3, #2
 8005412:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00e      	beq.n	800543a <osThreadNew+0xca>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	2b5b      	cmp	r3, #91	@ 0x5b
 8005422:	d90a      	bls.n	800543a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005428:	2b00      	cmp	r3, #0
 800542a:	d006      	beq.n	800543a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d002      	beq.n	800543a <osThreadNew+0xca>
        mem = 1;
 8005434:	2301      	movs	r3, #1
 8005436:	623b      	str	r3, [r7, #32]
 8005438:	e010      	b.n	800545c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d10c      	bne.n	800545c <osThreadNew+0xec>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d108      	bne.n	800545c <osThreadNew+0xec>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d104      	bne.n	800545c <osThreadNew+0xec>
          mem = 0;
 8005452:	2300      	movs	r3, #0
 8005454:	623b      	str	r3, [r7, #32]
 8005456:	e001      	b.n	800545c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005458:	2300      	movs	r3, #0
 800545a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d110      	bne.n	8005484 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800546a:	9202      	str	r2, [sp, #8]
 800546c:	9301      	str	r3, [sp, #4]
 800546e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005476:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f000 fe4f 	bl	800611c <xTaskCreateStatic>
 800547e:	4603      	mov	r3, r0
 8005480:	613b      	str	r3, [r7, #16]
 8005482:	e013      	b.n	80054ac <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005484:	6a3b      	ldr	r3, [r7, #32]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d110      	bne.n	80054ac <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800548a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548c:	b29a      	uxth	r2, r3
 800548e:	f107 0310 	add.w	r3, r7, #16
 8005492:	9301      	str	r3, [sp, #4]
 8005494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005496:	9300      	str	r3, [sp, #0]
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f000 fea3 	bl	80061e8 <xTaskCreate>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d001      	beq.n	80054ac <osThreadNew+0x13c>
          hTask = NULL;
 80054a8:	2300      	movs	r3, #0
 80054aa:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80054ac:	693b      	ldr	r3, [r7, #16]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3730      	adds	r7, #48	@ 0x30
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	200003c4 	.word	0x200003c4

080054bc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054c4:	f3ef 8305 	mrs	r3, IPSR
 80054c8:	613b      	str	r3, [r7, #16]
  return(result);
 80054ca:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10f      	bne.n	80054f0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054d0:	f3ef 8310 	mrs	r3, PRIMASK
 80054d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d105      	bne.n	80054e8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80054dc:	f3ef 8311 	mrs	r3, BASEPRI
 80054e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d007      	beq.n	80054f8 <osDelay+0x3c>
 80054e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005514 <osDelay+0x58>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d103      	bne.n	80054f8 <osDelay+0x3c>
    stat = osErrorISR;
 80054f0:	f06f 0305 	mvn.w	r3, #5
 80054f4:	617b      	str	r3, [r7, #20]
 80054f6:	e007      	b.n	8005508 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80054f8:	2300      	movs	r3, #0
 80054fa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d002      	beq.n	8005508 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 ffb8 	bl	8006478 <vTaskDelay>
    }
  }

  return (stat);
 8005508:	697b      	ldr	r3, [r7, #20]
}
 800550a:	4618      	mov	r0, r3
 800550c:	3718      	adds	r7, #24
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	200003c4 	.word	0x200003c4

08005518 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4a07      	ldr	r2, [pc, #28]	@ (8005544 <vApplicationGetIdleTaskMemory+0x2c>)
 8005528:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	4a06      	ldr	r2, [pc, #24]	@ (8005548 <vApplicationGetIdleTaskMemory+0x30>)
 800552e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2280      	movs	r2, #128	@ 0x80
 8005534:	601a      	str	r2, [r3, #0]
}
 8005536:	bf00      	nop
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	200003c8 	.word	0x200003c8
 8005548:	20000424 	.word	0x20000424

0800554c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4a07      	ldr	r2, [pc, #28]	@ (8005578 <vApplicationGetTimerTaskMemory+0x2c>)
 800555c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	4a06      	ldr	r2, [pc, #24]	@ (800557c <vApplicationGetTimerTaskMemory+0x30>)
 8005562:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800556a:	601a      	str	r2, [r3, #0]
}
 800556c:	bf00      	nop
 800556e:	3714      	adds	r7, #20
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	20000624 	.word	0x20000624
 800557c:	20000680 	.word	0x20000680

08005580 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f103 0208 	add.w	r2, r3, #8
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f04f 32ff 	mov.w	r2, #4294967295
 8005598:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f103 0208 	add.w	r2, r3, #8
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f103 0208 	add.w	r2, r3, #8
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80055ce:	bf00      	nop
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055da:	b480      	push	{r7}
 80055dc:	b085      	sub	sp, #20
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
 80055e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	683a      	ldr	r2, [r7, #0]
 8005604:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	1c5a      	adds	r2, r3, #1
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	601a      	str	r2, [r3, #0]
}
 8005616:	bf00      	nop
 8005618:	3714      	adds	r7, #20
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005622:	b480      	push	{r7}
 8005624:	b085      	sub	sp, #20
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
 800562a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005638:	d103      	bne.n	8005642 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	e00c      	b.n	800565c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	3308      	adds	r3, #8
 8005646:	60fb      	str	r3, [r7, #12]
 8005648:	e002      	b.n	8005650 <vListInsert+0x2e>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	60fb      	str	r3, [r7, #12]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	429a      	cmp	r2, r3
 800565a:	d2f6      	bcs.n	800564a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	683a      	ldr	r2, [r7, #0]
 800566a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	1c5a      	adds	r2, r3, #1
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	601a      	str	r2, [r3, #0]
}
 8005688:	bf00      	nop
 800568a:	3714      	adds	r7, #20
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	6892      	ldr	r2, [r2, #8]
 80056aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	6852      	ldr	r2, [r2, #4]
 80056b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d103      	bne.n	80056c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689a      	ldr	r2, [r3, #8]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	1e5a      	subs	r2, r3, #1
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3714      	adds	r7, #20
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10d      	bne.n	8005718 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80056fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005700:	b672      	cpsid	i
 8005702:	f383 8811 	msr	BASEPRI, r3
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	b662      	cpsie	i
 8005710:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005712:	bf00      	nop
 8005714:	bf00      	nop
 8005716:	e7fd      	b.n	8005714 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005718:	f002 f8a8 	bl	800786c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005724:	68f9      	ldr	r1, [r7, #12]
 8005726:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005728:	fb01 f303 	mul.w	r3, r1, r3
 800572c:	441a      	add	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005748:	3b01      	subs	r3, #1
 800574a:	68f9      	ldr	r1, [r7, #12]
 800574c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800574e:	fb01 f303 	mul.w	r3, r1, r3
 8005752:	441a      	add	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	22ff      	movs	r2, #255	@ 0xff
 800575c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	22ff      	movs	r2, #255	@ 0xff
 8005764:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d114      	bne.n	8005798 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d01a      	beq.n	80057ac <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	3310      	adds	r3, #16
 800577a:	4618      	mov	r0, r3
 800577c:	f001 f950 	bl	8006a20 <xTaskRemoveFromEventList>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d012      	beq.n	80057ac <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005786:	4b0d      	ldr	r3, [pc, #52]	@ (80057bc <xQueueGenericReset+0xd4>)
 8005788:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	e009      	b.n	80057ac <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	3310      	adds	r3, #16
 800579c:	4618      	mov	r0, r3
 800579e:	f7ff feef 	bl	8005580 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	3324      	adds	r3, #36	@ 0x24
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7ff feea 	bl	8005580 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80057ac:	f002 f894 	bl	80078d8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80057b0:	2301      	movs	r3, #1
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3710      	adds	r7, #16
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	e000ed04 	.word	0xe000ed04

080057c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b08e      	sub	sp, #56	@ 0x38
 80057c4:	af02      	add	r7, sp, #8
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
 80057cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10d      	bne.n	80057f0 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80057d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d8:	b672      	cpsid	i
 80057da:	f383 8811 	msr	BASEPRI, r3
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	b662      	cpsie	i
 80057e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80057ea:	bf00      	nop
 80057ec:	bf00      	nop
 80057ee:	e7fd      	b.n	80057ec <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10d      	bne.n	8005812 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80057f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057fa:	b672      	cpsid	i
 80057fc:	f383 8811 	msr	BASEPRI, r3
 8005800:	f3bf 8f6f 	isb	sy
 8005804:	f3bf 8f4f 	dsb	sy
 8005808:	b662      	cpsie	i
 800580a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800580c:	bf00      	nop
 800580e:	bf00      	nop
 8005810:	e7fd      	b.n	800580e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <xQueueGenericCreateStatic+0x5e>
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <xQueueGenericCreateStatic+0x62>
 800581e:	2301      	movs	r3, #1
 8005820:	e000      	b.n	8005824 <xQueueGenericCreateStatic+0x64>
 8005822:	2300      	movs	r3, #0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10d      	bne.n	8005844 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8005828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800582c:	b672      	cpsid	i
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	b662      	cpsie	i
 800583c:	623b      	str	r3, [r7, #32]
}
 800583e:	bf00      	nop
 8005840:	bf00      	nop
 8005842:	e7fd      	b.n	8005840 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d102      	bne.n	8005850 <xQueueGenericCreateStatic+0x90>
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <xQueueGenericCreateStatic+0x94>
 8005850:	2301      	movs	r3, #1
 8005852:	e000      	b.n	8005856 <xQueueGenericCreateStatic+0x96>
 8005854:	2300      	movs	r3, #0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10d      	bne.n	8005876 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800585a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800585e:	b672      	cpsid	i
 8005860:	f383 8811 	msr	BASEPRI, r3
 8005864:	f3bf 8f6f 	isb	sy
 8005868:	f3bf 8f4f 	dsb	sy
 800586c:	b662      	cpsie	i
 800586e:	61fb      	str	r3, [r7, #28]
}
 8005870:	bf00      	nop
 8005872:	bf00      	nop
 8005874:	e7fd      	b.n	8005872 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005876:	2350      	movs	r3, #80	@ 0x50
 8005878:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	2b50      	cmp	r3, #80	@ 0x50
 800587e:	d00d      	beq.n	800589c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8005880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005884:	b672      	cpsid	i
 8005886:	f383 8811 	msr	BASEPRI, r3
 800588a:	f3bf 8f6f 	isb	sy
 800588e:	f3bf 8f4f 	dsb	sy
 8005892:	b662      	cpsie	i
 8005894:	61bb      	str	r3, [r7, #24]
}
 8005896:	bf00      	nop
 8005898:	bf00      	nop
 800589a:	e7fd      	b.n	8005898 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800589c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80058a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00d      	beq.n	80058c4 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80058a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058b0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80058b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	4613      	mov	r3, r2
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	68b9      	ldr	r1, [r7, #8]
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f000 f805 	bl	80058ce <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80058c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3730      	adds	r7, #48	@ 0x30
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b084      	sub	sp, #16
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	60f8      	str	r0, [r7, #12]
 80058d6:	60b9      	str	r1, [r7, #8]
 80058d8:	607a      	str	r2, [r7, #4]
 80058da:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d103      	bne.n	80058ea <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	601a      	str	r2, [r3, #0]
 80058e8:	e002      	b.n	80058f0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80058fc:	2101      	movs	r1, #1
 80058fe:	69b8      	ldr	r0, [r7, #24]
 8005900:	f7ff fef2 	bl	80056e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	78fa      	ldrb	r2, [r7, #3]
 8005908:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800590c:	bf00      	nop
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b08e      	sub	sp, #56	@ 0x38
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
 8005920:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005922:	2300      	movs	r3, #0
 8005924:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800592a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592c:	2b00      	cmp	r3, #0
 800592e:	d10d      	bne.n	800594c <xQueueGenericSend+0x38>
	__asm volatile
 8005930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005934:	b672      	cpsid	i
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	b662      	cpsie	i
 8005944:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005946:	bf00      	nop
 8005948:	bf00      	nop
 800594a:	e7fd      	b.n	8005948 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d103      	bne.n	800595a <xQueueGenericSend+0x46>
 8005952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <xQueueGenericSend+0x4a>
 800595a:	2301      	movs	r3, #1
 800595c:	e000      	b.n	8005960 <xQueueGenericSend+0x4c>
 800595e:	2300      	movs	r3, #0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10d      	bne.n	8005980 <xQueueGenericSend+0x6c>
	__asm volatile
 8005964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005968:	b672      	cpsid	i
 800596a:	f383 8811 	msr	BASEPRI, r3
 800596e:	f3bf 8f6f 	isb	sy
 8005972:	f3bf 8f4f 	dsb	sy
 8005976:	b662      	cpsie	i
 8005978:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800597a:	bf00      	nop
 800597c:	bf00      	nop
 800597e:	e7fd      	b.n	800597c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	2b02      	cmp	r3, #2
 8005984:	d103      	bne.n	800598e <xQueueGenericSend+0x7a>
 8005986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800598a:	2b01      	cmp	r3, #1
 800598c:	d101      	bne.n	8005992 <xQueueGenericSend+0x7e>
 800598e:	2301      	movs	r3, #1
 8005990:	e000      	b.n	8005994 <xQueueGenericSend+0x80>
 8005992:	2300      	movs	r3, #0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10d      	bne.n	80059b4 <xQueueGenericSend+0xa0>
	__asm volatile
 8005998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800599c:	b672      	cpsid	i
 800599e:	f383 8811 	msr	BASEPRI, r3
 80059a2:	f3bf 8f6f 	isb	sy
 80059a6:	f3bf 8f4f 	dsb	sy
 80059aa:	b662      	cpsie	i
 80059ac:	623b      	str	r3, [r7, #32]
}
 80059ae:	bf00      	nop
 80059b0:	bf00      	nop
 80059b2:	e7fd      	b.n	80059b0 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059b4:	f001 f9fc 	bl	8006db0 <xTaskGetSchedulerState>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d102      	bne.n	80059c4 <xQueueGenericSend+0xb0>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d101      	bne.n	80059c8 <xQueueGenericSend+0xb4>
 80059c4:	2301      	movs	r3, #1
 80059c6:	e000      	b.n	80059ca <xQueueGenericSend+0xb6>
 80059c8:	2300      	movs	r3, #0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10d      	bne.n	80059ea <xQueueGenericSend+0xd6>
	__asm volatile
 80059ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d2:	b672      	cpsid	i
 80059d4:	f383 8811 	msr	BASEPRI, r3
 80059d8:	f3bf 8f6f 	isb	sy
 80059dc:	f3bf 8f4f 	dsb	sy
 80059e0:	b662      	cpsie	i
 80059e2:	61fb      	str	r3, [r7, #28]
}
 80059e4:	bf00      	nop
 80059e6:	bf00      	nop
 80059e8:	e7fd      	b.n	80059e6 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059ea:	f001 ff3f 	bl	800786c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d302      	bcc.n	8005a00 <xQueueGenericSend+0xec>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d129      	bne.n	8005a54 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	68b9      	ldr	r1, [r7, #8]
 8005a04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a06:	f000 fa1b 	bl	8005e40 <prvCopyDataToQueue>
 8005a0a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d010      	beq.n	8005a36 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a16:	3324      	adds	r3, #36	@ 0x24
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f001 f801 	bl	8006a20 <xTaskRemoveFromEventList>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d013      	beq.n	8005a4c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005a24:	4b3f      	ldr	r3, [pc, #252]	@ (8005b24 <xQueueGenericSend+0x210>)
 8005a26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a2a:	601a      	str	r2, [r3, #0]
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	f3bf 8f6f 	isb	sy
 8005a34:	e00a      	b.n	8005a4c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d007      	beq.n	8005a4c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a3c:	4b39      	ldr	r3, [pc, #228]	@ (8005b24 <xQueueGenericSend+0x210>)
 8005a3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	f3bf 8f4f 	dsb	sy
 8005a48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a4c:	f001 ff44 	bl	80078d8 <vPortExitCritical>
				return pdPASS;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e063      	b.n	8005b1c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d103      	bne.n	8005a62 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a5a:	f001 ff3d 	bl	80078d8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	e05c      	b.n	8005b1c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d106      	bne.n	8005a76 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a68:	f107 0314 	add.w	r3, r7, #20
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f001 f83d 	bl	8006aec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a72:	2301      	movs	r3, #1
 8005a74:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a76:	f001 ff2f 	bl	80078d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a7a:	f000 fda1 	bl	80065c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a7e:	f001 fef5 	bl	800786c <vPortEnterCritical>
 8005a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a88:	b25b      	sxtb	r3, r3
 8005a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a8e:	d103      	bne.n	8005a98 <xQueueGenericSend+0x184>
 8005a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a9e:	b25b      	sxtb	r3, r3
 8005aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa4:	d103      	bne.n	8005aae <xQueueGenericSend+0x19a>
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005aae:	f001 ff13 	bl	80078d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ab2:	1d3a      	adds	r2, r7, #4
 8005ab4:	f107 0314 	add.w	r3, r7, #20
 8005ab8:	4611      	mov	r1, r2
 8005aba:	4618      	mov	r0, r3
 8005abc:	f001 f82c 	bl	8006b18 <xTaskCheckForTimeOut>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d124      	bne.n	8005b10 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ac6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ac8:	f000 fab2 	bl	8006030 <prvIsQueueFull>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d018      	beq.n	8005b04 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad4:	3310      	adds	r3, #16
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	4611      	mov	r1, r2
 8005ada:	4618      	mov	r0, r3
 8005adc:	f000 ff4a 	bl	8006974 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ae0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ae2:	f000 fa3d 	bl	8005f60 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005ae6:	f000 fd79 	bl	80065dc <xTaskResumeAll>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f47f af7c 	bne.w	80059ea <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8005af2:	4b0c      	ldr	r3, [pc, #48]	@ (8005b24 <xQueueGenericSend+0x210>)
 8005af4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005af8:	601a      	str	r2, [r3, #0]
 8005afa:	f3bf 8f4f 	dsb	sy
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	e772      	b.n	80059ea <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b06:	f000 fa2b 	bl	8005f60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b0a:	f000 fd67 	bl	80065dc <xTaskResumeAll>
 8005b0e:	e76c      	b.n	80059ea <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b12:	f000 fa25 	bl	8005f60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b16:	f000 fd61 	bl	80065dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b1a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3738      	adds	r7, #56	@ 0x38
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	e000ed04 	.word	0xe000ed04

08005b28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b08e      	sub	sp, #56	@ 0x38
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
 8005b34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10d      	bne.n	8005b5c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8005b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b44:	b672      	cpsid	i
 8005b46:	f383 8811 	msr	BASEPRI, r3
 8005b4a:	f3bf 8f6f 	isb	sy
 8005b4e:	f3bf 8f4f 	dsb	sy
 8005b52:	b662      	cpsie	i
 8005b54:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005b56:	bf00      	nop
 8005b58:	bf00      	nop
 8005b5a:	e7fd      	b.n	8005b58 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d103      	bne.n	8005b6a <xQueueGenericSendFromISR+0x42>
 8005b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d101      	bne.n	8005b6e <xQueueGenericSendFromISR+0x46>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e000      	b.n	8005b70 <xQueueGenericSendFromISR+0x48>
 8005b6e:	2300      	movs	r3, #0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10d      	bne.n	8005b90 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8005b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b78:	b672      	cpsid	i
 8005b7a:	f383 8811 	msr	BASEPRI, r3
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	b662      	cpsie	i
 8005b88:	623b      	str	r3, [r7, #32]
}
 8005b8a:	bf00      	nop
 8005b8c:	bf00      	nop
 8005b8e:	e7fd      	b.n	8005b8c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d103      	bne.n	8005b9e <xQueueGenericSendFromISR+0x76>
 8005b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d101      	bne.n	8005ba2 <xQueueGenericSendFromISR+0x7a>
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e000      	b.n	8005ba4 <xQueueGenericSendFromISR+0x7c>
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10d      	bne.n	8005bc4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8005ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bac:	b672      	cpsid	i
 8005bae:	f383 8811 	msr	BASEPRI, r3
 8005bb2:	f3bf 8f6f 	isb	sy
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	b662      	cpsie	i
 8005bbc:	61fb      	str	r3, [r7, #28]
}
 8005bbe:	bf00      	nop
 8005bc0:	bf00      	nop
 8005bc2:	e7fd      	b.n	8005bc0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005bc4:	f001 ff3a 	bl	8007a3c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005bc8:	f3ef 8211 	mrs	r2, BASEPRI
 8005bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd0:	b672      	cpsid	i
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	b662      	cpsie	i
 8005be0:	61ba      	str	r2, [r7, #24]
 8005be2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005be4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d302      	bcc.n	8005bfa <xQueueGenericSendFromISR+0xd2>
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d12c      	bne.n	8005c54 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bfc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	68b9      	ldr	r1, [r7, #8]
 8005c08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c0a:	f000 f919 	bl	8005e40 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c0e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c16:	d112      	bne.n	8005c3e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d016      	beq.n	8005c4e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c22:	3324      	adds	r3, #36	@ 0x24
 8005c24:	4618      	mov	r0, r3
 8005c26:	f000 fefb 	bl	8006a20 <xTaskRemoveFromEventList>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00e      	beq.n	8005c4e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00b      	beq.n	8005c4e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	601a      	str	r2, [r3, #0]
 8005c3c:	e007      	b.n	8005c4e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c3e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005c42:	3301      	adds	r3, #1
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	b25a      	sxtb	r2, r3
 8005c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8005c52:	e001      	b.n	8005c58 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c54:	2300      	movs	r3, #0
 8005c56:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c5a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c62:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3738      	adds	r7, #56	@ 0x38
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
	...

08005c70 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b08c      	sub	sp, #48	@ 0x30
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10d      	bne.n	8005ca6 <xQueueReceive+0x36>
	__asm volatile
 8005c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c8e:	b672      	cpsid	i
 8005c90:	f383 8811 	msr	BASEPRI, r3
 8005c94:	f3bf 8f6f 	isb	sy
 8005c98:	f3bf 8f4f 	dsb	sy
 8005c9c:	b662      	cpsie	i
 8005c9e:	623b      	str	r3, [r7, #32]
}
 8005ca0:	bf00      	nop
 8005ca2:	bf00      	nop
 8005ca4:	e7fd      	b.n	8005ca2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d103      	bne.n	8005cb4 <xQueueReceive+0x44>
 8005cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <xQueueReceive+0x48>
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e000      	b.n	8005cba <xQueueReceive+0x4a>
 8005cb8:	2300      	movs	r3, #0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10d      	bne.n	8005cda <xQueueReceive+0x6a>
	__asm volatile
 8005cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc2:	b672      	cpsid	i
 8005cc4:	f383 8811 	msr	BASEPRI, r3
 8005cc8:	f3bf 8f6f 	isb	sy
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	b662      	cpsie	i
 8005cd2:	61fb      	str	r3, [r7, #28]
}
 8005cd4:	bf00      	nop
 8005cd6:	bf00      	nop
 8005cd8:	e7fd      	b.n	8005cd6 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cda:	f001 f869 	bl	8006db0 <xTaskGetSchedulerState>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d102      	bne.n	8005cea <xQueueReceive+0x7a>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <xQueueReceive+0x7e>
 8005cea:	2301      	movs	r3, #1
 8005cec:	e000      	b.n	8005cf0 <xQueueReceive+0x80>
 8005cee:	2300      	movs	r3, #0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10d      	bne.n	8005d10 <xQueueReceive+0xa0>
	__asm volatile
 8005cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf8:	b672      	cpsid	i
 8005cfa:	f383 8811 	msr	BASEPRI, r3
 8005cfe:	f3bf 8f6f 	isb	sy
 8005d02:	f3bf 8f4f 	dsb	sy
 8005d06:	b662      	cpsie	i
 8005d08:	61bb      	str	r3, [r7, #24]
}
 8005d0a:	bf00      	nop
 8005d0c:	bf00      	nop
 8005d0e:	e7fd      	b.n	8005d0c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d10:	f001 fdac 	bl	800786c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d18:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d01f      	beq.n	8005d60 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d20:	68b9      	ldr	r1, [r7, #8]
 8005d22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d24:	f000 f8f6 	bl	8005f14 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2a:	1e5a      	subs	r2, r3, #1
 8005d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d2e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00f      	beq.n	8005d58 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d3a:	3310      	adds	r3, #16
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f000 fe6f 	bl	8006a20 <xTaskRemoveFromEventList>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d007      	beq.n	8005d58 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d48:	4b3c      	ldr	r3, [pc, #240]	@ (8005e3c <xQueueReceive+0x1cc>)
 8005d4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d4e:	601a      	str	r2, [r3, #0]
 8005d50:	f3bf 8f4f 	dsb	sy
 8005d54:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d58:	f001 fdbe 	bl	80078d8 <vPortExitCritical>
				return pdPASS;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e069      	b.n	8005e34 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d103      	bne.n	8005d6e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d66:	f001 fdb7 	bl	80078d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	e062      	b.n	8005e34 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d106      	bne.n	8005d82 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d74:	f107 0310 	add.w	r3, r7, #16
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 feb7 	bl	8006aec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d82:	f001 fda9 	bl	80078d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d86:	f000 fc1b 	bl	80065c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d8a:	f001 fd6f 	bl	800786c <vPortEnterCritical>
 8005d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d94:	b25b      	sxtb	r3, r3
 8005d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9a:	d103      	bne.n	8005da4 <xQueueReceive+0x134>
 8005d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005daa:	b25b      	sxtb	r3, r3
 8005dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db0:	d103      	bne.n	8005dba <xQueueReceive+0x14a>
 8005db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005dba:	f001 fd8d 	bl	80078d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005dbe:	1d3a      	adds	r2, r7, #4
 8005dc0:	f107 0310 	add.w	r3, r7, #16
 8005dc4:	4611      	mov	r1, r2
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f000 fea6 	bl	8006b18 <xTaskCheckForTimeOut>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d123      	bne.n	8005e1a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dd4:	f000 f916 	bl	8006004 <prvIsQueueEmpty>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d017      	beq.n	8005e0e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de0:	3324      	adds	r3, #36	@ 0x24
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	4611      	mov	r1, r2
 8005de6:	4618      	mov	r0, r3
 8005de8:	f000 fdc4 	bl	8006974 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005dec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dee:	f000 f8b7 	bl	8005f60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005df2:	f000 fbf3 	bl	80065dc <xTaskResumeAll>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d189      	bne.n	8005d10 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8005dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8005e3c <xQueueReceive+0x1cc>)
 8005dfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e02:	601a      	str	r2, [r3, #0]
 8005e04:	f3bf 8f4f 	dsb	sy
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	e780      	b.n	8005d10 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005e0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e10:	f000 f8a6 	bl	8005f60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e14:	f000 fbe2 	bl	80065dc <xTaskResumeAll>
 8005e18:	e77a      	b.n	8005d10 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005e1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e1c:	f000 f8a0 	bl	8005f60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e20:	f000 fbdc 	bl	80065dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e26:	f000 f8ed 	bl	8006004 <prvIsQueueEmpty>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f43f af6f 	beq.w	8005d10 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e32:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3730      	adds	r7, #48	@ 0x30
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	e000ed04 	.word	0xe000ed04

08005e40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10d      	bne.n	8005e7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d14d      	bne.n	8005f02 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 ffbe 	bl	8006dec <xTaskPriorityDisinherit>
 8005e70:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	609a      	str	r2, [r3, #8]
 8005e78:	e043      	b.n	8005f02 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d119      	bne.n	8005eb4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6858      	ldr	r0, [r3, #4]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e88:	461a      	mov	r2, r3
 8005e8a:	68b9      	ldr	r1, [r7, #8]
 8005e8c:	f002 f832 	bl	8007ef4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e98:	441a      	add	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d32b      	bcc.n	8005f02 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	605a      	str	r2, [r3, #4]
 8005eb2:	e026      	b.n	8005f02 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	68d8      	ldr	r0, [r3, #12]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	68b9      	ldr	r1, [r7, #8]
 8005ec0:	f002 f818 	bl	8007ef4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	68da      	ldr	r2, [r3, #12]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ecc:	425b      	negs	r3, r3
 8005ece:	441a      	add	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	68da      	ldr	r2, [r3, #12]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d207      	bcs.n	8005ef0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	689a      	ldr	r2, [r3, #8]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee8:	425b      	negs	r3, r3
 8005eea:	441a      	add	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d105      	bne.n	8005f02 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d002      	beq.n	8005f02 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	3b01      	subs	r3, #1
 8005f00:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	1c5a      	adds	r2, r3, #1
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005f0a:	697b      	ldr	r3, [r7, #20]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3718      	adds	r7, #24
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d018      	beq.n	8005f58 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68da      	ldr	r2, [r3, #12]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2e:	441a      	add	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68da      	ldr	r2, [r3, #12]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d303      	bcc.n	8005f48 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68d9      	ldr	r1, [r3, #12]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f50:	461a      	mov	r2, r3
 8005f52:	6838      	ldr	r0, [r7, #0]
 8005f54:	f001 ffce 	bl	8007ef4 <memcpy>
	}
}
 8005f58:	bf00      	nop
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f68:	f001 fc80 	bl	800786c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f72:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f74:	e011      	b.n	8005f9a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d012      	beq.n	8005fa4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	3324      	adds	r3, #36	@ 0x24
 8005f82:	4618      	mov	r0, r3
 8005f84:	f000 fd4c 	bl	8006a20 <xTaskRemoveFromEventList>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005f8e:	f000 fe2b 	bl	8006be8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005f92:	7bfb      	ldrb	r3, [r7, #15]
 8005f94:	3b01      	subs	r3, #1
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	dce9      	bgt.n	8005f76 <prvUnlockQueue+0x16>
 8005fa2:	e000      	b.n	8005fa6 <prvUnlockQueue+0x46>
					break;
 8005fa4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	22ff      	movs	r2, #255	@ 0xff
 8005faa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005fae:	f001 fc93 	bl	80078d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005fb2:	f001 fc5b 	bl	800786c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005fbc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fbe:	e011      	b.n	8005fe4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d012      	beq.n	8005fee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	3310      	adds	r3, #16
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f000 fd27 	bl	8006a20 <xTaskRemoveFromEventList>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005fd8:	f000 fe06 	bl	8006be8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005fdc:	7bbb      	ldrb	r3, [r7, #14]
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fe4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	dce9      	bgt.n	8005fc0 <prvUnlockQueue+0x60>
 8005fec:	e000      	b.n	8005ff0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005fee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	22ff      	movs	r2, #255	@ 0xff
 8005ff4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005ff8:	f001 fc6e 	bl	80078d8 <vPortExitCritical>
}
 8005ffc:	bf00      	nop
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800600c:	f001 fc2e 	bl	800786c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006014:	2b00      	cmp	r3, #0
 8006016:	d102      	bne.n	800601e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006018:	2301      	movs	r3, #1
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	e001      	b.n	8006022 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800601e:	2300      	movs	r3, #0
 8006020:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006022:	f001 fc59 	bl	80078d8 <vPortExitCritical>

	return xReturn;
 8006026:	68fb      	ldr	r3, [r7, #12]
}
 8006028:	4618      	mov	r0, r3
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006038:	f001 fc18 	bl	800786c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006044:	429a      	cmp	r2, r3
 8006046:	d102      	bne.n	800604e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006048:	2301      	movs	r3, #1
 800604a:	60fb      	str	r3, [r7, #12]
 800604c:	e001      	b.n	8006052 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800604e:	2300      	movs	r3, #0
 8006050:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006052:	f001 fc41 	bl	80078d8 <vPortExitCritical>

	return xReturn;
 8006056:	68fb      	ldr	r3, [r7, #12]
}
 8006058:	4618      	mov	r0, r3
 800605a:	3710      	adds	r7, #16
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800606a:	2300      	movs	r3, #0
 800606c:	60fb      	str	r3, [r7, #12]
 800606e:	e014      	b.n	800609a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006070:	4a0f      	ldr	r2, [pc, #60]	@ (80060b0 <vQueueAddToRegistry+0x50>)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10b      	bne.n	8006094 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800607c:	490c      	ldr	r1, [pc, #48]	@ (80060b0 <vQueueAddToRegistry+0x50>)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006086:	4a0a      	ldr	r2, [pc, #40]	@ (80060b0 <vQueueAddToRegistry+0x50>)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	4413      	add	r3, r2
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006092:	e006      	b.n	80060a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	3301      	adds	r3, #1
 8006098:	60fb      	str	r3, [r7, #12]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2b07      	cmp	r3, #7
 800609e:	d9e7      	bls.n	8006070 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80060a0:	bf00      	nop
 80060a2:	bf00      	nop
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	20000a80 	.word	0x20000a80

080060b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80060c4:	f001 fbd2 	bl	800786c <vPortEnterCritical>
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80060ce:	b25b      	sxtb	r3, r3
 80060d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d4:	d103      	bne.n	80060de <vQueueWaitForMessageRestricted+0x2a>
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060e4:	b25b      	sxtb	r3, r3
 80060e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ea:	d103      	bne.n	80060f4 <vQueueWaitForMessageRestricted+0x40>
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060f4:	f001 fbf0 	bl	80078d8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d106      	bne.n	800610e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	3324      	adds	r3, #36	@ 0x24
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	68b9      	ldr	r1, [r7, #8]
 8006108:	4618      	mov	r0, r3
 800610a:	f000 fc5b 	bl	80069c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800610e:	6978      	ldr	r0, [r7, #20]
 8006110:	f7ff ff26 	bl	8005f60 <prvUnlockQueue>
	}
 8006114:	bf00      	nop
 8006116:	3718      	adds	r7, #24
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800611c:	b580      	push	{r7, lr}
 800611e:	b08e      	sub	sp, #56	@ 0x38
 8006120:	af04      	add	r7, sp, #16
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
 8006128:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800612a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10d      	bne.n	800614c <xTaskCreateStatic+0x30>
	__asm volatile
 8006130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006134:	b672      	cpsid	i
 8006136:	f383 8811 	msr	BASEPRI, r3
 800613a:	f3bf 8f6f 	isb	sy
 800613e:	f3bf 8f4f 	dsb	sy
 8006142:	b662      	cpsie	i
 8006144:	623b      	str	r3, [r7, #32]
}
 8006146:	bf00      	nop
 8006148:	bf00      	nop
 800614a:	e7fd      	b.n	8006148 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800614c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800614e:	2b00      	cmp	r3, #0
 8006150:	d10d      	bne.n	800616e <xTaskCreateStatic+0x52>
	__asm volatile
 8006152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006156:	b672      	cpsid	i
 8006158:	f383 8811 	msr	BASEPRI, r3
 800615c:	f3bf 8f6f 	isb	sy
 8006160:	f3bf 8f4f 	dsb	sy
 8006164:	b662      	cpsie	i
 8006166:	61fb      	str	r3, [r7, #28]
}
 8006168:	bf00      	nop
 800616a:	bf00      	nop
 800616c:	e7fd      	b.n	800616a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800616e:	235c      	movs	r3, #92	@ 0x5c
 8006170:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	2b5c      	cmp	r3, #92	@ 0x5c
 8006176:	d00d      	beq.n	8006194 <xTaskCreateStatic+0x78>
	__asm volatile
 8006178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800617c:	b672      	cpsid	i
 800617e:	f383 8811 	msr	BASEPRI, r3
 8006182:	f3bf 8f6f 	isb	sy
 8006186:	f3bf 8f4f 	dsb	sy
 800618a:	b662      	cpsie	i
 800618c:	61bb      	str	r3, [r7, #24]
}
 800618e:	bf00      	nop
 8006190:	bf00      	nop
 8006192:	e7fd      	b.n	8006190 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006194:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006198:	2b00      	cmp	r3, #0
 800619a:	d01e      	beq.n	80061da <xTaskCreateStatic+0xbe>
 800619c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d01b      	beq.n	80061da <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80061a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80061aa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80061ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ae:	2202      	movs	r2, #2
 80061b0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80061b4:	2300      	movs	r3, #0
 80061b6:	9303      	str	r3, [sp, #12]
 80061b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ba:	9302      	str	r3, [sp, #8]
 80061bc:	f107 0314 	add.w	r3, r7, #20
 80061c0:	9301      	str	r3, [sp, #4]
 80061c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c4:	9300      	str	r3, [sp, #0]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	68b9      	ldr	r1, [r7, #8]
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f000 f850 	bl	8006272 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80061d4:	f000 f8e0 	bl	8006398 <prvAddNewTaskToReadyList>
 80061d8:	e001      	b.n	80061de <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80061da:	2300      	movs	r3, #0
 80061dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80061de:	697b      	ldr	r3, [r7, #20]
	}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3728      	adds	r7, #40	@ 0x28
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b08c      	sub	sp, #48	@ 0x30
 80061ec:	af04      	add	r7, sp, #16
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	603b      	str	r3, [r7, #0]
 80061f4:	4613      	mov	r3, r2
 80061f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80061f8:	88fb      	ldrh	r3, [r7, #6]
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4618      	mov	r0, r3
 80061fe:	f001 fc63 	bl	8007ac8 <pvPortMalloc>
 8006202:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00e      	beq.n	8006228 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800620a:	205c      	movs	r0, #92	@ 0x5c
 800620c:	f001 fc5c 	bl	8007ac8 <pvPortMalloc>
 8006210:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d003      	beq.n	8006220 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	631a      	str	r2, [r3, #48]	@ 0x30
 800621e:	e005      	b.n	800622c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006220:	6978      	ldr	r0, [r7, #20]
 8006222:	f001 fd1f 	bl	8007c64 <vPortFree>
 8006226:	e001      	b.n	800622c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006228:	2300      	movs	r3, #0
 800622a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d017      	beq.n	8006262 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800623a:	88fa      	ldrh	r2, [r7, #6]
 800623c:	2300      	movs	r3, #0
 800623e:	9303      	str	r3, [sp, #12]
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	9302      	str	r3, [sp, #8]
 8006244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006246:	9301      	str	r3, [sp, #4]
 8006248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800624a:	9300      	str	r3, [sp, #0]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	68b9      	ldr	r1, [r7, #8]
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f000 f80e 	bl	8006272 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006256:	69f8      	ldr	r0, [r7, #28]
 8006258:	f000 f89e 	bl	8006398 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800625c:	2301      	movs	r3, #1
 800625e:	61bb      	str	r3, [r7, #24]
 8006260:	e002      	b.n	8006268 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006262:	f04f 33ff 	mov.w	r3, #4294967295
 8006266:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006268:	69bb      	ldr	r3, [r7, #24]
	}
 800626a:	4618      	mov	r0, r3
 800626c:	3720      	adds	r7, #32
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}

08006272 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006272:	b580      	push	{r7, lr}
 8006274:	b088      	sub	sp, #32
 8006276:	af00      	add	r7, sp, #0
 8006278:	60f8      	str	r0, [r7, #12]
 800627a:	60b9      	str	r1, [r7, #8]
 800627c:	607a      	str	r2, [r7, #4]
 800627e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006282:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	461a      	mov	r2, r3
 800628a:	21a5      	movs	r1, #165	@ 0xa5
 800628c:	f001 fe06 	bl	8007e9c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006292:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006294:	6879      	ldr	r1, [r7, #4]
 8006296:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800629a:	440b      	add	r3, r1
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4413      	add	r3, r2
 80062a0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	f023 0307 	bic.w	r3, r3, #7
 80062a8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	f003 0307 	and.w	r3, r3, #7
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00d      	beq.n	80062d0 <prvInitialiseNewTask+0x5e>
	__asm volatile
 80062b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b8:	b672      	cpsid	i
 80062ba:	f383 8811 	msr	BASEPRI, r3
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f3bf 8f4f 	dsb	sy
 80062c6:	b662      	cpsie	i
 80062c8:	617b      	str	r3, [r7, #20]
}
 80062ca:	bf00      	nop
 80062cc:	bf00      	nop
 80062ce:	e7fd      	b.n	80062cc <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d01f      	beq.n	8006316 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062d6:	2300      	movs	r3, #0
 80062d8:	61fb      	str	r3, [r7, #28]
 80062da:	e012      	b.n	8006302 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	4413      	add	r3, r2
 80062e2:	7819      	ldrb	r1, [r3, #0]
 80062e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	4413      	add	r3, r2
 80062ea:	3334      	adds	r3, #52	@ 0x34
 80062ec:	460a      	mov	r2, r1
 80062ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	4413      	add	r3, r2
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d006      	beq.n	800630a <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	3301      	adds	r3, #1
 8006300:	61fb      	str	r3, [r7, #28]
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	2b0f      	cmp	r3, #15
 8006306:	d9e9      	bls.n	80062dc <prvInitialiseNewTask+0x6a>
 8006308:	e000      	b.n	800630c <prvInitialiseNewTask+0x9a>
			{
				break;
 800630a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800630c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800630e:	2200      	movs	r2, #0
 8006310:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006314:	e003      	b.n	800631e <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800631e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006320:	2b37      	cmp	r3, #55	@ 0x37
 8006322:	d901      	bls.n	8006328 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006324:	2337      	movs	r3, #55	@ 0x37
 8006326:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800632c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800632e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006330:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006332:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006336:	2200      	movs	r2, #0
 8006338:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800633a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800633c:	3304      	adds	r3, #4
 800633e:	4618      	mov	r0, r3
 8006340:	f7ff f93e 	bl	80055c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006346:	3318      	adds	r3, #24
 8006348:	4618      	mov	r0, r3
 800634a:	f7ff f939 	bl	80055c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800634e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006350:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006352:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006356:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800635a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800635c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800635e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006360:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006362:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006366:	2200      	movs	r2, #0
 8006368:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800636a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800636c:	2200      	movs	r2, #0
 800636e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	68f9      	ldr	r1, [r7, #12]
 8006376:	69b8      	ldr	r0, [r7, #24]
 8006378:	f001 f968 	bl	800764c <pxPortInitialiseStack>
 800637c:	4602      	mov	r2, r0
 800637e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006380:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006384:	2b00      	cmp	r3, #0
 8006386:	d002      	beq.n	800638e <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800638a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800638c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800638e:	bf00      	nop
 8006390:	3720      	adds	r7, #32
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
	...

08006398 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80063a0:	f001 fa64 	bl	800786c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80063a4:	4b2d      	ldr	r3, [pc, #180]	@ (800645c <prvAddNewTaskToReadyList+0xc4>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	3301      	adds	r3, #1
 80063aa:	4a2c      	ldr	r2, [pc, #176]	@ (800645c <prvAddNewTaskToReadyList+0xc4>)
 80063ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80063ae:	4b2c      	ldr	r3, [pc, #176]	@ (8006460 <prvAddNewTaskToReadyList+0xc8>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d109      	bne.n	80063ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80063b6:	4a2a      	ldr	r2, [pc, #168]	@ (8006460 <prvAddNewTaskToReadyList+0xc8>)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80063bc:	4b27      	ldr	r3, [pc, #156]	@ (800645c <prvAddNewTaskToReadyList+0xc4>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d110      	bne.n	80063e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80063c4:	f000 fc34 	bl	8006c30 <prvInitialiseTaskLists>
 80063c8:	e00d      	b.n	80063e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80063ca:	4b26      	ldr	r3, [pc, #152]	@ (8006464 <prvAddNewTaskToReadyList+0xcc>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d109      	bne.n	80063e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80063d2:	4b23      	ldr	r3, [pc, #140]	@ (8006460 <prvAddNewTaskToReadyList+0xc8>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063dc:	429a      	cmp	r2, r3
 80063de:	d802      	bhi.n	80063e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80063e0:	4a1f      	ldr	r2, [pc, #124]	@ (8006460 <prvAddNewTaskToReadyList+0xc8>)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80063e6:	4b20      	ldr	r3, [pc, #128]	@ (8006468 <prvAddNewTaskToReadyList+0xd0>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	3301      	adds	r3, #1
 80063ec:	4a1e      	ldr	r2, [pc, #120]	@ (8006468 <prvAddNewTaskToReadyList+0xd0>)
 80063ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80063f0:	4b1d      	ldr	r3, [pc, #116]	@ (8006468 <prvAddNewTaskToReadyList+0xd0>)
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063fc:	4b1b      	ldr	r3, [pc, #108]	@ (800646c <prvAddNewTaskToReadyList+0xd4>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	429a      	cmp	r2, r3
 8006402:	d903      	bls.n	800640c <prvAddNewTaskToReadyList+0x74>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006408:	4a18      	ldr	r2, [pc, #96]	@ (800646c <prvAddNewTaskToReadyList+0xd4>)
 800640a:	6013      	str	r3, [r2, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006410:	4613      	mov	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4413      	add	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4a15      	ldr	r2, [pc, #84]	@ (8006470 <prvAddNewTaskToReadyList+0xd8>)
 800641a:	441a      	add	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	3304      	adds	r3, #4
 8006420:	4619      	mov	r1, r3
 8006422:	4610      	mov	r0, r2
 8006424:	f7ff f8d9 	bl	80055da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006428:	f001 fa56 	bl	80078d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800642c:	4b0d      	ldr	r3, [pc, #52]	@ (8006464 <prvAddNewTaskToReadyList+0xcc>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00e      	beq.n	8006452 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006434:	4b0a      	ldr	r3, [pc, #40]	@ (8006460 <prvAddNewTaskToReadyList+0xc8>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800643e:	429a      	cmp	r2, r3
 8006440:	d207      	bcs.n	8006452 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006442:	4b0c      	ldr	r3, [pc, #48]	@ (8006474 <prvAddNewTaskToReadyList+0xdc>)
 8006444:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006448:	601a      	str	r2, [r3, #0]
 800644a:	f3bf 8f4f 	dsb	sy
 800644e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006452:	bf00      	nop
 8006454:	3708      	adds	r7, #8
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	20000f94 	.word	0x20000f94
 8006460:	20000ac0 	.word	0x20000ac0
 8006464:	20000fa0 	.word	0x20000fa0
 8006468:	20000fb0 	.word	0x20000fb0
 800646c:	20000f9c 	.word	0x20000f9c
 8006470:	20000ac4 	.word	0x20000ac4
 8006474:	e000ed04 	.word	0xe000ed04

08006478 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006480:	2300      	movs	r3, #0
 8006482:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d01a      	beq.n	80064c0 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800648a:	4b15      	ldr	r3, [pc, #84]	@ (80064e0 <vTaskDelay+0x68>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00d      	beq.n	80064ae <vTaskDelay+0x36>
	__asm volatile
 8006492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006496:	b672      	cpsid	i
 8006498:	f383 8811 	msr	BASEPRI, r3
 800649c:	f3bf 8f6f 	isb	sy
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	b662      	cpsie	i
 80064a6:	60bb      	str	r3, [r7, #8]
}
 80064a8:	bf00      	nop
 80064aa:	bf00      	nop
 80064ac:	e7fd      	b.n	80064aa <vTaskDelay+0x32>
			vTaskSuspendAll();
 80064ae:	f000 f887 	bl	80065c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064b2:	2100      	movs	r1, #0
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fd0d 	bl	8006ed4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80064ba:	f000 f88f 	bl	80065dc <xTaskResumeAll>
 80064be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d107      	bne.n	80064d6 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80064c6:	4b07      	ldr	r3, [pc, #28]	@ (80064e4 <vTaskDelay+0x6c>)
 80064c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	f3bf 8f4f 	dsb	sy
 80064d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064d6:	bf00      	nop
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	20000fbc 	.word	0x20000fbc
 80064e4:	e000ed04 	.word	0xe000ed04

080064e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b08a      	sub	sp, #40	@ 0x28
 80064ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80064ee:	2300      	movs	r3, #0
 80064f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80064f2:	2300      	movs	r3, #0
 80064f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80064f6:	463a      	mov	r2, r7
 80064f8:	1d39      	adds	r1, r7, #4
 80064fa:	f107 0308 	add.w	r3, r7, #8
 80064fe:	4618      	mov	r0, r3
 8006500:	f7ff f80a 	bl	8005518 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006504:	6839      	ldr	r1, [r7, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	9202      	str	r2, [sp, #8]
 800650c:	9301      	str	r3, [sp, #4]
 800650e:	2300      	movs	r3, #0
 8006510:	9300      	str	r3, [sp, #0]
 8006512:	2300      	movs	r3, #0
 8006514:	460a      	mov	r2, r1
 8006516:	4924      	ldr	r1, [pc, #144]	@ (80065a8 <vTaskStartScheduler+0xc0>)
 8006518:	4824      	ldr	r0, [pc, #144]	@ (80065ac <vTaskStartScheduler+0xc4>)
 800651a:	f7ff fdff 	bl	800611c <xTaskCreateStatic>
 800651e:	4603      	mov	r3, r0
 8006520:	4a23      	ldr	r2, [pc, #140]	@ (80065b0 <vTaskStartScheduler+0xc8>)
 8006522:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006524:	4b22      	ldr	r3, [pc, #136]	@ (80065b0 <vTaskStartScheduler+0xc8>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d002      	beq.n	8006532 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800652c:	2301      	movs	r3, #1
 800652e:	617b      	str	r3, [r7, #20]
 8006530:	e001      	b.n	8006536 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006532:	2300      	movs	r3, #0
 8006534:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d102      	bne.n	8006542 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800653c:	f000 fd1e 	bl	8006f7c <xTimerCreateTimerTask>
 8006540:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d118      	bne.n	800657a <vTaskStartScheduler+0x92>
	__asm volatile
 8006548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800654c:	b672      	cpsid	i
 800654e:	f383 8811 	msr	BASEPRI, r3
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	b662      	cpsie	i
 800655c:	613b      	str	r3, [r7, #16]
}
 800655e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006560:	4b14      	ldr	r3, [pc, #80]	@ (80065b4 <vTaskStartScheduler+0xcc>)
 8006562:	f04f 32ff 	mov.w	r2, #4294967295
 8006566:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006568:	4b13      	ldr	r3, [pc, #76]	@ (80065b8 <vTaskStartScheduler+0xd0>)
 800656a:	2201      	movs	r2, #1
 800656c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800656e:	4b13      	ldr	r3, [pc, #76]	@ (80065bc <vTaskStartScheduler+0xd4>)
 8006570:	2200      	movs	r2, #0
 8006572:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006574:	f001 f8fc 	bl	8007770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006578:	e011      	b.n	800659e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006580:	d10d      	bne.n	800659e <vTaskStartScheduler+0xb6>
	__asm volatile
 8006582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006586:	b672      	cpsid	i
 8006588:	f383 8811 	msr	BASEPRI, r3
 800658c:	f3bf 8f6f 	isb	sy
 8006590:	f3bf 8f4f 	dsb	sy
 8006594:	b662      	cpsie	i
 8006596:	60fb      	str	r3, [r7, #12]
}
 8006598:	bf00      	nop
 800659a:	bf00      	nop
 800659c:	e7fd      	b.n	800659a <vTaskStartScheduler+0xb2>
}
 800659e:	bf00      	nop
 80065a0:	3718      	adds	r7, #24
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	08007f48 	.word	0x08007f48
 80065ac:	08006c01 	.word	0x08006c01
 80065b0:	20000fb8 	.word	0x20000fb8
 80065b4:	20000fb4 	.word	0x20000fb4
 80065b8:	20000fa0 	.word	0x20000fa0
 80065bc:	20000f98 	.word	0x20000f98

080065c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80065c0:	b480      	push	{r7}
 80065c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80065c4:	4b04      	ldr	r3, [pc, #16]	@ (80065d8 <vTaskSuspendAll+0x18>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	3301      	adds	r3, #1
 80065ca:	4a03      	ldr	r2, [pc, #12]	@ (80065d8 <vTaskSuspendAll+0x18>)
 80065cc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80065ce:	bf00      	nop
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr
 80065d8:	20000fbc 	.word	0x20000fbc

080065dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80065e2:	2300      	movs	r3, #0
 80065e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80065e6:	2300      	movs	r3, #0
 80065e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80065ea:	4b43      	ldr	r3, [pc, #268]	@ (80066f8 <xTaskResumeAll+0x11c>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d10d      	bne.n	800660e <xTaskResumeAll+0x32>
	__asm volatile
 80065f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f6:	b672      	cpsid	i
 80065f8:	f383 8811 	msr	BASEPRI, r3
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	b662      	cpsie	i
 8006606:	603b      	str	r3, [r7, #0]
}
 8006608:	bf00      	nop
 800660a:	bf00      	nop
 800660c:	e7fd      	b.n	800660a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800660e:	f001 f92d 	bl	800786c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006612:	4b39      	ldr	r3, [pc, #228]	@ (80066f8 <xTaskResumeAll+0x11c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3b01      	subs	r3, #1
 8006618:	4a37      	ldr	r2, [pc, #220]	@ (80066f8 <xTaskResumeAll+0x11c>)
 800661a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800661c:	4b36      	ldr	r3, [pc, #216]	@ (80066f8 <xTaskResumeAll+0x11c>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d162      	bne.n	80066ea <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006624:	4b35      	ldr	r3, [pc, #212]	@ (80066fc <xTaskResumeAll+0x120>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d05e      	beq.n	80066ea <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800662c:	e02f      	b.n	800668e <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800662e:	4b34      	ldr	r3, [pc, #208]	@ (8006700 <xTaskResumeAll+0x124>)
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	3318      	adds	r3, #24
 800663a:	4618      	mov	r0, r3
 800663c:	f7ff f82a 	bl	8005694 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	3304      	adds	r3, #4
 8006644:	4618      	mov	r0, r3
 8006646:	f7ff f825 	bl	8005694 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800664e:	4b2d      	ldr	r3, [pc, #180]	@ (8006704 <xTaskResumeAll+0x128>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	429a      	cmp	r2, r3
 8006654:	d903      	bls.n	800665e <xTaskResumeAll+0x82>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800665a:	4a2a      	ldr	r2, [pc, #168]	@ (8006704 <xTaskResumeAll+0x128>)
 800665c:	6013      	str	r3, [r2, #0]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006662:	4613      	mov	r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4413      	add	r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	4a27      	ldr	r2, [pc, #156]	@ (8006708 <xTaskResumeAll+0x12c>)
 800666c:	441a      	add	r2, r3
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	3304      	adds	r3, #4
 8006672:	4619      	mov	r1, r3
 8006674:	4610      	mov	r0, r2
 8006676:	f7fe ffb0 	bl	80055da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800667e:	4b23      	ldr	r3, [pc, #140]	@ (800670c <xTaskResumeAll+0x130>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006684:	429a      	cmp	r2, r3
 8006686:	d302      	bcc.n	800668e <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8006688:	4b21      	ldr	r3, [pc, #132]	@ (8006710 <xTaskResumeAll+0x134>)
 800668a:	2201      	movs	r2, #1
 800668c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800668e:	4b1c      	ldr	r3, [pc, #112]	@ (8006700 <xTaskResumeAll+0x124>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1cb      	bne.n	800662e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d001      	beq.n	80066a0 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800669c:	f000 fb68 	bl	8006d70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80066a0:	4b1c      	ldr	r3, [pc, #112]	@ (8006714 <xTaskResumeAll+0x138>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d010      	beq.n	80066ce <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066ac:	f000 f846 	bl	800673c <xTaskIncrementTick>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d002      	beq.n	80066bc <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80066b6:	4b16      	ldr	r3, [pc, #88]	@ (8006710 <xTaskResumeAll+0x134>)
 80066b8:	2201      	movs	r2, #1
 80066ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	3b01      	subs	r3, #1
 80066c0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1f1      	bne.n	80066ac <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 80066c8:	4b12      	ldr	r3, [pc, #72]	@ (8006714 <xTaskResumeAll+0x138>)
 80066ca:	2200      	movs	r2, #0
 80066cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80066ce:	4b10      	ldr	r3, [pc, #64]	@ (8006710 <xTaskResumeAll+0x134>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d009      	beq.n	80066ea <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80066d6:	2301      	movs	r3, #1
 80066d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80066da:	4b0f      	ldr	r3, [pc, #60]	@ (8006718 <xTaskResumeAll+0x13c>)
 80066dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066e0:	601a      	str	r2, [r3, #0]
 80066e2:	f3bf 8f4f 	dsb	sy
 80066e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066ea:	f001 f8f5 	bl	80078d8 <vPortExitCritical>

	return xAlreadyYielded;
 80066ee:	68bb      	ldr	r3, [r7, #8]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	20000fbc 	.word	0x20000fbc
 80066fc:	20000f94 	.word	0x20000f94
 8006700:	20000f54 	.word	0x20000f54
 8006704:	20000f9c 	.word	0x20000f9c
 8006708:	20000ac4 	.word	0x20000ac4
 800670c:	20000ac0 	.word	0x20000ac0
 8006710:	20000fa8 	.word	0x20000fa8
 8006714:	20000fa4 	.word	0x20000fa4
 8006718:	e000ed04 	.word	0xe000ed04

0800671c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006722:	4b05      	ldr	r3, [pc, #20]	@ (8006738 <xTaskGetTickCount+0x1c>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006728:	687b      	ldr	r3, [r7, #4]
}
 800672a:	4618      	mov	r0, r3
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	20000f98 	.word	0x20000f98

0800673c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006742:	2300      	movs	r3, #0
 8006744:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006746:	4b50      	ldr	r3, [pc, #320]	@ (8006888 <xTaskIncrementTick+0x14c>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	f040 808c 	bne.w	8006868 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006750:	4b4e      	ldr	r3, [pc, #312]	@ (800688c <xTaskIncrementTick+0x150>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	3301      	adds	r3, #1
 8006756:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006758:	4a4c      	ldr	r2, [pc, #304]	@ (800688c <xTaskIncrementTick+0x150>)
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d123      	bne.n	80067ac <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8006764:	4b4a      	ldr	r3, [pc, #296]	@ (8006890 <xTaskIncrementTick+0x154>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00d      	beq.n	800678a <xTaskIncrementTick+0x4e>
	__asm volatile
 800676e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006772:	b672      	cpsid	i
 8006774:	f383 8811 	msr	BASEPRI, r3
 8006778:	f3bf 8f6f 	isb	sy
 800677c:	f3bf 8f4f 	dsb	sy
 8006780:	b662      	cpsie	i
 8006782:	603b      	str	r3, [r7, #0]
}
 8006784:	bf00      	nop
 8006786:	bf00      	nop
 8006788:	e7fd      	b.n	8006786 <xTaskIncrementTick+0x4a>
 800678a:	4b41      	ldr	r3, [pc, #260]	@ (8006890 <xTaskIncrementTick+0x154>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	4b40      	ldr	r3, [pc, #256]	@ (8006894 <xTaskIncrementTick+0x158>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a3e      	ldr	r2, [pc, #248]	@ (8006890 <xTaskIncrementTick+0x154>)
 8006796:	6013      	str	r3, [r2, #0]
 8006798:	4a3e      	ldr	r2, [pc, #248]	@ (8006894 <xTaskIncrementTick+0x158>)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6013      	str	r3, [r2, #0]
 800679e:	4b3e      	ldr	r3, [pc, #248]	@ (8006898 <xTaskIncrementTick+0x15c>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	3301      	adds	r3, #1
 80067a4:	4a3c      	ldr	r2, [pc, #240]	@ (8006898 <xTaskIncrementTick+0x15c>)
 80067a6:	6013      	str	r3, [r2, #0]
 80067a8:	f000 fae2 	bl	8006d70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067ac:	4b3b      	ldr	r3, [pc, #236]	@ (800689c <xTaskIncrementTick+0x160>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d349      	bcc.n	800684a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067b6:	4b36      	ldr	r3, [pc, #216]	@ (8006890 <xTaskIncrementTick+0x154>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d104      	bne.n	80067ca <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067c0:	4b36      	ldr	r3, [pc, #216]	@ (800689c <xTaskIncrementTick+0x160>)
 80067c2:	f04f 32ff 	mov.w	r2, #4294967295
 80067c6:	601a      	str	r2, [r3, #0]
					break;
 80067c8:	e03f      	b.n	800684a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067ca:	4b31      	ldr	r3, [pc, #196]	@ (8006890 <xTaskIncrementTick+0x154>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d203      	bcs.n	80067ea <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80067e2:	4a2e      	ldr	r2, [pc, #184]	@ (800689c <xTaskIncrementTick+0x160>)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80067e8:	e02f      	b.n	800684a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	3304      	adds	r3, #4
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fe ff50 	bl	8005694 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d004      	beq.n	8006806 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	3318      	adds	r3, #24
 8006800:	4618      	mov	r0, r3
 8006802:	f7fe ff47 	bl	8005694 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800680a:	4b25      	ldr	r3, [pc, #148]	@ (80068a0 <xTaskIncrementTick+0x164>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	429a      	cmp	r2, r3
 8006810:	d903      	bls.n	800681a <xTaskIncrementTick+0xde>
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006816:	4a22      	ldr	r2, [pc, #136]	@ (80068a0 <xTaskIncrementTick+0x164>)
 8006818:	6013      	str	r3, [r2, #0]
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800681e:	4613      	mov	r3, r2
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4413      	add	r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4a1f      	ldr	r2, [pc, #124]	@ (80068a4 <xTaskIncrementTick+0x168>)
 8006828:	441a      	add	r2, r3
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	3304      	adds	r3, #4
 800682e:	4619      	mov	r1, r3
 8006830:	4610      	mov	r0, r2
 8006832:	f7fe fed2 	bl	80055da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800683a:	4b1b      	ldr	r3, [pc, #108]	@ (80068a8 <xTaskIncrementTick+0x16c>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006840:	429a      	cmp	r2, r3
 8006842:	d3b8      	bcc.n	80067b6 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8006844:	2301      	movs	r3, #1
 8006846:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006848:	e7b5      	b.n	80067b6 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800684a:	4b17      	ldr	r3, [pc, #92]	@ (80068a8 <xTaskIncrementTick+0x16c>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006850:	4914      	ldr	r1, [pc, #80]	@ (80068a4 <xTaskIncrementTick+0x168>)
 8006852:	4613      	mov	r3, r2
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	4413      	add	r3, r2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	440b      	add	r3, r1
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d907      	bls.n	8006872 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006862:	2301      	movs	r3, #1
 8006864:	617b      	str	r3, [r7, #20]
 8006866:	e004      	b.n	8006872 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006868:	4b10      	ldr	r3, [pc, #64]	@ (80068ac <xTaskIncrementTick+0x170>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	3301      	adds	r3, #1
 800686e:	4a0f      	ldr	r2, [pc, #60]	@ (80068ac <xTaskIncrementTick+0x170>)
 8006870:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006872:	4b0f      	ldr	r3, [pc, #60]	@ (80068b0 <xTaskIncrementTick+0x174>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d001      	beq.n	800687e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800687a:	2301      	movs	r3, #1
 800687c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800687e:	697b      	ldr	r3, [r7, #20]
}
 8006880:	4618      	mov	r0, r3
 8006882:	3718      	adds	r7, #24
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	20000fbc 	.word	0x20000fbc
 800688c:	20000f98 	.word	0x20000f98
 8006890:	20000f4c 	.word	0x20000f4c
 8006894:	20000f50 	.word	0x20000f50
 8006898:	20000fac 	.word	0x20000fac
 800689c:	20000fb4 	.word	0x20000fb4
 80068a0:	20000f9c 	.word	0x20000f9c
 80068a4:	20000ac4 	.word	0x20000ac4
 80068a8:	20000ac0 	.word	0x20000ac0
 80068ac:	20000fa4 	.word	0x20000fa4
 80068b0:	20000fa8 	.word	0x20000fa8

080068b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068ba:	4b29      	ldr	r3, [pc, #164]	@ (8006960 <vTaskSwitchContext+0xac>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068c2:	4b28      	ldr	r3, [pc, #160]	@ (8006964 <vTaskSwitchContext+0xb0>)
 80068c4:	2201      	movs	r2, #1
 80068c6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068c8:	e044      	b.n	8006954 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80068ca:	4b26      	ldr	r3, [pc, #152]	@ (8006964 <vTaskSwitchContext+0xb0>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068d0:	4b25      	ldr	r3, [pc, #148]	@ (8006968 <vTaskSwitchContext+0xb4>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	60fb      	str	r3, [r7, #12]
 80068d6:	e013      	b.n	8006900 <vTaskSwitchContext+0x4c>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10d      	bne.n	80068fa <vTaskSwitchContext+0x46>
	__asm volatile
 80068de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e2:	b672      	cpsid	i
 80068e4:	f383 8811 	msr	BASEPRI, r3
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	b662      	cpsie	i
 80068f2:	607b      	str	r3, [r7, #4]
}
 80068f4:	bf00      	nop
 80068f6:	bf00      	nop
 80068f8:	e7fd      	b.n	80068f6 <vTaskSwitchContext+0x42>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	3b01      	subs	r3, #1
 80068fe:	60fb      	str	r3, [r7, #12]
 8006900:	491a      	ldr	r1, [pc, #104]	@ (800696c <vTaskSwitchContext+0xb8>)
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	4613      	mov	r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	4413      	add	r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	440b      	add	r3, r1
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d0e1      	beq.n	80068d8 <vTaskSwitchContext+0x24>
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	4613      	mov	r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4a13      	ldr	r2, [pc, #76]	@ (800696c <vTaskSwitchContext+0xb8>)
 8006920:	4413      	add	r3, r2
 8006922:	60bb      	str	r3, [r7, #8]
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	605a      	str	r2, [r3, #4]
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	685a      	ldr	r2, [r3, #4]
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	3308      	adds	r3, #8
 8006936:	429a      	cmp	r2, r3
 8006938:	d104      	bne.n	8006944 <vTaskSwitchContext+0x90>
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	605a      	str	r2, [r3, #4]
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	4a09      	ldr	r2, [pc, #36]	@ (8006970 <vTaskSwitchContext+0xbc>)
 800694c:	6013      	str	r3, [r2, #0]
 800694e:	4a06      	ldr	r2, [pc, #24]	@ (8006968 <vTaskSwitchContext+0xb4>)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6013      	str	r3, [r2, #0]
}
 8006954:	bf00      	nop
 8006956:	3714      	adds	r7, #20
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr
 8006960:	20000fbc 	.word	0x20000fbc
 8006964:	20000fa8 	.word	0x20000fa8
 8006968:	20000f9c 	.word	0x20000f9c
 800696c:	20000ac4 	.word	0x20000ac4
 8006970:	20000ac0 	.word	0x20000ac0

08006974 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10d      	bne.n	80069a0 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8006984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006988:	b672      	cpsid	i
 800698a:	f383 8811 	msr	BASEPRI, r3
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	b662      	cpsie	i
 8006998:	60fb      	str	r3, [r7, #12]
}
 800699a:	bf00      	nop
 800699c:	bf00      	nop
 800699e:	e7fd      	b.n	800699c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069a0:	4b07      	ldr	r3, [pc, #28]	@ (80069c0 <vTaskPlaceOnEventList+0x4c>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	3318      	adds	r3, #24
 80069a6:	4619      	mov	r1, r3
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f7fe fe3a 	bl	8005622 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069ae:	2101      	movs	r1, #1
 80069b0:	6838      	ldr	r0, [r7, #0]
 80069b2:	f000 fa8f 	bl	8006ed4 <prvAddCurrentTaskToDelayedList>
}
 80069b6:	bf00      	nop
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	20000ac0 	.word	0x20000ac0

080069c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10d      	bne.n	80069f2 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 80069d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069da:	b672      	cpsid	i
 80069dc:	f383 8811 	msr	BASEPRI, r3
 80069e0:	f3bf 8f6f 	isb	sy
 80069e4:	f3bf 8f4f 	dsb	sy
 80069e8:	b662      	cpsie	i
 80069ea:	617b      	str	r3, [r7, #20]
}
 80069ec:	bf00      	nop
 80069ee:	bf00      	nop
 80069f0:	e7fd      	b.n	80069ee <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069f2:	4b0a      	ldr	r3, [pc, #40]	@ (8006a1c <vTaskPlaceOnEventListRestricted+0x58>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3318      	adds	r3, #24
 80069f8:	4619      	mov	r1, r3
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f7fe fded 	bl	80055da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d002      	beq.n	8006a0c <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8006a06:	f04f 33ff 	mov.w	r3, #4294967295
 8006a0a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a0c:	6879      	ldr	r1, [r7, #4]
 8006a0e:	68b8      	ldr	r0, [r7, #8]
 8006a10:	f000 fa60 	bl	8006ed4 <prvAddCurrentTaskToDelayedList>
	}
 8006a14:	bf00      	nop
 8006a16:	3718      	adds	r7, #24
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	20000ac0 	.word	0x20000ac0

08006a20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b086      	sub	sp, #24
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10d      	bne.n	8006a52 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8006a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a3a:	b672      	cpsid	i
 8006a3c:	f383 8811 	msr	BASEPRI, r3
 8006a40:	f3bf 8f6f 	isb	sy
 8006a44:	f3bf 8f4f 	dsb	sy
 8006a48:	b662      	cpsie	i
 8006a4a:	60fb      	str	r3, [r7, #12]
}
 8006a4c:	bf00      	nop
 8006a4e:	bf00      	nop
 8006a50:	e7fd      	b.n	8006a4e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	3318      	adds	r3, #24
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7fe fe1c 	bl	8005694 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8006ad4 <xTaskRemoveFromEventList+0xb4>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d11d      	bne.n	8006aa0 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	3304      	adds	r3, #4
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7fe fe13 	bl	8005694 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a72:	4b19      	ldr	r3, [pc, #100]	@ (8006ad8 <xTaskRemoveFromEventList+0xb8>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d903      	bls.n	8006a82 <xTaskRemoveFromEventList+0x62>
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7e:	4a16      	ldr	r2, [pc, #88]	@ (8006ad8 <xTaskRemoveFromEventList+0xb8>)
 8006a80:	6013      	str	r3, [r2, #0]
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a86:	4613      	mov	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4a13      	ldr	r2, [pc, #76]	@ (8006adc <xTaskRemoveFromEventList+0xbc>)
 8006a90:	441a      	add	r2, r3
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	3304      	adds	r3, #4
 8006a96:	4619      	mov	r1, r3
 8006a98:	4610      	mov	r0, r2
 8006a9a:	f7fe fd9e 	bl	80055da <vListInsertEnd>
 8006a9e:	e005      	b.n	8006aac <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	3318      	adds	r3, #24
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	480e      	ldr	r0, [pc, #56]	@ (8006ae0 <xTaskRemoveFromEventList+0xc0>)
 8006aa8:	f7fe fd97 	bl	80055da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8006ae4 <xTaskRemoveFromEventList+0xc4>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d905      	bls.n	8006ac6 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006aba:	2301      	movs	r3, #1
 8006abc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006abe:	4b0a      	ldr	r3, [pc, #40]	@ (8006ae8 <xTaskRemoveFromEventList+0xc8>)
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	601a      	str	r2, [r3, #0]
 8006ac4:	e001      	b.n	8006aca <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006aca:	697b      	ldr	r3, [r7, #20]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3718      	adds	r7, #24
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	20000fbc 	.word	0x20000fbc
 8006ad8:	20000f9c 	.word	0x20000f9c
 8006adc:	20000ac4 	.word	0x20000ac4
 8006ae0:	20000f54 	.word	0x20000f54
 8006ae4:	20000ac0 	.word	0x20000ac0
 8006ae8:	20000fa8 	.word	0x20000fa8

08006aec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006af4:	4b06      	ldr	r3, [pc, #24]	@ (8006b10 <vTaskInternalSetTimeOutState+0x24>)
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006afc:	4b05      	ldr	r3, [pc, #20]	@ (8006b14 <vTaskInternalSetTimeOutState+0x28>)
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	605a      	str	r2, [r3, #4]
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr
 8006b10:	20000fac 	.word	0x20000fac
 8006b14:	20000f98 	.word	0x20000f98

08006b18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b088      	sub	sp, #32
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10d      	bne.n	8006b44 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8006b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b2c:	b672      	cpsid	i
 8006b2e:	f383 8811 	msr	BASEPRI, r3
 8006b32:	f3bf 8f6f 	isb	sy
 8006b36:	f3bf 8f4f 	dsb	sy
 8006b3a:	b662      	cpsie	i
 8006b3c:	613b      	str	r3, [r7, #16]
}
 8006b3e:	bf00      	nop
 8006b40:	bf00      	nop
 8006b42:	e7fd      	b.n	8006b40 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10d      	bne.n	8006b66 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8006b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b4e:	b672      	cpsid	i
 8006b50:	f383 8811 	msr	BASEPRI, r3
 8006b54:	f3bf 8f6f 	isb	sy
 8006b58:	f3bf 8f4f 	dsb	sy
 8006b5c:	b662      	cpsie	i
 8006b5e:	60fb      	str	r3, [r7, #12]
}
 8006b60:	bf00      	nop
 8006b62:	bf00      	nop
 8006b64:	e7fd      	b.n	8006b62 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8006b66:	f000 fe81 	bl	800786c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8006be0 <xTaskCheckForTimeOut+0xc8>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	69ba      	ldr	r2, [r7, #24]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b82:	d102      	bne.n	8006b8a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b84:	2300      	movs	r3, #0
 8006b86:	61fb      	str	r3, [r7, #28]
 8006b88:	e023      	b.n	8006bd2 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	4b15      	ldr	r3, [pc, #84]	@ (8006be4 <xTaskCheckForTimeOut+0xcc>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d007      	beq.n	8006ba6 <xTaskCheckForTimeOut+0x8e>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	69ba      	ldr	r2, [r7, #24]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d302      	bcc.n	8006ba6 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	61fb      	str	r3, [r7, #28]
 8006ba4:	e015      	b.n	8006bd2 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d20b      	bcs.n	8006bc8 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	1ad2      	subs	r2, r2, r3
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f7ff ff95 	bl	8006aec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	61fb      	str	r3, [r7, #28]
 8006bc6:	e004      	b.n	8006bd2 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006bd2:	f000 fe81 	bl	80078d8 <vPortExitCritical>

	return xReturn;
 8006bd6:	69fb      	ldr	r3, [r7, #28]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3720      	adds	r7, #32
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	20000f98 	.word	0x20000f98
 8006be4:	20000fac 	.word	0x20000fac

08006be8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006be8:	b480      	push	{r7}
 8006bea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006bec:	4b03      	ldr	r3, [pc, #12]	@ (8006bfc <vTaskMissedYield+0x14>)
 8006bee:	2201      	movs	r2, #1
 8006bf0:	601a      	str	r2, [r3, #0]
}
 8006bf2:	bf00      	nop
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr
 8006bfc:	20000fa8 	.word	0x20000fa8

08006c00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c08:	f000 f852 	bl	8006cb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c0c:	4b06      	ldr	r3, [pc, #24]	@ (8006c28 <prvIdleTask+0x28>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d9f9      	bls.n	8006c08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c14:	4b05      	ldr	r3, [pc, #20]	@ (8006c2c <prvIdleTask+0x2c>)
 8006c16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c1a:	601a      	str	r2, [r3, #0]
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c24:	e7f0      	b.n	8006c08 <prvIdleTask+0x8>
 8006c26:	bf00      	nop
 8006c28:	20000ac4 	.word	0x20000ac4
 8006c2c:	e000ed04 	.word	0xe000ed04

08006c30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c36:	2300      	movs	r3, #0
 8006c38:	607b      	str	r3, [r7, #4]
 8006c3a:	e00c      	b.n	8006c56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4413      	add	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4a12      	ldr	r2, [pc, #72]	@ (8006c90 <prvInitialiseTaskLists+0x60>)
 8006c48:	4413      	add	r3, r2
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7fe fc98 	bl	8005580 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	3301      	adds	r3, #1
 8006c54:	607b      	str	r3, [r7, #4]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2b37      	cmp	r3, #55	@ 0x37
 8006c5a:	d9ef      	bls.n	8006c3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c5c:	480d      	ldr	r0, [pc, #52]	@ (8006c94 <prvInitialiseTaskLists+0x64>)
 8006c5e:	f7fe fc8f 	bl	8005580 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c62:	480d      	ldr	r0, [pc, #52]	@ (8006c98 <prvInitialiseTaskLists+0x68>)
 8006c64:	f7fe fc8c 	bl	8005580 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c68:	480c      	ldr	r0, [pc, #48]	@ (8006c9c <prvInitialiseTaskLists+0x6c>)
 8006c6a:	f7fe fc89 	bl	8005580 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c6e:	480c      	ldr	r0, [pc, #48]	@ (8006ca0 <prvInitialiseTaskLists+0x70>)
 8006c70:	f7fe fc86 	bl	8005580 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c74:	480b      	ldr	r0, [pc, #44]	@ (8006ca4 <prvInitialiseTaskLists+0x74>)
 8006c76:	f7fe fc83 	bl	8005580 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8006ca8 <prvInitialiseTaskLists+0x78>)
 8006c7c:	4a05      	ldr	r2, [pc, #20]	@ (8006c94 <prvInitialiseTaskLists+0x64>)
 8006c7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c80:	4b0a      	ldr	r3, [pc, #40]	@ (8006cac <prvInitialiseTaskLists+0x7c>)
 8006c82:	4a05      	ldr	r2, [pc, #20]	@ (8006c98 <prvInitialiseTaskLists+0x68>)
 8006c84:	601a      	str	r2, [r3, #0]
}
 8006c86:	bf00      	nop
 8006c88:	3708      	adds	r7, #8
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	20000ac4 	.word	0x20000ac4
 8006c94:	20000f24 	.word	0x20000f24
 8006c98:	20000f38 	.word	0x20000f38
 8006c9c:	20000f54 	.word	0x20000f54
 8006ca0:	20000f68 	.word	0x20000f68
 8006ca4:	20000f80 	.word	0x20000f80
 8006ca8:	20000f4c 	.word	0x20000f4c
 8006cac:	20000f50 	.word	0x20000f50

08006cb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cb6:	e019      	b.n	8006cec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006cb8:	f000 fdd8 	bl	800786c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cbc:	4b10      	ldr	r3, [pc, #64]	@ (8006d00 <prvCheckTasksWaitingTermination+0x50>)
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	3304      	adds	r3, #4
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f7fe fce3 	bl	8005694 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006cce:	4b0d      	ldr	r3, [pc, #52]	@ (8006d04 <prvCheckTasksWaitingTermination+0x54>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	4a0b      	ldr	r2, [pc, #44]	@ (8006d04 <prvCheckTasksWaitingTermination+0x54>)
 8006cd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8006d08 <prvCheckTasksWaitingTermination+0x58>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	4a0a      	ldr	r2, [pc, #40]	@ (8006d08 <prvCheckTasksWaitingTermination+0x58>)
 8006ce0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006ce2:	f000 fdf9 	bl	80078d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f810 	bl	8006d0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cec:	4b06      	ldr	r3, [pc, #24]	@ (8006d08 <prvCheckTasksWaitingTermination+0x58>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1e1      	bne.n	8006cb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006cf4:	bf00      	nop
 8006cf6:	bf00      	nop
 8006cf8:	3708      	adds	r7, #8
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	20000f68 	.word	0x20000f68
 8006d04:	20000f94 	.word	0x20000f94
 8006d08:	20000f7c 	.word	0x20000f7c

08006d0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d108      	bne.n	8006d30 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d22:	4618      	mov	r0, r3
 8006d24:	f000 ff9e 	bl	8007c64 <vPortFree>
				vPortFree( pxTCB );
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 ff9b 	bl	8007c64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d2e:	e01b      	b.n	8006d68 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d103      	bne.n	8006d42 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 ff92 	bl	8007c64 <vPortFree>
	}
 8006d40:	e012      	b.n	8006d68 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d00d      	beq.n	8006d68 <prvDeleteTCB+0x5c>
	__asm volatile
 8006d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d50:	b672      	cpsid	i
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	b662      	cpsie	i
 8006d60:	60fb      	str	r3, [r7, #12]
}
 8006d62:	bf00      	nop
 8006d64:	bf00      	nop
 8006d66:	e7fd      	b.n	8006d64 <prvDeleteTCB+0x58>
	}
 8006d68:	bf00      	nop
 8006d6a:	3710      	adds	r7, #16
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d76:	4b0c      	ldr	r3, [pc, #48]	@ (8006da8 <prvResetNextTaskUnblockTime+0x38>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d104      	bne.n	8006d8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d80:	4b0a      	ldr	r3, [pc, #40]	@ (8006dac <prvResetNextTaskUnblockTime+0x3c>)
 8006d82:	f04f 32ff 	mov.w	r2, #4294967295
 8006d86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d88:	e008      	b.n	8006d9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d8a:	4b07      	ldr	r3, [pc, #28]	@ (8006da8 <prvResetNextTaskUnblockTime+0x38>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	4a04      	ldr	r2, [pc, #16]	@ (8006dac <prvResetNextTaskUnblockTime+0x3c>)
 8006d9a:	6013      	str	r3, [r2, #0]
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr
 8006da8:	20000f4c 	.word	0x20000f4c
 8006dac:	20000fb4 	.word	0x20000fb4

08006db0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006db6:	4b0b      	ldr	r3, [pc, #44]	@ (8006de4 <xTaskGetSchedulerState+0x34>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d102      	bne.n	8006dc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	607b      	str	r3, [r7, #4]
 8006dc2:	e008      	b.n	8006dd6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dc4:	4b08      	ldr	r3, [pc, #32]	@ (8006de8 <xTaskGetSchedulerState+0x38>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d102      	bne.n	8006dd2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006dcc:	2302      	movs	r3, #2
 8006dce:	607b      	str	r3, [r7, #4]
 8006dd0:	e001      	b.n	8006dd6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006dd6:	687b      	ldr	r3, [r7, #4]
	}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr
 8006de4:	20000fa0 	.word	0x20000fa0
 8006de8:	20000fbc 	.word	0x20000fbc

08006dec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b086      	sub	sp, #24
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d05c      	beq.n	8006ebc <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e02:	4b31      	ldr	r3, [pc, #196]	@ (8006ec8 <xTaskPriorityDisinherit+0xdc>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	693a      	ldr	r2, [r7, #16]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d00d      	beq.n	8006e28 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8006e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e10:	b672      	cpsid	i
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	b662      	cpsie	i
 8006e20:	60fb      	str	r3, [r7, #12]
}
 8006e22:	bf00      	nop
 8006e24:	bf00      	nop
 8006e26:	e7fd      	b.n	8006e24 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10d      	bne.n	8006e4c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8006e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e34:	b672      	cpsid	i
 8006e36:	f383 8811 	msr	BASEPRI, r3
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	b662      	cpsie	i
 8006e44:	60bb      	str	r3, [r7, #8]
}
 8006e46:	bf00      	nop
 8006e48:	bf00      	nop
 8006e4a:	e7fd      	b.n	8006e48 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e50:	1e5a      	subs	r2, r3, #1
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d02c      	beq.n	8006ebc <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d128      	bne.n	8006ebc <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	3304      	adds	r3, #4
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7fe fc10 	bl	8005694 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e80:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8006ecc <xTaskPriorityDisinherit+0xe0>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d903      	bls.n	8006e9c <xTaskPriorityDisinherit+0xb0>
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e98:	4a0c      	ldr	r2, [pc, #48]	@ (8006ecc <xTaskPriorityDisinherit+0xe0>)
 8006e9a:	6013      	str	r3, [r2, #0]
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4413      	add	r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	4a09      	ldr	r2, [pc, #36]	@ (8006ed0 <xTaskPriorityDisinherit+0xe4>)
 8006eaa:	441a      	add	r2, r3
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	3304      	adds	r3, #4
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	4610      	mov	r0, r2
 8006eb4:	f7fe fb91 	bl	80055da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ebc:	697b      	ldr	r3, [r7, #20]
	}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3718      	adds	r7, #24
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	20000ac0 	.word	0x20000ac0
 8006ecc:	20000f9c 	.word	0x20000f9c
 8006ed0:	20000ac4 	.word	0x20000ac4

08006ed4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ede:	4b21      	ldr	r3, [pc, #132]	@ (8006f64 <prvAddCurrentTaskToDelayedList+0x90>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ee4:	4b20      	ldr	r3, [pc, #128]	@ (8006f68 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	3304      	adds	r3, #4
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7fe fbd2 	bl	8005694 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef6:	d10a      	bne.n	8006f0e <prvAddCurrentTaskToDelayedList+0x3a>
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d007      	beq.n	8006f0e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006efe:	4b1a      	ldr	r3, [pc, #104]	@ (8006f68 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	3304      	adds	r3, #4
 8006f04:	4619      	mov	r1, r3
 8006f06:	4819      	ldr	r0, [pc, #100]	@ (8006f6c <prvAddCurrentTaskToDelayedList+0x98>)
 8006f08:	f7fe fb67 	bl	80055da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f0c:	e026      	b.n	8006f5c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4413      	add	r3, r2
 8006f14:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f16:	4b14      	ldr	r3, [pc, #80]	@ (8006f68 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d209      	bcs.n	8006f3a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f26:	4b12      	ldr	r3, [pc, #72]	@ (8006f70 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8006f68 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	3304      	adds	r3, #4
 8006f30:	4619      	mov	r1, r3
 8006f32:	4610      	mov	r0, r2
 8006f34:	f7fe fb75 	bl	8005622 <vListInsert>
}
 8006f38:	e010      	b.n	8006f5c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8006f74 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8006f68 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3304      	adds	r3, #4
 8006f44:	4619      	mov	r1, r3
 8006f46:	4610      	mov	r0, r2
 8006f48:	f7fe fb6b 	bl	8005622 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8006f78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d202      	bcs.n	8006f5c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006f56:	4a08      	ldr	r2, [pc, #32]	@ (8006f78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	6013      	str	r3, [r2, #0]
}
 8006f5c:	bf00      	nop
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	20000f98 	.word	0x20000f98
 8006f68:	20000ac0 	.word	0x20000ac0
 8006f6c:	20000f80 	.word	0x20000f80
 8006f70:	20000f50 	.word	0x20000f50
 8006f74:	20000f4c 	.word	0x20000f4c
 8006f78:	20000fb4 	.word	0x20000fb4

08006f7c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b08a      	sub	sp, #40	@ 0x28
 8006f80:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006f82:	2300      	movs	r3, #0
 8006f84:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006f86:	f000 fb21 	bl	80075cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8007004 <xTimerCreateTimerTask+0x88>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d021      	beq.n	8006fd6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f92:	2300      	movs	r3, #0
 8006f94:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f96:	2300      	movs	r3, #0
 8006f98:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f9a:	1d3a      	adds	r2, r7, #4
 8006f9c:	f107 0108 	add.w	r1, r7, #8
 8006fa0:	f107 030c 	add.w	r3, r7, #12
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7fe fad1 	bl	800554c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006faa:	6879      	ldr	r1, [r7, #4]
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	9202      	str	r2, [sp, #8]
 8006fb2:	9301      	str	r3, [sp, #4]
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	9300      	str	r3, [sp, #0]
 8006fb8:	2300      	movs	r3, #0
 8006fba:	460a      	mov	r2, r1
 8006fbc:	4912      	ldr	r1, [pc, #72]	@ (8007008 <xTimerCreateTimerTask+0x8c>)
 8006fbe:	4813      	ldr	r0, [pc, #76]	@ (800700c <xTimerCreateTimerTask+0x90>)
 8006fc0:	f7ff f8ac 	bl	800611c <xTaskCreateStatic>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	4a12      	ldr	r2, [pc, #72]	@ (8007010 <xTimerCreateTimerTask+0x94>)
 8006fc8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006fca:	4b11      	ldr	r3, [pc, #68]	@ (8007010 <xTimerCreateTimerTask+0x94>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d10d      	bne.n	8006ff8 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8006fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe0:	b672      	cpsid	i
 8006fe2:	f383 8811 	msr	BASEPRI, r3
 8006fe6:	f3bf 8f6f 	isb	sy
 8006fea:	f3bf 8f4f 	dsb	sy
 8006fee:	b662      	cpsie	i
 8006ff0:	613b      	str	r3, [r7, #16]
}
 8006ff2:	bf00      	nop
 8006ff4:	bf00      	nop
 8006ff6:	e7fd      	b.n	8006ff4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8006ff8:	697b      	ldr	r3, [r7, #20]
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3718      	adds	r7, #24
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	20000ff0 	.word	0x20000ff0
 8007008:	08007f50 	.word	0x08007f50
 800700c:	08007155 	.word	0x08007155
 8007010:	20000ff4 	.word	0x20000ff4

08007014 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b08a      	sub	sp, #40	@ 0x28
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
 8007020:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007022:	2300      	movs	r3, #0
 8007024:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10d      	bne.n	8007048 <xTimerGenericCommand+0x34>
	__asm volatile
 800702c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007030:	b672      	cpsid	i
 8007032:	f383 8811 	msr	BASEPRI, r3
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	b662      	cpsie	i
 8007040:	623b      	str	r3, [r7, #32]
}
 8007042:	bf00      	nop
 8007044:	bf00      	nop
 8007046:	e7fd      	b.n	8007044 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007048:	4b19      	ldr	r3, [pc, #100]	@ (80070b0 <xTimerGenericCommand+0x9c>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d02a      	beq.n	80070a6 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	2b05      	cmp	r3, #5
 8007060:	dc18      	bgt.n	8007094 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007062:	f7ff fea5 	bl	8006db0 <xTaskGetSchedulerState>
 8007066:	4603      	mov	r3, r0
 8007068:	2b02      	cmp	r3, #2
 800706a:	d109      	bne.n	8007080 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800706c:	4b10      	ldr	r3, [pc, #64]	@ (80070b0 <xTimerGenericCommand+0x9c>)
 800706e:	6818      	ldr	r0, [r3, #0]
 8007070:	f107 0110 	add.w	r1, r7, #16
 8007074:	2300      	movs	r3, #0
 8007076:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007078:	f7fe fc4c 	bl	8005914 <xQueueGenericSend>
 800707c:	6278      	str	r0, [r7, #36]	@ 0x24
 800707e:	e012      	b.n	80070a6 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007080:	4b0b      	ldr	r3, [pc, #44]	@ (80070b0 <xTimerGenericCommand+0x9c>)
 8007082:	6818      	ldr	r0, [r3, #0]
 8007084:	f107 0110 	add.w	r1, r7, #16
 8007088:	2300      	movs	r3, #0
 800708a:	2200      	movs	r2, #0
 800708c:	f7fe fc42 	bl	8005914 <xQueueGenericSend>
 8007090:	6278      	str	r0, [r7, #36]	@ 0x24
 8007092:	e008      	b.n	80070a6 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007094:	4b06      	ldr	r3, [pc, #24]	@ (80070b0 <xTimerGenericCommand+0x9c>)
 8007096:	6818      	ldr	r0, [r3, #0]
 8007098:	f107 0110 	add.w	r1, r7, #16
 800709c:	2300      	movs	r3, #0
 800709e:	683a      	ldr	r2, [r7, #0]
 80070a0:	f7fe fd42 	bl	8005b28 <xQueueGenericSendFromISR>
 80070a4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80070a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3728      	adds	r7, #40	@ 0x28
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	20000ff0 	.word	0x20000ff0

080070b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b088      	sub	sp, #32
 80070b8:	af02      	add	r7, sp, #8
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070be:	4b24      	ldr	r3, [pc, #144]	@ (8007150 <prvProcessExpiredTimer+0x9c>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	3304      	adds	r3, #4
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7fe fae1 	bl	8005694 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070d8:	f003 0304 	and.w	r3, r3, #4
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d025      	beq.n	800712c <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	699a      	ldr	r2, [r3, #24]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	18d1      	adds	r1, r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	6978      	ldr	r0, [r7, #20]
 80070ee:	f000 f8d7 	bl	80072a0 <prvInsertTimerInActiveList>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d022      	beq.n	800713e <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070f8:	2300      	movs	r3, #0
 80070fa:	9300      	str	r3, [sp, #0]
 80070fc:	2300      	movs	r3, #0
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	2100      	movs	r1, #0
 8007102:	6978      	ldr	r0, [r7, #20]
 8007104:	f7ff ff86 	bl	8007014 <xTimerGenericCommand>
 8007108:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d116      	bne.n	800713e <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8007110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007114:	b672      	cpsid	i
 8007116:	f383 8811 	msr	BASEPRI, r3
 800711a:	f3bf 8f6f 	isb	sy
 800711e:	f3bf 8f4f 	dsb	sy
 8007122:	b662      	cpsie	i
 8007124:	60fb      	str	r3, [r7, #12]
}
 8007126:	bf00      	nop
 8007128:	bf00      	nop
 800712a:	e7fd      	b.n	8007128 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007132:	f023 0301 	bic.w	r3, r3, #1
 8007136:	b2da      	uxtb	r2, r3
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	6a1b      	ldr	r3, [r3, #32]
 8007142:	6978      	ldr	r0, [r7, #20]
 8007144:	4798      	blx	r3
}
 8007146:	bf00      	nop
 8007148:	3718      	adds	r7, #24
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	20000fe8 	.word	0x20000fe8

08007154 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800715c:	f107 0308 	add.w	r3, r7, #8
 8007160:	4618      	mov	r0, r3
 8007162:	f000 f859 	bl	8007218 <prvGetNextExpireTime>
 8007166:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	4619      	mov	r1, r3
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f000 f805 	bl	800717c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007172:	f000 f8d7 	bl	8007324 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007176:	bf00      	nop
 8007178:	e7f0      	b.n	800715c <prvTimerTask+0x8>
	...

0800717c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007186:	f7ff fa1b 	bl	80065c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800718a:	f107 0308 	add.w	r3, r7, #8
 800718e:	4618      	mov	r0, r3
 8007190:	f000 f866 	bl	8007260 <prvSampleTimeNow>
 8007194:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d130      	bne.n	80071fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d10a      	bne.n	80071b8 <prvProcessTimerOrBlockTask+0x3c>
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d806      	bhi.n	80071b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80071aa:	f7ff fa17 	bl	80065dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80071ae:	68f9      	ldr	r1, [r7, #12]
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f7ff ff7f 	bl	80070b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80071b6:	e024      	b.n	8007202 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d008      	beq.n	80071d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80071be:	4b13      	ldr	r3, [pc, #76]	@ (800720c <prvProcessTimerOrBlockTask+0x90>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d101      	bne.n	80071cc <prvProcessTimerOrBlockTask+0x50>
 80071c8:	2301      	movs	r3, #1
 80071ca:	e000      	b.n	80071ce <prvProcessTimerOrBlockTask+0x52>
 80071cc:	2300      	movs	r3, #0
 80071ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80071d0:	4b0f      	ldr	r3, [pc, #60]	@ (8007210 <prvProcessTimerOrBlockTask+0x94>)
 80071d2:	6818      	ldr	r0, [r3, #0]
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	683a      	ldr	r2, [r7, #0]
 80071dc:	4619      	mov	r1, r3
 80071de:	f7fe ff69 	bl	80060b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80071e2:	f7ff f9fb 	bl	80065dc <xTaskResumeAll>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10a      	bne.n	8007202 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80071ec:	4b09      	ldr	r3, [pc, #36]	@ (8007214 <prvProcessTimerOrBlockTask+0x98>)
 80071ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071f2:	601a      	str	r2, [r3, #0]
 80071f4:	f3bf 8f4f 	dsb	sy
 80071f8:	f3bf 8f6f 	isb	sy
}
 80071fc:	e001      	b.n	8007202 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80071fe:	f7ff f9ed 	bl	80065dc <xTaskResumeAll>
}
 8007202:	bf00      	nop
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	20000fec 	.word	0x20000fec
 8007210:	20000ff0 	.word	0x20000ff0
 8007214:	e000ed04 	.word	0xe000ed04

08007218 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007218:	b480      	push	{r7}
 800721a:	b085      	sub	sp, #20
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007220:	4b0e      	ldr	r3, [pc, #56]	@ (800725c <prvGetNextExpireTime+0x44>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d101      	bne.n	800722e <prvGetNextExpireTime+0x16>
 800722a:	2201      	movs	r2, #1
 800722c:	e000      	b.n	8007230 <prvGetNextExpireTime+0x18>
 800722e:	2200      	movs	r2, #0
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d105      	bne.n	8007248 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800723c:	4b07      	ldr	r3, [pc, #28]	@ (800725c <prvGetNextExpireTime+0x44>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	60fb      	str	r3, [r7, #12]
 8007246:	e001      	b.n	800724c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007248:	2300      	movs	r3, #0
 800724a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800724c:	68fb      	ldr	r3, [r7, #12]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	20000fe8 	.word	0x20000fe8

08007260 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007268:	f7ff fa58 	bl	800671c <xTaskGetTickCount>
 800726c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800726e:	4b0b      	ldr	r3, [pc, #44]	@ (800729c <prvSampleTimeNow+0x3c>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	429a      	cmp	r2, r3
 8007276:	d205      	bcs.n	8007284 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007278:	f000 f940 	bl	80074fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	601a      	str	r2, [r3, #0]
 8007282:	e002      	b.n	800728a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800728a:	4a04      	ldr	r2, [pc, #16]	@ (800729c <prvSampleTimeNow+0x3c>)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007290:	68fb      	ldr	r3, [r7, #12]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	20000ff8 	.word	0x20000ff8

080072a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
 80072ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80072ae:	2300      	movs	r3, #0
 80072b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	68ba      	ldr	r2, [r7, #8]
 80072b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80072be:	68ba      	ldr	r2, [r7, #8]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d812      	bhi.n	80072ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	1ad2      	subs	r2, r2, r3
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d302      	bcc.n	80072da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80072d4:	2301      	movs	r3, #1
 80072d6:	617b      	str	r3, [r7, #20]
 80072d8:	e01b      	b.n	8007312 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80072da:	4b10      	ldr	r3, [pc, #64]	@ (800731c <prvInsertTimerInActiveList+0x7c>)
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	3304      	adds	r3, #4
 80072e2:	4619      	mov	r1, r3
 80072e4:	4610      	mov	r0, r2
 80072e6:	f7fe f99c 	bl	8005622 <vListInsert>
 80072ea:	e012      	b.n	8007312 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d206      	bcs.n	8007302 <prvInsertTimerInActiveList+0x62>
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d302      	bcc.n	8007302 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80072fc:	2301      	movs	r3, #1
 80072fe:	617b      	str	r3, [r7, #20]
 8007300:	e007      	b.n	8007312 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007302:	4b07      	ldr	r3, [pc, #28]	@ (8007320 <prvInsertTimerInActiveList+0x80>)
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	3304      	adds	r3, #4
 800730a:	4619      	mov	r1, r3
 800730c:	4610      	mov	r0, r2
 800730e:	f7fe f988 	bl	8005622 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007312:	697b      	ldr	r3, [r7, #20]
}
 8007314:	4618      	mov	r0, r3
 8007316:	3718      	adds	r7, #24
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}
 800731c:	20000fec 	.word	0x20000fec
 8007320:	20000fe8 	.word	0x20000fe8

08007324 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b08e      	sub	sp, #56	@ 0x38
 8007328:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800732a:	e0d4      	b.n	80074d6 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	da1b      	bge.n	800736a <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007332:	1d3b      	adds	r3, r7, #4
 8007334:	3304      	adds	r3, #4
 8007336:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10d      	bne.n	800735a <prvProcessReceivedCommands+0x36>
	__asm volatile
 800733e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007342:	b672      	cpsid	i
 8007344:	f383 8811 	msr	BASEPRI, r3
 8007348:	f3bf 8f6f 	isb	sy
 800734c:	f3bf 8f4f 	dsb	sy
 8007350:	b662      	cpsie	i
 8007352:	61fb      	str	r3, [r7, #28]
}
 8007354:	bf00      	nop
 8007356:	bf00      	nop
 8007358:	e7fd      	b.n	8007356 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800735a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007360:	6850      	ldr	r0, [r2, #4]
 8007362:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007364:	6892      	ldr	r2, [r2, #8]
 8007366:	4611      	mov	r1, r2
 8007368:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	f2c0 80b2 	blt.w	80074d6 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d004      	beq.n	8007388 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800737e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007380:	3304      	adds	r3, #4
 8007382:	4618      	mov	r0, r3
 8007384:	f7fe f986 	bl	8005694 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007388:	463b      	mov	r3, r7
 800738a:	4618      	mov	r0, r3
 800738c:	f7ff ff68 	bl	8007260 <prvSampleTimeNow>
 8007390:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2b09      	cmp	r3, #9
 8007396:	f200 809b 	bhi.w	80074d0 <prvProcessReceivedCommands+0x1ac>
 800739a:	a201      	add	r2, pc, #4	@ (adr r2, 80073a0 <prvProcessReceivedCommands+0x7c>)
 800739c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a0:	080073c9 	.word	0x080073c9
 80073a4:	080073c9 	.word	0x080073c9
 80073a8:	080073c9 	.word	0x080073c9
 80073ac:	08007443 	.word	0x08007443
 80073b0:	08007457 	.word	0x08007457
 80073b4:	080074a7 	.word	0x080074a7
 80073b8:	080073c9 	.word	0x080073c9
 80073bc:	080073c9 	.word	0x080073c9
 80073c0:	08007443 	.word	0x08007443
 80073c4:	08007457 	.word	0x08007457
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80073c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80073ce:	f043 0301 	orr.w	r3, r3, #1
 80073d2:	b2da      	uxtb	r2, r3
 80073d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80073da:	68ba      	ldr	r2, [r7, #8]
 80073dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	18d1      	adds	r1, r2, r3
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073e8:	f7ff ff5a 	bl	80072a0 <prvInsertTimerInActiveList>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d070      	beq.n	80074d4 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80073fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007400:	f003 0304 	and.w	r3, r3, #4
 8007404:	2b00      	cmp	r3, #0
 8007406:	d065      	beq.n	80074d4 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007408:	68ba      	ldr	r2, [r7, #8]
 800740a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800740c:	699b      	ldr	r3, [r3, #24]
 800740e:	441a      	add	r2, r3
 8007410:	2300      	movs	r3, #0
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	2300      	movs	r3, #0
 8007416:	2100      	movs	r1, #0
 8007418:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800741a:	f7ff fdfb 	bl	8007014 <xTimerGenericCommand>
 800741e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007420:	6a3b      	ldr	r3, [r7, #32]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d156      	bne.n	80074d4 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8007426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800742a:	b672      	cpsid	i
 800742c:	f383 8811 	msr	BASEPRI, r3
 8007430:	f3bf 8f6f 	isb	sy
 8007434:	f3bf 8f4f 	dsb	sy
 8007438:	b662      	cpsie	i
 800743a:	61bb      	str	r3, [r7, #24]
}
 800743c:	bf00      	nop
 800743e:	bf00      	nop
 8007440:	e7fd      	b.n	800743e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007444:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007448:	f023 0301 	bic.w	r3, r3, #1
 800744c:	b2da      	uxtb	r2, r3
 800744e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007450:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007454:	e03f      	b.n	80074d6 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007458:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800745c:	f043 0301 	orr.w	r3, r3, #1
 8007460:	b2da      	uxtb	r2, r3
 8007462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007464:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800746c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800746e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d10d      	bne.n	8007492 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8007476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800747a:	b672      	cpsid	i
 800747c:	f383 8811 	msr	BASEPRI, r3
 8007480:	f3bf 8f6f 	isb	sy
 8007484:	f3bf 8f4f 	dsb	sy
 8007488:	b662      	cpsie	i
 800748a:	617b      	str	r3, [r7, #20]
}
 800748c:	bf00      	nop
 800748e:	bf00      	nop
 8007490:	e7fd      	b.n	800748e <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007494:	699a      	ldr	r2, [r3, #24]
 8007496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007498:	18d1      	adds	r1, r2, r3
 800749a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800749c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800749e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074a0:	f7ff fefe 	bl	80072a0 <prvInsertTimerInActiveList>
					break;
 80074a4:	e017      	b.n	80074d6 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80074a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074ac:	f003 0302 	and.w	r3, r3, #2
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d103      	bne.n	80074bc <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 80074b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074b6:	f000 fbd5 	bl	8007c64 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80074ba:	e00c      	b.n	80074d6 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80074bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074c2:	f023 0301 	bic.w	r3, r3, #1
 80074c6:	b2da      	uxtb	r2, r3
 80074c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80074ce:	e002      	b.n	80074d6 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 80074d0:	bf00      	nop
 80074d2:	e000      	b.n	80074d6 <prvProcessReceivedCommands+0x1b2>
					break;
 80074d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80074d6:	4b08      	ldr	r3, [pc, #32]	@ (80074f8 <prvProcessReceivedCommands+0x1d4>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	1d39      	adds	r1, r7, #4
 80074dc:	2200      	movs	r2, #0
 80074de:	4618      	mov	r0, r3
 80074e0:	f7fe fbc6 	bl	8005c70 <xQueueReceive>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f47f af20 	bne.w	800732c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80074ec:	bf00      	nop
 80074ee:	bf00      	nop
 80074f0:	3730      	adds	r7, #48	@ 0x30
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	20000ff0 	.word	0x20000ff0

080074fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b088      	sub	sp, #32
 8007500:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007502:	e04b      	b.n	800759c <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007504:	4b2f      	ldr	r3, [pc, #188]	@ (80075c4 <prvSwitchTimerLists+0xc8>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800750e:	4b2d      	ldr	r3, [pc, #180]	@ (80075c4 <prvSwitchTimerLists+0xc8>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	3304      	adds	r3, #4
 800751c:	4618      	mov	r0, r3
 800751e:	f7fe f8b9 	bl	8005694 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6a1b      	ldr	r3, [r3, #32]
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007530:	f003 0304 	and.w	r3, r3, #4
 8007534:	2b00      	cmp	r3, #0
 8007536:	d031      	beq.n	800759c <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	693a      	ldr	r2, [r7, #16]
 800753e:	4413      	add	r3, r2
 8007540:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007542:	68ba      	ldr	r2, [r7, #8]
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	429a      	cmp	r2, r3
 8007548:	d90e      	bls.n	8007568 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007556:	4b1b      	ldr	r3, [pc, #108]	@ (80075c4 <prvSwitchTimerLists+0xc8>)
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	3304      	adds	r3, #4
 800755e:	4619      	mov	r1, r3
 8007560:	4610      	mov	r0, r2
 8007562:	f7fe f85e 	bl	8005622 <vListInsert>
 8007566:	e019      	b.n	800759c <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007568:	2300      	movs	r3, #0
 800756a:	9300      	str	r3, [sp, #0]
 800756c:	2300      	movs	r3, #0
 800756e:	693a      	ldr	r2, [r7, #16]
 8007570:	2100      	movs	r1, #0
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f7ff fd4e 	bl	8007014 <xTimerGenericCommand>
 8007578:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d10d      	bne.n	800759c <prvSwitchTimerLists+0xa0>
	__asm volatile
 8007580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007584:	b672      	cpsid	i
 8007586:	f383 8811 	msr	BASEPRI, r3
 800758a:	f3bf 8f6f 	isb	sy
 800758e:	f3bf 8f4f 	dsb	sy
 8007592:	b662      	cpsie	i
 8007594:	603b      	str	r3, [r7, #0]
}
 8007596:	bf00      	nop
 8007598:	bf00      	nop
 800759a:	e7fd      	b.n	8007598 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800759c:	4b09      	ldr	r3, [pc, #36]	@ (80075c4 <prvSwitchTimerLists+0xc8>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1ae      	bne.n	8007504 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80075a6:	4b07      	ldr	r3, [pc, #28]	@ (80075c4 <prvSwitchTimerLists+0xc8>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80075ac:	4b06      	ldr	r3, [pc, #24]	@ (80075c8 <prvSwitchTimerLists+0xcc>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a04      	ldr	r2, [pc, #16]	@ (80075c4 <prvSwitchTimerLists+0xc8>)
 80075b2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80075b4:	4a04      	ldr	r2, [pc, #16]	@ (80075c8 <prvSwitchTimerLists+0xcc>)
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	6013      	str	r3, [r2, #0]
}
 80075ba:	bf00      	nop
 80075bc:	3718      	adds	r7, #24
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	20000fe8 	.word	0x20000fe8
 80075c8:	20000fec 	.word	0x20000fec

080075cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80075d2:	f000 f94b 	bl	800786c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80075d6:	4b15      	ldr	r3, [pc, #84]	@ (800762c <prvCheckForValidListAndQueue+0x60>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d120      	bne.n	8007620 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80075de:	4814      	ldr	r0, [pc, #80]	@ (8007630 <prvCheckForValidListAndQueue+0x64>)
 80075e0:	f7fd ffce 	bl	8005580 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80075e4:	4813      	ldr	r0, [pc, #76]	@ (8007634 <prvCheckForValidListAndQueue+0x68>)
 80075e6:	f7fd ffcb 	bl	8005580 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80075ea:	4b13      	ldr	r3, [pc, #76]	@ (8007638 <prvCheckForValidListAndQueue+0x6c>)
 80075ec:	4a10      	ldr	r2, [pc, #64]	@ (8007630 <prvCheckForValidListAndQueue+0x64>)
 80075ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80075f0:	4b12      	ldr	r3, [pc, #72]	@ (800763c <prvCheckForValidListAndQueue+0x70>)
 80075f2:	4a10      	ldr	r2, [pc, #64]	@ (8007634 <prvCheckForValidListAndQueue+0x68>)
 80075f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80075f6:	2300      	movs	r3, #0
 80075f8:	9300      	str	r3, [sp, #0]
 80075fa:	4b11      	ldr	r3, [pc, #68]	@ (8007640 <prvCheckForValidListAndQueue+0x74>)
 80075fc:	4a11      	ldr	r2, [pc, #68]	@ (8007644 <prvCheckForValidListAndQueue+0x78>)
 80075fe:	2110      	movs	r1, #16
 8007600:	200a      	movs	r0, #10
 8007602:	f7fe f8dd 	bl	80057c0 <xQueueGenericCreateStatic>
 8007606:	4603      	mov	r3, r0
 8007608:	4a08      	ldr	r2, [pc, #32]	@ (800762c <prvCheckForValidListAndQueue+0x60>)
 800760a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800760c:	4b07      	ldr	r3, [pc, #28]	@ (800762c <prvCheckForValidListAndQueue+0x60>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d005      	beq.n	8007620 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007614:	4b05      	ldr	r3, [pc, #20]	@ (800762c <prvCheckForValidListAndQueue+0x60>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	490b      	ldr	r1, [pc, #44]	@ (8007648 <prvCheckForValidListAndQueue+0x7c>)
 800761a:	4618      	mov	r0, r3
 800761c:	f7fe fd20 	bl	8006060 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007620:	f000 f95a 	bl	80078d8 <vPortExitCritical>
}
 8007624:	bf00      	nop
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	20000ff0 	.word	0x20000ff0
 8007630:	20000fc0 	.word	0x20000fc0
 8007634:	20000fd4 	.word	0x20000fd4
 8007638:	20000fe8 	.word	0x20000fe8
 800763c:	20000fec 	.word	0x20000fec
 8007640:	2000109c 	.word	0x2000109c
 8007644:	20000ffc 	.word	0x20000ffc
 8007648:	08007f58 	.word	0x08007f58

0800764c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	3b04      	subs	r3, #4
 800765c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007664:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	3b04      	subs	r3, #4
 800766a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	f023 0201 	bic.w	r2, r3, #1
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	3b04      	subs	r3, #4
 800767a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800767c:	4a0c      	ldr	r2, [pc, #48]	@ (80076b0 <pxPortInitialiseStack+0x64>)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	3b14      	subs	r3, #20
 8007686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	3b04      	subs	r3, #4
 8007692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f06f 0202 	mvn.w	r2, #2
 800769a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	3b20      	subs	r3, #32
 80076a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80076a2:	68fb      	ldr	r3, [r7, #12]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3714      	adds	r7, #20
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr
 80076b0:	080076b5 	.word	0x080076b5

080076b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80076ba:	2300      	movs	r3, #0
 80076bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80076be:	4b15      	ldr	r3, [pc, #84]	@ (8007714 <prvTaskExitError+0x60>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c6:	d00d      	beq.n	80076e4 <prvTaskExitError+0x30>
	__asm volatile
 80076c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076cc:	b672      	cpsid	i
 80076ce:	f383 8811 	msr	BASEPRI, r3
 80076d2:	f3bf 8f6f 	isb	sy
 80076d6:	f3bf 8f4f 	dsb	sy
 80076da:	b662      	cpsie	i
 80076dc:	60fb      	str	r3, [r7, #12]
}
 80076de:	bf00      	nop
 80076e0:	bf00      	nop
 80076e2:	e7fd      	b.n	80076e0 <prvTaskExitError+0x2c>
	__asm volatile
 80076e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e8:	b672      	cpsid	i
 80076ea:	f383 8811 	msr	BASEPRI, r3
 80076ee:	f3bf 8f6f 	isb	sy
 80076f2:	f3bf 8f4f 	dsb	sy
 80076f6:	b662      	cpsie	i
 80076f8:	60bb      	str	r3, [r7, #8]
}
 80076fa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80076fc:	bf00      	nop
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d0fc      	beq.n	80076fe <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007704:	bf00      	nop
 8007706:	bf00      	nop
 8007708:	3714      	adds	r7, #20
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	2000000c 	.word	0x2000000c
	...

08007720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007720:	4b07      	ldr	r3, [pc, #28]	@ (8007740 <pxCurrentTCBConst2>)
 8007722:	6819      	ldr	r1, [r3, #0]
 8007724:	6808      	ldr	r0, [r1, #0]
 8007726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800772a:	f380 8809 	msr	PSP, r0
 800772e:	f3bf 8f6f 	isb	sy
 8007732:	f04f 0000 	mov.w	r0, #0
 8007736:	f380 8811 	msr	BASEPRI, r0
 800773a:	4770      	bx	lr
 800773c:	f3af 8000 	nop.w

08007740 <pxCurrentTCBConst2>:
 8007740:	20000ac0 	.word	0x20000ac0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007744:	bf00      	nop
 8007746:	bf00      	nop

08007748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007748:	4808      	ldr	r0, [pc, #32]	@ (800776c <prvPortStartFirstTask+0x24>)
 800774a:	6800      	ldr	r0, [r0, #0]
 800774c:	6800      	ldr	r0, [r0, #0]
 800774e:	f380 8808 	msr	MSP, r0
 8007752:	f04f 0000 	mov.w	r0, #0
 8007756:	f380 8814 	msr	CONTROL, r0
 800775a:	b662      	cpsie	i
 800775c:	b661      	cpsie	f
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	f3bf 8f6f 	isb	sy
 8007766:	df00      	svc	0
 8007768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800776a:	bf00      	nop
 800776c:	e000ed08 	.word	0xe000ed08

08007770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007776:	4b37      	ldr	r3, [pc, #220]	@ (8007854 <xPortStartScheduler+0xe4>)
 8007778:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	b2db      	uxtb	r3, r3
 8007780:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	22ff      	movs	r2, #255	@ 0xff
 8007786:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	b2db      	uxtb	r3, r3
 800778e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007790:	78fb      	ldrb	r3, [r7, #3]
 8007792:	b2db      	uxtb	r3, r3
 8007794:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007798:	b2da      	uxtb	r2, r3
 800779a:	4b2f      	ldr	r3, [pc, #188]	@ (8007858 <xPortStartScheduler+0xe8>)
 800779c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800779e:	4b2f      	ldr	r3, [pc, #188]	@ (800785c <xPortStartScheduler+0xec>)
 80077a0:	2207      	movs	r2, #7
 80077a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077a4:	e009      	b.n	80077ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80077a6:	4b2d      	ldr	r3, [pc, #180]	@ (800785c <xPortStartScheduler+0xec>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	3b01      	subs	r3, #1
 80077ac:	4a2b      	ldr	r2, [pc, #172]	@ (800785c <xPortStartScheduler+0xec>)
 80077ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80077b0:	78fb      	ldrb	r3, [r7, #3]
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	005b      	lsls	r3, r3, #1
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077ba:	78fb      	ldrb	r3, [r7, #3]
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077c2:	2b80      	cmp	r3, #128	@ 0x80
 80077c4:	d0ef      	beq.n	80077a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80077c6:	4b25      	ldr	r3, [pc, #148]	@ (800785c <xPortStartScheduler+0xec>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f1c3 0307 	rsb	r3, r3, #7
 80077ce:	2b04      	cmp	r3, #4
 80077d0:	d00d      	beq.n	80077ee <xPortStartScheduler+0x7e>
	__asm volatile
 80077d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077d6:	b672      	cpsid	i
 80077d8:	f383 8811 	msr	BASEPRI, r3
 80077dc:	f3bf 8f6f 	isb	sy
 80077e0:	f3bf 8f4f 	dsb	sy
 80077e4:	b662      	cpsie	i
 80077e6:	60bb      	str	r3, [r7, #8]
}
 80077e8:	bf00      	nop
 80077ea:	bf00      	nop
 80077ec:	e7fd      	b.n	80077ea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80077ee:	4b1b      	ldr	r3, [pc, #108]	@ (800785c <xPortStartScheduler+0xec>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	021b      	lsls	r3, r3, #8
 80077f4:	4a19      	ldr	r2, [pc, #100]	@ (800785c <xPortStartScheduler+0xec>)
 80077f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80077f8:	4b18      	ldr	r3, [pc, #96]	@ (800785c <xPortStartScheduler+0xec>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007800:	4a16      	ldr	r2, [pc, #88]	@ (800785c <xPortStartScheduler+0xec>)
 8007802:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	b2da      	uxtb	r2, r3
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800780c:	4b14      	ldr	r3, [pc, #80]	@ (8007860 <xPortStartScheduler+0xf0>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a13      	ldr	r2, [pc, #76]	@ (8007860 <xPortStartScheduler+0xf0>)
 8007812:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007816:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007818:	4b11      	ldr	r3, [pc, #68]	@ (8007860 <xPortStartScheduler+0xf0>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a10      	ldr	r2, [pc, #64]	@ (8007860 <xPortStartScheduler+0xf0>)
 800781e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007822:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007824:	f000 f8dc 	bl	80079e0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007828:	4b0e      	ldr	r3, [pc, #56]	@ (8007864 <xPortStartScheduler+0xf4>)
 800782a:	2200      	movs	r2, #0
 800782c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800782e:	f000 f8fb 	bl	8007a28 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007832:	4b0d      	ldr	r3, [pc, #52]	@ (8007868 <xPortStartScheduler+0xf8>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a0c      	ldr	r2, [pc, #48]	@ (8007868 <xPortStartScheduler+0xf8>)
 8007838:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800783c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800783e:	f7ff ff83 	bl	8007748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007842:	f7ff f837 	bl	80068b4 <vTaskSwitchContext>
	prvTaskExitError();
 8007846:	f7ff ff35 	bl	80076b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3710      	adds	r7, #16
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	e000e400 	.word	0xe000e400
 8007858:	200010ec 	.word	0x200010ec
 800785c:	200010f0 	.word	0x200010f0
 8007860:	e000ed20 	.word	0xe000ed20
 8007864:	2000000c 	.word	0x2000000c
 8007868:	e000ef34 	.word	0xe000ef34

0800786c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
	__asm volatile
 8007872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007876:	b672      	cpsid	i
 8007878:	f383 8811 	msr	BASEPRI, r3
 800787c:	f3bf 8f6f 	isb	sy
 8007880:	f3bf 8f4f 	dsb	sy
 8007884:	b662      	cpsie	i
 8007886:	607b      	str	r3, [r7, #4]
}
 8007888:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800788a:	4b11      	ldr	r3, [pc, #68]	@ (80078d0 <vPortEnterCritical+0x64>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	3301      	adds	r3, #1
 8007890:	4a0f      	ldr	r2, [pc, #60]	@ (80078d0 <vPortEnterCritical+0x64>)
 8007892:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007894:	4b0e      	ldr	r3, [pc, #56]	@ (80078d0 <vPortEnterCritical+0x64>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d112      	bne.n	80078c2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800789c:	4b0d      	ldr	r3, [pc, #52]	@ (80078d4 <vPortEnterCritical+0x68>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00d      	beq.n	80078c2 <vPortEnterCritical+0x56>
	__asm volatile
 80078a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078aa:	b672      	cpsid	i
 80078ac:	f383 8811 	msr	BASEPRI, r3
 80078b0:	f3bf 8f6f 	isb	sy
 80078b4:	f3bf 8f4f 	dsb	sy
 80078b8:	b662      	cpsie	i
 80078ba:	603b      	str	r3, [r7, #0]
}
 80078bc:	bf00      	nop
 80078be:	bf00      	nop
 80078c0:	e7fd      	b.n	80078be <vPortEnterCritical+0x52>
	}
}
 80078c2:	bf00      	nop
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	2000000c 	.word	0x2000000c
 80078d4:	e000ed04 	.word	0xe000ed04

080078d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80078de:	4b13      	ldr	r3, [pc, #76]	@ (800792c <vPortExitCritical+0x54>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d10d      	bne.n	8007902 <vPortExitCritical+0x2a>
	__asm volatile
 80078e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ea:	b672      	cpsid	i
 80078ec:	f383 8811 	msr	BASEPRI, r3
 80078f0:	f3bf 8f6f 	isb	sy
 80078f4:	f3bf 8f4f 	dsb	sy
 80078f8:	b662      	cpsie	i
 80078fa:	607b      	str	r3, [r7, #4]
}
 80078fc:	bf00      	nop
 80078fe:	bf00      	nop
 8007900:	e7fd      	b.n	80078fe <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007902:	4b0a      	ldr	r3, [pc, #40]	@ (800792c <vPortExitCritical+0x54>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	3b01      	subs	r3, #1
 8007908:	4a08      	ldr	r2, [pc, #32]	@ (800792c <vPortExitCritical+0x54>)
 800790a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800790c:	4b07      	ldr	r3, [pc, #28]	@ (800792c <vPortExitCritical+0x54>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d105      	bne.n	8007920 <vPortExitCritical+0x48>
 8007914:	2300      	movs	r3, #0
 8007916:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	f383 8811 	msr	BASEPRI, r3
}
 800791e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	2000000c 	.word	0x2000000c

08007930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007930:	f3ef 8009 	mrs	r0, PSP
 8007934:	f3bf 8f6f 	isb	sy
 8007938:	4b15      	ldr	r3, [pc, #84]	@ (8007990 <pxCurrentTCBConst>)
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	f01e 0f10 	tst.w	lr, #16
 8007940:	bf08      	it	eq
 8007942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800794a:	6010      	str	r0, [r2, #0]
 800794c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007950:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007954:	b672      	cpsid	i
 8007956:	f380 8811 	msr	BASEPRI, r0
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	f3bf 8f6f 	isb	sy
 8007962:	b662      	cpsie	i
 8007964:	f7fe ffa6 	bl	80068b4 <vTaskSwitchContext>
 8007968:	f04f 0000 	mov.w	r0, #0
 800796c:	f380 8811 	msr	BASEPRI, r0
 8007970:	bc09      	pop	{r0, r3}
 8007972:	6819      	ldr	r1, [r3, #0]
 8007974:	6808      	ldr	r0, [r1, #0]
 8007976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800797a:	f01e 0f10 	tst.w	lr, #16
 800797e:	bf08      	it	eq
 8007980:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007984:	f380 8809 	msr	PSP, r0
 8007988:	f3bf 8f6f 	isb	sy
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop

08007990 <pxCurrentTCBConst>:
 8007990:	20000ac0 	.word	0x20000ac0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007994:	bf00      	nop
 8007996:	bf00      	nop

08007998 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
	__asm volatile
 800799e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a2:	b672      	cpsid	i
 80079a4:	f383 8811 	msr	BASEPRI, r3
 80079a8:	f3bf 8f6f 	isb	sy
 80079ac:	f3bf 8f4f 	dsb	sy
 80079b0:	b662      	cpsie	i
 80079b2:	607b      	str	r3, [r7, #4]
}
 80079b4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80079b6:	f7fe fec1 	bl	800673c <xTaskIncrementTick>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d003      	beq.n	80079c8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80079c0:	4b06      	ldr	r3, [pc, #24]	@ (80079dc <SysTick_Handler+0x44>)
 80079c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079c6:	601a      	str	r2, [r3, #0]
 80079c8:	2300      	movs	r3, #0
 80079ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	f383 8811 	msr	BASEPRI, r3
}
 80079d2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80079d4:	bf00      	nop
 80079d6:	3708      	adds	r7, #8
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	e000ed04 	.word	0xe000ed04

080079e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80079e0:	b480      	push	{r7}
 80079e2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80079e4:	4b0b      	ldr	r3, [pc, #44]	@ (8007a14 <vPortSetupTimerInterrupt+0x34>)
 80079e6:	2200      	movs	r2, #0
 80079e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80079ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007a18 <vPortSetupTimerInterrupt+0x38>)
 80079ec:	2200      	movs	r2, #0
 80079ee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80079f0:	4b0a      	ldr	r3, [pc, #40]	@ (8007a1c <vPortSetupTimerInterrupt+0x3c>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a0a      	ldr	r2, [pc, #40]	@ (8007a20 <vPortSetupTimerInterrupt+0x40>)
 80079f6:	fba2 2303 	umull	r2, r3, r2, r3
 80079fa:	099b      	lsrs	r3, r3, #6
 80079fc:	4a09      	ldr	r2, [pc, #36]	@ (8007a24 <vPortSetupTimerInterrupt+0x44>)
 80079fe:	3b01      	subs	r3, #1
 8007a00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a02:	4b04      	ldr	r3, [pc, #16]	@ (8007a14 <vPortSetupTimerInterrupt+0x34>)
 8007a04:	2207      	movs	r2, #7
 8007a06:	601a      	str	r2, [r3, #0]
}
 8007a08:	bf00      	nop
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	e000e010 	.word	0xe000e010
 8007a18:	e000e018 	.word	0xe000e018
 8007a1c:	20000000 	.word	0x20000000
 8007a20:	10624dd3 	.word	0x10624dd3
 8007a24:	e000e014 	.word	0xe000e014

08007a28 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007a28:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007a38 <vPortEnableVFP+0x10>
 8007a2c:	6801      	ldr	r1, [r0, #0]
 8007a2e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007a32:	6001      	str	r1, [r0, #0]
 8007a34:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007a36:	bf00      	nop
 8007a38:	e000ed88 	.word	0xe000ed88

08007a3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007a42:	f3ef 8305 	mrs	r3, IPSR
 8007a46:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2b0f      	cmp	r3, #15
 8007a4c:	d917      	bls.n	8007a7e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007a4e:	4a1a      	ldr	r2, [pc, #104]	@ (8007ab8 <vPortValidateInterruptPriority+0x7c>)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	4413      	add	r3, r2
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007a58:	4b18      	ldr	r3, [pc, #96]	@ (8007abc <vPortValidateInterruptPriority+0x80>)
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	7afa      	ldrb	r2, [r7, #11]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d20d      	bcs.n	8007a7e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8007a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a66:	b672      	cpsid	i
 8007a68:	f383 8811 	msr	BASEPRI, r3
 8007a6c:	f3bf 8f6f 	isb	sy
 8007a70:	f3bf 8f4f 	dsb	sy
 8007a74:	b662      	cpsie	i
 8007a76:	607b      	str	r3, [r7, #4]
}
 8007a78:	bf00      	nop
 8007a7a:	bf00      	nop
 8007a7c:	e7fd      	b.n	8007a7a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007a7e:	4b10      	ldr	r3, [pc, #64]	@ (8007ac0 <vPortValidateInterruptPriority+0x84>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007a86:	4b0f      	ldr	r3, [pc, #60]	@ (8007ac4 <vPortValidateInterruptPriority+0x88>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d90d      	bls.n	8007aaa <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8007a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a92:	b672      	cpsid	i
 8007a94:	f383 8811 	msr	BASEPRI, r3
 8007a98:	f3bf 8f6f 	isb	sy
 8007a9c:	f3bf 8f4f 	dsb	sy
 8007aa0:	b662      	cpsie	i
 8007aa2:	603b      	str	r3, [r7, #0]
}
 8007aa4:	bf00      	nop
 8007aa6:	bf00      	nop
 8007aa8:	e7fd      	b.n	8007aa6 <vPortValidateInterruptPriority+0x6a>
	}
 8007aaa:	bf00      	nop
 8007aac:	3714      	adds	r7, #20
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
 8007ab6:	bf00      	nop
 8007ab8:	e000e3f0 	.word	0xe000e3f0
 8007abc:	200010ec 	.word	0x200010ec
 8007ac0:	e000ed0c 	.word	0xe000ed0c
 8007ac4:	200010f0 	.word	0x200010f0

08007ac8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b08a      	sub	sp, #40	@ 0x28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ad4:	f7fe fd74 	bl	80065c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ad8:	4b5d      	ldr	r3, [pc, #372]	@ (8007c50 <pvPortMalloc+0x188>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d101      	bne.n	8007ae4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ae0:	f000 f920 	bl	8007d24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ae4:	4b5b      	ldr	r3, [pc, #364]	@ (8007c54 <pvPortMalloc+0x18c>)
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4013      	ands	r3, r2
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f040 8094 	bne.w	8007c1a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d020      	beq.n	8007b3a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8007af8:	2208      	movs	r2, #8
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4413      	add	r3, r2
 8007afe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f003 0307 	and.w	r3, r3, #7
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d017      	beq.n	8007b3a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f023 0307 	bic.w	r3, r3, #7
 8007b10:	3308      	adds	r3, #8
 8007b12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f003 0307 	and.w	r3, r3, #7
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00d      	beq.n	8007b3a <pvPortMalloc+0x72>
	__asm volatile
 8007b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b22:	b672      	cpsid	i
 8007b24:	f383 8811 	msr	BASEPRI, r3
 8007b28:	f3bf 8f6f 	isb	sy
 8007b2c:	f3bf 8f4f 	dsb	sy
 8007b30:	b662      	cpsie	i
 8007b32:	617b      	str	r3, [r7, #20]
}
 8007b34:	bf00      	nop
 8007b36:	bf00      	nop
 8007b38:	e7fd      	b.n	8007b36 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d06c      	beq.n	8007c1a <pvPortMalloc+0x152>
 8007b40:	4b45      	ldr	r3, [pc, #276]	@ (8007c58 <pvPortMalloc+0x190>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d867      	bhi.n	8007c1a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007b4a:	4b44      	ldr	r3, [pc, #272]	@ (8007c5c <pvPortMalloc+0x194>)
 8007b4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007b4e:	4b43      	ldr	r3, [pc, #268]	@ (8007c5c <pvPortMalloc+0x194>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b54:	e004      	b.n	8007b60 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8007b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d903      	bls.n	8007b72 <pvPortMalloc+0xaa>
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d1f1      	bne.n	8007b56 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007b72:	4b37      	ldr	r3, [pc, #220]	@ (8007c50 <pvPortMalloc+0x188>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d04e      	beq.n	8007c1a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b7c:	6a3b      	ldr	r3, [r7, #32]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2208      	movs	r2, #8
 8007b82:	4413      	add	r3, r2
 8007b84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	6a3b      	ldr	r3, [r7, #32]
 8007b8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b90:	685a      	ldr	r2, [r3, #4]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	1ad2      	subs	r2, r2, r3
 8007b96:	2308      	movs	r3, #8
 8007b98:	005b      	lsls	r3, r3, #1
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d922      	bls.n	8007be4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	f003 0307 	and.w	r3, r3, #7
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00d      	beq.n	8007bcc <pvPortMalloc+0x104>
	__asm volatile
 8007bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb4:	b672      	cpsid	i
 8007bb6:	f383 8811 	msr	BASEPRI, r3
 8007bba:	f3bf 8f6f 	isb	sy
 8007bbe:	f3bf 8f4f 	dsb	sy
 8007bc2:	b662      	cpsie	i
 8007bc4:	613b      	str	r3, [r7, #16]
}
 8007bc6:	bf00      	nop
 8007bc8:	bf00      	nop
 8007bca:	e7fd      	b.n	8007bc8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bce:	685a      	ldr	r2, [r3, #4]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	1ad2      	subs	r2, r2, r3
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007bde:	69b8      	ldr	r0, [r7, #24]
 8007be0:	f000 f902 	bl	8007de8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007be4:	4b1c      	ldr	r3, [pc, #112]	@ (8007c58 <pvPortMalloc+0x190>)
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	4a1a      	ldr	r2, [pc, #104]	@ (8007c58 <pvPortMalloc+0x190>)
 8007bf0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007bf2:	4b19      	ldr	r3, [pc, #100]	@ (8007c58 <pvPortMalloc+0x190>)
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8007c60 <pvPortMalloc+0x198>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d203      	bcs.n	8007c06 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007bfe:	4b16      	ldr	r3, [pc, #88]	@ (8007c58 <pvPortMalloc+0x190>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a17      	ldr	r2, [pc, #92]	@ (8007c60 <pvPortMalloc+0x198>)
 8007c04:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c08:	685a      	ldr	r2, [r3, #4]
 8007c0a:	4b12      	ldr	r3, [pc, #72]	@ (8007c54 <pvPortMalloc+0x18c>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	431a      	orrs	r2, r3
 8007c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c12:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c16:	2200      	movs	r2, #0
 8007c18:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c1a:	f7fe fcdf 	bl	80065dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	f003 0307 	and.w	r3, r3, #7
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00d      	beq.n	8007c44 <pvPortMalloc+0x17c>
	__asm volatile
 8007c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c2c:	b672      	cpsid	i
 8007c2e:	f383 8811 	msr	BASEPRI, r3
 8007c32:	f3bf 8f6f 	isb	sy
 8007c36:	f3bf 8f4f 	dsb	sy
 8007c3a:	b662      	cpsie	i
 8007c3c:	60fb      	str	r3, [r7, #12]
}
 8007c3e:	bf00      	nop
 8007c40:	bf00      	nop
 8007c42:	e7fd      	b.n	8007c40 <pvPortMalloc+0x178>
	return pvReturn;
 8007c44:	69fb      	ldr	r3, [r7, #28]
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3728      	adds	r7, #40	@ 0x28
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	20004cfc 	.word	0x20004cfc
 8007c54:	20004d08 	.word	0x20004d08
 8007c58:	20004d00 	.word	0x20004d00
 8007c5c:	20004cf4 	.word	0x20004cf4
 8007c60:	20004d04 	.word	0x20004d04

08007c64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b086      	sub	sp, #24
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d04e      	beq.n	8007d14 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007c76:	2308      	movs	r3, #8
 8007c78:	425b      	negs	r3, r3
 8007c7a:	697a      	ldr	r2, [r7, #20]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	685a      	ldr	r2, [r3, #4]
 8007c88:	4b24      	ldr	r3, [pc, #144]	@ (8007d1c <vPortFree+0xb8>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10d      	bne.n	8007cae <vPortFree+0x4a>
	__asm volatile
 8007c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c96:	b672      	cpsid	i
 8007c98:	f383 8811 	msr	BASEPRI, r3
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	b662      	cpsie	i
 8007ca6:	60fb      	str	r3, [r7, #12]
}
 8007ca8:	bf00      	nop
 8007caa:	bf00      	nop
 8007cac:	e7fd      	b.n	8007caa <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00d      	beq.n	8007cd2 <vPortFree+0x6e>
	__asm volatile
 8007cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cba:	b672      	cpsid	i
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	b662      	cpsie	i
 8007cca:	60bb      	str	r3, [r7, #8]
}
 8007ccc:	bf00      	nop
 8007cce:	bf00      	nop
 8007cd0:	e7fd      	b.n	8007cce <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	685a      	ldr	r2, [r3, #4]
 8007cd6:	4b11      	ldr	r3, [pc, #68]	@ (8007d1c <vPortFree+0xb8>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4013      	ands	r3, r2
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d019      	beq.n	8007d14 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d115      	bne.n	8007d14 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	685a      	ldr	r2, [r3, #4]
 8007cec:	4b0b      	ldr	r3, [pc, #44]	@ (8007d1c <vPortFree+0xb8>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	43db      	mvns	r3, r3
 8007cf2:	401a      	ands	r2, r3
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007cf8:	f7fe fc62 	bl	80065c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	685a      	ldr	r2, [r3, #4]
 8007d00:	4b07      	ldr	r3, [pc, #28]	@ (8007d20 <vPortFree+0xbc>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4413      	add	r3, r2
 8007d06:	4a06      	ldr	r2, [pc, #24]	@ (8007d20 <vPortFree+0xbc>)
 8007d08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d0a:	6938      	ldr	r0, [r7, #16]
 8007d0c:	f000 f86c 	bl	8007de8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007d10:	f7fe fc64 	bl	80065dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d14:	bf00      	nop
 8007d16:	3718      	adds	r7, #24
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	20004d08 	.word	0x20004d08
 8007d20:	20004d00 	.word	0x20004d00

08007d24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d2a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007d2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007d30:	4b27      	ldr	r3, [pc, #156]	@ (8007dd0 <prvHeapInit+0xac>)
 8007d32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f003 0307 	and.w	r3, r3, #7
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00c      	beq.n	8007d58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	3307      	adds	r3, #7
 8007d42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f023 0307 	bic.w	r3, r3, #7
 8007d4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	4a1f      	ldr	r2, [pc, #124]	@ (8007dd0 <prvHeapInit+0xac>)
 8007d54:	4413      	add	r3, r2
 8007d56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8007dd4 <prvHeapInit+0xb0>)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007d62:	4b1c      	ldr	r3, [pc, #112]	@ (8007dd4 <prvHeapInit+0xb0>)
 8007d64:	2200      	movs	r2, #0
 8007d66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	68ba      	ldr	r2, [r7, #8]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007d70:	2208      	movs	r2, #8
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	1a9b      	subs	r3, r3, r2
 8007d76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f023 0307 	bic.w	r3, r3, #7
 8007d7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	4a15      	ldr	r2, [pc, #84]	@ (8007dd8 <prvHeapInit+0xb4>)
 8007d84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007d86:	4b14      	ldr	r3, [pc, #80]	@ (8007dd8 <prvHeapInit+0xb4>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007d8e:	4b12      	ldr	r3, [pc, #72]	@ (8007dd8 <prvHeapInit+0xb4>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2200      	movs	r2, #0
 8007d94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	1ad2      	subs	r2, r2, r3
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007da4:	4b0c      	ldr	r3, [pc, #48]	@ (8007dd8 <prvHeapInit+0xb4>)
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	4a0a      	ldr	r2, [pc, #40]	@ (8007ddc <prvHeapInit+0xb8>)
 8007db2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	4a09      	ldr	r2, [pc, #36]	@ (8007de0 <prvHeapInit+0xbc>)
 8007dba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007dbc:	4b09      	ldr	r3, [pc, #36]	@ (8007de4 <prvHeapInit+0xc0>)
 8007dbe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007dc2:	601a      	str	r2, [r3, #0]
}
 8007dc4:	bf00      	nop
 8007dc6:	3714      	adds	r7, #20
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr
 8007dd0:	200010f4 	.word	0x200010f4
 8007dd4:	20004cf4 	.word	0x20004cf4
 8007dd8:	20004cfc 	.word	0x20004cfc
 8007ddc:	20004d04 	.word	0x20004d04
 8007de0:	20004d00 	.word	0x20004d00
 8007de4:	20004d08 	.word	0x20004d08

08007de8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007de8:	b480      	push	{r7}
 8007dea:	b085      	sub	sp, #20
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007df0:	4b28      	ldr	r3, [pc, #160]	@ (8007e94 <prvInsertBlockIntoFreeList+0xac>)
 8007df2:	60fb      	str	r3, [r7, #12]
 8007df4:	e002      	b.n	8007dfc <prvInsertBlockIntoFreeList+0x14>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	60fb      	str	r3, [r7, #12]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d8f7      	bhi.n	8007df6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	68ba      	ldr	r2, [r7, #8]
 8007e10:	4413      	add	r3, r2
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d108      	bne.n	8007e2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	685a      	ldr	r2, [r3, #4]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	441a      	add	r2, r3
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	441a      	add	r2, r3
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d118      	bne.n	8007e70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	4b15      	ldr	r3, [pc, #84]	@ (8007e98 <prvInsertBlockIntoFreeList+0xb0>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d00d      	beq.n	8007e66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	685a      	ldr	r2, [r3, #4]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	441a      	add	r2, r3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	601a      	str	r2, [r3, #0]
 8007e64:	e008      	b.n	8007e78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007e66:	4b0c      	ldr	r3, [pc, #48]	@ (8007e98 <prvInsertBlockIntoFreeList+0xb0>)
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	601a      	str	r2, [r3, #0]
 8007e6e:	e003      	b.n	8007e78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007e78:	68fa      	ldr	r2, [r7, #12]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d002      	beq.n	8007e86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e86:	bf00      	nop
 8007e88:	3714      	adds	r7, #20
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	20004cf4 	.word	0x20004cf4
 8007e98:	20004cfc 	.word	0x20004cfc

08007e9c <memset>:
 8007e9c:	4402      	add	r2, r0
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d100      	bne.n	8007ea6 <memset+0xa>
 8007ea4:	4770      	bx	lr
 8007ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8007eaa:	e7f9      	b.n	8007ea0 <memset+0x4>

08007eac <__libc_init_array>:
 8007eac:	b570      	push	{r4, r5, r6, lr}
 8007eae:	4d0d      	ldr	r5, [pc, #52]	@ (8007ee4 <__libc_init_array+0x38>)
 8007eb0:	4c0d      	ldr	r4, [pc, #52]	@ (8007ee8 <__libc_init_array+0x3c>)
 8007eb2:	1b64      	subs	r4, r4, r5
 8007eb4:	10a4      	asrs	r4, r4, #2
 8007eb6:	2600      	movs	r6, #0
 8007eb8:	42a6      	cmp	r6, r4
 8007eba:	d109      	bne.n	8007ed0 <__libc_init_array+0x24>
 8007ebc:	4d0b      	ldr	r5, [pc, #44]	@ (8007eec <__libc_init_array+0x40>)
 8007ebe:	4c0c      	ldr	r4, [pc, #48]	@ (8007ef0 <__libc_init_array+0x44>)
 8007ec0:	f000 f826 	bl	8007f10 <_init>
 8007ec4:	1b64      	subs	r4, r4, r5
 8007ec6:	10a4      	asrs	r4, r4, #2
 8007ec8:	2600      	movs	r6, #0
 8007eca:	42a6      	cmp	r6, r4
 8007ecc:	d105      	bne.n	8007eda <__libc_init_array+0x2e>
 8007ece:	bd70      	pop	{r4, r5, r6, pc}
 8007ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ed4:	4798      	blx	r3
 8007ed6:	3601      	adds	r6, #1
 8007ed8:	e7ee      	b.n	8007eb8 <__libc_init_array+0xc>
 8007eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ede:	4798      	blx	r3
 8007ee0:	3601      	adds	r6, #1
 8007ee2:	e7f2      	b.n	8007eca <__libc_init_array+0x1e>
 8007ee4:	08007fc8 	.word	0x08007fc8
 8007ee8:	08007fc8 	.word	0x08007fc8
 8007eec:	08007fc8 	.word	0x08007fc8
 8007ef0:	08007fcc 	.word	0x08007fcc

08007ef4 <memcpy>:
 8007ef4:	440a      	add	r2, r1
 8007ef6:	4291      	cmp	r1, r2
 8007ef8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007efc:	d100      	bne.n	8007f00 <memcpy+0xc>
 8007efe:	4770      	bx	lr
 8007f00:	b510      	push	{r4, lr}
 8007f02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f0a:	4291      	cmp	r1, r2
 8007f0c:	d1f9      	bne.n	8007f02 <memcpy+0xe>
 8007f0e:	bd10      	pop	{r4, pc}

08007f10 <_init>:
 8007f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f12:	bf00      	nop
 8007f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f16:	bc08      	pop	{r3}
 8007f18:	469e      	mov	lr, r3
 8007f1a:	4770      	bx	lr

08007f1c <_fini>:
 8007f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1e:	bf00      	nop
 8007f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f22:	bc08      	pop	{r3}
 8007f24:	469e      	mov	lr, r3
 8007f26:	4770      	bx	lr
