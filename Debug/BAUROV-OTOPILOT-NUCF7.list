
BAUROV-OTOPILOT-NUCF7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078a8  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08007aa8  08007aa8  00008aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b40  08007b40  00009010  2**0
                  CONTENTS
  4 .ARM          00000008  08007b40  08007b40  00008b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b48  08007b48  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b48  08007b48  00008b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007b4c  08007b4c  00008b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08007b50  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b34  20000010  08007b60  00009010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b44  08007b60  00009b44  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e601  00000000  00000000  0000903e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004005  00000000  00000000  0002763f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001968  00000000  00000000  0002b648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013d9  00000000  00000000  0002cfb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000285be  00000000  00000000  0002e389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f66c  00000000  00000000  00056947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107ce1  00000000  00000000  00075fb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017dc94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ac8  00000000  00000000  0017dcd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  001847a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000010 	.word	0x20000010
 800021c:	00000000 	.word	0x00000000
 8000220:	08007a90 	.word	0x08007a90

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000014 	.word	0x20000014
 800023c:	08007a90 	.word	0x08007a90

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b96a 	b.w	800052c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	460c      	mov	r4, r1
 8000278:	2b00      	cmp	r3, #0
 800027a:	d14e      	bne.n	800031a <__udivmoddi4+0xaa>
 800027c:	4694      	mov	ip, r2
 800027e:	458c      	cmp	ip, r1
 8000280:	4686      	mov	lr, r0
 8000282:	fab2 f282 	clz	r2, r2
 8000286:	d962      	bls.n	800034e <__udivmoddi4+0xde>
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0320 	rsb	r3, r2, #32
 800028e:	4091      	lsls	r1, r2
 8000290:	fa20 f303 	lsr.w	r3, r0, r3
 8000294:	fa0c fc02 	lsl.w	ip, ip, r2
 8000298:	4319      	orrs	r1, r3
 800029a:	fa00 fe02 	lsl.w	lr, r0, r2
 800029e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a2:	fa1f f68c 	uxth.w	r6, ip
 80002a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ae:	fb07 1114 	mls	r1, r7, r4, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb04 f106 	mul.w	r1, r4, r6
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002c6:	f080 8112 	bcs.w	80004ee <__udivmoddi4+0x27e>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 810f 	bls.w	80004ee <__udivmoddi4+0x27e>
 80002d0:	3c02      	subs	r4, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a59      	subs	r1, r3, r1
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	fbb1 f0f7 	udiv	r0, r1, r7
 80002de:	fb07 1110 	mls	r1, r7, r0, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb00 f606 	mul.w	r6, r0, r6
 80002ea:	429e      	cmp	r6, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x94>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002f6:	f080 80fc 	bcs.w	80004f2 <__udivmoddi4+0x282>
 80002fa:	429e      	cmp	r6, r3
 80002fc:	f240 80f9 	bls.w	80004f2 <__udivmoddi4+0x282>
 8000300:	4463      	add	r3, ip
 8000302:	3802      	subs	r0, #2
 8000304:	1b9b      	subs	r3, r3, r6
 8000306:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800030a:	2100      	movs	r1, #0
 800030c:	b11d      	cbz	r5, 8000316 <__udivmoddi4+0xa6>
 800030e:	40d3      	lsrs	r3, r2
 8000310:	2200      	movs	r2, #0
 8000312:	e9c5 3200 	strd	r3, r2, [r5]
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d905      	bls.n	800032a <__udivmoddi4+0xba>
 800031e:	b10d      	cbz	r5, 8000324 <__udivmoddi4+0xb4>
 8000320:	e9c5 0100 	strd	r0, r1, [r5]
 8000324:	2100      	movs	r1, #0
 8000326:	4608      	mov	r0, r1
 8000328:	e7f5      	b.n	8000316 <__udivmoddi4+0xa6>
 800032a:	fab3 f183 	clz	r1, r3
 800032e:	2900      	cmp	r1, #0
 8000330:	d146      	bne.n	80003c0 <__udivmoddi4+0x150>
 8000332:	42a3      	cmp	r3, r4
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xcc>
 8000336:	4290      	cmp	r0, r2
 8000338:	f0c0 80f0 	bcc.w	800051c <__udivmoddi4+0x2ac>
 800033c:	1a86      	subs	r6, r0, r2
 800033e:	eb64 0303 	sbc.w	r3, r4, r3
 8000342:	2001      	movs	r0, #1
 8000344:	2d00      	cmp	r5, #0
 8000346:	d0e6      	beq.n	8000316 <__udivmoddi4+0xa6>
 8000348:	e9c5 6300 	strd	r6, r3, [r5]
 800034c:	e7e3      	b.n	8000316 <__udivmoddi4+0xa6>
 800034e:	2a00      	cmp	r2, #0
 8000350:	f040 8090 	bne.w	8000474 <__udivmoddi4+0x204>
 8000354:	eba1 040c 	sub.w	r4, r1, ip
 8000358:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800035c:	fa1f f78c 	uxth.w	r7, ip
 8000360:	2101      	movs	r1, #1
 8000362:	fbb4 f6f8 	udiv	r6, r4, r8
 8000366:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800036a:	fb08 4416 	mls	r4, r8, r6, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb07 f006 	mul.w	r0, r7, r6
 8000376:	4298      	cmp	r0, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x11c>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x11a>
 8000384:	4298      	cmp	r0, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2b4>
 800038a:	4626      	mov	r6, r4
 800038c:	1a1c      	subs	r4, r3, r0
 800038e:	fa1f f38e 	uxth.w	r3, lr
 8000392:	fbb4 f0f8 	udiv	r0, r4, r8
 8000396:	fb08 4410 	mls	r4, r8, r0, r4
 800039a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800039e:	fb00 f707 	mul.w	r7, r0, r7
 80003a2:	429f      	cmp	r7, r3
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x148>
 80003a6:	eb1c 0303 	adds.w	r3, ip, r3
 80003aa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x146>
 80003b0:	429f      	cmp	r7, r3
 80003b2:	f200 80b0 	bhi.w	8000516 <__udivmoddi4+0x2a6>
 80003b6:	4620      	mov	r0, r4
 80003b8:	1bdb      	subs	r3, r3, r7
 80003ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003be:	e7a5      	b.n	800030c <__udivmoddi4+0x9c>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ca:	431f      	orrs	r7, r3
 80003cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d0:	fa04 f301 	lsl.w	r3, r4, r1
 80003d4:	ea43 030c 	orr.w	r3, r3, ip
 80003d8:	40f4      	lsrs	r4, r6
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	0c38      	lsrs	r0, r7, #16
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb4 fef0 	udiv	lr, r4, r0
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	fb00 441e 	mls	r4, r0, lr, r4
 80003f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f4:	fb0e f90c 	mul.w	r9, lr, ip
 80003f8:	45a1      	cmp	r9, r4
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90a      	bls.n	8000416 <__udivmoddi4+0x1a6>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000406:	f080 8084 	bcs.w	8000512 <__udivmoddi4+0x2a2>
 800040a:	45a1      	cmp	r9, r4
 800040c:	f240 8081 	bls.w	8000512 <__udivmoddi4+0x2a2>
 8000410:	f1ae 0e02 	sub.w	lr, lr, #2
 8000414:	443c      	add	r4, r7
 8000416:	eba4 0409 	sub.w	r4, r4, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000422:	fb00 4413 	mls	r4, r0, r3, r4
 8000426:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800042a:	fb03 fc0c 	mul.w	ip, r3, ip
 800042e:	45a4      	cmp	ip, r4
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1d2>
 8000432:	193c      	adds	r4, r7, r4
 8000434:	f103 30ff 	add.w	r0, r3, #4294967295
 8000438:	d267      	bcs.n	800050a <__udivmoddi4+0x29a>
 800043a:	45a4      	cmp	ip, r4
 800043c:	d965      	bls.n	800050a <__udivmoddi4+0x29a>
 800043e:	3b02      	subs	r3, #2
 8000440:	443c      	add	r4, r7
 8000442:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000446:	fba0 9302 	umull	r9, r3, r0, r2
 800044a:	eba4 040c 	sub.w	r4, r4, ip
 800044e:	429c      	cmp	r4, r3
 8000450:	46ce      	mov	lr, r9
 8000452:	469c      	mov	ip, r3
 8000454:	d351      	bcc.n	80004fa <__udivmoddi4+0x28a>
 8000456:	d04e      	beq.n	80004f6 <__udivmoddi4+0x286>
 8000458:	b155      	cbz	r5, 8000470 <__udivmoddi4+0x200>
 800045a:	ebb8 030e 	subs.w	r3, r8, lr
 800045e:	eb64 040c 	sbc.w	r4, r4, ip
 8000462:	fa04 f606 	lsl.w	r6, r4, r6
 8000466:	40cb      	lsrs	r3, r1
 8000468:	431e      	orrs	r6, r3
 800046a:	40cc      	lsrs	r4, r1
 800046c:	e9c5 6400 	strd	r6, r4, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	e750      	b.n	8000316 <__udivmoddi4+0xa6>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f103 	lsr.w	r1, r0, r3
 800047c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000480:	fa24 f303 	lsr.w	r3, r4, r3
 8000484:	4094      	lsls	r4, r2
 8000486:	430c      	orrs	r4, r1
 8000488:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800048c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000490:	fa1f f78c 	uxth.w	r7, ip
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3110 	mls	r1, r8, r0, r3
 800049c:	0c23      	lsrs	r3, r4, #16
 800049e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004a2:	fb00 f107 	mul.w	r1, r0, r7
 80004a6:	4299      	cmp	r1, r3
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x24c>
 80004aa:	eb1c 0303 	adds.w	r3, ip, r3
 80004ae:	f100 36ff 	add.w	r6, r0, #4294967295
 80004b2:	d22c      	bcs.n	800050e <__udivmoddi4+0x29e>
 80004b4:	4299      	cmp	r1, r3
 80004b6:	d92a      	bls.n	800050e <__udivmoddi4+0x29e>
 80004b8:	3802      	subs	r0, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004c4:	fb08 3311 	mls	r3, r8, r1, r3
 80004c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004cc:	fb01 f307 	mul.w	r3, r1, r7
 80004d0:	42a3      	cmp	r3, r4
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x276>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004dc:	d213      	bcs.n	8000506 <__udivmoddi4+0x296>
 80004de:	42a3      	cmp	r3, r4
 80004e0:	d911      	bls.n	8000506 <__udivmoddi4+0x296>
 80004e2:	3902      	subs	r1, #2
 80004e4:	4464      	add	r4, ip
 80004e6:	1ae4      	subs	r4, r4, r3
 80004e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ec:	e739      	b.n	8000362 <__udivmoddi4+0xf2>
 80004ee:	4604      	mov	r4, r0
 80004f0:	e6f0      	b.n	80002d4 <__udivmoddi4+0x64>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e706      	b.n	8000304 <__udivmoddi4+0x94>
 80004f6:	45c8      	cmp	r8, r9
 80004f8:	d2ae      	bcs.n	8000458 <__udivmoddi4+0x1e8>
 80004fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000502:	3801      	subs	r0, #1
 8000504:	e7a8      	b.n	8000458 <__udivmoddi4+0x1e8>
 8000506:	4631      	mov	r1, r6
 8000508:	e7ed      	b.n	80004e6 <__udivmoddi4+0x276>
 800050a:	4603      	mov	r3, r0
 800050c:	e799      	b.n	8000442 <__udivmoddi4+0x1d2>
 800050e:	4630      	mov	r0, r6
 8000510:	e7d4      	b.n	80004bc <__udivmoddi4+0x24c>
 8000512:	46d6      	mov	lr, sl
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1a6>
 8000516:	4463      	add	r3, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74d      	b.n	80003b8 <__udivmoddi4+0x148>
 800051c:	4606      	mov	r6, r0
 800051e:	4623      	mov	r3, r4
 8000520:	4608      	mov	r0, r1
 8000522:	e70f      	b.n	8000344 <__udivmoddi4+0xd4>
 8000524:	3e02      	subs	r6, #2
 8000526:	4463      	add	r3, ip
 8000528:	e730      	b.n	800038c <__udivmoddi4+0x11c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <I2C_Init>:
 * GLOBAL FUNCTIONS
 ********************************************************/
/** Brief description which ends at this dot. Details follow
 *  here.
 */
void I2C_Init(void *handle, uint8_t I2CNo){
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	460b      	mov	r3, r1
 800053a:	70fb      	strb	r3, [r7, #3]
	I2C_HandleTypeDef_T *i2c;
	i2c = I2C_GetModule(I2CNo);
 800053c:	78fb      	ldrb	r3, [r7, #3]
 800053e:	4618      	mov	r0, r3
 8000540:	f000 f864 	bl	800060c <I2C_GetModule>
 8000544:	60f8      	str	r0, [r7, #12]
    i2c->handle = handle;
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	601a      	str	r2, [r3, #0]
}
 800054c:	bf00      	nop
 800054e:	3710      	adds	r7, #16
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <I2C_ReadWrite_Poll>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
I2C_ReturnTypeDef_T I2C_ReadWrite_Poll(uint8_t I2CNo, uint8_t DevAddress, uint8_t *txBuff, uint8_t txLenght, uint8_t *rxBuff, uint8_t rxLenght){
 8000554:	b580      	push	{r7, lr}
 8000556:	b088      	sub	sp, #32
 8000558:	af02      	add	r7, sp, #8
 800055a:	603a      	str	r2, [r7, #0]
 800055c:	461a      	mov	r2, r3
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]
 8000562:	460b      	mov	r3, r1
 8000564:	71bb      	strb	r3, [r7, #6]
 8000566:	4613      	mov	r3, r2
 8000568:	717b      	strb	r3, [r7, #5]
	I2C_HandleTypeDef_T *i2c;
	HAL_StatusTypeDef res;
	uint8_t txAddr, rxAddr;
	txAddr = DevAddress<<1;
 800056a:	79bb      	ldrb	r3, [r7, #6]
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	75fb      	strb	r3, [r7, #23]
	rxAddr = ((DevAddress<<1) | 0x01);
 8000570:	79bb      	ldrb	r3, [r7, #6]
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	b25b      	sxtb	r3, r3
 8000576:	f043 0301 	orr.w	r3, r3, #1
 800057a:	b25b      	sxtb	r3, r3
 800057c:	75bb      	strb	r3, [r7, #22]
	i2c = I2C_GetModule(I2CNo);
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	4618      	mov	r0, r3
 8000582:	f000 f843 	bl	800060c <I2C_GetModule>
 8000586:	6138      	str	r0, [r7, #16]
	if(rxLenght == 0){
 8000588:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800058c:	2b00      	cmp	r3, #0
 800058e:	d114      	bne.n	80005ba <I2C_ReadWrite_Poll+0x66>
		res = HAL_I2C_Master_Transmit(i2c->handle , txAddr, txBuff, txLenght,1000);
 8000590:	693b      	ldr	r3, [r7, #16]
 8000592:	6818      	ldr	r0, [r3, #0]
 8000594:	7dfb      	ldrb	r3, [r7, #23]
 8000596:	b299      	uxth	r1, r3
 8000598:	797b      	ldrb	r3, [r7, #5]
 800059a:	b29b      	uxth	r3, r3
 800059c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005a0:	9200      	str	r2, [sp, #0]
 80005a2:	683a      	ldr	r2, [r7, #0]
 80005a4:	f001 fdbc 	bl	8002120 <HAL_I2C_Master_Transmit>
 80005a8:	4603      	mov	r3, r0
 80005aa:	73fb      	strb	r3, [r7, #15]
		return res == I2C_ERROR;
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	bf0c      	ite	eq
 80005b2:	2301      	moveq	r3, #1
 80005b4:	2300      	movne	r3, #0
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	e023      	b.n	8000602 <I2C_ReadWrite_Poll+0xae>
	}else{
		HAL_I2C_Master_Transmit(i2c->handle , txAddr, txBuff, txLenght,1000);
 80005ba:	693b      	ldr	r3, [r7, #16]
 80005bc:	6818      	ldr	r0, [r3, #0]
 80005be:	7dfb      	ldrb	r3, [r7, #23]
 80005c0:	b299      	uxth	r1, r3
 80005c2:	797b      	ldrb	r3, [r7, #5]
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005ca:	9200      	str	r2, [sp, #0]
 80005cc:	683a      	ldr	r2, [r7, #0]
 80005ce:	f001 fda7 	bl	8002120 <HAL_I2C_Master_Transmit>
		HAL_Delay(1);
 80005d2:	2001      	movs	r0, #1
 80005d4:	f001 fa22 	bl	8001a1c <HAL_Delay>
		res = HAL_I2C_Master_Receive(i2c->handle, rxAddr, rxBuff, rxLenght,1000);
 80005d8:	693b      	ldr	r3, [r7, #16]
 80005da:	6818      	ldr	r0, [r3, #0]
 80005dc:	7dbb      	ldrb	r3, [r7, #22]
 80005de:	b299      	uxth	r1, r3
 80005e0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005ea:	9200      	str	r2, [sp, #0]
 80005ec:	6a3a      	ldr	r2, [r7, #32]
 80005ee:	f001 feaf 	bl	8002350 <HAL_I2C_Master_Receive>
 80005f2:	4603      	mov	r3, r0
 80005f4:	73fb      	strb	r3, [r7, #15]
		return res == I2C_ERROR;
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	bf0c      	ite	eq
 80005fc:	2301      	moveq	r3, #1
 80005fe:	2300      	movne	r3, #0
 8000600:	b2db      	uxtb	r3, r3
	}
}
 8000602:	4618      	mov	r0, r3
 8000604:	3718      	adds	r7, #24
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <I2C_GetModule>:
 * PRIVATE FUNCTIONS
 *********************************************************/
/** Brief description which ends at this dot. Details follow
 *  here.
 */
I2C_HandleTypeDef_T* I2C_GetModule(uint8_t I2CNo){
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
	switch(I2CNo){
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	2b03      	cmp	r3, #3
 800061a:	d00a      	beq.n	8000632 <I2C_GetModule+0x26>
 800061c:	2b03      	cmp	r3, #3
 800061e:	dc0a      	bgt.n	8000636 <I2C_GetModule+0x2a>
 8000620:	2b01      	cmp	r3, #1
 8000622:	d002      	beq.n	800062a <I2C_GetModule+0x1e>
 8000624:	2b02      	cmp	r3, #2
 8000626:	d002      	beq.n	800062e <I2C_GetModule+0x22>
 8000628:	e005      	b.n	8000636 <I2C_GetModule+0x2a>
		case I2CNO_1 : return &I2C_1; break;
 800062a:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <I2C_GetModule+0x38>)
 800062c:	e004      	b.n	8000638 <I2C_GetModule+0x2c>
		case I2CNO_2 : return &I2C_2; break;
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <I2C_GetModule+0x3c>)
 8000630:	e002      	b.n	8000638 <I2C_GetModule+0x2c>
		case I2CNO_3 : return &I2C_3; break;
 8000632:	4b06      	ldr	r3, [pc, #24]	@ (800064c <I2C_GetModule+0x40>)
 8000634:	e000      	b.n	8000638 <I2C_GetModule+0x2c>
		default : return NULL; break;
 8000636:	2300      	movs	r3, #0
	}
}
 8000638:	4618      	mov	r0, r3
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	2000002c 	.word	0x2000002c
 8000648:	20000034 	.word	0x20000034
 800064c:	2000003c 	.word	0x2000003c

08000650 <IMU_Init>:
#include "IMU.h"
#include "Filters.h"

IMU_TypeDef_T IMU_1;

void IMU_Init(IMU_TypeDef_T *ImuHandle, uint8_t ImuSensorNo, uint8_t IMU_I2CNO, uint8_t IMU_I2CAdress, void* ResetGPIOPort, uint16_t ResetGPIOPin){
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af02      	add	r7, sp, #8
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	4608      	mov	r0, r1
 800065a:	4611      	mov	r1, r2
 800065c:	461a      	mov	r2, r3
 800065e:	4603      	mov	r3, r0
 8000660:	70fb      	strb	r3, [r7, #3]
 8000662:	460b      	mov	r3, r1
 8000664:	70bb      	strb	r3, [r7, #2]
 8000666:	4613      	mov	r3, r2
 8000668:	707b      	strb	r3, [r7, #1]
	BNO055_Sensor_T *imuSensor;
	imuSensor = IMU_GetSensorHandle(ImuSensorNo);
 800066a:	78fb      	ldrb	r3, [r7, #3]
 800066c:	4618      	mov	r0, r3
 800066e:	f000 f8b3 	bl	80007d8 <IMU_GetSensorHandle>
 8000672:	60f8      	str	r0, [r7, #12]

	BNO055_Init(imuSensor, IMU_I2CNO, IMU_I2CAdress, ResetGPIOPort, ResetGPIOPin);
 8000674:	787a      	ldrb	r2, [r7, #1]
 8000676:	78b9      	ldrb	r1, [r7, #2]
 8000678:	8bbb      	ldrh	r3, [r7, #28]
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	69bb      	ldr	r3, [r7, #24]
 800067e:	68f8      	ldr	r0, [r7, #12]
 8000680:	f000 f8c8 	bl	8000814 <BNO055_Init>

	ImuHandle->CalcConst.ACC_1MpS2_LSB = imuSensor->CalcConst.ACC_1MpS2_LSB;
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	86da      	strh	r2, [r3, #54]	@ 0x36
	ImuHandle->CalcConst.GYR_1RPS_LSB  = imuSensor->CalcConst.GYR_1RPS_LSB;
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	875a      	strh	r2, [r3, #58]	@ 0x3a
	ImuHandle->CalcConst.MAG_1uT_LSB   = imuSensor->CalcConst.MAG_1uT_LSB;
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	871a      	strh	r2, [r3, #56]	@ 0x38

	HAL_Delay(250);
 800069c:	20fa      	movs	r0, #250	@ 0xfa
 800069e:	f001 f9bd 	bl	8001a1c <HAL_Delay>
}
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <IMU_Execute>:

void IMU_Execute(IMU_TypeDef_T *ImuHandle, uint8_t ImuSensorNo){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	460b      	mov	r3, r1
 80006b6:	70fb      	strb	r3, [r7, #3]
	BNO055_Sensor_T *imuSensor;

	imuSensor = IMU_GetSensorHandle(ImuSensorNo);
 80006b8:	78fb      	ldrb	r3, [r7, #3]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 f88c 	bl	80007d8 <IMU_GetSensorHandle>
 80006c0:	60f8      	str	r0, [r7, #12]

	BNO055_Get_SysError(imuSensor);
 80006c2:	68f8      	ldr	r0, [r7, #12]
 80006c4:	f000 fd7b 	bl	80011be <BNO055_Get_SysError>
	BNO055_Get_ACC_Data(imuSensor);
 80006c8:	68f8      	ldr	r0, [r7, #12]
 80006ca:	f000 fbb4 	bl	8000e36 <BNO055_Get_ACC_Data>
	BNO055_Get_MAG_Data(imuSensor);
 80006ce:	68f8      	ldr	r0, [r7, #12]
 80006d0:	f000 fc34 	bl	8000f3c <BNO055_Get_MAG_Data>
	BNO055_Get_GYR_Data(imuSensor);
 80006d4:	68f8      	ldr	r0, [r7, #12]
 80006d6:	f000 fc84 	bl	8000fe2 <BNO055_Get_GYR_Data>

	IMU_PopulateData(ImuHandle, ImuSensorNo);
 80006da:	78fb      	ldrb	r3, [r7, #3]
 80006dc:	4619      	mov	r1, r3
 80006de:	6878      	ldr	r0, [r7, #4]
 80006e0:	f000 f834 	bl	800074c <IMU_PopulateData>
//	ImuHandle->CalculatedData.Gyroscope.Z_Axis     = (int16_t)(ImuHandle->FilteredData.Gyroscope.Z_Axis/ImuHandle->CalcConst.GYR_1RPS_LSB);
//	ImuHandle->CalculatedData.Magnetometer.X_Axis  = (int16_t)(ImuHandle->FilteredData.Magnetometer.X_Axis / ImuHandle->CalcConst.MAG_1uT_LSB);
//	ImuHandle->CalculatedData.Magnetometer.Y_Axis  = (int16_t)(ImuHandle->FilteredData.Magnetometer.Y_Axis / ImuHandle->CalcConst.MAG_1uT_LSB);
//	ImuHandle->CalculatedData.Magnetometer.Z_Axis  = (int16_t)(ImuHandle->FilteredData.Magnetometer.Z_Axis / ImuHandle->CalcConst.MAG_1uT_LSB);

	ImuHandle->CalculatedData.Accelerometer.X_Axis = (int16_t)IMU_1.AllRawData.Accelerometer.X_Axis;
 80006e4:	4b18      	ldr	r3, [pc, #96]	@ (8000748 <IMU_Execute+0x9c>)
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	b21a      	sxth	r2, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	849a      	strh	r2, [r3, #36]	@ 0x24
	ImuHandle->CalculatedData.Accelerometer.Y_Axis = (int16_t)IMU_1.AllRawData.Accelerometer.Y_Axis;
 80006ee:	4b16      	ldr	r3, [pc, #88]	@ (8000748 <IMU_Execute+0x9c>)
 80006f0:	885b      	ldrh	r3, [r3, #2]
 80006f2:	b21a      	sxth	r2, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	84da      	strh	r2, [r3, #38]	@ 0x26
	ImuHandle->CalculatedData.Accelerometer.Z_Axis = (int16_t)IMU_1.AllRawData.Accelerometer.Z_Axis;
 80006f8:	4b13      	ldr	r3, [pc, #76]	@ (8000748 <IMU_Execute+0x9c>)
 80006fa:	889b      	ldrh	r3, [r3, #4]
 80006fc:	b21a      	sxth	r2, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	851a      	strh	r2, [r3, #40]	@ 0x28
	ImuHandle->CalculatedData.Gyroscope.X_Axis     = (int16_t)IMU_1.AllRawData.Gyroscope.X_Axis;
 8000702:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <IMU_Execute+0x9c>)
 8000704:	88db      	ldrh	r3, [r3, #6]
 8000706:	b21a      	sxth	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	855a      	strh	r2, [r3, #42]	@ 0x2a
	ImuHandle->CalculatedData.Gyroscope.Y_Axis     = (int16_t)IMU_1.AllRawData.Gyroscope.Y_Axis;
 800070c:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <IMU_Execute+0x9c>)
 800070e:	891b      	ldrh	r3, [r3, #8]
 8000710:	b21a      	sxth	r2, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	859a      	strh	r2, [r3, #44]	@ 0x2c
	ImuHandle->CalculatedData.Gyroscope.Z_Axis     = (int16_t)IMU_1.AllRawData.Gyroscope.Z_Axis;
 8000716:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <IMU_Execute+0x9c>)
 8000718:	895b      	ldrh	r3, [r3, #10]
 800071a:	b21a      	sxth	r2, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	85da      	strh	r2, [r3, #46]	@ 0x2e
	ImuHandle->CalculatedData.Magnetometer.X_Axis  = (int16_t)IMU_1.AllRawData.Magnetometer.X_Axis;
 8000720:	4b09      	ldr	r3, [pc, #36]	@ (8000748 <IMU_Execute+0x9c>)
 8000722:	899b      	ldrh	r3, [r3, #12]
 8000724:	b21a      	sxth	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	861a      	strh	r2, [r3, #48]	@ 0x30
	ImuHandle->CalculatedData.Magnetometer.Y_Axis  = (int16_t)IMU_1.AllRawData.Magnetometer.Y_Axis;
 800072a:	4b07      	ldr	r3, [pc, #28]	@ (8000748 <IMU_Execute+0x9c>)
 800072c:	89db      	ldrh	r3, [r3, #14]
 800072e:	b21a      	sxth	r2, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	865a      	strh	r2, [r3, #50]	@ 0x32
	ImuHandle->CalculatedData.Magnetometer.Z_Axis  = (int16_t)IMU_1.AllRawData.Magnetometer.Z_Axis;
 8000734:	4b04      	ldr	r3, [pc, #16]	@ (8000748 <IMU_Execute+0x9c>)
 8000736:	8a1b      	ldrh	r3, [r3, #16]
 8000738:	b21a      	sxth	r2, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	869a      	strh	r2, [r3, #52]	@ 0x34

}
 800073e:	bf00      	nop
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000044 	.word	0x20000044

0800074c <IMU_PopulateData>:

void IMU_PopulateData(IMU_TypeDef_T *ImuHandle, uint8_t ImuSensorNo){
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	460b      	mov	r3, r1
 8000756:	70fb      	strb	r3, [r7, #3]
	BNO055_Sensor_T *imuSensor;
	imuSensor = IMU_GetSensorHandle(ImuSensorNo);
 8000758:	78fb      	ldrb	r3, [r7, #3]
 800075a:	4618      	mov	r0, r3
 800075c:	f000 f83c 	bl	80007d8 <IMU_GetSensorHandle>
 8000760:	60f8      	str	r0, [r7, #12]

	ImuHandle->AllRawData.Accelerometer.X_Axis = (int16_t)imuSensor->ImuData.ACC_X;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000768:	b29a      	uxth	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	801a      	strh	r2, [r3, #0]
	ImuHandle->AllRawData.Accelerometer.Y_Axis = (int16_t)imuSensor->ImuData.ACC_Y;
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000774:	b29a      	uxth	r2, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	805a      	strh	r2, [r3, #2]
	ImuHandle->AllRawData.Accelerometer.Z_Axis = (int16_t)imuSensor->ImuData.ACC_Z;
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000780:	b29a      	uxth	r2, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	809a      	strh	r2, [r3, #4]
	ImuHandle->AllRawData.Gyroscope.X_Axis     = imuSensor->ImuData.GYR_X;
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800078c:	b29a      	uxth	r2, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	80da      	strh	r2, [r3, #6]
	ImuHandle->AllRawData.Gyroscope.Y_Axis     = imuSensor->ImuData.GYR_Y;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000798:	b29a      	uxth	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	811a      	strh	r2, [r3, #8]
	ImuHandle->AllRawData.Gyroscope.Z_Axis     = imuSensor->ImuData.GYR_Z;
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	815a      	strh	r2, [r3, #10]
	ImuHandle->AllRawData.Magnetometer.X_Axis  = imuSensor->ImuData.MAG_X;
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	819a      	strh	r2, [r3, #12]
	ImuHandle->AllRawData.Magnetometer.Y_Axis  = imuSensor->ImuData.MAG_Y;
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80007bc:	b29a      	uxth	r2, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	81da      	strh	r2, [r3, #14]
	ImuHandle->AllRawData.Magnetometer.Z_Axis  = imuSensor->ImuData.MAG_Z;
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	821a      	strh	r2, [r3, #16]
}
 80007ce:	bf00      	nop
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <IMU_GetSensorHandle>:

BNO055_Sensor_T* IMU_GetSensorHandle(uint8_t sensorNo){
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
	switch(sensorNo){
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	2b03      	cmp	r3, #3
 80007e6:	d00a      	beq.n	80007fe <IMU_GetSensorHandle+0x26>
 80007e8:	2b03      	cmp	r3, #3
 80007ea:	dc06      	bgt.n	80007fa <IMU_GetSensorHandle+0x22>
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d002      	beq.n	80007f6 <IMU_GetSensorHandle+0x1e>
 80007f0:	2b02      	cmp	r3, #2
 80007f2:	d006      	beq.n	8000802 <IMU_GetSensorHandle+0x2a>
 80007f4:	e001      	b.n	80007fa <IMU_GetSensorHandle+0x22>
		case 1 : return &BNO055_Sensor_1;break;
 80007f6:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <IMU_GetSensorHandle+0x38>)
 80007f8:	e004      	b.n	8000804 <IMU_GetSensorHandle+0x2c>
		case 2 : break;
		case 3 : break;
		default : return &BNO055_Sensor_1;
 80007fa:	4b05      	ldr	r3, [pc, #20]	@ (8000810 <IMU_GetSensorHandle+0x38>)
 80007fc:	e002      	b.n	8000804 <IMU_GetSensorHandle+0x2c>
		case 3 : break;
 80007fe:	bf00      	nop
 8000800:	e000      	b.n	8000804 <IMU_GetSensorHandle+0x2c>
		case 2 : break;
 8000802:	bf00      	nop
	}
}
 8000804:	4618      	mov	r0, r3
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	20000080 	.word	0x20000080

08000814 <BNO055_Init>:
BNO055_Sensor_T BNO055_Sensor_1;

/** Brief description which ends at this dot. Details follow
 *  here.
 */
void BNO055_Init(BNO055_Sensor_T *handle, uint8_t I2C_No, uint8_t I2C_Adress, void* ResetGPIOPort, uint16_t ResetGPIOPin){
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	460b      	mov	r3, r1
 8000820:	72fb      	strb	r3, [r7, #11]
 8000822:	4613      	mov	r3, r2
 8000824:	72bb      	strb	r3, [r7, #10]
	handle->I2C_No = I2C_No;
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	7afa      	ldrb	r2, [r7, #11]
 800082a:	701a      	strb	r2, [r3, #0]
	handle->Chip_I2C_Address = I2C_Adress;
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	7aba      	ldrb	r2, [r7, #10]
 8000830:	705a      	strb	r2, [r3, #1]
	handle->ResetPort = ResetGPIOPort;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	687a      	ldr	r2, [r7, #4]
 8000836:	605a      	str	r2, [r3, #4]
	handle->ResetPin = ResetGPIOPin;
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	8b3a      	ldrh	r2, [r7, #24]
 800083c:	811a      	strh	r2, [r3, #8]
	handle->CalcConst.ACC_1MpS2_LSB = 100;
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	2264      	movs	r2, #100	@ 0x64
 8000842:	845a      	strh	r2, [r3, #34]	@ 0x22
	handle->CalcConst.GYR_1RPS_LSB = 900;
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	f44f 7261 	mov.w	r2, #900	@ 0x384
 800084a:	84da      	strh	r2, [r3, #38]	@ 0x26
	handle->CalcConst.MAG_1uT_LSB = 16;
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	2210      	movs	r2, #16
 8000850:	849a      	strh	r2, [r3, #36]	@ 0x24
	handle->CalcConst.ACCRange_G = 4;
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	2204      	movs	r2, #4
 8000856:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	handle->CalcConst.GYRRange_DPS = 500;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000860:	855a      	strh	r2, [r3, #42]	@ 0x2a

	BNO055_Reset(handle);
 8000862:	68f8      	ldr	r0, [r7, #12]
 8000864:	f000 f83c 	bl	80008e0 <BNO055_Reset>

	BNO055_Set_OperationMode(handle, BNO055_DATA_OPR_MODE_OPR);
 8000868:	2100      	movs	r1, #0
 800086a:	68f8      	ldr	r0, [r7, #12]
 800086c:	f000 f857 	bl	800091e <BNO055_Set_OperationMode>
	HAL_Delay(25);
 8000870:	2019      	movs	r0, #25
 8000872:	f001 f8d3 	bl	8001a1c <HAL_Delay>
//    	BNO055_GetCalibrationData(handle);
//    	if((handle->CalibState == 0xFF) || (handle->CalibState == 0xCF)){
//    		break;
//    	}
//    }
	BNO055_Set_PowerMode(handle, BNO055_DATA_PWR_MODE_NORMAL);
 8000876:	2100      	movs	r1, #0
 8000878:	68f8      	ldr	r0, [r7, #12]
 800087a:	f000 f888 	bl	800098e <BNO055_Set_PowerMode>

	BNO055_Set_DataUnit(handle, BNO055_DATA_UNIT_ACC_mG | BNO055_DATA_UNIT_GYR_RPS | BNO055_DATA_UNIT_ORI_AND);
 800087e:	2183      	movs	r1, #131	@ 0x83
 8000880:	68f8      	ldr	r0, [r7, #12]
 8000882:	f000 fc01 	bl	8001088 <BNO055_Set_DataUnit>

	BNO055_Get_DataUnit(handle);
 8000886:	68f8      	ldr	r0, [r7, #12]
 8000888:	f000 fc29 	bl	80010de <BNO055_Get_DataUnit>

	BNO055_Set_ACC_Mode(handle, BNO055_DATA_ACC_RANGE_16G | BNO055_DATA_ACC_BW_7p81Hz |  BNO055_DATA_ACC_MODE_NORMAL);
 800088c:	2103      	movs	r1, #3
 800088e:	68f8      	ldr	r0, [r7, #12]
 8000890:	f000 f8b5 	bl	80009fe <BNO055_Set_ACC_Mode>

	BNO055_Get_ACC_Mode(handle);
 8000894:	68f8      	ldr	r0, [r7, #12]
 8000896:	f000 f8ea 	bl	8000a6e <BNO055_Get_ACC_Mode>

	BNO055_Set_MAG_Mode(handle, BNO055_DATA_MAG_BW_10Hz | BNO055_DATA_MAG_MODE_HIGHACCURACY | BNO055_DATA_MAG_PWRMODE_SUSPEND);
 800089a:	215b      	movs	r1, #91	@ 0x5b
 800089c:	68f8      	ldr	r0, [r7, #12]
 800089e:	f000 f91c 	bl	8000ada <BNO055_Set_MAG_Mode>

	BNO055_Set_GYR_Mode_1(handle, BNO055_DATA_GYR_RANGE_500DPS | BNO055_DATA_GYR_BW_12Hz);
 80008a2:	212a      	movs	r1, #42	@ 0x2a
 80008a4:	68f8      	ldr	r0, [r7, #12]
 80008a6:	f000 f950 	bl	8000b4a <BNO055_Set_GYR_Mode_1>

	BNO055_Set_GYR_Mode_2(handle, BNO055_DATA_GYR_MODE_DEEPSUSPEND);
 80008aa:	2102      	movs	r1, #2
 80008ac:	68f8      	ldr	r0, [r7, #12]
 80008ae:	f000 f984 	bl	8000bba <BNO055_Set_GYR_Mode_2>


	BNO055_Set_OperationMode(handle, BNO055_DATA_OPR_MODE_ACC);
 80008b2:	2101      	movs	r1, #1
 80008b4:	68f8      	ldr	r0, [r7, #12]
 80008b6:	f000 f832 	bl	800091e <BNO055_Set_OperationMode>

	HAL_Delay(100);
 80008ba:	2064      	movs	r0, #100	@ 0x64
 80008bc:	f001 f8ae 	bl	8001a1c <HAL_Delay>
	BNO055_Get_ChipID(handle);
 80008c0:	68f8      	ldr	r0, [r7, #12]
 80008c2:	f000 f9b2 	bl	8000c2a <BNO055_Get_ChipID>
	BNO055_Get_ACC_ID(handle);
 80008c6:	68f8      	ldr	r0, [r7, #12]
 80008c8:	f000 f9f0 	bl	8000cac <BNO055_Get_ACC_ID>
	BNO055_Get_GYR_ID(handle);
 80008cc:	68f8      	ldr	r0, [r7, #12]
 80008ce:	f000 fa2e 	bl	8000d2e <BNO055_Get_GYR_ID>
	BNO055_Get_MAG_ID(handle);
 80008d2:	68f8      	ldr	r0, [r7, #12]
 80008d4:	f000 fa6d 	bl	8000db2 <BNO055_Get_MAG_ID>
}
 80008d8:	bf00      	nop
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <BNO055_Reset>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
void BNO055_Reset(BNO055_Sensor_T *handle){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(handle->ResetPort, handle->ResetPin, RESET);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6858      	ldr	r0, [r3, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	891b      	ldrh	r3, [r3, #8]
 80008f0:	2200      	movs	r2, #0
 80008f2:	4619      	mov	r1, r3
 80008f4:	f001 fb44 	bl	8001f80 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80008f8:	2064      	movs	r0, #100	@ 0x64
 80008fa:	f001 f88f 	bl	8001a1c <HAL_Delay>
	HAL_GPIO_WritePin(handle->ResetPort, handle->ResetPin, SET);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6858      	ldr	r0, [r3, #4]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	891b      	ldrh	r3, [r3, #8]
 8000906:	2201      	movs	r2, #1
 8000908:	4619      	mov	r1, r3
 800090a:	f001 fb39 	bl	8001f80 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800090e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000912:	f001 f883 	bl	8001a1c <HAL_Delay>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <BNO055_Set_OperationMode>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_OperationMode(BNO055_Sensor_T *handle, uint8_t mode){
 800091e:	b580      	push	{r7, lr}
 8000920:	b086      	sub	sp, #24
 8000922:	af02      	add	r7, sp, #8
 8000924:	6078      	str	r0, [r7, #4]
 8000926:	460b      	mov	r3, r1
 8000928:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2], res;
	TxBuff[0] = BNO055_REG_ADDRESS_OPR_MODE;
 800092a:	233d      	movs	r3, #61	@ 0x3d
 800092c:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = mode;
 800092e:	78fb      	ldrb	r3, [r7, #3]
 8000930:	737b      	strb	r3, [r7, #13]

    if(!BNO055_Get_PageID(handle)){
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f000 fc02 	bl	800113c <BNO055_Get_PageID>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d121      	bne.n	8000982 <BNO055_Set_OperationMode+0x64>
    	if(!handle->PageID){
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000944:	2b00      	cmp	r3, #0
 8000946:	d10a      	bne.n	800095e <BNO055_Set_OperationMode+0x40>
    		return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8000948:	f107 010c 	add.w	r1, r7, #12
 800094c:	2300      	movs	r3, #0
 800094e:	9300      	str	r3, [sp, #0]
 8000950:	2300      	movs	r3, #0
 8000952:	2202      	movs	r2, #2
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f000 fc50 	bl	80011fa <BNO055_SendReceive>
 800095a:	4603      	mov	r3, r0
 800095c:	e013      	b.n	8000986 <BNO055_Set_OperationMode+0x68>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0)){
 800095e:	2100      	movs	r1, #0
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f000 fc09 	bl	8001178 <BNO055_Set_PageID>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d10c      	bne.n	8000986 <BNO055_Set_OperationMode+0x68>
    			return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 800096c:	f107 010c 	add.w	r1, r7, #12
 8000970:	2300      	movs	r3, #0
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	2300      	movs	r3, #0
 8000976:	2202      	movs	r2, #2
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f000 fc3e 	bl	80011fa <BNO055_SendReceive>
 800097e:	4603      	mov	r3, r0
 8000980:	e001      	b.n	8000986 <BNO055_Set_OperationMode+0x68>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e7ff      	b.n	8000986 <BNO055_Set_OperationMode+0x68>
    }
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <BNO055_Set_PowerMode>:
}

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_PowerMode(BNO055_Sensor_T *handle, uint8_t mode){
 800098e:	b580      	push	{r7, lr}
 8000990:	b086      	sub	sp, #24
 8000992:	af02      	add	r7, sp, #8
 8000994:	6078      	str	r0, [r7, #4]
 8000996:	460b      	mov	r3, r1
 8000998:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = BNO055_REG_ADDRESS_PWR_MODE;
 800099a:	233e      	movs	r3, #62	@ 0x3e
 800099c:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = mode;
 800099e:	78fb      	ldrb	r3, [r7, #3]
 80009a0:	737b      	strb	r3, [r7, #13]

    if(!BNO055_Get_PageID(handle)){
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f000 fbca 	bl	800113c <BNO055_Get_PageID>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d121      	bne.n	80009f2 <BNO055_Set_PowerMode+0x64>
    	if(!handle->PageID){
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d10a      	bne.n	80009ce <BNO055_Set_PowerMode+0x40>
    		return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 80009b8:	f107 010c 	add.w	r1, r7, #12
 80009bc:	2300      	movs	r3, #0
 80009be:	9300      	str	r3, [sp, #0]
 80009c0:	2300      	movs	r3, #0
 80009c2:	2202      	movs	r2, #2
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f000 fc18 	bl	80011fa <BNO055_SendReceive>
 80009ca:	4603      	mov	r3, r0
 80009cc:	e013      	b.n	80009f6 <BNO055_Set_PowerMode+0x68>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0)){
 80009ce:	2100      	movs	r1, #0
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f000 fbd1 	bl	8001178 <BNO055_Set_PageID>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d10c      	bne.n	80009f6 <BNO055_Set_PowerMode+0x68>
    			return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 80009dc:	f107 010c 	add.w	r1, r7, #12
 80009e0:	2300      	movs	r3, #0
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	2300      	movs	r3, #0
 80009e6:	2202      	movs	r2, #2
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f000 fc06 	bl	80011fa <BNO055_SendReceive>
 80009ee:	4603      	mov	r3, r0
 80009f0:	e001      	b.n	80009f6 <BNO055_Set_PowerMode+0x68>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	e7ff      	b.n	80009f6 <BNO055_Set_PowerMode+0x68>
    }
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <BNO055_Set_ACC_Mode>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_ACC_Mode(BNO055_Sensor_T *handle, uint8_t mode){
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b086      	sub	sp, #24
 8000a02:	af02      	add	r7, sp, #8
 8000a04:	6078      	str	r0, [r7, #4]
 8000a06:	460b      	mov	r3, r1
 8000a08:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = BNO055_REG_ADDRESS_ACC_CONFIG;
 8000a0a:	2308      	movs	r3, #8
 8000a0c:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = mode;
 8000a0e:	78fb      	ldrb	r3, [r7, #3]
 8000a10:	737b      	strb	r3, [r7, #13]

    if(!BNO055_Get_PageID(handle)){
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f000 fb92 	bl	800113c <BNO055_Get_PageID>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d121      	bne.n	8000a62 <BNO055_Set_ACC_Mode+0x64>
    	if(handle->PageID){
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d00a      	beq.n	8000a3e <BNO055_Set_ACC_Mode+0x40>
    		return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8000a28:	f107 010c 	add.w	r1, r7, #12
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	9300      	str	r3, [sp, #0]
 8000a30:	2300      	movs	r3, #0
 8000a32:	2202      	movs	r2, #2
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f000 fbe0 	bl	80011fa <BNO055_SendReceive>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	e013      	b.n	8000a66 <BNO055_Set_ACC_Mode+0x68>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_1)){
 8000a3e:	2101      	movs	r1, #1
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f000 fb99 	bl	8001178 <BNO055_Set_PageID>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d10c      	bne.n	8000a66 <BNO055_Set_ACC_Mode+0x68>
    			return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8000a4c:	f107 010c 	add.w	r1, r7, #12
 8000a50:	2300      	movs	r3, #0
 8000a52:	9300      	str	r3, [sp, #0]
 8000a54:	2300      	movs	r3, #0
 8000a56:	2202      	movs	r2, #2
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f000 fbce 	bl	80011fa <BNO055_SendReceive>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	e001      	b.n	8000a66 <BNO055_Set_ACC_Mode+0x68>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e7ff      	b.n	8000a66 <BNO055_Set_ACC_Mode+0x68>
    }
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <BNO055_Get_ACC_Mode>:


/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_ACC_Mode(BNO055_Sensor_T *handle){
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b086      	sub	sp, #24
 8000a72:	af02      	add	r7, sp, #8
 8000a74:	6078      	str	r0, [r7, #4]
	uint8_t TxBuff[1], RxBuff[1];
	TxBuff[0] = BNO055_REG_ADDRESS_ACC_CONFIG;
 8000a76:	2308      	movs	r3, #8
 8000a78:	733b      	strb	r3, [r7, #12]

    if(!BNO055_Get_PageID(handle)){
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f000 fb5e 	bl	800113c <BNO055_Get_PageID>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d123      	bne.n	8000ace <BNO055_Get_ACC_Mode+0x60>
    	if(handle->PageID){
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d00b      	beq.n	8000aa8 <BNO055_Get_ACC_Mode+0x3a>
    		return BNO055_SendReceive(handle,TxBuff, 1, RxBuff, 1);
 8000a90:	f107 0308 	add.w	r3, r7, #8
 8000a94:	f107 010c 	add.w	r1, r7, #12
 8000a98:	2201      	movs	r2, #1
 8000a9a:	9200      	str	r2, [sp, #0]
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f000 fbab 	bl	80011fa <BNO055_SendReceive>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	e014      	b.n	8000ad2 <BNO055_Get_ACC_Mode+0x64>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_1)){
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f000 fb64 	bl	8001178 <BNO055_Set_PageID>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d10d      	bne.n	8000ad2 <BNO055_Get_ACC_Mode+0x64>
    			return BNO055_SendReceive(handle,TxBuff, 1, RxBuff, 1);
 8000ab6:	f107 0308 	add.w	r3, r7, #8
 8000aba:	f107 010c 	add.w	r1, r7, #12
 8000abe:	2201      	movs	r2, #1
 8000ac0:	9200      	str	r2, [sp, #0]
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f000 fb98 	bl	80011fa <BNO055_SendReceive>
 8000aca:	4603      	mov	r3, r0
 8000acc:	e001      	b.n	8000ad2 <BNO055_Get_ACC_Mode+0x64>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e7ff      	b.n	8000ad2 <BNO055_Get_ACC_Mode+0x64>
    }
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <BNO055_Set_MAG_Mode>:


/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_MAG_Mode(BNO055_Sensor_T *handle, uint8_t mode){
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b086      	sub	sp, #24
 8000ade:	af02      	add	r7, sp, #8
 8000ae0:	6078      	str	r0, [r7, #4]
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = BNO055_REG_ADDRESS_MAG_CONFIG;
 8000ae6:	2309      	movs	r3, #9
 8000ae8:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = mode;
 8000aea:	78fb      	ldrb	r3, [r7, #3]
 8000aec:	737b      	strb	r3, [r7, #13]

    if(!BNO055_Get_PageID(handle)){
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f000 fb24 	bl	800113c <BNO055_Get_PageID>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d121      	bne.n	8000b3e <BNO055_Set_MAG_Mode+0x64>
    	if(handle->PageID){
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d00a      	beq.n	8000b1a <BNO055_Set_MAG_Mode+0x40>
    		return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8000b04:	f107 010c 	add.w	r1, r7, #12
 8000b08:	2300      	movs	r3, #0
 8000b0a:	9300      	str	r3, [sp, #0]
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	2202      	movs	r2, #2
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f000 fb72 	bl	80011fa <BNO055_SendReceive>
 8000b16:	4603      	mov	r3, r0
 8000b18:	e013      	b.n	8000b42 <BNO055_Set_MAG_Mode+0x68>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_1)){
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f000 fb2b 	bl	8001178 <BNO055_Set_PageID>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d10c      	bne.n	8000b42 <BNO055_Set_MAG_Mode+0x68>
    			return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8000b28:	f107 010c 	add.w	r1, r7, #12
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	2300      	movs	r3, #0
 8000b32:	2202      	movs	r2, #2
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f000 fb60 	bl	80011fa <BNO055_SendReceive>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	e001      	b.n	8000b42 <BNO055_Set_MAG_Mode+0x68>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e7ff      	b.n	8000b42 <BNO055_Set_MAG_Mode+0x68>
    }
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <BNO055_Set_GYR_Mode_1>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_GYR_Mode_1(BNO055_Sensor_T *handle, uint8_t mode){
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b086      	sub	sp, #24
 8000b4e:	af02      	add	r7, sp, #8
 8000b50:	6078      	str	r0, [r7, #4]
 8000b52:	460b      	mov	r3, r1
 8000b54:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = BNO055_REG_ADDRESS_GYR_CONFIG_1;
 8000b56:	230a      	movs	r3, #10
 8000b58:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = mode;
 8000b5a:	78fb      	ldrb	r3, [r7, #3]
 8000b5c:	737b      	strb	r3, [r7, #13]

    if(!BNO055_Get_PageID(handle)){
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f000 faec 	bl	800113c <BNO055_Get_PageID>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d121      	bne.n	8000bae <BNO055_Set_GYR_Mode_1+0x64>
    	if(handle->PageID){
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d00a      	beq.n	8000b8a <BNO055_Set_GYR_Mode_1+0x40>
    		return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8000b74:	f107 010c 	add.w	r1, r7, #12
 8000b78:	2300      	movs	r3, #0
 8000b7a:	9300      	str	r3, [sp, #0]
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	2202      	movs	r2, #2
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f000 fb3a 	bl	80011fa <BNO055_SendReceive>
 8000b86:	4603      	mov	r3, r0
 8000b88:	e013      	b.n	8000bb2 <BNO055_Set_GYR_Mode_1+0x68>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_1)){
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f000 faf3 	bl	8001178 <BNO055_Set_PageID>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d10c      	bne.n	8000bb2 <BNO055_Set_GYR_Mode_1+0x68>
    			return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8000b98:	f107 010c 	add.w	r1, r7, #12
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	9300      	str	r3, [sp, #0]
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	2202      	movs	r2, #2
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f000 fb28 	bl	80011fa <BNO055_SendReceive>
 8000baa:	4603      	mov	r3, r0
 8000bac:	e001      	b.n	8000bb2 <BNO055_Set_GYR_Mode_1+0x68>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e7ff      	b.n	8000bb2 <BNO055_Set_GYR_Mode_1+0x68>
    }
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <BNO055_Set_GYR_Mode_2>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_GYR_Mode_2(BNO055_Sensor_T *handle, uint8_t mode){
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b086      	sub	sp, #24
 8000bbe:	af02      	add	r7, sp, #8
 8000bc0:	6078      	str	r0, [r7, #4]
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = BNO055_REG_ADDRESS_GYR_CONFIG_2;
 8000bc6:	230b      	movs	r3, #11
 8000bc8:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = mode;
 8000bca:	78fb      	ldrb	r3, [r7, #3]
 8000bcc:	737b      	strb	r3, [r7, #13]

    if(!BNO055_Get_PageID(handle)){
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f000 fab4 	bl	800113c <BNO055_Get_PageID>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d121      	bne.n	8000c1e <BNO055_Set_GYR_Mode_2+0x64>
    	if(handle->PageID){
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d00a      	beq.n	8000bfa <BNO055_Set_GYR_Mode_2+0x40>
    		return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8000be4:	f107 010c 	add.w	r1, r7, #12
 8000be8:	2300      	movs	r3, #0
 8000bea:	9300      	str	r3, [sp, #0]
 8000bec:	2300      	movs	r3, #0
 8000bee:	2202      	movs	r2, #2
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f000 fb02 	bl	80011fa <BNO055_SendReceive>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	e013      	b.n	8000c22 <BNO055_Set_GYR_Mode_2+0x68>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_1)){
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f000 fabb 	bl	8001178 <BNO055_Set_PageID>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d10c      	bne.n	8000c22 <BNO055_Set_GYR_Mode_2+0x68>
    			return BNO055_SendReceive(handle,TxBuff, 2, 0, 0);
 8000c08:	f107 010c 	add.w	r1, r7, #12
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	2300      	movs	r3, #0
 8000c12:	2202      	movs	r2, #2
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f000 faf0 	bl	80011fa <BNO055_SendReceive>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	e001      	b.n	8000c22 <BNO055_Set_GYR_Mode_2+0x68>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e7ff      	b.n	8000c22 <BNO055_Set_GYR_Mode_2+0x68>
    }
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <BNO055_Get_ChipID>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_ChipID(BNO055_Sensor_T *handle){
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b086      	sub	sp, #24
 8000c2e:	af02      	add	r7, sp, #8
 8000c30:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[1];
	BNO055_ReturnTypeDef_T res= BNO055_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	73fb      	strb	r3, [r7, #15]
	Txbuff[0] = BNO055_REG_ADDRESS_CHIP_ID;
 8000c36:	2300      	movs	r3, #0
 8000c38:	733b      	strb	r3, [r7, #12]

    if(!BNO055_Get_PageID(handle)){
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f000 fa7e 	bl	800113c <BNO055_Get_PageID>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d125      	bne.n	8000c92 <BNO055_Get_ChipID+0x68>
    	if(!handle->PageID){
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d10c      	bne.n	8000c6a <BNO055_Get_ChipID+0x40>
    		res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 8000c50:	f107 0308 	add.w	r3, r7, #8
 8000c54:	f107 010c 	add.w	r1, r7, #12
 8000c58:	2201      	movs	r2, #1
 8000c5a:	9200      	str	r2, [sp, #0]
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f000 facb 	bl	80011fa <BNO055_SendReceive>
 8000c64:	4603      	mov	r3, r0
 8000c66:	73fb      	strb	r3, [r7, #15]
 8000c68:	e015      	b.n	8000c96 <BNO055_Get_ChipID+0x6c>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0)){
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f000 fa83 	bl	8001178 <BNO055_Set_PageID>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d10e      	bne.n	8000c96 <BNO055_Get_ChipID+0x6c>
    			res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 8000c78:	f107 0308 	add.w	r3, r7, #8
 8000c7c:	f107 010c 	add.w	r1, r7, #12
 8000c80:	2201      	movs	r2, #1
 8000c82:	9200      	str	r2, [sp, #0]
 8000c84:	2201      	movs	r2, #1
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f000 fab7 	bl	80011fa <BNO055_SendReceive>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	73fb      	strb	r3, [r7, #15]
 8000c90:	e001      	b.n	8000c96 <BNO055_Get_ChipID+0x6c>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e006      	b.n	8000ca4 <BNO055_Get_ChipID+0x7a>
    }

    if(!res)
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d102      	bne.n	8000ca2 <BNO055_Get_ChipID+0x78>
     	handle->IDs.CHIP_ID = RxBuff[0];
 8000c9c:	7a3a      	ldrb	r2, [r7, #8]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	779a      	strb	r2, [r3, #30]

     return res;
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <BNO055_Get_ACC_ID>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_ACC_ID(BNO055_Sensor_T *handle){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af02      	add	r7, sp, #8
 8000cb2:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[1];
	BNO055_ReturnTypeDef_T res= BNO055_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	73fb      	strb	r3, [r7, #15]
	Txbuff[0] = BNO055_REG_ADDRESS_ACC_ID;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	733b      	strb	r3, [r7, #12]

    if(!BNO055_Get_PageID(handle)){
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f000 fa3d 	bl	800113c <BNO055_Get_PageID>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d125      	bne.n	8000d14 <BNO055_Get_ACC_ID+0x68>
    	if(!handle->PageID){
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d10c      	bne.n	8000cec <BNO055_Get_ACC_ID+0x40>
    		res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 8000cd2:	f107 0308 	add.w	r3, r7, #8
 8000cd6:	f107 010c 	add.w	r1, r7, #12
 8000cda:	2201      	movs	r2, #1
 8000cdc:	9200      	str	r2, [sp, #0]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f000 fa8a 	bl	80011fa <BNO055_SendReceive>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	73fb      	strb	r3, [r7, #15]
 8000cea:	e015      	b.n	8000d18 <BNO055_Get_ACC_ID+0x6c>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0)){
 8000cec:	2100      	movs	r1, #0
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f000 fa42 	bl	8001178 <BNO055_Set_PageID>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d10e      	bne.n	8000d18 <BNO055_Get_ACC_ID+0x6c>
    			res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 8000cfa:	f107 0308 	add.w	r3, r7, #8
 8000cfe:	f107 010c 	add.w	r1, r7, #12
 8000d02:	2201      	movs	r2, #1
 8000d04:	9200      	str	r2, [sp, #0]
 8000d06:	2201      	movs	r2, #1
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f000 fa76 	bl	80011fa <BNO055_SendReceive>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	73fb      	strb	r3, [r7, #15]
 8000d12:	e001      	b.n	8000d18 <BNO055_Get_ACC_ID+0x6c>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	e006      	b.n	8000d26 <BNO055_Get_ACC_ID+0x7a>
    }

    if(!res)
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d102      	bne.n	8000d24 <BNO055_Get_ACC_ID+0x78>
     	handle->IDs.ACC_ID = RxBuff[0];
 8000d1e:	7a3a      	ldrb	r2, [r7, #8]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	77da      	strb	r2, [r3, #31]

     return res;
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <BNO055_Get_GYR_ID>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_GYR_ID(BNO055_Sensor_T *handle){
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b086      	sub	sp, #24
 8000d32:	af02      	add	r7, sp, #8
 8000d34:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[1];
	BNO055_ReturnTypeDef_T res= BNO055_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	73fb      	strb	r3, [r7, #15]
	Txbuff[0] = BNO055_REG_ADDRESS_GYR_ID;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	733b      	strb	r3, [r7, #12]

    if(!BNO055_Get_PageID(handle)){
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f000 f9fc 	bl	800113c <BNO055_Get_PageID>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d125      	bne.n	8000d96 <BNO055_Get_GYR_ID+0x68>
    	if(!handle->PageID){
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d10c      	bne.n	8000d6e <BNO055_Get_GYR_ID+0x40>
    		res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 8000d54:	f107 0308 	add.w	r3, r7, #8
 8000d58:	f107 010c 	add.w	r1, r7, #12
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	9200      	str	r2, [sp, #0]
 8000d60:	2201      	movs	r2, #1
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f000 fa49 	bl	80011fa <BNO055_SendReceive>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	73fb      	strb	r3, [r7, #15]
 8000d6c:	e015      	b.n	8000d9a <BNO055_Get_GYR_ID+0x6c>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0)){
 8000d6e:	2100      	movs	r1, #0
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f000 fa01 	bl	8001178 <BNO055_Set_PageID>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d10e      	bne.n	8000d9a <BNO055_Get_GYR_ID+0x6c>
    			res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 8000d7c:	f107 0308 	add.w	r3, r7, #8
 8000d80:	f107 010c 	add.w	r1, r7, #12
 8000d84:	2201      	movs	r2, #1
 8000d86:	9200      	str	r2, [sp, #0]
 8000d88:	2201      	movs	r2, #1
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f000 fa35 	bl	80011fa <BNO055_SendReceive>
 8000d90:	4603      	mov	r3, r0
 8000d92:	73fb      	strb	r3, [r7, #15]
 8000d94:	e001      	b.n	8000d9a <BNO055_Get_GYR_ID+0x6c>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e007      	b.n	8000daa <BNO055_Get_GYR_ID+0x7c>
    }

    if(!res)
 8000d9a:	7bfb      	ldrb	r3, [r7, #15]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d103      	bne.n	8000da8 <BNO055_Get_GYR_ID+0x7a>
    	handle->IDs.GYR_ID = RxBuff[0];
 8000da0:	7a3a      	ldrb	r2, [r7, #8]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    return res;
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <BNO055_Get_MAG_ID>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_MAG_ID(BNO055_Sensor_T *handle){
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b086      	sub	sp, #24
 8000db6:	af02      	add	r7, sp, #8
 8000db8:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[1];
	BNO055_ReturnTypeDef_T res= BNO055_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	73fb      	strb	r3, [r7, #15]
	Txbuff[0] = BNO055_REG_ADDRESS_MAG_ID;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	733b      	strb	r3, [r7, #12]

    if(!BNO055_Get_PageID(handle)){
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f000 f9ba 	bl	800113c <BNO055_Get_PageID>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d125      	bne.n	8000e1a <BNO055_Get_MAG_ID+0x68>
    	if(!handle->PageID){
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d10c      	bne.n	8000df2 <BNO055_Get_MAG_ID+0x40>
    		res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 8000dd8:	f107 0308 	add.w	r3, r7, #8
 8000ddc:	f107 010c 	add.w	r1, r7, #12
 8000de0:	2201      	movs	r2, #1
 8000de2:	9200      	str	r2, [sp, #0]
 8000de4:	2201      	movs	r2, #1
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f000 fa07 	bl	80011fa <BNO055_SendReceive>
 8000dec:	4603      	mov	r3, r0
 8000dee:	73fb      	strb	r3, [r7, #15]
 8000df0:	e015      	b.n	8000e1e <BNO055_Get_MAG_ID+0x6c>
    	}else{
    		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0)){
 8000df2:	2100      	movs	r1, #0
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f000 f9bf 	bl	8001178 <BNO055_Set_PageID>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d10e      	bne.n	8000e1e <BNO055_Get_MAG_ID+0x6c>
    			res = BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 1);
 8000e00:	f107 0308 	add.w	r3, r7, #8
 8000e04:	f107 010c 	add.w	r1, r7, #12
 8000e08:	2201      	movs	r2, #1
 8000e0a:	9200      	str	r2, [sp, #0]
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f000 f9f3 	bl	80011fa <BNO055_SendReceive>
 8000e14:	4603      	mov	r3, r0
 8000e16:	73fb      	strb	r3, [r7, #15]
 8000e18:	e001      	b.n	8000e1e <BNO055_Get_MAG_ID+0x6c>
    		}
    	}
    }else{
    	return BNO055_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e007      	b.n	8000e2e <BNO055_Get_MAG_ID+0x7c>
    }

    if(!res)
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d103      	bne.n	8000e2c <BNO055_Get_MAG_ID+0x7a>
        handle->IDs.MAG_ID = RxBuff[0];
 8000e24:	7a3a      	ldrb	r2, [r7, #8]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f883 2020 	strb.w	r2, [r3, #32]

    return res;
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <BNO055_Get_ACC_Data>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_ACC_Data(BNO055_Sensor_T *handle){
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b088      	sub	sp, #32
 8000e3a:	af02      	add	r7, sp, #8
 8000e3c:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[6];
	BNO055_ReturnTypeDef_T res = BNO055_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	75fb      	strb	r3, [r7, #23]
	Txbuff[0] = BNO055_REG_ADDRESS_ACC_X_DATA_LSB;
 8000e42:	2308      	movs	r3, #8
 8000e44:	753b      	strb	r3, [r7, #20]

	BNO055_Get_PageID(handle);
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f000 f978 	bl	800113c <BNO055_Get_PageID>
	if(!handle->PageID)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d10c      	bne.n	8000e70 <BNO055_Get_ACC_Data+0x3a>
		res =BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 6);
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	f107 0114 	add.w	r1, r7, #20
 8000e5e:	2206      	movs	r2, #6
 8000e60:	9200      	str	r2, [sp, #0]
 8000e62:	2201      	movs	r2, #1
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f000 f9c8 	bl	80011fa <BNO055_SendReceive>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	75fb      	strb	r3, [r7, #23]
 8000e6e:	e012      	b.n	8000e96 <BNO055_Get_ACC_Data+0x60>
	else{
		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0))
 8000e70:	2100      	movs	r1, #0
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f000 f980 	bl	8001178 <BNO055_Set_PageID>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d10b      	bne.n	8000e96 <BNO055_Get_ACC_Data+0x60>
			res =BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 6);
 8000e7e:	f107 030c 	add.w	r3, r7, #12
 8000e82:	f107 0114 	add.w	r1, r7, #20
 8000e86:	2206      	movs	r2, #6
 8000e88:	9200      	str	r2, [sp, #0]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f000 f9b4 	bl	80011fa <BNO055_SendReceive>
 8000e92:	4603      	mov	r3, r0
 8000e94:	75fb      	strb	r3, [r7, #23]
	}
	if(!res){
 8000e96:	7dfb      	ldrb	r3, [r7, #23]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d14a      	bne.n	8000f32 <BNO055_Get_ACC_Data+0xfc>
		if(!(RxBuff[1]>>7)){
 8000e9c:	7b7b      	ldrb	r3, [r7, #13]
 8000e9e:	b25b      	sxtb	r3, r3
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	db0b      	blt.n	8000ebc <BNO055_Get_ACC_Data+0x86>
			if( ((RxBuff[1]>>6)&(0x01)) ){
 8000ea4:	7b7b      	ldrb	r3, [r7, #13]
 8000ea6:	099b      	lsrs	r3, r3, #6
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d004      	beq.n	8000ebc <BNO055_Get_ACC_Data+0x86>
				RxBuff[1] |= 0x80;
 8000eb2:	7b7b      	ldrb	r3, [r7, #13]
 8000eb4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	737b      	strb	r3, [r7, #13]
			}
		}
		if(!(RxBuff[3]>>7)){
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	b25b      	sxtb	r3, r3
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	db0b      	blt.n	8000edc <BNO055_Get_ACC_Data+0xa6>
			if( ((RxBuff[3]>>6)&(0x01)) ){
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	099b      	lsrs	r3, r3, #6
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d004      	beq.n	8000edc <BNO055_Get_ACC_Data+0xa6>
				RxBuff[3] |= 0x80;
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	73fb      	strb	r3, [r7, #15]
			}
		}
		if(!(RxBuff[5]>>7)){
 8000edc:	7c7b      	ldrb	r3, [r7, #17]
 8000ede:	b25b      	sxtb	r3, r3
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	db0b      	blt.n	8000efc <BNO055_Get_ACC_Data+0xc6>
			if( ((RxBuff[5]>>6)&(0x01)) ){
 8000ee4:	7c7b      	ldrb	r3, [r7, #17]
 8000ee6:	099b      	lsrs	r3, r3, #6
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d004      	beq.n	8000efc <BNO055_Get_ACC_Data+0xc6>
				RxBuff[5] |= 0x80;
 8000ef2:	7c7b      	ldrb	r3, [r7, #17]
 8000ef4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	747b      	strb	r3, [r7, #17]
			}
		}
		handle->ImuData.ACC_X = (int16_t)((int16_t)(RxBuff[1]<<8) | RxBuff[0]);
 8000efc:	7b7b      	ldrb	r3, [r7, #13]
 8000efe:	021b      	lsls	r3, r3, #8
 8000f00:	b21a      	sxth	r2, r3
 8000f02:	7b3b      	ldrb	r3, [r7, #12]
 8000f04:	b21b      	sxth	r3, r3
 8000f06:	4313      	orrs	r3, r2
 8000f08:	b21a      	sxth	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	819a      	strh	r2, [r3, #12]
		handle->ImuData.ACC_Y = (int16_t)((int16_t)(RxBuff[3]<<8) | RxBuff[2]);
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	021b      	lsls	r3, r3, #8
 8000f12:	b21a      	sxth	r2, r3
 8000f14:	7bbb      	ldrb	r3, [r7, #14]
 8000f16:	b21b      	sxth	r3, r3
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	b21a      	sxth	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	81da      	strh	r2, [r3, #14]
		handle->ImuData.ACC_Z = (int16_t)((int16_t)(RxBuff[5]<<8) | RxBuff[4]);
 8000f20:	7c7b      	ldrb	r3, [r7, #17]
 8000f22:	021b      	lsls	r3, r3, #8
 8000f24:	b21a      	sxth	r2, r3
 8000f26:	7c3b      	ldrb	r3, [r7, #16]
 8000f28:	b21b      	sxth	r3, r3
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	b21a      	sxth	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	821a      	strh	r2, [r3, #16]
	}
	return res;
 8000f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <BNO055_Get_MAG_Data>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_MAG_Data(BNO055_Sensor_T *handle){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af02      	add	r7, sp, #8
 8000f42:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[6];
	BNO055_ReturnTypeDef_T res = BNO055_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	75fb      	strb	r3, [r7, #23]
	Txbuff[0] = BNO055_REG_ADDRESS_MAG_X_DATA_LSB;
 8000f48:	230e      	movs	r3, #14
 8000f4a:	753b      	strb	r3, [r7, #20]

	BNO055_Get_PageID(handle);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f000 f8f5 	bl	800113c <BNO055_Get_PageID>
	if(!handle->PageID)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d10c      	bne.n	8000f76 <BNO055_Get_MAG_Data+0x3a>
		res =BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 6);
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	f107 0114 	add.w	r1, r7, #20
 8000f64:	2206      	movs	r2, #6
 8000f66:	9200      	str	r2, [sp, #0]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f000 f945 	bl	80011fa <BNO055_SendReceive>
 8000f70:	4603      	mov	r3, r0
 8000f72:	75fb      	strb	r3, [r7, #23]
 8000f74:	e012      	b.n	8000f9c <BNO055_Get_MAG_Data+0x60>
	else{
		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0))
 8000f76:	2100      	movs	r1, #0
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f000 f8fd 	bl	8001178 <BNO055_Set_PageID>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d10b      	bne.n	8000f9c <BNO055_Get_MAG_Data+0x60>
			res =BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 6);
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	f107 0114 	add.w	r1, r7, #20
 8000f8c:	2206      	movs	r2, #6
 8000f8e:	9200      	str	r2, [sp, #0]
 8000f90:	2201      	movs	r2, #1
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f000 f931 	bl	80011fa <BNO055_SendReceive>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	75fb      	strb	r3, [r7, #23]
	}

	if(!res){
 8000f9c:	7dfb      	ldrb	r3, [r7, #23]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d11a      	bne.n	8000fd8 <BNO055_Get_MAG_Data+0x9c>
		handle->ImuData.MAG_X = (RxBuff[0] | (RxBuff[1]<<8));
 8000fa2:	7b3b      	ldrb	r3, [r7, #12]
 8000fa4:	b21a      	sxth	r2, r3
 8000fa6:	7b7b      	ldrb	r3, [r7, #13]
 8000fa8:	021b      	lsls	r3, r3, #8
 8000faa:	b21b      	sxth	r3, r3
 8000fac:	4313      	orrs	r3, r2
 8000fae:	b21a      	sxth	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	831a      	strh	r2, [r3, #24]
		handle->ImuData.MAG_Y = (RxBuff[2] | (RxBuff[3]<<8));
 8000fb4:	7bbb      	ldrb	r3, [r7, #14]
 8000fb6:	b21a      	sxth	r2, r3
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	b21a      	sxth	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	835a      	strh	r2, [r3, #26]
		handle->ImuData.MAG_Z = (RxBuff[4] | (RxBuff[5]<<8));
 8000fc6:	7c3b      	ldrb	r3, [r7, #16]
 8000fc8:	b21a      	sxth	r2, r3
 8000fca:	7c7b      	ldrb	r3, [r7, #17]
 8000fcc:	021b      	lsls	r3, r3, #8
 8000fce:	b21b      	sxth	r3, r3
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	b21a      	sxth	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	839a      	strh	r2, [r3, #28]
	}
	return res;
 8000fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <BNO055_Get_GYR_Data>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_GYR_Data(BNO055_Sensor_T *handle){
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b088      	sub	sp, #32
 8000fe6:	af02      	add	r7, sp, #8
 8000fe8:	6078      	str	r0, [r7, #4]
	uint8_t Txbuff[1], RxBuff[6];
	BNO055_ReturnTypeDef_T res = BNO055_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	75fb      	strb	r3, [r7, #23]
	Txbuff[0] = BNO055_REG_ADDRESS_GYR_X_DATA_LSB;
 8000fee:	2314      	movs	r3, #20
 8000ff0:	753b      	strb	r3, [r7, #20]

	BNO055_Get_PageID(handle);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f000 f8a2 	bl	800113c <BNO055_Get_PageID>
	if(!handle->PageID)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d10c      	bne.n	800101c <BNO055_Get_GYR_Data+0x3a>
		res =BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 6);
 8001002:	f107 030c 	add.w	r3, r7, #12
 8001006:	f107 0114 	add.w	r1, r7, #20
 800100a:	2206      	movs	r2, #6
 800100c:	9200      	str	r2, [sp, #0]
 800100e:	2201      	movs	r2, #1
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f000 f8f2 	bl	80011fa <BNO055_SendReceive>
 8001016:	4603      	mov	r3, r0
 8001018:	75fb      	strb	r3, [r7, #23]
 800101a:	e012      	b.n	8001042 <BNO055_Get_GYR_Data+0x60>
	else{
		if(!BNO055_Set_PageID(handle, BNO055_PAGE_ID_0))
 800101c:	2100      	movs	r1, #0
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f000 f8aa 	bl	8001178 <BNO055_Set_PageID>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d10b      	bne.n	8001042 <BNO055_Get_GYR_Data+0x60>
			res =BNO055_SendReceive(handle,Txbuff, 1, RxBuff, 6);
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	f107 0114 	add.w	r1, r7, #20
 8001032:	2206      	movs	r2, #6
 8001034:	9200      	str	r2, [sp, #0]
 8001036:	2201      	movs	r2, #1
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 f8de 	bl	80011fa <BNO055_SendReceive>
 800103e:	4603      	mov	r3, r0
 8001040:	75fb      	strb	r3, [r7, #23]
		}

	if(!res){
 8001042:	7dfb      	ldrb	r3, [r7, #23]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d11a      	bne.n	800107e <BNO055_Get_GYR_Data+0x9c>
		handle->ImuData.GYR_X = (RxBuff[0] | (RxBuff[1]<<8));
 8001048:	7b3b      	ldrb	r3, [r7, #12]
 800104a:	b21a      	sxth	r2, r3
 800104c:	7b7b      	ldrb	r3, [r7, #13]
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	b21b      	sxth	r3, r3
 8001052:	4313      	orrs	r3, r2
 8001054:	b21a      	sxth	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	825a      	strh	r2, [r3, #18]
		handle->ImuData.GYR_Y = (RxBuff[2] | (RxBuff[3]<<8));
 800105a:	7bbb      	ldrb	r3, [r7, #14]
 800105c:	b21a      	sxth	r2, r3
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	021b      	lsls	r3, r3, #8
 8001062:	b21b      	sxth	r3, r3
 8001064:	4313      	orrs	r3, r2
 8001066:	b21a      	sxth	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	829a      	strh	r2, [r3, #20]
		handle->ImuData.GYR_Z = (RxBuff[4] | (RxBuff[5]<<8));
 800106c:	7c3b      	ldrb	r3, [r7, #16]
 800106e:	b21a      	sxth	r2, r3
 8001070:	7c7b      	ldrb	r3, [r7, #17]
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	b21b      	sxth	r3, r3
 8001076:	4313      	orrs	r3, r2
 8001078:	b21a      	sxth	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	82da      	strh	r2, [r3, #22]
	}
		return res;
 800107e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <BNO055_Set_DataUnit>:
}

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_DataUnit(BNO055_Sensor_T *handle, uint8_t data){
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af02      	add	r7, sp, #8
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = 0x3B;
 8001094:	233b      	movs	r3, #59	@ 0x3b
 8001096:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = data;
 8001098:	78fb      	ldrb	r3, [r7, #3]
 800109a:	737b      	strb	r3, [r7, #13]

	BNO055_Get_PageID(handle);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f000 f84d 	bl	800113c <BNO055_Get_PageID>
	if(handle->PageID){
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d003      	beq.n	80010b4 <BNO055_Set_DataUnit+0x2c>
		BNO055_Set_PageID(handle, BNO055_PAGE_ID_0);
 80010ac:	2100      	movs	r1, #0
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f000 f862 	bl	8001178 <BNO055_Set_PageID>
	}

	if(!handle->PageID){
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d10a      	bne.n	80010d4 <BNO055_Set_DataUnit+0x4c>
		return BNO055_SendReceive(handle, TxBuff, 2, 0, 0);
 80010be:	f107 010c 	add.w	r1, r7, #12
 80010c2:	2300      	movs	r3, #0
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2300      	movs	r3, #0
 80010c8:	2202      	movs	r2, #2
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f000 f895 	bl	80011fa <BNO055_SendReceive>
 80010d0:	4603      	mov	r3, r0
 80010d2:	e000      	b.n	80010d6 <BNO055_Set_DataUnit+0x4e>
	}
	return BNO055_ERROR;
 80010d4:	2301      	movs	r3, #1
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <BNO055_Get_DataUnit>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_DataUnit(BNO055_Sensor_T *handle){
 80010de:	b580      	push	{r7, lr}
 80010e0:	b086      	sub	sp, #24
 80010e2:	af02      	add	r7, sp, #8
 80010e4:	6078      	str	r0, [r7, #4]
	uint8_t TxBuff[1], RxBuff[1];
	TxBuff[0] = 0x3B;
 80010e6:	233b      	movs	r3, #59	@ 0x3b
 80010e8:	733b      	strb	r3, [r7, #12]

	BNO055_Get_PageID(handle);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f000 f826 	bl	800113c <BNO055_Get_PageID>
	if(handle->PageID){
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <BNO055_Get_DataUnit+0x24>
		BNO055_Set_PageID(handle, BNO055_PAGE_ID_0);
 80010fa:	2100      	movs	r1, #0
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f000 f83b 	bl	8001178 <BNO055_Set_PageID>
	}
	if(!handle->PageID){
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001108:	2b00      	cmp	r3, #0
 800110a:	d112      	bne.n	8001132 <BNO055_Get_DataUnit+0x54>
		if(!BNO055_SendReceive(handle, TxBuff, 1, RxBuff, 1)){
 800110c:	f107 0308 	add.w	r3, r7, #8
 8001110:	f107 010c 	add.w	r1, r7, #12
 8001114:	2201      	movs	r2, #1
 8001116:	9200      	str	r2, [sp, #0]
 8001118:	2201      	movs	r2, #1
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 f86d 	bl	80011fa <BNO055_SendReceive>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d105      	bne.n	8001132 <BNO055_Get_DataUnit+0x54>
			handle->UnitStat = RxBuff[0];
 8001126:	7a3a      	ldrb	r2, [r7, #8]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			return BNO055_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	e000      	b.n	8001134 <BNO055_Get_DataUnit+0x56>
		}
	}
	return BNO055_ERROR;
 8001132:	2301      	movs	r3, #1

}
 8001134:	4618      	mov	r0, r3
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <BNO055_Get_PageID>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_PageID(BNO055_Sensor_T *handle){
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af02      	add	r7, sp, #8
 8001142:	6078      	str	r0, [r7, #4]
	uint8_t TxBuff[1], RxBuff[1];
	TxBuff[0] = 0x07;
 8001144:	2307      	movs	r3, #7
 8001146:	733b      	strb	r3, [r7, #12]
	if(BNO055_SendReceive(handle, TxBuff, 1, RxBuff, 1))
 8001148:	f107 0308 	add.w	r3, r7, #8
 800114c:	f107 010c 	add.w	r1, r7, #12
 8001150:	2201      	movs	r2, #1
 8001152:	9200      	str	r2, [sp, #0]
 8001154:	2201      	movs	r2, #1
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f000 f84f 	bl	80011fa <BNO055_SendReceive>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <BNO055_Get_PageID+0x2a>
		return BNO055_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e004      	b.n	8001170 <BNO055_Get_PageID+0x34>
	else
		handle->PageID = RxBuff[0];
 8001166:	7a3a      	ldrb	r2, [r7, #8]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	return BNO055_OK;
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <BNO055_Set_PageID>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Set_PageID(BNO055_Sensor_T *handle, uint8_t PageID){
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af02      	add	r7, sp, #8
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuff[2];
	TxBuff[0] = 0x07;
 8001184:	2307      	movs	r3, #7
 8001186:	733b      	strb	r3, [r7, #12]
	TxBuff[1] = PageID;
 8001188:	78fb      	ldrb	r3, [r7, #3]
 800118a:	737b      	strb	r3, [r7, #13]
	if(BNO055_SendReceive(handle, TxBuff, 2, 0, 0))
 800118c:	f107 010c 	add.w	r1, r7, #12
 8001190:	2300      	movs	r3, #0
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2300      	movs	r3, #0
 8001196:	2202      	movs	r2, #2
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f000 f82e 	bl	80011fa <BNO055_SendReceive>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <BNO055_Set_PageID+0x30>
		return BNO055_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e006      	b.n	80011b6 <BNO055_Set_PageID+0x3e>
	else{
		HAL_Delay(5);
 80011a8:	2005      	movs	r0, #5
 80011aa:	f000 fc37 	bl	8001a1c <HAL_Delay>
		BNO055_Get_PageID(handle);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff ffc4 	bl	800113c <BNO055_Get_PageID>
		return BNO055_OK;
 80011b4:	2300      	movs	r3, #0
	}
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <BNO055_Get_SysError>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_Get_SysError(BNO055_Sensor_T *handle){
 80011be:	b580      	push	{r7, lr}
 80011c0:	b086      	sub	sp, #24
 80011c2:	af02      	add	r7, sp, #8
 80011c4:	6078      	str	r0, [r7, #4]
	uint8_t TxBuff[1], RxBuff[1];
	TxBuff[0] = 0x3A;
 80011c6:	233a      	movs	r3, #58	@ 0x3a
 80011c8:	733b      	strb	r3, [r7, #12]
	if(BNO055_SendReceive(handle, TxBuff, 1, RxBuff, 1))
 80011ca:	f107 0308 	add.w	r3, r7, #8
 80011ce:	f107 010c 	add.w	r1, r7, #12
 80011d2:	2201      	movs	r2, #1
 80011d4:	9200      	str	r2, [sp, #0]
 80011d6:	2201      	movs	r2, #1
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 f80e 	bl	80011fa <BNO055_SendReceive>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <BNO055_Get_SysError+0x2a>
		return BNO055_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e004      	b.n	80011f2 <BNO055_Get_SysError+0x34>
	else
		handle->SysError = RxBuff[0];
 80011e8:	7a3a      	ldrb	r2, [r7, #8]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
	return BNO055_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <BNO055_SendReceive>:

/** Brief description which ends at this dot. Details follow
 *  here.
 */
BNO055_ReturnTypeDef_T BNO055_SendReceive(BNO055_Sensor_T *handle, uint8_t *txBuff, uint8_t txLenght, uint8_t *rxBuff, uint8_t rxLenght){
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b088      	sub	sp, #32
 80011fe:	af02      	add	r7, sp, #8
 8001200:	60f8      	str	r0, [r7, #12]
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	603b      	str	r3, [r7, #0]
 8001206:	4613      	mov	r3, r2
 8001208:	71fb      	strb	r3, [r7, #7]
	BNO055_ReturnTypeDef_T res = BNO055_CommPorter_SendReceive(handle->I2C_No, handle->Chip_I2C_Address, txBuff, txLenght, rxBuff, rxLenght);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	7818      	ldrb	r0, [r3, #0]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	7859      	ldrb	r1, [r3, #1]
 8001212:	79fa      	ldrb	r2, [r7, #7]
 8001214:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	4613      	mov	r3, r2
 8001220:	68ba      	ldr	r2, [r7, #8]
 8001222:	f000 f80f 	bl	8001244 <BNO055_CommPorter_SendReceive>
 8001226:	4603      	mov	r3, r0
 8001228:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(1);
 800122a:	2001      	movs	r0, #1
 800122c:	f000 fbf6 	bl	8001a1c <HAL_Delay>
	if(res){
 8001230:	7dfb      	ldrb	r3, [r7, #23]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <BNO055_SendReceive+0x40>
		return res;
 8001236:	7dfb      	ldrb	r3, [r7, #23]
 8001238:	e000      	b.n	800123c <BNO055_SendReceive+0x42>
	}else{
		return res;
 800123a:	7dfb      	ldrb	r3, [r7, #23]
	}
}
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <BNO055_CommPorter_SendReceive>:
 */

#include <stdint.h>
#include "I2C.h"

uint8_t BNO055_CommPorter_SendReceive(uint8_t I2CNo, uint8_t DevAddress, uint8_t *txBuff, uint8_t txLenght, uint8_t *rxBuff, uint8_t rxLenght){
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af02      	add	r7, sp, #8
 800124a:	603a      	str	r2, [r7, #0]
 800124c:	461a      	mov	r2, r3
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
 8001252:	460b      	mov	r3, r1
 8001254:	71bb      	strb	r3, [r7, #6]
 8001256:	4613      	mov	r3, r2
 8001258:	717b      	strb	r3, [r7, #5]
	return I2C_ReadWrite_Poll(I2CNo, DevAddress, txBuff, txLenght, rxBuff, rxLenght);
 800125a:	797a      	ldrb	r2, [r7, #5]
 800125c:	79b9      	ldrb	r1, [r7, #6]
 800125e:	79f8      	ldrb	r0, [r7, #7]
 8001260:	7d3b      	ldrb	r3, [r7, #20]
 8001262:	9301      	str	r3, [sp, #4]
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	4613      	mov	r3, r2
 800126a:	683a      	ldr	r2, [r7, #0]
 800126c:	f7ff f972 	bl	8000554 <I2C_ReadWrite_Poll>
 8001270:	4603      	mov	r3, r0
//	return I2C_ReadWrite_IT(I2CNo, DevAddress, txBuff, txLenght, rxBuff, rxLenght);
//	return I2C_ReadWrite_DMA(I2CNo, DevAddress, txBuff, txLenght, rxBuff, rxLenght);
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001280:	f000 fb9f 	bl	80019c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001284:	f000 f828 	bl	80012d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001288:	f000 f90c 	bl	80014a4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800128c:	f000 f8da 	bl	8001444 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8001290:	f000 f894 	bl	80013bc <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001294:	f003 fdc0 	bl	8004e18 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Thread_MicroROS */
  Thread_MicroROSHandle = osThreadNew(TaskMicroROS, NULL, &Thread_MicroROS_attributes);
 8001298:	4a09      	ldr	r2, [pc, #36]	@ (80012c0 <main+0x44>)
 800129a:	2100      	movs	r1, #0
 800129c:	4809      	ldr	r0, [pc, #36]	@ (80012c4 <main+0x48>)
 800129e:	f003 fe25 	bl	8004eec <osThreadNew>
 80012a2:	4603      	mov	r3, r0
 80012a4:	4a08      	ldr	r2, [pc, #32]	@ (80012c8 <main+0x4c>)
 80012a6:	6013      	str	r3, [r2, #0]

  /* creation of Thread_Sensors */
  Thread_SensorsHandle = osThreadNew(TaskSensors, NULL, &Thread_Sensors_attributes);
 80012a8:	4a08      	ldr	r2, [pc, #32]	@ (80012cc <main+0x50>)
 80012aa:	2100      	movs	r1, #0
 80012ac:	4808      	ldr	r0, [pc, #32]	@ (80012d0 <main+0x54>)
 80012ae:	f003 fe1d 	bl	8004eec <osThreadNew>
 80012b2:	4603      	mov	r3, r0
 80012b4:	4a07      	ldr	r2, [pc, #28]	@ (80012d4 <main+0x58>)
 80012b6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80012b8:	f003 fde2 	bl	8004e80 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <main+0x40>
 80012c0:	08007ae0 	.word	0x08007ae0
 80012c4:	080015a5 	.word	0x080015a5
 80012c8:	200001a4 	.word	0x200001a4
 80012cc:	08007b04 	.word	0x08007b04
 80012d0:	080015d5 	.word	0x080015d5
 80012d4:	200001a8 	.word	0x200001a8

080012d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b094      	sub	sp, #80	@ 0x50
 80012dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012de:	f107 031c 	add.w	r3, r7, #28
 80012e2:	2234      	movs	r2, #52	@ 0x34
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f006 fb98 	bl	8007a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ec:	f107 0308 	add.w	r3, r7, #8
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80012fc:	f001 fc5c 	bl	8002bb8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001300:	4b2c      	ldr	r3, [pc, #176]	@ (80013b4 <SystemClock_Config+0xdc>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001304:	4a2b      	ldr	r2, [pc, #172]	@ (80013b4 <SystemClock_Config+0xdc>)
 8001306:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800130a:	6413      	str	r3, [r2, #64]	@ 0x40
 800130c:	4b29      	ldr	r3, [pc, #164]	@ (80013b4 <SystemClock_Config+0xdc>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001310:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001318:	4b27      	ldr	r3, [pc, #156]	@ (80013b8 <SystemClock_Config+0xe0>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001320:	4a25      	ldr	r2, [pc, #148]	@ (80013b8 <SystemClock_Config+0xe0>)
 8001322:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	4b23      	ldr	r3, [pc, #140]	@ (80013b8 <SystemClock_Config+0xe0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001330:	603b      	str	r3, [r7, #0]
 8001332:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001334:	2301      	movs	r3, #1
 8001336:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001338:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800133c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800133e:	2302      	movs	r3, #2
 8001340:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001342:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001346:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001348:	2304      	movs	r3, #4
 800134a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800134c:	2360      	movs	r3, #96	@ 0x60
 800134e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001350:	2302      	movs	r3, #2
 8001352:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001354:	2304      	movs	r3, #4
 8001356:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001358:	2302      	movs	r3, #2
 800135a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	4618      	mov	r0, r3
 8001362:	f001 fc89 	bl	8002c78 <HAL_RCC_OscConfig>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800136c:	f000 f96c 	bl	8001648 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001370:	f001 fc32 	bl	8002bd8 <HAL_PWREx_EnableOverDrive>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800137a:	f000 f965 	bl	8001648 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137e:	230f      	movs	r3, #15
 8001380:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001382:	2302      	movs	r3, #2
 8001384:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800138a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800138e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001390:	2300      	movs	r3, #0
 8001392:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001394:	f107 0308 	add.w	r3, r7, #8
 8001398:	2103      	movs	r1, #3
 800139a:	4618      	mov	r0, r3
 800139c:	f001 ff1a 	bl	80031d4 <HAL_RCC_ClockConfig>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80013a6:	f000 f94f 	bl	8001648 <Error_Handler>
  }
}
 80013aa:	bf00      	nop
 80013ac:	3750      	adds	r7, #80	@ 0x50
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40007000 	.word	0x40007000

080013bc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001438 <MX_I2C2_Init+0x7c>)
 80013c2:	4a1e      	ldr	r2, [pc, #120]	@ (800143c <MX_I2C2_Init+0x80>)
 80013c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80013c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001438 <MX_I2C2_Init+0x7c>)
 80013c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001440 <MX_I2C2_Init+0x84>)
 80013ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80013cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001438 <MX_I2C2_Init+0x7c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013d2:	4b19      	ldr	r3, [pc, #100]	@ (8001438 <MX_I2C2_Init+0x7c>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013d8:	4b17      	ldr	r3, [pc, #92]	@ (8001438 <MX_I2C2_Init+0x7c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80013de:	4b16      	ldr	r3, [pc, #88]	@ (8001438 <MX_I2C2_Init+0x7c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013e4:	4b14      	ldr	r3, [pc, #80]	@ (8001438 <MX_I2C2_Init+0x7c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ea:	4b13      	ldr	r3, [pc, #76]	@ (8001438 <MX_I2C2_Init+0x7c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013f0:	4b11      	ldr	r3, [pc, #68]	@ (8001438 <MX_I2C2_Init+0x7c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013f6:	4810      	ldr	r0, [pc, #64]	@ (8001438 <MX_I2C2_Init+0x7c>)
 80013f8:	f000 fdf6 	bl	8001fe8 <HAL_I2C_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001402:	f000 f921 	bl	8001648 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001406:	2100      	movs	r1, #0
 8001408:	480b      	ldr	r0, [pc, #44]	@ (8001438 <MX_I2C2_Init+0x7c>)
 800140a:	f001 fb3d 	bl	8002a88 <HAL_I2CEx_ConfigAnalogFilter>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001414:	f000 f918 	bl	8001648 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001418:	2100      	movs	r1, #0
 800141a:	4807      	ldr	r0, [pc, #28]	@ (8001438 <MX_I2C2_Init+0x7c>)
 800141c:	f001 fb7f 	bl	8002b1e <HAL_I2CEx_ConfigDigitalFilter>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001426:	f000 f90f 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */
  I2C_Init(&hi2c2, I2CNO_2);
 800142a:	2102      	movs	r1, #2
 800142c:	4802      	ldr	r0, [pc, #8]	@ (8001438 <MX_I2C2_Init+0x7c>)
 800142e:	f7ff f87f 	bl	8000530 <I2C_Init>
  /* USER CODE END I2C2_Init 2 */

}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200000c8 	.word	0x200000c8
 800143c:	40005800 	.word	0x40005800
 8001440:	20303e5d 	.word	0x20303e5d

08001444 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001448:	4b14      	ldr	r3, [pc, #80]	@ (800149c <MX_USART3_UART_Init+0x58>)
 800144a:	4a15      	ldr	r2, [pc, #84]	@ (80014a0 <MX_USART3_UART_Init+0x5c>)
 800144c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800144e:	4b13      	ldr	r3, [pc, #76]	@ (800149c <MX_USART3_UART_Init+0x58>)
 8001450:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001454:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001456:	4b11      	ldr	r3, [pc, #68]	@ (800149c <MX_USART3_UART_Init+0x58>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800145c:	4b0f      	ldr	r3, [pc, #60]	@ (800149c <MX_USART3_UART_Init+0x58>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001462:	4b0e      	ldr	r3, [pc, #56]	@ (800149c <MX_USART3_UART_Init+0x58>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001468:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <MX_USART3_UART_Init+0x58>)
 800146a:	220c      	movs	r2, #12
 800146c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146e:	4b0b      	ldr	r3, [pc, #44]	@ (800149c <MX_USART3_UART_Init+0x58>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001474:	4b09      	ldr	r3, [pc, #36]	@ (800149c <MX_USART3_UART_Init+0x58>)
 8001476:	2200      	movs	r2, #0
 8001478:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800147a:	4b08      	ldr	r3, [pc, #32]	@ (800149c <MX_USART3_UART_Init+0x58>)
 800147c:	2200      	movs	r2, #0
 800147e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001480:	4b06      	ldr	r3, [pc, #24]	@ (800149c <MX_USART3_UART_Init+0x58>)
 8001482:	2200      	movs	r2, #0
 8001484:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001486:	4805      	ldr	r0, [pc, #20]	@ (800149c <MX_USART3_UART_Init+0x58>)
 8001488:	f002 fff2 	bl	8004470 <HAL_UART_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001492:	f000 f8d9 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	2000011c 	.word	0x2000011c
 80014a0:	40004800 	.word	0x40004800

080014a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08c      	sub	sp, #48	@ 0x30
 80014a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014aa:	f107 031c 	add.w	r3, r7, #28
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
 80014b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ba:	4b37      	ldr	r3, [pc, #220]	@ (8001598 <MX_GPIO_Init+0xf4>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	4a36      	ldr	r2, [pc, #216]	@ (8001598 <MX_GPIO_Init+0xf4>)
 80014c0:	f043 0304 	orr.w	r3, r3, #4
 80014c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c6:	4b34      	ldr	r3, [pc, #208]	@ (8001598 <MX_GPIO_Init+0xf4>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	f003 0304 	and.w	r3, r3, #4
 80014ce:	61bb      	str	r3, [r7, #24]
 80014d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014d2:	4b31      	ldr	r3, [pc, #196]	@ (8001598 <MX_GPIO_Init+0xf4>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	4a30      	ldr	r2, [pc, #192]	@ (8001598 <MX_GPIO_Init+0xf4>)
 80014d8:	f043 0320 	orr.w	r3, r3, #32
 80014dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014de:	4b2e      	ldr	r3, [pc, #184]	@ (8001598 <MX_GPIO_Init+0xf4>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	f003 0320 	and.w	r3, r3, #32
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001598 <MX_GPIO_Init+0xf4>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	4a2a      	ldr	r2, [pc, #168]	@ (8001598 <MX_GPIO_Init+0xf4>)
 80014f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f6:	4b28      	ldr	r3, [pc, #160]	@ (8001598 <MX_GPIO_Init+0xf4>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001502:	4b25      	ldr	r3, [pc, #148]	@ (8001598 <MX_GPIO_Init+0xf4>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	4a24      	ldr	r2, [pc, #144]	@ (8001598 <MX_GPIO_Init+0xf4>)
 8001508:	f043 0302 	orr.w	r3, r3, #2
 800150c:	6313      	str	r3, [r2, #48]	@ 0x30
 800150e:	4b22      	ldr	r3, [pc, #136]	@ (8001598 <MX_GPIO_Init+0xf4>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800151a:	4b1f      	ldr	r3, [pc, #124]	@ (8001598 <MX_GPIO_Init+0xf4>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	4a1e      	ldr	r2, [pc, #120]	@ (8001598 <MX_GPIO_Init+0xf4>)
 8001520:	f043 0308 	orr.w	r3, r3, #8
 8001524:	6313      	str	r3, [r2, #48]	@ 0x30
 8001526:	4b1c      	ldr	r3, [pc, #112]	@ (8001598 <MX_GPIO_Init+0xf4>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	4b19      	ldr	r3, [pc, #100]	@ (8001598 <MX_GPIO_Init+0xf4>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	4a18      	ldr	r2, [pc, #96]	@ (8001598 <MX_GPIO_Init+0xf4>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6313      	str	r3, [r2, #48]	@ 0x30
 800153e:	4b16      	ldr	r3, [pc, #88]	@ (8001598 <MX_GPIO_Init+0xf4>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001550:	4812      	ldr	r0, [pc, #72]	@ (800159c <MX_GPIO_Init+0xf8>)
 8001552:	f000 fd15 	bl	8001f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001556:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800155a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800155c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001560:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001566:	f107 031c 	add.w	r3, r7, #28
 800156a:	4619      	mov	r1, r3
 800156c:	480c      	ldr	r0, [pc, #48]	@ (80015a0 <MX_GPIO_Init+0xfc>)
 800156e:	f000 fb5b 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001572:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001576:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001578:	2301      	movs	r3, #1
 800157a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	4619      	mov	r1, r3
 800158a:	4804      	ldr	r0, [pc, #16]	@ (800159c <MX_GPIO_Init+0xf8>)
 800158c:	f000 fb4c 	bl	8001c28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001590:	bf00      	nop
 8001592:	3730      	adds	r7, #48	@ 0x30
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40023800 	.word	0x40023800
 800159c:	40020400 	.word	0x40020400
 80015a0:	40020800 	.word	0x40020800

080015a4 <TaskMicroROS>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMicroROS */
void TaskMicroROS(void *argument)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int i=0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	i++;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	3301      	adds	r3, #1
 80015b4:	60fb      	str	r3, [r7, #12]
	if(i>=10){
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2b09      	cmp	r3, #9
 80015ba:	dd05      	ble.n	80015c8 <TaskMicroROS+0x24>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80015bc:	2101      	movs	r1, #1
 80015be:	4804      	ldr	r0, [pc, #16]	@ (80015d0 <TaskMicroROS+0x2c>)
 80015c0:	f000 fcf7 	bl	8001fb2 <HAL_GPIO_TogglePin>
		i=0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
	}
    osDelay(10);
 80015c8:	200a      	movs	r0, #10
 80015ca:	f003 fd35 	bl	8005038 <osDelay>
	i++;
 80015ce:	e7ef      	b.n	80015b0 <TaskMicroROS+0xc>
 80015d0:	40020400 	.word	0x40020400

080015d4 <TaskSensors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskSensors */
void TaskSensors(void *argument)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af02      	add	r7, sp, #8
 80015da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskSensors */
	int i=0;
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
	IMU_Init(&IMU_1, 1, I2CNO_2, BNO055_I2C_ADRESS, 0, 0);
 80015e0:	2300      	movs	r3, #0
 80015e2:	9301      	str	r3, [sp, #4]
 80015e4:	2300      	movs	r3, #0
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	2328      	movs	r3, #40	@ 0x28
 80015ea:	2202      	movs	r2, #2
 80015ec:	2101      	movs	r1, #1
 80015ee:	480b      	ldr	r0, [pc, #44]	@ (800161c <TaskSensors+0x48>)
 80015f0:	f7ff f82e 	bl	8000650 <IMU_Init>
  /* Infinite loop */
  for(;;)
  {
	i++;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	3301      	adds	r3, #1
 80015f8:	60fb      	str	r3, [r7, #12]
	if(i>=25){
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2b18      	cmp	r3, #24
 80015fe:	dd05      	ble.n	800160c <TaskSensors+0x38>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD2_Pin);
 8001600:	2180      	movs	r1, #128	@ 0x80
 8001602:	4807      	ldr	r0, [pc, #28]	@ (8001620 <TaskSensors+0x4c>)
 8001604:	f000 fcd5 	bl	8001fb2 <HAL_GPIO_TogglePin>
		i=0;
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
	}
	IMU_Execute(&IMU_1, 1);
 800160c:	2101      	movs	r1, #1
 800160e:	4803      	ldr	r0, [pc, #12]	@ (800161c <TaskSensors+0x48>)
 8001610:	f7ff f84c 	bl	80006ac <IMU_Execute>
	osDelay(10);
 8001614:	200a      	movs	r0, #10
 8001616:	f003 fd0f 	bl	8005038 <osDelay>
	i++;
 800161a:	e7eb      	b.n	80015f4 <TaskSensors+0x20>
 800161c:	20000044 	.word	0x20000044
 8001620:	40020400 	.word	0x40020400

08001624 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a04      	ldr	r2, [pc, #16]	@ (8001644 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d101      	bne.n	800163a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001636:	f000 f9d1 	bl	80019dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40010000 	.word	0x40010000

08001648 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800164c:	b672      	cpsid	i
}
 800164e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <Error_Handler+0x8>

08001654 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800165a:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <HAL_MspInit+0x4c>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165e:	4a10      	ldr	r2, [pc, #64]	@ (80016a0 <HAL_MspInit+0x4c>)
 8001660:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001664:	6413      	str	r3, [r2, #64]	@ 0x40
 8001666:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <HAL_MspInit+0x4c>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001672:	4b0b      	ldr	r3, [pc, #44]	@ (80016a0 <HAL_MspInit+0x4c>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001676:	4a0a      	ldr	r2, [pc, #40]	@ (80016a0 <HAL_MspInit+0x4c>)
 8001678:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800167c:	6453      	str	r3, [r2, #68]	@ 0x44
 800167e:	4b08      	ldr	r3, [pc, #32]	@ (80016a0 <HAL_MspInit+0x4c>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001682:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001686:	603b      	str	r3, [r7, #0]
 8001688:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	210f      	movs	r1, #15
 800168e:	f06f 0001 	mvn.w	r0, #1
 8001692:	f000 fa9f 	bl	8001bd4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800

080016a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b0ae      	sub	sp, #184	@ 0xb8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	2290      	movs	r2, #144	@ 0x90
 80016c2:	2100      	movs	r1, #0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f006 f9a9 	bl	8007a1c <memset>
  if(hi2c->Instance==I2C2)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a21      	ldr	r2, [pc, #132]	@ (8001754 <HAL_I2C_MspInit+0xb0>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d13b      	bne.n	800174c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80016d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80016d8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80016da:	2300      	movs	r3, #0
 80016dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4618      	mov	r0, r3
 80016e4:	f001 ffce 	bl	8003684 <HAL_RCCEx_PeriphCLKConfig>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80016ee:	f7ff ffab 	bl	8001648 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016f2:	4b19      	ldr	r3, [pc, #100]	@ (8001758 <HAL_I2C_MspInit+0xb4>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	4a18      	ldr	r2, [pc, #96]	@ (8001758 <HAL_I2C_MspInit+0xb4>)
 80016f8:	f043 0320 	orr.w	r3, r3, #32
 80016fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fe:	4b16      	ldr	r3, [pc, #88]	@ (8001758 <HAL_I2C_MspInit+0xb4>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	f003 0320 	and.w	r3, r3, #32
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800170a:	2303      	movs	r3, #3
 800170c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001710:	2312      	movs	r3, #18
 8001712:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001722:	2304      	movs	r3, #4
 8001724:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001728:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800172c:	4619      	mov	r1, r3
 800172e:	480b      	ldr	r0, [pc, #44]	@ (800175c <HAL_I2C_MspInit+0xb8>)
 8001730:	f000 fa7a 	bl	8001c28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001734:	4b08      	ldr	r3, [pc, #32]	@ (8001758 <HAL_I2C_MspInit+0xb4>)
 8001736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001738:	4a07      	ldr	r2, [pc, #28]	@ (8001758 <HAL_I2C_MspInit+0xb4>)
 800173a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800173e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001740:	4b05      	ldr	r3, [pc, #20]	@ (8001758 <HAL_I2C_MspInit+0xb4>)
 8001742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001744:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800174c:	bf00      	nop
 800174e:	37b8      	adds	r7, #184	@ 0xb8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40005800 	.word	0x40005800
 8001758:	40023800 	.word	0x40023800
 800175c:	40021400 	.word	0x40021400

08001760 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b0ae      	sub	sp, #184	@ 0xb8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	2290      	movs	r2, #144	@ 0x90
 800177e:	2100      	movs	r1, #0
 8001780:	4618      	mov	r0, r3
 8001782:	f006 f94b 	bl	8007a1c <memset>
  if(huart->Instance==USART3)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a22      	ldr	r2, [pc, #136]	@ (8001814 <HAL_UART_MspInit+0xb4>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d13c      	bne.n	800180a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001790:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001794:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001796:	2300      	movs	r3, #0
 8001798:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	4618      	mov	r0, r3
 80017a0:	f001 ff70 	bl	8003684 <HAL_RCCEx_PeriphCLKConfig>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80017aa:	f7ff ff4d 	bl	8001648 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001818 <HAL_UART_MspInit+0xb8>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b2:	4a19      	ldr	r2, [pc, #100]	@ (8001818 <HAL_UART_MspInit+0xb8>)
 80017b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ba:	4b17      	ldr	r3, [pc, #92]	@ (8001818 <HAL_UART_MspInit+0xb8>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017c6:	4b14      	ldr	r3, [pc, #80]	@ (8001818 <HAL_UART_MspInit+0xb8>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	4a13      	ldr	r2, [pc, #76]	@ (8001818 <HAL_UART_MspInit+0xb8>)
 80017cc:	f043 0308 	orr.w	r3, r3, #8
 80017d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d2:	4b11      	ldr	r3, [pc, #68]	@ (8001818 <HAL_UART_MspInit+0xb8>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80017de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f2:	2303      	movs	r3, #3
 80017f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017f8:	2307      	movs	r3, #7
 80017fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017fe:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001802:	4619      	mov	r1, r3
 8001804:	4805      	ldr	r0, [pc, #20]	@ (800181c <HAL_UART_MspInit+0xbc>)
 8001806:	f000 fa0f 	bl	8001c28 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800180a:	bf00      	nop
 800180c:	37b8      	adds	r7, #184	@ 0xb8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40004800 	.word	0x40004800
 8001818:	40023800 	.word	0x40023800
 800181c:	40020c00 	.word	0x40020c00

08001820 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08c      	sub	sp, #48	@ 0x30
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001828:	2300      	movs	r3, #0
 800182a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800182c:	2300      	movs	r3, #0
 800182e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001830:	4b2e      	ldr	r3, [pc, #184]	@ (80018ec <HAL_InitTick+0xcc>)
 8001832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001834:	4a2d      	ldr	r2, [pc, #180]	@ (80018ec <HAL_InitTick+0xcc>)
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	6453      	str	r3, [r2, #68]	@ 0x44
 800183c:	4b2b      	ldr	r3, [pc, #172]	@ (80018ec <HAL_InitTick+0xcc>)
 800183e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001848:	f107 020c 	add.w	r2, r7, #12
 800184c:	f107 0310 	add.w	r3, r7, #16
 8001850:	4611      	mov	r1, r2
 8001852:	4618      	mov	r0, r3
 8001854:	f001 fee4 	bl	8003620 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001858:	f001 fece 	bl	80035f8 <HAL_RCC_GetPCLK2Freq>
 800185c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800185e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001860:	4a23      	ldr	r2, [pc, #140]	@ (80018f0 <HAL_InitTick+0xd0>)
 8001862:	fba2 2303 	umull	r2, r3, r2, r3
 8001866:	0c9b      	lsrs	r3, r3, #18
 8001868:	3b01      	subs	r3, #1
 800186a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800186c:	4b21      	ldr	r3, [pc, #132]	@ (80018f4 <HAL_InitTick+0xd4>)
 800186e:	4a22      	ldr	r2, [pc, #136]	@ (80018f8 <HAL_InitTick+0xd8>)
 8001870:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001872:	4b20      	ldr	r3, [pc, #128]	@ (80018f4 <HAL_InitTick+0xd4>)
 8001874:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001878:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800187a:	4a1e      	ldr	r2, [pc, #120]	@ (80018f4 <HAL_InitTick+0xd4>)
 800187c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001880:	4b1c      	ldr	r3, [pc, #112]	@ (80018f4 <HAL_InitTick+0xd4>)
 8001882:	2200      	movs	r2, #0
 8001884:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001886:	4b1b      	ldr	r3, [pc, #108]	@ (80018f4 <HAL_InitTick+0xd4>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800188c:	4b19      	ldr	r3, [pc, #100]	@ (80018f4 <HAL_InitTick+0xd4>)
 800188e:	2200      	movs	r2, #0
 8001890:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001892:	4818      	ldr	r0, [pc, #96]	@ (80018f4 <HAL_InitTick+0xd4>)
 8001894:	f002 fb1e 	bl	8003ed4 <HAL_TIM_Base_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800189e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d11b      	bne.n	80018de <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80018a6:	4813      	ldr	r0, [pc, #76]	@ (80018f4 <HAL_InitTick+0xd4>)
 80018a8:	f002 fb76 	bl	8003f98 <HAL_TIM_Base_Start_IT>
 80018ac:	4603      	mov	r3, r0
 80018ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80018b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d111      	bne.n	80018de <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80018ba:	2019      	movs	r0, #25
 80018bc:	f000 f9a6 	bl	8001c0c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b0f      	cmp	r3, #15
 80018c4:	d808      	bhi.n	80018d8 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80018c6:	2200      	movs	r2, #0
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	2019      	movs	r0, #25
 80018cc:	f000 f982 	bl	8001bd4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018d0:	4a0a      	ldr	r2, [pc, #40]	@ (80018fc <HAL_InitTick+0xdc>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	e002      	b.n	80018de <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80018de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3730      	adds	r7, #48	@ 0x30
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800
 80018f0:	431bde83 	.word	0x431bde83
 80018f4:	200001ac 	.word	0x200001ac
 80018f8:	40010000 	.word	0x40010000
 80018fc:	20000004 	.word	0x20000004

08001900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <NMI_Handler+0x4>

08001908 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <HardFault_Handler+0x4>

08001910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <MemManage_Handler+0x4>

08001918 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800191c:	bf00      	nop
 800191e:	e7fd      	b.n	800191c <BusFault_Handler+0x4>

08001920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <UsageFault_Handler+0x4>

08001928 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800193c:	4802      	ldr	r0, [pc, #8]	@ (8001948 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800193e:	f002 fba3 	bl	8004088 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200001ac 	.word	0x200001ac

0800194c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001950:	4b06      	ldr	r3, [pc, #24]	@ (800196c <SystemInit+0x20>)
 8001952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001956:	4a05      	ldr	r2, [pc, #20]	@ (800196c <SystemInit+0x20>)
 8001958:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800195c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001970:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001974:	f7ff ffea 	bl	800194c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001978:	480c      	ldr	r0, [pc, #48]	@ (80019ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800197a:	490d      	ldr	r1, [pc, #52]	@ (80019b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800197c:	4a0d      	ldr	r2, [pc, #52]	@ (80019b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800197e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001980:	e002      	b.n	8001988 <LoopCopyDataInit>

08001982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001986:	3304      	adds	r3, #4

08001988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800198a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800198c:	d3f9      	bcc.n	8001982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800198e:	4a0a      	ldr	r2, [pc, #40]	@ (80019b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001990:	4c0a      	ldr	r4, [pc, #40]	@ (80019bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001994:	e001      	b.n	800199a <LoopFillZerobss>

08001996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001998:	3204      	adds	r2, #4

0800199a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800199a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800199c:	d3fb      	bcc.n	8001996 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800199e:	f006 f845 	bl	8007a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019a2:	f7ff fc6b 	bl	800127c <main>
  bx  lr    
 80019a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019a8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80019ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80019b4:	08007b50 	.word	0x08007b50
  ldr r2, =_sbss
 80019b8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80019bc:	20004b44 	.word	0x20004b44

080019c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019c0:	e7fe      	b.n	80019c0 <ADC_IRQHandler>

080019c2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c6:	2003      	movs	r0, #3
 80019c8:	f000 f8f9 	bl	8001bbe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019cc:	200f      	movs	r0, #15
 80019ce:	f7ff ff27 	bl	8001820 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019d2:	f7ff fe3f 	bl	8001654 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	bd80      	pop	{r7, pc}

080019dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e0:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <HAL_IncTick+0x20>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	461a      	mov	r2, r3
 80019e6:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <HAL_IncTick+0x24>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4413      	add	r3, r2
 80019ec:	4a04      	ldr	r2, [pc, #16]	@ (8001a00 <HAL_IncTick+0x24>)
 80019ee:	6013      	str	r3, [r2, #0]
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	20000008 	.word	0x20000008
 8001a00:	200001f8 	.word	0x200001f8

08001a04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return uwTick;
 8001a08:	4b03      	ldr	r3, [pc, #12]	@ (8001a18 <HAL_GetTick+0x14>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	200001f8 	.word	0x200001f8

08001a1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a24:	f7ff ffee 	bl	8001a04 <HAL_GetTick>
 8001a28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a34:	d005      	beq.n	8001a42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a36:	4b0a      	ldr	r3, [pc, #40]	@ (8001a60 <HAL_Delay+0x44>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4413      	add	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a42:	bf00      	nop
 8001a44:	f7ff ffde 	bl	8001a04 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d8f7      	bhi.n	8001a44 <HAL_Delay+0x28>
  {
  }
}
 8001a54:	bf00      	nop
 8001a56:	bf00      	nop
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000008 	.word	0x20000008

08001a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a74:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa4 <__NVIC_SetPriorityGrouping+0x40>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a80:	4013      	ands	r3, r2
 8001a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a8c:	4b06      	ldr	r3, [pc, #24]	@ (8001aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a92:	4a04      	ldr	r2, [pc, #16]	@ (8001aa4 <__NVIC_SetPriorityGrouping+0x40>)
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	60d3      	str	r3, [r2, #12]
}
 8001a98:	bf00      	nop
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000ed00 	.word	0xe000ed00
 8001aa8:	05fa0000 	.word	0x05fa0000

08001aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab0:	4b04      	ldr	r3, [pc, #16]	@ (8001ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	0a1b      	lsrs	r3, r3, #8
 8001ab6:	f003 0307 	and.w	r3, r3, #7
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	db0b      	blt.n	8001af2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	f003 021f 	and.w	r2, r3, #31
 8001ae0:	4907      	ldr	r1, [pc, #28]	@ (8001b00 <__NVIC_EnableIRQ+0x38>)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	095b      	lsrs	r3, r3, #5
 8001ae8:	2001      	movs	r0, #1
 8001aea:	fa00 f202 	lsl.w	r2, r0, r2
 8001aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	e000e100 	.word	0xe000e100

08001b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	6039      	str	r1, [r7, #0]
 8001b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	db0a      	blt.n	8001b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	490c      	ldr	r1, [pc, #48]	@ (8001b50 <__NVIC_SetPriority+0x4c>)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	0112      	lsls	r2, r2, #4
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	440b      	add	r3, r1
 8001b28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b2c:	e00a      	b.n	8001b44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4908      	ldr	r1, [pc, #32]	@ (8001b54 <__NVIC_SetPriority+0x50>)
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	3b04      	subs	r3, #4
 8001b3c:	0112      	lsls	r2, r2, #4
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	440b      	add	r3, r1
 8001b42:	761a      	strb	r2, [r3, #24]
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000e100 	.word	0xe000e100
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b089      	sub	sp, #36	@ 0x24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f1c3 0307 	rsb	r3, r3, #7
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	bf28      	it	cs
 8001b76:	2304      	movcs	r3, #4
 8001b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	2b06      	cmp	r3, #6
 8001b80:	d902      	bls.n	8001b88 <NVIC_EncodePriority+0x30>
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3b03      	subs	r3, #3
 8001b86:	e000      	b.n	8001b8a <NVIC_EncodePriority+0x32>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43da      	mvns	r2, r3
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8001baa:	43d9      	mvns	r1, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb0:	4313      	orrs	r3, r2
         );
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3724      	adds	r7, #36	@ 0x24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff ff4c 	bl	8001a64 <__NVIC_SetPriorityGrouping>
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
 8001be0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001be6:	f7ff ff61 	bl	8001aac <__NVIC_GetPriorityGrouping>
 8001bea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	68b9      	ldr	r1, [r7, #8]
 8001bf0:	6978      	ldr	r0, [r7, #20]
 8001bf2:	f7ff ffb1 	bl	8001b58 <NVIC_EncodePriority>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bfc:	4611      	mov	r1, r2
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff ff80 	bl	8001b04 <__NVIC_SetPriority>
}
 8001c04:	bf00      	nop
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff ff54 	bl	8001ac8 <__NVIC_EnableIRQ>
}
 8001c20:	bf00      	nop
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b089      	sub	sp, #36	@ 0x24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
 8001c46:	e175      	b.n	8001f34 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c48:	2201      	movs	r2, #1
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	f040 8164 	bne.w	8001f2e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d005      	beq.n	8001c7e <HAL_GPIO_Init+0x56>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d130      	bne.n	8001ce0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	2203      	movs	r2, #3
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4013      	ands	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	68da      	ldr	r2, [r3, #12]
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	091b      	lsrs	r3, r3, #4
 8001cca:	f003 0201 	and.w	r2, r3, #1
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	d017      	beq.n	8001d1c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d123      	bne.n	8001d70 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	08da      	lsrs	r2, r3, #3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3208      	adds	r2, #8
 8001d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	220f      	movs	r2, #15
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	691a      	ldr	r2, [r3, #16]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	08da      	lsrs	r2, r3, #3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3208      	adds	r2, #8
 8001d6a:	69b9      	ldr	r1, [r7, #24]
 8001d6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 0203 	and.w	r2, r3, #3
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f000 80be 	beq.w	8001f2e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db2:	4b66      	ldr	r3, [pc, #408]	@ (8001f4c <HAL_GPIO_Init+0x324>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db6:	4a65      	ldr	r2, [pc, #404]	@ (8001f4c <HAL_GPIO_Init+0x324>)
 8001db8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dbe:	4b63      	ldr	r3, [pc, #396]	@ (8001f4c <HAL_GPIO_Init+0x324>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001dca:	4a61      	ldr	r2, [pc, #388]	@ (8001f50 <HAL_GPIO_Init+0x328>)
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	089b      	lsrs	r3, r3, #2
 8001dd0:	3302      	adds	r3, #2
 8001dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	220f      	movs	r2, #15
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a58      	ldr	r2, [pc, #352]	@ (8001f54 <HAL_GPIO_Init+0x32c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d037      	beq.n	8001e66 <HAL_GPIO_Init+0x23e>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a57      	ldr	r2, [pc, #348]	@ (8001f58 <HAL_GPIO_Init+0x330>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d031      	beq.n	8001e62 <HAL_GPIO_Init+0x23a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a56      	ldr	r2, [pc, #344]	@ (8001f5c <HAL_GPIO_Init+0x334>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d02b      	beq.n	8001e5e <HAL_GPIO_Init+0x236>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a55      	ldr	r2, [pc, #340]	@ (8001f60 <HAL_GPIO_Init+0x338>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d025      	beq.n	8001e5a <HAL_GPIO_Init+0x232>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a54      	ldr	r2, [pc, #336]	@ (8001f64 <HAL_GPIO_Init+0x33c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d01f      	beq.n	8001e56 <HAL_GPIO_Init+0x22e>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a53      	ldr	r2, [pc, #332]	@ (8001f68 <HAL_GPIO_Init+0x340>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d019      	beq.n	8001e52 <HAL_GPIO_Init+0x22a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a52      	ldr	r2, [pc, #328]	@ (8001f6c <HAL_GPIO_Init+0x344>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d013      	beq.n	8001e4e <HAL_GPIO_Init+0x226>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a51      	ldr	r2, [pc, #324]	@ (8001f70 <HAL_GPIO_Init+0x348>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d00d      	beq.n	8001e4a <HAL_GPIO_Init+0x222>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a50      	ldr	r2, [pc, #320]	@ (8001f74 <HAL_GPIO_Init+0x34c>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d007      	beq.n	8001e46 <HAL_GPIO_Init+0x21e>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a4f      	ldr	r2, [pc, #316]	@ (8001f78 <HAL_GPIO_Init+0x350>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d101      	bne.n	8001e42 <HAL_GPIO_Init+0x21a>
 8001e3e:	2309      	movs	r3, #9
 8001e40:	e012      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e42:	230a      	movs	r3, #10
 8001e44:	e010      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e46:	2308      	movs	r3, #8
 8001e48:	e00e      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e4a:	2307      	movs	r3, #7
 8001e4c:	e00c      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e4e:	2306      	movs	r3, #6
 8001e50:	e00a      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e52:	2305      	movs	r3, #5
 8001e54:	e008      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e56:	2304      	movs	r3, #4
 8001e58:	e006      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e004      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e002      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e66:	2300      	movs	r3, #0
 8001e68:	69fa      	ldr	r2, [r7, #28]
 8001e6a:	f002 0203 	and.w	r2, r2, #3
 8001e6e:	0092      	lsls	r2, r2, #2
 8001e70:	4093      	lsls	r3, r2
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e78:	4935      	ldr	r1, [pc, #212]	@ (8001f50 <HAL_GPIO_Init+0x328>)
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	089b      	lsrs	r3, r3, #2
 8001e7e:	3302      	adds	r3, #2
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e86:	4b3d      	ldr	r3, [pc, #244]	@ (8001f7c <HAL_GPIO_Init+0x354>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4013      	ands	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eaa:	4a34      	ldr	r2, [pc, #208]	@ (8001f7c <HAL_GPIO_Init+0x354>)
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eb0:	4b32      	ldr	r3, [pc, #200]	@ (8001f7c <HAL_GPIO_Init+0x354>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ed4:	4a29      	ldr	r2, [pc, #164]	@ (8001f7c <HAL_GPIO_Init+0x354>)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eda:	4b28      	ldr	r3, [pc, #160]	@ (8001f7c <HAL_GPIO_Init+0x354>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001efe:	4a1f      	ldr	r2, [pc, #124]	@ (8001f7c <HAL_GPIO_Init+0x354>)
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f04:	4b1d      	ldr	r3, [pc, #116]	@ (8001f7c <HAL_GPIO_Init+0x354>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f28:	4a14      	ldr	r2, [pc, #80]	@ (8001f7c <HAL_GPIO_Init+0x354>)
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3301      	adds	r3, #1
 8001f32:	61fb      	str	r3, [r7, #28]
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	2b0f      	cmp	r3, #15
 8001f38:	f67f ae86 	bls.w	8001c48 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001f3c:	bf00      	nop
 8001f3e:	bf00      	nop
 8001f40:	3724      	adds	r7, #36	@ 0x24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40013800 	.word	0x40013800
 8001f54:	40020000 	.word	0x40020000
 8001f58:	40020400 	.word	0x40020400
 8001f5c:	40020800 	.word	0x40020800
 8001f60:	40020c00 	.word	0x40020c00
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40021400 	.word	0x40021400
 8001f6c:	40021800 	.word	0x40021800
 8001f70:	40021c00 	.word	0x40021c00
 8001f74:	40022000 	.word	0x40022000
 8001f78:	40022400 	.word	0x40022400
 8001f7c:	40013c00 	.word	0x40013c00

08001f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	807b      	strh	r3, [r7, #2]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f90:	787b      	ldrb	r3, [r7, #1]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f96:	887a      	ldrh	r2, [r7, #2]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f9c:	e003      	b.n	8001fa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f9e:	887b      	ldrh	r3, [r7, #2]
 8001fa0:	041a      	lsls	r2, r3, #16
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	619a      	str	r2, [r3, #24]
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b085      	sub	sp, #20
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fc4:	887a      	ldrh	r2, [r7, #2]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	041a      	lsls	r2, r3, #16
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	43d9      	mvns	r1, r3
 8001fd0:	887b      	ldrh	r3, [r7, #2]
 8001fd2:	400b      	ands	r3, r1
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	619a      	str	r2, [r3, #24]
}
 8001fda:	bf00      	nop
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
	...

08001fe8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e08b      	b.n	8002112 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d106      	bne.n	8002014 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff fb48 	bl	80016a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2224      	movs	r2, #36	@ 0x24
 8002018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 0201 	bic.w	r2, r2, #1
 800202a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002038:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002048:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d107      	bne.n	8002062 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	e006      	b.n	8002070 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800206e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	2b02      	cmp	r3, #2
 8002076:	d108      	bne.n	800208a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002086:	605a      	str	r2, [r3, #4]
 8002088:	e007      	b.n	800209a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002098:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6859      	ldr	r1, [r3, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4b1d      	ldr	r3, [pc, #116]	@ (800211c <HAL_I2C_Init+0x134>)
 80020a6:	430b      	orrs	r3, r1
 80020a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68da      	ldr	r2, [r3, #12]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691a      	ldr	r2, [r3, #16]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69d9      	ldr	r1, [r3, #28]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a1a      	ldr	r2, [r3, #32]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0201 	orr.w	r2, r2, #1
 80020f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2220      	movs	r2, #32
 80020fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	02008000 	.word	0x02008000

08002120 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b088      	sub	sp, #32
 8002124:	af02      	add	r7, sp, #8
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	607a      	str	r2, [r7, #4]
 800212a:	461a      	mov	r2, r3
 800212c:	460b      	mov	r3, r1
 800212e:	817b      	strh	r3, [r7, #10]
 8002130:	4613      	mov	r3, r2
 8002132:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b20      	cmp	r3, #32
 800213e:	f040 80fd 	bne.w	800233c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002148:	2b01      	cmp	r3, #1
 800214a:	d101      	bne.n	8002150 <HAL_I2C_Master_Transmit+0x30>
 800214c:	2302      	movs	r3, #2
 800214e:	e0f6      	b.n	800233e <HAL_I2C_Master_Transmit+0x21e>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002158:	f7ff fc54 	bl	8001a04 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	2319      	movs	r3, #25
 8002164:	2201      	movs	r2, #1
 8002166:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f000 fa0a 	bl	8002584 <I2C_WaitOnFlagUntilTimeout>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e0e1      	b.n	800233e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2221      	movs	r2, #33	@ 0x21
 800217e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2210      	movs	r2, #16
 8002186:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	893a      	ldrh	r2, [r7, #8]
 800219a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	2bff      	cmp	r3, #255	@ 0xff
 80021aa:	d906      	bls.n	80021ba <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	22ff      	movs	r2, #255	@ 0xff
 80021b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80021b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021b6:	617b      	str	r3, [r7, #20]
 80021b8:	e007      	b.n	80021ca <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021be:	b29a      	uxth	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80021c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021c8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d024      	beq.n	800221c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d6:	781a      	ldrb	r2, [r3, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	3b01      	subs	r3, #1
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021fa:	3b01      	subs	r3, #1
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002206:	b2db      	uxtb	r3, r3
 8002208:	3301      	adds	r3, #1
 800220a:	b2da      	uxtb	r2, r3
 800220c:	8979      	ldrh	r1, [r7, #10]
 800220e:	4b4e      	ldr	r3, [pc, #312]	@ (8002348 <HAL_I2C_Master_Transmit+0x228>)
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f000 fc05 	bl	8002a24 <I2C_TransferConfig>
 800221a:	e066      	b.n	80022ea <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002220:	b2da      	uxtb	r2, r3
 8002222:	8979      	ldrh	r1, [r7, #10]
 8002224:	4b48      	ldr	r3, [pc, #288]	@ (8002348 <HAL_I2C_Master_Transmit+0x228>)
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 fbfa 	bl	8002a24 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002230:	e05b      	b.n	80022ea <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	6a39      	ldr	r1, [r7, #32]
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 f9fd 	bl	8002636 <I2C_WaitOnTXISFlagUntilTimeout>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e07b      	b.n	800233e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224a:	781a      	ldrb	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002256:	1c5a      	adds	r2, r3, #1
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002260:	b29b      	uxth	r3, r3
 8002262:	3b01      	subs	r3, #1
 8002264:	b29a      	uxth	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800226e:	3b01      	subs	r3, #1
 8002270:	b29a      	uxth	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800227a:	b29b      	uxth	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	d034      	beq.n	80022ea <HAL_I2C_Master_Transmit+0x1ca>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002284:	2b00      	cmp	r3, #0
 8002286:	d130      	bne.n	80022ea <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	6a3b      	ldr	r3, [r7, #32]
 800228e:	2200      	movs	r2, #0
 8002290:	2180      	movs	r1, #128	@ 0x80
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 f976 	bl	8002584 <I2C_WaitOnFlagUntilTimeout>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e04d      	b.n	800233e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	2bff      	cmp	r3, #255	@ 0xff
 80022aa:	d90e      	bls.n	80022ca <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	22ff      	movs	r2, #255	@ 0xff
 80022b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	8979      	ldrh	r1, [r7, #10]
 80022ba:	2300      	movs	r3, #0
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 fbae 	bl	8002a24 <I2C_TransferConfig>
 80022c8:	e00f      	b.n	80022ea <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	8979      	ldrh	r1, [r7, #10]
 80022dc:	2300      	movs	r3, #0
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f000 fb9d 	bl	8002a24 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d19e      	bne.n	8002232 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	6a39      	ldr	r1, [r7, #32]
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f000 f9e3 	bl	80026c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e01a      	b.n	800233e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2220      	movs	r2, #32
 800230e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6859      	ldr	r1, [r3, #4]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	4b0c      	ldr	r3, [pc, #48]	@ (800234c <HAL_I2C_Master_Transmit+0x22c>)
 800231c:	400b      	ands	r3, r1
 800231e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002338:	2300      	movs	r3, #0
 800233a:	e000      	b.n	800233e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800233c:	2302      	movs	r3, #2
  }
}
 800233e:	4618      	mov	r0, r3
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	80002000 	.word	0x80002000
 800234c:	fe00e800 	.word	0xfe00e800

08002350 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b088      	sub	sp, #32
 8002354:	af02      	add	r7, sp, #8
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	607a      	str	r2, [r7, #4]
 800235a:	461a      	mov	r2, r3
 800235c:	460b      	mov	r3, r1
 800235e:	817b      	strh	r3, [r7, #10]
 8002360:	4613      	mov	r3, r2
 8002362:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b20      	cmp	r3, #32
 800236e:	f040 80db 	bne.w	8002528 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <HAL_I2C_Master_Receive+0x30>
 800237c:	2302      	movs	r3, #2
 800237e:	e0d4      	b.n	800252a <HAL_I2C_Master_Receive+0x1da>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002388:	f7ff fb3c 	bl	8001a04 <HAL_GetTick>
 800238c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	2319      	movs	r3, #25
 8002394:	2201      	movs	r2, #1
 8002396:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f000 f8f2 	bl	8002584 <I2C_WaitOnFlagUntilTimeout>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e0bf      	b.n	800252a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2222      	movs	r2, #34	@ 0x22
 80023ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2210      	movs	r2, #16
 80023b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	893a      	ldrh	r2, [r7, #8]
 80023ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	2bff      	cmp	r3, #255	@ 0xff
 80023da:	d90e      	bls.n	80023fa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2201      	movs	r2, #1
 80023e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	8979      	ldrh	r1, [r7, #10]
 80023ea:	4b52      	ldr	r3, [pc, #328]	@ (8002534 <HAL_I2C_Master_Receive+0x1e4>)
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 fb16 	bl	8002a24 <I2C_TransferConfig>
 80023f8:	e06d      	b.n	80024d6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023fe:	b29a      	uxth	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002408:	b2da      	uxtb	r2, r3
 800240a:	8979      	ldrh	r1, [r7, #10]
 800240c:	4b49      	ldr	r3, [pc, #292]	@ (8002534 <HAL_I2C_Master_Receive+0x1e4>)
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f000 fb05 	bl	8002a24 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800241a:	e05c      	b.n	80024d6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	6a39      	ldr	r1, [r7, #32]
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f000 f993 	bl	800274c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e07c      	b.n	800252a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800244c:	3b01      	subs	r3, #1
 800244e:	b29a      	uxth	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002458:	b29b      	uxth	r3, r3
 800245a:	3b01      	subs	r3, #1
 800245c:	b29a      	uxth	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002466:	b29b      	uxth	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d034      	beq.n	80024d6 <HAL_I2C_Master_Receive+0x186>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002470:	2b00      	cmp	r3, #0
 8002472:	d130      	bne.n	80024d6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	2200      	movs	r2, #0
 800247c:	2180      	movs	r1, #128	@ 0x80
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 f880 	bl	8002584 <I2C_WaitOnFlagUntilTimeout>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e04d      	b.n	800252a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002492:	b29b      	uxth	r3, r3
 8002494:	2bff      	cmp	r3, #255	@ 0xff
 8002496:	d90e      	bls.n	80024b6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	22ff      	movs	r2, #255	@ 0xff
 800249c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	8979      	ldrh	r1, [r7, #10]
 80024a6:	2300      	movs	r3, #0
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 fab8 	bl	8002a24 <I2C_TransferConfig>
 80024b4:	e00f      	b.n	80024d6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	8979      	ldrh	r1, [r7, #10]
 80024c8:	2300      	movs	r3, #0
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 faa7 	bl	8002a24 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024da:	b29b      	uxth	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d19d      	bne.n	800241c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	6a39      	ldr	r1, [r7, #32]
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f000 f8ed 	bl	80026c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e01a      	b.n	800252a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2220      	movs	r2, #32
 80024fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6859      	ldr	r1, [r3, #4]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	4b0c      	ldr	r3, [pc, #48]	@ (8002538 <HAL_I2C_Master_Receive+0x1e8>)
 8002508:	400b      	ands	r3, r1
 800250a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2220      	movs	r2, #32
 8002510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002524:	2300      	movs	r3, #0
 8002526:	e000      	b.n	800252a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002528:	2302      	movs	r3, #2
  }
}
 800252a:	4618      	mov	r0, r3
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	80002400 	.word	0x80002400
 8002538:	fe00e800 	.word	0xfe00e800

0800253c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b02      	cmp	r3, #2
 8002550:	d103      	bne.n	800255a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2200      	movs	r2, #0
 8002558:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b01      	cmp	r3, #1
 8002566:	d007      	beq.n	8002578 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	699a      	ldr	r2, [r3, #24]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0201 	orr.w	r2, r2, #1
 8002576:	619a      	str	r2, [r3, #24]
  }
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	603b      	str	r3, [r7, #0]
 8002590:	4613      	mov	r3, r2
 8002592:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002594:	e03b      	b.n	800260e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	6839      	ldr	r1, [r7, #0]
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 f962 	bl	8002864 <I2C_IsErrorOccurred>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e041      	b.n	800262e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b0:	d02d      	beq.n	800260e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025b2:	f7ff fa27 	bl	8001a04 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d302      	bcc.n	80025c8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d122      	bne.n	800260e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	699a      	ldr	r2, [r3, #24]
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	4013      	ands	r3, r2
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	bf0c      	ite	eq
 80025d8:	2301      	moveq	r3, #1
 80025da:	2300      	movne	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	461a      	mov	r2, r3
 80025e0:	79fb      	ldrb	r3, [r7, #7]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d113      	bne.n	800260e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ea:	f043 0220 	orr.w	r2, r3, #32
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2220      	movs	r2, #32
 80025f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e00f      	b.n	800262e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	699a      	ldr	r2, [r3, #24]
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	4013      	ands	r3, r2
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	429a      	cmp	r2, r3
 800261c:	bf0c      	ite	eq
 800261e:	2301      	moveq	r3, #1
 8002620:	2300      	movne	r3, #0
 8002622:	b2db      	uxtb	r3, r3
 8002624:	461a      	mov	r2, r3
 8002626:	79fb      	ldrb	r3, [r7, #7]
 8002628:	429a      	cmp	r2, r3
 800262a:	d0b4      	beq.n	8002596 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b084      	sub	sp, #16
 800263a:	af00      	add	r7, sp, #0
 800263c:	60f8      	str	r0, [r7, #12]
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002642:	e033      	b.n	80026ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	68b9      	ldr	r1, [r7, #8]
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 f90b 	bl	8002864 <I2C_IsErrorOccurred>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e031      	b.n	80026bc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265e:	d025      	beq.n	80026ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002660:	f7ff f9d0 	bl	8001a04 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	429a      	cmp	r2, r3
 800266e:	d302      	bcc.n	8002676 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d11a      	bne.n	80026ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b02      	cmp	r3, #2
 8002682:	d013      	beq.n	80026ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002688:	f043 0220 	orr.w	r2, r3, #32
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2220      	movs	r2, #32
 8002694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e007      	b.n	80026bc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d1c4      	bne.n	8002644 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026d0:	e02f      	b.n	8002732 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	68b9      	ldr	r1, [r7, #8]
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 f8c4 	bl	8002864 <I2C_IsErrorOccurred>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e02d      	b.n	8002742 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026e6:	f7ff f98d 	bl	8001a04 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d302      	bcc.n	80026fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d11a      	bne.n	8002732 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	f003 0320 	and.w	r3, r3, #32
 8002706:	2b20      	cmp	r3, #32
 8002708:	d013      	beq.n	8002732 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270e:	f043 0220 	orr.w	r2, r3, #32
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2220      	movs	r2, #32
 800271a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e007      	b.n	8002742 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	f003 0320 	and.w	r3, r3, #32
 800273c:	2b20      	cmp	r3, #32
 800273e:	d1c8      	bne.n	80026d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002758:	2300      	movs	r3, #0
 800275a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800275c:	e071      	b.n	8002842 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	68b9      	ldr	r1, [r7, #8]
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 f87e 	bl	8002864 <I2C_IsErrorOccurred>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	f003 0320 	and.w	r3, r3, #32
 800277c:	2b20      	cmp	r3, #32
 800277e:	d13b      	bne.n	80027f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002780:	7dfb      	ldrb	r3, [r7, #23]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d138      	bne.n	80027f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b04      	cmp	r3, #4
 8002792:	d105      	bne.n	80027a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800279c:	2300      	movs	r3, #0
 800279e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	f003 0310 	and.w	r3, r3, #16
 80027aa:	2b10      	cmp	r3, #16
 80027ac:	d121      	bne.n	80027f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2210      	movs	r2, #16
 80027b4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2204      	movs	r2, #4
 80027ba:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2220      	movs	r2, #32
 80027c2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6859      	ldr	r1, [r3, #4]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	4b24      	ldr	r3, [pc, #144]	@ (8002860 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80027d0:	400b      	ands	r3, r1
 80027d2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	75fb      	strb	r3, [r7, #23]
 80027f0:	e002      	b.n	80027f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80027f8:	f7ff f904 	bl	8001a04 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	429a      	cmp	r2, r3
 8002806:	d302      	bcc.n	800280e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d119      	bne.n	8002842 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800280e:	7dfb      	ldrb	r3, [r7, #23]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d116      	bne.n	8002842 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	2b04      	cmp	r3, #4
 8002820:	d00f      	beq.n	8002842 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002826:	f043 0220 	orr.w	r2, r3, #32
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2220      	movs	r2, #32
 8002832:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b04      	cmp	r3, #4
 800284e:	d002      	beq.n	8002856 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002850:	7dfb      	ldrb	r3, [r7, #23]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d083      	beq.n	800275e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002856:	7dfb      	ldrb	r3, [r7, #23]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	fe00e800 	.word	0xfe00e800

08002864 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08a      	sub	sp, #40	@ 0x28
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002870:	2300      	movs	r3, #0
 8002872:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800287e:	2300      	movs	r3, #0
 8002880:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	f003 0310 	and.w	r3, r3, #16
 800288c:	2b00      	cmp	r3, #0
 800288e:	d068      	beq.n	8002962 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2210      	movs	r2, #16
 8002896:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002898:	e049      	b.n	800292e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a0:	d045      	beq.n	800292e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028a2:	f7ff f8af 	bl	8001a04 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d302      	bcc.n	80028b8 <I2C_IsErrorOccurred+0x54>
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d13a      	bne.n	800292e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80028ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028da:	d121      	bne.n	8002920 <I2C_IsErrorOccurred+0xbc>
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028e2:	d01d      	beq.n	8002920 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80028e4:	7cfb      	ldrb	r3, [r7, #19]
 80028e6:	2b20      	cmp	r3, #32
 80028e8:	d01a      	beq.n	8002920 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028f8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80028fa:	f7ff f883 	bl	8001a04 <HAL_GetTick>
 80028fe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002900:	e00e      	b.n	8002920 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002902:	f7ff f87f 	bl	8001a04 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b19      	cmp	r3, #25
 800290e:	d907      	bls.n	8002920 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002910:	6a3b      	ldr	r3, [r7, #32]
 8002912:	f043 0320 	orr.w	r3, r3, #32
 8002916:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800291e:	e006      	b.n	800292e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	f003 0320 	and.w	r3, r3, #32
 800292a:	2b20      	cmp	r3, #32
 800292c:	d1e9      	bne.n	8002902 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	f003 0320 	and.w	r3, r3, #32
 8002938:	2b20      	cmp	r3, #32
 800293a:	d003      	beq.n	8002944 <I2C_IsErrorOccurred+0xe0>
 800293c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0aa      	beq.n	800289a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002944:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002948:	2b00      	cmp	r3, #0
 800294a:	d103      	bne.n	8002954 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2220      	movs	r2, #32
 8002952:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002954:	6a3b      	ldr	r3, [r7, #32]
 8002956:	f043 0304 	orr.w	r3, r3, #4
 800295a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00b      	beq.n	800298c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	f043 0301 	orr.w	r3, r3, #1
 800297a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002984:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00b      	beq.n	80029ae <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002996:	6a3b      	ldr	r3, [r7, #32]
 8002998:	f043 0308 	orr.w	r3, r3, #8
 800299c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00b      	beq.n	80029d0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80029b8:	6a3b      	ldr	r3, [r7, #32]
 80029ba:	f043 0302 	orr.w	r3, r3, #2
 80029be:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80029d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d01c      	beq.n	8002a12 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f7ff fdaf 	bl	800253c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6859      	ldr	r1, [r3, #4]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002a20 <I2C_IsErrorOccurred+0x1bc>)
 80029ea:	400b      	ands	r3, r1
 80029ec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029f2:	6a3b      	ldr	r3, [r7, #32]
 80029f4:	431a      	orrs	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2220      	movs	r2, #32
 80029fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002a12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3728      	adds	r7, #40	@ 0x28
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	fe00e800 	.word	0xfe00e800

08002a24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	607b      	str	r3, [r7, #4]
 8002a2e:	460b      	mov	r3, r1
 8002a30:	817b      	strh	r3, [r7, #10]
 8002a32:	4613      	mov	r3, r2
 8002a34:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a36:	897b      	ldrh	r3, [r7, #10]
 8002a38:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a3c:	7a7b      	ldrb	r3, [r7, #9]
 8002a3e:	041b      	lsls	r3, r3, #16
 8002a40:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a44:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a52:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	6a3b      	ldr	r3, [r7, #32]
 8002a5c:	0d5b      	lsrs	r3, r3, #21
 8002a5e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002a62:	4b08      	ldr	r3, [pc, #32]	@ (8002a84 <I2C_TransferConfig+0x60>)
 8002a64:	430b      	orrs	r3, r1
 8002a66:	43db      	mvns	r3, r3
 8002a68:	ea02 0103 	and.w	r1, r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a76:	bf00      	nop
 8002a78:	371c      	adds	r7, #28
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	03ff63ff 	.word	0x03ff63ff

08002a88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b20      	cmp	r3, #32
 8002a9c:	d138      	bne.n	8002b10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d101      	bne.n	8002aac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	e032      	b.n	8002b12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2224      	movs	r2, #36	@ 0x24
 8002ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0201 	bic.w	r2, r2, #1
 8002aca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ada:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6819      	ldr	r1, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 0201 	orr.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2220      	movs	r2, #32
 8002b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	e000      	b.n	8002b12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b10:	2302      	movs	r3, #2
  }
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b085      	sub	sp, #20
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b20      	cmp	r3, #32
 8002b32:	d139      	bne.n	8002ba8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d101      	bne.n	8002b42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e033      	b.n	8002baa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2224      	movs	r2, #36	@ 0x24
 8002b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0201 	bic.w	r2, r2, #1
 8002b60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	021b      	lsls	r3, r3, #8
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0201 	orr.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	e000      	b.n	8002baa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ba8:	2302      	movs	r3, #2
  }
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
	...

08002bb8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bbc:	4b05      	ldr	r3, [pc, #20]	@ (8002bd4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a04      	ldr	r2, [pc, #16]	@ (8002bd4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bc6:	6013      	str	r3, [r2, #0]
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	40007000 	.word	0x40007000

08002bd8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002bde:	2300      	movs	r3, #0
 8002be0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002be2:	4b23      	ldr	r3, [pc, #140]	@ (8002c70 <HAL_PWREx_EnableOverDrive+0x98>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be6:	4a22      	ldr	r2, [pc, #136]	@ (8002c70 <HAL_PWREx_EnableOverDrive+0x98>)
 8002be8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bec:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bee:	4b20      	ldr	r3, [pc, #128]	@ (8002c70 <HAL_PWREx_EnableOverDrive+0x98>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bf6:	603b      	str	r3, [r7, #0]
 8002bf8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8002c74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a1d      	ldr	r2, [pc, #116]	@ (8002c74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c04:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c06:	f7fe fefd 	bl	8001a04 <HAL_GetTick>
 8002c0a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c0c:	e009      	b.n	8002c22 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c0e:	f7fe fef9 	bl	8001a04 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c1c:	d901      	bls.n	8002c22 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e022      	b.n	8002c68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c22:	4b14      	ldr	r3, [pc, #80]	@ (8002c74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c2e:	d1ee      	bne.n	8002c0e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c30:	4b10      	ldr	r3, [pc, #64]	@ (8002c74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a0f      	ldr	r2, [pc, #60]	@ (8002c74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c3a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c3c:	f7fe fee2 	bl	8001a04 <HAL_GetTick>
 8002c40:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c42:	e009      	b.n	8002c58 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c44:	f7fe fede 	bl	8001a04 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c52:	d901      	bls.n	8002c58 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e007      	b.n	8002c68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c58:	4b06      	ldr	r3, [pc, #24]	@ (8002c74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c64:	d1ee      	bne.n	8002c44 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40023800 	.word	0x40023800
 8002c74:	40007000 	.word	0x40007000

08002c78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002c80:	2300      	movs	r3, #0
 8002c82:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e29b      	b.n	80031c6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 8087 	beq.w	8002daa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c9c:	4b96      	ldr	r3, [pc, #600]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 030c 	and.w	r3, r3, #12
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d00c      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ca8:	4b93      	ldr	r3, [pc, #588]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 030c 	and.w	r3, r3, #12
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d112      	bne.n	8002cda <HAL_RCC_OscConfig+0x62>
 8002cb4:	4b90      	ldr	r3, [pc, #576]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cc0:	d10b      	bne.n	8002cda <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc2:	4b8d      	ldr	r3, [pc, #564]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d06c      	beq.n	8002da8 <HAL_RCC_OscConfig+0x130>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d168      	bne.n	8002da8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e275      	b.n	80031c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ce2:	d106      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x7a>
 8002ce4:	4b84      	ldr	r3, [pc, #528]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a83      	ldr	r2, [pc, #524]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002cea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cee:	6013      	str	r3, [r2, #0]
 8002cf0:	e02e      	b.n	8002d50 <HAL_RCC_OscConfig+0xd8>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10c      	bne.n	8002d14 <HAL_RCC_OscConfig+0x9c>
 8002cfa:	4b7f      	ldr	r3, [pc, #508]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a7e      	ldr	r2, [pc, #504]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	4b7c      	ldr	r3, [pc, #496]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a7b      	ldr	r2, [pc, #492]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	e01d      	b.n	8002d50 <HAL_RCC_OscConfig+0xd8>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d1c:	d10c      	bne.n	8002d38 <HAL_RCC_OscConfig+0xc0>
 8002d1e:	4b76      	ldr	r3, [pc, #472]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a75      	ldr	r2, [pc, #468]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	4b73      	ldr	r3, [pc, #460]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a72      	ldr	r2, [pc, #456]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	e00b      	b.n	8002d50 <HAL_RCC_OscConfig+0xd8>
 8002d38:	4b6f      	ldr	r3, [pc, #444]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a6e      	ldr	r2, [pc, #440]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d42:	6013      	str	r3, [r2, #0]
 8002d44:	4b6c      	ldr	r3, [pc, #432]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a6b      	ldr	r2, [pc, #428]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d013      	beq.n	8002d80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d58:	f7fe fe54 	bl	8001a04 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d60:	f7fe fe50 	bl	8001a04 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b64      	cmp	r3, #100	@ 0x64
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e229      	b.n	80031c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d72:	4b61      	ldr	r3, [pc, #388]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0f0      	beq.n	8002d60 <HAL_RCC_OscConfig+0xe8>
 8002d7e:	e014      	b.n	8002daa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d80:	f7fe fe40 	bl	8001a04 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d88:	f7fe fe3c 	bl	8001a04 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b64      	cmp	r3, #100	@ 0x64
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e215      	b.n	80031c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d9a:	4b57      	ldr	r3, [pc, #348]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x110>
 8002da6:	e000      	b.n	8002daa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d069      	beq.n	8002e8a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002db6:	4b50      	ldr	r3, [pc, #320]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 030c 	and.w	r3, r3, #12
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00b      	beq.n	8002dda <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dc2:	4b4d      	ldr	r3, [pc, #308]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	d11c      	bne.n	8002e08 <HAL_RCC_OscConfig+0x190>
 8002dce:	4b4a      	ldr	r3, [pc, #296]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d116      	bne.n	8002e08 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dda:	4b47      	ldr	r3, [pc, #284]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d005      	beq.n	8002df2 <HAL_RCC_OscConfig+0x17a>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d001      	beq.n	8002df2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e1e9      	b.n	80031c6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df2:	4b41      	ldr	r3, [pc, #260]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	493d      	ldr	r1, [pc, #244]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e06:	e040      	b.n	8002e8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d023      	beq.n	8002e58 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e10:	4b39      	ldr	r3, [pc, #228]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a38      	ldr	r2, [pc, #224]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e16:	f043 0301 	orr.w	r3, r3, #1
 8002e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1c:	f7fe fdf2 	bl	8001a04 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e24:	f7fe fdee 	bl	8001a04 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e1c7      	b.n	80031c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e36:	4b30      	ldr	r3, [pc, #192]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f0      	beq.n	8002e24 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e42:	4b2d      	ldr	r3, [pc, #180]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4929      	ldr	r1, [pc, #164]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]
 8002e56:	e018      	b.n	8002e8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e58:	4b27      	ldr	r3, [pc, #156]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a26      	ldr	r2, [pc, #152]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e5e:	f023 0301 	bic.w	r3, r3, #1
 8002e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e64:	f7fe fdce 	bl	8001a04 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e6c:	f7fe fdca 	bl	8001a04 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e1a3      	b.n	80031c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d038      	beq.n	8002f08 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d019      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e9e:	4b16      	ldr	r3, [pc, #88]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ea2:	4a15      	ldr	r2, [pc, #84]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002ea4:	f043 0301 	orr.w	r3, r3, #1
 8002ea8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eaa:	f7fe fdab 	bl	8001a04 <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eb2:	f7fe fda7 	bl	8001a04 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e180      	b.n	80031c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002ec6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0f0      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x23a>
 8002ed0:	e01a      	b.n	8002f08 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ed2:	4b09      	ldr	r3, [pc, #36]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002ed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ed6:	4a08      	ldr	r2, [pc, #32]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002ed8:	f023 0301 	bic.w	r3, r3, #1
 8002edc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ede:	f7fe fd91 	bl	8001a04 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee4:	e00a      	b.n	8002efc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee6:	f7fe fd8d 	bl	8001a04 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d903      	bls.n	8002efc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e166      	b.n	80031c6 <HAL_RCC_OscConfig+0x54e>
 8002ef8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002efc:	4b92      	ldr	r3, [pc, #584]	@ (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002efe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1ee      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 80a4 	beq.w	800305e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f16:	4b8c      	ldr	r3, [pc, #560]	@ (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10d      	bne.n	8002f3e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f22:	4b89      	ldr	r3, [pc, #548]	@ (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f26:	4a88      	ldr	r2, [pc, #544]	@ (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002f28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f2e:	4b86      	ldr	r3, [pc, #536]	@ (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f36:	60bb      	str	r3, [r7, #8]
 8002f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f3e:	4b83      	ldr	r3, [pc, #524]	@ (800314c <HAL_RCC_OscConfig+0x4d4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d118      	bne.n	8002f7c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002f4a:	4b80      	ldr	r3, [pc, #512]	@ (800314c <HAL_RCC_OscConfig+0x4d4>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a7f      	ldr	r2, [pc, #508]	@ (800314c <HAL_RCC_OscConfig+0x4d4>)
 8002f50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f56:	f7fe fd55 	bl	8001a04 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f5e:	f7fe fd51 	bl	8001a04 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b64      	cmp	r3, #100	@ 0x64
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e12a      	b.n	80031c6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f70:	4b76      	ldr	r3, [pc, #472]	@ (800314c <HAL_RCC_OscConfig+0x4d4>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d106      	bne.n	8002f92 <HAL_RCC_OscConfig+0x31a>
 8002f84:	4b70      	ldr	r3, [pc, #448]	@ (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f88:	4a6f      	ldr	r2, [pc, #444]	@ (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f90:	e02d      	b.n	8002fee <HAL_RCC_OscConfig+0x376>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10c      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x33c>
 8002f9a:	4b6b      	ldr	r3, [pc, #428]	@ (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9e:	4a6a      	ldr	r2, [pc, #424]	@ (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002fa0:	f023 0301 	bic.w	r3, r3, #1
 8002fa4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fa6:	4b68      	ldr	r3, [pc, #416]	@ (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002faa:	4a67      	ldr	r2, [pc, #412]	@ (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002fac:	f023 0304 	bic.w	r3, r3, #4
 8002fb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fb2:	e01c      	b.n	8002fee <HAL_RCC_OscConfig+0x376>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	2b05      	cmp	r3, #5
 8002fba:	d10c      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x35e>
 8002fbc:	4b62      	ldr	r3, [pc, #392]	@ (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc0:	4a61      	ldr	r2, [pc, #388]	@ (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002fc2:	f043 0304 	orr.w	r3, r3, #4
 8002fc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fc8:	4b5f      	ldr	r3, [pc, #380]	@ (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fcc:	4a5e      	ldr	r2, [pc, #376]	@ (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002fce:	f043 0301 	orr.w	r3, r3, #1
 8002fd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fd4:	e00b      	b.n	8002fee <HAL_RCC_OscConfig+0x376>
 8002fd6:	4b5c      	ldr	r3, [pc, #368]	@ (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fda:	4a5b      	ldr	r2, [pc, #364]	@ (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002fdc:	f023 0301 	bic.w	r3, r3, #1
 8002fe0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fe2:	4b59      	ldr	r3, [pc, #356]	@ (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe6:	4a58      	ldr	r2, [pc, #352]	@ (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002fe8:	f023 0304 	bic.w	r3, r3, #4
 8002fec:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d015      	beq.n	8003022 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff6:	f7fe fd05 	bl	8001a04 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffc:	e00a      	b.n	8003014 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ffe:	f7fe fd01 	bl	8001a04 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	f241 3288 	movw	r2, #5000	@ 0x1388
 800300c:	4293      	cmp	r3, r2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e0d8      	b.n	80031c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003014:	4b4c      	ldr	r3, [pc, #304]	@ (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8003016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0ee      	beq.n	8002ffe <HAL_RCC_OscConfig+0x386>
 8003020:	e014      	b.n	800304c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003022:	f7fe fcef 	bl	8001a04 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003028:	e00a      	b.n	8003040 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302a:	f7fe fceb 	bl	8001a04 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003038:	4293      	cmp	r3, r2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e0c2      	b.n	80031c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003040:	4b41      	ldr	r3, [pc, #260]	@ (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8003042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1ee      	bne.n	800302a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800304c:	7dfb      	ldrb	r3, [r7, #23]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d105      	bne.n	800305e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003052:	4b3d      	ldr	r3, [pc, #244]	@ (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8003054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003056:	4a3c      	ldr	r2, [pc, #240]	@ (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8003058:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800305c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 80ae 	beq.w	80031c4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003068:	4b37      	ldr	r3, [pc, #220]	@ (8003148 <HAL_RCC_OscConfig+0x4d0>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 030c 	and.w	r3, r3, #12
 8003070:	2b08      	cmp	r3, #8
 8003072:	d06d      	beq.n	8003150 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	2b02      	cmp	r3, #2
 800307a:	d14b      	bne.n	8003114 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800307c:	4b32      	ldr	r3, [pc, #200]	@ (8003148 <HAL_RCC_OscConfig+0x4d0>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a31      	ldr	r2, [pc, #196]	@ (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8003082:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7fe fcbc 	bl	8001a04 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003090:	f7fe fcb8 	bl	8001a04 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e091      	b.n	80031c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a2:	4b29      	ldr	r3, [pc, #164]	@ (8003148 <HAL_RCC_OscConfig+0x4d0>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69da      	ldr	r2, [r3, #28]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030bc:	019b      	lsls	r3, r3, #6
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c4:	085b      	lsrs	r3, r3, #1
 80030c6:	3b01      	subs	r3, #1
 80030c8:	041b      	lsls	r3, r3, #16
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d0:	061b      	lsls	r3, r3, #24
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d8:	071b      	lsls	r3, r3, #28
 80030da:	491b      	ldr	r1, [pc, #108]	@ (8003148 <HAL_RCC_OscConfig+0x4d0>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030e0:	4b19      	ldr	r3, [pc, #100]	@ (8003148 <HAL_RCC_OscConfig+0x4d0>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a18      	ldr	r2, [pc, #96]	@ (8003148 <HAL_RCC_OscConfig+0x4d0>)
 80030e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ec:	f7fe fc8a 	bl	8001a04 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f4:	f7fe fc86 	bl	8001a04 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e05f      	b.n	80031c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003106:	4b10      	ldr	r3, [pc, #64]	@ (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0f0      	beq.n	80030f4 <HAL_RCC_OscConfig+0x47c>
 8003112:	e057      	b.n	80031c4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003114:	4b0c      	ldr	r3, [pc, #48]	@ (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a0b      	ldr	r2, [pc, #44]	@ (8003148 <HAL_RCC_OscConfig+0x4d0>)
 800311a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800311e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003120:	f7fe fc70 	bl	8001a04 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003128:	f7fe fc6c 	bl	8001a04 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e045      	b.n	80031c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313a:	4b03      	ldr	r3, [pc, #12]	@ (8003148 <HAL_RCC_OscConfig+0x4d0>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f0      	bne.n	8003128 <HAL_RCC_OscConfig+0x4b0>
 8003146:	e03d      	b.n	80031c4 <HAL_RCC_OscConfig+0x54c>
 8003148:	40023800 	.word	0x40023800
 800314c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003150:	4b1f      	ldr	r3, [pc, #124]	@ (80031d0 <HAL_RCC_OscConfig+0x558>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d030      	beq.n	80031c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003168:	429a      	cmp	r2, r3
 800316a:	d129      	bne.n	80031c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003176:	429a      	cmp	r2, r3
 8003178:	d122      	bne.n	80031c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003180:	4013      	ands	r3, r2
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003186:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003188:	4293      	cmp	r3, r2
 800318a:	d119      	bne.n	80031c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003196:	085b      	lsrs	r3, r3, #1
 8003198:	3b01      	subs	r3, #1
 800319a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800319c:	429a      	cmp	r2, r3
 800319e:	d10f      	bne.n	80031c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031aa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d107      	bne.n	80031c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ba:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031bc:	429a      	cmp	r2, r3
 80031be:	d001      	beq.n	80031c4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e000      	b.n	80031c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40023800 	.word	0x40023800

080031d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80031de:	2300      	movs	r3, #0
 80031e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e0d0      	b.n	800338e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031ec:	4b6a      	ldr	r3, [pc, #424]	@ (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 030f 	and.w	r3, r3, #15
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d910      	bls.n	800321c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fa:	4b67      	ldr	r3, [pc, #412]	@ (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f023 020f 	bic.w	r2, r3, #15
 8003202:	4965      	ldr	r1, [pc, #404]	@ (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	4313      	orrs	r3, r2
 8003208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800320a:	4b63      	ldr	r3, [pc, #396]	@ (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	429a      	cmp	r2, r3
 8003216:	d001      	beq.n	800321c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e0b8      	b.n	800338e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d020      	beq.n	800326a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003234:	4b59      	ldr	r3, [pc, #356]	@ (800339c <HAL_RCC_ClockConfig+0x1c8>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	4a58      	ldr	r2, [pc, #352]	@ (800339c <HAL_RCC_ClockConfig+0x1c8>)
 800323a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800323e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800324c:	4b53      	ldr	r3, [pc, #332]	@ (800339c <HAL_RCC_ClockConfig+0x1c8>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	4a52      	ldr	r2, [pc, #328]	@ (800339c <HAL_RCC_ClockConfig+0x1c8>)
 8003252:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003256:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003258:	4b50      	ldr	r3, [pc, #320]	@ (800339c <HAL_RCC_ClockConfig+0x1c8>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	494d      	ldr	r1, [pc, #308]	@ (800339c <HAL_RCC_ClockConfig+0x1c8>)
 8003266:	4313      	orrs	r3, r2
 8003268:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d040      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d107      	bne.n	800328e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327e:	4b47      	ldr	r3, [pc, #284]	@ (800339c <HAL_RCC_ClockConfig+0x1c8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d115      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e07f      	b.n	800338e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d107      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003296:	4b41      	ldr	r3, [pc, #260]	@ (800339c <HAL_RCC_ClockConfig+0x1c8>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e073      	b.n	800338e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a6:	4b3d      	ldr	r3, [pc, #244]	@ (800339c <HAL_RCC_ClockConfig+0x1c8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e06b      	b.n	800338e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032b6:	4b39      	ldr	r3, [pc, #228]	@ (800339c <HAL_RCC_ClockConfig+0x1c8>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f023 0203 	bic.w	r2, r3, #3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	4936      	ldr	r1, [pc, #216]	@ (800339c <HAL_RCC_ClockConfig+0x1c8>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032c8:	f7fe fb9c 	bl	8001a04 <HAL_GetTick>
 80032cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ce:	e00a      	b.n	80032e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d0:	f7fe fb98 	bl	8001a04 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032de:	4293      	cmp	r3, r2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e053      	b.n	800338e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e6:	4b2d      	ldr	r3, [pc, #180]	@ (800339c <HAL_RCC_ClockConfig+0x1c8>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 020c 	and.w	r2, r3, #12
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d1eb      	bne.n	80032d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032f8:	4b27      	ldr	r3, [pc, #156]	@ (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 030f 	and.w	r3, r3, #15
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d210      	bcs.n	8003328 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003306:	4b24      	ldr	r3, [pc, #144]	@ (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f023 020f 	bic.w	r2, r3, #15
 800330e:	4922      	ldr	r1, [pc, #136]	@ (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	4313      	orrs	r3, r2
 8003314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003316:	4b20      	ldr	r3, [pc, #128]	@ (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d001      	beq.n	8003328 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e032      	b.n	800338e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003334:	4b19      	ldr	r3, [pc, #100]	@ (800339c <HAL_RCC_ClockConfig+0x1c8>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	4916      	ldr	r1, [pc, #88]	@ (800339c <HAL_RCC_ClockConfig+0x1c8>)
 8003342:	4313      	orrs	r3, r2
 8003344:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	2b00      	cmp	r3, #0
 8003350:	d009      	beq.n	8003366 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003352:	4b12      	ldr	r3, [pc, #72]	@ (800339c <HAL_RCC_ClockConfig+0x1c8>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	490e      	ldr	r1, [pc, #56]	@ (800339c <HAL_RCC_ClockConfig+0x1c8>)
 8003362:	4313      	orrs	r3, r2
 8003364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003366:	f000 f821 	bl	80033ac <HAL_RCC_GetSysClockFreq>
 800336a:	4602      	mov	r2, r0
 800336c:	4b0b      	ldr	r3, [pc, #44]	@ (800339c <HAL_RCC_ClockConfig+0x1c8>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	091b      	lsrs	r3, r3, #4
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	490a      	ldr	r1, [pc, #40]	@ (80033a0 <HAL_RCC_ClockConfig+0x1cc>)
 8003378:	5ccb      	ldrb	r3, [r1, r3]
 800337a:	fa22 f303 	lsr.w	r3, r2, r3
 800337e:	4a09      	ldr	r2, [pc, #36]	@ (80033a4 <HAL_RCC_ClockConfig+0x1d0>)
 8003380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003382:	4b09      	ldr	r3, [pc, #36]	@ (80033a8 <HAL_RCC_ClockConfig+0x1d4>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7fe fa4a 	bl	8001820 <HAL_InitTick>

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40023c00 	.word	0x40023c00
 800339c:	40023800 	.word	0x40023800
 80033a0:	08007b28 	.word	0x08007b28
 80033a4:	20000000 	.word	0x20000000
 80033a8:	20000004 	.word	0x20000004

080033ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033b0:	b094      	sub	sp, #80	@ 0x50
 80033b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80033b4:	2300      	movs	r3, #0
 80033b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80033b8:	2300      	movs	r3, #0
 80033ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033bc:	2300      	movs	r3, #0
 80033be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80033c0:	2300      	movs	r3, #0
 80033c2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033c4:	4b79      	ldr	r3, [pc, #484]	@ (80035ac <HAL_RCC_GetSysClockFreq+0x200>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 030c 	and.w	r3, r3, #12
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d00d      	beq.n	80033ec <HAL_RCC_GetSysClockFreq+0x40>
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	f200 80e1 	bhi.w	8003598 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <HAL_RCC_GetSysClockFreq+0x34>
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d003      	beq.n	80033e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80033de:	e0db      	b.n	8003598 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033e0:	4b73      	ldr	r3, [pc, #460]	@ (80035b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80033e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033e4:	e0db      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033e6:	4b73      	ldr	r3, [pc, #460]	@ (80035b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80033e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033ea:	e0d8      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033ec:	4b6f      	ldr	r3, [pc, #444]	@ (80035ac <HAL_RCC_GetSysClockFreq+0x200>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033f4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80033f6:	4b6d      	ldr	r3, [pc, #436]	@ (80035ac <HAL_RCC_GetSysClockFreq+0x200>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d063      	beq.n	80034ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003402:	4b6a      	ldr	r3, [pc, #424]	@ (80035ac <HAL_RCC_GetSysClockFreq+0x200>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	099b      	lsrs	r3, r3, #6
 8003408:	2200      	movs	r2, #0
 800340a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800340c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800340e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003414:	633b      	str	r3, [r7, #48]	@ 0x30
 8003416:	2300      	movs	r3, #0
 8003418:	637b      	str	r3, [r7, #52]	@ 0x34
 800341a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800341e:	4622      	mov	r2, r4
 8003420:	462b      	mov	r3, r5
 8003422:	f04f 0000 	mov.w	r0, #0
 8003426:	f04f 0100 	mov.w	r1, #0
 800342a:	0159      	lsls	r1, r3, #5
 800342c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003430:	0150      	lsls	r0, r2, #5
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
 8003436:	4621      	mov	r1, r4
 8003438:	1a51      	subs	r1, r2, r1
 800343a:	6139      	str	r1, [r7, #16]
 800343c:	4629      	mov	r1, r5
 800343e:	eb63 0301 	sbc.w	r3, r3, r1
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	f04f 0300 	mov.w	r3, #0
 800344c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003450:	4659      	mov	r1, fp
 8003452:	018b      	lsls	r3, r1, #6
 8003454:	4651      	mov	r1, sl
 8003456:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800345a:	4651      	mov	r1, sl
 800345c:	018a      	lsls	r2, r1, #6
 800345e:	4651      	mov	r1, sl
 8003460:	ebb2 0801 	subs.w	r8, r2, r1
 8003464:	4659      	mov	r1, fp
 8003466:	eb63 0901 	sbc.w	r9, r3, r1
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	f04f 0300 	mov.w	r3, #0
 8003472:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003476:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800347a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800347e:	4690      	mov	r8, r2
 8003480:	4699      	mov	r9, r3
 8003482:	4623      	mov	r3, r4
 8003484:	eb18 0303 	adds.w	r3, r8, r3
 8003488:	60bb      	str	r3, [r7, #8]
 800348a:	462b      	mov	r3, r5
 800348c:	eb49 0303 	adc.w	r3, r9, r3
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	f04f 0300 	mov.w	r3, #0
 800349a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800349e:	4629      	mov	r1, r5
 80034a0:	024b      	lsls	r3, r1, #9
 80034a2:	4621      	mov	r1, r4
 80034a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034a8:	4621      	mov	r1, r4
 80034aa:	024a      	lsls	r2, r1, #9
 80034ac:	4610      	mov	r0, r2
 80034ae:	4619      	mov	r1, r3
 80034b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034b2:	2200      	movs	r2, #0
 80034b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80034bc:	f7fc fec0 	bl	8000240 <__aeabi_uldivmod>
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	4613      	mov	r3, r2
 80034c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034c8:	e058      	b.n	800357c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ca:	4b38      	ldr	r3, [pc, #224]	@ (80035ac <HAL_RCC_GetSysClockFreq+0x200>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	099b      	lsrs	r3, r3, #6
 80034d0:	2200      	movs	r2, #0
 80034d2:	4618      	mov	r0, r3
 80034d4:	4611      	mov	r1, r2
 80034d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034da:	623b      	str	r3, [r7, #32]
 80034dc:	2300      	movs	r3, #0
 80034de:	627b      	str	r3, [r7, #36]	@ 0x24
 80034e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034e4:	4642      	mov	r2, r8
 80034e6:	464b      	mov	r3, r9
 80034e8:	f04f 0000 	mov.w	r0, #0
 80034ec:	f04f 0100 	mov.w	r1, #0
 80034f0:	0159      	lsls	r1, r3, #5
 80034f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034f6:	0150      	lsls	r0, r2, #5
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	4641      	mov	r1, r8
 80034fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8003502:	4649      	mov	r1, r9
 8003504:	eb63 0b01 	sbc.w	fp, r3, r1
 8003508:	f04f 0200 	mov.w	r2, #0
 800350c:	f04f 0300 	mov.w	r3, #0
 8003510:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003514:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003518:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800351c:	ebb2 040a 	subs.w	r4, r2, sl
 8003520:	eb63 050b 	sbc.w	r5, r3, fp
 8003524:	f04f 0200 	mov.w	r2, #0
 8003528:	f04f 0300 	mov.w	r3, #0
 800352c:	00eb      	lsls	r3, r5, #3
 800352e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003532:	00e2      	lsls	r2, r4, #3
 8003534:	4614      	mov	r4, r2
 8003536:	461d      	mov	r5, r3
 8003538:	4643      	mov	r3, r8
 800353a:	18e3      	adds	r3, r4, r3
 800353c:	603b      	str	r3, [r7, #0]
 800353e:	464b      	mov	r3, r9
 8003540:	eb45 0303 	adc.w	r3, r5, r3
 8003544:	607b      	str	r3, [r7, #4]
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	f04f 0300 	mov.w	r3, #0
 800354e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003552:	4629      	mov	r1, r5
 8003554:	028b      	lsls	r3, r1, #10
 8003556:	4621      	mov	r1, r4
 8003558:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800355c:	4621      	mov	r1, r4
 800355e:	028a      	lsls	r2, r1, #10
 8003560:	4610      	mov	r0, r2
 8003562:	4619      	mov	r1, r3
 8003564:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003566:	2200      	movs	r2, #0
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	61fa      	str	r2, [r7, #28]
 800356c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003570:	f7fc fe66 	bl	8000240 <__aeabi_uldivmod>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4613      	mov	r3, r2
 800357a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800357c:	4b0b      	ldr	r3, [pc, #44]	@ (80035ac <HAL_RCC_GetSysClockFreq+0x200>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	0c1b      	lsrs	r3, r3, #16
 8003582:	f003 0303 	and.w	r3, r3, #3
 8003586:	3301      	adds	r3, #1
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800358c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800358e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003590:	fbb2 f3f3 	udiv	r3, r2, r3
 8003594:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003596:	e002      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003598:	4b05      	ldr	r3, [pc, #20]	@ (80035b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800359a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800359c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800359e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3750      	adds	r7, #80	@ 0x50
 80035a4:	46bd      	mov	sp, r7
 80035a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035aa:	bf00      	nop
 80035ac:	40023800 	.word	0x40023800
 80035b0:	00f42400 	.word	0x00f42400
 80035b4:	007a1200 	.word	0x007a1200

080035b8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035bc:	4b03      	ldr	r3, [pc, #12]	@ (80035cc <HAL_RCC_GetHCLKFreq+0x14>)
 80035be:	681b      	ldr	r3, [r3, #0]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	20000000 	.word	0x20000000

080035d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035d4:	f7ff fff0 	bl	80035b8 <HAL_RCC_GetHCLKFreq>
 80035d8:	4602      	mov	r2, r0
 80035da:	4b05      	ldr	r3, [pc, #20]	@ (80035f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	0a9b      	lsrs	r3, r3, #10
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	4903      	ldr	r1, [pc, #12]	@ (80035f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035e6:	5ccb      	ldrb	r3, [r1, r3]
 80035e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40023800 	.word	0x40023800
 80035f4:	08007b38 	.word	0x08007b38

080035f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035fc:	f7ff ffdc 	bl	80035b8 <HAL_RCC_GetHCLKFreq>
 8003600:	4602      	mov	r2, r0
 8003602:	4b05      	ldr	r3, [pc, #20]	@ (8003618 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	0b5b      	lsrs	r3, r3, #13
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	4903      	ldr	r1, [pc, #12]	@ (800361c <HAL_RCC_GetPCLK2Freq+0x24>)
 800360e:	5ccb      	ldrb	r3, [r1, r3]
 8003610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003614:	4618      	mov	r0, r3
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40023800 	.word	0x40023800
 800361c:	08007b38 	.word	0x08007b38

08003620 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	220f      	movs	r2, #15
 800362e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003630:	4b12      	ldr	r3, [pc, #72]	@ (800367c <HAL_RCC_GetClockConfig+0x5c>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f003 0203 	and.w	r2, r3, #3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800363c:	4b0f      	ldr	r3, [pc, #60]	@ (800367c <HAL_RCC_GetClockConfig+0x5c>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003648:	4b0c      	ldr	r3, [pc, #48]	@ (800367c <HAL_RCC_GetClockConfig+0x5c>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003654:	4b09      	ldr	r3, [pc, #36]	@ (800367c <HAL_RCC_GetClockConfig+0x5c>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	08db      	lsrs	r3, r3, #3
 800365a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003662:	4b07      	ldr	r3, [pc, #28]	@ (8003680 <HAL_RCC_GetClockConfig+0x60>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 020f 	and.w	r2, r3, #15
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	601a      	str	r2, [r3, #0]
}
 800366e:	bf00      	nop
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40023800 	.word	0x40023800
 8003680:	40023c00 	.word	0x40023c00

08003684 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b088      	sub	sp, #32
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800368c:	2300      	movs	r3, #0
 800368e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003690:	2300      	movs	r3, #0
 8003692:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003694:	2300      	movs	r3, #0
 8003696:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003698:	2300      	movs	r3, #0
 800369a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d012      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80036ac:	4b69      	ldr	r3, [pc, #420]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	4a68      	ldr	r2, [pc, #416]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80036b6:	6093      	str	r3, [r2, #8]
 80036b8:	4b66      	ldr	r3, [pc, #408]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036c0:	4964      	ldr	r1, [pc, #400]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80036ce:	2301      	movs	r3, #1
 80036d0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d017      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036de:	4b5d      	ldr	r3, [pc, #372]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036e4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ec:	4959      	ldr	r1, [pc, #356]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036fc:	d101      	bne.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80036fe:	2301      	movs	r3, #1
 8003700:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800370a:	2301      	movs	r3, #1
 800370c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d017      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800371a:	4b4e      	ldr	r3, [pc, #312]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800371c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003720:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003728:	494a      	ldr	r1, [pc, #296]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003734:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003738:	d101      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800373a:	2301      	movs	r3, #1
 800373c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003746:	2301      	movs	r3, #1
 8003748:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003756:	2301      	movs	r3, #1
 8003758:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0320 	and.w	r3, r3, #32
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 808b 	beq.w	800387e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003768:	4b3a      	ldr	r3, [pc, #232]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800376a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376c:	4a39      	ldr	r2, [pc, #228]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800376e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003772:	6413      	str	r3, [r2, #64]	@ 0x40
 8003774:	4b37      	ldr	r3, [pc, #220]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003778:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800377c:	60bb      	str	r3, [r7, #8]
 800377e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003780:	4b35      	ldr	r3, [pc, #212]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a34      	ldr	r2, [pc, #208]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003786:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800378a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800378c:	f7fe f93a 	bl	8001a04 <HAL_GetTick>
 8003790:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003794:	f7fe f936 	bl	8001a04 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b64      	cmp	r3, #100	@ 0x64
 80037a0:	d901      	bls.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e38f      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80037a6:	4b2c      	ldr	r3, [pc, #176]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0f0      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037b2:	4b28      	ldr	r3, [pc, #160]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037ba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d035      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d02e      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037d0:	4b20      	ldr	r3, [pc, #128]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037d8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037da:	4b1e      	ldr	r3, [pc, #120]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037de:	4a1d      	ldr	r2, [pc, #116]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037e4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ea:	4a1a      	ldr	r2, [pc, #104]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037f0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80037f2:	4a18      	ldr	r2, [pc, #96]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80037f8:	4b16      	ldr	r3, [pc, #88]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b01      	cmp	r3, #1
 8003802:	d114      	bne.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003804:	f7fe f8fe 	bl	8001a04 <HAL_GetTick>
 8003808:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800380a:	e00a      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800380c:	f7fe f8fa 	bl	8001a04 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800381a:	4293      	cmp	r3, r2
 800381c:	d901      	bls.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e351      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003822:	4b0c      	ldr	r3, [pc, #48]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0ee      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003832:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003836:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800383a:	d111      	bne.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800383c:	4b05      	ldr	r3, [pc, #20]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003848:	4b04      	ldr	r3, [pc, #16]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800384a:	400b      	ands	r3, r1
 800384c:	4901      	ldr	r1, [pc, #4]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800384e:	4313      	orrs	r3, r2
 8003850:	608b      	str	r3, [r1, #8]
 8003852:	e00b      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003854:	40023800 	.word	0x40023800
 8003858:	40007000 	.word	0x40007000
 800385c:	0ffffcff 	.word	0x0ffffcff
 8003860:	4bac      	ldr	r3, [pc, #688]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	4aab      	ldr	r2, [pc, #684]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003866:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800386a:	6093      	str	r3, [r2, #8]
 800386c:	4ba9      	ldr	r3, [pc, #676]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800386e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003878:	49a6      	ldr	r1, [pc, #664]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800387a:	4313      	orrs	r3, r2
 800387c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0310 	and.w	r3, r3, #16
 8003886:	2b00      	cmp	r3, #0
 8003888:	d010      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800388a:	4ba2      	ldr	r3, [pc, #648]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800388c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003890:	4aa0      	ldr	r2, [pc, #640]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003892:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003896:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800389a:	4b9e      	ldr	r3, [pc, #632]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800389c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a4:	499b      	ldr	r1, [pc, #620]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00a      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038b8:	4b96      	ldr	r3, [pc, #600]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038be:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038c6:	4993      	ldr	r1, [pc, #588]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038da:	4b8e      	ldr	r3, [pc, #568]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038e8:	498a      	ldr	r1, [pc, #552]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00a      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038fc:	4b85      	ldr	r3, [pc, #532]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003902:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800390a:	4982      	ldr	r1, [pc, #520]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800390c:	4313      	orrs	r3, r2
 800390e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800391e:	4b7d      	ldr	r3, [pc, #500]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003924:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800392c:	4979      	ldr	r1, [pc, #484]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800392e:	4313      	orrs	r3, r2
 8003930:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00a      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003940:	4b74      	ldr	r3, [pc, #464]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003946:	f023 0203 	bic.w	r2, r3, #3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800394e:	4971      	ldr	r1, [pc, #452]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003950:	4313      	orrs	r3, r2
 8003952:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003962:	4b6c      	ldr	r3, [pc, #432]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003964:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003968:	f023 020c 	bic.w	r2, r3, #12
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003970:	4968      	ldr	r1, [pc, #416]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003972:	4313      	orrs	r3, r2
 8003974:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00a      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003984:	4b63      	ldr	r3, [pc, #396]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800398a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003992:	4960      	ldr	r1, [pc, #384]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003994:	4313      	orrs	r3, r2
 8003996:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00a      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039a6:	4b5b      	ldr	r3, [pc, #364]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ac:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039b4:	4957      	ldr	r1, [pc, #348]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00a      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039c8:	4b52      	ldr	r3, [pc, #328]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d6:	494f      	ldr	r1, [pc, #316]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00a      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80039ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039f0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f8:	4946      	ldr	r1, [pc, #280]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00a      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003a0c:	4b41      	ldr	r3, [pc, #260]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a12:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a1a:	493e      	ldr	r1, [pc, #248]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00a      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003a2e:	4b39      	ldr	r3, [pc, #228]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a34:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a3c:	4935      	ldr	r1, [pc, #212]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00a      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a50:	4b30      	ldr	r3, [pc, #192]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a56:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a5e:	492d      	ldr	r1, [pc, #180]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d011      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a72:	4b28      	ldr	r3, [pc, #160]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a78:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a80:	4924      	ldr	r1, [pc, #144]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a90:	d101      	bne.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003a92:	2301      	movs	r3, #1
 8003a94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ab2:	4b18      	ldr	r3, [pc, #96]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ab8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ac0:	4914      	ldr	r1, [pc, #80]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00b      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ada:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ae4:	490b      	ldr	r1, [pc, #44]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00f      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003af8:	4b06      	ldr	r3, [pc, #24]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003afe:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b08:	4902      	ldr	r1, [pc, #8]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003b10:	e002      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003b12:	bf00      	nop
 8003b14:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00b      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b24:	4b8a      	ldr	r3, [pc, #552]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b2a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b34:	4986      	ldr	r1, [pc, #536]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00b      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003b48:	4b81      	ldr	r3, [pc, #516]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b4e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b58:	497d      	ldr	r1, [pc, #500]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d006      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 80d6 	beq.w	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b74:	4b76      	ldr	r3, [pc, #472]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a75      	ldr	r2, [pc, #468]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b7a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003b7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b80:	f7fd ff40 	bl	8001a04 <HAL_GetTick>
 8003b84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b86:	e008      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b88:	f7fd ff3c 	bl	8001a04 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b64      	cmp	r3, #100	@ 0x64
 8003b94:	d901      	bls.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e195      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b9a:	4b6d      	ldr	r3, [pc, #436]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1f0      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d021      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d11d      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003bba:	4b65      	ldr	r3, [pc, #404]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bc0:	0c1b      	lsrs	r3, r3, #16
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003bc8:	4b61      	ldr	r3, [pc, #388]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bce:	0e1b      	lsrs	r3, r3, #24
 8003bd0:	f003 030f 	and.w	r3, r3, #15
 8003bd4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	019a      	lsls	r2, r3, #6
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	041b      	lsls	r3, r3, #16
 8003be0:	431a      	orrs	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	061b      	lsls	r3, r3, #24
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	071b      	lsls	r3, r3, #28
 8003bee:	4958      	ldr	r1, [pc, #352]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d004      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c0a:	d00a      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d02e      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c20:	d129      	bne.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c22:	4b4b      	ldr	r3, [pc, #300]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c28:	0c1b      	lsrs	r3, r3, #16
 8003c2a:	f003 0303 	and.w	r3, r3, #3
 8003c2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c30:	4b47      	ldr	r3, [pc, #284]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c36:	0f1b      	lsrs	r3, r3, #28
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	019a      	lsls	r2, r3, #6
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	041b      	lsls	r3, r3, #16
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	061b      	lsls	r3, r3, #24
 8003c50:	431a      	orrs	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	071b      	lsls	r3, r3, #28
 8003c56:	493e      	ldr	r1, [pc, #248]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c5e:	4b3c      	ldr	r3, [pc, #240]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c64:	f023 021f 	bic.w	r2, r3, #31
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	4938      	ldr	r1, [pc, #224]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d01d      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c82:	4b33      	ldr	r3, [pc, #204]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c88:	0e1b      	lsrs	r3, r3, #24
 8003c8a:	f003 030f 	and.w	r3, r3, #15
 8003c8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c90:	4b2f      	ldr	r3, [pc, #188]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c96:	0f1b      	lsrs	r3, r3, #28
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	019a      	lsls	r2, r3, #6
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	041b      	lsls	r3, r3, #16
 8003caa:	431a      	orrs	r2, r3
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	061b      	lsls	r3, r3, #24
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	071b      	lsls	r3, r3, #28
 8003cb6:	4926      	ldr	r1, [pc, #152]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d011      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	019a      	lsls	r2, r3, #6
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	041b      	lsls	r3, r3, #16
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	061b      	lsls	r3, r3, #24
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	071b      	lsls	r3, r3, #28
 8003ce6:	491a      	ldr	r1, [pc, #104]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003cee:	4b18      	ldr	r3, [pc, #96]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a17      	ldr	r2, [pc, #92]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cf4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003cf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cfa:	f7fd fe83 	bl	8001a04 <HAL_GetTick>
 8003cfe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d00:	e008      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d02:	f7fd fe7f 	bl	8001a04 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b64      	cmp	r3, #100	@ 0x64
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e0d8      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d14:	4b0e      	ldr	r3, [pc, #56]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0f0      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	f040 80ce 	bne.w	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d28:	4b09      	ldr	r3, [pc, #36]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a08      	ldr	r2, [pc, #32]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d34:	f7fd fe66 	bl	8001a04 <HAL_GetTick>
 8003d38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d3a:	e00b      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d3c:	f7fd fe62 	bl	8001a04 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b64      	cmp	r3, #100	@ 0x64
 8003d48:	d904      	bls.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e0bb      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003d4e:	bf00      	nop
 8003d50:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d54:	4b5e      	ldr	r3, [pc, #376]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d60:	d0ec      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d009      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d02e      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d12a      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d8a:	4b51      	ldr	r3, [pc, #324]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d90:	0c1b      	lsrs	r3, r3, #16
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d98:	4b4d      	ldr	r3, [pc, #308]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d9e:	0f1b      	lsrs	r3, r3, #28
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	019a      	lsls	r2, r3, #6
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	041b      	lsls	r3, r3, #16
 8003db0:	431a      	orrs	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	061b      	lsls	r3, r3, #24
 8003db8:	431a      	orrs	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	071b      	lsls	r3, r3, #28
 8003dbe:	4944      	ldr	r1, [pc, #272]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003dc6:	4b42      	ldr	r3, [pc, #264]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003dcc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	021b      	lsls	r3, r3, #8
 8003dd8:	493d      	ldr	r1, [pc, #244]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d022      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003df0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003df4:	d11d      	bne.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003df6:	4b36      	ldr	r3, [pc, #216]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dfc:	0e1b      	lsrs	r3, r3, #24
 8003dfe:	f003 030f 	and.w	r3, r3, #15
 8003e02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e04:	4b32      	ldr	r3, [pc, #200]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e0a:	0f1b      	lsrs	r3, r3, #28
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	019a      	lsls	r2, r3, #6
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	041b      	lsls	r3, r3, #16
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	061b      	lsls	r3, r3, #24
 8003e24:	431a      	orrs	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	071b      	lsls	r3, r3, #28
 8003e2a:	4929      	ldr	r1, [pc, #164]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d028      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e3e:	4b24      	ldr	r3, [pc, #144]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e44:	0e1b      	lsrs	r3, r3, #24
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e4c:	4b20      	ldr	r3, [pc, #128]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e52:	0c1b      	lsrs	r3, r3, #16
 8003e54:	f003 0303 	and.w	r3, r3, #3
 8003e58:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	019a      	lsls	r2, r3, #6
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	041b      	lsls	r3, r3, #16
 8003e64:	431a      	orrs	r2, r3
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	061b      	lsls	r3, r3, #24
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	071b      	lsls	r3, r3, #28
 8003e72:	4917      	ldr	r1, [pc, #92]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003e7a:	4b15      	ldr	r3, [pc, #84]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e80:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e88:	4911      	ldr	r1, [pc, #68]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e90:	4b0f      	ldr	r3, [pc, #60]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a0e      	ldr	r2, [pc, #56]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e9c:	f7fd fdb2 	bl	8001a04 <HAL_GetTick>
 8003ea0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ea4:	f7fd fdae 	bl	8001a04 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b64      	cmp	r3, #100	@ 0x64
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e007      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003eb6:	4b06      	ldr	r3, [pc, #24]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ebe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ec2:	d1ef      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3720      	adds	r7, #32
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40023800 	.word	0x40023800

08003ed4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e049      	b.n	8003f7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d106      	bne.n	8003f00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f841 	bl	8003f82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2202      	movs	r2, #2
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3304      	adds	r3, #4
 8003f10:	4619      	mov	r1, r3
 8003f12:	4610      	mov	r0, r2
 8003f14:	f000 f9e8 	bl	80042e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
	...

08003f98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d001      	beq.n	8003fb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e054      	b.n	800405a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0201 	orr.w	r2, r2, #1
 8003fc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a26      	ldr	r2, [pc, #152]	@ (8004068 <HAL_TIM_Base_Start_IT+0xd0>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d022      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x80>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fda:	d01d      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x80>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a22      	ldr	r2, [pc, #136]	@ (800406c <HAL_TIM_Base_Start_IT+0xd4>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d018      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x80>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a21      	ldr	r2, [pc, #132]	@ (8004070 <HAL_TIM_Base_Start_IT+0xd8>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d013      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x80>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a1f      	ldr	r2, [pc, #124]	@ (8004074 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d00e      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x80>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a1e      	ldr	r2, [pc, #120]	@ (8004078 <HAL_TIM_Base_Start_IT+0xe0>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d009      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x80>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a1c      	ldr	r2, [pc, #112]	@ (800407c <HAL_TIM_Base_Start_IT+0xe4>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d004      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x80>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a1b      	ldr	r2, [pc, #108]	@ (8004080 <HAL_TIM_Base_Start_IT+0xe8>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d115      	bne.n	8004044 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689a      	ldr	r2, [r3, #8]
 800401e:	4b19      	ldr	r3, [pc, #100]	@ (8004084 <HAL_TIM_Base_Start_IT+0xec>)
 8004020:	4013      	ands	r3, r2
 8004022:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2b06      	cmp	r3, #6
 8004028:	d015      	beq.n	8004056 <HAL_TIM_Base_Start_IT+0xbe>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004030:	d011      	beq.n	8004056 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f042 0201 	orr.w	r2, r2, #1
 8004040:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004042:	e008      	b.n	8004056 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0201 	orr.w	r2, r2, #1
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	e000      	b.n	8004058 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004056:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	40010000 	.word	0x40010000
 800406c:	40000400 	.word	0x40000400
 8004070:	40000800 	.word	0x40000800
 8004074:	40000c00 	.word	0x40000c00
 8004078:	40010400 	.word	0x40010400
 800407c:	40014000 	.word	0x40014000
 8004080:	40001800 	.word	0x40001800
 8004084:	00010007 	.word	0x00010007

08004088 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d020      	beq.n	80040ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d01b      	beq.n	80040ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f06f 0202 	mvn.w	r2, #2
 80040bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	f003 0303 	and.w	r3, r3, #3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f8e9 	bl	80042aa <HAL_TIM_IC_CaptureCallback>
 80040d8:	e005      	b.n	80040e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f8db 	bl	8004296 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f8ec 	bl	80042be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f003 0304 	and.w	r3, r3, #4
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d020      	beq.n	8004138 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d01b      	beq.n	8004138 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f06f 0204 	mvn.w	r2, #4
 8004108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2202      	movs	r2, #2
 800410e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f8c3 	bl	80042aa <HAL_TIM_IC_CaptureCallback>
 8004124:	e005      	b.n	8004132 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f8b5 	bl	8004296 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f8c6 	bl	80042be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f003 0308 	and.w	r3, r3, #8
 800413e:	2b00      	cmp	r3, #0
 8004140:	d020      	beq.n	8004184 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f003 0308 	and.w	r3, r3, #8
 8004148:	2b00      	cmp	r3, #0
 800414a:	d01b      	beq.n	8004184 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f06f 0208 	mvn.w	r2, #8
 8004154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2204      	movs	r2, #4
 800415a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f89d 	bl	80042aa <HAL_TIM_IC_CaptureCallback>
 8004170:	e005      	b.n	800417e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f88f 	bl	8004296 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f8a0 	bl	80042be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f003 0310 	and.w	r3, r3, #16
 800418a:	2b00      	cmp	r3, #0
 800418c:	d020      	beq.n	80041d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f003 0310 	and.w	r3, r3, #16
 8004194:	2b00      	cmp	r3, #0
 8004196:	d01b      	beq.n	80041d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f06f 0210 	mvn.w	r2, #16
 80041a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2208      	movs	r2, #8
 80041a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f877 	bl	80042aa <HAL_TIM_IC_CaptureCallback>
 80041bc:	e005      	b.n	80041ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f869 	bl	8004296 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 f87a 	bl	80042be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00c      	beq.n	80041f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d007      	beq.n	80041f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f06f 0201 	mvn.w	r2, #1
 80041ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7fd fa18 	bl	8001624 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d104      	bne.n	8004208 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00c      	beq.n	8004222 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800420e:	2b00      	cmp	r3, #0
 8004210:	d007      	beq.n	8004222 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800421a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f913 	bl	8004448 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00c      	beq.n	8004246 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004232:	2b00      	cmp	r3, #0
 8004234:	d007      	beq.n	8004246 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800423e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f90b 	bl	800445c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00c      	beq.n	800426a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004256:	2b00      	cmp	r3, #0
 8004258:	d007      	beq.n	800426a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f834 	bl	80042d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	f003 0320 	and.w	r3, r3, #32
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00c      	beq.n	800428e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f003 0320 	and.w	r3, r3, #32
 800427a:	2b00      	cmp	r3, #0
 800427c:	d007      	beq.n	800428e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f06f 0220 	mvn.w	r2, #32
 8004286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f8d3 	bl	8004434 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800428e:	bf00      	nop
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b083      	sub	sp, #12
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042be:	b480      	push	{r7}
 80042c0:	b083      	sub	sp, #12
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
	...

080042e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a43      	ldr	r2, [pc, #268]	@ (8004408 <TIM_Base_SetConfig+0x120>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d013      	beq.n	8004328 <TIM_Base_SetConfig+0x40>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004306:	d00f      	beq.n	8004328 <TIM_Base_SetConfig+0x40>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a40      	ldr	r2, [pc, #256]	@ (800440c <TIM_Base_SetConfig+0x124>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d00b      	beq.n	8004328 <TIM_Base_SetConfig+0x40>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a3f      	ldr	r2, [pc, #252]	@ (8004410 <TIM_Base_SetConfig+0x128>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d007      	beq.n	8004328 <TIM_Base_SetConfig+0x40>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a3e      	ldr	r2, [pc, #248]	@ (8004414 <TIM_Base_SetConfig+0x12c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d003      	beq.n	8004328 <TIM_Base_SetConfig+0x40>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a3d      	ldr	r2, [pc, #244]	@ (8004418 <TIM_Base_SetConfig+0x130>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d108      	bne.n	800433a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800432e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	4313      	orrs	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a32      	ldr	r2, [pc, #200]	@ (8004408 <TIM_Base_SetConfig+0x120>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d02b      	beq.n	800439a <TIM_Base_SetConfig+0xb2>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004348:	d027      	beq.n	800439a <TIM_Base_SetConfig+0xb2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a2f      	ldr	r2, [pc, #188]	@ (800440c <TIM_Base_SetConfig+0x124>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d023      	beq.n	800439a <TIM_Base_SetConfig+0xb2>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a2e      	ldr	r2, [pc, #184]	@ (8004410 <TIM_Base_SetConfig+0x128>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d01f      	beq.n	800439a <TIM_Base_SetConfig+0xb2>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a2d      	ldr	r2, [pc, #180]	@ (8004414 <TIM_Base_SetConfig+0x12c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d01b      	beq.n	800439a <TIM_Base_SetConfig+0xb2>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a2c      	ldr	r2, [pc, #176]	@ (8004418 <TIM_Base_SetConfig+0x130>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d017      	beq.n	800439a <TIM_Base_SetConfig+0xb2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a2b      	ldr	r2, [pc, #172]	@ (800441c <TIM_Base_SetConfig+0x134>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d013      	beq.n	800439a <TIM_Base_SetConfig+0xb2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a2a      	ldr	r2, [pc, #168]	@ (8004420 <TIM_Base_SetConfig+0x138>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d00f      	beq.n	800439a <TIM_Base_SetConfig+0xb2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a29      	ldr	r2, [pc, #164]	@ (8004424 <TIM_Base_SetConfig+0x13c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d00b      	beq.n	800439a <TIM_Base_SetConfig+0xb2>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a28      	ldr	r2, [pc, #160]	@ (8004428 <TIM_Base_SetConfig+0x140>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d007      	beq.n	800439a <TIM_Base_SetConfig+0xb2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a27      	ldr	r2, [pc, #156]	@ (800442c <TIM_Base_SetConfig+0x144>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d003      	beq.n	800439a <TIM_Base_SetConfig+0xb2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a26      	ldr	r2, [pc, #152]	@ (8004430 <TIM_Base_SetConfig+0x148>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d108      	bne.n	80043ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	689a      	ldr	r2, [r3, #8]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a0e      	ldr	r2, [pc, #56]	@ (8004408 <TIM_Base_SetConfig+0x120>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d003      	beq.n	80043da <TIM_Base_SetConfig+0xf2>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a10      	ldr	r2, [pc, #64]	@ (8004418 <TIM_Base_SetConfig+0x130>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d103      	bne.n	80043e2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	691a      	ldr	r2, [r3, #16]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f043 0204 	orr.w	r2, r3, #4
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	601a      	str	r2, [r3, #0]
}
 80043fa:	bf00      	nop
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	40010000 	.word	0x40010000
 800440c:	40000400 	.word	0x40000400
 8004410:	40000800 	.word	0x40000800
 8004414:	40000c00 	.word	0x40000c00
 8004418:	40010400 	.word	0x40010400
 800441c:	40014000 	.word	0x40014000
 8004420:	40014400 	.word	0x40014400
 8004424:	40014800 	.word	0x40014800
 8004428:	40001800 	.word	0x40001800
 800442c:	40001c00 	.word	0x40001c00
 8004430:	40002000 	.word	0x40002000

08004434 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e040      	b.n	8004504 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004486:	2b00      	cmp	r3, #0
 8004488:	d106      	bne.n	8004498 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7fd f964 	bl	8001760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2224      	movs	r2, #36	@ 0x24
 800449c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 0201 	bic.w	r2, r2, #1
 80044ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d002      	beq.n	80044bc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 fa8c 	bl	80049d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f825 	bl	800450c <UART_SetConfig>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d101      	bne.n	80044cc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e01b      	b.n	8004504 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689a      	ldr	r2, [r3, #8]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0201 	orr.w	r2, r2, #1
 80044fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 fb0b 	bl	8004b18 <UART_CheckIdleState>
 8004502:	4603      	mov	r3, r0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b088      	sub	sp, #32
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004514:	2300      	movs	r3, #0
 8004516:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	431a      	orrs	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	69db      	ldr	r3, [r3, #28]
 800452c:	4313      	orrs	r3, r2
 800452e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	4ba6      	ldr	r3, [pc, #664]	@ (80047d0 <UART_SetConfig+0x2c4>)
 8004538:	4013      	ands	r3, r2
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6812      	ldr	r2, [r2, #0]
 800453e:	6979      	ldr	r1, [r7, #20]
 8004540:	430b      	orrs	r3, r1
 8004542:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68da      	ldr	r2, [r3, #12]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	4313      	orrs	r3, r2
 8004568:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	430a      	orrs	r2, r1
 800457c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a94      	ldr	r2, [pc, #592]	@ (80047d4 <UART_SetConfig+0x2c8>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d120      	bne.n	80045ca <UART_SetConfig+0xbe>
 8004588:	4b93      	ldr	r3, [pc, #588]	@ (80047d8 <UART_SetConfig+0x2cc>)
 800458a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	2b03      	cmp	r3, #3
 8004594:	d816      	bhi.n	80045c4 <UART_SetConfig+0xb8>
 8004596:	a201      	add	r2, pc, #4	@ (adr r2, 800459c <UART_SetConfig+0x90>)
 8004598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459c:	080045ad 	.word	0x080045ad
 80045a0:	080045b9 	.word	0x080045b9
 80045a4:	080045b3 	.word	0x080045b3
 80045a8:	080045bf 	.word	0x080045bf
 80045ac:	2301      	movs	r3, #1
 80045ae:	77fb      	strb	r3, [r7, #31]
 80045b0:	e150      	b.n	8004854 <UART_SetConfig+0x348>
 80045b2:	2302      	movs	r3, #2
 80045b4:	77fb      	strb	r3, [r7, #31]
 80045b6:	e14d      	b.n	8004854 <UART_SetConfig+0x348>
 80045b8:	2304      	movs	r3, #4
 80045ba:	77fb      	strb	r3, [r7, #31]
 80045bc:	e14a      	b.n	8004854 <UART_SetConfig+0x348>
 80045be:	2308      	movs	r3, #8
 80045c0:	77fb      	strb	r3, [r7, #31]
 80045c2:	e147      	b.n	8004854 <UART_SetConfig+0x348>
 80045c4:	2310      	movs	r3, #16
 80045c6:	77fb      	strb	r3, [r7, #31]
 80045c8:	e144      	b.n	8004854 <UART_SetConfig+0x348>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a83      	ldr	r2, [pc, #524]	@ (80047dc <UART_SetConfig+0x2d0>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d132      	bne.n	800463a <UART_SetConfig+0x12e>
 80045d4:	4b80      	ldr	r3, [pc, #512]	@ (80047d8 <UART_SetConfig+0x2cc>)
 80045d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045da:	f003 030c 	and.w	r3, r3, #12
 80045de:	2b0c      	cmp	r3, #12
 80045e0:	d828      	bhi.n	8004634 <UART_SetConfig+0x128>
 80045e2:	a201      	add	r2, pc, #4	@ (adr r2, 80045e8 <UART_SetConfig+0xdc>)
 80045e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e8:	0800461d 	.word	0x0800461d
 80045ec:	08004635 	.word	0x08004635
 80045f0:	08004635 	.word	0x08004635
 80045f4:	08004635 	.word	0x08004635
 80045f8:	08004629 	.word	0x08004629
 80045fc:	08004635 	.word	0x08004635
 8004600:	08004635 	.word	0x08004635
 8004604:	08004635 	.word	0x08004635
 8004608:	08004623 	.word	0x08004623
 800460c:	08004635 	.word	0x08004635
 8004610:	08004635 	.word	0x08004635
 8004614:	08004635 	.word	0x08004635
 8004618:	0800462f 	.word	0x0800462f
 800461c:	2300      	movs	r3, #0
 800461e:	77fb      	strb	r3, [r7, #31]
 8004620:	e118      	b.n	8004854 <UART_SetConfig+0x348>
 8004622:	2302      	movs	r3, #2
 8004624:	77fb      	strb	r3, [r7, #31]
 8004626:	e115      	b.n	8004854 <UART_SetConfig+0x348>
 8004628:	2304      	movs	r3, #4
 800462a:	77fb      	strb	r3, [r7, #31]
 800462c:	e112      	b.n	8004854 <UART_SetConfig+0x348>
 800462e:	2308      	movs	r3, #8
 8004630:	77fb      	strb	r3, [r7, #31]
 8004632:	e10f      	b.n	8004854 <UART_SetConfig+0x348>
 8004634:	2310      	movs	r3, #16
 8004636:	77fb      	strb	r3, [r7, #31]
 8004638:	e10c      	b.n	8004854 <UART_SetConfig+0x348>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a68      	ldr	r2, [pc, #416]	@ (80047e0 <UART_SetConfig+0x2d4>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d120      	bne.n	8004686 <UART_SetConfig+0x17a>
 8004644:	4b64      	ldr	r3, [pc, #400]	@ (80047d8 <UART_SetConfig+0x2cc>)
 8004646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800464a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800464e:	2b30      	cmp	r3, #48	@ 0x30
 8004650:	d013      	beq.n	800467a <UART_SetConfig+0x16e>
 8004652:	2b30      	cmp	r3, #48	@ 0x30
 8004654:	d814      	bhi.n	8004680 <UART_SetConfig+0x174>
 8004656:	2b20      	cmp	r3, #32
 8004658:	d009      	beq.n	800466e <UART_SetConfig+0x162>
 800465a:	2b20      	cmp	r3, #32
 800465c:	d810      	bhi.n	8004680 <UART_SetConfig+0x174>
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <UART_SetConfig+0x15c>
 8004662:	2b10      	cmp	r3, #16
 8004664:	d006      	beq.n	8004674 <UART_SetConfig+0x168>
 8004666:	e00b      	b.n	8004680 <UART_SetConfig+0x174>
 8004668:	2300      	movs	r3, #0
 800466a:	77fb      	strb	r3, [r7, #31]
 800466c:	e0f2      	b.n	8004854 <UART_SetConfig+0x348>
 800466e:	2302      	movs	r3, #2
 8004670:	77fb      	strb	r3, [r7, #31]
 8004672:	e0ef      	b.n	8004854 <UART_SetConfig+0x348>
 8004674:	2304      	movs	r3, #4
 8004676:	77fb      	strb	r3, [r7, #31]
 8004678:	e0ec      	b.n	8004854 <UART_SetConfig+0x348>
 800467a:	2308      	movs	r3, #8
 800467c:	77fb      	strb	r3, [r7, #31]
 800467e:	e0e9      	b.n	8004854 <UART_SetConfig+0x348>
 8004680:	2310      	movs	r3, #16
 8004682:	77fb      	strb	r3, [r7, #31]
 8004684:	e0e6      	b.n	8004854 <UART_SetConfig+0x348>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a56      	ldr	r2, [pc, #344]	@ (80047e4 <UART_SetConfig+0x2d8>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d120      	bne.n	80046d2 <UART_SetConfig+0x1c6>
 8004690:	4b51      	ldr	r3, [pc, #324]	@ (80047d8 <UART_SetConfig+0x2cc>)
 8004692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004696:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800469a:	2bc0      	cmp	r3, #192	@ 0xc0
 800469c:	d013      	beq.n	80046c6 <UART_SetConfig+0x1ba>
 800469e:	2bc0      	cmp	r3, #192	@ 0xc0
 80046a0:	d814      	bhi.n	80046cc <UART_SetConfig+0x1c0>
 80046a2:	2b80      	cmp	r3, #128	@ 0x80
 80046a4:	d009      	beq.n	80046ba <UART_SetConfig+0x1ae>
 80046a6:	2b80      	cmp	r3, #128	@ 0x80
 80046a8:	d810      	bhi.n	80046cc <UART_SetConfig+0x1c0>
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d002      	beq.n	80046b4 <UART_SetConfig+0x1a8>
 80046ae:	2b40      	cmp	r3, #64	@ 0x40
 80046b0:	d006      	beq.n	80046c0 <UART_SetConfig+0x1b4>
 80046b2:	e00b      	b.n	80046cc <UART_SetConfig+0x1c0>
 80046b4:	2300      	movs	r3, #0
 80046b6:	77fb      	strb	r3, [r7, #31]
 80046b8:	e0cc      	b.n	8004854 <UART_SetConfig+0x348>
 80046ba:	2302      	movs	r3, #2
 80046bc:	77fb      	strb	r3, [r7, #31]
 80046be:	e0c9      	b.n	8004854 <UART_SetConfig+0x348>
 80046c0:	2304      	movs	r3, #4
 80046c2:	77fb      	strb	r3, [r7, #31]
 80046c4:	e0c6      	b.n	8004854 <UART_SetConfig+0x348>
 80046c6:	2308      	movs	r3, #8
 80046c8:	77fb      	strb	r3, [r7, #31]
 80046ca:	e0c3      	b.n	8004854 <UART_SetConfig+0x348>
 80046cc:	2310      	movs	r3, #16
 80046ce:	77fb      	strb	r3, [r7, #31]
 80046d0:	e0c0      	b.n	8004854 <UART_SetConfig+0x348>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a44      	ldr	r2, [pc, #272]	@ (80047e8 <UART_SetConfig+0x2dc>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d125      	bne.n	8004728 <UART_SetConfig+0x21c>
 80046dc:	4b3e      	ldr	r3, [pc, #248]	@ (80047d8 <UART_SetConfig+0x2cc>)
 80046de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046ea:	d017      	beq.n	800471c <UART_SetConfig+0x210>
 80046ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046f0:	d817      	bhi.n	8004722 <UART_SetConfig+0x216>
 80046f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046f6:	d00b      	beq.n	8004710 <UART_SetConfig+0x204>
 80046f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046fc:	d811      	bhi.n	8004722 <UART_SetConfig+0x216>
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <UART_SetConfig+0x1fe>
 8004702:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004706:	d006      	beq.n	8004716 <UART_SetConfig+0x20a>
 8004708:	e00b      	b.n	8004722 <UART_SetConfig+0x216>
 800470a:	2300      	movs	r3, #0
 800470c:	77fb      	strb	r3, [r7, #31]
 800470e:	e0a1      	b.n	8004854 <UART_SetConfig+0x348>
 8004710:	2302      	movs	r3, #2
 8004712:	77fb      	strb	r3, [r7, #31]
 8004714:	e09e      	b.n	8004854 <UART_SetConfig+0x348>
 8004716:	2304      	movs	r3, #4
 8004718:	77fb      	strb	r3, [r7, #31]
 800471a:	e09b      	b.n	8004854 <UART_SetConfig+0x348>
 800471c:	2308      	movs	r3, #8
 800471e:	77fb      	strb	r3, [r7, #31]
 8004720:	e098      	b.n	8004854 <UART_SetConfig+0x348>
 8004722:	2310      	movs	r3, #16
 8004724:	77fb      	strb	r3, [r7, #31]
 8004726:	e095      	b.n	8004854 <UART_SetConfig+0x348>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a2f      	ldr	r2, [pc, #188]	@ (80047ec <UART_SetConfig+0x2e0>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d125      	bne.n	800477e <UART_SetConfig+0x272>
 8004732:	4b29      	ldr	r3, [pc, #164]	@ (80047d8 <UART_SetConfig+0x2cc>)
 8004734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004738:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800473c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004740:	d017      	beq.n	8004772 <UART_SetConfig+0x266>
 8004742:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004746:	d817      	bhi.n	8004778 <UART_SetConfig+0x26c>
 8004748:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800474c:	d00b      	beq.n	8004766 <UART_SetConfig+0x25a>
 800474e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004752:	d811      	bhi.n	8004778 <UART_SetConfig+0x26c>
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <UART_SetConfig+0x254>
 8004758:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800475c:	d006      	beq.n	800476c <UART_SetConfig+0x260>
 800475e:	e00b      	b.n	8004778 <UART_SetConfig+0x26c>
 8004760:	2301      	movs	r3, #1
 8004762:	77fb      	strb	r3, [r7, #31]
 8004764:	e076      	b.n	8004854 <UART_SetConfig+0x348>
 8004766:	2302      	movs	r3, #2
 8004768:	77fb      	strb	r3, [r7, #31]
 800476a:	e073      	b.n	8004854 <UART_SetConfig+0x348>
 800476c:	2304      	movs	r3, #4
 800476e:	77fb      	strb	r3, [r7, #31]
 8004770:	e070      	b.n	8004854 <UART_SetConfig+0x348>
 8004772:	2308      	movs	r3, #8
 8004774:	77fb      	strb	r3, [r7, #31]
 8004776:	e06d      	b.n	8004854 <UART_SetConfig+0x348>
 8004778:	2310      	movs	r3, #16
 800477a:	77fb      	strb	r3, [r7, #31]
 800477c:	e06a      	b.n	8004854 <UART_SetConfig+0x348>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a1b      	ldr	r2, [pc, #108]	@ (80047f0 <UART_SetConfig+0x2e4>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d138      	bne.n	80047fa <UART_SetConfig+0x2ee>
 8004788:	4b13      	ldr	r3, [pc, #76]	@ (80047d8 <UART_SetConfig+0x2cc>)
 800478a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800478e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004792:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004796:	d017      	beq.n	80047c8 <UART_SetConfig+0x2bc>
 8004798:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800479c:	d82a      	bhi.n	80047f4 <UART_SetConfig+0x2e8>
 800479e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047a2:	d00b      	beq.n	80047bc <UART_SetConfig+0x2b0>
 80047a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047a8:	d824      	bhi.n	80047f4 <UART_SetConfig+0x2e8>
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <UART_SetConfig+0x2aa>
 80047ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047b2:	d006      	beq.n	80047c2 <UART_SetConfig+0x2b6>
 80047b4:	e01e      	b.n	80047f4 <UART_SetConfig+0x2e8>
 80047b6:	2300      	movs	r3, #0
 80047b8:	77fb      	strb	r3, [r7, #31]
 80047ba:	e04b      	b.n	8004854 <UART_SetConfig+0x348>
 80047bc:	2302      	movs	r3, #2
 80047be:	77fb      	strb	r3, [r7, #31]
 80047c0:	e048      	b.n	8004854 <UART_SetConfig+0x348>
 80047c2:	2304      	movs	r3, #4
 80047c4:	77fb      	strb	r3, [r7, #31]
 80047c6:	e045      	b.n	8004854 <UART_SetConfig+0x348>
 80047c8:	2308      	movs	r3, #8
 80047ca:	77fb      	strb	r3, [r7, #31]
 80047cc:	e042      	b.n	8004854 <UART_SetConfig+0x348>
 80047ce:	bf00      	nop
 80047d0:	efff69f3 	.word	0xefff69f3
 80047d4:	40011000 	.word	0x40011000
 80047d8:	40023800 	.word	0x40023800
 80047dc:	40004400 	.word	0x40004400
 80047e0:	40004800 	.word	0x40004800
 80047e4:	40004c00 	.word	0x40004c00
 80047e8:	40005000 	.word	0x40005000
 80047ec:	40011400 	.word	0x40011400
 80047f0:	40007800 	.word	0x40007800
 80047f4:	2310      	movs	r3, #16
 80047f6:	77fb      	strb	r3, [r7, #31]
 80047f8:	e02c      	b.n	8004854 <UART_SetConfig+0x348>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a72      	ldr	r2, [pc, #456]	@ (80049c8 <UART_SetConfig+0x4bc>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d125      	bne.n	8004850 <UART_SetConfig+0x344>
 8004804:	4b71      	ldr	r3, [pc, #452]	@ (80049cc <UART_SetConfig+0x4c0>)
 8004806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800480a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800480e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004812:	d017      	beq.n	8004844 <UART_SetConfig+0x338>
 8004814:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004818:	d817      	bhi.n	800484a <UART_SetConfig+0x33e>
 800481a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800481e:	d00b      	beq.n	8004838 <UART_SetConfig+0x32c>
 8004820:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004824:	d811      	bhi.n	800484a <UART_SetConfig+0x33e>
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <UART_SetConfig+0x326>
 800482a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800482e:	d006      	beq.n	800483e <UART_SetConfig+0x332>
 8004830:	e00b      	b.n	800484a <UART_SetConfig+0x33e>
 8004832:	2300      	movs	r3, #0
 8004834:	77fb      	strb	r3, [r7, #31]
 8004836:	e00d      	b.n	8004854 <UART_SetConfig+0x348>
 8004838:	2302      	movs	r3, #2
 800483a:	77fb      	strb	r3, [r7, #31]
 800483c:	e00a      	b.n	8004854 <UART_SetConfig+0x348>
 800483e:	2304      	movs	r3, #4
 8004840:	77fb      	strb	r3, [r7, #31]
 8004842:	e007      	b.n	8004854 <UART_SetConfig+0x348>
 8004844:	2308      	movs	r3, #8
 8004846:	77fb      	strb	r3, [r7, #31]
 8004848:	e004      	b.n	8004854 <UART_SetConfig+0x348>
 800484a:	2310      	movs	r3, #16
 800484c:	77fb      	strb	r3, [r7, #31]
 800484e:	e001      	b.n	8004854 <UART_SetConfig+0x348>
 8004850:	2310      	movs	r3, #16
 8004852:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	69db      	ldr	r3, [r3, #28]
 8004858:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800485c:	d15b      	bne.n	8004916 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800485e:	7ffb      	ldrb	r3, [r7, #31]
 8004860:	2b08      	cmp	r3, #8
 8004862:	d828      	bhi.n	80048b6 <UART_SetConfig+0x3aa>
 8004864:	a201      	add	r2, pc, #4	@ (adr r2, 800486c <UART_SetConfig+0x360>)
 8004866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486a:	bf00      	nop
 800486c:	08004891 	.word	0x08004891
 8004870:	08004899 	.word	0x08004899
 8004874:	080048a1 	.word	0x080048a1
 8004878:	080048b7 	.word	0x080048b7
 800487c:	080048a7 	.word	0x080048a7
 8004880:	080048b7 	.word	0x080048b7
 8004884:	080048b7 	.word	0x080048b7
 8004888:	080048b7 	.word	0x080048b7
 800488c:	080048af 	.word	0x080048af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004890:	f7fe fe9e 	bl	80035d0 <HAL_RCC_GetPCLK1Freq>
 8004894:	61b8      	str	r0, [r7, #24]
        break;
 8004896:	e013      	b.n	80048c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004898:	f7fe feae 	bl	80035f8 <HAL_RCC_GetPCLK2Freq>
 800489c:	61b8      	str	r0, [r7, #24]
        break;
 800489e:	e00f      	b.n	80048c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048a0:	4b4b      	ldr	r3, [pc, #300]	@ (80049d0 <UART_SetConfig+0x4c4>)
 80048a2:	61bb      	str	r3, [r7, #24]
        break;
 80048a4:	e00c      	b.n	80048c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048a6:	f7fe fd81 	bl	80033ac <HAL_RCC_GetSysClockFreq>
 80048aa:	61b8      	str	r0, [r7, #24]
        break;
 80048ac:	e008      	b.n	80048c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048b2:	61bb      	str	r3, [r7, #24]
        break;
 80048b4:	e004      	b.n	80048c0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	77bb      	strb	r3, [r7, #30]
        break;
 80048be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d074      	beq.n	80049b0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	005a      	lsls	r2, r3, #1
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	085b      	lsrs	r3, r3, #1
 80048d0:	441a      	add	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	2b0f      	cmp	r3, #15
 80048e0:	d916      	bls.n	8004910 <UART_SetConfig+0x404>
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048e8:	d212      	bcs.n	8004910 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	f023 030f 	bic.w	r3, r3, #15
 80048f2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	085b      	lsrs	r3, r3, #1
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	f003 0307 	and.w	r3, r3, #7
 80048fe:	b29a      	uxth	r2, r3
 8004900:	89fb      	ldrh	r3, [r7, #14]
 8004902:	4313      	orrs	r3, r2
 8004904:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	89fa      	ldrh	r2, [r7, #14]
 800490c:	60da      	str	r2, [r3, #12]
 800490e:	e04f      	b.n	80049b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	77bb      	strb	r3, [r7, #30]
 8004914:	e04c      	b.n	80049b0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004916:	7ffb      	ldrb	r3, [r7, #31]
 8004918:	2b08      	cmp	r3, #8
 800491a:	d828      	bhi.n	800496e <UART_SetConfig+0x462>
 800491c:	a201      	add	r2, pc, #4	@ (adr r2, 8004924 <UART_SetConfig+0x418>)
 800491e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004922:	bf00      	nop
 8004924:	08004949 	.word	0x08004949
 8004928:	08004951 	.word	0x08004951
 800492c:	08004959 	.word	0x08004959
 8004930:	0800496f 	.word	0x0800496f
 8004934:	0800495f 	.word	0x0800495f
 8004938:	0800496f 	.word	0x0800496f
 800493c:	0800496f 	.word	0x0800496f
 8004940:	0800496f 	.word	0x0800496f
 8004944:	08004967 	.word	0x08004967
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004948:	f7fe fe42 	bl	80035d0 <HAL_RCC_GetPCLK1Freq>
 800494c:	61b8      	str	r0, [r7, #24]
        break;
 800494e:	e013      	b.n	8004978 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004950:	f7fe fe52 	bl	80035f8 <HAL_RCC_GetPCLK2Freq>
 8004954:	61b8      	str	r0, [r7, #24]
        break;
 8004956:	e00f      	b.n	8004978 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004958:	4b1d      	ldr	r3, [pc, #116]	@ (80049d0 <UART_SetConfig+0x4c4>)
 800495a:	61bb      	str	r3, [r7, #24]
        break;
 800495c:	e00c      	b.n	8004978 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800495e:	f7fe fd25 	bl	80033ac <HAL_RCC_GetSysClockFreq>
 8004962:	61b8      	str	r0, [r7, #24]
        break;
 8004964:	e008      	b.n	8004978 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004966:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800496a:	61bb      	str	r3, [r7, #24]
        break;
 800496c:	e004      	b.n	8004978 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800496e:	2300      	movs	r3, #0
 8004970:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	77bb      	strb	r3, [r7, #30]
        break;
 8004976:	bf00      	nop
    }

    if (pclk != 0U)
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d018      	beq.n	80049b0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	085a      	lsrs	r2, r3, #1
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	441a      	add	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004990:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	2b0f      	cmp	r3, #15
 8004996:	d909      	bls.n	80049ac <UART_SetConfig+0x4a0>
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800499e:	d205      	bcs.n	80049ac <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	60da      	str	r2, [r3, #12]
 80049aa:	e001      	b.n	80049b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80049bc:	7fbb      	ldrb	r3, [r7, #30]
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3720      	adds	r7, #32
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	40007c00 	.word	0x40007c00
 80049cc:	40023800 	.word	0x40023800
 80049d0:	00f42400 	.word	0x00f42400

080049d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e0:	f003 0308 	and.w	r3, r3, #8
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00a      	beq.n	80049fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00a      	beq.n	8004a42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a46:	f003 0304 	and.w	r3, r3, #4
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00a      	beq.n	8004a64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a68:	f003 0310 	and.w	r3, r3, #16
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8a:	f003 0320 	and.w	r3, r3, #32
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00a      	beq.n	8004aa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d01a      	beq.n	8004aea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ace:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ad2:	d10a      	bne.n	8004aea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00a      	beq.n	8004b0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	605a      	str	r2, [r3, #4]
  }
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b098      	sub	sp, #96	@ 0x60
 8004b1c:	af02      	add	r7, sp, #8
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b28:	f7fc ff6c 	bl	8001a04 <HAL_GetTick>
 8004b2c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0308 	and.w	r3, r3, #8
 8004b38:	2b08      	cmp	r3, #8
 8004b3a:	d12e      	bne.n	8004b9a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b44:	2200      	movs	r2, #0
 8004b46:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f88c 	bl	8004c68 <UART_WaitOnFlagUntilTimeout>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d021      	beq.n	8004b9a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b5e:	e853 3f00 	ldrex	r3, [r3]
 8004b62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	461a      	mov	r2, r3
 8004b72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b74:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b76:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b7c:	e841 2300 	strex	r3, r2, [r1]
 8004b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1e6      	bne.n	8004b56 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e062      	b.n	8004c60 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b04      	cmp	r3, #4
 8004ba6:	d149      	bne.n	8004c3c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ba8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f856 	bl	8004c68 <UART_WaitOnFlagUntilTimeout>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d03c      	beq.n	8004c3c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bca:	e853 3f00 	ldrex	r3, [r3]
 8004bce:	623b      	str	r3, [r7, #32]
   return(result);
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	461a      	mov	r2, r3
 8004bde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004be0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004be2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004be6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004be8:	e841 2300 	strex	r3, r2, [r1]
 8004bec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1e6      	bne.n	8004bc2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	3308      	adds	r3, #8
 8004bfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	e853 3f00 	ldrex	r3, [r3]
 8004c02:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 0301 	bic.w	r3, r3, #1
 8004c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3308      	adds	r3, #8
 8004c12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c14:	61fa      	str	r2, [r7, #28]
 8004c16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c18:	69b9      	ldr	r1, [r7, #24]
 8004c1a:	69fa      	ldr	r2, [r7, #28]
 8004c1c:	e841 2300 	strex	r3, r2, [r1]
 8004c20:	617b      	str	r3, [r7, #20]
   return(result);
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1e5      	bne.n	8004bf4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e011      	b.n	8004c60 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2220      	movs	r2, #32
 8004c46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3758      	adds	r7, #88	@ 0x58
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	603b      	str	r3, [r7, #0]
 8004c74:	4613      	mov	r3, r2
 8004c76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c78:	e04f      	b.n	8004d1a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c80:	d04b      	beq.n	8004d1a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c82:	f7fc febf 	bl	8001a04 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d302      	bcc.n	8004c98 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d101      	bne.n	8004c9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e04e      	b.n	8004d3a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0304 	and.w	r3, r3, #4
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d037      	beq.n	8004d1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	2b80      	cmp	r3, #128	@ 0x80
 8004cae:	d034      	beq.n	8004d1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	2b40      	cmp	r3, #64	@ 0x40
 8004cb4:	d031      	beq.n	8004d1a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	69db      	ldr	r3, [r3, #28]
 8004cbc:	f003 0308 	and.w	r3, r3, #8
 8004cc0:	2b08      	cmp	r3, #8
 8004cc2:	d110      	bne.n	8004ce6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2208      	movs	r2, #8
 8004cca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f000 f838 	bl	8004d42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2208      	movs	r2, #8
 8004cd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e029      	b.n	8004d3a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cf4:	d111      	bne.n	8004d1a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004cfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 f81e 	bl	8004d42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2220      	movs	r2, #32
 8004d0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e00f      	b.n	8004d3a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	69da      	ldr	r2, [r3, #28]
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	4013      	ands	r3, r2
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	bf0c      	ite	eq
 8004d2a:	2301      	moveq	r3, #1
 8004d2c:	2300      	movne	r3, #0
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	461a      	mov	r2, r3
 8004d32:	79fb      	ldrb	r3, [r7, #7]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d0a0      	beq.n	8004c7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b095      	sub	sp, #84	@ 0x54
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d52:	e853 3f00 	ldrex	r3, [r3]
 8004d56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	461a      	mov	r2, r3
 8004d66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d68:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d6a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d70:	e841 2300 	strex	r3, r2, [r1]
 8004d74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1e6      	bne.n	8004d4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3308      	adds	r3, #8
 8004d82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d84:	6a3b      	ldr	r3, [r7, #32]
 8004d86:	e853 3f00 	ldrex	r3, [r3]
 8004d8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	f023 0301 	bic.w	r3, r3, #1
 8004d92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	3308      	adds	r3, #8
 8004d9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004da2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004da4:	e841 2300 	strex	r3, r2, [r1]
 8004da8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1e5      	bne.n	8004d7c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d118      	bne.n	8004dea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	e853 3f00 	ldrex	r3, [r3]
 8004dc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	f023 0310 	bic.w	r3, r3, #16
 8004dcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dd6:	61bb      	str	r3, [r7, #24]
 8004dd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dda:	6979      	ldr	r1, [r7, #20]
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	e841 2300 	strex	r3, r2, [r1]
 8004de2:	613b      	str	r3, [r7, #16]
   return(result);
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1e6      	bne.n	8004db8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2220      	movs	r2, #32
 8004dee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004dfe:	bf00      	nop
 8004e00:	3754      	adds	r7, #84	@ 0x54
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004e0a:	b480      	push	{r7}
 8004e0c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004e0e:	bf00      	nop
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e1e:	f3ef 8305 	mrs	r3, IPSR
 8004e22:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e24:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10f      	bne.n	8004e4a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e2a:	f3ef 8310 	mrs	r3, PRIMASK
 8004e2e:	607b      	str	r3, [r7, #4]
  return(result);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d105      	bne.n	8004e42 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e36:	f3ef 8311 	mrs	r3, BASEPRI
 8004e3a:	603b      	str	r3, [r7, #0]
  return(result);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d007      	beq.n	8004e52 <osKernelInitialize+0x3a>
 8004e42:	4b0e      	ldr	r3, [pc, #56]	@ (8004e7c <osKernelInitialize+0x64>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d103      	bne.n	8004e52 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004e4a:	f06f 0305 	mvn.w	r3, #5
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	e00c      	b.n	8004e6c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004e52:	4b0a      	ldr	r3, [pc, #40]	@ (8004e7c <osKernelInitialize+0x64>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d105      	bne.n	8004e66 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004e5a:	4b08      	ldr	r3, [pc, #32]	@ (8004e7c <osKernelInitialize+0x64>)
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004e60:	2300      	movs	r3, #0
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	e002      	b.n	8004e6c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004e66:	f04f 33ff 	mov.w	r3, #4294967295
 8004e6a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	200001fc 	.word	0x200001fc

08004e80 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e86:	f3ef 8305 	mrs	r3, IPSR
 8004e8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e8c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10f      	bne.n	8004eb2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e92:	f3ef 8310 	mrs	r3, PRIMASK
 8004e96:	607b      	str	r3, [r7, #4]
  return(result);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d105      	bne.n	8004eaa <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e9e:	f3ef 8311 	mrs	r3, BASEPRI
 8004ea2:	603b      	str	r3, [r7, #0]
  return(result);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d007      	beq.n	8004eba <osKernelStart+0x3a>
 8004eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8004ee8 <osKernelStart+0x68>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d103      	bne.n	8004eba <osKernelStart+0x3a>
    stat = osErrorISR;
 8004eb2:	f06f 0305 	mvn.w	r3, #5
 8004eb6:	60fb      	str	r3, [r7, #12]
 8004eb8:	e010      	b.n	8004edc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004eba:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee8 <osKernelStart+0x68>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d109      	bne.n	8004ed6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004ec2:	f7ff ffa2 	bl	8004e0a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004ec6:	4b08      	ldr	r3, [pc, #32]	@ (8004ee8 <osKernelStart+0x68>)
 8004ec8:	2202      	movs	r2, #2
 8004eca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004ecc:	f001 f8ca 	bl	8006064 <vTaskStartScheduler>
      stat = osOK;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	e002      	b.n	8004edc <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eda:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004edc:	68fb      	ldr	r3, [r7, #12]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	200001fc 	.word	0x200001fc

08004eec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b090      	sub	sp, #64	@ 0x40
 8004ef0:	af04      	add	r7, sp, #16
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004efc:	f3ef 8305 	mrs	r3, IPSR
 8004f00:	61fb      	str	r3, [r7, #28]
  return(result);
 8004f02:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f040 808f 	bne.w	8005028 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f0a:	f3ef 8310 	mrs	r3, PRIMASK
 8004f0e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d105      	bne.n	8004f22 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f16:	f3ef 8311 	mrs	r3, BASEPRI
 8004f1a:	617b      	str	r3, [r7, #20]
  return(result);
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <osThreadNew+0x3e>
 8004f22:	4b44      	ldr	r3, [pc, #272]	@ (8005034 <osThreadNew+0x148>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d07e      	beq.n	8005028 <osThreadNew+0x13c>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d07b      	beq.n	8005028 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004f30:	2380      	movs	r3, #128	@ 0x80
 8004f32:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004f34:	2318      	movs	r3, #24
 8004f36:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8004f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f40:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d045      	beq.n	8004fd4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d002      	beq.n	8004f56 <osThreadNew+0x6a>
        name = attr->name;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d002      	beq.n	8004f64 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d008      	beq.n	8004f7c <osThreadNew+0x90>
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6c:	2b38      	cmp	r3, #56	@ 0x38
 8004f6e:	d805      	bhi.n	8004f7c <osThreadNew+0x90>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <osThreadNew+0x94>
        return (NULL);
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	e054      	b.n	800502a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d003      	beq.n	8004f90 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	089b      	lsrs	r3, r3, #2
 8004f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00e      	beq.n	8004fb6 <osThreadNew+0xca>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	2b5b      	cmp	r3, #91	@ 0x5b
 8004f9e:	d90a      	bls.n	8004fb6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d006      	beq.n	8004fb6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d002      	beq.n	8004fb6 <osThreadNew+0xca>
        mem = 1;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	623b      	str	r3, [r7, #32]
 8004fb4:	e010      	b.n	8004fd8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10c      	bne.n	8004fd8 <osThreadNew+0xec>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d108      	bne.n	8004fd8 <osThreadNew+0xec>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d104      	bne.n	8004fd8 <osThreadNew+0xec>
          mem = 0;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	623b      	str	r3, [r7, #32]
 8004fd2:	e001      	b.n	8004fd8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004fd8:	6a3b      	ldr	r3, [r7, #32]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d110      	bne.n	8005000 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004fe6:	9202      	str	r2, [sp, #8]
 8004fe8:	9301      	str	r3, [sp, #4]
 8004fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ff2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 fe4f 	bl	8005c98 <xTaskCreateStatic>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	613b      	str	r3, [r7, #16]
 8004ffe:	e013      	b.n	8005028 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d110      	bne.n	8005028 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005008:	b29a      	uxth	r2, r3
 800500a:	f107 0310 	add.w	r3, r7, #16
 800500e:	9301      	str	r3, [sp, #4]
 8005010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f000 fea3 	bl	8005d64 <xTaskCreate>
 800501e:	4603      	mov	r3, r0
 8005020:	2b01      	cmp	r3, #1
 8005022:	d001      	beq.n	8005028 <osThreadNew+0x13c>
          hTask = NULL;
 8005024:	2300      	movs	r3, #0
 8005026:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005028:	693b      	ldr	r3, [r7, #16]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3730      	adds	r7, #48	@ 0x30
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	200001fc 	.word	0x200001fc

08005038 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005040:	f3ef 8305 	mrs	r3, IPSR
 8005044:	613b      	str	r3, [r7, #16]
  return(result);
 8005046:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10f      	bne.n	800506c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800504c:	f3ef 8310 	mrs	r3, PRIMASK
 8005050:	60fb      	str	r3, [r7, #12]
  return(result);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d105      	bne.n	8005064 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005058:	f3ef 8311 	mrs	r3, BASEPRI
 800505c:	60bb      	str	r3, [r7, #8]
  return(result);
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d007      	beq.n	8005074 <osDelay+0x3c>
 8005064:	4b0a      	ldr	r3, [pc, #40]	@ (8005090 <osDelay+0x58>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b02      	cmp	r3, #2
 800506a:	d103      	bne.n	8005074 <osDelay+0x3c>
    stat = osErrorISR;
 800506c:	f06f 0305 	mvn.w	r3, #5
 8005070:	617b      	str	r3, [r7, #20]
 8005072:	e007      	b.n	8005084 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005074:	2300      	movs	r3, #0
 8005076:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d002      	beq.n	8005084 <osDelay+0x4c>
      vTaskDelay(ticks);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 ffb8 	bl	8005ff4 <vTaskDelay>
    }
  }

  return (stat);
 8005084:	697b      	ldr	r3, [r7, #20]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3718      	adds	r7, #24
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	200001fc 	.word	0x200001fc

08005094 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4a07      	ldr	r2, [pc, #28]	@ (80050c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80050a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	4a06      	ldr	r2, [pc, #24]	@ (80050c4 <vApplicationGetIdleTaskMemory+0x30>)
 80050aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2280      	movs	r2, #128	@ 0x80
 80050b0:	601a      	str	r2, [r3, #0]
}
 80050b2:	bf00      	nop
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	20000200 	.word	0x20000200
 80050c4:	2000025c 	.word	0x2000025c

080050c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4a07      	ldr	r2, [pc, #28]	@ (80050f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80050d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	4a06      	ldr	r2, [pc, #24]	@ (80050f8 <vApplicationGetTimerTaskMemory+0x30>)
 80050de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80050e6:	601a      	str	r2, [r3, #0]
}
 80050e8:	bf00      	nop
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	2000045c 	.word	0x2000045c
 80050f8:	200004b8 	.word	0x200004b8

080050fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f103 0208 	add.w	r2, r3, #8
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f04f 32ff 	mov.w	r2, #4294967295
 8005114:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f103 0208 	add.w	r2, r3, #8
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f103 0208 	add.w	r2, r3, #8
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800514a:	bf00      	nop
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005156:	b480      	push	{r7}
 8005158:	b085      	sub	sp, #20
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	1c5a      	adds	r2, r3, #1
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	601a      	str	r2, [r3, #0]
}
 8005192:	bf00      	nop
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800519e:	b480      	push	{r7}
 80051a0:	b085      	sub	sp, #20
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b4:	d103      	bne.n	80051be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	e00c      	b.n	80051d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	3308      	adds	r3, #8
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	e002      	b.n	80051cc <vListInsert+0x2e>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d2f6      	bcs.n	80051c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	683a      	ldr	r2, [r7, #0]
 80051e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	683a      	ldr	r2, [r7, #0]
 80051f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	1c5a      	adds	r2, r3, #1
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	601a      	str	r2, [r3, #0]
}
 8005204:	bf00      	nop
 8005206:	3714      	adds	r7, #20
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	6892      	ldr	r2, [r2, #8]
 8005226:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	6852      	ldr	r2, [r2, #4]
 8005230:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	429a      	cmp	r2, r3
 800523a:	d103      	bne.n	8005244 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	689a      	ldr	r2, [r3, #8]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	1e5a      	subs	r2, r3, #1
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
}
 8005258:	4618      	mov	r0, r3
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10d      	bne.n	8005294 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527c:	b672      	cpsid	i
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	b662      	cpsie	i
 800528c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800528e:	bf00      	nop
 8005290:	bf00      	nop
 8005292:	e7fd      	b.n	8005290 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005294:	f002 f8aa 	bl	80073ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052a0:	68f9      	ldr	r1, [r7, #12]
 80052a2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80052a4:	fb01 f303 	mul.w	r3, r1, r3
 80052a8:	441a      	add	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052c4:	3b01      	subs	r3, #1
 80052c6:	68f9      	ldr	r1, [r7, #12]
 80052c8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80052ca:	fb01 f303 	mul.w	r3, r1, r3
 80052ce:	441a      	add	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	22ff      	movs	r2, #255	@ 0xff
 80052d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	22ff      	movs	r2, #255	@ 0xff
 80052e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d114      	bne.n	8005314 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d01a      	beq.n	8005328 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	3310      	adds	r3, #16
 80052f6:	4618      	mov	r0, r3
 80052f8:	f001 f950 	bl	800659c <xTaskRemoveFromEventList>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d012      	beq.n	8005328 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005302:	4b0d      	ldr	r3, [pc, #52]	@ (8005338 <xQueueGenericReset+0xd4>)
 8005304:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	f3bf 8f6f 	isb	sy
 8005312:	e009      	b.n	8005328 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	3310      	adds	r3, #16
 8005318:	4618      	mov	r0, r3
 800531a:	f7ff feef 	bl	80050fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	3324      	adds	r3, #36	@ 0x24
 8005322:	4618      	mov	r0, r3
 8005324:	f7ff feea 	bl	80050fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005328:	f002 f896 	bl	8007458 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800532c:	2301      	movs	r3, #1
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	e000ed04 	.word	0xe000ed04

0800533c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800533c:	b580      	push	{r7, lr}
 800533e:	b08e      	sub	sp, #56	@ 0x38
 8005340:	af02      	add	r7, sp, #8
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
 8005348:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10d      	bne.n	800536c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8005350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005354:	b672      	cpsid	i
 8005356:	f383 8811 	msr	BASEPRI, r3
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	b662      	cpsie	i
 8005364:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005366:	bf00      	nop
 8005368:	bf00      	nop
 800536a:	e7fd      	b.n	8005368 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10d      	bne.n	800538e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8005372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005376:	b672      	cpsid	i
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	b662      	cpsie	i
 8005386:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005388:	bf00      	nop
 800538a:	bf00      	nop
 800538c:	e7fd      	b.n	800538a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d002      	beq.n	800539a <xQueueGenericCreateStatic+0x5e>
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <xQueueGenericCreateStatic+0x62>
 800539a:	2301      	movs	r3, #1
 800539c:	e000      	b.n	80053a0 <xQueueGenericCreateStatic+0x64>
 800539e:	2300      	movs	r3, #0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10d      	bne.n	80053c0 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80053a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a8:	b672      	cpsid	i
 80053aa:	f383 8811 	msr	BASEPRI, r3
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f3bf 8f4f 	dsb	sy
 80053b6:	b662      	cpsie	i
 80053b8:	623b      	str	r3, [r7, #32]
}
 80053ba:	bf00      	nop
 80053bc:	bf00      	nop
 80053be:	e7fd      	b.n	80053bc <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d102      	bne.n	80053cc <xQueueGenericCreateStatic+0x90>
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <xQueueGenericCreateStatic+0x94>
 80053cc:	2301      	movs	r3, #1
 80053ce:	e000      	b.n	80053d2 <xQueueGenericCreateStatic+0x96>
 80053d0:	2300      	movs	r3, #0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10d      	bne.n	80053f2 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80053d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053da:	b672      	cpsid	i
 80053dc:	f383 8811 	msr	BASEPRI, r3
 80053e0:	f3bf 8f6f 	isb	sy
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	b662      	cpsie	i
 80053ea:	61fb      	str	r3, [r7, #28]
}
 80053ec:	bf00      	nop
 80053ee:	bf00      	nop
 80053f0:	e7fd      	b.n	80053ee <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80053f2:	2350      	movs	r3, #80	@ 0x50
 80053f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2b50      	cmp	r3, #80	@ 0x50
 80053fa:	d00d      	beq.n	8005418 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80053fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005400:	b672      	cpsid	i
 8005402:	f383 8811 	msr	BASEPRI, r3
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	b662      	cpsie	i
 8005410:	61bb      	str	r3, [r7, #24]
}
 8005412:	bf00      	nop
 8005414:	bf00      	nop
 8005416:	e7fd      	b.n	8005414 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005418:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800541e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00d      	beq.n	8005440 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800542c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	4613      	mov	r3, r2
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	68b9      	ldr	r1, [r7, #8]
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f000 f805 	bl	800544a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005442:	4618      	mov	r0, r3
 8005444:	3730      	adds	r7, #48	@ 0x30
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b084      	sub	sp, #16
 800544e:	af00      	add	r7, sp, #0
 8005450:	60f8      	str	r0, [r7, #12]
 8005452:	60b9      	str	r1, [r7, #8]
 8005454:	607a      	str	r2, [r7, #4]
 8005456:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d103      	bne.n	8005466 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	69ba      	ldr	r2, [r7, #24]
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	e002      	b.n	800546c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005478:	2101      	movs	r1, #1
 800547a:	69b8      	ldr	r0, [r7, #24]
 800547c:	f7ff fef2 	bl	8005264 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	78fa      	ldrb	r2, [r7, #3]
 8005484:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005488:	bf00      	nop
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b08e      	sub	sp, #56	@ 0x38
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
 800549c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800549e:	2300      	movs	r3, #0
 80054a0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80054a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10d      	bne.n	80054c8 <xQueueGenericSend+0x38>
	__asm volatile
 80054ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b0:	b672      	cpsid	i
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	b662      	cpsie	i
 80054c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80054c2:	bf00      	nop
 80054c4:	bf00      	nop
 80054c6:	e7fd      	b.n	80054c4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d103      	bne.n	80054d6 <xQueueGenericSend+0x46>
 80054ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <xQueueGenericSend+0x4a>
 80054d6:	2301      	movs	r3, #1
 80054d8:	e000      	b.n	80054dc <xQueueGenericSend+0x4c>
 80054da:	2300      	movs	r3, #0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10d      	bne.n	80054fc <xQueueGenericSend+0x6c>
	__asm volatile
 80054e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e4:	b672      	cpsid	i
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	b662      	cpsie	i
 80054f4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80054f6:	bf00      	nop
 80054f8:	bf00      	nop
 80054fa:	e7fd      	b.n	80054f8 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d103      	bne.n	800550a <xQueueGenericSend+0x7a>
 8005502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005506:	2b01      	cmp	r3, #1
 8005508:	d101      	bne.n	800550e <xQueueGenericSend+0x7e>
 800550a:	2301      	movs	r3, #1
 800550c:	e000      	b.n	8005510 <xQueueGenericSend+0x80>
 800550e:	2300      	movs	r3, #0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10d      	bne.n	8005530 <xQueueGenericSend+0xa0>
	__asm volatile
 8005514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005518:	b672      	cpsid	i
 800551a:	f383 8811 	msr	BASEPRI, r3
 800551e:	f3bf 8f6f 	isb	sy
 8005522:	f3bf 8f4f 	dsb	sy
 8005526:	b662      	cpsie	i
 8005528:	623b      	str	r3, [r7, #32]
}
 800552a:	bf00      	nop
 800552c:	bf00      	nop
 800552e:	e7fd      	b.n	800552c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005530:	f001 f9fc 	bl	800692c <xTaskGetSchedulerState>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d102      	bne.n	8005540 <xQueueGenericSend+0xb0>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <xQueueGenericSend+0xb4>
 8005540:	2301      	movs	r3, #1
 8005542:	e000      	b.n	8005546 <xQueueGenericSend+0xb6>
 8005544:	2300      	movs	r3, #0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10d      	bne.n	8005566 <xQueueGenericSend+0xd6>
	__asm volatile
 800554a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800554e:	b672      	cpsid	i
 8005550:	f383 8811 	msr	BASEPRI, r3
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	b662      	cpsie	i
 800555e:	61fb      	str	r3, [r7, #28]
}
 8005560:	bf00      	nop
 8005562:	bf00      	nop
 8005564:	e7fd      	b.n	8005562 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005566:	f001 ff41 	bl	80073ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800556a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800556c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800556e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005572:	429a      	cmp	r2, r3
 8005574:	d302      	bcc.n	800557c <xQueueGenericSend+0xec>
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2b02      	cmp	r3, #2
 800557a:	d129      	bne.n	80055d0 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800557c:	683a      	ldr	r2, [r7, #0]
 800557e:	68b9      	ldr	r1, [r7, #8]
 8005580:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005582:	f000 fa1b 	bl	80059bc <prvCopyDataToQueue>
 8005586:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800558c:	2b00      	cmp	r3, #0
 800558e:	d010      	beq.n	80055b2 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005592:	3324      	adds	r3, #36	@ 0x24
 8005594:	4618      	mov	r0, r3
 8005596:	f001 f801 	bl	800659c <xTaskRemoveFromEventList>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d013      	beq.n	80055c8 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80055a0:	4b3f      	ldr	r3, [pc, #252]	@ (80056a0 <xQueueGenericSend+0x210>)
 80055a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	f3bf 8f6f 	isb	sy
 80055b0:	e00a      	b.n	80055c8 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80055b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d007      	beq.n	80055c8 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80055b8:	4b39      	ldr	r3, [pc, #228]	@ (80056a0 <xQueueGenericSend+0x210>)
 80055ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	f3bf 8f4f 	dsb	sy
 80055c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80055c8:	f001 ff46 	bl	8007458 <vPortExitCritical>
				return pdPASS;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e063      	b.n	8005698 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d103      	bne.n	80055de <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055d6:	f001 ff3f 	bl	8007458 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80055da:	2300      	movs	r3, #0
 80055dc:	e05c      	b.n	8005698 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d106      	bne.n	80055f2 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055e4:	f107 0314 	add.w	r3, r7, #20
 80055e8:	4618      	mov	r0, r3
 80055ea:	f001 f83d 	bl	8006668 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055ee:	2301      	movs	r3, #1
 80055f0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055f2:	f001 ff31 	bl	8007458 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055f6:	f000 fda1 	bl	800613c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055fa:	f001 fef7 	bl	80073ec <vPortEnterCritical>
 80055fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005600:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005604:	b25b      	sxtb	r3, r3
 8005606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560a:	d103      	bne.n	8005614 <xQueueGenericSend+0x184>
 800560c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560e:	2200      	movs	r2, #0
 8005610:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005616:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800561a:	b25b      	sxtb	r3, r3
 800561c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005620:	d103      	bne.n	800562a <xQueueGenericSend+0x19a>
 8005622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800562a:	f001 ff15 	bl	8007458 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800562e:	1d3a      	adds	r2, r7, #4
 8005630:	f107 0314 	add.w	r3, r7, #20
 8005634:	4611      	mov	r1, r2
 8005636:	4618      	mov	r0, r3
 8005638:	f001 f82c 	bl	8006694 <xTaskCheckForTimeOut>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d124      	bne.n	800568c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005642:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005644:	f000 fab2 	bl	8005bac <prvIsQueueFull>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d018      	beq.n	8005680 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800564e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005650:	3310      	adds	r3, #16
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	4611      	mov	r1, r2
 8005656:	4618      	mov	r0, r3
 8005658:	f000 ff4a 	bl	80064f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800565c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800565e:	f000 fa3d 	bl	8005adc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005662:	f000 fd79 	bl	8006158 <xTaskResumeAll>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	f47f af7c 	bne.w	8005566 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800566e:	4b0c      	ldr	r3, [pc, #48]	@ (80056a0 <xQueueGenericSend+0x210>)
 8005670:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	f3bf 8f4f 	dsb	sy
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	e772      	b.n	8005566 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005680:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005682:	f000 fa2b 	bl	8005adc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005686:	f000 fd67 	bl	8006158 <xTaskResumeAll>
 800568a:	e76c      	b.n	8005566 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800568c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800568e:	f000 fa25 	bl	8005adc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005692:	f000 fd61 	bl	8006158 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005696:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005698:	4618      	mov	r0, r3
 800569a:	3738      	adds	r7, #56	@ 0x38
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	e000ed04 	.word	0xe000ed04

080056a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b08e      	sub	sp, #56	@ 0x38
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
 80056b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80056b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10d      	bne.n	80056d8 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c0:	b672      	cpsid	i
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	b662      	cpsie	i
 80056d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80056d2:	bf00      	nop
 80056d4:	bf00      	nop
 80056d6:	e7fd      	b.n	80056d4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d103      	bne.n	80056e6 <xQueueGenericSendFromISR+0x42>
 80056de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <xQueueGenericSendFromISR+0x46>
 80056e6:	2301      	movs	r3, #1
 80056e8:	e000      	b.n	80056ec <xQueueGenericSendFromISR+0x48>
 80056ea:	2300      	movs	r3, #0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10d      	bne.n	800570c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80056f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f4:	b672      	cpsid	i
 80056f6:	f383 8811 	msr	BASEPRI, r3
 80056fa:	f3bf 8f6f 	isb	sy
 80056fe:	f3bf 8f4f 	dsb	sy
 8005702:	b662      	cpsie	i
 8005704:	623b      	str	r3, [r7, #32]
}
 8005706:	bf00      	nop
 8005708:	bf00      	nop
 800570a:	e7fd      	b.n	8005708 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	2b02      	cmp	r3, #2
 8005710:	d103      	bne.n	800571a <xQueueGenericSendFromISR+0x76>
 8005712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005716:	2b01      	cmp	r3, #1
 8005718:	d101      	bne.n	800571e <xQueueGenericSendFromISR+0x7a>
 800571a:	2301      	movs	r3, #1
 800571c:	e000      	b.n	8005720 <xQueueGenericSendFromISR+0x7c>
 800571e:	2300      	movs	r3, #0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10d      	bne.n	8005740 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8005724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005728:	b672      	cpsid	i
 800572a:	f383 8811 	msr	BASEPRI, r3
 800572e:	f3bf 8f6f 	isb	sy
 8005732:	f3bf 8f4f 	dsb	sy
 8005736:	b662      	cpsie	i
 8005738:	61fb      	str	r3, [r7, #28]
}
 800573a:	bf00      	nop
 800573c:	bf00      	nop
 800573e:	e7fd      	b.n	800573c <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005740:	f001 ff3c 	bl	80075bc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005744:	f3ef 8211 	mrs	r2, BASEPRI
 8005748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800574c:	b672      	cpsid	i
 800574e:	f383 8811 	msr	BASEPRI, r3
 8005752:	f3bf 8f6f 	isb	sy
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	b662      	cpsie	i
 800575c:	61ba      	str	r2, [r7, #24]
 800575e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005760:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005762:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005766:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800576a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800576c:	429a      	cmp	r2, r3
 800576e:	d302      	bcc.n	8005776 <xQueueGenericSendFromISR+0xd2>
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	2b02      	cmp	r3, #2
 8005774:	d12c      	bne.n	80057d0 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005778:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800577c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	68b9      	ldr	r1, [r7, #8]
 8005784:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005786:	f000 f919 	bl	80059bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800578a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800578e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005792:	d112      	bne.n	80057ba <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005798:	2b00      	cmp	r3, #0
 800579a:	d016      	beq.n	80057ca <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800579c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579e:	3324      	adds	r3, #36	@ 0x24
 80057a0:	4618      	mov	r0, r3
 80057a2:	f000 fefb 	bl	800659c <xTaskRemoveFromEventList>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00e      	beq.n	80057ca <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00b      	beq.n	80057ca <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	e007      	b.n	80057ca <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80057ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80057be:	3301      	adds	r3, #1
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	b25a      	sxtb	r2, r3
 80057c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80057ca:	2301      	movs	r3, #1
 80057cc:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80057ce:	e001      	b.n	80057d4 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80057d0:	2300      	movs	r3, #0
 80057d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80057d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057d6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80057de:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80057e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3738      	adds	r7, #56	@ 0x38
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
	...

080057ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b08c      	sub	sp, #48	@ 0x30
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80057f8:	2300      	movs	r3, #0
 80057fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10d      	bne.n	8005822 <xQueueReceive+0x36>
	__asm volatile
 8005806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800580a:	b672      	cpsid	i
 800580c:	f383 8811 	msr	BASEPRI, r3
 8005810:	f3bf 8f6f 	isb	sy
 8005814:	f3bf 8f4f 	dsb	sy
 8005818:	b662      	cpsie	i
 800581a:	623b      	str	r3, [r7, #32]
}
 800581c:	bf00      	nop
 800581e:	bf00      	nop
 8005820:	e7fd      	b.n	800581e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d103      	bne.n	8005830 <xQueueReceive+0x44>
 8005828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800582a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800582c:	2b00      	cmp	r3, #0
 800582e:	d101      	bne.n	8005834 <xQueueReceive+0x48>
 8005830:	2301      	movs	r3, #1
 8005832:	e000      	b.n	8005836 <xQueueReceive+0x4a>
 8005834:	2300      	movs	r3, #0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10d      	bne.n	8005856 <xQueueReceive+0x6a>
	__asm volatile
 800583a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583e:	b672      	cpsid	i
 8005840:	f383 8811 	msr	BASEPRI, r3
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	f3bf 8f4f 	dsb	sy
 800584c:	b662      	cpsie	i
 800584e:	61fb      	str	r3, [r7, #28]
}
 8005850:	bf00      	nop
 8005852:	bf00      	nop
 8005854:	e7fd      	b.n	8005852 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005856:	f001 f869 	bl	800692c <xTaskGetSchedulerState>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d102      	bne.n	8005866 <xQueueReceive+0x7a>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <xQueueReceive+0x7e>
 8005866:	2301      	movs	r3, #1
 8005868:	e000      	b.n	800586c <xQueueReceive+0x80>
 800586a:	2300      	movs	r3, #0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10d      	bne.n	800588c <xQueueReceive+0xa0>
	__asm volatile
 8005870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005874:	b672      	cpsid	i
 8005876:	f383 8811 	msr	BASEPRI, r3
 800587a:	f3bf 8f6f 	isb	sy
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	b662      	cpsie	i
 8005884:	61bb      	str	r3, [r7, #24]
}
 8005886:	bf00      	nop
 8005888:	bf00      	nop
 800588a:	e7fd      	b.n	8005888 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800588c:	f001 fdae 	bl	80073ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005894:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005898:	2b00      	cmp	r3, #0
 800589a:	d01f      	beq.n	80058dc <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800589c:	68b9      	ldr	r1, [r7, #8]
 800589e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058a0:	f000 f8f6 	bl	8005a90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80058a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a6:	1e5a      	subs	r2, r3, #1
 80058a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058aa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00f      	beq.n	80058d4 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b6:	3310      	adds	r3, #16
 80058b8:	4618      	mov	r0, r3
 80058ba:	f000 fe6f 	bl	800659c <xTaskRemoveFromEventList>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d007      	beq.n	80058d4 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80058c4:	4b3c      	ldr	r3, [pc, #240]	@ (80059b8 <xQueueReceive+0x1cc>)
 80058c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80058d4:	f001 fdc0 	bl	8007458 <vPortExitCritical>
				return pdPASS;
 80058d8:	2301      	movs	r3, #1
 80058da:	e069      	b.n	80059b0 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d103      	bne.n	80058ea <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80058e2:	f001 fdb9 	bl	8007458 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80058e6:	2300      	movs	r3, #0
 80058e8:	e062      	b.n	80059b0 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d106      	bne.n	80058fe <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058f0:	f107 0310 	add.w	r3, r7, #16
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 feb7 	bl	8006668 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058fa:	2301      	movs	r3, #1
 80058fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058fe:	f001 fdab 	bl	8007458 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005902:	f000 fc1b 	bl	800613c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005906:	f001 fd71 	bl	80073ec <vPortEnterCritical>
 800590a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800590c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005910:	b25b      	sxtb	r3, r3
 8005912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005916:	d103      	bne.n	8005920 <xQueueReceive+0x134>
 8005918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591a:	2200      	movs	r2, #0
 800591c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005922:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005926:	b25b      	sxtb	r3, r3
 8005928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592c:	d103      	bne.n	8005936 <xQueueReceive+0x14a>
 800592e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005930:	2200      	movs	r2, #0
 8005932:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005936:	f001 fd8f 	bl	8007458 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800593a:	1d3a      	adds	r2, r7, #4
 800593c:	f107 0310 	add.w	r3, r7, #16
 8005940:	4611      	mov	r1, r2
 8005942:	4618      	mov	r0, r3
 8005944:	f000 fea6 	bl	8006694 <xTaskCheckForTimeOut>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d123      	bne.n	8005996 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800594e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005950:	f000 f916 	bl	8005b80 <prvIsQueueEmpty>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d017      	beq.n	800598a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800595a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800595c:	3324      	adds	r3, #36	@ 0x24
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	4611      	mov	r1, r2
 8005962:	4618      	mov	r0, r3
 8005964:	f000 fdc4 	bl	80064f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005968:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800596a:	f000 f8b7 	bl	8005adc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800596e:	f000 fbf3 	bl	8006158 <xTaskResumeAll>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d189      	bne.n	800588c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8005978:	4b0f      	ldr	r3, [pc, #60]	@ (80059b8 <xQueueReceive+0x1cc>)
 800597a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	e780      	b.n	800588c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800598a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800598c:	f000 f8a6 	bl	8005adc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005990:	f000 fbe2 	bl	8006158 <xTaskResumeAll>
 8005994:	e77a      	b.n	800588c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005996:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005998:	f000 f8a0 	bl	8005adc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800599c:	f000 fbdc 	bl	8006158 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059a2:	f000 f8ed 	bl	8005b80 <prvIsQueueEmpty>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f43f af6f 	beq.w	800588c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80059ae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3730      	adds	r7, #48	@ 0x30
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	e000ed04 	.word	0xe000ed04

080059bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80059c8:	2300      	movs	r3, #0
 80059ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10d      	bne.n	80059f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d14d      	bne.n	8005a7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 ffbe 	bl	8006968 <xTaskPriorityDisinherit>
 80059ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	609a      	str	r2, [r3, #8]
 80059f4:	e043      	b.n	8005a7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d119      	bne.n	8005a30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6858      	ldr	r0, [r3, #4]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a04:	461a      	mov	r2, r3
 8005a06:	68b9      	ldr	r1, [r7, #8]
 8005a08:	f002 f834 	bl	8007a74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a14:	441a      	add	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d32b      	bcc.n	8005a7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	605a      	str	r2, [r3, #4]
 8005a2e:	e026      	b.n	8005a7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	68d8      	ldr	r0, [r3, #12]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a38:	461a      	mov	r2, r3
 8005a3a:	68b9      	ldr	r1, [r7, #8]
 8005a3c:	f002 f81a 	bl	8007a74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	68da      	ldr	r2, [r3, #12]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a48:	425b      	negs	r3, r3
 8005a4a:	441a      	add	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	68da      	ldr	r2, [r3, #12]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d207      	bcs.n	8005a6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	689a      	ldr	r2, [r3, #8]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a64:	425b      	negs	r3, r3
 8005a66:	441a      	add	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d105      	bne.n	8005a7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d002      	beq.n	8005a7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	1c5a      	adds	r2, r3, #1
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005a86:	697b      	ldr	r3, [r7, #20]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3718      	adds	r7, #24
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d018      	beq.n	8005ad4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68da      	ldr	r2, [r3, #12]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aaa:	441a      	add	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68da      	ldr	r2, [r3, #12]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d303      	bcc.n	8005ac4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	68d9      	ldr	r1, [r3, #12]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005acc:	461a      	mov	r2, r3
 8005ace:	6838      	ldr	r0, [r7, #0]
 8005ad0:	f001 ffd0 	bl	8007a74 <memcpy>
	}
}
 8005ad4:	bf00      	nop
 8005ad6:	3708      	adds	r7, #8
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ae4:	f001 fc82 	bl	80073ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005aee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005af0:	e011      	b.n	8005b16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d012      	beq.n	8005b20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	3324      	adds	r3, #36	@ 0x24
 8005afe:	4618      	mov	r0, r3
 8005b00:	f000 fd4c 	bl	800659c <xTaskRemoveFromEventList>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d001      	beq.n	8005b0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005b0a:	f000 fe2b 	bl	8006764 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005b0e:	7bfb      	ldrb	r3, [r7, #15]
 8005b10:	3b01      	subs	r3, #1
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	dce9      	bgt.n	8005af2 <prvUnlockQueue+0x16>
 8005b1e:	e000      	b.n	8005b22 <prvUnlockQueue+0x46>
					break;
 8005b20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	22ff      	movs	r2, #255	@ 0xff
 8005b26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005b2a:	f001 fc95 	bl	8007458 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005b2e:	f001 fc5d 	bl	80073ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b3a:	e011      	b.n	8005b60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d012      	beq.n	8005b6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	3310      	adds	r3, #16
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f000 fd27 	bl	800659c <xTaskRemoveFromEventList>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005b54:	f000 fe06 	bl	8006764 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005b58:	7bbb      	ldrb	r3, [r7, #14]
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	dce9      	bgt.n	8005b3c <prvUnlockQueue+0x60>
 8005b68:	e000      	b.n	8005b6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005b6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	22ff      	movs	r2, #255	@ 0xff
 8005b70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005b74:	f001 fc70 	bl	8007458 <vPortExitCritical>
}
 8005b78:	bf00      	nop
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b88:	f001 fc30 	bl	80073ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d102      	bne.n	8005b9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b94:	2301      	movs	r3, #1
 8005b96:	60fb      	str	r3, [r7, #12]
 8005b98:	e001      	b.n	8005b9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b9e:	f001 fc5b 	bl	8007458 <vPortExitCritical>

	return xReturn;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005bb4:	f001 fc1a 	bl	80073ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d102      	bne.n	8005bca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	e001      	b.n	8005bce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005bce:	f001 fc43 	bl	8007458 <vPortExitCritical>

	return xReturn;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005be6:	2300      	movs	r3, #0
 8005be8:	60fb      	str	r3, [r7, #12]
 8005bea:	e014      	b.n	8005c16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005bec:	4a0f      	ldr	r2, [pc, #60]	@ (8005c2c <vQueueAddToRegistry+0x50>)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10b      	bne.n	8005c10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005bf8:	490c      	ldr	r1, [pc, #48]	@ (8005c2c <vQueueAddToRegistry+0x50>)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	683a      	ldr	r2, [r7, #0]
 8005bfe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005c02:	4a0a      	ldr	r2, [pc, #40]	@ (8005c2c <vQueueAddToRegistry+0x50>)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	00db      	lsls	r3, r3, #3
 8005c08:	4413      	add	r3, r2
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005c0e:	e006      	b.n	8005c1e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	3301      	adds	r3, #1
 8005c14:	60fb      	str	r3, [r7, #12]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2b07      	cmp	r3, #7
 8005c1a:	d9e7      	bls.n	8005bec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005c1c:	bf00      	nop
 8005c1e:	bf00      	nop
 8005c20:	3714      	adds	r7, #20
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	200008b8 	.word	0x200008b8

08005c30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005c40:	f001 fbd4 	bl	80073ec <vPortEnterCritical>
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c4a:	b25b      	sxtb	r3, r3
 8005c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c50:	d103      	bne.n	8005c5a <vQueueWaitForMessageRestricted+0x2a>
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c60:	b25b      	sxtb	r3, r3
 8005c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c66:	d103      	bne.n	8005c70 <vQueueWaitForMessageRestricted+0x40>
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c70:	f001 fbf2 	bl	8007458 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d106      	bne.n	8005c8a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	3324      	adds	r3, #36	@ 0x24
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	68b9      	ldr	r1, [r7, #8]
 8005c84:	4618      	mov	r0, r3
 8005c86:	f000 fc5b 	bl	8006540 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005c8a:	6978      	ldr	r0, [r7, #20]
 8005c8c:	f7ff ff26 	bl	8005adc <prvUnlockQueue>
	}
 8005c90:	bf00      	nop
 8005c92:	3718      	adds	r7, #24
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b08e      	sub	sp, #56	@ 0x38
 8005c9c:	af04      	add	r7, sp, #16
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
 8005ca4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10d      	bne.n	8005cc8 <xTaskCreateStatic+0x30>
	__asm volatile
 8005cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb0:	b672      	cpsid	i
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	b662      	cpsie	i
 8005cc0:	623b      	str	r3, [r7, #32]
}
 8005cc2:	bf00      	nop
 8005cc4:	bf00      	nop
 8005cc6:	e7fd      	b.n	8005cc4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10d      	bne.n	8005cea <xTaskCreateStatic+0x52>
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd2:	b672      	cpsid	i
 8005cd4:	f383 8811 	msr	BASEPRI, r3
 8005cd8:	f3bf 8f6f 	isb	sy
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	b662      	cpsie	i
 8005ce2:	61fb      	str	r3, [r7, #28]
}
 8005ce4:	bf00      	nop
 8005ce6:	bf00      	nop
 8005ce8:	e7fd      	b.n	8005ce6 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005cea:	235c      	movs	r3, #92	@ 0x5c
 8005cec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	2b5c      	cmp	r3, #92	@ 0x5c
 8005cf2:	d00d      	beq.n	8005d10 <xTaskCreateStatic+0x78>
	__asm volatile
 8005cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf8:	b672      	cpsid	i
 8005cfa:	f383 8811 	msr	BASEPRI, r3
 8005cfe:	f3bf 8f6f 	isb	sy
 8005d02:	f3bf 8f4f 	dsb	sy
 8005d06:	b662      	cpsie	i
 8005d08:	61bb      	str	r3, [r7, #24]
}
 8005d0a:	bf00      	nop
 8005d0c:	bf00      	nop
 8005d0e:	e7fd      	b.n	8005d0c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005d10:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d01e      	beq.n	8005d56 <xTaskCreateStatic+0xbe>
 8005d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d01b      	beq.n	8005d56 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d20:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d26:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005d30:	2300      	movs	r3, #0
 8005d32:	9303      	str	r3, [sp, #12]
 8005d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d36:	9302      	str	r3, [sp, #8]
 8005d38:	f107 0314 	add.w	r3, r7, #20
 8005d3c:	9301      	str	r3, [sp, #4]
 8005d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	68b9      	ldr	r1, [r7, #8]
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f000 f850 	bl	8005dee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d4e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005d50:	f000 f8e0 	bl	8005f14 <prvAddNewTaskToReadyList>
 8005d54:	e001      	b.n	8005d5a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8005d56:	2300      	movs	r3, #0
 8005d58:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005d5a:	697b      	ldr	r3, [r7, #20]
	}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3728      	adds	r7, #40	@ 0x28
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b08c      	sub	sp, #48	@ 0x30
 8005d68:	af04      	add	r7, sp, #16
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	603b      	str	r3, [r7, #0]
 8005d70:	4613      	mov	r3, r2
 8005d72:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005d74:	88fb      	ldrh	r3, [r7, #6]
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f001 fc65 	bl	8007648 <pvPortMalloc>
 8005d7e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00e      	beq.n	8005da4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005d86:	205c      	movs	r0, #92	@ 0x5c
 8005d88:	f001 fc5e 	bl	8007648 <pvPortMalloc>
 8005d8c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d003      	beq.n	8005d9c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	631a      	str	r2, [r3, #48]	@ 0x30
 8005d9a:	e005      	b.n	8005da8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d9c:	6978      	ldr	r0, [r7, #20]
 8005d9e:	f001 fd21 	bl	80077e4 <vPortFree>
 8005da2:	e001      	b.n	8005da8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005da4:	2300      	movs	r3, #0
 8005da6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d017      	beq.n	8005dde <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005db6:	88fa      	ldrh	r2, [r7, #6]
 8005db8:	2300      	movs	r3, #0
 8005dba:	9303      	str	r3, [sp, #12]
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	9302      	str	r3, [sp, #8]
 8005dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dc2:	9301      	str	r3, [sp, #4]
 8005dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc6:	9300      	str	r3, [sp, #0]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	68b9      	ldr	r1, [r7, #8]
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f000 f80e 	bl	8005dee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005dd2:	69f8      	ldr	r0, [r7, #28]
 8005dd4:	f000 f89e 	bl	8005f14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	61bb      	str	r3, [r7, #24]
 8005ddc:	e002      	b.n	8005de4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005dde:	f04f 33ff 	mov.w	r3, #4294967295
 8005de2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005de4:	69bb      	ldr	r3, [r7, #24]
	}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3720      	adds	r7, #32
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b088      	sub	sp, #32
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	60f8      	str	r0, [r7, #12]
 8005df6:	60b9      	str	r1, [r7, #8]
 8005df8:	607a      	str	r2, [r7, #4]
 8005dfa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dfe:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	461a      	mov	r2, r3
 8005e06:	21a5      	movs	r1, #165	@ 0xa5
 8005e08:	f001 fe08 	bl	8007a1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e10:	6879      	ldr	r1, [r7, #4]
 8005e12:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8005e16:	440b      	add	r3, r1
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4413      	add	r3, r2
 8005e1c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	f023 0307 	bic.w	r3, r3, #7
 8005e24:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	f003 0307 	and.w	r3, r3, #7
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00d      	beq.n	8005e4c <prvInitialiseNewTask+0x5e>
	__asm volatile
 8005e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e34:	b672      	cpsid	i
 8005e36:	f383 8811 	msr	BASEPRI, r3
 8005e3a:	f3bf 8f6f 	isb	sy
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	b662      	cpsie	i
 8005e44:	617b      	str	r3, [r7, #20]
}
 8005e46:	bf00      	nop
 8005e48:	bf00      	nop
 8005e4a:	e7fd      	b.n	8005e48 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d01f      	beq.n	8005e92 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e52:	2300      	movs	r3, #0
 8005e54:	61fb      	str	r3, [r7, #28]
 8005e56:	e012      	b.n	8005e7e <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e58:	68ba      	ldr	r2, [r7, #8]
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	7819      	ldrb	r1, [r3, #0]
 8005e60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	4413      	add	r3, r2
 8005e66:	3334      	adds	r3, #52	@ 0x34
 8005e68:	460a      	mov	r2, r1
 8005e6a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	4413      	add	r3, r2
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d006      	beq.n	8005e86 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	61fb      	str	r3, [r7, #28]
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	2b0f      	cmp	r3, #15
 8005e82:	d9e9      	bls.n	8005e58 <prvInitialiseNewTask+0x6a>
 8005e84:	e000      	b.n	8005e88 <prvInitialiseNewTask+0x9a>
			{
				break;
 8005e86:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e90:	e003      	b.n	8005e9a <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e9c:	2b37      	cmp	r3, #55	@ 0x37
 8005e9e:	d901      	bls.n	8005ea4 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ea0:	2337      	movs	r3, #55	@ 0x37
 8005ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ea8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005eae:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb8:	3304      	adds	r3, #4
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7ff f93e 	bl	800513c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec2:	3318      	adds	r3, #24
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7ff f939 	bl	800513c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ecc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ece:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005edc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ede:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	68f9      	ldr	r1, [r7, #12]
 8005ef2:	69b8      	ldr	r0, [r7, #24]
 8005ef4:	f001 f968 	bl	80071c8 <pxPortInitialiseStack>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d002      	beq.n	8005f0a <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f0a:	bf00      	nop
 8005f0c:	3720      	adds	r7, #32
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
	...

08005f14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f1c:	f001 fa66 	bl	80073ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f20:	4b2d      	ldr	r3, [pc, #180]	@ (8005fd8 <prvAddNewTaskToReadyList+0xc4>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	3301      	adds	r3, #1
 8005f26:	4a2c      	ldr	r2, [pc, #176]	@ (8005fd8 <prvAddNewTaskToReadyList+0xc4>)
 8005f28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f2a:	4b2c      	ldr	r3, [pc, #176]	@ (8005fdc <prvAddNewTaskToReadyList+0xc8>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d109      	bne.n	8005f46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005f32:	4a2a      	ldr	r2, [pc, #168]	@ (8005fdc <prvAddNewTaskToReadyList+0xc8>)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f38:	4b27      	ldr	r3, [pc, #156]	@ (8005fd8 <prvAddNewTaskToReadyList+0xc4>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d110      	bne.n	8005f62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005f40:	f000 fc34 	bl	80067ac <prvInitialiseTaskLists>
 8005f44:	e00d      	b.n	8005f62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f46:	4b26      	ldr	r3, [pc, #152]	@ (8005fe0 <prvAddNewTaskToReadyList+0xcc>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d109      	bne.n	8005f62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f4e:	4b23      	ldr	r3, [pc, #140]	@ (8005fdc <prvAddNewTaskToReadyList+0xc8>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d802      	bhi.n	8005f62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f5c:	4a1f      	ldr	r2, [pc, #124]	@ (8005fdc <prvAddNewTaskToReadyList+0xc8>)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f62:	4b20      	ldr	r3, [pc, #128]	@ (8005fe4 <prvAddNewTaskToReadyList+0xd0>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	3301      	adds	r3, #1
 8005f68:	4a1e      	ldr	r2, [pc, #120]	@ (8005fe4 <prvAddNewTaskToReadyList+0xd0>)
 8005f6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8005fe4 <prvAddNewTaskToReadyList+0xd0>)
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f78:	4b1b      	ldr	r3, [pc, #108]	@ (8005fe8 <prvAddNewTaskToReadyList+0xd4>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d903      	bls.n	8005f88 <prvAddNewTaskToReadyList+0x74>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f84:	4a18      	ldr	r2, [pc, #96]	@ (8005fe8 <prvAddNewTaskToReadyList+0xd4>)
 8005f86:	6013      	str	r3, [r2, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4413      	add	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4a15      	ldr	r2, [pc, #84]	@ (8005fec <prvAddNewTaskToReadyList+0xd8>)
 8005f96:	441a      	add	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	4610      	mov	r0, r2
 8005fa0:	f7ff f8d9 	bl	8005156 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005fa4:	f001 fa58 	bl	8007458 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8005fe0 <prvAddNewTaskToReadyList+0xcc>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00e      	beq.n	8005fce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8005fdc <prvAddNewTaskToReadyList+0xc8>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d207      	bcs.n	8005fce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8005ff0 <prvAddNewTaskToReadyList+0xdc>)
 8005fc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fc4:	601a      	str	r2, [r3, #0]
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fce:	bf00      	nop
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	20000dcc 	.word	0x20000dcc
 8005fdc:	200008f8 	.word	0x200008f8
 8005fe0:	20000dd8 	.word	0x20000dd8
 8005fe4:	20000de8 	.word	0x20000de8
 8005fe8:	20000dd4 	.word	0x20000dd4
 8005fec:	200008fc 	.word	0x200008fc
 8005ff0:	e000ed04 	.word	0xe000ed04

08005ff4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d01a      	beq.n	800603c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006006:	4b15      	ldr	r3, [pc, #84]	@ (800605c <vTaskDelay+0x68>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00d      	beq.n	800602a <vTaskDelay+0x36>
	__asm volatile
 800600e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006012:	b672      	cpsid	i
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	b662      	cpsie	i
 8006022:	60bb      	str	r3, [r7, #8]
}
 8006024:	bf00      	nop
 8006026:	bf00      	nop
 8006028:	e7fd      	b.n	8006026 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800602a:	f000 f887 	bl	800613c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800602e:	2100      	movs	r1, #0
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 fd0d 	bl	8006a50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006036:	f000 f88f 	bl	8006158 <xTaskResumeAll>
 800603a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d107      	bne.n	8006052 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8006042:	4b07      	ldr	r3, [pc, #28]	@ (8006060 <vTaskDelay+0x6c>)
 8006044:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006048:	601a      	str	r2, [r3, #0]
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006052:	bf00      	nop
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	20000df4 	.word	0x20000df4
 8006060:	e000ed04 	.word	0xe000ed04

08006064 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b08a      	sub	sp, #40	@ 0x28
 8006068:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800606a:	2300      	movs	r3, #0
 800606c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800606e:	2300      	movs	r3, #0
 8006070:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006072:	463a      	mov	r2, r7
 8006074:	1d39      	adds	r1, r7, #4
 8006076:	f107 0308 	add.w	r3, r7, #8
 800607a:	4618      	mov	r0, r3
 800607c:	f7ff f80a 	bl	8005094 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006080:	6839      	ldr	r1, [r7, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	9202      	str	r2, [sp, #8]
 8006088:	9301      	str	r3, [sp, #4]
 800608a:	2300      	movs	r3, #0
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	2300      	movs	r3, #0
 8006090:	460a      	mov	r2, r1
 8006092:	4924      	ldr	r1, [pc, #144]	@ (8006124 <vTaskStartScheduler+0xc0>)
 8006094:	4824      	ldr	r0, [pc, #144]	@ (8006128 <vTaskStartScheduler+0xc4>)
 8006096:	f7ff fdff 	bl	8005c98 <xTaskCreateStatic>
 800609a:	4603      	mov	r3, r0
 800609c:	4a23      	ldr	r2, [pc, #140]	@ (800612c <vTaskStartScheduler+0xc8>)
 800609e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80060a0:	4b22      	ldr	r3, [pc, #136]	@ (800612c <vTaskStartScheduler+0xc8>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d002      	beq.n	80060ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80060a8:	2301      	movs	r3, #1
 80060aa:	617b      	str	r3, [r7, #20]
 80060ac:	e001      	b.n	80060b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80060ae:	2300      	movs	r3, #0
 80060b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d102      	bne.n	80060be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80060b8:	f000 fd1e 	bl	8006af8 <xTimerCreateTimerTask>
 80060bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d118      	bne.n	80060f6 <vTaskStartScheduler+0x92>
	__asm volatile
 80060c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c8:	b672      	cpsid	i
 80060ca:	f383 8811 	msr	BASEPRI, r3
 80060ce:	f3bf 8f6f 	isb	sy
 80060d2:	f3bf 8f4f 	dsb	sy
 80060d6:	b662      	cpsie	i
 80060d8:	613b      	str	r3, [r7, #16]
}
 80060da:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80060dc:	4b14      	ldr	r3, [pc, #80]	@ (8006130 <vTaskStartScheduler+0xcc>)
 80060de:	f04f 32ff 	mov.w	r2, #4294967295
 80060e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80060e4:	4b13      	ldr	r3, [pc, #76]	@ (8006134 <vTaskStartScheduler+0xd0>)
 80060e6:	2201      	movs	r2, #1
 80060e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80060ea:	4b13      	ldr	r3, [pc, #76]	@ (8006138 <vTaskStartScheduler+0xd4>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80060f0:	f001 f8fe 	bl	80072f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80060f4:	e011      	b.n	800611a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060fc:	d10d      	bne.n	800611a <vTaskStartScheduler+0xb6>
	__asm volatile
 80060fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006102:	b672      	cpsid	i
 8006104:	f383 8811 	msr	BASEPRI, r3
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	b662      	cpsie	i
 8006112:	60fb      	str	r3, [r7, #12]
}
 8006114:	bf00      	nop
 8006116:	bf00      	nop
 8006118:	e7fd      	b.n	8006116 <vTaskStartScheduler+0xb2>
}
 800611a:	bf00      	nop
 800611c:	3718      	adds	r7, #24
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	08007ac8 	.word	0x08007ac8
 8006128:	0800677d 	.word	0x0800677d
 800612c:	20000df0 	.word	0x20000df0
 8006130:	20000dec 	.word	0x20000dec
 8006134:	20000dd8 	.word	0x20000dd8
 8006138:	20000dd0 	.word	0x20000dd0

0800613c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800613c:	b480      	push	{r7}
 800613e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006140:	4b04      	ldr	r3, [pc, #16]	@ (8006154 <vTaskSuspendAll+0x18>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3301      	adds	r3, #1
 8006146:	4a03      	ldr	r2, [pc, #12]	@ (8006154 <vTaskSuspendAll+0x18>)
 8006148:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800614a:	bf00      	nop
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr
 8006154:	20000df4 	.word	0x20000df4

08006158 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800615e:	2300      	movs	r3, #0
 8006160:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006162:	2300      	movs	r3, #0
 8006164:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006166:	4b43      	ldr	r3, [pc, #268]	@ (8006274 <xTaskResumeAll+0x11c>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10d      	bne.n	800618a <xTaskResumeAll+0x32>
	__asm volatile
 800616e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006172:	b672      	cpsid	i
 8006174:	f383 8811 	msr	BASEPRI, r3
 8006178:	f3bf 8f6f 	isb	sy
 800617c:	f3bf 8f4f 	dsb	sy
 8006180:	b662      	cpsie	i
 8006182:	603b      	str	r3, [r7, #0]
}
 8006184:	bf00      	nop
 8006186:	bf00      	nop
 8006188:	e7fd      	b.n	8006186 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800618a:	f001 f92f 	bl	80073ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800618e:	4b39      	ldr	r3, [pc, #228]	@ (8006274 <xTaskResumeAll+0x11c>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3b01      	subs	r3, #1
 8006194:	4a37      	ldr	r2, [pc, #220]	@ (8006274 <xTaskResumeAll+0x11c>)
 8006196:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006198:	4b36      	ldr	r3, [pc, #216]	@ (8006274 <xTaskResumeAll+0x11c>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d162      	bne.n	8006266 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80061a0:	4b35      	ldr	r3, [pc, #212]	@ (8006278 <xTaskResumeAll+0x120>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d05e      	beq.n	8006266 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061a8:	e02f      	b.n	800620a <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061aa:	4b34      	ldr	r3, [pc, #208]	@ (800627c <xTaskResumeAll+0x124>)
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	3318      	adds	r3, #24
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7ff f82a 	bl	8005210 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	3304      	adds	r3, #4
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7ff f825 	bl	8005210 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061ca:	4b2d      	ldr	r3, [pc, #180]	@ (8006280 <xTaskResumeAll+0x128>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d903      	bls.n	80061da <xTaskResumeAll+0x82>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d6:	4a2a      	ldr	r2, [pc, #168]	@ (8006280 <xTaskResumeAll+0x128>)
 80061d8:	6013      	str	r3, [r2, #0]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061de:	4613      	mov	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4413      	add	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4a27      	ldr	r2, [pc, #156]	@ (8006284 <xTaskResumeAll+0x12c>)
 80061e8:	441a      	add	r2, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	3304      	adds	r3, #4
 80061ee:	4619      	mov	r1, r3
 80061f0:	4610      	mov	r0, r2
 80061f2:	f7fe ffb0 	bl	8005156 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061fa:	4b23      	ldr	r3, [pc, #140]	@ (8006288 <xTaskResumeAll+0x130>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006200:	429a      	cmp	r2, r3
 8006202:	d302      	bcc.n	800620a <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8006204:	4b21      	ldr	r3, [pc, #132]	@ (800628c <xTaskResumeAll+0x134>)
 8006206:	2201      	movs	r2, #1
 8006208:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800620a:	4b1c      	ldr	r3, [pc, #112]	@ (800627c <xTaskResumeAll+0x124>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1cb      	bne.n	80061aa <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d001      	beq.n	800621c <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006218:	f000 fb68 	bl	80068ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800621c:	4b1c      	ldr	r3, [pc, #112]	@ (8006290 <xTaskResumeAll+0x138>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d010      	beq.n	800624a <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006228:	f000 f846 	bl	80062b8 <xTaskIncrementTick>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d002      	beq.n	8006238 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8006232:	4b16      	ldr	r3, [pc, #88]	@ (800628c <xTaskResumeAll+0x134>)
 8006234:	2201      	movs	r2, #1
 8006236:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	3b01      	subs	r3, #1
 800623c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1f1      	bne.n	8006228 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8006244:	4b12      	ldr	r3, [pc, #72]	@ (8006290 <xTaskResumeAll+0x138>)
 8006246:	2200      	movs	r2, #0
 8006248:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800624a:	4b10      	ldr	r3, [pc, #64]	@ (800628c <xTaskResumeAll+0x134>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d009      	beq.n	8006266 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006252:	2301      	movs	r3, #1
 8006254:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006256:	4b0f      	ldr	r3, [pc, #60]	@ (8006294 <xTaskResumeAll+0x13c>)
 8006258:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006266:	f001 f8f7 	bl	8007458 <vPortExitCritical>

	return xAlreadyYielded;
 800626a:	68bb      	ldr	r3, [r7, #8]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	20000df4 	.word	0x20000df4
 8006278:	20000dcc 	.word	0x20000dcc
 800627c:	20000d8c 	.word	0x20000d8c
 8006280:	20000dd4 	.word	0x20000dd4
 8006284:	200008fc 	.word	0x200008fc
 8006288:	200008f8 	.word	0x200008f8
 800628c:	20000de0 	.word	0x20000de0
 8006290:	20000ddc 	.word	0x20000ddc
 8006294:	e000ed04 	.word	0xe000ed04

08006298 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800629e:	4b05      	ldr	r3, [pc, #20]	@ (80062b4 <xTaskGetTickCount+0x1c>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80062a4:	687b      	ldr	r3, [r7, #4]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	20000dd0 	.word	0x20000dd0

080062b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80062be:	2300      	movs	r3, #0
 80062c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062c2:	4b50      	ldr	r3, [pc, #320]	@ (8006404 <xTaskIncrementTick+0x14c>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f040 808c 	bne.w	80063e4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80062cc:	4b4e      	ldr	r3, [pc, #312]	@ (8006408 <xTaskIncrementTick+0x150>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	3301      	adds	r3, #1
 80062d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80062d4:	4a4c      	ldr	r2, [pc, #304]	@ (8006408 <xTaskIncrementTick+0x150>)
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d123      	bne.n	8006328 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80062e0:	4b4a      	ldr	r3, [pc, #296]	@ (800640c <xTaskIncrementTick+0x154>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00d      	beq.n	8006306 <xTaskIncrementTick+0x4e>
	__asm volatile
 80062ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ee:	b672      	cpsid	i
 80062f0:	f383 8811 	msr	BASEPRI, r3
 80062f4:	f3bf 8f6f 	isb	sy
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	b662      	cpsie	i
 80062fe:	603b      	str	r3, [r7, #0]
}
 8006300:	bf00      	nop
 8006302:	bf00      	nop
 8006304:	e7fd      	b.n	8006302 <xTaskIncrementTick+0x4a>
 8006306:	4b41      	ldr	r3, [pc, #260]	@ (800640c <xTaskIncrementTick+0x154>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	60fb      	str	r3, [r7, #12]
 800630c:	4b40      	ldr	r3, [pc, #256]	@ (8006410 <xTaskIncrementTick+0x158>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a3e      	ldr	r2, [pc, #248]	@ (800640c <xTaskIncrementTick+0x154>)
 8006312:	6013      	str	r3, [r2, #0]
 8006314:	4a3e      	ldr	r2, [pc, #248]	@ (8006410 <xTaskIncrementTick+0x158>)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6013      	str	r3, [r2, #0]
 800631a:	4b3e      	ldr	r3, [pc, #248]	@ (8006414 <xTaskIncrementTick+0x15c>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	3301      	adds	r3, #1
 8006320:	4a3c      	ldr	r2, [pc, #240]	@ (8006414 <xTaskIncrementTick+0x15c>)
 8006322:	6013      	str	r3, [r2, #0]
 8006324:	f000 fae2 	bl	80068ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006328:	4b3b      	ldr	r3, [pc, #236]	@ (8006418 <xTaskIncrementTick+0x160>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	429a      	cmp	r2, r3
 8006330:	d349      	bcc.n	80063c6 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006332:	4b36      	ldr	r3, [pc, #216]	@ (800640c <xTaskIncrementTick+0x154>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d104      	bne.n	8006346 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800633c:	4b36      	ldr	r3, [pc, #216]	@ (8006418 <xTaskIncrementTick+0x160>)
 800633e:	f04f 32ff 	mov.w	r2, #4294967295
 8006342:	601a      	str	r2, [r3, #0]
					break;
 8006344:	e03f      	b.n	80063c6 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006346:	4b31      	ldr	r3, [pc, #196]	@ (800640c <xTaskIncrementTick+0x154>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	429a      	cmp	r2, r3
 800635c:	d203      	bcs.n	8006366 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800635e:	4a2e      	ldr	r2, [pc, #184]	@ (8006418 <xTaskIncrementTick+0x160>)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006364:	e02f      	b.n	80063c6 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	3304      	adds	r3, #4
 800636a:	4618      	mov	r0, r3
 800636c:	f7fe ff50 	bl	8005210 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006374:	2b00      	cmp	r3, #0
 8006376:	d004      	beq.n	8006382 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	3318      	adds	r3, #24
 800637c:	4618      	mov	r0, r3
 800637e:	f7fe ff47 	bl	8005210 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006386:	4b25      	ldr	r3, [pc, #148]	@ (800641c <xTaskIncrementTick+0x164>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	429a      	cmp	r2, r3
 800638c:	d903      	bls.n	8006396 <xTaskIncrementTick+0xde>
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006392:	4a22      	ldr	r2, [pc, #136]	@ (800641c <xTaskIncrementTick+0x164>)
 8006394:	6013      	str	r3, [r2, #0]
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800639a:	4613      	mov	r3, r2
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	4413      	add	r3, r2
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	4a1f      	ldr	r2, [pc, #124]	@ (8006420 <xTaskIncrementTick+0x168>)
 80063a4:	441a      	add	r2, r3
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	3304      	adds	r3, #4
 80063aa:	4619      	mov	r1, r3
 80063ac:	4610      	mov	r0, r2
 80063ae:	f7fe fed2 	bl	8005156 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063b6:	4b1b      	ldr	r3, [pc, #108]	@ (8006424 <xTaskIncrementTick+0x16c>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063bc:	429a      	cmp	r2, r3
 80063be:	d3b8      	bcc.n	8006332 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80063c0:	2301      	movs	r3, #1
 80063c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063c4:	e7b5      	b.n	8006332 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80063c6:	4b17      	ldr	r3, [pc, #92]	@ (8006424 <xTaskIncrementTick+0x16c>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063cc:	4914      	ldr	r1, [pc, #80]	@ (8006420 <xTaskIncrementTick+0x168>)
 80063ce:	4613      	mov	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4413      	add	r3, r2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	440b      	add	r3, r1
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d907      	bls.n	80063ee <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80063de:	2301      	movs	r3, #1
 80063e0:	617b      	str	r3, [r7, #20]
 80063e2:	e004      	b.n	80063ee <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80063e4:	4b10      	ldr	r3, [pc, #64]	@ (8006428 <xTaskIncrementTick+0x170>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	3301      	adds	r3, #1
 80063ea:	4a0f      	ldr	r2, [pc, #60]	@ (8006428 <xTaskIncrementTick+0x170>)
 80063ec:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80063ee:	4b0f      	ldr	r3, [pc, #60]	@ (800642c <xTaskIncrementTick+0x174>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d001      	beq.n	80063fa <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80063f6:	2301      	movs	r3, #1
 80063f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80063fa:	697b      	ldr	r3, [r7, #20]
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3718      	adds	r7, #24
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}
 8006404:	20000df4 	.word	0x20000df4
 8006408:	20000dd0 	.word	0x20000dd0
 800640c:	20000d84 	.word	0x20000d84
 8006410:	20000d88 	.word	0x20000d88
 8006414:	20000de4 	.word	0x20000de4
 8006418:	20000dec 	.word	0x20000dec
 800641c:	20000dd4 	.word	0x20000dd4
 8006420:	200008fc 	.word	0x200008fc
 8006424:	200008f8 	.word	0x200008f8
 8006428:	20000ddc 	.word	0x20000ddc
 800642c:	20000de0 	.word	0x20000de0

08006430 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006436:	4b29      	ldr	r3, [pc, #164]	@ (80064dc <vTaskSwitchContext+0xac>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d003      	beq.n	8006446 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800643e:	4b28      	ldr	r3, [pc, #160]	@ (80064e0 <vTaskSwitchContext+0xb0>)
 8006440:	2201      	movs	r2, #1
 8006442:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006444:	e044      	b.n	80064d0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006446:	4b26      	ldr	r3, [pc, #152]	@ (80064e0 <vTaskSwitchContext+0xb0>)
 8006448:	2200      	movs	r2, #0
 800644a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800644c:	4b25      	ldr	r3, [pc, #148]	@ (80064e4 <vTaskSwitchContext+0xb4>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	60fb      	str	r3, [r7, #12]
 8006452:	e013      	b.n	800647c <vTaskSwitchContext+0x4c>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10d      	bne.n	8006476 <vTaskSwitchContext+0x46>
	__asm volatile
 800645a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800645e:	b672      	cpsid	i
 8006460:	f383 8811 	msr	BASEPRI, r3
 8006464:	f3bf 8f6f 	isb	sy
 8006468:	f3bf 8f4f 	dsb	sy
 800646c:	b662      	cpsie	i
 800646e:	607b      	str	r3, [r7, #4]
}
 8006470:	bf00      	nop
 8006472:	bf00      	nop
 8006474:	e7fd      	b.n	8006472 <vTaskSwitchContext+0x42>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	3b01      	subs	r3, #1
 800647a:	60fb      	str	r3, [r7, #12]
 800647c:	491a      	ldr	r1, [pc, #104]	@ (80064e8 <vTaskSwitchContext+0xb8>)
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	4613      	mov	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	440b      	add	r3, r1
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d0e1      	beq.n	8006454 <vTaskSwitchContext+0x24>
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	4613      	mov	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4a13      	ldr	r2, [pc, #76]	@ (80064e8 <vTaskSwitchContext+0xb8>)
 800649c:	4413      	add	r3, r2
 800649e:	60bb      	str	r3, [r7, #8]
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	605a      	str	r2, [r3, #4]
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	685a      	ldr	r2, [r3, #4]
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	3308      	adds	r3, #8
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d104      	bne.n	80064c0 <vTaskSwitchContext+0x90>
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	605a      	str	r2, [r3, #4]
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	4a09      	ldr	r2, [pc, #36]	@ (80064ec <vTaskSwitchContext+0xbc>)
 80064c8:	6013      	str	r3, [r2, #0]
 80064ca:	4a06      	ldr	r2, [pc, #24]	@ (80064e4 <vTaskSwitchContext+0xb4>)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6013      	str	r3, [r2, #0]
}
 80064d0:	bf00      	nop
 80064d2:	3714      	adds	r7, #20
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr
 80064dc:	20000df4 	.word	0x20000df4
 80064e0:	20000de0 	.word	0x20000de0
 80064e4:	20000dd4 	.word	0x20000dd4
 80064e8:	200008fc 	.word	0x200008fc
 80064ec:	200008f8 	.word	0x200008f8

080064f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10d      	bne.n	800651c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8006500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006504:	b672      	cpsid	i
 8006506:	f383 8811 	msr	BASEPRI, r3
 800650a:	f3bf 8f6f 	isb	sy
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	b662      	cpsie	i
 8006514:	60fb      	str	r3, [r7, #12]
}
 8006516:	bf00      	nop
 8006518:	bf00      	nop
 800651a:	e7fd      	b.n	8006518 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800651c:	4b07      	ldr	r3, [pc, #28]	@ (800653c <vTaskPlaceOnEventList+0x4c>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	3318      	adds	r3, #24
 8006522:	4619      	mov	r1, r3
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f7fe fe3a 	bl	800519e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800652a:	2101      	movs	r1, #1
 800652c:	6838      	ldr	r0, [r7, #0]
 800652e:	f000 fa8f 	bl	8006a50 <prvAddCurrentTaskToDelayedList>
}
 8006532:	bf00      	nop
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	200008f8 	.word	0x200008f8

08006540 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10d      	bne.n	800656e <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8006552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006556:	b672      	cpsid	i
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	b662      	cpsie	i
 8006566:	617b      	str	r3, [r7, #20]
}
 8006568:	bf00      	nop
 800656a:	bf00      	nop
 800656c:	e7fd      	b.n	800656a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800656e:	4b0a      	ldr	r3, [pc, #40]	@ (8006598 <vTaskPlaceOnEventListRestricted+0x58>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	3318      	adds	r3, #24
 8006574:	4619      	mov	r1, r3
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f7fe fded 	bl	8005156 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d002      	beq.n	8006588 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8006582:	f04f 33ff 	mov.w	r3, #4294967295
 8006586:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006588:	6879      	ldr	r1, [r7, #4]
 800658a:	68b8      	ldr	r0, [r7, #8]
 800658c:	f000 fa60 	bl	8006a50 <prvAddCurrentTaskToDelayedList>
	}
 8006590:	bf00      	nop
 8006592:	3718      	adds	r7, #24
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	200008f8 	.word	0x200008f8

0800659c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10d      	bne.n	80065ce <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80065b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b6:	b672      	cpsid	i
 80065b8:	f383 8811 	msr	BASEPRI, r3
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	b662      	cpsie	i
 80065c6:	60fb      	str	r3, [r7, #12]
}
 80065c8:	bf00      	nop
 80065ca:	bf00      	nop
 80065cc:	e7fd      	b.n	80065ca <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	3318      	adds	r3, #24
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fe fe1c 	bl	8005210 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065d8:	4b1d      	ldr	r3, [pc, #116]	@ (8006650 <xTaskRemoveFromEventList+0xb4>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d11d      	bne.n	800661c <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	3304      	adds	r3, #4
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7fe fe13 	bl	8005210 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ee:	4b19      	ldr	r3, [pc, #100]	@ (8006654 <xTaskRemoveFromEventList+0xb8>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d903      	bls.n	80065fe <xTaskRemoveFromEventList+0x62>
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065fa:	4a16      	ldr	r2, [pc, #88]	@ (8006654 <xTaskRemoveFromEventList+0xb8>)
 80065fc:	6013      	str	r3, [r2, #0]
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006602:	4613      	mov	r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4413      	add	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4a13      	ldr	r2, [pc, #76]	@ (8006658 <xTaskRemoveFromEventList+0xbc>)
 800660c:	441a      	add	r2, r3
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	3304      	adds	r3, #4
 8006612:	4619      	mov	r1, r3
 8006614:	4610      	mov	r0, r2
 8006616:	f7fe fd9e 	bl	8005156 <vListInsertEnd>
 800661a:	e005      	b.n	8006628 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	3318      	adds	r3, #24
 8006620:	4619      	mov	r1, r3
 8006622:	480e      	ldr	r0, [pc, #56]	@ (800665c <xTaskRemoveFromEventList+0xc0>)
 8006624:	f7fe fd97 	bl	8005156 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800662c:	4b0c      	ldr	r3, [pc, #48]	@ (8006660 <xTaskRemoveFromEventList+0xc4>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006632:	429a      	cmp	r2, r3
 8006634:	d905      	bls.n	8006642 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006636:	2301      	movs	r3, #1
 8006638:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800663a:	4b0a      	ldr	r3, [pc, #40]	@ (8006664 <xTaskRemoveFromEventList+0xc8>)
 800663c:	2201      	movs	r2, #1
 800663e:	601a      	str	r2, [r3, #0]
 8006640:	e001      	b.n	8006646 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8006642:	2300      	movs	r3, #0
 8006644:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006646:	697b      	ldr	r3, [r7, #20]
}
 8006648:	4618      	mov	r0, r3
 800664a:	3718      	adds	r7, #24
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}
 8006650:	20000df4 	.word	0x20000df4
 8006654:	20000dd4 	.word	0x20000dd4
 8006658:	200008fc 	.word	0x200008fc
 800665c:	20000d8c 	.word	0x20000d8c
 8006660:	200008f8 	.word	0x200008f8
 8006664:	20000de0 	.word	0x20000de0

08006668 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006670:	4b06      	ldr	r3, [pc, #24]	@ (800668c <vTaskInternalSetTimeOutState+0x24>)
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006678:	4b05      	ldr	r3, [pc, #20]	@ (8006690 <vTaskInternalSetTimeOutState+0x28>)
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	605a      	str	r2, [r3, #4]
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	20000de4 	.word	0x20000de4
 8006690:	20000dd0 	.word	0x20000dd0

08006694 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b088      	sub	sp, #32
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10d      	bne.n	80066c0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80066a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a8:	b672      	cpsid	i
 80066aa:	f383 8811 	msr	BASEPRI, r3
 80066ae:	f3bf 8f6f 	isb	sy
 80066b2:	f3bf 8f4f 	dsb	sy
 80066b6:	b662      	cpsie	i
 80066b8:	613b      	str	r3, [r7, #16]
}
 80066ba:	bf00      	nop
 80066bc:	bf00      	nop
 80066be:	e7fd      	b.n	80066bc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10d      	bne.n	80066e2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80066c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ca:	b672      	cpsid	i
 80066cc:	f383 8811 	msr	BASEPRI, r3
 80066d0:	f3bf 8f6f 	isb	sy
 80066d4:	f3bf 8f4f 	dsb	sy
 80066d8:	b662      	cpsie	i
 80066da:	60fb      	str	r3, [r7, #12]
}
 80066dc:	bf00      	nop
 80066de:	bf00      	nop
 80066e0:	e7fd      	b.n	80066de <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80066e2:	f000 fe83 	bl	80073ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80066e6:	4b1d      	ldr	r3, [pc, #116]	@ (800675c <xTaskCheckForTimeOut+0xc8>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	69ba      	ldr	r2, [r7, #24]
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066fe:	d102      	bne.n	8006706 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006700:	2300      	movs	r3, #0
 8006702:	61fb      	str	r3, [r7, #28]
 8006704:	e023      	b.n	800674e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	4b15      	ldr	r3, [pc, #84]	@ (8006760 <xTaskCheckForTimeOut+0xcc>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	429a      	cmp	r2, r3
 8006710:	d007      	beq.n	8006722 <xTaskCheckForTimeOut+0x8e>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	69ba      	ldr	r2, [r7, #24]
 8006718:	429a      	cmp	r2, r3
 800671a:	d302      	bcc.n	8006722 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800671c:	2301      	movs	r3, #1
 800671e:	61fb      	str	r3, [r7, #28]
 8006720:	e015      	b.n	800674e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	429a      	cmp	r2, r3
 800672a:	d20b      	bcs.n	8006744 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	1ad2      	subs	r2, r2, r3
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f7ff ff95 	bl	8006668 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800673e:	2300      	movs	r3, #0
 8006740:	61fb      	str	r3, [r7, #28]
 8006742:	e004      	b.n	800674e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	2200      	movs	r2, #0
 8006748:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800674a:	2301      	movs	r3, #1
 800674c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800674e:	f000 fe83 	bl	8007458 <vPortExitCritical>

	return xReturn;
 8006752:	69fb      	ldr	r3, [r7, #28]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3720      	adds	r7, #32
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	20000dd0 	.word	0x20000dd0
 8006760:	20000de4 	.word	0x20000de4

08006764 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006764:	b480      	push	{r7}
 8006766:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006768:	4b03      	ldr	r3, [pc, #12]	@ (8006778 <vTaskMissedYield+0x14>)
 800676a:	2201      	movs	r2, #1
 800676c:	601a      	str	r2, [r3, #0]
}
 800676e:	bf00      	nop
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	20000de0 	.word	0x20000de0

0800677c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006784:	f000 f852 	bl	800682c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006788:	4b06      	ldr	r3, [pc, #24]	@ (80067a4 <prvIdleTask+0x28>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d9f9      	bls.n	8006784 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006790:	4b05      	ldr	r3, [pc, #20]	@ (80067a8 <prvIdleTask+0x2c>)
 8006792:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006796:	601a      	str	r2, [r3, #0]
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80067a0:	e7f0      	b.n	8006784 <prvIdleTask+0x8>
 80067a2:	bf00      	nop
 80067a4:	200008fc 	.word	0x200008fc
 80067a8:	e000ed04 	.word	0xe000ed04

080067ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067b2:	2300      	movs	r3, #0
 80067b4:	607b      	str	r3, [r7, #4]
 80067b6:	e00c      	b.n	80067d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	4613      	mov	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4a12      	ldr	r2, [pc, #72]	@ (800680c <prvInitialiseTaskLists+0x60>)
 80067c4:	4413      	add	r3, r2
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7fe fc98 	bl	80050fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	3301      	adds	r3, #1
 80067d0:	607b      	str	r3, [r7, #4]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2b37      	cmp	r3, #55	@ 0x37
 80067d6:	d9ef      	bls.n	80067b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80067d8:	480d      	ldr	r0, [pc, #52]	@ (8006810 <prvInitialiseTaskLists+0x64>)
 80067da:	f7fe fc8f 	bl	80050fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80067de:	480d      	ldr	r0, [pc, #52]	@ (8006814 <prvInitialiseTaskLists+0x68>)
 80067e0:	f7fe fc8c 	bl	80050fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80067e4:	480c      	ldr	r0, [pc, #48]	@ (8006818 <prvInitialiseTaskLists+0x6c>)
 80067e6:	f7fe fc89 	bl	80050fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80067ea:	480c      	ldr	r0, [pc, #48]	@ (800681c <prvInitialiseTaskLists+0x70>)
 80067ec:	f7fe fc86 	bl	80050fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80067f0:	480b      	ldr	r0, [pc, #44]	@ (8006820 <prvInitialiseTaskLists+0x74>)
 80067f2:	f7fe fc83 	bl	80050fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80067f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006824 <prvInitialiseTaskLists+0x78>)
 80067f8:	4a05      	ldr	r2, [pc, #20]	@ (8006810 <prvInitialiseTaskLists+0x64>)
 80067fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80067fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006828 <prvInitialiseTaskLists+0x7c>)
 80067fe:	4a05      	ldr	r2, [pc, #20]	@ (8006814 <prvInitialiseTaskLists+0x68>)
 8006800:	601a      	str	r2, [r3, #0]
}
 8006802:	bf00      	nop
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	200008fc 	.word	0x200008fc
 8006810:	20000d5c 	.word	0x20000d5c
 8006814:	20000d70 	.word	0x20000d70
 8006818:	20000d8c 	.word	0x20000d8c
 800681c:	20000da0 	.word	0x20000da0
 8006820:	20000db8 	.word	0x20000db8
 8006824:	20000d84 	.word	0x20000d84
 8006828:	20000d88 	.word	0x20000d88

0800682c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006832:	e019      	b.n	8006868 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006834:	f000 fdda 	bl	80073ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006838:	4b10      	ldr	r3, [pc, #64]	@ (800687c <prvCheckTasksWaitingTermination+0x50>)
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	3304      	adds	r3, #4
 8006844:	4618      	mov	r0, r3
 8006846:	f7fe fce3 	bl	8005210 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800684a:	4b0d      	ldr	r3, [pc, #52]	@ (8006880 <prvCheckTasksWaitingTermination+0x54>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	3b01      	subs	r3, #1
 8006850:	4a0b      	ldr	r2, [pc, #44]	@ (8006880 <prvCheckTasksWaitingTermination+0x54>)
 8006852:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006854:	4b0b      	ldr	r3, [pc, #44]	@ (8006884 <prvCheckTasksWaitingTermination+0x58>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	3b01      	subs	r3, #1
 800685a:	4a0a      	ldr	r2, [pc, #40]	@ (8006884 <prvCheckTasksWaitingTermination+0x58>)
 800685c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800685e:	f000 fdfb 	bl	8007458 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f810 	bl	8006888 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006868:	4b06      	ldr	r3, [pc, #24]	@ (8006884 <prvCheckTasksWaitingTermination+0x58>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1e1      	bne.n	8006834 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006870:	bf00      	nop
 8006872:	bf00      	nop
 8006874:	3708      	adds	r7, #8
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	20000da0 	.word	0x20000da0
 8006880:	20000dcc 	.word	0x20000dcc
 8006884:	20000db4 	.word	0x20000db4

08006888 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006896:	2b00      	cmp	r3, #0
 8006898:	d108      	bne.n	80068ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800689e:	4618      	mov	r0, r3
 80068a0:	f000 ffa0 	bl	80077e4 <vPortFree>
				vPortFree( pxTCB );
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 ff9d 	bl	80077e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80068aa:	e01b      	b.n	80068e4 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d103      	bne.n	80068be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 ff94 	bl	80077e4 <vPortFree>
	}
 80068bc:	e012      	b.n	80068e4 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d00d      	beq.n	80068e4 <prvDeleteTCB+0x5c>
	__asm volatile
 80068c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068cc:	b672      	cpsid	i
 80068ce:	f383 8811 	msr	BASEPRI, r3
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	b662      	cpsie	i
 80068dc:	60fb      	str	r3, [r7, #12]
}
 80068de:	bf00      	nop
 80068e0:	bf00      	nop
 80068e2:	e7fd      	b.n	80068e0 <prvDeleteTCB+0x58>
	}
 80068e4:	bf00      	nop
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068f2:	4b0c      	ldr	r3, [pc, #48]	@ (8006924 <prvResetNextTaskUnblockTime+0x38>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d104      	bne.n	8006906 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80068fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006928 <prvResetNextTaskUnblockTime+0x3c>)
 80068fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006902:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006904:	e008      	b.n	8006918 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006906:	4b07      	ldr	r3, [pc, #28]	@ (8006924 <prvResetNextTaskUnblockTime+0x38>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	4a04      	ldr	r2, [pc, #16]	@ (8006928 <prvResetNextTaskUnblockTime+0x3c>)
 8006916:	6013      	str	r3, [r2, #0]
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr
 8006924:	20000d84 	.word	0x20000d84
 8006928:	20000dec 	.word	0x20000dec

0800692c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006932:	4b0b      	ldr	r3, [pc, #44]	@ (8006960 <xTaskGetSchedulerState+0x34>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d102      	bne.n	8006940 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800693a:	2301      	movs	r3, #1
 800693c:	607b      	str	r3, [r7, #4]
 800693e:	e008      	b.n	8006952 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006940:	4b08      	ldr	r3, [pc, #32]	@ (8006964 <xTaskGetSchedulerState+0x38>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d102      	bne.n	800694e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006948:	2302      	movs	r3, #2
 800694a:	607b      	str	r3, [r7, #4]
 800694c:	e001      	b.n	8006952 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800694e:	2300      	movs	r3, #0
 8006950:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006952:	687b      	ldr	r3, [r7, #4]
	}
 8006954:	4618      	mov	r0, r3
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr
 8006960:	20000dd8 	.word	0x20000dd8
 8006964:	20000df4 	.word	0x20000df4

08006968 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006974:	2300      	movs	r3, #0
 8006976:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d05c      	beq.n	8006a38 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800697e:	4b31      	ldr	r3, [pc, #196]	@ (8006a44 <xTaskPriorityDisinherit+0xdc>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	429a      	cmp	r2, r3
 8006986:	d00d      	beq.n	80069a4 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8006988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800698c:	b672      	cpsid	i
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	b662      	cpsie	i
 800699c:	60fb      	str	r3, [r7, #12]
}
 800699e:	bf00      	nop
 80069a0:	bf00      	nop
 80069a2:	e7fd      	b.n	80069a0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10d      	bne.n	80069c8 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80069ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b0:	b672      	cpsid	i
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	b662      	cpsie	i
 80069c0:	60bb      	str	r3, [r7, #8]
}
 80069c2:	bf00      	nop
 80069c4:	bf00      	nop
 80069c6:	e7fd      	b.n	80069c4 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069cc:	1e5a      	subs	r2, r3, #1
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069da:	429a      	cmp	r2, r3
 80069dc:	d02c      	beq.n	8006a38 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d128      	bne.n	8006a38 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	3304      	adds	r3, #4
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7fe fc10 	bl	8005210 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a08:	4b0f      	ldr	r3, [pc, #60]	@ (8006a48 <xTaskPriorityDisinherit+0xe0>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d903      	bls.n	8006a18 <xTaskPriorityDisinherit+0xb0>
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a14:	4a0c      	ldr	r2, [pc, #48]	@ (8006a48 <xTaskPriorityDisinherit+0xe0>)
 8006a16:	6013      	str	r3, [r2, #0]
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	4413      	add	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4a09      	ldr	r2, [pc, #36]	@ (8006a4c <xTaskPriorityDisinherit+0xe4>)
 8006a26:	441a      	add	r2, r3
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	3304      	adds	r3, #4
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	4610      	mov	r0, r2
 8006a30:	f7fe fb91 	bl	8005156 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006a34:	2301      	movs	r3, #1
 8006a36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a38:	697b      	ldr	r3, [r7, #20]
	}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3718      	adds	r7, #24
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	200008f8 	.word	0x200008f8
 8006a48:	20000dd4 	.word	0x20000dd4
 8006a4c:	200008fc 	.word	0x200008fc

08006a50 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a5a:	4b21      	ldr	r3, [pc, #132]	@ (8006ae0 <prvAddCurrentTaskToDelayedList+0x90>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a60:	4b20      	ldr	r3, [pc, #128]	@ (8006ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	3304      	adds	r3, #4
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7fe fbd2 	bl	8005210 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a72:	d10a      	bne.n	8006a8a <prvAddCurrentTaskToDelayedList+0x3a>
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d007      	beq.n	8006a8a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3304      	adds	r3, #4
 8006a80:	4619      	mov	r1, r3
 8006a82:	4819      	ldr	r0, [pc, #100]	@ (8006ae8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006a84:	f7fe fb67 	bl	8005156 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a88:	e026      	b.n	8006ad8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4413      	add	r3, r2
 8006a90:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a92:	4b14      	ldr	r3, [pc, #80]	@ (8006ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d209      	bcs.n	8006ab6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006aa2:	4b12      	ldr	r3, [pc, #72]	@ (8006aec <prvAddCurrentTaskToDelayedList+0x9c>)
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8006ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	3304      	adds	r3, #4
 8006aac:	4619      	mov	r1, r3
 8006aae:	4610      	mov	r0, r2
 8006ab0:	f7fe fb75 	bl	800519e <vListInsert>
}
 8006ab4:	e010      	b.n	8006ad8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8006af0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	4b0a      	ldr	r3, [pc, #40]	@ (8006ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3304      	adds	r3, #4
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	4610      	mov	r0, r2
 8006ac4:	f7fe fb6b 	bl	800519e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8006af4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d202      	bcs.n	8006ad8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006ad2:	4a08      	ldr	r2, [pc, #32]	@ (8006af4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	6013      	str	r3, [r2, #0]
}
 8006ad8:	bf00      	nop
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	20000dd0 	.word	0x20000dd0
 8006ae4:	200008f8 	.word	0x200008f8
 8006ae8:	20000db8 	.word	0x20000db8
 8006aec:	20000d88 	.word	0x20000d88
 8006af0:	20000d84 	.word	0x20000d84
 8006af4:	20000dec 	.word	0x20000dec

08006af8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08a      	sub	sp, #40	@ 0x28
 8006afc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006afe:	2300      	movs	r3, #0
 8006b00:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006b02:	f000 fb21 	bl	8007148 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006b06:	4b1e      	ldr	r3, [pc, #120]	@ (8006b80 <xTimerCreateTimerTask+0x88>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d021      	beq.n	8006b52 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006b12:	2300      	movs	r3, #0
 8006b14:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006b16:	1d3a      	adds	r2, r7, #4
 8006b18:	f107 0108 	add.w	r1, r7, #8
 8006b1c:	f107 030c 	add.w	r3, r7, #12
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7fe fad1 	bl	80050c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006b26:	6879      	ldr	r1, [r7, #4]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	9202      	str	r2, [sp, #8]
 8006b2e:	9301      	str	r3, [sp, #4]
 8006b30:	2302      	movs	r3, #2
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	2300      	movs	r3, #0
 8006b36:	460a      	mov	r2, r1
 8006b38:	4912      	ldr	r1, [pc, #72]	@ (8006b84 <xTimerCreateTimerTask+0x8c>)
 8006b3a:	4813      	ldr	r0, [pc, #76]	@ (8006b88 <xTimerCreateTimerTask+0x90>)
 8006b3c:	f7ff f8ac 	bl	8005c98 <xTaskCreateStatic>
 8006b40:	4603      	mov	r3, r0
 8006b42:	4a12      	ldr	r2, [pc, #72]	@ (8006b8c <xTimerCreateTimerTask+0x94>)
 8006b44:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006b46:	4b11      	ldr	r3, [pc, #68]	@ (8006b8c <xTimerCreateTimerTask+0x94>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d001      	beq.n	8006b52 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10d      	bne.n	8006b74 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8006b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b5c:	b672      	cpsid	i
 8006b5e:	f383 8811 	msr	BASEPRI, r3
 8006b62:	f3bf 8f6f 	isb	sy
 8006b66:	f3bf 8f4f 	dsb	sy
 8006b6a:	b662      	cpsie	i
 8006b6c:	613b      	str	r3, [r7, #16]
}
 8006b6e:	bf00      	nop
 8006b70:	bf00      	nop
 8006b72:	e7fd      	b.n	8006b70 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8006b74:	697b      	ldr	r3, [r7, #20]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3718      	adds	r7, #24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	20000e28 	.word	0x20000e28
 8006b84:	08007ad0 	.word	0x08007ad0
 8006b88:	08006cd1 	.word	0x08006cd1
 8006b8c:	20000e2c 	.word	0x20000e2c

08006b90 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b08a      	sub	sp, #40	@ 0x28
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	607a      	str	r2, [r7, #4]
 8006b9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10d      	bne.n	8006bc4 <xTimerGenericCommand+0x34>
	__asm volatile
 8006ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bac:	b672      	cpsid	i
 8006bae:	f383 8811 	msr	BASEPRI, r3
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	f3bf 8f4f 	dsb	sy
 8006bba:	b662      	cpsie	i
 8006bbc:	623b      	str	r3, [r7, #32]
}
 8006bbe:	bf00      	nop
 8006bc0:	bf00      	nop
 8006bc2:	e7fd      	b.n	8006bc0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006bc4:	4b19      	ldr	r3, [pc, #100]	@ (8006c2c <xTimerGenericCommand+0x9c>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d02a      	beq.n	8006c22 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	2b05      	cmp	r3, #5
 8006bdc:	dc18      	bgt.n	8006c10 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006bde:	f7ff fea5 	bl	800692c <xTaskGetSchedulerState>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	d109      	bne.n	8006bfc <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006be8:	4b10      	ldr	r3, [pc, #64]	@ (8006c2c <xTimerGenericCommand+0x9c>)
 8006bea:	6818      	ldr	r0, [r3, #0]
 8006bec:	f107 0110 	add.w	r1, r7, #16
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bf4:	f7fe fc4c 	bl	8005490 <xQueueGenericSend>
 8006bf8:	6278      	str	r0, [r7, #36]	@ 0x24
 8006bfa:	e012      	b.n	8006c22 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8006c2c <xTimerGenericCommand+0x9c>)
 8006bfe:	6818      	ldr	r0, [r3, #0]
 8006c00:	f107 0110 	add.w	r1, r7, #16
 8006c04:	2300      	movs	r3, #0
 8006c06:	2200      	movs	r2, #0
 8006c08:	f7fe fc42 	bl	8005490 <xQueueGenericSend>
 8006c0c:	6278      	str	r0, [r7, #36]	@ 0x24
 8006c0e:	e008      	b.n	8006c22 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c10:	4b06      	ldr	r3, [pc, #24]	@ (8006c2c <xTimerGenericCommand+0x9c>)
 8006c12:	6818      	ldr	r0, [r3, #0]
 8006c14:	f107 0110 	add.w	r1, r7, #16
 8006c18:	2300      	movs	r3, #0
 8006c1a:	683a      	ldr	r2, [r7, #0]
 8006c1c:	f7fe fd42 	bl	80056a4 <xQueueGenericSendFromISR>
 8006c20:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3728      	adds	r7, #40	@ 0x28
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	20000e28 	.word	0x20000e28

08006c30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b088      	sub	sp, #32
 8006c34:	af02      	add	r7, sp, #8
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c3a:	4b24      	ldr	r3, [pc, #144]	@ (8006ccc <prvProcessExpiredTimer+0x9c>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	3304      	adds	r3, #4
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7fe fae1 	bl	8005210 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c54:	f003 0304 	and.w	r3, r3, #4
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d025      	beq.n	8006ca8 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	699a      	ldr	r2, [r3, #24]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	18d1      	adds	r1, r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	683a      	ldr	r2, [r7, #0]
 8006c68:	6978      	ldr	r0, [r7, #20]
 8006c6a:	f000 f8d7 	bl	8006e1c <prvInsertTimerInActiveList>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d022      	beq.n	8006cba <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c74:	2300      	movs	r3, #0
 8006c76:	9300      	str	r3, [sp, #0]
 8006c78:	2300      	movs	r3, #0
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	6978      	ldr	r0, [r7, #20]
 8006c80:	f7ff ff86 	bl	8006b90 <xTimerGenericCommand>
 8006c84:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d116      	bne.n	8006cba <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8006c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c90:	b672      	cpsid	i
 8006c92:	f383 8811 	msr	BASEPRI, r3
 8006c96:	f3bf 8f6f 	isb	sy
 8006c9a:	f3bf 8f4f 	dsb	sy
 8006c9e:	b662      	cpsie	i
 8006ca0:	60fb      	str	r3, [r7, #12]
}
 8006ca2:	bf00      	nop
 8006ca4:	bf00      	nop
 8006ca6:	e7fd      	b.n	8006ca4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cae:	f023 0301 	bic.w	r3, r3, #1
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	6978      	ldr	r0, [r7, #20]
 8006cc0:	4798      	blx	r3
}
 8006cc2:	bf00      	nop
 8006cc4:	3718      	adds	r7, #24
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	20000e20 	.word	0x20000e20

08006cd0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006cd8:	f107 0308 	add.w	r3, r7, #8
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f000 f859 	bl	8006d94 <prvGetNextExpireTime>
 8006ce2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f000 f805 	bl	8006cf8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006cee:	f000 f8d7 	bl	8006ea0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006cf2:	bf00      	nop
 8006cf4:	e7f0      	b.n	8006cd8 <prvTimerTask+0x8>
	...

08006cf8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006d02:	f7ff fa1b 	bl	800613c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d06:	f107 0308 	add.w	r3, r7, #8
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 f866 	bl	8006ddc <prvSampleTimeNow>
 8006d10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d130      	bne.n	8006d7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d10a      	bne.n	8006d34 <prvProcessTimerOrBlockTask+0x3c>
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d806      	bhi.n	8006d34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006d26:	f7ff fa17 	bl	8006158 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006d2a:	68f9      	ldr	r1, [r7, #12]
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f7ff ff7f 	bl	8006c30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006d32:	e024      	b.n	8006d7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d008      	beq.n	8006d4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d3a:	4b13      	ldr	r3, [pc, #76]	@ (8006d88 <prvProcessTimerOrBlockTask+0x90>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d101      	bne.n	8006d48 <prvProcessTimerOrBlockTask+0x50>
 8006d44:	2301      	movs	r3, #1
 8006d46:	e000      	b.n	8006d4a <prvProcessTimerOrBlockTask+0x52>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8006d8c <prvProcessTimerOrBlockTask+0x94>)
 8006d4e:	6818      	ldr	r0, [r3, #0]
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	4619      	mov	r1, r3
 8006d5a:	f7fe ff69 	bl	8005c30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006d5e:	f7ff f9fb 	bl	8006158 <xTaskResumeAll>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d10a      	bne.n	8006d7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006d68:	4b09      	ldr	r3, [pc, #36]	@ (8006d90 <prvProcessTimerOrBlockTask+0x98>)
 8006d6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d6e:	601a      	str	r2, [r3, #0]
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	f3bf 8f6f 	isb	sy
}
 8006d78:	e001      	b.n	8006d7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006d7a:	f7ff f9ed 	bl	8006158 <xTaskResumeAll>
}
 8006d7e:	bf00      	nop
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	20000e24 	.word	0x20000e24
 8006d8c:	20000e28 	.word	0x20000e28
 8006d90:	e000ed04 	.word	0xe000ed04

08006d94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006d94:	b480      	push	{r7}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8006dd8 <prvGetNextExpireTime+0x44>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d101      	bne.n	8006daa <prvGetNextExpireTime+0x16>
 8006da6:	2201      	movs	r2, #1
 8006da8:	e000      	b.n	8006dac <prvGetNextExpireTime+0x18>
 8006daa:	2200      	movs	r2, #0
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d105      	bne.n	8006dc4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006db8:	4b07      	ldr	r3, [pc, #28]	@ (8006dd8 <prvGetNextExpireTime+0x44>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	60fb      	str	r3, [r7, #12]
 8006dc2:	e001      	b.n	8006dc8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3714      	adds	r7, #20
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	20000e20 	.word	0x20000e20

08006ddc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006de4:	f7ff fa58 	bl	8006298 <xTaskGetTickCount>
 8006de8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006dea:	4b0b      	ldr	r3, [pc, #44]	@ (8006e18 <prvSampleTimeNow+0x3c>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d205      	bcs.n	8006e00 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006df4:	f000 f940 	bl	8007078 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	601a      	str	r2, [r3, #0]
 8006dfe:	e002      	b.n	8006e06 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006e06:	4a04      	ldr	r2, [pc, #16]	@ (8006e18 <prvSampleTimeNow+0x3c>)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	20000e30 	.word	0x20000e30

08006e1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b086      	sub	sp, #24
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
 8006e28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	68ba      	ldr	r2, [r7, #8]
 8006e32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d812      	bhi.n	8006e68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	1ad2      	subs	r2, r2, r3
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d302      	bcc.n	8006e56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006e50:	2301      	movs	r3, #1
 8006e52:	617b      	str	r3, [r7, #20]
 8006e54:	e01b      	b.n	8006e8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006e56:	4b10      	ldr	r3, [pc, #64]	@ (8006e98 <prvInsertTimerInActiveList+0x7c>)
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	3304      	adds	r3, #4
 8006e5e:	4619      	mov	r1, r3
 8006e60:	4610      	mov	r0, r2
 8006e62:	f7fe f99c 	bl	800519e <vListInsert>
 8006e66:	e012      	b.n	8006e8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d206      	bcs.n	8006e7e <prvInsertTimerInActiveList+0x62>
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d302      	bcc.n	8006e7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	617b      	str	r3, [r7, #20]
 8006e7c:	e007      	b.n	8006e8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e7e:	4b07      	ldr	r3, [pc, #28]	@ (8006e9c <prvInsertTimerInActiveList+0x80>)
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	3304      	adds	r3, #4
 8006e86:	4619      	mov	r1, r3
 8006e88:	4610      	mov	r0, r2
 8006e8a:	f7fe f988 	bl	800519e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006e8e:	697b      	ldr	r3, [r7, #20]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3718      	adds	r7, #24
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	20000e24 	.word	0x20000e24
 8006e9c:	20000e20 	.word	0x20000e20

08006ea0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b08e      	sub	sp, #56	@ 0x38
 8006ea4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ea6:	e0d4      	b.n	8007052 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	da1b      	bge.n	8006ee6 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006eae:	1d3b      	adds	r3, r7, #4
 8006eb0:	3304      	adds	r3, #4
 8006eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10d      	bne.n	8006ed6 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8006eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ebe:	b672      	cpsid	i
 8006ec0:	f383 8811 	msr	BASEPRI, r3
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	b662      	cpsie	i
 8006ece:	61fb      	str	r3, [r7, #28]
}
 8006ed0:	bf00      	nop
 8006ed2:	bf00      	nop
 8006ed4:	e7fd      	b.n	8006ed2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006edc:	6850      	ldr	r0, [r2, #4]
 8006ede:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ee0:	6892      	ldr	r2, [r2, #8]
 8006ee2:	4611      	mov	r1, r2
 8006ee4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f2c0 80b2 	blt.w	8007052 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ef4:	695b      	ldr	r3, [r3, #20]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d004      	beq.n	8006f04 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006efc:	3304      	adds	r3, #4
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7fe f986 	bl	8005210 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f04:	463b      	mov	r3, r7
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7ff ff68 	bl	8006ddc <prvSampleTimeNow>
 8006f0c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2b09      	cmp	r3, #9
 8006f12:	f200 809b 	bhi.w	800704c <prvProcessReceivedCommands+0x1ac>
 8006f16:	a201      	add	r2, pc, #4	@ (adr r2, 8006f1c <prvProcessReceivedCommands+0x7c>)
 8006f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1c:	08006f45 	.word	0x08006f45
 8006f20:	08006f45 	.word	0x08006f45
 8006f24:	08006f45 	.word	0x08006f45
 8006f28:	08006fbf 	.word	0x08006fbf
 8006f2c:	08006fd3 	.word	0x08006fd3
 8006f30:	08007023 	.word	0x08007023
 8006f34:	08006f45 	.word	0x08006f45
 8006f38:	08006f45 	.word	0x08006f45
 8006f3c:	08006fbf 	.word	0x08006fbf
 8006f40:	08006fd3 	.word	0x08006fd3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f4a:	f043 0301 	orr.w	r3, r3, #1
 8006f4e:	b2da      	uxtb	r2, r3
 8006f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006f56:	68ba      	ldr	r2, [r7, #8]
 8006f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	18d1      	adds	r1, r2, r3
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f64:	f7ff ff5a 	bl	8006e1c <prvInsertTimerInActiveList>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d070      	beq.n	8007050 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f74:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f7c:	f003 0304 	and.w	r3, r3, #4
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d065      	beq.n	8007050 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006f84:	68ba      	ldr	r2, [r7, #8]
 8006f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f88:	699b      	ldr	r3, [r3, #24]
 8006f8a:	441a      	add	r2, r3
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	2300      	movs	r3, #0
 8006f92:	2100      	movs	r1, #0
 8006f94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f96:	f7ff fdfb 	bl	8006b90 <xTimerGenericCommand>
 8006f9a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006f9c:	6a3b      	ldr	r3, [r7, #32]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d156      	bne.n	8007050 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8006fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa6:	b672      	cpsid	i
 8006fa8:	f383 8811 	msr	BASEPRI, r3
 8006fac:	f3bf 8f6f 	isb	sy
 8006fb0:	f3bf 8f4f 	dsb	sy
 8006fb4:	b662      	cpsie	i
 8006fb6:	61bb      	str	r3, [r7, #24]
}
 8006fb8:	bf00      	nop
 8006fba:	bf00      	nop
 8006fbc:	e7fd      	b.n	8006fba <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fc4:	f023 0301 	bic.w	r3, r3, #1
 8006fc8:	b2da      	uxtb	r2, r3
 8006fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fcc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006fd0:	e03f      	b.n	8007052 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fd8:	f043 0301 	orr.w	r3, r3, #1
 8006fdc:	b2da      	uxtb	r2, r3
 8006fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10d      	bne.n	800700e <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8006ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff6:	b672      	cpsid	i
 8006ff8:	f383 8811 	msr	BASEPRI, r3
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	f3bf 8f4f 	dsb	sy
 8007004:	b662      	cpsie	i
 8007006:	617b      	str	r3, [r7, #20]
}
 8007008:	bf00      	nop
 800700a:	bf00      	nop
 800700c:	e7fd      	b.n	800700a <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800700e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007010:	699a      	ldr	r2, [r3, #24]
 8007012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007014:	18d1      	adds	r1, r2, r3
 8007016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007018:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800701a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800701c:	f7ff fefe 	bl	8006e1c <prvInsertTimerInActiveList>
					break;
 8007020:	e017      	b.n	8007052 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007024:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007028:	f003 0302 	and.w	r3, r3, #2
 800702c:	2b00      	cmp	r3, #0
 800702e:	d103      	bne.n	8007038 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8007030:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007032:	f000 fbd7 	bl	80077e4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007036:	e00c      	b.n	8007052 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800703a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800703e:	f023 0301 	bic.w	r3, r3, #1
 8007042:	b2da      	uxtb	r2, r3
 8007044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007046:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800704a:	e002      	b.n	8007052 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800704c:	bf00      	nop
 800704e:	e000      	b.n	8007052 <prvProcessReceivedCommands+0x1b2>
					break;
 8007050:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007052:	4b08      	ldr	r3, [pc, #32]	@ (8007074 <prvProcessReceivedCommands+0x1d4>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	1d39      	adds	r1, r7, #4
 8007058:	2200      	movs	r2, #0
 800705a:	4618      	mov	r0, r3
 800705c:	f7fe fbc6 	bl	80057ec <xQueueReceive>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	f47f af20 	bne.w	8006ea8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007068:	bf00      	nop
 800706a:	bf00      	nop
 800706c:	3730      	adds	r7, #48	@ 0x30
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	20000e28 	.word	0x20000e28

08007078 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b088      	sub	sp, #32
 800707c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800707e:	e04b      	b.n	8007118 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007080:	4b2f      	ldr	r3, [pc, #188]	@ (8007140 <prvSwitchTimerLists+0xc8>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800708a:	4b2d      	ldr	r3, [pc, #180]	@ (8007140 <prvSwitchTimerLists+0xc8>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	3304      	adds	r3, #4
 8007098:	4618      	mov	r0, r3
 800709a:	f7fe f8b9 	bl	8005210 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070ac:	f003 0304 	and.w	r3, r3, #4
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d031      	beq.n	8007118 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	4413      	add	r3, r2
 80070bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d90e      	bls.n	80070e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070d2:	4b1b      	ldr	r3, [pc, #108]	@ (8007140 <prvSwitchTimerLists+0xc8>)
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	3304      	adds	r3, #4
 80070da:	4619      	mov	r1, r3
 80070dc:	4610      	mov	r0, r2
 80070de:	f7fe f85e 	bl	800519e <vListInsert>
 80070e2:	e019      	b.n	8007118 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070e4:	2300      	movs	r3, #0
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	2300      	movs	r3, #0
 80070ea:	693a      	ldr	r2, [r7, #16]
 80070ec:	2100      	movs	r1, #0
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f7ff fd4e 	bl	8006b90 <xTimerGenericCommand>
 80070f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10d      	bne.n	8007118 <prvSwitchTimerLists+0xa0>
	__asm volatile
 80070fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007100:	b672      	cpsid	i
 8007102:	f383 8811 	msr	BASEPRI, r3
 8007106:	f3bf 8f6f 	isb	sy
 800710a:	f3bf 8f4f 	dsb	sy
 800710e:	b662      	cpsie	i
 8007110:	603b      	str	r3, [r7, #0]
}
 8007112:	bf00      	nop
 8007114:	bf00      	nop
 8007116:	e7fd      	b.n	8007114 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007118:	4b09      	ldr	r3, [pc, #36]	@ (8007140 <prvSwitchTimerLists+0xc8>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1ae      	bne.n	8007080 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007122:	4b07      	ldr	r3, [pc, #28]	@ (8007140 <prvSwitchTimerLists+0xc8>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007128:	4b06      	ldr	r3, [pc, #24]	@ (8007144 <prvSwitchTimerLists+0xcc>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a04      	ldr	r2, [pc, #16]	@ (8007140 <prvSwitchTimerLists+0xc8>)
 800712e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007130:	4a04      	ldr	r2, [pc, #16]	@ (8007144 <prvSwitchTimerLists+0xcc>)
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	6013      	str	r3, [r2, #0]
}
 8007136:	bf00      	nop
 8007138:	3718      	adds	r7, #24
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	20000e20 	.word	0x20000e20
 8007144:	20000e24 	.word	0x20000e24

08007148 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800714e:	f000 f94d 	bl	80073ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007152:	4b15      	ldr	r3, [pc, #84]	@ (80071a8 <prvCheckForValidListAndQueue+0x60>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d120      	bne.n	800719c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800715a:	4814      	ldr	r0, [pc, #80]	@ (80071ac <prvCheckForValidListAndQueue+0x64>)
 800715c:	f7fd ffce 	bl	80050fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007160:	4813      	ldr	r0, [pc, #76]	@ (80071b0 <prvCheckForValidListAndQueue+0x68>)
 8007162:	f7fd ffcb 	bl	80050fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007166:	4b13      	ldr	r3, [pc, #76]	@ (80071b4 <prvCheckForValidListAndQueue+0x6c>)
 8007168:	4a10      	ldr	r2, [pc, #64]	@ (80071ac <prvCheckForValidListAndQueue+0x64>)
 800716a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800716c:	4b12      	ldr	r3, [pc, #72]	@ (80071b8 <prvCheckForValidListAndQueue+0x70>)
 800716e:	4a10      	ldr	r2, [pc, #64]	@ (80071b0 <prvCheckForValidListAndQueue+0x68>)
 8007170:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007172:	2300      	movs	r3, #0
 8007174:	9300      	str	r3, [sp, #0]
 8007176:	4b11      	ldr	r3, [pc, #68]	@ (80071bc <prvCheckForValidListAndQueue+0x74>)
 8007178:	4a11      	ldr	r2, [pc, #68]	@ (80071c0 <prvCheckForValidListAndQueue+0x78>)
 800717a:	2110      	movs	r1, #16
 800717c:	200a      	movs	r0, #10
 800717e:	f7fe f8dd 	bl	800533c <xQueueGenericCreateStatic>
 8007182:	4603      	mov	r3, r0
 8007184:	4a08      	ldr	r2, [pc, #32]	@ (80071a8 <prvCheckForValidListAndQueue+0x60>)
 8007186:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007188:	4b07      	ldr	r3, [pc, #28]	@ (80071a8 <prvCheckForValidListAndQueue+0x60>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d005      	beq.n	800719c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007190:	4b05      	ldr	r3, [pc, #20]	@ (80071a8 <prvCheckForValidListAndQueue+0x60>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	490b      	ldr	r1, [pc, #44]	@ (80071c4 <prvCheckForValidListAndQueue+0x7c>)
 8007196:	4618      	mov	r0, r3
 8007198:	f7fe fd20 	bl	8005bdc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800719c:	f000 f95c 	bl	8007458 <vPortExitCritical>
}
 80071a0:	bf00      	nop
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	20000e28 	.word	0x20000e28
 80071ac:	20000df8 	.word	0x20000df8
 80071b0:	20000e0c 	.word	0x20000e0c
 80071b4:	20000e20 	.word	0x20000e20
 80071b8:	20000e24 	.word	0x20000e24
 80071bc:	20000ed4 	.word	0x20000ed4
 80071c0:	20000e34 	.word	0x20000e34
 80071c4:	08007ad8 	.word	0x08007ad8

080071c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80071c8:	b480      	push	{r7}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	3b04      	subs	r3, #4
 80071d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80071e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	3b04      	subs	r3, #4
 80071e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	f023 0201 	bic.w	r2, r3, #1
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	3b04      	subs	r3, #4
 80071f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80071f8:	4a0c      	ldr	r2, [pc, #48]	@ (800722c <pxPortInitialiseStack+0x64>)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	3b14      	subs	r3, #20
 8007202:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	3b04      	subs	r3, #4
 800720e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f06f 0202 	mvn.w	r2, #2
 8007216:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	3b20      	subs	r3, #32
 800721c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800721e:	68fb      	ldr	r3, [r7, #12]
}
 8007220:	4618      	mov	r0, r3
 8007222:	3714      	adds	r7, #20
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr
 800722c:	08007231 	.word	0x08007231

08007230 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007236:	2300      	movs	r3, #0
 8007238:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800723a:	4b15      	ldr	r3, [pc, #84]	@ (8007290 <prvTaskExitError+0x60>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007242:	d00d      	beq.n	8007260 <prvTaskExitError+0x30>
	__asm volatile
 8007244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007248:	b672      	cpsid	i
 800724a:	f383 8811 	msr	BASEPRI, r3
 800724e:	f3bf 8f6f 	isb	sy
 8007252:	f3bf 8f4f 	dsb	sy
 8007256:	b662      	cpsie	i
 8007258:	60fb      	str	r3, [r7, #12]
}
 800725a:	bf00      	nop
 800725c:	bf00      	nop
 800725e:	e7fd      	b.n	800725c <prvTaskExitError+0x2c>
	__asm volatile
 8007260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007264:	b672      	cpsid	i
 8007266:	f383 8811 	msr	BASEPRI, r3
 800726a:	f3bf 8f6f 	isb	sy
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	b662      	cpsie	i
 8007274:	60bb      	str	r3, [r7, #8]
}
 8007276:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007278:	bf00      	nop
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d0fc      	beq.n	800727a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007280:	bf00      	nop
 8007282:	bf00      	nop
 8007284:	3714      	adds	r7, #20
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	2000000c 	.word	0x2000000c
	...

080072a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80072a0:	4b07      	ldr	r3, [pc, #28]	@ (80072c0 <pxCurrentTCBConst2>)
 80072a2:	6819      	ldr	r1, [r3, #0]
 80072a4:	6808      	ldr	r0, [r1, #0]
 80072a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072aa:	f380 8809 	msr	PSP, r0
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	f04f 0000 	mov.w	r0, #0
 80072b6:	f380 8811 	msr	BASEPRI, r0
 80072ba:	4770      	bx	lr
 80072bc:	f3af 8000 	nop.w

080072c0 <pxCurrentTCBConst2>:
 80072c0:	200008f8 	.word	0x200008f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80072c4:	bf00      	nop
 80072c6:	bf00      	nop

080072c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80072c8:	4808      	ldr	r0, [pc, #32]	@ (80072ec <prvPortStartFirstTask+0x24>)
 80072ca:	6800      	ldr	r0, [r0, #0]
 80072cc:	6800      	ldr	r0, [r0, #0]
 80072ce:	f380 8808 	msr	MSP, r0
 80072d2:	f04f 0000 	mov.w	r0, #0
 80072d6:	f380 8814 	msr	CONTROL, r0
 80072da:	b662      	cpsie	i
 80072dc:	b661      	cpsie	f
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	f3bf 8f6f 	isb	sy
 80072e6:	df00      	svc	0
 80072e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80072ea:	bf00      	nop
 80072ec:	e000ed08 	.word	0xe000ed08

080072f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80072f6:	4b37      	ldr	r3, [pc, #220]	@ (80073d4 <xPortStartScheduler+0xe4>)
 80072f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	22ff      	movs	r2, #255	@ 0xff
 8007306:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	b2db      	uxtb	r3, r3
 800730e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007310:	78fb      	ldrb	r3, [r7, #3]
 8007312:	b2db      	uxtb	r3, r3
 8007314:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007318:	b2da      	uxtb	r2, r3
 800731a:	4b2f      	ldr	r3, [pc, #188]	@ (80073d8 <xPortStartScheduler+0xe8>)
 800731c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800731e:	4b2f      	ldr	r3, [pc, #188]	@ (80073dc <xPortStartScheduler+0xec>)
 8007320:	2207      	movs	r2, #7
 8007322:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007324:	e009      	b.n	800733a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007326:	4b2d      	ldr	r3, [pc, #180]	@ (80073dc <xPortStartScheduler+0xec>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	3b01      	subs	r3, #1
 800732c:	4a2b      	ldr	r2, [pc, #172]	@ (80073dc <xPortStartScheduler+0xec>)
 800732e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007330:	78fb      	ldrb	r3, [r7, #3]
 8007332:	b2db      	uxtb	r3, r3
 8007334:	005b      	lsls	r3, r3, #1
 8007336:	b2db      	uxtb	r3, r3
 8007338:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800733a:	78fb      	ldrb	r3, [r7, #3]
 800733c:	b2db      	uxtb	r3, r3
 800733e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007342:	2b80      	cmp	r3, #128	@ 0x80
 8007344:	d0ef      	beq.n	8007326 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007346:	4b25      	ldr	r3, [pc, #148]	@ (80073dc <xPortStartScheduler+0xec>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f1c3 0307 	rsb	r3, r3, #7
 800734e:	2b04      	cmp	r3, #4
 8007350:	d00d      	beq.n	800736e <xPortStartScheduler+0x7e>
	__asm volatile
 8007352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007356:	b672      	cpsid	i
 8007358:	f383 8811 	msr	BASEPRI, r3
 800735c:	f3bf 8f6f 	isb	sy
 8007360:	f3bf 8f4f 	dsb	sy
 8007364:	b662      	cpsie	i
 8007366:	60bb      	str	r3, [r7, #8]
}
 8007368:	bf00      	nop
 800736a:	bf00      	nop
 800736c:	e7fd      	b.n	800736a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800736e:	4b1b      	ldr	r3, [pc, #108]	@ (80073dc <xPortStartScheduler+0xec>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	021b      	lsls	r3, r3, #8
 8007374:	4a19      	ldr	r2, [pc, #100]	@ (80073dc <xPortStartScheduler+0xec>)
 8007376:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007378:	4b18      	ldr	r3, [pc, #96]	@ (80073dc <xPortStartScheduler+0xec>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007380:	4a16      	ldr	r2, [pc, #88]	@ (80073dc <xPortStartScheduler+0xec>)
 8007382:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	b2da      	uxtb	r2, r3
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800738c:	4b14      	ldr	r3, [pc, #80]	@ (80073e0 <xPortStartScheduler+0xf0>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a13      	ldr	r2, [pc, #76]	@ (80073e0 <xPortStartScheduler+0xf0>)
 8007392:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007396:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007398:	4b11      	ldr	r3, [pc, #68]	@ (80073e0 <xPortStartScheduler+0xf0>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a10      	ldr	r2, [pc, #64]	@ (80073e0 <xPortStartScheduler+0xf0>)
 800739e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80073a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80073a4:	f000 f8dc 	bl	8007560 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80073a8:	4b0e      	ldr	r3, [pc, #56]	@ (80073e4 <xPortStartScheduler+0xf4>)
 80073aa:	2200      	movs	r2, #0
 80073ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80073ae:	f000 f8fb 	bl	80075a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80073b2:	4b0d      	ldr	r3, [pc, #52]	@ (80073e8 <xPortStartScheduler+0xf8>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a0c      	ldr	r2, [pc, #48]	@ (80073e8 <xPortStartScheduler+0xf8>)
 80073b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80073bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80073be:	f7ff ff83 	bl	80072c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80073c2:	f7ff f835 	bl	8006430 <vTaskSwitchContext>
	prvTaskExitError();
 80073c6:	f7ff ff33 	bl	8007230 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3710      	adds	r7, #16
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	e000e400 	.word	0xe000e400
 80073d8:	20000f24 	.word	0x20000f24
 80073dc:	20000f28 	.word	0x20000f28
 80073e0:	e000ed20 	.word	0xe000ed20
 80073e4:	2000000c 	.word	0x2000000c
 80073e8:	e000ef34 	.word	0xe000ef34

080073ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
	__asm volatile
 80073f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f6:	b672      	cpsid	i
 80073f8:	f383 8811 	msr	BASEPRI, r3
 80073fc:	f3bf 8f6f 	isb	sy
 8007400:	f3bf 8f4f 	dsb	sy
 8007404:	b662      	cpsie	i
 8007406:	607b      	str	r3, [r7, #4]
}
 8007408:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800740a:	4b11      	ldr	r3, [pc, #68]	@ (8007450 <vPortEnterCritical+0x64>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	3301      	adds	r3, #1
 8007410:	4a0f      	ldr	r2, [pc, #60]	@ (8007450 <vPortEnterCritical+0x64>)
 8007412:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007414:	4b0e      	ldr	r3, [pc, #56]	@ (8007450 <vPortEnterCritical+0x64>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d112      	bne.n	8007442 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800741c:	4b0d      	ldr	r3, [pc, #52]	@ (8007454 <vPortEnterCritical+0x68>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00d      	beq.n	8007442 <vPortEnterCritical+0x56>
	__asm volatile
 8007426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800742a:	b672      	cpsid	i
 800742c:	f383 8811 	msr	BASEPRI, r3
 8007430:	f3bf 8f6f 	isb	sy
 8007434:	f3bf 8f4f 	dsb	sy
 8007438:	b662      	cpsie	i
 800743a:	603b      	str	r3, [r7, #0]
}
 800743c:	bf00      	nop
 800743e:	bf00      	nop
 8007440:	e7fd      	b.n	800743e <vPortEnterCritical+0x52>
	}
}
 8007442:	bf00      	nop
 8007444:	370c      	adds	r7, #12
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	2000000c 	.word	0x2000000c
 8007454:	e000ed04 	.word	0xe000ed04

08007458 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800745e:	4b13      	ldr	r3, [pc, #76]	@ (80074ac <vPortExitCritical+0x54>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10d      	bne.n	8007482 <vPortExitCritical+0x2a>
	__asm volatile
 8007466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800746a:	b672      	cpsid	i
 800746c:	f383 8811 	msr	BASEPRI, r3
 8007470:	f3bf 8f6f 	isb	sy
 8007474:	f3bf 8f4f 	dsb	sy
 8007478:	b662      	cpsie	i
 800747a:	607b      	str	r3, [r7, #4]
}
 800747c:	bf00      	nop
 800747e:	bf00      	nop
 8007480:	e7fd      	b.n	800747e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007482:	4b0a      	ldr	r3, [pc, #40]	@ (80074ac <vPortExitCritical+0x54>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	3b01      	subs	r3, #1
 8007488:	4a08      	ldr	r2, [pc, #32]	@ (80074ac <vPortExitCritical+0x54>)
 800748a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800748c:	4b07      	ldr	r3, [pc, #28]	@ (80074ac <vPortExitCritical+0x54>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d105      	bne.n	80074a0 <vPortExitCritical+0x48>
 8007494:	2300      	movs	r3, #0
 8007496:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	f383 8811 	msr	BASEPRI, r3
}
 800749e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80074a0:	bf00      	nop
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr
 80074ac:	2000000c 	.word	0x2000000c

080074b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80074b0:	f3ef 8009 	mrs	r0, PSP
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	4b15      	ldr	r3, [pc, #84]	@ (8007510 <pxCurrentTCBConst>)
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	f01e 0f10 	tst.w	lr, #16
 80074c0:	bf08      	it	eq
 80074c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80074c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ca:	6010      	str	r0, [r2, #0]
 80074cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80074d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80074d4:	b672      	cpsid	i
 80074d6:	f380 8811 	msr	BASEPRI, r0
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	b662      	cpsie	i
 80074e4:	f7fe ffa4 	bl	8006430 <vTaskSwitchContext>
 80074e8:	f04f 0000 	mov.w	r0, #0
 80074ec:	f380 8811 	msr	BASEPRI, r0
 80074f0:	bc09      	pop	{r0, r3}
 80074f2:	6819      	ldr	r1, [r3, #0]
 80074f4:	6808      	ldr	r0, [r1, #0]
 80074f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074fa:	f01e 0f10 	tst.w	lr, #16
 80074fe:	bf08      	it	eq
 8007500:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007504:	f380 8809 	msr	PSP, r0
 8007508:	f3bf 8f6f 	isb	sy
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop

08007510 <pxCurrentTCBConst>:
 8007510:	200008f8 	.word	0x200008f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007514:	bf00      	nop
 8007516:	bf00      	nop

08007518 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
	__asm volatile
 800751e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007522:	b672      	cpsid	i
 8007524:	f383 8811 	msr	BASEPRI, r3
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	b662      	cpsie	i
 8007532:	607b      	str	r3, [r7, #4]
}
 8007534:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007536:	f7fe febf 	bl	80062b8 <xTaskIncrementTick>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d003      	beq.n	8007548 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007540:	4b06      	ldr	r3, [pc, #24]	@ (800755c <SysTick_Handler+0x44>)
 8007542:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007546:	601a      	str	r2, [r3, #0]
 8007548:	2300      	movs	r3, #0
 800754a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	f383 8811 	msr	BASEPRI, r3
}
 8007552:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007554:	bf00      	nop
 8007556:	3708      	adds	r7, #8
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	e000ed04 	.word	0xe000ed04

08007560 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007560:	b480      	push	{r7}
 8007562:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007564:	4b0b      	ldr	r3, [pc, #44]	@ (8007594 <vPortSetupTimerInterrupt+0x34>)
 8007566:	2200      	movs	r2, #0
 8007568:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800756a:	4b0b      	ldr	r3, [pc, #44]	@ (8007598 <vPortSetupTimerInterrupt+0x38>)
 800756c:	2200      	movs	r2, #0
 800756e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007570:	4b0a      	ldr	r3, [pc, #40]	@ (800759c <vPortSetupTimerInterrupt+0x3c>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a0a      	ldr	r2, [pc, #40]	@ (80075a0 <vPortSetupTimerInterrupt+0x40>)
 8007576:	fba2 2303 	umull	r2, r3, r2, r3
 800757a:	099b      	lsrs	r3, r3, #6
 800757c:	4a09      	ldr	r2, [pc, #36]	@ (80075a4 <vPortSetupTimerInterrupt+0x44>)
 800757e:	3b01      	subs	r3, #1
 8007580:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007582:	4b04      	ldr	r3, [pc, #16]	@ (8007594 <vPortSetupTimerInterrupt+0x34>)
 8007584:	2207      	movs	r2, #7
 8007586:	601a      	str	r2, [r3, #0]
}
 8007588:	bf00      	nop
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	e000e010 	.word	0xe000e010
 8007598:	e000e018 	.word	0xe000e018
 800759c:	20000000 	.word	0x20000000
 80075a0:	10624dd3 	.word	0x10624dd3
 80075a4:	e000e014 	.word	0xe000e014

080075a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80075a8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80075b8 <vPortEnableVFP+0x10>
 80075ac:	6801      	ldr	r1, [r0, #0]
 80075ae:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80075b2:	6001      	str	r1, [r0, #0]
 80075b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80075b6:	bf00      	nop
 80075b8:	e000ed88 	.word	0xe000ed88

080075bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80075c2:	f3ef 8305 	mrs	r3, IPSR
 80075c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2b0f      	cmp	r3, #15
 80075cc:	d917      	bls.n	80075fe <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80075ce:	4a1a      	ldr	r2, [pc, #104]	@ (8007638 <vPortValidateInterruptPriority+0x7c>)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	4413      	add	r3, r2
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80075d8:	4b18      	ldr	r3, [pc, #96]	@ (800763c <vPortValidateInterruptPriority+0x80>)
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	7afa      	ldrb	r2, [r7, #11]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d20d      	bcs.n	80075fe <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80075e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e6:	b672      	cpsid	i
 80075e8:	f383 8811 	msr	BASEPRI, r3
 80075ec:	f3bf 8f6f 	isb	sy
 80075f0:	f3bf 8f4f 	dsb	sy
 80075f4:	b662      	cpsie	i
 80075f6:	607b      	str	r3, [r7, #4]
}
 80075f8:	bf00      	nop
 80075fa:	bf00      	nop
 80075fc:	e7fd      	b.n	80075fa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80075fe:	4b10      	ldr	r3, [pc, #64]	@ (8007640 <vPortValidateInterruptPriority+0x84>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007606:	4b0f      	ldr	r3, [pc, #60]	@ (8007644 <vPortValidateInterruptPriority+0x88>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	429a      	cmp	r2, r3
 800760c:	d90d      	bls.n	800762a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800760e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007612:	b672      	cpsid	i
 8007614:	f383 8811 	msr	BASEPRI, r3
 8007618:	f3bf 8f6f 	isb	sy
 800761c:	f3bf 8f4f 	dsb	sy
 8007620:	b662      	cpsie	i
 8007622:	603b      	str	r3, [r7, #0]
}
 8007624:	bf00      	nop
 8007626:	bf00      	nop
 8007628:	e7fd      	b.n	8007626 <vPortValidateInterruptPriority+0x6a>
	}
 800762a:	bf00      	nop
 800762c:	3714      	adds	r7, #20
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop
 8007638:	e000e3f0 	.word	0xe000e3f0
 800763c:	20000f24 	.word	0x20000f24
 8007640:	e000ed0c 	.word	0xe000ed0c
 8007644:	20000f28 	.word	0x20000f28

08007648 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b08a      	sub	sp, #40	@ 0x28
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007650:	2300      	movs	r3, #0
 8007652:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007654:	f7fe fd72 	bl	800613c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007658:	4b5d      	ldr	r3, [pc, #372]	@ (80077d0 <pvPortMalloc+0x188>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d101      	bne.n	8007664 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007660:	f000 f920 	bl	80078a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007664:	4b5b      	ldr	r3, [pc, #364]	@ (80077d4 <pvPortMalloc+0x18c>)
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4013      	ands	r3, r2
 800766c:	2b00      	cmp	r3, #0
 800766e:	f040 8094 	bne.w	800779a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d020      	beq.n	80076ba <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8007678:	2208      	movs	r2, #8
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4413      	add	r3, r2
 800767e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f003 0307 	and.w	r3, r3, #7
 8007686:	2b00      	cmp	r3, #0
 8007688:	d017      	beq.n	80076ba <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f023 0307 	bic.w	r3, r3, #7
 8007690:	3308      	adds	r3, #8
 8007692:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f003 0307 	and.w	r3, r3, #7
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00d      	beq.n	80076ba <pvPortMalloc+0x72>
	__asm volatile
 800769e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a2:	b672      	cpsid	i
 80076a4:	f383 8811 	msr	BASEPRI, r3
 80076a8:	f3bf 8f6f 	isb	sy
 80076ac:	f3bf 8f4f 	dsb	sy
 80076b0:	b662      	cpsie	i
 80076b2:	617b      	str	r3, [r7, #20]
}
 80076b4:	bf00      	nop
 80076b6:	bf00      	nop
 80076b8:	e7fd      	b.n	80076b6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d06c      	beq.n	800779a <pvPortMalloc+0x152>
 80076c0:	4b45      	ldr	r3, [pc, #276]	@ (80077d8 <pvPortMalloc+0x190>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d867      	bhi.n	800779a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80076ca:	4b44      	ldr	r3, [pc, #272]	@ (80077dc <pvPortMalloc+0x194>)
 80076cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80076ce:	4b43      	ldr	r3, [pc, #268]	@ (80077dc <pvPortMalloc+0x194>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076d4:	e004      	b.n	80076e0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80076d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80076da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d903      	bls.n	80076f2 <pvPortMalloc+0xaa>
 80076ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1f1      	bne.n	80076d6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80076f2:	4b37      	ldr	r3, [pc, #220]	@ (80077d0 <pvPortMalloc+0x188>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d04e      	beq.n	800779a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80076fc:	6a3b      	ldr	r3, [r7, #32]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2208      	movs	r2, #8
 8007702:	4413      	add	r3, r2
 8007704:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	6a3b      	ldr	r3, [r7, #32]
 800770c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800770e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007710:	685a      	ldr	r2, [r3, #4]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	1ad2      	subs	r2, r2, r3
 8007716:	2308      	movs	r3, #8
 8007718:	005b      	lsls	r3, r3, #1
 800771a:	429a      	cmp	r2, r3
 800771c:	d922      	bls.n	8007764 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800771e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4413      	add	r3, r2
 8007724:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	f003 0307 	and.w	r3, r3, #7
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00d      	beq.n	800774c <pvPortMalloc+0x104>
	__asm volatile
 8007730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007734:	b672      	cpsid	i
 8007736:	f383 8811 	msr	BASEPRI, r3
 800773a:	f3bf 8f6f 	isb	sy
 800773e:	f3bf 8f4f 	dsb	sy
 8007742:	b662      	cpsie	i
 8007744:	613b      	str	r3, [r7, #16]
}
 8007746:	bf00      	nop
 8007748:	bf00      	nop
 800774a:	e7fd      	b.n	8007748 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800774c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774e:	685a      	ldr	r2, [r3, #4]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	1ad2      	subs	r2, r2, r3
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800775e:	69b8      	ldr	r0, [r7, #24]
 8007760:	f000 f902 	bl	8007968 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007764:	4b1c      	ldr	r3, [pc, #112]	@ (80077d8 <pvPortMalloc+0x190>)
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	4a1a      	ldr	r2, [pc, #104]	@ (80077d8 <pvPortMalloc+0x190>)
 8007770:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007772:	4b19      	ldr	r3, [pc, #100]	@ (80077d8 <pvPortMalloc+0x190>)
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	4b1a      	ldr	r3, [pc, #104]	@ (80077e0 <pvPortMalloc+0x198>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	429a      	cmp	r2, r3
 800777c:	d203      	bcs.n	8007786 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800777e:	4b16      	ldr	r3, [pc, #88]	@ (80077d8 <pvPortMalloc+0x190>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a17      	ldr	r2, [pc, #92]	@ (80077e0 <pvPortMalloc+0x198>)
 8007784:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007788:	685a      	ldr	r2, [r3, #4]
 800778a:	4b12      	ldr	r3, [pc, #72]	@ (80077d4 <pvPortMalloc+0x18c>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	431a      	orrs	r2, r3
 8007790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007792:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007796:	2200      	movs	r2, #0
 8007798:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800779a:	f7fe fcdd 	bl	8006158 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	f003 0307 	and.w	r3, r3, #7
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00d      	beq.n	80077c4 <pvPortMalloc+0x17c>
	__asm volatile
 80077a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ac:	b672      	cpsid	i
 80077ae:	f383 8811 	msr	BASEPRI, r3
 80077b2:	f3bf 8f6f 	isb	sy
 80077b6:	f3bf 8f4f 	dsb	sy
 80077ba:	b662      	cpsie	i
 80077bc:	60fb      	str	r3, [r7, #12]
}
 80077be:	bf00      	nop
 80077c0:	bf00      	nop
 80077c2:	e7fd      	b.n	80077c0 <pvPortMalloc+0x178>
	return pvReturn;
 80077c4:	69fb      	ldr	r3, [r7, #28]
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3728      	adds	r7, #40	@ 0x28
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	20004b34 	.word	0x20004b34
 80077d4:	20004b40 	.word	0x20004b40
 80077d8:	20004b38 	.word	0x20004b38
 80077dc:	20004b2c 	.word	0x20004b2c
 80077e0:	20004b3c 	.word	0x20004b3c

080077e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b086      	sub	sp, #24
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d04e      	beq.n	8007894 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80077f6:	2308      	movs	r3, #8
 80077f8:	425b      	negs	r3, r3
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	4413      	add	r3, r2
 80077fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	685a      	ldr	r2, [r3, #4]
 8007808:	4b24      	ldr	r3, [pc, #144]	@ (800789c <vPortFree+0xb8>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4013      	ands	r3, r2
 800780e:	2b00      	cmp	r3, #0
 8007810:	d10d      	bne.n	800782e <vPortFree+0x4a>
	__asm volatile
 8007812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007816:	b672      	cpsid	i
 8007818:	f383 8811 	msr	BASEPRI, r3
 800781c:	f3bf 8f6f 	isb	sy
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	b662      	cpsie	i
 8007826:	60fb      	str	r3, [r7, #12]
}
 8007828:	bf00      	nop
 800782a:	bf00      	nop
 800782c:	e7fd      	b.n	800782a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00d      	beq.n	8007852 <vPortFree+0x6e>
	__asm volatile
 8007836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800783a:	b672      	cpsid	i
 800783c:	f383 8811 	msr	BASEPRI, r3
 8007840:	f3bf 8f6f 	isb	sy
 8007844:	f3bf 8f4f 	dsb	sy
 8007848:	b662      	cpsie	i
 800784a:	60bb      	str	r3, [r7, #8]
}
 800784c:	bf00      	nop
 800784e:	bf00      	nop
 8007850:	e7fd      	b.n	800784e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	685a      	ldr	r2, [r3, #4]
 8007856:	4b11      	ldr	r3, [pc, #68]	@ (800789c <vPortFree+0xb8>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4013      	ands	r3, r2
 800785c:	2b00      	cmp	r3, #0
 800785e:	d019      	beq.n	8007894 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d115      	bne.n	8007894 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	685a      	ldr	r2, [r3, #4]
 800786c:	4b0b      	ldr	r3, [pc, #44]	@ (800789c <vPortFree+0xb8>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	43db      	mvns	r3, r3
 8007872:	401a      	ands	r2, r3
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007878:	f7fe fc60 	bl	800613c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	685a      	ldr	r2, [r3, #4]
 8007880:	4b07      	ldr	r3, [pc, #28]	@ (80078a0 <vPortFree+0xbc>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4413      	add	r3, r2
 8007886:	4a06      	ldr	r2, [pc, #24]	@ (80078a0 <vPortFree+0xbc>)
 8007888:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800788a:	6938      	ldr	r0, [r7, #16]
 800788c:	f000 f86c 	bl	8007968 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007890:	f7fe fc62 	bl	8006158 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007894:	bf00      	nop
 8007896:	3718      	adds	r7, #24
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	20004b40 	.word	0x20004b40
 80078a0:	20004b38 	.word	0x20004b38

080078a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80078aa:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80078ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80078b0:	4b27      	ldr	r3, [pc, #156]	@ (8007950 <prvHeapInit+0xac>)
 80078b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f003 0307 	and.w	r3, r3, #7
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00c      	beq.n	80078d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	3307      	adds	r3, #7
 80078c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f023 0307 	bic.w	r3, r3, #7
 80078ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80078cc:	68ba      	ldr	r2, [r7, #8]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	4a1f      	ldr	r2, [pc, #124]	@ (8007950 <prvHeapInit+0xac>)
 80078d4:	4413      	add	r3, r2
 80078d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80078dc:	4a1d      	ldr	r2, [pc, #116]	@ (8007954 <prvHeapInit+0xb0>)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80078e2:	4b1c      	ldr	r3, [pc, #112]	@ (8007954 <prvHeapInit+0xb0>)
 80078e4:	2200      	movs	r2, #0
 80078e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	4413      	add	r3, r2
 80078ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80078f0:	2208      	movs	r2, #8
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	1a9b      	subs	r3, r3, r2
 80078f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f023 0307 	bic.w	r3, r3, #7
 80078fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	4a15      	ldr	r2, [pc, #84]	@ (8007958 <prvHeapInit+0xb4>)
 8007904:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007906:	4b14      	ldr	r3, [pc, #80]	@ (8007958 <prvHeapInit+0xb4>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2200      	movs	r2, #0
 800790c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800790e:	4b12      	ldr	r3, [pc, #72]	@ (8007958 <prvHeapInit+0xb4>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2200      	movs	r2, #0
 8007914:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	1ad2      	subs	r2, r2, r3
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007924:	4b0c      	ldr	r3, [pc, #48]	@ (8007958 <prvHeapInit+0xb4>)
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	4a0a      	ldr	r2, [pc, #40]	@ (800795c <prvHeapInit+0xb8>)
 8007932:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	4a09      	ldr	r2, [pc, #36]	@ (8007960 <prvHeapInit+0xbc>)
 800793a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800793c:	4b09      	ldr	r3, [pc, #36]	@ (8007964 <prvHeapInit+0xc0>)
 800793e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007942:	601a      	str	r2, [r3, #0]
}
 8007944:	bf00      	nop
 8007946:	3714      	adds	r7, #20
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr
 8007950:	20000f2c 	.word	0x20000f2c
 8007954:	20004b2c 	.word	0x20004b2c
 8007958:	20004b34 	.word	0x20004b34
 800795c:	20004b3c 	.word	0x20004b3c
 8007960:	20004b38 	.word	0x20004b38
 8007964:	20004b40 	.word	0x20004b40

08007968 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007970:	4b28      	ldr	r3, [pc, #160]	@ (8007a14 <prvInsertBlockIntoFreeList+0xac>)
 8007972:	60fb      	str	r3, [r7, #12]
 8007974:	e002      	b.n	800797c <prvInsertBlockIntoFreeList+0x14>
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	60fb      	str	r3, [r7, #12]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	429a      	cmp	r2, r3
 8007984:	d8f7      	bhi.n	8007976 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	68ba      	ldr	r2, [r7, #8]
 8007990:	4413      	add	r3, r2
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	429a      	cmp	r2, r3
 8007996:	d108      	bne.n	80079aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	685a      	ldr	r2, [r3, #4]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	441a      	add	r2, r3
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	68ba      	ldr	r2, [r7, #8]
 80079b4:	441a      	add	r2, r3
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d118      	bne.n	80079f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	4b15      	ldr	r3, [pc, #84]	@ (8007a18 <prvInsertBlockIntoFreeList+0xb0>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d00d      	beq.n	80079e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	685a      	ldr	r2, [r3, #4]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	441a      	add	r2, r3
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	601a      	str	r2, [r3, #0]
 80079e4:	e008      	b.n	80079f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80079e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007a18 <prvInsertBlockIntoFreeList+0xb0>)
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	601a      	str	r2, [r3, #0]
 80079ee:	e003      	b.n	80079f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d002      	beq.n	8007a06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a06:	bf00      	nop
 8007a08:	3714      	adds	r7, #20
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	20004b2c 	.word	0x20004b2c
 8007a18:	20004b34 	.word	0x20004b34

08007a1c <memset>:
 8007a1c:	4402      	add	r2, r0
 8007a1e:	4603      	mov	r3, r0
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d100      	bne.n	8007a26 <memset+0xa>
 8007a24:	4770      	bx	lr
 8007a26:	f803 1b01 	strb.w	r1, [r3], #1
 8007a2a:	e7f9      	b.n	8007a20 <memset+0x4>

08007a2c <__libc_init_array>:
 8007a2c:	b570      	push	{r4, r5, r6, lr}
 8007a2e:	4d0d      	ldr	r5, [pc, #52]	@ (8007a64 <__libc_init_array+0x38>)
 8007a30:	4c0d      	ldr	r4, [pc, #52]	@ (8007a68 <__libc_init_array+0x3c>)
 8007a32:	1b64      	subs	r4, r4, r5
 8007a34:	10a4      	asrs	r4, r4, #2
 8007a36:	2600      	movs	r6, #0
 8007a38:	42a6      	cmp	r6, r4
 8007a3a:	d109      	bne.n	8007a50 <__libc_init_array+0x24>
 8007a3c:	4d0b      	ldr	r5, [pc, #44]	@ (8007a6c <__libc_init_array+0x40>)
 8007a3e:	4c0c      	ldr	r4, [pc, #48]	@ (8007a70 <__libc_init_array+0x44>)
 8007a40:	f000 f826 	bl	8007a90 <_init>
 8007a44:	1b64      	subs	r4, r4, r5
 8007a46:	10a4      	asrs	r4, r4, #2
 8007a48:	2600      	movs	r6, #0
 8007a4a:	42a6      	cmp	r6, r4
 8007a4c:	d105      	bne.n	8007a5a <__libc_init_array+0x2e>
 8007a4e:	bd70      	pop	{r4, r5, r6, pc}
 8007a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a54:	4798      	blx	r3
 8007a56:	3601      	adds	r6, #1
 8007a58:	e7ee      	b.n	8007a38 <__libc_init_array+0xc>
 8007a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a5e:	4798      	blx	r3
 8007a60:	3601      	adds	r6, #1
 8007a62:	e7f2      	b.n	8007a4a <__libc_init_array+0x1e>
 8007a64:	08007b48 	.word	0x08007b48
 8007a68:	08007b48 	.word	0x08007b48
 8007a6c:	08007b48 	.word	0x08007b48
 8007a70:	08007b4c 	.word	0x08007b4c

08007a74 <memcpy>:
 8007a74:	440a      	add	r2, r1
 8007a76:	4291      	cmp	r1, r2
 8007a78:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a7c:	d100      	bne.n	8007a80 <memcpy+0xc>
 8007a7e:	4770      	bx	lr
 8007a80:	b510      	push	{r4, lr}
 8007a82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a8a:	4291      	cmp	r1, r2
 8007a8c:	d1f9      	bne.n	8007a82 <memcpy+0xe>
 8007a8e:	bd10      	pop	{r4, pc}

08007a90 <_init>:
 8007a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a92:	bf00      	nop
 8007a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a96:	bc08      	pop	{r3}
 8007a98:	469e      	mov	lr, r3
 8007a9a:	4770      	bx	lr

08007a9c <_fini>:
 8007a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a9e:	bf00      	nop
 8007aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aa2:	bc08      	pop	{r3}
 8007aa4:	469e      	mov	lr, r3
 8007aa6:	4770      	bx	lr
